
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f9a0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003620  0800fb80  0800fb80  0001fb80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131a0  080131a0  00030250  2**0
                  CONTENTS
  4 .ARM          00000008  080131a0  080131a0  000231a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080131a8  080131a8  00030250  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131a8  080131a8  000231a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080131ac  080131ac  000231ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000250  20000000  080131b0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d14  20000250  08013400  00030250  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000f64  08013400  00030f64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030250  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY
 13 .debug_info   000204b2  00000000  00000000  000302c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004061  00000000  00000000  00050775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d40  00000000  00000000  000547d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000168c  00000000  00000000  00056518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023945  00000000  00000000  00057ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023bf1  00000000  00000000  0007b4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e42cc  00000000  00000000  0009f0da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000091f8  00000000  00000000  001833a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0018c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000250 	.word	0x20000250
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800fb68 	.word	0x0800fb68

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000254 	.word	0x20000254
 800021c:	0800fb68 	.word	0x0800fb68

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

PID_TypeDef TPID;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	tx_done = 1;
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_UART_TxCpltCallback+0x1c>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	2000001d 	.word	0x2000001d

08000ff4 <get_mean_ADC_reading>:

/* Returns the average of 100 readings of the index+4*n value in the ADC_buffer vector */
float get_mean_ADC_reading(uint8_t index){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <get_mean_ADC_reading+0x68>)
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
	for(int n=index;n<400;n=n+4){
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e012      	b.n	8001032 <get_mean_ADC_reading+0x3e>
		ADC_filter_mean += ADC_buffer[n];
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <get_mean_ADC_reading+0x6c>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <get_mean_ADC_reading+0x68>)
 800101e:	edd3 7a00 	vldr	s15, [r3]
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <get_mean_ADC_reading+0x68>)
 8001028:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<400;n=n+4){
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3304      	adds	r3, #4
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001038:	dbe8      	blt.n	800100c <get_mean_ADC_reading+0x18>
	}
	return ADC_filter_mean/100.0;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <get_mean_ADC_reading+0x68>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001064 <get_mean_ADC_reading+0x70>
 8001044:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001048:	eef0 7a66 	vmov.f32	s15, s13
}
 800104c:	eeb0 0a67 	vmov.f32	s0, s15
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200002cc 	.word	0x200002cc
 8001060:	200002d0 	.word	0x200002d0
 8001064:	42c80000 	.word	0x42c80000

08001068 <get_bus_voltage>:

void get_bus_voltage(){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	/* Index 3 is bus Voltage */
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading(3), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 800106c:	2003      	movs	r0, #3
 800106e:	f7ff ffc1 	bl	8000ff4 <get_mean_ADC_reading>
 8001072:	eef0 7a40 	vmov.f32	s15, s0
 8001076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <get_bus_voltage+0x48>)
 800107c:	ee17 0a90 	vmov	r0, s15
 8001080:	f001 fc66 	bl	8002950 <Moving_Average_Compute>
 8001084:	ec51 0b10 	vmov	r0, r1, d0
 8001088:	a307      	add	r3, pc, #28	; (adr r3, 80010a8 <get_bus_voltage+0x40>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fadb 	bl	8000648 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fdcd 	bl	8000c38 <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <get_bus_voltage+0x4c>)
 80010a2:	6113      	str	r3, [r2, #16]
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	48b35add 	.word	0x48b35add
 80010ac:	3f7a91e4 	.word	0x3f7a91e4
 80010b0:	200007a8 	.word	0x200007a8
 80010b4:	20000020 	.word	0x20000020

080010b8 <get_actual_temperature>:

void get_actual_temperature(){
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	float TC_temperature_temp = Moving_Average_Compute(get_mean_ADC_reading(0), &actual_temperature_filter_struct);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff ff98 	bl	8000ff4 <get_mean_ADC_reading>
 80010c4:	eef0 7a40 	vmov.f32	s15, s0
 80010c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010cc:	497a      	ldr	r1, [pc, #488]	; (80012b8 <get_actual_temperature+0x200>)
 80010ce:	ee17 0a90 	vmov	r0, s15
 80010d2:	f001 fc3d 	bl	8002950 <Moving_Average_Compute>
 80010d6:	ec53 2b10 	vmov	r2, r3, d0
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fdab 	bl	8000c38 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	607b      	str	r3, [r7, #4]

	if(handle == T210){
 80010e6:	4b75      	ldr	r3, [pc, #468]	; (80012bc <get_actual_temperature+0x204>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d14e      	bne.n	800118c <get_actual_temperature+0xd4>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 + pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fa52 	bl	8000598 <__aeabi_f2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8001260 <get_actual_temperature+0x1a8>
 80010fc:	ec43 2b10 	vmov	d0, r2, r3
 8001100:	f00d fdfa 	bl	800ecf8 <pow>
 8001104:	ec51 0b10 	vmov	r0, r1, d0
 8001108:	a357      	add	r3, pc, #348	; (adr r3, 8001268 <get_actual_temperature+0x1b0>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fa9b 	bl	8000648 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4614      	mov	r4, r2
 8001118:	461d      	mov	r5, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fa3c 	bl	8000598 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8001270 <get_actual_temperature+0x1b8>
 8001128:	ec43 2b10 	vmov	d0, r2, r3
 800112c:	f00d fde4 	bl	800ecf8 <pow>
 8001130:	ec51 0b10 	vmov	r0, r1, d0
 8001134:	a350      	add	r3, pc, #320	; (adr r3, 8001278 <get_actual_temperature+0x1c0>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff fa85 	bl	8000648 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4620      	mov	r0, r4
 8001144:	4629      	mov	r1, r5
 8001146:	f7ff f8c9 	bl	80002dc <__adddf3>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4614      	mov	r4, r2
 8001150:	461d      	mov	r5, r3
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fa20 	bl	8000598 <__aeabi_f2d>
 8001158:	a349      	add	r3, pc, #292	; (adr r3, 8001280 <get_actual_temperature+0x1c8>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fa73 	bl	8000648 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4620      	mov	r0, r4
 8001168:	4629      	mov	r1, r5
 800116a:	f7ff f8b7 	bl	80002dc <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	a344      	add	r3, pc, #272	; (adr r3, 8001288 <get_actual_temperature+0x1d0>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff f8ae 	bl	80002dc <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	494e      	ldr	r1, [pc, #312]	; (80012c0 <get_actual_temperature+0x208>)
 8001186:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800118a:	e051      	b.n	8001230 <get_actual_temperature+0x178>
	}
	else if(handle == T245){
 800118c:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <get_actual_temperature+0x204>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d14d      	bne.n	8001230 <get_actual_temperature+0x178>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 + pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff f9ff 	bl	8000598 <__aeabi_f2d>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001260 <get_actual_temperature+0x1a8>
 80011a2:	ec43 2b10 	vmov	d0, r2, r3
 80011a6:	f00d fda7 	bl	800ecf8 <pow>
 80011aa:	ec51 0b10 	vmov	r0, r1, d0
 80011ae:	a338      	add	r3, pc, #224	; (adr r3, 8001290 <get_actual_temperature+0x1d8>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fa48 	bl	8000648 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4614      	mov	r4, r2
 80011be:	461d      	mov	r5, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff f9e9 	bl	8000598 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001270 <get_actual_temperature+0x1b8>
 80011ce:	ec43 2b10 	vmov	d0, r2, r3
 80011d2:	f00d fd91 	bl	800ecf8 <pow>
 80011d6:	ec51 0b10 	vmov	r0, r1, d0
 80011da:	a32f      	add	r3, pc, #188	; (adr r3, 8001298 <get_actual_temperature+0x1e0>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa32 	bl	8000648 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff f876 	bl	80002dc <__adddf3>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4614      	mov	r4, r2
 80011f6:	461d      	mov	r5, r3
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff f9cd 	bl	8000598 <__aeabi_f2d>
 80011fe:	a328      	add	r3, pc, #160	; (adr r3, 80012a0 <get_actual_temperature+0x1e8>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fa20 	bl	8000648 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4620      	mov	r0, r4
 800120e:	4629      	mov	r1, r5
 8001210:	f7ff f864 	bl	80002dc <__adddf3>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	a322      	add	r3, pc, #136	; (adr r3, 80012a8 <get_actual_temperature+0x1f0>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f85b 	bl	80002dc <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4925      	ldr	r1, [pc, #148]	; (80012c0 <get_actual_temperature+0x208>)
 800122c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(sensor_values.actual_temperature > 999){
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <get_actual_temperature+0x208>)
 8001232:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001236:	a31e      	add	r3, pc, #120	; (adr r3, 80012b0 <get_actual_temperature+0x1f8>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fc94 	bl	8000b68 <__aeabi_dcmpgt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d100      	bne.n	8001248 <get_actual_temperature+0x190>
		sensor_values.actual_temperature = 999;
	}
}
 8001246:	e005      	b.n	8001254 <get_actual_temperature+0x19c>
		sensor_values.actual_temperature = 999;
 8001248:	491d      	ldr	r1, [pc, #116]	; (80012c0 <get_actual_temperature+0x208>)
 800124a:	a319      	add	r3, pc, #100	; (adr r3, 80012b0 <get_actual_temperature+0x1f8>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bdb0      	pop	{r4, r5, r7, pc}
 800125c:	f3af 8000 	nop.w
 8001260:	00000000 	.word	0x00000000
 8001264:	40080000 	.word	0x40080000
 8001268:	e6c91459 	.word	0xe6c91459
 800126c:	be3d333c 	.word	0xbe3d333c
 8001270:	00000000 	.word	0x00000000
 8001274:	40000000 	.word	0x40000000
 8001278:	77c4dab0 	.word	0x77c4dab0
 800127c:	bed98561 	.word	0xbed98561
 8001280:	0aa653bc 	.word	0x0aa653bc
 8001284:	3fd1585a 	.word	0x3fd1585a
 8001288:	d797deed 	.word	0xd797deed
 800128c:	40396624 	.word	0x40396624
 8001290:	b4effad8 	.word	0xb4effad8
 8001294:	3e21f933 	.word	0x3e21f933
 8001298:	c7e1dac1 	.word	0xc7e1dac1
 800129c:	bee97525 	.word	0xbee97525
 80012a0:	8d8ee863 	.word	0x8d8ee863
 80012a4:	3fbe16b0 	.word	0x3fbe16b0
 80012a8:	7373b751 	.word	0x7373b751
 80012ac:	40390d47 	.word	0x40390d47
 80012b0:	00000000 	.word	0x00000000
 80012b4:	408f3800 	.word	0x408f3800
 80012b8:	20000600 	.word	0x20000600
 80012bc:	2000026c 	.word	0x2000026c
 80012c0:	20000020 	.word	0x20000020
 80012c4:	00000000 	.word	0x00000000

080012c8 <get_ambient_temp>:

void get_ambient_temp(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	//Index 2 is PCB temp
	sensor_values.ambient_temperature = ((Moving_Average_Compute(get_mean_ADC_reading(2), &ambient_temperature_filter_struct)*AMBIENT_TEMP_COMPENSATION)-0.4)/0.0195;
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff fe91 	bl	8000ff4 <get_mean_ADC_reading>
 80012d2:	eef0 7a40 	vmov.f32	s15, s0
 80012d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012da:	491b      	ldr	r1, [pc, #108]	; (8001348 <get_ambient_temp+0x80>)
 80012dc:	ee17 0a90 	vmov	r0, s15
 80012e0:	f001 fb36 	bl	8002950 <Moving_Average_Compute>
 80012e4:	ec51 0b10 	vmov	r0, r1, d0
 80012e8:	a311      	add	r3, pc, #68	; (adr r3, 8001330 <get_ambient_temp+0x68>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f9ab 	bl	8000648 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	a30f      	add	r3, pc, #60	; (adr r3, 8001338 <get_ambient_temp+0x70>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7fe ffea 	bl	80002d8 <__aeabi_dsub>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	a30c      	add	r3, pc, #48	; (adr r3, 8001340 <get_ambient_temp+0x78>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fac3 	bl	800089c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc8b 	bl	8000c38 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <get_ambient_temp+0x84>)
 8001326:	6253      	str	r3, [r2, #36]	; 0x24
	//• Positive slope sensor gain, offset (typical):
	//– 19.5 mV/°C, 400 mV at 0°C (TMP236-Q1) From data sheet
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	f3af 8000 	nop.w
 8001330:	e3fc03eb 	.word	0xe3fc03eb
 8001334:	3f4a680c 	.word	0x3f4a680c
 8001338:	9999999a 	.word	0x9999999a
 800133c:	3fd99999 	.word	0x3fd99999
 8001340:	d916872b 	.word	0xd916872b
 8001344:	3f93f7ce 	.word	0x3f93f7ce
 8001348:	200006d4 	.word	0x200006d4
 800134c:	20000020 	.word	0x20000020

08001350 <debugPrint>:

void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
    tx_done = 0;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <debugPrint+0x38>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7fe ffad 	bl	80002c0 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29b      	uxth	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f008 f8fa 	bl	8009568 <HAL_UART_Transmit_IT>
	while(!tx_done);
 8001374:	bf00      	nop
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <debugPrint+0x38>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0fb      	beq.n	8001376 <debugPrint+0x26>
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000001d 	.word	0x2000001d

0800138c <init_OLED>:

/* Initiate OLED display */
void init_OLED(){
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af02      	add	r7, sp, #8
	OLED_1in5_Init();
 8001392:	f00a fd27 	bl	800bde4 <OLED_1in5_Init>
	Driver_Delay_ms(500);
 8001396:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800139a:	f009 fce1 	bl	800ad60 <Driver_Delay_ms>
	OLED_1in5_Clear();
 800139e:	f00a fd6d 	bl	800be7c <OLED_1in5_Clear>

	//0.Create a new image cache
	UBYTE *BlackImage;
	UWORD Imagesize = ((OLED_1in5_WIDTH%2==0)? (OLED_1in5_WIDTH/2): (OLED_1in5_WIDTH/2+1)) * OLED_1in5_HEIGHT;
 80013a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a6:	80fb      	strh	r3, [r7, #6]
	if((black_image = (UBYTE *)malloc(image_size)) == NULL) {
 80013a8:	4b14      	ldr	r3, [pc, #80]	; (80013fc <init_OLED+0x70>)
 80013aa:	881b      	ldrh	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f00a fdaf 	bl	800bf10 <malloc>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b12      	ldr	r3, [pc, #72]	; (8001400 <init_OLED+0x74>)
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <init_OLED+0x74>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d018      	beq.n	80013f4 <init_OLED+0x68>
		return;
	}
	Paint_NewImage(black_image, OLED_1in5_WIDTH, OLED_1in5_HEIGHT, 270, BLACK);
 80013c2:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <init_OLED+0x74>)
 80013c4:	6818      	ldr	r0, [r3, #0]
 80013c6:	2300      	movs	r3, #0
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80013ce:	2280      	movs	r2, #128	; 0x80
 80013d0:	2180      	movs	r1, #128	; 0x80
 80013d2:	f009 fcd1 	bl	800ad78 <Paint_NewImage>
	Paint_SetScale(16);
 80013d6:	2010      	movs	r0, #16
 80013d8:	f009 fd34 	bl	800ae44 <Paint_SetScale>

	//1.Select Image
	Paint_SelectImage(black_image);
 80013dc:	4b08      	ldr	r3, [pc, #32]	; (8001400 <init_OLED+0x74>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f009 fd1f 	bl	800ae24 <Paint_SelectImage>
	Paint_Clear(BLACK);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f009 ff16 	bl	800b218 <Paint_Clear>
	Driver_Delay_ms(200);
 80013ec:	20c8      	movs	r0, #200	; 0xc8
 80013ee:	f009 fcb7 	bl	800ad60 <Driver_Delay_ms>
 80013f2:	e000      	b.n	80013f6 <init_OLED+0x6a>
		return;
 80013f4:	bf00      	nop
}
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000000 	.word	0x20000000
 8001400:	20000270 	.word	0x20000270

08001404 <update_OLED>:

void update_OLED(){
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af04      	add	r7, sp, #16
	Paint_DrawString_EN(0, 0, " AxxSolder ", &Font16, 0x00, 0xff);
 800140a:	23ff      	movs	r3, #255	; 0xff
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	4bad      	ldr	r3, [pc, #692]	; (80016c8 <update_OLED+0x2c4>)
 8001414:	4aad      	ldr	r2, [pc, #692]	; (80016cc <update_OLED+0x2c8>)
 8001416:	2100      	movs	r1, #0
 8001418:	2000      	movs	r0, #0
 800141a:	f00a fbc7 	bl	800bbac <Paint_DrawString_EN>
    Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 800141e:	2300      	movs	r3, #0
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	2302      	movs	r3, #2
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142a:	9300      	str	r3, [sp, #0]
 800142c:	2310      	movs	r3, #16
 800142e:	227f      	movs	r2, #127	; 0x7f
 8001430:	2110      	movs	r1, #16
 8001432:	2000      	movs	r0, #0
 8001434:	f00a f846 	bl	800b4c4 <Paint_DrawLine>

	Paint_DrawString_EN(3, 20, "Set temp", &Font16, 0x00, 0xff);
 8001438:	23ff      	movs	r3, #255	; 0xff
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	2300      	movs	r3, #0
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	4ba1      	ldr	r3, [pc, #644]	; (80016c8 <update_OLED+0x2c4>)
 8001442:	4aa3      	ldr	r2, [pc, #652]	; (80016d0 <update_OLED+0x2cc>)
 8001444:	2114      	movs	r1, #20
 8001446:	2003      	movs	r0, #3
 8001448:	f00a fbb0 	bl	800bbac <Paint_DrawString_EN>
	memset(&buffer, '\0', sizeof(buffer));
 800144c:	2228      	movs	r2, #40	; 0x28
 800144e:	2100      	movs	r1, #0
 8001450:	48a0      	ldr	r0, [pc, #640]	; (80016d4 <update_OLED+0x2d0>)
 8001452:	f00b fc9f 	bl	800cd94 <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001456:	4ba0      	ldr	r3, [pc, #640]	; (80016d8 <update_OLED+0x2d4>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	499f      	ldr	r1, [pc, #636]	; (80016dc <update_OLED+0x2d8>)
 800145e:	489d      	ldr	r0, [pc, #628]	; (80016d4 <update_OLED+0x2d0>)
 8001460:	f00b fba0 	bl	800cba4 <siprintf>
	Paint_DrawString_EN(3, 32, buffer, &Font24,  0x0, 0xff);
 8001464:	23ff      	movs	r3, #255	; 0xff
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	2300      	movs	r3, #0
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	4b9c      	ldr	r3, [pc, #624]	; (80016e0 <update_OLED+0x2dc>)
 800146e:	4a99      	ldr	r2, [pc, #612]	; (80016d4 <update_OLED+0x2d0>)
 8001470:	2120      	movs	r1, #32
 8001472:	2003      	movs	r0, #3
 8001474:	f00a fb9a 	bl	800bbac <Paint_DrawString_EN>
	Paint_DrawCircle(67, 37, 2, WHITE, 1, DRAW_FILL_EMPTY);
 8001478:	2300      	movs	r3, #0
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	2301      	movs	r3, #1
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001484:	2202      	movs	r2, #2
 8001486:	2125      	movs	r1, #37	; 0x25
 8001488:	2043      	movs	r0, #67	; 0x43
 800148a:	f00a f959 	bl	800b740 <Paint_DrawCircle>
	Paint_DrawString_EN(70, 32, "C", &Font24,  0x0, 0xff);
 800148e:	23ff      	movs	r3, #255	; 0xff
 8001490:	9301      	str	r3, [sp, #4]
 8001492:	2300      	movs	r3, #0
 8001494:	9300      	str	r3, [sp, #0]
 8001496:	4b92      	ldr	r3, [pc, #584]	; (80016e0 <update_OLED+0x2dc>)
 8001498:	4a92      	ldr	r2, [pc, #584]	; (80016e4 <update_OLED+0x2e0>)
 800149a:	2120      	movs	r1, #32
 800149c:	2046      	movs	r0, #70	; 0x46
 800149e:	f00a fb85 	bl	800bbac <Paint_DrawString_EN>

	Paint_DrawString_EN(3, 58, "Act temp", &Font16, 0x00, 0xff);
 80014a2:	23ff      	movs	r3, #255	; 0xff
 80014a4:	9301      	str	r3, [sp, #4]
 80014a6:	2300      	movs	r3, #0
 80014a8:	9300      	str	r3, [sp, #0]
 80014aa:	4b87      	ldr	r3, [pc, #540]	; (80016c8 <update_OLED+0x2c4>)
 80014ac:	4a8e      	ldr	r2, [pc, #568]	; (80016e8 <update_OLED+0x2e4>)
 80014ae:	213a      	movs	r1, #58	; 0x3a
 80014b0:	2003      	movs	r0, #3
 80014b2:	f00a fb7b 	bl	800bbac <Paint_DrawString_EN>
	memset(&buffer, '\0', sizeof(buffer));
 80014b6:	2228      	movs	r2, #40	; 0x28
 80014b8:	2100      	movs	r1, #0
 80014ba:	4886      	ldr	r0, [pc, #536]	; (80016d4 <update_OLED+0x2d0>)
 80014bc:	f00b fc6a 	bl	800cd94 <memset>

	if(sensor_values.actual_temperature >= 500){
 80014c0:	4b85      	ldr	r3, [pc, #532]	; (80016d8 <update_OLED+0x2d4>)
 80014c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	4b88      	ldr	r3, [pc, #544]	; (80016ec <update_OLED+0x2e8>)
 80014cc:	f7ff fb42 	bl	8000b54 <__aeabi_dcmpge>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00a      	beq.n	80014ec <update_OLED+0xe8>
		Paint_DrawString_EN(3, 70, "---", &Font24, 0x0, 0xff);
 80014d6:	23ff      	movs	r3, #255	; 0xff
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	2300      	movs	r3, #0
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	4b80      	ldr	r3, [pc, #512]	; (80016e0 <update_OLED+0x2dc>)
 80014e0:	4a83      	ldr	r2, [pc, #524]	; (80016f0 <update_OLED+0x2ec>)
 80014e2:	2146      	movs	r1, #70	; 0x46
 80014e4:	2003      	movs	r0, #3
 80014e6:	f00a fb61 	bl	800bbac <Paint_DrawString_EN>
 80014ea:	e010      	b.n	800150e <update_OLED+0x10a>
	}
	else{
		sprintf(buffer, "%.f", sensor_values.actual_temperature);
 80014ec:	4b7a      	ldr	r3, [pc, #488]	; (80016d8 <update_OLED+0x2d4>)
 80014ee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014f2:	497a      	ldr	r1, [pc, #488]	; (80016dc <update_OLED+0x2d8>)
 80014f4:	4877      	ldr	r0, [pc, #476]	; (80016d4 <update_OLED+0x2d0>)
 80014f6:	f00b fb55 	bl	800cba4 <siprintf>
		Paint_DrawString_EN(3, 70, buffer, &Font24, 0x0, 0xff);
 80014fa:	23ff      	movs	r3, #255	; 0xff
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	2300      	movs	r3, #0
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	4b77      	ldr	r3, [pc, #476]	; (80016e0 <update_OLED+0x2dc>)
 8001504:	4a73      	ldr	r2, [pc, #460]	; (80016d4 <update_OLED+0x2d0>)
 8001506:	2146      	movs	r1, #70	; 0x46
 8001508:	2003      	movs	r0, #3
 800150a:	f00a fb4f 	bl	800bbac <Paint_DrawString_EN>
	}

	Paint_DrawCircle(67, 75, 2, WHITE, 1, DRAW_FILL_EMPTY);
 800150e:	2300      	movs	r3, #0
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	2301      	movs	r3, #1
 8001514:	9300      	str	r3, [sp, #0]
 8001516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151a:	2202      	movs	r2, #2
 800151c:	214b      	movs	r1, #75	; 0x4b
 800151e:	2043      	movs	r0, #67	; 0x43
 8001520:	f00a f90e 	bl	800b740 <Paint_DrawCircle>
	Paint_DrawString_EN(70, 70, "C", &Font24, 0x0, 0xff);
 8001524:	23ff      	movs	r3, #255	; 0xff
 8001526:	9301      	str	r3, [sp, #4]
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	4b6c      	ldr	r3, [pc, #432]	; (80016e0 <update_OLED+0x2dc>)
 800152e:	4a6d      	ldr	r2, [pc, #436]	; (80016e4 <update_OLED+0x2e0>)
 8001530:	2146      	movs	r1, #70	; 0x46
 8001532:	2046      	movs	r0, #70	; 0x46
 8001534:	f00a fb3a 	bl	800bbac <Paint_DrawString_EN>
	Paint_DrawRectangle(1, 56, 100, 93 , WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8001538:	2300      	movs	r3, #0
 800153a:	9302      	str	r3, [sp, #8]
 800153c:	2301      	movs	r3, #1
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	235d      	movs	r3, #93	; 0x5d
 8001548:	2264      	movs	r2, #100	; 0x64
 800154a:	2138      	movs	r1, #56	; 0x38
 800154c:	2001      	movs	r0, #1
 800154e:	f00a f873 	bl	800b638 <Paint_DrawRectangle>

	Paint_DrawString_EN(0, 96, "HANDLE:", &Font12, 0x00, 0xff);
 8001552:	23ff      	movs	r3, #255	; 0xff
 8001554:	9301      	str	r3, [sp, #4]
 8001556:	2300      	movs	r3, #0
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4b66      	ldr	r3, [pc, #408]	; (80016f4 <update_OLED+0x2f0>)
 800155c:	4a66      	ldr	r2, [pc, #408]	; (80016f8 <update_OLED+0x2f4>)
 800155e:	2160      	movs	r1, #96	; 0x60
 8001560:	2000      	movs	r0, #0
 8001562:	f00a fb23 	bl	800bbac <Paint_DrawString_EN>
	if(handle == T210){
 8001566:	4b65      	ldr	r3, [pc, #404]	; (80016fc <update_OLED+0x2f8>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d10a      	bne.n	8001584 <update_OLED+0x180>
		Paint_DrawString_EN(60, 96, "T210", &Font12, 0x00, 0xff);
 800156e:	23ff      	movs	r3, #255	; 0xff
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	2300      	movs	r3, #0
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <update_OLED+0x2f0>)
 8001578:	4a61      	ldr	r2, [pc, #388]	; (8001700 <update_OLED+0x2fc>)
 800157a:	2160      	movs	r1, #96	; 0x60
 800157c:	203c      	movs	r0, #60	; 0x3c
 800157e:	f00a fb15 	bl	800bbac <Paint_DrawString_EN>
 8001582:	e00d      	b.n	80015a0 <update_OLED+0x19c>
	}
	else if(handle == T245){
 8001584:	4b5d      	ldr	r3, [pc, #372]	; (80016fc <update_OLED+0x2f8>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d109      	bne.n	80015a0 <update_OLED+0x19c>
		Paint_DrawString_EN(60, 96, "T245", &Font12, 0x00, 0xff);
 800158c:	23ff      	movs	r3, #255	; 0xff
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	2300      	movs	r3, #0
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <update_OLED+0x2f0>)
 8001596:	4a5b      	ldr	r2, [pc, #364]	; (8001704 <update_OLED+0x300>)
 8001598:	2160      	movs	r1, #96	; 0x60
 800159a:	203c      	movs	r0, #60	; 0x3c
 800159c:	f00a fb06 	bl	800bbac <Paint_DrawString_EN>
	}

	Paint_DrawString_EN(0, 109, "INPUT VOLTAGE:", &Font8, 0x00, 0xff);
 80015a0:	23ff      	movs	r3, #255	; 0xff
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	2300      	movs	r3, #0
 80015a6:	9300      	str	r3, [sp, #0]
 80015a8:	4b57      	ldr	r3, [pc, #348]	; (8001708 <update_OLED+0x304>)
 80015aa:	4a58      	ldr	r2, [pc, #352]	; (800170c <update_OLED+0x308>)
 80015ac:	216d      	movs	r1, #109	; 0x6d
 80015ae:	2000      	movs	r0, #0
 80015b0:	f00a fafc 	bl	800bbac <Paint_DrawString_EN>
	Paint_DrawString_EN(0, 118, "AMB TEMP:     POWER ->", &Font8, 0x00, 0xff);
 80015b4:	23ff      	movs	r3, #255	; 0xff
 80015b6:	9301      	str	r3, [sp, #4]
 80015b8:	2300      	movs	r3, #0
 80015ba:	9300      	str	r3, [sp, #0]
 80015bc:	4b52      	ldr	r3, [pc, #328]	; (8001708 <update_OLED+0x304>)
 80015be:	4a54      	ldr	r2, [pc, #336]	; (8001710 <update_OLED+0x30c>)
 80015c0:	2176      	movs	r1, #118	; 0x76
 80015c2:	2000      	movs	r0, #0
 80015c4:	f00a faf2 	bl	800bbac <Paint_DrawString_EN>

	memset(&buffer, '\0', sizeof(buffer));
 80015c8:	2228      	movs	r2, #40	; 0x28
 80015ca:	2100      	movs	r1, #0
 80015cc:	4841      	ldr	r0, [pc, #260]	; (80016d4 <update_OLED+0x2d0>)
 80015ce:	f00b fbe1 	bl	800cd94 <memset>
	sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 80015d2:	4b41      	ldr	r3, [pc, #260]	; (80016d8 <update_OLED+0x2d4>)
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	4618      	mov	r0, r3
 80015d8:	f7fe ffde 	bl	8000598 <__aeabi_f2d>
 80015dc:	4602      	mov	r2, r0
 80015de:	460b      	mov	r3, r1
 80015e0:	494c      	ldr	r1, [pc, #304]	; (8001714 <update_OLED+0x310>)
 80015e2:	483c      	ldr	r0, [pc, #240]	; (80016d4 <update_OLED+0x2d0>)
 80015e4:	f00b fade 	bl	800cba4 <siprintf>
	Paint_DrawString_EN(75, 109, buffer, &Font8, 0x0, 0xff);
 80015e8:	23ff      	movs	r3, #255	; 0xff
 80015ea:	9301      	str	r3, [sp, #4]
 80015ec:	2300      	movs	r3, #0
 80015ee:	9300      	str	r3, [sp, #0]
 80015f0:	4b45      	ldr	r3, [pc, #276]	; (8001708 <update_OLED+0x304>)
 80015f2:	4a38      	ldr	r2, [pc, #224]	; (80016d4 <update_OLED+0x2d0>)
 80015f4:	216d      	movs	r1, #109	; 0x6d
 80015f6:	204b      	movs	r0, #75	; 0x4b
 80015f8:	f00a fad8 	bl	800bbac <Paint_DrawString_EN>

	memset(&buffer, '\0', sizeof(buffer));
 80015fc:	2228      	movs	r2, #40	; 0x28
 80015fe:	2100      	movs	r1, #0
 8001600:	4834      	ldr	r0, [pc, #208]	; (80016d4 <update_OLED+0x2d0>)
 8001602:	f00b fbc7 	bl	800cd94 <memset>
	sprintf(buffer, "%.1f", sensor_values.ambient_temperature);
 8001606:	4b34      	ldr	r3, [pc, #208]	; (80016d8 <update_OLED+0x2d4>)
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	4618      	mov	r0, r3
 800160c:	f7fe ffc4 	bl	8000598 <__aeabi_f2d>
 8001610:	4602      	mov	r2, r0
 8001612:	460b      	mov	r3, r1
 8001614:	493f      	ldr	r1, [pc, #252]	; (8001714 <update_OLED+0x310>)
 8001616:	482f      	ldr	r0, [pc, #188]	; (80016d4 <update_OLED+0x2d0>)
 8001618:	f00b fac4 	bl	800cba4 <siprintf>
	Paint_DrawString_EN(45, 118, buffer, &Font8, 0x0, 0xff);
 800161c:	23ff      	movs	r3, #255	; 0xff
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	2300      	movs	r3, #0
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4b38      	ldr	r3, [pc, #224]	; (8001708 <update_OLED+0x304>)
 8001626:	4a2b      	ldr	r2, [pc, #172]	; (80016d4 <update_OLED+0x2d0>)
 8001628:	2176      	movs	r1, #118	; 0x76
 800162a:	202d      	movs	r0, #45	; 0x2d
 800162c:	f00a fabe 	bl	800bbac <Paint_DrawString_EN>

	Paint_DrawRectangle(116, 25, 128, 128, WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8001630:	2300      	movs	r3, #0
 8001632:	9302      	str	r3, [sp, #8]
 8001634:	2301      	movs	r3, #1
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	2280      	movs	r2, #128	; 0x80
 8001642:	2119      	movs	r1, #25
 8001644:	2074      	movs	r0, #116	; 0x74
 8001646:	f009 fff7 	bl	800b638 <Paint_DrawRectangle>
	if(active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED){
 800164a:	4b33      	ldr	r3, [pc, #204]	; (8001718 <update_OLED+0x314>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d007      	beq.n	8001662 <update_OLED+0x25e>
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <update_OLED+0x314>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d003      	beq.n	8001662 <update_OLED+0x25e>
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <update_OLED+0x314>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d160      	bne.n	8001724 <update_OLED+0x320>
		Paint_DrawString_EN(116, 30,  "Z", &Font16, 0x00, 0xff);
 8001662:	23ff      	movs	r3, #255	; 0xff
 8001664:	9301      	str	r3, [sp, #4]
 8001666:	2300      	movs	r3, #0
 8001668:	9300      	str	r3, [sp, #0]
 800166a:	4b17      	ldr	r3, [pc, #92]	; (80016c8 <update_OLED+0x2c4>)
 800166c:	4a2b      	ldr	r2, [pc, #172]	; (800171c <update_OLED+0x318>)
 800166e:	211e      	movs	r1, #30
 8001670:	2074      	movs	r0, #116	; 0x74
 8001672:	f00a fa9b 	bl	800bbac <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 50,  "z", &Font16, 0x00, 0xff);
 8001676:	23ff      	movs	r3, #255	; 0xff
 8001678:	9301      	str	r3, [sp, #4]
 800167a:	2300      	movs	r3, #0
 800167c:	9300      	str	r3, [sp, #0]
 800167e:	4b12      	ldr	r3, [pc, #72]	; (80016c8 <update_OLED+0x2c4>)
 8001680:	4a27      	ldr	r2, [pc, #156]	; (8001720 <update_OLED+0x31c>)
 8001682:	2132      	movs	r1, #50	; 0x32
 8001684:	2074      	movs	r0, #116	; 0x74
 8001686:	f00a fa91 	bl	800bbac <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 70,  "Z", &Font16, 0x00, 0xff);
 800168a:	23ff      	movs	r3, #255	; 0xff
 800168c:	9301      	str	r3, [sp, #4]
 800168e:	2300      	movs	r3, #0
 8001690:	9300      	str	r3, [sp, #0]
 8001692:	4b0d      	ldr	r3, [pc, #52]	; (80016c8 <update_OLED+0x2c4>)
 8001694:	4a21      	ldr	r2, [pc, #132]	; (800171c <update_OLED+0x318>)
 8001696:	2146      	movs	r1, #70	; 0x46
 8001698:	2074      	movs	r0, #116	; 0x74
 800169a:	f00a fa87 	bl	800bbac <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 90,  "z", &Font16, 0x00, 0xff);
 800169e:	23ff      	movs	r3, #255	; 0xff
 80016a0:	9301      	str	r3, [sp, #4]
 80016a2:	2300      	movs	r3, #0
 80016a4:	9300      	str	r3, [sp, #0]
 80016a6:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <update_OLED+0x2c4>)
 80016a8:	4a1d      	ldr	r2, [pc, #116]	; (8001720 <update_OLED+0x31c>)
 80016aa:	215a      	movs	r1, #90	; 0x5a
 80016ac:	2074      	movs	r0, #116	; 0x74
 80016ae:	f00a fa7d 	bl	800bbac <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 110, "z", &Font16, 0x00, 0xff);
 80016b2:	23ff      	movs	r3, #255	; 0xff
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	2300      	movs	r3, #0
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4b03      	ldr	r3, [pc, #12]	; (80016c8 <update_OLED+0x2c4>)
 80016bc:	4a18      	ldr	r2, [pc, #96]	; (8001720 <update_OLED+0x31c>)
 80016be:	216e      	movs	r1, #110	; 0x6e
 80016c0:	2074      	movs	r0, #116	; 0x74
 80016c2:	f00a fa73 	bl	800bbac <Paint_DrawString_EN>
 80016c6:	e050      	b.n	800176a <update_OLED+0x366>
 80016c8:	2000005c 	.word	0x2000005c
 80016cc:	0800fb80 	.word	0x0800fb80
 80016d0:	0800fb8c 	.word	0x0800fb8c
 80016d4:	200002a0 	.word	0x200002a0
 80016d8:	20000020 	.word	0x20000020
 80016dc:	0800fb98 	.word	0x0800fb98
 80016e0:	20000064 	.word	0x20000064
 80016e4:	0800fb9c 	.word	0x0800fb9c
 80016e8:	0800fba0 	.word	0x0800fba0
 80016ec:	407f4000 	.word	0x407f4000
 80016f0:	0800fbac 	.word	0x0800fbac
 80016f4:	20000054 	.word	0x20000054
 80016f8:	0800fbb0 	.word	0x0800fbb0
 80016fc:	2000026c 	.word	0x2000026c
 8001700:	0800fbb8 	.word	0x0800fbb8
 8001704:	0800fbc0 	.word	0x0800fbc0
 8001708:	2000006c 	.word	0x2000006c
 800170c:	0800fbc8 	.word	0x0800fbc8
 8001710:	0800fbd8 	.word	0x0800fbd8
 8001714:	0800fbf0 	.word	0x0800fbf0
 8001718:	2000001c 	.word	0x2000001c
 800171c:	0800fbf8 	.word	0x0800fbf8
 8001720:	0800fbfc 	.word	0x0800fbfc
	}
	else{
		Paint_DrawRectangle(116, 125-PID_output/10, 128, 128, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <update_OLED+0x37c>)
 8001726:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	4b15      	ldr	r3, [pc, #84]	; (8001784 <update_OLED+0x380>)
 8001730:	f7ff f8b4 	bl	800089c <__aeabi_ddiv>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	f04f 0000 	mov.w	r0, #0
 800173c:	4912      	ldr	r1, [pc, #72]	; (8001788 <update_OLED+0x384>)
 800173e:	f7fe fdcb 	bl	80002d8 <__aeabi_dsub>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff fa55 	bl	8000bf8 <__aeabi_d2uiz>
 800174e:	4603      	mov	r3, r0
 8001750:	b299      	uxth	r1, r3
 8001752:	2301      	movs	r3, #1
 8001754:	9302      	str	r3, [sp, #8]
 8001756:	2301      	movs	r3, #1
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175e:	9300      	str	r3, [sp, #0]
 8001760:	2380      	movs	r3, #128	; 0x80
 8001762:	2280      	movs	r2, #128	; 0x80
 8001764:	2074      	movs	r0, #116	; 0x74
 8001766:	f009 ff67 	bl	800b638 <Paint_DrawRectangle>
	}
	// Show image on page
	OLED_1in5_Display(black_image);
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <update_OLED+0x388>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f00a fb9f 	bl	800beb2 <OLED_1in5_Display>
	Paint_Clear(BLACK);
 8001774:	2000      	movs	r0, #0
 8001776:	f009 fd4f 	bl	800b218 <Paint_Clear>
}
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200005f0 	.word	0x200005f0
 8001784:	40240000 	.word	0x40240000
 8001788:	405f4000 	.word	0x405f4000
 800178c:	20000270 	.word	0x20000270

08001790 <get_set_temperature>:

/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
	if (TIM3->CNT <= MIN_SELECTABLE_TEMPERTURE) {TIM3->CNT = MIN_SELECTABLE_TEMPERTURE; }
 8001794:	4b0d      	ldr	r3, [pc, #52]	; (80017cc <get_set_temperature+0x3c>)
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	2b14      	cmp	r3, #20
 800179a:	d802      	bhi.n	80017a2 <get_set_temperature+0x12>
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <get_set_temperature+0x3c>)
 800179e:	2214      	movs	r2, #20
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
	if (TIM3->CNT >= MAX_SELECTABLE_TEMPERTURE) {TIM3->CNT = MAX_SELECTABLE_TEMPERTURE; }
 80017a2:	4b0a      	ldr	r3, [pc, #40]	; (80017cc <get_set_temperature+0x3c>)
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80017aa:	d303      	bcc.n	80017b4 <get_set_temperature+0x24>
 80017ac:	4b07      	ldr	r3, [pc, #28]	; (80017cc <get_set_temperature+0x3c>)
 80017ae:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24
	sensor_values.set_temperature = TIM3->CNT;
 80017b4:	4b05      	ldr	r3, [pc, #20]	; (80017cc <get_set_temperature+0x3c>)
 80017b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7fe fecb 	bl	8000554 <__aeabi_ui2d>
 80017be:	4602      	mov	r2, r0
 80017c0:	460b      	mov	r3, r1
 80017c2:	4903      	ldr	r1, [pc, #12]	; (80017d0 <get_set_temperature+0x40>)
 80017c4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40000400 	.word	0x40000400
 80017d0:	20000020 	.word	0x20000020

080017d4 <beep_ms>:

void beep_ms(uint16_t beep_time){
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	80fb      	strh	r3, [r7, #6]
	TIM2->CCR1 = 50;
 80017de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e2:	2232      	movs	r2, #50	; 0x32
 80017e4:	635a      	str	r2, [r3, #52]	; 0x34
  	HAL_Delay(beep_time);
 80017e6:	88fb      	ldrh	r3, [r7, #6]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f002 f985 	bl	8003af8 <HAL_Delay>
  	TIM2->CCR1 = 0;
 80017ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017f2:	2200      	movs	r2, #0
 80017f4:	635a      	str	r2, [r3, #52]	; 0x34
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <check_beep>:

void check_beep(){
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	if(beep_requested){
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <check_beep+0x1c>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <check_beep+0x18>
		beep_ms(5);
 800180c:	2005      	movs	r0, #5
 800180e:	f7ff ffe1 	bl	80017d4 <beep_ms>
		beep_requested = 0;
 8001812:	4b02      	ldr	r3, [pc, #8]	; (800181c <check_beep+0x1c>)
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]
	}
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	2000026d 	.word	0x2000026d

08001820 <check_emergency_shutdown>:

void check_emergency_shutdown(){
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	af00      	add	r7, sp, #0
	/* Function to set state to EMERGENCY_SLEEP if iron is in RUN state for longer than EMERGENCY_shutdown_time */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8001824:	4b28      	ldr	r3, [pc, #160]	; (80018c8 <check_emergency_shutdown+0xa8>)
 8001826:	f893 3020 	ldrb.w	r3, [r3, #32]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d008      	beq.n	8001840 <check_emergency_shutdown+0x20>
 800182e:	4b27      	ldr	r3, [pc, #156]	; (80018cc <check_emergency_shutdown+0xac>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d104      	bne.n	8001840 <check_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8001836:	f002 f953 	bl	8003ae0 <HAL_GetTick>
 800183a:	4603      	mov	r3, r0
 800183c:	4a24      	ldr	r2, [pc, #144]	; (80018d0 <check_emergency_shutdown+0xb0>)
 800183e:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= EMERGENCY_shutdown_time) && active_state == RUN){
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <check_emergency_shutdown+0xa8>)
 8001842:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	f7ff f963 	bl	8000b18 <__aeabi_dcmpeq>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d013      	beq.n	8001880 <check_emergency_shutdown+0x60>
 8001858:	f002 f942 	bl	8003ae0 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <check_emergency_shutdown+0xb0>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	1ad2      	subs	r2, r2, r3
 8001864:	4b1b      	ldr	r3, [pc, #108]	; (80018d4 <check_emergency_shutdown+0xb4>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	429a      	cmp	r2, r3
 800186a:	d309      	bcc.n	8001880 <check_emergency_shutdown+0x60>
 800186c:	4b17      	ldr	r3, [pc, #92]	; (80018cc <check_emergency_shutdown+0xac>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d105      	bne.n	8001880 <check_emergency_shutdown+0x60>
		active_state = EMERGENCY_SLEEP;
 8001874:	4b15      	ldr	r3, [pc, #84]	; (80018cc <check_emergency_shutdown+0xac>)
 8001876:	2202      	movs	r2, #2
 8001878:	701a      	strb	r2, [r3, #0]
		beep_requested = 1;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <check_emergency_shutdown+0xb8>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]
	}
	sensor_values.previous_state = active_state;
 8001880:	4b12      	ldr	r3, [pc, #72]	; (80018cc <check_emergency_shutdown+0xac>)
 8001882:	781a      	ldrb	r2, [r3, #0]
 8001884:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <check_emergency_shutdown+0xa8>)
 8001886:	f883 2020 	strb.w	r2, [r3, #32]

	/* Function to set state to EMERGENCY_SLEEP if iron is over 500 deg C */
	if((sensor_values.actual_temperature > EMERGENCY_shutdown_temperature) && (active_state == RUN)){
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <check_emergency_shutdown+0xa8>)
 800188c:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001890:	4b12      	ldr	r3, [pc, #72]	; (80018dc <check_emergency_shutdown+0xbc>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe fe5d 	bl	8000554 <__aeabi_ui2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7ff f961 	bl	8000b68 <__aeabi_dcmpgt>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d100      	bne.n	80018ae <check_emergency_shutdown+0x8e>
		active_state = EMERGENCY_SLEEP;
		beep_requested = 1;
	}
}
 80018ac:	e009      	b.n	80018c2 <check_emergency_shutdown+0xa2>
	if((sensor_values.actual_temperature > EMERGENCY_shutdown_temperature) && (active_state == RUN)){
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <check_emergency_shutdown+0xac>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d105      	bne.n	80018c2 <check_emergency_shutdown+0xa2>
		active_state = EMERGENCY_SLEEP;
 80018b6:	4b05      	ldr	r3, [pc, #20]	; (80018cc <check_emergency_shutdown+0xac>)
 80018b8:	2202      	movs	r2, #2
 80018ba:	701a      	strb	r2, [r3, #0]
		beep_requested = 1;
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <check_emergency_shutdown+0xb8>)
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
}
 80018c2:	bf00      	nop
 80018c4:	bdb0      	pop	{r4, r5, r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000020 	.word	0x20000020
 80018cc:	2000001c 	.word	0x2000001c
 80018d0:	20000284 	.word	0x20000284
 80018d4:	20000014 	.word	0x20000014
 80018d8:	2000026d 	.word	0x2000026d
 80018dc:	20000018 	.word	0x20000018

080018e0 <get_button_status>:

void get_button_status(){
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
	/* Structure to toggle between heating_halted true/false at each press of the encoder button */
	if ((sensor_values.button_pressed == 1) && (sensor_values.button_read == 0)){
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <get_button_status+0x90>)
 80018e6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d127      	bne.n	800193e <get_button_status+0x5e>
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <get_button_status+0x90>)
 80018f0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d122      	bne.n	800193e <get_button_status+0x5e>
		sensor_values.button_read = 1;
 80018f8:	4b1d      	ldr	r3, [pc, #116]	; (8001970 <get_button_status+0x90>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		beep_requested = 1;
 8001900:	4b1c      	ldr	r3, [pc, #112]	; (8001974 <get_button_status+0x94>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if (active_state == RUN){
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <get_button_status+0x98>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d103      	bne.n	8001916 <get_button_status+0x36>
			active_state = HALTED;
 800190e:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <get_button_status+0x98>)
 8001910:	2203      	movs	r2, #3
 8001912:	701a      	strb	r2, [r3, #0]
 8001914:	e00e      	b.n	8001934 <get_button_status+0x54>
		}
		else if (active_state == HALTED){
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <get_button_status+0x98>)
 8001918:	781b      	ldrb	r3, [r3, #0]
 800191a:	2b03      	cmp	r3, #3
 800191c:	d103      	bne.n	8001926 <get_button_status+0x46>
			active_state = RUN;
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <get_button_status+0x98>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	e006      	b.n	8001934 <get_button_status+0x54>
		}
		else if (active_state == EMERGENCY_SLEEP){
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <get_button_status+0x98>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d102      	bne.n	8001934 <get_button_status+0x54>
			active_state = RUN;
 800192e:	4b12      	ldr	r3, [pc, #72]	; (8001978 <get_button_status+0x98>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 8001934:	f002 f8d4 	bl	8003ae0 <HAL_GetTick>
 8001938:	4603      	mov	r3, r0
 800193a:	4a10      	ldr	r2, [pc, #64]	; (800197c <get_button_status+0x9c>)
 800193c:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.button_read == 1) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 800193e:	4b0c      	ldr	r3, [pc, #48]	; (8001970 <get_button_status+0x90>)
 8001940:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001944:	2b01      	cmp	r3, #1
 8001946:	d111      	bne.n	800196c <get_button_status+0x8c>
 8001948:	f002 f8ca 	bl	8003ae0 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <get_button_status+0x9c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	1ad2      	subs	r2, r2, r3
 8001954:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <get_button_status+0xa0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d307      	bcc.n	800196c <get_button_status+0x8c>
		sensor_values.button_pressed = 0;
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <get_button_status+0x90>)
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		sensor_values.button_read = 0;
 8001964:	4b02      	ldr	r3, [pc, #8]	; (8001970 <get_button_status+0x90>)
 8001966:	2200      	movs	r2, #0
 8001968:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	}
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000020 	.word	0x20000020
 8001974:	2000026d 	.word	0x2000026d
 8001978:	2000001c 	.word	0x2000001c
 800197c:	20000280 	.word	0x20000280
 8001980:	20000010 	.word	0x20000010

08001984 <get_stand_status>:

void get_stand_status(){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 800198a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800198e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001992:	f004 ff35 	bl	8006800 <HAL_GPIO_ReadPin>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d102      	bne.n	80019a2 <get_stand_status+0x1e>
		stand_status = 1;
 800199c:	2301      	movs	r3, #1
 800199e:	71fb      	strb	r3, [r7, #7]
 80019a0:	e001      	b.n	80019a6 <get_stand_status+0x22>
	}
	else{
		stand_status = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct);
 80019a6:	79fb      	ldrb	r3, [r7, #7]
 80019a8:	490e      	ldr	r1, [pc, #56]	; (80019e4 <get_stand_status+0x60>)
 80019aa:	4618      	mov	r0, r3
 80019ac:	f000 ffd0 	bl	8002950 <Moving_Average_Compute>
 80019b0:	eeb0 7a40 	vmov.f32	s14, s0
 80019b4:	eef0 7a60 	vmov.f32	s15, s1
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <get_stand_status+0x64>)
 80019ba:	ed83 7b06 	vstr	d7, [r3, #24]

	/* If handle is in stand set state to SLEEP */
	if(sensor_values.in_stand == 1){
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <get_stand_status+0x64>)
 80019c0:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b08      	ldr	r3, [pc, #32]	; (80019ec <get_stand_status+0x68>)
 80019ca:	f7ff f8a5 	bl	8000b18 <__aeabi_dcmpeq>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d100      	bne.n	80019d6 <get_stand_status+0x52>
		active_state = SLEEP;
	}
}
 80019d4:	e002      	b.n	80019dc <get_stand_status+0x58>
		active_state = SLEEP;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <get_stand_status+0x6c>)
 80019d8:	2201      	movs	r2, #1
 80019da:	701a      	strb	r2, [r3, #0]
}
 80019dc:	bf00      	nop
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	2000087c 	.word	0x2000087c
 80019e8:	20000020 	.word	0x20000020
 80019ec:	3ff00000 	.word	0x3ff00000
 80019f0:	2000001c 	.word	0x2000001c

080019f4 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	float handle_status_filtered;
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_Pin) == 0){
 80019fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a02:	f004 fefd 	bl	8006800 <HAL_GPIO_ReadPin>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <get_handle_type+0x1e>
		handle_status = 1;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	71fb      	strb	r3, [r7, #7]
 8001a10:	e001      	b.n	8001a16 <get_handle_type+0x22>
	}
	else{
		handle_status = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	71fb      	strb	r3, [r7, #7]
	}
	/* Moving average filter */
	handle_status_filtered = Moving_Average_Compute(handle_status, &handle_sense_filterStruct);
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4930      	ldr	r1, [pc, #192]	; (8001adc <get_handle_type+0xe8>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 ff98 	bl	8002950 <Moving_Average_Compute>
 8001a20:	ec53 2b10 	vmov	r2, r3, d0
 8001a24:	4610      	mov	r0, r2
 8001a26:	4619      	mov	r1, r3
 8001a28:	f7ff f906 	bl	8000c38 <__aeabi_d2f>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	603b      	str	r3, [r7, #0]

	if(handle_status_filtered > 0.5){
 8001a30:	edd7 7a00 	vldr	s15, [r7]
 8001a34:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001a38:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a40:	dd18      	ble.n	8001a74 <get_handle_type+0x80>
		handle = T210;
 8001a42:	4b27      	ldr	r3, [pc, #156]	; (8001ae0 <get_handle_type+0xec>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
		max_power_watt = 60; //60W
 8001a48:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <get_handle_type+0xf0>)
 8001a4a:	4a27      	ldr	r2, [pc, #156]	; (8001ae8 <get_handle_type+0xf4>)
 8001a4c:	601a      	str	r2, [r3, #0]
		Kp = 20;
 8001a4e:	4927      	ldr	r1, [pc, #156]	; (8001aec <get_handle_type+0xf8>)
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <get_handle_type+0xfc>)
 8001a56:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 60;
 8001a5a:	4926      	ldr	r1, [pc, #152]	; (8001af4 <get_handle_type+0x100>)
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	4b25      	ldr	r3, [pc, #148]	; (8001af8 <get_handle_type+0x104>)
 8001a62:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8001a66:	4925      	ldr	r1, [pc, #148]	; (8001afc <get_handle_type+0x108>)
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <get_handle_type+0x10c>)
 8001a6e:	e9c1 2300 	strd	r2, r3, [r1]
 8001a72:	e017      	b.n	8001aa4 <get_handle_type+0xb0>
	}
	else{
		handle = T245;
 8001a74:	4b1a      	ldr	r3, [pc, #104]	; (8001ae0 <get_handle_type+0xec>)
 8001a76:	2201      	movs	r2, #1
 8001a78:	701a      	strb	r2, [r3, #0]
		max_power_watt = 120; //120W
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <get_handle_type+0xf0>)
 8001a7c:	4a21      	ldr	r2, [pc, #132]	; (8001b04 <get_handle_type+0x110>)
 8001a7e:	601a      	str	r2, [r3, #0]
		Kp = 30;
 8001a80:	491a      	ldr	r1, [pc, #104]	; (8001aec <get_handle_type+0xf8>)
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <get_handle_type+0x114>)
 8001a88:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 60;
 8001a8c:	4919      	ldr	r1, [pc, #100]	; (8001af4 <get_handle_type+0x100>)
 8001a8e:	f04f 0200 	mov.w	r2, #0
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <get_handle_type+0x104>)
 8001a94:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 1;
 8001a98:	4918      	ldr	r1, [pc, #96]	; (8001afc <get_handle_type+0x108>)
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	; (8001b0c <get_handle_type+0x118>)
 8001aa0:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <get_handle_type+0xf8>)
 8001aa6:	ed93 7b00 	vldr	d7, [r3]
 8001aaa:	4b12      	ldr	r3, [pc, #72]	; (8001af4 <get_handle_type+0x100>)
 8001aac:	ed93 6b00 	vldr	d6, [r3]
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <get_handle_type+0x108>)
 8001ab2:	ed93 5b00 	vldr	d5, [r3]
 8001ab6:	eeb0 2a45 	vmov.f32	s4, s10
 8001aba:	eef0 2a65 	vmov.f32	s5, s11
 8001abe:	eeb0 1a46 	vmov.f32	s2, s12
 8001ac2:	eef0 1a66 	vmov.f32	s3, s13
 8001ac6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aca:	eef0 0a67 	vmov.f32	s1, s15
 8001ace:	4810      	ldr	r0, [pc, #64]	; (8001b10 <get_handle_type+0x11c>)
 8001ad0:	f001 fa11 	bl	8002ef6 <PID_SetTunings>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	20000950 	.word	0x20000950
 8001ae0:	2000026c 	.word	0x2000026c
 8001ae4:	200002c8 	.word	0x200002c8
 8001ae8:	42700000 	.word	0x42700000
 8001aec:	20000288 	.word	0x20000288
 8001af0:	40340000 	.word	0x40340000
 8001af4:	20000290 	.word	0x20000290
 8001af8:	404e0000 	.word	0x404e0000
 8001afc:	20000298 	.word	0x20000298
 8001b00:	3fe00000 	.word	0x3fe00000
 8001b04:	42f00000 	.word	0x42f00000
 8001b08:	403e0000 	.word	0x403e0000
 8001b0c:	3ff00000 	.word	0x3ff00000
 8001b10:	20000d60 	.word	0x20000d60

08001b14 <HAL_GPIO_EXTI_Callback>:
//void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
//    //HAL_GPIO_TogglePin(GPIOF, DEBUG_SIGNAL_A_Pin);
//}

/* Interrupts when encoder button is pressed */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == ENC_BUTTON_Pin && !sensor_values.button_pressed){ // If The INT Source Is EXTI Line9 (A9 Pin)
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b24:	d108      	bne.n	8001b38 <HAL_GPIO_EXTI_Callback+0x24>
 8001b26:	4b07      	ldr	r3, [pc, #28]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d103      	bne.n	8001b38 <HAL_GPIO_EXTI_Callback+0x24>
    	sensor_values.button_pressed = 1;
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <HAL_GPIO_EXTI_Callback+0x30>)
 8001b32:	2201      	movs	r2, #1
 8001b34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000020 	.word	0x20000020

08001b48 <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7f1b      	ldrb	r3, [r3, #28]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d102      	bne.n	8001b5e <HAL_TIM_IC_CaptureCallback+0x16>
		beep_requested = 1;
 8001b58:	4b04      	ldr	r3, [pc, #16]	; (8001b6c <HAL_TIM_IC_CaptureCallback+0x24>)
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	701a      	strb	r2, [r3, #0]
	}
}
 8001b5e:	bf00      	nop
 8001b60:	370c      	adds	r7, #12
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	2000026d 	.word	0x2000026d

08001b70 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	80fb      	strh	r3, [r7, #6]
	TIM17->CCR1 = dutycycle;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <set_heater_duty+0x1c>)
 8001b7c:	88fb      	ldrh	r3, [r7, #6]
 8001b7e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40014800 	.word	0x40014800

08001b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b94:	ed2d 8b04 	vpush	{d8-d9}
 8001b98:	b08c      	sub	sp, #48	; 0x30
 8001b9a:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b9c:	f001 ff3b 	bl	8003a16 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ba0:	f000 fa88 	bl	80020b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ba4:	f000 fe02 	bl	80027ac <MX_GPIO_Init>
  MX_DMA_Init();
 8001ba8:	f000 fdd6 	bl	8002758 <MX_DMA_Init>
  MX_TIM2_Init();
 8001bac:	f000 fc1a 	bl	80023e4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001bb0:	f000 fbda 	bl	8002368 <MX_SPI1_Init>
  MX_ADC1_Init();
 8001bb4:	f000 faca 	bl	800214c <MX_ADC1_Init>
  MX_TIM17_Init();
 8001bb8:	f000 fd08 	bl	80025cc <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8001bbc:	f000 fd80 	bl	80026c0 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001bc0:	f000 fc86 	bl	80024d0 <MX_TIM3_Init>
  MX_TIM16_Init();
 8001bc4:	f000 fcda 	bl	800257c <MX_TIM16_Init>
  MX_I2C1_Init();
 8001bc8:	f000 fb8e 	bl	80022e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001bcc:	213c      	movs	r1, #60	; 0x3c
 8001bce:	48aa      	ldr	r0, [pc, #680]	; (8001e78 <main+0x2e8>)
 8001bd0:	f006 fa66 	bl	80080a0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	48a9      	ldr	r0, [pc, #676]	; (8001e7c <main+0x2ec>)
 8001bd8:	f006 f8bc 	bl	8007d54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001bdc:	2100      	movs	r1, #0
 8001bde:	48a8      	ldr	r0, [pc, #672]	; (8001e80 <main+0x2f0>)
 8001be0:	f006 f8b8 	bl	8007d54 <HAL_TIM_PWM_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001be4:	217f      	movs	r1, #127	; 0x7f
 8001be6:	48a7      	ldr	r0, [pc, #668]	; (8001e84 <main+0x2f4>)
 8001be8:	f003 ff0e 	bl	8005a08 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, ADC_BUF_LEN);	//Start ADC DMA
 8001bec:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001bf0:	49a5      	ldr	r1, [pc, #660]	; (8001e88 <main+0x2f8>)
 8001bf2:	48a4      	ldr	r0, [pc, #656]	; (8001e84 <main+0x2f4>)
 8001bf4:	f002 fc6e 	bl	80044d4 <HAL_ADC_Start_DMA>

	Moving_Average_Init(&actual_temperature_filter_struct,5);
 8001bf8:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001bfc:	48a3      	ldr	r0, [pc, #652]	; (8001e8c <main+0x2fc>)
 8001bfe:	f000 fe76 	bl	80028ee <Moving_Average_Init>
	Moving_Average_Init(&ambient_temperature_filter_struct,5);
 8001c02:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001c06:	48a2      	ldr	r0, [pc, #648]	; (8001e90 <main+0x300>)
 8001c08:	f000 fe71 	bl	80028ee <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,5);
 8001c0c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8001c10:	48a0      	ldr	r0, [pc, #640]	; (8001e94 <main+0x304>)
 8001c12:	f000 fe6c 	bl	80028ee <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 8001c16:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001c1a:	489f      	ldr	r0, [pc, #636]	; (8001e98 <main+0x308>)
 8001c1c:	f000 fe67 	bl	80028ee <Moving_Average_Init>
	Moving_Average_Init(&handle_sense_filterStruct,20);
 8001c20:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8001c24:	489d      	ldr	r0, [pc, #628]	; (8001e9c <main+0x30c>)
 8001c26:	f000 fe62 	bl	80028ee <Moving_Average_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	/* Init and fill filter structures with initial values */
	set_heater_duty(0);
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f7ff ffa0 	bl	8001b70 <set_heater_duty>
	for (int i = 0; i<40;i++){
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	e00c      	b.n	8001c50 <main+0xc0>
		get_bus_voltage();
 8001c36:	f7ff fa17 	bl	8001068 <get_bus_voltage>
		get_ambient_temp();
 8001c3a:	f7ff fb45 	bl	80012c8 <get_ambient_temp>
		get_actual_temperature();
 8001c3e:	f7ff fa3b 	bl	80010b8 <get_actual_temperature>
		get_handle_type();
 8001c42:	f7ff fed7 	bl	80019f4 <get_handle_type>
		get_stand_status();
 8001c46:	f7ff fe9d 	bl	8001984 <get_stand_status>
	for (int i = 0; i<40;i++){
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b27      	cmp	r3, #39	; 0x27
 8001c54:	ddef      	ble.n	8001c36 <main+0xa6>
	}

	/* Start-up beep */
	beep_ms(10);
 8001c56:	200a      	movs	r0, #10
 8001c58:	f7ff fdbc 	bl	80017d4 <beep_ms>
	HAL_Delay(100);
 8001c5c:	2064      	movs	r0, #100	; 0x64
 8001c5e:	f001 ff4b 	bl	8003af8 <HAL_Delay>
	beep_ms(10);
 8001c62:	200a      	movs	r0, #10
 8001c64:	f7ff fdb6 	bl	80017d4 <beep_ms>

	/* Initiate OLED display */
	init_OLED();
 8001c68:	f7ff fb90 	bl	800138c <init_OLED>

	/* If button is pressed during startup - Show SETTINGS and allow to release button. Then the user can choose between T210 and T245 handle */
	if (HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 0){
 8001c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c74:	f004 fdc4 	bl	8006800 <HAL_GPIO_ReadPin>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d169      	bne.n	8001d52 <main+0x1c2>
		Paint_DrawString_EN(0, 0, " SETTINGS ", &Font16, 0x00, 0xff);
 8001c7e:	23ff      	movs	r3, #255	; 0xff
 8001c80:	9301      	str	r3, [sp, #4]
 8001c82:	2300      	movs	r3, #0
 8001c84:	9300      	str	r3, [sp, #0]
 8001c86:	4b86      	ldr	r3, [pc, #536]	; (8001ea0 <main+0x310>)
 8001c88:	4a86      	ldr	r2, [pc, #536]	; (8001ea4 <main+0x314>)
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	f009 ff8d 	bl	800bbac <Paint_DrawString_EN>
		Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001c92:	2300      	movs	r3, #0
 8001c94:	9302      	str	r3, [sp, #8]
 8001c96:	2302      	movs	r3, #2
 8001c98:	9301      	str	r3, [sp, #4]
 8001c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9e:	9300      	str	r3, [sp, #0]
 8001ca0:	2310      	movs	r3, #16
 8001ca2:	227f      	movs	r2, #127	; 0x7f
 8001ca4:	2110      	movs	r1, #16
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f009 fc0c 	bl	800b4c4 <Paint_DrawLine>
		OLED_1in5_Display(black_image);
 8001cac:	4b7e      	ldr	r3, [pc, #504]	; (8001ea8 <main+0x318>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f00a f8fe 	bl	800beb2 <OLED_1in5_Display>
		Paint_Clear(BLACK);
 8001cb6:	2000      	movs	r0, #0
 8001cb8:	f009 faae 	bl	800b218 <Paint_Clear>
		HAL_Delay(1000);
 8001cbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cc0:	f001 ff1a 	bl	8003af8 <HAL_Delay>

		while(HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 1){
 8001cc4:	e03c      	b.n	8001d40 <main+0x1b0>
			Paint_DrawString_EN(0, 0, " SETTINGS ", &Font16, 0x00, 0xff);
 8001cc6:	23ff      	movs	r3, #255	; 0xff
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	4b74      	ldr	r3, [pc, #464]	; (8001ea0 <main+0x310>)
 8001cd0:	4a74      	ldr	r2, [pc, #464]	; (8001ea4 <main+0x314>)
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f009 ff69 	bl	800bbac <Paint_DrawString_EN>
			Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001cda:	2300      	movs	r3, #0
 8001cdc:	9302      	str	r3, [sp, #8]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2310      	movs	r3, #16
 8001cea:	227f      	movs	r2, #127	; 0x7f
 8001cec:	2110      	movs	r1, #16
 8001cee:	2000      	movs	r0, #0
 8001cf0:	f009 fbe8 	bl	800b4c4 <Paint_DrawLine>

			Paint_DrawString_EN(3, 20, "Coming soon...", &Font12, 0x00, 0xff);
 8001cf4:	23ff      	movs	r3, #255	; 0xff
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	4b6b      	ldr	r3, [pc, #428]	; (8001eac <main+0x31c>)
 8001cfe:	4a6c      	ldr	r2, [pc, #432]	; (8001eb0 <main+0x320>)
 8001d00:	2114      	movs	r1, #20
 8001d02:	2003      	movs	r0, #3
 8001d04:	f009 ff52 	bl	800bbac <Paint_DrawString_EN>
			Paint_DrawString_EN(0, 110, "Version: ", &Font12, 0x00, 0xff);
 8001d08:	23ff      	movs	r3, #255	; 0xff
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	4b66      	ldr	r3, [pc, #408]	; (8001eac <main+0x31c>)
 8001d12:	4a68      	ldr	r2, [pc, #416]	; (8001eb4 <main+0x324>)
 8001d14:	216e      	movs	r1, #110	; 0x6e
 8001d16:	2000      	movs	r0, #0
 8001d18:	f009 ff48 	bl	800bbac <Paint_DrawString_EN>
			Paint_DrawString_EN(60, 110, version, &Font12, 0x00, 0xff);
 8001d1c:	23ff      	movs	r3, #255	; 0xff
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	2300      	movs	r3, #0
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	4b61      	ldr	r3, [pc, #388]	; (8001eac <main+0x31c>)
 8001d26:	4a64      	ldr	r2, [pc, #400]	; (8001eb8 <main+0x328>)
 8001d28:	216e      	movs	r1, #110	; 0x6e
 8001d2a:	203c      	movs	r0, #60	; 0x3c
 8001d2c:	f009 ff3e 	bl	800bbac <Paint_DrawString_EN>

			OLED_1in5_Display(black_image);
 8001d30:	4b5d      	ldr	r3, [pc, #372]	; (8001ea8 <main+0x318>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f00a f8bc 	bl	800beb2 <OLED_1in5_Display>
			Paint_Clear(BLACK);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f009 fa6c 	bl	800b218 <Paint_Clear>
		while(HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 1){
 8001d40:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d48:	f004 fd5a 	bl	8006800 <HAL_GPIO_ReadPin>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d0b9      	beq.n	8001cc6 <main+0x136>
		}
	}

	/* Set initial encoder timer value */
	TIM3->CNT = 330;
 8001d52:	4b5a      	ldr	r3, [pc, #360]	; (8001ebc <main+0x32c>)
 8001d54:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001d58:	625a      	str	r2, [r3, #36]	; 0x24

	/* Startup beep */
	beep_ms(10);
 8001d5a:	200a      	movs	r0, #10
 8001d5c:	f7ff fd3a 	bl	80017d4 <beep_ms>

	/* Initiate PID controller */
	PID(&TPID, &sensor_values.actual_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8001d60:	4b57      	ldr	r3, [pc, #348]	; (8001ec0 <main+0x330>)
 8001d62:	ed93 7b00 	vldr	d7, [r3]
 8001d66:	4b57      	ldr	r3, [pc, #348]	; (8001ec4 <main+0x334>)
 8001d68:	ed93 6b00 	vldr	d6, [r3]
 8001d6c:	4b56      	ldr	r3, [pc, #344]	; (8001ec8 <main+0x338>)
 8001d6e:	ed93 5b00 	vldr	d5, [r3]
 8001d72:	2300      	movs	r3, #0
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	2301      	movs	r3, #1
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	eeb0 2a45 	vmov.f32	s4, s10
 8001d7e:	eef0 2a65 	vmov.f32	s5, s11
 8001d82:	eeb0 1a46 	vmov.f32	s2, s12
 8001d86:	eef0 1a66 	vmov.f32	s3, s13
 8001d8a:	eeb0 0a47 	vmov.f32	s0, s14
 8001d8e:	eef0 0a67 	vmov.f32	s1, s15
 8001d92:	4b4e      	ldr	r3, [pc, #312]	; (8001ecc <main+0x33c>)
 8001d94:	4a4e      	ldr	r2, [pc, #312]	; (8001ed0 <main+0x340>)
 8001d96:	494f      	ldr	r1, [pc, #316]	; (8001ed4 <main+0x344>)
 8001d98:	484f      	ldr	r0, [pc, #316]	; (8001ed8 <main+0x348>)
 8001d9a:	f000 fe71 	bl	8002a80 <PID>
	PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001d9e:	2101      	movs	r1, #1
 8001da0:	484d      	ldr	r0, [pc, #308]	; (8001ed8 <main+0x348>)
 8001da2:	f000 fffc 	bl	8002d9e <PID_SetMode>
	PID_SetSampleTime(&TPID, 50);
 8001da6:	2132      	movs	r1, #50	; 0x32
 8001da8:	484b      	ldr	r0, [pc, #300]	; (8001ed8 <main+0x348>)
 8001daa:	f001 f9a7 	bl	80030fc <PID_SetSampleTime>
	PID_SetOutputLimits(&TPID, 0, 1000); 	// Set max and min output limit
 8001dae:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001e58 <main+0x2c8>
 8001db2:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8001e60 <main+0x2d0>
 8001db6:	4848      	ldr	r0, [pc, #288]	; (8001ed8 <main+0x348>)
 8001db8:	f001 f80f 	bl	8002dda <PID_SetOutputLimits>
	PID_SetILimits(&TPID, -200, 200); 		// Set max and min I limit
 8001dbc:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001e68 <main+0x2d8>
 8001dc0:	ed9f 0b2b 	vldr	d0, [pc, #172]	; 8001e70 <main+0x2e0>
 8001dc4:	4844      	ldr	r0, [pc, #272]	; (8001ed8 <main+0x348>)
 8001dc6:	f001 f876 	bl	8002eb6 <PID_SetILimits>

	while (1){
		get_stand_status();
 8001dca:	f7ff fddb 	bl	8001984 <get_stand_status>
		get_bus_voltage();
 8001dce:	f7ff f94b 	bl	8001068 <get_bus_voltage>
		get_handle_type();
 8001dd2:	f7ff fe0f 	bl	80019f4 <get_handle_type>
		get_button_status();
 8001dd6:	f7ff fd83 	bl	80018e0 <get_button_status>
		get_set_temperature();
 8001dda:	f7ff fcd9 	bl	8001790 <get_set_temperature>
		check_beep();
 8001dde:	f7ff fd0f 	bl	8001800 <check_beep>
		check_emergency_shutdown();
 8001de2:	f7ff fd1d 	bl	8001820 <check_emergency_shutdown>

		/* switch */
		switch (active_state) {
 8001de6:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <main+0x34c>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b03      	cmp	r3, #3
 8001dec:	f200 8082 	bhi.w	8001ef4 <main+0x364>
 8001df0:	a201      	add	r2, pc, #4	; (adr r2, 8001df8 <main+0x268>)
 8001df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df6:	bf00      	nop
 8001df8:	08001e19 	.word	0x08001e19
 8001dfc:	08001e27 	.word	0x08001e27
 8001e00:	08001e09 	.word	0x08001e09
 8001e04:	08001ee5 	.word	0x08001ee5
			case EMERGENCY_SLEEP: {
				PID_setpoint = 0;
 8001e08:	4930      	ldr	r1, [pc, #192]	; (8001ecc <main+0x33c>)
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001e16:	e06d      	b.n	8001ef4 <main+0x364>
			}
			case RUN: {
				/* calculate duty cycle for PWM */
				PID_setpoint = sensor_values.set_temperature;
 8001e18:	4b31      	ldr	r3, [pc, #196]	; (8001ee0 <main+0x350>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	492b      	ldr	r1, [pc, #172]	; (8001ecc <main+0x33c>)
 8001e20:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001e24:	e066      	b.n	8001ef4 <main+0x364>
			}
			case SLEEP: {
				PID_setpoint = 0;
 8001e26:	4929      	ldr	r1, [pc, #164]	; (8001ecc <main+0x33c>)
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9c1 2300 	strd	r2, r3, [r1]
				if(sensor_values.in_stand == 0){
 8001e34:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <main+0x350>)
 8001e36:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	f04f 0300 	mov.w	r3, #0
 8001e42:	f7fe fe69 	bl	8000b18 <__aeabi_dcmpeq>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d100      	bne.n	8001e4e <main+0x2be>
					active_state = RUN;
					}
				break;
 8001e4c:	e052      	b.n	8001ef4 <main+0x364>
					active_state = RUN;
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <main+0x34c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	701a      	strb	r2, [r3, #0]
				break;
 8001e54:	e04e      	b.n	8001ef4 <main+0x364>
 8001e56:	bf00      	nop
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	408f4000 	.word	0x408f4000
	...
 8001e6c:	40690000 	.word	0x40690000
 8001e70:	00000000 	.word	0x00000000
 8001e74:	c0690000 	.word	0xc0690000
 8001e78:	20000bec 	.word	0x20000bec
 8001e7c:	20000c84 	.word	0x20000c84
 8001e80:	20000ba0 	.word	0x20000ba0
 8001e84:	20000a24 	.word	0x20000a24
 8001e88:	200002d0 	.word	0x200002d0
 8001e8c:	20000600 	.word	0x20000600
 8001e90:	200006d4 	.word	0x200006d4
 8001e94:	200007a8 	.word	0x200007a8
 8001e98:	2000087c 	.word	0x2000087c
 8001e9c:	20000950 	.word	0x20000950
 8001ea0:	2000005c 	.word	0x2000005c
 8001ea4:	0800fc00 	.word	0x0800fc00
 8001ea8:	20000270 	.word	0x20000270
 8001eac:	20000054 	.word	0x20000054
 8001eb0:	0800fc0c 	.word	0x0800fc0c
 8001eb4:	0800fc1c 	.word	0x0800fc1c
 8001eb8:	0800fc28 	.word	0x0800fc28
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	20000288 	.word	0x20000288
 8001ec4:	20000290 	.word	0x20000290
 8001ec8:	20000298 	.word	0x20000298
 8001ecc:	200005f8 	.word	0x200005f8
 8001ed0:	200005f0 	.word	0x200005f0
 8001ed4:	20000028 	.word	0x20000028
 8001ed8:	20000d60 	.word	0x20000d60
 8001edc:	2000001c 	.word	0x2000001c
 8001ee0:	20000020 	.word	0x20000020
			}
			case HALTED: {
				PID_setpoint = 0;
 8001ee4:	4964      	ldr	r1, [pc, #400]	; (8002078 <main+0x4e8>)
 8001ee6:	f04f 0200 	mov.w	r2, #0
 8001eea:	f04f 0300 	mov.w	r3, #0
 8001eee:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001ef2:	bf00      	nop
			}
		}

		if(HAL_GetTick() - previous_millis_PID_update >= interval_PID_update){
 8001ef4:	f001 fdf4 	bl	8003ae0 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <main+0x4ec>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	1ad2      	subs	r2, r2, r3
 8001f00:	4b5f      	ldr	r3, [pc, #380]	; (8002080 <main+0x4f0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d30c      	bcc.n	8001f22 <main+0x392>
			set_heater_duty(0);
 8001f08:	2000      	movs	r0, #0
 8001f0a:	f7ff fe31 	bl	8001b70 <set_heater_duty>
			HAL_Delay(10); // Wait to let the thermocouple voltage stabilize before taking measurement
 8001f0e:	200a      	movs	r0, #10
 8001f10:	f001 fdf2 	bl	8003af8 <HAL_Delay>
			get_actual_temperature();
 8001f14:	f7ff f8d0 	bl	80010b8 <get_actual_temperature>
			previous_millis_PID_update = HAL_GetTick();
 8001f18:	f001 fde2 	bl	8003ae0 <HAL_GetTick>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	4a57      	ldr	r2, [pc, #348]	; (800207c <main+0x4ec>)
 8001f20:	6013      	str	r3, [r2, #0]
		//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
		//sensor_values.set_temperature = temperature_custom;
		// ----------------------------------------------

		/* Compute PID and set duty cycle */
		PID_Compute(&TPID);
 8001f22:	4858      	ldr	r0, [pc, #352]	; (8002084 <main+0x4f4>)
 8001f24:	f000 fdf8 	bl	8002b18 <PID_Compute>
		set_heater_duty(PID_output*(max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage));
 8001f28:	4b57      	ldr	r3, [pc, #348]	; (8002088 <main+0x4f8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f7fe fb33 	bl	8000598 <__aeabi_f2d>
 8001f32:	a34f      	add	r3, pc, #316	; (adr r3, 8002070 <main+0x4e0>)
 8001f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f38:	f7fe fb86 	bl	8000648 <__aeabi_dmul>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	460b      	mov	r3, r1
 8001f40:	4614      	mov	r4, r2
 8001f42:	461d      	mov	r5, r3
 8001f44:	4b51      	ldr	r3, [pc, #324]	; (800208c <main+0x4fc>)
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7fe fb25 	bl	8000598 <__aeabi_f2d>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4620      	mov	r0, r4
 8001f54:	4629      	mov	r1, r5
 8001f56:	f7fe fca1 	bl	800089c <__aeabi_ddiv>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <main+0x500>)
 8001f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f68:	f7fe fb6e 	bl	8000648 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f7fe fe40 	bl	8000bf8 <__aeabi_d2uiz>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff fdf7 	bl	8001b70 <set_heater_duty>

		/* Send debug information over serial */
		if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8001f82:	f001 fdad 	bl	8003ae0 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	4b42      	ldr	r3, [pc, #264]	; (8002094 <main+0x504>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	1ad2      	subs	r2, r2, r3
 8001f8e:	4b42      	ldr	r3, [pc, #264]	; (8002098 <main+0x508>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d357      	bcc.n	8002046 <main+0x4b6>
			memset(&buffer, '\0', sizeof(buffer));
 8001f96:	2228      	movs	r2, #40	; 0x28
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4840      	ldr	r0, [pc, #256]	; (800209c <main+0x50c>)
 8001f9c:	f00a fefa 	bl	800cd94 <memset>
			sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n", sensor_values.actual_temperature, sensor_values.set_temperature,PID_output/10,PID_GetPpart(&TPID)/10, PID_GetIpart(&TPID)/10, PID_GetDpart(&TPID)/10);
 8001fa0:	4b3a      	ldr	r3, [pc, #232]	; (800208c <main+0x4fc>)
 8001fa2:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <main+0x4fc>)
 8001fa8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001fac:	4b38      	ldr	r3, [pc, #224]	; (8002090 <main+0x500>)
 8001fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <main+0x510>)
 8001fb8:	f7fe fc70 	bl	800089c <__aeabi_ddiv>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	ec43 2b18 	vmov	d8, r2, r3
 8001fc4:	482f      	ldr	r0, [pc, #188]	; (8002084 <main+0x4f4>)
 8001fc6:	f001 f8d4 	bl	8003172 <PID_GetPpart>
 8001fca:	ec51 0b10 	vmov	r0, r1, d0
 8001fce:	f04f 0200 	mov.w	r2, #0
 8001fd2:	4b33      	ldr	r3, [pc, #204]	; (80020a0 <main+0x510>)
 8001fd4:	f7fe fc62 	bl	800089c <__aeabi_ddiv>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	ec43 2b19 	vmov	d9, r2, r3
 8001fe0:	4828      	ldr	r0, [pc, #160]	; (8002084 <main+0x4f4>)
 8001fe2:	f001 f8d8 	bl	8003196 <PID_GetIpart>
 8001fe6:	ec51 0b10 	vmov	r0, r1, d0
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4b2c      	ldr	r3, [pc, #176]	; (80020a0 <main+0x510>)
 8001ff0:	f7fe fc54 	bl	800089c <__aeabi_ddiv>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4692      	mov	sl, r2
 8001ffa:	469b      	mov	fp, r3
 8001ffc:	4821      	ldr	r0, [pc, #132]	; (8002084 <main+0x4f4>)
 8001ffe:	f001 f8dc 	bl	80031ba <PID_GetDpart>
 8002002:	ec51 0b10 	vmov	r0, r1, d0
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <main+0x510>)
 800200c:	f7fe fc46 	bl	800089c <__aeabi_ddiv>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002018:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800201c:	ed8d 9b04 	vstr	d9, [sp, #16]
 8002020:	ed8d 8b02 	vstr	d8, [sp, #8]
 8002024:	e9cd 4500 	strd	r4, r5, [sp]
 8002028:	4642      	mov	r2, r8
 800202a:	464b      	mov	r3, r9
 800202c:	491d      	ldr	r1, [pc, #116]	; (80020a4 <main+0x514>)
 800202e:	481b      	ldr	r0, [pc, #108]	; (800209c <main+0x50c>)
 8002030:	f00a fdb8 	bl	800cba4 <siprintf>
			debugPrint(&huart2,buffer);
 8002034:	4919      	ldr	r1, [pc, #100]	; (800209c <main+0x50c>)
 8002036:	481c      	ldr	r0, [pc, #112]	; (80020a8 <main+0x518>)
 8002038:	f7ff f98a 	bl	8001350 <debugPrint>
			previous_millis_debug = HAL_GetTick();
 800203c:	f001 fd50 	bl	8003ae0 <HAL_GetTick>
 8002040:	4603      	mov	r3, r0
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <main+0x504>)
 8002044:	6013      	str	r3, [r2, #0]
		}

		/* Update display */
		if(HAL_GetTick() - previous_millis_display >= interval_display){
 8002046:	f001 fd4b 	bl	8003ae0 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	4b17      	ldr	r3, [pc, #92]	; (80020ac <main+0x51c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	1ad2      	subs	r2, r2, r3
 8002052:	4b17      	ldr	r3, [pc, #92]	; (80020b0 <main+0x520>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	429a      	cmp	r2, r3
 8002058:	f4ff aeb7 	bcc.w	8001dca <main+0x23a>
			get_ambient_temp();
 800205c:	f7ff f934 	bl	80012c8 <get_ambient_temp>
			update_OLED();
 8002060:	f7ff f9d0 	bl	8001404 <update_OLED>
			previous_millis_display = HAL_GetTick();
 8002064:	f001 fd3c 	bl	8003ae0 <HAL_GetTick>
 8002068:	4603      	mov	r3, r0
 800206a:	4a10      	ldr	r2, [pc, #64]	; (80020ac <main+0x51c>)
 800206c:	6013      	str	r3, [r2, #0]
		get_stand_status();
 800206e:	e6ac      	b.n	8001dca <main+0x23a>
 8002070:	eb851eb8 	.word	0xeb851eb8
 8002074:	3fbeb851 	.word	0x3fbeb851
 8002078:	200005f8 	.word	0x200005f8
 800207c:	2000027c 	.word	0x2000027c
 8002080:	2000000c 	.word	0x2000000c
 8002084:	20000d60 	.word	0x20000d60
 8002088:	200002c8 	.word	0x200002c8
 800208c:	20000020 	.word	0x20000020
 8002090:	200005f0 	.word	0x200005f0
 8002094:	20000278 	.word	0x20000278
 8002098:	20000008 	.word	0x20000008
 800209c:	200002a0 	.word	0x200002a0
 80020a0:	40240000 	.word	0x40240000
 80020a4:	0800fc30 	.word	0x0800fc30
 80020a8:	20000cd0 	.word	0x20000cd0
 80020ac:	20000274 	.word	0x20000274
 80020b0:	20000004 	.word	0x20000004

080020b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b094      	sub	sp, #80	; 0x50
 80020b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ba:	f107 0318 	add.w	r3, r7, #24
 80020be:	2238      	movs	r2, #56	; 0x38
 80020c0:	2100      	movs	r1, #0
 80020c2:	4618      	mov	r0, r3
 80020c4:	f00a fe66 	bl	800cd94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020c8:	1d3b      	adds	r3, r7, #4
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
 80020d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80020d6:	2000      	movs	r0, #0
 80020d8:	f004 fd00 	bl	8006adc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020dc:	2302      	movs	r3, #2
 80020de:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020e6:	2340      	movs	r3, #64	; 0x40
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020ea:	2302      	movs	r3, #2
 80020ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80020ee:	2302      	movs	r3, #2
 80020f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80020f2:	2304      	movs	r3, #4
 80020f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80020f6:	2355      	movs	r3, #85	; 0x55
 80020f8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80020fa:	2302      	movs	r3, #2
 80020fc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80020fe:	2302      	movs	r3, #2
 8002100:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002102:	2302      	movs	r3, #2
 8002104:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002106:	f107 0318 	add.w	r3, r7, #24
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fd9a 	bl	8006c44 <HAL_RCC_OscConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002116:	f000 fbe5 	bl	80028e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800211a:	230f      	movs	r3, #15
 800211c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800211e:	2303      	movs	r3, #3
 8002120:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800212e:	1d3b      	adds	r3, r7, #4
 8002130:	2104      	movs	r1, #4
 8002132:	4618      	mov	r0, r3
 8002134:	f005 f89e 	bl	8007274 <HAL_RCC_ClockConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800213e:	f000 fbd1 	bl	80028e4 <Error_Handler>
  }
}
 8002142:	bf00      	nop
 8002144:	3750      	adds	r7, #80	; 0x50
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b092      	sub	sp, #72	; 0x48
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002152:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 800215e:	f107 0320 	add.w	r3, r7, #32
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]
 8002168:	609a      	str	r2, [r3, #8]
 800216a:	60da      	str	r2, [r3, #12]
 800216c:	611a      	str	r2, [r3, #16]
 800216e:	615a      	str	r2, [r3, #20]
 8002170:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8002172:	463b      	mov	r3, r7
 8002174:	2220      	movs	r2, #32
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f00a fe0b 	bl	800cd94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800217e:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <MX_ADC1_Init+0x184>)
 8002180:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002184:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002186:	4b52      	ldr	r3, [pc, #328]	; (80022d0 <MX_ADC1_Init+0x184>)
 8002188:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800218c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800218e:	4b50      	ldr	r3, [pc, #320]	; (80022d0 <MX_ADC1_Init+0x184>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002194:	4b4e      	ldr	r3, [pc, #312]	; (80022d0 <MX_ADC1_Init+0x184>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800219a:	4b4d      	ldr	r3, [pc, #308]	; (80022d0 <MX_ADC1_Init+0x184>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021a0:	4b4b      	ldr	r3, [pc, #300]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021a2:	2201      	movs	r2, #1
 80021a4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80021a6:	4b4a      	ldr	r3, [pc, #296]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021a8:	2204      	movs	r2, #4
 80021aa:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80021ac:	4b48      	ldr	r3, [pc, #288]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80021b2:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 80021b8:	4b45      	ldr	r3, [pc, #276]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021ba:	2204      	movs	r2, #4
 80021bc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021be:	4b44      	ldr	r3, [pc, #272]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021c6:	4b42      	ldr	r3, [pc, #264]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80021cc:	4b40      	ldr	r3, [pc, #256]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80021d2:	4b3f      	ldr	r3, [pc, #252]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021d4:	2201      	movs	r2, #1
 80021d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80021da:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021dc:	2200      	movs	r2, #0
 80021de:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80021e0:	4b3b      	ldr	r3, [pc, #236]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021e8:	4839      	ldr	r0, [pc, #228]	; (80022d0 <MX_ADC1_Init+0x184>)
 80021ea:	f001 ffe9 	bl	80041c0 <HAL_ADC_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80021f4:	f000 fb76 	bl	80028e4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80021f8:	2300      	movs	r3, #0
 80021fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80021fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002200:	4619      	mov	r1, r3
 8002202:	4833      	ldr	r0, [pc, #204]	; (80022d0 <MX_ADC1_Init+0x184>)
 8002204:	f003 fc94 	bl	8005b30 <HAL_ADCEx_MultiModeConfigChannel>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 800220e:	f000 fb69 	bl	80028e4 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8002212:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <MX_ADC1_Init+0x188>)
 8002214:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8002216:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 800221c:	4b2e      	ldr	r3, [pc, #184]	; (80022d8 <MX_ADC1_Init+0x18c>)
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 100;
 8002226:	2364      	movs	r3, #100	; 0x64
 8002228:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 800222e:	2300      	movs	r3, #0
 8002230:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8002232:	f107 0320 	add.w	r3, r7, #32
 8002236:	4619      	mov	r1, r3
 8002238:	4825      	ldr	r0, [pc, #148]	; (80022d0 <MX_ADC1_Init+0x184>)
 800223a:	f003 f831 	bl	80052a0 <HAL_ADC_AnalogWDGConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8002244:	f000 fb4e 	bl	80028e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <MX_ADC1_Init+0x190>)
 800224a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800224c:	2306      	movs	r3, #6
 800224e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8002250:	2304      	movs	r3, #4
 8002252:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002254:	237f      	movs	r3, #127	; 0x7f
 8002256:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002258:	2304      	movs	r3, #4
 800225a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002260:	463b      	mov	r3, r7
 8002262:	4619      	mov	r1, r3
 8002264:	481a      	ldr	r0, [pc, #104]	; (80022d0 <MX_ADC1_Init+0x184>)
 8002266:	f002 fc2b 	bl	8004ac0 <HAL_ADC_ConfigChannel>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8002270:	f000 fb38 	bl	80028e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002274:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <MX_ADC1_Init+0x18c>)
 8002276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002278:	230c      	movs	r3, #12
 800227a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800227c:	463b      	mov	r3, r7
 800227e:	4619      	mov	r1, r3
 8002280:	4813      	ldr	r0, [pc, #76]	; (80022d0 <MX_ADC1_Init+0x184>)
 8002282:	f002 fc1d 	bl	8004ac0 <HAL_ADC_ConfigChannel>
 8002286:	4603      	mov	r3, r0
 8002288:	2b00      	cmp	r3, #0
 800228a:	d001      	beq.n	8002290 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 800228c:	f000 fb2a 	bl	80028e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002290:	4b13      	ldr	r3, [pc, #76]	; (80022e0 <MX_ADC1_Init+0x194>)
 8002292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002294:	2312      	movs	r3, #18
 8002296:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002298:	463b      	mov	r3, r7
 800229a:	4619      	mov	r1, r3
 800229c:	480c      	ldr	r0, [pc, #48]	; (80022d0 <MX_ADC1_Init+0x184>)
 800229e:	f002 fc0f 	bl	8004ac0 <HAL_ADC_ConfigChannel>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 80022a8:	f000 fb1c 	bl	80028e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80022ac:	4b0d      	ldr	r3, [pc, #52]	; (80022e4 <MX_ADC1_Init+0x198>)
 80022ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80022b0:	2318      	movs	r3, #24
 80022b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022b4:	463b      	mov	r3, r7
 80022b6:	4619      	mov	r1, r3
 80022b8:	4805      	ldr	r0, [pc, #20]	; (80022d0 <MX_ADC1_Init+0x184>)
 80022ba:	f002 fc01 	bl	8004ac0 <HAL_ADC_ConfigChannel>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 80022c4:	f000 fb0e 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022c8:	bf00      	nop
 80022ca:	3748      	adds	r7, #72	; 0x48
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000a24 	.word	0x20000a24
 80022d4:	7dc00000 	.word	0x7dc00000
 80022d8:	08600004 	.word	0x08600004
 80022dc:	04300002 	.word	0x04300002
 80022e0:	10c00010 	.word	0x10c00010
 80022e4:	3ef08000 	.word	0x3ef08000

080022e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80022ec:	4b1b      	ldr	r3, [pc, #108]	; (800235c <MX_I2C1_Init+0x74>)
 80022ee:	4a1c      	ldr	r2, [pc, #112]	; (8002360 <MX_I2C1_Init+0x78>)
 80022f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80022f2:	4b1a      	ldr	r3, [pc, #104]	; (800235c <MX_I2C1_Init+0x74>)
 80022f4:	4a1b      	ldr	r2, [pc, #108]	; (8002364 <MX_I2C1_Init+0x7c>)
 80022f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80022f8:	4b18      	ldr	r3, [pc, #96]	; (800235c <MX_I2C1_Init+0x74>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80022fe:	4b17      	ldr	r3, [pc, #92]	; (800235c <MX_I2C1_Init+0x74>)
 8002300:	2201      	movs	r2, #1
 8002302:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002304:	4b15      	ldr	r3, [pc, #84]	; (800235c <MX_I2C1_Init+0x74>)
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800230a:	4b14      	ldr	r3, [pc, #80]	; (800235c <MX_I2C1_Init+0x74>)
 800230c:	2200      	movs	r2, #0
 800230e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <MX_I2C1_Init+0x74>)
 8002312:	2200      	movs	r2, #0
 8002314:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002316:	4b11      	ldr	r3, [pc, #68]	; (800235c <MX_I2C1_Init+0x74>)
 8002318:	2200      	movs	r2, #0
 800231a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <MX_I2C1_Init+0x74>)
 800231e:	2200      	movs	r2, #0
 8002320:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002322:	480e      	ldr	r0, [pc, #56]	; (800235c <MX_I2C1_Init+0x74>)
 8002324:	f004 fab4 	bl	8006890 <HAL_I2C_Init>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800232e:	f000 fad9 	bl	80028e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002332:	2100      	movs	r1, #0
 8002334:	4809      	ldr	r0, [pc, #36]	; (800235c <MX_I2C1_Init+0x74>)
 8002336:	f004 fb3a 	bl	80069ae <HAL_I2CEx_ConfigAnalogFilter>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002340:	f000 fad0 	bl	80028e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002344:	2100      	movs	r1, #0
 8002346:	4805      	ldr	r0, [pc, #20]	; (800235c <MX_I2C1_Init+0x74>)
 8002348:	f004 fb7c 	bl	8006a44 <HAL_I2CEx_ConfigDigitalFilter>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002352:	f000 fac7 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002356:	bf00      	nop
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	20000af0 	.word	0x20000af0
 8002360:	40005400 	.word	0x40005400
 8002364:	30a0a7fb 	.word	0x30a0a7fb

08002368 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800236c:	4b1b      	ldr	r3, [pc, #108]	; (80023dc <MX_SPI1_Init+0x74>)
 800236e:	4a1c      	ldr	r2, [pc, #112]	; (80023e0 <MX_SPI1_Init+0x78>)
 8002370:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002372:	4b1a      	ldr	r3, [pc, #104]	; (80023dc <MX_SPI1_Init+0x74>)
 8002374:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002378:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800237a:	4b18      	ldr	r3, [pc, #96]	; (80023dc <MX_SPI1_Init+0x74>)
 800237c:	2200      	movs	r2, #0
 800237e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002380:	4b16      	ldr	r3, [pc, #88]	; (80023dc <MX_SPI1_Init+0x74>)
 8002382:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002386:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002388:	4b14      	ldr	r3, [pc, #80]	; (80023dc <MX_SPI1_Init+0x74>)
 800238a:	2202      	movs	r2, #2
 800238c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800238e:	4b13      	ldr	r3, [pc, #76]	; (80023dc <MX_SPI1_Init+0x74>)
 8002390:	2201      	movs	r2, #1
 8002392:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002394:	4b11      	ldr	r3, [pc, #68]	; (80023dc <MX_SPI1_Init+0x74>)
 8002396:	f44f 7200 	mov.w	r2, #512	; 0x200
 800239a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_SPI1_Init+0x74>)
 800239e:	2218      	movs	r2, #24
 80023a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_SPI1_Init+0x74>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_SPI1_Init+0x74>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <MX_SPI1_Init+0x74>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_SPI1_Init+0x74>)
 80023b6:	2207      	movs	r2, #7
 80023b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <MX_SPI1_Init+0x74>)
 80023bc:	2200      	movs	r2, #0
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_SPI1_Init+0x74>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_SPI1_Init+0x74>)
 80023c8:	f005 fb60 	bl	8007a8c <HAL_SPI_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80023d2:	f000 fa87 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000b3c 	.word	0x20000b3c
 80023e0:	40013000 	.word	0x40013000

080023e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b08e      	sub	sp, #56	; 0x38
 80023e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023ee:	2200      	movs	r2, #0
 80023f0:	601a      	str	r2, [r3, #0]
 80023f2:	605a      	str	r2, [r3, #4]
 80023f4:	609a      	str	r2, [r3, #8]
 80023f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f8:	f107 031c 	add.w	r3, r7, #28
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002404:	463b      	mov	r3, r7
 8002406:	2200      	movs	r2, #0
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	605a      	str	r2, [r3, #4]
 800240c:	609a      	str	r2, [r3, #8]
 800240e:	60da      	str	r2, [r3, #12]
 8002410:	611a      	str	r2, [r3, #16]
 8002412:	615a      	str	r2, [r3, #20]
 8002414:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002416:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <MX_TIM2_Init+0xe8>)
 8002418:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800241c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <MX_TIM2_Init+0xe8>)
 8002420:	f240 321f 	movw	r2, #799	; 0x31f
 8002424:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002426:	4b29      	ldr	r3, [pc, #164]	; (80024cc <MX_TIM2_Init+0xe8>)
 8002428:	2200      	movs	r2, #0
 800242a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <MX_TIM2_Init+0xe8>)
 800242e:	2264      	movs	r2, #100	; 0x64
 8002430:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <MX_TIM2_Init+0xe8>)
 8002434:	2200      	movs	r2, #0
 8002436:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <MX_TIM2_Init+0xe8>)
 800243a:	2280      	movs	r2, #128	; 0x80
 800243c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800243e:	4823      	ldr	r0, [pc, #140]	; (80024cc <MX_TIM2_Init+0xe8>)
 8002440:	f005 fbcf 	bl	8007be2 <HAL_TIM_Base_Init>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800244a:	f000 fa4b 	bl	80028e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800244e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002452:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002458:	4619      	mov	r1, r3
 800245a:	481c      	ldr	r0, [pc, #112]	; (80024cc <MX_TIM2_Init+0xe8>)
 800245c:	f006 f962 	bl	8008724 <HAL_TIM_ConfigClockSource>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002466:	f000 fa3d 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800246a:	4818      	ldr	r0, [pc, #96]	; (80024cc <MX_TIM2_Init+0xe8>)
 800246c:	f005 fc10 	bl	8007c90 <HAL_TIM_PWM_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002476:	f000 fa35 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002482:	f107 031c 	add.w	r3, r7, #28
 8002486:	4619      	mov	r1, r3
 8002488:	4810      	ldr	r0, [pc, #64]	; (80024cc <MX_TIM2_Init+0xe8>)
 800248a:	f006 feb5 	bl	80091f8 <HAL_TIMEx_MasterConfigSynchronization>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002494:	f000 fa26 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002498:	2360      	movs	r3, #96	; 0x60
 800249a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024a0:	2300      	movs	r3, #0
 80024a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024a4:	2300      	movs	r3, #0
 80024a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024a8:	463b      	mov	r3, r7
 80024aa:	2200      	movs	r2, #0
 80024ac:	4619      	mov	r1, r3
 80024ae:	4807      	ldr	r0, [pc, #28]	; (80024cc <MX_TIM2_Init+0xe8>)
 80024b0:	f006 f824 	bl	80084fc <HAL_TIM_PWM_ConfigChannel>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80024ba:	f000 fa13 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80024be:	4803      	ldr	r0, [pc, #12]	; (80024cc <MX_TIM2_Init+0xe8>)
 80024c0:	f001 f88a 	bl	80035d8 <HAL_TIM_MspPostInit>

}
 80024c4:	bf00      	nop
 80024c6:	3738      	adds	r7, #56	; 0x38
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	20000ba0 	.word	0x20000ba0

080024d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08c      	sub	sp, #48	; 0x30
 80024d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024d6:	f107 030c 	add.w	r3, r7, #12
 80024da:	2224      	movs	r2, #36	; 0x24
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f00a fc58 	bl	800cd94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024e4:	463b      	mov	r3, r7
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
 80024ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024ee:	4b21      	ldr	r3, [pc, #132]	; (8002574 <MX_TIM3_Init+0xa4>)
 80024f0:	4a21      	ldr	r2, [pc, #132]	; (8002578 <MX_TIM3_Init+0xa8>)
 80024f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024f4:	4b1f      	ldr	r3, [pc, #124]	; (8002574 <MX_TIM3_Init+0xa4>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024fa:	4b1e      	ldr	r3, [pc, #120]	; (8002574 <MX_TIM3_Init+0xa4>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002500:	4b1c      	ldr	r3, [pc, #112]	; (8002574 <MX_TIM3_Init+0xa4>)
 8002502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002506:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002508:	4b1a      	ldr	r3, [pc, #104]	; (8002574 <MX_TIM3_Init+0xa4>)
 800250a:	2200      	movs	r2, #0
 800250c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800250e:	4b19      	ldr	r3, [pc, #100]	; (8002574 <MX_TIM3_Init+0xa4>)
 8002510:	2280      	movs	r2, #128	; 0x80
 8002512:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002514:	2301      	movs	r3, #1
 8002516:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002518:	2300      	movs	r3, #0
 800251a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800251c:	2301      	movs	r3, #1
 800251e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002520:	2300      	movs	r3, #0
 8002522:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002524:	230a      	movs	r3, #10
 8002526:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002528:	2300      	movs	r3, #0
 800252a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800252c:	2301      	movs	r3, #1
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002530:	2300      	movs	r3, #0
 8002532:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002534:	230a      	movs	r3, #10
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	4619      	mov	r1, r3
 800253e:	480d      	ldr	r0, [pc, #52]	; (8002574 <MX_TIM3_Init+0xa4>)
 8002540:	f005 fd08 	bl	8007f54 <HAL_TIM_Encoder_Init>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d001      	beq.n	800254e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800254a:	f000 f9cb 	bl	80028e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002556:	463b      	mov	r3, r7
 8002558:	4619      	mov	r1, r3
 800255a:	4806      	ldr	r0, [pc, #24]	; (8002574 <MX_TIM3_Init+0xa4>)
 800255c:	f006 fe4c 	bl	80091f8 <HAL_TIMEx_MasterConfigSynchronization>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002566:	f000 f9bd 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800256a:	bf00      	nop
 800256c:	3730      	adds	r7, #48	; 0x30
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	20000bec 	.word	0x20000bec
 8002578:	40000400 	.word	0x40000400

0800257c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002580:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <MX_TIM16_Init+0x48>)
 8002582:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <MX_TIM16_Init+0x4c>)
 8002584:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 8002586:	4b0f      	ldr	r3, [pc, #60]	; (80025c4 <MX_TIM16_Init+0x48>)
 8002588:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800258c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258e:	4b0d      	ldr	r3, [pc, #52]	; (80025c4 <MX_TIM16_Init+0x48>)
 8002590:	2200      	movs	r2, #0
 8002592:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8002594:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <MX_TIM16_Init+0x48>)
 8002596:	f242 7210 	movw	r2, #10000	; 0x2710
 800259a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259c:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <MX_TIM16_Init+0x48>)
 800259e:	2200      	movs	r2, #0
 80025a0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <MX_TIM16_Init+0x48>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80025a8:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <MX_TIM16_Init+0x48>)
 80025aa:	2280      	movs	r2, #128	; 0x80
 80025ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_TIM16_Init+0x48>)
 80025b0:	f005 fb17 	bl	8007be2 <HAL_TIM_Base_Init>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80025ba:	f000 f993 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000c38 	.word	0x20000c38
 80025c8:	40014400 	.word	0x40014400

080025cc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b094      	sub	sp, #80	; 0x50
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80025d2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]
 80025de:	60da      	str	r2, [r3, #12]
 80025e0:	611a      	str	r2, [r3, #16]
 80025e2:	615a      	str	r2, [r3, #20]
 80025e4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80025e6:	463b      	mov	r3, r7
 80025e8:	2234      	movs	r2, #52	; 0x34
 80025ea:	2100      	movs	r1, #0
 80025ec:	4618      	mov	r0, r3
 80025ee:	f00a fbd1 	bl	800cd94 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80025f2:	4b31      	ldr	r3, [pc, #196]	; (80026b8 <MX_TIM17_Init+0xec>)
 80025f4:	4a31      	ldr	r2, [pc, #196]	; (80026bc <MX_TIM17_Init+0xf0>)
 80025f6:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 9-1;
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <MX_TIM17_Init+0xec>)
 80025fa:	2208      	movs	r2, #8
 80025fc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025fe:	4b2e      	ldr	r3, [pc, #184]	; (80026b8 <MX_TIM17_Init+0xec>)
 8002600:	2200      	movs	r2, #0
 8002602:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8002604:	4b2c      	ldr	r3, [pc, #176]	; (80026b8 <MX_TIM17_Init+0xec>)
 8002606:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800260a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800260c:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <MX_TIM17_Init+0xec>)
 800260e:	2200      	movs	r2, #0
 8002610:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002612:	4b29      	ldr	r3, [pc, #164]	; (80026b8 <MX_TIM17_Init+0xec>)
 8002614:	2200      	movs	r2, #0
 8002616:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002618:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <MX_TIM17_Init+0xec>)
 800261a:	2280      	movs	r2, #128	; 0x80
 800261c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800261e:	4826      	ldr	r0, [pc, #152]	; (80026b8 <MX_TIM17_Init+0xec>)
 8002620:	f005 fadf 	bl	8007be2 <HAL_TIM_Base_Init>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800262a:	f000 f95b 	bl	80028e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800262e:	4822      	ldr	r0, [pc, #136]	; (80026b8 <MX_TIM17_Init+0xec>)
 8002630:	f005 fb2e 	bl	8007c90 <HAL_TIM_PWM_Init>
 8002634:	4603      	mov	r3, r0
 8002636:	2b00      	cmp	r3, #0
 8002638:	d001      	beq.n	800263e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800263a:	f000 f953 	bl	80028e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800263e:	2360      	movs	r3, #96	; 0x60
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002642:	2300      	movs	r3, #0
 8002644:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002646:	2300      	movs	r3, #0
 8002648:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800264a:	2300      	movs	r3, #0
 800264c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800264e:	2300      	movs	r3, #0
 8002650:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002652:	2300      	movs	r3, #0
 8002654:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002656:	2300      	movs	r3, #0
 8002658:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800265a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800265e:	2200      	movs	r2, #0
 8002660:	4619      	mov	r1, r3
 8002662:	4815      	ldr	r0, [pc, #84]	; (80026b8 <MX_TIM17_Init+0xec>)
 8002664:	f005 ff4a 	bl	80084fc <HAL_TIM_PWM_ConfigChannel>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800266e:	f000 f939 	bl	80028e4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002672:	2300      	movs	r3, #0
 8002674:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002676:	2300      	movs	r3, #0
 8002678:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002686:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800268a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002690:	2300      	movs	r3, #0
 8002692:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002694:	463b      	mov	r3, r7
 8002696:	4619      	mov	r1, r3
 8002698:	4807      	ldr	r0, [pc, #28]	; (80026b8 <MX_TIM17_Init+0xec>)
 800269a:	f006 fe2f 	bl	80092fc <HAL_TIMEx_ConfigBreakDeadTime>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80026a4:	f000 f91e 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80026a8:	4803      	ldr	r0, [pc, #12]	; (80026b8 <MX_TIM17_Init+0xec>)
 80026aa:	f000 ff95 	bl	80035d8 <HAL_TIM_MspPostInit>

}
 80026ae:	bf00      	nop
 80026b0:	3750      	adds	r7, #80	; 0x50
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	20000c84 	.word	0x20000c84
 80026bc:	40014800 	.word	0x40014800

080026c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026c4:	4b22      	ldr	r3, [pc, #136]	; (8002750 <MX_USART2_UART_Init+0x90>)
 80026c6:	4a23      	ldr	r2, [pc, #140]	; (8002754 <MX_USART2_UART_Init+0x94>)
 80026c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026ca:	4b21      	ldr	r3, [pc, #132]	; (8002750 <MX_USART2_UART_Init+0x90>)
 80026cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026d2:	4b1f      	ldr	r3, [pc, #124]	; (8002750 <MX_USART2_UART_Init+0x90>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026d8:	4b1d      	ldr	r3, [pc, #116]	; (8002750 <MX_USART2_UART_Init+0x90>)
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026de:	4b1c      	ldr	r3, [pc, #112]	; (8002750 <MX_USART2_UART_Init+0x90>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <MX_USART2_UART_Init+0x90>)
 80026e6:	220c      	movs	r2, #12
 80026e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ea:	4b19      	ldr	r3, [pc, #100]	; (8002750 <MX_USART2_UART_Init+0x90>)
 80026ec:	2200      	movs	r2, #0
 80026ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f0:	4b17      	ldr	r3, [pc, #92]	; (8002750 <MX_USART2_UART_Init+0x90>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026f6:	4b16      	ldr	r3, [pc, #88]	; (8002750 <MX_USART2_UART_Init+0x90>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <MX_USART2_UART_Init+0x90>)
 80026fe:	2200      	movs	r2, #0
 8002700:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002702:	4b13      	ldr	r3, [pc, #76]	; (8002750 <MX_USART2_UART_Init+0x90>)
 8002704:	2200      	movs	r2, #0
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002708:	4811      	ldr	r0, [pc, #68]	; (8002750 <MX_USART2_UART_Init+0x90>)
 800270a:	f006 fedd 	bl	80094c8 <HAL_UART_Init>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d001      	beq.n	8002718 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002714:	f000 f8e6 	bl	80028e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002718:	2100      	movs	r1, #0
 800271a:	480d      	ldr	r0, [pc, #52]	; (8002750 <MX_USART2_UART_Init+0x90>)
 800271c:	f008 fa1b 	bl	800ab56 <HAL_UARTEx_SetTxFifoThreshold>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8002726:	f000 f8dd 	bl	80028e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800272a:	2100      	movs	r1, #0
 800272c:	4808      	ldr	r0, [pc, #32]	; (8002750 <MX_USART2_UART_Init+0x90>)
 800272e:	f008 fa50 	bl	800abd2 <HAL_UARTEx_SetRxFifoThreshold>
 8002732:	4603      	mov	r3, r0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002738:	f000 f8d4 	bl	80028e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800273c:	4804      	ldr	r0, [pc, #16]	; (8002750 <MX_USART2_UART_Init+0x90>)
 800273e:	f008 f9d1 	bl	800aae4 <HAL_UARTEx_DisableFifoMode>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002748:	f000 f8cc 	bl	80028e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}
 8002750:	20000cd0 	.word	0x20000cd0
 8002754:	40004400 	.word	0x40004400

08002758 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800275e:	4b12      	ldr	r3, [pc, #72]	; (80027a8 <MX_DMA_Init+0x50>)
 8002760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002762:	4a11      	ldr	r2, [pc, #68]	; (80027a8 <MX_DMA_Init+0x50>)
 8002764:	f043 0304 	orr.w	r3, r3, #4
 8002768:	6493      	str	r3, [r2, #72]	; 0x48
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <MX_DMA_Init+0x50>)
 800276c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800276e:	f003 0304 	and.w	r3, r3, #4
 8002772:	607b      	str	r3, [r7, #4]
 8002774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <MX_DMA_Init+0x50>)
 8002778:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800277a:	4a0b      	ldr	r2, [pc, #44]	; (80027a8 <MX_DMA_Init+0x50>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6493      	str	r3, [r2, #72]	; 0x48
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <MX_DMA_Init+0x50>)
 8002784:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	603b      	str	r3, [r7, #0]
 800278c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	200b      	movs	r0, #11
 8002794:	f003 fb4b 	bl	8005e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002798:	200b      	movs	r0, #11
 800279a:	f003 fb62 	bl	8005e62 <HAL_NVIC_EnableIRQ>

}
 800279e:	bf00      	nop
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40021000 	.word	0x40021000

080027ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b088      	sub	sp, #32
 80027b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b2:	f107 030c 	add.w	r3, r7, #12
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	605a      	str	r2, [r3, #4]
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	60da      	str	r2, [r3, #12]
 80027c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80027c2:	4b45      	ldr	r3, [pc, #276]	; (80028d8 <MX_GPIO_Init+0x12c>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	4a44      	ldr	r2, [pc, #272]	; (80028d8 <MX_GPIO_Init+0x12c>)
 80027c8:	f043 0320 	orr.w	r3, r3, #32
 80027cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027ce:	4b42      	ldr	r3, [pc, #264]	; (80028d8 <MX_GPIO_Init+0x12c>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	f003 0320 	and.w	r3, r3, #32
 80027d6:	60bb      	str	r3, [r7, #8]
 80027d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027da:	4b3f      	ldr	r3, [pc, #252]	; (80028d8 <MX_GPIO_Init+0x12c>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	4a3e      	ldr	r2, [pc, #248]	; (80028d8 <MX_GPIO_Init+0x12c>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027e6:	4b3c      	ldr	r3, [pc, #240]	; (80028d8 <MX_GPIO_Init+0x12c>)
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	607b      	str	r3, [r7, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <MX_GPIO_Init+0x12c>)
 80027f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f6:	4a38      	ldr	r2, [pc, #224]	; (80028d8 <MX_GPIO_Init+0x12c>)
 80027f8:	f043 0302 	orr.w	r3, r3, #2
 80027fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027fe:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <MX_GPIO_Init+0x12c>)
 8002800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002802:	f003 0302 	and.w	r3, r3, #2
 8002806:	603b      	str	r3, [r7, #0]
 8002808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DEBUG_SIGNAL_A_Pin|DEBUG_SIGNAL_B_Pin, GPIO_PIN_RESET);
 800280a:	2200      	movs	r2, #0
 800280c:	2103      	movs	r1, #3
 800280e:	4833      	ldr	r0, [pc, #204]	; (80028dc <MX_GPIO_Init+0x130>)
 8002810:	f004 f80e 	bl	8006830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_DC_GPIO_Port, SPI_DC_Pin, GPIO_PIN_RESET);
 8002814:	2200      	movs	r2, #0
 8002816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800281a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800281e:	f004 f807 	bl	8006830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8002822:	2200      	movs	r2, #0
 8002824:	2150      	movs	r1, #80	; 0x50
 8002826:	482e      	ldr	r0, [pc, #184]	; (80028e0 <MX_GPIO_Init+0x134>)
 8002828:	f004 f802 	bl	8006830 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_SIGNAL_A_Pin DEBUG_SIGNAL_B_Pin */
  GPIO_InitStruct.Pin = DEBUG_SIGNAL_A_Pin|DEBUG_SIGNAL_B_Pin;
 800282c:	2303      	movs	r3, #3
 800282e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002830:	2301      	movs	r3, #1
 8002832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002834:	2300      	movs	r3, #0
 8002836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002838:	2300      	movs	r3, #0
 800283a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	4619      	mov	r1, r3
 8002842:	4826      	ldr	r0, [pc, #152]	; (80028dc <MX_GPIO_Init+0x130>)
 8002844:	f003 fe5a 	bl	80064fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENC_BUTTON_Pin;
 8002848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800284c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800284e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002854:	2300      	movs	r3, #0
 8002856:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002858:	f107 030c 	add.w	r3, r7, #12
 800285c:	4619      	mov	r1, r3
 800285e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002862:	f003 fe4b 	bl	80064fc <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_Pin|STAND_INP_Pin;
 8002866:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800286a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800286c:	2300      	movs	r3, #0
 800286e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	f107 030c 	add.w	r3, r7, #12
 8002878:	4619      	mov	r1, r3
 800287a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800287e:	f003 fe3d 	bl	80064fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_DC_Pin */
  GPIO_InitStruct.Pin = SPI_DC_Pin;
 8002882:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002886:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002888:	2301      	movs	r3, #1
 800288a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002890:	2300      	movs	r3, #0
 8002892:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_DC_GPIO_Port, &GPIO_InitStruct);
 8002894:	f107 030c 	add.w	r3, r7, #12
 8002898:	4619      	mov	r1, r3
 800289a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289e:	f003 fe2d 	bl	80064fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RST_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin;
 80028a2:	2350      	movs	r3, #80	; 0x50
 80028a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028a6:	2301      	movs	r3, #1
 80028a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b2:	f107 030c 	add.w	r3, r7, #12
 80028b6:	4619      	mov	r1, r3
 80028b8:	4809      	ldr	r0, [pc, #36]	; (80028e0 <MX_GPIO_Init+0x134>)
 80028ba:	f003 fe1f 	bl	80064fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80028be:	2200      	movs	r2, #0
 80028c0:	2100      	movs	r1, #0
 80028c2:	2017      	movs	r0, #23
 80028c4:	f003 fab3 	bl	8005e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80028c8:	2017      	movs	r0, #23
 80028ca:	f003 faca 	bl	8005e62 <HAL_NVIC_EnableIRQ>

}
 80028ce:	bf00      	nop
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000
 80028dc:	48001400 	.word	0x48001400
 80028e0:	48000400 	.word	0x48000400

080028e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80028e8:	b672      	cpsid	i
}
 80028ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80028ec:	e7fe      	b.n	80028ec <Error_Handler+0x8>

080028ee <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b085      	sub	sp, #20
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
 80028f6:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	filter_struct->WindowPointer = 0;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8002910:	2300      	movs	r3, #0
 8002912:	60fb      	str	r3, [r7, #12]
 8002914:	e008      	b.n	8002928 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	2200      	movs	r2, #0
 8002920:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	3301      	adds	r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	ee07 3a90 	vmov	s15, r3
 800292e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	edd3 7a00 	vldr	s15, [r3]
 8002938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800293c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002940:	d4e9      	bmi.n	8002916 <Moving_Average_Init+0x28>
	}
}
 8002942:	bf00      	nop
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	441a      	add	r2, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	f8d3 20cc 	ldr.w	r2, [r3, #204]	; 0xcc
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 8002976:	6839      	ldr	r1, [r7, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	1ad2      	subs	r2, r2, r3
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 800299c:	ee07 3a90 	vmov	s15, r3
 80029a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80029ae:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80029b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ba:	d507      	bpl.n	80029cc <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
 80029ca:	e003      	b.n	80029d4 <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	2200      	movs	r2, #0
 80029d0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 80029da:	ee07 3a90 	vmov	s15, r3
 80029de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	edd3 7a00 	vldr	s15, [r3]
 80029e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80029ec:	ee16 0a90 	vmov	r0, s13
 80029f0:	f7fd fdd2 	bl	8000598 <__aeabi_f2d>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	ec43 2b17 	vmov	d7, r2, r3
}
 80029fc:	eeb0 0a47 	vmov.f32	s0, s14
 8002a00:	eef0 0a67 	vmov.f32	s1, s15
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b082      	sub	sp, #8
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002a3a:	f7fe f895 	bl	8000b68 <__aeabi_dcmpgt>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d006      	beq.n	8002a52 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8002a50:	e011      	b.n	8002a76 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002a5e:	f7fe f865 	bl	8000b2c <__aeabi_dcmplt>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d100      	bne.n	8002a6a <PID_Init+0x60>
}
 8002a68:	e005      	b.n	8002a76 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
	...

08002a80 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6278      	str	r0, [r7, #36]	; 0x24
 8002a88:	6239      	str	r1, [r7, #32]
 8002a8a:	61fa      	str	r2, [r7, #28]
 8002a8c:	61bb      	str	r3, [r7, #24]
 8002a8e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002a92:	ed87 1b02 	vstr	d1, [r7, #8]
 8002a96:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8002aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa2:	6a3a      	ldr	r2, [r7, #32]
 8002aa4:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aae:	2200      	movs	r2, #0
 8002ab0:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8002ab2:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002b08 <PID+0x88>
 8002ab6:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002b10 <PID+0x90>
 8002aba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002abc:	f000 f98d 	bl	8002dda <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac2:	2264      	movs	r2, #100	; 0x64
 8002ac4:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8002ac6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002aca:	4619      	mov	r1, r3
 8002acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ace:	f000 fad5 	bl	800307c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002ad2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	ed97 2b00 	vldr	d2, [r7]
 8002adc:	ed97 1b02 	vldr	d1, [r7, #8]
 8002ae0:	ed97 0b04 	vldr	d0, [r7, #16]
 8002ae4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002ae6:	f000 fa21 	bl	8002f2c <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002aea:	f000 fff9 	bl	8003ae0 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	1ad2      	subs	r2, r2, r3
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	605a      	str	r2, [r3, #4]

}
 8002afa:	bf00      	nop
 8002afc:	3728      	adds	r7, #40	; 0x28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	f3af 8000 	nop.w
 8002b08:	00000000 	.word	0x00000000
 8002b0c:	406fe000 	.word	0x406fe000
	...

08002b18 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b1c:	b08c      	sub	sp, #48	; 0x30
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	785b      	ldrb	r3, [r3, #1]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d101      	bne.n	8002b2e <PID_Compute+0x16>
	{
		return _FALSE;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	e132      	b.n	8002d94 <PID_Compute+0x27c>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002b2e:	f000 ffd7 	bl	8003ae0 <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	6a3a      	ldr	r2, [r7, #32]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	f0c0 8124 	bcc.w	8002d92 <PID_Compute+0x27a>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b62:	f7fd fbb9 	bl	80002d8 <__aeabi_dsub>
 8002b66:	4602      	mov	r2, r0
 8002b68:	460b      	mov	r3, r1
 8002b6a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002b74:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002b78:	f7fd fbae 	bl	80002d8 <__aeabi_dsub>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002b90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002b94:	f7fd fd58 	bl	8000648 <__aeabi_dmul>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	4650      	mov	r0, sl
 8002b9e:	4659      	mov	r1, fp
 8002ba0:	f7fd fb9c 	bl	80002dc <__adddf3>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002bba:	f7fd ffd5 	bl	8000b68 <__aeabi_dcmpgt>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d006      	beq.n	8002bd2 <PID_Compute+0xba>
				{
					uPID->OutputSum = uPID->IMax;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002bca:	6879      	ldr	r1, [r7, #4]
 8002bcc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002bd0:	e010      	b.n	8002bf4 <PID_Compute+0xdc>
				}
		else if (uPID->OutputSum < uPID->IMin)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002bde:	f7fd ffa5 	bl	8000b2c <__aeabi_dcmplt>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <PID_Compute+0xdc>
		{
			uPID->OutputSum = uPID->IMin;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d114      	bne.n	8002c32 <PID_Compute+0x11a>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002c14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c18:	f7fd fd16 	bl	8000648 <__aeabi_dmul>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	460b      	mov	r3, r1
 8002c20:	4650      	mov	r0, sl
 8002c22:	4659      	mov	r1, fp
 8002c24:	f7fd fb58 	bl	80002d8 <__aeabi_dsub>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002c3e:	f7fd ff93 	bl	8000b68 <__aeabi_dcmpgt>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d006      	beq.n	8002c56 <PID_Compute+0x13e>
		{
			uPID->OutputSum = uPID->OutMax;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002c4e:	6879      	ldr	r1, [r7, #4]
 8002c50:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002c54:	e010      	b.n	8002c78 <PID_Compute+0x160>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002c62:	f7fd ff63 	bl	8000b2c <__aeabi_dcmplt>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <PID_Compute+0x160>
		{
			uPID->OutputSum = uPID->OutMin;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c7e:	4690      	mov	r8, r2
 8002c80:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002c84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c88:	4640      	mov	r0, r8
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	f7fd fcdc 	bl	8000648 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d017      	beq.n	8002cd2 <PID_Compute+0x1ba>
		{
			output = uPID->Kp * error;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002ca8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002cac:	f7fd fccc 	bl	8000648 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002cbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002cc2:	f7fd fcc1 	bl	8000648 <__aeabi_dmul>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	460b      	mov	r3, r1
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8002cd0:	e005      	b.n	8002cde <PID_Compute+0x1c6>
		}
		else
		{
			output = 0;
 8002cd2:	f04f 0200 	mov.w	r2, #0
 8002cd6:	f04f 0300 	mov.w	r3, #0
 8002cda:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002cea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cee:	f7fd fcab 	bl	8000648 <__aeabi_dmul>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4640      	mov	r0, r8
 8002cf8:	4649      	mov	r1, r9
 8002cfa:	f7fd faed 	bl	80002d8 <__aeabi_dsub>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	460b      	mov	r3, r1
 8002d02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d06:	f7fd fae9 	bl	80002dc <__adddf3>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002d18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d1c:	f7fd ff24 	bl	8000b68 <__aeabi_dcmpgt>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d005      	beq.n	8002d32 <PID_Compute+0x21a>
		{
			output = uPID->OutMax;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002d2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002d30:	e00e      	b.n	8002d50 <PID_Compute+0x238>
		}
		else if (output < uPID->OutMin)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002d38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d3c:	f7fd fef6 	bl	8000b2c <__aeabi_dcmplt>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <PID_Compute+0x238>
		{
			output = uPID->OutMin;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002d4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d56:	4614      	mov	r4, r2
 8002d58:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002d5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d60:	4620      	mov	r0, r4
 8002d62:	4629      	mov	r1, r5
 8002d64:	f7fd fc70 	bl	8000648 <__aeabi_dmul>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	6879      	ldr	r1, [r7, #4]
 8002d6e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002d76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d7a:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d84:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <PID_Compute+0x27c>

	}
	else
	{
		return _FALSE;
 8002d92:	2300      	movs	r3, #0
	}

}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3730      	adds	r7, #48	; 0x30
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002d9e <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002d9e:	b580      	push	{r7, lr}
 8002da0:	b084      	sub	sp, #16
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	bf0c      	ite	eq
 8002db0:	2301      	moveq	r3, #1
 8002db2:	2300      	movne	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002db8:	7bfb      	ldrb	r3, [r7, #15]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d006      	beq.n	8002dcc <PID_SetMode+0x2e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	785b      	ldrb	r3, [r3, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d102      	bne.n	8002dcc <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7ff fe1f 	bl	8002a0a <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7bfa      	ldrb	r2, [r7, #15]
 8002dd0:	705a      	strb	r2, [r3, #1]

}
 8002dd2:	bf00      	nop
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}

08002dda <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002dda:	b580      	push	{r7, lr}
 8002ddc:	b086      	sub	sp, #24
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6178      	str	r0, [r7, #20]
 8002de2:	ed87 0b02 	vstr	d0, [r7, #8]
 8002de6:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002dea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002df2:	f7fd feaf 	bl	8000b54 <__aeabi_dcmpge>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d158      	bne.n	8002eae <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8002dfc:	6979      	ldr	r1, [r7, #20]
 8002dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e02:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 8002e06:	6979      	ldr	r1, [r7, #20]
 8002e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e0c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	785b      	ldrb	r3, [r3, #1]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d04b      	beq.n	8002eb0 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002e26:	f7fd fe9f 	bl	8000b68 <__aeabi_dcmpgt>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d007      	beq.n	8002e40 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002e3a:	e9c1 2300 	strd	r2, r3, [r1]
 8002e3e:	e012      	b.n	8002e66 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002e4e:	f7fd fe6d 	bl	8000b2c <__aeabi_dcmplt>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d006      	beq.n	8002e66 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002e62:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002e72:	f7fd fe79 	bl	8000b68 <__aeabi_dcmpgt>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d006      	beq.n	8002e8a <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002e82:	6979      	ldr	r1, [r7, #20]
 8002e84:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002e88:	e012      	b.n	8002eb0 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002e96:	f7fd fe49 	bl	8000b2c <__aeabi_dcmplt>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002ea6:	6979      	ldr	r1, [r7, #20]
 8002ea8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002eac:	e000      	b.n	8002eb0 <PID_SetOutputLimits+0xd6>
		return;
 8002eae:	bf00      	nop
		}
		else { }

	}

}
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6178      	str	r0, [r7, #20]
 8002ebe:	ed87 0b02 	vstr	d0, [r7, #8]
 8002ec2:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002ec6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ece:	f7fd fe41 	bl	8000b54 <__aeabi_dcmpge>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8002ed8:	6979      	ldr	r1, [r7, #20]
 8002eda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ede:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8002ee2:	6979      	ldr	r1, [r7, #20]
 8002ee4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ee8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8002eec:	e000      	b.n	8002ef0 <PID_SetILimits+0x3a>
		return;
 8002eee:	bf00      	nop
}
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b088      	sub	sp, #32
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	61f8      	str	r0, [r7, #28]
 8002efe:	ed87 0b04 	vstr	d0, [r7, #16]
 8002f02:	ed87 1b02 	vstr	d1, [r7, #8]
 8002f06:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	789b      	ldrb	r3, [r3, #2]
 8002f0e:	4619      	mov	r1, r3
 8002f10:	ed97 2b00 	vldr	d2, [r7]
 8002f14:	ed97 1b02 	vldr	d1, [r7, #8]
 8002f18:	ed97 0b04 	vldr	d0, [r7, #16]
 8002f1c:	69f8      	ldr	r0, [r7, #28]
 8002f1e:	f000 f805 	bl	8002f2c <PID_SetTunings2>
}
 8002f22:	bf00      	nop
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b08a      	sub	sp, #40	; 0x28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	61f8      	str	r0, [r7, #28]
 8002f34:	ed87 0b04 	vstr	d0, [r7, #16]
 8002f38:	ed87 1b02 	vstr	d1, [r7, #8]
 8002f3c:	ed87 2b00 	vstr	d2, [r7]
 8002f40:	460b      	mov	r3, r1
 8002f42:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f50:	f7fd fdec 	bl	8000b2c <__aeabi_dcmplt>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f040 8089 	bne.w	800306e <PID_SetTunings2+0x142>
 8002f5c:	f04f 0200 	mov.w	r2, #0
 8002f60:	f04f 0300 	mov.w	r3, #0
 8002f64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f68:	f7fd fde0 	bl	8000b2c <__aeabi_dcmplt>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d17d      	bne.n	800306e <PID_SetTunings2+0x142>
 8002f72:	f04f 0200 	mov.w	r2, #0
 8002f76:	f04f 0300 	mov.w	r3, #0
 8002f7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f7e:	f7fd fdd5 	bl	8000b2c <__aeabi_dcmplt>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d172      	bne.n	800306e <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	7efa      	ldrb	r2, [r7, #27]
 8002f8c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002f8e:	7efb      	ldrb	r3, [r7, #27]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002fa0:	69f9      	ldr	r1, [r7, #28]
 8002fa2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fa6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002faa:	69f9      	ldr	r1, [r7, #28]
 8002fac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fb0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002fb4:	69f9      	ldr	r1, [r7, #28]
 8002fb6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fba:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7fd fac6 	bl	8000554 <__aeabi_ui2d>
 8002fc8:	f04f 0200 	mov.w	r2, #0
 8002fcc:	4b2a      	ldr	r3, [pc, #168]	; (8003078 <PID_SetTunings2+0x14c>)
 8002fce:	f7fd fc65 	bl	800089c <__aeabi_ddiv>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8002fda:	69f9      	ldr	r1, [r7, #28]
 8002fdc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002fe0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002fe4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002fe8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002fec:	f7fd fb2c 	bl	8000648 <__aeabi_dmul>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	69f9      	ldr	r1, [r7, #28]
 8002ff6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002ffa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002ffe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003002:	f7fd fc4b 	bl	800089c <__aeabi_ddiv>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	69f9      	ldr	r1, [r7, #28]
 800300c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	78db      	ldrb	r3, [r3, #3]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d12b      	bne.n	8003070 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800301e:	f04f 0000 	mov.w	r0, #0
 8003022:	f04f 0100 	mov.w	r1, #0
 8003026:	f7fd f957 	bl	80002d8 <__aeabi_dsub>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	69f9      	ldr	r1, [r7, #28]
 8003030:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800303a:	f04f 0000 	mov.w	r0, #0
 800303e:	f04f 0100 	mov.w	r1, #0
 8003042:	f7fd f949 	bl	80002d8 <__aeabi_dsub>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	69f9      	ldr	r1, [r7, #28]
 800304c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003056:	f04f 0000 	mov.w	r0, #0
 800305a:	f04f 0100 	mov.w	r1, #0
 800305e:	f7fd f93b 	bl	80002d8 <__aeabi_dsub>
 8003062:	4602      	mov	r2, r0
 8003064:	460b      	mov	r3, r1
 8003066:	69f9      	ldr	r1, [r7, #28]
 8003068:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800306c:	e000      	b.n	8003070 <PID_SetTunings2+0x144>
		return;
 800306e:	bf00      	nop

	}

}
 8003070:	3728      	adds	r7, #40	; 0x28
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	408f4000 	.word	0x408f4000

0800307c <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	460b      	mov	r3, r1
 8003086:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	785b      	ldrb	r3, [r3, #1]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02e      	beq.n	80030ee <PID_SetControllerDirection+0x72>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	78db      	ldrb	r3, [r3, #3]
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	429a      	cmp	r2, r3
 8003098:	d029      	beq.n	80030ee <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80030a0:	f04f 0000 	mov.w	r0, #0
 80030a4:	f04f 0100 	mov.w	r1, #0
 80030a8:	f7fd f916 	bl	80002d8 <__aeabi_dsub>
 80030ac:	4602      	mov	r2, r0
 80030ae:	460b      	mov	r3, r1
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80030bc:	f04f 0000 	mov.w	r0, #0
 80030c0:	f04f 0100 	mov.w	r1, #0
 80030c4:	f7fd f908 	bl	80002d8 <__aeabi_dsub>
 80030c8:	4602      	mov	r2, r0
 80030ca:	460b      	mov	r3, r1
 80030cc:	6879      	ldr	r1, [r7, #4]
 80030ce:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80030d8:	f04f 0000 	mov.w	r0, #0
 80030dc:	f04f 0100 	mov.w	r1, #0
 80030e0:	f7fd f8fa 	bl	80002d8 <__aeabi_dsub>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	70da      	strb	r2, [r3, #3]

}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 80030fc:	b5b0      	push	{r4, r5, r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	dd2e      	ble.n	800316a <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 800310c:	6838      	ldr	r0, [r7, #0]
 800310e:	f7fd fa31 	bl	8000574 <__aeabi_i2d>
 8003112:	4604      	mov	r4, r0
 8003114:	460d      	mov	r5, r1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd fa1a 	bl	8000554 <__aeabi_ui2d>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4620      	mov	r0, r4
 8003126:	4629      	mov	r1, r5
 8003128:	f7fd fbb8 	bl	800089c <__aeabi_ddiv>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800313a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800313e:	f7fd fa83 	bl	8000648 <__aeabi_dmul>
 8003142:	4602      	mov	r2, r0
 8003144:	460b      	mov	r3, r1
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003152:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003156:	f7fd fba1 	bl	800089c <__aeabi_ddiv>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	609a      	str	r2, [r3, #8]

	}

}
 800316a:	bf00      	nop
 800316c:	3710      	adds	r7, #16
 800316e:	46bd      	mov	sp, r7
 8003170:	bdb0      	pop	{r4, r5, r7, pc}

08003172 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003180:	ec43 2b17 	vmov	d7, r2, r3
}
 8003184:	eeb0 0a47 	vmov.f32	s0, s14
 8003188:	eef0 0a67 	vmov.f32	s1, s15
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr

08003196 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8003196:	b480      	push	{r7}
 8003198:	b083      	sub	sp, #12
 800319a:	af00      	add	r7, sp, #0
 800319c:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80031a4:	ec43 2b17 	vmov	d7, r2, r3
}
 80031a8:	eeb0 0a47 	vmov.f32	s0, s14
 80031ac:	eef0 0a67 	vmov.f32	s1, s15
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr

080031ba <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 80031ba:	b480      	push	{r7}
 80031bc:	b083      	sub	sp, #12
 80031be:	af00      	add	r7, sp, #0
 80031c0:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80031c8:	ec43 2b17 	vmov	d7, r2, r3
}
 80031cc:	eeb0 0a47 	vmov.f32	s0, s14
 80031d0:	eef0 0a67 	vmov.f32	s1, s15
 80031d4:	370c      	adds	r7, #12
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_MspInit+0x44>)
 80031e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ea:	4a0e      	ldr	r2, [pc, #56]	; (8003224 <HAL_MspInit+0x44>)
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	6613      	str	r3, [r2, #96]	; 0x60
 80031f2:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <HAL_MspInit+0x44>)
 80031f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	607b      	str	r3, [r7, #4]
 80031fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80031fe:	4b09      	ldr	r3, [pc, #36]	; (8003224 <HAL_MspInit+0x44>)
 8003200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003202:	4a08      	ldr	r2, [pc, #32]	; (8003224 <HAL_MspInit+0x44>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003208:	6593      	str	r3, [r2, #88]	; 0x58
 800320a:	4b06      	ldr	r3, [pc, #24]	; (8003224 <HAL_MspInit+0x44>)
 800320c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003212:	603b      	str	r3, [r7, #0]
 8003214:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003216:	f003 fd05 	bl	8006c24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800321a:	bf00      	nop
 800321c:	3708      	adds	r7, #8
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	40021000 	.word	0x40021000

08003228 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b09c      	sub	sp, #112	; 0x70
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003230:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003234:	2200      	movs	r2, #0
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	605a      	str	r2, [r3, #4]
 800323a:	609a      	str	r2, [r3, #8]
 800323c:	60da      	str	r2, [r3, #12]
 800323e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003240:	f107 0318 	add.w	r3, r7, #24
 8003244:	2244      	movs	r2, #68	; 0x44
 8003246:	2100      	movs	r1, #0
 8003248:	4618      	mov	r0, r3
 800324a:	f009 fda3 	bl	800cd94 <memset>
  if(hadc->Instance==ADC1)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003256:	d17f      	bne.n	8003358 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003258:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800325c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800325e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003262:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003264:	f107 0318 	add.w	r3, r7, #24
 8003268:	4618      	mov	r0, r3
 800326a:	f004 fa1f 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003274:	f7ff fb36 	bl	80028e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003278:	4b39      	ldr	r3, [pc, #228]	; (8003360 <HAL_ADC_MspInit+0x138>)
 800327a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800327c:	4a38      	ldr	r2, [pc, #224]	; (8003360 <HAL_ADC_MspInit+0x138>)
 800327e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003284:	4b36      	ldr	r3, [pc, #216]	; (8003360 <HAL_ADC_MspInit+0x138>)
 8003286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003290:	4b33      	ldr	r3, [pc, #204]	; (8003360 <HAL_ADC_MspInit+0x138>)
 8003292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003294:	4a32      	ldr	r2, [pc, #200]	; (8003360 <HAL_ADC_MspInit+0x138>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800329c:	4b30      	ldr	r3, [pc, #192]	; (8003360 <HAL_ADC_MspInit+0x138>)
 800329e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a0:	f003 0301 	and.w	r3, r3, #1
 80032a4:	613b      	str	r3, [r7, #16]
 80032a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032a8:	4b2d      	ldr	r3, [pc, #180]	; (8003360 <HAL_ADC_MspInit+0x138>)
 80032aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ac:	4a2c      	ldr	r2, [pc, #176]	; (8003360 <HAL_ADC_MspInit+0x138>)
 80032ae:	f043 0302 	orr.w	r3, r3, #2
 80032b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032b4:	4b2a      	ldr	r3, [pc, #168]	; (8003360 <HAL_ADC_MspInit+0x138>)
 80032b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin|CURRENT_Pin|AMBIENT_TEMP_Pin;
 80032c0:	230b      	movs	r3, #11
 80032c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032c4:	2303      	movs	r3, #3
 80032c6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c8:	2300      	movs	r3, #0
 80032ca:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032d0:	4619      	mov	r1, r3
 80032d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d6:	f003 f911 	bl	80064fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUSVOLTAGE_Pin;
 80032da:	2301      	movs	r3, #1
 80032dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032de:	2303      	movs	r3, #3
 80032e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e2:	2300      	movs	r3, #0
 80032e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(BUSVOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80032e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80032ea:	4619      	mov	r1, r3
 80032ec:	481d      	ldr	r0, [pc, #116]	; (8003364 <HAL_ADC_MspInit+0x13c>)
 80032ee:	f003 f905 	bl	80064fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80032f2:	4b1d      	ldr	r3, [pc, #116]	; (8003368 <HAL_ADC_MspInit+0x140>)
 80032f4:	4a1d      	ldr	r2, [pc, #116]	; (800336c <HAL_ADC_MspInit+0x144>)
 80032f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80032f8:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_ADC_MspInit+0x140>)
 80032fa:	2205      	movs	r2, #5
 80032fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032fe:	4b1a      	ldr	r3, [pc, #104]	; (8003368 <HAL_ADC_MspInit+0x140>)
 8003300:	2200      	movs	r2, #0
 8003302:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003304:	4b18      	ldr	r3, [pc, #96]	; (8003368 <HAL_ADC_MspInit+0x140>)
 8003306:	2200      	movs	r2, #0
 8003308:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800330a:	4b17      	ldr	r3, [pc, #92]	; (8003368 <HAL_ADC_MspInit+0x140>)
 800330c:	2280      	movs	r2, #128	; 0x80
 800330e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003310:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_ADC_MspInit+0x140>)
 8003312:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003316:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_ADC_MspInit+0x140>)
 800331a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800331e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003320:	4b11      	ldr	r3, [pc, #68]	; (8003368 <HAL_ADC_MspInit+0x140>)
 8003322:	2220      	movs	r2, #32
 8003324:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_ADC_MspInit+0x140>)
 8003328:	2200      	movs	r2, #0
 800332a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800332c:	480e      	ldr	r0, [pc, #56]	; (8003368 <HAL_ADC_MspInit+0x140>)
 800332e:	f002 fdb3 	bl	8005e98 <HAL_DMA_Init>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d001      	beq.n	800333c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8003338:	f7ff fad4 	bl	80028e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <HAL_ADC_MspInit+0x140>)
 8003340:	655a      	str	r2, [r3, #84]	; 0x54
 8003342:	4a09      	ldr	r2, [pc, #36]	; (8003368 <HAL_ADC_MspInit+0x140>)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003348:	2200      	movs	r2, #0
 800334a:	2100      	movs	r1, #0
 800334c:	2012      	movs	r0, #18
 800334e:	f002 fd6e 	bl	8005e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003352:	2012      	movs	r0, #18
 8003354:	f002 fd85 	bl	8005e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003358:	bf00      	nop
 800335a:	3770      	adds	r7, #112	; 0x70
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	40021000 	.word	0x40021000
 8003364:	48000400 	.word	0x48000400
 8003368:	20000a90 	.word	0x20000a90
 800336c:	40020008 	.word	0x40020008

08003370 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b09a      	sub	sp, #104	; 0x68
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003378:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800337c:	2200      	movs	r2, #0
 800337e:	601a      	str	r2, [r3, #0]
 8003380:	605a      	str	r2, [r3, #4]
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	60da      	str	r2, [r3, #12]
 8003386:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003388:	f107 0310 	add.w	r3, r7, #16
 800338c:	2244      	movs	r2, #68	; 0x44
 800338e:	2100      	movs	r1, #0
 8003390:	4618      	mov	r0, r3
 8003392:	f009 fcff 	bl	800cd94 <memset>
  if(hi2c->Instance==I2C1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1f      	ldr	r2, [pc, #124]	; (8003418 <HAL_I2C_MspInit+0xa8>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d136      	bne.n	800340e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80033a0:	2340      	movs	r3, #64	; 0x40
 80033a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80033a4:	2300      	movs	r3, #0
 80033a6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033a8:	f107 0310 	add.w	r3, r7, #16
 80033ac:	4618      	mov	r0, r3
 80033ae:	f004 f97d 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80033b8:	f7ff fa94 	bl	80028e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033bc:	4b17      	ldr	r3, [pc, #92]	; (800341c <HAL_I2C_MspInit+0xac>)
 80033be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c0:	4a16      	ldr	r2, [pc, #88]	; (800341c <HAL_I2C_MspInit+0xac>)
 80033c2:	f043 0302 	orr.w	r3, r3, #2
 80033c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033c8:	4b14      	ldr	r3, [pc, #80]	; (800341c <HAL_I2C_MspInit+0xac>)
 80033ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033cc:	f003 0302 	and.w	r3, r3, #2
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80033d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80033d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033da:	2312      	movs	r3, #18
 80033dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033e2:	2300      	movs	r3, #0
 80033e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033e6:	2304      	movs	r3, #4
 80033e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033ee:	4619      	mov	r1, r3
 80033f0:	480b      	ldr	r0, [pc, #44]	; (8003420 <HAL_I2C_MspInit+0xb0>)
 80033f2:	f003 f883 	bl	80064fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80033f6:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_I2C_MspInit+0xac>)
 80033f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033fa:	4a08      	ldr	r2, [pc, #32]	; (800341c <HAL_I2C_MspInit+0xac>)
 80033fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003400:	6593      	str	r3, [r2, #88]	; 0x58
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_I2C_MspInit+0xac>)
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800340a:	60bb      	str	r3, [r7, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800340e:	bf00      	nop
 8003410:	3768      	adds	r7, #104	; 0x68
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40005400 	.word	0x40005400
 800341c:	40021000 	.word	0x40021000
 8003420:	48000400 	.word	0x48000400

08003424 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b08a      	sub	sp, #40	; 0x28
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800342c:	f107 0314 	add.w	r3, r7, #20
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	605a      	str	r2, [r3, #4]
 8003436:	609a      	str	r2, [r3, #8]
 8003438:	60da      	str	r2, [r3, #12]
 800343a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a17      	ldr	r2, [pc, #92]	; (80034a0 <HAL_SPI_MspInit+0x7c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d127      	bne.n	8003496 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003446:	4b17      	ldr	r3, [pc, #92]	; (80034a4 <HAL_SPI_MspInit+0x80>)
 8003448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344a:	4a16      	ldr	r2, [pc, #88]	; (80034a4 <HAL_SPI_MspInit+0x80>)
 800344c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003450:	6613      	str	r3, [r2, #96]	; 0x60
 8003452:	4b14      	ldr	r3, [pc, #80]	; (80034a4 <HAL_SPI_MspInit+0x80>)
 8003454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003456:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <HAL_SPI_MspInit+0x80>)
 8003460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003462:	4a10      	ldr	r2, [pc, #64]	; (80034a4 <HAL_SPI_MspInit+0x80>)
 8003464:	f043 0302 	orr.w	r3, r3, #2
 8003468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <HAL_SPI_MspInit+0x80>)
 800346c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	60fb      	str	r3, [r7, #12]
 8003474:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003476:	2328      	movs	r3, #40	; 0x28
 8003478:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800347a:	2302      	movs	r3, #2
 800347c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003482:	2300      	movs	r3, #0
 8003484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003486:	2305      	movs	r3, #5
 8003488:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800348a:	f107 0314 	add.w	r3, r7, #20
 800348e:	4619      	mov	r1, r3
 8003490:	4805      	ldr	r0, [pc, #20]	; (80034a8 <HAL_SPI_MspInit+0x84>)
 8003492:	f003 f833 	bl	80064fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003496:	bf00      	nop
 8003498:	3728      	adds	r7, #40	; 0x28
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40013000 	.word	0x40013000
 80034a4:	40021000 	.word	0x40021000
 80034a8:	48000400 	.word	0x48000400

080034ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034bc:	d10c      	bne.n	80034d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80034be:	4b1e      	ldr	r3, [pc, #120]	; (8003538 <HAL_TIM_Base_MspInit+0x8c>)
 80034c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_TIM_Base_MspInit+0x8c>)
 80034c4:	f043 0301 	orr.w	r3, r3, #1
 80034c8:	6593      	str	r3, [r2, #88]	; 0x58
 80034ca:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_TIM_Base_MspInit+0x8c>)
 80034cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ce:	f003 0301 	and.w	r3, r3, #1
 80034d2:	617b      	str	r3, [r7, #20]
 80034d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80034d6:	e02a      	b.n	800352e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a17      	ldr	r2, [pc, #92]	; (800353c <HAL_TIM_Base_MspInit+0x90>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d114      	bne.n	800350c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_TIM_Base_MspInit+0x8c>)
 80034e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e6:	4a14      	ldr	r2, [pc, #80]	; (8003538 <HAL_TIM_Base_MspInit+0x8c>)
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ec:	6613      	str	r3, [r2, #96]	; 0x60
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_TIM_Base_MspInit+0x8c>)
 80034f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f6:	613b      	str	r3, [r7, #16]
 80034f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80034fa:	2200      	movs	r2, #0
 80034fc:	2100      	movs	r1, #0
 80034fe:	2019      	movs	r0, #25
 8003500:	f002 fc95 	bl	8005e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003504:	2019      	movs	r0, #25
 8003506:	f002 fcac 	bl	8005e62 <HAL_NVIC_EnableIRQ>
}
 800350a:	e010      	b.n	800352e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a0b      	ldr	r2, [pc, #44]	; (8003540 <HAL_TIM_Base_MspInit+0x94>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d10b      	bne.n	800352e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003516:	4b08      	ldr	r3, [pc, #32]	; (8003538 <HAL_TIM_Base_MspInit+0x8c>)
 8003518:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800351a:	4a07      	ldr	r2, [pc, #28]	; (8003538 <HAL_TIM_Base_MspInit+0x8c>)
 800351c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003520:	6613      	str	r3, [r2, #96]	; 0x60
 8003522:	4b05      	ldr	r3, [pc, #20]	; (8003538 <HAL_TIM_Base_MspInit+0x8c>)
 8003524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800352a:	60fb      	str	r3, [r7, #12]
 800352c:	68fb      	ldr	r3, [r7, #12]
}
 800352e:	bf00      	nop
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	40014400 	.word	0x40014400
 8003540:	40014800 	.word	0x40014800

08003544 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08a      	sub	sp, #40	; 0x28
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800354c:	f107 0314 	add.w	r3, r7, #20
 8003550:	2200      	movs	r2, #0
 8003552:	601a      	str	r2, [r3, #0]
 8003554:	605a      	str	r2, [r3, #4]
 8003556:	609a      	str	r2, [r3, #8]
 8003558:	60da      	str	r2, [r3, #12]
 800355a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a1b      	ldr	r2, [pc, #108]	; (80035d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d130      	bne.n	80035c8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003566:	4b1b      	ldr	r3, [pc, #108]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800356a:	4a1a      	ldr	r2, [pc, #104]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x90>)
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	6593      	str	r3, [r2, #88]	; 0x58
 8003572:	4b18      	ldr	r3, [pc, #96]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357e:	4b15      	ldr	r3, [pc, #84]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003582:	4a14      	ldr	r2, [pc, #80]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_TIM_Encoder_MspInit+0x90>)
 800358c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800358e:	f003 0301 	and.w	r3, r3, #1
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003596:	2350      	movs	r3, #80	; 0x50
 8003598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	2302      	movs	r3, #2
 800359c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800359e:	2300      	movs	r3, #0
 80035a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035a2:	2300      	movs	r3, #0
 80035a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035a6:	2302      	movs	r3, #2
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035aa:	f107 0314 	add.w	r3, r7, #20
 80035ae:	4619      	mov	r1, r3
 80035b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b4:	f002 ffa2 	bl	80064fc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80035b8:	2200      	movs	r2, #0
 80035ba:	2100      	movs	r1, #0
 80035bc:	201d      	movs	r0, #29
 80035be:	f002 fc36 	bl	8005e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035c2:	201d      	movs	r0, #29
 80035c4:	f002 fc4d 	bl	8005e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80035c8:	bf00      	nop
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	40000400 	.word	0x40000400
 80035d4:	40021000 	.word	0x40021000

080035d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08a      	sub	sp, #40	; 0x28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035e0:	f107 0314 	add.w	r3, r7, #20
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
 80035e8:	605a      	str	r2, [r3, #4]
 80035ea:	609a      	str	r2, [r3, #8]
 80035ec:	60da      	str	r2, [r3, #12]
 80035ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d11d      	bne.n	8003636 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035fa:	4b22      	ldr	r3, [pc, #136]	; (8003684 <HAL_TIM_MspPostInit+0xac>)
 80035fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fe:	4a21      	ldr	r2, [pc, #132]	; (8003684 <HAL_TIM_MspPostInit+0xac>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003606:	4b1f      	ldr	r3, [pc, #124]	; (8003684 <HAL_TIM_MspPostInit+0xac>)
 8003608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360a:	f003 0301 	and.w	r3, r3, #1
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8003612:	2320      	movs	r3, #32
 8003614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	2302      	movs	r3, #2
 8003618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003622:	2301      	movs	r3, #1
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003626:	f107 0314 	add.w	r3, r7, #20
 800362a:	4619      	mov	r1, r3
 800362c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003630:	f002 ff64 	bl	80064fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003634:	e021      	b.n	800367a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a13      	ldr	r2, [pc, #76]	; (8003688 <HAL_TIM_MspPostInit+0xb0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d11c      	bne.n	800367a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003640:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_TIM_MspPostInit+0xac>)
 8003642:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003644:	4a0f      	ldr	r2, [pc, #60]	; (8003684 <HAL_TIM_MspPostInit+0xac>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800364c:	4b0d      	ldr	r3, [pc, #52]	; (8003684 <HAL_TIM_MspPostInit+0xac>)
 800364e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	60fb      	str	r3, [r7, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEATER_Pin;
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800365c:	2302      	movs	r3, #2
 800365e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003660:	2300      	movs	r3, #0
 8003662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003664:	2300      	movs	r3, #0
 8003666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003668:	2301      	movs	r3, #1
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	4619      	mov	r1, r3
 8003672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003676:	f002 ff41 	bl	80064fc <HAL_GPIO_Init>
}
 800367a:	bf00      	nop
 800367c:	3728      	adds	r7, #40	; 0x28
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	40021000 	.word	0x40021000
 8003688:	40014800 	.word	0x40014800

0800368c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b09a      	sub	sp, #104	; 0x68
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003694:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80036a4:	f107 0310 	add.w	r3, r7, #16
 80036a8:	2244      	movs	r2, #68	; 0x44
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f009 fb71 	bl	800cd94 <memset>
  if(huart->Instance==USART2)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a23      	ldr	r2, [pc, #140]	; (8003744 <HAL_UART_MspInit+0xb8>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d13f      	bne.n	800373c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80036bc:	2302      	movs	r3, #2
 80036be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80036c0:	2300      	movs	r3, #0
 80036c2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036c4:	f107 0310 	add.w	r3, r7, #16
 80036c8:	4618      	mov	r0, r3
 80036ca:	f003 ffef 	bl	80076ac <HAL_RCCEx_PeriphCLKConfig>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80036d4:	f7ff f906 	bl	80028e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_UART_MspInit+0xbc>)
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	4a1a      	ldr	r2, [pc, #104]	; (8003748 <HAL_UART_MspInit+0xbc>)
 80036de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e2:	6593      	str	r3, [r2, #88]	; 0x58
 80036e4:	4b18      	ldr	r3, [pc, #96]	; (8003748 <HAL_UART_MspInit+0xbc>)
 80036e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036f0:	4b15      	ldr	r3, [pc, #84]	; (8003748 <HAL_UART_MspInit+0xbc>)
 80036f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <HAL_UART_MspInit+0xbc>)
 80036f6:	f043 0301 	orr.w	r3, r3, #1
 80036fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036fc:	4b12      	ldr	r3, [pc, #72]	; (8003748 <HAL_UART_MspInit+0xbc>)
 80036fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	60bb      	str	r3, [r7, #8]
 8003706:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8003708:	f248 0304 	movw	r3, #32772	; 0x8004
 800370c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800370e:	2302      	movs	r3, #2
 8003710:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003712:	2300      	movs	r3, #0
 8003714:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003716:	2303      	movs	r3, #3
 8003718:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800371a:	2307      	movs	r3, #7
 800371c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800371e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003722:	4619      	mov	r1, r3
 8003724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003728:	f002 fee8 	bl	80064fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800372c:	2200      	movs	r2, #0
 800372e:	2100      	movs	r1, #0
 8003730:	2026      	movs	r0, #38	; 0x26
 8003732:	f002 fb7c 	bl	8005e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003736:	2026      	movs	r0, #38	; 0x26
 8003738:	f002 fb93 	bl	8005e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800373c:	bf00      	nop
 800373e:	3768      	adds	r7, #104	; 0x68
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}
 8003744:	40004400 	.word	0x40004400
 8003748:	40021000 	.word	0x40021000

0800374c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003750:	e7fe      	b.n	8003750 <NMI_Handler+0x4>

08003752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003752:	b480      	push	{r7}
 8003754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003756:	e7fe      	b.n	8003756 <HardFault_Handler+0x4>

08003758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800375c:	e7fe      	b.n	800375c <MemManage_Handler+0x4>

0800375e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800375e:	b480      	push	{r7}
 8003760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003762:	e7fe      	b.n	8003762 <BusFault_Handler+0x4>

08003764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003768:	e7fe      	b.n	8003768 <UsageFault_Handler+0x4>

0800376a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800376a:	b480      	push	{r7}
 800376c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800376e:	bf00      	nop
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr

08003778 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003786:	b480      	push	{r7}
 8003788:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003798:	f000 f990 	bl	8003abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800379c:	bf00      	nop
 800379e:	bd80      	pop	{r7, pc}

080037a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <DMA1_Channel1_IRQHandler+0x10>)
 80037a6:	f002 fd5a 	bl	800625e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000a90 	.word	0x20000a90

080037b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80037b8:	4802      	ldr	r0, [pc, #8]	; (80037c4 <ADC1_2_IRQHandler+0x10>)
 80037ba:	f000 ff3f 	bl	800463c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000a24 	.word	0x20000a24

080037c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BUTTON_Pin);
 80037cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80037d0:	f003 f846 	bl	8006860 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80037d4:	bf00      	nop
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80037dc:	4802      	ldr	r0, [pc, #8]	; (80037e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80037de:	f004 fd0d 	bl	80081fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80037e2:	bf00      	nop
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	20000c38 	.word	0x20000c38

080037ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80037f0:	4802      	ldr	r0, [pc, #8]	; (80037fc <TIM3_IRQHandler+0x10>)
 80037f2:	f004 fd03 	bl	80081fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80037f6:	bf00      	nop
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000bec 	.word	0x20000bec

08003800 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003804:	4802      	ldr	r0, [pc, #8]	; (8003810 <USART2_IRQHandler+0x10>)
 8003806:	f005 ff57 	bl	80096b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000cd0 	.word	0x20000cd0

08003814 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003814:	b480      	push	{r7}
 8003816:	af00      	add	r7, sp, #0
	return 1;
 8003818:	2301      	movs	r3, #1
}
 800381a:	4618      	mov	r0, r3
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <_kill>:

int _kill(int pid, int sig)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800382e:	f009 fb13 	bl	800ce58 <__errno>
 8003832:	4603      	mov	r3, r0
 8003834:	2216      	movs	r2, #22
 8003836:	601a      	str	r2, [r3, #0]
	return -1;
 8003838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800383c:	4618      	mov	r0, r3
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <_exit>:

void _exit (int status)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800384c:	f04f 31ff 	mov.w	r1, #4294967295
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7ff ffe7 	bl	8003824 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003856:	e7fe      	b.n	8003856 <_exit+0x12>

08003858 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e00a      	b.n	8003880 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800386a:	f3af 8000 	nop.w
 800386e:	4601      	mov	r1, r0
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	60ba      	str	r2, [r7, #8]
 8003876:	b2ca      	uxtb	r2, r1
 8003878:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	3301      	adds	r3, #1
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	dbf0      	blt.n	800386a <_read+0x12>
	}

return len;
 8003888:	687b      	ldr	r3, [r7, #4]
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b086      	sub	sp, #24
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800389e:	2300      	movs	r3, #0
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	e009      	b.n	80038b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	60ba      	str	r2, [r7, #8]
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	3301      	adds	r3, #1
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	429a      	cmp	r2, r3
 80038be:	dbf1      	blt.n	80038a4 <_write+0x12>
	}
	return len;
 80038c0:	687b      	ldr	r3, [r7, #4]
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <_close>:

int _close(int file)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b083      	sub	sp, #12
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
	return -1;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	370c      	adds	r7, #12
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038f2:	605a      	str	r2, [r3, #4]
	return 0;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <_isatty>:

int _isatty(int file)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
	return 1;
 800390a:	2301      	movs	r3, #1
}
 800390c:	4618      	mov	r0, r3
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	60f8      	str	r0, [r7, #12]
 8003920:	60b9      	str	r1, [r7, #8]
 8003922:	607a      	str	r2, [r7, #4]
	return 0;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
	...

08003934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800393c:	4a14      	ldr	r2, [pc, #80]	; (8003990 <_sbrk+0x5c>)
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <_sbrk+0x60>)
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <_sbrk+0x64>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d102      	bne.n	8003956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <_sbrk+0x64>)
 8003952:	4a12      	ldr	r2, [pc, #72]	; (800399c <_sbrk+0x68>)
 8003954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <_sbrk+0x64>)
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	429a      	cmp	r2, r3
 8003962:	d207      	bcs.n	8003974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003964:	f009 fa78 	bl	800ce58 <__errno>
 8003968:	4603      	mov	r3, r0
 800396a:	220c      	movs	r2, #12
 800396c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800396e:	f04f 33ff 	mov.w	r3, #4294967295
 8003972:	e009      	b.n	8003988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003974:	4b08      	ldr	r3, [pc, #32]	; (8003998 <_sbrk+0x64>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800397a:	4b07      	ldr	r3, [pc, #28]	; (8003998 <_sbrk+0x64>)
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4413      	add	r3, r2
 8003982:	4a05      	ldr	r2, [pc, #20]	; (8003998 <_sbrk+0x64>)
 8003984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003986:	68fb      	ldr	r3, [r7, #12]
	}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	20008000 	.word	0x20008000
 8003994:	00000400 	.word	0x00000400
 8003998:	20000df8 	.word	0x20000df8
 800399c:	20000f68 	.word	0x20000f68

080039a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <SystemInit+0x20>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039aa:	4a05      	ldr	r2, [pc, #20]	; (80039c0 <SystemInit+0x20>)
 80039ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 80039c4:	480d      	ldr	r0, [pc, #52]	; (80039fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80039c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039c8:	480d      	ldr	r0, [pc, #52]	; (8003a00 <LoopForever+0x6>)
  ldr r1, =_edata
 80039ca:	490e      	ldr	r1, [pc, #56]	; (8003a04 <LoopForever+0xa>)
  ldr r2, =_sidata
 80039cc:	4a0e      	ldr	r2, [pc, #56]	; (8003a08 <LoopForever+0xe>)
  movs r3, #0
 80039ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80039d0:	e002      	b.n	80039d8 <LoopCopyDataInit>

080039d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039d6:	3304      	adds	r3, #4

080039d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039dc:	d3f9      	bcc.n	80039d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039de:	4a0b      	ldr	r2, [pc, #44]	; (8003a0c <LoopForever+0x12>)
  ldr r4, =_ebss
 80039e0:	4c0b      	ldr	r4, [pc, #44]	; (8003a10 <LoopForever+0x16>)
  movs r3, #0
 80039e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039e4:	e001      	b.n	80039ea <LoopFillZerobss>

080039e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039e8:	3204      	adds	r2, #4

080039ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039ec:	d3fb      	bcc.n	80039e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039ee:	f7ff ffd7 	bl	80039a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039f2:	f009 fa37 	bl	800ce64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039f6:	f7fe f8cb 	bl	8001b90 <main>

080039fa <LoopForever>:

LoopForever:
    b LoopForever
 80039fa:	e7fe      	b.n	80039fa <LoopForever>
	  ldr   r0, =_estack
 80039fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a04:	20000250 	.word	0x20000250
  ldr r2, =_sidata
 8003a08:	080131b0 	.word	0x080131b0
  ldr r2, =_sbss
 8003a0c:	20000250 	.word	0x20000250
  ldr r4, =_ebss
 8003a10:	20000f64 	.word	0x20000f64

08003a14 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a14:	e7fe      	b.n	8003a14 <COMP1_2_3_IRQHandler>

08003a16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a20:	2003      	movs	r0, #3
 8003a22:	f002 f9f9 	bl	8005e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a26:	2000      	movs	r0, #0
 8003a28:	f000 f80e 	bl	8003a48 <HAL_InitTick>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	71fb      	strb	r3, [r7, #7]
 8003a36:	e001      	b.n	8003a3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a38:	f7ff fbd2 	bl	80031e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a3c:	79fb      	ldrb	r3, [r7, #7]

}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	3708      	adds	r7, #8
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bd80      	pop	{r7, pc}
	...

08003a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a50:	2300      	movs	r3, #0
 8003a52:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003a54:	4b16      	ldr	r3, [pc, #88]	; (8003ab0 <HAL_InitTick+0x68>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d022      	beq.n	8003aa2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003a5c:	4b15      	ldr	r3, [pc, #84]	; (8003ab4 <HAL_InitTick+0x6c>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_InitTick+0x68>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003a68:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	4618      	mov	r0, r3
 8003a72:	f002 fa04 	bl	8005e7e <HAL_SYSTICK_Config>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10f      	bne.n	8003a9c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b0f      	cmp	r3, #15
 8003a80:	d809      	bhi.n	8003a96 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a82:	2200      	movs	r2, #0
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8a:	f002 f9d0 	bl	8005e2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a8e:	4a0a      	ldr	r2, [pc, #40]	; (8003ab8 <HAL_InitTick+0x70>)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	e007      	b.n	8003aa6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	e004      	b.n	8003aa6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	73fb      	strb	r3, [r7, #15]
 8003aa0:	e001      	b.n	8003aa6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003aa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3710      	adds	r7, #16
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000050 	.word	0x20000050
 8003ab4:	20000048 	.word	0x20000048
 8003ab8:	2000004c 	.word	0x2000004c

08003abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ac0:	4b05      	ldr	r3, [pc, #20]	; (8003ad8 <HAL_IncTick+0x1c>)
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	4b05      	ldr	r3, [pc, #20]	; (8003adc <HAL_IncTick+0x20>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4413      	add	r3, r2
 8003aca:	4a03      	ldr	r2, [pc, #12]	; (8003ad8 <HAL_IncTick+0x1c>)
 8003acc:	6013      	str	r3, [r2, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr
 8003ad8:	20000dfc 	.word	0x20000dfc
 8003adc:	20000050 	.word	0x20000050

08003ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8003ae4:	4b03      	ldr	r3, [pc, #12]	; (8003af4 <HAL_GetTick+0x14>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr
 8003af2:	bf00      	nop
 8003af4:	20000dfc 	.word	0x20000dfc

08003af8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b00:	f7ff ffee 	bl	8003ae0 <HAL_GetTick>
 8003b04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b10:	d004      	beq.n	8003b1c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b12:	4b09      	ldr	r3, [pc, #36]	; (8003b38 <HAL_Delay+0x40>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	4413      	add	r3, r2
 8003b1a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b1c:	bf00      	nop
 8003b1e:	f7ff ffdf 	bl	8003ae0 <HAL_GetTick>
 8003b22:	4602      	mov	r2, r0
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	1ad3      	subs	r3, r2, r3
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d8f7      	bhi.n	8003b1e <HAL_Delay+0x26>
  {
  }
}
 8003b2e:	bf00      	nop
 8003b30:	bf00      	nop
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	20000050 	.word	0x20000050

08003b3c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	609a      	str	r2, [r3, #8]
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b083      	sub	sp, #12
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	6078      	str	r0, [r7, #4]
 8003b6a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	609a      	str	r2, [r3, #8]
}
 8003b7c:	bf00      	nop
 8003b7e:	370c      	adds	r7, #12
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr

08003ba4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b087      	sub	sp, #28
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	607a      	str	r2, [r7, #4]
 8003bb0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3360      	adds	r3, #96	; 0x60
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <LL_ADC_SetOffset+0x44>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	430a      	orrs	r2, r1
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	03fff000 	.word	0x03fff000

08003bec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b085      	sub	sp, #20
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3360      	adds	r3, #96	; 0x60
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3360      	adds	r3, #96	; 0x60
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003c42:	bf00      	nop
 8003c44:	371c      	adds	r7, #28
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b087      	sub	sp, #28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3360      	adds	r3, #96	; 0x60
 8003c5e:	461a      	mov	r2, r3
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003c78:	bf00      	nop
 8003c7a:	371c      	adds	r7, #28
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3360      	adds	r3, #96	; 0x60
 8003c94:	461a      	mov	r2, r3
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	431a      	orrs	r2, r3
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	615a      	str	r2, [r3, #20]
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003d06:	b480      	push	{r7}
 8003d08:	b087      	sub	sp, #28
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	60f8      	str	r0, [r7, #12]
 8003d0e:	60b9      	str	r1, [r7, #8]
 8003d10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3330      	adds	r3, #48	; 0x30
 8003d16:	461a      	mov	r2, r3
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	0a1b      	lsrs	r3, r3, #8
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	f003 030c 	and.w	r3, r3, #12
 8003d22:	4413      	add	r3, r2
 8003d24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	211f      	movs	r1, #31
 8003d32:	fa01 f303 	lsl.w	r3, r1, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	401a      	ands	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	0e9b      	lsrs	r3, r3, #26
 8003d3e:	f003 011f 	and.w	r1, r3, #31
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	f003 031f 	and.w	r3, r3, #31
 8003d48:	fa01 f303 	lsl.w	r3, r1, r3
 8003d4c:	431a      	orrs	r2, r3
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d52:	bf00      	nop
 8003d54:	371c      	adds	r7, #28
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr

08003d5e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003d5e:	b480      	push	{r7}
 8003d60:	b083      	sub	sp, #12
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d6a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003d72:	2301      	movs	r3, #1
 8003d74:	e000      	b.n	8003d78 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b087      	sub	sp, #28
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	3314      	adds	r3, #20
 8003d94:	461a      	mov	r2, r3
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	0e5b      	lsrs	r3, r3, #25
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	4413      	add	r3, r2
 8003da2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	0d1b      	lsrs	r3, r3, #20
 8003dac:	f003 031f 	and.w	r3, r3, #31
 8003db0:	2107      	movs	r1, #7
 8003db2:	fa01 f303 	lsl.w	r3, r1, r3
 8003db6:	43db      	mvns	r3, r3
 8003db8:	401a      	ands	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	0d1b      	lsrs	r3, r3, #20
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003dce:	bf00      	nop
 8003dd0:	371c      	adds	r7, #28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
	...

08003ddc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	4a0f      	ldr	r2, [pc, #60]	; (8003e28 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d10a      	bne.n	8003e06 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003e04:	e00a      	b.n	8003e1c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e12:	43db      	mvns	r3, r3
 8003e14:	401a      	ands	r2, r3
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003e1c:	bf00      	nop
 8003e1e:	3714      	adds	r7, #20
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	407f0000 	.word	0x407f0000

08003e2c <LL_ADC_SetAnalogWDMonitChannels>:
  *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
  *          -  On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	330c      	adds	r3, #12
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	0d1b      	lsrs	r3, r3, #20
 8003e42:	f003 0103 	and.w	r1, r3, #3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f003 0201 	and.w	r2, r3, #1
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4403      	add	r3, r0
 8003e5a:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8003e66:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	401a      	ands	r2, r3
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	400b      	ands	r3, r1
 8003e74:	431a      	orrs	r2, r3
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8003e7a:	bf00      	nop
 8003e7c:	371c      	adds	r7, #28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b087      	sub	sp, #28
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	60f8      	str	r0, [r7, #12]
 8003e8e:	60b9      	str	r1, [r7, #8]
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3320      	adds	r3, #32
 8003e98:	461a      	mov	r2, r3
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	0d1b      	lsrs	r3, r3, #20
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	4413      	add	r3, r2
 8003ea6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	0419      	lsls	r1, r3, #16
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	430b      	orrs	r3, r1
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	f003 031f 	and.w	r3, r3, #31
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b083      	sub	sp, #12
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003f12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	6093      	str	r3, [r2, #8]
}
 8003f1a:	bf00      	nop
 8003f1c:	370c      	adds	r7, #12
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr

08003f26 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003f26:	b480      	push	{r7}
 8003f28:	b083      	sub	sp, #12
 8003f2a:	af00      	add	r7, sp, #0
 8003f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f3a:	d101      	bne.n	8003f40 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003f5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003f62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f8a:	d101      	bne.n	8003f90 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e000      	b.n	8003f92 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003f9e:	b480      	push	{r7}
 8003fa0:	b083      	sub	sp, #12
 8003fa2:	af00      	add	r7, sp, #0
 8003fa4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fb2:	f043 0201 	orr.w	r2, r3, #1
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fda:	f043 0202 	orr.w	r2, r3, #2
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b083      	sub	sp, #12
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	f003 0301 	and.w	r3, r3, #1
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <LL_ADC_IsEnabled+0x18>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <LL_ADC_IsEnabled+0x1a>
 8004006:	2300      	movs	r3, #0
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b02      	cmp	r3, #2
 8004026:	d101      	bne.n	800402c <LL_ADC_IsDisableOngoing+0x18>
 8004028:	2301      	movs	r3, #1
 800402a:	e000      	b.n	800402e <LL_ADC_IsDisableOngoing+0x1a>
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800403a:	b480      	push	{r7}
 800403c:	b083      	sub	sp, #12
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800404a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800404e:	f043 0204 	orr.w	r2, r3, #4
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr

08004062 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004062:	b480      	push	{r7}
 8004064:	b083      	sub	sp, #12
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b04      	cmp	r3, #4
 8004074:	d101      	bne.n	800407a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004076:	2301      	movs	r3, #1
 8004078:	e000      	b.n	800407c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b08      	cmp	r3, #8
 800409a:	d101      	bne.n	80040a0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800409c:	2301      	movs	r3, #1
 800409e:	e000      	b.n	80040a2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr

080040ae <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b083      	sub	sp, #12
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2280      	movs	r2, #128	; 0x80
 80040ba:	601a      	str	r2, [r3, #0]
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040d6:	601a      	str	r2, [r3, #0]
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040f2:	601a      	str	r2, [r3, #0]
}
 80040f4:	bf00      	nop
 80040f6:	370c      	adds	r7, #12
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	605a      	str	r2, [r3, #4]
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	605a      	str	r2, [r3, #4]
}
 8004134:	bf00      	nop
 8004136:	370c      	adds	r7, #12
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	605a      	str	r2, [r3, #4]
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	605a      	str	r2, [r3, #4]
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	605a      	str	r2, [r3, #4]
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	605a      	str	r2, [r3, #4]
}
 80041b4:	bf00      	nop
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b089      	sub	sp, #36	; 0x24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d101      	bne.n	80041da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e177      	b.n	80044ca <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d109      	bne.n	80041fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff f81d 	bl	8003228 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff fe90 	bl	8003f26 <LL_ADC_IsDeepPowerDownEnabled>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff fe76 	bl	8003f02 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff feab 	bl	8003f76 <LL_ADC_IsInternalRegulatorEnabled>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d115      	bne.n	8004252 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4618      	mov	r0, r3
 800422c:	f7ff fe8f 	bl	8003f4e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004230:	4b9c      	ldr	r3, [pc, #624]	; (80044a4 <HAL_ADC_Init+0x2e4>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	099b      	lsrs	r3, r3, #6
 8004236:	4a9c      	ldr	r2, [pc, #624]	; (80044a8 <HAL_ADC_Init+0x2e8>)
 8004238:	fba2 2303 	umull	r2, r3, r2, r3
 800423c:	099b      	lsrs	r3, r3, #6
 800423e:	3301      	adds	r3, #1
 8004240:	005b      	lsls	r3, r3, #1
 8004242:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004244:	e002      	b.n	800424c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	3b01      	subs	r3, #1
 800424a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f9      	bne.n	8004246 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4618      	mov	r0, r3
 8004258:	f7ff fe8d 	bl	8003f76 <LL_ADC_IsInternalRegulatorEnabled>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10d      	bne.n	800427e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004266:	f043 0210 	orr.w	r2, r3, #16
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004272:	f043 0201 	orr.w	r2, r3, #1
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7ff feed 	bl	8004062 <LL_ADC_REG_IsConversionOngoing>
 8004288:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	f003 0310 	and.w	r3, r3, #16
 8004292:	2b00      	cmp	r3, #0
 8004294:	f040 8110 	bne.w	80044b8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	f040 810c 	bne.w	80044b8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80042a8:	f043 0202 	orr.w	r2, r3, #2
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f7ff fe9a 	bl	8003fee <LL_ADC_IsEnabled>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d111      	bne.n	80042e4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80042c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80042c4:	f7ff fe93 	bl	8003fee <LL_ADC_IsEnabled>
 80042c8:	4604      	mov	r4, r0
 80042ca:	4878      	ldr	r0, [pc, #480]	; (80044ac <HAL_ADC_Init+0x2ec>)
 80042cc:	f7ff fe8f 	bl	8003fee <LL_ADC_IsEnabled>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4323      	orrs	r3, r4
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	4619      	mov	r1, r3
 80042de:	4874      	ldr	r0, [pc, #464]	; (80044b0 <HAL_ADC_Init+0x2f0>)
 80042e0:	f7ff fc2c 	bl	8003b3c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	7f5b      	ldrb	r3, [r3, #29]
 80042e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80042ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80042f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80042fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004302:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004304:	4313      	orrs	r3, r2
 8004306:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800430e:	2b01      	cmp	r3, #1
 8004310:	d106      	bne.n	8004320 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	3b01      	subs	r3, #1
 8004318:	045b      	lsls	r3, r3, #17
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	4313      	orrs	r3, r2
 800431e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d009      	beq.n	800433c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004334:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	4313      	orrs	r3, r2
 800433a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	68da      	ldr	r2, [r3, #12]
 8004342:	4b5c      	ldr	r3, [pc, #368]	; (80044b4 <HAL_ADC_Init+0x2f4>)
 8004344:	4013      	ands	r3, r2
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	69b9      	ldr	r1, [r7, #24]
 800434c:	430b      	orrs	r3, r1
 800434e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	430a      	orrs	r2, r1
 8004364:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4618      	mov	r0, r3
 800436c:	f7ff fe79 	bl	8004062 <LL_ADC_REG_IsConversionOngoing>
 8004370:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff fe86 	bl	8004088 <LL_ADC_INJ_IsConversionOngoing>
 800437c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d16d      	bne.n	8004460 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d16a      	bne.n	8004460 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800438e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004396:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004398:	4313      	orrs	r3, r2
 800439a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043a6:	f023 0302 	bic.w	r3, r3, #2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	69b9      	ldr	r1, [r7, #24]
 80043b0:	430b      	orrs	r3, r1
 80043b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d017      	beq.n	80043ec <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691a      	ldr	r2, [r3, #16]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80043d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80043d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6911      	ldr	r1, [r2, #16]
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	6812      	ldr	r2, [r2, #0]
 80043e4:	430b      	orrs	r3, r1
 80043e6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80043ea:	e013      	b.n	8004414 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691a      	ldr	r2, [r3, #16]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80043fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	6812      	ldr	r2, [r2, #0]
 8004408:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800440c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004410:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800441a:	2b01      	cmp	r3, #1
 800441c:	d118      	bne.n	8004450 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004428:	f023 0304 	bic.w	r3, r3, #4
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004434:	4311      	orrs	r1, r2
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800443a:	4311      	orrs	r1, r2
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004440:	430a      	orrs	r2, r1
 8004442:	431a      	orrs	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f042 0201 	orr.w	r2, r2, #1
 800444c:	611a      	str	r2, [r3, #16]
 800444e:	e007      	b.n	8004460 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	691a      	ldr	r2, [r3, #16]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f022 0201 	bic.w	r2, r2, #1
 800445e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d10c      	bne.n	8004482 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f023 010f 	bic.w	r1, r3, #15
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	1e5a      	subs	r2, r3, #1
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	430a      	orrs	r2, r1
 800447e:	631a      	str	r2, [r3, #48]	; 0x30
 8004480:	e007      	b.n	8004492 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 020f 	bic.w	r2, r2, #15
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004496:	f023 0303 	bic.w	r3, r3, #3
 800449a:	f043 0201 	orr.w	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80044a2:	e011      	b.n	80044c8 <HAL_ADC_Init+0x308>
 80044a4:	20000048 	.word	0x20000048
 80044a8:	053e2d63 	.word	0x053e2d63
 80044ac:	50000100 	.word	0x50000100
 80044b0:	50000300 	.word	0x50000300
 80044b4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044bc:	f043 0210 	orr.w	r2, r3, #16
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80044c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3724      	adds	r7, #36	; 0x24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd90      	pop	{r4, r7, pc}
 80044d2:	bf00      	nop

080044d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b086      	sub	sp, #24
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80044e0:	4851      	ldr	r0, [pc, #324]	; (8004628 <HAL_ADC_Start_DMA+0x154>)
 80044e2:	f7ff fcf2 	bl	8003eca <LL_ADC_GetMultimode>
 80044e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4618      	mov	r0, r3
 80044ee:	f7ff fdb8 	bl	8004062 <LL_ADC_REG_IsConversionOngoing>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f040 808f 	bne.w	8004618 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004500:	2b01      	cmp	r3, #1
 8004502:	d101      	bne.n	8004508 <HAL_ADC_Start_DMA+0x34>
 8004504:	2302      	movs	r3, #2
 8004506:	e08a      	b.n	800461e <HAL_ADC_Start_DMA+0x14a>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b05      	cmp	r3, #5
 800451a:	d002      	beq.n	8004522 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b09      	cmp	r3, #9
 8004520:	d173      	bne.n	800460a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f001 f8c8 	bl	80056b8 <ADC_Enable>
 8004528:	4603      	mov	r3, r0
 800452a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800452c:	7dfb      	ldrb	r3, [r7, #23]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d166      	bne.n	8004600 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004536:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a38      	ldr	r2, [pc, #224]	; (800462c <HAL_ADC_Start_DMA+0x158>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d002      	beq.n	8004556 <HAL_ADC_Start_DMA+0x82>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	e001      	b.n	800455a <HAL_ADC_Start_DMA+0x86>
 8004556:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800455a:	68fa      	ldr	r2, [r7, #12]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	4293      	cmp	r3, r2
 8004560:	d002      	beq.n	8004568 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d105      	bne.n	8004574 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004578:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d006      	beq.n	800458e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004584:	f023 0206 	bic.w	r2, r3, #6
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	661a      	str	r2, [r3, #96]	; 0x60
 800458c:	e002      	b.n	8004594 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004598:	4a25      	ldr	r2, [pc, #148]	; (8004630 <HAL_ADC_Start_DMA+0x15c>)
 800459a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a0:	4a24      	ldr	r2, [pc, #144]	; (8004634 <HAL_ADC_Start_DMA+0x160>)
 80045a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a8:	4a23      	ldr	r2, [pc, #140]	; (8004638 <HAL_ADC_Start_DMA+0x164>)
 80045aa:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	221c      	movs	r2, #28
 80045b2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f042 0210 	orr.w	r2, r2, #16
 80045ca:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68da      	ldr	r2, [r3, #12]
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f042 0201 	orr.w	r2, r2, #1
 80045da:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3340      	adds	r3, #64	; 0x40
 80045e6:	4619      	mov	r1, r3
 80045e8:	68ba      	ldr	r2, [r7, #8]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f001 fcfc 	bl	8005fe8 <HAL_DMA_Start_IT>
 80045f0:	4603      	mov	r3, r0
 80045f2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fd1e 	bl	800403a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80045fe:	e00d      	b.n	800461c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004608:	e008      	b.n	800461c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004616:	e001      	b.n	800461c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004618:	2302      	movs	r3, #2
 800461a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800461c:	7dfb      	ldrb	r3, [r7, #23]
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	50000300 	.word	0x50000300
 800462c:	50000100 	.word	0x50000100
 8004630:	0800583b 	.word	0x0800583b
 8004634:	08005913 	.word	0x08005913
 8004638:	0800592f 	.word	0x0800592f

0800463c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	; 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004644:	2300      	movs	r3, #0
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004658:	4883      	ldr	r0, [pc, #524]	; (8004868 <HAL_ADC_IRQHandler+0x22c>)
 800465a:	f7ff fc36 	bl	8003eca <LL_ADC_GetMultimode>
 800465e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d017      	beq.n	800469a <HAL_ADC_IRQHandler+0x5e>
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d012      	beq.n	800469a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004678:	f003 0310 	and.w	r3, r3, #16
 800467c:	2b00      	cmp	r3, #0
 800467e:	d105      	bne.n	800468c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004684:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f001 fa45 	bl	8005b1c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2202      	movs	r2, #2
 8004698:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d004      	beq.n	80046ae <HAL_ADC_IRQHandler+0x72>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f003 0304 	and.w	r3, r3, #4
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f000 8085 	beq.w	80047c4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80046ba:	69bb      	ldr	r3, [r7, #24]
 80046bc:	f003 0308 	and.w	r3, r3, #8
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d07f      	beq.n	80047c4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c8:	f003 0310 	and.w	r3, r3, #16
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d105      	bne.n	80046dc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7ff fafd 	bl	8003ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d064      	beq.n	80047b6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a5e      	ldr	r2, [pc, #376]	; (800486c <HAL_ADC_IRQHandler+0x230>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d002      	beq.n	80046fc <HAL_ADC_IRQHandler+0xc0>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	e001      	b.n	8004700 <HAL_ADC_IRQHandler+0xc4>
 80046fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	4293      	cmp	r3, r2
 8004706:	d008      	beq.n	800471a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d005      	beq.n	800471a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b05      	cmp	r3, #5
 8004712:	d002      	beq.n	800471a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	2b09      	cmp	r3, #9
 8004718:	d104      	bne.n	8004724 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	623b      	str	r3, [r7, #32]
 8004722:	e00d      	b.n	8004740 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a50      	ldr	r2, [pc, #320]	; (800486c <HAL_ADC_IRQHandler+0x230>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d002      	beq.n	8004734 <HAL_ADC_IRQHandler+0xf8>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	e001      	b.n	8004738 <HAL_ADC_IRQHandler+0xfc>
 8004734:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004738:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d135      	bne.n	80047b6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b08      	cmp	r3, #8
 8004756:	d12e      	bne.n	80047b6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4618      	mov	r0, r3
 800475e:	f7ff fc80 	bl	8004062 <LL_ADC_REG_IsConversionOngoing>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d11a      	bne.n	800479e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685a      	ldr	r2, [r3, #4]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 020c 	bic.w	r2, r2, #12
 8004776:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800477c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004788:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d112      	bne.n	80047b6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004794:	f043 0201 	orr.w	r2, r3, #1
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	65da      	str	r2, [r3, #92]	; 0x5c
 800479c:	e00b      	b.n	80047b6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047a2:	f043 0210 	orr.w	r2, r3, #16
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047ae:	f043 0201 	orr.w	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f95a 	bl	8004a70 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	220c      	movs	r2, #12
 80047c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	f003 0320 	and.w	r3, r3, #32
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <HAL_ADC_IRQHandler+0x19c>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	f003 0320 	and.w	r3, r3, #32
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10b      	bne.n	80047f0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 809e 	beq.w	8004920 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	f000 8098 	beq.w	8004920 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f4:	f003 0310 	and.w	r3, r3, #16
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d105      	bne.n	8004808 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff faa6 	bl	8003d5e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004812:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fa61 	bl	8003ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800481e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a11      	ldr	r2, [pc, #68]	; (800486c <HAL_ADC_IRQHandler+0x230>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d002      	beq.n	8004830 <HAL_ADC_IRQHandler+0x1f4>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	e001      	b.n	8004834 <HAL_ADC_IRQHandler+0x1f8>
 8004830:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6812      	ldr	r2, [r2, #0]
 8004838:	4293      	cmp	r3, r2
 800483a:	d008      	beq.n	800484e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b06      	cmp	r3, #6
 8004846:	d002      	beq.n	800484e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2b07      	cmp	r3, #7
 800484c:	d104      	bne.n	8004858 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	623b      	str	r3, [r7, #32]
 8004856:	e011      	b.n	800487c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a03      	ldr	r2, [pc, #12]	; (800486c <HAL_ADC_IRQHandler+0x230>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d006      	beq.n	8004870 <HAL_ADC_IRQHandler+0x234>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	e005      	b.n	8004874 <HAL_ADC_IRQHandler+0x238>
 8004868:	50000300 	.word	0x50000300
 800486c:	50000100 	.word	0x50000100
 8004870:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004874:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d047      	beq.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004888:	2b00      	cmp	r3, #0
 800488a:	d007      	beq.n	800489c <HAL_ADC_IRQHandler+0x260>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d03f      	beq.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004898:	2b00      	cmp	r3, #0
 800489a:	d13a      	bne.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a6:	2b40      	cmp	r3, #64	; 0x40
 80048a8:	d133      	bne.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d12e      	bne.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fbe5 	bl	8004088 <LL_ADC_INJ_IsConversionOngoing>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d11a      	bne.n	80048fa <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	685a      	ldr	r2, [r3, #4]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80048d2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d112      	bne.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048f0:	f043 0201 	orr.w	r2, r3, #1
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80048f8:	e00b      	b.n	8004912 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fe:	f043 0210 	orr.w	r2, r3, #16
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800490a:	f043 0201 	orr.w	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f001 f8da 	bl	8005acc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2260      	movs	r2, #96	; 0x60
 800491e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004926:	2b00      	cmp	r3, #0
 8004928:	d011      	beq.n	800494e <HAL_ADC_IRQHandler+0x312>
 800492a:	69bb      	ldr	r3, [r7, #24]
 800492c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004930:	2b00      	cmp	r3, #0
 8004932:	d00c      	beq.n	800494e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f8a9 	bl	8004a98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2280      	movs	r2, #128	; 0x80
 800494c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800494e:	69fb      	ldr	r3, [r7, #28]
 8004950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004954:	2b00      	cmp	r3, #0
 8004956:	d012      	beq.n	800497e <HAL_ADC_IRQHandler+0x342>
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00d      	beq.n	800497e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004966:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f001 f8c0 	bl	8005af4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f44f 7280 	mov.w	r2, #256	; 0x100
 800497c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004984:	2b00      	cmp	r3, #0
 8004986:	d012      	beq.n	80049ae <HAL_ADC_IRQHandler+0x372>
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00d      	beq.n	80049ae <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004996:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f001 f8b2 	bl	8005b08 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	f003 0310 	and.w	r3, r3, #16
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d036      	beq.n	8004a26 <HAL_ADC_IRQHandler+0x3ea>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	f003 0310 	and.w	r3, r3, #16
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d031      	beq.n	8004a26 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d102      	bne.n	80049d0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80049ca:	2301      	movs	r3, #1
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
 80049ce:	e014      	b.n	80049fa <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d008      	beq.n	80049e8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80049d6:	4825      	ldr	r0, [pc, #148]	; (8004a6c <HAL_ADC_IRQHandler+0x430>)
 80049d8:	f7ff fa85 	bl	8003ee6 <LL_ADC_GetMultiDMATransfer>
 80049dc:	4603      	mov	r3, r0
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80049e2:	2301      	movs	r3, #1
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
 80049e6:	e008      	b.n	80049fa <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	68db      	ldr	r3, [r3, #12]
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d001      	beq.n	80049fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80049f6:	2301      	movs	r3, #1
 80049f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80049fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d10e      	bne.n	8004a1e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a10:	f043 0202 	orr.w	r2, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f000 f847 	bl	8004aac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2210      	movs	r2, #16
 8004a24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d018      	beq.n	8004a62 <HAL_ADC_IRQHandler+0x426>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d013      	beq.n	8004a62 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a4a:	f043 0208 	orr.w	r2, r3, #8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a5a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f001 f83f 	bl	8005ae0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004a62:	bf00      	nop
 8004a64:	3728      	adds	r7, #40	; 0x28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	50000300 	.word	0x50000300

08004a70 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b083      	sub	sp, #12
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004a8c:	bf00      	nop
 8004a8e:	370c      	adds	r7, #12
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b083      	sub	sp, #12
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004aa0:	bf00      	nop
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b0b6      	sub	sp, #216	; 0xd8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
 8004ac8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_ADC_ConfigChannel+0x22>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e3c8      	b.n	8005274 <HAL_ADC_ConfigChannel+0x7b4>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff fab7 	bl	8004062 <LL_ADC_REG_IsConversionOngoing>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f040 83ad 	bne.w	8005256 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6818      	ldr	r0, [r3, #0]
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	6859      	ldr	r1, [r3, #4]
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	461a      	mov	r2, r3
 8004b0a:	f7ff f8fc 	bl	8003d06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7ff faa5 	bl	8004062 <LL_ADC_REG_IsConversionOngoing>
 8004b18:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff fab1 	bl	8004088 <LL_ADC_INJ_IsConversionOngoing>
 8004b26:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004b2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f040 81d9 	bne.w	8004ee6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004b34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f040 81d4 	bne.w	8004ee6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b46:	d10f      	bne.n	8004b68 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6818      	ldr	r0, [r3, #0]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2200      	movs	r2, #0
 8004b52:	4619      	mov	r1, r3
 8004b54:	f7ff f916 	bl	8003d84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7ff f8aa 	bl	8003cba <LL_ADC_SetSamplingTimeCommonConfig>
 8004b66:	e00e      	b.n	8004b86 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	6819      	ldr	r1, [r3, #0]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	461a      	mov	r2, r3
 8004b76:	f7ff f905 	bl	8003d84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2100      	movs	r1, #0
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7ff f89a 	bl	8003cba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	08db      	lsrs	r3, r3, #3
 8004b92:	f003 0303 	and.w	r3, r3, #3
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	691b      	ldr	r3, [r3, #16]
 8004ba4:	2b04      	cmp	r3, #4
 8004ba6:	d022      	beq.n	8004bee <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	6919      	ldr	r1, [r3, #16]
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004bb8:	f7fe fff4 	bl	8003ba4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	6919      	ldr	r1, [r3, #16]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f7ff f840 	bl	8003c4e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6919      	ldr	r1, [r3, #16]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	7f1b      	ldrb	r3, [r3, #28]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d102      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x124>
 8004bde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004be2:	e000      	b.n	8004be6 <HAL_ADC_ConfigChannel+0x126>
 8004be4:	2300      	movs	r3, #0
 8004be6:	461a      	mov	r2, r3
 8004be8:	f7ff f84c 	bl	8003c84 <LL_ADC_SetOffsetSaturation>
 8004bec:	e17b      	b.n	8004ee6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fe fff9 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <HAL_ADC_ConfigChannel+0x15a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe ffee 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004c10:	4603      	mov	r3, r0
 8004c12:	0e9b      	lsrs	r3, r3, #26
 8004c14:	f003 021f 	and.w	r2, r3, #31
 8004c18:	e01e      	b.n	8004c58 <HAL_ADC_ConfigChannel+0x198>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f7fe ffe3 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004c26:	4603      	mov	r3, r0
 8004c28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004c30:	fa93 f3a3 	rbit	r3, r3
 8004c34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004c38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004c3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004c48:	2320      	movs	r3, #32
 8004c4a:	e004      	b.n	8004c56 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004c4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004c50:	fab3 f383 	clz	r3, r3
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d105      	bne.n	8004c70 <HAL_ADC_ConfigChannel+0x1b0>
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	0e9b      	lsrs	r3, r3, #26
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	e018      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0x1e2>
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004c7c:	fa93 f3a3 	rbit	r3, r3
 8004c80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004c84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004c8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d101      	bne.n	8004c98 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004c94:	2320      	movs	r3, #32
 8004c96:	e004      	b.n	8004ca2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004c9c:	fab3 f383 	clz	r3, r3
 8004ca0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d106      	bne.n	8004cb4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2200      	movs	r2, #0
 8004cac:	2100      	movs	r1, #0
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fe ffb2 	bl	8003c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2101      	movs	r1, #1
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe ff96 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d10a      	bne.n	8004ce0 <HAL_ADC_ConfigChannel+0x220>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2101      	movs	r1, #1
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	f7fe ff8b 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	0e9b      	lsrs	r3, r3, #26
 8004cda:	f003 021f 	and.w	r2, r3, #31
 8004cde:	e01e      	b.n	8004d1e <HAL_ADC_ConfigChannel+0x25e>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2101      	movs	r1, #1
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f7fe ff80 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004cec:	4603      	mov	r3, r0
 8004cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004cf6:	fa93 f3a3 	rbit	r3, r3
 8004cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004d02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004d06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d101      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004d0e:	2320      	movs	r3, #32
 8004d10:	e004      	b.n	8004d1c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004d12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004d16:	fab3 f383 	clz	r3, r3
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d105      	bne.n	8004d36 <HAL_ADC_ConfigChannel+0x276>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	0e9b      	lsrs	r3, r3, #26
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	e018      	b.n	8004d68 <HAL_ADC_ConfigChannel+0x2a8>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d42:	fa93 f3a3 	rbit	r3, r3
 8004d46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004d4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004d4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004d52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004d5a:	2320      	movs	r3, #32
 8004d5c:	e004      	b.n	8004d68 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004d5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d62:	fab3 f383 	clz	r3, r3
 8004d66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d106      	bne.n	8004d7a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2200      	movs	r2, #0
 8004d72:	2101      	movs	r1, #1
 8004d74:	4618      	mov	r0, r3
 8004d76:	f7fe ff4f 	bl	8003c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	2102      	movs	r1, #2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7fe ff33 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004d86:	4603      	mov	r3, r0
 8004d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10a      	bne.n	8004da6 <HAL_ADC_ConfigChannel+0x2e6>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2102      	movs	r1, #2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7fe ff28 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	0e9b      	lsrs	r3, r3, #26
 8004da0:	f003 021f 	and.w	r2, r3, #31
 8004da4:	e01e      	b.n	8004de4 <HAL_ADC_ConfigChannel+0x324>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2102      	movs	r1, #2
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fe ff1d 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004db2:	4603      	mov	r3, r0
 8004db4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004db8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004dbc:	fa93 f3a3 	rbit	r3, r3
 8004dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004dcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d101      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004dd4:	2320      	movs	r3, #32
 8004dd6:	e004      	b.n	8004de2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004dd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004ddc:	fab3 f383 	clz	r3, r3
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d105      	bne.n	8004dfc <HAL_ADC_ConfigChannel+0x33c>
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0e9b      	lsrs	r3, r3, #26
 8004df6:	f003 031f 	and.w	r3, r3, #31
 8004dfa:	e016      	b.n	8004e2a <HAL_ADC_ConfigChannel+0x36a>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004e08:	fa93 f3a3 	rbit	r3, r3
 8004e0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004e0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004e10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004e14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	e004      	b.n	8004e2a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004e20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004e24:	fab3 f383 	clz	r3, r3
 8004e28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d106      	bne.n	8004e3c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	2200      	movs	r2, #0
 8004e34:	2102      	movs	r1, #2
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe feee 	bl	8003c18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2103      	movs	r1, #3
 8004e42:	4618      	mov	r0, r3
 8004e44:	f7fe fed2 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <HAL_ADC_ConfigChannel+0x3a8>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2103      	movs	r1, #3
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f7fe fec7 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	0e9b      	lsrs	r3, r3, #26
 8004e62:	f003 021f 	and.w	r2, r3, #31
 8004e66:	e017      	b.n	8004e98 <HAL_ADC_ConfigChannel+0x3d8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	2103      	movs	r1, #3
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe febc 	bl	8003bec <LL_ADC_GetOffsetChannel>
 8004e74:	4603      	mov	r3, r0
 8004e76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e7a:	fa93 f3a3 	rbit	r3, r3
 8004e7e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004e80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e82:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004e8a:	2320      	movs	r3, #32
 8004e8c:	e003      	b.n	8004e96 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004e8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e90:	fab3 f383 	clz	r3, r3
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d105      	bne.n	8004eb0 <HAL_ADC_ConfigChannel+0x3f0>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	0e9b      	lsrs	r3, r3, #26
 8004eaa:	f003 031f 	and.w	r3, r3, #31
 8004eae:	e011      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x414>
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eb8:	fa93 f3a3 	rbit	r3, r3
 8004ebc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004ebe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004ec8:	2320      	movs	r3, #32
 8004eca:	e003      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004ecc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ece:	fab3 f383 	clz	r3, r3
 8004ed2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d106      	bne.n	8004ee6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2200      	movs	r2, #0
 8004ede:	2103      	movs	r1, #3
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f7fe fe99 	bl	8003c18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f7ff f87f 	bl	8003fee <LL_ADC_IsEnabled>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f040 8140 	bne.w	8005178 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	6819      	ldr	r1, [r3, #0]
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	68db      	ldr	r3, [r3, #12]
 8004f04:	461a      	mov	r2, r3
 8004f06:	f7fe ff69 	bl	8003ddc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	4a8f      	ldr	r2, [pc, #572]	; (800514c <HAL_ADC_ConfigChannel+0x68c>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	f040 8131 	bne.w	8005178 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10b      	bne.n	8004f3e <HAL_ADC_ConfigChannel+0x47e>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	0e9b      	lsrs	r3, r3, #26
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2b09      	cmp	r3, #9
 8004f34:	bf94      	ite	ls
 8004f36:	2301      	movls	r3, #1
 8004f38:	2300      	movhi	r3, #0
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	e019      	b.n	8004f72 <HAL_ADC_ConfigChannel+0x4b2>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f46:	fa93 f3a3 	rbit	r3, r3
 8004f4a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004f4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f4e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004f56:	2320      	movs	r3, #32
 8004f58:	e003      	b.n	8004f62 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f5c:	fab3 f383 	clz	r3, r3
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	3301      	adds	r3, #1
 8004f64:	f003 031f 	and.w	r3, r3, #31
 8004f68:	2b09      	cmp	r3, #9
 8004f6a:	bf94      	ite	ls
 8004f6c:	2301      	movls	r3, #1
 8004f6e:	2300      	movhi	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d079      	beq.n	800506a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d107      	bne.n	8004f92 <HAL_ADC_ConfigChannel+0x4d2>
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	0e9b      	lsrs	r3, r3, #26
 8004f88:	3301      	adds	r3, #1
 8004f8a:	069b      	lsls	r3, r3, #26
 8004f8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004f90:	e015      	b.n	8004fbe <HAL_ADC_ConfigChannel+0x4fe>
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f9a:	fa93 f3a3 	rbit	r3, r3
 8004f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004fa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fa2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004faa:	2320      	movs	r3, #32
 8004fac:	e003      	b.n	8004fb6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fb0:	fab3 f383 	clz	r3, r3
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	069b      	lsls	r3, r3, #26
 8004fba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d109      	bne.n	8004fde <HAL_ADC_ConfigChannel+0x51e>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	0e9b      	lsrs	r3, r3, #26
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	f003 031f 	and.w	r3, r3, #31
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fdc:	e017      	b.n	800500e <HAL_ADC_ConfigChannel+0x54e>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fe4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004fe6:	fa93 f3a3 	rbit	r3, r3
 8004fea:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004fec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004ff6:	2320      	movs	r3, #32
 8004ff8:	e003      	b.n	8005002 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffc:	fab3 f383 	clz	r3, r3
 8005000:	b2db      	uxtb	r3, r3
 8005002:	3301      	adds	r3, #1
 8005004:	f003 031f 	and.w	r3, r3, #31
 8005008:	2101      	movs	r1, #1
 800500a:	fa01 f303 	lsl.w	r3, r1, r3
 800500e:	ea42 0103 	orr.w	r1, r2, r3
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <HAL_ADC_ConfigChannel+0x574>
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	0e9b      	lsrs	r3, r3, #26
 8005024:	3301      	adds	r3, #1
 8005026:	f003 021f 	and.w	r2, r3, #31
 800502a:	4613      	mov	r3, r2
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	4413      	add	r3, r2
 8005030:	051b      	lsls	r3, r3, #20
 8005032:	e018      	b.n	8005066 <HAL_ADC_ConfigChannel+0x5a6>
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	fa93 f3a3 	rbit	r3, r3
 8005040:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005042:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005044:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8005046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 800504c:	2320      	movs	r3, #32
 800504e:	e003      	b.n	8005058 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8005050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005052:	fab3 f383 	clz	r3, r3
 8005056:	b2db      	uxtb	r3, r3
 8005058:	3301      	adds	r3, #1
 800505a:	f003 021f 	and.w	r2, r3, #31
 800505e:	4613      	mov	r3, r2
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	4413      	add	r3, r2
 8005064:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005066:	430b      	orrs	r3, r1
 8005068:	e081      	b.n	800516e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005072:	2b00      	cmp	r3, #0
 8005074:	d107      	bne.n	8005086 <HAL_ADC_ConfigChannel+0x5c6>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	0e9b      	lsrs	r3, r3, #26
 800507c:	3301      	adds	r3, #1
 800507e:	069b      	lsls	r3, r3, #26
 8005080:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005084:	e015      	b.n	80050b2 <HAL_ADC_ConfigChannel+0x5f2>
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800508c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508e:	fa93 f3a3 	rbit	r3, r3
 8005092:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8005094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005096:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800509e:	2320      	movs	r3, #32
 80050a0:	e003      	b.n	80050aa <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	fab3 f383 	clz	r3, r3
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	3301      	adds	r3, #1
 80050ac:	069b      	lsls	r3, r3, #26
 80050ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <HAL_ADC_ConfigChannel+0x612>
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	0e9b      	lsrs	r3, r3, #26
 80050c4:	3301      	adds	r3, #1
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	2101      	movs	r1, #1
 80050cc:	fa01 f303 	lsl.w	r3, r1, r3
 80050d0:	e017      	b.n	8005102 <HAL_ADC_ConfigChannel+0x642>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	fa93 f3a3 	rbit	r3, r3
 80050de:	61fb      	str	r3, [r7, #28]
  return result;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80050ea:	2320      	movs	r3, #32
 80050ec:	e003      	b.n	80050f6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	fab3 f383 	clz	r3, r3
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	3301      	adds	r3, #1
 80050f8:	f003 031f 	and.w	r3, r3, #31
 80050fc:	2101      	movs	r1, #1
 80050fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005102:	ea42 0103 	orr.w	r1, r2, r3
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10d      	bne.n	800512e <HAL_ADC_ConfigChannel+0x66e>
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	0e9b      	lsrs	r3, r3, #26
 8005118:	3301      	adds	r3, #1
 800511a:	f003 021f 	and.w	r2, r3, #31
 800511e:	4613      	mov	r3, r2
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	4413      	add	r3, r2
 8005124:	3b1e      	subs	r3, #30
 8005126:	051b      	lsls	r3, r3, #20
 8005128:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800512c:	e01e      	b.n	800516c <HAL_ADC_ConfigChannel+0x6ac>
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	fa93 f3a3 	rbit	r3, r3
 800513a:	613b      	str	r3, [r7, #16]
  return result;
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d104      	bne.n	8005150 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8005146:	2320      	movs	r3, #32
 8005148:	e006      	b.n	8005158 <HAL_ADC_ConfigChannel+0x698>
 800514a:	bf00      	nop
 800514c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	fab3 f383 	clz	r3, r3
 8005156:	b2db      	uxtb	r3, r3
 8005158:	3301      	adds	r3, #1
 800515a:	f003 021f 	and.w	r2, r3, #31
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	3b1e      	subs	r3, #30
 8005166:	051b      	lsls	r3, r3, #20
 8005168:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800516c:	430b      	orrs	r3, r1
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	6892      	ldr	r2, [r2, #8]
 8005172:	4619      	mov	r1, r3
 8005174:	f7fe fe06 	bl	8003d84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	4b3f      	ldr	r3, [pc, #252]	; (800527c <HAL_ADC_ConfigChannel+0x7bc>)
 800517e:	4013      	ands	r3, r2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d071      	beq.n	8005268 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005184:	483e      	ldr	r0, [pc, #248]	; (8005280 <HAL_ADC_ConfigChannel+0x7c0>)
 8005186:	f7fe fcff 	bl	8003b88 <LL_ADC_GetCommonPathInternalCh>
 800518a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a3c      	ldr	r2, [pc, #240]	; (8005284 <HAL_ADC_ConfigChannel+0x7c4>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d004      	beq.n	80051a2 <HAL_ADC_ConfigChannel+0x6e2>
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a3a      	ldr	r2, [pc, #232]	; (8005288 <HAL_ADC_ConfigChannel+0x7c8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d127      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80051a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d121      	bne.n	80051f2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b6:	d157      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80051b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80051bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80051c0:	4619      	mov	r1, r3
 80051c2:	482f      	ldr	r0, [pc, #188]	; (8005280 <HAL_ADC_ConfigChannel+0x7c0>)
 80051c4:	f7fe fccd 	bl	8003b62 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80051c8:	4b30      	ldr	r3, [pc, #192]	; (800528c <HAL_ADC_ConfigChannel+0x7cc>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	099b      	lsrs	r3, r3, #6
 80051ce:	4a30      	ldr	r2, [pc, #192]	; (8005290 <HAL_ADC_ConfigChannel+0x7d0>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	099b      	lsrs	r3, r3, #6
 80051d6:	1c5a      	adds	r2, r3, #1
 80051d8:	4613      	mov	r3, r2
 80051da:	005b      	lsls	r3, r3, #1
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051e2:	e002      	b.n	80051ea <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f9      	bne.n	80051e4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80051f0:	e03a      	b.n	8005268 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a27      	ldr	r2, [pc, #156]	; (8005294 <HAL_ADC_ConfigChannel+0x7d4>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d113      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x764>
 80051fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005200:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10d      	bne.n	8005224 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a22      	ldr	r2, [pc, #136]	; (8005298 <HAL_ADC_ConfigChannel+0x7d8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d02a      	beq.n	8005268 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005212:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005216:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800521a:	4619      	mov	r1, r3
 800521c:	4818      	ldr	r0, [pc, #96]	; (8005280 <HAL_ADC_ConfigChannel+0x7c0>)
 800521e:	f7fe fca0 	bl	8003b62 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005222:	e021      	b.n	8005268 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a1c      	ldr	r2, [pc, #112]	; (800529c <HAL_ADC_ConfigChannel+0x7dc>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d11c      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800522e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005236:	2b00      	cmp	r3, #0
 8005238:	d116      	bne.n	8005268 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a16      	ldr	r2, [pc, #88]	; (8005298 <HAL_ADC_ConfigChannel+0x7d8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d011      	beq.n	8005268 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005248:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800524c:	4619      	mov	r1, r3
 800524e:	480c      	ldr	r0, [pc, #48]	; (8005280 <HAL_ADC_ConfigChannel+0x7c0>)
 8005250:	f7fe fc87 	bl	8003b62 <LL_ADC_SetCommonPathInternalCh>
 8005254:	e008      	b.n	8005268 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800525a:	f043 0220 	orr.w	r2, r3, #32
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005270:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005274:	4618      	mov	r0, r3
 8005276:	37d8      	adds	r7, #216	; 0xd8
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}
 800527c:	80080000 	.word	0x80080000
 8005280:	50000300 	.word	0x50000300
 8005284:	c3210000 	.word	0xc3210000
 8005288:	90c00010 	.word	0x90c00010
 800528c:	20000048 	.word	0x20000048
 8005290:	053e2d63 	.word	0x053e2d63
 8005294:	c7520000 	.word	0xc7520000
 8005298:	50000100 	.word	0x50000100
 800529c:	cb840000 	.word	0xcb840000

080052a0 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b08e      	sub	sp, #56	; 0x38
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80052aa:	2300      	movs	r3, #0
 80052ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052b8:	d003      	beq.n	80052c2 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80052be:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d101      	bne.n	80052d0 <HAL_ADC_AnalogWDGConfig+0x30>
 80052cc:	2302      	movs	r3, #2
 80052ce:	e1ea      	b.n	80056a6 <HAL_ADC_AnalogWDGConfig+0x406>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4618      	mov	r0, r3
 80052de:	f7fe fec0 	bl	8004062 <LL_ADC_REG_IsConversionOngoing>
 80052e2:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7fe fecd 	bl	8004088 <LL_ADC_INJ_IsConversionOngoing>
 80052ee:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f040 8175 	bne.w	80055e2 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f040 8171 	bne.w	80055e2 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	4a90      	ldr	r2, [pc, #576]	; (8005548 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005306:	4293      	cmp	r3, r2
 8005308:	f040 808d 	bne.w	8005426 <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005314:	d034      	beq.n	8005380 <HAL_ADC_AnalogWDGConfig+0xe0>
 8005316:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800531a:	d856      	bhi.n	80053ca <HAL_ADC_AnalogWDGConfig+0x12a>
 800531c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005320:	d04b      	beq.n	80053ba <HAL_ADC_AnalogWDGConfig+0x11a>
 8005322:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005326:	d850      	bhi.n	80053ca <HAL_ADC_AnalogWDGConfig+0x12a>
 8005328:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800532c:	d01b      	beq.n	8005366 <HAL_ADC_AnalogWDGConfig+0xc6>
 800532e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005332:	d84a      	bhi.n	80053ca <HAL_ADC_AnalogWDGConfig+0x12a>
 8005334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005338:	d037      	beq.n	80053aa <HAL_ADC_AnalogWDGConfig+0x10a>
 800533a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800533e:	d844      	bhi.n	80053ca <HAL_ADC_AnalogWDGConfig+0x12a>
 8005340:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005344:	d029      	beq.n	800539a <HAL_ADC_AnalogWDGConfig+0xfa>
 8005346:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800534a:	d13e      	bne.n	80053ca <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6818      	ldr	r0, [r3, #0]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005358:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800535c:	461a      	mov	r2, r3
 800535e:	497a      	ldr	r1, [pc, #488]	; (8005548 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005360:	f7fe fd64 	bl	8003e2c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8005364:	e039      	b.n	80053da <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005372:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8005376:	461a      	mov	r2, r3
 8005378:	4973      	ldr	r1, [pc, #460]	; (8005548 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800537a:	f7fe fd57 	bl	8003e2c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 800537e:	e02c      	b.n	80053da <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6818      	ldr	r0, [r3, #0]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800538c:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8005390:	461a      	mov	r2, r3
 8005392:	496d      	ldr	r1, [pc, #436]	; (8005548 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005394:	f7fe fd4a 	bl	8003e2c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8005398:	e01f      	b.n	80053da <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a6b      	ldr	r2, [pc, #428]	; (800554c <HAL_ADC_AnalogWDGConfig+0x2ac>)
 80053a0:	4969      	ldr	r1, [pc, #420]	; (8005548 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe fd42 	bl	8003e2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80053a8:	e017      	b.n	80053da <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a68      	ldr	r2, [pc, #416]	; (8005550 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 80053b0:	4965      	ldr	r1, [pc, #404]	; (8005548 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80053b2:	4618      	mov	r0, r3
 80053b4:	f7fe fd3a 	bl	8003e2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80053b8:	e00f      	b.n	80053da <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a65      	ldr	r2, [pc, #404]	; (8005554 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80053c0:	4961      	ldr	r1, [pc, #388]	; (8005548 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80053c2:	4618      	mov	r0, r3
 80053c4:	f7fe fd32 	bl	8003e2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80053c8:	e007      	b.n	80053da <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2200      	movs	r2, #0
 80053d0:	495d      	ldr	r1, [pc, #372]	; (8005548 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fe fd2a 	bl	8003e2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80053d8:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6a1b      	ldr	r3, [r3, #32]
 80053e0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	699a      	ldr	r2, [r3, #24]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4618      	mov	r0, r3
 8005402:	f7fe fe54 	bl	80040ae <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	7b1b      	ldrb	r3, [r3, #12]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d105      	bne.n	800541a <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4618      	mov	r0, r3
 8005414:	f7fe fe74 	bl	8004100 <LL_ADC_EnableIT_AWD1>
 8005418:	e0e3      	b.n	80055e2 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fe9e 	bl	8004160 <LL_ADC_DisableIT_AWD1>
 8005424:	e0dd      	b.n	80055e2 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800542e:	d01d      	beq.n	800546c <HAL_ADC_AnalogWDGConfig+0x1cc>
 8005430:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005434:	f200 8092 	bhi.w	800555c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005438:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800543c:	d07b      	beq.n	8005536 <HAL_ADC_AnalogWDGConfig+0x296>
 800543e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005442:	f200 808b 	bhi.w	800555c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005446:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800544a:	d00f      	beq.n	800546c <HAL_ADC_AnalogWDGConfig+0x1cc>
 800544c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005450:	f200 8084 	bhi.w	800555c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005458:	d06d      	beq.n	8005536 <HAL_ADC_AnalogWDGConfig+0x296>
 800545a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800545e:	d87d      	bhi.n	800555c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005460:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005464:	d067      	beq.n	8005536 <HAL_ADC_AnalogWDGConfig+0x296>
 8005466:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800546a:	d177      	bne.n	800555c <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a39      	ldr	r2, [pc, #228]	; (8005558 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d12f      	bne.n	80054d6 <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800547e:	2b00      	cmp	r3, #0
 8005480:	d108      	bne.n	8005494 <HAL_ADC_AnalogWDGConfig+0x1f4>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	0e9b      	lsrs	r3, r3, #26
 8005488:	f003 031f 	and.w	r3, r3, #31
 800548c:	2201      	movs	r2, #1
 800548e:	fa02 f303 	lsl.w	r3, r2, r3
 8005492:	e016      	b.n	80054c2 <HAL_ADC_AnalogWDGConfig+0x222>
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	fa93 f3a3 	rbit	r3, r3
 80054a0:	61bb      	str	r3, [r7, #24]
  return result;
 80054a2:	69bb      	ldr	r3, [r7, #24]
 80054a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80054a6:	6a3b      	ldr	r3, [r7, #32]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d101      	bne.n	80054b0 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 80054ac:	2320      	movs	r3, #32
 80054ae:	e003      	b.n	80054b8 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	fab3 f383 	clz	r3, r3
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 031f 	and.w	r3, r3, #31
 80054bc:	2201      	movs	r2, #1
 80054be:	fa02 f303 	lsl.w	r3, r2, r3
 80054c2:	687a      	ldr	r2, [r7, #4]
 80054c4:	6812      	ldr	r2, [r2, #0]
 80054c6:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	6812      	ldr	r2, [r2, #0]
 80054ce:	430b      	orrs	r3, r1
 80054d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80054d4:	e04b      	b.n	800556e <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d108      	bne.n	80054f4 <HAL_ADC_AnalogWDGConfig+0x254>
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	0e9b      	lsrs	r3, r3, #26
 80054e8:	f003 031f 	and.w	r3, r3, #31
 80054ec:	2201      	movs	r2, #1
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	e016      	b.n	8005522 <HAL_ADC_AnalogWDGConfig+0x282>
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	fa93 f3a3 	rbit	r3, r3
 8005500:	60fb      	str	r3, [r7, #12]
  return result;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 800550c:	2320      	movs	r3, #32
 800550e:	e003      	b.n	8005518 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	fab3 f383 	clz	r3, r3
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	2201      	movs	r2, #1
 800551e:	fa02 f303 	lsl.w	r3, r2, r3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	6812      	ldr	r2, [r2, #0]
 800552e:	430b      	orrs	r3, r1
 8005530:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8005534:	e01b      	b.n	800556e <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a05      	ldr	r2, [pc, #20]	; (8005554 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8005540:	4619      	mov	r1, r3
 8005542:	f7fe fc73 	bl	8003e2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005546:	e012      	b.n	800556e <HAL_ADC_AnalogWDGConfig+0x2ce>
 8005548:	7dc00000 	.word	0x7dc00000
 800554c:	0087ffff 	.word	0x0087ffff
 8005550:	0107ffff 	.word	0x0107ffff
 8005554:	0187ffff 	.word	0x0187ffff
 8005558:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6818      	ldr	r0, [r3, #0]
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	2200      	movs	r2, #0
 8005566:	4619      	mov	r1, r3
 8005568:	f7fe fc60 	bl	8003e2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800556c:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a4f      	ldr	r2, [pc, #316]	; (80056b0 <HAL_ADC_AnalogWDGConfig+0x410>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d11a      	bne.n	80055ae <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800557c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe fd9d 	bl	80040c8 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	7b1b      	ldrb	r3, [r3, #12]
 8005592:	2b01      	cmp	r3, #1
 8005594:	d105      	bne.n	80055a2 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe fdc0 	bl	8004120 <LL_ADC_EnableIT_AWD2>
 80055a0:	e01f      	b.n	80055e2 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe fdea 	bl	8004180 <LL_ADC_DisableIT_AWD2>
 80055ac:	e019      	b.n	80055e2 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fe fd90 	bl	80040e4 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	7b1b      	ldrb	r3, [r3, #12]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d105      	bne.n	80055d8 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fe fdb5 	bl	8004140 <LL_ADC_EnableIT_AWD3>
 80055d6:	e004      	b.n	80055e2 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4618      	mov	r0, r3
 80055de:	f7fe fddf 	bl	80041a0 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a33      	ldr	r2, [pc, #204]	; (80056b4 <HAL_ADC_AnalogWDGConfig+0x414>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d118      	bne.n	800561e <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	08db      	lsrs	r3, r3, #3
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	695a      	ldr	r2, [r3, #20]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	08db      	lsrs	r3, r3, #3
 8005610:	f003 0303 	and.w	r3, r3, #3
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	633b      	str	r3, [r7, #48]	; 0x30
 800561c:	e035      	b.n	800568a <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0318 	and.w	r3, r3, #24
 8005628:	2b18      	cmp	r3, #24
 800562a:	d00f      	beq.n	800564c <HAL_ADC_AnalogWDGConfig+0x3ac>
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	691a      	ldr	r2, [r3, #16]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	08db      	lsrs	r3, r3, #3
 8005638:	f003 0303 	and.w	r3, r3, #3
 800563c:	f1c3 0302 	rsb	r3, r3, #2
 8005640:	005b      	lsls	r3, r3, #1
 8005642:	f003 031e 	and.w	r3, r3, #30
 8005646:	fa22 f303 	lsr.w	r3, r2, r3
 800564a:	e002      	b.n	8005652 <HAL_ADC_AnalogWDGConfig+0x3b2>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	009b      	lsls	r3, r3, #2
 8005652:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	f003 0318 	and.w	r3, r3, #24
 800565e:	2b18      	cmp	r3, #24
 8005660:	d00f      	beq.n	8005682 <HAL_ADC_AnalogWDGConfig+0x3e2>
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	695a      	ldr	r2, [r3, #20]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	08db      	lsrs	r3, r3, #3
 800566e:	f003 0303 	and.w	r3, r3, #3
 8005672:	f1c3 0302 	rsb	r3, r3, #2
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	f003 031e 	and.w	r3, r3, #30
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
 8005680:	e002      	b.n	8005688 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6818      	ldr	r0, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	6819      	ldr	r1, [r3, #0]
 8005692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005694:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005696:	f7fe fbf6 	bl	8003e86 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80056a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3738      	adds	r7, #56	; 0x38
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	0017ffff 	.word	0x0017ffff
 80056b4:	7dc00000 	.word	0x7dc00000

080056b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fc92 	bl	8003fee <LL_ADC_IsEnabled>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d14d      	bne.n	800576c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689a      	ldr	r2, [r3, #8]
 80056d6:	4b28      	ldr	r3, [pc, #160]	; (8005778 <ADC_Enable+0xc0>)
 80056d8:	4013      	ands	r3, r2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00d      	beq.n	80056fa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e2:	f043 0210 	orr.w	r2, r3, #16
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056ee:	f043 0201 	orr.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e039      	b.n	800576e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fe fc4d 	bl	8003f9e <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005704:	f7fe f9ec 	bl	8003ae0 <HAL_GetTick>
 8005708:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800570a:	e028      	b.n	800575e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4618      	mov	r0, r3
 8005712:	f7fe fc6c 	bl	8003fee <LL_ADC_IsEnabled>
 8005716:	4603      	mov	r3, r0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d104      	bne.n	8005726 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4618      	mov	r0, r3
 8005722:	f7fe fc3c 	bl	8003f9e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005726:	f7fe f9db 	bl	8003ae0 <HAL_GetTick>
 800572a:	4602      	mov	r2, r0
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	2b02      	cmp	r3, #2
 8005732:	d914      	bls.n	800575e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b01      	cmp	r3, #1
 8005740:	d00d      	beq.n	800575e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005746:	f043 0210 	orr.w	r2, r3, #16
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005752:	f043 0201 	orr.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e007      	b.n	800576e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0301 	and.w	r3, r3, #1
 8005768:	2b01      	cmp	r3, #1
 800576a:	d1cf      	bne.n	800570c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	8000003f 	.word	0x8000003f

0800577c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4618      	mov	r0, r3
 800578a:	f7fe fc43 	bl	8004014 <LL_ADC_IsDisableOngoing>
 800578e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4618      	mov	r0, r3
 8005796:	f7fe fc2a 	bl	8003fee <LL_ADC_IsEnabled>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d047      	beq.n	8005830 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d144      	bne.n	8005830 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f003 030d 	and.w	r3, r3, #13
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d10c      	bne.n	80057ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7fe fc04 	bl	8003fc6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2203      	movs	r2, #3
 80057c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80057c6:	f7fe f98b 	bl	8003ae0 <HAL_GetTick>
 80057ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057cc:	e029      	b.n	8005822 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057d2:	f043 0210 	orr.w	r2, r3, #16
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057de:	f043 0201 	orr.w	r2, r3, #1
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e023      	b.n	8005832 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80057ea:	f7fe f979 	bl	8003ae0 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	2b02      	cmp	r3, #2
 80057f6:	d914      	bls.n	8005822 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00d      	beq.n	8005822 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580a:	f043 0210 	orr.w	r2, r3, #16
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005816:	f043 0201 	orr.w	r2, r3, #1
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e007      	b.n	8005832 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d1dc      	bne.n	80057ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b084      	sub	sp, #16
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800584c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005850:	2b00      	cmp	r3, #0
 8005852:	d14b      	bne.n	80058ec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005858:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d021      	beq.n	80058b2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fe fa34 	bl	8003ce0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d032      	beq.n	80058e4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d12b      	bne.n	80058e4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005890:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d11f      	bne.n	80058e4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058a8:	f043 0201 	orr.w	r2, r3, #1
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80058b0:	e018      	b.n	80058e4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f003 0302 	and.w	r3, r3, #2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d111      	bne.n	80058e4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d105      	bne.n	80058e4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058dc:	f043 0201 	orr.w	r2, r3, #1
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7ff f8c3 	bl	8004a70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80058ea:	e00e      	b.n	800590a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d003      	beq.n	8005900 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff f8d7 	bl	8004aac <HAL_ADC_ErrorCallback>
}
 80058fe:	e004      	b.n	800590a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	4798      	blx	r3
}
 800590a:	bf00      	nop
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005912:	b580      	push	{r7, lr}
 8005914:	b084      	sub	sp, #16
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800591e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005920:	68f8      	ldr	r0, [r7, #12]
 8005922:	f7ff f8af 	bl	8004a84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005926:	bf00      	nop
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800592e:	b580      	push	{r7, lr}
 8005930:	b084      	sub	sp, #16
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800593a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800594c:	f043 0204 	orr.w	r2, r3, #4
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff f8a9 	bl	8004aac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800595a:	bf00      	nop
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <LL_ADC_IsEnabled>:
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b01      	cmp	r3, #1
 8005974:	d101      	bne.n	800597a <LL_ADC_IsEnabled+0x18>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <LL_ADC_IsEnabled+0x1a>
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <LL_ADC_StartCalibration>:
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800599a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800599e:	683a      	ldr	r2, [r7, #0]
 80059a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80059a4:	4313      	orrs	r3, r2
 80059a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	609a      	str	r2, [r3, #8]
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <LL_ADC_IsCalibrationOnGoing>:
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ce:	d101      	bne.n	80059d4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80059d0:	2301      	movs	r3, #1
 80059d2:	e000      	b.n	80059d6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f003 0304 	and.w	r3, r3, #4
 80059f2:	2b04      	cmp	r3, #4
 80059f4:	d101      	bne.n	80059fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80059f6:	2301      	movs	r3, #1
 80059f8:	e000      	b.n	80059fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005a12:	2300      	movs	r3, #0
 8005a14:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d101      	bne.n	8005a24 <HAL_ADCEx_Calibration_Start+0x1c>
 8005a20:	2302      	movs	r3, #2
 8005a22:	e04d      	b.n	8005ac0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f7ff fea5 	bl	800577c <ADC_Disable>
 8005a32:	4603      	mov	r3, r0
 8005a34:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d136      	bne.n	8005aaa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a40:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a44:	f023 0302 	bic.w	r3, r3, #2
 8005a48:	f043 0202 	orr.w	r2, r3, #2
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	4618      	mov	r0, r3
 8005a58:	f7ff ff96 	bl	8005988 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a5c:	e014      	b.n	8005a88 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	3301      	adds	r3, #1
 8005a62:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	4a18      	ldr	r2, [pc, #96]	; (8005ac8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d90d      	bls.n	8005a88 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a70:	f023 0312 	bic.w	r3, r3, #18
 8005a74:	f043 0210 	orr.w	r2, r3, #16
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e01b      	b.n	8005ac0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff ff94 	bl	80059ba <LL_ADC_IsCalibrationOnGoing>
 8005a92:	4603      	mov	r3, r0
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1e2      	bne.n	8005a5e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a9c:	f023 0303 	bic.w	r3, r3, #3
 8005aa0:	f043 0201 	orr.w	r2, r3, #1
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	65da      	str	r2, [r3, #92]	; 0x5c
 8005aa8:	e005      	b.n	8005ab6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aae:	f043 0210 	orr.w	r2, r3, #16
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	0004de01 	.word	0x0004de01

08005acc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005afc:	bf00      	nop
 8005afe:	370c      	adds	r7, #12
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005b10:	bf00      	nop
 8005b12:	370c      	adds	r7, #12
 8005b14:	46bd      	mov	sp, r7
 8005b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1a:	4770      	bx	lr

08005b1c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b083      	sub	sp, #12
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005b24:	bf00      	nop
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005b30:	b590      	push	{r4, r7, lr}
 8005b32:	b0a1      	sub	sp, #132	; 0x84
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d101      	bne.n	8005b4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005b4a:	2302      	movs	r3, #2
 8005b4c:	e08b      	b.n	8005c66 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005b56:	2300      	movs	r3, #0
 8005b58:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b66:	d102      	bne.n	8005b6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005b68:	4b41      	ldr	r3, [pc, #260]	; (8005c70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005b6a:	60bb      	str	r3, [r7, #8]
 8005b6c:	e001      	b.n	8005b72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7c:	f043 0220 	orr.w	r2, r3, #32
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	e06a      	b.n	8005c66 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff ff25 	bl	80059e2 <LL_ADC_REG_IsConversionOngoing>
 8005b98:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff ff1f 	bl	80059e2 <LL_ADC_REG_IsConversionOngoing>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d14c      	bne.n	8005c44 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d149      	bne.n	8005c44 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005bb0:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8005bb2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d028      	beq.n	8005c0e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005bbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	6859      	ldr	r1, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bce:	035b      	lsls	r3, r3, #13
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bd6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005bd8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005bdc:	f7ff fec1 	bl	8005962 <LL_ADC_IsEnabled>
 8005be0:	4604      	mov	r4, r0
 8005be2:	4823      	ldr	r0, [pc, #140]	; (8005c70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005be4:	f7ff febd 	bl	8005962 <LL_ADC_IsEnabled>
 8005be8:	4603      	mov	r3, r0
 8005bea:	4323      	orrs	r3, r4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d133      	bne.n	8005c58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005bf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf2:	689b      	ldr	r3, [r3, #8]
 8005bf4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005bf8:	f023 030f 	bic.w	r3, r3, #15
 8005bfc:	683a      	ldr	r2, [r7, #0]
 8005bfe:	6811      	ldr	r1, [r2, #0]
 8005c00:	683a      	ldr	r2, [r7, #0]
 8005c02:	6892      	ldr	r2, [r2, #8]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	431a      	orrs	r2, r3
 8005c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c0a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c0c:	e024      	b.n	8005c58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005c0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c18:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c1a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005c1e:	f7ff fea0 	bl	8005962 <LL_ADC_IsEnabled>
 8005c22:	4604      	mov	r4, r0
 8005c24:	4812      	ldr	r0, [pc, #72]	; (8005c70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005c26:	f7ff fe9c 	bl	8005962 <LL_ADC_IsEnabled>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	4323      	orrs	r3, r4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d112      	bne.n	8005c58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005c3a:	f023 030f 	bic.w	r3, r3, #15
 8005c3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005c40:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c42:	e009      	b.n	8005c58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c48:	f043 0220 	orr.w	r2, r3, #32
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005c56:	e000      	b.n	8005c5a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005c58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005c62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3784      	adds	r7, #132	; 0x84
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd90      	pop	{r4, r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	50000100 	.word	0x50000100
 8005c74:	50000300 	.word	0x50000300

08005c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f003 0307 	and.w	r3, r3, #7
 8005c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c88:	4b0c      	ldr	r3, [pc, #48]	; (8005cbc <__NVIC_SetPriorityGrouping+0x44>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c8e:	68ba      	ldr	r2, [r7, #8]
 8005c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c94:	4013      	ands	r3, r2
 8005c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005caa:	4a04      	ldr	r2, [pc, #16]	; (8005cbc <__NVIC_SetPriorityGrouping+0x44>)
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	60d3      	str	r3, [r2, #12]
}
 8005cb0:	bf00      	nop
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	e000ed00 	.word	0xe000ed00

08005cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cc4:	4b04      	ldr	r3, [pc, #16]	; (8005cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	0a1b      	lsrs	r3, r3, #8
 8005cca:	f003 0307 	and.w	r3, r3, #7
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr
 8005cd8:	e000ed00 	.word	0xe000ed00

08005cdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	db0b      	blt.n	8005d06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cee:	79fb      	ldrb	r3, [r7, #7]
 8005cf0:	f003 021f 	and.w	r2, r3, #31
 8005cf4:	4907      	ldr	r1, [pc, #28]	; (8005d14 <__NVIC_EnableIRQ+0x38>)
 8005cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfa:	095b      	lsrs	r3, r3, #5
 8005cfc:	2001      	movs	r0, #1
 8005cfe:	fa00 f202 	lsl.w	r2, r0, r2
 8005d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
 8005d12:	bf00      	nop
 8005d14:	e000e100 	.word	0xe000e100

08005d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	4603      	mov	r3, r0
 8005d20:	6039      	str	r1, [r7, #0]
 8005d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	db0a      	blt.n	8005d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	490c      	ldr	r1, [pc, #48]	; (8005d64 <__NVIC_SetPriority+0x4c>)
 8005d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d36:	0112      	lsls	r2, r2, #4
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005d40:	e00a      	b.n	8005d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	4908      	ldr	r1, [pc, #32]	; (8005d68 <__NVIC_SetPriority+0x50>)
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	3b04      	subs	r3, #4
 8005d50:	0112      	lsls	r2, r2, #4
 8005d52:	b2d2      	uxtb	r2, r2
 8005d54:	440b      	add	r3, r1
 8005d56:	761a      	strb	r2, [r3, #24]
}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr
 8005d64:	e000e100 	.word	0xe000e100
 8005d68:	e000ed00 	.word	0xe000ed00

08005d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005d6c:	b480      	push	{r7}
 8005d6e:	b089      	sub	sp, #36	; 0x24
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 0307 	and.w	r3, r3, #7
 8005d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	f1c3 0307 	rsb	r3, r3, #7
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	bf28      	it	cs
 8005d8a:	2304      	movcs	r3, #4
 8005d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	3304      	adds	r3, #4
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d902      	bls.n	8005d9c <NVIC_EncodePriority+0x30>
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	3b03      	subs	r3, #3
 8005d9a:	e000      	b.n	8005d9e <NVIC_EncodePriority+0x32>
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005da0:	f04f 32ff 	mov.w	r2, #4294967295
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	43da      	mvns	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	401a      	ands	r2, r3
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005db4:	f04f 31ff 	mov.w	r1, #4294967295
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	fa01 f303 	lsl.w	r3, r1, r3
 8005dbe:	43d9      	mvns	r1, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005dc4:	4313      	orrs	r3, r2
         );
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3724      	adds	r7, #36	; 0x24
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
	...

08005dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3b01      	subs	r3, #1
 8005de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005de4:	d301      	bcc.n	8005dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005de6:	2301      	movs	r3, #1
 8005de8:	e00f      	b.n	8005e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005dea:	4a0a      	ldr	r2, [pc, #40]	; (8005e14 <SysTick_Config+0x40>)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3b01      	subs	r3, #1
 8005df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005df2:	210f      	movs	r1, #15
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	f7ff ff8e 	bl	8005d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005dfc:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <SysTick_Config+0x40>)
 8005dfe:	2200      	movs	r2, #0
 8005e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e02:	4b04      	ldr	r3, [pc, #16]	; (8005e14 <SysTick_Config+0x40>)
 8005e04:	2207      	movs	r2, #7
 8005e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	e000e010 	.word	0xe000e010

08005e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b082      	sub	sp, #8
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff ff29 	bl	8005c78 <__NVIC_SetPriorityGrouping>
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b086      	sub	sp, #24
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	4603      	mov	r3, r0
 8005e36:	60b9      	str	r1, [r7, #8]
 8005e38:	607a      	str	r2, [r7, #4]
 8005e3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005e3c:	f7ff ff40 	bl	8005cc0 <__NVIC_GetPriorityGrouping>
 8005e40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005e42:	687a      	ldr	r2, [r7, #4]
 8005e44:	68b9      	ldr	r1, [r7, #8]
 8005e46:	6978      	ldr	r0, [r7, #20]
 8005e48:	f7ff ff90 	bl	8005d6c <NVIC_EncodePriority>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e52:	4611      	mov	r1, r2
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7ff ff5f 	bl	8005d18 <__NVIC_SetPriority>
}
 8005e5a:	bf00      	nop
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	4603      	mov	r3, r0
 8005e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7ff ff33 	bl	8005cdc <__NVIC_EnableIRQ>
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff ffa4 	bl	8005dd4 <SysTick_Config>
 8005e8c:	4603      	mov	r3, r0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3708      	adds	r7, #8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
	...

08005e98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b084      	sub	sp, #16
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e08d      	b.n	8005fc6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	4b47      	ldr	r3, [pc, #284]	; (8005fd0 <HAL_DMA_Init+0x138>)
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d80f      	bhi.n	8005ed6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	461a      	mov	r2, r3
 8005ebc:	4b45      	ldr	r3, [pc, #276]	; (8005fd4 <HAL_DMA_Init+0x13c>)
 8005ebe:	4413      	add	r3, r2
 8005ec0:	4a45      	ldr	r2, [pc, #276]	; (8005fd8 <HAL_DMA_Init+0x140>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	091b      	lsrs	r3, r3, #4
 8005ec8:	009a      	lsls	r2, r3, #2
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a42      	ldr	r2, [pc, #264]	; (8005fdc <HAL_DMA_Init+0x144>)
 8005ed2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ed4:	e00e      	b.n	8005ef4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	4b40      	ldr	r3, [pc, #256]	; (8005fe0 <HAL_DMA_Init+0x148>)
 8005ede:	4413      	add	r3, r2
 8005ee0:	4a3d      	ldr	r2, [pc, #244]	; (8005fd8 <HAL_DMA_Init+0x140>)
 8005ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee6:	091b      	lsrs	r3, r3, #4
 8005ee8:	009a      	lsls	r2, r3, #2
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a3c      	ldr	r2, [pc, #240]	; (8005fe4 <HAL_DMA_Init+0x14c>)
 8005ef2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	691b      	ldr	r3, [r3, #16]
 8005f1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005f24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	699b      	ldr	r3, [r3, #24]
 8005f2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005f30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa76 	bl	8006438 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f54:	d102      	bne.n	8005f5c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685a      	ldr	r2, [r3, #4]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f64:	b2d2      	uxtb	r2, r2
 8005f66:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f70:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d010      	beq.n	8005f9c <HAL_DMA_Init+0x104>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	2b04      	cmp	r3, #4
 8005f80:	d80c      	bhi.n	8005f9c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fa96 	bl	80064b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005f98:	605a      	str	r2, [r3, #4]
 8005f9a:	e008      	b.n	8005fae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005fc4:	2300      	movs	r3, #0
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	3710      	adds	r7, #16
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bd80      	pop	{r7, pc}
 8005fce:	bf00      	nop
 8005fd0:	40020407 	.word	0x40020407
 8005fd4:	bffdfff8 	.word	0xbffdfff8
 8005fd8:	cccccccd 	.word	0xcccccccd
 8005fdc:	40020000 	.word	0x40020000
 8005fe0:	bffdfbf8 	.word	0xbffdfbf8
 8005fe4:	40020400 	.word	0x40020400

08005fe8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
 8005ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006000:	2b01      	cmp	r3, #1
 8006002:	d101      	bne.n	8006008 <HAL_DMA_Start_IT+0x20>
 8006004:	2302      	movs	r3, #2
 8006006:	e066      	b.n	80060d6 <HAL_DMA_Start_IT+0xee>
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006016:	b2db      	uxtb	r3, r3
 8006018:	2b01      	cmp	r3, #1
 800601a:	d155      	bne.n	80060c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2202      	movs	r2, #2
 8006020:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0201 	bic.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 f9bb 	bl	80063bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800604a:	2b00      	cmp	r3, #0
 800604c:	d008      	beq.n	8006060 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 020e 	orr.w	r2, r2, #14
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	e00f      	b.n	8006080 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0204 	bic.w	r2, r2, #4
 800606e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f042 020a 	orr.w	r2, r2, #10
 800607e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d007      	beq.n	800609e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006098:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800609c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d007      	beq.n	80060b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f042 0201 	orr.w	r2, r2, #1
 80060c4:	601a      	str	r2, [r3, #0]
 80060c6:	e005      	b.n	80060d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80060d0:	2302      	movs	r3, #2
 80060d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80060d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3718      	adds	r7, #24
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80060de:	b480      	push	{r7}
 80060e0:	b085      	sub	sp, #20
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060e6:	2300      	movs	r3, #0
 80060e8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d005      	beq.n	8006102 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2204      	movs	r2, #4
 80060fa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	73fb      	strb	r3, [r7, #15]
 8006100:	e037      	b.n	8006172 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f022 020e 	bic.w	r2, r2, #14
 8006110:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006116:	681a      	ldr	r2, [r3, #0]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800611c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006120:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0201 	bic.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006136:	f003 021f 	and.w	r2, r3, #31
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800613e:	2101      	movs	r1, #1
 8006140:	fa01 f202 	lsl.w	r2, r1, r2
 8006144:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800614a:	687a      	ldr	r2, [r7, #4]
 800614c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800614e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00c      	beq.n	8006172 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006162:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006166:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006170:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8006182:	7bfb      	ldrb	r3, [r7, #15]
}
 8006184:	4618      	mov	r0, r3
 8006186:	3714      	adds	r7, #20
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006198:	2300      	movs	r3, #0
 800619a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b02      	cmp	r3, #2
 80061a6:	d00d      	beq.n	80061c4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2204      	movs	r2, #4
 80061ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2200      	movs	r2, #0
 80061ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	73fb      	strb	r3, [r7, #15]
 80061c2:	e047      	b.n	8006254 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 020e 	bic.w	r2, r2, #14
 80061d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f022 0201 	bic.w	r2, r2, #1
 80061e2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061f2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f8:	f003 021f 	and.w	r2, r3, #31
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	2101      	movs	r1, #1
 8006202:	fa01 f202 	lsl.w	r2, r1, r2
 8006206:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006210:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00c      	beq.n	8006234 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006224:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006228:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006232:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	2b00      	cmp	r3, #0
 800624a:	d003      	beq.n	8006254 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	4798      	blx	r3
    }
  }
  return status;
 8006254:	7bfb      	ldrb	r3, [r7, #15]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800625e:	b580      	push	{r7, lr}
 8006260:	b084      	sub	sp, #16
 8006262:	af00      	add	r7, sp, #0
 8006264:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627a:	f003 031f 	and.w	r3, r3, #31
 800627e:	2204      	movs	r2, #4
 8006280:	409a      	lsls	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4013      	ands	r3, r2
 8006286:	2b00      	cmp	r3, #0
 8006288:	d026      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x7a>
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b00      	cmp	r3, #0
 8006292:	d021      	beq.n	80062d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0320 	and.w	r3, r3, #32
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d107      	bne.n	80062b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0204 	bic.w	r2, r2, #4
 80062b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b6:	f003 021f 	and.w	r2, r3, #31
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062be:	2104      	movs	r1, #4
 80062c0:	fa01 f202 	lsl.w	r2, r1, r2
 80062c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d071      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80062d6:	e06c      	b.n	80063b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	2202      	movs	r2, #2
 80062e2:	409a      	lsls	r2, r3
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d02e      	beq.n	800634a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d029      	beq.n	800634a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0320 	and.w	r3, r3, #32
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10b      	bne.n	800631c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 020a 	bic.w	r2, r2, #10
 8006312:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006320:	f003 021f 	and.w	r2, r3, #31
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006328:	2102      	movs	r1, #2
 800632a:	fa01 f202 	lsl.w	r2, r1, r2
 800632e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800633c:	2b00      	cmp	r3, #0
 800633e:	d038      	beq.n	80063b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006348:	e033      	b.n	80063b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634e:	f003 031f 	and.w	r3, r3, #31
 8006352:	2208      	movs	r2, #8
 8006354:	409a      	lsls	r2, r3
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4013      	ands	r3, r2
 800635a:	2b00      	cmp	r3, #0
 800635c:	d02a      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f003 0308 	and.w	r3, r3, #8
 8006364:	2b00      	cmp	r3, #0
 8006366:	d025      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 020e 	bic.w	r2, r2, #14
 8006376:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637c:	f003 021f 	and.w	r2, r3, #31
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006384:	2101      	movs	r1, #1
 8006386:	fa01 f202 	lsl.w	r2, r1, r2
 800638a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d004      	beq.n	80063b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80063b2:	bf00      	nop
 80063b4:	bf00      	nop
}
 80063b6:	3710      	adds	r7, #16
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80063d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d004      	beq.n	80063e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80063e4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ea:	f003 021f 	and.w	r2, r3, #31
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063f2:	2101      	movs	r1, #1
 80063f4:	fa01 f202 	lsl.w	r2, r1, r2
 80063f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2b10      	cmp	r3, #16
 8006408:	d108      	bne.n	800641c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68ba      	ldr	r2, [r7, #8]
 8006418:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800641a:	e007      	b.n	800642c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68ba      	ldr	r2, [r7, #8]
 8006422:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	60da      	str	r2, [r3, #12]
}
 800642c:	bf00      	nop
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	461a      	mov	r2, r3
 8006446:	4b16      	ldr	r3, [pc, #88]	; (80064a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006448:	429a      	cmp	r2, r3
 800644a:	d802      	bhi.n	8006452 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800644c:	4b15      	ldr	r3, [pc, #84]	; (80064a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800644e:	617b      	str	r3, [r7, #20]
 8006450:	e001      	b.n	8006456 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006452:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006454:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	b2db      	uxtb	r3, r3
 8006460:	3b08      	subs	r3, #8
 8006462:	4a12      	ldr	r2, [pc, #72]	; (80064ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006464:	fba2 2303 	umull	r2, r3, r2, r3
 8006468:	091b      	lsrs	r3, r3, #4
 800646a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006470:	089b      	lsrs	r3, r3, #2
 8006472:	009a      	lsls	r2, r3, #2
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	4413      	add	r3, r2
 8006478:	461a      	mov	r2, r3
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a0b      	ldr	r2, [pc, #44]	; (80064b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006482:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f003 031f 	and.w	r3, r3, #31
 800648a:	2201      	movs	r2, #1
 800648c:	409a      	lsls	r2, r3
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006492:	bf00      	nop
 8006494:	371c      	adds	r7, #28
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40020407 	.word	0x40020407
 80064a4:	40020800 	.word	0x40020800
 80064a8:	40020820 	.word	0x40020820
 80064ac:	cccccccd 	.word	0xcccccccd
 80064b0:	40020880 	.word	0x40020880

080064b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80064c4:	68fa      	ldr	r2, [r7, #12]
 80064c6:	4b0b      	ldr	r3, [pc, #44]	; (80064f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80064c8:	4413      	add	r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	461a      	mov	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a08      	ldr	r2, [pc, #32]	; (80064f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80064d6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3b01      	subs	r3, #1
 80064dc:	f003 031f 	and.w	r3, r3, #31
 80064e0:	2201      	movs	r2, #1
 80064e2:	409a      	lsls	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80064e8:	bf00      	nop
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr
 80064f4:	1000823f 	.word	0x1000823f
 80064f8:	40020940 	.word	0x40020940

080064fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b087      	sub	sp, #28
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800650a:	e15a      	b.n	80067c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	2101      	movs	r1, #1
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	fa01 f303 	lsl.w	r3, r1, r3
 8006518:	4013      	ands	r3, r2
 800651a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f000 814c 	beq.w	80067bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f003 0303 	and.w	r3, r3, #3
 800652c:	2b01      	cmp	r3, #1
 800652e:	d005      	beq.n	800653c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006538:	2b02      	cmp	r3, #2
 800653a:	d130      	bne.n	800659e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	2203      	movs	r2, #3
 8006548:	fa02 f303 	lsl.w	r3, r2, r3
 800654c:	43db      	mvns	r3, r3
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	4013      	ands	r3, r2
 8006552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	68da      	ldr	r2, [r3, #12]
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	fa02 f303 	lsl.w	r3, r2, r3
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006572:	2201      	movs	r2, #1
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	fa02 f303 	lsl.w	r3, r2, r3
 800657a:	43db      	mvns	r3, r3
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	4013      	ands	r3, r2
 8006580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	091b      	lsrs	r3, r3, #4
 8006588:	f003 0201 	and.w	r2, r3, #1
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	fa02 f303 	lsl.w	r3, r2, r3
 8006592:	693a      	ldr	r2, [r7, #16]
 8006594:	4313      	orrs	r3, r2
 8006596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	f003 0303 	and.w	r3, r3, #3
 80065a6:	2b03      	cmp	r3, #3
 80065a8:	d017      	beq.n	80065da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68db      	ldr	r3, [r3, #12]
 80065ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	005b      	lsls	r3, r3, #1
 80065b4:	2203      	movs	r2, #3
 80065b6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ba:	43db      	mvns	r3, r3
 80065bc:	693a      	ldr	r2, [r7, #16]
 80065be:	4013      	ands	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	689a      	ldr	r2, [r3, #8]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	fa02 f303 	lsl.w	r3, r2, r3
 80065ce:	693a      	ldr	r2, [r7, #16]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f003 0303 	and.w	r3, r3, #3
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	d123      	bne.n	800662e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	08da      	lsrs	r2, r3, #3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	3208      	adds	r2, #8
 80065ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	220f      	movs	r2, #15
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	43db      	mvns	r3, r3
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	4013      	ands	r3, r2
 8006608:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f003 0307 	and.w	r3, r3, #7
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	fa02 f303 	lsl.w	r3, r2, r3
 800661a:	693a      	ldr	r2, [r7, #16]
 800661c:	4313      	orrs	r3, r2
 800661e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006620:	697b      	ldr	r3, [r7, #20]
 8006622:	08da      	lsrs	r2, r3, #3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	3208      	adds	r2, #8
 8006628:	6939      	ldr	r1, [r7, #16]
 800662a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	005b      	lsls	r3, r3, #1
 8006638:	2203      	movs	r2, #3
 800663a:	fa02 f303 	lsl.w	r3, r2, r3
 800663e:	43db      	mvns	r3, r3
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4013      	ands	r3, r2
 8006644:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f003 0203 	and.w	r2, r3, #3
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	005b      	lsls	r3, r3, #1
 8006652:	fa02 f303 	lsl.w	r3, r2, r3
 8006656:	693a      	ldr	r2, [r7, #16]
 8006658:	4313      	orrs	r3, r2
 800665a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 80a6 	beq.w	80067bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006670:	4b5b      	ldr	r3, [pc, #364]	; (80067e0 <HAL_GPIO_Init+0x2e4>)
 8006672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006674:	4a5a      	ldr	r2, [pc, #360]	; (80067e0 <HAL_GPIO_Init+0x2e4>)
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	6613      	str	r3, [r2, #96]	; 0x60
 800667c:	4b58      	ldr	r3, [pc, #352]	; (80067e0 <HAL_GPIO_Init+0x2e4>)
 800667e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006680:	f003 0301 	and.w	r3, r3, #1
 8006684:	60bb      	str	r3, [r7, #8]
 8006686:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006688:	4a56      	ldr	r2, [pc, #344]	; (80067e4 <HAL_GPIO_Init+0x2e8>)
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	089b      	lsrs	r3, r3, #2
 800668e:	3302      	adds	r3, #2
 8006690:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006694:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f003 0303 	and.w	r3, r3, #3
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	220f      	movs	r2, #15
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	43db      	mvns	r3, r3
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	4013      	ands	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80066b2:	d01f      	beq.n	80066f4 <HAL_GPIO_Init+0x1f8>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a4c      	ldr	r2, [pc, #304]	; (80067e8 <HAL_GPIO_Init+0x2ec>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d019      	beq.n	80066f0 <HAL_GPIO_Init+0x1f4>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a4b      	ldr	r2, [pc, #300]	; (80067ec <HAL_GPIO_Init+0x2f0>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d013      	beq.n	80066ec <HAL_GPIO_Init+0x1f0>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a4a      	ldr	r2, [pc, #296]	; (80067f0 <HAL_GPIO_Init+0x2f4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d00d      	beq.n	80066e8 <HAL_GPIO_Init+0x1ec>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a49      	ldr	r2, [pc, #292]	; (80067f4 <HAL_GPIO_Init+0x2f8>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d007      	beq.n	80066e4 <HAL_GPIO_Init+0x1e8>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	4a48      	ldr	r2, [pc, #288]	; (80067f8 <HAL_GPIO_Init+0x2fc>)
 80066d8:	4293      	cmp	r3, r2
 80066da:	d101      	bne.n	80066e0 <HAL_GPIO_Init+0x1e4>
 80066dc:	2305      	movs	r3, #5
 80066de:	e00a      	b.n	80066f6 <HAL_GPIO_Init+0x1fa>
 80066e0:	2306      	movs	r3, #6
 80066e2:	e008      	b.n	80066f6 <HAL_GPIO_Init+0x1fa>
 80066e4:	2304      	movs	r3, #4
 80066e6:	e006      	b.n	80066f6 <HAL_GPIO_Init+0x1fa>
 80066e8:	2303      	movs	r3, #3
 80066ea:	e004      	b.n	80066f6 <HAL_GPIO_Init+0x1fa>
 80066ec:	2302      	movs	r3, #2
 80066ee:	e002      	b.n	80066f6 <HAL_GPIO_Init+0x1fa>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e000      	b.n	80066f6 <HAL_GPIO_Init+0x1fa>
 80066f4:	2300      	movs	r3, #0
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	f002 0203 	and.w	r2, r2, #3
 80066fc:	0092      	lsls	r2, r2, #2
 80066fe:	4093      	lsls	r3, r2
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	4313      	orrs	r3, r2
 8006704:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006706:	4937      	ldr	r1, [pc, #220]	; (80067e4 <HAL_GPIO_Init+0x2e8>)
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	089b      	lsrs	r3, r3, #2
 800670c:	3302      	adds	r3, #2
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006714:	4b39      	ldr	r3, [pc, #228]	; (80067fc <HAL_GPIO_Init+0x300>)
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	43db      	mvns	r3, r3
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	4013      	ands	r3, r2
 8006722:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d003      	beq.n	8006738 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006730:	693a      	ldr	r2, [r7, #16]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	4313      	orrs	r3, r2
 8006736:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006738:	4a30      	ldr	r2, [pc, #192]	; (80067fc <HAL_GPIO_Init+0x300>)
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800673e:	4b2f      	ldr	r3, [pc, #188]	; (80067fc <HAL_GPIO_Init+0x300>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	43db      	mvns	r3, r3
 8006748:	693a      	ldr	r2, [r7, #16]
 800674a:	4013      	ands	r3, r2
 800674c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006756:	2b00      	cmp	r3, #0
 8006758:	d003      	beq.n	8006762 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006762:	4a26      	ldr	r2, [pc, #152]	; (80067fc <HAL_GPIO_Init+0x300>)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006768:	4b24      	ldr	r3, [pc, #144]	; (80067fc <HAL_GPIO_Init+0x300>)
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	43db      	mvns	r3, r3
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4013      	ands	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006780:	2b00      	cmp	r3, #0
 8006782:	d003      	beq.n	800678c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800678c:	4a1b      	ldr	r2, [pc, #108]	; (80067fc <HAL_GPIO_Init+0x300>)
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006792:	4b1a      	ldr	r3, [pc, #104]	; (80067fc <HAL_GPIO_Init+0x300>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	43db      	mvns	r3, r3
 800679c:	693a      	ldr	r2, [r7, #16]
 800679e:	4013      	ands	r3, r2
 80067a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d003      	beq.n	80067b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80067b6:	4a11      	ldr	r2, [pc, #68]	; (80067fc <HAL_GPIO_Init+0x300>)
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	3301      	adds	r3, #1
 80067c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	fa22 f303 	lsr.w	r3, r2, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f47f ae9d 	bne.w	800650c <HAL_GPIO_Init+0x10>
  }
}
 80067d2:	bf00      	nop
 80067d4:	bf00      	nop
 80067d6:	371c      	adds	r7, #28
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr
 80067e0:	40021000 	.word	0x40021000
 80067e4:	40010000 	.word	0x40010000
 80067e8:	48000400 	.word	0x48000400
 80067ec:	48000800 	.word	0x48000800
 80067f0:	48000c00 	.word	0x48000c00
 80067f4:	48001000 	.word	0x48001000
 80067f8:	48001400 	.word	0x48001400
 80067fc:	40010400 	.word	0x40010400

08006800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006800:	b480      	push	{r7}
 8006802:	b085      	sub	sp, #20
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691a      	ldr	r2, [r3, #16]
 8006810:	887b      	ldrh	r3, [r7, #2]
 8006812:	4013      	ands	r3, r2
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006818:	2301      	movs	r3, #1
 800681a:	73fb      	strb	r3, [r7, #15]
 800681c:	e001      	b.n	8006822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006822:	7bfb      	ldrb	r3, [r7, #15]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3714      	adds	r7, #20
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr

08006830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	460b      	mov	r3, r1
 800683a:	807b      	strh	r3, [r7, #2]
 800683c:	4613      	mov	r3, r2
 800683e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006840:	787b      	ldrb	r3, [r7, #1]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d003      	beq.n	800684e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006846:	887a      	ldrh	r2, [r7, #2]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800684c:	e002      	b.n	8006854 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800684e:	887a      	ldrh	r2, [r7, #2]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
 8006866:	4603      	mov	r3, r0
 8006868:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800686a:	4b08      	ldr	r3, [pc, #32]	; (800688c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800686c:	695a      	ldr	r2, [r3, #20]
 800686e:	88fb      	ldrh	r3, [r7, #6]
 8006870:	4013      	ands	r3, r2
 8006872:	2b00      	cmp	r3, #0
 8006874:	d006      	beq.n	8006884 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006876:	4a05      	ldr	r2, [pc, #20]	; (800688c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006878:	88fb      	ldrh	r3, [r7, #6]
 800687a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800687c:	88fb      	ldrh	r3, [r7, #6]
 800687e:	4618      	mov	r0, r3
 8006880:	f7fb f948 	bl	8001b14 <HAL_GPIO_EXTI_Callback>
  }
}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40010400 	.word	0x40010400

08006890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b082      	sub	sp, #8
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e081      	b.n	80069a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fc fd5a 	bl	8003370 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2224      	movs	r2, #36	; 0x24
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80068e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	689a      	ldr	r2, [r3, #8]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80068f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	2b01      	cmp	r3, #1
 80068f8:	d107      	bne.n	800690a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006906:	609a      	str	r2, [r3, #8]
 8006908:	e006      	b.n	8006918 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	689a      	ldr	r2, [r3, #8]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006916:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b02      	cmp	r3, #2
 800691e:	d104      	bne.n	800692a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006928:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	6812      	ldr	r2, [r2, #0]
 8006934:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800693c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68da      	ldr	r2, [r3, #12]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800694c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691a      	ldr	r2, [r3, #16]
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	430a      	orrs	r2, r1
 8006966:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	69d9      	ldr	r1, [r3, #28]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6a1a      	ldr	r2, [r3, #32]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f042 0201 	orr.w	r2, r2, #1
 8006986:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2200      	movs	r2, #0
 800698c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2220      	movs	r2, #32
 8006992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2200      	movs	r2, #0
 800699a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3708      	adds	r7, #8
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b083      	sub	sp, #12
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
 80069b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b20      	cmp	r3, #32
 80069c2:	d138      	bne.n	8006a36 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d101      	bne.n	80069d2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80069ce:	2302      	movs	r3, #2
 80069d0:	e032      	b.n	8006a38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2224      	movs	r2, #36	; 0x24
 80069de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f022 0201 	bic.w	r2, r2, #1
 80069f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a00:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	6819      	ldr	r1, [r3, #0]
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f042 0201 	orr.w	r2, r2, #1
 8006a20:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2220      	movs	r2, #32
 8006a26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a32:	2300      	movs	r3, #0
 8006a34:	e000      	b.n	8006a38 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006a36:	2302      	movs	r3, #2
  }
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b20      	cmp	r3, #32
 8006a58:	d139      	bne.n	8006ace <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d101      	bne.n	8006a68 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006a64:	2302      	movs	r3, #2
 8006a66:	e033      	b.n	8006ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2224      	movs	r2, #36	; 0x24
 8006a74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f022 0201 	bic.w	r2, r2, #1
 8006a86:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a96:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	021b      	lsls	r3, r3, #8
 8006a9c:	68fa      	ldr	r2, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681a      	ldr	r2, [r3, #0]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f042 0201 	orr.w	r2, r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2220      	movs	r2, #32
 8006abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	e000      	b.n	8006ad0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006ace:	2302      	movs	r3, #2
  }
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b085      	sub	sp, #20
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d141      	bne.n	8006b6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006aea:	4b4b      	ldr	r3, [pc, #300]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006af6:	d131      	bne.n	8006b5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006af8:	4b47      	ldr	r3, [pc, #284]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006afe:	4a46      	ldr	r2, [pc, #280]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b08:	4b43      	ldr	r3, [pc, #268]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b10:	4a41      	ldr	r2, [pc, #260]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006b16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006b18:	4b40      	ldr	r3, [pc, #256]	; (8006c1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2232      	movs	r2, #50	; 0x32
 8006b1e:	fb02 f303 	mul.w	r3, r2, r3
 8006b22:	4a3f      	ldr	r2, [pc, #252]	; (8006c20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006b24:	fba2 2303 	umull	r2, r3, r2, r3
 8006b28:	0c9b      	lsrs	r3, r3, #18
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b2e:	e002      	b.n	8006b36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	3b01      	subs	r3, #1
 8006b34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006b36:	4b38      	ldr	r3, [pc, #224]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b38:	695b      	ldr	r3, [r3, #20]
 8006b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b42:	d102      	bne.n	8006b4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f2      	bne.n	8006b30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b4a:	4b33      	ldr	r3, [pc, #204]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b56:	d158      	bne.n	8006c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	e057      	b.n	8006c0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b5c:	4b2e      	ldr	r3, [pc, #184]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b62:	4a2d      	ldr	r2, [pc, #180]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006b6c:	e04d      	b.n	8006c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b74:	d141      	bne.n	8006bfa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b76:	4b28      	ldr	r3, [pc, #160]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b82:	d131      	bne.n	8006be8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006b84:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b8a:	4a23      	ldr	r2, [pc, #140]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b94:	4b20      	ldr	r3, [pc, #128]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b9c:	4a1e      	ldr	r2, [pc, #120]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ba2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ba4:	4b1d      	ldr	r3, [pc, #116]	; (8006c1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2232      	movs	r2, #50	; 0x32
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
 8006bae:	4a1c      	ldr	r2, [pc, #112]	; (8006c20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb4:	0c9b      	lsrs	r3, r3, #18
 8006bb6:	3301      	adds	r3, #1
 8006bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bba:	e002      	b.n	8006bc2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	3b01      	subs	r3, #1
 8006bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006bc2:	4b15      	ldr	r3, [pc, #84]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bc4:	695b      	ldr	r3, [r3, #20]
 8006bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bce:	d102      	bne.n	8006bd6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1f2      	bne.n	8006bbc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006bd6:	4b10      	ldr	r3, [pc, #64]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bd8:	695b      	ldr	r3, [r3, #20]
 8006bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006be2:	d112      	bne.n	8006c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e011      	b.n	8006c0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006be8:	4b0b      	ldr	r3, [pc, #44]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bee:	4a0a      	ldr	r2, [pc, #40]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006bf8:	e007      	b.n	8006c0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006bfa:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c02:	4a05      	ldr	r2, [pc, #20]	; (8006c18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006c04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	40007000 	.word	0x40007000
 8006c1c:	20000048 	.word	0x20000048
 8006c20:	431bde83 	.word	0x431bde83

08006c24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006c24:	b480      	push	{r7}
 8006c26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006c28:	4b05      	ldr	r3, [pc, #20]	; (8006c40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4a04      	ldr	r2, [pc, #16]	; (8006c40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006c2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c32:	6093      	str	r3, [r2, #8]
}
 8006c34:	bf00      	nop
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40007000 	.word	0x40007000

08006c44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b088      	sub	sp, #32
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e306      	b.n	8007264 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0301 	and.w	r3, r3, #1
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d075      	beq.n	8006d4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006c62:	4b97      	ldr	r3, [pc, #604]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 030c 	and.w	r3, r3, #12
 8006c6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006c6c:	4b94      	ldr	r3, [pc, #592]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006c6e:	68db      	ldr	r3, [r3, #12]
 8006c70:	f003 0303 	and.w	r3, r3, #3
 8006c74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2b0c      	cmp	r3, #12
 8006c7a:	d102      	bne.n	8006c82 <HAL_RCC_OscConfig+0x3e>
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d002      	beq.n	8006c88 <HAL_RCC_OscConfig+0x44>
 8006c82:	69bb      	ldr	r3, [r7, #24]
 8006c84:	2b08      	cmp	r3, #8
 8006c86:	d10b      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c88:	4b8d      	ldr	r3, [pc, #564]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d05b      	beq.n	8006d4c <HAL_RCC_OscConfig+0x108>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d157      	bne.n	8006d4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e2e1      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ca8:	d106      	bne.n	8006cb8 <HAL_RCC_OscConfig+0x74>
 8006caa:	4b85      	ldr	r3, [pc, #532]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a84      	ldr	r2, [pc, #528]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cb4:	6013      	str	r3, [r2, #0]
 8006cb6:	e01d      	b.n	8006cf4 <HAL_RCC_OscConfig+0xb0>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006cc0:	d10c      	bne.n	8006cdc <HAL_RCC_OscConfig+0x98>
 8006cc2:	4b7f      	ldr	r3, [pc, #508]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a7e      	ldr	r2, [pc, #504]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006cc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	4b7c      	ldr	r3, [pc, #496]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a7b      	ldr	r2, [pc, #492]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cd8:	6013      	str	r3, [r2, #0]
 8006cda:	e00b      	b.n	8006cf4 <HAL_RCC_OscConfig+0xb0>
 8006cdc:	4b78      	ldr	r3, [pc, #480]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a77      	ldr	r2, [pc, #476]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce6:	6013      	str	r3, [r2, #0]
 8006ce8:	4b75      	ldr	r3, [pc, #468]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a74      	ldr	r2, [pc, #464]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	685b      	ldr	r3, [r3, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d013      	beq.n	8006d24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cfc:	f7fc fef0 	bl	8003ae0 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d04:	f7fc feec 	bl	8003ae0 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b64      	cmp	r3, #100	; 0x64
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e2a6      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d16:	4b6a      	ldr	r3, [pc, #424]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d0f0      	beq.n	8006d04 <HAL_RCC_OscConfig+0xc0>
 8006d22:	e014      	b.n	8006d4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d24:	f7fc fedc 	bl	8003ae0 <HAL_GetTick>
 8006d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d2a:	e008      	b.n	8006d3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006d2c:	f7fc fed8 	bl	8003ae0 <HAL_GetTick>
 8006d30:	4602      	mov	r2, r0
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	1ad3      	subs	r3, r2, r3
 8006d36:	2b64      	cmp	r3, #100	; 0x64
 8006d38:	d901      	bls.n	8006d3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006d3a:	2303      	movs	r3, #3
 8006d3c:	e292      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006d3e:	4b60      	ldr	r3, [pc, #384]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d1f0      	bne.n	8006d2c <HAL_RCC_OscConfig+0xe8>
 8006d4a:	e000      	b.n	8006d4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d075      	beq.n	8006e46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006d5a:	4b59      	ldr	r3, [pc, #356]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 030c 	and.w	r3, r3, #12
 8006d62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d64:	4b56      	ldr	r3, [pc, #344]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006d66:	68db      	ldr	r3, [r3, #12]
 8006d68:	f003 0303 	and.w	r3, r3, #3
 8006d6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b0c      	cmp	r3, #12
 8006d72:	d102      	bne.n	8006d7a <HAL_RCC_OscConfig+0x136>
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	2b02      	cmp	r3, #2
 8006d78:	d002      	beq.n	8006d80 <HAL_RCC_OscConfig+0x13c>
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2b04      	cmp	r3, #4
 8006d7e:	d11f      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006d80:	4b4f      	ldr	r3, [pc, #316]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d005      	beq.n	8006d98 <HAL_RCC_OscConfig+0x154>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68db      	ldr	r3, [r3, #12]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e265      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d98:	4b49      	ldr	r3, [pc, #292]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	061b      	lsls	r3, r3, #24
 8006da6:	4946      	ldr	r1, [pc, #280]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006dac:	4b45      	ldr	r3, [pc, #276]	; (8006ec4 <HAL_RCC_OscConfig+0x280>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7fc fe49 	bl	8003a48 <HAL_InitTick>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d043      	beq.n	8006e44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e251      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d023      	beq.n	8006e10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006dc8:	4b3d      	ldr	r3, [pc, #244]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a3c      	ldr	r2, [pc, #240]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006dce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd4:	f7fc fe84 	bl	8003ae0 <HAL_GetTick>
 8006dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006ddc:	f7fc fe80 	bl	8003ae0 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e23a      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dee:	4b34      	ldr	r3, [pc, #208]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d0f0      	beq.n	8006ddc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006dfa:	4b31      	ldr	r3, [pc, #196]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	061b      	lsls	r3, r3, #24
 8006e08:	492d      	ldr	r1, [pc, #180]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	604b      	str	r3, [r1, #4]
 8006e0e:	e01a      	b.n	8006e46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006e10:	4b2b      	ldr	r3, [pc, #172]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a2a      	ldr	r2, [pc, #168]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006e16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e1c:	f7fc fe60 	bl	8003ae0 <HAL_GetTick>
 8006e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e22:	e008      	b.n	8006e36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e24:	f7fc fe5c 	bl	8003ae0 <HAL_GetTick>
 8006e28:	4602      	mov	r2, r0
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	1ad3      	subs	r3, r2, r3
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e216      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006e36:	4b22      	ldr	r3, [pc, #136]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1f0      	bne.n	8006e24 <HAL_RCC_OscConfig+0x1e0>
 8006e42:	e000      	b.n	8006e46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d041      	beq.n	8006ed6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d01c      	beq.n	8006e94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006e5a:	4b19      	ldr	r3, [pc, #100]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006e5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e60:	4a17      	ldr	r2, [pc, #92]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006e62:	f043 0301 	orr.w	r3, r3, #1
 8006e66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e6a:	f7fc fe39 	bl	8003ae0 <HAL_GetTick>
 8006e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e70:	e008      	b.n	8006e84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006e72:	f7fc fe35 	bl	8003ae0 <HAL_GetTick>
 8006e76:	4602      	mov	r2, r0
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	1ad3      	subs	r3, r2, r3
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d901      	bls.n	8006e84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006e80:	2303      	movs	r3, #3
 8006e82:	e1ef      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006e84:	4b0e      	ldr	r3, [pc, #56]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006e86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e8a:	f003 0302 	and.w	r3, r3, #2
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d0ef      	beq.n	8006e72 <HAL_RCC_OscConfig+0x22e>
 8006e92:	e020      	b.n	8006ed6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006e94:	4b0a      	ldr	r3, [pc, #40]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e9a:	4a09      	ldr	r2, [pc, #36]	; (8006ec0 <HAL_RCC_OscConfig+0x27c>)
 8006e9c:	f023 0301 	bic.w	r3, r3, #1
 8006ea0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ea4:	f7fc fe1c 	bl	8003ae0 <HAL_GetTick>
 8006ea8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006eaa:	e00d      	b.n	8006ec8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006eac:	f7fc fe18 	bl	8003ae0 <HAL_GetTick>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	1ad3      	subs	r3, r2, r3
 8006eb6:	2b02      	cmp	r3, #2
 8006eb8:	d906      	bls.n	8006ec8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e1d2      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
 8006ebe:	bf00      	nop
 8006ec0:	40021000 	.word	0x40021000
 8006ec4:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ec8:	4b8c      	ldr	r3, [pc, #560]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ece:	f003 0302 	and.w	r3, r3, #2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1ea      	bne.n	8006eac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 0304 	and.w	r3, r3, #4
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	f000 80a6 	beq.w	8007030 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ee8:	4b84      	ldr	r3, [pc, #528]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d101      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x2b4>
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e000      	b.n	8006efa <HAL_RCC_OscConfig+0x2b6>
 8006ef8:	2300      	movs	r3, #0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00d      	beq.n	8006f1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006efe:	4b7f      	ldr	r3, [pc, #508]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f02:	4a7e      	ldr	r2, [pc, #504]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f08:	6593      	str	r3, [r2, #88]	; 0x58
 8006f0a:	4b7c      	ldr	r3, [pc, #496]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f12:	60fb      	str	r3, [r7, #12]
 8006f14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006f16:	2301      	movs	r3, #1
 8006f18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f1a:	4b79      	ldr	r3, [pc, #484]	; (8007100 <HAL_RCC_OscConfig+0x4bc>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d118      	bne.n	8006f58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f26:	4b76      	ldr	r3, [pc, #472]	; (8007100 <HAL_RCC_OscConfig+0x4bc>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	4a75      	ldr	r2, [pc, #468]	; (8007100 <HAL_RCC_OscConfig+0x4bc>)
 8006f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006f32:	f7fc fdd5 	bl	8003ae0 <HAL_GetTick>
 8006f36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f38:	e008      	b.n	8006f4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f3a:	f7fc fdd1 	bl	8003ae0 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	2b02      	cmp	r3, #2
 8006f46:	d901      	bls.n	8006f4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e18b      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006f4c:	4b6c      	ldr	r3, [pc, #432]	; (8007100 <HAL_RCC_OscConfig+0x4bc>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d0f0      	beq.n	8006f3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	689b      	ldr	r3, [r3, #8]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d108      	bne.n	8006f72 <HAL_RCC_OscConfig+0x32e>
 8006f60:	4b66      	ldr	r3, [pc, #408]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f66:	4a65      	ldr	r2, [pc, #404]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006f68:	f043 0301 	orr.w	r3, r3, #1
 8006f6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f70:	e024      	b.n	8006fbc <HAL_RCC_OscConfig+0x378>
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	2b05      	cmp	r3, #5
 8006f78:	d110      	bne.n	8006f9c <HAL_RCC_OscConfig+0x358>
 8006f7a:	4b60      	ldr	r3, [pc, #384]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f80:	4a5e      	ldr	r2, [pc, #376]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006f82:	f043 0304 	orr.w	r3, r3, #4
 8006f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f8a:	4b5c      	ldr	r3, [pc, #368]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f90:	4a5a      	ldr	r2, [pc, #360]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006f92:	f043 0301 	orr.w	r3, r3, #1
 8006f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006f9a:	e00f      	b.n	8006fbc <HAL_RCC_OscConfig+0x378>
 8006f9c:	4b57      	ldr	r3, [pc, #348]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fa2:	4a56      	ldr	r2, [pc, #344]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006fa4:	f023 0301 	bic.w	r3, r3, #1
 8006fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006fac:	4b53      	ldr	r3, [pc, #332]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fb2:	4a52      	ldr	r2, [pc, #328]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006fb4:	f023 0304 	bic.w	r3, r3, #4
 8006fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d016      	beq.n	8006ff2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fc4:	f7fc fd8c 	bl	8003ae0 <HAL_GetTick>
 8006fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fca:	e00a      	b.n	8006fe2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fcc:	f7fc fd88 	bl	8003ae0 <HAL_GetTick>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	1ad3      	subs	r3, r2, r3
 8006fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d901      	bls.n	8006fe2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006fde:	2303      	movs	r3, #3
 8006fe0:	e140      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006fe2:	4b46      	ldr	r3, [pc, #280]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8006fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fe8:	f003 0302 	and.w	r3, r3, #2
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d0ed      	beq.n	8006fcc <HAL_RCC_OscConfig+0x388>
 8006ff0:	e015      	b.n	800701e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ff2:	f7fc fd75 	bl	8003ae0 <HAL_GetTick>
 8006ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ff8:	e00a      	b.n	8007010 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ffa:	f7fc fd71 	bl	8003ae0 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	693b      	ldr	r3, [r7, #16]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	f241 3288 	movw	r2, #5000	; 0x1388
 8007008:	4293      	cmp	r3, r2
 800700a:	d901      	bls.n	8007010 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e129      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007010:	4b3a      	ldr	r3, [pc, #232]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8007012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007016:	f003 0302 	and.w	r3, r3, #2
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1ed      	bne.n	8006ffa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800701e:	7ffb      	ldrb	r3, [r7, #31]
 8007020:	2b01      	cmp	r3, #1
 8007022:	d105      	bne.n	8007030 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007024:	4b35      	ldr	r3, [pc, #212]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8007026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007028:	4a34      	ldr	r2, [pc, #208]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 800702a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800702e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f003 0320 	and.w	r3, r3, #32
 8007038:	2b00      	cmp	r3, #0
 800703a:	d03c      	beq.n	80070b6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d01c      	beq.n	800707e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007044:	4b2d      	ldr	r3, [pc, #180]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8007046:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800704a:	4a2c      	ldr	r2, [pc, #176]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 800704c:	f043 0301 	orr.w	r3, r3, #1
 8007050:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007054:	f7fc fd44 	bl	8003ae0 <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800705a:	e008      	b.n	800706e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800705c:	f7fc fd40 	bl	8003ae0 <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	2b02      	cmp	r3, #2
 8007068:	d901      	bls.n	800706e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800706a:	2303      	movs	r3, #3
 800706c:	e0fa      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800706e:	4b23      	ldr	r3, [pc, #140]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8007070:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d0ef      	beq.n	800705c <HAL_RCC_OscConfig+0x418>
 800707c:	e01b      	b.n	80070b6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800707e:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8007080:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007084:	4a1d      	ldr	r2, [pc, #116]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 8007086:	f023 0301 	bic.w	r3, r3, #1
 800708a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708e:	f7fc fd27 	bl	8003ae0 <HAL_GetTick>
 8007092:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007094:	e008      	b.n	80070a8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007096:	f7fc fd23 	bl	8003ae0 <HAL_GetTick>
 800709a:	4602      	mov	r2, r0
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	2b02      	cmp	r3, #2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e0dd      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80070a8:	4b14      	ldr	r3, [pc, #80]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 80070aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1ef      	bne.n	8007096 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 80d1 	beq.w	8007262 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070c0:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f003 030c 	and.w	r3, r3, #12
 80070c8:	2b0c      	cmp	r3, #12
 80070ca:	f000 808b 	beq.w	80071e4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	69db      	ldr	r3, [r3, #28]
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d15e      	bne.n	8007194 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070d6:	4b09      	ldr	r3, [pc, #36]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	4a08      	ldr	r2, [pc, #32]	; (80070fc <HAL_RCC_OscConfig+0x4b8>)
 80070dc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e2:	f7fc fcfd 	bl	8003ae0 <HAL_GetTick>
 80070e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80070e8:	e00c      	b.n	8007104 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ea:	f7fc fcf9 	bl	8003ae0 <HAL_GetTick>
 80070ee:	4602      	mov	r2, r0
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	1ad3      	subs	r3, r2, r3
 80070f4:	2b02      	cmp	r3, #2
 80070f6:	d905      	bls.n	8007104 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80070f8:	2303      	movs	r3, #3
 80070fa:	e0b3      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
 80070fc:	40021000 	.word	0x40021000
 8007100:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007104:	4b59      	ldr	r3, [pc, #356]	; (800726c <HAL_RCC_OscConfig+0x628>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1ec      	bne.n	80070ea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007110:	4b56      	ldr	r3, [pc, #344]	; (800726c <HAL_RCC_OscConfig+0x628>)
 8007112:	68da      	ldr	r2, [r3, #12]
 8007114:	4b56      	ldr	r3, [pc, #344]	; (8007270 <HAL_RCC_OscConfig+0x62c>)
 8007116:	4013      	ands	r3, r2
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6a11      	ldr	r1, [r2, #32]
 800711c:	687a      	ldr	r2, [r7, #4]
 800711e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007120:	3a01      	subs	r2, #1
 8007122:	0112      	lsls	r2, r2, #4
 8007124:	4311      	orrs	r1, r2
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800712a:	0212      	lsls	r2, r2, #8
 800712c:	4311      	orrs	r1, r2
 800712e:	687a      	ldr	r2, [r7, #4]
 8007130:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007132:	0852      	lsrs	r2, r2, #1
 8007134:	3a01      	subs	r2, #1
 8007136:	0552      	lsls	r2, r2, #21
 8007138:	4311      	orrs	r1, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800713e:	0852      	lsrs	r2, r2, #1
 8007140:	3a01      	subs	r2, #1
 8007142:	0652      	lsls	r2, r2, #25
 8007144:	4311      	orrs	r1, r2
 8007146:	687a      	ldr	r2, [r7, #4]
 8007148:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800714a:	06d2      	lsls	r2, r2, #27
 800714c:	430a      	orrs	r2, r1
 800714e:	4947      	ldr	r1, [pc, #284]	; (800726c <HAL_RCC_OscConfig+0x628>)
 8007150:	4313      	orrs	r3, r2
 8007152:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007154:	4b45      	ldr	r3, [pc, #276]	; (800726c <HAL_RCC_OscConfig+0x628>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a44      	ldr	r2, [pc, #272]	; (800726c <HAL_RCC_OscConfig+0x628>)
 800715a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800715e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007160:	4b42      	ldr	r3, [pc, #264]	; (800726c <HAL_RCC_OscConfig+0x628>)
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	4a41      	ldr	r2, [pc, #260]	; (800726c <HAL_RCC_OscConfig+0x628>)
 8007166:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800716a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716c:	f7fc fcb8 	bl	8003ae0 <HAL_GetTick>
 8007170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007174:	f7fc fcb4 	bl	8003ae0 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b02      	cmp	r3, #2
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e06e      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007186:	4b39      	ldr	r3, [pc, #228]	; (800726c <HAL_RCC_OscConfig+0x628>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0f0      	beq.n	8007174 <HAL_RCC_OscConfig+0x530>
 8007192:	e066      	b.n	8007262 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007194:	4b35      	ldr	r3, [pc, #212]	; (800726c <HAL_RCC_OscConfig+0x628>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a34      	ldr	r2, [pc, #208]	; (800726c <HAL_RCC_OscConfig+0x628>)
 800719a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800719e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80071a0:	4b32      	ldr	r3, [pc, #200]	; (800726c <HAL_RCC_OscConfig+0x628>)
 80071a2:	68db      	ldr	r3, [r3, #12]
 80071a4:	4a31      	ldr	r2, [pc, #196]	; (800726c <HAL_RCC_OscConfig+0x628>)
 80071a6:	f023 0303 	bic.w	r3, r3, #3
 80071aa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80071ac:	4b2f      	ldr	r3, [pc, #188]	; (800726c <HAL_RCC_OscConfig+0x628>)
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	4a2e      	ldr	r2, [pc, #184]	; (800726c <HAL_RCC_OscConfig+0x628>)
 80071b2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80071b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071bc:	f7fc fc90 	bl	8003ae0 <HAL_GetTick>
 80071c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071c2:	e008      	b.n	80071d6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071c4:	f7fc fc8c 	bl	8003ae0 <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b02      	cmp	r3, #2
 80071d0:	d901      	bls.n	80071d6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e046      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071d6:	4b25      	ldr	r3, [pc, #148]	; (800726c <HAL_RCC_OscConfig+0x628>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d1f0      	bne.n	80071c4 <HAL_RCC_OscConfig+0x580>
 80071e2:	e03e      	b.n	8007262 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d101      	bne.n	80071f0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	e039      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80071f0:	4b1e      	ldr	r3, [pc, #120]	; (800726c <HAL_RCC_OscConfig+0x628>)
 80071f2:	68db      	ldr	r3, [r3, #12]
 80071f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f003 0203 	and.w	r2, r3, #3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6a1b      	ldr	r3, [r3, #32]
 8007200:	429a      	cmp	r2, r3
 8007202:	d12c      	bne.n	800725e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800720e:	3b01      	subs	r3, #1
 8007210:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007212:	429a      	cmp	r2, r3
 8007214:	d123      	bne.n	800725e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007220:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007222:	429a      	cmp	r2, r3
 8007224:	d11b      	bne.n	800725e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007230:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007232:	429a      	cmp	r2, r3
 8007234:	d113      	bne.n	800725e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007240:	085b      	lsrs	r3, r3, #1
 8007242:	3b01      	subs	r3, #1
 8007244:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007246:	429a      	cmp	r2, r3
 8007248:	d109      	bne.n	800725e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800724a:	697b      	ldr	r3, [r7, #20]
 800724c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007254:	085b      	lsrs	r3, r3, #1
 8007256:	3b01      	subs	r3, #1
 8007258:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800725a:	429a      	cmp	r2, r3
 800725c:	d001      	beq.n	8007262 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	3720      	adds	r7, #32
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	40021000 	.word	0x40021000
 8007270:	019f800c 	.word	0x019f800c

08007274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800727e:	2300      	movs	r3, #0
 8007280:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d101      	bne.n	800728c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007288:	2301      	movs	r3, #1
 800728a:	e11e      	b.n	80074ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800728c:	4b91      	ldr	r3, [pc, #580]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f003 030f 	and.w	r3, r3, #15
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	429a      	cmp	r2, r3
 8007298:	d910      	bls.n	80072bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800729a:	4b8e      	ldr	r3, [pc, #568]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f023 020f 	bic.w	r2, r3, #15
 80072a2:	498c      	ldr	r1, [pc, #560]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80072aa:	4b8a      	ldr	r3, [pc, #552]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	429a      	cmp	r2, r3
 80072b6:	d001      	beq.n	80072bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80072b8:	2301      	movs	r3, #1
 80072ba:	e106      	b.n	80074ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f003 0301 	and.w	r3, r3, #1
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d073      	beq.n	80073b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	685b      	ldr	r3, [r3, #4]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d129      	bne.n	8007324 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072d0:	4b81      	ldr	r3, [pc, #516]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d101      	bne.n	80072e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e0f4      	b.n	80074ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80072e0:	f000 f99e 	bl	8007620 <RCC_GetSysClockFreqFromPLLSource>
 80072e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	4a7c      	ldr	r2, [pc, #496]	; (80074dc <HAL_RCC_ClockConfig+0x268>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d93f      	bls.n	800736e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80072ee:	4b7a      	ldr	r3, [pc, #488]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d009      	beq.n	800730e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007302:	2b00      	cmp	r3, #0
 8007304:	d033      	beq.n	800736e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800730a:	2b00      	cmp	r3, #0
 800730c:	d12f      	bne.n	800736e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800730e:	4b72      	ldr	r3, [pc, #456]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 8007310:	689b      	ldr	r3, [r3, #8]
 8007312:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007316:	4a70      	ldr	r2, [pc, #448]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 8007318:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800731c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800731e:	2380      	movs	r3, #128	; 0x80
 8007320:	617b      	str	r3, [r7, #20]
 8007322:	e024      	b.n	800736e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	685b      	ldr	r3, [r3, #4]
 8007328:	2b02      	cmp	r3, #2
 800732a:	d107      	bne.n	800733c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800732c:	4b6a      	ldr	r3, [pc, #424]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d109      	bne.n	800734c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e0c6      	b.n	80074ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800733c:	4b66      	ldr	r3, [pc, #408]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e0be      	b.n	80074ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800734c:	f000 f8ce 	bl	80074ec <HAL_RCC_GetSysClockFreq>
 8007350:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	4a61      	ldr	r2, [pc, #388]	; (80074dc <HAL_RCC_ClockConfig+0x268>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d909      	bls.n	800736e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800735a:	4b5f      	ldr	r3, [pc, #380]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007362:	4a5d      	ldr	r2, [pc, #372]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 8007364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007368:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800736a:	2380      	movs	r3, #128	; 0x80
 800736c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800736e:	4b5a      	ldr	r3, [pc, #360]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	f023 0203 	bic.w	r2, r3, #3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	4957      	ldr	r1, [pc, #348]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 800737c:	4313      	orrs	r3, r2
 800737e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007380:	f7fc fbae 	bl	8003ae0 <HAL_GetTick>
 8007384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007386:	e00a      	b.n	800739e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007388:	f7fc fbaa 	bl	8003ae0 <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	f241 3288 	movw	r2, #5000	; 0x1388
 8007396:	4293      	cmp	r3, r2
 8007398:	d901      	bls.n	800739e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e095      	b.n	80074ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800739e:	4b4e      	ldr	r3, [pc, #312]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f003 020c 	and.w	r2, r3, #12
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d1eb      	bne.n	8007388 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 0302 	and.w	r3, r3, #2
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d023      	beq.n	8007404 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0304 	and.w	r3, r3, #4
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80073c8:	4b43      	ldr	r3, [pc, #268]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	4a42      	ldr	r2, [pc, #264]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 80073ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80073d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f003 0308 	and.w	r3, r3, #8
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d007      	beq.n	80073f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80073e0:	4b3d      	ldr	r3, [pc, #244]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 80073e2:	689b      	ldr	r3, [r3, #8]
 80073e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80073e8:	4a3b      	ldr	r2, [pc, #236]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 80073ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80073ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073f0:	4b39      	ldr	r3, [pc, #228]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	4936      	ldr	r1, [pc, #216]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 80073fe:	4313      	orrs	r3, r2
 8007400:	608b      	str	r3, [r1, #8]
 8007402:	e008      	b.n	8007416 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b80      	cmp	r3, #128	; 0x80
 8007408:	d105      	bne.n	8007416 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800740a:	4b33      	ldr	r3, [pc, #204]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	4a32      	ldr	r2, [pc, #200]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 8007410:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007414:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007416:	4b2f      	ldr	r3, [pc, #188]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f003 030f 	and.w	r3, r3, #15
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	429a      	cmp	r2, r3
 8007422:	d21d      	bcs.n	8007460 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007424:	4b2b      	ldr	r3, [pc, #172]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f023 020f 	bic.w	r2, r3, #15
 800742c:	4929      	ldr	r1, [pc, #164]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	4313      	orrs	r3, r2
 8007432:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007434:	f7fc fb54 	bl	8003ae0 <HAL_GetTick>
 8007438:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800743a:	e00a      	b.n	8007452 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800743c:	f7fc fb50 	bl	8003ae0 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	f241 3288 	movw	r2, #5000	; 0x1388
 800744a:	4293      	cmp	r3, r2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e03b      	b.n	80074ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007452:	4b20      	ldr	r3, [pc, #128]	; (80074d4 <HAL_RCC_ClockConfig+0x260>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 030f 	and.w	r3, r3, #15
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	429a      	cmp	r2, r3
 800745e:	d1ed      	bne.n	800743c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b00      	cmp	r3, #0
 800746a:	d008      	beq.n	800747e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800746c:	4b1a      	ldr	r3, [pc, #104]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	4917      	ldr	r1, [pc, #92]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 800747a:	4313      	orrs	r3, r2
 800747c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b00      	cmp	r3, #0
 8007488:	d009      	beq.n	800749e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800748a:	4b13      	ldr	r3, [pc, #76]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	490f      	ldr	r1, [pc, #60]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 800749a:	4313      	orrs	r3, r2
 800749c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800749e:	f000 f825 	bl	80074ec <HAL_RCC_GetSysClockFreq>
 80074a2:	4602      	mov	r2, r0
 80074a4:	4b0c      	ldr	r3, [pc, #48]	; (80074d8 <HAL_RCC_ClockConfig+0x264>)
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	091b      	lsrs	r3, r3, #4
 80074aa:	f003 030f 	and.w	r3, r3, #15
 80074ae:	490c      	ldr	r1, [pc, #48]	; (80074e0 <HAL_RCC_ClockConfig+0x26c>)
 80074b0:	5ccb      	ldrb	r3, [r1, r3]
 80074b2:	f003 031f 	and.w	r3, r3, #31
 80074b6:	fa22 f303 	lsr.w	r3, r2, r3
 80074ba:	4a0a      	ldr	r2, [pc, #40]	; (80074e4 <HAL_RCC_ClockConfig+0x270>)
 80074bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80074be:	4b0a      	ldr	r3, [pc, #40]	; (80074e8 <HAL_RCC_ClockConfig+0x274>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fc fac0 	bl	8003a48 <HAL_InitTick>
 80074c8:	4603      	mov	r3, r0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40022000 	.word	0x40022000
 80074d8:	40021000 	.word	0x40021000
 80074dc:	04c4b400 	.word	0x04c4b400
 80074e0:	0800ffb4 	.word	0x0800ffb4
 80074e4:	20000048 	.word	0x20000048
 80074e8:	2000004c 	.word	0x2000004c

080074ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b087      	sub	sp, #28
 80074f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80074f2:	4b2c      	ldr	r3, [pc, #176]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f003 030c 	and.w	r3, r3, #12
 80074fa:	2b04      	cmp	r3, #4
 80074fc:	d102      	bne.n	8007504 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80074fe:	4b2a      	ldr	r3, [pc, #168]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007500:	613b      	str	r3, [r7, #16]
 8007502:	e047      	b.n	8007594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007504:	4b27      	ldr	r3, [pc, #156]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	f003 030c 	and.w	r3, r3, #12
 800750c:	2b08      	cmp	r3, #8
 800750e:	d102      	bne.n	8007516 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007510:	4b26      	ldr	r3, [pc, #152]	; (80075ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8007512:	613b      	str	r3, [r7, #16]
 8007514:	e03e      	b.n	8007594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007516:	4b23      	ldr	r3, [pc, #140]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	f003 030c 	and.w	r3, r3, #12
 800751e:	2b0c      	cmp	r3, #12
 8007520:	d136      	bne.n	8007590 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007522:	4b20      	ldr	r3, [pc, #128]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007524:	68db      	ldr	r3, [r3, #12]
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800752c:	4b1d      	ldr	r3, [pc, #116]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	091b      	lsrs	r3, r3, #4
 8007532:	f003 030f 	and.w	r3, r3, #15
 8007536:	3301      	adds	r3, #1
 8007538:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2b03      	cmp	r3, #3
 800753e:	d10c      	bne.n	800755a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007540:	4a1a      	ldr	r2, [pc, #104]	; (80075ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	fbb2 f3f3 	udiv	r3, r2, r3
 8007548:	4a16      	ldr	r2, [pc, #88]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800754a:	68d2      	ldr	r2, [r2, #12]
 800754c:	0a12      	lsrs	r2, r2, #8
 800754e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007552:	fb02 f303 	mul.w	r3, r2, r3
 8007556:	617b      	str	r3, [r7, #20]
      break;
 8007558:	e00c      	b.n	8007574 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800755a:	4a13      	ldr	r2, [pc, #76]	; (80075a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007562:	4a10      	ldr	r2, [pc, #64]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007564:	68d2      	ldr	r2, [r2, #12]
 8007566:	0a12      	lsrs	r2, r2, #8
 8007568:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800756c:	fb02 f303 	mul.w	r3, r2, r3
 8007570:	617b      	str	r3, [r7, #20]
      break;
 8007572:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007574:	4b0b      	ldr	r3, [pc, #44]	; (80075a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	0e5b      	lsrs	r3, r3, #25
 800757a:	f003 0303 	and.w	r3, r3, #3
 800757e:	3301      	adds	r3, #1
 8007580:	005b      	lsls	r3, r3, #1
 8007582:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	e001      	b.n	8007594 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007594:	693b      	ldr	r3, [r7, #16]
}
 8007596:	4618      	mov	r0, r3
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40021000 	.word	0x40021000
 80075a8:	00f42400 	.word	0x00f42400
 80075ac:	007a1200 	.word	0x007a1200

080075b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80075b0:	b480      	push	{r7}
 80075b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80075b4:	4b03      	ldr	r3, [pc, #12]	; (80075c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80075b6:	681b      	ldr	r3, [r3, #0]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000048 	.word	0x20000048

080075c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80075cc:	f7ff fff0 	bl	80075b0 <HAL_RCC_GetHCLKFreq>
 80075d0:	4602      	mov	r2, r0
 80075d2:	4b06      	ldr	r3, [pc, #24]	; (80075ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	0a1b      	lsrs	r3, r3, #8
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	4904      	ldr	r1, [pc, #16]	; (80075f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80075de:	5ccb      	ldrb	r3, [r1, r3]
 80075e0:	f003 031f 	and.w	r3, r3, #31
 80075e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	40021000 	.word	0x40021000
 80075f0:	0800ffc4 	.word	0x0800ffc4

080075f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80075f8:	f7ff ffda 	bl	80075b0 <HAL_RCC_GetHCLKFreq>
 80075fc:	4602      	mov	r2, r0
 80075fe:	4b06      	ldr	r3, [pc, #24]	; (8007618 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007600:	689b      	ldr	r3, [r3, #8]
 8007602:	0adb      	lsrs	r3, r3, #11
 8007604:	f003 0307 	and.w	r3, r3, #7
 8007608:	4904      	ldr	r1, [pc, #16]	; (800761c <HAL_RCC_GetPCLK2Freq+0x28>)
 800760a:	5ccb      	ldrb	r3, [r1, r3]
 800760c:	f003 031f 	and.w	r3, r3, #31
 8007610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007614:	4618      	mov	r0, r3
 8007616:	bd80      	pop	{r7, pc}
 8007618:	40021000 	.word	0x40021000
 800761c:	0800ffc4 	.word	0x0800ffc4

08007620 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007626:	4b1e      	ldr	r3, [pc, #120]	; (80076a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f003 0303 	and.w	r3, r3, #3
 800762e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007630:	4b1b      	ldr	r3, [pc, #108]	; (80076a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	091b      	lsrs	r3, r3, #4
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	3301      	adds	r3, #1
 800763c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d10c      	bne.n	800765e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007644:	4a17      	ldr	r2, [pc, #92]	; (80076a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	fbb2 f3f3 	udiv	r3, r2, r3
 800764c:	4a14      	ldr	r2, [pc, #80]	; (80076a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800764e:	68d2      	ldr	r2, [r2, #12]
 8007650:	0a12      	lsrs	r2, r2, #8
 8007652:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007656:	fb02 f303 	mul.w	r3, r2, r3
 800765a:	617b      	str	r3, [r7, #20]
    break;
 800765c:	e00c      	b.n	8007678 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800765e:	4a12      	ldr	r2, [pc, #72]	; (80076a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	fbb2 f3f3 	udiv	r3, r2, r3
 8007666:	4a0e      	ldr	r2, [pc, #56]	; (80076a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007668:	68d2      	ldr	r2, [r2, #12]
 800766a:	0a12      	lsrs	r2, r2, #8
 800766c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007670:	fb02 f303 	mul.w	r3, r2, r3
 8007674:	617b      	str	r3, [r7, #20]
    break;
 8007676:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007678:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	0e5b      	lsrs	r3, r3, #25
 800767e:	f003 0303 	and.w	r3, r3, #3
 8007682:	3301      	adds	r3, #1
 8007684:	005b      	lsls	r3, r3, #1
 8007686:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007690:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007692:	687b      	ldr	r3, [r7, #4]
}
 8007694:	4618      	mov	r0, r3
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr
 80076a0:	40021000 	.word	0x40021000
 80076a4:	007a1200 	.word	0x007a1200
 80076a8:	00f42400 	.word	0x00f42400

080076ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80076b4:	2300      	movs	r3, #0
 80076b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80076b8:	2300      	movs	r3, #0
 80076ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 8098 	beq.w	80077fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ca:	2300      	movs	r3, #0
 80076cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076ce:	4b43      	ldr	r3, [pc, #268]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10d      	bne.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076da:	4b40      	ldr	r3, [pc, #256]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076de:	4a3f      	ldr	r2, [pc, #252]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80076e4:	6593      	str	r3, [r2, #88]	; 0x58
 80076e6:	4b3d      	ldr	r3, [pc, #244]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80076e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ee:	60bb      	str	r3, [r7, #8]
 80076f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076f2:	2301      	movs	r3, #1
 80076f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80076f6:	4b3a      	ldr	r3, [pc, #232]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a39      	ldr	r2, [pc, #228]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80076fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007700:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007702:	f7fc f9ed 	bl	8003ae0 <HAL_GetTick>
 8007706:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007708:	e009      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800770a:	f7fc f9e9 	bl	8003ae0 <HAL_GetTick>
 800770e:	4602      	mov	r2, r0
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	1ad3      	subs	r3, r2, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d902      	bls.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007718:	2303      	movs	r3, #3
 800771a:	74fb      	strb	r3, [r7, #19]
        break;
 800771c:	e005      	b.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800771e:	4b30      	ldr	r3, [pc, #192]	; (80077e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0ef      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800772a:	7cfb      	ldrb	r3, [r7, #19]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d159      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007730:	4b2a      	ldr	r3, [pc, #168]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800773a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d01e      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	429a      	cmp	r2, r3
 800774a:	d019      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800774c:	4b23      	ldr	r3, [pc, #140]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800774e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007752:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007756:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007758:	4b20      	ldr	r3, [pc, #128]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800775a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775e:	4a1f      	ldr	r2, [pc, #124]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007768:	4b1c      	ldr	r3, [pc, #112]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800776a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800776e:	4a1b      	ldr	r2, [pc, #108]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007770:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007774:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007778:	4a18      	ldr	r2, [pc, #96]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	f003 0301 	and.w	r3, r3, #1
 8007786:	2b00      	cmp	r3, #0
 8007788:	d016      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800778a:	f7fc f9a9 	bl	8003ae0 <HAL_GetTick>
 800778e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007790:	e00b      	b.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007792:	f7fc f9a5 	bl	8003ae0 <HAL_GetTick>
 8007796:	4602      	mov	r2, r0
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	1ad3      	subs	r3, r2, r3
 800779c:	f241 3288 	movw	r2, #5000	; 0x1388
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d902      	bls.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	74fb      	strb	r3, [r7, #19]
            break;
 80077a8:	e006      	b.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077aa:	4b0c      	ldr	r3, [pc, #48]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0ec      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80077b8:	7cfb      	ldrb	r3, [r7, #19]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10b      	bne.n	80077d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80077be:	4b07      	ldr	r3, [pc, #28]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077cc:	4903      	ldr	r1, [pc, #12]	; (80077dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80077d4:	e008      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80077d6:	7cfb      	ldrb	r3, [r7, #19]
 80077d8:	74bb      	strb	r3, [r7, #18]
 80077da:	e005      	b.n	80077e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80077dc:	40021000 	.word	0x40021000
 80077e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e4:	7cfb      	ldrb	r3, [r7, #19]
 80077e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80077e8:	7c7b      	ldrb	r3, [r7, #17]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d105      	bne.n	80077fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077ee:	4ba6      	ldr	r3, [pc, #664]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077f2:	4aa5      	ldr	r2, [pc, #660]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0301 	and.w	r3, r3, #1
 8007802:	2b00      	cmp	r3, #0
 8007804:	d00a      	beq.n	800781c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007806:	4ba0      	ldr	r3, [pc, #640]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800780c:	f023 0203 	bic.w	r2, r3, #3
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	499c      	ldr	r1, [pc, #624]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007816:	4313      	orrs	r3, r2
 8007818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f003 0302 	and.w	r3, r3, #2
 8007824:	2b00      	cmp	r3, #0
 8007826:	d00a      	beq.n	800783e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007828:	4b97      	ldr	r3, [pc, #604]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800782a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782e:	f023 020c 	bic.w	r2, r3, #12
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	689b      	ldr	r3, [r3, #8]
 8007836:	4994      	ldr	r1, [pc, #592]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007838:	4313      	orrs	r3, r2
 800783a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	f003 0304 	and.w	r3, r3, #4
 8007846:	2b00      	cmp	r3, #0
 8007848:	d00a      	beq.n	8007860 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800784a:	4b8f      	ldr	r3, [pc, #572]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800784c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007850:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	498b      	ldr	r1, [pc, #556]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800785a:	4313      	orrs	r3, r2
 800785c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 0308 	and.w	r3, r3, #8
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800786c:	4b86      	ldr	r3, [pc, #536]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800786e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007872:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	4983      	ldr	r1, [pc, #524]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800787c:	4313      	orrs	r3, r2
 800787e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0320 	and.w	r3, r3, #32
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800788e:	4b7e      	ldr	r3, [pc, #504]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007894:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	695b      	ldr	r3, [r3, #20]
 800789c:	497a      	ldr	r1, [pc, #488]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800789e:	4313      	orrs	r3, r2
 80078a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80078b0:	4b75      	ldr	r3, [pc, #468]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	699b      	ldr	r3, [r3, #24]
 80078be:	4972      	ldr	r1, [pc, #456]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078c0:	4313      	orrs	r3, r2
 80078c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80078d2:	4b6d      	ldr	r3, [pc, #436]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	69db      	ldr	r3, [r3, #28]
 80078e0:	4969      	ldr	r1, [pc, #420]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80078f4:	4b64      	ldr	r3, [pc, #400]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80078f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6a1b      	ldr	r3, [r3, #32]
 8007902:	4961      	ldr	r1, [pc, #388]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007904:	4313      	orrs	r3, r2
 8007906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007916:	4b5c      	ldr	r3, [pc, #368]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800791c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	4958      	ldr	r1, [pc, #352]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007926:	4313      	orrs	r3, r2
 8007928:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007934:	2b00      	cmp	r3, #0
 8007936:	d015      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007938:	4b53      	ldr	r3, [pc, #332]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800793a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800793e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	4950      	ldr	r1, [pc, #320]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007948:	4313      	orrs	r3, r2
 800794a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007956:	d105      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007958:	4b4b      	ldr	r3, [pc, #300]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800795a:	68db      	ldr	r3, [r3, #12]
 800795c:	4a4a      	ldr	r2, [pc, #296]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800795e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007962:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800796c:	2b00      	cmp	r3, #0
 800796e:	d015      	beq.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007970:	4b45      	ldr	r3, [pc, #276]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007976:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797e:	4942      	ldr	r1, [pc, #264]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007980:	4313      	orrs	r3, r2
 8007982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800798a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800798e:	d105      	bne.n	800799c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007990:	4b3d      	ldr	r3, [pc, #244]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	4a3c      	ldr	r2, [pc, #240]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007996:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800799a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d015      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80079a8:	4b37      	ldr	r3, [pc, #220]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079b6:	4934      	ldr	r1, [pc, #208]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079b8:	4313      	orrs	r3, r2
 80079ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079c6:	d105      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079c8:	4b2f      	ldr	r3, [pc, #188]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	4a2e      	ldr	r2, [pc, #184]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d015      	beq.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80079e0:	4b29      	ldr	r3, [pc, #164]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ee:	4926      	ldr	r1, [pc, #152]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80079f0:	4313      	orrs	r3, r2
 80079f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079fe:	d105      	bne.n	8007a0c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a00:	4b21      	ldr	r3, [pc, #132]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a02:	68db      	ldr	r3, [r3, #12]
 8007a04:	4a20      	ldr	r2, [pc, #128]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a0a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d015      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007a18:	4b1b      	ldr	r3, [pc, #108]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a26:	4918      	ldr	r1, [pc, #96]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a36:	d105      	bne.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007a38:	4b13      	ldr	r3, [pc, #76]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	4a12      	ldr	r2, [pc, #72]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a42:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d015      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007a50:	4b0d      	ldr	r3, [pc, #52]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5e:	490a      	ldr	r1, [pc, #40]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a60:	4313      	orrs	r3, r2
 8007a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a6e:	d105      	bne.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007a70:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	4a04      	ldr	r2, [pc, #16]	; (8007a88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007a76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a7a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007a7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	40021000 	.word	0x40021000

08007a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d101      	bne.n	8007a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e09d      	b.n	8007bda <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d108      	bne.n	8007ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007aae:	d009      	beq.n	8007ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	61da      	str	r2, [r3, #28]
 8007ab6:	e005      	b.n	8007ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d106      	bne.n	8007ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7fb fca0 	bl	8003424 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2202      	movs	r2, #2
 8007ae8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	681a      	ldr	r2, [r3, #0]
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007afa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b04:	d902      	bls.n	8007b0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60fb      	str	r3, [r7, #12]
 8007b0a:	e002      	b.n	8007b12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007b1a:	d007      	beq.n	8007b2c <HAL_SPI_Init+0xa0>
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
 8007b20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007b24:	d002      	beq.n	8007b2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f003 0302 	and.w	r3, r3, #2
 8007b46:	431a      	orrs	r2, r3
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	f003 0301 	and.w	r3, r3, #1
 8007b50:	431a      	orrs	r2, r3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	699b      	ldr	r3, [r3, #24]
 8007b56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b5a:	431a      	orrs	r2, r3
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	69db      	ldr	r3, [r3, #28]
 8007b60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007b64:	431a      	orrs	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a1b      	ldr	r3, [r3, #32]
 8007b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b6e:	ea42 0103 	orr.w	r1, r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	699b      	ldr	r3, [r3, #24]
 8007b86:	0c1b      	lsrs	r3, r3, #16
 8007b88:	f003 0204 	and.w	r2, r3, #4
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	431a      	orrs	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b9a:	f003 0308 	and.w	r3, r3, #8
 8007b9e:	431a      	orrs	r2, r3
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
 8007ba4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007ba8:	ea42 0103 	orr.w	r1, r2, r3
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	69da      	ldr	r2, [r3, #28]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007bc8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e049      	b.n	8007c88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d106      	bne.n	8007c0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f7fb fc4f 	bl	80034ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2202      	movs	r2, #2
 8007c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	3304      	adds	r3, #4
 8007c1e:	4619      	mov	r1, r3
 8007c20:	4610      	mov	r0, r2
 8007c22:	f000 fea1 	bl	8008968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2201      	movs	r2, #1
 8007c3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2201      	movs	r2, #1
 8007c52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2201      	movs	r2, #1
 8007c5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	2201      	movs	r2, #1
 8007c62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2201      	movs	r2, #1
 8007c6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}

08007c90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b082      	sub	sp, #8
 8007c94:	af00      	add	r7, sp, #0
 8007c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e049      	b.n	8007d36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 f841 	bl	8007d3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2202      	movs	r2, #2
 8007cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681a      	ldr	r2, [r3, #0]
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3304      	adds	r3, #4
 8007ccc:	4619      	mov	r1, r3
 8007cce:	4610      	mov	r0, r2
 8007cd0:	f000 fe4a 	bl	8008968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2201      	movs	r2, #1
 8007d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2201      	movs	r2, #1
 8007d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2201      	movs	r2, #1
 8007d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007d34:	2300      	movs	r3, #0
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	3708      	adds	r7, #8
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}

08007d3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d3e:	b480      	push	{r7}
 8007d40:	b083      	sub	sp, #12
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
	...

08007d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <HAL_TIM_PWM_Start+0x24>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d6a:	b2db      	uxtb	r3, r3
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	bf14      	ite	ne
 8007d70:	2301      	movne	r3, #1
 8007d72:	2300      	moveq	r3, #0
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	e03c      	b.n	8007df2 <HAL_TIM_PWM_Start+0x9e>
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	2b04      	cmp	r3, #4
 8007d7c:	d109      	bne.n	8007d92 <HAL_TIM_PWM_Start+0x3e>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	bf14      	ite	ne
 8007d8a:	2301      	movne	r3, #1
 8007d8c:	2300      	moveq	r3, #0
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	e02f      	b.n	8007df2 <HAL_TIM_PWM_Start+0x9e>
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	2b08      	cmp	r3, #8
 8007d96:	d109      	bne.n	8007dac <HAL_TIM_PWM_Start+0x58>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	bf14      	ite	ne
 8007da4:	2301      	movne	r3, #1
 8007da6:	2300      	moveq	r3, #0
 8007da8:	b2db      	uxtb	r3, r3
 8007daa:	e022      	b.n	8007df2 <HAL_TIM_PWM_Start+0x9e>
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	2b0c      	cmp	r3, #12
 8007db0:	d109      	bne.n	8007dc6 <HAL_TIM_PWM_Start+0x72>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007db8:	b2db      	uxtb	r3, r3
 8007dba:	2b01      	cmp	r3, #1
 8007dbc:	bf14      	ite	ne
 8007dbe:	2301      	movne	r3, #1
 8007dc0:	2300      	moveq	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	e015      	b.n	8007df2 <HAL_TIM_PWM_Start+0x9e>
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	2b10      	cmp	r3, #16
 8007dca:	d109      	bne.n	8007de0 <HAL_TIM_PWM_Start+0x8c>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b01      	cmp	r3, #1
 8007dd6:	bf14      	ite	ne
 8007dd8:	2301      	movne	r3, #1
 8007dda:	2300      	moveq	r3, #0
 8007ddc:	b2db      	uxtb	r3, r3
 8007dde:	e008      	b.n	8007df2 <HAL_TIM_PWM_Start+0x9e>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	bf14      	ite	ne
 8007dec:	2301      	movne	r3, #1
 8007dee:	2300      	moveq	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007df6:	2301      	movs	r3, #1
 8007df8:	e097      	b.n	8007f2a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d104      	bne.n	8007e0a <HAL_TIM_PWM_Start+0xb6>
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2202      	movs	r2, #2
 8007e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e08:	e023      	b.n	8007e52 <HAL_TIM_PWM_Start+0xfe>
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2b04      	cmp	r3, #4
 8007e0e:	d104      	bne.n	8007e1a <HAL_TIM_PWM_Start+0xc6>
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2202      	movs	r2, #2
 8007e14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e18:	e01b      	b.n	8007e52 <HAL_TIM_PWM_Start+0xfe>
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d104      	bne.n	8007e2a <HAL_TIM_PWM_Start+0xd6>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2202      	movs	r2, #2
 8007e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e28:	e013      	b.n	8007e52 <HAL_TIM_PWM_Start+0xfe>
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b0c      	cmp	r3, #12
 8007e2e:	d104      	bne.n	8007e3a <HAL_TIM_PWM_Start+0xe6>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2202      	movs	r2, #2
 8007e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e38:	e00b      	b.n	8007e52 <HAL_TIM_PWM_Start+0xfe>
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	2b10      	cmp	r3, #16
 8007e3e:	d104      	bne.n	8007e4a <HAL_TIM_PWM_Start+0xf6>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2202      	movs	r2, #2
 8007e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e48:	e003      	b.n	8007e52 <HAL_TIM_PWM_Start+0xfe>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2202      	movs	r2, #2
 8007e4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2201      	movs	r2, #1
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 f9a6 	bl	80091ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4a33      	ldr	r2, [pc, #204]	; (8007f34 <HAL_TIM_PWM_Start+0x1e0>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d013      	beq.n	8007e92 <HAL_TIM_PWM_Start+0x13e>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a32      	ldr	r2, [pc, #200]	; (8007f38 <HAL_TIM_PWM_Start+0x1e4>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d00e      	beq.n	8007e92 <HAL_TIM_PWM_Start+0x13e>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a30      	ldr	r2, [pc, #192]	; (8007f3c <HAL_TIM_PWM_Start+0x1e8>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d009      	beq.n	8007e92 <HAL_TIM_PWM_Start+0x13e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	4a2f      	ldr	r2, [pc, #188]	; (8007f40 <HAL_TIM_PWM_Start+0x1ec>)
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d004      	beq.n	8007e92 <HAL_TIM_PWM_Start+0x13e>
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a2d      	ldr	r2, [pc, #180]	; (8007f44 <HAL_TIM_PWM_Start+0x1f0>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d101      	bne.n	8007e96 <HAL_TIM_PWM_Start+0x142>
 8007e92:	2301      	movs	r3, #1
 8007e94:	e000      	b.n	8007e98 <HAL_TIM_PWM_Start+0x144>
 8007e96:	2300      	movs	r3, #0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d007      	beq.n	8007eac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007eaa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a20      	ldr	r2, [pc, #128]	; (8007f34 <HAL_TIM_PWM_Start+0x1e0>)
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d018      	beq.n	8007ee8 <HAL_TIM_PWM_Start+0x194>
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ebe:	d013      	beq.n	8007ee8 <HAL_TIM_PWM_Start+0x194>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a20      	ldr	r2, [pc, #128]	; (8007f48 <HAL_TIM_PWM_Start+0x1f4>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d00e      	beq.n	8007ee8 <HAL_TIM_PWM_Start+0x194>
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a1f      	ldr	r2, [pc, #124]	; (8007f4c <HAL_TIM_PWM_Start+0x1f8>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d009      	beq.n	8007ee8 <HAL_TIM_PWM_Start+0x194>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a17      	ldr	r2, [pc, #92]	; (8007f38 <HAL_TIM_PWM_Start+0x1e4>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d004      	beq.n	8007ee8 <HAL_TIM_PWM_Start+0x194>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a16      	ldr	r2, [pc, #88]	; (8007f3c <HAL_TIM_PWM_Start+0x1e8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d115      	bne.n	8007f14 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689a      	ldr	r2, [r3, #8]
 8007eee:	4b18      	ldr	r3, [pc, #96]	; (8007f50 <HAL_TIM_PWM_Start+0x1fc>)
 8007ef0:	4013      	ands	r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2b06      	cmp	r3, #6
 8007ef8:	d015      	beq.n	8007f26 <HAL_TIM_PWM_Start+0x1d2>
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f00:	d011      	beq.n	8007f26 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f042 0201 	orr.w	r2, r2, #1
 8007f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f12:	e008      	b.n	8007f26 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0201 	orr.w	r2, r2, #1
 8007f22:	601a      	str	r2, [r3, #0]
 8007f24:	e000      	b.n	8007f28 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	40012c00 	.word	0x40012c00
 8007f38:	40013400 	.word	0x40013400
 8007f3c:	40014000 	.word	0x40014000
 8007f40:	40014400 	.word	0x40014400
 8007f44:	40014800 	.word	0x40014800
 8007f48:	40000400 	.word	0x40000400
 8007f4c:	40000800 	.word	0x40000800
 8007f50:	00010007 	.word	0x00010007

08007f54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d101      	bne.n	8007f68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e097      	b.n	8008098 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f6e:	b2db      	uxtb	r3, r3
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d106      	bne.n	8007f82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2200      	movs	r2, #0
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7fb fae1 	bl	8003544 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2202      	movs	r2, #2
 8007f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	689b      	ldr	r3, [r3, #8]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	6812      	ldr	r2, [r2, #0]
 8007f94:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007f98:	f023 0307 	bic.w	r3, r3, #7
 8007f9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	4610      	mov	r0, r2
 8007faa:	f000 fcdd 	bl	8008968 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	699b      	ldr	r3, [r3, #24]
 8007fbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	697a      	ldr	r2, [r7, #20]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fd6:	f023 0303 	bic.w	r3, r3, #3
 8007fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	689a      	ldr	r2, [r3, #8]
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	699b      	ldr	r3, [r3, #24]
 8007fe4:	021b      	lsls	r3, r3, #8
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	4313      	orrs	r3, r2
 8007fec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007ff4:	f023 030c 	bic.w	r3, r3, #12
 8007ff8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008000:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008004:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	68da      	ldr	r2, [r3, #12]
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	69db      	ldr	r3, [r3, #28]
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	4313      	orrs	r3, r2
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	011a      	lsls	r2, r3, #4
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	031b      	lsls	r3, r3, #12
 8008024:	4313      	orrs	r3, r2
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8008032:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800803a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	685a      	ldr	r2, [r3, #4]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	011b      	lsls	r3, r3, #4
 8008046:	4313      	orrs	r3, r2
 8008048:	68fa      	ldr	r2, [r7, #12]
 800804a:	4313      	orrs	r3, r2
 800804c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	693a      	ldr	r2, [r7, #16]
 800805c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	68fa      	ldr	r2, [r7, #12]
 8008064:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2201      	movs	r2, #1
 8008082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2201      	movs	r2, #1
 8008092:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008096:	2300      	movs	r3, #0
}
 8008098:	4618      	mov	r0, r3
 800809a:	3718      	adds	r7, #24
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080b0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80080b8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080c0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080c8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d110      	bne.n	80080f2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	2b01      	cmp	r3, #1
 80080d4:	d102      	bne.n	80080dc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80080d6:	7b7b      	ldrb	r3, [r7, #13]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d001      	beq.n	80080e0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e089      	b.n	80081f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2202      	movs	r2, #2
 80080ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080f0:	e031      	b.n	8008156 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	2b04      	cmp	r3, #4
 80080f6:	d110      	bne.n	800811a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80080f8:	7bbb      	ldrb	r3, [r7, #14]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d102      	bne.n	8008104 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80080fe:	7b3b      	ldrb	r3, [r7, #12]
 8008100:	2b01      	cmp	r3, #1
 8008102:	d001      	beq.n	8008108 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008104:	2301      	movs	r3, #1
 8008106:	e075      	b.n	80081f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2202      	movs	r2, #2
 800810c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2202      	movs	r2, #2
 8008114:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008118:	e01d      	b.n	8008156 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	2b01      	cmp	r3, #1
 800811e:	d108      	bne.n	8008132 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	2b01      	cmp	r3, #1
 8008124:	d105      	bne.n	8008132 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008126:	7b7b      	ldrb	r3, [r7, #13]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d102      	bne.n	8008132 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800812c:	7b3b      	ldrb	r3, [r7, #12]
 800812e:	2b01      	cmp	r3, #1
 8008130:	d001      	beq.n	8008136 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	e05e      	b.n	80081f4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2202      	movs	r2, #2
 800813a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2202      	movs	r2, #2
 8008142:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2202      	movs	r2, #2
 800814a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2202      	movs	r2, #2
 8008152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d003      	beq.n	8008164 <HAL_TIM_Encoder_Start_IT+0xc4>
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	2b04      	cmp	r3, #4
 8008160:	d010      	beq.n	8008184 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008162:	e01f      	b.n	80081a4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2201      	movs	r2, #1
 800816a:	2100      	movs	r1, #0
 800816c:	4618      	mov	r0, r3
 800816e:	f001 f81d 	bl	80091ac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68da      	ldr	r2, [r3, #12]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f042 0202 	orr.w	r2, r2, #2
 8008180:	60da      	str	r2, [r3, #12]
      break;
 8008182:	e02e      	b.n	80081e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2201      	movs	r2, #1
 800818a:	2104      	movs	r1, #4
 800818c:	4618      	mov	r0, r3
 800818e:	f001 f80d 	bl	80091ac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f042 0204 	orr.w	r2, r2, #4
 80081a0:	60da      	str	r2, [r3, #12]
      break;
 80081a2:	e01e      	b.n	80081e2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	2201      	movs	r2, #1
 80081aa:	2100      	movs	r1, #0
 80081ac:	4618      	mov	r0, r3
 80081ae:	f000 fffd 	bl	80091ac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2201      	movs	r2, #1
 80081b8:	2104      	movs	r1, #4
 80081ba:	4618      	mov	r0, r3
 80081bc:	f000 fff6 	bl	80091ac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	68da      	ldr	r2, [r3, #12]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0202 	orr.w	r2, r2, #2
 80081ce:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	68da      	ldr	r2, [r3, #12]
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f042 0204 	orr.w	r2, r2, #4
 80081de:	60da      	str	r2, [r3, #12]
      break;
 80081e0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	681a      	ldr	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f042 0201 	orr.w	r2, r2, #1
 80081f0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f003 0302 	and.w	r3, r3, #2
 800820e:	2b02      	cmp	r3, #2
 8008210:	d122      	bne.n	8008258 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f003 0302 	and.w	r3, r3, #2
 800821c:	2b02      	cmp	r3, #2
 800821e:	d11b      	bne.n	8008258 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0202 	mvn.w	r2, #2
 8008228:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	f003 0303 	and.w	r3, r3, #3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7f9 fc82 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 8008244:	e005      	b.n	8008252 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fb70 	bl	800892c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 fb77 	bl	8008940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	691b      	ldr	r3, [r3, #16]
 800825e:	f003 0304 	and.w	r3, r3, #4
 8008262:	2b04      	cmp	r3, #4
 8008264:	d122      	bne.n	80082ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	68db      	ldr	r3, [r3, #12]
 800826c:	f003 0304 	and.w	r3, r3, #4
 8008270:	2b04      	cmp	r3, #4
 8008272:	d11b      	bne.n	80082ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f06f 0204 	mvn.w	r2, #4
 800827c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2202      	movs	r2, #2
 8008282:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f7f9 fc58 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 8008298:	e005      	b.n	80082a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fb46 	bl	800892c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f000 fb4d 	bl	8008940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	691b      	ldr	r3, [r3, #16]
 80082b2:	f003 0308 	and.w	r3, r3, #8
 80082b6:	2b08      	cmp	r3, #8
 80082b8:	d122      	bne.n	8008300 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f003 0308 	and.w	r3, r3, #8
 80082c4:	2b08      	cmp	r3, #8
 80082c6:	d11b      	bne.n	8008300 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f06f 0208 	mvn.w	r2, #8
 80082d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2204      	movs	r2, #4
 80082d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	69db      	ldr	r3, [r3, #28]
 80082de:	f003 0303 	and.w	r3, r3, #3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7f9 fc2e 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 80082ec:	e005      	b.n	80082fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 fb1c 	bl	800892c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fb23 	bl	8008940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	f003 0310 	and.w	r3, r3, #16
 800830a:	2b10      	cmp	r3, #16
 800830c:	d122      	bne.n	8008354 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	68db      	ldr	r3, [r3, #12]
 8008314:	f003 0310 	and.w	r3, r3, #16
 8008318:	2b10      	cmp	r3, #16
 800831a:	d11b      	bne.n	8008354 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f06f 0210 	mvn.w	r2, #16
 8008324:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2208      	movs	r2, #8
 800832a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	69db      	ldr	r3, [r3, #28]
 8008332:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7f9 fc04 	bl	8001b48 <HAL_TIM_IC_CaptureCallback>
 8008340:	e005      	b.n	800834e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f000 faf2 	bl	800892c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 faf9 	bl	8008940 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	691b      	ldr	r3, [r3, #16]
 800835a:	f003 0301 	and.w	r3, r3, #1
 800835e:	2b01      	cmp	r3, #1
 8008360:	d10e      	bne.n	8008380 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68db      	ldr	r3, [r3, #12]
 8008368:	f003 0301 	and.w	r3, r3, #1
 800836c:	2b01      	cmp	r3, #1
 800836e:	d107      	bne.n	8008380 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0201 	mvn.w	r2, #1
 8008378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 facc 	bl	8008918 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800838a:	2b80      	cmp	r3, #128	; 0x80
 800838c:	d10e      	bne.n	80083ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008398:	2b80      	cmp	r3, #128	; 0x80
 800839a:	d107      	bne.n	80083ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80083a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 f852 	bl	8009450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083ba:	d10e      	bne.n	80083da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68db      	ldr	r3, [r3, #12]
 80083c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c6:	2b80      	cmp	r3, #128	; 0x80
 80083c8:	d107      	bne.n	80083da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80083d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 f845 	bl	8009464 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b40      	cmp	r3, #64	; 0x40
 80083e6:	d10e      	bne.n	8008406 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	68db      	ldr	r3, [r3, #12]
 80083ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083f2:	2b40      	cmp	r3, #64	; 0x40
 80083f4:	d107      	bne.n	8008406 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80083fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 faa7 	bl	8008954 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	f003 0320 	and.w	r3, r3, #32
 8008410:	2b20      	cmp	r3, #32
 8008412:	d10e      	bne.n	8008432 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	68db      	ldr	r3, [r3, #12]
 800841a:	f003 0320 	and.w	r3, r3, #32
 800841e:	2b20      	cmp	r3, #32
 8008420:	d107      	bne.n	8008432 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f06f 0220 	mvn.w	r2, #32
 800842a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 f805 	bl	800943c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800843c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008440:	d10f      	bne.n	8008462 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800844c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008450:	d107      	bne.n	8008462 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800845a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f001 f80b 	bl	8009478 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800846c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008470:	d10f      	bne.n	8008492 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800847c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008480:	d107      	bne.n	8008492 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800848a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fffd 	bl	800948c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800849c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084a0:	d10f      	bne.n	80084c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084b0:	d107      	bne.n	80084c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80084ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f000 ffef 	bl	80094a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084d0:	d10f      	bne.n	80084f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	68db      	ldr	r3, [r3, #12]
 80084d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80084e0:	d107      	bne.n	80084f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80084ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 ffe1 	bl	80094b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084f2:	bf00      	nop
 80084f4:	3708      	adds	r7, #8
 80084f6:	46bd      	mov	sp, r7
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b086      	sub	sp, #24
 8008500:	af00      	add	r7, sp, #0
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008508:	2300      	movs	r3, #0
 800850a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008512:	2b01      	cmp	r3, #1
 8008514:	d101      	bne.n	800851a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008516:	2302      	movs	r3, #2
 8008518:	e0ff      	b.n	800871a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2b14      	cmp	r3, #20
 8008526:	f200 80f0 	bhi.w	800870a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800852a:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800852c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008530:	08008585 	.word	0x08008585
 8008534:	0800870b 	.word	0x0800870b
 8008538:	0800870b 	.word	0x0800870b
 800853c:	0800870b 	.word	0x0800870b
 8008540:	080085c5 	.word	0x080085c5
 8008544:	0800870b 	.word	0x0800870b
 8008548:	0800870b 	.word	0x0800870b
 800854c:	0800870b 	.word	0x0800870b
 8008550:	08008607 	.word	0x08008607
 8008554:	0800870b 	.word	0x0800870b
 8008558:	0800870b 	.word	0x0800870b
 800855c:	0800870b 	.word	0x0800870b
 8008560:	08008647 	.word	0x08008647
 8008564:	0800870b 	.word	0x0800870b
 8008568:	0800870b 	.word	0x0800870b
 800856c:	0800870b 	.word	0x0800870b
 8008570:	08008689 	.word	0x08008689
 8008574:	0800870b 	.word	0x0800870b
 8008578:	0800870b 	.word	0x0800870b
 800857c:	0800870b 	.word	0x0800870b
 8008580:	080086c9 	.word	0x080086c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	68b9      	ldr	r1, [r7, #8]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 fa7c 	bl	8008a88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	699a      	ldr	r2, [r3, #24]
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f042 0208 	orr.w	r2, r2, #8
 800859e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	699a      	ldr	r2, [r3, #24]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f022 0204 	bic.w	r2, r2, #4
 80085ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6999      	ldr	r1, [r3, #24]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	691a      	ldr	r2, [r3, #16]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	619a      	str	r2, [r3, #24]
      break;
 80085c2:	e0a5      	b.n	8008710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 faec 	bl	8008ba8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	699a      	ldr	r2, [r3, #24]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699a      	ldr	r2, [r3, #24]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	6999      	ldr	r1, [r3, #24]
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	691b      	ldr	r3, [r3, #16]
 80085fa:	021a      	lsls	r2, r3, #8
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	430a      	orrs	r2, r1
 8008602:	619a      	str	r2, [r3, #24]
      break;
 8008604:	e084      	b.n	8008710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68b9      	ldr	r1, [r7, #8]
 800860c:	4618      	mov	r0, r3
 800860e:	f000 fb55 	bl	8008cbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	69da      	ldr	r2, [r3, #28]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f042 0208 	orr.w	r2, r2, #8
 8008620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	69da      	ldr	r2, [r3, #28]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f022 0204 	bic.w	r2, r2, #4
 8008630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	69d9      	ldr	r1, [r3, #28]
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	691a      	ldr	r2, [r3, #16]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	430a      	orrs	r2, r1
 8008642:	61da      	str	r2, [r3, #28]
      break;
 8008644:	e064      	b.n	8008710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	4618      	mov	r0, r3
 800864e:	f000 fbbd 	bl	8008dcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	69da      	ldr	r2, [r3, #28]
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	69da      	ldr	r2, [r3, #28]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	69d9      	ldr	r1, [r3, #28]
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	021a      	lsls	r2, r3, #8
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	430a      	orrs	r2, r1
 8008684:	61da      	str	r2, [r3, #28]
      break;
 8008686:	e043      	b.n	8008710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	68b9      	ldr	r1, [r7, #8]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fc26 	bl	8008ee0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f042 0208 	orr.w	r2, r2, #8
 80086a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	f022 0204 	bic.w	r2, r2, #4
 80086b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	691a      	ldr	r2, [r3, #16]
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	430a      	orrs	r2, r1
 80086c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80086c6:	e023      	b.n	8008710 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	68b9      	ldr	r1, [r7, #8]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f000 fc6a 	bl	8008fa8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	691b      	ldr	r3, [r3, #16]
 80086fe:	021a      	lsls	r2, r3, #8
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	430a      	orrs	r2, r1
 8008706:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008708:	e002      	b.n	8008710 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	75fb      	strb	r3, [r7, #23]
      break;
 800870e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008718:	7dfb      	ldrb	r3, [r7, #23]
}
 800871a:	4618      	mov	r0, r3
 800871c:	3718      	adds	r7, #24
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}
 8008722:	bf00      	nop

08008724 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800872e:	2300      	movs	r3, #0
 8008730:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008738:	2b01      	cmp	r3, #1
 800873a:	d101      	bne.n	8008740 <HAL_TIM_ConfigClockSource+0x1c>
 800873c:	2302      	movs	r3, #2
 800873e:	e0de      	b.n	80088fe <HAL_TIM_ConfigClockSource+0x1da>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800875e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008762:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800876a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68ba      	ldr	r2, [r7, #8]
 8008772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a63      	ldr	r2, [pc, #396]	; (8008908 <HAL_TIM_ConfigClockSource+0x1e4>)
 800877a:	4293      	cmp	r3, r2
 800877c:	f000 80a9 	beq.w	80088d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008780:	4a61      	ldr	r2, [pc, #388]	; (8008908 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008782:	4293      	cmp	r3, r2
 8008784:	f200 80ae 	bhi.w	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008788:	4a60      	ldr	r2, [pc, #384]	; (800890c <HAL_TIM_ConfigClockSource+0x1e8>)
 800878a:	4293      	cmp	r3, r2
 800878c:	f000 80a1 	beq.w	80088d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008790:	4a5e      	ldr	r2, [pc, #376]	; (800890c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008792:	4293      	cmp	r3, r2
 8008794:	f200 80a6 	bhi.w	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008798:	4a5d      	ldr	r2, [pc, #372]	; (8008910 <HAL_TIM_ConfigClockSource+0x1ec>)
 800879a:	4293      	cmp	r3, r2
 800879c:	f000 8099 	beq.w	80088d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80087a0:	4a5b      	ldr	r2, [pc, #364]	; (8008910 <HAL_TIM_ConfigClockSource+0x1ec>)
 80087a2:	4293      	cmp	r3, r2
 80087a4:	f200 809e 	bhi.w	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80087a8:	4a5a      	ldr	r2, [pc, #360]	; (8008914 <HAL_TIM_ConfigClockSource+0x1f0>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	f000 8091 	beq.w	80088d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80087b0:	4a58      	ldr	r2, [pc, #352]	; (8008914 <HAL_TIM_ConfigClockSource+0x1f0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	f200 8096 	bhi.w	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80087b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087bc:	f000 8089 	beq.w	80088d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80087c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80087c4:	f200 808e 	bhi.w	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80087c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087cc:	d03e      	beq.n	800884c <HAL_TIM_ConfigClockSource+0x128>
 80087ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087d2:	f200 8087 	bhi.w	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80087d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087da:	f000 8086 	beq.w	80088ea <HAL_TIM_ConfigClockSource+0x1c6>
 80087de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087e2:	d87f      	bhi.n	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80087e4:	2b70      	cmp	r3, #112	; 0x70
 80087e6:	d01a      	beq.n	800881e <HAL_TIM_ConfigClockSource+0xfa>
 80087e8:	2b70      	cmp	r3, #112	; 0x70
 80087ea:	d87b      	bhi.n	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80087ec:	2b60      	cmp	r3, #96	; 0x60
 80087ee:	d050      	beq.n	8008892 <HAL_TIM_ConfigClockSource+0x16e>
 80087f0:	2b60      	cmp	r3, #96	; 0x60
 80087f2:	d877      	bhi.n	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80087f4:	2b50      	cmp	r3, #80	; 0x50
 80087f6:	d03c      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x14e>
 80087f8:	2b50      	cmp	r3, #80	; 0x50
 80087fa:	d873      	bhi.n	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80087fc:	2b40      	cmp	r3, #64	; 0x40
 80087fe:	d058      	beq.n	80088b2 <HAL_TIM_ConfigClockSource+0x18e>
 8008800:	2b40      	cmp	r3, #64	; 0x40
 8008802:	d86f      	bhi.n	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008804:	2b30      	cmp	r3, #48	; 0x30
 8008806:	d064      	beq.n	80088d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008808:	2b30      	cmp	r3, #48	; 0x30
 800880a:	d86b      	bhi.n	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 800880c:	2b20      	cmp	r3, #32
 800880e:	d060      	beq.n	80088d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008810:	2b20      	cmp	r3, #32
 8008812:	d867      	bhi.n	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008814:	2b00      	cmp	r3, #0
 8008816:	d05c      	beq.n	80088d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008818:	2b10      	cmp	r3, #16
 800881a:	d05a      	beq.n	80088d2 <HAL_TIM_ConfigClockSource+0x1ae>
 800881c:	e062      	b.n	80088e4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6818      	ldr	r0, [r3, #0]
 8008822:	683b      	ldr	r3, [r7, #0]
 8008824:	6899      	ldr	r1, [r3, #8]
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	685a      	ldr	r2, [r3, #4]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f000 fc9d 	bl	800916c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800883a:	68bb      	ldr	r3, [r7, #8]
 800883c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008840:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68ba      	ldr	r2, [r7, #8]
 8008848:	609a      	str	r2, [r3, #8]
      break;
 800884a:	e04f      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6818      	ldr	r0, [r3, #0]
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	6899      	ldr	r1, [r3, #8]
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685a      	ldr	r2, [r3, #4]
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f000 fc86 	bl	800916c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	689a      	ldr	r2, [r3, #8]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800886e:	609a      	str	r2, [r3, #8]
      break;
 8008870:	e03c      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6818      	ldr	r0, [r3, #0]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	6859      	ldr	r1, [r3, #4]
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	461a      	mov	r2, r3
 8008880:	f000 fbf8 	bl	8009074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2150      	movs	r1, #80	; 0x50
 800888a:	4618      	mov	r0, r3
 800888c:	f000 fc51 	bl	8009132 <TIM_ITRx_SetConfig>
      break;
 8008890:	e02c      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6818      	ldr	r0, [r3, #0]
 8008896:	683b      	ldr	r3, [r7, #0]
 8008898:	6859      	ldr	r1, [r3, #4]
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	68db      	ldr	r3, [r3, #12]
 800889e:	461a      	mov	r2, r3
 80088a0:	f000 fc17 	bl	80090d2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2160      	movs	r1, #96	; 0x60
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 fc41 	bl	8009132 <TIM_ITRx_SetConfig>
      break;
 80088b0:	e01c      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6818      	ldr	r0, [r3, #0]
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	6859      	ldr	r1, [r3, #4]
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	68db      	ldr	r3, [r3, #12]
 80088be:	461a      	mov	r2, r3
 80088c0:	f000 fbd8 	bl	8009074 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	2140      	movs	r1, #64	; 0x40
 80088ca:	4618      	mov	r0, r3
 80088cc:	f000 fc31 	bl	8009132 <TIM_ITRx_SetConfig>
      break;
 80088d0:	e00c      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681a      	ldr	r2, [r3, #0]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4619      	mov	r1, r3
 80088dc:	4610      	mov	r0, r2
 80088de:	f000 fc28 	bl	8009132 <TIM_ITRx_SetConfig>
      break;
 80088e2:	e003      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80088e4:	2301      	movs	r3, #1
 80088e6:	73fb      	strb	r3, [r7, #15]
      break;
 80088e8:	e000      	b.n	80088ec <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80088ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80088fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3710      	adds	r7, #16
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
 8008906:	bf00      	nop
 8008908:	00100070 	.word	0x00100070
 800890c:	00100040 	.word	0x00100040
 8008910:	00100030 	.word	0x00100030
 8008914:	00100020 	.word	0x00100020

08008918 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008920:	bf00      	nop
 8008922:	370c      	adds	r7, #12
 8008924:	46bd      	mov	sp, r7
 8008926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892a:	4770      	bx	lr

0800892c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800892c:	b480      	push	{r7}
 800892e:	b083      	sub	sp, #12
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008934:	bf00      	nop
 8008936:	370c      	adds	r7, #12
 8008938:	46bd      	mov	sp, r7
 800893a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893e:	4770      	bx	lr

08008940 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008940:	b480      	push	{r7}
 8008942:	b083      	sub	sp, #12
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008948:	bf00      	nop
 800894a:	370c      	adds	r7, #12
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008954:	b480      	push	{r7}
 8008956:	b083      	sub	sp, #12
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a3c      	ldr	r2, [pc, #240]	; (8008a6c <TIM_Base_SetConfig+0x104>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d00f      	beq.n	80089a0 <TIM_Base_SetConfig+0x38>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008986:	d00b      	beq.n	80089a0 <TIM_Base_SetConfig+0x38>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a39      	ldr	r2, [pc, #228]	; (8008a70 <TIM_Base_SetConfig+0x108>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d007      	beq.n	80089a0 <TIM_Base_SetConfig+0x38>
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	4a38      	ldr	r2, [pc, #224]	; (8008a74 <TIM_Base_SetConfig+0x10c>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d003      	beq.n	80089a0 <TIM_Base_SetConfig+0x38>
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a37      	ldr	r2, [pc, #220]	; (8008a78 <TIM_Base_SetConfig+0x110>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d108      	bne.n	80089b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	68fa      	ldr	r2, [r7, #12]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a2d      	ldr	r2, [pc, #180]	; (8008a6c <TIM_Base_SetConfig+0x104>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d01b      	beq.n	80089f2 <TIM_Base_SetConfig+0x8a>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089c0:	d017      	beq.n	80089f2 <TIM_Base_SetConfig+0x8a>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a2a      	ldr	r2, [pc, #168]	; (8008a70 <TIM_Base_SetConfig+0x108>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d013      	beq.n	80089f2 <TIM_Base_SetConfig+0x8a>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a29      	ldr	r2, [pc, #164]	; (8008a74 <TIM_Base_SetConfig+0x10c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d00f      	beq.n	80089f2 <TIM_Base_SetConfig+0x8a>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a28      	ldr	r2, [pc, #160]	; (8008a78 <TIM_Base_SetConfig+0x110>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d00b      	beq.n	80089f2 <TIM_Base_SetConfig+0x8a>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a27      	ldr	r2, [pc, #156]	; (8008a7c <TIM_Base_SetConfig+0x114>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d007      	beq.n	80089f2 <TIM_Base_SetConfig+0x8a>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a26      	ldr	r2, [pc, #152]	; (8008a80 <TIM_Base_SetConfig+0x118>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d003      	beq.n	80089f2 <TIM_Base_SetConfig+0x8a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a25      	ldr	r2, [pc, #148]	; (8008a84 <TIM_Base_SetConfig+0x11c>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d108      	bne.n	8008a04 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	695b      	ldr	r3, [r3, #20]
 8008a0e:	4313      	orrs	r3, r2
 8008a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	689a      	ldr	r2, [r3, #8]
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a10      	ldr	r2, [pc, #64]	; (8008a6c <TIM_Base_SetConfig+0x104>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d00f      	beq.n	8008a50 <TIM_Base_SetConfig+0xe8>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a11      	ldr	r2, [pc, #68]	; (8008a78 <TIM_Base_SetConfig+0x110>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d00b      	beq.n	8008a50 <TIM_Base_SetConfig+0xe8>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a10      	ldr	r2, [pc, #64]	; (8008a7c <TIM_Base_SetConfig+0x114>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d007      	beq.n	8008a50 <TIM_Base_SetConfig+0xe8>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a0f      	ldr	r2, [pc, #60]	; (8008a80 <TIM_Base_SetConfig+0x118>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d003      	beq.n	8008a50 <TIM_Base_SetConfig+0xe8>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a0e      	ldr	r2, [pc, #56]	; (8008a84 <TIM_Base_SetConfig+0x11c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d103      	bne.n	8008a58 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	691a      	ldr	r2, [r3, #16]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	615a      	str	r2, [r3, #20]
}
 8008a5e:	bf00      	nop
 8008a60:	3714      	adds	r7, #20
 8008a62:	46bd      	mov	sp, r7
 8008a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a68:	4770      	bx	lr
 8008a6a:	bf00      	nop
 8008a6c:	40012c00 	.word	0x40012c00
 8008a70:	40000400 	.word	0x40000400
 8008a74:	40000800 	.word	0x40000800
 8008a78:	40013400 	.word	0x40013400
 8008a7c:	40014000 	.word	0x40014000
 8008a80:	40014400 	.word	0x40014400
 8008a84:	40014800 	.word	0x40014800

08008a88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b087      	sub	sp, #28
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6a1b      	ldr	r3, [r3, #32]
 8008a96:	f023 0201 	bic.w	r2, r3, #1
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f023 0303 	bic.w	r3, r3, #3
 8008ac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68fa      	ldr	r2, [r7, #12]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f023 0302 	bic.w	r3, r3, #2
 8008ad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	4313      	orrs	r3, r2
 8008ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	4a2c      	ldr	r2, [pc, #176]	; (8008b94 <TIM_OC1_SetConfig+0x10c>)
 8008ae4:	4293      	cmp	r3, r2
 8008ae6:	d00f      	beq.n	8008b08 <TIM_OC1_SetConfig+0x80>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	4a2b      	ldr	r2, [pc, #172]	; (8008b98 <TIM_OC1_SetConfig+0x110>)
 8008aec:	4293      	cmp	r3, r2
 8008aee:	d00b      	beq.n	8008b08 <TIM_OC1_SetConfig+0x80>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	4a2a      	ldr	r2, [pc, #168]	; (8008b9c <TIM_OC1_SetConfig+0x114>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d007      	beq.n	8008b08 <TIM_OC1_SetConfig+0x80>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	4a29      	ldr	r2, [pc, #164]	; (8008ba0 <TIM_OC1_SetConfig+0x118>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d003      	beq.n	8008b08 <TIM_OC1_SetConfig+0x80>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a28      	ldr	r2, [pc, #160]	; (8008ba4 <TIM_OC1_SetConfig+0x11c>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d10c      	bne.n	8008b22 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	f023 0308 	bic.w	r3, r3, #8
 8008b0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	68db      	ldr	r3, [r3, #12]
 8008b14:	697a      	ldr	r2, [r7, #20]
 8008b16:	4313      	orrs	r3, r2
 8008b18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f023 0304 	bic.w	r3, r3, #4
 8008b20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a1b      	ldr	r2, [pc, #108]	; (8008b94 <TIM_OC1_SetConfig+0x10c>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d00f      	beq.n	8008b4a <TIM_OC1_SetConfig+0xc2>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a1a      	ldr	r2, [pc, #104]	; (8008b98 <TIM_OC1_SetConfig+0x110>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d00b      	beq.n	8008b4a <TIM_OC1_SetConfig+0xc2>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a19      	ldr	r2, [pc, #100]	; (8008b9c <TIM_OC1_SetConfig+0x114>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d007      	beq.n	8008b4a <TIM_OC1_SetConfig+0xc2>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a18      	ldr	r2, [pc, #96]	; (8008ba0 <TIM_OC1_SetConfig+0x118>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d003      	beq.n	8008b4a <TIM_OC1_SetConfig+0xc2>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a17      	ldr	r2, [pc, #92]	; (8008ba4 <TIM_OC1_SetConfig+0x11c>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d111      	bne.n	8008b6e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	695b      	ldr	r3, [r3, #20]
 8008b5e:	693a      	ldr	r2, [r7, #16]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	697a      	ldr	r2, [r7, #20]
 8008b86:	621a      	str	r2, [r3, #32]
}
 8008b88:	bf00      	nop
 8008b8a:	371c      	adds	r7, #28
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr
 8008b94:	40012c00 	.word	0x40012c00
 8008b98:	40013400 	.word	0x40013400
 8008b9c:	40014000 	.word	0x40014000
 8008ba0:	40014400 	.word	0x40014400
 8008ba4:	40014800 	.word	0x40014800

08008ba8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	f023 0210 	bic.w	r2, r3, #16
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008be2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	f023 0320 	bic.w	r3, r3, #32
 8008bf6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	011b      	lsls	r3, r3, #4
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a28      	ldr	r2, [pc, #160]	; (8008ca8 <TIM_OC2_SetConfig+0x100>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d003      	beq.n	8008c14 <TIM_OC2_SetConfig+0x6c>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a27      	ldr	r2, [pc, #156]	; (8008cac <TIM_OC2_SetConfig+0x104>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d10d      	bne.n	8008c30 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	68db      	ldr	r3, [r3, #12]
 8008c20:	011b      	lsls	r3, r3, #4
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008c28:	697b      	ldr	r3, [r7, #20]
 8008c2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a1d      	ldr	r2, [pc, #116]	; (8008ca8 <TIM_OC2_SetConfig+0x100>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d00f      	beq.n	8008c58 <TIM_OC2_SetConfig+0xb0>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	4a1c      	ldr	r2, [pc, #112]	; (8008cac <TIM_OC2_SetConfig+0x104>)
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	d00b      	beq.n	8008c58 <TIM_OC2_SetConfig+0xb0>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a1b      	ldr	r2, [pc, #108]	; (8008cb0 <TIM_OC2_SetConfig+0x108>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d007      	beq.n	8008c58 <TIM_OC2_SetConfig+0xb0>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a1a      	ldr	r2, [pc, #104]	; (8008cb4 <TIM_OC2_SetConfig+0x10c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d003      	beq.n	8008c58 <TIM_OC2_SetConfig+0xb0>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a19      	ldr	r2, [pc, #100]	; (8008cb8 <TIM_OC2_SetConfig+0x110>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d113      	bne.n	8008c80 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008c60:	693b      	ldr	r3, [r7, #16]
 8008c62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	695b      	ldr	r3, [r3, #20]
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	693a      	ldr	r2, [r7, #16]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	699b      	ldr	r3, [r3, #24]
 8008c78:	009b      	lsls	r3, r3, #2
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	4313      	orrs	r3, r2
 8008c7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	693a      	ldr	r2, [r7, #16]
 8008c84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685a      	ldr	r2, [r3, #4]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	621a      	str	r2, [r3, #32]
}
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr
 8008ca6:	bf00      	nop
 8008ca8:	40012c00 	.word	0x40012c00
 8008cac:	40013400 	.word	0x40013400
 8008cb0:	40014000 	.word	0x40014000
 8008cb4:	40014400 	.word	0x40014400
 8008cb8:	40014800 	.word	0x40014800

08008cbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b087      	sub	sp, #28
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6a1b      	ldr	r3, [r3, #32]
 8008cca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6a1b      	ldr	r3, [r3, #32]
 8008cd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	685b      	ldr	r3, [r3, #4]
 8008cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0303 	bic.w	r3, r3, #3
 8008cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008d08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	021b      	lsls	r3, r3, #8
 8008d10:	697a      	ldr	r2, [r7, #20]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	4a27      	ldr	r2, [pc, #156]	; (8008db8 <TIM_OC3_SetConfig+0xfc>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d003      	beq.n	8008d26 <TIM_OC3_SetConfig+0x6a>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	4a26      	ldr	r2, [pc, #152]	; (8008dbc <TIM_OC3_SetConfig+0x100>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d10d      	bne.n	8008d42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008d26:	697b      	ldr	r3, [r7, #20]
 8008d28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	68db      	ldr	r3, [r3, #12]
 8008d32:	021b      	lsls	r3, r3, #8
 8008d34:	697a      	ldr	r2, [r7, #20]
 8008d36:	4313      	orrs	r3, r2
 8008d38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008d3a:	697b      	ldr	r3, [r7, #20]
 8008d3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a1c      	ldr	r2, [pc, #112]	; (8008db8 <TIM_OC3_SetConfig+0xfc>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d00f      	beq.n	8008d6a <TIM_OC3_SetConfig+0xae>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a1b      	ldr	r2, [pc, #108]	; (8008dbc <TIM_OC3_SetConfig+0x100>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d00b      	beq.n	8008d6a <TIM_OC3_SetConfig+0xae>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a1a      	ldr	r2, [pc, #104]	; (8008dc0 <TIM_OC3_SetConfig+0x104>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d007      	beq.n	8008d6a <TIM_OC3_SetConfig+0xae>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	4a19      	ldr	r2, [pc, #100]	; (8008dc4 <TIM_OC3_SetConfig+0x108>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d003      	beq.n	8008d6a <TIM_OC3_SetConfig+0xae>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	4a18      	ldr	r2, [pc, #96]	; (8008dc8 <TIM_OC3_SetConfig+0x10c>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d113      	bne.n	8008d92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008d78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	695b      	ldr	r3, [r3, #20]
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	693a      	ldr	r2, [r7, #16]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	699b      	ldr	r3, [r3, #24]
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	693a      	ldr	r2, [r7, #16]
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68fa      	ldr	r2, [r7, #12]
 8008d9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	685a      	ldr	r2, [r3, #4]
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	697a      	ldr	r2, [r7, #20]
 8008daa:	621a      	str	r2, [r3, #32]
}
 8008dac:	bf00      	nop
 8008dae:	371c      	adds	r7, #28
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr
 8008db8:	40012c00 	.word	0x40012c00
 8008dbc:	40013400 	.word	0x40013400
 8008dc0:	40014000 	.word	0x40014000
 8008dc4:	40014400 	.word	0x40014400
 8008dc8:	40014800 	.word	0x40014800

08008dcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b087      	sub	sp, #28
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	6a1b      	ldr	r3, [r3, #32]
 8008dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a1b      	ldr	r3, [r3, #32]
 8008de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	685b      	ldr	r3, [r3, #4]
 8008dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	69db      	ldr	r3, [r3, #28]
 8008df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	021b      	lsls	r3, r3, #8
 8008e0e:	68fa      	ldr	r2, [r7, #12]
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008e1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	689b      	ldr	r3, [r3, #8]
 8008e20:	031b      	lsls	r3, r3, #12
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4a28      	ldr	r2, [pc, #160]	; (8008ecc <TIM_OC4_SetConfig+0x100>)
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d003      	beq.n	8008e38 <TIM_OC4_SetConfig+0x6c>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	4a27      	ldr	r2, [pc, #156]	; (8008ed0 <TIM_OC4_SetConfig+0x104>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d10d      	bne.n	8008e54 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008e38:	697b      	ldr	r3, [r7, #20]
 8008e3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	031b      	lsls	r3, r3, #12
 8008e46:	697a      	ldr	r2, [r7, #20]
 8008e48:	4313      	orrs	r3, r2
 8008e4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a1d      	ldr	r2, [pc, #116]	; (8008ecc <TIM_OC4_SetConfig+0x100>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d00f      	beq.n	8008e7c <TIM_OC4_SetConfig+0xb0>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a1c      	ldr	r2, [pc, #112]	; (8008ed0 <TIM_OC4_SetConfig+0x104>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d00b      	beq.n	8008e7c <TIM_OC4_SetConfig+0xb0>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a1b      	ldr	r2, [pc, #108]	; (8008ed4 <TIM_OC4_SetConfig+0x108>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d007      	beq.n	8008e7c <TIM_OC4_SetConfig+0xb0>
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	4a1a      	ldr	r2, [pc, #104]	; (8008ed8 <TIM_OC4_SetConfig+0x10c>)
 8008e70:	4293      	cmp	r3, r2
 8008e72:	d003      	beq.n	8008e7c <TIM_OC4_SetConfig+0xb0>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a19      	ldr	r2, [pc, #100]	; (8008edc <TIM_OC4_SetConfig+0x110>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d113      	bne.n	8008ea4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008e8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	019b      	lsls	r3, r3, #6
 8008e92:	693a      	ldr	r2, [r7, #16]
 8008e94:	4313      	orrs	r3, r2
 8008e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008e98:	683b      	ldr	r3, [r7, #0]
 8008e9a:	699b      	ldr	r3, [r3, #24]
 8008e9c:	019b      	lsls	r3, r3, #6
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	693a      	ldr	r2, [r7, #16]
 8008ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	68fa      	ldr	r2, [r7, #12]
 8008eae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	685a      	ldr	r2, [r3, #4]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	621a      	str	r2, [r3, #32]
}
 8008ebe:	bf00      	nop
 8008ec0:	371c      	adds	r7, #28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	40012c00 	.word	0x40012c00
 8008ed0:	40013400 	.word	0x40013400
 8008ed4:	40014000 	.word	0x40014000
 8008ed8:	40014400 	.word	0x40014400
 8008edc:	40014800 	.word	0x40014800

08008ee0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
 8008ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a1b      	ldr	r3, [r3, #32]
 8008eee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a1b      	ldr	r3, [r3, #32]
 8008efa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008f24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	041b      	lsls	r3, r3, #16
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	4a17      	ldr	r2, [pc, #92]	; (8008f94 <TIM_OC5_SetConfig+0xb4>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d00f      	beq.n	8008f5a <TIM_OC5_SetConfig+0x7a>
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	4a16      	ldr	r2, [pc, #88]	; (8008f98 <TIM_OC5_SetConfig+0xb8>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d00b      	beq.n	8008f5a <TIM_OC5_SetConfig+0x7a>
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	4a15      	ldr	r2, [pc, #84]	; (8008f9c <TIM_OC5_SetConfig+0xbc>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d007      	beq.n	8008f5a <TIM_OC5_SetConfig+0x7a>
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	4a14      	ldr	r2, [pc, #80]	; (8008fa0 <TIM_OC5_SetConfig+0xc0>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d003      	beq.n	8008f5a <TIM_OC5_SetConfig+0x7a>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	4a13      	ldr	r2, [pc, #76]	; (8008fa4 <TIM_OC5_SetConfig+0xc4>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d109      	bne.n	8008f6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	695b      	ldr	r3, [r3, #20]
 8008f66:	021b      	lsls	r3, r3, #8
 8008f68:	697a      	ldr	r2, [r7, #20]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	697a      	ldr	r2, [r7, #20]
 8008f72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	685a      	ldr	r2, [r3, #4]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	621a      	str	r2, [r3, #32]
}
 8008f88:	bf00      	nop
 8008f8a:	371c      	adds	r7, #28
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr
 8008f94:	40012c00 	.word	0x40012c00
 8008f98:	40013400 	.word	0x40013400
 8008f9c:	40014000 	.word	0x40014000
 8008fa0:	40014400 	.word	0x40014400
 8008fa4:	40014800 	.word	0x40014800

08008fa8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008fa8:	b480      	push	{r7}
 8008faa:	b087      	sub	sp, #28
 8008fac:	af00      	add	r7, sp, #0
 8008fae:	6078      	str	r0, [r7, #4]
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6a1b      	ldr	r3, [r3, #32]
 8008fb6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6a1b      	ldr	r3, [r3, #32]
 8008fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	68fa      	ldr	r2, [r7, #12]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	051b      	lsls	r3, r3, #20
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a18      	ldr	r2, [pc, #96]	; (8009060 <TIM_OC6_SetConfig+0xb8>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d00f      	beq.n	8009024 <TIM_OC6_SetConfig+0x7c>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	4a17      	ldr	r2, [pc, #92]	; (8009064 <TIM_OC6_SetConfig+0xbc>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d00b      	beq.n	8009024 <TIM_OC6_SetConfig+0x7c>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	4a16      	ldr	r2, [pc, #88]	; (8009068 <TIM_OC6_SetConfig+0xc0>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d007      	beq.n	8009024 <TIM_OC6_SetConfig+0x7c>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a15      	ldr	r2, [pc, #84]	; (800906c <TIM_OC6_SetConfig+0xc4>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d003      	beq.n	8009024 <TIM_OC6_SetConfig+0x7c>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	4a14      	ldr	r2, [pc, #80]	; (8009070 <TIM_OC6_SetConfig+0xc8>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d109      	bne.n	8009038 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800902a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	695b      	ldr	r3, [r3, #20]
 8009030:	029b      	lsls	r3, r3, #10
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	4313      	orrs	r3, r2
 8009036:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	697a      	ldr	r2, [r7, #20]
 800903c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	685a      	ldr	r2, [r3, #4]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	693a      	ldr	r2, [r7, #16]
 8009050:	621a      	str	r2, [r3, #32]
}
 8009052:	bf00      	nop
 8009054:	371c      	adds	r7, #28
 8009056:	46bd      	mov	sp, r7
 8009058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905c:	4770      	bx	lr
 800905e:	bf00      	nop
 8009060:	40012c00 	.word	0x40012c00
 8009064:	40013400 	.word	0x40013400
 8009068:	40014000 	.word	0x40014000
 800906c:	40014400 	.word	0x40014400
 8009070:	40014800 	.word	0x40014800

08009074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009074:	b480      	push	{r7}
 8009076:	b087      	sub	sp, #28
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	6a1b      	ldr	r3, [r3, #32]
 8009084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	6a1b      	ldr	r3, [r3, #32]
 800908a:	f023 0201 	bic.w	r2, r3, #1
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800909e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	011b      	lsls	r3, r3, #4
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	4313      	orrs	r3, r2
 80090a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090aa:	697b      	ldr	r3, [r7, #20]
 80090ac:	f023 030a 	bic.w	r3, r3, #10
 80090b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	693a      	ldr	r2, [r7, #16]
 80090be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	621a      	str	r2, [r3, #32]
}
 80090c6:	bf00      	nop
 80090c8:	371c      	adds	r7, #28
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b087      	sub	sp, #28
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	60f8      	str	r0, [r7, #12]
 80090da:	60b9      	str	r1, [r7, #8]
 80090dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	6a1b      	ldr	r3, [r3, #32]
 80090e2:	f023 0210 	bic.w	r2, r3, #16
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	699b      	ldr	r3, [r3, #24]
 80090ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	6a1b      	ldr	r3, [r3, #32]
 80090f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090f6:	697b      	ldr	r3, [r7, #20]
 80090f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80090fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	031b      	lsls	r3, r3, #12
 8009102:	697a      	ldr	r2, [r7, #20]
 8009104:	4313      	orrs	r3, r2
 8009106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800910e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	011b      	lsls	r3, r3, #4
 8009114:	693a      	ldr	r2, [r7, #16]
 8009116:	4313      	orrs	r3, r2
 8009118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	697a      	ldr	r2, [r7, #20]
 800911e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	621a      	str	r2, [r3, #32]
}
 8009126:	bf00      	nop
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009132:	b480      	push	{r7}
 8009134:	b085      	sub	sp, #20
 8009136:	af00      	add	r7, sp, #0
 8009138:	6078      	str	r0, [r7, #4]
 800913a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	689b      	ldr	r3, [r3, #8]
 8009140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8009148:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800914c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800914e:	683a      	ldr	r2, [r7, #0]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	4313      	orrs	r3, r2
 8009154:	f043 0307 	orr.w	r3, r3, #7
 8009158:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	68fa      	ldr	r2, [r7, #12]
 800915e:	609a      	str	r2, [r3, #8]
}
 8009160:	bf00      	nop
 8009162:	3714      	adds	r7, #20
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800916c:	b480      	push	{r7}
 800916e:	b087      	sub	sp, #28
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
 8009178:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	689b      	ldr	r3, [r3, #8]
 800917e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009180:	697b      	ldr	r3, [r7, #20]
 8009182:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009186:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	021a      	lsls	r2, r3, #8
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	431a      	orrs	r2, r3
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	4313      	orrs	r3, r2
 8009194:	697a      	ldr	r2, [r7, #20]
 8009196:	4313      	orrs	r3, r2
 8009198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	697a      	ldr	r2, [r7, #20]
 800919e:	609a      	str	r2, [r3, #8]
}
 80091a0:	bf00      	nop
 80091a2:	371c      	adds	r7, #28
 80091a4:	46bd      	mov	sp, r7
 80091a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091aa:	4770      	bx	lr

080091ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b087      	sub	sp, #28
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f003 031f 	and.w	r3, r3, #31
 80091be:	2201      	movs	r2, #1
 80091c0:	fa02 f303 	lsl.w	r3, r2, r3
 80091c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6a1a      	ldr	r2, [r3, #32]
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	43db      	mvns	r3, r3
 80091ce:	401a      	ands	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6a1a      	ldr	r2, [r3, #32]
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	f003 031f 	and.w	r3, r3, #31
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	fa01 f303 	lsl.w	r3, r1, r3
 80091e4:	431a      	orrs	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	621a      	str	r2, [r3, #32]
}
 80091ea:	bf00      	nop
 80091ec:	371c      	adds	r7, #28
 80091ee:	46bd      	mov	sp, r7
 80091f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f4:	4770      	bx	lr
	...

080091f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b085      	sub	sp, #20
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
 8009200:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800920c:	2302      	movs	r3, #2
 800920e:	e065      	b.n	80092dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2202      	movs	r2, #2
 800921c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	689b      	ldr	r3, [r3, #8]
 800922e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a2c      	ldr	r2, [pc, #176]	; (80092e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d004      	beq.n	8009244 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a2b      	ldr	r2, [pc, #172]	; (80092ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d108      	bne.n	8009256 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800924a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	68fa      	ldr	r2, [r7, #12]
 8009252:	4313      	orrs	r3, r2
 8009254:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800925c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009260:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	68fa      	ldr	r2, [r7, #12]
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	68fa      	ldr	r2, [r7, #12]
 8009272:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	4a1b      	ldr	r2, [pc, #108]	; (80092e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800927a:	4293      	cmp	r3, r2
 800927c:	d018      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009286:	d013      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a18      	ldr	r2, [pc, #96]	; (80092f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d00e      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4a17      	ldr	r2, [pc, #92]	; (80092f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009298:	4293      	cmp	r3, r2
 800929a:	d009      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4a12      	ldr	r2, [pc, #72]	; (80092ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d004      	beq.n	80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	4a13      	ldr	r2, [pc, #76]	; (80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80092ac:	4293      	cmp	r3, r2
 80092ae:	d10c      	bne.n	80092ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	4313      	orrs	r3, r2
 80092c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	68ba      	ldr	r2, [r7, #8]
 80092c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80092da:	2300      	movs	r3, #0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3714      	adds	r7, #20
 80092e0:	46bd      	mov	sp, r7
 80092e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e6:	4770      	bx	lr
 80092e8:	40012c00 	.word	0x40012c00
 80092ec:	40013400 	.word	0x40013400
 80092f0:	40000400 	.word	0x40000400
 80092f4:	40000800 	.word	0x40000800
 80092f8:	40014000 	.word	0x40014000

080092fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009306:	2300      	movs	r3, #0
 8009308:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009310:	2b01      	cmp	r3, #1
 8009312:	d101      	bne.n	8009318 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009314:	2302      	movs	r3, #2
 8009316:	e087      	b.n	8009428 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2201      	movs	r2, #1
 800931c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
 800932a:	4313      	orrs	r3, r2
 800932c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	4313      	orrs	r3, r2
 800933a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	4313      	orrs	r3, r2
 8009348:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4313      	orrs	r3, r2
 8009356:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	691b      	ldr	r3, [r3, #16]
 8009362:	4313      	orrs	r3, r2
 8009364:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800936c:	683b      	ldr	r3, [r7, #0]
 800936e:	695b      	ldr	r3, [r3, #20]
 8009370:	4313      	orrs	r3, r2
 8009372:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800937e:	4313      	orrs	r3, r2
 8009380:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	699b      	ldr	r3, [r3, #24]
 800938c:	041b      	lsls	r3, r3, #16
 800938e:	4313      	orrs	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a27      	ldr	r2, [pc, #156]	; (8009434 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d004      	beq.n	80093a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a25      	ldr	r2, [pc, #148]	; (8009438 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80093a2:	4293      	cmp	r3, r2
 80093a4:	d106      	bne.n	80093b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	4313      	orrs	r3, r2
 80093b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a1e      	ldr	r2, [pc, #120]	; (8009434 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d004      	beq.n	80093c8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a1d      	ldr	r2, [pc, #116]	; (8009438 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d126      	bne.n	8009416 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093d2:	051b      	lsls	r3, r3, #20
 80093d4:	4313      	orrs	r3, r2
 80093d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	4313      	orrs	r3, r2
 80093e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f0:	4313      	orrs	r3, r2
 80093f2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a0e      	ldr	r2, [pc, #56]	; (8009434 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d004      	beq.n	8009408 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a0d      	ldr	r2, [pc, #52]	; (8009438 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d106      	bne.n	8009416 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009412:	4313      	orrs	r3, r2
 8009414:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009426:	2300      	movs	r3, #0
}
 8009428:	4618      	mov	r0, r3
 800942a:	3714      	adds	r7, #20
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	40012c00 	.word	0x40012c00
 8009438:	40013400 	.word	0x40013400

0800943c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800946c:	bf00      	nop
 800946e:	370c      	adds	r7, #12
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr

08009478 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009478:	b480      	push	{r7}
 800947a:	b083      	sub	sp, #12
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009480:	bf00      	nop
 8009482:	370c      	adds	r7, #12
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009494:	bf00      	nop
 8009496:	370c      	adds	r7, #12
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr

080094a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80094b4:	b480      	push	{r7}
 80094b6:	b083      	sub	sp, #12
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80094bc:	bf00      	nop
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e042      	b.n	8009560 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d106      	bne.n	80094f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f7fa f8cd 	bl	800368c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2224      	movs	r2, #36	; 0x24
 80094f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f022 0201 	bic.w	r2, r2, #1
 8009508:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 fc02 	bl	8009d14 <UART_SetConfig>
 8009510:	4603      	mov	r3, r0
 8009512:	2b01      	cmp	r3, #1
 8009514:	d101      	bne.n	800951a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009516:	2301      	movs	r3, #1
 8009518:	e022      	b.n	8009560 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800951e:	2b00      	cmp	r3, #0
 8009520:	d002      	beq.n	8009528 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 fec2 	bl	800a2ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	685a      	ldr	r2, [r3, #4]
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009536:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	689a      	ldr	r2, [r3, #8]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009546:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	681a      	ldr	r2, [r3, #0]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0201 	orr.w	r2, r2, #1
 8009556:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 ff49 	bl	800a3f0 <UART_CheckIdleState>
 800955e:	4603      	mov	r3, r0
}
 8009560:	4618      	mov	r0, r3
 8009562:	3708      	adds	r7, #8
 8009564:	46bd      	mov	sp, r7
 8009566:	bd80      	pop	{r7, pc}

08009568 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009568:	b480      	push	{r7}
 800956a:	b091      	sub	sp, #68	; 0x44
 800956c:	af00      	add	r7, sp, #0
 800956e:	60f8      	str	r0, [r7, #12]
 8009570:	60b9      	str	r1, [r7, #8]
 8009572:	4613      	mov	r3, r2
 8009574:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800957c:	2b20      	cmp	r3, #32
 800957e:	f040 808c 	bne.w	800969a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d002      	beq.n	800958e <HAL_UART_Transmit_IT+0x26>
 8009588:	88fb      	ldrh	r3, [r7, #6]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e084      	b.n	800969c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009598:	2b01      	cmp	r3, #1
 800959a:	d101      	bne.n	80095a0 <HAL_UART_Transmit_IT+0x38>
 800959c:	2302      	movs	r3, #2
 800959e:	e07d      	b.n	800969c <HAL_UART_Transmit_IT+0x134>
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2201      	movs	r2, #1
 80095a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	68ba      	ldr	r2, [r7, #8]
 80095ac:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	88fa      	ldrh	r2, [r7, #6]
 80095b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	88fa      	ldrh	r2, [r7, #6]
 80095ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	2200      	movs	r2, #0
 80095c2:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2221      	movs	r2, #33	; 0x21
 80095d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095dc:	d12e      	bne.n	800963c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095e6:	d107      	bne.n	80095f8 <HAL_UART_Transmit_IT+0x90>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	691b      	ldr	r3, [r3, #16]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d103      	bne.n	80095f8 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	4a2d      	ldr	r2, [pc, #180]	; (80096a8 <HAL_UART_Transmit_IT+0x140>)
 80095f4:	675a      	str	r2, [r3, #116]	; 0x74
 80095f6:	e002      	b.n	80095fe <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	4a2c      	ldr	r2, [pc, #176]	; (80096ac <HAL_UART_Transmit_IT+0x144>)
 80095fc:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	3308      	adds	r3, #8
 800960c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009610:	e853 3f00 	ldrex	r3, [r3]
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800961c:	63bb      	str	r3, [r7, #56]	; 0x38
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	3308      	adds	r3, #8
 8009624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009626:	637a      	str	r2, [r7, #52]	; 0x34
 8009628:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800962c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800962e:	e841 2300 	strex	r3, r2, [r1]
 8009632:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009636:	2b00      	cmp	r3, #0
 8009638:	d1e5      	bne.n	8009606 <HAL_UART_Transmit_IT+0x9e>
 800963a:	e02c      	b.n	8009696 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009644:	d107      	bne.n	8009656 <HAL_UART_Transmit_IT+0xee>
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	691b      	ldr	r3, [r3, #16]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d103      	bne.n	8009656 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4a17      	ldr	r2, [pc, #92]	; (80096b0 <HAL_UART_Transmit_IT+0x148>)
 8009652:	675a      	str	r2, [r3, #116]	; 0x74
 8009654:	e002      	b.n	800965c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	4a16      	ldr	r2, [pc, #88]	; (80096b4 <HAL_UART_Transmit_IT+0x14c>)
 800965a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	2200      	movs	r2, #0
 8009660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	e853 3f00 	ldrex	r3, [r3]
 8009670:	613b      	str	r3, [r7, #16]
   return(result);
 8009672:	693b      	ldr	r3, [r7, #16]
 8009674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009678:	63fb      	str	r3, [r7, #60]	; 0x3c
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	461a      	mov	r2, r3
 8009680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009682:	623b      	str	r3, [r7, #32]
 8009684:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009686:	69f9      	ldr	r1, [r7, #28]
 8009688:	6a3a      	ldr	r2, [r7, #32]
 800968a:	e841 2300 	strex	r3, r2, [r1]
 800968e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1e6      	bne.n	8009664 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8009696:	2300      	movs	r3, #0
 8009698:	e000      	b.n	800969c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800969a:	2302      	movs	r3, #2
  }
}
 800969c:	4618      	mov	r0, r3
 800969e:	3744      	adds	r7, #68	; 0x44
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr
 80096a8:	0800a969 	.word	0x0800a969
 80096ac:	0800a889 	.word	0x0800a889
 80096b0:	0800a7c7 	.word	0x0800a7c7
 80096b4:	0800a70f 	.word	0x0800a70f

080096b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b0ba      	sub	sp, #232	; 0xe8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80096e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80096e6:	4013      	ands	r3, r2
 80096e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80096ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d11b      	bne.n	800972c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f8:	f003 0320 	and.w	r3, r3, #32
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d015      	beq.n	800972c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009704:	f003 0320 	and.w	r3, r3, #32
 8009708:	2b00      	cmp	r3, #0
 800970a:	d105      	bne.n	8009718 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800970c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009714:	2b00      	cmp	r3, #0
 8009716:	d009      	beq.n	800972c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971c:	2b00      	cmp	r3, #0
 800971e:	f000 82d6 	beq.w	8009cce <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	4798      	blx	r3
      }
      return;
 800972a:	e2d0      	b.n	8009cce <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800972c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 811f 	beq.w	8009974 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009736:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800973a:	4b8b      	ldr	r3, [pc, #556]	; (8009968 <HAL_UART_IRQHandler+0x2b0>)
 800973c:	4013      	ands	r3, r2
 800973e:	2b00      	cmp	r3, #0
 8009740:	d106      	bne.n	8009750 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009742:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009746:	4b89      	ldr	r3, [pc, #548]	; (800996c <HAL_UART_IRQHandler+0x2b4>)
 8009748:	4013      	ands	r3, r2
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 8112 	beq.w	8009974 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009754:	f003 0301 	and.w	r3, r3, #1
 8009758:	2b00      	cmp	r3, #0
 800975a:	d011      	beq.n	8009780 <HAL_UART_IRQHandler+0xc8>
 800975c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009764:	2b00      	cmp	r3, #0
 8009766:	d00b      	beq.n	8009780 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2201      	movs	r2, #1
 800976e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009776:	f043 0201 	orr.w	r2, r3, #1
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009784:	f003 0302 	and.w	r3, r3, #2
 8009788:	2b00      	cmp	r3, #0
 800978a:	d011      	beq.n	80097b0 <HAL_UART_IRQHandler+0xf8>
 800978c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009790:	f003 0301 	and.w	r3, r3, #1
 8009794:	2b00      	cmp	r3, #0
 8009796:	d00b      	beq.n	80097b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2202      	movs	r2, #2
 800979e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097a6:	f043 0204 	orr.w	r2, r3, #4
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b4:	f003 0304 	and.w	r3, r3, #4
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d011      	beq.n	80097e0 <HAL_UART_IRQHandler+0x128>
 80097bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00b      	beq.n	80097e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2204      	movs	r2, #4
 80097ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d6:	f043 0202 	orr.w	r2, r3, #2
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097e4:	f003 0308 	and.w	r3, r3, #8
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d017      	beq.n	800981c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d105      	bne.n	8009804 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80097f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80097fc:	4b5a      	ldr	r3, [pc, #360]	; (8009968 <HAL_UART_IRQHandler+0x2b0>)
 80097fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009800:	2b00      	cmp	r3, #0
 8009802:	d00b      	beq.n	800981c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2208      	movs	r2, #8
 800980a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009812:	f043 0208 	orr.w	r2, r3, #8
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800981c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009824:	2b00      	cmp	r3, #0
 8009826:	d012      	beq.n	800984e <HAL_UART_IRQHandler+0x196>
 8009828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800982c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00c      	beq.n	800984e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800983c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009844:	f043 0220 	orr.w	r2, r3, #32
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009854:	2b00      	cmp	r3, #0
 8009856:	f000 823c 	beq.w	8009cd2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800985a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800985e:	f003 0320 	and.w	r3, r3, #32
 8009862:	2b00      	cmp	r3, #0
 8009864:	d013      	beq.n	800988e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009866:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800986a:	f003 0320 	and.w	r3, r3, #32
 800986e:	2b00      	cmp	r3, #0
 8009870:	d105      	bne.n	800987e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009872:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800987a:	2b00      	cmp	r3, #0
 800987c:	d007      	beq.n	800988e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009882:	2b00      	cmp	r3, #0
 8009884:	d003      	beq.n	800988e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009894:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	689b      	ldr	r3, [r3, #8]
 800989e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a2:	2b40      	cmp	r3, #64	; 0x40
 80098a4:	d005      	beq.n	80098b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80098aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d04f      	beq.n	8009952 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 feaf 	bl	800a616 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c2:	2b40      	cmp	r3, #64	; 0x40
 80098c4:	d141      	bne.n	800994a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	3308      	adds	r3, #8
 80098cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098d4:	e853 3f00 	ldrex	r3, [r3]
 80098d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80098dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80098e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3308      	adds	r3, #8
 80098ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80098f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80098f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80098fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009902:	e841 2300 	strex	r3, r2, [r1]
 8009906:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800990a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1d9      	bne.n	80098c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d013      	beq.n	8009942 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800991e:	4a14      	ldr	r2, [pc, #80]	; (8009970 <HAL_UART_IRQHandler+0x2b8>)
 8009920:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009926:	4618      	mov	r0, r3
 8009928:	f7fc fc32 	bl	8006190 <HAL_DMA_Abort_IT>
 800992c:	4603      	mov	r3, r0
 800992e:	2b00      	cmp	r3, #0
 8009930:	d017      	beq.n	8009962 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800993c:	4610      	mov	r0, r2
 800993e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009940:	e00f      	b.n	8009962 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f9d0 	bl	8009ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009948:	e00b      	b.n	8009962 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 f9cc 	bl	8009ce8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009950:	e007      	b.n	8009962 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f9c8 	bl	8009ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2200      	movs	r2, #0
 800995c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009960:	e1b7      	b.n	8009cd2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009962:	bf00      	nop
    return;
 8009964:	e1b5      	b.n	8009cd2 <HAL_UART_IRQHandler+0x61a>
 8009966:	bf00      	nop
 8009968:	10000001 	.word	0x10000001
 800996c:	04000120 	.word	0x04000120
 8009970:	0800a6e3 	.word	0x0800a6e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009978:	2b01      	cmp	r3, #1
 800997a:	f040 814a 	bne.w	8009c12 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800997e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009982:	f003 0310 	and.w	r3, r3, #16
 8009986:	2b00      	cmp	r3, #0
 8009988:	f000 8143 	beq.w	8009c12 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800998c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009990:	f003 0310 	and.w	r3, r3, #16
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 813c 	beq.w	8009c12 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	2210      	movs	r2, #16
 80099a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ac:	2b40      	cmp	r3, #64	; 0x40
 80099ae:	f040 80b5 	bne.w	8009b1c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80099be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 8187 	beq.w	8009cd6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80099ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099d2:	429a      	cmp	r2, r3
 80099d4:	f080 817f 	bcs.w	8009cd6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80099de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f003 0320 	and.w	r3, r3, #32
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f040 8086 	bne.w	8009b00 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a00:	e853 3f00 	ldrex	r3, [r3]
 8009a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	461a      	mov	r2, r3
 8009a1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009a1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009a22:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009a2e:	e841 2300 	strex	r3, r2, [r1]
 8009a32:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d1da      	bne.n	80099f4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	3308      	adds	r3, #8
 8009a44:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a48:	e853 3f00 	ldrex	r3, [r3]
 8009a4c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009a4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009a50:	f023 0301 	bic.w	r3, r3, #1
 8009a54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	3308      	adds	r3, #8
 8009a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a62:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a66:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a68:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e1      	bne.n	8009a3e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a90:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	3308      	adds	r3, #8
 8009a9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a9e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009aa0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aa2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009aa4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009aa6:	e841 2300 	strex	r3, r2, [r1]
 8009aaa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009aac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1e3      	bne.n	8009a7a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2220      	movs	r2, #32
 8009ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac8:	e853 3f00 	ldrex	r3, [r3]
 8009acc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009ace:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ad0:	f023 0310 	bic.w	r3, r3, #16
 8009ad4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	461a      	mov	r2, r3
 8009ade:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ae2:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ae4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ae8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d1e4      	bne.n	8009ac0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7fc faef 	bl	80060de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b0c:	b29b      	uxth	r3, r3
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	b29b      	uxth	r3, r3
 8009b12:	4619      	mov	r1, r3
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	f000 f8f1 	bl	8009cfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009b1a:	e0dc      	b.n	8009cd6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f000 80ce 	beq.w	8009cda <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009b3e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 80c9 	beq.w	8009cda <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b50:	e853 3f00 	ldrex	r3, [r3]
 8009b54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b58:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b5c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	461a      	mov	r2, r3
 8009b66:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b6a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b6c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b6e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b72:	e841 2300 	strex	r3, r2, [r1]
 8009b76:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d1e4      	bne.n	8009b48 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	3308      	adds	r3, #8
 8009b84:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	e853 3f00 	ldrex	r3, [r3]
 8009b8c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b8e:	6a3b      	ldr	r3, [r7, #32]
 8009b90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b94:	f023 0301 	bic.w	r3, r3, #1
 8009b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8009ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009bae:	e841 2300 	strex	r3, r2, [r1]
 8009bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e1      	bne.n	8009b7e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	e853 3f00 	ldrex	r3, [r3]
 8009bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f023 0310 	bic.w	r3, r3, #16
 8009be2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	461a      	mov	r2, r3
 8009bec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009bf0:	61fb      	str	r3, [r7, #28]
 8009bf2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf4:	69b9      	ldr	r1, [r7, #24]
 8009bf6:	69fa      	ldr	r2, [r7, #28]
 8009bf8:	e841 2300 	strex	r3, r2, [r1]
 8009bfc:	617b      	str	r3, [r7, #20]
   return(result);
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d1e4      	bne.n	8009bce <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009c04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c08:	4619      	mov	r1, r3
 8009c0a:	6878      	ldr	r0, [r7, #4]
 8009c0c:	f000 f876 	bl	8009cfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c10:	e063      	b.n	8009cda <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009c12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d00e      	beq.n	8009c3c <HAL_UART_IRQHandler+0x584>
 8009c1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d008      	beq.n	8009c3c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 ff37 	bl	800aaa8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c3a:	e051      	b.n	8009ce0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d014      	beq.n	8009c72 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d105      	bne.n	8009c60 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d008      	beq.n	8009c72 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d03a      	beq.n	8009cde <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c6c:	6878      	ldr	r0, [r7, #4]
 8009c6e:	4798      	blx	r3
    }
    return;
 8009c70:	e035      	b.n	8009cde <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d009      	beq.n	8009c92 <HAL_UART_IRQHandler+0x5da>
 8009c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d003      	beq.n	8009c92 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 fee1 	bl	800aa52 <UART_EndTransmit_IT>
    return;
 8009c90:	e026      	b.n	8009ce0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d009      	beq.n	8009cb2 <HAL_UART_IRQHandler+0x5fa>
 8009c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ca2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d003      	beq.n	8009cb2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	f000 ff10 	bl	800aad0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009cb0:	e016      	b.n	8009ce0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009cb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d010      	beq.n	8009ce0 <HAL_UART_IRQHandler+0x628>
 8009cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	da0c      	bge.n	8009ce0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 fef8 	bl	800aabc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ccc:	e008      	b.n	8009ce0 <HAL_UART_IRQHandler+0x628>
      return;
 8009cce:	bf00      	nop
 8009cd0:	e006      	b.n	8009ce0 <HAL_UART_IRQHandler+0x628>
    return;
 8009cd2:	bf00      	nop
 8009cd4:	e004      	b.n	8009ce0 <HAL_UART_IRQHandler+0x628>
      return;
 8009cd6:	bf00      	nop
 8009cd8:	e002      	b.n	8009ce0 <HAL_UART_IRQHandler+0x628>
      return;
 8009cda:	bf00      	nop
 8009cdc:	e000      	b.n	8009ce0 <HAL_UART_IRQHandler+0x628>
    return;
 8009cde:	bf00      	nop
  }
}
 8009ce0:	37e8      	adds	r7, #232	; 0xe8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop

08009ce8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ce8:	b480      	push	{r7}
 8009cea:	b083      	sub	sp, #12
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009cf0:	bf00      	nop
 8009cf2:	370c      	adds	r7, #12
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfa:	4770      	bx	lr

08009cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cfc:	b480      	push	{r7}
 8009cfe:	b083      	sub	sp, #12
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
 8009d04:	460b      	mov	r3, r1
 8009d06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009d08:	bf00      	nop
 8009d0a:	370c      	adds	r7, #12
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009d18:	b08c      	sub	sp, #48	; 0x30
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009d24:	697b      	ldr	r3, [r7, #20]
 8009d26:	689a      	ldr	r2, [r3, #8]
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	431a      	orrs	r2, r3
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	695b      	ldr	r3, [r3, #20]
 8009d32:	431a      	orrs	r2, r3
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	69db      	ldr	r3, [r3, #28]
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	4bab      	ldr	r3, [pc, #684]	; (8009ff0 <UART_SetConfig+0x2dc>)
 8009d44:	4013      	ands	r3, r2
 8009d46:	697a      	ldr	r2, [r7, #20]
 8009d48:	6812      	ldr	r2, [r2, #0]
 8009d4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d4c:	430b      	orrs	r3, r1
 8009d4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	685b      	ldr	r3, [r3, #4]
 8009d56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	68da      	ldr	r2, [r3, #12]
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	430a      	orrs	r2, r1
 8009d64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d66:	697b      	ldr	r3, [r7, #20]
 8009d68:	699b      	ldr	r3, [r3, #24]
 8009d6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4aa0      	ldr	r2, [pc, #640]	; (8009ff4 <UART_SetConfig+0x2e0>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d004      	beq.n	8009d80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d76:	697b      	ldr	r3, [r7, #20]
 8009d78:	6a1b      	ldr	r3, [r3, #32]
 8009d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009d7c:	4313      	orrs	r3, r2
 8009d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	689b      	ldr	r3, [r3, #8]
 8009d86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009d8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009d8e:	697a      	ldr	r2, [r7, #20]
 8009d90:	6812      	ldr	r2, [r2, #0]
 8009d92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d94:	430b      	orrs	r3, r1
 8009d96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	f023 010f 	bic.w	r1, r3, #15
 8009da2:	697b      	ldr	r3, [r7, #20]
 8009da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	430a      	orrs	r2, r1
 8009dac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009dae:	697b      	ldr	r3, [r7, #20]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a91      	ldr	r2, [pc, #580]	; (8009ff8 <UART_SetConfig+0x2e4>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d125      	bne.n	8009e04 <UART_SetConfig+0xf0>
 8009db8:	4b90      	ldr	r3, [pc, #576]	; (8009ffc <UART_SetConfig+0x2e8>)
 8009dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dbe:	f003 0303 	and.w	r3, r3, #3
 8009dc2:	2b03      	cmp	r3, #3
 8009dc4:	d81a      	bhi.n	8009dfc <UART_SetConfig+0xe8>
 8009dc6:	a201      	add	r2, pc, #4	; (adr r2, 8009dcc <UART_SetConfig+0xb8>)
 8009dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dcc:	08009ddd 	.word	0x08009ddd
 8009dd0:	08009ded 	.word	0x08009ded
 8009dd4:	08009de5 	.word	0x08009de5
 8009dd8:	08009df5 	.word	0x08009df5
 8009ddc:	2301      	movs	r3, #1
 8009dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009de2:	e0d6      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009de4:	2302      	movs	r3, #2
 8009de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dea:	e0d2      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009dec:	2304      	movs	r3, #4
 8009dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009df2:	e0ce      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009df4:	2308      	movs	r3, #8
 8009df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009dfa:	e0ca      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e02:	e0c6      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a7d      	ldr	r2, [pc, #500]	; (800a000 <UART_SetConfig+0x2ec>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d138      	bne.n	8009e80 <UART_SetConfig+0x16c>
 8009e0e:	4b7b      	ldr	r3, [pc, #492]	; (8009ffc <UART_SetConfig+0x2e8>)
 8009e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e14:	f003 030c 	and.w	r3, r3, #12
 8009e18:	2b0c      	cmp	r3, #12
 8009e1a:	d82d      	bhi.n	8009e78 <UART_SetConfig+0x164>
 8009e1c:	a201      	add	r2, pc, #4	; (adr r2, 8009e24 <UART_SetConfig+0x110>)
 8009e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e22:	bf00      	nop
 8009e24:	08009e59 	.word	0x08009e59
 8009e28:	08009e79 	.word	0x08009e79
 8009e2c:	08009e79 	.word	0x08009e79
 8009e30:	08009e79 	.word	0x08009e79
 8009e34:	08009e69 	.word	0x08009e69
 8009e38:	08009e79 	.word	0x08009e79
 8009e3c:	08009e79 	.word	0x08009e79
 8009e40:	08009e79 	.word	0x08009e79
 8009e44:	08009e61 	.word	0x08009e61
 8009e48:	08009e79 	.word	0x08009e79
 8009e4c:	08009e79 	.word	0x08009e79
 8009e50:	08009e79 	.word	0x08009e79
 8009e54:	08009e71 	.word	0x08009e71
 8009e58:	2300      	movs	r3, #0
 8009e5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e5e:	e098      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009e60:	2302      	movs	r3, #2
 8009e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e66:	e094      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009e68:	2304      	movs	r3, #4
 8009e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e6e:	e090      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009e70:	2308      	movs	r3, #8
 8009e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e76:	e08c      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009e78:	2310      	movs	r3, #16
 8009e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009e7e:	e088      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a5f      	ldr	r2, [pc, #380]	; (800a004 <UART_SetConfig+0x2f0>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d125      	bne.n	8009ed6 <UART_SetConfig+0x1c2>
 8009e8a:	4b5c      	ldr	r3, [pc, #368]	; (8009ffc <UART_SetConfig+0x2e8>)
 8009e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e94:	2b30      	cmp	r3, #48	; 0x30
 8009e96:	d016      	beq.n	8009ec6 <UART_SetConfig+0x1b2>
 8009e98:	2b30      	cmp	r3, #48	; 0x30
 8009e9a:	d818      	bhi.n	8009ece <UART_SetConfig+0x1ba>
 8009e9c:	2b20      	cmp	r3, #32
 8009e9e:	d00a      	beq.n	8009eb6 <UART_SetConfig+0x1a2>
 8009ea0:	2b20      	cmp	r3, #32
 8009ea2:	d814      	bhi.n	8009ece <UART_SetConfig+0x1ba>
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <UART_SetConfig+0x19a>
 8009ea8:	2b10      	cmp	r3, #16
 8009eaa:	d008      	beq.n	8009ebe <UART_SetConfig+0x1aa>
 8009eac:	e00f      	b.n	8009ece <UART_SetConfig+0x1ba>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009eb4:	e06d      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009eb6:	2302      	movs	r3, #2
 8009eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ebc:	e069      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009ebe:	2304      	movs	r3, #4
 8009ec0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ec4:	e065      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009ec6:	2308      	movs	r3, #8
 8009ec8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ecc:	e061      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009ece:	2310      	movs	r3, #16
 8009ed0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ed4:	e05d      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a4b      	ldr	r2, [pc, #300]	; (800a008 <UART_SetConfig+0x2f4>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d125      	bne.n	8009f2c <UART_SetConfig+0x218>
 8009ee0:	4b46      	ldr	r3, [pc, #280]	; (8009ffc <UART_SetConfig+0x2e8>)
 8009ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ee6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009eea:	2bc0      	cmp	r3, #192	; 0xc0
 8009eec:	d016      	beq.n	8009f1c <UART_SetConfig+0x208>
 8009eee:	2bc0      	cmp	r3, #192	; 0xc0
 8009ef0:	d818      	bhi.n	8009f24 <UART_SetConfig+0x210>
 8009ef2:	2b80      	cmp	r3, #128	; 0x80
 8009ef4:	d00a      	beq.n	8009f0c <UART_SetConfig+0x1f8>
 8009ef6:	2b80      	cmp	r3, #128	; 0x80
 8009ef8:	d814      	bhi.n	8009f24 <UART_SetConfig+0x210>
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d002      	beq.n	8009f04 <UART_SetConfig+0x1f0>
 8009efe:	2b40      	cmp	r3, #64	; 0x40
 8009f00:	d008      	beq.n	8009f14 <UART_SetConfig+0x200>
 8009f02:	e00f      	b.n	8009f24 <UART_SetConfig+0x210>
 8009f04:	2300      	movs	r3, #0
 8009f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f0a:	e042      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f12:	e03e      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009f14:	2304      	movs	r3, #4
 8009f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f1a:	e03a      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009f1c:	2308      	movs	r3, #8
 8009f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f22:	e036      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009f24:	2310      	movs	r3, #16
 8009f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f2a:	e032      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	4a30      	ldr	r2, [pc, #192]	; (8009ff4 <UART_SetConfig+0x2e0>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d12a      	bne.n	8009f8c <UART_SetConfig+0x278>
 8009f36:	4b31      	ldr	r3, [pc, #196]	; (8009ffc <UART_SetConfig+0x2e8>)
 8009f38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f44:	d01a      	beq.n	8009f7c <UART_SetConfig+0x268>
 8009f46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f4a:	d81b      	bhi.n	8009f84 <UART_SetConfig+0x270>
 8009f4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f50:	d00c      	beq.n	8009f6c <UART_SetConfig+0x258>
 8009f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f56:	d815      	bhi.n	8009f84 <UART_SetConfig+0x270>
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d003      	beq.n	8009f64 <UART_SetConfig+0x250>
 8009f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f60:	d008      	beq.n	8009f74 <UART_SetConfig+0x260>
 8009f62:	e00f      	b.n	8009f84 <UART_SetConfig+0x270>
 8009f64:	2300      	movs	r3, #0
 8009f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f6a:	e012      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009f6c:	2302      	movs	r3, #2
 8009f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f72:	e00e      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009f74:	2304      	movs	r3, #4
 8009f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f7a:	e00a      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009f7c:	2308      	movs	r3, #8
 8009f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f82:	e006      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009f84:	2310      	movs	r3, #16
 8009f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f8a:	e002      	b.n	8009f92 <UART_SetConfig+0x27e>
 8009f8c:	2310      	movs	r3, #16
 8009f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f92:	697b      	ldr	r3, [r7, #20]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a17      	ldr	r2, [pc, #92]	; (8009ff4 <UART_SetConfig+0x2e0>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	f040 80a8 	bne.w	800a0ee <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009fa2:	2b08      	cmp	r3, #8
 8009fa4:	d834      	bhi.n	800a010 <UART_SetConfig+0x2fc>
 8009fa6:	a201      	add	r2, pc, #4	; (adr r2, 8009fac <UART_SetConfig+0x298>)
 8009fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fac:	08009fd1 	.word	0x08009fd1
 8009fb0:	0800a011 	.word	0x0800a011
 8009fb4:	08009fd9 	.word	0x08009fd9
 8009fb8:	0800a011 	.word	0x0800a011
 8009fbc:	08009fdf 	.word	0x08009fdf
 8009fc0:	0800a011 	.word	0x0800a011
 8009fc4:	0800a011 	.word	0x0800a011
 8009fc8:	0800a011 	.word	0x0800a011
 8009fcc:	08009fe7 	.word	0x08009fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fd0:	f7fd fafa 	bl	80075c8 <HAL_RCC_GetPCLK1Freq>
 8009fd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009fd6:	e021      	b.n	800a01c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fd8:	4b0c      	ldr	r3, [pc, #48]	; (800a00c <UART_SetConfig+0x2f8>)
 8009fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009fdc:	e01e      	b.n	800a01c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fde:	f7fd fa85 	bl	80074ec <HAL_RCC_GetSysClockFreq>
 8009fe2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009fe4:	e01a      	b.n	800a01c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009fec:	e016      	b.n	800a01c <UART_SetConfig+0x308>
 8009fee:	bf00      	nop
 8009ff0:	cfff69f3 	.word	0xcfff69f3
 8009ff4:	40008000 	.word	0x40008000
 8009ff8:	40013800 	.word	0x40013800
 8009ffc:	40021000 	.word	0x40021000
 800a000:	40004400 	.word	0x40004400
 800a004:	40004800 	.word	0x40004800
 800a008:	40004c00 	.word	0x40004c00
 800a00c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800a010:	2300      	movs	r3, #0
 800a012:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a01a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a01e:	2b00      	cmp	r3, #0
 800a020:	f000 812a 	beq.w	800a278 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a028:	4a9e      	ldr	r2, [pc, #632]	; (800a2a4 <UART_SetConfig+0x590>)
 800a02a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a02e:	461a      	mov	r2, r3
 800a030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a032:	fbb3 f3f2 	udiv	r3, r3, r2
 800a036:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	4613      	mov	r3, r2
 800a03e:	005b      	lsls	r3, r3, #1
 800a040:	4413      	add	r3, r2
 800a042:	69ba      	ldr	r2, [r7, #24]
 800a044:	429a      	cmp	r2, r3
 800a046:	d305      	bcc.n	800a054 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a04e:	69ba      	ldr	r2, [r7, #24]
 800a050:	429a      	cmp	r2, r3
 800a052:	d903      	bls.n	800a05c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800a054:	2301      	movs	r3, #1
 800a056:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a05a:	e10d      	b.n	800a278 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a05e:	2200      	movs	r2, #0
 800a060:	60bb      	str	r3, [r7, #8]
 800a062:	60fa      	str	r2, [r7, #12]
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a068:	4a8e      	ldr	r2, [pc, #568]	; (800a2a4 <UART_SetConfig+0x590>)
 800a06a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a06e:	b29b      	uxth	r3, r3
 800a070:	2200      	movs	r2, #0
 800a072:	603b      	str	r3, [r7, #0]
 800a074:	607a      	str	r2, [r7, #4]
 800a076:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a07a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a07e:	f7f6 fe2b 	bl	8000cd8 <__aeabi_uldivmod>
 800a082:	4602      	mov	r2, r0
 800a084:	460b      	mov	r3, r1
 800a086:	4610      	mov	r0, r2
 800a088:	4619      	mov	r1, r3
 800a08a:	f04f 0200 	mov.w	r2, #0
 800a08e:	f04f 0300 	mov.w	r3, #0
 800a092:	020b      	lsls	r3, r1, #8
 800a094:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a098:	0202      	lsls	r2, r0, #8
 800a09a:	6979      	ldr	r1, [r7, #20]
 800a09c:	6849      	ldr	r1, [r1, #4]
 800a09e:	0849      	lsrs	r1, r1, #1
 800a0a0:	2000      	movs	r0, #0
 800a0a2:	460c      	mov	r4, r1
 800a0a4:	4605      	mov	r5, r0
 800a0a6:	eb12 0804 	adds.w	r8, r2, r4
 800a0aa:	eb43 0905 	adc.w	r9, r3, r5
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	469a      	mov	sl, r3
 800a0b6:	4693      	mov	fp, r2
 800a0b8:	4652      	mov	r2, sl
 800a0ba:	465b      	mov	r3, fp
 800a0bc:	4640      	mov	r0, r8
 800a0be:	4649      	mov	r1, r9
 800a0c0:	f7f6 fe0a 	bl	8000cd8 <__aeabi_uldivmod>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0d2:	d308      	bcc.n	800a0e6 <UART_SetConfig+0x3d2>
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a0da:	d204      	bcs.n	800a0e6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	6a3a      	ldr	r2, [r7, #32]
 800a0e2:	60da      	str	r2, [r3, #12]
 800a0e4:	e0c8      	b.n	800a278 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a0ec:	e0c4      	b.n	800a278 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	69db      	ldr	r3, [r3, #28]
 800a0f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a0f6:	d167      	bne.n	800a1c8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800a0f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	d828      	bhi.n	800a152 <UART_SetConfig+0x43e>
 800a100:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <UART_SetConfig+0x3f4>)
 800a102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a106:	bf00      	nop
 800a108:	0800a12d 	.word	0x0800a12d
 800a10c:	0800a135 	.word	0x0800a135
 800a110:	0800a13d 	.word	0x0800a13d
 800a114:	0800a153 	.word	0x0800a153
 800a118:	0800a143 	.word	0x0800a143
 800a11c:	0800a153 	.word	0x0800a153
 800a120:	0800a153 	.word	0x0800a153
 800a124:	0800a153 	.word	0x0800a153
 800a128:	0800a14b 	.word	0x0800a14b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a12c:	f7fd fa4c 	bl	80075c8 <HAL_RCC_GetPCLK1Freq>
 800a130:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a132:	e014      	b.n	800a15e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a134:	f7fd fa5e 	bl	80075f4 <HAL_RCC_GetPCLK2Freq>
 800a138:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a13a:	e010      	b.n	800a15e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a13c:	4b5a      	ldr	r3, [pc, #360]	; (800a2a8 <UART_SetConfig+0x594>)
 800a13e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a140:	e00d      	b.n	800a15e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a142:	f7fd f9d3 	bl	80074ec <HAL_RCC_GetSysClockFreq>
 800a146:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a148:	e009      	b.n	800a15e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a14a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a14e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a150:	e005      	b.n	800a15e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800a152:	2300      	movs	r3, #0
 800a154:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a156:	2301      	movs	r3, #1
 800a158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a15c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a15e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a160:	2b00      	cmp	r3, #0
 800a162:	f000 8089 	beq.w	800a278 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a166:	697b      	ldr	r3, [r7, #20]
 800a168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a16a:	4a4e      	ldr	r2, [pc, #312]	; (800a2a4 <UART_SetConfig+0x590>)
 800a16c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a170:	461a      	mov	r2, r3
 800a172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a174:	fbb3 f3f2 	udiv	r3, r3, r2
 800a178:	005a      	lsls	r2, r3, #1
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	085b      	lsrs	r3, r3, #1
 800a180:	441a      	add	r2, r3
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	fbb2 f3f3 	udiv	r3, r2, r3
 800a18a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a18c:	6a3b      	ldr	r3, [r7, #32]
 800a18e:	2b0f      	cmp	r3, #15
 800a190:	d916      	bls.n	800a1c0 <UART_SetConfig+0x4ac>
 800a192:	6a3b      	ldr	r3, [r7, #32]
 800a194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a198:	d212      	bcs.n	800a1c0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a19a:	6a3b      	ldr	r3, [r7, #32]
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	f023 030f 	bic.w	r3, r3, #15
 800a1a2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a1a4:	6a3b      	ldr	r3, [r7, #32]
 800a1a6:	085b      	lsrs	r3, r3, #1
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	f003 0307 	and.w	r3, r3, #7
 800a1ae:	b29a      	uxth	r2, r3
 800a1b0:	8bfb      	ldrh	r3, [r7, #30]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a1b6:	697b      	ldr	r3, [r7, #20]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	8bfa      	ldrh	r2, [r7, #30]
 800a1bc:	60da      	str	r2, [r3, #12]
 800a1be:	e05b      	b.n	800a278 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a1c0:	2301      	movs	r3, #1
 800a1c2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a1c6:	e057      	b.n	800a278 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a1c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a1cc:	2b08      	cmp	r3, #8
 800a1ce:	d828      	bhi.n	800a222 <UART_SetConfig+0x50e>
 800a1d0:	a201      	add	r2, pc, #4	; (adr r2, 800a1d8 <UART_SetConfig+0x4c4>)
 800a1d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1d6:	bf00      	nop
 800a1d8:	0800a1fd 	.word	0x0800a1fd
 800a1dc:	0800a205 	.word	0x0800a205
 800a1e0:	0800a20d 	.word	0x0800a20d
 800a1e4:	0800a223 	.word	0x0800a223
 800a1e8:	0800a213 	.word	0x0800a213
 800a1ec:	0800a223 	.word	0x0800a223
 800a1f0:	0800a223 	.word	0x0800a223
 800a1f4:	0800a223 	.word	0x0800a223
 800a1f8:	0800a21b 	.word	0x0800a21b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1fc:	f7fd f9e4 	bl	80075c8 <HAL_RCC_GetPCLK1Freq>
 800a200:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a202:	e014      	b.n	800a22e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a204:	f7fd f9f6 	bl	80075f4 <HAL_RCC_GetPCLK2Freq>
 800a208:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a20a:	e010      	b.n	800a22e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a20c:	4b26      	ldr	r3, [pc, #152]	; (800a2a8 <UART_SetConfig+0x594>)
 800a20e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a210:	e00d      	b.n	800a22e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a212:	f7fd f96b 	bl	80074ec <HAL_RCC_GetSysClockFreq>
 800a216:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a218:	e009      	b.n	800a22e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a21a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a21e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a220:	e005      	b.n	800a22e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a222:	2300      	movs	r3, #0
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a226:	2301      	movs	r3, #1
 800a228:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a22c:	bf00      	nop
    }

    if (pclk != 0U)
 800a22e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a230:	2b00      	cmp	r3, #0
 800a232:	d021      	beq.n	800a278 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a238:	4a1a      	ldr	r2, [pc, #104]	; (800a2a4 <UART_SetConfig+0x590>)
 800a23a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a23e:	461a      	mov	r2, r3
 800a240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a242:	fbb3 f2f2 	udiv	r2, r3, r2
 800a246:	697b      	ldr	r3, [r7, #20]
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	085b      	lsrs	r3, r3, #1
 800a24c:	441a      	add	r2, r3
 800a24e:	697b      	ldr	r3, [r7, #20]
 800a250:	685b      	ldr	r3, [r3, #4]
 800a252:	fbb2 f3f3 	udiv	r3, r2, r3
 800a256:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	2b0f      	cmp	r3, #15
 800a25c:	d909      	bls.n	800a272 <UART_SetConfig+0x55e>
 800a25e:	6a3b      	ldr	r3, [r7, #32]
 800a260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a264:	d205      	bcs.n	800a272 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a266:	6a3b      	ldr	r3, [r7, #32]
 800a268:	b29a      	uxth	r2, r3
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	60da      	str	r2, [r3, #12]
 800a270:	e002      	b.n	800a278 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a278:	697b      	ldr	r3, [r7, #20]
 800a27a:	2201      	movs	r2, #1
 800a27c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	2201      	movs	r2, #1
 800a284:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a288:	697b      	ldr	r3, [r7, #20]
 800a28a:	2200      	movs	r2, #0
 800a28c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2200      	movs	r2, #0
 800a292:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a294:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3730      	adds	r7, #48	; 0x30
 800a29c:	46bd      	mov	sp, r7
 800a29e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2a2:	bf00      	nop
 800a2a4:	0800ffcc 	.word	0x0800ffcc
 800a2a8:	00f42400 	.word	0x00f42400

0800a2ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b8:	f003 0301 	and.w	r3, r3, #1
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d00a      	beq.n	800a2d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	430a      	orrs	r2, r1
 800a2d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2da:	f003 0302 	and.w	r3, r3, #2
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d00a      	beq.n	800a2f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	430a      	orrs	r2, r1
 800a2f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2fc:	f003 0304 	and.w	r3, r3, #4
 800a300:	2b00      	cmp	r3, #0
 800a302:	d00a      	beq.n	800a31a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	430a      	orrs	r2, r1
 800a318:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31e:	f003 0308 	and.w	r3, r3, #8
 800a322:	2b00      	cmp	r3, #0
 800a324:	d00a      	beq.n	800a33c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	430a      	orrs	r2, r1
 800a33a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a340:	f003 0310 	and.w	r3, r3, #16
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00a      	beq.n	800a35e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	689b      	ldr	r3, [r3, #8]
 800a34e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	430a      	orrs	r2, r1
 800a35c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a362:	f003 0320 	and.w	r3, r3, #32
 800a366:	2b00      	cmp	r3, #0
 800a368:	d00a      	beq.n	800a380 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	689b      	ldr	r3, [r3, #8]
 800a370:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	430a      	orrs	r2, r1
 800a37e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d01a      	beq.n	800a3c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	430a      	orrs	r2, r1
 800a3a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3aa:	d10a      	bne.n	800a3c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	430a      	orrs	r2, r1
 800a3c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d00a      	beq.n	800a3e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	430a      	orrs	r2, r1
 800a3e2:	605a      	str	r2, [r3, #4]
  }
}
 800a3e4:	bf00      	nop
 800a3e6:	370c      	adds	r7, #12
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr

0800a3f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a3f0:	b580      	push	{r7, lr}
 800a3f2:	b086      	sub	sp, #24
 800a3f4:	af02      	add	r7, sp, #8
 800a3f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a400:	f7f9 fb6e 	bl	8003ae0 <HAL_GetTick>
 800a404:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 0308 	and.w	r3, r3, #8
 800a410:	2b08      	cmp	r3, #8
 800a412:	d10e      	bne.n	800a432 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a414:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	2200      	movs	r2, #0
 800a41e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f82f 	bl	800a486 <UART_WaitOnFlagUntilTimeout>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e025      	b.n	800a47e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0304 	and.w	r3, r3, #4
 800a43c:	2b04      	cmp	r3, #4
 800a43e:	d10e      	bne.n	800a45e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a440:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a444:	9300      	str	r3, [sp, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2200      	movs	r2, #0
 800a44a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f000 f819 	bl	800a486 <UART_WaitOnFlagUntilTimeout>
 800a454:	4603      	mov	r3, r0
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a45a:	2303      	movs	r3, #3
 800a45c:	e00f      	b.n	800a47e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2220      	movs	r2, #32
 800a462:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2220      	movs	r2, #32
 800a46a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2200      	movs	r2, #0
 800a472:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2200      	movs	r2, #0
 800a478:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3710      	adds	r7, #16
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}

0800a486 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b09c      	sub	sp, #112	; 0x70
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	60f8      	str	r0, [r7, #12]
 800a48e:	60b9      	str	r1, [r7, #8]
 800a490:	603b      	str	r3, [r7, #0]
 800a492:	4613      	mov	r3, r2
 800a494:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a496:	e0a9      	b.n	800a5ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a49a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a49e:	f000 80a5 	beq.w	800a5ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4a2:	f7f9 fb1d 	bl	8003ae0 <HAL_GetTick>
 800a4a6:	4602      	mov	r2, r0
 800a4a8:	683b      	ldr	r3, [r7, #0]
 800a4aa:	1ad3      	subs	r3, r2, r3
 800a4ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d302      	bcc.n	800a4b8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a4b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d140      	bne.n	800a53a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4c0:	e853 3f00 	ldrex	r3, [r3]
 800a4c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a4c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a4cc:	667b      	str	r3, [r7, #100]	; 0x64
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a4d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a4d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a4dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a4de:	e841 2300 	strex	r3, r2, [r1]
 800a4e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a4e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d1e6      	bne.n	800a4b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	3308      	adds	r3, #8
 800a4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f4:	e853 3f00 	ldrex	r3, [r3]
 800a4f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a4fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fc:	f023 0301 	bic.w	r3, r3, #1
 800a500:	663b      	str	r3, [r7, #96]	; 0x60
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	3308      	adds	r3, #8
 800a508:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a50a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a50c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a512:	e841 2300 	strex	r3, r2, [r1]
 800a516:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a518:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1e5      	bne.n	800a4ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	2220      	movs	r2, #32
 800a522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2220      	movs	r2, #32
 800a52a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a536:	2303      	movs	r3, #3
 800a538:	e069      	b.n	800a60e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	f003 0304 	and.w	r3, r3, #4
 800a544:	2b00      	cmp	r3, #0
 800a546:	d051      	beq.n	800a5ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	69db      	ldr	r3, [r3, #28]
 800a54e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a552:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a556:	d149      	bne.n	800a5ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a560:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56a:	e853 3f00 	ldrex	r3, [r3]
 800a56e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a576:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	461a      	mov	r2, r3
 800a57e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a580:	637b      	str	r3, [r7, #52]	; 0x34
 800a582:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a584:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a586:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a588:	e841 2300 	strex	r3, r2, [r1]
 800a58c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a58e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1e6      	bne.n	800a562 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	3308      	adds	r3, #8
 800a59a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	e853 3f00 	ldrex	r3, [r3]
 800a5a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	f023 0301 	bic.w	r3, r3, #1
 800a5aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	3308      	adds	r3, #8
 800a5b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a5b4:	623a      	str	r2, [r7, #32]
 800a5b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5b8:	69f9      	ldr	r1, [r7, #28]
 800a5ba:	6a3a      	ldr	r2, [r7, #32]
 800a5bc:	e841 2300 	strex	r3, r2, [r1]
 800a5c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a5c2:	69bb      	ldr	r3, [r7, #24]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d1e5      	bne.n	800a594 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2220      	movs	r2, #32
 800a5cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2220      	movs	r2, #32
 800a5d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2220      	movs	r2, #32
 800a5dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	e010      	b.n	800a60e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	69da      	ldr	r2, [r3, #28]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	4013      	ands	r3, r2
 800a5f6:	68ba      	ldr	r2, [r7, #8]
 800a5f8:	429a      	cmp	r2, r3
 800a5fa:	bf0c      	ite	eq
 800a5fc:	2301      	moveq	r3, #1
 800a5fe:	2300      	movne	r3, #0
 800a600:	b2db      	uxtb	r3, r3
 800a602:	461a      	mov	r2, r3
 800a604:	79fb      	ldrb	r3, [r7, #7]
 800a606:	429a      	cmp	r2, r3
 800a608:	f43f af46 	beq.w	800a498 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a60c:	2300      	movs	r3, #0
}
 800a60e:	4618      	mov	r0, r3
 800a610:	3770      	adds	r7, #112	; 0x70
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}

0800a616 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a616:	b480      	push	{r7}
 800a618:	b095      	sub	sp, #84	; 0x54
 800a61a:	af00      	add	r7, sp, #0
 800a61c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a626:	e853 3f00 	ldrex	r3, [r3]
 800a62a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a632:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	461a      	mov	r2, r3
 800a63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a63c:	643b      	str	r3, [r7, #64]	; 0x40
 800a63e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a640:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a644:	e841 2300 	strex	r3, r2, [r1]
 800a648:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a64a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d1e6      	bne.n	800a61e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	3308      	adds	r3, #8
 800a656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a658:	6a3b      	ldr	r3, [r7, #32]
 800a65a:	e853 3f00 	ldrex	r3, [r3]
 800a65e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a660:	69fb      	ldr	r3, [r7, #28]
 800a662:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a666:	f023 0301 	bic.w	r3, r3, #1
 800a66a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	3308      	adds	r3, #8
 800a672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a674:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a678:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a67a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a67c:	e841 2300 	strex	r3, r2, [r1]
 800a680:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1e3      	bne.n	800a650 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d118      	bne.n	800a6c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	e853 3f00 	ldrex	r3, [r3]
 800a69c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	f023 0310 	bic.w	r3, r3, #16
 800a6a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ae:	61bb      	str	r3, [r7, #24]
 800a6b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6b2:	6979      	ldr	r1, [r7, #20]
 800a6b4:	69ba      	ldr	r2, [r7, #24]
 800a6b6:	e841 2300 	strex	r3, r2, [r1]
 800a6ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d1e6      	bne.n	800a690 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2220      	movs	r2, #32
 800a6c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a6d6:	bf00      	nop
 800a6d8:	3754      	adds	r7, #84	; 0x54
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr

0800a6e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a6e2:	b580      	push	{r7, lr}
 800a6e4:	b084      	sub	sp, #16
 800a6e6:	af00      	add	r7, sp, #0
 800a6e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f7ff faf1 	bl	8009ce8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a706:	bf00      	nop
 800a708:	3710      	adds	r7, #16
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a70e:	b480      	push	{r7}
 800a710:	b08f      	sub	sp, #60	; 0x3c
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a71c:	2b21      	cmp	r3, #33	; 0x21
 800a71e:	d14c      	bne.n	800a7ba <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a726:	b29b      	uxth	r3, r3
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d132      	bne.n	800a792 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a732:	6a3b      	ldr	r3, [r7, #32]
 800a734:	e853 3f00 	ldrex	r3, [r3]
 800a738:	61fb      	str	r3, [r7, #28]
   return(result);
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a740:	637b      	str	r3, [r7, #52]	; 0x34
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	461a      	mov	r2, r3
 800a748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a74a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a74c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a752:	e841 2300 	strex	r3, r2, [r1]
 800a756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d1e6      	bne.n	800a72c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	e853 3f00 	ldrex	r3, [r3]
 800a76a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a772:	633b      	str	r3, [r7, #48]	; 0x30
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77c:	61bb      	str	r3, [r7, #24]
 800a77e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a780:	6979      	ldr	r1, [r7, #20]
 800a782:	69ba      	ldr	r2, [r7, #24]
 800a784:	e841 2300 	strex	r3, r2, [r1]
 800a788:	613b      	str	r3, [r7, #16]
   return(result);
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d1e6      	bne.n	800a75e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a790:	e013      	b.n	800a7ba <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a796:	781a      	ldrb	r2, [r3, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7a2:	1c5a      	adds	r2, r3, #1
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	3b01      	subs	r3, #1
 800a7b2:	b29a      	uxth	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a7ba:	bf00      	nop
 800a7bc:	373c      	adds	r7, #60	; 0x3c
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b091      	sub	sp, #68	; 0x44
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a7d4:	2b21      	cmp	r3, #33	; 0x21
 800a7d6:	d151      	bne.n	800a87c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a7de:	b29b      	uxth	r3, r3
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d132      	bne.n	800a84a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ec:	e853 3f00 	ldrex	r3, [r3]
 800a7f0:	623b      	str	r3, [r7, #32]
   return(result);
 800a7f2:	6a3b      	ldr	r3, [r7, #32]
 800a7f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	461a      	mov	r2, r3
 800a800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a802:	633b      	str	r3, [r7, #48]	; 0x30
 800a804:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a80a:	e841 2300 	strex	r3, r2, [r1]
 800a80e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a812:	2b00      	cmp	r3, #0
 800a814:	d1e6      	bne.n	800a7e4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a81c:	693b      	ldr	r3, [r7, #16]
 800a81e:	e853 3f00 	ldrex	r3, [r3]
 800a822:	60fb      	str	r3, [r7, #12]
   return(result);
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a82a:	637b      	str	r3, [r7, #52]	; 0x34
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	461a      	mov	r2, r3
 800a832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a834:	61fb      	str	r3, [r7, #28]
 800a836:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a838:	69b9      	ldr	r1, [r7, #24]
 800a83a:	69fa      	ldr	r2, [r7, #28]
 800a83c:	e841 2300 	strex	r3, r2, [r1]
 800a840:	617b      	str	r3, [r7, #20]
   return(result);
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d1e6      	bne.n	800a816 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a848:	e018      	b.n	800a87c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a84e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a852:	881b      	ldrh	r3, [r3, #0]
 800a854:	461a      	mov	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a85e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a864:	1c9a      	adds	r2, r3, #2
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a870:	b29b      	uxth	r3, r3
 800a872:	3b01      	subs	r3, #1
 800a874:	b29a      	uxth	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a87c:	bf00      	nop
 800a87e:	3744      	adds	r7, #68	; 0x44
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a888:	b480      	push	{r7}
 800a88a:	b091      	sub	sp, #68	; 0x44
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a896:	2b21      	cmp	r3, #33	; 0x21
 800a898:	d160      	bne.n	800a95c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a8a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a8a2:	e057      	b.n	800a954 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a8aa:	b29b      	uxth	r3, r3
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d133      	bne.n	800a918 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	3308      	adds	r3, #8
 800a8b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ba:	e853 3f00 	ldrex	r3, [r3]
 800a8be:	623b      	str	r3, [r7, #32]
   return(result);
 800a8c0:	6a3b      	ldr	r3, [r7, #32]
 800a8c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a8c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	3308      	adds	r3, #8
 800a8ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a8d0:	633a      	str	r2, [r7, #48]	; 0x30
 800a8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8d8:	e841 2300 	strex	r3, r2, [r1]
 800a8dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d1e5      	bne.n	800a8b0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	e853 3f00 	ldrex	r3, [r3]
 800a8f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	461a      	mov	r2, r3
 800a900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a902:	61fb      	str	r3, [r7, #28]
 800a904:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a906:	69b9      	ldr	r1, [r7, #24]
 800a908:	69fa      	ldr	r2, [r7, #28]
 800a90a:	e841 2300 	strex	r3, r2, [r1]
 800a90e:	617b      	str	r3, [r7, #20]
   return(result);
 800a910:	697b      	ldr	r3, [r7, #20]
 800a912:	2b00      	cmp	r3, #0
 800a914:	d1e6      	bne.n	800a8e4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a916:	e021      	b.n	800a95c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	69db      	ldr	r3, [r3, #28]
 800a91e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a922:	2b00      	cmp	r3, #0
 800a924:	d013      	beq.n	800a94e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a92a:	781a      	ldrb	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a936:	1c5a      	adds	r2, r3, #1
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a942:	b29b      	uxth	r3, r3
 800a944:	3b01      	subs	r3, #1
 800a946:	b29a      	uxth	r2, r3
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a94e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a950:	3b01      	subs	r3, #1
 800a952:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a954:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1a4      	bne.n	800a8a4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a95a:	e7ff      	b.n	800a95c <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a95c:	bf00      	nop
 800a95e:	3744      	adds	r7, #68	; 0x44
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a968:	b480      	push	{r7}
 800a96a:	b091      	sub	sp, #68	; 0x44
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a976:	2b21      	cmp	r3, #33	; 0x21
 800a978:	d165      	bne.n	800aa46 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a980:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a982:	e05c      	b.n	800aa3e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a98a:	b29b      	uxth	r3, r3
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d133      	bne.n	800a9f8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	3308      	adds	r3, #8
 800a996:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a998:	6a3b      	ldr	r3, [r7, #32]
 800a99a:	e853 3f00 	ldrex	r3, [r3]
 800a99e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a9a0:	69fb      	ldr	r3, [r7, #28]
 800a9a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a9a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	3308      	adds	r3, #8
 800a9ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a9b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9b8:	e841 2300 	strex	r3, r2, [r1]
 800a9bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d1e5      	bne.n	800a990 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	e853 3f00 	ldrex	r3, [r3]
 800a9d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9d8:	633b      	str	r3, [r7, #48]	; 0x30
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	461a      	mov	r2, r3
 800a9e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9e2:	61bb      	str	r3, [r7, #24]
 800a9e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9e6:	6979      	ldr	r1, [r7, #20]
 800a9e8:	69ba      	ldr	r2, [r7, #24]
 800a9ea:	e841 2300 	strex	r3, r2, [r1]
 800a9ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d1e6      	bne.n	800a9c4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a9f6:	e026      	b.n	800aa46 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	69db      	ldr	r3, [r3, #28]
 800a9fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d018      	beq.n	800aa38 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa0a:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800aa0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa0e:	881b      	ldrh	r3, [r3, #0]
 800aa10:	461a      	mov	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800aa1a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa20:	1c9a      	adds	r2, r3, #2
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800aa38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa3a:	3b01      	subs	r3, #1
 800aa3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800aa3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d19f      	bne.n	800a984 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800aa44:	e7ff      	b.n	800aa46 <UART_TxISR_16BIT_FIFOEN+0xde>
 800aa46:	bf00      	nop
 800aa48:	3744      	adds	r7, #68	; 0x44
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa50:	4770      	bx	lr

0800aa52 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b088      	sub	sp, #32
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	e853 3f00 	ldrex	r3, [r3]
 800aa66:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa6e:	61fb      	str	r3, [r7, #28]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	461a      	mov	r2, r3
 800aa76:	69fb      	ldr	r3, [r7, #28]
 800aa78:	61bb      	str	r3, [r7, #24]
 800aa7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa7c:	6979      	ldr	r1, [r7, #20]
 800aa7e:	69ba      	ldr	r2, [r7, #24]
 800aa80:	e841 2300 	strex	r3, r2, [r1]
 800aa84:	613b      	str	r3, [r7, #16]
   return(result);
 800aa86:	693b      	ldr	r3, [r7, #16]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d1e6      	bne.n	800aa5a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2220      	movs	r2, #32
 800aa90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f7f6 fa9a 	bl	8000fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaa0:	bf00      	nop
 800aaa2:	3720      	adds	r7, #32
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b083      	sub	sp, #12
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aab0:	bf00      	nop
 800aab2:	370c      	adds	r7, #12
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aad8:	bf00      	nop
 800aada:	370c      	adds	r7, #12
 800aadc:	46bd      	mov	sp, r7
 800aade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae2:	4770      	bx	lr

0800aae4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aaf2:	2b01      	cmp	r3, #1
 800aaf4:	d101      	bne.n	800aafa <HAL_UARTEx_DisableFifoMode+0x16>
 800aaf6:	2302      	movs	r3, #2
 800aaf8:	e027      	b.n	800ab4a <HAL_UARTEx_DisableFifoMode+0x66>
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2201      	movs	r2, #1
 800aafe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2224      	movs	r2, #36	; 0x24
 800ab06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	681a      	ldr	r2, [r3, #0]
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	f022 0201 	bic.w	r2, r2, #1
 800ab20:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ab28:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	68fa      	ldr	r2, [r7, #12]
 800ab36:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2220      	movs	r2, #32
 800ab3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab48:	2300      	movs	r3, #0
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3714      	adds	r7, #20
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab54:	4770      	bx	lr

0800ab56 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab56:	b580      	push	{r7, lr}
 800ab58:	b084      	sub	sp, #16
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
 800ab5e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d101      	bne.n	800ab6e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ab6a:	2302      	movs	r3, #2
 800ab6c:	e02d      	b.n	800abca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2224      	movs	r2, #36	; 0x24
 800ab7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681a      	ldr	r2, [r3, #0]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f022 0201 	bic.w	r2, r2, #1
 800ab94:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 f850 	bl	800ac50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2220      	movs	r2, #32
 800abbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2200      	movs	r2, #0
 800abc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}

0800abd2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b084      	sub	sp, #16
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abe2:	2b01      	cmp	r3, #1
 800abe4:	d101      	bne.n	800abea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800abe6:	2302      	movs	r3, #2
 800abe8:	e02d      	b.n	800ac46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2201      	movs	r2, #1
 800abee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	2224      	movs	r2, #36	; 0x24
 800abf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f022 0201 	bic.w	r2, r2, #1
 800ac10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	683a      	ldr	r2, [r7, #0]
 800ac22:	430a      	orrs	r2, r1
 800ac24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 f812 	bl	800ac50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2220      	movs	r2, #32
 800ac38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac44:	2300      	movs	r3, #0
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3710      	adds	r7, #16
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	bd80      	pop	{r7, pc}
	...

0800ac50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d108      	bne.n	800ac72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2201      	movs	r2, #1
 800ac64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ac70:	e031      	b.n	800acd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ac72:	2308      	movs	r3, #8
 800ac74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ac76:	2308      	movs	r3, #8
 800ac78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	0e5b      	lsrs	r3, r3, #25
 800ac82:	b2db      	uxtb	r3, r3
 800ac84:	f003 0307 	and.w	r3, r3, #7
 800ac88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	689b      	ldr	r3, [r3, #8]
 800ac90:	0f5b      	lsrs	r3, r3, #29
 800ac92:	b2db      	uxtb	r3, r3
 800ac94:	f003 0307 	and.w	r3, r3, #7
 800ac98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	7b3a      	ldrb	r2, [r7, #12]
 800ac9e:	4911      	ldr	r1, [pc, #68]	; (800ace4 <UARTEx_SetNbDataToProcess+0x94>)
 800aca0:	5c8a      	ldrb	r2, [r1, r2]
 800aca2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aca6:	7b3a      	ldrb	r2, [r7, #12]
 800aca8:	490f      	ldr	r1, [pc, #60]	; (800ace8 <UARTEx_SetNbDataToProcess+0x98>)
 800acaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800acac:	fb93 f3f2 	sdiv	r3, r3, r2
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acb8:	7bfb      	ldrb	r3, [r7, #15]
 800acba:	7b7a      	ldrb	r2, [r7, #13]
 800acbc:	4909      	ldr	r1, [pc, #36]	; (800ace4 <UARTEx_SetNbDataToProcess+0x94>)
 800acbe:	5c8a      	ldrb	r2, [r1, r2]
 800acc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800acc4:	7b7a      	ldrb	r2, [r7, #13]
 800acc6:	4908      	ldr	r1, [pc, #32]	; (800ace8 <UARTEx_SetNbDataToProcess+0x98>)
 800acc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acca:	fb93 f3f2 	sdiv	r3, r3, r2
 800acce:	b29a      	uxth	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800acd6:	bf00      	nop
 800acd8:	3714      	adds	r7, #20
 800acda:	46bd      	mov	sp, r7
 800acdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace0:	4770      	bx	lr
 800ace2:	bf00      	nop
 800ace4:	0800ffe4 	.word	0x0800ffe4
 800ace8:	0800ffec 	.word	0x0800ffec

0800acec <SPI4W_Write_Byte>:
		Gpio analog SPI
	I2C_Write_Byte(value, cmd):
		HAL library hardware I2C
********************************************************************************/
uint8_t SPI4W_Write_Byte(uint8_t value)
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	4603      	mov	r3, r0
 800acf4:	71fb      	strb	r3, [r7, #7]
        SPI_SCK_1;
        Driver_Delay_us(10);
        value = (value << 1);
    }
#else
    __HAL_SPI_ENABLE(&hspi1);
 800acf6:	4b17      	ldr	r3, [pc, #92]	; (800ad54 <SPI4W_Write_Byte+0x68>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	4b15      	ldr	r3, [pc, #84]	; (800ad54 <SPI4W_Write_Byte+0x68>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ad04:	601a      	str	r2, [r3, #0]
    SPI1->CR2 |= (1) << 12;
 800ad06:	4b14      	ldr	r3, [pc, #80]	; (800ad58 <SPI4W_Write_Byte+0x6c>)
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	4a13      	ldr	r2, [pc, #76]	; (800ad58 <SPI4W_Write_Byte+0x6c>)
 800ad0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ad10:	6053      	str	r3, [r2, #4]

    while((SPI1->SR & (1 << 1)) == 0)
 800ad12:	bf00      	nop
 800ad14:	4b10      	ldr	r3, [pc, #64]	; (800ad58 <SPI4W_Write_Byte+0x6c>)
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	f003 0302 	and.w	r3, r3, #2
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d0f9      	beq.n	800ad14 <SPI4W_Write_Byte+0x28>
        ;

    *((__IO uint8_t *)(&SPI1->DR)) = value;
 800ad20:	4a0e      	ldr	r2, [pc, #56]	; (800ad5c <SPI4W_Write_Byte+0x70>)
 800ad22:	79fb      	ldrb	r3, [r7, #7]
 800ad24:	7013      	strb	r3, [r2, #0]

    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 800ad26:	bf00      	nop
 800ad28:	4b0b      	ldr	r3, [pc, #44]	; (800ad58 <SPI4W_Write_Byte+0x6c>)
 800ad2a:	689b      	ldr	r3, [r3, #8]
 800ad2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d1f9      	bne.n	800ad28 <SPI4W_Write_Byte+0x3c>

    while((SPI1->SR & (1 << 0)) == 0) ; // Wait for the receiving area to be empty
 800ad34:	bf00      	nop
 800ad36:	4b08      	ldr	r3, [pc, #32]	; (800ad58 <SPI4W_Write_Byte+0x6c>)
 800ad38:	689b      	ldr	r3, [r3, #8]
 800ad3a:	f003 0301 	and.w	r3, r3, #1
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d0f9      	beq.n	800ad36 <SPI4W_Write_Byte+0x4a>

    return *((__IO uint8_t *)(&SPI1->DR));
 800ad42:	4b06      	ldr	r3, [pc, #24]	; (800ad5c <SPI4W_Write_Byte+0x70>)
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	b2db      	uxtb	r3, r3
#endif
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	20000b3c 	.word	0x20000b3c
 800ad58:	40013000 	.word	0x40013000
 800ad5c:	4001300c 	.word	0x4001300c

0800ad60 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b082      	sub	sp, #8
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7f8 fec5 	bl	8003af8 <HAL_Delay>
}
 800ad6e:	bf00      	nop
 800ad70:	3708      	adds	r7, #8
 800ad72:	46bd      	mov	sp, r7
 800ad74:	bd80      	pop	{r7, pc}
	...

0800ad78 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b085      	sub	sp, #20
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	60f8      	str	r0, [r7, #12]
 800ad80:	4608      	mov	r0, r1
 800ad82:	4611      	mov	r1, r2
 800ad84:	461a      	mov	r2, r3
 800ad86:	4603      	mov	r3, r0
 800ad88:	817b      	strh	r3, [r7, #10]
 800ad8a:	460b      	mov	r3, r1
 800ad8c:	813b      	strh	r3, [r7, #8]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 800ad92:	4b23      	ldr	r3, [pc, #140]	; (800ae20 <Paint_NewImage+0xa8>)
 800ad94:	2200      	movs	r2, #0
 800ad96:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800ad98:	4a21      	ldr	r2, [pc, #132]	; (800ae20 <Paint_NewImage+0xa8>)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 800ad9e:	4a20      	ldr	r2, [pc, #128]	; (800ae20 <Paint_NewImage+0xa8>)
 800ada0:	897b      	ldrh	r3, [r7, #10]
 800ada2:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800ada4:	4a1e      	ldr	r2, [pc, #120]	; (800ae20 <Paint_NewImage+0xa8>)
 800ada6:	893b      	ldrh	r3, [r7, #8]
 800ada8:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800adaa:	4a1d      	ldr	r2, [pc, #116]	; (800ae20 <Paint_NewImage+0xa8>)
 800adac:	8b3b      	ldrh	r3, [r7, #24]
 800adae:	8193      	strh	r3, [r2, #12]
		Paint.Scale = 2;
 800adb0:	4b1b      	ldr	r3, [pc, #108]	; (800ae20 <Paint_NewImage+0xa8>)
 800adb2:	2202      	movs	r2, #2
 800adb4:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800adb6:	897b      	ldrh	r3, [r7, #10]
 800adb8:	f003 0307 	and.w	r3, r3, #7
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d103      	bne.n	800adca <Paint_NewImage+0x52>
 800adc2:	897b      	ldrh	r3, [r7, #10]
 800adc4:	08db      	lsrs	r3, r3, #3
 800adc6:	b29b      	uxth	r3, r3
 800adc8:	e004      	b.n	800add4 <Paint_NewImage+0x5c>
 800adca:	897b      	ldrh	r3, [r7, #10]
 800adcc:	08db      	lsrs	r3, r3, #3
 800adce:	b29b      	uxth	r3, r3
 800add0:	3301      	adds	r3, #1
 800add2:	b29b      	uxth	r3, r3
 800add4:	4a12      	ldr	r2, [pc, #72]	; (800ae20 <Paint_NewImage+0xa8>)
 800add6:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800add8:	4a11      	ldr	r2, [pc, #68]	; (800ae20 <Paint_NewImage+0xa8>)
 800adda:	893b      	ldrh	r3, [r7, #8]
 800addc:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800adde:	4a10      	ldr	r2, [pc, #64]	; (800ae20 <Paint_NewImage+0xa8>)
 800ade0:	88fb      	ldrh	r3, [r7, #6]
 800ade2:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800ade4:	4b0e      	ldr	r3, [pc, #56]	; (800ae20 <Paint_NewImage+0xa8>)
 800ade6:	2200      	movs	r2, #0
 800ade8:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800adea:	88fb      	ldrh	r3, [r7, #6]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d002      	beq.n	800adf6 <Paint_NewImage+0x7e>
 800adf0:	88fb      	ldrh	r3, [r7, #6]
 800adf2:	2bb4      	cmp	r3, #180	; 0xb4
 800adf4:	d106      	bne.n	800ae04 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800adf6:	4a0a      	ldr	r2, [pc, #40]	; (800ae20 <Paint_NewImage+0xa8>)
 800adf8:	897b      	ldrh	r3, [r7, #10]
 800adfa:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800adfc:	4a08      	ldr	r2, [pc, #32]	; (800ae20 <Paint_NewImage+0xa8>)
 800adfe:	893b      	ldrh	r3, [r7, #8]
 800ae00:	80d3      	strh	r3, [r2, #6]
 800ae02:	e006      	b.n	800ae12 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 800ae04:	4a06      	ldr	r2, [pc, #24]	; (800ae20 <Paint_NewImage+0xa8>)
 800ae06:	893b      	ldrh	r3, [r7, #8]
 800ae08:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800ae0a:	4a05      	ldr	r2, [pc, #20]	; (800ae20 <Paint_NewImage+0xa8>)
 800ae0c:	897b      	ldrh	r3, [r7, #10]
 800ae0e:	80d3      	strh	r3, [r2, #6]
    }
}
 800ae10:	bf00      	nop
 800ae12:	bf00      	nop
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr
 800ae1e:	bf00      	nop
 800ae20:	20000e00 	.word	0x20000e00

0800ae24 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800ae24:	b480      	push	{r7}
 800ae26:	b083      	sub	sp, #12
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800ae2c:	4a04      	ldr	r2, [pc, #16]	; (800ae40 <Paint_SelectImage+0x1c>)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	6013      	str	r3, [r2, #0]
}
 800ae32:	bf00      	nop
 800ae34:	370c      	adds	r7, #12
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	20000e00 	.word	0x20000e00

0800ae44 <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 800ae4e:	79fb      	ldrb	r3, [r7, #7]
 800ae50:	2b02      	cmp	r3, #2
 800ae52:	d118      	bne.n	800ae86 <Paint_SetScale+0x42>
        Paint.Scale = scale;
 800ae54:	79fb      	ldrb	r3, [r7, #7]
 800ae56:	b29a      	uxth	r2, r3
 800ae58:	4b33      	ldr	r3, [pc, #204]	; (800af28 <Paint_SetScale+0xe4>)
 800ae5a:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 800ae5c:	4b32      	ldr	r3, [pc, #200]	; (800af28 <Paint_SetScale+0xe4>)
 800ae5e:	891b      	ldrh	r3, [r3, #8]
 800ae60:	f003 0307 	and.w	r3, r3, #7
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d104      	bne.n	800ae74 <Paint_SetScale+0x30>
 800ae6a:	4b2f      	ldr	r3, [pc, #188]	; (800af28 <Paint_SetScale+0xe4>)
 800ae6c:	891b      	ldrh	r3, [r3, #8]
 800ae6e:	08db      	lsrs	r3, r3, #3
 800ae70:	b29b      	uxth	r3, r3
 800ae72:	e005      	b.n	800ae80 <Paint_SetScale+0x3c>
 800ae74:	4b2c      	ldr	r3, [pc, #176]	; (800af28 <Paint_SetScale+0xe4>)
 800ae76:	891b      	ldrh	r3, [r3, #8]
 800ae78:	08db      	lsrs	r3, r3, #3
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	3301      	adds	r3, #1
 800ae7e:	b29b      	uxth	r3, r3
 800ae80:	4a29      	ldr	r2, [pc, #164]	; (800af28 <Paint_SetScale+0xe4>)
 800ae82:	8253      	strh	r3, [r2, #18]
        Paint.WidthByte = Paint.WidthMemory*2; 
    }else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 16 65\r\n");
    }
}
 800ae84:	e04b      	b.n	800af1e <Paint_SetScale+0xda>
    }else if(scale == 4){
 800ae86:	79fb      	ldrb	r3, [r7, #7]
 800ae88:	2b04      	cmp	r3, #4
 800ae8a:	d118      	bne.n	800aebe <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 800ae8c:	79fb      	ldrb	r3, [r7, #7]
 800ae8e:	b29a      	uxth	r2, r3
 800ae90:	4b25      	ldr	r3, [pc, #148]	; (800af28 <Paint_SetScale+0xe4>)
 800ae92:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 800ae94:	4b24      	ldr	r3, [pc, #144]	; (800af28 <Paint_SetScale+0xe4>)
 800ae96:	891b      	ldrh	r3, [r3, #8]
 800ae98:	f003 0303 	and.w	r3, r3, #3
 800ae9c:	b29b      	uxth	r3, r3
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d104      	bne.n	800aeac <Paint_SetScale+0x68>
 800aea2:	4b21      	ldr	r3, [pc, #132]	; (800af28 <Paint_SetScale+0xe4>)
 800aea4:	891b      	ldrh	r3, [r3, #8]
 800aea6:	089b      	lsrs	r3, r3, #2
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	e005      	b.n	800aeb8 <Paint_SetScale+0x74>
 800aeac:	4b1e      	ldr	r3, [pc, #120]	; (800af28 <Paint_SetScale+0xe4>)
 800aeae:	891b      	ldrh	r3, [r3, #8]
 800aeb0:	089b      	lsrs	r3, r3, #2
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	4a1b      	ldr	r2, [pc, #108]	; (800af28 <Paint_SetScale+0xe4>)
 800aeba:	8253      	strh	r3, [r2, #18]
}
 800aebc:	e02f      	b.n	800af1e <Paint_SetScale+0xda>
    }else if(scale ==16) {
 800aebe:	79fb      	ldrb	r3, [r7, #7]
 800aec0:	2b10      	cmp	r3, #16
 800aec2:	d118      	bne.n	800aef6 <Paint_SetScale+0xb2>
        Paint.Scale = scale;
 800aec4:	79fb      	ldrb	r3, [r7, #7]
 800aec6:	b29a      	uxth	r2, r3
 800aec8:	4b17      	ldr	r3, [pc, #92]	; (800af28 <Paint_SetScale+0xe4>)
 800aeca:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory%2==0) ? (Paint.WidthMemory/2) : (Paint.WidthMemory/2+1); 
 800aecc:	4b16      	ldr	r3, [pc, #88]	; (800af28 <Paint_SetScale+0xe4>)
 800aece:	891b      	ldrh	r3, [r3, #8]
 800aed0:	f003 0301 	and.w	r3, r3, #1
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d104      	bne.n	800aee4 <Paint_SetScale+0xa0>
 800aeda:	4b13      	ldr	r3, [pc, #76]	; (800af28 <Paint_SetScale+0xe4>)
 800aedc:	891b      	ldrh	r3, [r3, #8]
 800aede:	085b      	lsrs	r3, r3, #1
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	e005      	b.n	800aef0 <Paint_SetScale+0xac>
 800aee4:	4b10      	ldr	r3, [pc, #64]	; (800af28 <Paint_SetScale+0xe4>)
 800aee6:	891b      	ldrh	r3, [r3, #8]
 800aee8:	085b      	lsrs	r3, r3, #1
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	3301      	adds	r3, #1
 800aeee:	b29b      	uxth	r3, r3
 800aef0:	4a0d      	ldr	r2, [pc, #52]	; (800af28 <Paint_SetScale+0xe4>)
 800aef2:	8253      	strh	r3, [r2, #18]
}
 800aef4:	e013      	b.n	800af1e <Paint_SetScale+0xda>
    }else if(scale ==65) {
 800aef6:	79fb      	ldrb	r3, [r7, #7]
 800aef8:	2b41      	cmp	r3, #65	; 0x41
 800aefa:	d10a      	bne.n	800af12 <Paint_SetScale+0xce>
        Paint.Scale = scale;
 800aefc:	79fb      	ldrb	r3, [r7, #7]
 800aefe:	b29a      	uxth	r2, r3
 800af00:	4b09      	ldr	r3, [pc, #36]	; (800af28 <Paint_SetScale+0xe4>)
 800af02:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = Paint.WidthMemory*2; 
 800af04:	4b08      	ldr	r3, [pc, #32]	; (800af28 <Paint_SetScale+0xe4>)
 800af06:	891b      	ldrh	r3, [r3, #8]
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	4b06      	ldr	r3, [pc, #24]	; (800af28 <Paint_SetScale+0xe4>)
 800af0e:	825a      	strh	r2, [r3, #18]
}
 800af10:	e005      	b.n	800af1e <Paint_SetScale+0xda>
        Debug("Set Scale Input parameter error\r\n");
 800af12:	4806      	ldr	r0, [pc, #24]	; (800af2c <Paint_SetScale+0xe8>)
 800af14:	f001 fe3e 	bl	800cb94 <puts>
        Debug("Scale Only support: 2 4 16 65\r\n");
 800af18:	4805      	ldr	r0, [pc, #20]	; (800af30 <Paint_SetScale+0xec>)
 800af1a:	f001 fe3b 	bl	800cb94 <puts>
}
 800af1e:	bf00      	nop
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	20000e00 	.word	0x20000e00
 800af2c:	0800fc9c 	.word	0x0800fc9c
 800af30:	0800fcc4 	.word	0x0800fcc4

0800af34 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b08a      	sub	sp, #40	; 0x28
 800af38:	af00      	add	r7, sp, #0
 800af3a:	4603      	mov	r3, r0
 800af3c:	80fb      	strh	r3, [r7, #6]
 800af3e:	460b      	mov	r3, r1
 800af40:	80bb      	strh	r3, [r7, #4]
 800af42:	4613      	mov	r3, r2
 800af44:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800af46:	4b9e      	ldr	r3, [pc, #632]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800af48:	889b      	ldrh	r3, [r3, #4]
 800af4a:	88fa      	ldrh	r2, [r7, #6]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d804      	bhi.n	800af5a <Paint_SetPixel+0x26>
 800af50:	4b9b      	ldr	r3, [pc, #620]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800af52:	88db      	ldrh	r3, [r3, #6]
 800af54:	88ba      	ldrh	r2, [r7, #4]
 800af56:	429a      	cmp	r2, r3
 800af58:	d903      	bls.n	800af62 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 800af5a:	489a      	ldr	r0, [pc, #616]	; (800b1c4 <Paint_SetPixel+0x290>)
 800af5c:	f001 fe1a 	bl	800cb94 <puts>
        return;
 800af60:	e154      	b.n	800b20c <Paint_SetPixel+0x2d8>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800af62:	4b97      	ldr	r3, [pc, #604]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800af64:	89db      	ldrh	r3, [r3, #14]
 800af66:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800af6a:	d02b      	beq.n	800afc4 <Paint_SetPixel+0x90>
 800af6c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800af70:	f300 8149 	bgt.w	800b206 <Paint_SetPixel+0x2d2>
 800af74:	2bb4      	cmp	r3, #180	; 0xb4
 800af76:	d016      	beq.n	800afa6 <Paint_SetPixel+0x72>
 800af78:	2bb4      	cmp	r3, #180	; 0xb4
 800af7a:	f300 8144 	bgt.w	800b206 <Paint_SetPixel+0x2d2>
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d002      	beq.n	800af88 <Paint_SetPixel+0x54>
 800af82:	2b5a      	cmp	r3, #90	; 0x5a
 800af84:	d005      	beq.n	800af92 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800af86:	e13e      	b.n	800b206 <Paint_SetPixel+0x2d2>
        X = Xpoint;
 800af88:	88fb      	ldrh	r3, [r7, #6]
 800af8a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 800af8c:	88bb      	ldrh	r3, [r7, #4]
 800af8e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800af90:	e022      	b.n	800afd8 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 800af92:	4b8b      	ldr	r3, [pc, #556]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800af94:	891a      	ldrh	r2, [r3, #8]
 800af96:	88bb      	ldrh	r3, [r7, #4]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	3b01      	subs	r3, #1
 800af9e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 800afa0:	88fb      	ldrh	r3, [r7, #6]
 800afa2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800afa4:	e018      	b.n	800afd8 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 800afa6:	4b86      	ldr	r3, [pc, #536]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800afa8:	891a      	ldrh	r2, [r3, #8]
 800afaa:	88fb      	ldrh	r3, [r7, #6]
 800afac:	1ad3      	subs	r3, r2, r3
 800afae:	b29b      	uxth	r3, r3
 800afb0:	3b01      	subs	r3, #1
 800afb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 800afb4:	4b82      	ldr	r3, [pc, #520]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800afb6:	895a      	ldrh	r2, [r3, #10]
 800afb8:	88bb      	ldrh	r3, [r7, #4]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	b29b      	uxth	r3, r3
 800afbe:	3b01      	subs	r3, #1
 800afc0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800afc2:	e009      	b.n	800afd8 <Paint_SetPixel+0xa4>
        X = Ypoint;
 800afc4:	88bb      	ldrh	r3, [r7, #4]
 800afc6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800afc8:	4b7d      	ldr	r3, [pc, #500]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800afca:	895a      	ldrh	r2, [r3, #10]
 800afcc:	88fb      	ldrh	r3, [r7, #6]
 800afce:	1ad3      	subs	r3, r2, r3
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	3b01      	subs	r3, #1
 800afd4:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800afd6:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800afd8:	4b79      	ldr	r3, [pc, #484]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800afda:	8a1b      	ldrh	r3, [r3, #16]
 800afdc:	2b03      	cmp	r3, #3
 800afde:	f200 8114 	bhi.w	800b20a <Paint_SetPixel+0x2d6>
 800afe2:	a201      	add	r2, pc, #4	; (adr r2, 800afe8 <Paint_SetPixel+0xb4>)
 800afe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afe8:	0800b037 	.word	0x0800b037
 800afec:	0800aff9 	.word	0x0800aff9
 800aff0:	0800b009 	.word	0x0800b009
 800aff4:	0800b019 	.word	0x0800b019
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800aff8:	4b71      	ldr	r3, [pc, #452]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800affa:	891a      	ldrh	r2, [r3, #8]
 800affc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800affe:	1ad3      	subs	r3, r2, r3
 800b000:	b29b      	uxth	r3, r3
 800b002:	3b01      	subs	r3, #1
 800b004:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 800b006:	e017      	b.n	800b038 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800b008:	4b6d      	ldr	r3, [pc, #436]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b00a:	895a      	ldrh	r2, [r3, #10]
 800b00c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b00e:	1ad3      	subs	r3, r2, r3
 800b010:	b29b      	uxth	r3, r3
 800b012:	3b01      	subs	r3, #1
 800b014:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800b016:	e00f      	b.n	800b038 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800b018:	4b69      	ldr	r3, [pc, #420]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b01a:	891a      	ldrh	r2, [r3, #8]
 800b01c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b01e:	1ad3      	subs	r3, r2, r3
 800b020:	b29b      	uxth	r3, r3
 800b022:	3b01      	subs	r3, #1
 800b024:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 800b026:	4b66      	ldr	r3, [pc, #408]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b028:	895a      	ldrh	r2, [r3, #10]
 800b02a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b02c:	1ad3      	subs	r3, r2, r3
 800b02e:	b29b      	uxth	r3, r3
 800b030:	3b01      	subs	r3, #1
 800b032:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800b034:	e000      	b.n	800b038 <Paint_SetPixel+0x104>
        break;
 800b036:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800b038:	4b61      	ldr	r3, [pc, #388]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b03a:	891b      	ldrh	r3, [r3, #8]
 800b03c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b03e:	429a      	cmp	r2, r3
 800b040:	d804      	bhi.n	800b04c <Paint_SetPixel+0x118>
 800b042:	4b5f      	ldr	r3, [pc, #380]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b044:	895b      	ldrh	r3, [r3, #10]
 800b046:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b048:	429a      	cmp	r2, r3
 800b04a:	d903      	bls.n	800b054 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 800b04c:	485d      	ldr	r0, [pc, #372]	; (800b1c4 <Paint_SetPixel+0x290>)
 800b04e:	f001 fda1 	bl	800cb94 <puts>
        return;
 800b052:	e0db      	b.n	800b20c <Paint_SetPixel+0x2d8>
    }
    
    if(Paint.Scale == 2){
 800b054:	4b5a      	ldr	r3, [pc, #360]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b056:	8adb      	ldrh	r3, [r3, #22]
 800b058:	2b02      	cmp	r3, #2
 800b05a:	d139      	bne.n	800b0d0 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800b05c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b05e:	08db      	lsrs	r3, r3, #3
 800b060:	b29b      	uxth	r3, r3
 800b062:	4619      	mov	r1, r3
 800b064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b066:	4a56      	ldr	r2, [pc, #344]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b068:	8a52      	ldrh	r2, [r2, #18]
 800b06a:	fb02 f303 	mul.w	r3, r2, r3
 800b06e:	440b      	add	r3, r1
 800b070:	60fb      	str	r3, [r7, #12]
        UBYTE Rdata = Paint.Image[Addr];
 800b072:	4b53      	ldr	r3, [pc, #332]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	4413      	add	r3, r2
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	72fb      	strb	r3, [r7, #11]
        if(Color == BLACK)
 800b07e:	887b      	ldrh	r3, [r7, #2]
 800b080:	2b00      	cmp	r3, #0
 800b082:	d113      	bne.n	800b0ac <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800b084:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b086:	f003 0307 	and.w	r3, r3, #7
 800b08a:	2280      	movs	r2, #128	; 0x80
 800b08c:	fa42 f303 	asr.w	r3, r2, r3
 800b090:	b25b      	sxtb	r3, r3
 800b092:	43db      	mvns	r3, r3
 800b094:	b25a      	sxtb	r2, r3
 800b096:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b09a:	4013      	ands	r3, r2
 800b09c:	b259      	sxtb	r1, r3
 800b09e:	4b48      	ldr	r3, [pc, #288]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b0a0:	681a      	ldr	r2, [r3, #0]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	b2ca      	uxtb	r2, r1
 800b0a8:	701a      	strb	r2, [r3, #0]
 800b0aa:	e0af      	b.n	800b20c <Paint_SetPixel+0x2d8>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800b0ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0ae:	f003 0307 	and.w	r3, r3, #7
 800b0b2:	2280      	movs	r2, #128	; 0x80
 800b0b4:	fa42 f303 	asr.w	r3, r2, r3
 800b0b8:	b25a      	sxtb	r2, r3
 800b0ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	b259      	sxtb	r1, r3
 800b0c2:	4b3f      	ldr	r3, [pc, #252]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b0c4:	681a      	ldr	r2, [r3, #0]
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	b2ca      	uxtb	r2, r1
 800b0cc:	701a      	strb	r2, [r3, #0]
 800b0ce:	e09d      	b.n	800b20c <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 4){
 800b0d0:	4b3b      	ldr	r3, [pc, #236]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b0d2:	8adb      	ldrh	r3, [r3, #22]
 800b0d4:	2b04      	cmp	r3, #4
 800b0d6:	d137      	bne.n	800b148 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800b0d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b0da:	089b      	lsrs	r3, r3, #2
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	4619      	mov	r1, r3
 800b0e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0e2:	4a37      	ldr	r2, [pc, #220]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b0e4:	8a52      	ldrh	r2, [r2, #18]
 800b0e6:	fb02 f303 	mul.w	r3, r2, r3
 800b0ea:	440b      	add	r3, r1
 800b0ec:	617b      	str	r3, [r7, #20]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800b0ee:	887b      	ldrh	r3, [r7, #2]
 800b0f0:	f003 0303 	and.w	r3, r3, #3
 800b0f4:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800b0f6:	4b32      	ldr	r3, [pc, #200]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	4413      	add	r3, r2
 800b0fe:	781b      	ldrb	r3, [r3, #0]
 800b100:	74fb      	strb	r3, [r7, #19]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800b102:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b104:	f003 0303 	and.w	r3, r3, #3
 800b108:	005b      	lsls	r3, r3, #1
 800b10a:	22c0      	movs	r2, #192	; 0xc0
 800b10c:	fa42 f303 	asr.w	r3, r2, r3
 800b110:	b25b      	sxtb	r3, r3
 800b112:	43db      	mvns	r3, r3
 800b114:	b25a      	sxtb	r2, r3
 800b116:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b11a:	4013      	ands	r3, r2
 800b11c:	b25b      	sxtb	r3, r3
 800b11e:	74fb      	strb	r3, [r7, #19]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800b120:	887b      	ldrh	r3, [r7, #2]
 800b122:	019a      	lsls	r2, r3, #6
 800b124:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	005b      	lsls	r3, r3, #1
 800b12c:	fa42 f303 	asr.w	r3, r2, r3
 800b130:	b25a      	sxtb	r2, r3
 800b132:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b136:	4313      	orrs	r3, r2
 800b138:	b259      	sxtb	r1, r3
 800b13a:	4b21      	ldr	r3, [pc, #132]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b13c:	681a      	ldr	r2, [r3, #0]
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	4413      	add	r3, r2
 800b142:	b2ca      	uxtb	r2, r1
 800b144:	701a      	strb	r2, [r3, #0]
 800b146:	e061      	b.n	800b20c <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 16) {
 800b148:	4b1d      	ldr	r3, [pc, #116]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b14a:	8adb      	ldrh	r3, [r3, #22]
 800b14c:	2b10      	cmp	r3, #16
 800b14e:	d13b      	bne.n	800b1c8 <Paint_SetPixel+0x294>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800b150:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b152:	085b      	lsrs	r3, r3, #1
 800b154:	b29b      	uxth	r3, r3
 800b156:	4619      	mov	r1, r3
 800b158:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b15a:	4a19      	ldr	r2, [pc, #100]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b15c:	8a52      	ldrh	r2, [r2, #18]
 800b15e:	fb02 f303 	mul.w	r3, r2, r3
 800b162:	440b      	add	r3, r1
 800b164:	61fb      	str	r3, [r7, #28]
        UBYTE Rdata = Paint.Image[Addr];
 800b166:	4b16      	ldr	r3, [pc, #88]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b168:	681a      	ldr	r2, [r3, #0]
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	4413      	add	r3, r2
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	76fb      	strb	r3, [r7, #27]
        Color = Color % 16;
 800b172:	887b      	ldrh	r3, [r7, #2]
 800b174:	f003 030f 	and.w	r3, r3, #15
 800b178:	807b      	strh	r3, [r7, #2]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 800b17a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b17c:	f003 0301 	and.w	r3, r3, #1
 800b180:	009b      	lsls	r3, r3, #2
 800b182:	22f0      	movs	r2, #240	; 0xf0
 800b184:	fa42 f303 	asr.w	r3, r2, r3
 800b188:	b25b      	sxtb	r3, r3
 800b18a:	43db      	mvns	r3, r3
 800b18c:	b25a      	sxtb	r2, r3
 800b18e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b192:	4013      	ands	r3, r2
 800b194:	b25b      	sxtb	r3, r3
 800b196:	76fb      	strb	r3, [r7, #27]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 800b198:	887b      	ldrh	r3, [r7, #2]
 800b19a:	011a      	lsls	r2, r3, #4
 800b19c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b19e:	f003 0301 	and.w	r3, r3, #1
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	fa42 f303 	asr.w	r3, r2, r3
 800b1a8:	b25a      	sxtb	r2, r3
 800b1aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	b259      	sxtb	r1, r3
 800b1b2:	4b03      	ldr	r3, [pc, #12]	; (800b1c0 <Paint_SetPixel+0x28c>)
 800b1b4:	681a      	ldr	r2, [r3, #0]
 800b1b6:	69fb      	ldr	r3, [r7, #28]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	b2ca      	uxtb	r2, r1
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	e025      	b.n	800b20c <Paint_SetPixel+0x2d8>
 800b1c0:	20000e00 	.word	0x20000e00
 800b1c4:	0800fd84 	.word	0x0800fd84
    }else if(Paint.Scale == 65) {
 800b1c8:	4b12      	ldr	r3, [pc, #72]	; (800b214 <Paint_SetPixel+0x2e0>)
 800b1ca:	8adb      	ldrh	r3, [r3, #22]
 800b1cc:	2b41      	cmp	r3, #65	; 0x41
 800b1ce:	d11d      	bne.n	800b20c <Paint_SetPixel+0x2d8>
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800b1d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1d2:	005a      	lsls	r2, r3, #1
 800b1d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1d6:	490f      	ldr	r1, [pc, #60]	; (800b214 <Paint_SetPixel+0x2e0>)
 800b1d8:	8a49      	ldrh	r1, [r1, #18]
 800b1da:	fb01 f303 	mul.w	r3, r1, r3
 800b1de:	4413      	add	r3, r2
 800b1e0:	623b      	str	r3, [r7, #32]
        Paint.Image[Addr] = 0xff & (Color>>8);
 800b1e2:	887b      	ldrh	r3, [r7, #2]
 800b1e4:	0a1b      	lsrs	r3, r3, #8
 800b1e6:	b299      	uxth	r1, r3
 800b1e8:	4b0a      	ldr	r3, [pc, #40]	; (800b214 <Paint_SetPixel+0x2e0>)
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	b2ca      	uxtb	r2, r1
 800b1f2:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr+1] = 0xff & Color;
 800b1f4:	4b07      	ldr	r3, [pc, #28]	; (800b214 <Paint_SetPixel+0x2e0>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	6a3b      	ldr	r3, [r7, #32]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	4413      	add	r3, r2
 800b1fe:	887a      	ldrh	r2, [r7, #2]
 800b200:	b2d2      	uxtb	r2, r2
 800b202:	701a      	strb	r2, [r3, #0]
 800b204:	e002      	b.n	800b20c <Paint_SetPixel+0x2d8>
        return;
 800b206:	bf00      	nop
 800b208:	e000      	b.n	800b20c <Paint_SetPixel+0x2d8>
        return;
 800b20a:	bf00      	nop
    }
}
 800b20c:	3728      	adds	r7, #40	; 0x28
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	20000e00 	.word	0x20000e00

0800b218 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800b218:	b480      	push	{r7}
 800b21a:	b089      	sub	sp, #36	; 0x24
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	4603      	mov	r3, r0
 800b220:	80fb      	strh	r3, [r7, #6]
    if(Paint.Scale == 2 || Paint.Scale == 4) {
 800b222:	4b51      	ldr	r3, [pc, #324]	; (800b368 <Paint_Clear+0x150>)
 800b224:	8adb      	ldrh	r3, [r3, #22]
 800b226:	2b02      	cmp	r3, #2
 800b228:	d003      	beq.n	800b232 <Paint_Clear+0x1a>
 800b22a:	4b4f      	ldr	r3, [pc, #316]	; (800b368 <Paint_Clear+0x150>)
 800b22c:	8adb      	ldrh	r3, [r3, #22]
 800b22e:	2b04      	cmp	r3, #4
 800b230:	d125      	bne.n	800b27e <Paint_Clear+0x66>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b232:	2300      	movs	r3, #0
 800b234:	83fb      	strh	r3, [r7, #30]
 800b236:	e01c      	b.n	800b272 <Paint_Clear+0x5a>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b238:	2300      	movs	r3, #0
 800b23a:	83bb      	strh	r3, [r7, #28]
 800b23c:	e011      	b.n	800b262 <Paint_Clear+0x4a>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800b23e:	8bba      	ldrh	r2, [r7, #28]
 800b240:	8bfb      	ldrh	r3, [r7, #30]
 800b242:	4949      	ldr	r1, [pc, #292]	; (800b368 <Paint_Clear+0x150>)
 800b244:	8a49      	ldrh	r1, [r1, #18]
 800b246:	fb01 f303 	mul.w	r3, r1, r3
 800b24a:	4413      	add	r3, r2
 800b24c:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800b24e:	4b46      	ldr	r3, [pc, #280]	; (800b368 <Paint_Clear+0x150>)
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	4413      	add	r3, r2
 800b256:	88fa      	ldrh	r2, [r7, #6]
 800b258:	b2d2      	uxtb	r2, r2
 800b25a:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b25c:	8bbb      	ldrh	r3, [r7, #28]
 800b25e:	3301      	adds	r3, #1
 800b260:	83bb      	strh	r3, [r7, #28]
 800b262:	4b41      	ldr	r3, [pc, #260]	; (800b368 <Paint_Clear+0x150>)
 800b264:	8a5b      	ldrh	r3, [r3, #18]
 800b266:	8bba      	ldrh	r2, [r7, #28]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d3e8      	bcc.n	800b23e <Paint_Clear+0x26>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b26c:	8bfb      	ldrh	r3, [r7, #30]
 800b26e:	3301      	adds	r3, #1
 800b270:	83fb      	strh	r3, [r7, #30]
 800b272:	4b3d      	ldr	r3, [pc, #244]	; (800b368 <Paint_Clear+0x150>)
 800b274:	8a9b      	ldrh	r3, [r3, #20]
 800b276:	8bfa      	ldrh	r2, [r7, #30]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d3dd      	bcc.n	800b238 <Paint_Clear+0x20>
 800b27c:	e06e      	b.n	800b35c <Paint_Clear+0x144>
            }
        }
    }else if(Paint.Scale == 16) {
 800b27e:	4b3a      	ldr	r3, [pc, #232]	; (800b368 <Paint_Clear+0x150>)
 800b280:	8adb      	ldrh	r3, [r3, #22]
 800b282:	2b10      	cmp	r3, #16
 800b284:	d12f      	bne.n	800b2e6 <Paint_Clear+0xce>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b286:	2300      	movs	r3, #0
 800b288:	837b      	strh	r3, [r7, #26]
 800b28a:	e026      	b.n	800b2da <Paint_Clear+0xc2>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b28c:	2300      	movs	r3, #0
 800b28e:	833b      	strh	r3, [r7, #24]
 800b290:	e01b      	b.n	800b2ca <Paint_Clear+0xb2>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800b292:	8b3a      	ldrh	r2, [r7, #24]
 800b294:	8b7b      	ldrh	r3, [r7, #26]
 800b296:	4934      	ldr	r1, [pc, #208]	; (800b368 <Paint_Clear+0x150>)
 800b298:	8a49      	ldrh	r1, [r1, #18]
 800b29a:	fb01 f303 	mul.w	r3, r1, r3
 800b29e:	4413      	add	r3, r2
 800b2a0:	60fb      	str	r3, [r7, #12]
                Color = Color & 0x0f;
 800b2a2:	88fb      	ldrh	r3, [r7, #6]
 800b2a4:	f003 030f 	and.w	r3, r3, #15
 800b2a8:	80fb      	strh	r3, [r7, #6]
                Paint.Image[Addr] = (Color<<4) | Color;
 800b2aa:	88fb      	ldrh	r3, [r7, #6]
 800b2ac:	011b      	lsls	r3, r3, #4
 800b2ae:	b25a      	sxtb	r2, r3
 800b2b0:	88fb      	ldrh	r3, [r7, #6]
 800b2b2:	b25b      	sxtb	r3, r3
 800b2b4:	4313      	orrs	r3, r2
 800b2b6:	b259      	sxtb	r1, r3
 800b2b8:	4b2b      	ldr	r3, [pc, #172]	; (800b368 <Paint_Clear+0x150>)
 800b2ba:	681a      	ldr	r2, [r3, #0]
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	4413      	add	r3, r2
 800b2c0:	b2ca      	uxtb	r2, r1
 800b2c2:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b2c4:	8b3b      	ldrh	r3, [r7, #24]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	833b      	strh	r3, [r7, #24]
 800b2ca:	4b27      	ldr	r3, [pc, #156]	; (800b368 <Paint_Clear+0x150>)
 800b2cc:	8a5b      	ldrh	r3, [r3, #18]
 800b2ce:	8b3a      	ldrh	r2, [r7, #24]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d3de      	bcc.n	800b292 <Paint_Clear+0x7a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b2d4:	8b7b      	ldrh	r3, [r7, #26]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	837b      	strh	r3, [r7, #26]
 800b2da:	4b23      	ldr	r3, [pc, #140]	; (800b368 <Paint_Clear+0x150>)
 800b2dc:	8a9b      	ldrh	r3, [r3, #20]
 800b2de:	8b7a      	ldrh	r2, [r7, #26]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d3d3      	bcc.n	800b28c <Paint_Clear+0x74>
                Paint.Image[Addr] = 0x0f & (Color>>8);
                Paint.Image[Addr+1] = 0x0f & Color;
            }
        }
    }
}
 800b2e4:	e03a      	b.n	800b35c <Paint_Clear+0x144>
    }else if(Paint.Scale == 65) {
 800b2e6:	4b20      	ldr	r3, [pc, #128]	; (800b368 <Paint_Clear+0x150>)
 800b2e8:	8adb      	ldrh	r3, [r3, #22]
 800b2ea:	2b41      	cmp	r3, #65	; 0x41
 800b2ec:	d136      	bne.n	800b35c <Paint_Clear+0x144>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	82fb      	strh	r3, [r7, #22]
 800b2f2:	e02d      	b.n	800b350 <Paint_Clear+0x138>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	82bb      	strh	r3, [r7, #20]
 800b2f8:	e022      	b.n	800b340 <Paint_Clear+0x128>
                UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800b2fa:	8abb      	ldrh	r3, [r7, #20]
 800b2fc:	005a      	lsls	r2, r3, #1
 800b2fe:	8afb      	ldrh	r3, [r7, #22]
 800b300:	4919      	ldr	r1, [pc, #100]	; (800b368 <Paint_Clear+0x150>)
 800b302:	8a49      	ldrh	r1, [r1, #18]
 800b304:	fb01 f303 	mul.w	r3, r1, r3
 800b308:	4413      	add	r3, r2
 800b30a:	613b      	str	r3, [r7, #16]
                Paint.Image[Addr] = 0x0f & (Color>>8);
 800b30c:	88fb      	ldrh	r3, [r7, #6]
 800b30e:	0a1b      	lsrs	r3, r3, #8
 800b310:	b29b      	uxth	r3, r3
 800b312:	b2da      	uxtb	r2, r3
 800b314:	4b14      	ldr	r3, [pc, #80]	; (800b368 <Paint_Clear+0x150>)
 800b316:	6819      	ldr	r1, [r3, #0]
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	440b      	add	r3, r1
 800b31c:	f002 020f 	and.w	r2, r2, #15
 800b320:	b2d2      	uxtb	r2, r2
 800b322:	701a      	strb	r2, [r3, #0]
                Paint.Image[Addr+1] = 0x0f & Color;
 800b324:	88fb      	ldrh	r3, [r7, #6]
 800b326:	b2da      	uxtb	r2, r3
 800b328:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <Paint_Clear+0x150>)
 800b32a:	6819      	ldr	r1, [r3, #0]
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	3301      	adds	r3, #1
 800b330:	440b      	add	r3, r1
 800b332:	f002 020f 	and.w	r2, r2, #15
 800b336:	b2d2      	uxtb	r2, r2
 800b338:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b33a:	8abb      	ldrh	r3, [r7, #20]
 800b33c:	3301      	adds	r3, #1
 800b33e:	82bb      	strh	r3, [r7, #20]
 800b340:	4b09      	ldr	r3, [pc, #36]	; (800b368 <Paint_Clear+0x150>)
 800b342:	8a5b      	ldrh	r3, [r3, #18]
 800b344:	8aba      	ldrh	r2, [r7, #20]
 800b346:	429a      	cmp	r2, r3
 800b348:	d3d7      	bcc.n	800b2fa <Paint_Clear+0xe2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b34a:	8afb      	ldrh	r3, [r7, #22]
 800b34c:	3301      	adds	r3, #1
 800b34e:	82fb      	strh	r3, [r7, #22]
 800b350:	4b05      	ldr	r3, [pc, #20]	; (800b368 <Paint_Clear+0x150>)
 800b352:	8a9b      	ldrh	r3, [r3, #20]
 800b354:	8afa      	ldrh	r2, [r7, #22]
 800b356:	429a      	cmp	r2, r3
 800b358:	d3cc      	bcc.n	800b2f4 <Paint_Clear+0xdc>
}
 800b35a:	e7ff      	b.n	800b35c <Paint_Clear+0x144>
 800b35c:	bf00      	nop
 800b35e:	3724      	adds	r7, #36	; 0x24
 800b360:	46bd      	mov	sp, r7
 800b362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b366:	4770      	bx	lr
 800b368:	20000e00 	.word	0x20000e00

0800b36c <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 800b36c:	b590      	push	{r4, r7, lr}
 800b36e:	b085      	sub	sp, #20
 800b370:	af00      	add	r7, sp, #0
 800b372:	4604      	mov	r4, r0
 800b374:	4608      	mov	r0, r1
 800b376:	4611      	mov	r1, r2
 800b378:	461a      	mov	r2, r3
 800b37a:	4623      	mov	r3, r4
 800b37c:	80fb      	strh	r3, [r7, #6]
 800b37e:	4603      	mov	r3, r0
 800b380:	80bb      	strh	r3, [r7, #4]
 800b382:	460b      	mov	r3, r1
 800b384:	807b      	strh	r3, [r7, #2]
 800b386:	4613      	mov	r3, r2
 800b388:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800b38a:	4b4a      	ldr	r3, [pc, #296]	; (800b4b4 <Paint_DrawPoint+0x148>)
 800b38c:	889b      	ldrh	r3, [r3, #4]
 800b38e:	88fa      	ldrh	r2, [r7, #6]
 800b390:	429a      	cmp	r2, r3
 800b392:	d804      	bhi.n	800b39e <Paint_DrawPoint+0x32>
 800b394:	4b47      	ldr	r3, [pc, #284]	; (800b4b4 <Paint_DrawPoint+0x148>)
 800b396:	88db      	ldrh	r3, [r3, #6]
 800b398:	88ba      	ldrh	r2, [r7, #4]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	d911      	bls.n	800b3c2 <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800b39e:	4846      	ldr	r0, [pc, #280]	; (800b4b8 <Paint_DrawPoint+0x14c>)
 800b3a0:	f001 fbf8 	bl	800cb94 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 800b3a4:	88fb      	ldrh	r3, [r7, #6]
 800b3a6:	4a43      	ldr	r2, [pc, #268]	; (800b4b4 <Paint_DrawPoint+0x148>)
 800b3a8:	8892      	ldrh	r2, [r2, #4]
 800b3aa:	4619      	mov	r1, r3
 800b3ac:	4843      	ldr	r0, [pc, #268]	; (800b4bc <Paint_DrawPoint+0x150>)
 800b3ae:	f001 fb8b 	bl	800cac8 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 800b3b2:	88bb      	ldrh	r3, [r7, #4]
 800b3b4:	4a3f      	ldr	r2, [pc, #252]	; (800b4b4 <Paint_DrawPoint+0x148>)
 800b3b6:	88d2      	ldrh	r2, [r2, #6]
 800b3b8:	4619      	mov	r1, r3
 800b3ba:	4841      	ldr	r0, [pc, #260]	; (800b4c0 <Paint_DrawPoint+0x154>)
 800b3bc:	f001 fb84 	bl	800cac8 <iprintf>
        return;
 800b3c0:	e074      	b.n	800b4ac <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 800b3c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d144      	bne.n	800b454 <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	81fb      	strh	r3, [r7, #14]
 800b3ce:	e039      	b.n	800b444 <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	81bb      	strh	r3, [r7, #12]
 800b3d4:	e029      	b.n	800b42a <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b3d6:	88fa      	ldrh	r2, [r7, #6]
 800b3d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b3dc:	441a      	add	r2, r3
 800b3de:	787b      	ldrb	r3, [r7, #1]
 800b3e0:	1ad3      	subs	r3, r2, r3
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	db28      	blt.n	800b438 <Paint_DrawPoint+0xcc>
 800b3e6:	88ba      	ldrh	r2, [r7, #4]
 800b3e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b3ec:	441a      	add	r2, r3
 800b3ee:	787b      	ldrb	r3, [r7, #1]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	db20      	blt.n	800b438 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800b3f6:	89fa      	ldrh	r2, [r7, #14]
 800b3f8:	88fb      	ldrh	r3, [r7, #6]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	787b      	ldrb	r3, [r7, #1]
 800b400:	b29b      	uxth	r3, r3
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	b298      	uxth	r0, r3
 800b406:	89ba      	ldrh	r2, [r7, #12]
 800b408:	88bb      	ldrh	r3, [r7, #4]
 800b40a:	4413      	add	r3, r2
 800b40c:	b29a      	uxth	r2, r3
 800b40e:	787b      	ldrb	r3, [r7, #1]
 800b410:	b29b      	uxth	r3, r3
 800b412:	1ad3      	subs	r3, r2, r3
 800b414:	b29b      	uxth	r3, r3
 800b416:	887a      	ldrh	r2, [r7, #2]
 800b418:	4619      	mov	r1, r3
 800b41a:	f7ff fd8b 	bl	800af34 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800b41e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b422:	b29b      	uxth	r3, r3
 800b424:	3301      	adds	r3, #1
 800b426:	b29b      	uxth	r3, r3
 800b428:	81bb      	strh	r3, [r7, #12]
 800b42a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b42e:	787b      	ldrb	r3, [r7, #1]
 800b430:	005b      	lsls	r3, r3, #1
 800b432:	3b01      	subs	r3, #1
 800b434:	429a      	cmp	r2, r3
 800b436:	dbce      	blt.n	800b3d6 <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800b438:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b43c:	b29b      	uxth	r3, r3
 800b43e:	3301      	adds	r3, #1
 800b440:	b29b      	uxth	r3, r3
 800b442:	81fb      	strh	r3, [r7, #14]
 800b444:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b448:	787b      	ldrb	r3, [r7, #1]
 800b44a:	005b      	lsls	r3, r3, #1
 800b44c:	3b01      	subs	r3, #1
 800b44e:	429a      	cmp	r2, r3
 800b450:	dbbe      	blt.n	800b3d0 <Paint_DrawPoint+0x64>
 800b452:	e02b      	b.n	800b4ac <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800b454:	2300      	movs	r3, #0
 800b456:	81fb      	strh	r3, [r7, #14]
 800b458:	e023      	b.n	800b4a2 <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800b45a:	2300      	movs	r3, #0
 800b45c:	81bb      	strh	r3, [r7, #12]
 800b45e:	e015      	b.n	800b48c <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800b460:	89fa      	ldrh	r2, [r7, #14]
 800b462:	88fb      	ldrh	r3, [r7, #6]
 800b464:	4413      	add	r3, r2
 800b466:	b29b      	uxth	r3, r3
 800b468:	3b01      	subs	r3, #1
 800b46a:	b298      	uxth	r0, r3
 800b46c:	89ba      	ldrh	r2, [r7, #12]
 800b46e:	88bb      	ldrh	r3, [r7, #4]
 800b470:	4413      	add	r3, r2
 800b472:	b29b      	uxth	r3, r3
 800b474:	3b01      	subs	r3, #1
 800b476:	b29b      	uxth	r3, r3
 800b478:	887a      	ldrh	r2, [r7, #2]
 800b47a:	4619      	mov	r1, r3
 800b47c:	f7ff fd5a 	bl	800af34 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800b480:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b484:	b29b      	uxth	r3, r3
 800b486:	3301      	adds	r3, #1
 800b488:	b29b      	uxth	r3, r3
 800b48a:	81bb      	strh	r3, [r7, #12]
 800b48c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b490:	787b      	ldrb	r3, [r7, #1]
 800b492:	429a      	cmp	r2, r3
 800b494:	dbe4      	blt.n	800b460 <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800b496:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b49a:	b29b      	uxth	r3, r3
 800b49c:	3301      	adds	r3, #1
 800b49e:	b29b      	uxth	r3, r3
 800b4a0:	81fb      	strh	r3, [r7, #14]
 800b4a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b4a6:	787b      	ldrb	r3, [r7, #1]
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	dbd6      	blt.n	800b45a <Paint_DrawPoint+0xee>
            }
        }
    }
}
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd90      	pop	{r4, r7, pc}
 800b4b2:	bf00      	nop
 800b4b4:	20000e00 	.word	0x20000e00
 800b4b8:	0800fdac 	.word	0x0800fdac
 800b4bc:	0800fdec 	.word	0x0800fdec
 800b4c0:	0800fe10 	.word	0x0800fe10

0800b4c4 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800b4c4:	b590      	push	{r4, r7, lr}
 800b4c6:	b08d      	sub	sp, #52	; 0x34
 800b4c8:	af02      	add	r7, sp, #8
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	4608      	mov	r0, r1
 800b4ce:	4611      	mov	r1, r2
 800b4d0:	461a      	mov	r2, r3
 800b4d2:	4623      	mov	r3, r4
 800b4d4:	80fb      	strh	r3, [r7, #6]
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	80bb      	strh	r3, [r7, #4]
 800b4da:	460b      	mov	r3, r1
 800b4dc:	807b      	strh	r3, [r7, #2]
 800b4de:	4613      	mov	r3, r2
 800b4e0:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b4e2:	4b52      	ldr	r3, [pc, #328]	; (800b62c <Paint_DrawLine+0x168>)
 800b4e4:	889b      	ldrh	r3, [r3, #4]
 800b4e6:	88fa      	ldrh	r2, [r7, #6]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d80e      	bhi.n	800b50a <Paint_DrawLine+0x46>
 800b4ec:	4b4f      	ldr	r3, [pc, #316]	; (800b62c <Paint_DrawLine+0x168>)
 800b4ee:	88db      	ldrh	r3, [r3, #6]
 800b4f0:	88ba      	ldrh	r2, [r7, #4]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d809      	bhi.n	800b50a <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b4f6:	4b4d      	ldr	r3, [pc, #308]	; (800b62c <Paint_DrawLine+0x168>)
 800b4f8:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b4fa:	887a      	ldrh	r2, [r7, #2]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d804      	bhi.n	800b50a <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b500:	4b4a      	ldr	r3, [pc, #296]	; (800b62c <Paint_DrawLine+0x168>)
 800b502:	88db      	ldrh	r3, [r3, #6]
 800b504:	883a      	ldrh	r2, [r7, #0]
 800b506:	429a      	cmp	r2, r3
 800b508:	d903      	bls.n	800b512 <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800b50a:	4849      	ldr	r0, [pc, #292]	; (800b630 <Paint_DrawLine+0x16c>)
 800b50c:	f001 fb42 	bl	800cb94 <puts>
        return;
 800b510:	e088      	b.n	800b624 <Paint_DrawLine+0x160>
    }

    UWORD Xpoint = Xstart;
 800b512:	88fb      	ldrh	r3, [r7, #6]
 800b514:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800b516:	88bb      	ldrh	r3, [r7, #4]
 800b518:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b51a:	887a      	ldrh	r2, [r7, #2]
 800b51c:	88fb      	ldrh	r3, [r7, #6]
 800b51e:	1ad3      	subs	r3, r2, r3
 800b520:	2b00      	cmp	r3, #0
 800b522:	bfb8      	it	lt
 800b524:	425b      	neglt	r3, r3
 800b526:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b528:	883a      	ldrh	r2, [r7, #0]
 800b52a:	88bb      	ldrh	r3, [r7, #4]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	2b00      	cmp	r3, #0
 800b530:	bfb8      	it	lt
 800b532:	425b      	neglt	r3, r3
 800b534:	425b      	negs	r3, r3
 800b536:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800b538:	88fa      	ldrh	r2, [r7, #6]
 800b53a:	887b      	ldrh	r3, [r7, #2]
 800b53c:	429a      	cmp	r2, r3
 800b53e:	d201      	bcs.n	800b544 <Paint_DrawLine+0x80>
 800b540:	2301      	movs	r3, #1
 800b542:	e001      	b.n	800b548 <Paint_DrawLine+0x84>
 800b544:	f04f 33ff 	mov.w	r3, #4294967295
 800b548:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800b54a:	88ba      	ldrh	r2, [r7, #4]
 800b54c:	883b      	ldrh	r3, [r7, #0]
 800b54e:	429a      	cmp	r2, r3
 800b550:	d201      	bcs.n	800b556 <Paint_DrawLine+0x92>
 800b552:	2301      	movs	r3, #1
 800b554:	e001      	b.n	800b55a <Paint_DrawLine+0x96>
 800b556:	f04f 33ff 	mov.w	r3, #4294967295
 800b55a:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	4413      	add	r3, r2
 800b562:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800b564:	2300      	movs	r3, #0
 800b566:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 800b568:	7ffb      	ldrb	r3, [r7, #31]
 800b56a:	3301      	adds	r3, #1
 800b56c:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800b56e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b572:	2b01      	cmp	r3, #1
 800b574:	d125      	bne.n	800b5c2 <Paint_DrawLine+0xfe>
 800b576:	7ffa      	ldrb	r2, [r7, #31]
 800b578:	4b2e      	ldr	r3, [pc, #184]	; (800b634 <Paint_DrawLine+0x170>)
 800b57a:	fba3 1302 	umull	r1, r3, r3, r2
 800b57e:	0859      	lsrs	r1, r3, #1
 800b580:	460b      	mov	r3, r1
 800b582:	005b      	lsls	r3, r3, #1
 800b584:	440b      	add	r3, r1
 800b586:	1ad3      	subs	r3, r2, r3
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d119      	bne.n	800b5c2 <Paint_DrawLine+0xfe>
            //Debug("LINE_DOTTED\r\n");
						if(Color)
 800b58e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b590:	2b00      	cmp	r3, #0
 800b592:	d009      	beq.n	800b5a8 <Paint_DrawLine+0xe4>
							Paint_DrawPoint(Xpoint, Ypoint, BLACK, Line_width, DOT_STYLE_DFT);
 800b594:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b598:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b59a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b59c:	2201      	movs	r2, #1
 800b59e:	9200      	str	r2, [sp, #0]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f7ff fee3 	bl	800b36c <Paint_DrawPoint>
 800b5a6:	e009      	b.n	800b5bc <Paint_DrawLine+0xf8>
            else
							Paint_DrawPoint(Xpoint, Ypoint, WHITE, Line_width, DOT_STYLE_DFT);
 800b5a8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b5ac:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b5ae:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b5b0:	2201      	movs	r2, #1
 800b5b2:	9200      	str	r2, [sp, #0]
 800b5b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b5b8:	f7ff fed8 	bl	800b36c <Paint_DrawPoint>
            Dotted_Len = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	77fb      	strb	r3, [r7, #31]
 800b5c0:	e008      	b.n	800b5d4 <Paint_DrawLine+0x110>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800b5c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b5c6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b5c8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b5ca:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b5cc:	2401      	movs	r4, #1
 800b5ce:	9400      	str	r4, [sp, #0]
 800b5d0:	f7ff fecc 	bl	800b36c <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
 800b5d6:	005b      	lsls	r3, r3, #1
 800b5d8:	697a      	ldr	r2, [r7, #20]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	dc0c      	bgt.n	800b5f8 <Paint_DrawLine+0x134>
            if (Xpoint == Xend)
 800b5de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b5e0:	887b      	ldrh	r3, [r7, #2]
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	d01b      	beq.n	800b61e <Paint_DrawLine+0x15a>
                break;
            Esp += dy;
 800b5e6:	6a3a      	ldr	r2, [r7, #32]
 800b5e8:	697b      	ldr	r3, [r7, #20]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800b5ee:	693b      	ldr	r3, [r7, #16]
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b5f4:	4413      	add	r3, r2
 800b5f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800b5f8:	6a3b      	ldr	r3, [r7, #32]
 800b5fa:	005b      	lsls	r3, r3, #1
 800b5fc:	69ba      	ldr	r2, [r7, #24]
 800b5fe:	429a      	cmp	r2, r3
 800b600:	dbb2      	blt.n	800b568 <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 800b602:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b604:	883b      	ldrh	r3, [r7, #0]
 800b606:	429a      	cmp	r2, r3
 800b608:	d00b      	beq.n	800b622 <Paint_DrawLine+0x15e>
                break;
            Esp += dx;
 800b60a:	6a3a      	ldr	r2, [r7, #32]
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	4413      	add	r3, r2
 800b610:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	b29a      	uxth	r2, r3
 800b616:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b618:	4413      	add	r3, r2
 800b61a:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800b61c:	e7a4      	b.n	800b568 <Paint_DrawLine+0xa4>
                break;
 800b61e:	bf00      	nop
 800b620:	e000      	b.n	800b624 <Paint_DrawLine+0x160>
                break;
 800b622:	bf00      	nop
        }
    }
}
 800b624:	372c      	adds	r7, #44	; 0x2c
 800b626:	46bd      	mov	sp, r7
 800b628:	bd90      	pop	{r4, r7, pc}
 800b62a:	bf00      	nop
 800b62c:	20000e00 	.word	0x20000e00
 800b630:	0800fe38 	.word	0x0800fe38
 800b634:	aaaaaaab 	.word	0xaaaaaaab

0800b638 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800b638:	b590      	push	{r4, r7, lr}
 800b63a:	b089      	sub	sp, #36	; 0x24
 800b63c:	af04      	add	r7, sp, #16
 800b63e:	4604      	mov	r4, r0
 800b640:	4608      	mov	r0, r1
 800b642:	4611      	mov	r1, r2
 800b644:	461a      	mov	r2, r3
 800b646:	4623      	mov	r3, r4
 800b648:	80fb      	strh	r3, [r7, #6]
 800b64a:	4603      	mov	r3, r0
 800b64c:	80bb      	strh	r3, [r7, #4]
 800b64e:	460b      	mov	r3, r1
 800b650:	807b      	strh	r3, [r7, #2]
 800b652:	4613      	mov	r3, r2
 800b654:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b656:	4b38      	ldr	r3, [pc, #224]	; (800b738 <Paint_DrawRectangle+0x100>)
 800b658:	889b      	ldrh	r3, [r3, #4]
 800b65a:	88fa      	ldrh	r2, [r7, #6]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d80e      	bhi.n	800b67e <Paint_DrawRectangle+0x46>
 800b660:	4b35      	ldr	r3, [pc, #212]	; (800b738 <Paint_DrawRectangle+0x100>)
 800b662:	88db      	ldrh	r3, [r3, #6]
 800b664:	88ba      	ldrh	r2, [r7, #4]
 800b666:	429a      	cmp	r2, r3
 800b668:	d809      	bhi.n	800b67e <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b66a:	4b33      	ldr	r3, [pc, #204]	; (800b738 <Paint_DrawRectangle+0x100>)
 800b66c:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b66e:	887a      	ldrh	r2, [r7, #2]
 800b670:	429a      	cmp	r2, r3
 800b672:	d804      	bhi.n	800b67e <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b674:	4b30      	ldr	r3, [pc, #192]	; (800b738 <Paint_DrawRectangle+0x100>)
 800b676:	88db      	ldrh	r3, [r3, #6]
 800b678:	883a      	ldrh	r2, [r7, #0]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d903      	bls.n	800b686 <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 800b67e:	482f      	ldr	r0, [pc, #188]	; (800b73c <Paint_DrawRectangle+0x104>)
 800b680:	f001 fa88 	bl	800cb94 <puts>
        return;
 800b684:	e054      	b.n	800b730 <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 800b686:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d018      	beq.n	800b6c0 <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800b68e:	88bb      	ldrh	r3, [r7, #4]
 800b690:	81fb      	strh	r3, [r7, #14]
 800b692:	e010      	b.n	800b6b6 <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 800b694:	89fc      	ldrh	r4, [r7, #14]
 800b696:	887a      	ldrh	r2, [r7, #2]
 800b698:	89f9      	ldrh	r1, [r7, #14]
 800b69a:	88f8      	ldrh	r0, [r7, #6]
 800b69c:	2300      	movs	r3, #0
 800b69e:	9302      	str	r3, [sp, #8]
 800b6a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6a4:	9301      	str	r3, [sp, #4]
 800b6a6:	8c3b      	ldrh	r3, [r7, #32]
 800b6a8:	9300      	str	r3, [sp, #0]
 800b6aa:	4623      	mov	r3, r4
 800b6ac:	f7ff ff0a 	bl	800b4c4 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800b6b0:	89fb      	ldrh	r3, [r7, #14]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	81fb      	strh	r3, [r7, #14]
 800b6b6:	89fa      	ldrh	r2, [r7, #14]
 800b6b8:	883b      	ldrh	r3, [r7, #0]
 800b6ba:	429a      	cmp	r2, r3
 800b6bc:	d3ea      	bcc.n	800b694 <Paint_DrawRectangle+0x5c>
 800b6be:	e037      	b.n	800b730 <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800b6c0:	88bc      	ldrh	r4, [r7, #4]
 800b6c2:	887a      	ldrh	r2, [r7, #2]
 800b6c4:	88b9      	ldrh	r1, [r7, #4]
 800b6c6:	88f8      	ldrh	r0, [r7, #6]
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	9302      	str	r3, [sp, #8]
 800b6cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	8c3b      	ldrh	r3, [r7, #32]
 800b6d4:	9300      	str	r3, [sp, #0]
 800b6d6:	4623      	mov	r3, r4
 800b6d8:	f7ff fef4 	bl	800b4c4 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800b6dc:	883c      	ldrh	r4, [r7, #0]
 800b6de:	88fa      	ldrh	r2, [r7, #6]
 800b6e0:	88b9      	ldrh	r1, [r7, #4]
 800b6e2:	88f8      	ldrh	r0, [r7, #6]
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	9302      	str	r3, [sp, #8]
 800b6e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b6ec:	9301      	str	r3, [sp, #4]
 800b6ee:	8c3b      	ldrh	r3, [r7, #32]
 800b6f0:	9300      	str	r3, [sp, #0]
 800b6f2:	4623      	mov	r3, r4
 800b6f4:	f7ff fee6 	bl	800b4c4 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800b6f8:	88bc      	ldrh	r4, [r7, #4]
 800b6fa:	887a      	ldrh	r2, [r7, #2]
 800b6fc:	8839      	ldrh	r1, [r7, #0]
 800b6fe:	8878      	ldrh	r0, [r7, #2]
 800b700:	2300      	movs	r3, #0
 800b702:	9302      	str	r3, [sp, #8]
 800b704:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b708:	9301      	str	r3, [sp, #4]
 800b70a:	8c3b      	ldrh	r3, [r7, #32]
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	4623      	mov	r3, r4
 800b710:	f7ff fed8 	bl	800b4c4 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800b714:	883c      	ldrh	r4, [r7, #0]
 800b716:	88fa      	ldrh	r2, [r7, #6]
 800b718:	8839      	ldrh	r1, [r7, #0]
 800b71a:	8878      	ldrh	r0, [r7, #2]
 800b71c:	2300      	movs	r3, #0
 800b71e:	9302      	str	r3, [sp, #8]
 800b720:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b724:	9301      	str	r3, [sp, #4]
 800b726:	8c3b      	ldrh	r3, [r7, #32]
 800b728:	9300      	str	r3, [sp, #0]
 800b72a:	4623      	mov	r3, r4
 800b72c:	f7ff feca 	bl	800b4c4 <Paint_DrawLine>
    }
}
 800b730:	3714      	adds	r7, #20
 800b732:	46bd      	mov	sp, r7
 800b734:	bd90      	pop	{r4, r7, pc}
 800b736:	bf00      	nop
 800b738:	20000e00 	.word	0x20000e00
 800b73c:	0800fe78 	.word	0x0800fe78

0800b740 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800b740:	b590      	push	{r4, r7, lr}
 800b742:	b087      	sub	sp, #28
 800b744:	af02      	add	r7, sp, #8
 800b746:	4604      	mov	r4, r0
 800b748:	4608      	mov	r0, r1
 800b74a:	4611      	mov	r1, r2
 800b74c:	461a      	mov	r2, r3
 800b74e:	4623      	mov	r3, r4
 800b750:	80fb      	strh	r3, [r7, #6]
 800b752:	4603      	mov	r3, r0
 800b754:	80bb      	strh	r3, [r7, #4]
 800b756:	460b      	mov	r3, r1
 800b758:	807b      	strh	r3, [r7, #2]
 800b75a:	4613      	mov	r3, r2
 800b75c:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 800b75e:	4b67      	ldr	r3, [pc, #412]	; (800b8fc <Paint_DrawCircle+0x1bc>)
 800b760:	889b      	ldrh	r3, [r3, #4]
 800b762:	88fa      	ldrh	r2, [r7, #6]
 800b764:	429a      	cmp	r2, r3
 800b766:	d804      	bhi.n	800b772 <Paint_DrawCircle+0x32>
 800b768:	4b64      	ldr	r3, [pc, #400]	; (800b8fc <Paint_DrawCircle+0x1bc>)
 800b76a:	88db      	ldrh	r3, [r3, #6]
 800b76c:	88ba      	ldrh	r2, [r7, #4]
 800b76e:	429a      	cmp	r2, r3
 800b770:	d303      	bcc.n	800b77a <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800b772:	4863      	ldr	r0, [pc, #396]	; (800b900 <Paint_DrawCircle+0x1c0>)
 800b774:	f001 fa0e 	bl	800cb94 <puts>
        return;
 800b778:	e16b      	b.n	800ba52 <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800b77e:	887b      	ldrh	r3, [r7, #2]
 800b780:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800b782:	887b      	ldrh	r3, [r7, #2]
 800b784:	005b      	lsls	r3, r3, #1
 800b786:	b29b      	uxth	r3, r3
 800b788:	f1c3 0303 	rsb	r3, r3, #3
 800b78c:	b29b      	uxth	r3, r3
 800b78e:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 800b790:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b794:	2b01      	cmp	r3, #1
 800b796:	f040 8155 	bne.w	800ba44 <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800b79a:	e0a6      	b.n	800b8ea <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800b79c:	89fb      	ldrh	r3, [r7, #14]
 800b79e:	813b      	strh	r3, [r7, #8]
 800b7a0:	e075      	b.n	800b88e <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800b7a2:	89fa      	ldrh	r2, [r7, #14]
 800b7a4:	88fb      	ldrh	r3, [r7, #6]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	b298      	uxth	r0, r3
 800b7aa:	893a      	ldrh	r2, [r7, #8]
 800b7ac:	88bb      	ldrh	r3, [r7, #4]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	b299      	uxth	r1, r3
 800b7b2:	883a      	ldrh	r2, [r7, #0]
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	9300      	str	r3, [sp, #0]
 800b7b8:	2301      	movs	r3, #1
 800b7ba:	f7ff fdd7 	bl	800b36c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800b7be:	89fb      	ldrh	r3, [r7, #14]
 800b7c0:	88fa      	ldrh	r2, [r7, #6]
 800b7c2:	1ad3      	subs	r3, r2, r3
 800b7c4:	b298      	uxth	r0, r3
 800b7c6:	893a      	ldrh	r2, [r7, #8]
 800b7c8:	88bb      	ldrh	r3, [r7, #4]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	b299      	uxth	r1, r3
 800b7ce:	883a      	ldrh	r2, [r7, #0]
 800b7d0:	2301      	movs	r3, #1
 800b7d2:	9300      	str	r3, [sp, #0]
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	f7ff fdc9 	bl	800b36c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800b7da:	893b      	ldrh	r3, [r7, #8]
 800b7dc:	88fa      	ldrh	r2, [r7, #6]
 800b7de:	1ad3      	subs	r3, r2, r3
 800b7e0:	b298      	uxth	r0, r3
 800b7e2:	89fa      	ldrh	r2, [r7, #14]
 800b7e4:	88bb      	ldrh	r3, [r7, #4]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	b299      	uxth	r1, r3
 800b7ea:	883a      	ldrh	r2, [r7, #0]
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	f7ff fdbb 	bl	800b36c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800b7f6:	893b      	ldrh	r3, [r7, #8]
 800b7f8:	88fa      	ldrh	r2, [r7, #6]
 800b7fa:	1ad3      	subs	r3, r2, r3
 800b7fc:	b298      	uxth	r0, r3
 800b7fe:	89fb      	ldrh	r3, [r7, #14]
 800b800:	88ba      	ldrh	r2, [r7, #4]
 800b802:	1ad3      	subs	r3, r2, r3
 800b804:	b299      	uxth	r1, r3
 800b806:	883a      	ldrh	r2, [r7, #0]
 800b808:	2301      	movs	r3, #1
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	2301      	movs	r3, #1
 800b80e:	f7ff fdad 	bl	800b36c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 800b812:	89fb      	ldrh	r3, [r7, #14]
 800b814:	88fa      	ldrh	r2, [r7, #6]
 800b816:	1ad3      	subs	r3, r2, r3
 800b818:	b298      	uxth	r0, r3
 800b81a:	893b      	ldrh	r3, [r7, #8]
 800b81c:	88ba      	ldrh	r2, [r7, #4]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	b299      	uxth	r1, r3
 800b822:	883a      	ldrh	r2, [r7, #0]
 800b824:	2301      	movs	r3, #1
 800b826:	9300      	str	r3, [sp, #0]
 800b828:	2301      	movs	r3, #1
 800b82a:	f7ff fd9f 	bl	800b36c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800b82e:	89fa      	ldrh	r2, [r7, #14]
 800b830:	88fb      	ldrh	r3, [r7, #6]
 800b832:	4413      	add	r3, r2
 800b834:	b298      	uxth	r0, r3
 800b836:	893b      	ldrh	r3, [r7, #8]
 800b838:	88ba      	ldrh	r2, [r7, #4]
 800b83a:	1ad3      	subs	r3, r2, r3
 800b83c:	b299      	uxth	r1, r3
 800b83e:	883a      	ldrh	r2, [r7, #0]
 800b840:	2301      	movs	r3, #1
 800b842:	9300      	str	r3, [sp, #0]
 800b844:	2301      	movs	r3, #1
 800b846:	f7ff fd91 	bl	800b36c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800b84a:	893a      	ldrh	r2, [r7, #8]
 800b84c:	88fb      	ldrh	r3, [r7, #6]
 800b84e:	4413      	add	r3, r2
 800b850:	b298      	uxth	r0, r3
 800b852:	89fb      	ldrh	r3, [r7, #14]
 800b854:	88ba      	ldrh	r2, [r7, #4]
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	b299      	uxth	r1, r3
 800b85a:	883a      	ldrh	r2, [r7, #0]
 800b85c:	2301      	movs	r3, #1
 800b85e:	9300      	str	r3, [sp, #0]
 800b860:	2301      	movs	r3, #1
 800b862:	f7ff fd83 	bl	800b36c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800b866:	893a      	ldrh	r2, [r7, #8]
 800b868:	88fb      	ldrh	r3, [r7, #6]
 800b86a:	4413      	add	r3, r2
 800b86c:	b298      	uxth	r0, r3
 800b86e:	89fa      	ldrh	r2, [r7, #14]
 800b870:	88bb      	ldrh	r3, [r7, #4]
 800b872:	4413      	add	r3, r2
 800b874:	b299      	uxth	r1, r3
 800b876:	883a      	ldrh	r2, [r7, #0]
 800b878:	2301      	movs	r3, #1
 800b87a:	9300      	str	r3, [sp, #0]
 800b87c:	2301      	movs	r3, #1
 800b87e:	f7ff fd75 	bl	800b36c <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800b882:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b886:	b29b      	uxth	r3, r3
 800b888:	3301      	adds	r3, #1
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	813b      	strh	r3, [r7, #8]
 800b88e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b892:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b896:	429a      	cmp	r2, r3
 800b898:	dd83      	ble.n	800b7a2 <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 800b89a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	da09      	bge.n	800b8b6 <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 800b8a2:	89fb      	ldrh	r3, [r7, #14]
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	897b      	ldrh	r3, [r7, #10]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	b29b      	uxth	r3, r3
 800b8ae:	3306      	adds	r3, #6
 800b8b0:	b29b      	uxth	r3, r3
 800b8b2:	817b      	strh	r3, [r7, #10]
 800b8b4:	e013      	b.n	800b8de <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800b8b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b8ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b8be:	1ad3      	subs	r3, r2, r3
 800b8c0:	b29b      	uxth	r3, r3
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	897b      	ldrh	r3, [r7, #10]
 800b8c8:	4413      	add	r3, r2
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	330a      	adds	r3, #10
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800b8d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b8d6:	b29b      	uxth	r3, r3
 800b8d8:	3b01      	subs	r3, #1
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800b8de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b8e2:	b29b      	uxth	r3, r3
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	b29b      	uxth	r3, r3
 800b8e8:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800b8ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b8ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	f77f af52 	ble.w	800b79c <Paint_DrawCircle+0x5c>
 800b8f8:	e0ab      	b.n	800ba52 <Paint_DrawCircle+0x312>
 800b8fa:	bf00      	nop
 800b8fc:	20000e00 	.word	0x20000e00
 800b900:	0800fea8 	.word	0x0800fea8
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 800b904:	89fa      	ldrh	r2, [r7, #14]
 800b906:	88fb      	ldrh	r3, [r7, #6]
 800b908:	4413      	add	r3, r2
 800b90a:	b298      	uxth	r0, r3
 800b90c:	89ba      	ldrh	r2, [r7, #12]
 800b90e:	88bb      	ldrh	r3, [r7, #4]
 800b910:	4413      	add	r3, r2
 800b912:	b299      	uxth	r1, r3
 800b914:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b918:	883a      	ldrh	r2, [r7, #0]
 800b91a:	2401      	movs	r4, #1
 800b91c:	9400      	str	r4, [sp, #0]
 800b91e:	f7ff fd25 	bl	800b36c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800b922:	89fb      	ldrh	r3, [r7, #14]
 800b924:	88fa      	ldrh	r2, [r7, #6]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	b298      	uxth	r0, r3
 800b92a:	89ba      	ldrh	r2, [r7, #12]
 800b92c:	88bb      	ldrh	r3, [r7, #4]
 800b92e:	4413      	add	r3, r2
 800b930:	b299      	uxth	r1, r3
 800b932:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b936:	883a      	ldrh	r2, [r7, #0]
 800b938:	2401      	movs	r4, #1
 800b93a:	9400      	str	r4, [sp, #0]
 800b93c:	f7ff fd16 	bl	800b36c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 800b940:	89bb      	ldrh	r3, [r7, #12]
 800b942:	88fa      	ldrh	r2, [r7, #6]
 800b944:	1ad3      	subs	r3, r2, r3
 800b946:	b298      	uxth	r0, r3
 800b948:	89fa      	ldrh	r2, [r7, #14]
 800b94a:	88bb      	ldrh	r3, [r7, #4]
 800b94c:	4413      	add	r3, r2
 800b94e:	b299      	uxth	r1, r3
 800b950:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b954:	883a      	ldrh	r2, [r7, #0]
 800b956:	2401      	movs	r4, #1
 800b958:	9400      	str	r4, [sp, #0]
 800b95a:	f7ff fd07 	bl	800b36c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800b95e:	89bb      	ldrh	r3, [r7, #12]
 800b960:	88fa      	ldrh	r2, [r7, #6]
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	b298      	uxth	r0, r3
 800b966:	89fb      	ldrh	r3, [r7, #14]
 800b968:	88ba      	ldrh	r2, [r7, #4]
 800b96a:	1ad3      	subs	r3, r2, r3
 800b96c:	b299      	uxth	r1, r3
 800b96e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b972:	883a      	ldrh	r2, [r7, #0]
 800b974:	2401      	movs	r4, #1
 800b976:	9400      	str	r4, [sp, #0]
 800b978:	f7ff fcf8 	bl	800b36c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800b97c:	89fb      	ldrh	r3, [r7, #14]
 800b97e:	88fa      	ldrh	r2, [r7, #6]
 800b980:	1ad3      	subs	r3, r2, r3
 800b982:	b298      	uxth	r0, r3
 800b984:	89bb      	ldrh	r3, [r7, #12]
 800b986:	88ba      	ldrh	r2, [r7, #4]
 800b988:	1ad3      	subs	r3, r2, r3
 800b98a:	b299      	uxth	r1, r3
 800b98c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b990:	883a      	ldrh	r2, [r7, #0]
 800b992:	2401      	movs	r4, #1
 800b994:	9400      	str	r4, [sp, #0]
 800b996:	f7ff fce9 	bl	800b36c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800b99a:	89fa      	ldrh	r2, [r7, #14]
 800b99c:	88fb      	ldrh	r3, [r7, #6]
 800b99e:	4413      	add	r3, r2
 800b9a0:	b298      	uxth	r0, r3
 800b9a2:	89bb      	ldrh	r3, [r7, #12]
 800b9a4:	88ba      	ldrh	r2, [r7, #4]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	b299      	uxth	r1, r3
 800b9aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9ae:	883a      	ldrh	r2, [r7, #0]
 800b9b0:	2401      	movs	r4, #1
 800b9b2:	9400      	str	r4, [sp, #0]
 800b9b4:	f7ff fcda 	bl	800b36c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 800b9b8:	89ba      	ldrh	r2, [r7, #12]
 800b9ba:	88fb      	ldrh	r3, [r7, #6]
 800b9bc:	4413      	add	r3, r2
 800b9be:	b298      	uxth	r0, r3
 800b9c0:	89fb      	ldrh	r3, [r7, #14]
 800b9c2:	88ba      	ldrh	r2, [r7, #4]
 800b9c4:	1ad3      	subs	r3, r2, r3
 800b9c6:	b299      	uxth	r1, r3
 800b9c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9cc:	883a      	ldrh	r2, [r7, #0]
 800b9ce:	2401      	movs	r4, #1
 800b9d0:	9400      	str	r4, [sp, #0]
 800b9d2:	f7ff fccb 	bl	800b36c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 800b9d6:	89ba      	ldrh	r2, [r7, #12]
 800b9d8:	88fb      	ldrh	r3, [r7, #6]
 800b9da:	4413      	add	r3, r2
 800b9dc:	b298      	uxth	r0, r3
 800b9de:	89fa      	ldrh	r2, [r7, #14]
 800b9e0:	88bb      	ldrh	r3, [r7, #4]
 800b9e2:	4413      	add	r3, r2
 800b9e4:	b299      	uxth	r1, r3
 800b9e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b9ea:	883a      	ldrh	r2, [r7, #0]
 800b9ec:	2401      	movs	r4, #1
 800b9ee:	9400      	str	r4, [sp, #0]
 800b9f0:	f7ff fcbc 	bl	800b36c <Paint_DrawPoint>

            if (Esp < 0 )
 800b9f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	da09      	bge.n	800ba10 <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 800b9fc:	89fb      	ldrh	r3, [r7, #14]
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	b29a      	uxth	r2, r3
 800ba02:	897b      	ldrh	r3, [r7, #10]
 800ba04:	4413      	add	r3, r2
 800ba06:	b29b      	uxth	r3, r3
 800ba08:	3306      	adds	r3, #6
 800ba0a:	b29b      	uxth	r3, r3
 800ba0c:	817b      	strh	r3, [r7, #10]
 800ba0e:	e013      	b.n	800ba38 <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800ba10:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ba14:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	009b      	lsls	r3, r3, #2
 800ba1e:	b29a      	uxth	r2, r3
 800ba20:	897b      	ldrh	r3, [r7, #10]
 800ba22:	4413      	add	r3, r2
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	330a      	adds	r3, #10
 800ba28:	b29b      	uxth	r3, r3
 800ba2a:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800ba2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ba30:	b29b      	uxth	r3, r3
 800ba32:	3b01      	subs	r3, #1
 800ba34:	b29b      	uxth	r3, r3
 800ba36:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800ba38:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ba3c:	b29b      	uxth	r3, r3
 800ba3e:	3301      	adds	r3, #1
 800ba40:	b29b      	uxth	r3, r3
 800ba42:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 800ba44:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800ba48:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	f77f af59 	ble.w	800b904 <Paint_DrawCircle+0x1c4>
        }
    }
}
 800ba52:	3714      	adds	r7, #20
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd90      	pop	{r4, r7, pc}

0800ba58 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b088      	sub	sp, #32
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	607b      	str	r3, [r7, #4]
 800ba60:	4603      	mov	r3, r0
 800ba62:	81fb      	strh	r3, [r7, #14]
 800ba64:	460b      	mov	r3, r1
 800ba66:	81bb      	strh	r3, [r7, #12]
 800ba68:	4613      	mov	r3, r2
 800ba6a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800ba6c:	4b4d      	ldr	r3, [pc, #308]	; (800bba4 <Paint_DrawChar+0x14c>)
 800ba6e:	889b      	ldrh	r3, [r3, #4]
 800ba70:	89fa      	ldrh	r2, [r7, #14]
 800ba72:	429a      	cmp	r2, r3
 800ba74:	d804      	bhi.n	800ba80 <Paint_DrawChar+0x28>
 800ba76:	4b4b      	ldr	r3, [pc, #300]	; (800bba4 <Paint_DrawChar+0x14c>)
 800ba78:	88db      	ldrh	r3, [r3, #6]
 800ba7a:	89ba      	ldrh	r2, [r7, #12]
 800ba7c:	429a      	cmp	r2, r3
 800ba7e:	d903      	bls.n	800ba88 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800ba80:	4849      	ldr	r0, [pc, #292]	; (800bba8 <Paint_DrawChar+0x150>)
 800ba82:	f001 f887 	bl	800cb94 <puts>
        return;
 800ba86:	e089      	b.n	800bb9c <Paint_DrawChar+0x144>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800ba88:	7afb      	ldrb	r3, [r7, #11]
 800ba8a:	3b20      	subs	r3, #32
 800ba8c:	687a      	ldr	r2, [r7, #4]
 800ba8e:	88d2      	ldrh	r2, [r2, #6]
 800ba90:	fb02 f303 	mul.w	r3, r2, r3
 800ba94:	687a      	ldr	r2, [r7, #4]
 800ba96:	8892      	ldrh	r2, [r2, #4]
 800ba98:	08d2      	lsrs	r2, r2, #3
 800ba9a:	b292      	uxth	r2, r2
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	8892      	ldrh	r2, [r2, #4]
 800baa2:	f002 0207 	and.w	r2, r2, #7
 800baa6:	b292      	uxth	r2, r2
 800baa8:	2a00      	cmp	r2, #0
 800baaa:	bf14      	ite	ne
 800baac:	2201      	movne	r2, #1
 800baae:	2200      	moveq	r2, #0
 800bab0:	b2d2      	uxtb	r2, r2
 800bab2:	440a      	add	r2, r1
 800bab4:	fb02 f303 	mul.w	r3, r2, r3
 800bab8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	4413      	add	r3, r2
 800bac2:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800bac4:	2300      	movs	r3, #0
 800bac6:	83fb      	strh	r3, [r7, #30]
 800bac8:	e063      	b.n	800bb92 <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800baca:	2300      	movs	r3, #0
 800bacc:	83bb      	strh	r3, [r7, #28]
 800bace:	e04e      	b.n	800bb6e <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800bad0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800bad2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800bad6:	4293      	cmp	r3, r2
 800bad8:	d118      	bne.n	800bb0c <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 800bada:	69bb      	ldr	r3, [r7, #24]
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	4619      	mov	r1, r3
 800bae0:	8bbb      	ldrh	r3, [r7, #28]
 800bae2:	f003 0307 	and.w	r3, r3, #7
 800bae6:	2280      	movs	r2, #128	; 0x80
 800bae8:	fa42 f303 	asr.w	r3, r2, r3
 800baec:	400b      	ands	r3, r1
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d031      	beq.n	800bb56 <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800baf2:	89fa      	ldrh	r2, [r7, #14]
 800baf4:	8bbb      	ldrh	r3, [r7, #28]
 800baf6:	4413      	add	r3, r2
 800baf8:	b298      	uxth	r0, r3
 800bafa:	89ba      	ldrh	r2, [r7, #12]
 800bafc:	8bfb      	ldrh	r3, [r7, #30]
 800bafe:	4413      	add	r3, r2
 800bb00:	b29b      	uxth	r3, r3
 800bb02:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bb04:	4619      	mov	r1, r3
 800bb06:	f7ff fa15 	bl	800af34 <Paint_SetPixel>
 800bb0a:	e024      	b.n	800bb56 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	4619      	mov	r1, r3
 800bb12:	8bbb      	ldrh	r3, [r7, #28]
 800bb14:	f003 0307 	and.w	r3, r3, #7
 800bb18:	2280      	movs	r2, #128	; 0x80
 800bb1a:	fa42 f303 	asr.w	r3, r2, r3
 800bb1e:	400b      	ands	r3, r1
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d00c      	beq.n	800bb3e <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800bb24:	89fa      	ldrh	r2, [r7, #14]
 800bb26:	8bbb      	ldrh	r3, [r7, #28]
 800bb28:	4413      	add	r3, r2
 800bb2a:	b298      	uxth	r0, r3
 800bb2c:	89ba      	ldrh	r2, [r7, #12]
 800bb2e:	8bfb      	ldrh	r3, [r7, #30]
 800bb30:	4413      	add	r3, r2
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800bb36:	4619      	mov	r1, r3
 800bb38:	f7ff f9fc 	bl	800af34 <Paint_SetPixel>
 800bb3c:	e00b      	b.n	800bb56 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800bb3e:	89fa      	ldrh	r2, [r7, #14]
 800bb40:	8bbb      	ldrh	r3, [r7, #28]
 800bb42:	4413      	add	r3, r2
 800bb44:	b298      	uxth	r0, r3
 800bb46:	89ba      	ldrh	r2, [r7, #12]
 800bb48:	8bfb      	ldrh	r3, [r7, #30]
 800bb4a:	4413      	add	r3, r2
 800bb4c:	b29b      	uxth	r3, r3
 800bb4e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800bb50:	4619      	mov	r1, r3
 800bb52:	f7ff f9ef 	bl	800af34 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800bb56:	8bbb      	ldrh	r3, [r7, #28]
 800bb58:	f003 0307 	and.w	r3, r3, #7
 800bb5c:	b29b      	uxth	r3, r3
 800bb5e:	2b07      	cmp	r3, #7
 800bb60:	d102      	bne.n	800bb68 <Paint_DrawChar+0x110>
                ptr++;
 800bb62:	69bb      	ldr	r3, [r7, #24]
 800bb64:	3301      	adds	r3, #1
 800bb66:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800bb68:	8bbb      	ldrh	r3, [r7, #28]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	83bb      	strh	r3, [r7, #28]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	889b      	ldrh	r3, [r3, #4]
 800bb72:	8bba      	ldrh	r2, [r7, #28]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d3ab      	bcc.n	800bad0 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	889b      	ldrh	r3, [r3, #4]
 800bb7c:	f003 0307 	and.w	r3, r3, #7
 800bb80:	b29b      	uxth	r3, r3
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d002      	beq.n	800bb8c <Paint_DrawChar+0x134>
            ptr++;
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800bb8c:	8bfb      	ldrh	r3, [r7, #30]
 800bb8e:	3301      	adds	r3, #1
 800bb90:	83fb      	strh	r3, [r7, #30]
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	88db      	ldrh	r3, [r3, #6]
 800bb96:	8bfa      	ldrh	r2, [r7, #30]
 800bb98:	429a      	cmp	r2, r3
 800bb9a:	d396      	bcc.n	800baca <Paint_DrawChar+0x72>
    }// Write all
}
 800bb9c:	3720      	adds	r7, #32
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	20000e00 	.word	0x20000e00
 800bba8:	0800fee8 	.word	0x0800fee8

0800bbac <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b088      	sub	sp, #32
 800bbb0:	af02      	add	r7, sp, #8
 800bbb2:	60ba      	str	r2, [r7, #8]
 800bbb4:	607b      	str	r3, [r7, #4]
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	81fb      	strh	r3, [r7, #14]
 800bbba:	460b      	mov	r3, r1
 800bbbc:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800bbbe:	89fb      	ldrh	r3, [r7, #14]
 800bbc0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800bbc2:	89bb      	ldrh	r3, [r7, #12]
 800bbc4:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800bbc6:	4b21      	ldr	r3, [pc, #132]	; (800bc4c <Paint_DrawString_EN+0xa0>)
 800bbc8:	889b      	ldrh	r3, [r3, #4]
 800bbca:	89fa      	ldrh	r2, [r7, #14]
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d804      	bhi.n	800bbda <Paint_DrawString_EN+0x2e>
 800bbd0:	4b1e      	ldr	r3, [pc, #120]	; (800bc4c <Paint_DrawString_EN+0xa0>)
 800bbd2:	88db      	ldrh	r3, [r3, #6]
 800bbd4:	89ba      	ldrh	r2, [r7, #12]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d931      	bls.n	800bc3e <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800bbda:	481d      	ldr	r0, [pc, #116]	; (800bc50 <Paint_DrawString_EN+0xa4>)
 800bbdc:	f000 ffda 	bl	800cb94 <puts>
        return;
 800bbe0:	e031      	b.n	800bc46 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800bbe2:	8afb      	ldrh	r3, [r7, #22]
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	8892      	ldrh	r2, [r2, #4]
 800bbe8:	4413      	add	r3, r2
 800bbea:	4a18      	ldr	r2, [pc, #96]	; (800bc4c <Paint_DrawString_EN+0xa0>)
 800bbec:	8892      	ldrh	r2, [r2, #4]
 800bbee:	4293      	cmp	r3, r2
 800bbf0:	dd06      	ble.n	800bc00 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 800bbf2:	89fb      	ldrh	r3, [r7, #14]
 800bbf4:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	88da      	ldrh	r2, [r3, #6]
 800bbfa:	8abb      	ldrh	r3, [r7, #20]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800bc00:	8abb      	ldrh	r3, [r7, #20]
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	88d2      	ldrh	r2, [r2, #6]
 800bc06:	4413      	add	r3, r2
 800bc08:	4a10      	ldr	r2, [pc, #64]	; (800bc4c <Paint_DrawString_EN+0xa0>)
 800bc0a:	88d2      	ldrh	r2, [r2, #6]
 800bc0c:	4293      	cmp	r3, r2
 800bc0e:	dd03      	ble.n	800bc18 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 800bc10:	89fb      	ldrh	r3, [r7, #14]
 800bc12:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800bc14:	89bb      	ldrh	r3, [r7, #12]
 800bc16:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	781a      	ldrb	r2, [r3, #0]
 800bc1c:	8ab9      	ldrh	r1, [r7, #20]
 800bc1e:	8af8      	ldrh	r0, [r7, #22]
 800bc20:	8c3b      	ldrh	r3, [r7, #32]
 800bc22:	9301      	str	r3, [sp, #4]
 800bc24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bc26:	9300      	str	r3, [sp, #0]
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f7ff ff15 	bl	800ba58 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	3301      	adds	r3, #1
 800bc32:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	889a      	ldrh	r2, [r3, #4]
 800bc38:	8afb      	ldrh	r3, [r7, #22]
 800bc3a:	4413      	add	r3, r2
 800bc3c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	781b      	ldrb	r3, [r3, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d1cd      	bne.n	800bbe2 <Paint_DrawString_EN+0x36>
    }
}
 800bc46:	3718      	adds	r7, #24
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd80      	pop	{r7, pc}
 800bc4c:	20000e00 	.word	0x20000e00
 800bc50:	0800ff28 	.word	0x0800ff28

0800bc54 <OLED_Reset>:
/*******************************************************************************
function:
            Hardware reset
*******************************************************************************/
static void OLED_Reset(void)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	af00      	add	r7, sp, #0
	OLED_RST_1;
 800bc58:	2201      	movs	r2, #1
 800bc5a:	2110      	movs	r1, #16
 800bc5c:	480b      	ldr	r0, [pc, #44]	; (800bc8c <OLED_Reset+0x38>)
 800bc5e:	f7fa fde7 	bl	8006830 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800bc62:	2064      	movs	r0, #100	; 0x64
 800bc64:	f7ff f87c 	bl	800ad60 <Driver_Delay_ms>
    OLED_RST_0;
 800bc68:	2200      	movs	r2, #0
 800bc6a:	2110      	movs	r1, #16
 800bc6c:	4807      	ldr	r0, [pc, #28]	; (800bc8c <OLED_Reset+0x38>)
 800bc6e:	f7fa fddf 	bl	8006830 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800bc72:	2064      	movs	r0, #100	; 0x64
 800bc74:	f7ff f874 	bl	800ad60 <Driver_Delay_ms>
    OLED_RST_1;
 800bc78:	2201      	movs	r2, #1
 800bc7a:	2110      	movs	r1, #16
 800bc7c:	4803      	ldr	r0, [pc, #12]	; (800bc8c <OLED_Reset+0x38>)
 800bc7e:	f7fa fdd7 	bl	8006830 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800bc82:	2064      	movs	r0, #100	; 0x64
 800bc84:	f7ff f86c 	bl	800ad60 <Driver_Delay_ms>
}
 800bc88:	bf00      	nop
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	48000400 	.word	0x48000400

0800bc90 <OLED_WriteReg>:
/*******************************************************************************
function:
            Write register address and data
*******************************************************************************/
static void OLED_WriteReg(uint8_t Reg)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	4603      	mov	r3, r0
 800bc98:	71fb      	strb	r3, [r7, #7]
#if USE_SPI_4W
	OLED_DC_0;
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bca0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bca4:	f7fa fdc4 	bl	8006830 <HAL_GPIO_WritePin>
	OLED_CS_0;
 800bca8:	2200      	movs	r2, #0
 800bcaa:	2140      	movs	r1, #64	; 0x40
 800bcac:	4807      	ldr	r0, [pc, #28]	; (800bccc <OLED_WriteReg+0x3c>)
 800bcae:	f7fa fdbf 	bl	8006830 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Reg);
 800bcb2:	79fb      	ldrb	r3, [r7, #7]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7ff f819 	bl	800acec <SPI4W_Write_Byte>
    OLED_CS_1;
 800bcba:	2201      	movs	r2, #1
 800bcbc:	2140      	movs	r1, #64	; 0x40
 800bcbe:	4803      	ldr	r0, [pc, #12]	; (800bccc <OLED_WriteReg+0x3c>)
 800bcc0:	f7fa fdb6 	bl	8006830 <HAL_GPIO_WritePin>
#elif USE_IIC
    I2C_Write_Byte(Reg,IIC_CMD);
#endif
}
 800bcc4:	bf00      	nop
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	48000400 	.word	0x48000400

0800bcd0 <OLED_WriteData>:

static void OLED_WriteData(uint8_t Data)
{   
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	4603      	mov	r3, r0
 800bcd8:	71fb      	strb	r3, [r7, #7]
#if USE_SPI_4W
	OLED_DC_1;
 800bcda:	2201      	movs	r2, #1
 800bcdc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bce4:	f7fa fda4 	bl	8006830 <HAL_GPIO_WritePin>
	OLED_CS_0;
 800bce8:	2200      	movs	r2, #0
 800bcea:	2140      	movs	r1, #64	; 0x40
 800bcec:	4807      	ldr	r0, [pc, #28]	; (800bd0c <OLED_WriteData+0x3c>)
 800bcee:	f7fa fd9f 	bl	8006830 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Data);
 800bcf2:	79fb      	ldrb	r3, [r7, #7]
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	f7fe fff9 	bl	800acec <SPI4W_Write_Byte>
    OLED_CS_1;
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	2140      	movs	r1, #64	; 0x40
 800bcfe:	4803      	ldr	r0, [pc, #12]	; (800bd0c <OLED_WriteData+0x3c>)
 800bd00:	f7fa fd96 	bl	8006830 <HAL_GPIO_WritePin>
#elif USE_IIC
    I2C_Write_Byte(Data,IIC_RAM);
#endif
}
 800bd04:	bf00      	nop
 800bd06:	3708      	adds	r7, #8
 800bd08:	46bd      	mov	sp, r7
 800bd0a:	bd80      	pop	{r7, pc}
 800bd0c:	48000400 	.word	0x48000400

0800bd10 <OLED_InitReg>:
/*******************************************************************************
function:
        Common register initialization
*******************************************************************************/
static void OLED_InitReg(void)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	af00      	add	r7, sp, #0
    OLED_WriteReg(0xae);//--turn off oled panel
 800bd14:	20ae      	movs	r0, #174	; 0xae
 800bd16:	f7ff ffbb 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0x15);    //   set column address
 800bd1a:	2015      	movs	r0, #21
 800bd1c:	f7ff ffb8 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start column   0
 800bd20:	2000      	movs	r0, #0
 800bd22:	f7ff ffb5 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end column   127
 800bd26:	207f      	movs	r0, #127	; 0x7f
 800bd28:	f7ff ffb2 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0x75);    //   set row address
 800bd2c:	2075      	movs	r0, #117	; 0x75
 800bd2e:	f7ff ffaf 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start row   0
 800bd32:	2000      	movs	r0, #0
 800bd34:	f7ff ffac 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end row   127
 800bd38:	207f      	movs	r0, #127	; 0x7f
 800bd3a:	f7ff ffa9 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0x81);  // set contrast control
 800bd3e:	2081      	movs	r0, #129	; 0x81
 800bd40:	f7ff ffa6 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x80);
 800bd44:	2080      	movs	r0, #128	; 0x80
 800bd46:	f7ff ffa3 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xa0);    // gment remap
 800bd4a:	20a0      	movs	r0, #160	; 0xa0
 800bd4c:	f7ff ffa0 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x51);   //51
 800bd50:	2051      	movs	r0, #81	; 0x51
 800bd52:	f7ff ff9d 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xa1);  // start line
 800bd56:	20a1      	movs	r0, #161	; 0xa1
 800bd58:	f7ff ff9a 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f7ff ff97 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xa2);  // display offset
 800bd62:	20a2      	movs	r0, #162	; 0xa2
 800bd64:	f7ff ff94 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800bd68:	2000      	movs	r0, #0
 800bd6a:	f7ff ff91 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xa4);    // rmal display
 800bd6e:	20a4      	movs	r0, #164	; 0xa4
 800bd70:	f7ff ff8e 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0xa8);    // set multiplex ratio
 800bd74:	20a8      	movs	r0, #168	; 0xa8
 800bd76:	f7ff ff8b 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x7f);
 800bd7a:	207f      	movs	r0, #127	; 0x7f
 800bd7c:	f7ff ff88 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xb1);  // set phase leghth
 800bd80:	20b1      	movs	r0, #177	; 0xb1
 800bd82:	f7ff ff85 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0xf1);
 800bd86:	20f1      	movs	r0, #241	; 0xf1
 800bd88:	f7ff ff82 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xb3);  // set dclk
 800bd8c:	20b3      	movs	r0, #179	; 0xb3
 800bd8e:	f7ff ff7f 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x00);  //80Hz:0xc1 90Hz:0xe1   100Hz:0x00   110Hz:0x30 120Hz:0x50   130Hz:0x70     01
 800bd92:	2000      	movs	r0, #0
 800bd94:	f7ff ff7c 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xab);  //
 800bd98:	20ab      	movs	r0, #171	; 0xab
 800bd9a:	f7ff ff79 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x01);  //
 800bd9e:	2001      	movs	r0, #1
 800bda0:	f7ff ff76 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xb6);  // set phase leghth
 800bda4:	20b6      	movs	r0, #182	; 0xb6
 800bda6:	f7ff ff73 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800bdaa:	200f      	movs	r0, #15
 800bdac:	f7ff ff70 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xbe);
 800bdb0:	20be      	movs	r0, #190	; 0xbe
 800bdb2:	f7ff ff6d 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800bdb6:	200f      	movs	r0, #15
 800bdb8:	f7ff ff6a 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xbc);
 800bdbc:	20bc      	movs	r0, #188	; 0xbc
 800bdbe:	f7ff ff67 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x08);
 800bdc2:	2008      	movs	r0, #8
 800bdc4:	f7ff ff64 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xd5);
 800bdc8:	20d5      	movs	r0, #213	; 0xd5
 800bdca:	f7ff ff61 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x62);
 800bdce:	2062      	movs	r0, #98	; 0x62
 800bdd0:	f7ff ff5e 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0xfd);
 800bdd4:	20fd      	movs	r0, #253	; 0xfd
 800bdd6:	f7ff ff5b 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(0x12);
 800bdda:	2012      	movs	r0, #18
 800bddc:	f7ff ff58 	bl	800bc90 <OLED_WriteReg>

}
 800bde0:	bf00      	nop
 800bde2:	bd80      	pop	{r7, pc}

0800bde4 <OLED_1in5_Init>:
/********************************************************************************
function:
            initialization
********************************************************************************/
void OLED_1in5_Init(void)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	af00      	add	r7, sp, #0
    //Hardware reset
    OLED_Reset();
 800bde8:	f7ff ff34 	bl	800bc54 <OLED_Reset>

    //Set the initialization register
    OLED_InitReg();
 800bdec:	f7ff ff90 	bl	800bd10 <OLED_InitReg>
    Driver_Delay_ms(200);
 800bdf0:	20c8      	movs	r0, #200	; 0xc8
 800bdf2:	f7fe ffb5 	bl	800ad60 <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_WriteReg(0xAF);
 800bdf6:	20af      	movs	r0, #175	; 0xaf
 800bdf8:	f7ff ff4a 	bl	800bc90 <OLED_WriteReg>
}
 800bdfc:	bf00      	nop
 800bdfe:	bd80      	pop	{r7, pc}

0800be00 <OLED_SetWindow>:
        Ystart :   Y direction Start coordinates
        Xend   :   X direction end coordinates
        Yend   :   Y direction end coordinates
********************************************************************************/
static void OLED_SetWindow(UBYTE Xstart, UBYTE Ystart, UBYTE Xend, UBYTE Yend)
{
 800be00:	b590      	push	{r4, r7, lr}
 800be02:	b083      	sub	sp, #12
 800be04:	af00      	add	r7, sp, #0
 800be06:	4604      	mov	r4, r0
 800be08:	4608      	mov	r0, r1
 800be0a:	4611      	mov	r1, r2
 800be0c:	461a      	mov	r2, r3
 800be0e:	4623      	mov	r3, r4
 800be10:	71fb      	strb	r3, [r7, #7]
 800be12:	4603      	mov	r3, r0
 800be14:	71bb      	strb	r3, [r7, #6]
 800be16:	460b      	mov	r3, r1
 800be18:	717b      	strb	r3, [r7, #5]
 800be1a:	4613      	mov	r3, r2
 800be1c:	713b      	strb	r3, [r7, #4]
    if((Xstart > OLED_1in5_WIDTH) || (Ystart > OLED_1in5_HEIGHT) ||
 800be1e:	79fb      	ldrb	r3, [r7, #7]
 800be20:	2b80      	cmp	r3, #128	; 0x80
 800be22:	d827      	bhi.n	800be74 <OLED_SetWindow+0x74>
 800be24:	79bb      	ldrb	r3, [r7, #6]
 800be26:	2b80      	cmp	r3, #128	; 0x80
 800be28:	d824      	bhi.n	800be74 <OLED_SetWindow+0x74>
 800be2a:	797b      	ldrb	r3, [r7, #5]
 800be2c:	2b80      	cmp	r3, #128	; 0x80
 800be2e:	d821      	bhi.n	800be74 <OLED_SetWindow+0x74>
       (Xend > OLED_1in5_WIDTH) || (Yend > OLED_1in5_HEIGHT))
 800be30:	793b      	ldrb	r3, [r7, #4]
 800be32:	2b80      	cmp	r3, #128	; 0x80
 800be34:	d81e      	bhi.n	800be74 <OLED_SetWindow+0x74>
        return;

    OLED_WriteReg(0x15);
 800be36:	2015      	movs	r0, #21
 800be38:	f7ff ff2a 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(Xstart/2);
 800be3c:	79fb      	ldrb	r3, [r7, #7]
 800be3e:	085b      	lsrs	r3, r3, #1
 800be40:	b2db      	uxtb	r3, r3
 800be42:	4618      	mov	r0, r3
 800be44:	f7ff ff24 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(Xend/2 - 1);
 800be48:	797b      	ldrb	r3, [r7, #5]
 800be4a:	085b      	lsrs	r3, r3, #1
 800be4c:	b2db      	uxtb	r3, r3
 800be4e:	3b01      	subs	r3, #1
 800be50:	b2db      	uxtb	r3, r3
 800be52:	4618      	mov	r0, r3
 800be54:	f7ff ff1c 	bl	800bc90 <OLED_WriteReg>

    OLED_WriteReg(0x75);
 800be58:	2075      	movs	r0, #117	; 0x75
 800be5a:	f7ff ff19 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(Ystart);
 800be5e:	79bb      	ldrb	r3, [r7, #6]
 800be60:	4618      	mov	r0, r3
 800be62:	f7ff ff15 	bl	800bc90 <OLED_WriteReg>
    OLED_WriteReg(Yend - 1);
 800be66:	793b      	ldrb	r3, [r7, #4]
 800be68:	3b01      	subs	r3, #1
 800be6a:	b2db      	uxtb	r3, r3
 800be6c:	4618      	mov	r0, r3
 800be6e:	f7ff ff0f 	bl	800bc90 <OLED_WriteReg>
 800be72:	e000      	b.n	800be76 <OLED_SetWindow+0x76>
        return;
 800be74:	bf00      	nop
}
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd90      	pop	{r4, r7, pc}

0800be7c <OLED_1in5_Clear>:
/********************************************************************************
function:
            Clear screen
********************************************************************************/
void OLED_1in5_Clear(void)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
    UWORD i;
    OLED_SetWindow(0, 0, 128, 128);
 800be82:	2380      	movs	r3, #128	; 0x80
 800be84:	2280      	movs	r2, #128	; 0x80
 800be86:	2100      	movs	r1, #0
 800be88:	2000      	movs	r0, #0
 800be8a:	f7ff ffb9 	bl	800be00 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 800be8e:	2300      	movs	r3, #0
 800be90:	80fb      	strh	r3, [r7, #6]
 800be92:	e005      	b.n	800bea0 <OLED_1in5_Clear+0x24>
        OLED_WriteData(0x00);
 800be94:	2000      	movs	r0, #0
 800be96:	f7ff ff1b 	bl	800bcd0 <OLED_WriteData>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 800be9a:	88fb      	ldrh	r3, [r7, #6]
 800be9c:	3301      	adds	r3, #1
 800be9e:	80fb      	strh	r3, [r7, #6]
 800bea0:	88fb      	ldrh	r3, [r7, #6]
 800bea2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bea6:	d3f5      	bcc.n	800be94 <OLED_1in5_Clear+0x18>
    }
}
 800bea8:	bf00      	nop
 800beaa:	bf00      	nop
 800beac:	3708      	adds	r7, #8
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <OLED_1in5_Display>:

/********************************************************************************
function:   Update all memory to OLED
********************************************************************************/
void OLED_1in5_Display(const UBYTE *Image)
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b084      	sub	sp, #16
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
    UWORD i, j, temp;
    OLED_SetWindow(0, 0, 128, 128);
 800beba:	2380      	movs	r3, #128	; 0x80
 800bebc:	2280      	movs	r2, #128	; 0x80
 800bebe:	2100      	movs	r1, #0
 800bec0:	2000      	movs	r0, #0
 800bec2:	f7ff ff9d 	bl	800be00 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 800bec6:	2300      	movs	r3, #0
 800bec8:	81fb      	strh	r3, [r7, #14]
 800beca:	e019      	b.n	800bf00 <OLED_1in5_Display+0x4e>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 800becc:	2300      	movs	r3, #0
 800bece:	81bb      	strh	r3, [r7, #12]
 800bed0:	e010      	b.n	800bef4 <OLED_1in5_Display+0x42>
        {
            temp = Image[j + i*64];
 800bed2:	89ba      	ldrh	r2, [r7, #12]
 800bed4:	89fb      	ldrh	r3, [r7, #14]
 800bed6:	019b      	lsls	r3, r3, #6
 800bed8:	4413      	add	r3, r2
 800beda:	461a      	mov	r2, r3
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4413      	add	r3, r2
 800bee0:	781b      	ldrb	r3, [r3, #0]
 800bee2:	817b      	strh	r3, [r7, #10]
            OLED_WriteData(temp);
 800bee4:	897b      	ldrh	r3, [r7, #10]
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	4618      	mov	r0, r3
 800beea:	f7ff fef1 	bl	800bcd0 <OLED_WriteData>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 800beee:	89bb      	ldrh	r3, [r7, #12]
 800bef0:	3301      	adds	r3, #1
 800bef2:	81bb      	strh	r3, [r7, #12]
 800bef4:	89bb      	ldrh	r3, [r7, #12]
 800bef6:	2b3f      	cmp	r3, #63	; 0x3f
 800bef8:	d9eb      	bls.n	800bed2 <OLED_1in5_Display+0x20>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 800befa:	89fb      	ldrh	r3, [r7, #14]
 800befc:	3301      	adds	r3, #1
 800befe:	81fb      	strh	r3, [r7, #14]
 800bf00:	89fb      	ldrh	r3, [r7, #14]
 800bf02:	2b7f      	cmp	r3, #127	; 0x7f
 800bf04:	d9e2      	bls.n	800becc <OLED_1in5_Display+0x1a>
        }
}
 800bf06:	bf00      	nop
 800bf08:	bf00      	nop
 800bf0a:	3710      	adds	r7, #16
 800bf0c:	46bd      	mov	sp, r7
 800bf0e:	bd80      	pop	{r7, pc}

0800bf10 <malloc>:
 800bf10:	4b02      	ldr	r3, [pc, #8]	; (800bf1c <malloc+0xc>)
 800bf12:	4601      	mov	r1, r0
 800bf14:	6818      	ldr	r0, [r3, #0]
 800bf16:	f000 b823 	b.w	800bf60 <_malloc_r>
 800bf1a:	bf00      	nop
 800bf1c:	200000cc 	.word	0x200000cc

0800bf20 <sbrk_aligned>:
 800bf20:	b570      	push	{r4, r5, r6, lr}
 800bf22:	4e0e      	ldr	r6, [pc, #56]	; (800bf5c <sbrk_aligned+0x3c>)
 800bf24:	460c      	mov	r4, r1
 800bf26:	6831      	ldr	r1, [r6, #0]
 800bf28:	4605      	mov	r5, r0
 800bf2a:	b911      	cbnz	r1, 800bf32 <sbrk_aligned+0x12>
 800bf2c:	f000 ff72 	bl	800ce14 <_sbrk_r>
 800bf30:	6030      	str	r0, [r6, #0]
 800bf32:	4621      	mov	r1, r4
 800bf34:	4628      	mov	r0, r5
 800bf36:	f000 ff6d 	bl	800ce14 <_sbrk_r>
 800bf3a:	1c43      	adds	r3, r0, #1
 800bf3c:	d00a      	beq.n	800bf54 <sbrk_aligned+0x34>
 800bf3e:	1cc4      	adds	r4, r0, #3
 800bf40:	f024 0403 	bic.w	r4, r4, #3
 800bf44:	42a0      	cmp	r0, r4
 800bf46:	d007      	beq.n	800bf58 <sbrk_aligned+0x38>
 800bf48:	1a21      	subs	r1, r4, r0
 800bf4a:	4628      	mov	r0, r5
 800bf4c:	f000 ff62 	bl	800ce14 <_sbrk_r>
 800bf50:	3001      	adds	r0, #1
 800bf52:	d101      	bne.n	800bf58 <sbrk_aligned+0x38>
 800bf54:	f04f 34ff 	mov.w	r4, #4294967295
 800bf58:	4620      	mov	r0, r4
 800bf5a:	bd70      	pop	{r4, r5, r6, pc}
 800bf5c:	20000e1c 	.word	0x20000e1c

0800bf60 <_malloc_r>:
 800bf60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf64:	1ccd      	adds	r5, r1, #3
 800bf66:	f025 0503 	bic.w	r5, r5, #3
 800bf6a:	3508      	adds	r5, #8
 800bf6c:	2d0c      	cmp	r5, #12
 800bf6e:	bf38      	it	cc
 800bf70:	250c      	movcc	r5, #12
 800bf72:	2d00      	cmp	r5, #0
 800bf74:	4607      	mov	r7, r0
 800bf76:	db01      	blt.n	800bf7c <_malloc_r+0x1c>
 800bf78:	42a9      	cmp	r1, r5
 800bf7a:	d905      	bls.n	800bf88 <_malloc_r+0x28>
 800bf7c:	230c      	movs	r3, #12
 800bf7e:	603b      	str	r3, [r7, #0]
 800bf80:	2600      	movs	r6, #0
 800bf82:	4630      	mov	r0, r6
 800bf84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c05c <_malloc_r+0xfc>
 800bf8c:	f000 f868 	bl	800c060 <__malloc_lock>
 800bf90:	f8d8 3000 	ldr.w	r3, [r8]
 800bf94:	461c      	mov	r4, r3
 800bf96:	bb5c      	cbnz	r4, 800bff0 <_malloc_r+0x90>
 800bf98:	4629      	mov	r1, r5
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	f7ff ffc0 	bl	800bf20 <sbrk_aligned>
 800bfa0:	1c43      	adds	r3, r0, #1
 800bfa2:	4604      	mov	r4, r0
 800bfa4:	d155      	bne.n	800c052 <_malloc_r+0xf2>
 800bfa6:	f8d8 4000 	ldr.w	r4, [r8]
 800bfaa:	4626      	mov	r6, r4
 800bfac:	2e00      	cmp	r6, #0
 800bfae:	d145      	bne.n	800c03c <_malloc_r+0xdc>
 800bfb0:	2c00      	cmp	r4, #0
 800bfb2:	d048      	beq.n	800c046 <_malloc_r+0xe6>
 800bfb4:	6823      	ldr	r3, [r4, #0]
 800bfb6:	4631      	mov	r1, r6
 800bfb8:	4638      	mov	r0, r7
 800bfba:	eb04 0903 	add.w	r9, r4, r3
 800bfbe:	f000 ff29 	bl	800ce14 <_sbrk_r>
 800bfc2:	4581      	cmp	r9, r0
 800bfc4:	d13f      	bne.n	800c046 <_malloc_r+0xe6>
 800bfc6:	6821      	ldr	r1, [r4, #0]
 800bfc8:	1a6d      	subs	r5, r5, r1
 800bfca:	4629      	mov	r1, r5
 800bfcc:	4638      	mov	r0, r7
 800bfce:	f7ff ffa7 	bl	800bf20 <sbrk_aligned>
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	d037      	beq.n	800c046 <_malloc_r+0xe6>
 800bfd6:	6823      	ldr	r3, [r4, #0]
 800bfd8:	442b      	add	r3, r5
 800bfda:	6023      	str	r3, [r4, #0]
 800bfdc:	f8d8 3000 	ldr.w	r3, [r8]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d038      	beq.n	800c056 <_malloc_r+0xf6>
 800bfe4:	685a      	ldr	r2, [r3, #4]
 800bfe6:	42a2      	cmp	r2, r4
 800bfe8:	d12b      	bne.n	800c042 <_malloc_r+0xe2>
 800bfea:	2200      	movs	r2, #0
 800bfec:	605a      	str	r2, [r3, #4]
 800bfee:	e00f      	b.n	800c010 <_malloc_r+0xb0>
 800bff0:	6822      	ldr	r2, [r4, #0]
 800bff2:	1b52      	subs	r2, r2, r5
 800bff4:	d41f      	bmi.n	800c036 <_malloc_r+0xd6>
 800bff6:	2a0b      	cmp	r2, #11
 800bff8:	d917      	bls.n	800c02a <_malloc_r+0xca>
 800bffa:	1961      	adds	r1, r4, r5
 800bffc:	42a3      	cmp	r3, r4
 800bffe:	6025      	str	r5, [r4, #0]
 800c000:	bf18      	it	ne
 800c002:	6059      	strne	r1, [r3, #4]
 800c004:	6863      	ldr	r3, [r4, #4]
 800c006:	bf08      	it	eq
 800c008:	f8c8 1000 	streq.w	r1, [r8]
 800c00c:	5162      	str	r2, [r4, r5]
 800c00e:	604b      	str	r3, [r1, #4]
 800c010:	4638      	mov	r0, r7
 800c012:	f104 060b 	add.w	r6, r4, #11
 800c016:	f000 f829 	bl	800c06c <__malloc_unlock>
 800c01a:	f026 0607 	bic.w	r6, r6, #7
 800c01e:	1d23      	adds	r3, r4, #4
 800c020:	1af2      	subs	r2, r6, r3
 800c022:	d0ae      	beq.n	800bf82 <_malloc_r+0x22>
 800c024:	1b9b      	subs	r3, r3, r6
 800c026:	50a3      	str	r3, [r4, r2]
 800c028:	e7ab      	b.n	800bf82 <_malloc_r+0x22>
 800c02a:	42a3      	cmp	r3, r4
 800c02c:	6862      	ldr	r2, [r4, #4]
 800c02e:	d1dd      	bne.n	800bfec <_malloc_r+0x8c>
 800c030:	f8c8 2000 	str.w	r2, [r8]
 800c034:	e7ec      	b.n	800c010 <_malloc_r+0xb0>
 800c036:	4623      	mov	r3, r4
 800c038:	6864      	ldr	r4, [r4, #4]
 800c03a:	e7ac      	b.n	800bf96 <_malloc_r+0x36>
 800c03c:	4634      	mov	r4, r6
 800c03e:	6876      	ldr	r6, [r6, #4]
 800c040:	e7b4      	b.n	800bfac <_malloc_r+0x4c>
 800c042:	4613      	mov	r3, r2
 800c044:	e7cc      	b.n	800bfe0 <_malloc_r+0x80>
 800c046:	230c      	movs	r3, #12
 800c048:	603b      	str	r3, [r7, #0]
 800c04a:	4638      	mov	r0, r7
 800c04c:	f000 f80e 	bl	800c06c <__malloc_unlock>
 800c050:	e797      	b.n	800bf82 <_malloc_r+0x22>
 800c052:	6025      	str	r5, [r4, #0]
 800c054:	e7dc      	b.n	800c010 <_malloc_r+0xb0>
 800c056:	605b      	str	r3, [r3, #4]
 800c058:	deff      	udf	#255	; 0xff
 800c05a:	bf00      	nop
 800c05c:	20000e18 	.word	0x20000e18

0800c060 <__malloc_lock>:
 800c060:	4801      	ldr	r0, [pc, #4]	; (800c068 <__malloc_lock+0x8>)
 800c062:	f000 bf24 	b.w	800ceae <__retarget_lock_acquire_recursive>
 800c066:	bf00      	nop
 800c068:	20000f60 	.word	0x20000f60

0800c06c <__malloc_unlock>:
 800c06c:	4801      	ldr	r0, [pc, #4]	; (800c074 <__malloc_unlock+0x8>)
 800c06e:	f000 bf1f 	b.w	800ceb0 <__retarget_lock_release_recursive>
 800c072:	bf00      	nop
 800c074:	20000f60 	.word	0x20000f60

0800c078 <__cvt>:
 800c078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c07c:	ec55 4b10 	vmov	r4, r5, d0
 800c080:	2d00      	cmp	r5, #0
 800c082:	460e      	mov	r6, r1
 800c084:	4619      	mov	r1, r3
 800c086:	462b      	mov	r3, r5
 800c088:	bfbb      	ittet	lt
 800c08a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c08e:	461d      	movlt	r5, r3
 800c090:	2300      	movge	r3, #0
 800c092:	232d      	movlt	r3, #45	; 0x2d
 800c094:	700b      	strb	r3, [r1, #0]
 800c096:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c098:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c09c:	4691      	mov	r9, r2
 800c09e:	f023 0820 	bic.w	r8, r3, #32
 800c0a2:	bfbc      	itt	lt
 800c0a4:	4622      	movlt	r2, r4
 800c0a6:	4614      	movlt	r4, r2
 800c0a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0ac:	d005      	beq.n	800c0ba <__cvt+0x42>
 800c0ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c0b2:	d100      	bne.n	800c0b6 <__cvt+0x3e>
 800c0b4:	3601      	adds	r6, #1
 800c0b6:	2102      	movs	r1, #2
 800c0b8:	e000      	b.n	800c0bc <__cvt+0x44>
 800c0ba:	2103      	movs	r1, #3
 800c0bc:	ab03      	add	r3, sp, #12
 800c0be:	9301      	str	r3, [sp, #4]
 800c0c0:	ab02      	add	r3, sp, #8
 800c0c2:	9300      	str	r3, [sp, #0]
 800c0c4:	ec45 4b10 	vmov	d0, r4, r5
 800c0c8:	4653      	mov	r3, sl
 800c0ca:	4632      	mov	r2, r6
 800c0cc:	f000 ff7c 	bl	800cfc8 <_dtoa_r>
 800c0d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c0d4:	4607      	mov	r7, r0
 800c0d6:	d102      	bne.n	800c0de <__cvt+0x66>
 800c0d8:	f019 0f01 	tst.w	r9, #1
 800c0dc:	d022      	beq.n	800c124 <__cvt+0xac>
 800c0de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c0e2:	eb07 0906 	add.w	r9, r7, r6
 800c0e6:	d110      	bne.n	800c10a <__cvt+0x92>
 800c0e8:	783b      	ldrb	r3, [r7, #0]
 800c0ea:	2b30      	cmp	r3, #48	; 0x30
 800c0ec:	d10a      	bne.n	800c104 <__cvt+0x8c>
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	4629      	mov	r1, r5
 800c0f6:	f7f4 fd0f 	bl	8000b18 <__aeabi_dcmpeq>
 800c0fa:	b918      	cbnz	r0, 800c104 <__cvt+0x8c>
 800c0fc:	f1c6 0601 	rsb	r6, r6, #1
 800c100:	f8ca 6000 	str.w	r6, [sl]
 800c104:	f8da 3000 	ldr.w	r3, [sl]
 800c108:	4499      	add	r9, r3
 800c10a:	2200      	movs	r2, #0
 800c10c:	2300      	movs	r3, #0
 800c10e:	4620      	mov	r0, r4
 800c110:	4629      	mov	r1, r5
 800c112:	f7f4 fd01 	bl	8000b18 <__aeabi_dcmpeq>
 800c116:	b108      	cbz	r0, 800c11c <__cvt+0xa4>
 800c118:	f8cd 900c 	str.w	r9, [sp, #12]
 800c11c:	2230      	movs	r2, #48	; 0x30
 800c11e:	9b03      	ldr	r3, [sp, #12]
 800c120:	454b      	cmp	r3, r9
 800c122:	d307      	bcc.n	800c134 <__cvt+0xbc>
 800c124:	9b03      	ldr	r3, [sp, #12]
 800c126:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c128:	1bdb      	subs	r3, r3, r7
 800c12a:	4638      	mov	r0, r7
 800c12c:	6013      	str	r3, [r2, #0]
 800c12e:	b004      	add	sp, #16
 800c130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c134:	1c59      	adds	r1, r3, #1
 800c136:	9103      	str	r1, [sp, #12]
 800c138:	701a      	strb	r2, [r3, #0]
 800c13a:	e7f0      	b.n	800c11e <__cvt+0xa6>

0800c13c <__exponent>:
 800c13c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c13e:	4603      	mov	r3, r0
 800c140:	2900      	cmp	r1, #0
 800c142:	bfb8      	it	lt
 800c144:	4249      	neglt	r1, r1
 800c146:	f803 2b02 	strb.w	r2, [r3], #2
 800c14a:	bfb4      	ite	lt
 800c14c:	222d      	movlt	r2, #45	; 0x2d
 800c14e:	222b      	movge	r2, #43	; 0x2b
 800c150:	2909      	cmp	r1, #9
 800c152:	7042      	strb	r2, [r0, #1]
 800c154:	dd2a      	ble.n	800c1ac <__exponent+0x70>
 800c156:	f10d 0207 	add.w	r2, sp, #7
 800c15a:	4617      	mov	r7, r2
 800c15c:	260a      	movs	r6, #10
 800c15e:	4694      	mov	ip, r2
 800c160:	fb91 f5f6 	sdiv	r5, r1, r6
 800c164:	fb06 1415 	mls	r4, r6, r5, r1
 800c168:	3430      	adds	r4, #48	; 0x30
 800c16a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800c16e:	460c      	mov	r4, r1
 800c170:	2c63      	cmp	r4, #99	; 0x63
 800c172:	f102 32ff 	add.w	r2, r2, #4294967295
 800c176:	4629      	mov	r1, r5
 800c178:	dcf1      	bgt.n	800c15e <__exponent+0x22>
 800c17a:	3130      	adds	r1, #48	; 0x30
 800c17c:	f1ac 0402 	sub.w	r4, ip, #2
 800c180:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c184:	1c41      	adds	r1, r0, #1
 800c186:	4622      	mov	r2, r4
 800c188:	42ba      	cmp	r2, r7
 800c18a:	d30a      	bcc.n	800c1a2 <__exponent+0x66>
 800c18c:	f10d 0209 	add.w	r2, sp, #9
 800c190:	eba2 020c 	sub.w	r2, r2, ip
 800c194:	42bc      	cmp	r4, r7
 800c196:	bf88      	it	hi
 800c198:	2200      	movhi	r2, #0
 800c19a:	4413      	add	r3, r2
 800c19c:	1a18      	subs	r0, r3, r0
 800c19e:	b003      	add	sp, #12
 800c1a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1a2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c1a6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800c1aa:	e7ed      	b.n	800c188 <__exponent+0x4c>
 800c1ac:	2330      	movs	r3, #48	; 0x30
 800c1ae:	3130      	adds	r1, #48	; 0x30
 800c1b0:	7083      	strb	r3, [r0, #2]
 800c1b2:	70c1      	strb	r1, [r0, #3]
 800c1b4:	1d03      	adds	r3, r0, #4
 800c1b6:	e7f1      	b.n	800c19c <__exponent+0x60>

0800c1b8 <_printf_float>:
 800c1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1bc:	ed2d 8b02 	vpush	{d8}
 800c1c0:	b08d      	sub	sp, #52	; 0x34
 800c1c2:	460c      	mov	r4, r1
 800c1c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c1c8:	4616      	mov	r6, r2
 800c1ca:	461f      	mov	r7, r3
 800c1cc:	4605      	mov	r5, r0
 800c1ce:	f000 fde9 	bl	800cda4 <_localeconv_r>
 800c1d2:	f8d0 a000 	ldr.w	sl, [r0]
 800c1d6:	4650      	mov	r0, sl
 800c1d8:	f7f4 f872 	bl	80002c0 <strlen>
 800c1dc:	2300      	movs	r3, #0
 800c1de:	930a      	str	r3, [sp, #40]	; 0x28
 800c1e0:	6823      	ldr	r3, [r4, #0]
 800c1e2:	9305      	str	r3, [sp, #20]
 800c1e4:	f8d8 3000 	ldr.w	r3, [r8]
 800c1e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c1ec:	3307      	adds	r3, #7
 800c1ee:	f023 0307 	bic.w	r3, r3, #7
 800c1f2:	f103 0208 	add.w	r2, r3, #8
 800c1f6:	f8c8 2000 	str.w	r2, [r8]
 800c1fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c202:	9307      	str	r3, [sp, #28]
 800c204:	f8cd 8018 	str.w	r8, [sp, #24]
 800c208:	ee08 0a10 	vmov	s16, r0
 800c20c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c210:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c214:	4b9e      	ldr	r3, [pc, #632]	; (800c490 <_printf_float+0x2d8>)
 800c216:	f04f 32ff 	mov.w	r2, #4294967295
 800c21a:	f7f4 fcaf 	bl	8000b7c <__aeabi_dcmpun>
 800c21e:	bb88      	cbnz	r0, 800c284 <_printf_float+0xcc>
 800c220:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c224:	4b9a      	ldr	r3, [pc, #616]	; (800c490 <_printf_float+0x2d8>)
 800c226:	f04f 32ff 	mov.w	r2, #4294967295
 800c22a:	f7f4 fc89 	bl	8000b40 <__aeabi_dcmple>
 800c22e:	bb48      	cbnz	r0, 800c284 <_printf_float+0xcc>
 800c230:	2200      	movs	r2, #0
 800c232:	2300      	movs	r3, #0
 800c234:	4640      	mov	r0, r8
 800c236:	4649      	mov	r1, r9
 800c238:	f7f4 fc78 	bl	8000b2c <__aeabi_dcmplt>
 800c23c:	b110      	cbz	r0, 800c244 <_printf_float+0x8c>
 800c23e:	232d      	movs	r3, #45	; 0x2d
 800c240:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c244:	4a93      	ldr	r2, [pc, #588]	; (800c494 <_printf_float+0x2dc>)
 800c246:	4b94      	ldr	r3, [pc, #592]	; (800c498 <_printf_float+0x2e0>)
 800c248:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c24c:	bf94      	ite	ls
 800c24e:	4690      	movls	r8, r2
 800c250:	4698      	movhi	r8, r3
 800c252:	2303      	movs	r3, #3
 800c254:	6123      	str	r3, [r4, #16]
 800c256:	9b05      	ldr	r3, [sp, #20]
 800c258:	f023 0304 	bic.w	r3, r3, #4
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	f04f 0900 	mov.w	r9, #0
 800c262:	9700      	str	r7, [sp, #0]
 800c264:	4633      	mov	r3, r6
 800c266:	aa0b      	add	r2, sp, #44	; 0x2c
 800c268:	4621      	mov	r1, r4
 800c26a:	4628      	mov	r0, r5
 800c26c:	f000 f9da 	bl	800c624 <_printf_common>
 800c270:	3001      	adds	r0, #1
 800c272:	f040 8090 	bne.w	800c396 <_printf_float+0x1de>
 800c276:	f04f 30ff 	mov.w	r0, #4294967295
 800c27a:	b00d      	add	sp, #52	; 0x34
 800c27c:	ecbd 8b02 	vpop	{d8}
 800c280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c284:	4642      	mov	r2, r8
 800c286:	464b      	mov	r3, r9
 800c288:	4640      	mov	r0, r8
 800c28a:	4649      	mov	r1, r9
 800c28c:	f7f4 fc76 	bl	8000b7c <__aeabi_dcmpun>
 800c290:	b140      	cbz	r0, 800c2a4 <_printf_float+0xec>
 800c292:	464b      	mov	r3, r9
 800c294:	2b00      	cmp	r3, #0
 800c296:	bfbc      	itt	lt
 800c298:	232d      	movlt	r3, #45	; 0x2d
 800c29a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c29e:	4a7f      	ldr	r2, [pc, #508]	; (800c49c <_printf_float+0x2e4>)
 800c2a0:	4b7f      	ldr	r3, [pc, #508]	; (800c4a0 <_printf_float+0x2e8>)
 800c2a2:	e7d1      	b.n	800c248 <_printf_float+0x90>
 800c2a4:	6863      	ldr	r3, [r4, #4]
 800c2a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c2aa:	9206      	str	r2, [sp, #24]
 800c2ac:	1c5a      	adds	r2, r3, #1
 800c2ae:	d13f      	bne.n	800c330 <_printf_float+0x178>
 800c2b0:	2306      	movs	r3, #6
 800c2b2:	6063      	str	r3, [r4, #4]
 800c2b4:	9b05      	ldr	r3, [sp, #20]
 800c2b6:	6861      	ldr	r1, [r4, #4]
 800c2b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c2bc:	2300      	movs	r3, #0
 800c2be:	9303      	str	r3, [sp, #12]
 800c2c0:	ab0a      	add	r3, sp, #40	; 0x28
 800c2c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c2c6:	ab09      	add	r3, sp, #36	; 0x24
 800c2c8:	ec49 8b10 	vmov	d0, r8, r9
 800c2cc:	9300      	str	r3, [sp, #0]
 800c2ce:	6022      	str	r2, [r4, #0]
 800c2d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c2d4:	4628      	mov	r0, r5
 800c2d6:	f7ff fecf 	bl	800c078 <__cvt>
 800c2da:	9b06      	ldr	r3, [sp, #24]
 800c2dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2de:	2b47      	cmp	r3, #71	; 0x47
 800c2e0:	4680      	mov	r8, r0
 800c2e2:	d108      	bne.n	800c2f6 <_printf_float+0x13e>
 800c2e4:	1cc8      	adds	r0, r1, #3
 800c2e6:	db02      	blt.n	800c2ee <_printf_float+0x136>
 800c2e8:	6863      	ldr	r3, [r4, #4]
 800c2ea:	4299      	cmp	r1, r3
 800c2ec:	dd41      	ble.n	800c372 <_printf_float+0x1ba>
 800c2ee:	f1ab 0302 	sub.w	r3, fp, #2
 800c2f2:	fa5f fb83 	uxtb.w	fp, r3
 800c2f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c2fa:	d820      	bhi.n	800c33e <_printf_float+0x186>
 800c2fc:	3901      	subs	r1, #1
 800c2fe:	465a      	mov	r2, fp
 800c300:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c304:	9109      	str	r1, [sp, #36]	; 0x24
 800c306:	f7ff ff19 	bl	800c13c <__exponent>
 800c30a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c30c:	1813      	adds	r3, r2, r0
 800c30e:	2a01      	cmp	r2, #1
 800c310:	4681      	mov	r9, r0
 800c312:	6123      	str	r3, [r4, #16]
 800c314:	dc02      	bgt.n	800c31c <_printf_float+0x164>
 800c316:	6822      	ldr	r2, [r4, #0]
 800c318:	07d2      	lsls	r2, r2, #31
 800c31a:	d501      	bpl.n	800c320 <_printf_float+0x168>
 800c31c:	3301      	adds	r3, #1
 800c31e:	6123      	str	r3, [r4, #16]
 800c320:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c324:	2b00      	cmp	r3, #0
 800c326:	d09c      	beq.n	800c262 <_printf_float+0xaa>
 800c328:	232d      	movs	r3, #45	; 0x2d
 800c32a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c32e:	e798      	b.n	800c262 <_printf_float+0xaa>
 800c330:	9a06      	ldr	r2, [sp, #24]
 800c332:	2a47      	cmp	r2, #71	; 0x47
 800c334:	d1be      	bne.n	800c2b4 <_printf_float+0xfc>
 800c336:	2b00      	cmp	r3, #0
 800c338:	d1bc      	bne.n	800c2b4 <_printf_float+0xfc>
 800c33a:	2301      	movs	r3, #1
 800c33c:	e7b9      	b.n	800c2b2 <_printf_float+0xfa>
 800c33e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c342:	d118      	bne.n	800c376 <_printf_float+0x1be>
 800c344:	2900      	cmp	r1, #0
 800c346:	6863      	ldr	r3, [r4, #4]
 800c348:	dd0b      	ble.n	800c362 <_printf_float+0x1aa>
 800c34a:	6121      	str	r1, [r4, #16]
 800c34c:	b913      	cbnz	r3, 800c354 <_printf_float+0x19c>
 800c34e:	6822      	ldr	r2, [r4, #0]
 800c350:	07d0      	lsls	r0, r2, #31
 800c352:	d502      	bpl.n	800c35a <_printf_float+0x1a2>
 800c354:	3301      	adds	r3, #1
 800c356:	440b      	add	r3, r1
 800c358:	6123      	str	r3, [r4, #16]
 800c35a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c35c:	f04f 0900 	mov.w	r9, #0
 800c360:	e7de      	b.n	800c320 <_printf_float+0x168>
 800c362:	b913      	cbnz	r3, 800c36a <_printf_float+0x1b2>
 800c364:	6822      	ldr	r2, [r4, #0]
 800c366:	07d2      	lsls	r2, r2, #31
 800c368:	d501      	bpl.n	800c36e <_printf_float+0x1b6>
 800c36a:	3302      	adds	r3, #2
 800c36c:	e7f4      	b.n	800c358 <_printf_float+0x1a0>
 800c36e:	2301      	movs	r3, #1
 800c370:	e7f2      	b.n	800c358 <_printf_float+0x1a0>
 800c372:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c378:	4299      	cmp	r1, r3
 800c37a:	db05      	blt.n	800c388 <_printf_float+0x1d0>
 800c37c:	6823      	ldr	r3, [r4, #0]
 800c37e:	6121      	str	r1, [r4, #16]
 800c380:	07d8      	lsls	r0, r3, #31
 800c382:	d5ea      	bpl.n	800c35a <_printf_float+0x1a2>
 800c384:	1c4b      	adds	r3, r1, #1
 800c386:	e7e7      	b.n	800c358 <_printf_float+0x1a0>
 800c388:	2900      	cmp	r1, #0
 800c38a:	bfd4      	ite	le
 800c38c:	f1c1 0202 	rsble	r2, r1, #2
 800c390:	2201      	movgt	r2, #1
 800c392:	4413      	add	r3, r2
 800c394:	e7e0      	b.n	800c358 <_printf_float+0x1a0>
 800c396:	6823      	ldr	r3, [r4, #0]
 800c398:	055a      	lsls	r2, r3, #21
 800c39a:	d407      	bmi.n	800c3ac <_printf_float+0x1f4>
 800c39c:	6923      	ldr	r3, [r4, #16]
 800c39e:	4642      	mov	r2, r8
 800c3a0:	4631      	mov	r1, r6
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	47b8      	blx	r7
 800c3a6:	3001      	adds	r0, #1
 800c3a8:	d12c      	bne.n	800c404 <_printf_float+0x24c>
 800c3aa:	e764      	b.n	800c276 <_printf_float+0xbe>
 800c3ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c3b0:	f240 80e0 	bls.w	800c574 <_printf_float+0x3bc>
 800c3b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	f7f4 fbac 	bl	8000b18 <__aeabi_dcmpeq>
 800c3c0:	2800      	cmp	r0, #0
 800c3c2:	d034      	beq.n	800c42e <_printf_float+0x276>
 800c3c4:	4a37      	ldr	r2, [pc, #220]	; (800c4a4 <_printf_float+0x2ec>)
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	4631      	mov	r1, r6
 800c3ca:	4628      	mov	r0, r5
 800c3cc:	47b8      	blx	r7
 800c3ce:	3001      	adds	r0, #1
 800c3d0:	f43f af51 	beq.w	800c276 <_printf_float+0xbe>
 800c3d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	db02      	blt.n	800c3e2 <_printf_float+0x22a>
 800c3dc:	6823      	ldr	r3, [r4, #0]
 800c3de:	07d8      	lsls	r0, r3, #31
 800c3e0:	d510      	bpl.n	800c404 <_printf_float+0x24c>
 800c3e2:	ee18 3a10 	vmov	r3, s16
 800c3e6:	4652      	mov	r2, sl
 800c3e8:	4631      	mov	r1, r6
 800c3ea:	4628      	mov	r0, r5
 800c3ec:	47b8      	blx	r7
 800c3ee:	3001      	adds	r0, #1
 800c3f0:	f43f af41 	beq.w	800c276 <_printf_float+0xbe>
 800c3f4:	f04f 0800 	mov.w	r8, #0
 800c3f8:	f104 091a 	add.w	r9, r4, #26
 800c3fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3fe:	3b01      	subs	r3, #1
 800c400:	4543      	cmp	r3, r8
 800c402:	dc09      	bgt.n	800c418 <_printf_float+0x260>
 800c404:	6823      	ldr	r3, [r4, #0]
 800c406:	079b      	lsls	r3, r3, #30
 800c408:	f100 8107 	bmi.w	800c61a <_printf_float+0x462>
 800c40c:	68e0      	ldr	r0, [r4, #12]
 800c40e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c410:	4298      	cmp	r0, r3
 800c412:	bfb8      	it	lt
 800c414:	4618      	movlt	r0, r3
 800c416:	e730      	b.n	800c27a <_printf_float+0xc2>
 800c418:	2301      	movs	r3, #1
 800c41a:	464a      	mov	r2, r9
 800c41c:	4631      	mov	r1, r6
 800c41e:	4628      	mov	r0, r5
 800c420:	47b8      	blx	r7
 800c422:	3001      	adds	r0, #1
 800c424:	f43f af27 	beq.w	800c276 <_printf_float+0xbe>
 800c428:	f108 0801 	add.w	r8, r8, #1
 800c42c:	e7e6      	b.n	800c3fc <_printf_float+0x244>
 800c42e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c430:	2b00      	cmp	r3, #0
 800c432:	dc39      	bgt.n	800c4a8 <_printf_float+0x2f0>
 800c434:	4a1b      	ldr	r2, [pc, #108]	; (800c4a4 <_printf_float+0x2ec>)
 800c436:	2301      	movs	r3, #1
 800c438:	4631      	mov	r1, r6
 800c43a:	4628      	mov	r0, r5
 800c43c:	47b8      	blx	r7
 800c43e:	3001      	adds	r0, #1
 800c440:	f43f af19 	beq.w	800c276 <_printf_float+0xbe>
 800c444:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c448:	4313      	orrs	r3, r2
 800c44a:	d102      	bne.n	800c452 <_printf_float+0x29a>
 800c44c:	6823      	ldr	r3, [r4, #0]
 800c44e:	07d9      	lsls	r1, r3, #31
 800c450:	d5d8      	bpl.n	800c404 <_printf_float+0x24c>
 800c452:	ee18 3a10 	vmov	r3, s16
 800c456:	4652      	mov	r2, sl
 800c458:	4631      	mov	r1, r6
 800c45a:	4628      	mov	r0, r5
 800c45c:	47b8      	blx	r7
 800c45e:	3001      	adds	r0, #1
 800c460:	f43f af09 	beq.w	800c276 <_printf_float+0xbe>
 800c464:	f04f 0900 	mov.w	r9, #0
 800c468:	f104 0a1a 	add.w	sl, r4, #26
 800c46c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c46e:	425b      	negs	r3, r3
 800c470:	454b      	cmp	r3, r9
 800c472:	dc01      	bgt.n	800c478 <_printf_float+0x2c0>
 800c474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c476:	e792      	b.n	800c39e <_printf_float+0x1e6>
 800c478:	2301      	movs	r3, #1
 800c47a:	4652      	mov	r2, sl
 800c47c:	4631      	mov	r1, r6
 800c47e:	4628      	mov	r0, r5
 800c480:	47b8      	blx	r7
 800c482:	3001      	adds	r0, #1
 800c484:	f43f aef7 	beq.w	800c276 <_printf_float+0xbe>
 800c488:	f109 0901 	add.w	r9, r9, #1
 800c48c:	e7ee      	b.n	800c46c <_printf_float+0x2b4>
 800c48e:	bf00      	nop
 800c490:	7fefffff 	.word	0x7fefffff
 800c494:	08012df8 	.word	0x08012df8
 800c498:	08012dfc 	.word	0x08012dfc
 800c49c:	08012e00 	.word	0x08012e00
 800c4a0:	08012e04 	.word	0x08012e04
 800c4a4:	08012e08 	.word	0x08012e08
 800c4a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4ac:	429a      	cmp	r2, r3
 800c4ae:	bfa8      	it	ge
 800c4b0:	461a      	movge	r2, r3
 800c4b2:	2a00      	cmp	r2, #0
 800c4b4:	4691      	mov	r9, r2
 800c4b6:	dc37      	bgt.n	800c528 <_printf_float+0x370>
 800c4b8:	f04f 0b00 	mov.w	fp, #0
 800c4bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4c0:	f104 021a 	add.w	r2, r4, #26
 800c4c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c4c6:	9305      	str	r3, [sp, #20]
 800c4c8:	eba3 0309 	sub.w	r3, r3, r9
 800c4cc:	455b      	cmp	r3, fp
 800c4ce:	dc33      	bgt.n	800c538 <_printf_float+0x380>
 800c4d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4d4:	429a      	cmp	r2, r3
 800c4d6:	db3b      	blt.n	800c550 <_printf_float+0x398>
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	07da      	lsls	r2, r3, #31
 800c4dc:	d438      	bmi.n	800c550 <_printf_float+0x398>
 800c4de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c4e2:	eba2 0903 	sub.w	r9, r2, r3
 800c4e6:	9b05      	ldr	r3, [sp, #20]
 800c4e8:	1ad2      	subs	r2, r2, r3
 800c4ea:	4591      	cmp	r9, r2
 800c4ec:	bfa8      	it	ge
 800c4ee:	4691      	movge	r9, r2
 800c4f0:	f1b9 0f00 	cmp.w	r9, #0
 800c4f4:	dc35      	bgt.n	800c562 <_printf_float+0x3aa>
 800c4f6:	f04f 0800 	mov.w	r8, #0
 800c4fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c4fe:	f104 0a1a 	add.w	sl, r4, #26
 800c502:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c506:	1a9b      	subs	r3, r3, r2
 800c508:	eba3 0309 	sub.w	r3, r3, r9
 800c50c:	4543      	cmp	r3, r8
 800c50e:	f77f af79 	ble.w	800c404 <_printf_float+0x24c>
 800c512:	2301      	movs	r3, #1
 800c514:	4652      	mov	r2, sl
 800c516:	4631      	mov	r1, r6
 800c518:	4628      	mov	r0, r5
 800c51a:	47b8      	blx	r7
 800c51c:	3001      	adds	r0, #1
 800c51e:	f43f aeaa 	beq.w	800c276 <_printf_float+0xbe>
 800c522:	f108 0801 	add.w	r8, r8, #1
 800c526:	e7ec      	b.n	800c502 <_printf_float+0x34a>
 800c528:	4613      	mov	r3, r2
 800c52a:	4631      	mov	r1, r6
 800c52c:	4642      	mov	r2, r8
 800c52e:	4628      	mov	r0, r5
 800c530:	47b8      	blx	r7
 800c532:	3001      	adds	r0, #1
 800c534:	d1c0      	bne.n	800c4b8 <_printf_float+0x300>
 800c536:	e69e      	b.n	800c276 <_printf_float+0xbe>
 800c538:	2301      	movs	r3, #1
 800c53a:	4631      	mov	r1, r6
 800c53c:	4628      	mov	r0, r5
 800c53e:	9205      	str	r2, [sp, #20]
 800c540:	47b8      	blx	r7
 800c542:	3001      	adds	r0, #1
 800c544:	f43f ae97 	beq.w	800c276 <_printf_float+0xbe>
 800c548:	9a05      	ldr	r2, [sp, #20]
 800c54a:	f10b 0b01 	add.w	fp, fp, #1
 800c54e:	e7b9      	b.n	800c4c4 <_printf_float+0x30c>
 800c550:	ee18 3a10 	vmov	r3, s16
 800c554:	4652      	mov	r2, sl
 800c556:	4631      	mov	r1, r6
 800c558:	4628      	mov	r0, r5
 800c55a:	47b8      	blx	r7
 800c55c:	3001      	adds	r0, #1
 800c55e:	d1be      	bne.n	800c4de <_printf_float+0x326>
 800c560:	e689      	b.n	800c276 <_printf_float+0xbe>
 800c562:	9a05      	ldr	r2, [sp, #20]
 800c564:	464b      	mov	r3, r9
 800c566:	4442      	add	r2, r8
 800c568:	4631      	mov	r1, r6
 800c56a:	4628      	mov	r0, r5
 800c56c:	47b8      	blx	r7
 800c56e:	3001      	adds	r0, #1
 800c570:	d1c1      	bne.n	800c4f6 <_printf_float+0x33e>
 800c572:	e680      	b.n	800c276 <_printf_float+0xbe>
 800c574:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c576:	2a01      	cmp	r2, #1
 800c578:	dc01      	bgt.n	800c57e <_printf_float+0x3c6>
 800c57a:	07db      	lsls	r3, r3, #31
 800c57c:	d53a      	bpl.n	800c5f4 <_printf_float+0x43c>
 800c57e:	2301      	movs	r3, #1
 800c580:	4642      	mov	r2, r8
 800c582:	4631      	mov	r1, r6
 800c584:	4628      	mov	r0, r5
 800c586:	47b8      	blx	r7
 800c588:	3001      	adds	r0, #1
 800c58a:	f43f ae74 	beq.w	800c276 <_printf_float+0xbe>
 800c58e:	ee18 3a10 	vmov	r3, s16
 800c592:	4652      	mov	r2, sl
 800c594:	4631      	mov	r1, r6
 800c596:	4628      	mov	r0, r5
 800c598:	47b8      	blx	r7
 800c59a:	3001      	adds	r0, #1
 800c59c:	f43f ae6b 	beq.w	800c276 <_printf_float+0xbe>
 800c5a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c5ac:	f7f4 fab4 	bl	8000b18 <__aeabi_dcmpeq>
 800c5b0:	b9d8      	cbnz	r0, 800c5ea <_printf_float+0x432>
 800c5b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c5b6:	f108 0201 	add.w	r2, r8, #1
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	4628      	mov	r0, r5
 800c5be:	47b8      	blx	r7
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	d10e      	bne.n	800c5e2 <_printf_float+0x42a>
 800c5c4:	e657      	b.n	800c276 <_printf_float+0xbe>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	4652      	mov	r2, sl
 800c5ca:	4631      	mov	r1, r6
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	47b8      	blx	r7
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	f43f ae50 	beq.w	800c276 <_printf_float+0xbe>
 800c5d6:	f108 0801 	add.w	r8, r8, #1
 800c5da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c5dc:	3b01      	subs	r3, #1
 800c5de:	4543      	cmp	r3, r8
 800c5e0:	dcf1      	bgt.n	800c5c6 <_printf_float+0x40e>
 800c5e2:	464b      	mov	r3, r9
 800c5e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c5e8:	e6da      	b.n	800c3a0 <_printf_float+0x1e8>
 800c5ea:	f04f 0800 	mov.w	r8, #0
 800c5ee:	f104 0a1a 	add.w	sl, r4, #26
 800c5f2:	e7f2      	b.n	800c5da <_printf_float+0x422>
 800c5f4:	2301      	movs	r3, #1
 800c5f6:	4642      	mov	r2, r8
 800c5f8:	e7df      	b.n	800c5ba <_printf_float+0x402>
 800c5fa:	2301      	movs	r3, #1
 800c5fc:	464a      	mov	r2, r9
 800c5fe:	4631      	mov	r1, r6
 800c600:	4628      	mov	r0, r5
 800c602:	47b8      	blx	r7
 800c604:	3001      	adds	r0, #1
 800c606:	f43f ae36 	beq.w	800c276 <_printf_float+0xbe>
 800c60a:	f108 0801 	add.w	r8, r8, #1
 800c60e:	68e3      	ldr	r3, [r4, #12]
 800c610:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c612:	1a5b      	subs	r3, r3, r1
 800c614:	4543      	cmp	r3, r8
 800c616:	dcf0      	bgt.n	800c5fa <_printf_float+0x442>
 800c618:	e6f8      	b.n	800c40c <_printf_float+0x254>
 800c61a:	f04f 0800 	mov.w	r8, #0
 800c61e:	f104 0919 	add.w	r9, r4, #25
 800c622:	e7f4      	b.n	800c60e <_printf_float+0x456>

0800c624 <_printf_common>:
 800c624:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c628:	4616      	mov	r6, r2
 800c62a:	4699      	mov	r9, r3
 800c62c:	688a      	ldr	r2, [r1, #8]
 800c62e:	690b      	ldr	r3, [r1, #16]
 800c630:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c634:	4293      	cmp	r3, r2
 800c636:	bfb8      	it	lt
 800c638:	4613      	movlt	r3, r2
 800c63a:	6033      	str	r3, [r6, #0]
 800c63c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c640:	4607      	mov	r7, r0
 800c642:	460c      	mov	r4, r1
 800c644:	b10a      	cbz	r2, 800c64a <_printf_common+0x26>
 800c646:	3301      	adds	r3, #1
 800c648:	6033      	str	r3, [r6, #0]
 800c64a:	6823      	ldr	r3, [r4, #0]
 800c64c:	0699      	lsls	r1, r3, #26
 800c64e:	bf42      	ittt	mi
 800c650:	6833      	ldrmi	r3, [r6, #0]
 800c652:	3302      	addmi	r3, #2
 800c654:	6033      	strmi	r3, [r6, #0]
 800c656:	6825      	ldr	r5, [r4, #0]
 800c658:	f015 0506 	ands.w	r5, r5, #6
 800c65c:	d106      	bne.n	800c66c <_printf_common+0x48>
 800c65e:	f104 0a19 	add.w	sl, r4, #25
 800c662:	68e3      	ldr	r3, [r4, #12]
 800c664:	6832      	ldr	r2, [r6, #0]
 800c666:	1a9b      	subs	r3, r3, r2
 800c668:	42ab      	cmp	r3, r5
 800c66a:	dc26      	bgt.n	800c6ba <_printf_common+0x96>
 800c66c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c670:	1e13      	subs	r3, r2, #0
 800c672:	6822      	ldr	r2, [r4, #0]
 800c674:	bf18      	it	ne
 800c676:	2301      	movne	r3, #1
 800c678:	0692      	lsls	r2, r2, #26
 800c67a:	d42b      	bmi.n	800c6d4 <_printf_common+0xb0>
 800c67c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c680:	4649      	mov	r1, r9
 800c682:	4638      	mov	r0, r7
 800c684:	47c0      	blx	r8
 800c686:	3001      	adds	r0, #1
 800c688:	d01e      	beq.n	800c6c8 <_printf_common+0xa4>
 800c68a:	6823      	ldr	r3, [r4, #0]
 800c68c:	6922      	ldr	r2, [r4, #16]
 800c68e:	f003 0306 	and.w	r3, r3, #6
 800c692:	2b04      	cmp	r3, #4
 800c694:	bf02      	ittt	eq
 800c696:	68e5      	ldreq	r5, [r4, #12]
 800c698:	6833      	ldreq	r3, [r6, #0]
 800c69a:	1aed      	subeq	r5, r5, r3
 800c69c:	68a3      	ldr	r3, [r4, #8]
 800c69e:	bf0c      	ite	eq
 800c6a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6a4:	2500      	movne	r5, #0
 800c6a6:	4293      	cmp	r3, r2
 800c6a8:	bfc4      	itt	gt
 800c6aa:	1a9b      	subgt	r3, r3, r2
 800c6ac:	18ed      	addgt	r5, r5, r3
 800c6ae:	2600      	movs	r6, #0
 800c6b0:	341a      	adds	r4, #26
 800c6b2:	42b5      	cmp	r5, r6
 800c6b4:	d11a      	bne.n	800c6ec <_printf_common+0xc8>
 800c6b6:	2000      	movs	r0, #0
 800c6b8:	e008      	b.n	800c6cc <_printf_common+0xa8>
 800c6ba:	2301      	movs	r3, #1
 800c6bc:	4652      	mov	r2, sl
 800c6be:	4649      	mov	r1, r9
 800c6c0:	4638      	mov	r0, r7
 800c6c2:	47c0      	blx	r8
 800c6c4:	3001      	adds	r0, #1
 800c6c6:	d103      	bne.n	800c6d0 <_printf_common+0xac>
 800c6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6d0:	3501      	adds	r5, #1
 800c6d2:	e7c6      	b.n	800c662 <_printf_common+0x3e>
 800c6d4:	18e1      	adds	r1, r4, r3
 800c6d6:	1c5a      	adds	r2, r3, #1
 800c6d8:	2030      	movs	r0, #48	; 0x30
 800c6da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c6de:	4422      	add	r2, r4
 800c6e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c6e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c6e8:	3302      	adds	r3, #2
 800c6ea:	e7c7      	b.n	800c67c <_printf_common+0x58>
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	4622      	mov	r2, r4
 800c6f0:	4649      	mov	r1, r9
 800c6f2:	4638      	mov	r0, r7
 800c6f4:	47c0      	blx	r8
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	d0e6      	beq.n	800c6c8 <_printf_common+0xa4>
 800c6fa:	3601      	adds	r6, #1
 800c6fc:	e7d9      	b.n	800c6b2 <_printf_common+0x8e>
	...

0800c700 <_printf_i>:
 800c700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c704:	7e0f      	ldrb	r7, [r1, #24]
 800c706:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c708:	2f78      	cmp	r7, #120	; 0x78
 800c70a:	4691      	mov	r9, r2
 800c70c:	4680      	mov	r8, r0
 800c70e:	460c      	mov	r4, r1
 800c710:	469a      	mov	sl, r3
 800c712:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c716:	d807      	bhi.n	800c728 <_printf_i+0x28>
 800c718:	2f62      	cmp	r7, #98	; 0x62
 800c71a:	d80a      	bhi.n	800c732 <_printf_i+0x32>
 800c71c:	2f00      	cmp	r7, #0
 800c71e:	f000 80d4 	beq.w	800c8ca <_printf_i+0x1ca>
 800c722:	2f58      	cmp	r7, #88	; 0x58
 800c724:	f000 80c0 	beq.w	800c8a8 <_printf_i+0x1a8>
 800c728:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c72c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c730:	e03a      	b.n	800c7a8 <_printf_i+0xa8>
 800c732:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c736:	2b15      	cmp	r3, #21
 800c738:	d8f6      	bhi.n	800c728 <_printf_i+0x28>
 800c73a:	a101      	add	r1, pc, #4	; (adr r1, 800c740 <_printf_i+0x40>)
 800c73c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c740:	0800c799 	.word	0x0800c799
 800c744:	0800c7ad 	.word	0x0800c7ad
 800c748:	0800c729 	.word	0x0800c729
 800c74c:	0800c729 	.word	0x0800c729
 800c750:	0800c729 	.word	0x0800c729
 800c754:	0800c729 	.word	0x0800c729
 800c758:	0800c7ad 	.word	0x0800c7ad
 800c75c:	0800c729 	.word	0x0800c729
 800c760:	0800c729 	.word	0x0800c729
 800c764:	0800c729 	.word	0x0800c729
 800c768:	0800c729 	.word	0x0800c729
 800c76c:	0800c8b1 	.word	0x0800c8b1
 800c770:	0800c7d9 	.word	0x0800c7d9
 800c774:	0800c86b 	.word	0x0800c86b
 800c778:	0800c729 	.word	0x0800c729
 800c77c:	0800c729 	.word	0x0800c729
 800c780:	0800c8d3 	.word	0x0800c8d3
 800c784:	0800c729 	.word	0x0800c729
 800c788:	0800c7d9 	.word	0x0800c7d9
 800c78c:	0800c729 	.word	0x0800c729
 800c790:	0800c729 	.word	0x0800c729
 800c794:	0800c873 	.word	0x0800c873
 800c798:	682b      	ldr	r3, [r5, #0]
 800c79a:	1d1a      	adds	r2, r3, #4
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	602a      	str	r2, [r5, #0]
 800c7a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c7a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c7a8:	2301      	movs	r3, #1
 800c7aa:	e09f      	b.n	800c8ec <_printf_i+0x1ec>
 800c7ac:	6820      	ldr	r0, [r4, #0]
 800c7ae:	682b      	ldr	r3, [r5, #0]
 800c7b0:	0607      	lsls	r7, r0, #24
 800c7b2:	f103 0104 	add.w	r1, r3, #4
 800c7b6:	6029      	str	r1, [r5, #0]
 800c7b8:	d501      	bpl.n	800c7be <_printf_i+0xbe>
 800c7ba:	681e      	ldr	r6, [r3, #0]
 800c7bc:	e003      	b.n	800c7c6 <_printf_i+0xc6>
 800c7be:	0646      	lsls	r6, r0, #25
 800c7c0:	d5fb      	bpl.n	800c7ba <_printf_i+0xba>
 800c7c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c7c6:	2e00      	cmp	r6, #0
 800c7c8:	da03      	bge.n	800c7d2 <_printf_i+0xd2>
 800c7ca:	232d      	movs	r3, #45	; 0x2d
 800c7cc:	4276      	negs	r6, r6
 800c7ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7d2:	485a      	ldr	r0, [pc, #360]	; (800c93c <_printf_i+0x23c>)
 800c7d4:	230a      	movs	r3, #10
 800c7d6:	e012      	b.n	800c7fe <_printf_i+0xfe>
 800c7d8:	682b      	ldr	r3, [r5, #0]
 800c7da:	6820      	ldr	r0, [r4, #0]
 800c7dc:	1d19      	adds	r1, r3, #4
 800c7de:	6029      	str	r1, [r5, #0]
 800c7e0:	0605      	lsls	r5, r0, #24
 800c7e2:	d501      	bpl.n	800c7e8 <_printf_i+0xe8>
 800c7e4:	681e      	ldr	r6, [r3, #0]
 800c7e6:	e002      	b.n	800c7ee <_printf_i+0xee>
 800c7e8:	0641      	lsls	r1, r0, #25
 800c7ea:	d5fb      	bpl.n	800c7e4 <_printf_i+0xe4>
 800c7ec:	881e      	ldrh	r6, [r3, #0]
 800c7ee:	4853      	ldr	r0, [pc, #332]	; (800c93c <_printf_i+0x23c>)
 800c7f0:	2f6f      	cmp	r7, #111	; 0x6f
 800c7f2:	bf0c      	ite	eq
 800c7f4:	2308      	moveq	r3, #8
 800c7f6:	230a      	movne	r3, #10
 800c7f8:	2100      	movs	r1, #0
 800c7fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c7fe:	6865      	ldr	r5, [r4, #4]
 800c800:	60a5      	str	r5, [r4, #8]
 800c802:	2d00      	cmp	r5, #0
 800c804:	bfa2      	ittt	ge
 800c806:	6821      	ldrge	r1, [r4, #0]
 800c808:	f021 0104 	bicge.w	r1, r1, #4
 800c80c:	6021      	strge	r1, [r4, #0]
 800c80e:	b90e      	cbnz	r6, 800c814 <_printf_i+0x114>
 800c810:	2d00      	cmp	r5, #0
 800c812:	d04b      	beq.n	800c8ac <_printf_i+0x1ac>
 800c814:	4615      	mov	r5, r2
 800c816:	fbb6 f1f3 	udiv	r1, r6, r3
 800c81a:	fb03 6711 	mls	r7, r3, r1, r6
 800c81e:	5dc7      	ldrb	r7, [r0, r7]
 800c820:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c824:	4637      	mov	r7, r6
 800c826:	42bb      	cmp	r3, r7
 800c828:	460e      	mov	r6, r1
 800c82a:	d9f4      	bls.n	800c816 <_printf_i+0x116>
 800c82c:	2b08      	cmp	r3, #8
 800c82e:	d10b      	bne.n	800c848 <_printf_i+0x148>
 800c830:	6823      	ldr	r3, [r4, #0]
 800c832:	07de      	lsls	r6, r3, #31
 800c834:	d508      	bpl.n	800c848 <_printf_i+0x148>
 800c836:	6923      	ldr	r3, [r4, #16]
 800c838:	6861      	ldr	r1, [r4, #4]
 800c83a:	4299      	cmp	r1, r3
 800c83c:	bfde      	ittt	le
 800c83e:	2330      	movle	r3, #48	; 0x30
 800c840:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c844:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c848:	1b52      	subs	r2, r2, r5
 800c84a:	6122      	str	r2, [r4, #16]
 800c84c:	f8cd a000 	str.w	sl, [sp]
 800c850:	464b      	mov	r3, r9
 800c852:	aa03      	add	r2, sp, #12
 800c854:	4621      	mov	r1, r4
 800c856:	4640      	mov	r0, r8
 800c858:	f7ff fee4 	bl	800c624 <_printf_common>
 800c85c:	3001      	adds	r0, #1
 800c85e:	d14a      	bne.n	800c8f6 <_printf_i+0x1f6>
 800c860:	f04f 30ff 	mov.w	r0, #4294967295
 800c864:	b004      	add	sp, #16
 800c866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c86a:	6823      	ldr	r3, [r4, #0]
 800c86c:	f043 0320 	orr.w	r3, r3, #32
 800c870:	6023      	str	r3, [r4, #0]
 800c872:	4833      	ldr	r0, [pc, #204]	; (800c940 <_printf_i+0x240>)
 800c874:	2778      	movs	r7, #120	; 0x78
 800c876:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c87a:	6823      	ldr	r3, [r4, #0]
 800c87c:	6829      	ldr	r1, [r5, #0]
 800c87e:	061f      	lsls	r7, r3, #24
 800c880:	f851 6b04 	ldr.w	r6, [r1], #4
 800c884:	d402      	bmi.n	800c88c <_printf_i+0x18c>
 800c886:	065f      	lsls	r7, r3, #25
 800c888:	bf48      	it	mi
 800c88a:	b2b6      	uxthmi	r6, r6
 800c88c:	07df      	lsls	r7, r3, #31
 800c88e:	bf48      	it	mi
 800c890:	f043 0320 	orrmi.w	r3, r3, #32
 800c894:	6029      	str	r1, [r5, #0]
 800c896:	bf48      	it	mi
 800c898:	6023      	strmi	r3, [r4, #0]
 800c89a:	b91e      	cbnz	r6, 800c8a4 <_printf_i+0x1a4>
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	f023 0320 	bic.w	r3, r3, #32
 800c8a2:	6023      	str	r3, [r4, #0]
 800c8a4:	2310      	movs	r3, #16
 800c8a6:	e7a7      	b.n	800c7f8 <_printf_i+0xf8>
 800c8a8:	4824      	ldr	r0, [pc, #144]	; (800c93c <_printf_i+0x23c>)
 800c8aa:	e7e4      	b.n	800c876 <_printf_i+0x176>
 800c8ac:	4615      	mov	r5, r2
 800c8ae:	e7bd      	b.n	800c82c <_printf_i+0x12c>
 800c8b0:	682b      	ldr	r3, [r5, #0]
 800c8b2:	6826      	ldr	r6, [r4, #0]
 800c8b4:	6961      	ldr	r1, [r4, #20]
 800c8b6:	1d18      	adds	r0, r3, #4
 800c8b8:	6028      	str	r0, [r5, #0]
 800c8ba:	0635      	lsls	r5, r6, #24
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	d501      	bpl.n	800c8c4 <_printf_i+0x1c4>
 800c8c0:	6019      	str	r1, [r3, #0]
 800c8c2:	e002      	b.n	800c8ca <_printf_i+0x1ca>
 800c8c4:	0670      	lsls	r0, r6, #25
 800c8c6:	d5fb      	bpl.n	800c8c0 <_printf_i+0x1c0>
 800c8c8:	8019      	strh	r1, [r3, #0]
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	6123      	str	r3, [r4, #16]
 800c8ce:	4615      	mov	r5, r2
 800c8d0:	e7bc      	b.n	800c84c <_printf_i+0x14c>
 800c8d2:	682b      	ldr	r3, [r5, #0]
 800c8d4:	1d1a      	adds	r2, r3, #4
 800c8d6:	602a      	str	r2, [r5, #0]
 800c8d8:	681d      	ldr	r5, [r3, #0]
 800c8da:	6862      	ldr	r2, [r4, #4]
 800c8dc:	2100      	movs	r1, #0
 800c8de:	4628      	mov	r0, r5
 800c8e0:	f7f3 fc9e 	bl	8000220 <memchr>
 800c8e4:	b108      	cbz	r0, 800c8ea <_printf_i+0x1ea>
 800c8e6:	1b40      	subs	r0, r0, r5
 800c8e8:	6060      	str	r0, [r4, #4]
 800c8ea:	6863      	ldr	r3, [r4, #4]
 800c8ec:	6123      	str	r3, [r4, #16]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8f4:	e7aa      	b.n	800c84c <_printf_i+0x14c>
 800c8f6:	6923      	ldr	r3, [r4, #16]
 800c8f8:	462a      	mov	r2, r5
 800c8fa:	4649      	mov	r1, r9
 800c8fc:	4640      	mov	r0, r8
 800c8fe:	47d0      	blx	sl
 800c900:	3001      	adds	r0, #1
 800c902:	d0ad      	beq.n	800c860 <_printf_i+0x160>
 800c904:	6823      	ldr	r3, [r4, #0]
 800c906:	079b      	lsls	r3, r3, #30
 800c908:	d413      	bmi.n	800c932 <_printf_i+0x232>
 800c90a:	68e0      	ldr	r0, [r4, #12]
 800c90c:	9b03      	ldr	r3, [sp, #12]
 800c90e:	4298      	cmp	r0, r3
 800c910:	bfb8      	it	lt
 800c912:	4618      	movlt	r0, r3
 800c914:	e7a6      	b.n	800c864 <_printf_i+0x164>
 800c916:	2301      	movs	r3, #1
 800c918:	4632      	mov	r2, r6
 800c91a:	4649      	mov	r1, r9
 800c91c:	4640      	mov	r0, r8
 800c91e:	47d0      	blx	sl
 800c920:	3001      	adds	r0, #1
 800c922:	d09d      	beq.n	800c860 <_printf_i+0x160>
 800c924:	3501      	adds	r5, #1
 800c926:	68e3      	ldr	r3, [r4, #12]
 800c928:	9903      	ldr	r1, [sp, #12]
 800c92a:	1a5b      	subs	r3, r3, r1
 800c92c:	42ab      	cmp	r3, r5
 800c92e:	dcf2      	bgt.n	800c916 <_printf_i+0x216>
 800c930:	e7eb      	b.n	800c90a <_printf_i+0x20a>
 800c932:	2500      	movs	r5, #0
 800c934:	f104 0619 	add.w	r6, r4, #25
 800c938:	e7f5      	b.n	800c926 <_printf_i+0x226>
 800c93a:	bf00      	nop
 800c93c:	08012e0a 	.word	0x08012e0a
 800c940:	08012e1b 	.word	0x08012e1b

0800c944 <std>:
 800c944:	2300      	movs	r3, #0
 800c946:	b510      	push	{r4, lr}
 800c948:	4604      	mov	r4, r0
 800c94a:	e9c0 3300 	strd	r3, r3, [r0]
 800c94e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c952:	6083      	str	r3, [r0, #8]
 800c954:	8181      	strh	r1, [r0, #12]
 800c956:	6643      	str	r3, [r0, #100]	; 0x64
 800c958:	81c2      	strh	r2, [r0, #14]
 800c95a:	6183      	str	r3, [r0, #24]
 800c95c:	4619      	mov	r1, r3
 800c95e:	2208      	movs	r2, #8
 800c960:	305c      	adds	r0, #92	; 0x5c
 800c962:	f000 fa17 	bl	800cd94 <memset>
 800c966:	4b0d      	ldr	r3, [pc, #52]	; (800c99c <std+0x58>)
 800c968:	6263      	str	r3, [r4, #36]	; 0x24
 800c96a:	4b0d      	ldr	r3, [pc, #52]	; (800c9a0 <std+0x5c>)
 800c96c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c96e:	4b0d      	ldr	r3, [pc, #52]	; (800c9a4 <std+0x60>)
 800c970:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c972:	4b0d      	ldr	r3, [pc, #52]	; (800c9a8 <std+0x64>)
 800c974:	6323      	str	r3, [r4, #48]	; 0x30
 800c976:	4b0d      	ldr	r3, [pc, #52]	; (800c9ac <std+0x68>)
 800c978:	6224      	str	r4, [r4, #32]
 800c97a:	429c      	cmp	r4, r3
 800c97c:	d006      	beq.n	800c98c <std+0x48>
 800c97e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c982:	4294      	cmp	r4, r2
 800c984:	d002      	beq.n	800c98c <std+0x48>
 800c986:	33d0      	adds	r3, #208	; 0xd0
 800c988:	429c      	cmp	r4, r3
 800c98a:	d105      	bne.n	800c998 <std+0x54>
 800c98c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c990:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c994:	f000 ba8a 	b.w	800ceac <__retarget_lock_init_recursive>
 800c998:	bd10      	pop	{r4, pc}
 800c99a:	bf00      	nop
 800c99c:	0800cbe5 	.word	0x0800cbe5
 800c9a0:	0800cc07 	.word	0x0800cc07
 800c9a4:	0800cc3f 	.word	0x0800cc3f
 800c9a8:	0800cc63 	.word	0x0800cc63
 800c9ac:	20000e20 	.word	0x20000e20

0800c9b0 <stdio_exit_handler>:
 800c9b0:	4a02      	ldr	r2, [pc, #8]	; (800c9bc <stdio_exit_handler+0xc>)
 800c9b2:	4903      	ldr	r1, [pc, #12]	; (800c9c0 <stdio_exit_handler+0x10>)
 800c9b4:	4803      	ldr	r0, [pc, #12]	; (800c9c4 <stdio_exit_handler+0x14>)
 800c9b6:	f000 b869 	b.w	800ca8c <_fwalk_sglue>
 800c9ba:	bf00      	nop
 800c9bc:	20000074 	.word	0x20000074
 800c9c0:	0800e981 	.word	0x0800e981
 800c9c4:	20000080 	.word	0x20000080

0800c9c8 <cleanup_stdio>:
 800c9c8:	6841      	ldr	r1, [r0, #4]
 800c9ca:	4b0c      	ldr	r3, [pc, #48]	; (800c9fc <cleanup_stdio+0x34>)
 800c9cc:	4299      	cmp	r1, r3
 800c9ce:	b510      	push	{r4, lr}
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	d001      	beq.n	800c9d8 <cleanup_stdio+0x10>
 800c9d4:	f001 ffd4 	bl	800e980 <_fflush_r>
 800c9d8:	68a1      	ldr	r1, [r4, #8]
 800c9da:	4b09      	ldr	r3, [pc, #36]	; (800ca00 <cleanup_stdio+0x38>)
 800c9dc:	4299      	cmp	r1, r3
 800c9de:	d002      	beq.n	800c9e6 <cleanup_stdio+0x1e>
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	f001 ffcd 	bl	800e980 <_fflush_r>
 800c9e6:	68e1      	ldr	r1, [r4, #12]
 800c9e8:	4b06      	ldr	r3, [pc, #24]	; (800ca04 <cleanup_stdio+0x3c>)
 800c9ea:	4299      	cmp	r1, r3
 800c9ec:	d004      	beq.n	800c9f8 <cleanup_stdio+0x30>
 800c9ee:	4620      	mov	r0, r4
 800c9f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c9f4:	f001 bfc4 	b.w	800e980 <_fflush_r>
 800c9f8:	bd10      	pop	{r4, pc}
 800c9fa:	bf00      	nop
 800c9fc:	20000e20 	.word	0x20000e20
 800ca00:	20000e88 	.word	0x20000e88
 800ca04:	20000ef0 	.word	0x20000ef0

0800ca08 <global_stdio_init.part.0>:
 800ca08:	b510      	push	{r4, lr}
 800ca0a:	4b0b      	ldr	r3, [pc, #44]	; (800ca38 <global_stdio_init.part.0+0x30>)
 800ca0c:	4c0b      	ldr	r4, [pc, #44]	; (800ca3c <global_stdio_init.part.0+0x34>)
 800ca0e:	4a0c      	ldr	r2, [pc, #48]	; (800ca40 <global_stdio_init.part.0+0x38>)
 800ca10:	601a      	str	r2, [r3, #0]
 800ca12:	4620      	mov	r0, r4
 800ca14:	2200      	movs	r2, #0
 800ca16:	2104      	movs	r1, #4
 800ca18:	f7ff ff94 	bl	800c944 <std>
 800ca1c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ca20:	2201      	movs	r2, #1
 800ca22:	2109      	movs	r1, #9
 800ca24:	f7ff ff8e 	bl	800c944 <std>
 800ca28:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ca2c:	2202      	movs	r2, #2
 800ca2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca32:	2112      	movs	r1, #18
 800ca34:	f7ff bf86 	b.w	800c944 <std>
 800ca38:	20000f58 	.word	0x20000f58
 800ca3c:	20000e20 	.word	0x20000e20
 800ca40:	0800c9b1 	.word	0x0800c9b1

0800ca44 <__sfp_lock_acquire>:
 800ca44:	4801      	ldr	r0, [pc, #4]	; (800ca4c <__sfp_lock_acquire+0x8>)
 800ca46:	f000 ba32 	b.w	800ceae <__retarget_lock_acquire_recursive>
 800ca4a:	bf00      	nop
 800ca4c:	20000f61 	.word	0x20000f61

0800ca50 <__sfp_lock_release>:
 800ca50:	4801      	ldr	r0, [pc, #4]	; (800ca58 <__sfp_lock_release+0x8>)
 800ca52:	f000 ba2d 	b.w	800ceb0 <__retarget_lock_release_recursive>
 800ca56:	bf00      	nop
 800ca58:	20000f61 	.word	0x20000f61

0800ca5c <__sinit>:
 800ca5c:	b510      	push	{r4, lr}
 800ca5e:	4604      	mov	r4, r0
 800ca60:	f7ff fff0 	bl	800ca44 <__sfp_lock_acquire>
 800ca64:	6a23      	ldr	r3, [r4, #32]
 800ca66:	b11b      	cbz	r3, 800ca70 <__sinit+0x14>
 800ca68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca6c:	f7ff bff0 	b.w	800ca50 <__sfp_lock_release>
 800ca70:	4b04      	ldr	r3, [pc, #16]	; (800ca84 <__sinit+0x28>)
 800ca72:	6223      	str	r3, [r4, #32]
 800ca74:	4b04      	ldr	r3, [pc, #16]	; (800ca88 <__sinit+0x2c>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1f5      	bne.n	800ca68 <__sinit+0xc>
 800ca7c:	f7ff ffc4 	bl	800ca08 <global_stdio_init.part.0>
 800ca80:	e7f2      	b.n	800ca68 <__sinit+0xc>
 800ca82:	bf00      	nop
 800ca84:	0800c9c9 	.word	0x0800c9c9
 800ca88:	20000f58 	.word	0x20000f58

0800ca8c <_fwalk_sglue>:
 800ca8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca90:	4607      	mov	r7, r0
 800ca92:	4688      	mov	r8, r1
 800ca94:	4614      	mov	r4, r2
 800ca96:	2600      	movs	r6, #0
 800ca98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ca9c:	f1b9 0901 	subs.w	r9, r9, #1
 800caa0:	d505      	bpl.n	800caae <_fwalk_sglue+0x22>
 800caa2:	6824      	ldr	r4, [r4, #0]
 800caa4:	2c00      	cmp	r4, #0
 800caa6:	d1f7      	bne.n	800ca98 <_fwalk_sglue+0xc>
 800caa8:	4630      	mov	r0, r6
 800caaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800caae:	89ab      	ldrh	r3, [r5, #12]
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d907      	bls.n	800cac4 <_fwalk_sglue+0x38>
 800cab4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cab8:	3301      	adds	r3, #1
 800caba:	d003      	beq.n	800cac4 <_fwalk_sglue+0x38>
 800cabc:	4629      	mov	r1, r5
 800cabe:	4638      	mov	r0, r7
 800cac0:	47c0      	blx	r8
 800cac2:	4306      	orrs	r6, r0
 800cac4:	3568      	adds	r5, #104	; 0x68
 800cac6:	e7e9      	b.n	800ca9c <_fwalk_sglue+0x10>

0800cac8 <iprintf>:
 800cac8:	b40f      	push	{r0, r1, r2, r3}
 800caca:	b507      	push	{r0, r1, r2, lr}
 800cacc:	4906      	ldr	r1, [pc, #24]	; (800cae8 <iprintf+0x20>)
 800cace:	ab04      	add	r3, sp, #16
 800cad0:	6808      	ldr	r0, [r1, #0]
 800cad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cad6:	6881      	ldr	r1, [r0, #8]
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	f001 fdb1 	bl	800e640 <_vfiprintf_r>
 800cade:	b003      	add	sp, #12
 800cae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cae4:	b004      	add	sp, #16
 800cae6:	4770      	bx	lr
 800cae8:	200000cc 	.word	0x200000cc

0800caec <_puts_r>:
 800caec:	6a03      	ldr	r3, [r0, #32]
 800caee:	b570      	push	{r4, r5, r6, lr}
 800caf0:	6884      	ldr	r4, [r0, #8]
 800caf2:	4605      	mov	r5, r0
 800caf4:	460e      	mov	r6, r1
 800caf6:	b90b      	cbnz	r3, 800cafc <_puts_r+0x10>
 800caf8:	f7ff ffb0 	bl	800ca5c <__sinit>
 800cafc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cafe:	07db      	lsls	r3, r3, #31
 800cb00:	d405      	bmi.n	800cb0e <_puts_r+0x22>
 800cb02:	89a3      	ldrh	r3, [r4, #12]
 800cb04:	0598      	lsls	r0, r3, #22
 800cb06:	d402      	bmi.n	800cb0e <_puts_r+0x22>
 800cb08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb0a:	f000 f9d0 	bl	800ceae <__retarget_lock_acquire_recursive>
 800cb0e:	89a3      	ldrh	r3, [r4, #12]
 800cb10:	0719      	lsls	r1, r3, #28
 800cb12:	d513      	bpl.n	800cb3c <_puts_r+0x50>
 800cb14:	6923      	ldr	r3, [r4, #16]
 800cb16:	b18b      	cbz	r3, 800cb3c <_puts_r+0x50>
 800cb18:	3e01      	subs	r6, #1
 800cb1a:	68a3      	ldr	r3, [r4, #8]
 800cb1c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cb20:	3b01      	subs	r3, #1
 800cb22:	60a3      	str	r3, [r4, #8]
 800cb24:	b9e9      	cbnz	r1, 800cb62 <_puts_r+0x76>
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	da2e      	bge.n	800cb88 <_puts_r+0x9c>
 800cb2a:	4622      	mov	r2, r4
 800cb2c:	210a      	movs	r1, #10
 800cb2e:	4628      	mov	r0, r5
 800cb30:	f000 f89b 	bl	800cc6a <__swbuf_r>
 800cb34:	3001      	adds	r0, #1
 800cb36:	d007      	beq.n	800cb48 <_puts_r+0x5c>
 800cb38:	250a      	movs	r5, #10
 800cb3a:	e007      	b.n	800cb4c <_puts_r+0x60>
 800cb3c:	4621      	mov	r1, r4
 800cb3e:	4628      	mov	r0, r5
 800cb40:	f000 f8d0 	bl	800cce4 <__swsetup_r>
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d0e7      	beq.n	800cb18 <_puts_r+0x2c>
 800cb48:	f04f 35ff 	mov.w	r5, #4294967295
 800cb4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cb4e:	07da      	lsls	r2, r3, #31
 800cb50:	d405      	bmi.n	800cb5e <_puts_r+0x72>
 800cb52:	89a3      	ldrh	r3, [r4, #12]
 800cb54:	059b      	lsls	r3, r3, #22
 800cb56:	d402      	bmi.n	800cb5e <_puts_r+0x72>
 800cb58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cb5a:	f000 f9a9 	bl	800ceb0 <__retarget_lock_release_recursive>
 800cb5e:	4628      	mov	r0, r5
 800cb60:	bd70      	pop	{r4, r5, r6, pc}
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	da04      	bge.n	800cb70 <_puts_r+0x84>
 800cb66:	69a2      	ldr	r2, [r4, #24]
 800cb68:	429a      	cmp	r2, r3
 800cb6a:	dc06      	bgt.n	800cb7a <_puts_r+0x8e>
 800cb6c:	290a      	cmp	r1, #10
 800cb6e:	d004      	beq.n	800cb7a <_puts_r+0x8e>
 800cb70:	6823      	ldr	r3, [r4, #0]
 800cb72:	1c5a      	adds	r2, r3, #1
 800cb74:	6022      	str	r2, [r4, #0]
 800cb76:	7019      	strb	r1, [r3, #0]
 800cb78:	e7cf      	b.n	800cb1a <_puts_r+0x2e>
 800cb7a:	4622      	mov	r2, r4
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	f000 f874 	bl	800cc6a <__swbuf_r>
 800cb82:	3001      	adds	r0, #1
 800cb84:	d1c9      	bne.n	800cb1a <_puts_r+0x2e>
 800cb86:	e7df      	b.n	800cb48 <_puts_r+0x5c>
 800cb88:	6823      	ldr	r3, [r4, #0]
 800cb8a:	250a      	movs	r5, #10
 800cb8c:	1c5a      	adds	r2, r3, #1
 800cb8e:	6022      	str	r2, [r4, #0]
 800cb90:	701d      	strb	r5, [r3, #0]
 800cb92:	e7db      	b.n	800cb4c <_puts_r+0x60>

0800cb94 <puts>:
 800cb94:	4b02      	ldr	r3, [pc, #8]	; (800cba0 <puts+0xc>)
 800cb96:	4601      	mov	r1, r0
 800cb98:	6818      	ldr	r0, [r3, #0]
 800cb9a:	f7ff bfa7 	b.w	800caec <_puts_r>
 800cb9e:	bf00      	nop
 800cba0:	200000cc 	.word	0x200000cc

0800cba4 <siprintf>:
 800cba4:	b40e      	push	{r1, r2, r3}
 800cba6:	b500      	push	{lr}
 800cba8:	b09c      	sub	sp, #112	; 0x70
 800cbaa:	ab1d      	add	r3, sp, #116	; 0x74
 800cbac:	9002      	str	r0, [sp, #8]
 800cbae:	9006      	str	r0, [sp, #24]
 800cbb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbb4:	4809      	ldr	r0, [pc, #36]	; (800cbdc <siprintf+0x38>)
 800cbb6:	9107      	str	r1, [sp, #28]
 800cbb8:	9104      	str	r1, [sp, #16]
 800cbba:	4909      	ldr	r1, [pc, #36]	; (800cbe0 <siprintf+0x3c>)
 800cbbc:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbc0:	9105      	str	r1, [sp, #20]
 800cbc2:	6800      	ldr	r0, [r0, #0]
 800cbc4:	9301      	str	r3, [sp, #4]
 800cbc6:	a902      	add	r1, sp, #8
 800cbc8:	f001 fc12 	bl	800e3f0 <_svfiprintf_r>
 800cbcc:	9b02      	ldr	r3, [sp, #8]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	701a      	strb	r2, [r3, #0]
 800cbd2:	b01c      	add	sp, #112	; 0x70
 800cbd4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cbd8:	b003      	add	sp, #12
 800cbda:	4770      	bx	lr
 800cbdc:	200000cc 	.word	0x200000cc
 800cbe0:	ffff0208 	.word	0xffff0208

0800cbe4 <__sread>:
 800cbe4:	b510      	push	{r4, lr}
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbec:	f000 f900 	bl	800cdf0 <_read_r>
 800cbf0:	2800      	cmp	r0, #0
 800cbf2:	bfab      	itete	ge
 800cbf4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbf6:	89a3      	ldrhlt	r3, [r4, #12]
 800cbf8:	181b      	addge	r3, r3, r0
 800cbfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbfe:	bfac      	ite	ge
 800cc00:	6563      	strge	r3, [r4, #84]	; 0x54
 800cc02:	81a3      	strhlt	r3, [r4, #12]
 800cc04:	bd10      	pop	{r4, pc}

0800cc06 <__swrite>:
 800cc06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc0a:	461f      	mov	r7, r3
 800cc0c:	898b      	ldrh	r3, [r1, #12]
 800cc0e:	05db      	lsls	r3, r3, #23
 800cc10:	4605      	mov	r5, r0
 800cc12:	460c      	mov	r4, r1
 800cc14:	4616      	mov	r6, r2
 800cc16:	d505      	bpl.n	800cc24 <__swrite+0x1e>
 800cc18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc1c:	2302      	movs	r3, #2
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f000 f8d4 	bl	800cdcc <_lseek_r>
 800cc24:	89a3      	ldrh	r3, [r4, #12]
 800cc26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc2e:	81a3      	strh	r3, [r4, #12]
 800cc30:	4632      	mov	r2, r6
 800cc32:	463b      	mov	r3, r7
 800cc34:	4628      	mov	r0, r5
 800cc36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc3a:	f000 b8fb 	b.w	800ce34 <_write_r>

0800cc3e <__sseek>:
 800cc3e:	b510      	push	{r4, lr}
 800cc40:	460c      	mov	r4, r1
 800cc42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc46:	f000 f8c1 	bl	800cdcc <_lseek_r>
 800cc4a:	1c43      	adds	r3, r0, #1
 800cc4c:	89a3      	ldrh	r3, [r4, #12]
 800cc4e:	bf15      	itete	ne
 800cc50:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc5a:	81a3      	strheq	r3, [r4, #12]
 800cc5c:	bf18      	it	ne
 800cc5e:	81a3      	strhne	r3, [r4, #12]
 800cc60:	bd10      	pop	{r4, pc}

0800cc62 <__sclose>:
 800cc62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc66:	f000 b8a1 	b.w	800cdac <_close_r>

0800cc6a <__swbuf_r>:
 800cc6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc6c:	460e      	mov	r6, r1
 800cc6e:	4614      	mov	r4, r2
 800cc70:	4605      	mov	r5, r0
 800cc72:	b118      	cbz	r0, 800cc7c <__swbuf_r+0x12>
 800cc74:	6a03      	ldr	r3, [r0, #32]
 800cc76:	b90b      	cbnz	r3, 800cc7c <__swbuf_r+0x12>
 800cc78:	f7ff fef0 	bl	800ca5c <__sinit>
 800cc7c:	69a3      	ldr	r3, [r4, #24]
 800cc7e:	60a3      	str	r3, [r4, #8]
 800cc80:	89a3      	ldrh	r3, [r4, #12]
 800cc82:	071a      	lsls	r2, r3, #28
 800cc84:	d525      	bpl.n	800ccd2 <__swbuf_r+0x68>
 800cc86:	6923      	ldr	r3, [r4, #16]
 800cc88:	b31b      	cbz	r3, 800ccd2 <__swbuf_r+0x68>
 800cc8a:	6823      	ldr	r3, [r4, #0]
 800cc8c:	6922      	ldr	r2, [r4, #16]
 800cc8e:	1a98      	subs	r0, r3, r2
 800cc90:	6963      	ldr	r3, [r4, #20]
 800cc92:	b2f6      	uxtb	r6, r6
 800cc94:	4283      	cmp	r3, r0
 800cc96:	4637      	mov	r7, r6
 800cc98:	dc04      	bgt.n	800cca4 <__swbuf_r+0x3a>
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	f001 fe6f 	bl	800e980 <_fflush_r>
 800cca2:	b9e0      	cbnz	r0, 800ccde <__swbuf_r+0x74>
 800cca4:	68a3      	ldr	r3, [r4, #8]
 800cca6:	3b01      	subs	r3, #1
 800cca8:	60a3      	str	r3, [r4, #8]
 800ccaa:	6823      	ldr	r3, [r4, #0]
 800ccac:	1c5a      	adds	r2, r3, #1
 800ccae:	6022      	str	r2, [r4, #0]
 800ccb0:	701e      	strb	r6, [r3, #0]
 800ccb2:	6962      	ldr	r2, [r4, #20]
 800ccb4:	1c43      	adds	r3, r0, #1
 800ccb6:	429a      	cmp	r2, r3
 800ccb8:	d004      	beq.n	800ccc4 <__swbuf_r+0x5a>
 800ccba:	89a3      	ldrh	r3, [r4, #12]
 800ccbc:	07db      	lsls	r3, r3, #31
 800ccbe:	d506      	bpl.n	800ccce <__swbuf_r+0x64>
 800ccc0:	2e0a      	cmp	r6, #10
 800ccc2:	d104      	bne.n	800ccce <__swbuf_r+0x64>
 800ccc4:	4621      	mov	r1, r4
 800ccc6:	4628      	mov	r0, r5
 800ccc8:	f001 fe5a 	bl	800e980 <_fflush_r>
 800cccc:	b938      	cbnz	r0, 800ccde <__swbuf_r+0x74>
 800ccce:	4638      	mov	r0, r7
 800ccd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccd2:	4621      	mov	r1, r4
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f000 f805 	bl	800cce4 <__swsetup_r>
 800ccda:	2800      	cmp	r0, #0
 800ccdc:	d0d5      	beq.n	800cc8a <__swbuf_r+0x20>
 800ccde:	f04f 37ff 	mov.w	r7, #4294967295
 800cce2:	e7f4      	b.n	800ccce <__swbuf_r+0x64>

0800cce4 <__swsetup_r>:
 800cce4:	b538      	push	{r3, r4, r5, lr}
 800cce6:	4b2a      	ldr	r3, [pc, #168]	; (800cd90 <__swsetup_r+0xac>)
 800cce8:	4605      	mov	r5, r0
 800ccea:	6818      	ldr	r0, [r3, #0]
 800ccec:	460c      	mov	r4, r1
 800ccee:	b118      	cbz	r0, 800ccf8 <__swsetup_r+0x14>
 800ccf0:	6a03      	ldr	r3, [r0, #32]
 800ccf2:	b90b      	cbnz	r3, 800ccf8 <__swsetup_r+0x14>
 800ccf4:	f7ff feb2 	bl	800ca5c <__sinit>
 800ccf8:	89a3      	ldrh	r3, [r4, #12]
 800ccfa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccfe:	0718      	lsls	r0, r3, #28
 800cd00:	d422      	bmi.n	800cd48 <__swsetup_r+0x64>
 800cd02:	06d9      	lsls	r1, r3, #27
 800cd04:	d407      	bmi.n	800cd16 <__swsetup_r+0x32>
 800cd06:	2309      	movs	r3, #9
 800cd08:	602b      	str	r3, [r5, #0]
 800cd0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd0e:	81a3      	strh	r3, [r4, #12]
 800cd10:	f04f 30ff 	mov.w	r0, #4294967295
 800cd14:	e034      	b.n	800cd80 <__swsetup_r+0x9c>
 800cd16:	0758      	lsls	r0, r3, #29
 800cd18:	d512      	bpl.n	800cd40 <__swsetup_r+0x5c>
 800cd1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd1c:	b141      	cbz	r1, 800cd30 <__swsetup_r+0x4c>
 800cd1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd22:	4299      	cmp	r1, r3
 800cd24:	d002      	beq.n	800cd2c <__swsetup_r+0x48>
 800cd26:	4628      	mov	r0, r5
 800cd28:	f000 ff40 	bl	800dbac <_free_r>
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	6363      	str	r3, [r4, #52]	; 0x34
 800cd30:	89a3      	ldrh	r3, [r4, #12]
 800cd32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd36:	81a3      	strh	r3, [r4, #12]
 800cd38:	2300      	movs	r3, #0
 800cd3a:	6063      	str	r3, [r4, #4]
 800cd3c:	6923      	ldr	r3, [r4, #16]
 800cd3e:	6023      	str	r3, [r4, #0]
 800cd40:	89a3      	ldrh	r3, [r4, #12]
 800cd42:	f043 0308 	orr.w	r3, r3, #8
 800cd46:	81a3      	strh	r3, [r4, #12]
 800cd48:	6923      	ldr	r3, [r4, #16]
 800cd4a:	b94b      	cbnz	r3, 800cd60 <__swsetup_r+0x7c>
 800cd4c:	89a3      	ldrh	r3, [r4, #12]
 800cd4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd56:	d003      	beq.n	800cd60 <__swsetup_r+0x7c>
 800cd58:	4621      	mov	r1, r4
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	f001 fe5e 	bl	800ea1c <__smakebuf_r>
 800cd60:	89a0      	ldrh	r0, [r4, #12]
 800cd62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd66:	f010 0301 	ands.w	r3, r0, #1
 800cd6a:	d00a      	beq.n	800cd82 <__swsetup_r+0x9e>
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	60a3      	str	r3, [r4, #8]
 800cd70:	6963      	ldr	r3, [r4, #20]
 800cd72:	425b      	negs	r3, r3
 800cd74:	61a3      	str	r3, [r4, #24]
 800cd76:	6923      	ldr	r3, [r4, #16]
 800cd78:	b943      	cbnz	r3, 800cd8c <__swsetup_r+0xa8>
 800cd7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd7e:	d1c4      	bne.n	800cd0a <__swsetup_r+0x26>
 800cd80:	bd38      	pop	{r3, r4, r5, pc}
 800cd82:	0781      	lsls	r1, r0, #30
 800cd84:	bf58      	it	pl
 800cd86:	6963      	ldrpl	r3, [r4, #20]
 800cd88:	60a3      	str	r3, [r4, #8]
 800cd8a:	e7f4      	b.n	800cd76 <__swsetup_r+0x92>
 800cd8c:	2000      	movs	r0, #0
 800cd8e:	e7f7      	b.n	800cd80 <__swsetup_r+0x9c>
 800cd90:	200000cc 	.word	0x200000cc

0800cd94 <memset>:
 800cd94:	4402      	add	r2, r0
 800cd96:	4603      	mov	r3, r0
 800cd98:	4293      	cmp	r3, r2
 800cd9a:	d100      	bne.n	800cd9e <memset+0xa>
 800cd9c:	4770      	bx	lr
 800cd9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cda2:	e7f9      	b.n	800cd98 <memset+0x4>

0800cda4 <_localeconv_r>:
 800cda4:	4800      	ldr	r0, [pc, #0]	; (800cda8 <_localeconv_r+0x4>)
 800cda6:	4770      	bx	lr
 800cda8:	200001c0 	.word	0x200001c0

0800cdac <_close_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4d06      	ldr	r5, [pc, #24]	; (800cdc8 <_close_r+0x1c>)
 800cdb0:	2300      	movs	r3, #0
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	4608      	mov	r0, r1
 800cdb6:	602b      	str	r3, [r5, #0]
 800cdb8:	f7f6 fd87 	bl	80038ca <_close>
 800cdbc:	1c43      	adds	r3, r0, #1
 800cdbe:	d102      	bne.n	800cdc6 <_close_r+0x1a>
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	b103      	cbz	r3, 800cdc6 <_close_r+0x1a>
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	20000f5c 	.word	0x20000f5c

0800cdcc <_lseek_r>:
 800cdcc:	b538      	push	{r3, r4, r5, lr}
 800cdce:	4d07      	ldr	r5, [pc, #28]	; (800cdec <_lseek_r+0x20>)
 800cdd0:	4604      	mov	r4, r0
 800cdd2:	4608      	mov	r0, r1
 800cdd4:	4611      	mov	r1, r2
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	602a      	str	r2, [r5, #0]
 800cdda:	461a      	mov	r2, r3
 800cddc:	f7f6 fd9c 	bl	8003918 <_lseek>
 800cde0:	1c43      	adds	r3, r0, #1
 800cde2:	d102      	bne.n	800cdea <_lseek_r+0x1e>
 800cde4:	682b      	ldr	r3, [r5, #0]
 800cde6:	b103      	cbz	r3, 800cdea <_lseek_r+0x1e>
 800cde8:	6023      	str	r3, [r4, #0]
 800cdea:	bd38      	pop	{r3, r4, r5, pc}
 800cdec:	20000f5c 	.word	0x20000f5c

0800cdf0 <_read_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4d07      	ldr	r5, [pc, #28]	; (800ce10 <_read_r+0x20>)
 800cdf4:	4604      	mov	r4, r0
 800cdf6:	4608      	mov	r0, r1
 800cdf8:	4611      	mov	r1, r2
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	602a      	str	r2, [r5, #0]
 800cdfe:	461a      	mov	r2, r3
 800ce00:	f7f6 fd2a 	bl	8003858 <_read>
 800ce04:	1c43      	adds	r3, r0, #1
 800ce06:	d102      	bne.n	800ce0e <_read_r+0x1e>
 800ce08:	682b      	ldr	r3, [r5, #0]
 800ce0a:	b103      	cbz	r3, 800ce0e <_read_r+0x1e>
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	bd38      	pop	{r3, r4, r5, pc}
 800ce10:	20000f5c 	.word	0x20000f5c

0800ce14 <_sbrk_r>:
 800ce14:	b538      	push	{r3, r4, r5, lr}
 800ce16:	4d06      	ldr	r5, [pc, #24]	; (800ce30 <_sbrk_r+0x1c>)
 800ce18:	2300      	movs	r3, #0
 800ce1a:	4604      	mov	r4, r0
 800ce1c:	4608      	mov	r0, r1
 800ce1e:	602b      	str	r3, [r5, #0]
 800ce20:	f7f6 fd88 	bl	8003934 <_sbrk>
 800ce24:	1c43      	adds	r3, r0, #1
 800ce26:	d102      	bne.n	800ce2e <_sbrk_r+0x1a>
 800ce28:	682b      	ldr	r3, [r5, #0]
 800ce2a:	b103      	cbz	r3, 800ce2e <_sbrk_r+0x1a>
 800ce2c:	6023      	str	r3, [r4, #0]
 800ce2e:	bd38      	pop	{r3, r4, r5, pc}
 800ce30:	20000f5c 	.word	0x20000f5c

0800ce34 <_write_r>:
 800ce34:	b538      	push	{r3, r4, r5, lr}
 800ce36:	4d07      	ldr	r5, [pc, #28]	; (800ce54 <_write_r+0x20>)
 800ce38:	4604      	mov	r4, r0
 800ce3a:	4608      	mov	r0, r1
 800ce3c:	4611      	mov	r1, r2
 800ce3e:	2200      	movs	r2, #0
 800ce40:	602a      	str	r2, [r5, #0]
 800ce42:	461a      	mov	r2, r3
 800ce44:	f7f6 fd25 	bl	8003892 <_write>
 800ce48:	1c43      	adds	r3, r0, #1
 800ce4a:	d102      	bne.n	800ce52 <_write_r+0x1e>
 800ce4c:	682b      	ldr	r3, [r5, #0]
 800ce4e:	b103      	cbz	r3, 800ce52 <_write_r+0x1e>
 800ce50:	6023      	str	r3, [r4, #0]
 800ce52:	bd38      	pop	{r3, r4, r5, pc}
 800ce54:	20000f5c 	.word	0x20000f5c

0800ce58 <__errno>:
 800ce58:	4b01      	ldr	r3, [pc, #4]	; (800ce60 <__errno+0x8>)
 800ce5a:	6818      	ldr	r0, [r3, #0]
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	200000cc 	.word	0x200000cc

0800ce64 <__libc_init_array>:
 800ce64:	b570      	push	{r4, r5, r6, lr}
 800ce66:	4d0d      	ldr	r5, [pc, #52]	; (800ce9c <__libc_init_array+0x38>)
 800ce68:	4c0d      	ldr	r4, [pc, #52]	; (800cea0 <__libc_init_array+0x3c>)
 800ce6a:	1b64      	subs	r4, r4, r5
 800ce6c:	10a4      	asrs	r4, r4, #2
 800ce6e:	2600      	movs	r6, #0
 800ce70:	42a6      	cmp	r6, r4
 800ce72:	d109      	bne.n	800ce88 <__libc_init_array+0x24>
 800ce74:	4d0b      	ldr	r5, [pc, #44]	; (800cea4 <__libc_init_array+0x40>)
 800ce76:	4c0c      	ldr	r4, [pc, #48]	; (800cea8 <__libc_init_array+0x44>)
 800ce78:	f002 fe76 	bl	800fb68 <_init>
 800ce7c:	1b64      	subs	r4, r4, r5
 800ce7e:	10a4      	asrs	r4, r4, #2
 800ce80:	2600      	movs	r6, #0
 800ce82:	42a6      	cmp	r6, r4
 800ce84:	d105      	bne.n	800ce92 <__libc_init_array+0x2e>
 800ce86:	bd70      	pop	{r4, r5, r6, pc}
 800ce88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce8c:	4798      	blx	r3
 800ce8e:	3601      	adds	r6, #1
 800ce90:	e7ee      	b.n	800ce70 <__libc_init_array+0xc>
 800ce92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce96:	4798      	blx	r3
 800ce98:	3601      	adds	r6, #1
 800ce9a:	e7f2      	b.n	800ce82 <__libc_init_array+0x1e>
 800ce9c:	080131a8 	.word	0x080131a8
 800cea0:	080131a8 	.word	0x080131a8
 800cea4:	080131a8 	.word	0x080131a8
 800cea8:	080131ac 	.word	0x080131ac

0800ceac <__retarget_lock_init_recursive>:
 800ceac:	4770      	bx	lr

0800ceae <__retarget_lock_acquire_recursive>:
 800ceae:	4770      	bx	lr

0800ceb0 <__retarget_lock_release_recursive>:
 800ceb0:	4770      	bx	lr

0800ceb2 <quorem>:
 800ceb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceb6:	6903      	ldr	r3, [r0, #16]
 800ceb8:	690c      	ldr	r4, [r1, #16]
 800ceba:	42a3      	cmp	r3, r4
 800cebc:	4607      	mov	r7, r0
 800cebe:	db7e      	blt.n	800cfbe <quorem+0x10c>
 800cec0:	3c01      	subs	r4, #1
 800cec2:	f101 0814 	add.w	r8, r1, #20
 800cec6:	f100 0514 	add.w	r5, r0, #20
 800ceca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cece:	9301      	str	r3, [sp, #4]
 800ced0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ced4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ced8:	3301      	adds	r3, #1
 800ceda:	429a      	cmp	r2, r3
 800cedc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cee0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cee4:	fbb2 f6f3 	udiv	r6, r2, r3
 800cee8:	d331      	bcc.n	800cf4e <quorem+0x9c>
 800ceea:	f04f 0e00 	mov.w	lr, #0
 800ceee:	4640      	mov	r0, r8
 800cef0:	46ac      	mov	ip, r5
 800cef2:	46f2      	mov	sl, lr
 800cef4:	f850 2b04 	ldr.w	r2, [r0], #4
 800cef8:	b293      	uxth	r3, r2
 800cefa:	fb06 e303 	mla	r3, r6, r3, lr
 800cefe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf02:	0c1a      	lsrs	r2, r3, #16
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	ebaa 0303 	sub.w	r3, sl, r3
 800cf0a:	f8dc a000 	ldr.w	sl, [ip]
 800cf0e:	fa13 f38a 	uxtah	r3, r3, sl
 800cf12:	fb06 220e 	mla	r2, r6, lr, r2
 800cf16:	9300      	str	r3, [sp, #0]
 800cf18:	9b00      	ldr	r3, [sp, #0]
 800cf1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cf1e:	b292      	uxth	r2, r2
 800cf20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cf24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf28:	f8bd 3000 	ldrh.w	r3, [sp]
 800cf2c:	4581      	cmp	r9, r0
 800cf2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf32:	f84c 3b04 	str.w	r3, [ip], #4
 800cf36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cf3a:	d2db      	bcs.n	800cef4 <quorem+0x42>
 800cf3c:	f855 300b 	ldr.w	r3, [r5, fp]
 800cf40:	b92b      	cbnz	r3, 800cf4e <quorem+0x9c>
 800cf42:	9b01      	ldr	r3, [sp, #4]
 800cf44:	3b04      	subs	r3, #4
 800cf46:	429d      	cmp	r5, r3
 800cf48:	461a      	mov	r2, r3
 800cf4a:	d32c      	bcc.n	800cfa6 <quorem+0xf4>
 800cf4c:	613c      	str	r4, [r7, #16]
 800cf4e:	4638      	mov	r0, r7
 800cf50:	f001 f8f4 	bl	800e13c <__mcmp>
 800cf54:	2800      	cmp	r0, #0
 800cf56:	db22      	blt.n	800cf9e <quorem+0xec>
 800cf58:	3601      	adds	r6, #1
 800cf5a:	4629      	mov	r1, r5
 800cf5c:	2000      	movs	r0, #0
 800cf5e:	f858 2b04 	ldr.w	r2, [r8], #4
 800cf62:	f8d1 c000 	ldr.w	ip, [r1]
 800cf66:	b293      	uxth	r3, r2
 800cf68:	1ac3      	subs	r3, r0, r3
 800cf6a:	0c12      	lsrs	r2, r2, #16
 800cf6c:	fa13 f38c 	uxtah	r3, r3, ip
 800cf70:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cf74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cf78:	b29b      	uxth	r3, r3
 800cf7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf7e:	45c1      	cmp	r9, r8
 800cf80:	f841 3b04 	str.w	r3, [r1], #4
 800cf84:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cf88:	d2e9      	bcs.n	800cf5e <quorem+0xac>
 800cf8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf92:	b922      	cbnz	r2, 800cf9e <quorem+0xec>
 800cf94:	3b04      	subs	r3, #4
 800cf96:	429d      	cmp	r5, r3
 800cf98:	461a      	mov	r2, r3
 800cf9a:	d30a      	bcc.n	800cfb2 <quorem+0x100>
 800cf9c:	613c      	str	r4, [r7, #16]
 800cf9e:	4630      	mov	r0, r6
 800cfa0:	b003      	add	sp, #12
 800cfa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cfa6:	6812      	ldr	r2, [r2, #0]
 800cfa8:	3b04      	subs	r3, #4
 800cfaa:	2a00      	cmp	r2, #0
 800cfac:	d1ce      	bne.n	800cf4c <quorem+0x9a>
 800cfae:	3c01      	subs	r4, #1
 800cfb0:	e7c9      	b.n	800cf46 <quorem+0x94>
 800cfb2:	6812      	ldr	r2, [r2, #0]
 800cfb4:	3b04      	subs	r3, #4
 800cfb6:	2a00      	cmp	r2, #0
 800cfb8:	d1f0      	bne.n	800cf9c <quorem+0xea>
 800cfba:	3c01      	subs	r4, #1
 800cfbc:	e7eb      	b.n	800cf96 <quorem+0xe4>
 800cfbe:	2000      	movs	r0, #0
 800cfc0:	e7ee      	b.n	800cfa0 <quorem+0xee>
 800cfc2:	0000      	movs	r0, r0
 800cfc4:	0000      	movs	r0, r0
	...

0800cfc8 <_dtoa_r>:
 800cfc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfcc:	ed2d 8b04 	vpush	{d8-d9}
 800cfd0:	69c5      	ldr	r5, [r0, #28]
 800cfd2:	b093      	sub	sp, #76	; 0x4c
 800cfd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cfd8:	ec57 6b10 	vmov	r6, r7, d0
 800cfdc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cfe0:	9107      	str	r1, [sp, #28]
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	920a      	str	r2, [sp, #40]	; 0x28
 800cfe6:	930d      	str	r3, [sp, #52]	; 0x34
 800cfe8:	b975      	cbnz	r5, 800d008 <_dtoa_r+0x40>
 800cfea:	2010      	movs	r0, #16
 800cfec:	f7fe ff90 	bl	800bf10 <malloc>
 800cff0:	4602      	mov	r2, r0
 800cff2:	61e0      	str	r0, [r4, #28]
 800cff4:	b920      	cbnz	r0, 800d000 <_dtoa_r+0x38>
 800cff6:	4bae      	ldr	r3, [pc, #696]	; (800d2b0 <_dtoa_r+0x2e8>)
 800cff8:	21ef      	movs	r1, #239	; 0xef
 800cffa:	48ae      	ldr	r0, [pc, #696]	; (800d2b4 <_dtoa_r+0x2ec>)
 800cffc:	f001 fd94 	bl	800eb28 <__assert_func>
 800d000:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d004:	6005      	str	r5, [r0, #0]
 800d006:	60c5      	str	r5, [r0, #12]
 800d008:	69e3      	ldr	r3, [r4, #28]
 800d00a:	6819      	ldr	r1, [r3, #0]
 800d00c:	b151      	cbz	r1, 800d024 <_dtoa_r+0x5c>
 800d00e:	685a      	ldr	r2, [r3, #4]
 800d010:	604a      	str	r2, [r1, #4]
 800d012:	2301      	movs	r3, #1
 800d014:	4093      	lsls	r3, r2
 800d016:	608b      	str	r3, [r1, #8]
 800d018:	4620      	mov	r0, r4
 800d01a:	f000 fe53 	bl	800dcc4 <_Bfree>
 800d01e:	69e3      	ldr	r3, [r4, #28]
 800d020:	2200      	movs	r2, #0
 800d022:	601a      	str	r2, [r3, #0]
 800d024:	1e3b      	subs	r3, r7, #0
 800d026:	bfbb      	ittet	lt
 800d028:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d02c:	9303      	strlt	r3, [sp, #12]
 800d02e:	2300      	movge	r3, #0
 800d030:	2201      	movlt	r2, #1
 800d032:	bfac      	ite	ge
 800d034:	f8c8 3000 	strge.w	r3, [r8]
 800d038:	f8c8 2000 	strlt.w	r2, [r8]
 800d03c:	4b9e      	ldr	r3, [pc, #632]	; (800d2b8 <_dtoa_r+0x2f0>)
 800d03e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800d042:	ea33 0308 	bics.w	r3, r3, r8
 800d046:	d11b      	bne.n	800d080 <_dtoa_r+0xb8>
 800d048:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d04a:	f242 730f 	movw	r3, #9999	; 0x270f
 800d04e:	6013      	str	r3, [r2, #0]
 800d050:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800d054:	4333      	orrs	r3, r6
 800d056:	f000 8593 	beq.w	800db80 <_dtoa_r+0xbb8>
 800d05a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d05c:	b963      	cbnz	r3, 800d078 <_dtoa_r+0xb0>
 800d05e:	4b97      	ldr	r3, [pc, #604]	; (800d2bc <_dtoa_r+0x2f4>)
 800d060:	e027      	b.n	800d0b2 <_dtoa_r+0xea>
 800d062:	4b97      	ldr	r3, [pc, #604]	; (800d2c0 <_dtoa_r+0x2f8>)
 800d064:	9300      	str	r3, [sp, #0]
 800d066:	3308      	adds	r3, #8
 800d068:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d06a:	6013      	str	r3, [r2, #0]
 800d06c:	9800      	ldr	r0, [sp, #0]
 800d06e:	b013      	add	sp, #76	; 0x4c
 800d070:	ecbd 8b04 	vpop	{d8-d9}
 800d074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d078:	4b90      	ldr	r3, [pc, #576]	; (800d2bc <_dtoa_r+0x2f4>)
 800d07a:	9300      	str	r3, [sp, #0]
 800d07c:	3303      	adds	r3, #3
 800d07e:	e7f3      	b.n	800d068 <_dtoa_r+0xa0>
 800d080:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d084:	2200      	movs	r2, #0
 800d086:	ec51 0b17 	vmov	r0, r1, d7
 800d08a:	eeb0 8a47 	vmov.f32	s16, s14
 800d08e:	eef0 8a67 	vmov.f32	s17, s15
 800d092:	2300      	movs	r3, #0
 800d094:	f7f3 fd40 	bl	8000b18 <__aeabi_dcmpeq>
 800d098:	4681      	mov	r9, r0
 800d09a:	b160      	cbz	r0, 800d0b6 <_dtoa_r+0xee>
 800d09c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d09e:	2301      	movs	r3, #1
 800d0a0:	6013      	str	r3, [r2, #0]
 800d0a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	f000 8568 	beq.w	800db7a <_dtoa_r+0xbb2>
 800d0aa:	4b86      	ldr	r3, [pc, #536]	; (800d2c4 <_dtoa_r+0x2fc>)
 800d0ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d0ae:	6013      	str	r3, [r2, #0]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	9300      	str	r3, [sp, #0]
 800d0b4:	e7da      	b.n	800d06c <_dtoa_r+0xa4>
 800d0b6:	aa10      	add	r2, sp, #64	; 0x40
 800d0b8:	a911      	add	r1, sp, #68	; 0x44
 800d0ba:	4620      	mov	r0, r4
 800d0bc:	eeb0 0a48 	vmov.f32	s0, s16
 800d0c0:	eef0 0a68 	vmov.f32	s1, s17
 800d0c4:	f001 f8e0 	bl	800e288 <__d2b>
 800d0c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d0cc:	4682      	mov	sl, r0
 800d0ce:	2d00      	cmp	r5, #0
 800d0d0:	d07f      	beq.n	800d1d2 <_dtoa_r+0x20a>
 800d0d2:	ee18 3a90 	vmov	r3, s17
 800d0d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d0da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800d0de:	ec51 0b18 	vmov	r0, r1, d8
 800d0e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d0e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d0ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800d0ee:	4619      	mov	r1, r3
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	4b75      	ldr	r3, [pc, #468]	; (800d2c8 <_dtoa_r+0x300>)
 800d0f4:	f7f3 f8f0 	bl	80002d8 <__aeabi_dsub>
 800d0f8:	a367      	add	r3, pc, #412	; (adr r3, 800d298 <_dtoa_r+0x2d0>)
 800d0fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0fe:	f7f3 faa3 	bl	8000648 <__aeabi_dmul>
 800d102:	a367      	add	r3, pc, #412	; (adr r3, 800d2a0 <_dtoa_r+0x2d8>)
 800d104:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d108:	f7f3 f8e8 	bl	80002dc <__adddf3>
 800d10c:	4606      	mov	r6, r0
 800d10e:	4628      	mov	r0, r5
 800d110:	460f      	mov	r7, r1
 800d112:	f7f3 fa2f 	bl	8000574 <__aeabi_i2d>
 800d116:	a364      	add	r3, pc, #400	; (adr r3, 800d2a8 <_dtoa_r+0x2e0>)
 800d118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d11c:	f7f3 fa94 	bl	8000648 <__aeabi_dmul>
 800d120:	4602      	mov	r2, r0
 800d122:	460b      	mov	r3, r1
 800d124:	4630      	mov	r0, r6
 800d126:	4639      	mov	r1, r7
 800d128:	f7f3 f8d8 	bl	80002dc <__adddf3>
 800d12c:	4606      	mov	r6, r0
 800d12e:	460f      	mov	r7, r1
 800d130:	f7f3 fd3a 	bl	8000ba8 <__aeabi_d2iz>
 800d134:	2200      	movs	r2, #0
 800d136:	4683      	mov	fp, r0
 800d138:	2300      	movs	r3, #0
 800d13a:	4630      	mov	r0, r6
 800d13c:	4639      	mov	r1, r7
 800d13e:	f7f3 fcf5 	bl	8000b2c <__aeabi_dcmplt>
 800d142:	b148      	cbz	r0, 800d158 <_dtoa_r+0x190>
 800d144:	4658      	mov	r0, fp
 800d146:	f7f3 fa15 	bl	8000574 <__aeabi_i2d>
 800d14a:	4632      	mov	r2, r6
 800d14c:	463b      	mov	r3, r7
 800d14e:	f7f3 fce3 	bl	8000b18 <__aeabi_dcmpeq>
 800d152:	b908      	cbnz	r0, 800d158 <_dtoa_r+0x190>
 800d154:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d158:	f1bb 0f16 	cmp.w	fp, #22
 800d15c:	d857      	bhi.n	800d20e <_dtoa_r+0x246>
 800d15e:	4b5b      	ldr	r3, [pc, #364]	; (800d2cc <_dtoa_r+0x304>)
 800d160:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d168:	ec51 0b18 	vmov	r0, r1, d8
 800d16c:	f7f3 fcde 	bl	8000b2c <__aeabi_dcmplt>
 800d170:	2800      	cmp	r0, #0
 800d172:	d04e      	beq.n	800d212 <_dtoa_r+0x24a>
 800d174:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d178:	2300      	movs	r3, #0
 800d17a:	930c      	str	r3, [sp, #48]	; 0x30
 800d17c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d17e:	1b5b      	subs	r3, r3, r5
 800d180:	1e5a      	subs	r2, r3, #1
 800d182:	bf45      	ittet	mi
 800d184:	f1c3 0301 	rsbmi	r3, r3, #1
 800d188:	9305      	strmi	r3, [sp, #20]
 800d18a:	2300      	movpl	r3, #0
 800d18c:	2300      	movmi	r3, #0
 800d18e:	9206      	str	r2, [sp, #24]
 800d190:	bf54      	ite	pl
 800d192:	9305      	strpl	r3, [sp, #20]
 800d194:	9306      	strmi	r3, [sp, #24]
 800d196:	f1bb 0f00 	cmp.w	fp, #0
 800d19a:	db3c      	blt.n	800d216 <_dtoa_r+0x24e>
 800d19c:	9b06      	ldr	r3, [sp, #24]
 800d19e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800d1a2:	445b      	add	r3, fp
 800d1a4:	9306      	str	r3, [sp, #24]
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	9308      	str	r3, [sp, #32]
 800d1aa:	9b07      	ldr	r3, [sp, #28]
 800d1ac:	2b09      	cmp	r3, #9
 800d1ae:	d868      	bhi.n	800d282 <_dtoa_r+0x2ba>
 800d1b0:	2b05      	cmp	r3, #5
 800d1b2:	bfc4      	itt	gt
 800d1b4:	3b04      	subgt	r3, #4
 800d1b6:	9307      	strgt	r3, [sp, #28]
 800d1b8:	9b07      	ldr	r3, [sp, #28]
 800d1ba:	f1a3 0302 	sub.w	r3, r3, #2
 800d1be:	bfcc      	ite	gt
 800d1c0:	2500      	movgt	r5, #0
 800d1c2:	2501      	movle	r5, #1
 800d1c4:	2b03      	cmp	r3, #3
 800d1c6:	f200 8085 	bhi.w	800d2d4 <_dtoa_r+0x30c>
 800d1ca:	e8df f003 	tbb	[pc, r3]
 800d1ce:	3b2e      	.short	0x3b2e
 800d1d0:	5839      	.short	0x5839
 800d1d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d1d6:	441d      	add	r5, r3
 800d1d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d1dc:	2b20      	cmp	r3, #32
 800d1de:	bfc1      	itttt	gt
 800d1e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d1e4:	fa08 f803 	lslgt.w	r8, r8, r3
 800d1e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800d1ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800d1f0:	bfd6      	itet	le
 800d1f2:	f1c3 0320 	rsble	r3, r3, #32
 800d1f6:	ea48 0003 	orrgt.w	r0, r8, r3
 800d1fa:	fa06 f003 	lslle.w	r0, r6, r3
 800d1fe:	f7f3 f9a9 	bl	8000554 <__aeabi_ui2d>
 800d202:	2201      	movs	r2, #1
 800d204:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d208:	3d01      	subs	r5, #1
 800d20a:	920e      	str	r2, [sp, #56]	; 0x38
 800d20c:	e76f      	b.n	800d0ee <_dtoa_r+0x126>
 800d20e:	2301      	movs	r3, #1
 800d210:	e7b3      	b.n	800d17a <_dtoa_r+0x1b2>
 800d212:	900c      	str	r0, [sp, #48]	; 0x30
 800d214:	e7b2      	b.n	800d17c <_dtoa_r+0x1b4>
 800d216:	9b05      	ldr	r3, [sp, #20]
 800d218:	eba3 030b 	sub.w	r3, r3, fp
 800d21c:	9305      	str	r3, [sp, #20]
 800d21e:	f1cb 0300 	rsb	r3, fp, #0
 800d222:	9308      	str	r3, [sp, #32]
 800d224:	2300      	movs	r3, #0
 800d226:	930b      	str	r3, [sp, #44]	; 0x2c
 800d228:	e7bf      	b.n	800d1aa <_dtoa_r+0x1e2>
 800d22a:	2300      	movs	r3, #0
 800d22c:	9309      	str	r3, [sp, #36]	; 0x24
 800d22e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d230:	2b00      	cmp	r3, #0
 800d232:	dc52      	bgt.n	800d2da <_dtoa_r+0x312>
 800d234:	2301      	movs	r3, #1
 800d236:	9301      	str	r3, [sp, #4]
 800d238:	9304      	str	r3, [sp, #16]
 800d23a:	461a      	mov	r2, r3
 800d23c:	920a      	str	r2, [sp, #40]	; 0x28
 800d23e:	e00b      	b.n	800d258 <_dtoa_r+0x290>
 800d240:	2301      	movs	r3, #1
 800d242:	e7f3      	b.n	800d22c <_dtoa_r+0x264>
 800d244:	2300      	movs	r3, #0
 800d246:	9309      	str	r3, [sp, #36]	; 0x24
 800d248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d24a:	445b      	add	r3, fp
 800d24c:	9301      	str	r3, [sp, #4]
 800d24e:	3301      	adds	r3, #1
 800d250:	2b01      	cmp	r3, #1
 800d252:	9304      	str	r3, [sp, #16]
 800d254:	bfb8      	it	lt
 800d256:	2301      	movlt	r3, #1
 800d258:	69e0      	ldr	r0, [r4, #28]
 800d25a:	2100      	movs	r1, #0
 800d25c:	2204      	movs	r2, #4
 800d25e:	f102 0614 	add.w	r6, r2, #20
 800d262:	429e      	cmp	r6, r3
 800d264:	d93d      	bls.n	800d2e2 <_dtoa_r+0x31a>
 800d266:	6041      	str	r1, [r0, #4]
 800d268:	4620      	mov	r0, r4
 800d26a:	f000 fceb 	bl	800dc44 <_Balloc>
 800d26e:	9000      	str	r0, [sp, #0]
 800d270:	2800      	cmp	r0, #0
 800d272:	d139      	bne.n	800d2e8 <_dtoa_r+0x320>
 800d274:	4b16      	ldr	r3, [pc, #88]	; (800d2d0 <_dtoa_r+0x308>)
 800d276:	4602      	mov	r2, r0
 800d278:	f240 11af 	movw	r1, #431	; 0x1af
 800d27c:	e6bd      	b.n	800cffa <_dtoa_r+0x32>
 800d27e:	2301      	movs	r3, #1
 800d280:	e7e1      	b.n	800d246 <_dtoa_r+0x27e>
 800d282:	2501      	movs	r5, #1
 800d284:	2300      	movs	r3, #0
 800d286:	9307      	str	r3, [sp, #28]
 800d288:	9509      	str	r5, [sp, #36]	; 0x24
 800d28a:	f04f 33ff 	mov.w	r3, #4294967295
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	9304      	str	r3, [sp, #16]
 800d292:	2200      	movs	r2, #0
 800d294:	2312      	movs	r3, #18
 800d296:	e7d1      	b.n	800d23c <_dtoa_r+0x274>
 800d298:	636f4361 	.word	0x636f4361
 800d29c:	3fd287a7 	.word	0x3fd287a7
 800d2a0:	8b60c8b3 	.word	0x8b60c8b3
 800d2a4:	3fc68a28 	.word	0x3fc68a28
 800d2a8:	509f79fb 	.word	0x509f79fb
 800d2ac:	3fd34413 	.word	0x3fd34413
 800d2b0:	08012e39 	.word	0x08012e39
 800d2b4:	08012e50 	.word	0x08012e50
 800d2b8:	7ff00000 	.word	0x7ff00000
 800d2bc:	08012e35 	.word	0x08012e35
 800d2c0:	08012e2c 	.word	0x08012e2c
 800d2c4:	08012e09 	.word	0x08012e09
 800d2c8:	3ff80000 	.word	0x3ff80000
 800d2cc:	08012f40 	.word	0x08012f40
 800d2d0:	08012ea8 	.word	0x08012ea8
 800d2d4:	2301      	movs	r3, #1
 800d2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d2d8:	e7d7      	b.n	800d28a <_dtoa_r+0x2c2>
 800d2da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2dc:	9301      	str	r3, [sp, #4]
 800d2de:	9304      	str	r3, [sp, #16]
 800d2e0:	e7ba      	b.n	800d258 <_dtoa_r+0x290>
 800d2e2:	3101      	adds	r1, #1
 800d2e4:	0052      	lsls	r2, r2, #1
 800d2e6:	e7ba      	b.n	800d25e <_dtoa_r+0x296>
 800d2e8:	69e3      	ldr	r3, [r4, #28]
 800d2ea:	9a00      	ldr	r2, [sp, #0]
 800d2ec:	601a      	str	r2, [r3, #0]
 800d2ee:	9b04      	ldr	r3, [sp, #16]
 800d2f0:	2b0e      	cmp	r3, #14
 800d2f2:	f200 80a8 	bhi.w	800d446 <_dtoa_r+0x47e>
 800d2f6:	2d00      	cmp	r5, #0
 800d2f8:	f000 80a5 	beq.w	800d446 <_dtoa_r+0x47e>
 800d2fc:	f1bb 0f00 	cmp.w	fp, #0
 800d300:	dd38      	ble.n	800d374 <_dtoa_r+0x3ac>
 800d302:	4bc0      	ldr	r3, [pc, #768]	; (800d604 <_dtoa_r+0x63c>)
 800d304:	f00b 020f 	and.w	r2, fp, #15
 800d308:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d30c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d310:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d314:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d318:	d019      	beq.n	800d34e <_dtoa_r+0x386>
 800d31a:	4bbb      	ldr	r3, [pc, #748]	; (800d608 <_dtoa_r+0x640>)
 800d31c:	ec51 0b18 	vmov	r0, r1, d8
 800d320:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d324:	f7f3 faba 	bl	800089c <__aeabi_ddiv>
 800d328:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d32c:	f008 080f 	and.w	r8, r8, #15
 800d330:	2503      	movs	r5, #3
 800d332:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d608 <_dtoa_r+0x640>
 800d336:	f1b8 0f00 	cmp.w	r8, #0
 800d33a:	d10a      	bne.n	800d352 <_dtoa_r+0x38a>
 800d33c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d340:	4632      	mov	r2, r6
 800d342:	463b      	mov	r3, r7
 800d344:	f7f3 faaa 	bl	800089c <__aeabi_ddiv>
 800d348:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d34c:	e02b      	b.n	800d3a6 <_dtoa_r+0x3de>
 800d34e:	2502      	movs	r5, #2
 800d350:	e7ef      	b.n	800d332 <_dtoa_r+0x36a>
 800d352:	f018 0f01 	tst.w	r8, #1
 800d356:	d008      	beq.n	800d36a <_dtoa_r+0x3a2>
 800d358:	4630      	mov	r0, r6
 800d35a:	4639      	mov	r1, r7
 800d35c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d360:	f7f3 f972 	bl	8000648 <__aeabi_dmul>
 800d364:	3501      	adds	r5, #1
 800d366:	4606      	mov	r6, r0
 800d368:	460f      	mov	r7, r1
 800d36a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d36e:	f109 0908 	add.w	r9, r9, #8
 800d372:	e7e0      	b.n	800d336 <_dtoa_r+0x36e>
 800d374:	f000 809f 	beq.w	800d4b6 <_dtoa_r+0x4ee>
 800d378:	f1cb 0600 	rsb	r6, fp, #0
 800d37c:	4ba1      	ldr	r3, [pc, #644]	; (800d604 <_dtoa_r+0x63c>)
 800d37e:	4fa2      	ldr	r7, [pc, #648]	; (800d608 <_dtoa_r+0x640>)
 800d380:	f006 020f 	and.w	r2, r6, #15
 800d384:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d38c:	ec51 0b18 	vmov	r0, r1, d8
 800d390:	f7f3 f95a 	bl	8000648 <__aeabi_dmul>
 800d394:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d398:	1136      	asrs	r6, r6, #4
 800d39a:	2300      	movs	r3, #0
 800d39c:	2502      	movs	r5, #2
 800d39e:	2e00      	cmp	r6, #0
 800d3a0:	d17e      	bne.n	800d4a0 <_dtoa_r+0x4d8>
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d1d0      	bne.n	800d348 <_dtoa_r+0x380>
 800d3a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d3a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	f000 8084 	beq.w	800d4ba <_dtoa_r+0x4f2>
 800d3b2:	4b96      	ldr	r3, [pc, #600]	; (800d60c <_dtoa_r+0x644>)
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	4640      	mov	r0, r8
 800d3b8:	4649      	mov	r1, r9
 800d3ba:	f7f3 fbb7 	bl	8000b2c <__aeabi_dcmplt>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	d07b      	beq.n	800d4ba <_dtoa_r+0x4f2>
 800d3c2:	9b04      	ldr	r3, [sp, #16]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d078      	beq.n	800d4ba <_dtoa_r+0x4f2>
 800d3c8:	9b01      	ldr	r3, [sp, #4]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	dd39      	ble.n	800d442 <_dtoa_r+0x47a>
 800d3ce:	4b90      	ldr	r3, [pc, #576]	; (800d610 <_dtoa_r+0x648>)
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	4640      	mov	r0, r8
 800d3d4:	4649      	mov	r1, r9
 800d3d6:	f7f3 f937 	bl	8000648 <__aeabi_dmul>
 800d3da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d3de:	9e01      	ldr	r6, [sp, #4]
 800d3e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d3e4:	3501      	adds	r5, #1
 800d3e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d3ea:	4628      	mov	r0, r5
 800d3ec:	f7f3 f8c2 	bl	8000574 <__aeabi_i2d>
 800d3f0:	4642      	mov	r2, r8
 800d3f2:	464b      	mov	r3, r9
 800d3f4:	f7f3 f928 	bl	8000648 <__aeabi_dmul>
 800d3f8:	4b86      	ldr	r3, [pc, #536]	; (800d614 <_dtoa_r+0x64c>)
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	f7f2 ff6e 	bl	80002dc <__adddf3>
 800d400:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d408:	9303      	str	r3, [sp, #12]
 800d40a:	2e00      	cmp	r6, #0
 800d40c:	d158      	bne.n	800d4c0 <_dtoa_r+0x4f8>
 800d40e:	4b82      	ldr	r3, [pc, #520]	; (800d618 <_dtoa_r+0x650>)
 800d410:	2200      	movs	r2, #0
 800d412:	4640      	mov	r0, r8
 800d414:	4649      	mov	r1, r9
 800d416:	f7f2 ff5f 	bl	80002d8 <__aeabi_dsub>
 800d41a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d41e:	4680      	mov	r8, r0
 800d420:	4689      	mov	r9, r1
 800d422:	f7f3 fba1 	bl	8000b68 <__aeabi_dcmpgt>
 800d426:	2800      	cmp	r0, #0
 800d428:	f040 8296 	bne.w	800d958 <_dtoa_r+0x990>
 800d42c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d430:	4640      	mov	r0, r8
 800d432:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d436:	4649      	mov	r1, r9
 800d438:	f7f3 fb78 	bl	8000b2c <__aeabi_dcmplt>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	f040 8289 	bne.w	800d954 <_dtoa_r+0x98c>
 800d442:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d446:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d448:	2b00      	cmp	r3, #0
 800d44a:	f2c0 814e 	blt.w	800d6ea <_dtoa_r+0x722>
 800d44e:	f1bb 0f0e 	cmp.w	fp, #14
 800d452:	f300 814a 	bgt.w	800d6ea <_dtoa_r+0x722>
 800d456:	4b6b      	ldr	r3, [pc, #428]	; (800d604 <_dtoa_r+0x63c>)
 800d458:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d45c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d462:	2b00      	cmp	r3, #0
 800d464:	f280 80dc 	bge.w	800d620 <_dtoa_r+0x658>
 800d468:	9b04      	ldr	r3, [sp, #16]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f300 80d8 	bgt.w	800d620 <_dtoa_r+0x658>
 800d470:	f040 826f 	bne.w	800d952 <_dtoa_r+0x98a>
 800d474:	4b68      	ldr	r3, [pc, #416]	; (800d618 <_dtoa_r+0x650>)
 800d476:	2200      	movs	r2, #0
 800d478:	4640      	mov	r0, r8
 800d47a:	4649      	mov	r1, r9
 800d47c:	f7f3 f8e4 	bl	8000648 <__aeabi_dmul>
 800d480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d484:	f7f3 fb66 	bl	8000b54 <__aeabi_dcmpge>
 800d488:	9e04      	ldr	r6, [sp, #16]
 800d48a:	4637      	mov	r7, r6
 800d48c:	2800      	cmp	r0, #0
 800d48e:	f040 8245 	bne.w	800d91c <_dtoa_r+0x954>
 800d492:	9d00      	ldr	r5, [sp, #0]
 800d494:	2331      	movs	r3, #49	; 0x31
 800d496:	f805 3b01 	strb.w	r3, [r5], #1
 800d49a:	f10b 0b01 	add.w	fp, fp, #1
 800d49e:	e241      	b.n	800d924 <_dtoa_r+0x95c>
 800d4a0:	07f2      	lsls	r2, r6, #31
 800d4a2:	d505      	bpl.n	800d4b0 <_dtoa_r+0x4e8>
 800d4a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4a8:	f7f3 f8ce 	bl	8000648 <__aeabi_dmul>
 800d4ac:	3501      	adds	r5, #1
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	1076      	asrs	r6, r6, #1
 800d4b2:	3708      	adds	r7, #8
 800d4b4:	e773      	b.n	800d39e <_dtoa_r+0x3d6>
 800d4b6:	2502      	movs	r5, #2
 800d4b8:	e775      	b.n	800d3a6 <_dtoa_r+0x3de>
 800d4ba:	9e04      	ldr	r6, [sp, #16]
 800d4bc:	465f      	mov	r7, fp
 800d4be:	e792      	b.n	800d3e6 <_dtoa_r+0x41e>
 800d4c0:	9900      	ldr	r1, [sp, #0]
 800d4c2:	4b50      	ldr	r3, [pc, #320]	; (800d604 <_dtoa_r+0x63c>)
 800d4c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d4c8:	4431      	add	r1, r6
 800d4ca:	9102      	str	r1, [sp, #8]
 800d4cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d4ce:	eeb0 9a47 	vmov.f32	s18, s14
 800d4d2:	eef0 9a67 	vmov.f32	s19, s15
 800d4d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d4da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d4de:	2900      	cmp	r1, #0
 800d4e0:	d044      	beq.n	800d56c <_dtoa_r+0x5a4>
 800d4e2:	494e      	ldr	r1, [pc, #312]	; (800d61c <_dtoa_r+0x654>)
 800d4e4:	2000      	movs	r0, #0
 800d4e6:	f7f3 f9d9 	bl	800089c <__aeabi_ddiv>
 800d4ea:	ec53 2b19 	vmov	r2, r3, d9
 800d4ee:	f7f2 fef3 	bl	80002d8 <__aeabi_dsub>
 800d4f2:	9d00      	ldr	r5, [sp, #0]
 800d4f4:	ec41 0b19 	vmov	d9, r0, r1
 800d4f8:	4649      	mov	r1, r9
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	f7f3 fb54 	bl	8000ba8 <__aeabi_d2iz>
 800d500:	4606      	mov	r6, r0
 800d502:	f7f3 f837 	bl	8000574 <__aeabi_i2d>
 800d506:	4602      	mov	r2, r0
 800d508:	460b      	mov	r3, r1
 800d50a:	4640      	mov	r0, r8
 800d50c:	4649      	mov	r1, r9
 800d50e:	f7f2 fee3 	bl	80002d8 <__aeabi_dsub>
 800d512:	3630      	adds	r6, #48	; 0x30
 800d514:	f805 6b01 	strb.w	r6, [r5], #1
 800d518:	ec53 2b19 	vmov	r2, r3, d9
 800d51c:	4680      	mov	r8, r0
 800d51e:	4689      	mov	r9, r1
 800d520:	f7f3 fb04 	bl	8000b2c <__aeabi_dcmplt>
 800d524:	2800      	cmp	r0, #0
 800d526:	d164      	bne.n	800d5f2 <_dtoa_r+0x62a>
 800d528:	4642      	mov	r2, r8
 800d52a:	464b      	mov	r3, r9
 800d52c:	4937      	ldr	r1, [pc, #220]	; (800d60c <_dtoa_r+0x644>)
 800d52e:	2000      	movs	r0, #0
 800d530:	f7f2 fed2 	bl	80002d8 <__aeabi_dsub>
 800d534:	ec53 2b19 	vmov	r2, r3, d9
 800d538:	f7f3 faf8 	bl	8000b2c <__aeabi_dcmplt>
 800d53c:	2800      	cmp	r0, #0
 800d53e:	f040 80b6 	bne.w	800d6ae <_dtoa_r+0x6e6>
 800d542:	9b02      	ldr	r3, [sp, #8]
 800d544:	429d      	cmp	r5, r3
 800d546:	f43f af7c 	beq.w	800d442 <_dtoa_r+0x47a>
 800d54a:	4b31      	ldr	r3, [pc, #196]	; (800d610 <_dtoa_r+0x648>)
 800d54c:	ec51 0b19 	vmov	r0, r1, d9
 800d550:	2200      	movs	r2, #0
 800d552:	f7f3 f879 	bl	8000648 <__aeabi_dmul>
 800d556:	4b2e      	ldr	r3, [pc, #184]	; (800d610 <_dtoa_r+0x648>)
 800d558:	ec41 0b19 	vmov	d9, r0, r1
 800d55c:	2200      	movs	r2, #0
 800d55e:	4640      	mov	r0, r8
 800d560:	4649      	mov	r1, r9
 800d562:	f7f3 f871 	bl	8000648 <__aeabi_dmul>
 800d566:	4680      	mov	r8, r0
 800d568:	4689      	mov	r9, r1
 800d56a:	e7c5      	b.n	800d4f8 <_dtoa_r+0x530>
 800d56c:	ec51 0b17 	vmov	r0, r1, d7
 800d570:	f7f3 f86a 	bl	8000648 <__aeabi_dmul>
 800d574:	9b02      	ldr	r3, [sp, #8]
 800d576:	9d00      	ldr	r5, [sp, #0]
 800d578:	930f      	str	r3, [sp, #60]	; 0x3c
 800d57a:	ec41 0b19 	vmov	d9, r0, r1
 800d57e:	4649      	mov	r1, r9
 800d580:	4640      	mov	r0, r8
 800d582:	f7f3 fb11 	bl	8000ba8 <__aeabi_d2iz>
 800d586:	4606      	mov	r6, r0
 800d588:	f7f2 fff4 	bl	8000574 <__aeabi_i2d>
 800d58c:	3630      	adds	r6, #48	; 0x30
 800d58e:	4602      	mov	r2, r0
 800d590:	460b      	mov	r3, r1
 800d592:	4640      	mov	r0, r8
 800d594:	4649      	mov	r1, r9
 800d596:	f7f2 fe9f 	bl	80002d8 <__aeabi_dsub>
 800d59a:	f805 6b01 	strb.w	r6, [r5], #1
 800d59e:	9b02      	ldr	r3, [sp, #8]
 800d5a0:	429d      	cmp	r5, r3
 800d5a2:	4680      	mov	r8, r0
 800d5a4:	4689      	mov	r9, r1
 800d5a6:	f04f 0200 	mov.w	r2, #0
 800d5aa:	d124      	bne.n	800d5f6 <_dtoa_r+0x62e>
 800d5ac:	4b1b      	ldr	r3, [pc, #108]	; (800d61c <_dtoa_r+0x654>)
 800d5ae:	ec51 0b19 	vmov	r0, r1, d9
 800d5b2:	f7f2 fe93 	bl	80002dc <__adddf3>
 800d5b6:	4602      	mov	r2, r0
 800d5b8:	460b      	mov	r3, r1
 800d5ba:	4640      	mov	r0, r8
 800d5bc:	4649      	mov	r1, r9
 800d5be:	f7f3 fad3 	bl	8000b68 <__aeabi_dcmpgt>
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	d173      	bne.n	800d6ae <_dtoa_r+0x6e6>
 800d5c6:	ec53 2b19 	vmov	r2, r3, d9
 800d5ca:	4914      	ldr	r1, [pc, #80]	; (800d61c <_dtoa_r+0x654>)
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	f7f2 fe83 	bl	80002d8 <__aeabi_dsub>
 800d5d2:	4602      	mov	r2, r0
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	4640      	mov	r0, r8
 800d5d8:	4649      	mov	r1, r9
 800d5da:	f7f3 faa7 	bl	8000b2c <__aeabi_dcmplt>
 800d5de:	2800      	cmp	r0, #0
 800d5e0:	f43f af2f 	beq.w	800d442 <_dtoa_r+0x47a>
 800d5e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d5e6:	1e6b      	subs	r3, r5, #1
 800d5e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d5ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d5ee:	2b30      	cmp	r3, #48	; 0x30
 800d5f0:	d0f8      	beq.n	800d5e4 <_dtoa_r+0x61c>
 800d5f2:	46bb      	mov	fp, r7
 800d5f4:	e04a      	b.n	800d68c <_dtoa_r+0x6c4>
 800d5f6:	4b06      	ldr	r3, [pc, #24]	; (800d610 <_dtoa_r+0x648>)
 800d5f8:	f7f3 f826 	bl	8000648 <__aeabi_dmul>
 800d5fc:	4680      	mov	r8, r0
 800d5fe:	4689      	mov	r9, r1
 800d600:	e7bd      	b.n	800d57e <_dtoa_r+0x5b6>
 800d602:	bf00      	nop
 800d604:	08012f40 	.word	0x08012f40
 800d608:	08012f18 	.word	0x08012f18
 800d60c:	3ff00000 	.word	0x3ff00000
 800d610:	40240000 	.word	0x40240000
 800d614:	401c0000 	.word	0x401c0000
 800d618:	40140000 	.word	0x40140000
 800d61c:	3fe00000 	.word	0x3fe00000
 800d620:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d624:	9d00      	ldr	r5, [sp, #0]
 800d626:	4642      	mov	r2, r8
 800d628:	464b      	mov	r3, r9
 800d62a:	4630      	mov	r0, r6
 800d62c:	4639      	mov	r1, r7
 800d62e:	f7f3 f935 	bl	800089c <__aeabi_ddiv>
 800d632:	f7f3 fab9 	bl	8000ba8 <__aeabi_d2iz>
 800d636:	9001      	str	r0, [sp, #4]
 800d638:	f7f2 ff9c 	bl	8000574 <__aeabi_i2d>
 800d63c:	4642      	mov	r2, r8
 800d63e:	464b      	mov	r3, r9
 800d640:	f7f3 f802 	bl	8000648 <__aeabi_dmul>
 800d644:	4602      	mov	r2, r0
 800d646:	460b      	mov	r3, r1
 800d648:	4630      	mov	r0, r6
 800d64a:	4639      	mov	r1, r7
 800d64c:	f7f2 fe44 	bl	80002d8 <__aeabi_dsub>
 800d650:	9e01      	ldr	r6, [sp, #4]
 800d652:	9f04      	ldr	r7, [sp, #16]
 800d654:	3630      	adds	r6, #48	; 0x30
 800d656:	f805 6b01 	strb.w	r6, [r5], #1
 800d65a:	9e00      	ldr	r6, [sp, #0]
 800d65c:	1bae      	subs	r6, r5, r6
 800d65e:	42b7      	cmp	r7, r6
 800d660:	4602      	mov	r2, r0
 800d662:	460b      	mov	r3, r1
 800d664:	d134      	bne.n	800d6d0 <_dtoa_r+0x708>
 800d666:	f7f2 fe39 	bl	80002dc <__adddf3>
 800d66a:	4642      	mov	r2, r8
 800d66c:	464b      	mov	r3, r9
 800d66e:	4606      	mov	r6, r0
 800d670:	460f      	mov	r7, r1
 800d672:	f7f3 fa79 	bl	8000b68 <__aeabi_dcmpgt>
 800d676:	b9c8      	cbnz	r0, 800d6ac <_dtoa_r+0x6e4>
 800d678:	4642      	mov	r2, r8
 800d67a:	464b      	mov	r3, r9
 800d67c:	4630      	mov	r0, r6
 800d67e:	4639      	mov	r1, r7
 800d680:	f7f3 fa4a 	bl	8000b18 <__aeabi_dcmpeq>
 800d684:	b110      	cbz	r0, 800d68c <_dtoa_r+0x6c4>
 800d686:	9b01      	ldr	r3, [sp, #4]
 800d688:	07db      	lsls	r3, r3, #31
 800d68a:	d40f      	bmi.n	800d6ac <_dtoa_r+0x6e4>
 800d68c:	4651      	mov	r1, sl
 800d68e:	4620      	mov	r0, r4
 800d690:	f000 fb18 	bl	800dcc4 <_Bfree>
 800d694:	2300      	movs	r3, #0
 800d696:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d698:	702b      	strb	r3, [r5, #0]
 800d69a:	f10b 0301 	add.w	r3, fp, #1
 800d69e:	6013      	str	r3, [r2, #0]
 800d6a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	f43f ace2 	beq.w	800d06c <_dtoa_r+0xa4>
 800d6a8:	601d      	str	r5, [r3, #0]
 800d6aa:	e4df      	b.n	800d06c <_dtoa_r+0xa4>
 800d6ac:	465f      	mov	r7, fp
 800d6ae:	462b      	mov	r3, r5
 800d6b0:	461d      	mov	r5, r3
 800d6b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6b6:	2a39      	cmp	r2, #57	; 0x39
 800d6b8:	d106      	bne.n	800d6c8 <_dtoa_r+0x700>
 800d6ba:	9a00      	ldr	r2, [sp, #0]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d1f7      	bne.n	800d6b0 <_dtoa_r+0x6e8>
 800d6c0:	9900      	ldr	r1, [sp, #0]
 800d6c2:	2230      	movs	r2, #48	; 0x30
 800d6c4:	3701      	adds	r7, #1
 800d6c6:	700a      	strb	r2, [r1, #0]
 800d6c8:	781a      	ldrb	r2, [r3, #0]
 800d6ca:	3201      	adds	r2, #1
 800d6cc:	701a      	strb	r2, [r3, #0]
 800d6ce:	e790      	b.n	800d5f2 <_dtoa_r+0x62a>
 800d6d0:	4ba3      	ldr	r3, [pc, #652]	; (800d960 <_dtoa_r+0x998>)
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f7f2 ffb8 	bl	8000648 <__aeabi_dmul>
 800d6d8:	2200      	movs	r2, #0
 800d6da:	2300      	movs	r3, #0
 800d6dc:	4606      	mov	r6, r0
 800d6de:	460f      	mov	r7, r1
 800d6e0:	f7f3 fa1a 	bl	8000b18 <__aeabi_dcmpeq>
 800d6e4:	2800      	cmp	r0, #0
 800d6e6:	d09e      	beq.n	800d626 <_dtoa_r+0x65e>
 800d6e8:	e7d0      	b.n	800d68c <_dtoa_r+0x6c4>
 800d6ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6ec:	2a00      	cmp	r2, #0
 800d6ee:	f000 80ca 	beq.w	800d886 <_dtoa_r+0x8be>
 800d6f2:	9a07      	ldr	r2, [sp, #28]
 800d6f4:	2a01      	cmp	r2, #1
 800d6f6:	f300 80ad 	bgt.w	800d854 <_dtoa_r+0x88c>
 800d6fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6fc:	2a00      	cmp	r2, #0
 800d6fe:	f000 80a5 	beq.w	800d84c <_dtoa_r+0x884>
 800d702:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d706:	9e08      	ldr	r6, [sp, #32]
 800d708:	9d05      	ldr	r5, [sp, #20]
 800d70a:	9a05      	ldr	r2, [sp, #20]
 800d70c:	441a      	add	r2, r3
 800d70e:	9205      	str	r2, [sp, #20]
 800d710:	9a06      	ldr	r2, [sp, #24]
 800d712:	2101      	movs	r1, #1
 800d714:	441a      	add	r2, r3
 800d716:	4620      	mov	r0, r4
 800d718:	9206      	str	r2, [sp, #24]
 800d71a:	f000 fb89 	bl	800de30 <__i2b>
 800d71e:	4607      	mov	r7, r0
 800d720:	b165      	cbz	r5, 800d73c <_dtoa_r+0x774>
 800d722:	9b06      	ldr	r3, [sp, #24]
 800d724:	2b00      	cmp	r3, #0
 800d726:	dd09      	ble.n	800d73c <_dtoa_r+0x774>
 800d728:	42ab      	cmp	r3, r5
 800d72a:	9a05      	ldr	r2, [sp, #20]
 800d72c:	bfa8      	it	ge
 800d72e:	462b      	movge	r3, r5
 800d730:	1ad2      	subs	r2, r2, r3
 800d732:	9205      	str	r2, [sp, #20]
 800d734:	9a06      	ldr	r2, [sp, #24]
 800d736:	1aed      	subs	r5, r5, r3
 800d738:	1ad3      	subs	r3, r2, r3
 800d73a:	9306      	str	r3, [sp, #24]
 800d73c:	9b08      	ldr	r3, [sp, #32]
 800d73e:	b1f3      	cbz	r3, 800d77e <_dtoa_r+0x7b6>
 800d740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d742:	2b00      	cmp	r3, #0
 800d744:	f000 80a3 	beq.w	800d88e <_dtoa_r+0x8c6>
 800d748:	2e00      	cmp	r6, #0
 800d74a:	dd10      	ble.n	800d76e <_dtoa_r+0x7a6>
 800d74c:	4639      	mov	r1, r7
 800d74e:	4632      	mov	r2, r6
 800d750:	4620      	mov	r0, r4
 800d752:	f000 fc2d 	bl	800dfb0 <__pow5mult>
 800d756:	4652      	mov	r2, sl
 800d758:	4601      	mov	r1, r0
 800d75a:	4607      	mov	r7, r0
 800d75c:	4620      	mov	r0, r4
 800d75e:	f000 fb7d 	bl	800de5c <__multiply>
 800d762:	4651      	mov	r1, sl
 800d764:	4680      	mov	r8, r0
 800d766:	4620      	mov	r0, r4
 800d768:	f000 faac 	bl	800dcc4 <_Bfree>
 800d76c:	46c2      	mov	sl, r8
 800d76e:	9b08      	ldr	r3, [sp, #32]
 800d770:	1b9a      	subs	r2, r3, r6
 800d772:	d004      	beq.n	800d77e <_dtoa_r+0x7b6>
 800d774:	4651      	mov	r1, sl
 800d776:	4620      	mov	r0, r4
 800d778:	f000 fc1a 	bl	800dfb0 <__pow5mult>
 800d77c:	4682      	mov	sl, r0
 800d77e:	2101      	movs	r1, #1
 800d780:	4620      	mov	r0, r4
 800d782:	f000 fb55 	bl	800de30 <__i2b>
 800d786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d788:	2b00      	cmp	r3, #0
 800d78a:	4606      	mov	r6, r0
 800d78c:	f340 8081 	ble.w	800d892 <_dtoa_r+0x8ca>
 800d790:	461a      	mov	r2, r3
 800d792:	4601      	mov	r1, r0
 800d794:	4620      	mov	r0, r4
 800d796:	f000 fc0b 	bl	800dfb0 <__pow5mult>
 800d79a:	9b07      	ldr	r3, [sp, #28]
 800d79c:	2b01      	cmp	r3, #1
 800d79e:	4606      	mov	r6, r0
 800d7a0:	dd7a      	ble.n	800d898 <_dtoa_r+0x8d0>
 800d7a2:	f04f 0800 	mov.w	r8, #0
 800d7a6:	6933      	ldr	r3, [r6, #16]
 800d7a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d7ac:	6918      	ldr	r0, [r3, #16]
 800d7ae:	f000 faf1 	bl	800dd94 <__hi0bits>
 800d7b2:	f1c0 0020 	rsb	r0, r0, #32
 800d7b6:	9b06      	ldr	r3, [sp, #24]
 800d7b8:	4418      	add	r0, r3
 800d7ba:	f010 001f 	ands.w	r0, r0, #31
 800d7be:	f000 8094 	beq.w	800d8ea <_dtoa_r+0x922>
 800d7c2:	f1c0 0320 	rsb	r3, r0, #32
 800d7c6:	2b04      	cmp	r3, #4
 800d7c8:	f340 8085 	ble.w	800d8d6 <_dtoa_r+0x90e>
 800d7cc:	9b05      	ldr	r3, [sp, #20]
 800d7ce:	f1c0 001c 	rsb	r0, r0, #28
 800d7d2:	4403      	add	r3, r0
 800d7d4:	9305      	str	r3, [sp, #20]
 800d7d6:	9b06      	ldr	r3, [sp, #24]
 800d7d8:	4403      	add	r3, r0
 800d7da:	4405      	add	r5, r0
 800d7dc:	9306      	str	r3, [sp, #24]
 800d7de:	9b05      	ldr	r3, [sp, #20]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	dd05      	ble.n	800d7f0 <_dtoa_r+0x828>
 800d7e4:	4651      	mov	r1, sl
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	4620      	mov	r0, r4
 800d7ea:	f000 fc3b 	bl	800e064 <__lshift>
 800d7ee:	4682      	mov	sl, r0
 800d7f0:	9b06      	ldr	r3, [sp, #24]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	dd05      	ble.n	800d802 <_dtoa_r+0x83a>
 800d7f6:	4631      	mov	r1, r6
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	4620      	mov	r0, r4
 800d7fc:	f000 fc32 	bl	800e064 <__lshift>
 800d800:	4606      	mov	r6, r0
 800d802:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d804:	2b00      	cmp	r3, #0
 800d806:	d072      	beq.n	800d8ee <_dtoa_r+0x926>
 800d808:	4631      	mov	r1, r6
 800d80a:	4650      	mov	r0, sl
 800d80c:	f000 fc96 	bl	800e13c <__mcmp>
 800d810:	2800      	cmp	r0, #0
 800d812:	da6c      	bge.n	800d8ee <_dtoa_r+0x926>
 800d814:	2300      	movs	r3, #0
 800d816:	4651      	mov	r1, sl
 800d818:	220a      	movs	r2, #10
 800d81a:	4620      	mov	r0, r4
 800d81c:	f000 fa74 	bl	800dd08 <__multadd>
 800d820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d822:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d826:	4682      	mov	sl, r0
 800d828:	2b00      	cmp	r3, #0
 800d82a:	f000 81b0 	beq.w	800db8e <_dtoa_r+0xbc6>
 800d82e:	2300      	movs	r3, #0
 800d830:	4639      	mov	r1, r7
 800d832:	220a      	movs	r2, #10
 800d834:	4620      	mov	r0, r4
 800d836:	f000 fa67 	bl	800dd08 <__multadd>
 800d83a:	9b01      	ldr	r3, [sp, #4]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	4607      	mov	r7, r0
 800d840:	f300 8096 	bgt.w	800d970 <_dtoa_r+0x9a8>
 800d844:	9b07      	ldr	r3, [sp, #28]
 800d846:	2b02      	cmp	r3, #2
 800d848:	dc59      	bgt.n	800d8fe <_dtoa_r+0x936>
 800d84a:	e091      	b.n	800d970 <_dtoa_r+0x9a8>
 800d84c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d84e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d852:	e758      	b.n	800d706 <_dtoa_r+0x73e>
 800d854:	9b04      	ldr	r3, [sp, #16]
 800d856:	1e5e      	subs	r6, r3, #1
 800d858:	9b08      	ldr	r3, [sp, #32]
 800d85a:	42b3      	cmp	r3, r6
 800d85c:	bfbf      	itttt	lt
 800d85e:	9b08      	ldrlt	r3, [sp, #32]
 800d860:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d862:	9608      	strlt	r6, [sp, #32]
 800d864:	1af3      	sublt	r3, r6, r3
 800d866:	bfb4      	ite	lt
 800d868:	18d2      	addlt	r2, r2, r3
 800d86a:	1b9e      	subge	r6, r3, r6
 800d86c:	9b04      	ldr	r3, [sp, #16]
 800d86e:	bfbc      	itt	lt
 800d870:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d872:	2600      	movlt	r6, #0
 800d874:	2b00      	cmp	r3, #0
 800d876:	bfb7      	itett	lt
 800d878:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d87c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d880:	1a9d      	sublt	r5, r3, r2
 800d882:	2300      	movlt	r3, #0
 800d884:	e741      	b.n	800d70a <_dtoa_r+0x742>
 800d886:	9e08      	ldr	r6, [sp, #32]
 800d888:	9d05      	ldr	r5, [sp, #20]
 800d88a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d88c:	e748      	b.n	800d720 <_dtoa_r+0x758>
 800d88e:	9a08      	ldr	r2, [sp, #32]
 800d890:	e770      	b.n	800d774 <_dtoa_r+0x7ac>
 800d892:	9b07      	ldr	r3, [sp, #28]
 800d894:	2b01      	cmp	r3, #1
 800d896:	dc19      	bgt.n	800d8cc <_dtoa_r+0x904>
 800d898:	9b02      	ldr	r3, [sp, #8]
 800d89a:	b9bb      	cbnz	r3, 800d8cc <_dtoa_r+0x904>
 800d89c:	9b03      	ldr	r3, [sp, #12]
 800d89e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d8a2:	b99b      	cbnz	r3, 800d8cc <_dtoa_r+0x904>
 800d8a4:	9b03      	ldr	r3, [sp, #12]
 800d8a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d8aa:	0d1b      	lsrs	r3, r3, #20
 800d8ac:	051b      	lsls	r3, r3, #20
 800d8ae:	b183      	cbz	r3, 800d8d2 <_dtoa_r+0x90a>
 800d8b0:	9b05      	ldr	r3, [sp, #20]
 800d8b2:	3301      	adds	r3, #1
 800d8b4:	9305      	str	r3, [sp, #20]
 800d8b6:	9b06      	ldr	r3, [sp, #24]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	9306      	str	r3, [sp, #24]
 800d8bc:	f04f 0801 	mov.w	r8, #1
 800d8c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	f47f af6f 	bne.w	800d7a6 <_dtoa_r+0x7de>
 800d8c8:	2001      	movs	r0, #1
 800d8ca:	e774      	b.n	800d7b6 <_dtoa_r+0x7ee>
 800d8cc:	f04f 0800 	mov.w	r8, #0
 800d8d0:	e7f6      	b.n	800d8c0 <_dtoa_r+0x8f8>
 800d8d2:	4698      	mov	r8, r3
 800d8d4:	e7f4      	b.n	800d8c0 <_dtoa_r+0x8f8>
 800d8d6:	d082      	beq.n	800d7de <_dtoa_r+0x816>
 800d8d8:	9a05      	ldr	r2, [sp, #20]
 800d8da:	331c      	adds	r3, #28
 800d8dc:	441a      	add	r2, r3
 800d8de:	9205      	str	r2, [sp, #20]
 800d8e0:	9a06      	ldr	r2, [sp, #24]
 800d8e2:	441a      	add	r2, r3
 800d8e4:	441d      	add	r5, r3
 800d8e6:	9206      	str	r2, [sp, #24]
 800d8e8:	e779      	b.n	800d7de <_dtoa_r+0x816>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	e7f4      	b.n	800d8d8 <_dtoa_r+0x910>
 800d8ee:	9b04      	ldr	r3, [sp, #16]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	dc37      	bgt.n	800d964 <_dtoa_r+0x99c>
 800d8f4:	9b07      	ldr	r3, [sp, #28]
 800d8f6:	2b02      	cmp	r3, #2
 800d8f8:	dd34      	ble.n	800d964 <_dtoa_r+0x99c>
 800d8fa:	9b04      	ldr	r3, [sp, #16]
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	9b01      	ldr	r3, [sp, #4]
 800d900:	b963      	cbnz	r3, 800d91c <_dtoa_r+0x954>
 800d902:	4631      	mov	r1, r6
 800d904:	2205      	movs	r2, #5
 800d906:	4620      	mov	r0, r4
 800d908:	f000 f9fe 	bl	800dd08 <__multadd>
 800d90c:	4601      	mov	r1, r0
 800d90e:	4606      	mov	r6, r0
 800d910:	4650      	mov	r0, sl
 800d912:	f000 fc13 	bl	800e13c <__mcmp>
 800d916:	2800      	cmp	r0, #0
 800d918:	f73f adbb 	bgt.w	800d492 <_dtoa_r+0x4ca>
 800d91c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d91e:	9d00      	ldr	r5, [sp, #0]
 800d920:	ea6f 0b03 	mvn.w	fp, r3
 800d924:	f04f 0800 	mov.w	r8, #0
 800d928:	4631      	mov	r1, r6
 800d92a:	4620      	mov	r0, r4
 800d92c:	f000 f9ca 	bl	800dcc4 <_Bfree>
 800d930:	2f00      	cmp	r7, #0
 800d932:	f43f aeab 	beq.w	800d68c <_dtoa_r+0x6c4>
 800d936:	f1b8 0f00 	cmp.w	r8, #0
 800d93a:	d005      	beq.n	800d948 <_dtoa_r+0x980>
 800d93c:	45b8      	cmp	r8, r7
 800d93e:	d003      	beq.n	800d948 <_dtoa_r+0x980>
 800d940:	4641      	mov	r1, r8
 800d942:	4620      	mov	r0, r4
 800d944:	f000 f9be 	bl	800dcc4 <_Bfree>
 800d948:	4639      	mov	r1, r7
 800d94a:	4620      	mov	r0, r4
 800d94c:	f000 f9ba 	bl	800dcc4 <_Bfree>
 800d950:	e69c      	b.n	800d68c <_dtoa_r+0x6c4>
 800d952:	2600      	movs	r6, #0
 800d954:	4637      	mov	r7, r6
 800d956:	e7e1      	b.n	800d91c <_dtoa_r+0x954>
 800d958:	46bb      	mov	fp, r7
 800d95a:	4637      	mov	r7, r6
 800d95c:	e599      	b.n	800d492 <_dtoa_r+0x4ca>
 800d95e:	bf00      	nop
 800d960:	40240000 	.word	0x40240000
 800d964:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d966:	2b00      	cmp	r3, #0
 800d968:	f000 80c8 	beq.w	800dafc <_dtoa_r+0xb34>
 800d96c:	9b04      	ldr	r3, [sp, #16]
 800d96e:	9301      	str	r3, [sp, #4]
 800d970:	2d00      	cmp	r5, #0
 800d972:	dd05      	ble.n	800d980 <_dtoa_r+0x9b8>
 800d974:	4639      	mov	r1, r7
 800d976:	462a      	mov	r2, r5
 800d978:	4620      	mov	r0, r4
 800d97a:	f000 fb73 	bl	800e064 <__lshift>
 800d97e:	4607      	mov	r7, r0
 800d980:	f1b8 0f00 	cmp.w	r8, #0
 800d984:	d05b      	beq.n	800da3e <_dtoa_r+0xa76>
 800d986:	6879      	ldr	r1, [r7, #4]
 800d988:	4620      	mov	r0, r4
 800d98a:	f000 f95b 	bl	800dc44 <_Balloc>
 800d98e:	4605      	mov	r5, r0
 800d990:	b928      	cbnz	r0, 800d99e <_dtoa_r+0x9d6>
 800d992:	4b83      	ldr	r3, [pc, #524]	; (800dba0 <_dtoa_r+0xbd8>)
 800d994:	4602      	mov	r2, r0
 800d996:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d99a:	f7ff bb2e 	b.w	800cffa <_dtoa_r+0x32>
 800d99e:	693a      	ldr	r2, [r7, #16]
 800d9a0:	3202      	adds	r2, #2
 800d9a2:	0092      	lsls	r2, r2, #2
 800d9a4:	f107 010c 	add.w	r1, r7, #12
 800d9a8:	300c      	adds	r0, #12
 800d9aa:	f001 f8af 	bl	800eb0c <memcpy>
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	4629      	mov	r1, r5
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	f000 fb56 	bl	800e064 <__lshift>
 800d9b8:	9b00      	ldr	r3, [sp, #0]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	9304      	str	r3, [sp, #16]
 800d9be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d9c2:	4413      	add	r3, r2
 800d9c4:	9308      	str	r3, [sp, #32]
 800d9c6:	9b02      	ldr	r3, [sp, #8]
 800d9c8:	f003 0301 	and.w	r3, r3, #1
 800d9cc:	46b8      	mov	r8, r7
 800d9ce:	9306      	str	r3, [sp, #24]
 800d9d0:	4607      	mov	r7, r0
 800d9d2:	9b04      	ldr	r3, [sp, #16]
 800d9d4:	4631      	mov	r1, r6
 800d9d6:	3b01      	subs	r3, #1
 800d9d8:	4650      	mov	r0, sl
 800d9da:	9301      	str	r3, [sp, #4]
 800d9dc:	f7ff fa69 	bl	800ceb2 <quorem>
 800d9e0:	4641      	mov	r1, r8
 800d9e2:	9002      	str	r0, [sp, #8]
 800d9e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d9e8:	4650      	mov	r0, sl
 800d9ea:	f000 fba7 	bl	800e13c <__mcmp>
 800d9ee:	463a      	mov	r2, r7
 800d9f0:	9005      	str	r0, [sp, #20]
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4620      	mov	r0, r4
 800d9f6:	f000 fbbd 	bl	800e174 <__mdiff>
 800d9fa:	68c2      	ldr	r2, [r0, #12]
 800d9fc:	4605      	mov	r5, r0
 800d9fe:	bb02      	cbnz	r2, 800da42 <_dtoa_r+0xa7a>
 800da00:	4601      	mov	r1, r0
 800da02:	4650      	mov	r0, sl
 800da04:	f000 fb9a 	bl	800e13c <__mcmp>
 800da08:	4602      	mov	r2, r0
 800da0a:	4629      	mov	r1, r5
 800da0c:	4620      	mov	r0, r4
 800da0e:	9209      	str	r2, [sp, #36]	; 0x24
 800da10:	f000 f958 	bl	800dcc4 <_Bfree>
 800da14:	9b07      	ldr	r3, [sp, #28]
 800da16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800da18:	9d04      	ldr	r5, [sp, #16]
 800da1a:	ea43 0102 	orr.w	r1, r3, r2
 800da1e:	9b06      	ldr	r3, [sp, #24]
 800da20:	4319      	orrs	r1, r3
 800da22:	d110      	bne.n	800da46 <_dtoa_r+0xa7e>
 800da24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800da28:	d029      	beq.n	800da7e <_dtoa_r+0xab6>
 800da2a:	9b05      	ldr	r3, [sp, #20]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	dd02      	ble.n	800da36 <_dtoa_r+0xa6e>
 800da30:	9b02      	ldr	r3, [sp, #8]
 800da32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800da36:	9b01      	ldr	r3, [sp, #4]
 800da38:	f883 9000 	strb.w	r9, [r3]
 800da3c:	e774      	b.n	800d928 <_dtoa_r+0x960>
 800da3e:	4638      	mov	r0, r7
 800da40:	e7ba      	b.n	800d9b8 <_dtoa_r+0x9f0>
 800da42:	2201      	movs	r2, #1
 800da44:	e7e1      	b.n	800da0a <_dtoa_r+0xa42>
 800da46:	9b05      	ldr	r3, [sp, #20]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	db04      	blt.n	800da56 <_dtoa_r+0xa8e>
 800da4c:	9907      	ldr	r1, [sp, #28]
 800da4e:	430b      	orrs	r3, r1
 800da50:	9906      	ldr	r1, [sp, #24]
 800da52:	430b      	orrs	r3, r1
 800da54:	d120      	bne.n	800da98 <_dtoa_r+0xad0>
 800da56:	2a00      	cmp	r2, #0
 800da58:	dded      	ble.n	800da36 <_dtoa_r+0xa6e>
 800da5a:	4651      	mov	r1, sl
 800da5c:	2201      	movs	r2, #1
 800da5e:	4620      	mov	r0, r4
 800da60:	f000 fb00 	bl	800e064 <__lshift>
 800da64:	4631      	mov	r1, r6
 800da66:	4682      	mov	sl, r0
 800da68:	f000 fb68 	bl	800e13c <__mcmp>
 800da6c:	2800      	cmp	r0, #0
 800da6e:	dc03      	bgt.n	800da78 <_dtoa_r+0xab0>
 800da70:	d1e1      	bne.n	800da36 <_dtoa_r+0xa6e>
 800da72:	f019 0f01 	tst.w	r9, #1
 800da76:	d0de      	beq.n	800da36 <_dtoa_r+0xa6e>
 800da78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800da7c:	d1d8      	bne.n	800da30 <_dtoa_r+0xa68>
 800da7e:	9a01      	ldr	r2, [sp, #4]
 800da80:	2339      	movs	r3, #57	; 0x39
 800da82:	7013      	strb	r3, [r2, #0]
 800da84:	462b      	mov	r3, r5
 800da86:	461d      	mov	r5, r3
 800da88:	3b01      	subs	r3, #1
 800da8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800da8e:	2a39      	cmp	r2, #57	; 0x39
 800da90:	d06c      	beq.n	800db6c <_dtoa_r+0xba4>
 800da92:	3201      	adds	r2, #1
 800da94:	701a      	strb	r2, [r3, #0]
 800da96:	e747      	b.n	800d928 <_dtoa_r+0x960>
 800da98:	2a00      	cmp	r2, #0
 800da9a:	dd07      	ble.n	800daac <_dtoa_r+0xae4>
 800da9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800daa0:	d0ed      	beq.n	800da7e <_dtoa_r+0xab6>
 800daa2:	9a01      	ldr	r2, [sp, #4]
 800daa4:	f109 0301 	add.w	r3, r9, #1
 800daa8:	7013      	strb	r3, [r2, #0]
 800daaa:	e73d      	b.n	800d928 <_dtoa_r+0x960>
 800daac:	9b04      	ldr	r3, [sp, #16]
 800daae:	9a08      	ldr	r2, [sp, #32]
 800dab0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800dab4:	4293      	cmp	r3, r2
 800dab6:	d043      	beq.n	800db40 <_dtoa_r+0xb78>
 800dab8:	4651      	mov	r1, sl
 800daba:	2300      	movs	r3, #0
 800dabc:	220a      	movs	r2, #10
 800dabe:	4620      	mov	r0, r4
 800dac0:	f000 f922 	bl	800dd08 <__multadd>
 800dac4:	45b8      	cmp	r8, r7
 800dac6:	4682      	mov	sl, r0
 800dac8:	f04f 0300 	mov.w	r3, #0
 800dacc:	f04f 020a 	mov.w	r2, #10
 800dad0:	4641      	mov	r1, r8
 800dad2:	4620      	mov	r0, r4
 800dad4:	d107      	bne.n	800dae6 <_dtoa_r+0xb1e>
 800dad6:	f000 f917 	bl	800dd08 <__multadd>
 800dada:	4680      	mov	r8, r0
 800dadc:	4607      	mov	r7, r0
 800dade:	9b04      	ldr	r3, [sp, #16]
 800dae0:	3301      	adds	r3, #1
 800dae2:	9304      	str	r3, [sp, #16]
 800dae4:	e775      	b.n	800d9d2 <_dtoa_r+0xa0a>
 800dae6:	f000 f90f 	bl	800dd08 <__multadd>
 800daea:	4639      	mov	r1, r7
 800daec:	4680      	mov	r8, r0
 800daee:	2300      	movs	r3, #0
 800daf0:	220a      	movs	r2, #10
 800daf2:	4620      	mov	r0, r4
 800daf4:	f000 f908 	bl	800dd08 <__multadd>
 800daf8:	4607      	mov	r7, r0
 800dafa:	e7f0      	b.n	800dade <_dtoa_r+0xb16>
 800dafc:	9b04      	ldr	r3, [sp, #16]
 800dafe:	9301      	str	r3, [sp, #4]
 800db00:	9d00      	ldr	r5, [sp, #0]
 800db02:	4631      	mov	r1, r6
 800db04:	4650      	mov	r0, sl
 800db06:	f7ff f9d4 	bl	800ceb2 <quorem>
 800db0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800db0e:	9b00      	ldr	r3, [sp, #0]
 800db10:	f805 9b01 	strb.w	r9, [r5], #1
 800db14:	1aea      	subs	r2, r5, r3
 800db16:	9b01      	ldr	r3, [sp, #4]
 800db18:	4293      	cmp	r3, r2
 800db1a:	dd07      	ble.n	800db2c <_dtoa_r+0xb64>
 800db1c:	4651      	mov	r1, sl
 800db1e:	2300      	movs	r3, #0
 800db20:	220a      	movs	r2, #10
 800db22:	4620      	mov	r0, r4
 800db24:	f000 f8f0 	bl	800dd08 <__multadd>
 800db28:	4682      	mov	sl, r0
 800db2a:	e7ea      	b.n	800db02 <_dtoa_r+0xb3a>
 800db2c:	9b01      	ldr	r3, [sp, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	bfc8      	it	gt
 800db32:	461d      	movgt	r5, r3
 800db34:	9b00      	ldr	r3, [sp, #0]
 800db36:	bfd8      	it	le
 800db38:	2501      	movle	r5, #1
 800db3a:	441d      	add	r5, r3
 800db3c:	f04f 0800 	mov.w	r8, #0
 800db40:	4651      	mov	r1, sl
 800db42:	2201      	movs	r2, #1
 800db44:	4620      	mov	r0, r4
 800db46:	f000 fa8d 	bl	800e064 <__lshift>
 800db4a:	4631      	mov	r1, r6
 800db4c:	4682      	mov	sl, r0
 800db4e:	f000 faf5 	bl	800e13c <__mcmp>
 800db52:	2800      	cmp	r0, #0
 800db54:	dc96      	bgt.n	800da84 <_dtoa_r+0xabc>
 800db56:	d102      	bne.n	800db5e <_dtoa_r+0xb96>
 800db58:	f019 0f01 	tst.w	r9, #1
 800db5c:	d192      	bne.n	800da84 <_dtoa_r+0xabc>
 800db5e:	462b      	mov	r3, r5
 800db60:	461d      	mov	r5, r3
 800db62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800db66:	2a30      	cmp	r2, #48	; 0x30
 800db68:	d0fa      	beq.n	800db60 <_dtoa_r+0xb98>
 800db6a:	e6dd      	b.n	800d928 <_dtoa_r+0x960>
 800db6c:	9a00      	ldr	r2, [sp, #0]
 800db6e:	429a      	cmp	r2, r3
 800db70:	d189      	bne.n	800da86 <_dtoa_r+0xabe>
 800db72:	f10b 0b01 	add.w	fp, fp, #1
 800db76:	2331      	movs	r3, #49	; 0x31
 800db78:	e796      	b.n	800daa8 <_dtoa_r+0xae0>
 800db7a:	4b0a      	ldr	r3, [pc, #40]	; (800dba4 <_dtoa_r+0xbdc>)
 800db7c:	f7ff ba99 	b.w	800d0b2 <_dtoa_r+0xea>
 800db80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800db82:	2b00      	cmp	r3, #0
 800db84:	f47f aa6d 	bne.w	800d062 <_dtoa_r+0x9a>
 800db88:	4b07      	ldr	r3, [pc, #28]	; (800dba8 <_dtoa_r+0xbe0>)
 800db8a:	f7ff ba92 	b.w	800d0b2 <_dtoa_r+0xea>
 800db8e:	9b01      	ldr	r3, [sp, #4]
 800db90:	2b00      	cmp	r3, #0
 800db92:	dcb5      	bgt.n	800db00 <_dtoa_r+0xb38>
 800db94:	9b07      	ldr	r3, [sp, #28]
 800db96:	2b02      	cmp	r3, #2
 800db98:	f73f aeb1 	bgt.w	800d8fe <_dtoa_r+0x936>
 800db9c:	e7b0      	b.n	800db00 <_dtoa_r+0xb38>
 800db9e:	bf00      	nop
 800dba0:	08012ea8 	.word	0x08012ea8
 800dba4:	08012e08 	.word	0x08012e08
 800dba8:	08012e2c 	.word	0x08012e2c

0800dbac <_free_r>:
 800dbac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbae:	2900      	cmp	r1, #0
 800dbb0:	d044      	beq.n	800dc3c <_free_r+0x90>
 800dbb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbb6:	9001      	str	r0, [sp, #4]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	f1a1 0404 	sub.w	r4, r1, #4
 800dbbe:	bfb8      	it	lt
 800dbc0:	18e4      	addlt	r4, r4, r3
 800dbc2:	f7fe fa4d 	bl	800c060 <__malloc_lock>
 800dbc6:	4a1e      	ldr	r2, [pc, #120]	; (800dc40 <_free_r+0x94>)
 800dbc8:	9801      	ldr	r0, [sp, #4]
 800dbca:	6813      	ldr	r3, [r2, #0]
 800dbcc:	b933      	cbnz	r3, 800dbdc <_free_r+0x30>
 800dbce:	6063      	str	r3, [r4, #4]
 800dbd0:	6014      	str	r4, [r2, #0]
 800dbd2:	b003      	add	sp, #12
 800dbd4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dbd8:	f7fe ba48 	b.w	800c06c <__malloc_unlock>
 800dbdc:	42a3      	cmp	r3, r4
 800dbde:	d908      	bls.n	800dbf2 <_free_r+0x46>
 800dbe0:	6825      	ldr	r5, [r4, #0]
 800dbe2:	1961      	adds	r1, r4, r5
 800dbe4:	428b      	cmp	r3, r1
 800dbe6:	bf01      	itttt	eq
 800dbe8:	6819      	ldreq	r1, [r3, #0]
 800dbea:	685b      	ldreq	r3, [r3, #4]
 800dbec:	1949      	addeq	r1, r1, r5
 800dbee:	6021      	streq	r1, [r4, #0]
 800dbf0:	e7ed      	b.n	800dbce <_free_r+0x22>
 800dbf2:	461a      	mov	r2, r3
 800dbf4:	685b      	ldr	r3, [r3, #4]
 800dbf6:	b10b      	cbz	r3, 800dbfc <_free_r+0x50>
 800dbf8:	42a3      	cmp	r3, r4
 800dbfa:	d9fa      	bls.n	800dbf2 <_free_r+0x46>
 800dbfc:	6811      	ldr	r1, [r2, #0]
 800dbfe:	1855      	adds	r5, r2, r1
 800dc00:	42a5      	cmp	r5, r4
 800dc02:	d10b      	bne.n	800dc1c <_free_r+0x70>
 800dc04:	6824      	ldr	r4, [r4, #0]
 800dc06:	4421      	add	r1, r4
 800dc08:	1854      	adds	r4, r2, r1
 800dc0a:	42a3      	cmp	r3, r4
 800dc0c:	6011      	str	r1, [r2, #0]
 800dc0e:	d1e0      	bne.n	800dbd2 <_free_r+0x26>
 800dc10:	681c      	ldr	r4, [r3, #0]
 800dc12:	685b      	ldr	r3, [r3, #4]
 800dc14:	6053      	str	r3, [r2, #4]
 800dc16:	440c      	add	r4, r1
 800dc18:	6014      	str	r4, [r2, #0]
 800dc1a:	e7da      	b.n	800dbd2 <_free_r+0x26>
 800dc1c:	d902      	bls.n	800dc24 <_free_r+0x78>
 800dc1e:	230c      	movs	r3, #12
 800dc20:	6003      	str	r3, [r0, #0]
 800dc22:	e7d6      	b.n	800dbd2 <_free_r+0x26>
 800dc24:	6825      	ldr	r5, [r4, #0]
 800dc26:	1961      	adds	r1, r4, r5
 800dc28:	428b      	cmp	r3, r1
 800dc2a:	bf04      	itt	eq
 800dc2c:	6819      	ldreq	r1, [r3, #0]
 800dc2e:	685b      	ldreq	r3, [r3, #4]
 800dc30:	6063      	str	r3, [r4, #4]
 800dc32:	bf04      	itt	eq
 800dc34:	1949      	addeq	r1, r1, r5
 800dc36:	6021      	streq	r1, [r4, #0]
 800dc38:	6054      	str	r4, [r2, #4]
 800dc3a:	e7ca      	b.n	800dbd2 <_free_r+0x26>
 800dc3c:	b003      	add	sp, #12
 800dc3e:	bd30      	pop	{r4, r5, pc}
 800dc40:	20000e18 	.word	0x20000e18

0800dc44 <_Balloc>:
 800dc44:	b570      	push	{r4, r5, r6, lr}
 800dc46:	69c6      	ldr	r6, [r0, #28]
 800dc48:	4604      	mov	r4, r0
 800dc4a:	460d      	mov	r5, r1
 800dc4c:	b976      	cbnz	r6, 800dc6c <_Balloc+0x28>
 800dc4e:	2010      	movs	r0, #16
 800dc50:	f7fe f95e 	bl	800bf10 <malloc>
 800dc54:	4602      	mov	r2, r0
 800dc56:	61e0      	str	r0, [r4, #28]
 800dc58:	b920      	cbnz	r0, 800dc64 <_Balloc+0x20>
 800dc5a:	4b18      	ldr	r3, [pc, #96]	; (800dcbc <_Balloc+0x78>)
 800dc5c:	4818      	ldr	r0, [pc, #96]	; (800dcc0 <_Balloc+0x7c>)
 800dc5e:	216b      	movs	r1, #107	; 0x6b
 800dc60:	f000 ff62 	bl	800eb28 <__assert_func>
 800dc64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dc68:	6006      	str	r6, [r0, #0]
 800dc6a:	60c6      	str	r6, [r0, #12]
 800dc6c:	69e6      	ldr	r6, [r4, #28]
 800dc6e:	68f3      	ldr	r3, [r6, #12]
 800dc70:	b183      	cbz	r3, 800dc94 <_Balloc+0x50>
 800dc72:	69e3      	ldr	r3, [r4, #28]
 800dc74:	68db      	ldr	r3, [r3, #12]
 800dc76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dc7a:	b9b8      	cbnz	r0, 800dcac <_Balloc+0x68>
 800dc7c:	2101      	movs	r1, #1
 800dc7e:	fa01 f605 	lsl.w	r6, r1, r5
 800dc82:	1d72      	adds	r2, r6, #5
 800dc84:	0092      	lsls	r2, r2, #2
 800dc86:	4620      	mov	r0, r4
 800dc88:	f000 ff6c 	bl	800eb64 <_calloc_r>
 800dc8c:	b160      	cbz	r0, 800dca8 <_Balloc+0x64>
 800dc8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dc92:	e00e      	b.n	800dcb2 <_Balloc+0x6e>
 800dc94:	2221      	movs	r2, #33	; 0x21
 800dc96:	2104      	movs	r1, #4
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f000 ff63 	bl	800eb64 <_calloc_r>
 800dc9e:	69e3      	ldr	r3, [r4, #28]
 800dca0:	60f0      	str	r0, [r6, #12]
 800dca2:	68db      	ldr	r3, [r3, #12]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d1e4      	bne.n	800dc72 <_Balloc+0x2e>
 800dca8:	2000      	movs	r0, #0
 800dcaa:	bd70      	pop	{r4, r5, r6, pc}
 800dcac:	6802      	ldr	r2, [r0, #0]
 800dcae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dcb8:	e7f7      	b.n	800dcaa <_Balloc+0x66>
 800dcba:	bf00      	nop
 800dcbc:	08012e39 	.word	0x08012e39
 800dcc0:	08012eb9 	.word	0x08012eb9

0800dcc4 <_Bfree>:
 800dcc4:	b570      	push	{r4, r5, r6, lr}
 800dcc6:	69c6      	ldr	r6, [r0, #28]
 800dcc8:	4605      	mov	r5, r0
 800dcca:	460c      	mov	r4, r1
 800dccc:	b976      	cbnz	r6, 800dcec <_Bfree+0x28>
 800dcce:	2010      	movs	r0, #16
 800dcd0:	f7fe f91e 	bl	800bf10 <malloc>
 800dcd4:	4602      	mov	r2, r0
 800dcd6:	61e8      	str	r0, [r5, #28]
 800dcd8:	b920      	cbnz	r0, 800dce4 <_Bfree+0x20>
 800dcda:	4b09      	ldr	r3, [pc, #36]	; (800dd00 <_Bfree+0x3c>)
 800dcdc:	4809      	ldr	r0, [pc, #36]	; (800dd04 <_Bfree+0x40>)
 800dcde:	218f      	movs	r1, #143	; 0x8f
 800dce0:	f000 ff22 	bl	800eb28 <__assert_func>
 800dce4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dce8:	6006      	str	r6, [r0, #0]
 800dcea:	60c6      	str	r6, [r0, #12]
 800dcec:	b13c      	cbz	r4, 800dcfe <_Bfree+0x3a>
 800dcee:	69eb      	ldr	r3, [r5, #28]
 800dcf0:	6862      	ldr	r2, [r4, #4]
 800dcf2:	68db      	ldr	r3, [r3, #12]
 800dcf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dcf8:	6021      	str	r1, [r4, #0]
 800dcfa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dcfe:	bd70      	pop	{r4, r5, r6, pc}
 800dd00:	08012e39 	.word	0x08012e39
 800dd04:	08012eb9 	.word	0x08012eb9

0800dd08 <__multadd>:
 800dd08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd0c:	690d      	ldr	r5, [r1, #16]
 800dd0e:	4607      	mov	r7, r0
 800dd10:	460c      	mov	r4, r1
 800dd12:	461e      	mov	r6, r3
 800dd14:	f101 0c14 	add.w	ip, r1, #20
 800dd18:	2000      	movs	r0, #0
 800dd1a:	f8dc 3000 	ldr.w	r3, [ip]
 800dd1e:	b299      	uxth	r1, r3
 800dd20:	fb02 6101 	mla	r1, r2, r1, r6
 800dd24:	0c1e      	lsrs	r6, r3, #16
 800dd26:	0c0b      	lsrs	r3, r1, #16
 800dd28:	fb02 3306 	mla	r3, r2, r6, r3
 800dd2c:	b289      	uxth	r1, r1
 800dd2e:	3001      	adds	r0, #1
 800dd30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dd34:	4285      	cmp	r5, r0
 800dd36:	f84c 1b04 	str.w	r1, [ip], #4
 800dd3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dd3e:	dcec      	bgt.n	800dd1a <__multadd+0x12>
 800dd40:	b30e      	cbz	r6, 800dd86 <__multadd+0x7e>
 800dd42:	68a3      	ldr	r3, [r4, #8]
 800dd44:	42ab      	cmp	r3, r5
 800dd46:	dc19      	bgt.n	800dd7c <__multadd+0x74>
 800dd48:	6861      	ldr	r1, [r4, #4]
 800dd4a:	4638      	mov	r0, r7
 800dd4c:	3101      	adds	r1, #1
 800dd4e:	f7ff ff79 	bl	800dc44 <_Balloc>
 800dd52:	4680      	mov	r8, r0
 800dd54:	b928      	cbnz	r0, 800dd62 <__multadd+0x5a>
 800dd56:	4602      	mov	r2, r0
 800dd58:	4b0c      	ldr	r3, [pc, #48]	; (800dd8c <__multadd+0x84>)
 800dd5a:	480d      	ldr	r0, [pc, #52]	; (800dd90 <__multadd+0x88>)
 800dd5c:	21ba      	movs	r1, #186	; 0xba
 800dd5e:	f000 fee3 	bl	800eb28 <__assert_func>
 800dd62:	6922      	ldr	r2, [r4, #16]
 800dd64:	3202      	adds	r2, #2
 800dd66:	f104 010c 	add.w	r1, r4, #12
 800dd6a:	0092      	lsls	r2, r2, #2
 800dd6c:	300c      	adds	r0, #12
 800dd6e:	f000 fecd 	bl	800eb0c <memcpy>
 800dd72:	4621      	mov	r1, r4
 800dd74:	4638      	mov	r0, r7
 800dd76:	f7ff ffa5 	bl	800dcc4 <_Bfree>
 800dd7a:	4644      	mov	r4, r8
 800dd7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd80:	3501      	adds	r5, #1
 800dd82:	615e      	str	r6, [r3, #20]
 800dd84:	6125      	str	r5, [r4, #16]
 800dd86:	4620      	mov	r0, r4
 800dd88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd8c:	08012ea8 	.word	0x08012ea8
 800dd90:	08012eb9 	.word	0x08012eb9

0800dd94 <__hi0bits>:
 800dd94:	0c03      	lsrs	r3, r0, #16
 800dd96:	041b      	lsls	r3, r3, #16
 800dd98:	b9d3      	cbnz	r3, 800ddd0 <__hi0bits+0x3c>
 800dd9a:	0400      	lsls	r0, r0, #16
 800dd9c:	2310      	movs	r3, #16
 800dd9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dda2:	bf04      	itt	eq
 800dda4:	0200      	lsleq	r0, r0, #8
 800dda6:	3308      	addeq	r3, #8
 800dda8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ddac:	bf04      	itt	eq
 800ddae:	0100      	lsleq	r0, r0, #4
 800ddb0:	3304      	addeq	r3, #4
 800ddb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ddb6:	bf04      	itt	eq
 800ddb8:	0080      	lsleq	r0, r0, #2
 800ddba:	3302      	addeq	r3, #2
 800ddbc:	2800      	cmp	r0, #0
 800ddbe:	db05      	blt.n	800ddcc <__hi0bits+0x38>
 800ddc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ddc4:	f103 0301 	add.w	r3, r3, #1
 800ddc8:	bf08      	it	eq
 800ddca:	2320      	moveq	r3, #32
 800ddcc:	4618      	mov	r0, r3
 800ddce:	4770      	bx	lr
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	e7e4      	b.n	800dd9e <__hi0bits+0xa>

0800ddd4 <__lo0bits>:
 800ddd4:	6803      	ldr	r3, [r0, #0]
 800ddd6:	f013 0207 	ands.w	r2, r3, #7
 800ddda:	d00c      	beq.n	800ddf6 <__lo0bits+0x22>
 800dddc:	07d9      	lsls	r1, r3, #31
 800ddde:	d422      	bmi.n	800de26 <__lo0bits+0x52>
 800dde0:	079a      	lsls	r2, r3, #30
 800dde2:	bf49      	itett	mi
 800dde4:	085b      	lsrmi	r3, r3, #1
 800dde6:	089b      	lsrpl	r3, r3, #2
 800dde8:	6003      	strmi	r3, [r0, #0]
 800ddea:	2201      	movmi	r2, #1
 800ddec:	bf5c      	itt	pl
 800ddee:	6003      	strpl	r3, [r0, #0]
 800ddf0:	2202      	movpl	r2, #2
 800ddf2:	4610      	mov	r0, r2
 800ddf4:	4770      	bx	lr
 800ddf6:	b299      	uxth	r1, r3
 800ddf8:	b909      	cbnz	r1, 800ddfe <__lo0bits+0x2a>
 800ddfa:	0c1b      	lsrs	r3, r3, #16
 800ddfc:	2210      	movs	r2, #16
 800ddfe:	b2d9      	uxtb	r1, r3
 800de00:	b909      	cbnz	r1, 800de06 <__lo0bits+0x32>
 800de02:	3208      	adds	r2, #8
 800de04:	0a1b      	lsrs	r3, r3, #8
 800de06:	0719      	lsls	r1, r3, #28
 800de08:	bf04      	itt	eq
 800de0a:	091b      	lsreq	r3, r3, #4
 800de0c:	3204      	addeq	r2, #4
 800de0e:	0799      	lsls	r1, r3, #30
 800de10:	bf04      	itt	eq
 800de12:	089b      	lsreq	r3, r3, #2
 800de14:	3202      	addeq	r2, #2
 800de16:	07d9      	lsls	r1, r3, #31
 800de18:	d403      	bmi.n	800de22 <__lo0bits+0x4e>
 800de1a:	085b      	lsrs	r3, r3, #1
 800de1c:	f102 0201 	add.w	r2, r2, #1
 800de20:	d003      	beq.n	800de2a <__lo0bits+0x56>
 800de22:	6003      	str	r3, [r0, #0]
 800de24:	e7e5      	b.n	800ddf2 <__lo0bits+0x1e>
 800de26:	2200      	movs	r2, #0
 800de28:	e7e3      	b.n	800ddf2 <__lo0bits+0x1e>
 800de2a:	2220      	movs	r2, #32
 800de2c:	e7e1      	b.n	800ddf2 <__lo0bits+0x1e>
	...

0800de30 <__i2b>:
 800de30:	b510      	push	{r4, lr}
 800de32:	460c      	mov	r4, r1
 800de34:	2101      	movs	r1, #1
 800de36:	f7ff ff05 	bl	800dc44 <_Balloc>
 800de3a:	4602      	mov	r2, r0
 800de3c:	b928      	cbnz	r0, 800de4a <__i2b+0x1a>
 800de3e:	4b05      	ldr	r3, [pc, #20]	; (800de54 <__i2b+0x24>)
 800de40:	4805      	ldr	r0, [pc, #20]	; (800de58 <__i2b+0x28>)
 800de42:	f240 1145 	movw	r1, #325	; 0x145
 800de46:	f000 fe6f 	bl	800eb28 <__assert_func>
 800de4a:	2301      	movs	r3, #1
 800de4c:	6144      	str	r4, [r0, #20]
 800de4e:	6103      	str	r3, [r0, #16]
 800de50:	bd10      	pop	{r4, pc}
 800de52:	bf00      	nop
 800de54:	08012ea8 	.word	0x08012ea8
 800de58:	08012eb9 	.word	0x08012eb9

0800de5c <__multiply>:
 800de5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de60:	4691      	mov	r9, r2
 800de62:	690a      	ldr	r2, [r1, #16]
 800de64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800de68:	429a      	cmp	r2, r3
 800de6a:	bfb8      	it	lt
 800de6c:	460b      	movlt	r3, r1
 800de6e:	460c      	mov	r4, r1
 800de70:	bfbc      	itt	lt
 800de72:	464c      	movlt	r4, r9
 800de74:	4699      	movlt	r9, r3
 800de76:	6927      	ldr	r7, [r4, #16]
 800de78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800de7c:	68a3      	ldr	r3, [r4, #8]
 800de7e:	6861      	ldr	r1, [r4, #4]
 800de80:	eb07 060a 	add.w	r6, r7, sl
 800de84:	42b3      	cmp	r3, r6
 800de86:	b085      	sub	sp, #20
 800de88:	bfb8      	it	lt
 800de8a:	3101      	addlt	r1, #1
 800de8c:	f7ff feda 	bl	800dc44 <_Balloc>
 800de90:	b930      	cbnz	r0, 800dea0 <__multiply+0x44>
 800de92:	4602      	mov	r2, r0
 800de94:	4b44      	ldr	r3, [pc, #272]	; (800dfa8 <__multiply+0x14c>)
 800de96:	4845      	ldr	r0, [pc, #276]	; (800dfac <__multiply+0x150>)
 800de98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800de9c:	f000 fe44 	bl	800eb28 <__assert_func>
 800dea0:	f100 0514 	add.w	r5, r0, #20
 800dea4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dea8:	462b      	mov	r3, r5
 800deaa:	2200      	movs	r2, #0
 800deac:	4543      	cmp	r3, r8
 800deae:	d321      	bcc.n	800def4 <__multiply+0x98>
 800deb0:	f104 0314 	add.w	r3, r4, #20
 800deb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800deb8:	f109 0314 	add.w	r3, r9, #20
 800debc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dec0:	9202      	str	r2, [sp, #8]
 800dec2:	1b3a      	subs	r2, r7, r4
 800dec4:	3a15      	subs	r2, #21
 800dec6:	f022 0203 	bic.w	r2, r2, #3
 800deca:	3204      	adds	r2, #4
 800decc:	f104 0115 	add.w	r1, r4, #21
 800ded0:	428f      	cmp	r7, r1
 800ded2:	bf38      	it	cc
 800ded4:	2204      	movcc	r2, #4
 800ded6:	9201      	str	r2, [sp, #4]
 800ded8:	9a02      	ldr	r2, [sp, #8]
 800deda:	9303      	str	r3, [sp, #12]
 800dedc:	429a      	cmp	r2, r3
 800dede:	d80c      	bhi.n	800defa <__multiply+0x9e>
 800dee0:	2e00      	cmp	r6, #0
 800dee2:	dd03      	ble.n	800deec <__multiply+0x90>
 800dee4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d05b      	beq.n	800dfa4 <__multiply+0x148>
 800deec:	6106      	str	r6, [r0, #16]
 800deee:	b005      	add	sp, #20
 800def0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800def4:	f843 2b04 	str.w	r2, [r3], #4
 800def8:	e7d8      	b.n	800deac <__multiply+0x50>
 800defa:	f8b3 a000 	ldrh.w	sl, [r3]
 800defe:	f1ba 0f00 	cmp.w	sl, #0
 800df02:	d024      	beq.n	800df4e <__multiply+0xf2>
 800df04:	f104 0e14 	add.w	lr, r4, #20
 800df08:	46a9      	mov	r9, r5
 800df0a:	f04f 0c00 	mov.w	ip, #0
 800df0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800df12:	f8d9 1000 	ldr.w	r1, [r9]
 800df16:	fa1f fb82 	uxth.w	fp, r2
 800df1a:	b289      	uxth	r1, r1
 800df1c:	fb0a 110b 	mla	r1, sl, fp, r1
 800df20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800df24:	f8d9 2000 	ldr.w	r2, [r9]
 800df28:	4461      	add	r1, ip
 800df2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df2e:	fb0a c20b 	mla	r2, sl, fp, ip
 800df32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800df36:	b289      	uxth	r1, r1
 800df38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df3c:	4577      	cmp	r7, lr
 800df3e:	f849 1b04 	str.w	r1, [r9], #4
 800df42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800df46:	d8e2      	bhi.n	800df0e <__multiply+0xb2>
 800df48:	9a01      	ldr	r2, [sp, #4]
 800df4a:	f845 c002 	str.w	ip, [r5, r2]
 800df4e:	9a03      	ldr	r2, [sp, #12]
 800df50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800df54:	3304      	adds	r3, #4
 800df56:	f1b9 0f00 	cmp.w	r9, #0
 800df5a:	d021      	beq.n	800dfa0 <__multiply+0x144>
 800df5c:	6829      	ldr	r1, [r5, #0]
 800df5e:	f104 0c14 	add.w	ip, r4, #20
 800df62:	46ae      	mov	lr, r5
 800df64:	f04f 0a00 	mov.w	sl, #0
 800df68:	f8bc b000 	ldrh.w	fp, [ip]
 800df6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800df70:	fb09 220b 	mla	r2, r9, fp, r2
 800df74:	4452      	add	r2, sl
 800df76:	b289      	uxth	r1, r1
 800df78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800df7c:	f84e 1b04 	str.w	r1, [lr], #4
 800df80:	f85c 1b04 	ldr.w	r1, [ip], #4
 800df84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df88:	f8be 1000 	ldrh.w	r1, [lr]
 800df8c:	fb09 110a 	mla	r1, r9, sl, r1
 800df90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800df94:	4567      	cmp	r7, ip
 800df96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800df9a:	d8e5      	bhi.n	800df68 <__multiply+0x10c>
 800df9c:	9a01      	ldr	r2, [sp, #4]
 800df9e:	50a9      	str	r1, [r5, r2]
 800dfa0:	3504      	adds	r5, #4
 800dfa2:	e799      	b.n	800ded8 <__multiply+0x7c>
 800dfa4:	3e01      	subs	r6, #1
 800dfa6:	e79b      	b.n	800dee0 <__multiply+0x84>
 800dfa8:	08012ea8 	.word	0x08012ea8
 800dfac:	08012eb9 	.word	0x08012eb9

0800dfb0 <__pow5mult>:
 800dfb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dfb4:	4615      	mov	r5, r2
 800dfb6:	f012 0203 	ands.w	r2, r2, #3
 800dfba:	4606      	mov	r6, r0
 800dfbc:	460f      	mov	r7, r1
 800dfbe:	d007      	beq.n	800dfd0 <__pow5mult+0x20>
 800dfc0:	4c25      	ldr	r4, [pc, #148]	; (800e058 <__pow5mult+0xa8>)
 800dfc2:	3a01      	subs	r2, #1
 800dfc4:	2300      	movs	r3, #0
 800dfc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dfca:	f7ff fe9d 	bl	800dd08 <__multadd>
 800dfce:	4607      	mov	r7, r0
 800dfd0:	10ad      	asrs	r5, r5, #2
 800dfd2:	d03d      	beq.n	800e050 <__pow5mult+0xa0>
 800dfd4:	69f4      	ldr	r4, [r6, #28]
 800dfd6:	b97c      	cbnz	r4, 800dff8 <__pow5mult+0x48>
 800dfd8:	2010      	movs	r0, #16
 800dfda:	f7fd ff99 	bl	800bf10 <malloc>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	61f0      	str	r0, [r6, #28]
 800dfe2:	b928      	cbnz	r0, 800dff0 <__pow5mult+0x40>
 800dfe4:	4b1d      	ldr	r3, [pc, #116]	; (800e05c <__pow5mult+0xac>)
 800dfe6:	481e      	ldr	r0, [pc, #120]	; (800e060 <__pow5mult+0xb0>)
 800dfe8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dfec:	f000 fd9c 	bl	800eb28 <__assert_func>
 800dff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dff4:	6004      	str	r4, [r0, #0]
 800dff6:	60c4      	str	r4, [r0, #12]
 800dff8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dffc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e000:	b94c      	cbnz	r4, 800e016 <__pow5mult+0x66>
 800e002:	f240 2171 	movw	r1, #625	; 0x271
 800e006:	4630      	mov	r0, r6
 800e008:	f7ff ff12 	bl	800de30 <__i2b>
 800e00c:	2300      	movs	r3, #0
 800e00e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e012:	4604      	mov	r4, r0
 800e014:	6003      	str	r3, [r0, #0]
 800e016:	f04f 0900 	mov.w	r9, #0
 800e01a:	07eb      	lsls	r3, r5, #31
 800e01c:	d50a      	bpl.n	800e034 <__pow5mult+0x84>
 800e01e:	4639      	mov	r1, r7
 800e020:	4622      	mov	r2, r4
 800e022:	4630      	mov	r0, r6
 800e024:	f7ff ff1a 	bl	800de5c <__multiply>
 800e028:	4639      	mov	r1, r7
 800e02a:	4680      	mov	r8, r0
 800e02c:	4630      	mov	r0, r6
 800e02e:	f7ff fe49 	bl	800dcc4 <_Bfree>
 800e032:	4647      	mov	r7, r8
 800e034:	106d      	asrs	r5, r5, #1
 800e036:	d00b      	beq.n	800e050 <__pow5mult+0xa0>
 800e038:	6820      	ldr	r0, [r4, #0]
 800e03a:	b938      	cbnz	r0, 800e04c <__pow5mult+0x9c>
 800e03c:	4622      	mov	r2, r4
 800e03e:	4621      	mov	r1, r4
 800e040:	4630      	mov	r0, r6
 800e042:	f7ff ff0b 	bl	800de5c <__multiply>
 800e046:	6020      	str	r0, [r4, #0]
 800e048:	f8c0 9000 	str.w	r9, [r0]
 800e04c:	4604      	mov	r4, r0
 800e04e:	e7e4      	b.n	800e01a <__pow5mult+0x6a>
 800e050:	4638      	mov	r0, r7
 800e052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e056:	bf00      	nop
 800e058:	08013008 	.word	0x08013008
 800e05c:	08012e39 	.word	0x08012e39
 800e060:	08012eb9 	.word	0x08012eb9

0800e064 <__lshift>:
 800e064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e068:	460c      	mov	r4, r1
 800e06a:	6849      	ldr	r1, [r1, #4]
 800e06c:	6923      	ldr	r3, [r4, #16]
 800e06e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e072:	68a3      	ldr	r3, [r4, #8]
 800e074:	4607      	mov	r7, r0
 800e076:	4691      	mov	r9, r2
 800e078:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e07c:	f108 0601 	add.w	r6, r8, #1
 800e080:	42b3      	cmp	r3, r6
 800e082:	db0b      	blt.n	800e09c <__lshift+0x38>
 800e084:	4638      	mov	r0, r7
 800e086:	f7ff fddd 	bl	800dc44 <_Balloc>
 800e08a:	4605      	mov	r5, r0
 800e08c:	b948      	cbnz	r0, 800e0a2 <__lshift+0x3e>
 800e08e:	4602      	mov	r2, r0
 800e090:	4b28      	ldr	r3, [pc, #160]	; (800e134 <__lshift+0xd0>)
 800e092:	4829      	ldr	r0, [pc, #164]	; (800e138 <__lshift+0xd4>)
 800e094:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800e098:	f000 fd46 	bl	800eb28 <__assert_func>
 800e09c:	3101      	adds	r1, #1
 800e09e:	005b      	lsls	r3, r3, #1
 800e0a0:	e7ee      	b.n	800e080 <__lshift+0x1c>
 800e0a2:	2300      	movs	r3, #0
 800e0a4:	f100 0114 	add.w	r1, r0, #20
 800e0a8:	f100 0210 	add.w	r2, r0, #16
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	4553      	cmp	r3, sl
 800e0b0:	db33      	blt.n	800e11a <__lshift+0xb6>
 800e0b2:	6920      	ldr	r0, [r4, #16]
 800e0b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e0b8:	f104 0314 	add.w	r3, r4, #20
 800e0bc:	f019 091f 	ands.w	r9, r9, #31
 800e0c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e0c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e0c8:	d02b      	beq.n	800e122 <__lshift+0xbe>
 800e0ca:	f1c9 0e20 	rsb	lr, r9, #32
 800e0ce:	468a      	mov	sl, r1
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	6818      	ldr	r0, [r3, #0]
 800e0d4:	fa00 f009 	lsl.w	r0, r0, r9
 800e0d8:	4310      	orrs	r0, r2
 800e0da:	f84a 0b04 	str.w	r0, [sl], #4
 800e0de:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0e2:	459c      	cmp	ip, r3
 800e0e4:	fa22 f20e 	lsr.w	r2, r2, lr
 800e0e8:	d8f3      	bhi.n	800e0d2 <__lshift+0x6e>
 800e0ea:	ebac 0304 	sub.w	r3, ip, r4
 800e0ee:	3b15      	subs	r3, #21
 800e0f0:	f023 0303 	bic.w	r3, r3, #3
 800e0f4:	3304      	adds	r3, #4
 800e0f6:	f104 0015 	add.w	r0, r4, #21
 800e0fa:	4584      	cmp	ip, r0
 800e0fc:	bf38      	it	cc
 800e0fe:	2304      	movcc	r3, #4
 800e100:	50ca      	str	r2, [r1, r3]
 800e102:	b10a      	cbz	r2, 800e108 <__lshift+0xa4>
 800e104:	f108 0602 	add.w	r6, r8, #2
 800e108:	3e01      	subs	r6, #1
 800e10a:	4638      	mov	r0, r7
 800e10c:	612e      	str	r6, [r5, #16]
 800e10e:	4621      	mov	r1, r4
 800e110:	f7ff fdd8 	bl	800dcc4 <_Bfree>
 800e114:	4628      	mov	r0, r5
 800e116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e11a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e11e:	3301      	adds	r3, #1
 800e120:	e7c5      	b.n	800e0ae <__lshift+0x4a>
 800e122:	3904      	subs	r1, #4
 800e124:	f853 2b04 	ldr.w	r2, [r3], #4
 800e128:	f841 2f04 	str.w	r2, [r1, #4]!
 800e12c:	459c      	cmp	ip, r3
 800e12e:	d8f9      	bhi.n	800e124 <__lshift+0xc0>
 800e130:	e7ea      	b.n	800e108 <__lshift+0xa4>
 800e132:	bf00      	nop
 800e134:	08012ea8 	.word	0x08012ea8
 800e138:	08012eb9 	.word	0x08012eb9

0800e13c <__mcmp>:
 800e13c:	b530      	push	{r4, r5, lr}
 800e13e:	6902      	ldr	r2, [r0, #16]
 800e140:	690c      	ldr	r4, [r1, #16]
 800e142:	1b12      	subs	r2, r2, r4
 800e144:	d10e      	bne.n	800e164 <__mcmp+0x28>
 800e146:	f100 0314 	add.w	r3, r0, #20
 800e14a:	3114      	adds	r1, #20
 800e14c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e150:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e154:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e158:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e15c:	42a5      	cmp	r5, r4
 800e15e:	d003      	beq.n	800e168 <__mcmp+0x2c>
 800e160:	d305      	bcc.n	800e16e <__mcmp+0x32>
 800e162:	2201      	movs	r2, #1
 800e164:	4610      	mov	r0, r2
 800e166:	bd30      	pop	{r4, r5, pc}
 800e168:	4283      	cmp	r3, r0
 800e16a:	d3f3      	bcc.n	800e154 <__mcmp+0x18>
 800e16c:	e7fa      	b.n	800e164 <__mcmp+0x28>
 800e16e:	f04f 32ff 	mov.w	r2, #4294967295
 800e172:	e7f7      	b.n	800e164 <__mcmp+0x28>

0800e174 <__mdiff>:
 800e174:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e178:	460c      	mov	r4, r1
 800e17a:	4606      	mov	r6, r0
 800e17c:	4611      	mov	r1, r2
 800e17e:	4620      	mov	r0, r4
 800e180:	4690      	mov	r8, r2
 800e182:	f7ff ffdb 	bl	800e13c <__mcmp>
 800e186:	1e05      	subs	r5, r0, #0
 800e188:	d110      	bne.n	800e1ac <__mdiff+0x38>
 800e18a:	4629      	mov	r1, r5
 800e18c:	4630      	mov	r0, r6
 800e18e:	f7ff fd59 	bl	800dc44 <_Balloc>
 800e192:	b930      	cbnz	r0, 800e1a2 <__mdiff+0x2e>
 800e194:	4b3a      	ldr	r3, [pc, #232]	; (800e280 <__mdiff+0x10c>)
 800e196:	4602      	mov	r2, r0
 800e198:	f240 2137 	movw	r1, #567	; 0x237
 800e19c:	4839      	ldr	r0, [pc, #228]	; (800e284 <__mdiff+0x110>)
 800e19e:	f000 fcc3 	bl	800eb28 <__assert_func>
 800e1a2:	2301      	movs	r3, #1
 800e1a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e1a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ac:	bfa4      	itt	ge
 800e1ae:	4643      	movge	r3, r8
 800e1b0:	46a0      	movge	r8, r4
 800e1b2:	4630      	mov	r0, r6
 800e1b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e1b8:	bfa6      	itte	ge
 800e1ba:	461c      	movge	r4, r3
 800e1bc:	2500      	movge	r5, #0
 800e1be:	2501      	movlt	r5, #1
 800e1c0:	f7ff fd40 	bl	800dc44 <_Balloc>
 800e1c4:	b920      	cbnz	r0, 800e1d0 <__mdiff+0x5c>
 800e1c6:	4b2e      	ldr	r3, [pc, #184]	; (800e280 <__mdiff+0x10c>)
 800e1c8:	4602      	mov	r2, r0
 800e1ca:	f240 2145 	movw	r1, #581	; 0x245
 800e1ce:	e7e5      	b.n	800e19c <__mdiff+0x28>
 800e1d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e1d4:	6926      	ldr	r6, [r4, #16]
 800e1d6:	60c5      	str	r5, [r0, #12]
 800e1d8:	f104 0914 	add.w	r9, r4, #20
 800e1dc:	f108 0514 	add.w	r5, r8, #20
 800e1e0:	f100 0e14 	add.w	lr, r0, #20
 800e1e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e1e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e1ec:	f108 0210 	add.w	r2, r8, #16
 800e1f0:	46f2      	mov	sl, lr
 800e1f2:	2100      	movs	r1, #0
 800e1f4:	f859 3b04 	ldr.w	r3, [r9], #4
 800e1f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e1fc:	fa11 f88b 	uxtah	r8, r1, fp
 800e200:	b299      	uxth	r1, r3
 800e202:	0c1b      	lsrs	r3, r3, #16
 800e204:	eba8 0801 	sub.w	r8, r8, r1
 800e208:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e20c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e210:	fa1f f888 	uxth.w	r8, r8
 800e214:	1419      	asrs	r1, r3, #16
 800e216:	454e      	cmp	r6, r9
 800e218:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e21c:	f84a 3b04 	str.w	r3, [sl], #4
 800e220:	d8e8      	bhi.n	800e1f4 <__mdiff+0x80>
 800e222:	1b33      	subs	r3, r6, r4
 800e224:	3b15      	subs	r3, #21
 800e226:	f023 0303 	bic.w	r3, r3, #3
 800e22a:	3304      	adds	r3, #4
 800e22c:	3415      	adds	r4, #21
 800e22e:	42a6      	cmp	r6, r4
 800e230:	bf38      	it	cc
 800e232:	2304      	movcc	r3, #4
 800e234:	441d      	add	r5, r3
 800e236:	4473      	add	r3, lr
 800e238:	469e      	mov	lr, r3
 800e23a:	462e      	mov	r6, r5
 800e23c:	4566      	cmp	r6, ip
 800e23e:	d30e      	bcc.n	800e25e <__mdiff+0xea>
 800e240:	f10c 0203 	add.w	r2, ip, #3
 800e244:	1b52      	subs	r2, r2, r5
 800e246:	f022 0203 	bic.w	r2, r2, #3
 800e24a:	3d03      	subs	r5, #3
 800e24c:	45ac      	cmp	ip, r5
 800e24e:	bf38      	it	cc
 800e250:	2200      	movcc	r2, #0
 800e252:	4413      	add	r3, r2
 800e254:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e258:	b17a      	cbz	r2, 800e27a <__mdiff+0x106>
 800e25a:	6107      	str	r7, [r0, #16]
 800e25c:	e7a4      	b.n	800e1a8 <__mdiff+0x34>
 800e25e:	f856 8b04 	ldr.w	r8, [r6], #4
 800e262:	fa11 f288 	uxtah	r2, r1, r8
 800e266:	1414      	asrs	r4, r2, #16
 800e268:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e26c:	b292      	uxth	r2, r2
 800e26e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e272:	f84e 2b04 	str.w	r2, [lr], #4
 800e276:	1421      	asrs	r1, r4, #16
 800e278:	e7e0      	b.n	800e23c <__mdiff+0xc8>
 800e27a:	3f01      	subs	r7, #1
 800e27c:	e7ea      	b.n	800e254 <__mdiff+0xe0>
 800e27e:	bf00      	nop
 800e280:	08012ea8 	.word	0x08012ea8
 800e284:	08012eb9 	.word	0x08012eb9

0800e288 <__d2b>:
 800e288:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e28c:	460f      	mov	r7, r1
 800e28e:	2101      	movs	r1, #1
 800e290:	ec59 8b10 	vmov	r8, r9, d0
 800e294:	4616      	mov	r6, r2
 800e296:	f7ff fcd5 	bl	800dc44 <_Balloc>
 800e29a:	4604      	mov	r4, r0
 800e29c:	b930      	cbnz	r0, 800e2ac <__d2b+0x24>
 800e29e:	4602      	mov	r2, r0
 800e2a0:	4b24      	ldr	r3, [pc, #144]	; (800e334 <__d2b+0xac>)
 800e2a2:	4825      	ldr	r0, [pc, #148]	; (800e338 <__d2b+0xb0>)
 800e2a4:	f240 310f 	movw	r1, #783	; 0x30f
 800e2a8:	f000 fc3e 	bl	800eb28 <__assert_func>
 800e2ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e2b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2b4:	bb2d      	cbnz	r5, 800e302 <__d2b+0x7a>
 800e2b6:	9301      	str	r3, [sp, #4]
 800e2b8:	f1b8 0300 	subs.w	r3, r8, #0
 800e2bc:	d026      	beq.n	800e30c <__d2b+0x84>
 800e2be:	4668      	mov	r0, sp
 800e2c0:	9300      	str	r3, [sp, #0]
 800e2c2:	f7ff fd87 	bl	800ddd4 <__lo0bits>
 800e2c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e2ca:	b1e8      	cbz	r0, 800e308 <__d2b+0x80>
 800e2cc:	f1c0 0320 	rsb	r3, r0, #32
 800e2d0:	fa02 f303 	lsl.w	r3, r2, r3
 800e2d4:	430b      	orrs	r3, r1
 800e2d6:	40c2      	lsrs	r2, r0
 800e2d8:	6163      	str	r3, [r4, #20]
 800e2da:	9201      	str	r2, [sp, #4]
 800e2dc:	9b01      	ldr	r3, [sp, #4]
 800e2de:	61a3      	str	r3, [r4, #24]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	bf14      	ite	ne
 800e2e4:	2202      	movne	r2, #2
 800e2e6:	2201      	moveq	r2, #1
 800e2e8:	6122      	str	r2, [r4, #16]
 800e2ea:	b1bd      	cbz	r5, 800e31c <__d2b+0x94>
 800e2ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e2f0:	4405      	add	r5, r0
 800e2f2:	603d      	str	r5, [r7, #0]
 800e2f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e2f8:	6030      	str	r0, [r6, #0]
 800e2fa:	4620      	mov	r0, r4
 800e2fc:	b003      	add	sp, #12
 800e2fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e302:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e306:	e7d6      	b.n	800e2b6 <__d2b+0x2e>
 800e308:	6161      	str	r1, [r4, #20]
 800e30a:	e7e7      	b.n	800e2dc <__d2b+0x54>
 800e30c:	a801      	add	r0, sp, #4
 800e30e:	f7ff fd61 	bl	800ddd4 <__lo0bits>
 800e312:	9b01      	ldr	r3, [sp, #4]
 800e314:	6163      	str	r3, [r4, #20]
 800e316:	3020      	adds	r0, #32
 800e318:	2201      	movs	r2, #1
 800e31a:	e7e5      	b.n	800e2e8 <__d2b+0x60>
 800e31c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e320:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e324:	6038      	str	r0, [r7, #0]
 800e326:	6918      	ldr	r0, [r3, #16]
 800e328:	f7ff fd34 	bl	800dd94 <__hi0bits>
 800e32c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e330:	e7e2      	b.n	800e2f8 <__d2b+0x70>
 800e332:	bf00      	nop
 800e334:	08012ea8 	.word	0x08012ea8
 800e338:	08012eb9 	.word	0x08012eb9

0800e33c <__ssputs_r>:
 800e33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e340:	688e      	ldr	r6, [r1, #8]
 800e342:	461f      	mov	r7, r3
 800e344:	42be      	cmp	r6, r7
 800e346:	680b      	ldr	r3, [r1, #0]
 800e348:	4682      	mov	sl, r0
 800e34a:	460c      	mov	r4, r1
 800e34c:	4690      	mov	r8, r2
 800e34e:	d82c      	bhi.n	800e3aa <__ssputs_r+0x6e>
 800e350:	898a      	ldrh	r2, [r1, #12]
 800e352:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e356:	d026      	beq.n	800e3a6 <__ssputs_r+0x6a>
 800e358:	6965      	ldr	r5, [r4, #20]
 800e35a:	6909      	ldr	r1, [r1, #16]
 800e35c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e360:	eba3 0901 	sub.w	r9, r3, r1
 800e364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e368:	1c7b      	adds	r3, r7, #1
 800e36a:	444b      	add	r3, r9
 800e36c:	106d      	asrs	r5, r5, #1
 800e36e:	429d      	cmp	r5, r3
 800e370:	bf38      	it	cc
 800e372:	461d      	movcc	r5, r3
 800e374:	0553      	lsls	r3, r2, #21
 800e376:	d527      	bpl.n	800e3c8 <__ssputs_r+0x8c>
 800e378:	4629      	mov	r1, r5
 800e37a:	f7fd fdf1 	bl	800bf60 <_malloc_r>
 800e37e:	4606      	mov	r6, r0
 800e380:	b360      	cbz	r0, 800e3dc <__ssputs_r+0xa0>
 800e382:	6921      	ldr	r1, [r4, #16]
 800e384:	464a      	mov	r2, r9
 800e386:	f000 fbc1 	bl	800eb0c <memcpy>
 800e38a:	89a3      	ldrh	r3, [r4, #12]
 800e38c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e394:	81a3      	strh	r3, [r4, #12]
 800e396:	6126      	str	r6, [r4, #16]
 800e398:	6165      	str	r5, [r4, #20]
 800e39a:	444e      	add	r6, r9
 800e39c:	eba5 0509 	sub.w	r5, r5, r9
 800e3a0:	6026      	str	r6, [r4, #0]
 800e3a2:	60a5      	str	r5, [r4, #8]
 800e3a4:	463e      	mov	r6, r7
 800e3a6:	42be      	cmp	r6, r7
 800e3a8:	d900      	bls.n	800e3ac <__ssputs_r+0x70>
 800e3aa:	463e      	mov	r6, r7
 800e3ac:	6820      	ldr	r0, [r4, #0]
 800e3ae:	4632      	mov	r2, r6
 800e3b0:	4641      	mov	r1, r8
 800e3b2:	f000 fb6f 	bl	800ea94 <memmove>
 800e3b6:	68a3      	ldr	r3, [r4, #8]
 800e3b8:	1b9b      	subs	r3, r3, r6
 800e3ba:	60a3      	str	r3, [r4, #8]
 800e3bc:	6823      	ldr	r3, [r4, #0]
 800e3be:	4433      	add	r3, r6
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	2000      	movs	r0, #0
 800e3c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3c8:	462a      	mov	r2, r5
 800e3ca:	f000 fbf3 	bl	800ebb4 <_realloc_r>
 800e3ce:	4606      	mov	r6, r0
 800e3d0:	2800      	cmp	r0, #0
 800e3d2:	d1e0      	bne.n	800e396 <__ssputs_r+0x5a>
 800e3d4:	6921      	ldr	r1, [r4, #16]
 800e3d6:	4650      	mov	r0, sl
 800e3d8:	f7ff fbe8 	bl	800dbac <_free_r>
 800e3dc:	230c      	movs	r3, #12
 800e3de:	f8ca 3000 	str.w	r3, [sl]
 800e3e2:	89a3      	ldrh	r3, [r4, #12]
 800e3e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3e8:	81a3      	strh	r3, [r4, #12]
 800e3ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ee:	e7e9      	b.n	800e3c4 <__ssputs_r+0x88>

0800e3f0 <_svfiprintf_r>:
 800e3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f4:	4698      	mov	r8, r3
 800e3f6:	898b      	ldrh	r3, [r1, #12]
 800e3f8:	061b      	lsls	r3, r3, #24
 800e3fa:	b09d      	sub	sp, #116	; 0x74
 800e3fc:	4607      	mov	r7, r0
 800e3fe:	460d      	mov	r5, r1
 800e400:	4614      	mov	r4, r2
 800e402:	d50e      	bpl.n	800e422 <_svfiprintf_r+0x32>
 800e404:	690b      	ldr	r3, [r1, #16]
 800e406:	b963      	cbnz	r3, 800e422 <_svfiprintf_r+0x32>
 800e408:	2140      	movs	r1, #64	; 0x40
 800e40a:	f7fd fda9 	bl	800bf60 <_malloc_r>
 800e40e:	6028      	str	r0, [r5, #0]
 800e410:	6128      	str	r0, [r5, #16]
 800e412:	b920      	cbnz	r0, 800e41e <_svfiprintf_r+0x2e>
 800e414:	230c      	movs	r3, #12
 800e416:	603b      	str	r3, [r7, #0]
 800e418:	f04f 30ff 	mov.w	r0, #4294967295
 800e41c:	e0d0      	b.n	800e5c0 <_svfiprintf_r+0x1d0>
 800e41e:	2340      	movs	r3, #64	; 0x40
 800e420:	616b      	str	r3, [r5, #20]
 800e422:	2300      	movs	r3, #0
 800e424:	9309      	str	r3, [sp, #36]	; 0x24
 800e426:	2320      	movs	r3, #32
 800e428:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e42c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e430:	2330      	movs	r3, #48	; 0x30
 800e432:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e5d8 <_svfiprintf_r+0x1e8>
 800e436:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e43a:	f04f 0901 	mov.w	r9, #1
 800e43e:	4623      	mov	r3, r4
 800e440:	469a      	mov	sl, r3
 800e442:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e446:	b10a      	cbz	r2, 800e44c <_svfiprintf_r+0x5c>
 800e448:	2a25      	cmp	r2, #37	; 0x25
 800e44a:	d1f9      	bne.n	800e440 <_svfiprintf_r+0x50>
 800e44c:	ebba 0b04 	subs.w	fp, sl, r4
 800e450:	d00b      	beq.n	800e46a <_svfiprintf_r+0x7a>
 800e452:	465b      	mov	r3, fp
 800e454:	4622      	mov	r2, r4
 800e456:	4629      	mov	r1, r5
 800e458:	4638      	mov	r0, r7
 800e45a:	f7ff ff6f 	bl	800e33c <__ssputs_r>
 800e45e:	3001      	adds	r0, #1
 800e460:	f000 80a9 	beq.w	800e5b6 <_svfiprintf_r+0x1c6>
 800e464:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e466:	445a      	add	r2, fp
 800e468:	9209      	str	r2, [sp, #36]	; 0x24
 800e46a:	f89a 3000 	ldrb.w	r3, [sl]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	f000 80a1 	beq.w	800e5b6 <_svfiprintf_r+0x1c6>
 800e474:	2300      	movs	r3, #0
 800e476:	f04f 32ff 	mov.w	r2, #4294967295
 800e47a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e47e:	f10a 0a01 	add.w	sl, sl, #1
 800e482:	9304      	str	r3, [sp, #16]
 800e484:	9307      	str	r3, [sp, #28]
 800e486:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e48a:	931a      	str	r3, [sp, #104]	; 0x68
 800e48c:	4654      	mov	r4, sl
 800e48e:	2205      	movs	r2, #5
 800e490:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e494:	4850      	ldr	r0, [pc, #320]	; (800e5d8 <_svfiprintf_r+0x1e8>)
 800e496:	f7f1 fec3 	bl	8000220 <memchr>
 800e49a:	9a04      	ldr	r2, [sp, #16]
 800e49c:	b9d8      	cbnz	r0, 800e4d6 <_svfiprintf_r+0xe6>
 800e49e:	06d0      	lsls	r0, r2, #27
 800e4a0:	bf44      	itt	mi
 800e4a2:	2320      	movmi	r3, #32
 800e4a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4a8:	0711      	lsls	r1, r2, #28
 800e4aa:	bf44      	itt	mi
 800e4ac:	232b      	movmi	r3, #43	; 0x2b
 800e4ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e4b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e4b6:	2b2a      	cmp	r3, #42	; 0x2a
 800e4b8:	d015      	beq.n	800e4e6 <_svfiprintf_r+0xf6>
 800e4ba:	9a07      	ldr	r2, [sp, #28]
 800e4bc:	4654      	mov	r4, sl
 800e4be:	2000      	movs	r0, #0
 800e4c0:	f04f 0c0a 	mov.w	ip, #10
 800e4c4:	4621      	mov	r1, r4
 800e4c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4ca:	3b30      	subs	r3, #48	; 0x30
 800e4cc:	2b09      	cmp	r3, #9
 800e4ce:	d94d      	bls.n	800e56c <_svfiprintf_r+0x17c>
 800e4d0:	b1b0      	cbz	r0, 800e500 <_svfiprintf_r+0x110>
 800e4d2:	9207      	str	r2, [sp, #28]
 800e4d4:	e014      	b.n	800e500 <_svfiprintf_r+0x110>
 800e4d6:	eba0 0308 	sub.w	r3, r0, r8
 800e4da:	fa09 f303 	lsl.w	r3, r9, r3
 800e4de:	4313      	orrs	r3, r2
 800e4e0:	9304      	str	r3, [sp, #16]
 800e4e2:	46a2      	mov	sl, r4
 800e4e4:	e7d2      	b.n	800e48c <_svfiprintf_r+0x9c>
 800e4e6:	9b03      	ldr	r3, [sp, #12]
 800e4e8:	1d19      	adds	r1, r3, #4
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	9103      	str	r1, [sp, #12]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	bfbb      	ittet	lt
 800e4f2:	425b      	neglt	r3, r3
 800e4f4:	f042 0202 	orrlt.w	r2, r2, #2
 800e4f8:	9307      	strge	r3, [sp, #28]
 800e4fa:	9307      	strlt	r3, [sp, #28]
 800e4fc:	bfb8      	it	lt
 800e4fe:	9204      	strlt	r2, [sp, #16]
 800e500:	7823      	ldrb	r3, [r4, #0]
 800e502:	2b2e      	cmp	r3, #46	; 0x2e
 800e504:	d10c      	bne.n	800e520 <_svfiprintf_r+0x130>
 800e506:	7863      	ldrb	r3, [r4, #1]
 800e508:	2b2a      	cmp	r3, #42	; 0x2a
 800e50a:	d134      	bne.n	800e576 <_svfiprintf_r+0x186>
 800e50c:	9b03      	ldr	r3, [sp, #12]
 800e50e:	1d1a      	adds	r2, r3, #4
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	9203      	str	r2, [sp, #12]
 800e514:	2b00      	cmp	r3, #0
 800e516:	bfb8      	it	lt
 800e518:	f04f 33ff 	movlt.w	r3, #4294967295
 800e51c:	3402      	adds	r4, #2
 800e51e:	9305      	str	r3, [sp, #20]
 800e520:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e5e8 <_svfiprintf_r+0x1f8>
 800e524:	7821      	ldrb	r1, [r4, #0]
 800e526:	2203      	movs	r2, #3
 800e528:	4650      	mov	r0, sl
 800e52a:	f7f1 fe79 	bl	8000220 <memchr>
 800e52e:	b138      	cbz	r0, 800e540 <_svfiprintf_r+0x150>
 800e530:	9b04      	ldr	r3, [sp, #16]
 800e532:	eba0 000a 	sub.w	r0, r0, sl
 800e536:	2240      	movs	r2, #64	; 0x40
 800e538:	4082      	lsls	r2, r0
 800e53a:	4313      	orrs	r3, r2
 800e53c:	3401      	adds	r4, #1
 800e53e:	9304      	str	r3, [sp, #16]
 800e540:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e544:	4825      	ldr	r0, [pc, #148]	; (800e5dc <_svfiprintf_r+0x1ec>)
 800e546:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e54a:	2206      	movs	r2, #6
 800e54c:	f7f1 fe68 	bl	8000220 <memchr>
 800e550:	2800      	cmp	r0, #0
 800e552:	d038      	beq.n	800e5c6 <_svfiprintf_r+0x1d6>
 800e554:	4b22      	ldr	r3, [pc, #136]	; (800e5e0 <_svfiprintf_r+0x1f0>)
 800e556:	bb1b      	cbnz	r3, 800e5a0 <_svfiprintf_r+0x1b0>
 800e558:	9b03      	ldr	r3, [sp, #12]
 800e55a:	3307      	adds	r3, #7
 800e55c:	f023 0307 	bic.w	r3, r3, #7
 800e560:	3308      	adds	r3, #8
 800e562:	9303      	str	r3, [sp, #12]
 800e564:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e566:	4433      	add	r3, r6
 800e568:	9309      	str	r3, [sp, #36]	; 0x24
 800e56a:	e768      	b.n	800e43e <_svfiprintf_r+0x4e>
 800e56c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e570:	460c      	mov	r4, r1
 800e572:	2001      	movs	r0, #1
 800e574:	e7a6      	b.n	800e4c4 <_svfiprintf_r+0xd4>
 800e576:	2300      	movs	r3, #0
 800e578:	3401      	adds	r4, #1
 800e57a:	9305      	str	r3, [sp, #20]
 800e57c:	4619      	mov	r1, r3
 800e57e:	f04f 0c0a 	mov.w	ip, #10
 800e582:	4620      	mov	r0, r4
 800e584:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e588:	3a30      	subs	r2, #48	; 0x30
 800e58a:	2a09      	cmp	r2, #9
 800e58c:	d903      	bls.n	800e596 <_svfiprintf_r+0x1a6>
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d0c6      	beq.n	800e520 <_svfiprintf_r+0x130>
 800e592:	9105      	str	r1, [sp, #20]
 800e594:	e7c4      	b.n	800e520 <_svfiprintf_r+0x130>
 800e596:	fb0c 2101 	mla	r1, ip, r1, r2
 800e59a:	4604      	mov	r4, r0
 800e59c:	2301      	movs	r3, #1
 800e59e:	e7f0      	b.n	800e582 <_svfiprintf_r+0x192>
 800e5a0:	ab03      	add	r3, sp, #12
 800e5a2:	9300      	str	r3, [sp, #0]
 800e5a4:	462a      	mov	r2, r5
 800e5a6:	4b0f      	ldr	r3, [pc, #60]	; (800e5e4 <_svfiprintf_r+0x1f4>)
 800e5a8:	a904      	add	r1, sp, #16
 800e5aa:	4638      	mov	r0, r7
 800e5ac:	f7fd fe04 	bl	800c1b8 <_printf_float>
 800e5b0:	1c42      	adds	r2, r0, #1
 800e5b2:	4606      	mov	r6, r0
 800e5b4:	d1d6      	bne.n	800e564 <_svfiprintf_r+0x174>
 800e5b6:	89ab      	ldrh	r3, [r5, #12]
 800e5b8:	065b      	lsls	r3, r3, #25
 800e5ba:	f53f af2d 	bmi.w	800e418 <_svfiprintf_r+0x28>
 800e5be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e5c0:	b01d      	add	sp, #116	; 0x74
 800e5c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c6:	ab03      	add	r3, sp, #12
 800e5c8:	9300      	str	r3, [sp, #0]
 800e5ca:	462a      	mov	r2, r5
 800e5cc:	4b05      	ldr	r3, [pc, #20]	; (800e5e4 <_svfiprintf_r+0x1f4>)
 800e5ce:	a904      	add	r1, sp, #16
 800e5d0:	4638      	mov	r0, r7
 800e5d2:	f7fe f895 	bl	800c700 <_printf_i>
 800e5d6:	e7eb      	b.n	800e5b0 <_svfiprintf_r+0x1c0>
 800e5d8:	08013014 	.word	0x08013014
 800e5dc:	0801301e 	.word	0x0801301e
 800e5e0:	0800c1b9 	.word	0x0800c1b9
 800e5e4:	0800e33d 	.word	0x0800e33d
 800e5e8:	0801301a 	.word	0x0801301a

0800e5ec <__sfputc_r>:
 800e5ec:	6893      	ldr	r3, [r2, #8]
 800e5ee:	3b01      	subs	r3, #1
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	b410      	push	{r4}
 800e5f4:	6093      	str	r3, [r2, #8]
 800e5f6:	da08      	bge.n	800e60a <__sfputc_r+0x1e>
 800e5f8:	6994      	ldr	r4, [r2, #24]
 800e5fa:	42a3      	cmp	r3, r4
 800e5fc:	db01      	blt.n	800e602 <__sfputc_r+0x16>
 800e5fe:	290a      	cmp	r1, #10
 800e600:	d103      	bne.n	800e60a <__sfputc_r+0x1e>
 800e602:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e606:	f7fe bb30 	b.w	800cc6a <__swbuf_r>
 800e60a:	6813      	ldr	r3, [r2, #0]
 800e60c:	1c58      	adds	r0, r3, #1
 800e60e:	6010      	str	r0, [r2, #0]
 800e610:	7019      	strb	r1, [r3, #0]
 800e612:	4608      	mov	r0, r1
 800e614:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e618:	4770      	bx	lr

0800e61a <__sfputs_r>:
 800e61a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e61c:	4606      	mov	r6, r0
 800e61e:	460f      	mov	r7, r1
 800e620:	4614      	mov	r4, r2
 800e622:	18d5      	adds	r5, r2, r3
 800e624:	42ac      	cmp	r4, r5
 800e626:	d101      	bne.n	800e62c <__sfputs_r+0x12>
 800e628:	2000      	movs	r0, #0
 800e62a:	e007      	b.n	800e63c <__sfputs_r+0x22>
 800e62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e630:	463a      	mov	r2, r7
 800e632:	4630      	mov	r0, r6
 800e634:	f7ff ffda 	bl	800e5ec <__sfputc_r>
 800e638:	1c43      	adds	r3, r0, #1
 800e63a:	d1f3      	bne.n	800e624 <__sfputs_r+0xa>
 800e63c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e640 <_vfiprintf_r>:
 800e640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e644:	460d      	mov	r5, r1
 800e646:	b09d      	sub	sp, #116	; 0x74
 800e648:	4614      	mov	r4, r2
 800e64a:	4698      	mov	r8, r3
 800e64c:	4606      	mov	r6, r0
 800e64e:	b118      	cbz	r0, 800e658 <_vfiprintf_r+0x18>
 800e650:	6a03      	ldr	r3, [r0, #32]
 800e652:	b90b      	cbnz	r3, 800e658 <_vfiprintf_r+0x18>
 800e654:	f7fe fa02 	bl	800ca5c <__sinit>
 800e658:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e65a:	07d9      	lsls	r1, r3, #31
 800e65c:	d405      	bmi.n	800e66a <_vfiprintf_r+0x2a>
 800e65e:	89ab      	ldrh	r3, [r5, #12]
 800e660:	059a      	lsls	r2, r3, #22
 800e662:	d402      	bmi.n	800e66a <_vfiprintf_r+0x2a>
 800e664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e666:	f7fe fc22 	bl	800ceae <__retarget_lock_acquire_recursive>
 800e66a:	89ab      	ldrh	r3, [r5, #12]
 800e66c:	071b      	lsls	r3, r3, #28
 800e66e:	d501      	bpl.n	800e674 <_vfiprintf_r+0x34>
 800e670:	692b      	ldr	r3, [r5, #16]
 800e672:	b99b      	cbnz	r3, 800e69c <_vfiprintf_r+0x5c>
 800e674:	4629      	mov	r1, r5
 800e676:	4630      	mov	r0, r6
 800e678:	f7fe fb34 	bl	800cce4 <__swsetup_r>
 800e67c:	b170      	cbz	r0, 800e69c <_vfiprintf_r+0x5c>
 800e67e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e680:	07dc      	lsls	r4, r3, #31
 800e682:	d504      	bpl.n	800e68e <_vfiprintf_r+0x4e>
 800e684:	f04f 30ff 	mov.w	r0, #4294967295
 800e688:	b01d      	add	sp, #116	; 0x74
 800e68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e68e:	89ab      	ldrh	r3, [r5, #12]
 800e690:	0598      	lsls	r0, r3, #22
 800e692:	d4f7      	bmi.n	800e684 <_vfiprintf_r+0x44>
 800e694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e696:	f7fe fc0b 	bl	800ceb0 <__retarget_lock_release_recursive>
 800e69a:	e7f3      	b.n	800e684 <_vfiprintf_r+0x44>
 800e69c:	2300      	movs	r3, #0
 800e69e:	9309      	str	r3, [sp, #36]	; 0x24
 800e6a0:	2320      	movs	r3, #32
 800e6a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e6a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e6aa:	2330      	movs	r3, #48	; 0x30
 800e6ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e860 <_vfiprintf_r+0x220>
 800e6b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e6b4:	f04f 0901 	mov.w	r9, #1
 800e6b8:	4623      	mov	r3, r4
 800e6ba:	469a      	mov	sl, r3
 800e6bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e6c0:	b10a      	cbz	r2, 800e6c6 <_vfiprintf_r+0x86>
 800e6c2:	2a25      	cmp	r2, #37	; 0x25
 800e6c4:	d1f9      	bne.n	800e6ba <_vfiprintf_r+0x7a>
 800e6c6:	ebba 0b04 	subs.w	fp, sl, r4
 800e6ca:	d00b      	beq.n	800e6e4 <_vfiprintf_r+0xa4>
 800e6cc:	465b      	mov	r3, fp
 800e6ce:	4622      	mov	r2, r4
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	4630      	mov	r0, r6
 800e6d4:	f7ff ffa1 	bl	800e61a <__sfputs_r>
 800e6d8:	3001      	adds	r0, #1
 800e6da:	f000 80a9 	beq.w	800e830 <_vfiprintf_r+0x1f0>
 800e6de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e6e0:	445a      	add	r2, fp
 800e6e2:	9209      	str	r2, [sp, #36]	; 0x24
 800e6e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	f000 80a1 	beq.w	800e830 <_vfiprintf_r+0x1f0>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e6f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6f8:	f10a 0a01 	add.w	sl, sl, #1
 800e6fc:	9304      	str	r3, [sp, #16]
 800e6fe:	9307      	str	r3, [sp, #28]
 800e700:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e704:	931a      	str	r3, [sp, #104]	; 0x68
 800e706:	4654      	mov	r4, sl
 800e708:	2205      	movs	r2, #5
 800e70a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e70e:	4854      	ldr	r0, [pc, #336]	; (800e860 <_vfiprintf_r+0x220>)
 800e710:	f7f1 fd86 	bl	8000220 <memchr>
 800e714:	9a04      	ldr	r2, [sp, #16]
 800e716:	b9d8      	cbnz	r0, 800e750 <_vfiprintf_r+0x110>
 800e718:	06d1      	lsls	r1, r2, #27
 800e71a:	bf44      	itt	mi
 800e71c:	2320      	movmi	r3, #32
 800e71e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e722:	0713      	lsls	r3, r2, #28
 800e724:	bf44      	itt	mi
 800e726:	232b      	movmi	r3, #43	; 0x2b
 800e728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e72c:	f89a 3000 	ldrb.w	r3, [sl]
 800e730:	2b2a      	cmp	r3, #42	; 0x2a
 800e732:	d015      	beq.n	800e760 <_vfiprintf_r+0x120>
 800e734:	9a07      	ldr	r2, [sp, #28]
 800e736:	4654      	mov	r4, sl
 800e738:	2000      	movs	r0, #0
 800e73a:	f04f 0c0a 	mov.w	ip, #10
 800e73e:	4621      	mov	r1, r4
 800e740:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e744:	3b30      	subs	r3, #48	; 0x30
 800e746:	2b09      	cmp	r3, #9
 800e748:	d94d      	bls.n	800e7e6 <_vfiprintf_r+0x1a6>
 800e74a:	b1b0      	cbz	r0, 800e77a <_vfiprintf_r+0x13a>
 800e74c:	9207      	str	r2, [sp, #28]
 800e74e:	e014      	b.n	800e77a <_vfiprintf_r+0x13a>
 800e750:	eba0 0308 	sub.w	r3, r0, r8
 800e754:	fa09 f303 	lsl.w	r3, r9, r3
 800e758:	4313      	orrs	r3, r2
 800e75a:	9304      	str	r3, [sp, #16]
 800e75c:	46a2      	mov	sl, r4
 800e75e:	e7d2      	b.n	800e706 <_vfiprintf_r+0xc6>
 800e760:	9b03      	ldr	r3, [sp, #12]
 800e762:	1d19      	adds	r1, r3, #4
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	9103      	str	r1, [sp, #12]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	bfbb      	ittet	lt
 800e76c:	425b      	neglt	r3, r3
 800e76e:	f042 0202 	orrlt.w	r2, r2, #2
 800e772:	9307      	strge	r3, [sp, #28]
 800e774:	9307      	strlt	r3, [sp, #28]
 800e776:	bfb8      	it	lt
 800e778:	9204      	strlt	r2, [sp, #16]
 800e77a:	7823      	ldrb	r3, [r4, #0]
 800e77c:	2b2e      	cmp	r3, #46	; 0x2e
 800e77e:	d10c      	bne.n	800e79a <_vfiprintf_r+0x15a>
 800e780:	7863      	ldrb	r3, [r4, #1]
 800e782:	2b2a      	cmp	r3, #42	; 0x2a
 800e784:	d134      	bne.n	800e7f0 <_vfiprintf_r+0x1b0>
 800e786:	9b03      	ldr	r3, [sp, #12]
 800e788:	1d1a      	adds	r2, r3, #4
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	9203      	str	r2, [sp, #12]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	bfb8      	it	lt
 800e792:	f04f 33ff 	movlt.w	r3, #4294967295
 800e796:	3402      	adds	r4, #2
 800e798:	9305      	str	r3, [sp, #20]
 800e79a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e870 <_vfiprintf_r+0x230>
 800e79e:	7821      	ldrb	r1, [r4, #0]
 800e7a0:	2203      	movs	r2, #3
 800e7a2:	4650      	mov	r0, sl
 800e7a4:	f7f1 fd3c 	bl	8000220 <memchr>
 800e7a8:	b138      	cbz	r0, 800e7ba <_vfiprintf_r+0x17a>
 800e7aa:	9b04      	ldr	r3, [sp, #16]
 800e7ac:	eba0 000a 	sub.w	r0, r0, sl
 800e7b0:	2240      	movs	r2, #64	; 0x40
 800e7b2:	4082      	lsls	r2, r0
 800e7b4:	4313      	orrs	r3, r2
 800e7b6:	3401      	adds	r4, #1
 800e7b8:	9304      	str	r3, [sp, #16]
 800e7ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7be:	4829      	ldr	r0, [pc, #164]	; (800e864 <_vfiprintf_r+0x224>)
 800e7c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e7c4:	2206      	movs	r2, #6
 800e7c6:	f7f1 fd2b 	bl	8000220 <memchr>
 800e7ca:	2800      	cmp	r0, #0
 800e7cc:	d03f      	beq.n	800e84e <_vfiprintf_r+0x20e>
 800e7ce:	4b26      	ldr	r3, [pc, #152]	; (800e868 <_vfiprintf_r+0x228>)
 800e7d0:	bb1b      	cbnz	r3, 800e81a <_vfiprintf_r+0x1da>
 800e7d2:	9b03      	ldr	r3, [sp, #12]
 800e7d4:	3307      	adds	r3, #7
 800e7d6:	f023 0307 	bic.w	r3, r3, #7
 800e7da:	3308      	adds	r3, #8
 800e7dc:	9303      	str	r3, [sp, #12]
 800e7de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7e0:	443b      	add	r3, r7
 800e7e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e7e4:	e768      	b.n	800e6b8 <_vfiprintf_r+0x78>
 800e7e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7ea:	460c      	mov	r4, r1
 800e7ec:	2001      	movs	r0, #1
 800e7ee:	e7a6      	b.n	800e73e <_vfiprintf_r+0xfe>
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	3401      	adds	r4, #1
 800e7f4:	9305      	str	r3, [sp, #20]
 800e7f6:	4619      	mov	r1, r3
 800e7f8:	f04f 0c0a 	mov.w	ip, #10
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e802:	3a30      	subs	r2, #48	; 0x30
 800e804:	2a09      	cmp	r2, #9
 800e806:	d903      	bls.n	800e810 <_vfiprintf_r+0x1d0>
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d0c6      	beq.n	800e79a <_vfiprintf_r+0x15a>
 800e80c:	9105      	str	r1, [sp, #20]
 800e80e:	e7c4      	b.n	800e79a <_vfiprintf_r+0x15a>
 800e810:	fb0c 2101 	mla	r1, ip, r1, r2
 800e814:	4604      	mov	r4, r0
 800e816:	2301      	movs	r3, #1
 800e818:	e7f0      	b.n	800e7fc <_vfiprintf_r+0x1bc>
 800e81a:	ab03      	add	r3, sp, #12
 800e81c:	9300      	str	r3, [sp, #0]
 800e81e:	462a      	mov	r2, r5
 800e820:	4b12      	ldr	r3, [pc, #72]	; (800e86c <_vfiprintf_r+0x22c>)
 800e822:	a904      	add	r1, sp, #16
 800e824:	4630      	mov	r0, r6
 800e826:	f7fd fcc7 	bl	800c1b8 <_printf_float>
 800e82a:	4607      	mov	r7, r0
 800e82c:	1c78      	adds	r0, r7, #1
 800e82e:	d1d6      	bne.n	800e7de <_vfiprintf_r+0x19e>
 800e830:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e832:	07d9      	lsls	r1, r3, #31
 800e834:	d405      	bmi.n	800e842 <_vfiprintf_r+0x202>
 800e836:	89ab      	ldrh	r3, [r5, #12]
 800e838:	059a      	lsls	r2, r3, #22
 800e83a:	d402      	bmi.n	800e842 <_vfiprintf_r+0x202>
 800e83c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e83e:	f7fe fb37 	bl	800ceb0 <__retarget_lock_release_recursive>
 800e842:	89ab      	ldrh	r3, [r5, #12]
 800e844:	065b      	lsls	r3, r3, #25
 800e846:	f53f af1d 	bmi.w	800e684 <_vfiprintf_r+0x44>
 800e84a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e84c:	e71c      	b.n	800e688 <_vfiprintf_r+0x48>
 800e84e:	ab03      	add	r3, sp, #12
 800e850:	9300      	str	r3, [sp, #0]
 800e852:	462a      	mov	r2, r5
 800e854:	4b05      	ldr	r3, [pc, #20]	; (800e86c <_vfiprintf_r+0x22c>)
 800e856:	a904      	add	r1, sp, #16
 800e858:	4630      	mov	r0, r6
 800e85a:	f7fd ff51 	bl	800c700 <_printf_i>
 800e85e:	e7e4      	b.n	800e82a <_vfiprintf_r+0x1ea>
 800e860:	08013014 	.word	0x08013014
 800e864:	0801301e 	.word	0x0801301e
 800e868:	0800c1b9 	.word	0x0800c1b9
 800e86c:	0800e61b 	.word	0x0800e61b
 800e870:	0801301a 	.word	0x0801301a

0800e874 <__sflush_r>:
 800e874:	898a      	ldrh	r2, [r1, #12]
 800e876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e87a:	4605      	mov	r5, r0
 800e87c:	0710      	lsls	r0, r2, #28
 800e87e:	460c      	mov	r4, r1
 800e880:	d458      	bmi.n	800e934 <__sflush_r+0xc0>
 800e882:	684b      	ldr	r3, [r1, #4]
 800e884:	2b00      	cmp	r3, #0
 800e886:	dc05      	bgt.n	800e894 <__sflush_r+0x20>
 800e888:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e88a:	2b00      	cmp	r3, #0
 800e88c:	dc02      	bgt.n	800e894 <__sflush_r+0x20>
 800e88e:	2000      	movs	r0, #0
 800e890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e894:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e896:	2e00      	cmp	r6, #0
 800e898:	d0f9      	beq.n	800e88e <__sflush_r+0x1a>
 800e89a:	2300      	movs	r3, #0
 800e89c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e8a0:	682f      	ldr	r7, [r5, #0]
 800e8a2:	6a21      	ldr	r1, [r4, #32]
 800e8a4:	602b      	str	r3, [r5, #0]
 800e8a6:	d032      	beq.n	800e90e <__sflush_r+0x9a>
 800e8a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e8aa:	89a3      	ldrh	r3, [r4, #12]
 800e8ac:	075a      	lsls	r2, r3, #29
 800e8ae:	d505      	bpl.n	800e8bc <__sflush_r+0x48>
 800e8b0:	6863      	ldr	r3, [r4, #4]
 800e8b2:	1ac0      	subs	r0, r0, r3
 800e8b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e8b6:	b10b      	cbz	r3, 800e8bc <__sflush_r+0x48>
 800e8b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e8ba:	1ac0      	subs	r0, r0, r3
 800e8bc:	2300      	movs	r3, #0
 800e8be:	4602      	mov	r2, r0
 800e8c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e8c2:	6a21      	ldr	r1, [r4, #32]
 800e8c4:	4628      	mov	r0, r5
 800e8c6:	47b0      	blx	r6
 800e8c8:	1c43      	adds	r3, r0, #1
 800e8ca:	89a3      	ldrh	r3, [r4, #12]
 800e8cc:	d106      	bne.n	800e8dc <__sflush_r+0x68>
 800e8ce:	6829      	ldr	r1, [r5, #0]
 800e8d0:	291d      	cmp	r1, #29
 800e8d2:	d82b      	bhi.n	800e92c <__sflush_r+0xb8>
 800e8d4:	4a29      	ldr	r2, [pc, #164]	; (800e97c <__sflush_r+0x108>)
 800e8d6:	410a      	asrs	r2, r1
 800e8d8:	07d6      	lsls	r6, r2, #31
 800e8da:	d427      	bmi.n	800e92c <__sflush_r+0xb8>
 800e8dc:	2200      	movs	r2, #0
 800e8de:	6062      	str	r2, [r4, #4]
 800e8e0:	04d9      	lsls	r1, r3, #19
 800e8e2:	6922      	ldr	r2, [r4, #16]
 800e8e4:	6022      	str	r2, [r4, #0]
 800e8e6:	d504      	bpl.n	800e8f2 <__sflush_r+0x7e>
 800e8e8:	1c42      	adds	r2, r0, #1
 800e8ea:	d101      	bne.n	800e8f0 <__sflush_r+0x7c>
 800e8ec:	682b      	ldr	r3, [r5, #0]
 800e8ee:	b903      	cbnz	r3, 800e8f2 <__sflush_r+0x7e>
 800e8f0:	6560      	str	r0, [r4, #84]	; 0x54
 800e8f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e8f4:	602f      	str	r7, [r5, #0]
 800e8f6:	2900      	cmp	r1, #0
 800e8f8:	d0c9      	beq.n	800e88e <__sflush_r+0x1a>
 800e8fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e8fe:	4299      	cmp	r1, r3
 800e900:	d002      	beq.n	800e908 <__sflush_r+0x94>
 800e902:	4628      	mov	r0, r5
 800e904:	f7ff f952 	bl	800dbac <_free_r>
 800e908:	2000      	movs	r0, #0
 800e90a:	6360      	str	r0, [r4, #52]	; 0x34
 800e90c:	e7c0      	b.n	800e890 <__sflush_r+0x1c>
 800e90e:	2301      	movs	r3, #1
 800e910:	4628      	mov	r0, r5
 800e912:	47b0      	blx	r6
 800e914:	1c41      	adds	r1, r0, #1
 800e916:	d1c8      	bne.n	800e8aa <__sflush_r+0x36>
 800e918:	682b      	ldr	r3, [r5, #0]
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d0c5      	beq.n	800e8aa <__sflush_r+0x36>
 800e91e:	2b1d      	cmp	r3, #29
 800e920:	d001      	beq.n	800e926 <__sflush_r+0xb2>
 800e922:	2b16      	cmp	r3, #22
 800e924:	d101      	bne.n	800e92a <__sflush_r+0xb6>
 800e926:	602f      	str	r7, [r5, #0]
 800e928:	e7b1      	b.n	800e88e <__sflush_r+0x1a>
 800e92a:	89a3      	ldrh	r3, [r4, #12]
 800e92c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e930:	81a3      	strh	r3, [r4, #12]
 800e932:	e7ad      	b.n	800e890 <__sflush_r+0x1c>
 800e934:	690f      	ldr	r7, [r1, #16]
 800e936:	2f00      	cmp	r7, #0
 800e938:	d0a9      	beq.n	800e88e <__sflush_r+0x1a>
 800e93a:	0793      	lsls	r3, r2, #30
 800e93c:	680e      	ldr	r6, [r1, #0]
 800e93e:	bf08      	it	eq
 800e940:	694b      	ldreq	r3, [r1, #20]
 800e942:	600f      	str	r7, [r1, #0]
 800e944:	bf18      	it	ne
 800e946:	2300      	movne	r3, #0
 800e948:	eba6 0807 	sub.w	r8, r6, r7
 800e94c:	608b      	str	r3, [r1, #8]
 800e94e:	f1b8 0f00 	cmp.w	r8, #0
 800e952:	dd9c      	ble.n	800e88e <__sflush_r+0x1a>
 800e954:	6a21      	ldr	r1, [r4, #32]
 800e956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e958:	4643      	mov	r3, r8
 800e95a:	463a      	mov	r2, r7
 800e95c:	4628      	mov	r0, r5
 800e95e:	47b0      	blx	r6
 800e960:	2800      	cmp	r0, #0
 800e962:	dc06      	bgt.n	800e972 <__sflush_r+0xfe>
 800e964:	89a3      	ldrh	r3, [r4, #12]
 800e966:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e96a:	81a3      	strh	r3, [r4, #12]
 800e96c:	f04f 30ff 	mov.w	r0, #4294967295
 800e970:	e78e      	b.n	800e890 <__sflush_r+0x1c>
 800e972:	4407      	add	r7, r0
 800e974:	eba8 0800 	sub.w	r8, r8, r0
 800e978:	e7e9      	b.n	800e94e <__sflush_r+0xda>
 800e97a:	bf00      	nop
 800e97c:	dfbffffe 	.word	0xdfbffffe

0800e980 <_fflush_r>:
 800e980:	b538      	push	{r3, r4, r5, lr}
 800e982:	690b      	ldr	r3, [r1, #16]
 800e984:	4605      	mov	r5, r0
 800e986:	460c      	mov	r4, r1
 800e988:	b913      	cbnz	r3, 800e990 <_fflush_r+0x10>
 800e98a:	2500      	movs	r5, #0
 800e98c:	4628      	mov	r0, r5
 800e98e:	bd38      	pop	{r3, r4, r5, pc}
 800e990:	b118      	cbz	r0, 800e99a <_fflush_r+0x1a>
 800e992:	6a03      	ldr	r3, [r0, #32]
 800e994:	b90b      	cbnz	r3, 800e99a <_fflush_r+0x1a>
 800e996:	f7fe f861 	bl	800ca5c <__sinit>
 800e99a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d0f3      	beq.n	800e98a <_fflush_r+0xa>
 800e9a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e9a4:	07d0      	lsls	r0, r2, #31
 800e9a6:	d404      	bmi.n	800e9b2 <_fflush_r+0x32>
 800e9a8:	0599      	lsls	r1, r3, #22
 800e9aa:	d402      	bmi.n	800e9b2 <_fflush_r+0x32>
 800e9ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9ae:	f7fe fa7e 	bl	800ceae <__retarget_lock_acquire_recursive>
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	4621      	mov	r1, r4
 800e9b6:	f7ff ff5d 	bl	800e874 <__sflush_r>
 800e9ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e9bc:	07da      	lsls	r2, r3, #31
 800e9be:	4605      	mov	r5, r0
 800e9c0:	d4e4      	bmi.n	800e98c <_fflush_r+0xc>
 800e9c2:	89a3      	ldrh	r3, [r4, #12]
 800e9c4:	059b      	lsls	r3, r3, #22
 800e9c6:	d4e1      	bmi.n	800e98c <_fflush_r+0xc>
 800e9c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e9ca:	f7fe fa71 	bl	800ceb0 <__retarget_lock_release_recursive>
 800e9ce:	e7dd      	b.n	800e98c <_fflush_r+0xc>

0800e9d0 <__swhatbuf_r>:
 800e9d0:	b570      	push	{r4, r5, r6, lr}
 800e9d2:	460c      	mov	r4, r1
 800e9d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9d8:	2900      	cmp	r1, #0
 800e9da:	b096      	sub	sp, #88	; 0x58
 800e9dc:	4615      	mov	r5, r2
 800e9de:	461e      	mov	r6, r3
 800e9e0:	da0d      	bge.n	800e9fe <__swhatbuf_r+0x2e>
 800e9e2:	89a3      	ldrh	r3, [r4, #12]
 800e9e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e9e8:	f04f 0100 	mov.w	r1, #0
 800e9ec:	bf0c      	ite	eq
 800e9ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e9f2:	2340      	movne	r3, #64	; 0x40
 800e9f4:	2000      	movs	r0, #0
 800e9f6:	6031      	str	r1, [r6, #0]
 800e9f8:	602b      	str	r3, [r5, #0]
 800e9fa:	b016      	add	sp, #88	; 0x58
 800e9fc:	bd70      	pop	{r4, r5, r6, pc}
 800e9fe:	466a      	mov	r2, sp
 800ea00:	f000 f862 	bl	800eac8 <_fstat_r>
 800ea04:	2800      	cmp	r0, #0
 800ea06:	dbec      	blt.n	800e9e2 <__swhatbuf_r+0x12>
 800ea08:	9901      	ldr	r1, [sp, #4]
 800ea0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ea0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ea12:	4259      	negs	r1, r3
 800ea14:	4159      	adcs	r1, r3
 800ea16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ea1a:	e7eb      	b.n	800e9f4 <__swhatbuf_r+0x24>

0800ea1c <__smakebuf_r>:
 800ea1c:	898b      	ldrh	r3, [r1, #12]
 800ea1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea20:	079d      	lsls	r5, r3, #30
 800ea22:	4606      	mov	r6, r0
 800ea24:	460c      	mov	r4, r1
 800ea26:	d507      	bpl.n	800ea38 <__smakebuf_r+0x1c>
 800ea28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ea2c:	6023      	str	r3, [r4, #0]
 800ea2e:	6123      	str	r3, [r4, #16]
 800ea30:	2301      	movs	r3, #1
 800ea32:	6163      	str	r3, [r4, #20]
 800ea34:	b002      	add	sp, #8
 800ea36:	bd70      	pop	{r4, r5, r6, pc}
 800ea38:	ab01      	add	r3, sp, #4
 800ea3a:	466a      	mov	r2, sp
 800ea3c:	f7ff ffc8 	bl	800e9d0 <__swhatbuf_r>
 800ea40:	9900      	ldr	r1, [sp, #0]
 800ea42:	4605      	mov	r5, r0
 800ea44:	4630      	mov	r0, r6
 800ea46:	f7fd fa8b 	bl	800bf60 <_malloc_r>
 800ea4a:	b948      	cbnz	r0, 800ea60 <__smakebuf_r+0x44>
 800ea4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea50:	059a      	lsls	r2, r3, #22
 800ea52:	d4ef      	bmi.n	800ea34 <__smakebuf_r+0x18>
 800ea54:	f023 0303 	bic.w	r3, r3, #3
 800ea58:	f043 0302 	orr.w	r3, r3, #2
 800ea5c:	81a3      	strh	r3, [r4, #12]
 800ea5e:	e7e3      	b.n	800ea28 <__smakebuf_r+0xc>
 800ea60:	89a3      	ldrh	r3, [r4, #12]
 800ea62:	6020      	str	r0, [r4, #0]
 800ea64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea68:	81a3      	strh	r3, [r4, #12]
 800ea6a:	9b00      	ldr	r3, [sp, #0]
 800ea6c:	6163      	str	r3, [r4, #20]
 800ea6e:	9b01      	ldr	r3, [sp, #4]
 800ea70:	6120      	str	r0, [r4, #16]
 800ea72:	b15b      	cbz	r3, 800ea8c <__smakebuf_r+0x70>
 800ea74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea78:	4630      	mov	r0, r6
 800ea7a:	f000 f837 	bl	800eaec <_isatty_r>
 800ea7e:	b128      	cbz	r0, 800ea8c <__smakebuf_r+0x70>
 800ea80:	89a3      	ldrh	r3, [r4, #12]
 800ea82:	f023 0303 	bic.w	r3, r3, #3
 800ea86:	f043 0301 	orr.w	r3, r3, #1
 800ea8a:	81a3      	strh	r3, [r4, #12]
 800ea8c:	89a3      	ldrh	r3, [r4, #12]
 800ea8e:	431d      	orrs	r5, r3
 800ea90:	81a5      	strh	r5, [r4, #12]
 800ea92:	e7cf      	b.n	800ea34 <__smakebuf_r+0x18>

0800ea94 <memmove>:
 800ea94:	4288      	cmp	r0, r1
 800ea96:	b510      	push	{r4, lr}
 800ea98:	eb01 0402 	add.w	r4, r1, r2
 800ea9c:	d902      	bls.n	800eaa4 <memmove+0x10>
 800ea9e:	4284      	cmp	r4, r0
 800eaa0:	4623      	mov	r3, r4
 800eaa2:	d807      	bhi.n	800eab4 <memmove+0x20>
 800eaa4:	1e43      	subs	r3, r0, #1
 800eaa6:	42a1      	cmp	r1, r4
 800eaa8:	d008      	beq.n	800eabc <memmove+0x28>
 800eaaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800eaae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800eab2:	e7f8      	b.n	800eaa6 <memmove+0x12>
 800eab4:	4402      	add	r2, r0
 800eab6:	4601      	mov	r1, r0
 800eab8:	428a      	cmp	r2, r1
 800eaba:	d100      	bne.n	800eabe <memmove+0x2a>
 800eabc:	bd10      	pop	{r4, pc}
 800eabe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800eac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800eac6:	e7f7      	b.n	800eab8 <memmove+0x24>

0800eac8 <_fstat_r>:
 800eac8:	b538      	push	{r3, r4, r5, lr}
 800eaca:	4d07      	ldr	r5, [pc, #28]	; (800eae8 <_fstat_r+0x20>)
 800eacc:	2300      	movs	r3, #0
 800eace:	4604      	mov	r4, r0
 800ead0:	4608      	mov	r0, r1
 800ead2:	4611      	mov	r1, r2
 800ead4:	602b      	str	r3, [r5, #0]
 800ead6:	f7f4 ff04 	bl	80038e2 <_fstat>
 800eada:	1c43      	adds	r3, r0, #1
 800eadc:	d102      	bne.n	800eae4 <_fstat_r+0x1c>
 800eade:	682b      	ldr	r3, [r5, #0]
 800eae0:	b103      	cbz	r3, 800eae4 <_fstat_r+0x1c>
 800eae2:	6023      	str	r3, [r4, #0]
 800eae4:	bd38      	pop	{r3, r4, r5, pc}
 800eae6:	bf00      	nop
 800eae8:	20000f5c 	.word	0x20000f5c

0800eaec <_isatty_r>:
 800eaec:	b538      	push	{r3, r4, r5, lr}
 800eaee:	4d06      	ldr	r5, [pc, #24]	; (800eb08 <_isatty_r+0x1c>)
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	4608      	mov	r0, r1
 800eaf6:	602b      	str	r3, [r5, #0]
 800eaf8:	f7f4 ff03 	bl	8003902 <_isatty>
 800eafc:	1c43      	adds	r3, r0, #1
 800eafe:	d102      	bne.n	800eb06 <_isatty_r+0x1a>
 800eb00:	682b      	ldr	r3, [r5, #0]
 800eb02:	b103      	cbz	r3, 800eb06 <_isatty_r+0x1a>
 800eb04:	6023      	str	r3, [r4, #0]
 800eb06:	bd38      	pop	{r3, r4, r5, pc}
 800eb08:	20000f5c 	.word	0x20000f5c

0800eb0c <memcpy>:
 800eb0c:	440a      	add	r2, r1
 800eb0e:	4291      	cmp	r1, r2
 800eb10:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb14:	d100      	bne.n	800eb18 <memcpy+0xc>
 800eb16:	4770      	bx	lr
 800eb18:	b510      	push	{r4, lr}
 800eb1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb22:	4291      	cmp	r1, r2
 800eb24:	d1f9      	bne.n	800eb1a <memcpy+0xe>
 800eb26:	bd10      	pop	{r4, pc}

0800eb28 <__assert_func>:
 800eb28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eb2a:	4614      	mov	r4, r2
 800eb2c:	461a      	mov	r2, r3
 800eb2e:	4b09      	ldr	r3, [pc, #36]	; (800eb54 <__assert_func+0x2c>)
 800eb30:	681b      	ldr	r3, [r3, #0]
 800eb32:	4605      	mov	r5, r0
 800eb34:	68d8      	ldr	r0, [r3, #12]
 800eb36:	b14c      	cbz	r4, 800eb4c <__assert_func+0x24>
 800eb38:	4b07      	ldr	r3, [pc, #28]	; (800eb58 <__assert_func+0x30>)
 800eb3a:	9100      	str	r1, [sp, #0]
 800eb3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eb40:	4906      	ldr	r1, [pc, #24]	; (800eb5c <__assert_func+0x34>)
 800eb42:	462b      	mov	r3, r5
 800eb44:	f000 f872 	bl	800ec2c <fiprintf>
 800eb48:	f000 f882 	bl	800ec50 <abort>
 800eb4c:	4b04      	ldr	r3, [pc, #16]	; (800eb60 <__assert_func+0x38>)
 800eb4e:	461c      	mov	r4, r3
 800eb50:	e7f3      	b.n	800eb3a <__assert_func+0x12>
 800eb52:	bf00      	nop
 800eb54:	200000cc 	.word	0x200000cc
 800eb58:	0801302f 	.word	0x0801302f
 800eb5c:	0801303c 	.word	0x0801303c
 800eb60:	0801306a 	.word	0x0801306a

0800eb64 <_calloc_r>:
 800eb64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800eb66:	fba1 2402 	umull	r2, r4, r1, r2
 800eb6a:	b94c      	cbnz	r4, 800eb80 <_calloc_r+0x1c>
 800eb6c:	4611      	mov	r1, r2
 800eb6e:	9201      	str	r2, [sp, #4]
 800eb70:	f7fd f9f6 	bl	800bf60 <_malloc_r>
 800eb74:	9a01      	ldr	r2, [sp, #4]
 800eb76:	4605      	mov	r5, r0
 800eb78:	b930      	cbnz	r0, 800eb88 <_calloc_r+0x24>
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	b003      	add	sp, #12
 800eb7e:	bd30      	pop	{r4, r5, pc}
 800eb80:	220c      	movs	r2, #12
 800eb82:	6002      	str	r2, [r0, #0]
 800eb84:	2500      	movs	r5, #0
 800eb86:	e7f8      	b.n	800eb7a <_calloc_r+0x16>
 800eb88:	4621      	mov	r1, r4
 800eb8a:	f7fe f903 	bl	800cd94 <memset>
 800eb8e:	e7f4      	b.n	800eb7a <_calloc_r+0x16>

0800eb90 <__ascii_mbtowc>:
 800eb90:	b082      	sub	sp, #8
 800eb92:	b901      	cbnz	r1, 800eb96 <__ascii_mbtowc+0x6>
 800eb94:	a901      	add	r1, sp, #4
 800eb96:	b142      	cbz	r2, 800ebaa <__ascii_mbtowc+0x1a>
 800eb98:	b14b      	cbz	r3, 800ebae <__ascii_mbtowc+0x1e>
 800eb9a:	7813      	ldrb	r3, [r2, #0]
 800eb9c:	600b      	str	r3, [r1, #0]
 800eb9e:	7812      	ldrb	r2, [r2, #0]
 800eba0:	1e10      	subs	r0, r2, #0
 800eba2:	bf18      	it	ne
 800eba4:	2001      	movne	r0, #1
 800eba6:	b002      	add	sp, #8
 800eba8:	4770      	bx	lr
 800ebaa:	4610      	mov	r0, r2
 800ebac:	e7fb      	b.n	800eba6 <__ascii_mbtowc+0x16>
 800ebae:	f06f 0001 	mvn.w	r0, #1
 800ebb2:	e7f8      	b.n	800eba6 <__ascii_mbtowc+0x16>

0800ebb4 <_realloc_r>:
 800ebb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb8:	4680      	mov	r8, r0
 800ebba:	4614      	mov	r4, r2
 800ebbc:	460e      	mov	r6, r1
 800ebbe:	b921      	cbnz	r1, 800ebca <_realloc_r+0x16>
 800ebc0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc4:	4611      	mov	r1, r2
 800ebc6:	f7fd b9cb 	b.w	800bf60 <_malloc_r>
 800ebca:	b92a      	cbnz	r2, 800ebd8 <_realloc_r+0x24>
 800ebcc:	f7fe ffee 	bl	800dbac <_free_r>
 800ebd0:	4625      	mov	r5, r4
 800ebd2:	4628      	mov	r0, r5
 800ebd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebd8:	f000 f841 	bl	800ec5e <_malloc_usable_size_r>
 800ebdc:	4284      	cmp	r4, r0
 800ebde:	4607      	mov	r7, r0
 800ebe0:	d802      	bhi.n	800ebe8 <_realloc_r+0x34>
 800ebe2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ebe6:	d812      	bhi.n	800ec0e <_realloc_r+0x5a>
 800ebe8:	4621      	mov	r1, r4
 800ebea:	4640      	mov	r0, r8
 800ebec:	f7fd f9b8 	bl	800bf60 <_malloc_r>
 800ebf0:	4605      	mov	r5, r0
 800ebf2:	2800      	cmp	r0, #0
 800ebf4:	d0ed      	beq.n	800ebd2 <_realloc_r+0x1e>
 800ebf6:	42bc      	cmp	r4, r7
 800ebf8:	4622      	mov	r2, r4
 800ebfa:	4631      	mov	r1, r6
 800ebfc:	bf28      	it	cs
 800ebfe:	463a      	movcs	r2, r7
 800ec00:	f7ff ff84 	bl	800eb0c <memcpy>
 800ec04:	4631      	mov	r1, r6
 800ec06:	4640      	mov	r0, r8
 800ec08:	f7fe ffd0 	bl	800dbac <_free_r>
 800ec0c:	e7e1      	b.n	800ebd2 <_realloc_r+0x1e>
 800ec0e:	4635      	mov	r5, r6
 800ec10:	e7df      	b.n	800ebd2 <_realloc_r+0x1e>

0800ec12 <__ascii_wctomb>:
 800ec12:	b149      	cbz	r1, 800ec28 <__ascii_wctomb+0x16>
 800ec14:	2aff      	cmp	r2, #255	; 0xff
 800ec16:	bf85      	ittet	hi
 800ec18:	238a      	movhi	r3, #138	; 0x8a
 800ec1a:	6003      	strhi	r3, [r0, #0]
 800ec1c:	700a      	strbls	r2, [r1, #0]
 800ec1e:	f04f 30ff 	movhi.w	r0, #4294967295
 800ec22:	bf98      	it	ls
 800ec24:	2001      	movls	r0, #1
 800ec26:	4770      	bx	lr
 800ec28:	4608      	mov	r0, r1
 800ec2a:	4770      	bx	lr

0800ec2c <fiprintf>:
 800ec2c:	b40e      	push	{r1, r2, r3}
 800ec2e:	b503      	push	{r0, r1, lr}
 800ec30:	4601      	mov	r1, r0
 800ec32:	ab03      	add	r3, sp, #12
 800ec34:	4805      	ldr	r0, [pc, #20]	; (800ec4c <fiprintf+0x20>)
 800ec36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec3a:	6800      	ldr	r0, [r0, #0]
 800ec3c:	9301      	str	r3, [sp, #4]
 800ec3e:	f7ff fcff 	bl	800e640 <_vfiprintf_r>
 800ec42:	b002      	add	sp, #8
 800ec44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec48:	b003      	add	sp, #12
 800ec4a:	4770      	bx	lr
 800ec4c:	200000cc 	.word	0x200000cc

0800ec50 <abort>:
 800ec50:	b508      	push	{r3, lr}
 800ec52:	2006      	movs	r0, #6
 800ec54:	f000 f834 	bl	800ecc0 <raise>
 800ec58:	2001      	movs	r0, #1
 800ec5a:	f7f4 fdf3 	bl	8003844 <_exit>

0800ec5e <_malloc_usable_size_r>:
 800ec5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec62:	1f18      	subs	r0, r3, #4
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	bfbc      	itt	lt
 800ec68:	580b      	ldrlt	r3, [r1, r0]
 800ec6a:	18c0      	addlt	r0, r0, r3
 800ec6c:	4770      	bx	lr

0800ec6e <_raise_r>:
 800ec6e:	291f      	cmp	r1, #31
 800ec70:	b538      	push	{r3, r4, r5, lr}
 800ec72:	4604      	mov	r4, r0
 800ec74:	460d      	mov	r5, r1
 800ec76:	d904      	bls.n	800ec82 <_raise_r+0x14>
 800ec78:	2316      	movs	r3, #22
 800ec7a:	6003      	str	r3, [r0, #0]
 800ec7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ec80:	bd38      	pop	{r3, r4, r5, pc}
 800ec82:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ec84:	b112      	cbz	r2, 800ec8c <_raise_r+0x1e>
 800ec86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ec8a:	b94b      	cbnz	r3, 800eca0 <_raise_r+0x32>
 800ec8c:	4620      	mov	r0, r4
 800ec8e:	f000 f831 	bl	800ecf4 <_getpid_r>
 800ec92:	462a      	mov	r2, r5
 800ec94:	4601      	mov	r1, r0
 800ec96:	4620      	mov	r0, r4
 800ec98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec9c:	f000 b818 	b.w	800ecd0 <_kill_r>
 800eca0:	2b01      	cmp	r3, #1
 800eca2:	d00a      	beq.n	800ecba <_raise_r+0x4c>
 800eca4:	1c59      	adds	r1, r3, #1
 800eca6:	d103      	bne.n	800ecb0 <_raise_r+0x42>
 800eca8:	2316      	movs	r3, #22
 800ecaa:	6003      	str	r3, [r0, #0]
 800ecac:	2001      	movs	r0, #1
 800ecae:	e7e7      	b.n	800ec80 <_raise_r+0x12>
 800ecb0:	2400      	movs	r4, #0
 800ecb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ecb6:	4628      	mov	r0, r5
 800ecb8:	4798      	blx	r3
 800ecba:	2000      	movs	r0, #0
 800ecbc:	e7e0      	b.n	800ec80 <_raise_r+0x12>
	...

0800ecc0 <raise>:
 800ecc0:	4b02      	ldr	r3, [pc, #8]	; (800eccc <raise+0xc>)
 800ecc2:	4601      	mov	r1, r0
 800ecc4:	6818      	ldr	r0, [r3, #0]
 800ecc6:	f7ff bfd2 	b.w	800ec6e <_raise_r>
 800ecca:	bf00      	nop
 800eccc:	200000cc 	.word	0x200000cc

0800ecd0 <_kill_r>:
 800ecd0:	b538      	push	{r3, r4, r5, lr}
 800ecd2:	4d07      	ldr	r5, [pc, #28]	; (800ecf0 <_kill_r+0x20>)
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	4604      	mov	r4, r0
 800ecd8:	4608      	mov	r0, r1
 800ecda:	4611      	mov	r1, r2
 800ecdc:	602b      	str	r3, [r5, #0]
 800ecde:	f7f4 fda1 	bl	8003824 <_kill>
 800ece2:	1c43      	adds	r3, r0, #1
 800ece4:	d102      	bne.n	800ecec <_kill_r+0x1c>
 800ece6:	682b      	ldr	r3, [r5, #0]
 800ece8:	b103      	cbz	r3, 800ecec <_kill_r+0x1c>
 800ecea:	6023      	str	r3, [r4, #0]
 800ecec:	bd38      	pop	{r3, r4, r5, pc}
 800ecee:	bf00      	nop
 800ecf0:	20000f5c 	.word	0x20000f5c

0800ecf4 <_getpid_r>:
 800ecf4:	f7f4 bd8e 	b.w	8003814 <_getpid>

0800ecf8 <pow>:
 800ecf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecfa:	ed2d 8b02 	vpush	{d8}
 800ecfe:	eeb0 8a40 	vmov.f32	s16, s0
 800ed02:	eef0 8a60 	vmov.f32	s17, s1
 800ed06:	ec55 4b11 	vmov	r4, r5, d1
 800ed0a:	f000 f871 	bl	800edf0 <__ieee754_pow>
 800ed0e:	4622      	mov	r2, r4
 800ed10:	462b      	mov	r3, r5
 800ed12:	4620      	mov	r0, r4
 800ed14:	4629      	mov	r1, r5
 800ed16:	ec57 6b10 	vmov	r6, r7, d0
 800ed1a:	f7f1 ff2f 	bl	8000b7c <__aeabi_dcmpun>
 800ed1e:	2800      	cmp	r0, #0
 800ed20:	d13b      	bne.n	800ed9a <pow+0xa2>
 800ed22:	ec51 0b18 	vmov	r0, r1, d8
 800ed26:	2200      	movs	r2, #0
 800ed28:	2300      	movs	r3, #0
 800ed2a:	f7f1 fef5 	bl	8000b18 <__aeabi_dcmpeq>
 800ed2e:	b1b8      	cbz	r0, 800ed60 <pow+0x68>
 800ed30:	2200      	movs	r2, #0
 800ed32:	2300      	movs	r3, #0
 800ed34:	4620      	mov	r0, r4
 800ed36:	4629      	mov	r1, r5
 800ed38:	f7f1 feee 	bl	8000b18 <__aeabi_dcmpeq>
 800ed3c:	2800      	cmp	r0, #0
 800ed3e:	d146      	bne.n	800edce <pow+0xd6>
 800ed40:	ec45 4b10 	vmov	d0, r4, r5
 800ed44:	f000 f848 	bl	800edd8 <finite>
 800ed48:	b338      	cbz	r0, 800ed9a <pow+0xa2>
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	2300      	movs	r3, #0
 800ed4e:	4620      	mov	r0, r4
 800ed50:	4629      	mov	r1, r5
 800ed52:	f7f1 feeb 	bl	8000b2c <__aeabi_dcmplt>
 800ed56:	b300      	cbz	r0, 800ed9a <pow+0xa2>
 800ed58:	f7fe f87e 	bl	800ce58 <__errno>
 800ed5c:	2322      	movs	r3, #34	; 0x22
 800ed5e:	e01b      	b.n	800ed98 <pow+0xa0>
 800ed60:	ec47 6b10 	vmov	d0, r6, r7
 800ed64:	f000 f838 	bl	800edd8 <finite>
 800ed68:	b9e0      	cbnz	r0, 800eda4 <pow+0xac>
 800ed6a:	eeb0 0a48 	vmov.f32	s0, s16
 800ed6e:	eef0 0a68 	vmov.f32	s1, s17
 800ed72:	f000 f831 	bl	800edd8 <finite>
 800ed76:	b1a8      	cbz	r0, 800eda4 <pow+0xac>
 800ed78:	ec45 4b10 	vmov	d0, r4, r5
 800ed7c:	f000 f82c 	bl	800edd8 <finite>
 800ed80:	b180      	cbz	r0, 800eda4 <pow+0xac>
 800ed82:	4632      	mov	r2, r6
 800ed84:	463b      	mov	r3, r7
 800ed86:	4630      	mov	r0, r6
 800ed88:	4639      	mov	r1, r7
 800ed8a:	f7f1 fef7 	bl	8000b7c <__aeabi_dcmpun>
 800ed8e:	2800      	cmp	r0, #0
 800ed90:	d0e2      	beq.n	800ed58 <pow+0x60>
 800ed92:	f7fe f861 	bl	800ce58 <__errno>
 800ed96:	2321      	movs	r3, #33	; 0x21
 800ed98:	6003      	str	r3, [r0, #0]
 800ed9a:	ecbd 8b02 	vpop	{d8}
 800ed9e:	ec47 6b10 	vmov	d0, r6, r7
 800eda2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eda4:	2200      	movs	r2, #0
 800eda6:	2300      	movs	r3, #0
 800eda8:	4630      	mov	r0, r6
 800edaa:	4639      	mov	r1, r7
 800edac:	f7f1 feb4 	bl	8000b18 <__aeabi_dcmpeq>
 800edb0:	2800      	cmp	r0, #0
 800edb2:	d0f2      	beq.n	800ed9a <pow+0xa2>
 800edb4:	eeb0 0a48 	vmov.f32	s0, s16
 800edb8:	eef0 0a68 	vmov.f32	s1, s17
 800edbc:	f000 f80c 	bl	800edd8 <finite>
 800edc0:	2800      	cmp	r0, #0
 800edc2:	d0ea      	beq.n	800ed9a <pow+0xa2>
 800edc4:	ec45 4b10 	vmov	d0, r4, r5
 800edc8:	f000 f806 	bl	800edd8 <finite>
 800edcc:	e7c3      	b.n	800ed56 <pow+0x5e>
 800edce:	4f01      	ldr	r7, [pc, #4]	; (800edd4 <pow+0xdc>)
 800edd0:	2600      	movs	r6, #0
 800edd2:	e7e2      	b.n	800ed9a <pow+0xa2>
 800edd4:	3ff00000 	.word	0x3ff00000

0800edd8 <finite>:
 800edd8:	b082      	sub	sp, #8
 800edda:	ed8d 0b00 	vstr	d0, [sp]
 800edde:	9801      	ldr	r0, [sp, #4]
 800ede0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ede4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ede8:	0fc0      	lsrs	r0, r0, #31
 800edea:	b002      	add	sp, #8
 800edec:	4770      	bx	lr
	...

0800edf0 <__ieee754_pow>:
 800edf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf4:	ed2d 8b06 	vpush	{d8-d10}
 800edf8:	b089      	sub	sp, #36	; 0x24
 800edfa:	ed8d 1b00 	vstr	d1, [sp]
 800edfe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ee02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ee06:	ea58 0102 	orrs.w	r1, r8, r2
 800ee0a:	ec57 6b10 	vmov	r6, r7, d0
 800ee0e:	d115      	bne.n	800ee3c <__ieee754_pow+0x4c>
 800ee10:	19b3      	adds	r3, r6, r6
 800ee12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ee16:	4152      	adcs	r2, r2
 800ee18:	4299      	cmp	r1, r3
 800ee1a:	4b89      	ldr	r3, [pc, #548]	; (800f040 <__ieee754_pow+0x250>)
 800ee1c:	4193      	sbcs	r3, r2
 800ee1e:	f080 84d1 	bcs.w	800f7c4 <__ieee754_pow+0x9d4>
 800ee22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ee26:	4630      	mov	r0, r6
 800ee28:	4639      	mov	r1, r7
 800ee2a:	f7f1 fa57 	bl	80002dc <__adddf3>
 800ee2e:	ec41 0b10 	vmov	d0, r0, r1
 800ee32:	b009      	add	sp, #36	; 0x24
 800ee34:	ecbd 8b06 	vpop	{d8-d10}
 800ee38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee3c:	4b81      	ldr	r3, [pc, #516]	; (800f044 <__ieee754_pow+0x254>)
 800ee3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ee42:	429c      	cmp	r4, r3
 800ee44:	ee10 aa10 	vmov	sl, s0
 800ee48:	463d      	mov	r5, r7
 800ee4a:	dc06      	bgt.n	800ee5a <__ieee754_pow+0x6a>
 800ee4c:	d101      	bne.n	800ee52 <__ieee754_pow+0x62>
 800ee4e:	2e00      	cmp	r6, #0
 800ee50:	d1e7      	bne.n	800ee22 <__ieee754_pow+0x32>
 800ee52:	4598      	cmp	r8, r3
 800ee54:	dc01      	bgt.n	800ee5a <__ieee754_pow+0x6a>
 800ee56:	d10f      	bne.n	800ee78 <__ieee754_pow+0x88>
 800ee58:	b172      	cbz	r2, 800ee78 <__ieee754_pow+0x88>
 800ee5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ee5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ee62:	ea55 050a 	orrs.w	r5, r5, sl
 800ee66:	d1dc      	bne.n	800ee22 <__ieee754_pow+0x32>
 800ee68:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ee6c:	18db      	adds	r3, r3, r3
 800ee6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ee72:	4152      	adcs	r2, r2
 800ee74:	429d      	cmp	r5, r3
 800ee76:	e7d0      	b.n	800ee1a <__ieee754_pow+0x2a>
 800ee78:	2d00      	cmp	r5, #0
 800ee7a:	da3b      	bge.n	800eef4 <__ieee754_pow+0x104>
 800ee7c:	4b72      	ldr	r3, [pc, #456]	; (800f048 <__ieee754_pow+0x258>)
 800ee7e:	4598      	cmp	r8, r3
 800ee80:	dc51      	bgt.n	800ef26 <__ieee754_pow+0x136>
 800ee82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ee86:	4598      	cmp	r8, r3
 800ee88:	f340 84ab 	ble.w	800f7e2 <__ieee754_pow+0x9f2>
 800ee8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ee90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ee94:	2b14      	cmp	r3, #20
 800ee96:	dd0f      	ble.n	800eeb8 <__ieee754_pow+0xc8>
 800ee98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ee9c:	fa22 f103 	lsr.w	r1, r2, r3
 800eea0:	fa01 f303 	lsl.w	r3, r1, r3
 800eea4:	4293      	cmp	r3, r2
 800eea6:	f040 849c 	bne.w	800f7e2 <__ieee754_pow+0x9f2>
 800eeaa:	f001 0101 	and.w	r1, r1, #1
 800eeae:	f1c1 0302 	rsb	r3, r1, #2
 800eeb2:	9304      	str	r3, [sp, #16]
 800eeb4:	b182      	cbz	r2, 800eed8 <__ieee754_pow+0xe8>
 800eeb6:	e05f      	b.n	800ef78 <__ieee754_pow+0x188>
 800eeb8:	2a00      	cmp	r2, #0
 800eeba:	d15b      	bne.n	800ef74 <__ieee754_pow+0x184>
 800eebc:	f1c3 0314 	rsb	r3, r3, #20
 800eec0:	fa48 f103 	asr.w	r1, r8, r3
 800eec4:	fa01 f303 	lsl.w	r3, r1, r3
 800eec8:	4543      	cmp	r3, r8
 800eeca:	f040 8487 	bne.w	800f7dc <__ieee754_pow+0x9ec>
 800eece:	f001 0101 	and.w	r1, r1, #1
 800eed2:	f1c1 0302 	rsb	r3, r1, #2
 800eed6:	9304      	str	r3, [sp, #16]
 800eed8:	4b5c      	ldr	r3, [pc, #368]	; (800f04c <__ieee754_pow+0x25c>)
 800eeda:	4598      	cmp	r8, r3
 800eedc:	d132      	bne.n	800ef44 <__ieee754_pow+0x154>
 800eede:	f1b9 0f00 	cmp.w	r9, #0
 800eee2:	f280 8477 	bge.w	800f7d4 <__ieee754_pow+0x9e4>
 800eee6:	4959      	ldr	r1, [pc, #356]	; (800f04c <__ieee754_pow+0x25c>)
 800eee8:	4632      	mov	r2, r6
 800eeea:	463b      	mov	r3, r7
 800eeec:	2000      	movs	r0, #0
 800eeee:	f7f1 fcd5 	bl	800089c <__aeabi_ddiv>
 800eef2:	e79c      	b.n	800ee2e <__ieee754_pow+0x3e>
 800eef4:	2300      	movs	r3, #0
 800eef6:	9304      	str	r3, [sp, #16]
 800eef8:	2a00      	cmp	r2, #0
 800eefa:	d13d      	bne.n	800ef78 <__ieee754_pow+0x188>
 800eefc:	4b51      	ldr	r3, [pc, #324]	; (800f044 <__ieee754_pow+0x254>)
 800eefe:	4598      	cmp	r8, r3
 800ef00:	d1ea      	bne.n	800eed8 <__ieee754_pow+0xe8>
 800ef02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ef06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ef0a:	ea53 030a 	orrs.w	r3, r3, sl
 800ef0e:	f000 8459 	beq.w	800f7c4 <__ieee754_pow+0x9d4>
 800ef12:	4b4f      	ldr	r3, [pc, #316]	; (800f050 <__ieee754_pow+0x260>)
 800ef14:	429c      	cmp	r4, r3
 800ef16:	dd08      	ble.n	800ef2a <__ieee754_pow+0x13a>
 800ef18:	f1b9 0f00 	cmp.w	r9, #0
 800ef1c:	f2c0 8456 	blt.w	800f7cc <__ieee754_pow+0x9dc>
 800ef20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef24:	e783      	b.n	800ee2e <__ieee754_pow+0x3e>
 800ef26:	2302      	movs	r3, #2
 800ef28:	e7e5      	b.n	800eef6 <__ieee754_pow+0x106>
 800ef2a:	f1b9 0f00 	cmp.w	r9, #0
 800ef2e:	f04f 0000 	mov.w	r0, #0
 800ef32:	f04f 0100 	mov.w	r1, #0
 800ef36:	f6bf af7a 	bge.w	800ee2e <__ieee754_pow+0x3e>
 800ef3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ef3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ef42:	e774      	b.n	800ee2e <__ieee754_pow+0x3e>
 800ef44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ef48:	d106      	bne.n	800ef58 <__ieee754_pow+0x168>
 800ef4a:	4632      	mov	r2, r6
 800ef4c:	463b      	mov	r3, r7
 800ef4e:	4630      	mov	r0, r6
 800ef50:	4639      	mov	r1, r7
 800ef52:	f7f1 fb79 	bl	8000648 <__aeabi_dmul>
 800ef56:	e76a      	b.n	800ee2e <__ieee754_pow+0x3e>
 800ef58:	4b3e      	ldr	r3, [pc, #248]	; (800f054 <__ieee754_pow+0x264>)
 800ef5a:	4599      	cmp	r9, r3
 800ef5c:	d10c      	bne.n	800ef78 <__ieee754_pow+0x188>
 800ef5e:	2d00      	cmp	r5, #0
 800ef60:	db0a      	blt.n	800ef78 <__ieee754_pow+0x188>
 800ef62:	ec47 6b10 	vmov	d0, r6, r7
 800ef66:	b009      	add	sp, #36	; 0x24
 800ef68:	ecbd 8b06 	vpop	{d8-d10}
 800ef6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef70:	f000 bd20 	b.w	800f9b4 <__ieee754_sqrt>
 800ef74:	2300      	movs	r3, #0
 800ef76:	9304      	str	r3, [sp, #16]
 800ef78:	ec47 6b10 	vmov	d0, r6, r7
 800ef7c:	f000 fc62 	bl	800f844 <fabs>
 800ef80:	ec51 0b10 	vmov	r0, r1, d0
 800ef84:	f1ba 0f00 	cmp.w	sl, #0
 800ef88:	d129      	bne.n	800efde <__ieee754_pow+0x1ee>
 800ef8a:	b124      	cbz	r4, 800ef96 <__ieee754_pow+0x1a6>
 800ef8c:	4b2f      	ldr	r3, [pc, #188]	; (800f04c <__ieee754_pow+0x25c>)
 800ef8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d123      	bne.n	800efde <__ieee754_pow+0x1ee>
 800ef96:	f1b9 0f00 	cmp.w	r9, #0
 800ef9a:	da05      	bge.n	800efa8 <__ieee754_pow+0x1b8>
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	460b      	mov	r3, r1
 800efa0:	2000      	movs	r0, #0
 800efa2:	492a      	ldr	r1, [pc, #168]	; (800f04c <__ieee754_pow+0x25c>)
 800efa4:	f7f1 fc7a 	bl	800089c <__aeabi_ddiv>
 800efa8:	2d00      	cmp	r5, #0
 800efaa:	f6bf af40 	bge.w	800ee2e <__ieee754_pow+0x3e>
 800efae:	9b04      	ldr	r3, [sp, #16]
 800efb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800efb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800efb8:	431c      	orrs	r4, r3
 800efba:	d108      	bne.n	800efce <__ieee754_pow+0x1de>
 800efbc:	4602      	mov	r2, r0
 800efbe:	460b      	mov	r3, r1
 800efc0:	4610      	mov	r0, r2
 800efc2:	4619      	mov	r1, r3
 800efc4:	f7f1 f988 	bl	80002d8 <__aeabi_dsub>
 800efc8:	4602      	mov	r2, r0
 800efca:	460b      	mov	r3, r1
 800efcc:	e78f      	b.n	800eeee <__ieee754_pow+0xfe>
 800efce:	9b04      	ldr	r3, [sp, #16]
 800efd0:	2b01      	cmp	r3, #1
 800efd2:	f47f af2c 	bne.w	800ee2e <__ieee754_pow+0x3e>
 800efd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800efda:	4619      	mov	r1, r3
 800efdc:	e727      	b.n	800ee2e <__ieee754_pow+0x3e>
 800efde:	0feb      	lsrs	r3, r5, #31
 800efe0:	3b01      	subs	r3, #1
 800efe2:	9306      	str	r3, [sp, #24]
 800efe4:	9a06      	ldr	r2, [sp, #24]
 800efe6:	9b04      	ldr	r3, [sp, #16]
 800efe8:	4313      	orrs	r3, r2
 800efea:	d102      	bne.n	800eff2 <__ieee754_pow+0x202>
 800efec:	4632      	mov	r2, r6
 800efee:	463b      	mov	r3, r7
 800eff0:	e7e6      	b.n	800efc0 <__ieee754_pow+0x1d0>
 800eff2:	4b19      	ldr	r3, [pc, #100]	; (800f058 <__ieee754_pow+0x268>)
 800eff4:	4598      	cmp	r8, r3
 800eff6:	f340 80fb 	ble.w	800f1f0 <__ieee754_pow+0x400>
 800effa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800effe:	4598      	cmp	r8, r3
 800f000:	4b13      	ldr	r3, [pc, #76]	; (800f050 <__ieee754_pow+0x260>)
 800f002:	dd0c      	ble.n	800f01e <__ieee754_pow+0x22e>
 800f004:	429c      	cmp	r4, r3
 800f006:	dc0f      	bgt.n	800f028 <__ieee754_pow+0x238>
 800f008:	f1b9 0f00 	cmp.w	r9, #0
 800f00c:	da0f      	bge.n	800f02e <__ieee754_pow+0x23e>
 800f00e:	2000      	movs	r0, #0
 800f010:	b009      	add	sp, #36	; 0x24
 800f012:	ecbd 8b06 	vpop	{d8-d10}
 800f016:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f01a:	f000 bcc2 	b.w	800f9a2 <__math_oflow>
 800f01e:	429c      	cmp	r4, r3
 800f020:	dbf2      	blt.n	800f008 <__ieee754_pow+0x218>
 800f022:	4b0a      	ldr	r3, [pc, #40]	; (800f04c <__ieee754_pow+0x25c>)
 800f024:	429c      	cmp	r4, r3
 800f026:	dd19      	ble.n	800f05c <__ieee754_pow+0x26c>
 800f028:	f1b9 0f00 	cmp.w	r9, #0
 800f02c:	dcef      	bgt.n	800f00e <__ieee754_pow+0x21e>
 800f02e:	2000      	movs	r0, #0
 800f030:	b009      	add	sp, #36	; 0x24
 800f032:	ecbd 8b06 	vpop	{d8-d10}
 800f036:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f03a:	f000 bca9 	b.w	800f990 <__math_uflow>
 800f03e:	bf00      	nop
 800f040:	fff00000 	.word	0xfff00000
 800f044:	7ff00000 	.word	0x7ff00000
 800f048:	433fffff 	.word	0x433fffff
 800f04c:	3ff00000 	.word	0x3ff00000
 800f050:	3fefffff 	.word	0x3fefffff
 800f054:	3fe00000 	.word	0x3fe00000
 800f058:	41e00000 	.word	0x41e00000
 800f05c:	4b60      	ldr	r3, [pc, #384]	; (800f1e0 <__ieee754_pow+0x3f0>)
 800f05e:	2200      	movs	r2, #0
 800f060:	f7f1 f93a 	bl	80002d8 <__aeabi_dsub>
 800f064:	a354      	add	r3, pc, #336	; (adr r3, 800f1b8 <__ieee754_pow+0x3c8>)
 800f066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f06a:	4604      	mov	r4, r0
 800f06c:	460d      	mov	r5, r1
 800f06e:	f7f1 faeb 	bl	8000648 <__aeabi_dmul>
 800f072:	a353      	add	r3, pc, #332	; (adr r3, 800f1c0 <__ieee754_pow+0x3d0>)
 800f074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f078:	4606      	mov	r6, r0
 800f07a:	460f      	mov	r7, r1
 800f07c:	4620      	mov	r0, r4
 800f07e:	4629      	mov	r1, r5
 800f080:	f7f1 fae2 	bl	8000648 <__aeabi_dmul>
 800f084:	4b57      	ldr	r3, [pc, #348]	; (800f1e4 <__ieee754_pow+0x3f4>)
 800f086:	4682      	mov	sl, r0
 800f088:	468b      	mov	fp, r1
 800f08a:	2200      	movs	r2, #0
 800f08c:	4620      	mov	r0, r4
 800f08e:	4629      	mov	r1, r5
 800f090:	f7f1 fada 	bl	8000648 <__aeabi_dmul>
 800f094:	4602      	mov	r2, r0
 800f096:	460b      	mov	r3, r1
 800f098:	a14b      	add	r1, pc, #300	; (adr r1, 800f1c8 <__ieee754_pow+0x3d8>)
 800f09a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f09e:	f7f1 f91b 	bl	80002d8 <__aeabi_dsub>
 800f0a2:	4622      	mov	r2, r4
 800f0a4:	462b      	mov	r3, r5
 800f0a6:	f7f1 facf 	bl	8000648 <__aeabi_dmul>
 800f0aa:	4602      	mov	r2, r0
 800f0ac:	460b      	mov	r3, r1
 800f0ae:	2000      	movs	r0, #0
 800f0b0:	494d      	ldr	r1, [pc, #308]	; (800f1e8 <__ieee754_pow+0x3f8>)
 800f0b2:	f7f1 f911 	bl	80002d8 <__aeabi_dsub>
 800f0b6:	4622      	mov	r2, r4
 800f0b8:	4680      	mov	r8, r0
 800f0ba:	4689      	mov	r9, r1
 800f0bc:	462b      	mov	r3, r5
 800f0be:	4620      	mov	r0, r4
 800f0c0:	4629      	mov	r1, r5
 800f0c2:	f7f1 fac1 	bl	8000648 <__aeabi_dmul>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	4640      	mov	r0, r8
 800f0cc:	4649      	mov	r1, r9
 800f0ce:	f7f1 fabb 	bl	8000648 <__aeabi_dmul>
 800f0d2:	a33f      	add	r3, pc, #252	; (adr r3, 800f1d0 <__ieee754_pow+0x3e0>)
 800f0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d8:	f7f1 fab6 	bl	8000648 <__aeabi_dmul>
 800f0dc:	4602      	mov	r2, r0
 800f0de:	460b      	mov	r3, r1
 800f0e0:	4650      	mov	r0, sl
 800f0e2:	4659      	mov	r1, fp
 800f0e4:	f7f1 f8f8 	bl	80002d8 <__aeabi_dsub>
 800f0e8:	4602      	mov	r2, r0
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	4680      	mov	r8, r0
 800f0ee:	4689      	mov	r9, r1
 800f0f0:	4630      	mov	r0, r6
 800f0f2:	4639      	mov	r1, r7
 800f0f4:	f7f1 f8f2 	bl	80002dc <__adddf3>
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	4632      	mov	r2, r6
 800f0fc:	463b      	mov	r3, r7
 800f0fe:	4604      	mov	r4, r0
 800f100:	460d      	mov	r5, r1
 800f102:	f7f1 f8e9 	bl	80002d8 <__aeabi_dsub>
 800f106:	4602      	mov	r2, r0
 800f108:	460b      	mov	r3, r1
 800f10a:	4640      	mov	r0, r8
 800f10c:	4649      	mov	r1, r9
 800f10e:	f7f1 f8e3 	bl	80002d8 <__aeabi_dsub>
 800f112:	9b04      	ldr	r3, [sp, #16]
 800f114:	9a06      	ldr	r2, [sp, #24]
 800f116:	3b01      	subs	r3, #1
 800f118:	4313      	orrs	r3, r2
 800f11a:	4682      	mov	sl, r0
 800f11c:	468b      	mov	fp, r1
 800f11e:	f040 81e7 	bne.w	800f4f0 <__ieee754_pow+0x700>
 800f122:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800f1d8 <__ieee754_pow+0x3e8>
 800f126:	eeb0 8a47 	vmov.f32	s16, s14
 800f12a:	eef0 8a67 	vmov.f32	s17, s15
 800f12e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f132:	2600      	movs	r6, #0
 800f134:	4632      	mov	r2, r6
 800f136:	463b      	mov	r3, r7
 800f138:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f13c:	f7f1 f8cc 	bl	80002d8 <__aeabi_dsub>
 800f140:	4622      	mov	r2, r4
 800f142:	462b      	mov	r3, r5
 800f144:	f7f1 fa80 	bl	8000648 <__aeabi_dmul>
 800f148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f14c:	4680      	mov	r8, r0
 800f14e:	4689      	mov	r9, r1
 800f150:	4650      	mov	r0, sl
 800f152:	4659      	mov	r1, fp
 800f154:	f7f1 fa78 	bl	8000648 <__aeabi_dmul>
 800f158:	4602      	mov	r2, r0
 800f15a:	460b      	mov	r3, r1
 800f15c:	4640      	mov	r0, r8
 800f15e:	4649      	mov	r1, r9
 800f160:	f7f1 f8bc 	bl	80002dc <__adddf3>
 800f164:	4632      	mov	r2, r6
 800f166:	463b      	mov	r3, r7
 800f168:	4680      	mov	r8, r0
 800f16a:	4689      	mov	r9, r1
 800f16c:	4620      	mov	r0, r4
 800f16e:	4629      	mov	r1, r5
 800f170:	f7f1 fa6a 	bl	8000648 <__aeabi_dmul>
 800f174:	460b      	mov	r3, r1
 800f176:	4604      	mov	r4, r0
 800f178:	460d      	mov	r5, r1
 800f17a:	4602      	mov	r2, r0
 800f17c:	4649      	mov	r1, r9
 800f17e:	4640      	mov	r0, r8
 800f180:	f7f1 f8ac 	bl	80002dc <__adddf3>
 800f184:	4b19      	ldr	r3, [pc, #100]	; (800f1ec <__ieee754_pow+0x3fc>)
 800f186:	4299      	cmp	r1, r3
 800f188:	ec45 4b19 	vmov	d9, r4, r5
 800f18c:	4606      	mov	r6, r0
 800f18e:	460f      	mov	r7, r1
 800f190:	468b      	mov	fp, r1
 800f192:	f340 82f0 	ble.w	800f776 <__ieee754_pow+0x986>
 800f196:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800f19a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800f19e:	4303      	orrs	r3, r0
 800f1a0:	f000 81e4 	beq.w	800f56c <__ieee754_pow+0x77c>
 800f1a4:	ec51 0b18 	vmov	r0, r1, d8
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	f7f1 fcbe 	bl	8000b2c <__aeabi_dcmplt>
 800f1b0:	3800      	subs	r0, #0
 800f1b2:	bf18      	it	ne
 800f1b4:	2001      	movne	r0, #1
 800f1b6:	e72b      	b.n	800f010 <__ieee754_pow+0x220>
 800f1b8:	60000000 	.word	0x60000000
 800f1bc:	3ff71547 	.word	0x3ff71547
 800f1c0:	f85ddf44 	.word	0xf85ddf44
 800f1c4:	3e54ae0b 	.word	0x3e54ae0b
 800f1c8:	55555555 	.word	0x55555555
 800f1cc:	3fd55555 	.word	0x3fd55555
 800f1d0:	652b82fe 	.word	0x652b82fe
 800f1d4:	3ff71547 	.word	0x3ff71547
 800f1d8:	00000000 	.word	0x00000000
 800f1dc:	bff00000 	.word	0xbff00000
 800f1e0:	3ff00000 	.word	0x3ff00000
 800f1e4:	3fd00000 	.word	0x3fd00000
 800f1e8:	3fe00000 	.word	0x3fe00000
 800f1ec:	408fffff 	.word	0x408fffff
 800f1f0:	4bd5      	ldr	r3, [pc, #852]	; (800f548 <__ieee754_pow+0x758>)
 800f1f2:	402b      	ands	r3, r5
 800f1f4:	2200      	movs	r2, #0
 800f1f6:	b92b      	cbnz	r3, 800f204 <__ieee754_pow+0x414>
 800f1f8:	4bd4      	ldr	r3, [pc, #848]	; (800f54c <__ieee754_pow+0x75c>)
 800f1fa:	f7f1 fa25 	bl	8000648 <__aeabi_dmul>
 800f1fe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f202:	460c      	mov	r4, r1
 800f204:	1523      	asrs	r3, r4, #20
 800f206:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f20a:	4413      	add	r3, r2
 800f20c:	9305      	str	r3, [sp, #20]
 800f20e:	4bd0      	ldr	r3, [pc, #832]	; (800f550 <__ieee754_pow+0x760>)
 800f210:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f214:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f218:	429c      	cmp	r4, r3
 800f21a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f21e:	dd08      	ble.n	800f232 <__ieee754_pow+0x442>
 800f220:	4bcc      	ldr	r3, [pc, #816]	; (800f554 <__ieee754_pow+0x764>)
 800f222:	429c      	cmp	r4, r3
 800f224:	f340 8162 	ble.w	800f4ec <__ieee754_pow+0x6fc>
 800f228:	9b05      	ldr	r3, [sp, #20]
 800f22a:	3301      	adds	r3, #1
 800f22c:	9305      	str	r3, [sp, #20]
 800f22e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f232:	2400      	movs	r4, #0
 800f234:	00e3      	lsls	r3, r4, #3
 800f236:	9307      	str	r3, [sp, #28]
 800f238:	4bc7      	ldr	r3, [pc, #796]	; (800f558 <__ieee754_pow+0x768>)
 800f23a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f23e:	ed93 7b00 	vldr	d7, [r3]
 800f242:	4629      	mov	r1, r5
 800f244:	ec53 2b17 	vmov	r2, r3, d7
 800f248:	eeb0 9a47 	vmov.f32	s18, s14
 800f24c:	eef0 9a67 	vmov.f32	s19, s15
 800f250:	4682      	mov	sl, r0
 800f252:	f7f1 f841 	bl	80002d8 <__aeabi_dsub>
 800f256:	4652      	mov	r2, sl
 800f258:	4606      	mov	r6, r0
 800f25a:	460f      	mov	r7, r1
 800f25c:	462b      	mov	r3, r5
 800f25e:	ec51 0b19 	vmov	r0, r1, d9
 800f262:	f7f1 f83b 	bl	80002dc <__adddf3>
 800f266:	4602      	mov	r2, r0
 800f268:	460b      	mov	r3, r1
 800f26a:	2000      	movs	r0, #0
 800f26c:	49bb      	ldr	r1, [pc, #748]	; (800f55c <__ieee754_pow+0x76c>)
 800f26e:	f7f1 fb15 	bl	800089c <__aeabi_ddiv>
 800f272:	ec41 0b1a 	vmov	d10, r0, r1
 800f276:	4602      	mov	r2, r0
 800f278:	460b      	mov	r3, r1
 800f27a:	4630      	mov	r0, r6
 800f27c:	4639      	mov	r1, r7
 800f27e:	f7f1 f9e3 	bl	8000648 <__aeabi_dmul>
 800f282:	2300      	movs	r3, #0
 800f284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f288:	9302      	str	r3, [sp, #8]
 800f28a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f28e:	46ab      	mov	fp, r5
 800f290:	106d      	asrs	r5, r5, #1
 800f292:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f296:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f29a:	ec41 0b18 	vmov	d8, r0, r1
 800f29e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f2a2:	2200      	movs	r2, #0
 800f2a4:	4640      	mov	r0, r8
 800f2a6:	4649      	mov	r1, r9
 800f2a8:	4614      	mov	r4, r2
 800f2aa:	461d      	mov	r5, r3
 800f2ac:	f7f1 f9cc 	bl	8000648 <__aeabi_dmul>
 800f2b0:	4602      	mov	r2, r0
 800f2b2:	460b      	mov	r3, r1
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	4639      	mov	r1, r7
 800f2b8:	f7f1 f80e 	bl	80002d8 <__aeabi_dsub>
 800f2bc:	ec53 2b19 	vmov	r2, r3, d9
 800f2c0:	4606      	mov	r6, r0
 800f2c2:	460f      	mov	r7, r1
 800f2c4:	4620      	mov	r0, r4
 800f2c6:	4629      	mov	r1, r5
 800f2c8:	f7f1 f806 	bl	80002d8 <__aeabi_dsub>
 800f2cc:	4602      	mov	r2, r0
 800f2ce:	460b      	mov	r3, r1
 800f2d0:	4650      	mov	r0, sl
 800f2d2:	4659      	mov	r1, fp
 800f2d4:	f7f1 f800 	bl	80002d8 <__aeabi_dsub>
 800f2d8:	4642      	mov	r2, r8
 800f2da:	464b      	mov	r3, r9
 800f2dc:	f7f1 f9b4 	bl	8000648 <__aeabi_dmul>
 800f2e0:	4602      	mov	r2, r0
 800f2e2:	460b      	mov	r3, r1
 800f2e4:	4630      	mov	r0, r6
 800f2e6:	4639      	mov	r1, r7
 800f2e8:	f7f0 fff6 	bl	80002d8 <__aeabi_dsub>
 800f2ec:	ec53 2b1a 	vmov	r2, r3, d10
 800f2f0:	f7f1 f9aa 	bl	8000648 <__aeabi_dmul>
 800f2f4:	ec53 2b18 	vmov	r2, r3, d8
 800f2f8:	ec41 0b19 	vmov	d9, r0, r1
 800f2fc:	ec51 0b18 	vmov	r0, r1, d8
 800f300:	f7f1 f9a2 	bl	8000648 <__aeabi_dmul>
 800f304:	a37c      	add	r3, pc, #496	; (adr r3, 800f4f8 <__ieee754_pow+0x708>)
 800f306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30a:	4604      	mov	r4, r0
 800f30c:	460d      	mov	r5, r1
 800f30e:	f7f1 f99b 	bl	8000648 <__aeabi_dmul>
 800f312:	a37b      	add	r3, pc, #492	; (adr r3, 800f500 <__ieee754_pow+0x710>)
 800f314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f318:	f7f0 ffe0 	bl	80002dc <__adddf3>
 800f31c:	4622      	mov	r2, r4
 800f31e:	462b      	mov	r3, r5
 800f320:	f7f1 f992 	bl	8000648 <__aeabi_dmul>
 800f324:	a378      	add	r3, pc, #480	; (adr r3, 800f508 <__ieee754_pow+0x718>)
 800f326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32a:	f7f0 ffd7 	bl	80002dc <__adddf3>
 800f32e:	4622      	mov	r2, r4
 800f330:	462b      	mov	r3, r5
 800f332:	f7f1 f989 	bl	8000648 <__aeabi_dmul>
 800f336:	a376      	add	r3, pc, #472	; (adr r3, 800f510 <__ieee754_pow+0x720>)
 800f338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33c:	f7f0 ffce 	bl	80002dc <__adddf3>
 800f340:	4622      	mov	r2, r4
 800f342:	462b      	mov	r3, r5
 800f344:	f7f1 f980 	bl	8000648 <__aeabi_dmul>
 800f348:	a373      	add	r3, pc, #460	; (adr r3, 800f518 <__ieee754_pow+0x728>)
 800f34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34e:	f7f0 ffc5 	bl	80002dc <__adddf3>
 800f352:	4622      	mov	r2, r4
 800f354:	462b      	mov	r3, r5
 800f356:	f7f1 f977 	bl	8000648 <__aeabi_dmul>
 800f35a:	a371      	add	r3, pc, #452	; (adr r3, 800f520 <__ieee754_pow+0x730>)
 800f35c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f360:	f7f0 ffbc 	bl	80002dc <__adddf3>
 800f364:	4622      	mov	r2, r4
 800f366:	4606      	mov	r6, r0
 800f368:	460f      	mov	r7, r1
 800f36a:	462b      	mov	r3, r5
 800f36c:	4620      	mov	r0, r4
 800f36e:	4629      	mov	r1, r5
 800f370:	f7f1 f96a 	bl	8000648 <__aeabi_dmul>
 800f374:	4602      	mov	r2, r0
 800f376:	460b      	mov	r3, r1
 800f378:	4630      	mov	r0, r6
 800f37a:	4639      	mov	r1, r7
 800f37c:	f7f1 f964 	bl	8000648 <__aeabi_dmul>
 800f380:	4642      	mov	r2, r8
 800f382:	4604      	mov	r4, r0
 800f384:	460d      	mov	r5, r1
 800f386:	464b      	mov	r3, r9
 800f388:	ec51 0b18 	vmov	r0, r1, d8
 800f38c:	f7f0 ffa6 	bl	80002dc <__adddf3>
 800f390:	ec53 2b19 	vmov	r2, r3, d9
 800f394:	f7f1 f958 	bl	8000648 <__aeabi_dmul>
 800f398:	4622      	mov	r2, r4
 800f39a:	462b      	mov	r3, r5
 800f39c:	f7f0 ff9e 	bl	80002dc <__adddf3>
 800f3a0:	4642      	mov	r2, r8
 800f3a2:	4682      	mov	sl, r0
 800f3a4:	468b      	mov	fp, r1
 800f3a6:	464b      	mov	r3, r9
 800f3a8:	4640      	mov	r0, r8
 800f3aa:	4649      	mov	r1, r9
 800f3ac:	f7f1 f94c 	bl	8000648 <__aeabi_dmul>
 800f3b0:	4b6b      	ldr	r3, [pc, #428]	; (800f560 <__ieee754_pow+0x770>)
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	4606      	mov	r6, r0
 800f3b6:	460f      	mov	r7, r1
 800f3b8:	f7f0 ff90 	bl	80002dc <__adddf3>
 800f3bc:	4652      	mov	r2, sl
 800f3be:	465b      	mov	r3, fp
 800f3c0:	f7f0 ff8c 	bl	80002dc <__adddf3>
 800f3c4:	2000      	movs	r0, #0
 800f3c6:	4604      	mov	r4, r0
 800f3c8:	460d      	mov	r5, r1
 800f3ca:	4602      	mov	r2, r0
 800f3cc:	460b      	mov	r3, r1
 800f3ce:	4640      	mov	r0, r8
 800f3d0:	4649      	mov	r1, r9
 800f3d2:	f7f1 f939 	bl	8000648 <__aeabi_dmul>
 800f3d6:	4b62      	ldr	r3, [pc, #392]	; (800f560 <__ieee754_pow+0x770>)
 800f3d8:	4680      	mov	r8, r0
 800f3da:	4689      	mov	r9, r1
 800f3dc:	2200      	movs	r2, #0
 800f3de:	4620      	mov	r0, r4
 800f3e0:	4629      	mov	r1, r5
 800f3e2:	f7f0 ff79 	bl	80002d8 <__aeabi_dsub>
 800f3e6:	4632      	mov	r2, r6
 800f3e8:	463b      	mov	r3, r7
 800f3ea:	f7f0 ff75 	bl	80002d8 <__aeabi_dsub>
 800f3ee:	4602      	mov	r2, r0
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	4650      	mov	r0, sl
 800f3f4:	4659      	mov	r1, fp
 800f3f6:	f7f0 ff6f 	bl	80002d8 <__aeabi_dsub>
 800f3fa:	ec53 2b18 	vmov	r2, r3, d8
 800f3fe:	f7f1 f923 	bl	8000648 <__aeabi_dmul>
 800f402:	4622      	mov	r2, r4
 800f404:	4606      	mov	r6, r0
 800f406:	460f      	mov	r7, r1
 800f408:	462b      	mov	r3, r5
 800f40a:	ec51 0b19 	vmov	r0, r1, d9
 800f40e:	f7f1 f91b 	bl	8000648 <__aeabi_dmul>
 800f412:	4602      	mov	r2, r0
 800f414:	460b      	mov	r3, r1
 800f416:	4630      	mov	r0, r6
 800f418:	4639      	mov	r1, r7
 800f41a:	f7f0 ff5f 	bl	80002dc <__adddf3>
 800f41e:	4606      	mov	r6, r0
 800f420:	460f      	mov	r7, r1
 800f422:	4602      	mov	r2, r0
 800f424:	460b      	mov	r3, r1
 800f426:	4640      	mov	r0, r8
 800f428:	4649      	mov	r1, r9
 800f42a:	f7f0 ff57 	bl	80002dc <__adddf3>
 800f42e:	a33e      	add	r3, pc, #248	; (adr r3, 800f528 <__ieee754_pow+0x738>)
 800f430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f434:	2000      	movs	r0, #0
 800f436:	4604      	mov	r4, r0
 800f438:	460d      	mov	r5, r1
 800f43a:	f7f1 f905 	bl	8000648 <__aeabi_dmul>
 800f43e:	4642      	mov	r2, r8
 800f440:	ec41 0b18 	vmov	d8, r0, r1
 800f444:	464b      	mov	r3, r9
 800f446:	4620      	mov	r0, r4
 800f448:	4629      	mov	r1, r5
 800f44a:	f7f0 ff45 	bl	80002d8 <__aeabi_dsub>
 800f44e:	4602      	mov	r2, r0
 800f450:	460b      	mov	r3, r1
 800f452:	4630      	mov	r0, r6
 800f454:	4639      	mov	r1, r7
 800f456:	f7f0 ff3f 	bl	80002d8 <__aeabi_dsub>
 800f45a:	a335      	add	r3, pc, #212	; (adr r3, 800f530 <__ieee754_pow+0x740>)
 800f45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f460:	f7f1 f8f2 	bl	8000648 <__aeabi_dmul>
 800f464:	a334      	add	r3, pc, #208	; (adr r3, 800f538 <__ieee754_pow+0x748>)
 800f466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f46a:	4606      	mov	r6, r0
 800f46c:	460f      	mov	r7, r1
 800f46e:	4620      	mov	r0, r4
 800f470:	4629      	mov	r1, r5
 800f472:	f7f1 f8e9 	bl	8000648 <__aeabi_dmul>
 800f476:	4602      	mov	r2, r0
 800f478:	460b      	mov	r3, r1
 800f47a:	4630      	mov	r0, r6
 800f47c:	4639      	mov	r1, r7
 800f47e:	f7f0 ff2d 	bl	80002dc <__adddf3>
 800f482:	9a07      	ldr	r2, [sp, #28]
 800f484:	4b37      	ldr	r3, [pc, #220]	; (800f564 <__ieee754_pow+0x774>)
 800f486:	4413      	add	r3, r2
 800f488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f48c:	f7f0 ff26 	bl	80002dc <__adddf3>
 800f490:	4682      	mov	sl, r0
 800f492:	9805      	ldr	r0, [sp, #20]
 800f494:	468b      	mov	fp, r1
 800f496:	f7f1 f86d 	bl	8000574 <__aeabi_i2d>
 800f49a:	9a07      	ldr	r2, [sp, #28]
 800f49c:	4b32      	ldr	r3, [pc, #200]	; (800f568 <__ieee754_pow+0x778>)
 800f49e:	4413      	add	r3, r2
 800f4a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f4a4:	4606      	mov	r6, r0
 800f4a6:	460f      	mov	r7, r1
 800f4a8:	4652      	mov	r2, sl
 800f4aa:	465b      	mov	r3, fp
 800f4ac:	ec51 0b18 	vmov	r0, r1, d8
 800f4b0:	f7f0 ff14 	bl	80002dc <__adddf3>
 800f4b4:	4642      	mov	r2, r8
 800f4b6:	464b      	mov	r3, r9
 800f4b8:	f7f0 ff10 	bl	80002dc <__adddf3>
 800f4bc:	4632      	mov	r2, r6
 800f4be:	463b      	mov	r3, r7
 800f4c0:	f7f0 ff0c 	bl	80002dc <__adddf3>
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	4632      	mov	r2, r6
 800f4c8:	463b      	mov	r3, r7
 800f4ca:	4604      	mov	r4, r0
 800f4cc:	460d      	mov	r5, r1
 800f4ce:	f7f0 ff03 	bl	80002d8 <__aeabi_dsub>
 800f4d2:	4642      	mov	r2, r8
 800f4d4:	464b      	mov	r3, r9
 800f4d6:	f7f0 feff 	bl	80002d8 <__aeabi_dsub>
 800f4da:	ec53 2b18 	vmov	r2, r3, d8
 800f4de:	f7f0 fefb 	bl	80002d8 <__aeabi_dsub>
 800f4e2:	4602      	mov	r2, r0
 800f4e4:	460b      	mov	r3, r1
 800f4e6:	4650      	mov	r0, sl
 800f4e8:	4659      	mov	r1, fp
 800f4ea:	e610      	b.n	800f10e <__ieee754_pow+0x31e>
 800f4ec:	2401      	movs	r4, #1
 800f4ee:	e6a1      	b.n	800f234 <__ieee754_pow+0x444>
 800f4f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f540 <__ieee754_pow+0x750>
 800f4f4:	e617      	b.n	800f126 <__ieee754_pow+0x336>
 800f4f6:	bf00      	nop
 800f4f8:	4a454eef 	.word	0x4a454eef
 800f4fc:	3fca7e28 	.word	0x3fca7e28
 800f500:	93c9db65 	.word	0x93c9db65
 800f504:	3fcd864a 	.word	0x3fcd864a
 800f508:	a91d4101 	.word	0xa91d4101
 800f50c:	3fd17460 	.word	0x3fd17460
 800f510:	518f264d 	.word	0x518f264d
 800f514:	3fd55555 	.word	0x3fd55555
 800f518:	db6fabff 	.word	0xdb6fabff
 800f51c:	3fdb6db6 	.word	0x3fdb6db6
 800f520:	33333303 	.word	0x33333303
 800f524:	3fe33333 	.word	0x3fe33333
 800f528:	e0000000 	.word	0xe0000000
 800f52c:	3feec709 	.word	0x3feec709
 800f530:	dc3a03fd 	.word	0xdc3a03fd
 800f534:	3feec709 	.word	0x3feec709
 800f538:	145b01f5 	.word	0x145b01f5
 800f53c:	be3e2fe0 	.word	0xbe3e2fe0
 800f540:	00000000 	.word	0x00000000
 800f544:	3ff00000 	.word	0x3ff00000
 800f548:	7ff00000 	.word	0x7ff00000
 800f54c:	43400000 	.word	0x43400000
 800f550:	0003988e 	.word	0x0003988e
 800f554:	000bb679 	.word	0x000bb679
 800f558:	08013170 	.word	0x08013170
 800f55c:	3ff00000 	.word	0x3ff00000
 800f560:	40080000 	.word	0x40080000
 800f564:	08013190 	.word	0x08013190
 800f568:	08013180 	.word	0x08013180
 800f56c:	a3b3      	add	r3, pc, #716	; (adr r3, 800f83c <__ieee754_pow+0xa4c>)
 800f56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f572:	4640      	mov	r0, r8
 800f574:	4649      	mov	r1, r9
 800f576:	f7f0 feb1 	bl	80002dc <__adddf3>
 800f57a:	4622      	mov	r2, r4
 800f57c:	ec41 0b1a 	vmov	d10, r0, r1
 800f580:	462b      	mov	r3, r5
 800f582:	4630      	mov	r0, r6
 800f584:	4639      	mov	r1, r7
 800f586:	f7f0 fea7 	bl	80002d8 <__aeabi_dsub>
 800f58a:	4602      	mov	r2, r0
 800f58c:	460b      	mov	r3, r1
 800f58e:	ec51 0b1a 	vmov	r0, r1, d10
 800f592:	f7f1 fae9 	bl	8000b68 <__aeabi_dcmpgt>
 800f596:	2800      	cmp	r0, #0
 800f598:	f47f ae04 	bne.w	800f1a4 <__ieee754_pow+0x3b4>
 800f59c:	4aa2      	ldr	r2, [pc, #648]	; (800f828 <__ieee754_pow+0xa38>)
 800f59e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	f340 8107 	ble.w	800f7b6 <__ieee754_pow+0x9c6>
 800f5a8:	151b      	asrs	r3, r3, #20
 800f5aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f5ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f5b2:	fa4a fa03 	asr.w	sl, sl, r3
 800f5b6:	44da      	add	sl, fp
 800f5b8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f5bc:	489b      	ldr	r0, [pc, #620]	; (800f82c <__ieee754_pow+0xa3c>)
 800f5be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f5c2:	4108      	asrs	r0, r1
 800f5c4:	ea00 030a 	and.w	r3, r0, sl
 800f5c8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f5cc:	f1c1 0114 	rsb	r1, r1, #20
 800f5d0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f5d4:	fa4a fa01 	asr.w	sl, sl, r1
 800f5d8:	f1bb 0f00 	cmp.w	fp, #0
 800f5dc:	f04f 0200 	mov.w	r2, #0
 800f5e0:	4620      	mov	r0, r4
 800f5e2:	4629      	mov	r1, r5
 800f5e4:	bfb8      	it	lt
 800f5e6:	f1ca 0a00 	rsblt	sl, sl, #0
 800f5ea:	f7f0 fe75 	bl	80002d8 <__aeabi_dsub>
 800f5ee:	ec41 0b19 	vmov	d9, r0, r1
 800f5f2:	4642      	mov	r2, r8
 800f5f4:	464b      	mov	r3, r9
 800f5f6:	ec51 0b19 	vmov	r0, r1, d9
 800f5fa:	f7f0 fe6f 	bl	80002dc <__adddf3>
 800f5fe:	a37a      	add	r3, pc, #488	; (adr r3, 800f7e8 <__ieee754_pow+0x9f8>)
 800f600:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f604:	2000      	movs	r0, #0
 800f606:	4604      	mov	r4, r0
 800f608:	460d      	mov	r5, r1
 800f60a:	f7f1 f81d 	bl	8000648 <__aeabi_dmul>
 800f60e:	ec53 2b19 	vmov	r2, r3, d9
 800f612:	4606      	mov	r6, r0
 800f614:	460f      	mov	r7, r1
 800f616:	4620      	mov	r0, r4
 800f618:	4629      	mov	r1, r5
 800f61a:	f7f0 fe5d 	bl	80002d8 <__aeabi_dsub>
 800f61e:	4602      	mov	r2, r0
 800f620:	460b      	mov	r3, r1
 800f622:	4640      	mov	r0, r8
 800f624:	4649      	mov	r1, r9
 800f626:	f7f0 fe57 	bl	80002d8 <__aeabi_dsub>
 800f62a:	a371      	add	r3, pc, #452	; (adr r3, 800f7f0 <__ieee754_pow+0xa00>)
 800f62c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f630:	f7f1 f80a 	bl	8000648 <__aeabi_dmul>
 800f634:	a370      	add	r3, pc, #448	; (adr r3, 800f7f8 <__ieee754_pow+0xa08>)
 800f636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f63a:	4680      	mov	r8, r0
 800f63c:	4689      	mov	r9, r1
 800f63e:	4620      	mov	r0, r4
 800f640:	4629      	mov	r1, r5
 800f642:	f7f1 f801 	bl	8000648 <__aeabi_dmul>
 800f646:	4602      	mov	r2, r0
 800f648:	460b      	mov	r3, r1
 800f64a:	4640      	mov	r0, r8
 800f64c:	4649      	mov	r1, r9
 800f64e:	f7f0 fe45 	bl	80002dc <__adddf3>
 800f652:	4604      	mov	r4, r0
 800f654:	460d      	mov	r5, r1
 800f656:	4602      	mov	r2, r0
 800f658:	460b      	mov	r3, r1
 800f65a:	4630      	mov	r0, r6
 800f65c:	4639      	mov	r1, r7
 800f65e:	f7f0 fe3d 	bl	80002dc <__adddf3>
 800f662:	4632      	mov	r2, r6
 800f664:	463b      	mov	r3, r7
 800f666:	4680      	mov	r8, r0
 800f668:	4689      	mov	r9, r1
 800f66a:	f7f0 fe35 	bl	80002d8 <__aeabi_dsub>
 800f66e:	4602      	mov	r2, r0
 800f670:	460b      	mov	r3, r1
 800f672:	4620      	mov	r0, r4
 800f674:	4629      	mov	r1, r5
 800f676:	f7f0 fe2f 	bl	80002d8 <__aeabi_dsub>
 800f67a:	4642      	mov	r2, r8
 800f67c:	4606      	mov	r6, r0
 800f67e:	460f      	mov	r7, r1
 800f680:	464b      	mov	r3, r9
 800f682:	4640      	mov	r0, r8
 800f684:	4649      	mov	r1, r9
 800f686:	f7f0 ffdf 	bl	8000648 <__aeabi_dmul>
 800f68a:	a35d      	add	r3, pc, #372	; (adr r3, 800f800 <__ieee754_pow+0xa10>)
 800f68c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f690:	4604      	mov	r4, r0
 800f692:	460d      	mov	r5, r1
 800f694:	f7f0 ffd8 	bl	8000648 <__aeabi_dmul>
 800f698:	a35b      	add	r3, pc, #364	; (adr r3, 800f808 <__ieee754_pow+0xa18>)
 800f69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69e:	f7f0 fe1b 	bl	80002d8 <__aeabi_dsub>
 800f6a2:	4622      	mov	r2, r4
 800f6a4:	462b      	mov	r3, r5
 800f6a6:	f7f0 ffcf 	bl	8000648 <__aeabi_dmul>
 800f6aa:	a359      	add	r3, pc, #356	; (adr r3, 800f810 <__ieee754_pow+0xa20>)
 800f6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b0:	f7f0 fe14 	bl	80002dc <__adddf3>
 800f6b4:	4622      	mov	r2, r4
 800f6b6:	462b      	mov	r3, r5
 800f6b8:	f7f0 ffc6 	bl	8000648 <__aeabi_dmul>
 800f6bc:	a356      	add	r3, pc, #344	; (adr r3, 800f818 <__ieee754_pow+0xa28>)
 800f6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c2:	f7f0 fe09 	bl	80002d8 <__aeabi_dsub>
 800f6c6:	4622      	mov	r2, r4
 800f6c8:	462b      	mov	r3, r5
 800f6ca:	f7f0 ffbd 	bl	8000648 <__aeabi_dmul>
 800f6ce:	a354      	add	r3, pc, #336	; (adr r3, 800f820 <__ieee754_pow+0xa30>)
 800f6d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d4:	f7f0 fe02 	bl	80002dc <__adddf3>
 800f6d8:	4622      	mov	r2, r4
 800f6da:	462b      	mov	r3, r5
 800f6dc:	f7f0 ffb4 	bl	8000648 <__aeabi_dmul>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	4640      	mov	r0, r8
 800f6e6:	4649      	mov	r1, r9
 800f6e8:	f7f0 fdf6 	bl	80002d8 <__aeabi_dsub>
 800f6ec:	4604      	mov	r4, r0
 800f6ee:	460d      	mov	r5, r1
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	460b      	mov	r3, r1
 800f6f4:	4640      	mov	r0, r8
 800f6f6:	4649      	mov	r1, r9
 800f6f8:	f7f0 ffa6 	bl	8000648 <__aeabi_dmul>
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	ec41 0b19 	vmov	d9, r0, r1
 800f702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f706:	4620      	mov	r0, r4
 800f708:	4629      	mov	r1, r5
 800f70a:	f7f0 fde5 	bl	80002d8 <__aeabi_dsub>
 800f70e:	4602      	mov	r2, r0
 800f710:	460b      	mov	r3, r1
 800f712:	ec51 0b19 	vmov	r0, r1, d9
 800f716:	f7f1 f8c1 	bl	800089c <__aeabi_ddiv>
 800f71a:	4632      	mov	r2, r6
 800f71c:	4604      	mov	r4, r0
 800f71e:	460d      	mov	r5, r1
 800f720:	463b      	mov	r3, r7
 800f722:	4640      	mov	r0, r8
 800f724:	4649      	mov	r1, r9
 800f726:	f7f0 ff8f 	bl	8000648 <__aeabi_dmul>
 800f72a:	4632      	mov	r2, r6
 800f72c:	463b      	mov	r3, r7
 800f72e:	f7f0 fdd5 	bl	80002dc <__adddf3>
 800f732:	4602      	mov	r2, r0
 800f734:	460b      	mov	r3, r1
 800f736:	4620      	mov	r0, r4
 800f738:	4629      	mov	r1, r5
 800f73a:	f7f0 fdcd 	bl	80002d8 <__aeabi_dsub>
 800f73e:	4642      	mov	r2, r8
 800f740:	464b      	mov	r3, r9
 800f742:	f7f0 fdc9 	bl	80002d8 <__aeabi_dsub>
 800f746:	460b      	mov	r3, r1
 800f748:	4602      	mov	r2, r0
 800f74a:	4939      	ldr	r1, [pc, #228]	; (800f830 <__ieee754_pow+0xa40>)
 800f74c:	2000      	movs	r0, #0
 800f74e:	f7f0 fdc3 	bl	80002d8 <__aeabi_dsub>
 800f752:	ec41 0b10 	vmov	d0, r0, r1
 800f756:	ee10 3a90 	vmov	r3, s1
 800f75a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f75e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f762:	da2b      	bge.n	800f7bc <__ieee754_pow+0x9cc>
 800f764:	4650      	mov	r0, sl
 800f766:	f000 f877 	bl	800f858 <scalbn>
 800f76a:	ec51 0b10 	vmov	r0, r1, d0
 800f76e:	ec53 2b18 	vmov	r2, r3, d8
 800f772:	f7ff bbee 	b.w	800ef52 <__ieee754_pow+0x162>
 800f776:	4b2f      	ldr	r3, [pc, #188]	; (800f834 <__ieee754_pow+0xa44>)
 800f778:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f77c:	429e      	cmp	r6, r3
 800f77e:	f77f af0d 	ble.w	800f59c <__ieee754_pow+0x7ac>
 800f782:	4b2d      	ldr	r3, [pc, #180]	; (800f838 <__ieee754_pow+0xa48>)
 800f784:	440b      	add	r3, r1
 800f786:	4303      	orrs	r3, r0
 800f788:	d009      	beq.n	800f79e <__ieee754_pow+0x9ae>
 800f78a:	ec51 0b18 	vmov	r0, r1, d8
 800f78e:	2200      	movs	r2, #0
 800f790:	2300      	movs	r3, #0
 800f792:	f7f1 f9cb 	bl	8000b2c <__aeabi_dcmplt>
 800f796:	3800      	subs	r0, #0
 800f798:	bf18      	it	ne
 800f79a:	2001      	movne	r0, #1
 800f79c:	e448      	b.n	800f030 <__ieee754_pow+0x240>
 800f79e:	4622      	mov	r2, r4
 800f7a0:	462b      	mov	r3, r5
 800f7a2:	f7f0 fd99 	bl	80002d8 <__aeabi_dsub>
 800f7a6:	4642      	mov	r2, r8
 800f7a8:	464b      	mov	r3, r9
 800f7aa:	f7f1 f9d3 	bl	8000b54 <__aeabi_dcmpge>
 800f7ae:	2800      	cmp	r0, #0
 800f7b0:	f43f aef4 	beq.w	800f59c <__ieee754_pow+0x7ac>
 800f7b4:	e7e9      	b.n	800f78a <__ieee754_pow+0x99a>
 800f7b6:	f04f 0a00 	mov.w	sl, #0
 800f7ba:	e71a      	b.n	800f5f2 <__ieee754_pow+0x802>
 800f7bc:	ec51 0b10 	vmov	r0, r1, d0
 800f7c0:	4619      	mov	r1, r3
 800f7c2:	e7d4      	b.n	800f76e <__ieee754_pow+0x97e>
 800f7c4:	491a      	ldr	r1, [pc, #104]	; (800f830 <__ieee754_pow+0xa40>)
 800f7c6:	2000      	movs	r0, #0
 800f7c8:	f7ff bb31 	b.w	800ee2e <__ieee754_pow+0x3e>
 800f7cc:	2000      	movs	r0, #0
 800f7ce:	2100      	movs	r1, #0
 800f7d0:	f7ff bb2d 	b.w	800ee2e <__ieee754_pow+0x3e>
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	4639      	mov	r1, r7
 800f7d8:	f7ff bb29 	b.w	800ee2e <__ieee754_pow+0x3e>
 800f7dc:	9204      	str	r2, [sp, #16]
 800f7de:	f7ff bb7b 	b.w	800eed8 <__ieee754_pow+0xe8>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	f7ff bb65 	b.w	800eeb2 <__ieee754_pow+0xc2>
 800f7e8:	00000000 	.word	0x00000000
 800f7ec:	3fe62e43 	.word	0x3fe62e43
 800f7f0:	fefa39ef 	.word	0xfefa39ef
 800f7f4:	3fe62e42 	.word	0x3fe62e42
 800f7f8:	0ca86c39 	.word	0x0ca86c39
 800f7fc:	be205c61 	.word	0xbe205c61
 800f800:	72bea4d0 	.word	0x72bea4d0
 800f804:	3e663769 	.word	0x3e663769
 800f808:	c5d26bf1 	.word	0xc5d26bf1
 800f80c:	3ebbbd41 	.word	0x3ebbbd41
 800f810:	af25de2c 	.word	0xaf25de2c
 800f814:	3f11566a 	.word	0x3f11566a
 800f818:	16bebd93 	.word	0x16bebd93
 800f81c:	3f66c16c 	.word	0x3f66c16c
 800f820:	5555553e 	.word	0x5555553e
 800f824:	3fc55555 	.word	0x3fc55555
 800f828:	3fe00000 	.word	0x3fe00000
 800f82c:	fff00000 	.word	0xfff00000
 800f830:	3ff00000 	.word	0x3ff00000
 800f834:	4090cbff 	.word	0x4090cbff
 800f838:	3f6f3400 	.word	0x3f6f3400
 800f83c:	652b82fe 	.word	0x652b82fe
 800f840:	3c971547 	.word	0x3c971547

0800f844 <fabs>:
 800f844:	ec51 0b10 	vmov	r0, r1, d0
 800f848:	ee10 2a10 	vmov	r2, s0
 800f84c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f850:	ec43 2b10 	vmov	d0, r2, r3
 800f854:	4770      	bx	lr
	...

0800f858 <scalbn>:
 800f858:	b570      	push	{r4, r5, r6, lr}
 800f85a:	ec55 4b10 	vmov	r4, r5, d0
 800f85e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f862:	4606      	mov	r6, r0
 800f864:	462b      	mov	r3, r5
 800f866:	b999      	cbnz	r1, 800f890 <scalbn+0x38>
 800f868:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f86c:	4323      	orrs	r3, r4
 800f86e:	d03f      	beq.n	800f8f0 <scalbn+0x98>
 800f870:	4b35      	ldr	r3, [pc, #212]	; (800f948 <scalbn+0xf0>)
 800f872:	4629      	mov	r1, r5
 800f874:	ee10 0a10 	vmov	r0, s0
 800f878:	2200      	movs	r2, #0
 800f87a:	f7f0 fee5 	bl	8000648 <__aeabi_dmul>
 800f87e:	4b33      	ldr	r3, [pc, #204]	; (800f94c <scalbn+0xf4>)
 800f880:	429e      	cmp	r6, r3
 800f882:	4604      	mov	r4, r0
 800f884:	460d      	mov	r5, r1
 800f886:	da10      	bge.n	800f8aa <scalbn+0x52>
 800f888:	a327      	add	r3, pc, #156	; (adr r3, 800f928 <scalbn+0xd0>)
 800f88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88e:	e01f      	b.n	800f8d0 <scalbn+0x78>
 800f890:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f894:	4291      	cmp	r1, r2
 800f896:	d10c      	bne.n	800f8b2 <scalbn+0x5a>
 800f898:	ee10 2a10 	vmov	r2, s0
 800f89c:	4620      	mov	r0, r4
 800f89e:	4629      	mov	r1, r5
 800f8a0:	f7f0 fd1c 	bl	80002dc <__adddf3>
 800f8a4:	4604      	mov	r4, r0
 800f8a6:	460d      	mov	r5, r1
 800f8a8:	e022      	b.n	800f8f0 <scalbn+0x98>
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f8b0:	3936      	subs	r1, #54	; 0x36
 800f8b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f8b6:	4296      	cmp	r6, r2
 800f8b8:	dd0d      	ble.n	800f8d6 <scalbn+0x7e>
 800f8ba:	2d00      	cmp	r5, #0
 800f8bc:	a11c      	add	r1, pc, #112	; (adr r1, 800f930 <scalbn+0xd8>)
 800f8be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8c2:	da02      	bge.n	800f8ca <scalbn+0x72>
 800f8c4:	a11c      	add	r1, pc, #112	; (adr r1, 800f938 <scalbn+0xe0>)
 800f8c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f8ca:	a319      	add	r3, pc, #100	; (adr r3, 800f930 <scalbn+0xd8>)
 800f8cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8d0:	f7f0 feba 	bl	8000648 <__aeabi_dmul>
 800f8d4:	e7e6      	b.n	800f8a4 <scalbn+0x4c>
 800f8d6:	1872      	adds	r2, r6, r1
 800f8d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f8dc:	428a      	cmp	r2, r1
 800f8de:	dcec      	bgt.n	800f8ba <scalbn+0x62>
 800f8e0:	2a00      	cmp	r2, #0
 800f8e2:	dd08      	ble.n	800f8f6 <scalbn+0x9e>
 800f8e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f8e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f8ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f8f0:	ec45 4b10 	vmov	d0, r4, r5
 800f8f4:	bd70      	pop	{r4, r5, r6, pc}
 800f8f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f8fa:	da08      	bge.n	800f90e <scalbn+0xb6>
 800f8fc:	2d00      	cmp	r5, #0
 800f8fe:	a10a      	add	r1, pc, #40	; (adr r1, 800f928 <scalbn+0xd0>)
 800f900:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f904:	dac0      	bge.n	800f888 <scalbn+0x30>
 800f906:	a10e      	add	r1, pc, #56	; (adr r1, 800f940 <scalbn+0xe8>)
 800f908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f90c:	e7bc      	b.n	800f888 <scalbn+0x30>
 800f90e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f912:	3236      	adds	r2, #54	; 0x36
 800f914:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f918:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f91c:	4620      	mov	r0, r4
 800f91e:	4b0c      	ldr	r3, [pc, #48]	; (800f950 <scalbn+0xf8>)
 800f920:	2200      	movs	r2, #0
 800f922:	e7d5      	b.n	800f8d0 <scalbn+0x78>
 800f924:	f3af 8000 	nop.w
 800f928:	c2f8f359 	.word	0xc2f8f359
 800f92c:	01a56e1f 	.word	0x01a56e1f
 800f930:	8800759c 	.word	0x8800759c
 800f934:	7e37e43c 	.word	0x7e37e43c
 800f938:	8800759c 	.word	0x8800759c
 800f93c:	fe37e43c 	.word	0xfe37e43c
 800f940:	c2f8f359 	.word	0xc2f8f359
 800f944:	81a56e1f 	.word	0x81a56e1f
 800f948:	43500000 	.word	0x43500000
 800f94c:	ffff3cb0 	.word	0xffff3cb0
 800f950:	3c900000 	.word	0x3c900000

0800f954 <with_errno>:
 800f954:	b570      	push	{r4, r5, r6, lr}
 800f956:	4604      	mov	r4, r0
 800f958:	460d      	mov	r5, r1
 800f95a:	4616      	mov	r6, r2
 800f95c:	f7fd fa7c 	bl	800ce58 <__errno>
 800f960:	4629      	mov	r1, r5
 800f962:	6006      	str	r6, [r0, #0]
 800f964:	4620      	mov	r0, r4
 800f966:	bd70      	pop	{r4, r5, r6, pc}

0800f968 <xflow>:
 800f968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f96a:	4614      	mov	r4, r2
 800f96c:	461d      	mov	r5, r3
 800f96e:	b108      	cbz	r0, 800f974 <xflow+0xc>
 800f970:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f974:	e9cd 2300 	strd	r2, r3, [sp]
 800f978:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f97c:	4620      	mov	r0, r4
 800f97e:	4629      	mov	r1, r5
 800f980:	f7f0 fe62 	bl	8000648 <__aeabi_dmul>
 800f984:	2222      	movs	r2, #34	; 0x22
 800f986:	b003      	add	sp, #12
 800f988:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f98c:	f7ff bfe2 	b.w	800f954 <with_errno>

0800f990 <__math_uflow>:
 800f990:	b508      	push	{r3, lr}
 800f992:	2200      	movs	r2, #0
 800f994:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f998:	f7ff ffe6 	bl	800f968 <xflow>
 800f99c:	ec41 0b10 	vmov	d0, r0, r1
 800f9a0:	bd08      	pop	{r3, pc}

0800f9a2 <__math_oflow>:
 800f9a2:	b508      	push	{r3, lr}
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f9aa:	f7ff ffdd 	bl	800f968 <xflow>
 800f9ae:	ec41 0b10 	vmov	d0, r0, r1
 800f9b2:	bd08      	pop	{r3, pc}

0800f9b4 <__ieee754_sqrt>:
 800f9b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9b8:	ec55 4b10 	vmov	r4, r5, d0
 800f9bc:	4e67      	ldr	r6, [pc, #412]	; (800fb5c <__ieee754_sqrt+0x1a8>)
 800f9be:	43ae      	bics	r6, r5
 800f9c0:	ee10 0a10 	vmov	r0, s0
 800f9c4:	ee10 2a10 	vmov	r2, s0
 800f9c8:	4629      	mov	r1, r5
 800f9ca:	462b      	mov	r3, r5
 800f9cc:	d10d      	bne.n	800f9ea <__ieee754_sqrt+0x36>
 800f9ce:	f7f0 fe3b 	bl	8000648 <__aeabi_dmul>
 800f9d2:	4602      	mov	r2, r0
 800f9d4:	460b      	mov	r3, r1
 800f9d6:	4620      	mov	r0, r4
 800f9d8:	4629      	mov	r1, r5
 800f9da:	f7f0 fc7f 	bl	80002dc <__adddf3>
 800f9de:	4604      	mov	r4, r0
 800f9e0:	460d      	mov	r5, r1
 800f9e2:	ec45 4b10 	vmov	d0, r4, r5
 800f9e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ea:	2d00      	cmp	r5, #0
 800f9ec:	dc0b      	bgt.n	800fa06 <__ieee754_sqrt+0x52>
 800f9ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f9f2:	4326      	orrs	r6, r4
 800f9f4:	d0f5      	beq.n	800f9e2 <__ieee754_sqrt+0x2e>
 800f9f6:	b135      	cbz	r5, 800fa06 <__ieee754_sqrt+0x52>
 800f9f8:	f7f0 fc6e 	bl	80002d8 <__aeabi_dsub>
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	460b      	mov	r3, r1
 800fa00:	f7f0 ff4c 	bl	800089c <__aeabi_ddiv>
 800fa04:	e7eb      	b.n	800f9de <__ieee754_sqrt+0x2a>
 800fa06:	1509      	asrs	r1, r1, #20
 800fa08:	f000 808d 	beq.w	800fb26 <__ieee754_sqrt+0x172>
 800fa0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa10:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fa14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fa18:	07c9      	lsls	r1, r1, #31
 800fa1a:	bf5c      	itt	pl
 800fa1c:	005b      	lslpl	r3, r3, #1
 800fa1e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fa22:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fa26:	bf58      	it	pl
 800fa28:	0052      	lslpl	r2, r2, #1
 800fa2a:	2500      	movs	r5, #0
 800fa2c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fa30:	1076      	asrs	r6, r6, #1
 800fa32:	0052      	lsls	r2, r2, #1
 800fa34:	f04f 0e16 	mov.w	lr, #22
 800fa38:	46ac      	mov	ip, r5
 800fa3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fa3e:	eb0c 0001 	add.w	r0, ip, r1
 800fa42:	4298      	cmp	r0, r3
 800fa44:	bfde      	ittt	le
 800fa46:	1a1b      	suble	r3, r3, r0
 800fa48:	eb00 0c01 	addle.w	ip, r0, r1
 800fa4c:	186d      	addle	r5, r5, r1
 800fa4e:	005b      	lsls	r3, r3, #1
 800fa50:	f1be 0e01 	subs.w	lr, lr, #1
 800fa54:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fa58:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fa5c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fa60:	d1ed      	bne.n	800fa3e <__ieee754_sqrt+0x8a>
 800fa62:	4674      	mov	r4, lr
 800fa64:	2720      	movs	r7, #32
 800fa66:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fa6a:	4563      	cmp	r3, ip
 800fa6c:	eb01 000e 	add.w	r0, r1, lr
 800fa70:	dc02      	bgt.n	800fa78 <__ieee754_sqrt+0xc4>
 800fa72:	d113      	bne.n	800fa9c <__ieee754_sqrt+0xe8>
 800fa74:	4290      	cmp	r0, r2
 800fa76:	d811      	bhi.n	800fa9c <__ieee754_sqrt+0xe8>
 800fa78:	2800      	cmp	r0, #0
 800fa7a:	eb00 0e01 	add.w	lr, r0, r1
 800fa7e:	da57      	bge.n	800fb30 <__ieee754_sqrt+0x17c>
 800fa80:	f1be 0f00 	cmp.w	lr, #0
 800fa84:	db54      	blt.n	800fb30 <__ieee754_sqrt+0x17c>
 800fa86:	f10c 0801 	add.w	r8, ip, #1
 800fa8a:	eba3 030c 	sub.w	r3, r3, ip
 800fa8e:	4290      	cmp	r0, r2
 800fa90:	bf88      	it	hi
 800fa92:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fa96:	1a12      	subs	r2, r2, r0
 800fa98:	440c      	add	r4, r1
 800fa9a:	46c4      	mov	ip, r8
 800fa9c:	005b      	lsls	r3, r3, #1
 800fa9e:	3f01      	subs	r7, #1
 800faa0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800faa4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800faa8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800faac:	d1dd      	bne.n	800fa6a <__ieee754_sqrt+0xb6>
 800faae:	4313      	orrs	r3, r2
 800fab0:	d01b      	beq.n	800faea <__ieee754_sqrt+0x136>
 800fab2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800fb60 <__ieee754_sqrt+0x1ac>
 800fab6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800fb64 <__ieee754_sqrt+0x1b0>
 800faba:	e9da 0100 	ldrd	r0, r1, [sl]
 800fabe:	e9db 2300 	ldrd	r2, r3, [fp]
 800fac2:	f7f0 fc09 	bl	80002d8 <__aeabi_dsub>
 800fac6:	e9da 8900 	ldrd	r8, r9, [sl]
 800faca:	4602      	mov	r2, r0
 800facc:	460b      	mov	r3, r1
 800face:	4640      	mov	r0, r8
 800fad0:	4649      	mov	r1, r9
 800fad2:	f7f1 f835 	bl	8000b40 <__aeabi_dcmple>
 800fad6:	b140      	cbz	r0, 800faea <__ieee754_sqrt+0x136>
 800fad8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fadc:	e9da 0100 	ldrd	r0, r1, [sl]
 800fae0:	e9db 2300 	ldrd	r2, r3, [fp]
 800fae4:	d126      	bne.n	800fb34 <__ieee754_sqrt+0x180>
 800fae6:	3501      	adds	r5, #1
 800fae8:	463c      	mov	r4, r7
 800faea:	106a      	asrs	r2, r5, #1
 800faec:	0863      	lsrs	r3, r4, #1
 800faee:	07e9      	lsls	r1, r5, #31
 800faf0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800faf4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800faf8:	bf48      	it	mi
 800fafa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fafe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fb02:	461c      	mov	r4, r3
 800fb04:	e76d      	b.n	800f9e2 <__ieee754_sqrt+0x2e>
 800fb06:	0ad3      	lsrs	r3, r2, #11
 800fb08:	3815      	subs	r0, #21
 800fb0a:	0552      	lsls	r2, r2, #21
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d0fa      	beq.n	800fb06 <__ieee754_sqrt+0x152>
 800fb10:	02dc      	lsls	r4, r3, #11
 800fb12:	d50a      	bpl.n	800fb2a <__ieee754_sqrt+0x176>
 800fb14:	f1c1 0420 	rsb	r4, r1, #32
 800fb18:	fa22 f404 	lsr.w	r4, r2, r4
 800fb1c:	1e4d      	subs	r5, r1, #1
 800fb1e:	408a      	lsls	r2, r1
 800fb20:	4323      	orrs	r3, r4
 800fb22:	1b41      	subs	r1, r0, r5
 800fb24:	e772      	b.n	800fa0c <__ieee754_sqrt+0x58>
 800fb26:	4608      	mov	r0, r1
 800fb28:	e7f0      	b.n	800fb0c <__ieee754_sqrt+0x158>
 800fb2a:	005b      	lsls	r3, r3, #1
 800fb2c:	3101      	adds	r1, #1
 800fb2e:	e7ef      	b.n	800fb10 <__ieee754_sqrt+0x15c>
 800fb30:	46e0      	mov	r8, ip
 800fb32:	e7aa      	b.n	800fa8a <__ieee754_sqrt+0xd6>
 800fb34:	f7f0 fbd2 	bl	80002dc <__adddf3>
 800fb38:	e9da 8900 	ldrd	r8, r9, [sl]
 800fb3c:	4602      	mov	r2, r0
 800fb3e:	460b      	mov	r3, r1
 800fb40:	4640      	mov	r0, r8
 800fb42:	4649      	mov	r1, r9
 800fb44:	f7f0 fff2 	bl	8000b2c <__aeabi_dcmplt>
 800fb48:	b120      	cbz	r0, 800fb54 <__ieee754_sqrt+0x1a0>
 800fb4a:	1ca0      	adds	r0, r4, #2
 800fb4c:	bf08      	it	eq
 800fb4e:	3501      	addeq	r5, #1
 800fb50:	3402      	adds	r4, #2
 800fb52:	e7ca      	b.n	800faea <__ieee754_sqrt+0x136>
 800fb54:	3401      	adds	r4, #1
 800fb56:	f024 0401 	bic.w	r4, r4, #1
 800fb5a:	e7c6      	b.n	800faea <__ieee754_sqrt+0x136>
 800fb5c:	7ff00000 	.word	0x7ff00000
 800fb60:	20000240 	.word	0x20000240
 800fb64:	20000248 	.word	0x20000248

0800fb68 <_init>:
 800fb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb6a:	bf00      	nop
 800fb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb6e:	bc08      	pop	{r3}
 800fb70:	469e      	mov	lr, r3
 800fb72:	4770      	bx	lr

0800fb74 <_fini>:
 800fb74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb76:	bf00      	nop
 800fb78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fb7a:	bc08      	pop	{r3}
 800fb7c:	469e      	mov	lr, r3
 800fb7e:	4770      	bx	lr
