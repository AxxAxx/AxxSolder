
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f7a0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003608  0800f980  0800f980  0001f980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f88  08012f88  00030258  2**0
                  CONTENTS
  4 .ARM          00000008  08012f88  08012f88  00022f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f90  08012f90  00030258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f90  08012f90  00022f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f94  08012f94  00022f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000258  20000000  08012f98  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000944  20000258  080131f0  00030258  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b9c  080131f0  00030b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030288  2**0
                  CONTENTS, READONLY
 13 .debug_info   000203b0  00000000  00000000  000302cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004036  00000000  00000000  0005067b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d28  00000000  00000000  000546b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001678  00000000  00000000  000563e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023954  00000000  00000000  00057a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023b58  00000000  00000000  0007b3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4202  00000000  00000000  0009ef04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009190  00000000  00000000  00183108  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0018c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000258 	.word	0x20000258
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f968 	.word	0x0800f968

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000025c 	.word	0x2000025c
 800021c:	0800f968 	.word	0x0800f968

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

PID_TypeDef TPID;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	tx_done = 1;
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_UART_TxCpltCallback+0x1c>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000028 	.word	0x20000028

08000ff4 <get_mean_ADC_reading>:

/* Returns the average of 100 readings of the index+4*n value in the ADC_buffer vector */
float get_mean_ADC_reading(uint8_t index){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <get_mean_ADC_reading+0x68>)
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
	for(int n=index;n<400;n=n+4){
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e012      	b.n	8001032 <get_mean_ADC_reading+0x3e>
		ADC_filter_mean += ADC_buffer[n];
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <get_mean_ADC_reading+0x6c>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <get_mean_ADC_reading+0x68>)
 800101e:	edd3 7a00 	vldr	s15, [r3]
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <get_mean_ADC_reading+0x68>)
 8001028:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<400;n=n+4){
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3304      	adds	r3, #4
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001038:	dbe8      	blt.n	800100c <get_mean_ADC_reading+0x18>
	}
	return ADC_filter_mean/100.0;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <get_mean_ADC_reading+0x68>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001064 <get_mean_ADC_reading+0x70>
 8001044:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001048:	eef0 7a66 	vmov.f32	s15, s13
}
 800104c:	eeb0 0a67 	vmov.f32	s0, s15
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	200002d4 	.word	0x200002d4
 8001060:	200002d8 	.word	0x200002d8
 8001064:	42c80000 	.word	0x42c80000

08001068 <get_bus_voltage>:

void get_bus_voltage(){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	/* Index 3 is bus Voltage */
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading(3), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 800106c:	2003      	movs	r0, #3
 800106e:	f7ff ffc1 	bl	8000ff4 <get_mean_ADC_reading>
 8001072:	eef0 7a40 	vmov.f32	s15, s0
 8001076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <get_bus_voltage+0x48>)
 800107c:	ee17 0a90 	vmov	r0, s15
 8001080:	f001 fb84 	bl	800278c <Moving_Average_Compute>
 8001084:	ec51 0b10 	vmov	r0, r1, d0
 8001088:	a307      	add	r3, pc, #28	; (adr r3, 80010a8 <get_bus_voltage+0x40>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fadb 	bl	8000648 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fdcd 	bl	8000c38 <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <get_bus_voltage+0x4c>)
 80010a2:	6113      	str	r3, [r2, #16]
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	48b35add 	.word	0x48b35add
 80010ac:	3f7a91e4 	.word	0x3f7a91e4
 80010b0:	20000640 	.word	0x20000640
 80010b4:	20000030 	.word	0x20000030

080010b8 <get_actual_temperature>:

void get_actual_temperature(){
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	float TC_temperature_temp = Moving_Average_Compute(get_mean_ADC_reading(0), &actual_temperature_filter_struct);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff ff98 	bl	8000ff4 <get_mean_ADC_reading>
 80010c4:	eef0 7a40 	vmov.f32	s15, s0
 80010c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010cc:	497a      	ldr	r1, [pc, #488]	; (80012b8 <get_actual_temperature+0x200>)
 80010ce:	ee17 0a90 	vmov	r0, s15
 80010d2:	f001 fb5b 	bl	800278c <Moving_Average_Compute>
 80010d6:	ec53 2b10 	vmov	r2, r3, d0
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fdab 	bl	8000c38 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	607b      	str	r3, [r7, #4]

	if(handle == T210){
 80010e6:	4b75      	ldr	r3, [pc, #468]	; (80012bc <get_actual_temperature+0x204>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d14e      	bne.n	800118c <get_actual_temperature+0xd4>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 + pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fa52 	bl	8000598 <__aeabi_f2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8001260 <get_actual_temperature+0x1a8>
 80010fc:	ec43 2b10 	vmov	d0, r2, r3
 8001100:	f00d fcfa 	bl	800eaf8 <pow>
 8001104:	ec51 0b10 	vmov	r0, r1, d0
 8001108:	a357      	add	r3, pc, #348	; (adr r3, 8001268 <get_actual_temperature+0x1b0>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fa9b 	bl	8000648 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4614      	mov	r4, r2
 8001118:	461d      	mov	r5, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fa3c 	bl	8000598 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8001270 <get_actual_temperature+0x1b8>
 8001128:	ec43 2b10 	vmov	d0, r2, r3
 800112c:	f00d fce4 	bl	800eaf8 <pow>
 8001130:	ec51 0b10 	vmov	r0, r1, d0
 8001134:	a350      	add	r3, pc, #320	; (adr r3, 8001278 <get_actual_temperature+0x1c0>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff fa85 	bl	8000648 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4620      	mov	r0, r4
 8001144:	4629      	mov	r1, r5
 8001146:	f7ff f8c9 	bl	80002dc <__adddf3>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4614      	mov	r4, r2
 8001150:	461d      	mov	r5, r3
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fa20 	bl	8000598 <__aeabi_f2d>
 8001158:	a349      	add	r3, pc, #292	; (adr r3, 8001280 <get_actual_temperature+0x1c8>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fa73 	bl	8000648 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4620      	mov	r0, r4
 8001168:	4629      	mov	r1, r5
 800116a:	f7ff f8b7 	bl	80002dc <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	a344      	add	r3, pc, #272	; (adr r3, 8001288 <get_actual_temperature+0x1d0>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff f8ae 	bl	80002dc <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	494e      	ldr	r1, [pc, #312]	; (80012c0 <get_actual_temperature+0x208>)
 8001186:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800118a:	e051      	b.n	8001230 <get_actual_temperature+0x178>
	}
	else if(handle == T245){
 800118c:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <get_actual_temperature+0x204>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d14d      	bne.n	8001230 <get_actual_temperature+0x178>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 + pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff f9ff 	bl	8000598 <__aeabi_f2d>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001260 <get_actual_temperature+0x1a8>
 80011a2:	ec43 2b10 	vmov	d0, r2, r3
 80011a6:	f00d fca7 	bl	800eaf8 <pow>
 80011aa:	ec51 0b10 	vmov	r0, r1, d0
 80011ae:	a338      	add	r3, pc, #224	; (adr r3, 8001290 <get_actual_temperature+0x1d8>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fa48 	bl	8000648 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4614      	mov	r4, r2
 80011be:	461d      	mov	r5, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff f9e9 	bl	8000598 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001270 <get_actual_temperature+0x1b8>
 80011ce:	ec43 2b10 	vmov	d0, r2, r3
 80011d2:	f00d fc91 	bl	800eaf8 <pow>
 80011d6:	ec51 0b10 	vmov	r0, r1, d0
 80011da:	a32f      	add	r3, pc, #188	; (adr r3, 8001298 <get_actual_temperature+0x1e0>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa32 	bl	8000648 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff f876 	bl	80002dc <__adddf3>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4614      	mov	r4, r2
 80011f6:	461d      	mov	r5, r3
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff f9cd 	bl	8000598 <__aeabi_f2d>
 80011fe:	a328      	add	r3, pc, #160	; (adr r3, 80012a0 <get_actual_temperature+0x1e8>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fa20 	bl	8000648 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4620      	mov	r0, r4
 800120e:	4629      	mov	r1, r5
 8001210:	f7ff f864 	bl	80002dc <__adddf3>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	a322      	add	r3, pc, #136	; (adr r3, 80012a8 <get_actual_temperature+0x1f0>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f85b 	bl	80002dc <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4925      	ldr	r1, [pc, #148]	; (80012c0 <get_actual_temperature+0x208>)
 800122c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(sensor_values.actual_temperature > 999){
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <get_actual_temperature+0x208>)
 8001232:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001236:	a31e      	add	r3, pc, #120	; (adr r3, 80012b0 <get_actual_temperature+0x1f8>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fc94 	bl	8000b68 <__aeabi_dcmpgt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d100      	bne.n	8001248 <get_actual_temperature+0x190>
		sensor_values.actual_temperature = 999;
	}
}
 8001246:	e005      	b.n	8001254 <get_actual_temperature+0x19c>
		sensor_values.actual_temperature = 999;
 8001248:	491d      	ldr	r1, [pc, #116]	; (80012c0 <get_actual_temperature+0x208>)
 800124a:	a319      	add	r3, pc, #100	; (adr r3, 80012b0 <get_actual_temperature+0x1f8>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bdb0      	pop	{r4, r5, r7, pc}
 800125c:	f3af 8000 	nop.w
 8001260:	00000000 	.word	0x00000000
 8001264:	40080000 	.word	0x40080000
 8001268:	e6c91459 	.word	0xe6c91459
 800126c:	be3d333c 	.word	0xbe3d333c
 8001270:	00000000 	.word	0x00000000
 8001274:	40000000 	.word	0x40000000
 8001278:	77c4dab0 	.word	0x77c4dab0
 800127c:	bed98561 	.word	0xbed98561
 8001280:	0aa653bc 	.word	0x0aa653bc
 8001284:	3fd1585a 	.word	0x3fd1585a
 8001288:	d797deed 	.word	0xd797deed
 800128c:	40396624 	.word	0x40396624
 8001290:	b4effad8 	.word	0xb4effad8
 8001294:	3e21f933 	.word	0x3e21f933
 8001298:	c7e1dac1 	.word	0xc7e1dac1
 800129c:	bee97525 	.word	0xbee97525
 80012a0:	8d8ee863 	.word	0x8d8ee863
 80012a4:	3fbe16b0 	.word	0x3fbe16b0
 80012a8:	7373b751 	.word	0x7373b751
 80012ac:	40390d47 	.word	0x40390d47
 80012b0:	00000000 	.word	0x00000000
 80012b4:	408f3800 	.word	0x408f3800
 80012b8:	20000608 	.word	0x20000608
 80012bc:	20000274 	.word	0x20000274
 80012c0:	20000030 	.word	0x20000030
 80012c4:	00000000 	.word	0x00000000

080012c8 <get_ambient_temp>:

void get_ambient_temp(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	//Index 2 is PCB temp
	sensor_values.ambient_temperature = ((Moving_Average_Compute(get_mean_ADC_reading(2), &ambient_temperature_filter_struct)*AMBIENT_TEMP_COMPENSATION)-0.4)/0.0195;
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff fe91 	bl	8000ff4 <get_mean_ADC_reading>
 80012d2:	eef0 7a40 	vmov.f32	s15, s0
 80012d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012da:	491b      	ldr	r1, [pc, #108]	; (8001348 <get_ambient_temp+0x80>)
 80012dc:	ee17 0a90 	vmov	r0, s15
 80012e0:	f001 fa54 	bl	800278c <Moving_Average_Compute>
 80012e4:	ec51 0b10 	vmov	r0, r1, d0
 80012e8:	a311      	add	r3, pc, #68	; (adr r3, 8001330 <get_ambient_temp+0x68>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f9ab 	bl	8000648 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	a30f      	add	r3, pc, #60	; (adr r3, 8001338 <get_ambient_temp+0x70>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7fe ffea 	bl	80002d8 <__aeabi_dsub>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	a30c      	add	r3, pc, #48	; (adr r3, 8001340 <get_ambient_temp+0x78>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fac3 	bl	800089c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc8b 	bl	8000c38 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <get_ambient_temp+0x84>)
 8001326:	61d3      	str	r3, [r2, #28]
	//• Positive slope sensor gain, offset (typical):
	//– 19.5 mV/°C, 400 mV at 0°C (TMP236-Q1) From data sheet
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	f3af 8000 	nop.w
 8001330:	e3fc03eb 	.word	0xe3fc03eb
 8001334:	3f4a680c 	.word	0x3f4a680c
 8001338:	9999999a 	.word	0x9999999a
 800133c:	3fd99999 	.word	0x3fd99999
 8001340:	d916872b 	.word	0xd916872b
 8001344:	3f93f7ce 	.word	0x3f93f7ce
 8001348:	20000624 	.word	0x20000624
 800134c:	20000030 	.word	0x20000030

08001350 <debugPrint>:

void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
    tx_done = 0;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <debugPrint+0x38>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7fe ffad 	bl	80002c0 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29b      	uxth	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f007 fffa 	bl	8009368 <HAL_UART_Transmit_IT>
	while(!tx_done);
 8001374:	bf00      	nop
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <debugPrint+0x38>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0fb      	beq.n	8001376 <debugPrint+0x26>
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000028 	.word	0x20000028

0800138c <init_OLED>:

/* Initiate OLED display */
void init_OLED(){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af02      	add	r7, sp, #8
	if((black_image = (UBYTE *)malloc(image_size)) == NULL) {
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <init_OLED+0x74>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f00a fcba 	bl	800bd10 <malloc>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <init_OLED+0x78>)
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <init_OLED+0x78>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d025      	beq.n	80013f8 <init_OLED+0x6c>
		return;
	}
	Paint_NewImage(black_image, OLED_1in5_WIDTH, OLED_1in5_HEIGHT, 270, BLACK);
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <init_OLED+0x78>)
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	2300      	movs	r3, #0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	f009 fbdc 	bl	800ab78 <Paint_NewImage>
	Paint_SetScale(16);
 80013c0:	2010      	movs	r0, #16
 80013c2:	f009 fc3f 	bl	800ac44 <Paint_SetScale>
	Paint_SelectImage(black_image);
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <init_OLED+0x78>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f009 fc2a 	bl	800ac24 <Paint_SelectImage>
	Driver_Delay_ms(100);
 80013d0:	2064      	movs	r0, #100	; 0x64
 80013d2:	f009 fbc5 	bl	800ab60 <Driver_Delay_ms>
	Paint_Clear(BLACK);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f009 fe1e 	bl	800b018 <Paint_Clear>

	// Show image
	OLED_1in5_Display(black_image);
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <init_OLED+0x78>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f00a fc66 	bl	800bcb2 <OLED_1in5_Display>

	OLED_1in5_Init();
 80013e6:	f00a fbfd 	bl	800bbe4 <OLED_1in5_Init>
	Driver_Delay_ms(500);
 80013ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ee:	f009 fbb7 	bl	800ab60 <Driver_Delay_ms>
	OLED_1in5_Clear();
 80013f2:	f00a fc43 	bl	800bc7c <OLED_1in5_Clear>
 80013f6:	e000      	b.n	80013fa <init_OLED+0x6e>
		return;
 80013f8:	bf00      	nop
}
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000
 8001404:	20000278 	.word	0x20000278

08001408 <update_OLED>:

void update_OLED(){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af04      	add	r7, sp, #16
	Paint_DrawString_EN(0, 0, " AxxSolder ", &Font16, 0x00, 0xff);
 800140e:	23ff      	movs	r3, #255	; 0xff
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	4bad      	ldr	r3, [pc, #692]	; (80016cc <update_OLED+0x2c4>)
 8001418:	4aad      	ldr	r2, [pc, #692]	; (80016d0 <update_OLED+0x2c8>)
 800141a:	2100      	movs	r1, #0
 800141c:	2000      	movs	r0, #0
 800141e:	f00a fac5 	bl	800b9ac <Paint_DrawString_EN>
    Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001422:	2300      	movs	r3, #0
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2302      	movs	r3, #2
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2310      	movs	r3, #16
 8001432:	227f      	movs	r2, #127	; 0x7f
 8001434:	2110      	movs	r1, #16
 8001436:	2000      	movs	r0, #0
 8001438:	f009 ff44 	bl	800b2c4 <Paint_DrawLine>

	Paint_DrawString_EN(3, 20, "Set temp", &Font16, 0x00, 0xff);
 800143c:	23ff      	movs	r3, #255	; 0xff
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	2300      	movs	r3, #0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	4ba1      	ldr	r3, [pc, #644]	; (80016cc <update_OLED+0x2c4>)
 8001446:	4aa3      	ldr	r2, [pc, #652]	; (80016d4 <update_OLED+0x2cc>)
 8001448:	2114      	movs	r1, #20
 800144a:	2003      	movs	r0, #3
 800144c:	f00a faae 	bl	800b9ac <Paint_DrawString_EN>
	memset(&buffer, '\0', sizeof(buffer));
 8001450:	2228      	movs	r2, #40	; 0x28
 8001452:	2100      	movs	r1, #0
 8001454:	48a0      	ldr	r0, [pc, #640]	; (80016d8 <update_OLED+0x2d0>)
 8001456:	f00b fb9d 	bl	800cb94 <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 800145a:	4ba0      	ldr	r3, [pc, #640]	; (80016dc <update_OLED+0x2d4>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	499f      	ldr	r1, [pc, #636]	; (80016e0 <update_OLED+0x2d8>)
 8001462:	489d      	ldr	r0, [pc, #628]	; (80016d8 <update_OLED+0x2d0>)
 8001464:	f00b fa9e 	bl	800c9a4 <siprintf>
	Paint_DrawString_EN(3, 32, buffer, &Font24,  0x0, 0xff);
 8001468:	23ff      	movs	r3, #255	; 0xff
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	2300      	movs	r3, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	4b9c      	ldr	r3, [pc, #624]	; (80016e4 <update_OLED+0x2dc>)
 8001472:	4a99      	ldr	r2, [pc, #612]	; (80016d8 <update_OLED+0x2d0>)
 8001474:	2120      	movs	r1, #32
 8001476:	2003      	movs	r0, #3
 8001478:	f00a fa98 	bl	800b9ac <Paint_DrawString_EN>
	Paint_DrawCircle(67, 37, 2, WHITE, 1, DRAW_FILL_EMPTY);
 800147c:	2300      	movs	r3, #0
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	2301      	movs	r3, #1
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001488:	2202      	movs	r2, #2
 800148a:	2125      	movs	r1, #37	; 0x25
 800148c:	2043      	movs	r0, #67	; 0x43
 800148e:	f00a f857 	bl	800b540 <Paint_DrawCircle>
	Paint_DrawString_EN(70, 32, "C", &Font24,  0x0, 0xff);
 8001492:	23ff      	movs	r3, #255	; 0xff
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	4b92      	ldr	r3, [pc, #584]	; (80016e4 <update_OLED+0x2dc>)
 800149c:	4a92      	ldr	r2, [pc, #584]	; (80016e8 <update_OLED+0x2e0>)
 800149e:	2120      	movs	r1, #32
 80014a0:	2046      	movs	r0, #70	; 0x46
 80014a2:	f00a fa83 	bl	800b9ac <Paint_DrawString_EN>

	Paint_DrawString_EN(3, 58, "Act temp", &Font16, 0x00, 0xff);
 80014a6:	23ff      	movs	r3, #255	; 0xff
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	2300      	movs	r3, #0
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	4b87      	ldr	r3, [pc, #540]	; (80016cc <update_OLED+0x2c4>)
 80014b0:	4a8e      	ldr	r2, [pc, #568]	; (80016ec <update_OLED+0x2e4>)
 80014b2:	213a      	movs	r1, #58	; 0x3a
 80014b4:	2003      	movs	r0, #3
 80014b6:	f00a fa79 	bl	800b9ac <Paint_DrawString_EN>
	memset(&buffer, '\0', sizeof(buffer));
 80014ba:	2228      	movs	r2, #40	; 0x28
 80014bc:	2100      	movs	r1, #0
 80014be:	4886      	ldr	r0, [pc, #536]	; (80016d8 <update_OLED+0x2d0>)
 80014c0:	f00b fb68 	bl	800cb94 <memset>

	if(sensor_values.actual_temperature >= 600){
 80014c4:	4b85      	ldr	r3, [pc, #532]	; (80016dc <update_OLED+0x2d4>)
 80014c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b88      	ldr	r3, [pc, #544]	; (80016f0 <update_OLED+0x2e8>)
 80014d0:	f7ff fb40 	bl	8000b54 <__aeabi_dcmpge>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00a      	beq.n	80014f0 <update_OLED+0xe8>
		Paint_DrawString_EN(3, 70, "---", &Font24, 0x0, 0xff);
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	2300      	movs	r3, #0
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4b80      	ldr	r3, [pc, #512]	; (80016e4 <update_OLED+0x2dc>)
 80014e4:	4a83      	ldr	r2, [pc, #524]	; (80016f4 <update_OLED+0x2ec>)
 80014e6:	2146      	movs	r1, #70	; 0x46
 80014e8:	2003      	movs	r0, #3
 80014ea:	f00a fa5f 	bl	800b9ac <Paint_DrawString_EN>
 80014ee:	e010      	b.n	8001512 <update_OLED+0x10a>
	}
	else{
		sprintf(buffer, "%.f", sensor_values.actual_temperature);
 80014f0:	4b7a      	ldr	r3, [pc, #488]	; (80016dc <update_OLED+0x2d4>)
 80014f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014f6:	497a      	ldr	r1, [pc, #488]	; (80016e0 <update_OLED+0x2d8>)
 80014f8:	4877      	ldr	r0, [pc, #476]	; (80016d8 <update_OLED+0x2d0>)
 80014fa:	f00b fa53 	bl	800c9a4 <siprintf>
		Paint_DrawString_EN(3, 70, buffer, &Font24, 0x0, 0xff);
 80014fe:	23ff      	movs	r3, #255	; 0xff
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	2300      	movs	r3, #0
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	4b77      	ldr	r3, [pc, #476]	; (80016e4 <update_OLED+0x2dc>)
 8001508:	4a73      	ldr	r2, [pc, #460]	; (80016d8 <update_OLED+0x2d0>)
 800150a:	2146      	movs	r1, #70	; 0x46
 800150c:	2003      	movs	r0, #3
 800150e:	f00a fa4d 	bl	800b9ac <Paint_DrawString_EN>
	}

	Paint_DrawCircle(67, 75, 2, WHITE, 1, DRAW_FILL_EMPTY);
 8001512:	2300      	movs	r3, #0
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	2301      	movs	r3, #1
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151e:	2202      	movs	r2, #2
 8001520:	214b      	movs	r1, #75	; 0x4b
 8001522:	2043      	movs	r0, #67	; 0x43
 8001524:	f00a f80c 	bl	800b540 <Paint_DrawCircle>
	Paint_DrawString_EN(70, 70, "C", &Font24, 0x0, 0xff);
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	2300      	movs	r3, #0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4b6c      	ldr	r3, [pc, #432]	; (80016e4 <update_OLED+0x2dc>)
 8001532:	4a6d      	ldr	r2, [pc, #436]	; (80016e8 <update_OLED+0x2e0>)
 8001534:	2146      	movs	r1, #70	; 0x46
 8001536:	2046      	movs	r0, #70	; 0x46
 8001538:	f00a fa38 	bl	800b9ac <Paint_DrawString_EN>
	Paint_DrawRectangle(1, 56, 100, 93 , WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800153c:	2300      	movs	r3, #0
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	2301      	movs	r3, #1
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	235d      	movs	r3, #93	; 0x5d
 800154c:	2264      	movs	r2, #100	; 0x64
 800154e:	2138      	movs	r1, #56	; 0x38
 8001550:	2001      	movs	r0, #1
 8001552:	f009 ff71 	bl	800b438 <Paint_DrawRectangle>

	Paint_DrawString_EN(0, 96, "HANDLE:", &Font12, 0x00, 0xff);
 8001556:	23ff      	movs	r3, #255	; 0xff
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	2300      	movs	r3, #0
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4b66      	ldr	r3, [pc, #408]	; (80016f8 <update_OLED+0x2f0>)
 8001560:	4a66      	ldr	r2, [pc, #408]	; (80016fc <update_OLED+0x2f4>)
 8001562:	2160      	movs	r1, #96	; 0x60
 8001564:	2000      	movs	r0, #0
 8001566:	f00a fa21 	bl	800b9ac <Paint_DrawString_EN>
	if(handle == T210){
 800156a:	4b65      	ldr	r3, [pc, #404]	; (8001700 <update_OLED+0x2f8>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10a      	bne.n	8001588 <update_OLED+0x180>
		Paint_DrawString_EN(60, 96, "T210", &Font12, 0x00, 0xff);
 8001572:	23ff      	movs	r3, #255	; 0xff
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	2300      	movs	r3, #0
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4b5f      	ldr	r3, [pc, #380]	; (80016f8 <update_OLED+0x2f0>)
 800157c:	4a61      	ldr	r2, [pc, #388]	; (8001704 <update_OLED+0x2fc>)
 800157e:	2160      	movs	r1, #96	; 0x60
 8001580:	203c      	movs	r0, #60	; 0x3c
 8001582:	f00a fa13 	bl	800b9ac <Paint_DrawString_EN>
 8001586:	e00d      	b.n	80015a4 <update_OLED+0x19c>
	}
	else if(handle == T245){
 8001588:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <update_OLED+0x2f8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d109      	bne.n	80015a4 <update_OLED+0x19c>
		Paint_DrawString_EN(60, 96, "T245", &Font12, 0x00, 0xff);
 8001590:	23ff      	movs	r3, #255	; 0xff
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	2300      	movs	r3, #0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4b57      	ldr	r3, [pc, #348]	; (80016f8 <update_OLED+0x2f0>)
 800159a:	4a5b      	ldr	r2, [pc, #364]	; (8001708 <update_OLED+0x300>)
 800159c:	2160      	movs	r1, #96	; 0x60
 800159e:	203c      	movs	r0, #60	; 0x3c
 80015a0:	f00a fa04 	bl	800b9ac <Paint_DrawString_EN>
	}

	Paint_DrawString_EN(0, 109, "INPUT VOLTAGE:", &Font8, 0x00, 0xff);
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	2300      	movs	r3, #0
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4b57      	ldr	r3, [pc, #348]	; (800170c <update_OLED+0x304>)
 80015ae:	4a58      	ldr	r2, [pc, #352]	; (8001710 <update_OLED+0x308>)
 80015b0:	216d      	movs	r1, #109	; 0x6d
 80015b2:	2000      	movs	r0, #0
 80015b4:	f00a f9fa 	bl	800b9ac <Paint_DrawString_EN>
	Paint_DrawString_EN(0, 118, "AMB TEMP:     POWER ->", &Font8, 0x00, 0xff);
 80015b8:	23ff      	movs	r3, #255	; 0xff
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4b52      	ldr	r3, [pc, #328]	; (800170c <update_OLED+0x304>)
 80015c2:	4a54      	ldr	r2, [pc, #336]	; (8001714 <update_OLED+0x30c>)
 80015c4:	2176      	movs	r1, #118	; 0x76
 80015c6:	2000      	movs	r0, #0
 80015c8:	f00a f9f0 	bl	800b9ac <Paint_DrawString_EN>

	memset(&buffer, '\0', sizeof(buffer));
 80015cc:	2228      	movs	r2, #40	; 0x28
 80015ce:	2100      	movs	r1, #0
 80015d0:	4841      	ldr	r0, [pc, #260]	; (80016d8 <update_OLED+0x2d0>)
 80015d2:	f00b fadf 	bl	800cb94 <memset>
	sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 80015d6:	4b41      	ldr	r3, [pc, #260]	; (80016dc <update_OLED+0x2d4>)
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffdc 	bl	8000598 <__aeabi_f2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	494c      	ldr	r1, [pc, #304]	; (8001718 <update_OLED+0x310>)
 80015e6:	483c      	ldr	r0, [pc, #240]	; (80016d8 <update_OLED+0x2d0>)
 80015e8:	f00b f9dc 	bl	800c9a4 <siprintf>
	Paint_DrawString_EN(75, 109, buffer, &Font8, 0x0, 0xff);
 80015ec:	23ff      	movs	r3, #255	; 0xff
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4b45      	ldr	r3, [pc, #276]	; (800170c <update_OLED+0x304>)
 80015f6:	4a38      	ldr	r2, [pc, #224]	; (80016d8 <update_OLED+0x2d0>)
 80015f8:	216d      	movs	r1, #109	; 0x6d
 80015fa:	204b      	movs	r0, #75	; 0x4b
 80015fc:	f00a f9d6 	bl	800b9ac <Paint_DrawString_EN>

	memset(&buffer, '\0', sizeof(buffer));
 8001600:	2228      	movs	r2, #40	; 0x28
 8001602:	2100      	movs	r1, #0
 8001604:	4834      	ldr	r0, [pc, #208]	; (80016d8 <update_OLED+0x2d0>)
 8001606:	f00b fac5 	bl	800cb94 <memset>
	sprintf(buffer, "%.1f", sensor_values.ambient_temperature);
 800160a:	4b34      	ldr	r3, [pc, #208]	; (80016dc <update_OLED+0x2d4>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ffc2 	bl	8000598 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	493f      	ldr	r1, [pc, #252]	; (8001718 <update_OLED+0x310>)
 800161a:	482f      	ldr	r0, [pc, #188]	; (80016d8 <update_OLED+0x2d0>)
 800161c:	f00b f9c2 	bl	800c9a4 <siprintf>
	Paint_DrawString_EN(45, 118, buffer, &Font8, 0x0, 0xff);
 8001620:	23ff      	movs	r3, #255	; 0xff
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	2300      	movs	r3, #0
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4b38      	ldr	r3, [pc, #224]	; (800170c <update_OLED+0x304>)
 800162a:	4a2b      	ldr	r2, [pc, #172]	; (80016d8 <update_OLED+0x2d0>)
 800162c:	2176      	movs	r1, #118	; 0x76
 800162e:	202d      	movs	r0, #45	; 0x2d
 8001630:	f00a f9bc 	bl	800b9ac <Paint_DrawString_EN>

	Paint_DrawRectangle(116, 25, 128, 128, WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8001634:	2300      	movs	r3, #0
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2301      	movs	r3, #1
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	2119      	movs	r1, #25
 8001648:	2074      	movs	r0, #116	; 0x74
 800164a:	f009 fef5 	bl	800b438 <Paint_DrawRectangle>
	if(active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED){
 800164e:	4b33      	ldr	r3, [pc, #204]	; (800171c <update_OLED+0x314>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b01      	cmp	r3, #1
 8001654:	d007      	beq.n	8001666 <update_OLED+0x25e>
 8001656:	4b31      	ldr	r3, [pc, #196]	; (800171c <update_OLED+0x314>)
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d003      	beq.n	8001666 <update_OLED+0x25e>
 800165e:	4b2f      	ldr	r3, [pc, #188]	; (800171c <update_OLED+0x314>)
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	2b03      	cmp	r3, #3
 8001664:	d160      	bne.n	8001728 <update_OLED+0x320>
		Paint_DrawString_EN(116, 30,  "Z", &Font16, 0x00, 0xff);
 8001666:	23ff      	movs	r3, #255	; 0xff
 8001668:	9301      	str	r3, [sp, #4]
 800166a:	2300      	movs	r3, #0
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <update_OLED+0x2c4>)
 8001670:	4a2b      	ldr	r2, [pc, #172]	; (8001720 <update_OLED+0x318>)
 8001672:	211e      	movs	r1, #30
 8001674:	2074      	movs	r0, #116	; 0x74
 8001676:	f00a f999 	bl	800b9ac <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 50,  "z", &Font16, 0x00, 0xff);
 800167a:	23ff      	movs	r3, #255	; 0xff
 800167c:	9301      	str	r3, [sp, #4]
 800167e:	2300      	movs	r3, #0
 8001680:	9300      	str	r3, [sp, #0]
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <update_OLED+0x2c4>)
 8001684:	4a27      	ldr	r2, [pc, #156]	; (8001724 <update_OLED+0x31c>)
 8001686:	2132      	movs	r1, #50	; 0x32
 8001688:	2074      	movs	r0, #116	; 0x74
 800168a:	f00a f98f 	bl	800b9ac <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 70,  "Z", &Font16, 0x00, 0xff);
 800168e:	23ff      	movs	r3, #255	; 0xff
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	2300      	movs	r3, #0
 8001694:	9300      	str	r3, [sp, #0]
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <update_OLED+0x2c4>)
 8001698:	4a21      	ldr	r2, [pc, #132]	; (8001720 <update_OLED+0x318>)
 800169a:	2146      	movs	r1, #70	; 0x46
 800169c:	2074      	movs	r0, #116	; 0x74
 800169e:	f00a f985 	bl	800b9ac <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 90,  "z", &Font16, 0x00, 0xff);
 80016a2:	23ff      	movs	r3, #255	; 0xff
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	2300      	movs	r3, #0
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	4b08      	ldr	r3, [pc, #32]	; (80016cc <update_OLED+0x2c4>)
 80016ac:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <update_OLED+0x31c>)
 80016ae:	215a      	movs	r1, #90	; 0x5a
 80016b0:	2074      	movs	r0, #116	; 0x74
 80016b2:	f00a f97b 	bl	800b9ac <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 110, "z", &Font16, 0x00, 0xff);
 80016b6:	23ff      	movs	r3, #255	; 0xff
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	2300      	movs	r3, #0
 80016bc:	9300      	str	r3, [sp, #0]
 80016be:	4b03      	ldr	r3, [pc, #12]	; (80016cc <update_OLED+0x2c4>)
 80016c0:	4a18      	ldr	r2, [pc, #96]	; (8001724 <update_OLED+0x31c>)
 80016c2:	216e      	movs	r1, #110	; 0x6e
 80016c4:	2074      	movs	r0, #116	; 0x74
 80016c6:	f00a f971 	bl	800b9ac <Paint_DrawString_EN>
 80016ca:	e050      	b.n	800176e <update_OLED+0x366>
 80016cc:	20000064 	.word	0x20000064
 80016d0:	0800f980 	.word	0x0800f980
 80016d4:	0800f98c 	.word	0x0800f98c
 80016d8:	200002a8 	.word	0x200002a8
 80016dc:	20000030 	.word	0x20000030
 80016e0:	0800f998 	.word	0x0800f998
 80016e4:	2000006c 	.word	0x2000006c
 80016e8:	0800f99c 	.word	0x0800f99c
 80016ec:	0800f9a0 	.word	0x0800f9a0
 80016f0:	4082c000 	.word	0x4082c000
 80016f4:	0800f9ac 	.word	0x0800f9ac
 80016f8:	2000005c 	.word	0x2000005c
 80016fc:	0800f9b0 	.word	0x0800f9b0
 8001700:	20000274 	.word	0x20000274
 8001704:	0800f9b8 	.word	0x0800f9b8
 8001708:	0800f9c0 	.word	0x0800f9c0
 800170c:	20000074 	.word	0x20000074
 8001710:	0800f9c8 	.word	0x0800f9c8
 8001714:	0800f9d8 	.word	0x0800f9d8
 8001718:	0800f9f0 	.word	0x0800f9f0
 800171c:	2000001c 	.word	0x2000001c
 8001720:	0800f9f8 	.word	0x0800f9f8
 8001724:	0800f9fc 	.word	0x0800f9fc

	}
	else{
		Paint_DrawRectangle(116, 125-heater_power/10, 128, 128, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8001728:	4b16      	ldr	r3, [pc, #88]	; (8001784 <update_OLED+0x37c>)
 800172a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <update_OLED+0x380>)
 8001734:	f7ff f8b2 	bl	800089c <__aeabi_ddiv>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	f04f 0000 	mov.w	r0, #0
 8001740:	4912      	ldr	r1, [pc, #72]	; (800178c <update_OLED+0x384>)
 8001742:	f7fe fdc9 	bl	80002d8 <__aeabi_dsub>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fa53 	bl	8000bf8 <__aeabi_d2uiz>
 8001752:	4603      	mov	r3, r0
 8001754:	b299      	uxth	r1, r3
 8001756:	2301      	movs	r3, #1
 8001758:	9302      	str	r3, [sp, #8]
 800175a:	2301      	movs	r3, #1
 800175c:	9301      	str	r3, [sp, #4]
 800175e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2380      	movs	r3, #128	; 0x80
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	2074      	movs	r0, #116	; 0x74
 800176a:	f009 fe65 	bl	800b438 <Paint_DrawRectangle>
	}
	// Show image on page
	OLED_1in5_Display(black_image);
 800176e:	4b08      	ldr	r3, [pc, #32]	; (8001790 <update_OLED+0x388>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4618      	mov	r0, r3
 8001774:	f00a fa9d 	bl	800bcb2 <OLED_1in5_Display>
	Paint_Clear(BLACK);
 8001778:	2000      	movs	r0, #0
 800177a:	f009 fc4d 	bl	800b018 <Paint_Clear>
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	200005f8 	.word	0x200005f8
 8001788:	40240000 	.word	0x40240000
 800178c:	405f4000 	.word	0x405f4000
 8001790:	20000278 	.word	0x20000278

08001794 <get_set_temperature>:

/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	if (TIM3->CNT <= MIN_SELECTABLE_TEMPERTURE) {TIM3->CNT = MIN_SELECTABLE_TEMPERTURE; }
 8001798:	4b0d      	ldr	r3, [pc, #52]	; (80017d0 <get_set_temperature+0x3c>)
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	2b14      	cmp	r3, #20
 800179e:	d802      	bhi.n	80017a6 <get_set_temperature+0x12>
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <get_set_temperature+0x3c>)
 80017a2:	2214      	movs	r2, #20
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
	if (TIM3->CNT >= MAX_SELECTABLE_TEMPERTURE) {TIM3->CNT = MAX_SELECTABLE_TEMPERTURE; }
 80017a6:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <get_set_temperature+0x3c>)
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80017ae:	d303      	bcc.n	80017b8 <get_set_temperature+0x24>
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <get_set_temperature+0x3c>)
 80017b2:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80017b6:	625a      	str	r2, [r3, #36]	; 0x24
	sensor_values.set_temperature = TIM3->CNT;
 80017b8:	4b05      	ldr	r3, [pc, #20]	; (80017d0 <get_set_temperature+0x3c>)
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fec9 	bl	8000554 <__aeabi_ui2d>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4903      	ldr	r1, [pc, #12]	; (80017d4 <get_set_temperature+0x40>)
 80017c8:	e9c1 2300 	strd	r2, r3, [r1]
}
 80017cc:	bf00      	nop
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40000400 	.word	0x40000400
 80017d4:	20000030 	.word	0x20000030

080017d8 <get_stand_status>:

void get_stand_status(){
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 80017dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017e4:	f004 ff0c 	bl	8006600 <HAL_GPIO_ReadPin>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d103      	bne.n	80017f6 <get_stand_status+0x1e>
		sensor_values.in_stand = 1;
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <get_stand_status+0x28>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	761a      	strb	r2, [r3, #24]
	}
	else{
		sensor_values.in_stand = 0;
	}
}
 80017f4:	e002      	b.n	80017fc <get_stand_status+0x24>
		sensor_values.in_stand = 0;
 80017f6:	4b02      	ldr	r3, [pc, #8]	; (8001800 <get_stand_status+0x28>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	761a      	strb	r2, [r3, #24]
}
 80017fc:	bf00      	nop
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20000030 	.word	0x20000030

08001804 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_INP_Pin) == 0){
 8001808:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800180c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001810:	f004 fef6 	bl	8006600 <HAL_GPIO_ReadPin>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d118      	bne.n	800184c <get_handle_type+0x48>
		handle = T210;
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <get_handle_type+0xac>)
 800181c:	2200      	movs	r2, #0
 800181e:	701a      	strb	r2, [r3, #0]
		max_power_watt = 60; //60W
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <get_handle_type+0xb0>)
 8001822:	4a25      	ldr	r2, [pc, #148]	; (80018b8 <get_handle_type+0xb4>)
 8001824:	601a      	str	r2, [r3, #0]
		Kp = 20;
 8001826:	4925      	ldr	r1, [pc, #148]	; (80018bc <get_handle_type+0xb8>)
 8001828:	f04f 0200 	mov.w	r2, #0
 800182c:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <get_handle_type+0xbc>)
 800182e:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 60;
 8001832:	4924      	ldr	r1, [pc, #144]	; (80018c4 <get_handle_type+0xc0>)
 8001834:	f04f 0200 	mov.w	r2, #0
 8001838:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <get_handle_type+0xc4>)
 800183a:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 800183e:	4923      	ldr	r1, [pc, #140]	; (80018cc <get_handle_type+0xc8>)
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b22      	ldr	r3, [pc, #136]	; (80018d0 <get_handle_type+0xcc>)
 8001846:	e9c1 2300 	strd	r2, r3, [r1]
 800184a:	e017      	b.n	800187c <get_handle_type+0x78>
	}
	else{
		handle = T245;
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <get_handle_type+0xac>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
		max_power_watt = 120; //120W
 8001852:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <get_handle_type+0xb0>)
 8001854:	4a1f      	ldr	r2, [pc, #124]	; (80018d4 <get_handle_type+0xd0>)
 8001856:	601a      	str	r2, [r3, #0]
		Kp = 30;
 8001858:	4918      	ldr	r1, [pc, #96]	; (80018bc <get_handle_type+0xb8>)
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <get_handle_type+0xd4>)
 8001860:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 60;
 8001864:	4917      	ldr	r1, [pc, #92]	; (80018c4 <get_handle_type+0xc0>)
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <get_handle_type+0xc4>)
 800186c:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 1;
 8001870:	4916      	ldr	r1, [pc, #88]	; (80018cc <get_handle_type+0xc8>)
 8001872:	f04f 0200 	mov.w	r2, #0
 8001876:	4b19      	ldr	r3, [pc, #100]	; (80018dc <get_handle_type+0xd8>)
 8001878:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <get_handle_type+0xb8>)
 800187e:	ed93 7b00 	vldr	d7, [r3]
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <get_handle_type+0xc0>)
 8001884:	ed93 6b00 	vldr	d6, [r3]
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <get_handle_type+0xc8>)
 800188a:	ed93 5b00 	vldr	d5, [r3]
 800188e:	eeb0 2a45 	vmov.f32	s4, s10
 8001892:	eef0 2a65 	vmov.f32	s5, s11
 8001896:	eeb0 1a46 	vmov.f32	s2, s12
 800189a:	eef0 1a66 	vmov.f32	s3, s13
 800189e:	eeb0 0a47 	vmov.f32	s0, s14
 80018a2:	eef0 0a67 	vmov.f32	s1, s15
 80018a6:	480e      	ldr	r0, [pc, #56]	; (80018e0 <get_handle_type+0xdc>)
 80018a8:	f001 fa25 	bl	8002cf6 <PID_SetTunings>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000274 	.word	0x20000274
 80018b4:	200002d0 	.word	0x200002d0
 80018b8:	42700000 	.word	0x42700000
 80018bc:	20000020 	.word	0x20000020
 80018c0:	40340000 	.word	0x40340000
 80018c4:	20000298 	.word	0x20000298
 80018c8:	404e0000 	.word	0x404e0000
 80018cc:	200002a0 	.word	0x200002a0
 80018d0:	3fe00000 	.word	0x3fe00000
 80018d4:	42f00000 	.word	0x42f00000
 80018d8:	403e0000 	.word	0x403e0000
 80018dc:	3ff00000 	.word	0x3ff00000
 80018e0:	20000998 	.word	0x20000998

080018e4 <beep_ms>:

void beep_ms(int beep_time){
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  	TIM2->CCR1 = 50;
 80018ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018f0:	2232      	movs	r2, #50	; 0x32
 80018f2:	635a      	str	r2, [r3, #52]	; 0x34
  	HAL_Delay(beep_time);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f001 fffe 	bl	80038f8 <HAL_Delay>
  	TIM2->CCR1 = 0;
 80018fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001900:	2200      	movs	r2, #0
 8001902:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_GPIO_EXTI_Callback>:
//void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
//    //HAL_GPIO_TogglePin(GPIOF, DEBUG_SIGNAL_A_Pin);
//}

/* interrupts when encoder button is pressed */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == ENC_BUTTON_Pin && !sensor_values.button_pressed){ // If The INT Source Is EXTI Line9 (A9 Pin)
 8001916:	88fb      	ldrh	r3, [r7, #6]
 8001918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800191c:	d106      	bne.n	800192c <HAL_GPIO_EXTI_Callback+0x20>
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001920:	7e9b      	ldrb	r3, [r3, #26]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_GPIO_EXTI_Callback+0x20>
    	sensor_values.button_pressed = 1;
 8001926:	4b04      	ldr	r3, [pc, #16]	; (8001938 <HAL_GPIO_EXTI_Callback+0x2c>)
 8001928:	2201      	movs	r2, #1
 800192a:	769a      	strb	r2, [r3, #26]
    }
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	20000030 	.word	0x20000030

0800193c <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7f1b      	ldrb	r3, [r3, #28]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d102      	bne.n	8001952 <HAL_TIM_IC_CaptureCallback+0x16>
		beep_requested = 1;
 800194c:	4b04      	ldr	r3, [pc, #16]	; (8001960 <HAL_TIM_IC_CaptureCallback+0x24>)
 800194e:	2201      	movs	r2, #1
 8001950:	701a      	strb	r2, [r3, #0]
	}
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000275 	.word	0x20000275

08001964 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	80fb      	strh	r3, [r7, #6]
	TIM17->CCR1 = dutycycle;
 800196e:	4a04      	ldr	r2, [pc, #16]	; (8001980 <set_heater_duty+0x1c>)
 8001970:	88fb      	ldrh	r3, [r7, #6]
 8001972:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40014800 	.word	0x40014800
 8001984:	00000000 	.word	0x00000000

08001988 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001988:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800198c:	ed2d 8b04 	vpush	{d8-d9}
 8001990:	b08c      	sub	sp, #48	; 0x30
 8001992:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001994:	f001 ff3f 	bl	8003816 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001998:	f000 fada 	bl	8001f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800199c:	f000 fe54 	bl	8002648 <MX_GPIO_Init>
  MX_DMA_Init();
 80019a0:	f000 fe28 	bl	80025f4 <MX_DMA_Init>
  MX_TIM2_Init();
 80019a4:	f000 fc6c 	bl	8002280 <MX_TIM2_Init>
  MX_SPI1_Init();
 80019a8:	f000 fc2c 	bl	8002204 <MX_SPI1_Init>
  MX_ADC1_Init();
 80019ac:	f000 fb1c 	bl	8001fe8 <MX_ADC1_Init>
  MX_TIM17_Init();
 80019b0:	f000 fd5a 	bl	8002468 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 80019b4:	f000 fdd2 	bl	800255c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80019b8:	f000 fcd8 	bl	800236c <MX_TIM3_Init>
  MX_TIM16_Init();
 80019bc:	f000 fd2c 	bl	8002418 <MX_TIM16_Init>
  MX_I2C1_Init();
 80019c0:	f000 fbe0 	bl	8002184 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 80019c4:	213c      	movs	r1, #60	; 0x3c
 80019c6:	48b8      	ldr	r0, [pc, #736]	; (8001ca8 <main+0x320>)
 80019c8:	f006 fa6a 	bl	8007ea0 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80019cc:	2100      	movs	r1, #0
 80019ce:	48b7      	ldr	r0, [pc, #732]	; (8001cac <main+0x324>)
 80019d0:	f006 f8c0 	bl	8007b54 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80019d4:	2100      	movs	r1, #0
 80019d6:	48b6      	ldr	r0, [pc, #728]	; (8001cb0 <main+0x328>)
 80019d8:	f006 f8bc 	bl	8007b54 <HAL_TIM_PWM_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80019dc:	217f      	movs	r1, #127	; 0x7f
 80019de:	48b5      	ldr	r0, [pc, #724]	; (8001cb4 <main+0x32c>)
 80019e0:	f003 ff12 	bl	8005808 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, ADC_BUF_LEN);	//Start ADC DMA
 80019e4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019e8:	49b3      	ldr	r1, [pc, #716]	; (8001cb8 <main+0x330>)
 80019ea:	48b2      	ldr	r0, [pc, #712]	; (8001cb4 <main+0x32c>)
 80019ec:	f002 fc72 	bl	80042d4 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	/* Init and fill filter structures with initial values */
	handle = T210;		// Default handle
 80019f0:	4bb2      	ldr	r3, [pc, #712]	; (8001cbc <main+0x334>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
	set_heater_duty(0);
 80019f6:	2000      	movs	r0, #0
 80019f8:	f7ff ffb4 	bl	8001964 <set_heater_duty>
	for (int i = 0; i<40;i++){
 80019fc:	2300      	movs	r3, #0
 80019fe:	607b      	str	r3, [r7, #4]
 8001a00:	e00b      	b.n	8001a1a <main+0x92>
		get_bus_voltage();
 8001a02:	f7ff fb31 	bl	8001068 <get_bus_voltage>
		get_ambient_temp();
 8001a06:	f7ff fc5f 	bl	80012c8 <get_ambient_temp>
		get_actual_temperature();
 8001a0a:	f7ff fb55 	bl	80010b8 <get_actual_temperature>
		HAL_Delay(1);
 8001a0e:	2001      	movs	r0, #1
 8001a10:	f001 ff72 	bl	80038f8 <HAL_Delay>
	for (int i = 0; i<40;i++){
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3301      	adds	r3, #1
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2b27      	cmp	r3, #39	; 0x27
 8001a1e:	ddf0      	ble.n	8001a02 <main+0x7a>
	}

	/* Start-up beep */
	beep_ms(10);
 8001a20:	200a      	movs	r0, #10
 8001a22:	f7ff ff5f 	bl	80018e4 <beep_ms>
	HAL_Delay(100);
 8001a26:	2064      	movs	r0, #100	; 0x64
 8001a28:	f001 ff66 	bl	80038f8 <HAL_Delay>
	beep_ms(10);
 8001a2c:	200a      	movs	r0, #10
 8001a2e:	f7ff ff59 	bl	80018e4 <beep_ms>

	/* Initiate OLED display */
	init_OLED();
 8001a32:	f7ff fcab 	bl	800138c <init_OLED>

	/* If button is pressed during startup - Show SETTINGS and allow to release button. Then the user can choose between T210 and T245 handle */
	if (HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 0){
 8001a36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3e:	f004 fddf 	bl	8006600 <HAL_GPIO_ReadPin>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d155      	bne.n	8001af4 <main+0x16c>
		Paint_DrawString_EN(0, 0, " SETTINGS ", &Font16, 0x00, 0xff);
 8001a48:	23ff      	movs	r3, #255	; 0xff
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	4b9b      	ldr	r3, [pc, #620]	; (8001cc0 <main+0x338>)
 8001a52:	4a9c      	ldr	r2, [pc, #624]	; (8001cc4 <main+0x33c>)
 8001a54:	2100      	movs	r1, #0
 8001a56:	2000      	movs	r0, #0
 8001a58:	f009 ffa8 	bl	800b9ac <Paint_DrawString_EN>
		Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	2302      	movs	r3, #2
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	227f      	movs	r2, #127	; 0x7f
 8001a6e:	2110      	movs	r1, #16
 8001a70:	2000      	movs	r0, #0
 8001a72:	f009 fc27 	bl	800b2c4 <Paint_DrawLine>
		OLED_1in5_Display(black_image);
 8001a76:	4b94      	ldr	r3, [pc, #592]	; (8001cc8 <main+0x340>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f00a f919 	bl	800bcb2 <OLED_1in5_Display>
		Paint_Clear(BLACK);
 8001a80:	2000      	movs	r0, #0
 8001a82:	f009 fac9 	bl	800b018 <Paint_Clear>
		HAL_Delay(1000);
 8001a86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a8a:	f001 ff35 	bl	80038f8 <HAL_Delay>

		while(HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 1){
 8001a8e:	e028      	b.n	8001ae2 <main+0x15a>
			Paint_DrawString_EN(0, 0, " SETTINGS ", &Font16, 0x00, 0xff);
 8001a90:	23ff      	movs	r3, #255	; 0xff
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	2300      	movs	r3, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4b89      	ldr	r3, [pc, #548]	; (8001cc0 <main+0x338>)
 8001a9a:	4a8a      	ldr	r2, [pc, #552]	; (8001cc4 <main+0x33c>)
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f009 ff84 	bl	800b9ac <Paint_DrawString_EN>
			Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9302      	str	r3, [sp, #8]
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	9301      	str	r3, [sp, #4]
 8001aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	227f      	movs	r2, #127	; 0x7f
 8001ab6:	2110      	movs	r1, #16
 8001ab8:	2000      	movs	r0, #0
 8001aba:	f009 fc03 	bl	800b2c4 <Paint_DrawLine>

			Paint_DrawString_EN(3, 20, "Coming soon...:", &Font12, 0x00, 0xff);
 8001abe:	23ff      	movs	r3, #255	; 0xff
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	4b81      	ldr	r3, [pc, #516]	; (8001ccc <main+0x344>)
 8001ac8:	4a81      	ldr	r2, [pc, #516]	; (8001cd0 <main+0x348>)
 8001aca:	2114      	movs	r1, #20
 8001acc:	2003      	movs	r0, #3
 8001ace:	f009 ff6d 	bl	800b9ac <Paint_DrawString_EN>
			//else{
			//	Paint_DrawString_EN(55, 20, "T210", &Font12, 0x00, 0xff);
			//	Paint_DrawString_EN(90, 20, "T245", &Font12, 0xff, 0x00);
			//	handle = T245;
			//}
			OLED_1in5_Display(black_image);
 8001ad2:	4b7d      	ldr	r3, [pc, #500]	; (8001cc8 <main+0x340>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f00a f8eb 	bl	800bcb2 <OLED_1in5_Display>
			Paint_Clear(BLACK);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f009 fa9b 	bl	800b018 <Paint_Clear>
		while(HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 1){
 8001ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aea:	f004 fd89 	bl	8006600 <HAL_GPIO_ReadPin>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d0cd      	beq.n	8001a90 <main+0x108>
		}
	}

	/* Set initial encoder timer value */
	TIM3->CNT = 330;
 8001af4:	4b77      	ldr	r3, [pc, #476]	; (8001cd4 <main+0x34c>)
 8001af6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001afa:	625a      	str	r2, [r3, #36]	; 0x24

	/* Startup beep */
	beep_ms(10);
 8001afc:	200a      	movs	r0, #10
 8001afe:	f7ff fef1 	bl	80018e4 <beep_ms>

	/* Get handle-specific constants */
	get_handle_type();
 8001b02:	f7ff fe7f 	bl	8001804 <get_handle_type>

	/* Initiate PID controller */
	PID(&TPID, &sensor_values.actual_temperature, &heater_power, &sensor_values.set_temperature, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8001b06:	4b74      	ldr	r3, [pc, #464]	; (8001cd8 <main+0x350>)
 8001b08:	ed93 7b00 	vldr	d7, [r3]
 8001b0c:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <main+0x354>)
 8001b0e:	ed93 6b00 	vldr	d6, [r3]
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <main+0x358>)
 8001b14:	ed93 5b00 	vldr	d5, [r3]
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	eeb0 2a45 	vmov.f32	s4, s10
 8001b24:	eef0 2a65 	vmov.f32	s5, s11
 8001b28:	eeb0 1a46 	vmov.f32	s2, s12
 8001b2c:	eef0 1a66 	vmov.f32	s3, s13
 8001b30:	eeb0 0a47 	vmov.f32	s0, s14
 8001b34:	eef0 0a67 	vmov.f32	s1, s15
 8001b38:	4b6a      	ldr	r3, [pc, #424]	; (8001ce4 <main+0x35c>)
 8001b3a:	4a6b      	ldr	r2, [pc, #428]	; (8001ce8 <main+0x360>)
 8001b3c:	496b      	ldr	r1, [pc, #428]	; (8001cec <main+0x364>)
 8001b3e:	486c      	ldr	r0, [pc, #432]	; (8001cf0 <main+0x368>)
 8001b40:	f000 fe9e 	bl	8002880 <PID>
	PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001b44:	2101      	movs	r1, #1
 8001b46:	486a      	ldr	r0, [pc, #424]	; (8001cf0 <main+0x368>)
 8001b48:	f001 f829 	bl	8002b9e <PID_SetMode>
	PID_SetSampleTime(&TPID, 50);
 8001b4c:	2132      	movs	r1, #50	; 0x32
 8001b4e:	4868      	ldr	r0, [pc, #416]	; (8001cf0 <main+0x368>)
 8001b50:	f001 f9d4 	bl	8002efc <PID_SetSampleTime>
	PID_SetOutputLimits(&TPID, 0, 1000); 	// Set max and min output limit
 8001b54:	ed9f 1b4c 	vldr	d1, [pc, #304]	; 8001c88 <main+0x300>
 8001b58:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8001c90 <main+0x308>
 8001b5c:	4864      	ldr	r0, [pc, #400]	; (8001cf0 <main+0x368>)
 8001b5e:	f001 f83c 	bl	8002bda <PID_SetOutputLimits>
	PID_SetILimits(&TPID, -200, 200); 		// Set max and min I limit
 8001b62:	ed9f 1b4d 	vldr	d1, [pc, #308]	; 8001c98 <main+0x310>
 8001b66:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8001ca0 <main+0x318>
 8001b6a:	4861      	ldr	r0, [pc, #388]	; (8001cf0 <main+0x368>)
 8001b6c:	f001 f8a3 	bl	8002cb6 <PID_SetILimits>

	while (1){
	/* beep if encoder value is changed */
	if(beep_requested){
 8001b70:	4b60      	ldr	r3, [pc, #384]	; (8001cf4 <main+0x36c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <main+0x1fc>
		beep_ms(5);
 8001b78:	2005      	movs	r0, #5
 8001b7a:	f7ff feb3 	bl	80018e4 <beep_ms>
		beep_requested = 0;
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <main+0x36c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
	}

	/* Structure to toggle between heating_halted true/false at each press of the encoder button */
	if ((sensor_values.button_pressed == 1) && (sensor_values.button_read == 0)){
 8001b84:	4b57      	ldr	r3, [pc, #348]	; (8001ce4 <main+0x35c>)
 8001b86:	7e9b      	ldrb	r3, [r3, #26]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d125      	bne.n	8001bd8 <main+0x250>
 8001b8c:	4b55      	ldr	r3, [pc, #340]	; (8001ce4 <main+0x35c>)
 8001b8e:	7edb      	ldrb	r3, [r3, #27]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d121      	bne.n	8001bd8 <main+0x250>
		sensor_values.button_read = 1;
 8001b94:	4b53      	ldr	r3, [pc, #332]	; (8001ce4 <main+0x35c>)
 8001b96:	2201      	movs	r2, #1
 8001b98:	76da      	strb	r2, [r3, #27]
		beep_requested = 1;
 8001b9a:	4b56      	ldr	r3, [pc, #344]	; (8001cf4 <main+0x36c>)
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if (active_state == RUN){
 8001ba0:	4b55      	ldr	r3, [pc, #340]	; (8001cf8 <main+0x370>)
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d103      	bne.n	8001bb0 <main+0x228>
			active_state = HALTED;
 8001ba8:	4b53      	ldr	r3, [pc, #332]	; (8001cf8 <main+0x370>)
 8001baa:	2203      	movs	r2, #3
 8001bac:	701a      	strb	r2, [r3, #0]
 8001bae:	e00e      	b.n	8001bce <main+0x246>
		}
		else if (active_state == HALTED){
 8001bb0:	4b51      	ldr	r3, [pc, #324]	; (8001cf8 <main+0x370>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d103      	bne.n	8001bc0 <main+0x238>
			active_state = RUN;
 8001bb8:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <main+0x370>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
 8001bbe:	e006      	b.n	8001bce <main+0x246>
		}
		else if (active_state == EMERGENCY_SLEEP){
 8001bc0:	4b4d      	ldr	r3, [pc, #308]	; (8001cf8 <main+0x370>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d102      	bne.n	8001bce <main+0x246>
			active_state = RUN;
 8001bc8:	4b4b      	ldr	r3, [pc, #300]	; (8001cf8 <main+0x370>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	701a      	strb	r2, [r3, #0]
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 8001bce:	f001 fe87 	bl	80038e0 <HAL_GetTick>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a49      	ldr	r2, [pc, #292]	; (8001cfc <main+0x374>)
 8001bd6:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.button_read == 1) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 8001bd8:	4b42      	ldr	r3, [pc, #264]	; (8001ce4 <main+0x35c>)
 8001bda:	7edb      	ldrb	r3, [r3, #27]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d10f      	bne.n	8001c00 <main+0x278>
 8001be0:	f001 fe7e 	bl	80038e0 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	4b45      	ldr	r3, [pc, #276]	; (8001cfc <main+0x374>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	1ad2      	subs	r2, r2, r3
 8001bec:	4b44      	ldr	r3, [pc, #272]	; (8001d00 <main+0x378>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d305      	bcc.n	8001c00 <main+0x278>
		sensor_values.button_pressed = 0;
 8001bf4:	4b3b      	ldr	r3, [pc, #236]	; (8001ce4 <main+0x35c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	769a      	strb	r2, [r3, #26]
		sensor_values.button_read = 0;
 8001bfa:	4b3a      	ldr	r3, [pc, #232]	; (8001ce4 <main+0x35c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	76da      	strb	r2, [r3, #27]
	}

	// Set handle type depending on HANDLE_DETECTION_Pin status
	if(HAL_GetTick() - previous_millis_HANDLE_update >= interval_HANDLE_update){
 8001c00:	f001 fe6e 	bl	80038e0 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b3f      	ldr	r3, [pc, #252]	; (8001d04 <main+0x37c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	1ad2      	subs	r2, r2, r3
 8001c0c:	4b3e      	ldr	r3, [pc, #248]	; (8001d08 <main+0x380>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d306      	bcc.n	8001c22 <main+0x29a>
		get_handle_type();
 8001c14:	f7ff fdf6 	bl	8001804 <get_handle_type>
		previous_millis_HANDLE_update = HAL_GetTick();
 8001c18:	f001 fe62 	bl	80038e0 <HAL_GetTick>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a39      	ldr	r2, [pc, #228]	; (8001d04 <main+0x37c>)
 8001c20:	6013      	str	r3, [r2, #0]
	}

	if(HAL_GetTick() - previous_millis_PID_update >= interval_PID_update){
 8001c22:	f001 fe5d 	bl	80038e0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	4b38      	ldr	r3, [pc, #224]	; (8001d0c <main+0x384>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	1ad2      	subs	r2, r2, r3
 8001c2e:	4b38      	ldr	r3, [pc, #224]	; (8001d10 <main+0x388>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	f0c0 80c7 	bcc.w	8001dc6 <main+0x43e>
		get_set_temperature();
 8001c38:	f7ff fdac 	bl	8001794 <get_set_temperature>
		get_stand_status();
 8001c3c:	f7ff fdcc 	bl	80017d8 <get_stand_status>
		get_bus_voltage();
 8001c40:	f7ff fa12 	bl	8001068 <get_bus_voltage>
		// ----------------------------------------------
		//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
		//sensor_values.set_temperature = temperature_custom;
		// ----------------------------------------------

		set_heater_duty(0);
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7ff fe8d 	bl	8001964 <set_heater_duty>
		HAL_Delay(10); // Wait to let the thermocouple voltage stabilize before taking measurement
 8001c4a:	200a      	movs	r0, #10
 8001c4c:	f001 fe54 	bl	80038f8 <HAL_Delay>
		get_actual_temperature();
 8001c50:	f7ff fa32 	bl	80010b8 <get_actual_temperature>
		PID_Compute(&TPID);
 8001c54:	4826      	ldr	r0, [pc, #152]	; (8001cf0 <main+0x368>)
 8001c56:	f000 fe5f 	bl	8002918 <PID_Compute>

		/* If handle is in stand set state to SLEEP */
		if(sensor_values.in_stand){
 8001c5a:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <main+0x35c>)
 8001c5c:	7e1b      	ldrb	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <main+0x2e0>
			active_state = SLEEP;
 8001c62:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <main+0x370>)
 8001c64:	2201      	movs	r2, #1
 8001c66:	701a      	strb	r2, [r3, #0]
		}

		/* Main switch */
		switch (active_state) {
 8001c68:	4b23      	ldr	r3, [pc, #140]	; (8001cf8 <main+0x370>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b03      	cmp	r3, #3
 8001c6e:	f200 8099 	bhi.w	8001da4 <main+0x41c>
 8001c72:	a201      	add	r2, pc, #4	; (adr r2, 8001c78 <main+0x2f0>)
 8001c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c78:	08001d25 	.word	0x08001d25
 8001c7c:	08001d75 	.word	0x08001d75
 8001c80:	08001d15 	.word	0x08001d15
 8001c84:	08001d93 	.word	0x08001d93
 8001c88:	00000000 	.word	0x00000000
 8001c8c:	408f4000 	.word	0x408f4000
	...
 8001c9c:	40690000 	.word	0x40690000
 8001ca0:	00000000 	.word	0x00000000
 8001ca4:	c0690000 	.word	0xc0690000
 8001ca8:	20000824 	.word	0x20000824
 8001cac:	200008bc 	.word	0x200008bc
 8001cb0:	200007d8 	.word	0x200007d8
 8001cb4:	2000065c 	.word	0x2000065c
 8001cb8:	200002d8 	.word	0x200002d8
 8001cbc:	20000274 	.word	0x20000274
 8001cc0:	20000064 	.word	0x20000064
 8001cc4:	0800fa00 	.word	0x0800fa00
 8001cc8:	20000278 	.word	0x20000278
 8001ccc:	2000005c 	.word	0x2000005c
 8001cd0:	0800fa0c 	.word	0x0800fa0c
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	20000020 	.word	0x20000020
 8001cdc:	20000298 	.word	0x20000298
 8001ce0:	200002a0 	.word	0x200002a0
 8001ce4:	20000030 	.word	0x20000030
 8001ce8:	200005f8 	.word	0x200005f8
 8001cec:	20000038 	.word	0x20000038
 8001cf0:	20000998 	.word	0x20000998
 8001cf4:	20000275 	.word	0x20000275
 8001cf8:	2000001c 	.word	0x2000001c
 8001cfc:	2000028c 	.word	0x2000028c
 8001d00:	20000014 	.word	0x20000014
 8001d04:	20000288 	.word	0x20000288
 8001d08:	20000010 	.word	0x20000010
 8001d0c:	20000284 	.word	0x20000284
 8001d10:	2000000c 	.word	0x2000000c
			case EMERGENCY_SLEEP: {
				heater_power_duty_cycle = 0;
 8001d14:	497c      	ldr	r1, [pc, #496]	; (8001f08 <main+0x580>)
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	f04f 0300 	mov.w	r3, #0
 8001d1e:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001d22:	e03f      	b.n	8001da4 <main+0x41c>
			}
			case RUN: {
				/* calculate duty cycle for PWM */
				heater_power_duty_cycle = heater_power*(max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8001d24:	4b79      	ldr	r3, [pc, #484]	; (8001f0c <main+0x584>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe fc35 	bl	8000598 <__aeabi_f2d>
 8001d2e:	a374      	add	r3, pc, #464	; (adr r3, 8001f00 <main+0x578>)
 8001d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d34:	f7fe fc88 	bl	8000648 <__aeabi_dmul>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	4614      	mov	r4, r2
 8001d3e:	461d      	mov	r5, r3
 8001d40:	4b73      	ldr	r3, [pc, #460]	; (8001f10 <main+0x588>)
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fc27 	bl	8000598 <__aeabi_f2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4620      	mov	r0, r4
 8001d50:	4629      	mov	r1, r5
 8001d52:	f7fe fda3 	bl	800089c <__aeabi_ddiv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	4b6d      	ldr	r3, [pc, #436]	; (8001f14 <main+0x58c>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fc70 	bl	8000648 <__aeabi_dmul>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4966      	ldr	r1, [pc, #408]	; (8001f08 <main+0x580>)
 8001d6e:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001d72:	e017      	b.n	8001da4 <main+0x41c>
			}
			case SLEEP: {
				heater_power_duty_cycle = 0;
 8001d74:	4964      	ldr	r1, [pc, #400]	; (8001f08 <main+0x580>)
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	f04f 0300 	mov.w	r3, #0
 8001d7e:	e9c1 2300 	strd	r2, r3, [r1]
				if(!sensor_values.in_stand){
 8001d82:	4b63      	ldr	r3, [pc, #396]	; (8001f10 <main+0x588>)
 8001d84:	7e1b      	ldrb	r3, [r3, #24]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d10b      	bne.n	8001da2 <main+0x41a>
					active_state = RUN;
 8001d8a:	4b63      	ldr	r3, [pc, #396]	; (8001f18 <main+0x590>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
					}
				break;
 8001d90:	e007      	b.n	8001da2 <main+0x41a>
			}
			case HALTED: {
				heater_power_duty_cycle = 0;
 8001d92:	495d      	ldr	r1, [pc, #372]	; (8001f08 <main+0x580>)
 8001d94:	f04f 0200 	mov.w	r2, #0
 8001d98:	f04f 0300 	mov.w	r3, #0
 8001d9c:	e9c1 2300 	strd	r2, r3, [r1]
				break;
 8001da0:	e000      	b.n	8001da4 <main+0x41c>
				break;
 8001da2:	bf00      	nop
			}
		}
		set_heater_duty(heater_power_duty_cycle);
 8001da4:	4b58      	ldr	r3, [pc, #352]	; (8001f08 <main+0x580>)
 8001da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001daa:	4610      	mov	r0, r2
 8001dac:	4619      	mov	r1, r3
 8001dae:	f7fe ff23 	bl	8000bf8 <__aeabi_d2uiz>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fdd4 	bl	8001964 <set_heater_duty>
		previous_millis_PID_update = HAL_GetTick();
 8001dbc:	f001 fd90 	bl	80038e0 <HAL_GetTick>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a56      	ldr	r2, [pc, #344]	; (8001f1c <main+0x594>)
 8001dc4:	6013      	str	r3, [r2, #0]
	}

	/* Function to set state to SLEEP if iron is in RUN state for longer than EMERGENCY_shutdown_time */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8001dc6:	4b52      	ldr	r3, [pc, #328]	; (8001f10 <main+0x588>)
 8001dc8:	7e5b      	ldrb	r3, [r3, #25]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <main+0x458>
 8001dce:	4b52      	ldr	r3, [pc, #328]	; (8001f18 <main+0x590>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d104      	bne.n	8001de0 <main+0x458>
		previous_millis_left_stand = HAL_GetTick();
 8001dd6:	f001 fd83 	bl	80038e0 <HAL_GetTick>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	4a50      	ldr	r2, [pc, #320]	; (8001f20 <main+0x598>)
 8001dde:	6013      	str	r3, [r2, #0]
	}
	if ((!sensor_values.in_stand) && (HAL_GetTick() - previous_millis_left_stand >= EMERGENCY_shutdown_time) && active_state == RUN){
 8001de0:	4b4b      	ldr	r3, [pc, #300]	; (8001f10 <main+0x588>)
 8001de2:	7e1b      	ldrb	r3, [r3, #24]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d113      	bne.n	8001e10 <main+0x488>
 8001de8:	f001 fd7a 	bl	80038e0 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b4c      	ldr	r3, [pc, #304]	; (8001f20 <main+0x598>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1ad2      	subs	r2, r2, r3
 8001df4:	4b4b      	ldr	r3, [pc, #300]	; (8001f24 <main+0x59c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d309      	bcc.n	8001e10 <main+0x488>
 8001dfc:	4b46      	ldr	r3, [pc, #280]	; (8001f18 <main+0x590>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d105      	bne.n	8001e10 <main+0x488>
		active_state = EMERGENCY_SLEEP;
 8001e04:	4b44      	ldr	r3, [pc, #272]	; (8001f18 <main+0x590>)
 8001e06:	2202      	movs	r2, #2
 8001e08:	701a      	strb	r2, [r3, #0]
		beep_requested = 1;
 8001e0a:	4b47      	ldr	r3, [pc, #284]	; (8001f28 <main+0x5a0>)
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	701a      	strb	r2, [r3, #0]
	}
	sensor_values.previous_state = active_state;
 8001e10:	4b41      	ldr	r3, [pc, #260]	; (8001f18 <main+0x590>)
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	4b3e      	ldr	r3, [pc, #248]	; (8001f10 <main+0x588>)
 8001e16:	765a      	strb	r2, [r3, #25]

	/* Send debug information over serial */
	if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8001e18:	f001 fd62 	bl	80038e0 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	4b43      	ldr	r3, [pc, #268]	; (8001f2c <main+0x5a4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	1ad2      	subs	r2, r2, r3
 8001e24:	4b42      	ldr	r3, [pc, #264]	; (8001f30 <main+0x5a8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	d352      	bcc.n	8001ed2 <main+0x54a>
		memset(&buffer, '\0', sizeof(buffer));
 8001e2c:	2228      	movs	r2, #40	; 0x28
 8001e2e:	2100      	movs	r1, #0
 8001e30:	4840      	ldr	r0, [pc, #256]	; (8001f34 <main+0x5ac>)
 8001e32:	f00a feaf 	bl	800cb94 <memset>
		sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n", sensor_values.actual_temperature, sensor_values.set_temperature,heater_power/10,PID_GetPpart(&TPID)/10, PID_GetIpart(&TPID)/10, PID_GetDpart(&TPID))/10;
 8001e36:	4b36      	ldr	r3, [pc, #216]	; (8001f10 <main+0x588>)
 8001e38:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001e3c:	4b34      	ldr	r3, [pc, #208]	; (8001f10 <main+0x588>)
 8001e3e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e42:	4b34      	ldr	r3, [pc, #208]	; (8001f14 <main+0x58c>)
 8001e44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e48:	f04f 0200 	mov.w	r2, #0
 8001e4c:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <main+0x5b0>)
 8001e4e:	f7fe fd25 	bl	800089c <__aeabi_ddiv>
 8001e52:	4602      	mov	r2, r0
 8001e54:	460b      	mov	r3, r1
 8001e56:	4692      	mov	sl, r2
 8001e58:	469b      	mov	fp, r3
 8001e5a:	4838      	ldr	r0, [pc, #224]	; (8001f3c <main+0x5b4>)
 8001e5c:	f001 f889 	bl	8002f72 <PID_GetPpart>
 8001e60:	ec51 0b10 	vmov	r0, r1, d0
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	4b33      	ldr	r3, [pc, #204]	; (8001f38 <main+0x5b0>)
 8001e6a:	f7fe fd17 	bl	800089c <__aeabi_ddiv>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	ec43 2b18 	vmov	d8, r2, r3
 8001e76:	4831      	ldr	r0, [pc, #196]	; (8001f3c <main+0x5b4>)
 8001e78:	f001 f88d 	bl	8002f96 <PID_GetIpart>
 8001e7c:	ec51 0b10 	vmov	r0, r1, d0
 8001e80:	f04f 0200 	mov.w	r2, #0
 8001e84:	4b2c      	ldr	r3, [pc, #176]	; (8001f38 <main+0x5b0>)
 8001e86:	f7fe fd09 	bl	800089c <__aeabi_ddiv>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	ec43 2b19 	vmov	d9, r2, r3
 8001e92:	482a      	ldr	r0, [pc, #168]	; (8001f3c <main+0x5b4>)
 8001e94:	f001 f891 	bl	8002fba <PID_GetDpart>
 8001e98:	eeb0 7a40 	vmov.f32	s14, s0
 8001e9c:	eef0 7a60 	vmov.f32	s15, s1
 8001ea0:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001ea4:	ed8d 9b06 	vstr	d9, [sp, #24]
 8001ea8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8001eac:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001eb0:	e9cd 4500 	strd	r4, r5, [sp]
 8001eb4:	4642      	mov	r2, r8
 8001eb6:	464b      	mov	r3, r9
 8001eb8:	4921      	ldr	r1, [pc, #132]	; (8001f40 <main+0x5b8>)
 8001eba:	481e      	ldr	r0, [pc, #120]	; (8001f34 <main+0x5ac>)
 8001ebc:	f00a fd72 	bl	800c9a4 <siprintf>
		debugPrint(&huart2,buffer);
 8001ec0:	491c      	ldr	r1, [pc, #112]	; (8001f34 <main+0x5ac>)
 8001ec2:	4820      	ldr	r0, [pc, #128]	; (8001f44 <main+0x5bc>)
 8001ec4:	f7ff fa44 	bl	8001350 <debugPrint>
		previous_millis_debug = HAL_GetTick();
 8001ec8:	f001 fd0a 	bl	80038e0 <HAL_GetTick>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4a17      	ldr	r2, [pc, #92]	; (8001f2c <main+0x5a4>)
 8001ed0:	6013      	str	r3, [r2, #0]
	}

	/* Update display */
	if(HAL_GetTick() - previous_millis_display >= interval_display){
 8001ed2:	f001 fd05 	bl	80038e0 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <main+0x5c0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	1ad2      	subs	r2, r2, r3
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <main+0x5c4>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	f4ff ae44 	bcc.w	8001b70 <main+0x1e8>
		get_ambient_temp();
 8001ee8:	f7ff f9ee 	bl	80012c8 <get_ambient_temp>
		update_OLED();
 8001eec:	f7ff fa8c 	bl	8001408 <update_OLED>
		previous_millis_display = HAL_GetTick();
 8001ef0:	f001 fcf6 	bl	80038e0 <HAL_GetTick>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	4a14      	ldr	r2, [pc, #80]	; (8001f48 <main+0x5c0>)
 8001ef8:	6013      	str	r3, [r2, #0]
	if(beep_requested){
 8001efa:	e639      	b.n	8001b70 <main+0x1e8>
 8001efc:	f3af 8000 	nop.w
 8001f00:	eb851eb8 	.word	0xeb851eb8
 8001f04:	3fbeb851 	.word	0x3fbeb851
 8001f08:	20000600 	.word	0x20000600
 8001f0c:	200002d0 	.word	0x200002d0
 8001f10:	20000030 	.word	0x20000030
 8001f14:	200005f8 	.word	0x200005f8
 8001f18:	2000001c 	.word	0x2000001c
 8001f1c:	20000284 	.word	0x20000284
 8001f20:	20000290 	.word	0x20000290
 8001f24:	20000018 	.word	0x20000018
 8001f28:	20000275 	.word	0x20000275
 8001f2c:	20000280 	.word	0x20000280
 8001f30:	20000008 	.word	0x20000008
 8001f34:	200002a8 	.word	0x200002a8
 8001f38:	40240000 	.word	0x40240000
 8001f3c:	20000998 	.word	0x20000998
 8001f40:	0800fa1c 	.word	0x0800fa1c
 8001f44:	20000908 	.word	0x20000908
 8001f48:	2000027c 	.word	0x2000027c
 8001f4c:	20000004 	.word	0x20000004

08001f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b094      	sub	sp, #80	; 0x50
 8001f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f56:	f107 0318 	add.w	r3, r7, #24
 8001f5a:	2238      	movs	r2, #56	; 0x38
 8001f5c:	2100      	movs	r1, #0
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f00a fe18 	bl	800cb94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2200      	movs	r2, #0
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	605a      	str	r2, [r3, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
 8001f6e:	60da      	str	r2, [r3, #12]
 8001f70:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f004 fcb2 	bl	80068dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f82:	2340      	movs	r3, #64	; 0x40
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f86:	2302      	movs	r3, #2
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f8a:	2302      	movs	r3, #2
 8001f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001f8e:	2304      	movs	r3, #4
 8001f90:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001f92:	2355      	movs	r3, #85	; 0x55
 8001f94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f96:	2302      	movs	r3, #2
 8001f98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fa2:	f107 0318 	add.w	r3, r7, #24
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f004 fd4c 	bl	8006a44 <HAL_RCC_OscConfig>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001fb2:	f000 fbe5 	bl	8002780 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fb6:	230f      	movs	r3, #15
 8001fb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	2104      	movs	r1, #4
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f005 f850 	bl	8007074 <HAL_RCC_ClockConfig>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001fda:	f000 fbd1 	bl	8002780 <Error_Handler>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	3750      	adds	r7, #80	; 0x50
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b092      	sub	sp, #72	; 0x48
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001fee:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	601a      	str	r2, [r3, #0]
 8001ff6:	605a      	str	r2, [r3, #4]
 8001ff8:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001ffa:	f107 0320 	add.w	r3, r7, #32
 8001ffe:	2200      	movs	r2, #0
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	605a      	str	r2, [r3, #4]
 8002004:	609a      	str	r2, [r3, #8]
 8002006:	60da      	str	r2, [r3, #12]
 8002008:	611a      	str	r2, [r3, #16]
 800200a:	615a      	str	r2, [r3, #20]
 800200c:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 800200e:	463b      	mov	r3, r7
 8002010:	2220      	movs	r2, #32
 8002012:	2100      	movs	r1, #0
 8002014:	4618      	mov	r0, r3
 8002016:	f00a fdbd 	bl	800cb94 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800201a:	4b54      	ldr	r3, [pc, #336]	; (800216c <MX_ADC1_Init+0x184>)
 800201c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002020:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002022:	4b52      	ldr	r3, [pc, #328]	; (800216c <MX_ADC1_Init+0x184>)
 8002024:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002028:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800202a:	4b50      	ldr	r3, [pc, #320]	; (800216c <MX_ADC1_Init+0x184>)
 800202c:	2200      	movs	r2, #0
 800202e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002030:	4b4e      	ldr	r3, [pc, #312]	; (800216c <MX_ADC1_Init+0x184>)
 8002032:	2200      	movs	r2, #0
 8002034:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8002036:	4b4d      	ldr	r3, [pc, #308]	; (800216c <MX_ADC1_Init+0x184>)
 8002038:	2200      	movs	r2, #0
 800203a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800203c:	4b4b      	ldr	r3, [pc, #300]	; (800216c <MX_ADC1_Init+0x184>)
 800203e:	2201      	movs	r2, #1
 8002040:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002042:	4b4a      	ldr	r3, [pc, #296]	; (800216c <MX_ADC1_Init+0x184>)
 8002044:	2204      	movs	r2, #4
 8002046:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002048:	4b48      	ldr	r3, [pc, #288]	; (800216c <MX_ADC1_Init+0x184>)
 800204a:	2200      	movs	r2, #0
 800204c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800204e:	4b47      	ldr	r3, [pc, #284]	; (800216c <MX_ADC1_Init+0x184>)
 8002050:	2201      	movs	r2, #1
 8002052:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8002054:	4b45      	ldr	r3, [pc, #276]	; (800216c <MX_ADC1_Init+0x184>)
 8002056:	2204      	movs	r2, #4
 8002058:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800205a:	4b44      	ldr	r3, [pc, #272]	; (800216c <MX_ADC1_Init+0x184>)
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002062:	4b42      	ldr	r3, [pc, #264]	; (800216c <MX_ADC1_Init+0x184>)
 8002064:	2200      	movs	r2, #0
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002068:	4b40      	ldr	r3, [pc, #256]	; (800216c <MX_ADC1_Init+0x184>)
 800206a:	2200      	movs	r2, #0
 800206c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800206e:	4b3f      	ldr	r3, [pc, #252]	; (800216c <MX_ADC1_Init+0x184>)
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002076:	4b3d      	ldr	r3, [pc, #244]	; (800216c <MX_ADC1_Init+0x184>)
 8002078:	2200      	movs	r2, #0
 800207a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800207c:	4b3b      	ldr	r3, [pc, #236]	; (800216c <MX_ADC1_Init+0x184>)
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002084:	4839      	ldr	r0, [pc, #228]	; (800216c <MX_ADC1_Init+0x184>)
 8002086:	f001 ff9b 	bl	8003fc0 <HAL_ADC_Init>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002090:	f000 fb76 	bl	8002780 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002094:	2300      	movs	r3, #0
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002098:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800209c:	4619      	mov	r1, r3
 800209e:	4833      	ldr	r0, [pc, #204]	; (800216c <MX_ADC1_Init+0x184>)
 80020a0:	f003 fc46 	bl	8005930 <HAL_ADCEx_MultiModeConfigChannel>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80020aa:	f000 fb69 	bl	8002780 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80020ae:	4b30      	ldr	r3, [pc, #192]	; (8002170 <MX_ADC1_Init+0x188>)
 80020b0:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 80020b2:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 80020b6:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 80020b8:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <MX_ADC1_Init+0x18c>)
 80020ba:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 80020bc:	2301      	movs	r3, #1
 80020be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 100;
 80020c2:	2364      	movs	r3, #100	; 0x64
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 80020c6:	2300      	movs	r3, #0
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 80020ca:	2300      	movs	r3, #0
 80020cc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 80020ce:	f107 0320 	add.w	r3, r7, #32
 80020d2:	4619      	mov	r1, r3
 80020d4:	4825      	ldr	r0, [pc, #148]	; (800216c <MX_ADC1_Init+0x184>)
 80020d6:	f002 ffe3 	bl	80050a0 <HAL_ADC_AnalogWDGConfig>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80020e0:	f000 fb4e 	bl	8002780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020e4:	4b24      	ldr	r3, [pc, #144]	; (8002178 <MX_ADC1_Init+0x190>)
 80020e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020e8:	2306      	movs	r3, #6
 80020ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80020ec:	2304      	movs	r3, #4
 80020ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80020f0:	237f      	movs	r3, #127	; 0x7f
 80020f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80020f4:	2304      	movs	r3, #4
 80020f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80020f8:	2300      	movs	r3, #0
 80020fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020fc:	463b      	mov	r3, r7
 80020fe:	4619      	mov	r1, r3
 8002100:	481a      	ldr	r0, [pc, #104]	; (800216c <MX_ADC1_Init+0x184>)
 8002102:	f002 fbdd 	bl	80048c0 <HAL_ADC_ConfigChannel>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 800210c:	f000 fb38 	bl	8002780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <MX_ADC1_Init+0x18c>)
 8002112:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002114:	230c      	movs	r3, #12
 8002116:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002118:	463b      	mov	r3, r7
 800211a:	4619      	mov	r1, r3
 800211c:	4813      	ldr	r0, [pc, #76]	; (800216c <MX_ADC1_Init+0x184>)
 800211e:	f002 fbcf 	bl	80048c0 <HAL_ADC_ConfigChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8002128:	f000 fb2a 	bl	8002780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800212c:	4b13      	ldr	r3, [pc, #76]	; (800217c <MX_ADC1_Init+0x194>)
 800212e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002130:	2312      	movs	r3, #18
 8002132:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002134:	463b      	mov	r3, r7
 8002136:	4619      	mov	r1, r3
 8002138:	480c      	ldr	r0, [pc, #48]	; (800216c <MX_ADC1_Init+0x184>)
 800213a:	f002 fbc1 	bl	80048c0 <HAL_ADC_ConfigChannel>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8002144:	f000 fb1c 	bl	8002780 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002148:	4b0d      	ldr	r3, [pc, #52]	; (8002180 <MX_ADC1_Init+0x198>)
 800214a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800214c:	2318      	movs	r3, #24
 800214e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002150:	463b      	mov	r3, r7
 8002152:	4619      	mov	r1, r3
 8002154:	4805      	ldr	r0, [pc, #20]	; (800216c <MX_ADC1_Init+0x184>)
 8002156:	f002 fbb3 	bl	80048c0 <HAL_ADC_ConfigChannel>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8002160:	f000 fb0e 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	3748      	adds	r7, #72	; 0x48
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	2000065c 	.word	0x2000065c
 8002170:	7dc00000 	.word	0x7dc00000
 8002174:	08600004 	.word	0x08600004
 8002178:	04300002 	.word	0x04300002
 800217c:	10c00010 	.word	0x10c00010
 8002180:	3ef08000 	.word	0x3ef08000

08002184 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002188:	4b1b      	ldr	r3, [pc, #108]	; (80021f8 <MX_I2C1_Init+0x74>)
 800218a:	4a1c      	ldr	r2, [pc, #112]	; (80021fc <MX_I2C1_Init+0x78>)
 800218c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800218e:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <MX_I2C1_Init+0x74>)
 8002190:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <MX_I2C1_Init+0x7c>)
 8002192:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002194:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <MX_I2C1_Init+0x74>)
 8002196:	2200      	movs	r2, #0
 8002198:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800219a:	4b17      	ldr	r3, [pc, #92]	; (80021f8 <MX_I2C1_Init+0x74>)
 800219c:	2201      	movs	r2, #1
 800219e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <MX_I2C1_Init+0x74>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021a6:	4b14      	ldr	r3, [pc, #80]	; (80021f8 <MX_I2C1_Init+0x74>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021ac:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <MX_I2C1_Init+0x74>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021b2:	4b11      	ldr	r3, [pc, #68]	; (80021f8 <MX_I2C1_Init+0x74>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021b8:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <MX_I2C1_Init+0x74>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021be:	480e      	ldr	r0, [pc, #56]	; (80021f8 <MX_I2C1_Init+0x74>)
 80021c0:	f004 fa66 	bl	8006690 <HAL_I2C_Init>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021ca:	f000 fad9 	bl	8002780 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021ce:	2100      	movs	r1, #0
 80021d0:	4809      	ldr	r0, [pc, #36]	; (80021f8 <MX_I2C1_Init+0x74>)
 80021d2:	f004 faec 	bl	80067ae <HAL_I2CEx_ConfigAnalogFilter>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021dc:	f000 fad0 	bl	8002780 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021e0:	2100      	movs	r1, #0
 80021e2:	4805      	ldr	r0, [pc, #20]	; (80021f8 <MX_I2C1_Init+0x74>)
 80021e4:	f004 fb2e 	bl	8006844 <HAL_I2CEx_ConfigDigitalFilter>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021ee:	f000 fac7 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021f2:	bf00      	nop
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	20000728 	.word	0x20000728
 80021fc:	40005400 	.word	0x40005400
 8002200:	30a0a7fb 	.word	0x30a0a7fb

08002204 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002208:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <MX_SPI1_Init+0x74>)
 800220a:	4a1c      	ldr	r2, [pc, #112]	; (800227c <MX_SPI1_Init+0x78>)
 800220c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <MX_SPI1_Init+0x74>)
 8002210:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002214:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002216:	4b18      	ldr	r3, [pc, #96]	; (8002278 <MX_SPI1_Init+0x74>)
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800221c:	4b16      	ldr	r3, [pc, #88]	; (8002278 <MX_SPI1_Init+0x74>)
 800221e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002222:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_SPI1_Init+0x74>)
 8002226:	2202      	movs	r2, #2
 8002228:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <MX_SPI1_Init+0x74>)
 800222c:	2201      	movs	r2, #1
 800222e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_SPI1_Init+0x74>)
 8002232:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002236:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002238:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_SPI1_Init+0x74>)
 800223a:	2218      	movs	r2, #24
 800223c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_SPI1_Init+0x74>)
 8002240:	2200      	movs	r2, #0
 8002242:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_SPI1_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_SPI1_Init+0x74>)
 800224c:	2200      	movs	r2, #0
 800224e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_SPI1_Init+0x74>)
 8002252:	2207      	movs	r2, #7
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_SPI1_Init+0x74>)
 8002258:	2200      	movs	r2, #0
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_SPI1_Init+0x74>)
 800225e:	2200      	movs	r2, #0
 8002260:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_SPI1_Init+0x74>)
 8002264:	f005 fb12 	bl	800788c <HAL_SPI_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800226e:	f000 fa87 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	20000774 	.word	0x20000774
 800227c:	40013000 	.word	0x40013000

08002280 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	f107 031c 	add.w	r3, r7, #28
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022a0:	463b      	mov	r3, r7
 80022a2:	2200      	movs	r2, #0
 80022a4:	601a      	str	r2, [r3, #0]
 80022a6:	605a      	str	r2, [r3, #4]
 80022a8:	609a      	str	r2, [r3, #8]
 80022aa:	60da      	str	r2, [r3, #12]
 80022ac:	611a      	str	r2, [r3, #16]
 80022ae:	615a      	str	r2, [r3, #20]
 80022b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b2:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <MX_TIM2_Init+0xe8>)
 80022b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <MX_TIM2_Init+0xe8>)
 80022bc:	f240 321f 	movw	r2, #799	; 0x31f
 80022c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b29      	ldr	r3, [pc, #164]	; (8002368 <MX_TIM2_Init+0xe8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80022c8:	4b27      	ldr	r3, [pc, #156]	; (8002368 <MX_TIM2_Init+0xe8>)
 80022ca:	2264      	movs	r2, #100	; 0x64
 80022cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ce:	4b26      	ldr	r3, [pc, #152]	; (8002368 <MX_TIM2_Init+0xe8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022d4:	4b24      	ldr	r3, [pc, #144]	; (8002368 <MX_TIM2_Init+0xe8>)
 80022d6:	2280      	movs	r2, #128	; 0x80
 80022d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022da:	4823      	ldr	r0, [pc, #140]	; (8002368 <MX_TIM2_Init+0xe8>)
 80022dc:	f005 fb81 	bl	80079e2 <HAL_TIM_Base_Init>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80022e6:	f000 fa4b 	bl	8002780 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022f4:	4619      	mov	r1, r3
 80022f6:	481c      	ldr	r0, [pc, #112]	; (8002368 <MX_TIM2_Init+0xe8>)
 80022f8:	f006 f914 	bl	8008524 <HAL_TIM_ConfigClockSource>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002302:	f000 fa3d 	bl	8002780 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002306:	4818      	ldr	r0, [pc, #96]	; (8002368 <MX_TIM2_Init+0xe8>)
 8002308:	f005 fbc2 	bl	8007a90 <HAL_TIM_PWM_Init>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002312:	f000 fa35 	bl	8002780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800231e:	f107 031c 	add.w	r3, r7, #28
 8002322:	4619      	mov	r1, r3
 8002324:	4810      	ldr	r0, [pc, #64]	; (8002368 <MX_TIM2_Init+0xe8>)
 8002326:	f006 fe67 	bl	8008ff8 <HAL_TIMEx_MasterConfigSynchronization>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002330:	f000 fa26 	bl	8002780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002334:	2360      	movs	r3, #96	; 0x60
 8002336:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002338:	2300      	movs	r3, #0
 800233a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800233c:	2300      	movs	r3, #0
 800233e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002340:	2300      	movs	r3, #0
 8002342:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002344:	463b      	mov	r3, r7
 8002346:	2200      	movs	r2, #0
 8002348:	4619      	mov	r1, r3
 800234a:	4807      	ldr	r0, [pc, #28]	; (8002368 <MX_TIM2_Init+0xe8>)
 800234c:	f005 ffd6 	bl	80082fc <HAL_TIM_PWM_ConfigChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002356:	f000 fa13 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800235a:	4803      	ldr	r0, [pc, #12]	; (8002368 <MX_TIM2_Init+0xe8>)
 800235c:	f001 f83c 	bl	80033d8 <HAL_TIM_MspPostInit>

}
 8002360:	bf00      	nop
 8002362:	3738      	adds	r7, #56	; 0x38
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	200007d8 	.word	0x200007d8

0800236c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08c      	sub	sp, #48	; 0x30
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	2224      	movs	r2, #36	; 0x24
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f00a fc0a 	bl	800cb94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002380:	463b      	mov	r3, r7
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800238a:	4b21      	ldr	r3, [pc, #132]	; (8002410 <MX_TIM3_Init+0xa4>)
 800238c:	4a21      	ldr	r2, [pc, #132]	; (8002414 <MX_TIM3_Init+0xa8>)
 800238e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002390:	4b1f      	ldr	r3, [pc, #124]	; (8002410 <MX_TIM3_Init+0xa4>)
 8002392:	2200      	movs	r2, #0
 8002394:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002396:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <MX_TIM3_Init+0xa4>)
 8002398:	2200      	movs	r2, #0
 800239a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800239c:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <MX_TIM3_Init+0xa4>)
 800239e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <MX_TIM3_Init+0xa4>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023aa:	4b19      	ldr	r3, [pc, #100]	; (8002410 <MX_TIM3_Init+0xa4>)
 80023ac:	2280      	movs	r2, #128	; 0x80
 80023ae:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80023b0:	2301      	movs	r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023b8:	2301      	movs	r3, #1
 80023ba:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80023c0:	230a      	movs	r3, #10
 80023c2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023c8:	2301      	movs	r3, #1
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80023d0:	230a      	movs	r3, #10
 80023d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80023d4:	f107 030c 	add.w	r3, r7, #12
 80023d8:	4619      	mov	r1, r3
 80023da:	480d      	ldr	r0, [pc, #52]	; (8002410 <MX_TIM3_Init+0xa4>)
 80023dc:	f005 fcba 	bl	8007d54 <HAL_TIM_Encoder_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80023e6:	f000 f9cb 	bl	8002780 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023ea:	2300      	movs	r3, #0
 80023ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ee:	2300      	movs	r3, #0
 80023f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023f2:	463b      	mov	r3, r7
 80023f4:	4619      	mov	r1, r3
 80023f6:	4806      	ldr	r0, [pc, #24]	; (8002410 <MX_TIM3_Init+0xa4>)
 80023f8:	f006 fdfe 	bl	8008ff8 <HAL_TIMEx_MasterConfigSynchronization>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d001      	beq.n	8002406 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002402:	f000 f9bd 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002406:	bf00      	nop
 8002408:	3730      	adds	r7, #48	; 0x30
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000824 	.word	0x20000824
 8002414:	40000400 	.word	0x40000400

08002418 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <MX_TIM16_Init+0x48>)
 800241e:	4a11      	ldr	r2, [pc, #68]	; (8002464 <MX_TIM16_Init+0x4c>)
 8002420:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <MX_TIM16_Init+0x48>)
 8002424:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002428:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <MX_TIM16_Init+0x48>)
 800242c:	2200      	movs	r2, #0
 800242e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8002430:	4b0b      	ldr	r3, [pc, #44]	; (8002460 <MX_TIM16_Init+0x48>)
 8002432:	f242 7210 	movw	r2, #10000	; 0x2710
 8002436:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002438:	4b09      	ldr	r3, [pc, #36]	; (8002460 <MX_TIM16_Init+0x48>)
 800243a:	2200      	movs	r2, #0
 800243c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800243e:	4b08      	ldr	r3, [pc, #32]	; (8002460 <MX_TIM16_Init+0x48>)
 8002440:	2200      	movs	r2, #0
 8002442:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002444:	4b06      	ldr	r3, [pc, #24]	; (8002460 <MX_TIM16_Init+0x48>)
 8002446:	2280      	movs	r2, #128	; 0x80
 8002448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800244a:	4805      	ldr	r0, [pc, #20]	; (8002460 <MX_TIM16_Init+0x48>)
 800244c:	f005 fac9 	bl	80079e2 <HAL_TIM_Base_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002456:	f000 f993 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800245a:	bf00      	nop
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	20000870 	.word	0x20000870
 8002464:	40014400 	.word	0x40014400

08002468 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b094      	sub	sp, #80	; 0x50
 800246c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800246e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	611a      	str	r2, [r3, #16]
 800247e:	615a      	str	r2, [r3, #20]
 8002480:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002482:	463b      	mov	r3, r7
 8002484:	2234      	movs	r2, #52	; 0x34
 8002486:	2100      	movs	r1, #0
 8002488:	4618      	mov	r0, r3
 800248a:	f00a fb83 	bl	800cb94 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800248e:	4b31      	ldr	r3, [pc, #196]	; (8002554 <MX_TIM17_Init+0xec>)
 8002490:	4a31      	ldr	r2, [pc, #196]	; (8002558 <MX_TIM17_Init+0xf0>)
 8002492:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8-1;
 8002494:	4b2f      	ldr	r3, [pc, #188]	; (8002554 <MX_TIM17_Init+0xec>)
 8002496:	2207      	movs	r2, #7
 8002498:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249a:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <MX_TIM17_Init+0xec>)
 800249c:	2200      	movs	r2, #0
 800249e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 80024a0:	4b2c      	ldr	r3, [pc, #176]	; (8002554 <MX_TIM17_Init+0xec>)
 80024a2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80024a6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a8:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <MX_TIM17_Init+0xec>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80024ae:	4b29      	ldr	r3, [pc, #164]	; (8002554 <MX_TIM17_Init+0xec>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80024b4:	4b27      	ldr	r3, [pc, #156]	; (8002554 <MX_TIM17_Init+0xec>)
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80024ba:	4826      	ldr	r0, [pc, #152]	; (8002554 <MX_TIM17_Init+0xec>)
 80024bc:	f005 fa91 	bl	80079e2 <HAL_TIM_Base_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80024c6:	f000 f95b 	bl	8002780 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80024ca:	4822      	ldr	r0, [pc, #136]	; (8002554 <MX_TIM17_Init+0xec>)
 80024cc:	f005 fae0 	bl	8007a90 <HAL_TIM_PWM_Init>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 80024d6:	f000 f953 	bl	8002780 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80024da:	2360      	movs	r3, #96	; 0x60
 80024dc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80024e2:	2300      	movs	r3, #0
 80024e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80024e6:	2300      	movs	r3, #0
 80024e8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80024ea:	2300      	movs	r3, #0
 80024ec:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80024ee:	2300      	movs	r3, #0
 80024f0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80024f2:	2300      	movs	r3, #0
 80024f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80024f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024fa:	2200      	movs	r2, #0
 80024fc:	4619      	mov	r1, r3
 80024fe:	4815      	ldr	r0, [pc, #84]	; (8002554 <MX_TIM17_Init+0xec>)
 8002500:	f005 fefc 	bl	80082fc <HAL_TIM_PWM_ConfigChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800250a:	f000 f939 	bl	8002780 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800250e:	2300      	movs	r3, #0
 8002510:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002516:	2300      	movs	r3, #0
 8002518:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800251e:	2300      	movs	r3, #0
 8002520:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002522:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002526:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002528:	2300      	movs	r3, #0
 800252a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800252c:	2300      	movs	r3, #0
 800252e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002530:	463b      	mov	r3, r7
 8002532:	4619      	mov	r1, r3
 8002534:	4807      	ldr	r0, [pc, #28]	; (8002554 <MX_TIM17_Init+0xec>)
 8002536:	f006 fde1 	bl	80090fc <HAL_TIMEx_ConfigBreakDeadTime>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8002540:	f000 f91e 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002544:	4803      	ldr	r0, [pc, #12]	; (8002554 <MX_TIM17_Init+0xec>)
 8002546:	f000 ff47 	bl	80033d8 <HAL_TIM_MspPostInit>

}
 800254a:	bf00      	nop
 800254c:	3750      	adds	r7, #80	; 0x50
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	200008bc 	.word	0x200008bc
 8002558:	40014800 	.word	0x40014800

0800255c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002560:	4b22      	ldr	r3, [pc, #136]	; (80025ec <MX_USART2_UART_Init+0x90>)
 8002562:	4a23      	ldr	r2, [pc, #140]	; (80025f0 <MX_USART2_UART_Init+0x94>)
 8002564:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8002566:	4b21      	ldr	r3, [pc, #132]	; (80025ec <MX_USART2_UART_Init+0x90>)
 8002568:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800256c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800256e:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <MX_USART2_UART_Init+0x90>)
 8002570:	2200      	movs	r2, #0
 8002572:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <MX_USART2_UART_Init+0x90>)
 8002576:	2200      	movs	r2, #0
 8002578:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800257a:	4b1c      	ldr	r3, [pc, #112]	; (80025ec <MX_USART2_UART_Init+0x90>)
 800257c:	2200      	movs	r2, #0
 800257e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002580:	4b1a      	ldr	r3, [pc, #104]	; (80025ec <MX_USART2_UART_Init+0x90>)
 8002582:	220c      	movs	r2, #12
 8002584:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002586:	4b19      	ldr	r3, [pc, #100]	; (80025ec <MX_USART2_UART_Init+0x90>)
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800258c:	4b17      	ldr	r3, [pc, #92]	; (80025ec <MX_USART2_UART_Init+0x90>)
 800258e:	2200      	movs	r2, #0
 8002590:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <MX_USART2_UART_Init+0x90>)
 8002594:	2200      	movs	r2, #0
 8002596:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <MX_USART2_UART_Init+0x90>)
 800259a:	2200      	movs	r2, #0
 800259c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <MX_USART2_UART_Init+0x90>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025a4:	4811      	ldr	r0, [pc, #68]	; (80025ec <MX_USART2_UART_Init+0x90>)
 80025a6:	f006 fe8f 	bl	80092c8 <HAL_UART_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80025b0:	f000 f8e6 	bl	8002780 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025b4:	2100      	movs	r1, #0
 80025b6:	480d      	ldr	r0, [pc, #52]	; (80025ec <MX_USART2_UART_Init+0x90>)
 80025b8:	f008 f9cd 	bl	800a956 <HAL_UARTEx_SetTxFifoThreshold>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80025c2:	f000 f8dd 	bl	8002780 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80025c6:	2100      	movs	r1, #0
 80025c8:	4808      	ldr	r0, [pc, #32]	; (80025ec <MX_USART2_UART_Init+0x90>)
 80025ca:	f008 fa02 	bl	800a9d2 <HAL_UARTEx_SetRxFifoThreshold>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80025d4:	f000 f8d4 	bl	8002780 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80025d8:	4804      	ldr	r0, [pc, #16]	; (80025ec <MX_USART2_UART_Init+0x90>)
 80025da:	f008 f983 	bl	800a8e4 <HAL_UARTEx_DisableFifoMode>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80025e4:	f000 f8cc 	bl	8002780 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025e8:	bf00      	nop
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	20000908 	.word	0x20000908
 80025f0:	40004400 	.word	0x40004400

080025f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80025fa:	4b12      	ldr	r3, [pc, #72]	; (8002644 <MX_DMA_Init+0x50>)
 80025fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fe:	4a11      	ldr	r2, [pc, #68]	; (8002644 <MX_DMA_Init+0x50>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	6493      	str	r3, [r2, #72]	; 0x48
 8002606:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <MX_DMA_Init+0x50>)
 8002608:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	607b      	str	r3, [r7, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002612:	4b0c      	ldr	r3, [pc, #48]	; (8002644 <MX_DMA_Init+0x50>)
 8002614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <MX_DMA_Init+0x50>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6493      	str	r3, [r2, #72]	; 0x48
 800261e:	4b09      	ldr	r3, [pc, #36]	; (8002644 <MX_DMA_Init+0x50>)
 8002620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800262a:	2200      	movs	r2, #0
 800262c:	2100      	movs	r1, #0
 800262e:	200b      	movs	r0, #11
 8002630:	f003 fafd 	bl	8005c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002634:	200b      	movs	r0, #11
 8002636:	f003 fb14 	bl	8005c62 <HAL_NVIC_EnableIRQ>

}
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40021000 	.word	0x40021000

08002648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b088      	sub	sp, #32
 800264c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264e:	f107 030c 	add.w	r3, r7, #12
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	605a      	str	r2, [r3, #4]
 8002658:	609a      	str	r2, [r3, #8]
 800265a:	60da      	str	r2, [r3, #12]
 800265c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800265e:	4b45      	ldr	r3, [pc, #276]	; (8002774 <MX_GPIO_Init+0x12c>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	4a44      	ldr	r2, [pc, #272]	; (8002774 <MX_GPIO_Init+0x12c>)
 8002664:	f043 0320 	orr.w	r3, r3, #32
 8002668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800266a:	4b42      	ldr	r3, [pc, #264]	; (8002774 <MX_GPIO_Init+0x12c>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	f003 0320 	and.w	r3, r3, #32
 8002672:	60bb      	str	r3, [r7, #8]
 8002674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <MX_GPIO_Init+0x12c>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	4a3e      	ldr	r2, [pc, #248]	; (8002774 <MX_GPIO_Init+0x12c>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002682:	4b3c      	ldr	r3, [pc, #240]	; (8002774 <MX_GPIO_Init+0x12c>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	607b      	str	r3, [r7, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800268e:	4b39      	ldr	r3, [pc, #228]	; (8002774 <MX_GPIO_Init+0x12c>)
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	4a38      	ldr	r2, [pc, #224]	; (8002774 <MX_GPIO_Init+0x12c>)
 8002694:	f043 0302 	orr.w	r3, r3, #2
 8002698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269a:	4b36      	ldr	r3, [pc, #216]	; (8002774 <MX_GPIO_Init+0x12c>)
 800269c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	603b      	str	r3, [r7, #0]
 80026a4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DEBUG_SIGNAL_A_Pin|DEBUG_SIGNAL_B_Pin, GPIO_PIN_RESET);
 80026a6:	2200      	movs	r2, #0
 80026a8:	2103      	movs	r1, #3
 80026aa:	4833      	ldr	r0, [pc, #204]	; (8002778 <MX_GPIO_Init+0x130>)
 80026ac:	f003 ffc0 	bl	8006630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_DC_GPIO_Port, SPI_DC_Pin, GPIO_PIN_RESET);
 80026b0:	2200      	movs	r2, #0
 80026b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026ba:	f003 ffb9 	bl	8006630 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80026be:	2200      	movs	r2, #0
 80026c0:	2150      	movs	r1, #80	; 0x50
 80026c2:	482e      	ldr	r0, [pc, #184]	; (800277c <MX_GPIO_Init+0x134>)
 80026c4:	f003 ffb4 	bl	8006630 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_SIGNAL_A_Pin DEBUG_SIGNAL_B_Pin */
  GPIO_InitStruct.Pin = DEBUG_SIGNAL_A_Pin|DEBUG_SIGNAL_B_Pin;
 80026c8:	2303      	movs	r3, #3
 80026ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026cc:	2301      	movs	r3, #1
 80026ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80026d8:	f107 030c 	add.w	r3, r7, #12
 80026dc:	4619      	mov	r1, r3
 80026de:	4826      	ldr	r0, [pc, #152]	; (8002778 <MX_GPIO_Init+0x130>)
 80026e0:	f003 fe0c 	bl	80062fc <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_BUTTON_Pin */
  GPIO_InitStruct.Pin = ENC_BUTTON_Pin;
 80026e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80026ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80026ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80026f4:	f107 030c 	add.w	r3, r7, #12
 80026f8:	4619      	mov	r1, r3
 80026fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fe:	f003 fdfd 	bl	80062fc <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_Pin|STAND_INP_Pin;
 8002702:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002706:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002710:	f107 030c 	add.w	r3, r7, #12
 8002714:	4619      	mov	r1, r3
 8002716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800271a:	f003 fdef 	bl	80062fc <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_DC_Pin */
  GPIO_InitStruct.Pin = SPI_DC_Pin;
 800271e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002724:	2301      	movs	r3, #1
 8002726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	2300      	movs	r3, #0
 800272e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_DC_GPIO_Port, &GPIO_InitStruct);
 8002730:	f107 030c 	add.w	r3, r7, #12
 8002734:	4619      	mov	r1, r3
 8002736:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273a:	f003 fddf 	bl	80062fc <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RST_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin;
 800273e:	2350      	movs	r3, #80	; 0x50
 8002740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002742:	2301      	movs	r3, #1
 8002744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	4619      	mov	r1, r3
 8002754:	4809      	ldr	r0, [pc, #36]	; (800277c <MX_GPIO_Init+0x134>)
 8002756:	f003 fdd1 	bl	80062fc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	2017      	movs	r0, #23
 8002760:	f003 fa65 	bl	8005c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002764:	2017      	movs	r0, #23
 8002766:	f003 fa7c 	bl	8005c62 <HAL_NVIC_EnableIRQ>

}
 800276a:	bf00      	nop
 800276c:	3720      	adds	r7, #32
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000
 8002778:	48001400 	.word	0x48001400
 800277c:	48000400 	.word	0x48000400

08002780 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002784:	b672      	cpsid	i
}
 8002786:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002788:	e7fe      	b.n	8002788 <Error_Handler+0x8>
	...

0800278c <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	695a      	ldr	r2, [r3, #20]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	441a      	add	r2, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	615a      	str	r2, [r3, #20]
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	6999      	ldr	r1, [r3, #24]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80027b0:	1ad2      	subs	r2, r2, r3
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	615a      	str	r2, [r3, #20]
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	699a      	ldr	r2, [r3, #24]
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if(filter_struct->WindowPointer < WindowLength - 1)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b03      	cmp	r3, #3
 80027c8:	d805      	bhi.n	80027d6 <Moving_Average_Compute+0x4a>
	{
		filter_struct->WindowPointer += 1;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	619a      	str	r2, [r3, #24]
 80027d4:	e002      	b.n	80027dc <Moving_Average_Compute+0x50>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]
	}
	return filter_struct->Sum/5.0;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd feb7 	bl	8000554 <__aeabi_ui2d>
 80027e6:	f04f 0200 	mov.w	r2, #0
 80027ea:	4b07      	ldr	r3, [pc, #28]	; (8002808 <Moving_Average_Compute+0x7c>)
 80027ec:	f7fe f856 	bl	800089c <__aeabi_ddiv>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	ec43 2b17 	vmov	d7, r2, r3
}
 80027f8:	eeb0 0a47 	vmov.f32	s0, s14
 80027fc:	eef0 0a67 	vmov.f32	s1, s15
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40140000 	.word	0x40140000

0800280c <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282a:	6879      	ldr	r1, [r7, #4]
 800282c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800283c:	f7fe f994 	bl	8000b68 <__aeabi_dcmpgt>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d006      	beq.n	8002854 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8002852:	e011      	b.n	8002878 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002860:	f7fe f964 	bl	8000b2c <__aeabi_dcmplt>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d100      	bne.n	800286c <PID_Init+0x60>
}
 800286a:	e005      	b.n	8002878 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b08a      	sub	sp, #40	; 0x28
 8002884:	af00      	add	r7, sp, #0
 8002886:	6278      	str	r0, [r7, #36]	; 0x24
 8002888:	6239      	str	r1, [r7, #32]
 800288a:	61fa      	str	r2, [r7, #28]
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002892:	ed87 1b02 	vstr	d1, [r7, #8]
 8002896:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	6a3a      	ldr	r2, [r7, #32]
 80028a4:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 80028a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	2200      	movs	r2, #0
 80028b0:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80028b2:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002908 <PID+0x88>
 80028b6:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002910 <PID+0x90>
 80028ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028bc:	f000 f98d 	bl	8002bda <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	2264      	movs	r2, #100	; 0x64
 80028c4:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 80028c6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80028ca:	4619      	mov	r1, r3
 80028cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028ce:	f000 fad5 	bl	8002e7c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80028d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80028d6:	4619      	mov	r1, r3
 80028d8:	ed97 2b00 	vldr	d2, [r7]
 80028dc:	ed97 1b02 	vldr	d1, [r7, #8]
 80028e0:	ed97 0b04 	vldr	d0, [r7, #16]
 80028e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80028e6:	f000 fa21 	bl	8002d2c <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 80028ea:	f000 fff9 	bl	80038e0 <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	1ad2      	subs	r2, r2, r3
 80028f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f8:	605a      	str	r2, [r3, #4]

}
 80028fa:	bf00      	nop
 80028fc:	3728      	adds	r7, #40	; 0x28
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	f3af 8000 	nop.w
 8002908:	00000000 	.word	0x00000000
 800290c:	406fe000 	.word	0x406fe000
	...

08002918 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800291c:	b08c      	sub	sp, #48	; 0x30
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	785b      	ldrb	r3, [r3, #1]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d101      	bne.n	800292e <PID_Compute+0x16>
	{
		return _FALSE;
 800292a:	2300      	movs	r3, #0
 800292c:	e132      	b.n	8002b94 <PID_Compute+0x27c>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 800292e:	f000 ffd7 	bl	80038e0 <HAL_GetTick>
 8002932:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	6a3a      	ldr	r2, [r7, #32]
 8002944:	429a      	cmp	r2, r3
 8002946:	f0c0 8124 	bcc.w	8002b92 <PID_Compute+0x27a>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002952:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800295e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002962:	f7fd fcb9 	bl	80002d8 <__aeabi_dsub>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002974:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002978:	f7fd fcae 	bl	80002d8 <__aeabi_dsub>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002990:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002994:	f7fd fe58 	bl	8000648 <__aeabi_dmul>
 8002998:	4602      	mov	r2, r0
 800299a:	460b      	mov	r3, r1
 800299c:	4650      	mov	r0, sl
 800299e:	4659      	mov	r1, fp
 80029a0:	f7fd fc9c 	bl	80002dc <__adddf3>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80029ba:	f7fe f8d5 	bl	8000b68 <__aeabi_dcmpgt>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <PID_Compute+0xba>
				{
					uPID->OutputSum = uPID->IMax;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80029d0:	e010      	b.n	80029f4 <PID_Compute+0xdc>
				}
		else if (uPID->OutputSum < uPID->IMin)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80029de:	f7fe f8a5 	bl	8000b2c <__aeabi_dcmplt>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d005      	beq.n	80029f4 <PID_Compute+0xdc>
		{
			uPID->OutputSum = uPID->IMin;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d114      	bne.n	8002a32 <PID_Compute+0x11a>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002a14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a18:	f7fd fe16 	bl	8000648 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4650      	mov	r0, sl
 8002a22:	4659      	mov	r1, fp
 8002a24:	f7fd fc58 	bl	80002d8 <__aeabi_dsub>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	460b      	mov	r3, r1
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002a3e:	f7fe f893 	bl	8000b68 <__aeabi_dcmpgt>
 8002a42:	4603      	mov	r3, r0
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d006      	beq.n	8002a56 <PID_Compute+0x13e>
		{
			uPID->OutputSum = uPID->OutMax;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002a54:	e010      	b.n	8002a78 <PID_Compute+0x160>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002a62:	f7fe f863 	bl	8000b2c <__aeabi_dcmplt>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <PID_Compute+0x160>
		{
			uPID->OutputSum = uPID->OutMin;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002a72:	6879      	ldr	r1, [r7, #4]
 8002a74:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002a7e:	4690      	mov	r8, r2
 8002a80:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002a84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a88:	4640      	mov	r0, r8
 8002a8a:	4649      	mov	r1, r9
 8002a8c:	f7fd fddc 	bl	8000648 <__aeabi_dmul>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	6879      	ldr	r1, [r7, #4]
 8002a96:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d017      	beq.n	8002ad2 <PID_Compute+0x1ba>
		{
			output = uPID->Kp * error;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002aa8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002aac:	f7fd fdcc 	bl	8000648 <__aeabi_dmul>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002abe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002ac2:	f7fd fdc1 	bl	8000648 <__aeabi_dmul>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8002ad0:	e005      	b.n	8002ade <PID_Compute+0x1c6>
		}
		else
		{
			output = 0;
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002aea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aee:	f7fd fdab 	bl	8000648 <__aeabi_dmul>
 8002af2:	4602      	mov	r2, r0
 8002af4:	460b      	mov	r3, r1
 8002af6:	4640      	mov	r0, r8
 8002af8:	4649      	mov	r1, r9
 8002afa:	f7fd fbed 	bl	80002d8 <__aeabi_dsub>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b06:	f7fd fbe9 	bl	80002dc <__adddf3>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002b18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b1c:	f7fe f824 	bl	8000b68 <__aeabi_dcmpgt>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <PID_Compute+0x21a>
		{
			output = uPID->OutMax;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002b2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002b30:	e00e      	b.n	8002b50 <PID_Compute+0x238>
		}
		else if (output < uPID->OutMin)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002b38:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002b3c:	f7fd fff6 	bl	8000b2c <__aeabi_dcmplt>
 8002b40:	4603      	mov	r3, r0
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d004      	beq.n	8002b50 <PID_Compute+0x238>
		{
			output = uPID->OutMin;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002b4c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002b56:	4614      	mov	r4, r2
 8002b58:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002b5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b60:	4620      	mov	r0, r4
 8002b62:	4629      	mov	r1, r5
 8002b64:	f7fd fd70 	bl	8000648 <__aeabi_dmul>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	460b      	mov	r3, r1
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002b76:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b7a:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b84:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <PID_Compute+0x27c>

	}
	else
	{
		return _FALSE;
 8002b92:	2300      	movs	r3, #0
	}

}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3730      	adds	r7, #48	; 0x30
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002b9e <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b084      	sub	sp, #16
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	bf0c      	ite	eq
 8002bb0:	2301      	moveq	r3, #1
 8002bb2:	2300      	movne	r3, #0
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d006      	beq.n	8002bcc <PID_SetMode+0x2e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	785b      	ldrb	r3, [r3, #1]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fe20 	bl	800280c <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	7bfa      	ldrb	r2, [r7, #15]
 8002bd0:	705a      	strb	r2, [r3, #1]

}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002bda:	b580      	push	{r7, lr}
 8002bdc:	b086      	sub	sp, #24
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6178      	str	r0, [r7, #20]
 8002be2:	ed87 0b02 	vstr	d0, [r7, #8]
 8002be6:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002bea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bf2:	f7fd ffaf 	bl	8000b54 <__aeabi_dcmpge>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d158      	bne.n	8002cae <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8002bfc:	6979      	ldr	r1, [r7, #20]
 8002bfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c02:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 8002c06:	6979      	ldr	r1, [r7, #20]
 8002c08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c0c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	785b      	ldrb	r3, [r3, #1]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d04b      	beq.n	8002cb0 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002c26:	f7fd ff9f 	bl	8000b68 <__aeabi_dcmpgt>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d007      	beq.n	8002c40 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002c3a:	e9c1 2300 	strd	r2, r3, [r1]
 8002c3e:	e012      	b.n	8002c66 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002c4e:	f7fd ff6d 	bl	8000b2c <__aeabi_dcmplt>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d006      	beq.n	8002c66 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002c62:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002c72:	f7fd ff79 	bl	8000b68 <__aeabi_dcmpgt>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d006      	beq.n	8002c8a <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002c82:	6979      	ldr	r1, [r7, #20]
 8002c84:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002c88:	e012      	b.n	8002cb0 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002c96:	f7fd ff49 	bl	8000b2c <__aeabi_dcmplt>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002ca6:	6979      	ldr	r1, [r7, #20]
 8002ca8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002cac:	e000      	b.n	8002cb0 <PID_SetOutputLimits+0xd6>
		return;
 8002cae:	bf00      	nop
		}
		else { }

	}

}
 8002cb0:	3718      	adds	r7, #24
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b086      	sub	sp, #24
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6178      	str	r0, [r7, #20]
 8002cbe:	ed87 0b02 	vstr	d0, [r7, #8]
 8002cc2:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002cc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cce:	f7fd ff41 	bl	8000b54 <__aeabi_dcmpge>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10a      	bne.n	8002cee <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8002cd8:	6979      	ldr	r1, [r7, #20]
 8002cda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cde:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8002ce2:	6979      	ldr	r1, [r7, #20]
 8002ce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ce8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8002cec:	e000      	b.n	8002cf0 <PID_SetILimits+0x3a>
		return;
 8002cee:	bf00      	nop
}
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b088      	sub	sp, #32
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	61f8      	str	r0, [r7, #28]
 8002cfe:	ed87 0b04 	vstr	d0, [r7, #16]
 8002d02:	ed87 1b02 	vstr	d1, [r7, #8]
 8002d06:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	789b      	ldrb	r3, [r3, #2]
 8002d0e:	4619      	mov	r1, r3
 8002d10:	ed97 2b00 	vldr	d2, [r7]
 8002d14:	ed97 1b02 	vldr	d1, [r7, #8]
 8002d18:	ed97 0b04 	vldr	d0, [r7, #16]
 8002d1c:	69f8      	ldr	r0, [r7, #28]
 8002d1e:	f000 f805 	bl	8002d2c <PID_SetTunings2>
}
 8002d22:	bf00      	nop
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
	...

08002d2c <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b08a      	sub	sp, #40	; 0x28
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	61f8      	str	r0, [r7, #28]
 8002d34:	ed87 0b04 	vstr	d0, [r7, #16]
 8002d38:	ed87 1b02 	vstr	d1, [r7, #8]
 8002d3c:	ed87 2b00 	vstr	d2, [r7]
 8002d40:	460b      	mov	r3, r1
 8002d42:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	f04f 0300 	mov.w	r3, #0
 8002d4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002d50:	f7fd feec 	bl	8000b2c <__aeabi_dcmplt>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 8089 	bne.w	8002e6e <PID_SetTunings2+0x142>
 8002d5c:	f04f 0200 	mov.w	r2, #0
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d68:	f7fd fee0 	bl	8000b2c <__aeabi_dcmplt>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d17d      	bne.n	8002e6e <PID_SetTunings2+0x142>
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002d7e:	f7fd fed5 	bl	8000b2c <__aeabi_dcmplt>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d172      	bne.n	8002e6e <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	7efa      	ldrb	r2, [r7, #27]
 8002d8c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002d8e:	7efb      	ldrb	r3, [r7, #27]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	bf0c      	ite	eq
 8002d94:	2301      	moveq	r3, #1
 8002d96:	2300      	movne	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002da0:	69f9      	ldr	r1, [r7, #28]
 8002da2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002da6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002daa:	69f9      	ldr	r1, [r7, #28]
 8002dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002db0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002db4:	69f9      	ldr	r1, [r7, #28]
 8002db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002dba:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fbc6 	bl	8000554 <__aeabi_ui2d>
 8002dc8:	f04f 0200 	mov.w	r2, #0
 8002dcc:	4b2a      	ldr	r3, [pc, #168]	; (8002e78 <PID_SetTunings2+0x14c>)
 8002dce:	f7fd fd65 	bl	800089c <__aeabi_ddiv>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8002dda:	69f9      	ldr	r1, [r7, #28]
 8002ddc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002de0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002de4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002de8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002dec:	f7fd fc2c 	bl	8000648 <__aeabi_dmul>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	69f9      	ldr	r1, [r7, #28]
 8002df6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002dfe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e02:	f7fd fd4b 	bl	800089c <__aeabi_ddiv>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	69f9      	ldr	r1, [r7, #28]
 8002e0c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	78db      	ldrb	r3, [r3, #3]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d12b      	bne.n	8002e70 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002e1e:	f04f 0000 	mov.w	r0, #0
 8002e22:	f04f 0100 	mov.w	r1, #0
 8002e26:	f7fd fa57 	bl	80002d8 <__aeabi_dsub>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	69f9      	ldr	r1, [r7, #28]
 8002e30:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002e3a:	f04f 0000 	mov.w	r0, #0
 8002e3e:	f04f 0100 	mov.w	r1, #0
 8002e42:	f7fd fa49 	bl	80002d8 <__aeabi_dsub>
 8002e46:	4602      	mov	r2, r0
 8002e48:	460b      	mov	r3, r1
 8002e4a:	69f9      	ldr	r1, [r7, #28]
 8002e4c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002e56:	f04f 0000 	mov.w	r0, #0
 8002e5a:	f04f 0100 	mov.w	r1, #0
 8002e5e:	f7fd fa3b 	bl	80002d8 <__aeabi_dsub>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	69f9      	ldr	r1, [r7, #28]
 8002e68:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002e6c:	e000      	b.n	8002e70 <PID_SetTunings2+0x144>
		return;
 8002e6e:	bf00      	nop

	}

}
 8002e70:	3728      	adds	r7, #40	; 0x28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	408f4000 	.word	0x408f4000

08002e7c <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	785b      	ldrb	r3, [r3, #1]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02e      	beq.n	8002eee <PID_SetControllerDirection+0x72>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	78db      	ldrb	r3, [r3, #3]
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d029      	beq.n	8002eee <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002ea0:	f04f 0000 	mov.w	r0, #0
 8002ea4:	f04f 0100 	mov.w	r1, #0
 8002ea8:	f7fd fa16 	bl	80002d8 <__aeabi_dsub>
 8002eac:	4602      	mov	r2, r0
 8002eae:	460b      	mov	r3, r1
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ebc:	f04f 0000 	mov.w	r0, #0
 8002ec0:	f04f 0100 	mov.w	r1, #0
 8002ec4:	f7fd fa08 	bl	80002d8 <__aeabi_dsub>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002ed8:	f04f 0000 	mov.w	r0, #0
 8002edc:	f04f 0100 	mov.w	r1, #0
 8002ee0:	f7fd f9fa 	bl	80002d8 <__aeabi_dsub>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	6879      	ldr	r1, [r7, #4]
 8002eea:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	70da      	strb	r2, [r3, #3]

}
 8002ef4:	bf00      	nop
 8002ef6:	3708      	adds	r7, #8
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002efc:	b5b0      	push	{r4, r5, r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	dd2e      	ble.n	8002f6a <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002f0c:	6838      	ldr	r0, [r7, #0]
 8002f0e:	f7fd fb31 	bl	8000574 <__aeabi_i2d>
 8002f12:	4604      	mov	r4, r0
 8002f14:	460d      	mov	r5, r1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fd fb1a 	bl	8000554 <__aeabi_ui2d>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4620      	mov	r0, r4
 8002f26:	4629      	mov	r1, r5
 8002f28:	f7fd fcb8 	bl	800089c <__aeabi_ddiv>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	460b      	mov	r3, r1
 8002f30:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002f3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f3e:	f7fd fb83 	bl	8000648 <__aeabi_dmul>
 8002f42:	4602      	mov	r2, r0
 8002f44:	460b      	mov	r3, r1
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002f52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f56:	f7fd fca1 	bl	800089c <__aeabi_ddiv>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	609a      	str	r2, [r3, #8]

	}

}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bdb0      	pop	{r4, r5, r7, pc}

08002f72 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8002f72:	b480      	push	{r7}
 8002f74:	b083      	sub	sp, #12
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002f80:	ec43 2b17 	vmov	d7, r2, r3
}
 8002f84:	eeb0 0a47 	vmov.f32	s0, s14
 8002f88:	eef0 0a67 	vmov.f32	s1, s15
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr

08002f96 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002fa4:	ec43 2b17 	vmov	d7, r2, r3
}
 8002fa8:	eeb0 0a47 	vmov.f32	s0, s14
 8002fac:	eef0 0a67 	vmov.f32	s1, s15
 8002fb0:	370c      	adds	r7, #12
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr

08002fba <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 8002fba:	b480      	push	{r7}
 8002fbc:	b083      	sub	sp, #12
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002fc8:	ec43 2b17 	vmov	d7, r2, r3
}
 8002fcc:	eeb0 0a47 	vmov.f32	s0, s14
 8002fd0:	eef0 0a67 	vmov.f32	s1, s15
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr
	...

08002fe0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fe6:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <HAL_MspInit+0x44>)
 8002fe8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fea:	4a0e      	ldr	r2, [pc, #56]	; (8003024 <HAL_MspInit+0x44>)
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	6613      	str	r3, [r2, #96]	; 0x60
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <HAL_MspInit+0x44>)
 8002ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_MspInit+0x44>)
 8003000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003002:	4a08      	ldr	r2, [pc, #32]	; (8003024 <HAL_MspInit+0x44>)
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003008:	6593      	str	r3, [r2, #88]	; 0x58
 800300a:	4b06      	ldr	r3, [pc, #24]	; (8003024 <HAL_MspInit+0x44>)
 800300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800300e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003016:	f003 fd05 	bl	8006a24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800301a:	bf00      	nop
 800301c:	3708      	adds	r7, #8
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	40021000 	.word	0x40021000

08003028 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b09c      	sub	sp, #112	; 0x70
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003030:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003034:	2200      	movs	r2, #0
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	609a      	str	r2, [r3, #8]
 800303c:	60da      	str	r2, [r3, #12]
 800303e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003040:	f107 0318 	add.w	r3, r7, #24
 8003044:	2244      	movs	r2, #68	; 0x44
 8003046:	2100      	movs	r1, #0
 8003048:	4618      	mov	r0, r3
 800304a:	f009 fda3 	bl	800cb94 <memset>
  if(hadc->Instance==ADC1)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003056:	d17f      	bne.n	8003158 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003058:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800305c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800305e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003062:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003064:	f107 0318 	add.w	r3, r7, #24
 8003068:	4618      	mov	r0, r3
 800306a:	f004 fa1f 	bl	80074ac <HAL_RCCEx_PeriphCLKConfig>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d001      	beq.n	8003078 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8003074:	f7ff fb84 	bl	8002780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003078:	4b39      	ldr	r3, [pc, #228]	; (8003160 <HAL_ADC_MspInit+0x138>)
 800307a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307c:	4a38      	ldr	r2, [pc, #224]	; (8003160 <HAL_ADC_MspInit+0x138>)
 800307e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003082:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <HAL_ADC_MspInit+0x138>)
 8003086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003090:	4b33      	ldr	r3, [pc, #204]	; (8003160 <HAL_ADC_MspInit+0x138>)
 8003092:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003094:	4a32      	ldr	r2, [pc, #200]	; (8003160 <HAL_ADC_MspInit+0x138>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800309c:	4b30      	ldr	r3, [pc, #192]	; (8003160 <HAL_ADC_MspInit+0x138>)
 800309e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a0:	f003 0301 	and.w	r3, r3, #1
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a8:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <HAL_ADC_MspInit+0x138>)
 80030aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ac:	4a2c      	ldr	r2, [pc, #176]	; (8003160 <HAL_ADC_MspInit+0x138>)
 80030ae:	f043 0302 	orr.w	r3, r3, #2
 80030b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030b4:	4b2a      	ldr	r3, [pc, #168]	; (8003160 <HAL_ADC_MspInit+0x138>)
 80030b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	60fb      	str	r3, [r7, #12]
 80030be:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin|CURRENT_Pin|AMBIENT_TEMP_Pin;
 80030c0:	230b      	movs	r3, #11
 80030c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030c4:	2303      	movs	r3, #3
 80030c6:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c8:	2300      	movs	r3, #0
 80030ca:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030d0:	4619      	mov	r1, r3
 80030d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030d6:	f003 f911 	bl	80062fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUSVOLTAGE_Pin;
 80030da:	2301      	movs	r3, #1
 80030dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030de:	2303      	movs	r3, #3
 80030e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(BUSVOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80030e6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80030ea:	4619      	mov	r1, r3
 80030ec:	481d      	ldr	r0, [pc, #116]	; (8003164 <HAL_ADC_MspInit+0x13c>)
 80030ee:	f003 f905 	bl	80062fc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_ADC_MspInit+0x140>)
 80030f4:	4a1d      	ldr	r2, [pc, #116]	; (800316c <HAL_ADC_MspInit+0x144>)
 80030f6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_ADC_MspInit+0x140>)
 80030fa:	2205      	movs	r2, #5
 80030fc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030fe:	4b1a      	ldr	r3, [pc, #104]	; (8003168 <HAL_ADC_MspInit+0x140>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003104:	4b18      	ldr	r3, [pc, #96]	; (8003168 <HAL_ADC_MspInit+0x140>)
 8003106:	2200      	movs	r2, #0
 8003108:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_ADC_MspInit+0x140>)
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003110:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_ADC_MspInit+0x140>)
 8003112:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003116:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003118:	4b13      	ldr	r3, [pc, #76]	; (8003168 <HAL_ADC_MspInit+0x140>)
 800311a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800311e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_ADC_MspInit+0x140>)
 8003122:	2220      	movs	r2, #32
 8003124:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_ADC_MspInit+0x140>)
 8003128:	2200      	movs	r2, #0
 800312a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800312c:	480e      	ldr	r0, [pc, #56]	; (8003168 <HAL_ADC_MspInit+0x140>)
 800312e:	f002 fdb3 	bl	8005c98 <HAL_DMA_Init>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8003138:	f7ff fb22 	bl	8002780 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <HAL_ADC_MspInit+0x140>)
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
 8003142:	4a09      	ldr	r2, [pc, #36]	; (8003168 <HAL_ADC_MspInit+0x140>)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003148:	2200      	movs	r2, #0
 800314a:	2100      	movs	r1, #0
 800314c:	2012      	movs	r0, #18
 800314e:	f002 fd6e 	bl	8005c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003152:	2012      	movs	r0, #18
 8003154:	f002 fd85 	bl	8005c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003158:	bf00      	nop
 800315a:	3770      	adds	r7, #112	; 0x70
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	40021000 	.word	0x40021000
 8003164:	48000400 	.word	0x48000400
 8003168:	200006c8 	.word	0x200006c8
 800316c:	40020008 	.word	0x40020008

08003170 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b09a      	sub	sp, #104	; 0x68
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003178:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	60da      	str	r2, [r3, #12]
 8003186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003188:	f107 0310 	add.w	r3, r7, #16
 800318c:	2244      	movs	r2, #68	; 0x44
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f009 fcff 	bl	800cb94 <memset>
  if(hi2c->Instance==I2C1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a1f      	ldr	r2, [pc, #124]	; (8003218 <HAL_I2C_MspInit+0xa8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d136      	bne.n	800320e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80031a0:	2340      	movs	r3, #64	; 0x40
 80031a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80031a4:	2300      	movs	r3, #0
 80031a6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031a8:	f107 0310 	add.w	r3, r7, #16
 80031ac:	4618      	mov	r0, r3
 80031ae:	f004 f97d 	bl	80074ac <HAL_RCCEx_PeriphCLKConfig>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80031b8:	f7ff fae2 	bl	8002780 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031bc:	4b17      	ldr	r3, [pc, #92]	; (800321c <HAL_I2C_MspInit+0xac>)
 80031be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031c0:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_I2C_MspInit+0xac>)
 80031c2:	f043 0302 	orr.w	r3, r3, #2
 80031c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031c8:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_I2C_MspInit+0xac>)
 80031ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80031d4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80031d8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80031da:	2312      	movs	r3, #18
 80031dc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031de:	2300      	movs	r3, #0
 80031e0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031e2:	2300      	movs	r3, #0
 80031e4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80031e6:	2304      	movs	r3, #4
 80031e8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80031ee:	4619      	mov	r1, r3
 80031f0:	480b      	ldr	r0, [pc, #44]	; (8003220 <HAL_I2C_MspInit+0xb0>)
 80031f2:	f003 f883 	bl	80062fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_I2C_MspInit+0xac>)
 80031f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fa:	4a08      	ldr	r2, [pc, #32]	; (800321c <HAL_I2C_MspInit+0xac>)
 80031fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003200:	6593      	str	r3, [r2, #88]	; 0x58
 8003202:	4b06      	ldr	r3, [pc, #24]	; (800321c <HAL_I2C_MspInit+0xac>)
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320a:	60bb      	str	r3, [r7, #8]
 800320c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800320e:	bf00      	nop
 8003210:	3768      	adds	r7, #104	; 0x68
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40005400 	.word	0x40005400
 800321c:	40021000 	.word	0x40021000
 8003220:	48000400 	.word	0x48000400

08003224 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800322c:	f107 0314 	add.w	r3, r7, #20
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	605a      	str	r2, [r3, #4]
 8003236:	609a      	str	r2, [r3, #8]
 8003238:	60da      	str	r2, [r3, #12]
 800323a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a17      	ldr	r2, [pc, #92]	; (80032a0 <HAL_SPI_MspInit+0x7c>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d127      	bne.n	8003296 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003246:	4b17      	ldr	r3, [pc, #92]	; (80032a4 <HAL_SPI_MspInit+0x80>)
 8003248:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800324a:	4a16      	ldr	r2, [pc, #88]	; (80032a4 <HAL_SPI_MspInit+0x80>)
 800324c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003250:	6613      	str	r3, [r2, #96]	; 0x60
 8003252:	4b14      	ldr	r3, [pc, #80]	; (80032a4 <HAL_SPI_MspInit+0x80>)
 8003254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325e:	4b11      	ldr	r3, [pc, #68]	; (80032a4 <HAL_SPI_MspInit+0x80>)
 8003260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003262:	4a10      	ldr	r2, [pc, #64]	; (80032a4 <HAL_SPI_MspInit+0x80>)
 8003264:	f043 0302 	orr.w	r3, r3, #2
 8003268:	64d3      	str	r3, [r2, #76]	; 0x4c
 800326a:	4b0e      	ldr	r3, [pc, #56]	; (80032a4 <HAL_SPI_MspInit+0x80>)
 800326c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	60fb      	str	r3, [r7, #12]
 8003274:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003276:	2328      	movs	r3, #40	; 0x28
 8003278:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800327a:	2302      	movs	r3, #2
 800327c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003282:	2300      	movs	r3, #0
 8003284:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003286:	2305      	movs	r3, #5
 8003288:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328a:	f107 0314 	add.w	r3, r7, #20
 800328e:	4619      	mov	r1, r3
 8003290:	4805      	ldr	r0, [pc, #20]	; (80032a8 <HAL_SPI_MspInit+0x84>)
 8003292:	f003 f833 	bl	80062fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003296:	bf00      	nop
 8003298:	3728      	adds	r7, #40	; 0x28
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	40013000 	.word	0x40013000
 80032a4:	40021000 	.word	0x40021000
 80032a8:	48000400 	.word	0x48000400

080032ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032bc:	d10c      	bne.n	80032d8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80032be:	4b1e      	ldr	r3, [pc, #120]	; (8003338 <HAL_TIM_Base_MspInit+0x8c>)
 80032c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c2:	4a1d      	ldr	r2, [pc, #116]	; (8003338 <HAL_TIM_Base_MspInit+0x8c>)
 80032c4:	f043 0301 	orr.w	r3, r3, #1
 80032c8:	6593      	str	r3, [r2, #88]	; 0x58
 80032ca:	4b1b      	ldr	r3, [pc, #108]	; (8003338 <HAL_TIM_Base_MspInit+0x8c>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80032d6:	e02a      	b.n	800332e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a17      	ldr	r2, [pc, #92]	; (800333c <HAL_TIM_Base_MspInit+0x90>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d114      	bne.n	800330c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <HAL_TIM_Base_MspInit+0x8c>)
 80032e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e6:	4a14      	ldr	r2, [pc, #80]	; (8003338 <HAL_TIM_Base_MspInit+0x8c>)
 80032e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ec:	6613      	str	r3, [r2, #96]	; 0x60
 80032ee:	4b12      	ldr	r3, [pc, #72]	; (8003338 <HAL_TIM_Base_MspInit+0x8c>)
 80032f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80032fa:	2200      	movs	r2, #0
 80032fc:	2100      	movs	r1, #0
 80032fe:	2019      	movs	r0, #25
 8003300:	f002 fc95 	bl	8005c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003304:	2019      	movs	r0, #25
 8003306:	f002 fcac 	bl	8005c62 <HAL_NVIC_EnableIRQ>
}
 800330a:	e010      	b.n	800332e <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a0b      	ldr	r2, [pc, #44]	; (8003340 <HAL_TIM_Base_MspInit+0x94>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d10b      	bne.n	800332e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003316:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_TIM_Base_MspInit+0x8c>)
 8003318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331a:	4a07      	ldr	r2, [pc, #28]	; (8003338 <HAL_TIM_Base_MspInit+0x8c>)
 800331c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003320:	6613      	str	r3, [r2, #96]	; 0x60
 8003322:	4b05      	ldr	r3, [pc, #20]	; (8003338 <HAL_TIM_Base_MspInit+0x8c>)
 8003324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003326:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800332a:	60fb      	str	r3, [r7, #12]
 800332c:	68fb      	ldr	r3, [r7, #12]
}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	40014400 	.word	0x40014400
 8003340:	40014800 	.word	0x40014800

08003344 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800334c:	f107 0314 	add.w	r3, r7, #20
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1b      	ldr	r2, [pc, #108]	; (80033d0 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d130      	bne.n	80033c8 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003366:	4b1b      	ldr	r3, [pc, #108]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800336a:	4a1a      	ldr	r2, [pc, #104]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x90>)
 800336c:	f043 0302 	orr.w	r3, r3, #2
 8003370:	6593      	str	r3, [r2, #88]	; 0x58
 8003372:	4b18      	ldr	r3, [pc, #96]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	613b      	str	r3, [r7, #16]
 800337c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800337e:	4b15      	ldr	r3, [pc, #84]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003382:	4a14      	ldr	r2, [pc, #80]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x90>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	64d3      	str	r3, [r2, #76]	; 0x4c
 800338a:	4b12      	ldr	r3, [pc, #72]	; (80033d4 <HAL_TIM_Encoder_MspInit+0x90>)
 800338c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003396:	2350      	movs	r3, #80	; 0x50
 8003398:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800339a:	2302      	movs	r3, #2
 800339c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033a2:	2300      	movs	r3, #0
 80033a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033a6:	2302      	movs	r3, #2
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033aa:	f107 0314 	add.w	r3, r7, #20
 80033ae:	4619      	mov	r1, r3
 80033b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033b4:	f002 ffa2 	bl	80062fc <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80033b8:	2200      	movs	r2, #0
 80033ba:	2100      	movs	r1, #0
 80033bc:	201d      	movs	r0, #29
 80033be:	f002 fc36 	bl	8005c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80033c2:	201d      	movs	r0, #29
 80033c4:	f002 fc4d 	bl	8005c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80033c8:	bf00      	nop
 80033ca:	3728      	adds	r7, #40	; 0x28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40021000 	.word	0x40021000

080033d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b08a      	sub	sp, #40	; 0x28
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033e0:	f107 0314 	add.w	r3, r7, #20
 80033e4:	2200      	movs	r2, #0
 80033e6:	601a      	str	r2, [r3, #0]
 80033e8:	605a      	str	r2, [r3, #4]
 80033ea:	609a      	str	r2, [r3, #8]
 80033ec:	60da      	str	r2, [r3, #12]
 80033ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f8:	d11d      	bne.n	8003436 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <HAL_TIM_MspPostInit+0xac>)
 80033fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033fe:	4a21      	ldr	r2, [pc, #132]	; (8003484 <HAL_TIM_MspPostInit+0xac>)
 8003400:	f043 0301 	orr.w	r3, r3, #1
 8003404:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003406:	4b1f      	ldr	r3, [pc, #124]	; (8003484 <HAL_TIM_MspPostInit+0xac>)
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	613b      	str	r3, [r7, #16]
 8003410:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8003412:	2320      	movs	r3, #32
 8003414:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003416:	2302      	movs	r3, #2
 8003418:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341e:	2300      	movs	r3, #0
 8003420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003422:	2301      	movs	r3, #1
 8003424:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8003426:	f107 0314 	add.w	r3, r7, #20
 800342a:	4619      	mov	r1, r3
 800342c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003430:	f002 ff64 	bl	80062fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003434:	e021      	b.n	800347a <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a13      	ldr	r2, [pc, #76]	; (8003488 <HAL_TIM_MspPostInit+0xb0>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d11c      	bne.n	800347a <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003440:	4b10      	ldr	r3, [pc, #64]	; (8003484 <HAL_TIM_MspPostInit+0xac>)
 8003442:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003444:	4a0f      	ldr	r2, [pc, #60]	; (8003484 <HAL_TIM_MspPostInit+0xac>)
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800344c:	4b0d      	ldr	r3, [pc, #52]	; (8003484 <HAL_TIM_MspPostInit+0xac>)
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	60fb      	str	r3, [r7, #12]
 8003456:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEATER_Pin;
 8003458:	2380      	movs	r3, #128	; 0x80
 800345a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800345c:	2302      	movs	r3, #2
 800345e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003460:	2300      	movs	r3, #0
 8003462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003464:	2300      	movs	r3, #0
 8003466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003468:	2301      	movs	r3, #1
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 800346c:	f107 0314 	add.w	r3, r7, #20
 8003470:	4619      	mov	r1, r3
 8003472:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003476:	f002 ff41 	bl	80062fc <HAL_GPIO_Init>
}
 800347a:	bf00      	nop
 800347c:	3728      	adds	r7, #40	; 0x28
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40021000 	.word	0x40021000
 8003488:	40014800 	.word	0x40014800

0800348c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b09a      	sub	sp, #104	; 0x68
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003494:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003498:	2200      	movs	r2, #0
 800349a:	601a      	str	r2, [r3, #0]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	609a      	str	r2, [r3, #8]
 80034a0:	60da      	str	r2, [r3, #12]
 80034a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034a4:	f107 0310 	add.w	r3, r7, #16
 80034a8:	2244      	movs	r2, #68	; 0x44
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f009 fb71 	bl	800cb94 <memset>
  if(huart->Instance==USART2)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a23      	ldr	r2, [pc, #140]	; (8003544 <HAL_UART_MspInit+0xb8>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d13f      	bne.n	800353c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80034bc:	2302      	movs	r3, #2
 80034be:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80034c0:	2300      	movs	r3, #0
 80034c2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034c4:	f107 0310 	add.w	r3, r7, #16
 80034c8:	4618      	mov	r0, r3
 80034ca:	f003 ffef 	bl	80074ac <HAL_RCCEx_PeriphCLKConfig>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80034d4:	f7ff f954 	bl	8002780 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034d8:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_UART_MspInit+0xbc>)
 80034da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034dc:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <HAL_UART_MspInit+0xbc>)
 80034de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e2:	6593      	str	r3, [r2, #88]	; 0x58
 80034e4:	4b18      	ldr	r3, [pc, #96]	; (8003548 <HAL_UART_MspInit+0xbc>)
 80034e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034f0:	4b15      	ldr	r3, [pc, #84]	; (8003548 <HAL_UART_MspInit+0xbc>)
 80034f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <HAL_UART_MspInit+0xbc>)
 80034f6:	f043 0301 	orr.w	r3, r3, #1
 80034fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80034fc:	4b12      	ldr	r3, [pc, #72]	; (8003548 <HAL_UART_MspInit+0xbc>)
 80034fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003500:	f003 0301 	and.w	r3, r3, #1
 8003504:	60bb      	str	r3, [r7, #8]
 8003506:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8003508:	f248 0304 	movw	r3, #32772	; 0x8004
 800350c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003512:	2300      	movs	r3, #0
 8003514:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003516:	2303      	movs	r3, #3
 8003518:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800351a:	2307      	movs	r3, #7
 800351c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003522:	4619      	mov	r1, r3
 8003524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003528:	f002 fee8 	bl	80062fc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800352c:	2200      	movs	r2, #0
 800352e:	2100      	movs	r1, #0
 8003530:	2026      	movs	r0, #38	; 0x26
 8003532:	f002 fb7c 	bl	8005c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003536:	2026      	movs	r0, #38	; 0x26
 8003538:	f002 fb93 	bl	8005c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800353c:	bf00      	nop
 800353e:	3768      	adds	r7, #104	; 0x68
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40004400 	.word	0x40004400
 8003548:	40021000 	.word	0x40021000

0800354c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800354c:	b480      	push	{r7}
 800354e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003550:	e7fe      	b.n	8003550 <NMI_Handler+0x4>

08003552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003552:	b480      	push	{r7}
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003556:	e7fe      	b.n	8003556 <HardFault_Handler+0x4>

08003558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003558:	b480      	push	{r7}
 800355a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800355c:	e7fe      	b.n	800355c <MemManage_Handler+0x4>

0800355e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800355e:	b480      	push	{r7}
 8003560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003562:	e7fe      	b.n	8003562 <BusFault_Handler+0x4>

08003564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003564:	b480      	push	{r7}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003568:	e7fe      	b.n	8003568 <UsageFault_Handler+0x4>

0800356a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800356a:	b480      	push	{r7}
 800356c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800357c:	bf00      	nop
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr

08003586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003586:	b480      	push	{r7}
 8003588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003598:	f000 f990 	bl	80038bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}

080035a0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <DMA1_Channel1_IRQHandler+0x10>)
 80035a6:	f002 fd5a 	bl	800605e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	200006c8 	.word	0x200006c8

080035b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <ADC1_2_IRQHandler+0x10>)
 80035ba:	f000 ff3f 	bl	800443c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	2000065c 	.word	0x2000065c

080035c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_BUTTON_Pin);
 80035cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80035d0:	f003 f846 	bl	8006660 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80035de:	f004 fd0d 	bl	8007ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000870 	.word	0x20000870

080035ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80035f0:	4802      	ldr	r0, [pc, #8]	; (80035fc <TIM3_IRQHandler+0x10>)
 80035f2:	f004 fd03 	bl	8007ffc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000824 	.word	0x20000824

08003600 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003604:	4802      	ldr	r0, [pc, #8]	; (8003610 <USART2_IRQHandler+0x10>)
 8003606:	f005 ff57 	bl	80094b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800360a:	bf00      	nop
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	20000908 	.word	0x20000908

08003614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003614:	b480      	push	{r7}
 8003616:	af00      	add	r7, sp, #0
	return 1;
 8003618:	2301      	movs	r3, #1
}
 800361a:	4618      	mov	r0, r3
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <_kill>:

int _kill(int pid, int sig)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800362e:	f009 fb13 	bl	800cc58 <__errno>
 8003632:	4603      	mov	r3, r0
 8003634:	2216      	movs	r2, #22
 8003636:	601a      	str	r2, [r3, #0]
	return -1;
 8003638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <_exit>:

void _exit (int status)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800364c:	f04f 31ff 	mov.w	r1, #4294967295
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff ffe7 	bl	8003624 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003656:	e7fe      	b.n	8003656 <_exit+0x12>

08003658 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	60f8      	str	r0, [r7, #12]
 8003660:	60b9      	str	r1, [r7, #8]
 8003662:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003664:	2300      	movs	r3, #0
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	e00a      	b.n	8003680 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800366a:	f3af 8000 	nop.w
 800366e:	4601      	mov	r1, r0
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	1c5a      	adds	r2, r3, #1
 8003674:	60ba      	str	r2, [r7, #8]
 8003676:	b2ca      	uxtb	r2, r1
 8003678:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	3301      	adds	r3, #1
 800367e:	617b      	str	r3, [r7, #20]
 8003680:	697a      	ldr	r2, [r7, #20]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	dbf0      	blt.n	800366a <_read+0x12>
	}

return len;
 8003688:	687b      	ldr	r3, [r7, #4]
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003692:	b580      	push	{r7, lr}
 8003694:	b086      	sub	sp, #24
 8003696:	af00      	add	r7, sp, #0
 8003698:	60f8      	str	r0, [r7, #12]
 800369a:	60b9      	str	r1, [r7, #8]
 800369c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
 80036a2:	e009      	b.n	80036b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	1c5a      	adds	r2, r3, #1
 80036a8:	60ba      	str	r2, [r7, #8]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	4618      	mov	r0, r3
 80036ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	3301      	adds	r3, #1
 80036b6:	617b      	str	r3, [r7, #20]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	429a      	cmp	r2, r3
 80036be:	dbf1      	blt.n	80036a4 <_write+0x12>
	}
	return len;
 80036c0:	687b      	ldr	r3, [r7, #4]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <_close>:

int _close(int file)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
	return -1;
 80036d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036f2:	605a      	str	r2, [r3, #4]
	return 0;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <_isatty>:

int _isatty(int file)
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
	return 1;
 800370a:	2301      	movs	r3, #1
}
 800370c:	4618      	mov	r0, r3
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
	return 0;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b086      	sub	sp, #24
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800373c:	4a14      	ldr	r2, [pc, #80]	; (8003790 <_sbrk+0x5c>)
 800373e:	4b15      	ldr	r3, [pc, #84]	; (8003794 <_sbrk+0x60>)
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003748:	4b13      	ldr	r3, [pc, #76]	; (8003798 <_sbrk+0x64>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d102      	bne.n	8003756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003750:	4b11      	ldr	r3, [pc, #68]	; (8003798 <_sbrk+0x64>)
 8003752:	4a12      	ldr	r2, [pc, #72]	; (800379c <_sbrk+0x68>)
 8003754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003756:	4b10      	ldr	r3, [pc, #64]	; (8003798 <_sbrk+0x64>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	429a      	cmp	r2, r3
 8003762:	d207      	bcs.n	8003774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003764:	f009 fa78 	bl	800cc58 <__errno>
 8003768:	4603      	mov	r3, r0
 800376a:	220c      	movs	r2, #12
 800376c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800376e:	f04f 33ff 	mov.w	r3, #4294967295
 8003772:	e009      	b.n	8003788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003774:	4b08      	ldr	r3, [pc, #32]	; (8003798 <_sbrk+0x64>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800377a:	4b07      	ldr	r3, [pc, #28]	; (8003798 <_sbrk+0x64>)
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4413      	add	r3, r2
 8003782:	4a05      	ldr	r2, [pc, #20]	; (8003798 <_sbrk+0x64>)
 8003784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003786:	68fb      	ldr	r3, [r7, #12]
	}
 8003788:	4618      	mov	r0, r3
 800378a:	3718      	adds	r7, #24
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	20008000 	.word	0x20008000
 8003794:	00000400 	.word	0x00000400
 8003798:	20000a30 	.word	0x20000a30
 800379c:	20000ba0 	.word	0x20000ba0

080037a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80037a4:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <SystemInit+0x20>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037aa:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <SystemInit+0x20>)
 80037ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037b4:	bf00      	nop
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 80037c4:	480d      	ldr	r0, [pc, #52]	; (80037fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80037c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80037c8:	480d      	ldr	r0, [pc, #52]	; (8003800 <LoopForever+0x6>)
  ldr r1, =_edata
 80037ca:	490e      	ldr	r1, [pc, #56]	; (8003804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80037cc:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <LoopForever+0xe>)
  movs r3, #0
 80037ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80037d0:	e002      	b.n	80037d8 <LoopCopyDataInit>

080037d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80037d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80037d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80037d6:	3304      	adds	r3, #4

080037d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80037d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80037da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80037dc:	d3f9      	bcc.n	80037d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80037de:	4a0b      	ldr	r2, [pc, #44]	; (800380c <LoopForever+0x12>)
  ldr r4, =_ebss
 80037e0:	4c0b      	ldr	r4, [pc, #44]	; (8003810 <LoopForever+0x16>)
  movs r3, #0
 80037e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80037e4:	e001      	b.n	80037ea <LoopFillZerobss>

080037e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80037e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80037e8:	3204      	adds	r2, #4

080037ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80037ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80037ec:	d3fb      	bcc.n	80037e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037ee:	f7ff ffd7 	bl	80037a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037f2:	f009 fa37 	bl	800cc64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037f6:	f7fe f8c7 	bl	8001988 <main>

080037fa <LoopForever>:

LoopForever:
    b LoopForever
 80037fa:	e7fe      	b.n	80037fa <LoopForever>
	  ldr   r0, =_estack
 80037fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003804:	20000258 	.word	0x20000258
  ldr r2, =_sidata
 8003808:	08012f98 	.word	0x08012f98
  ldr r2, =_sbss
 800380c:	20000258 	.word	0x20000258
  ldr r4, =_ebss
 8003810:	20000b9c 	.word	0x20000b9c

08003814 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003814:	e7fe      	b.n	8003814 <COMP1_2_3_IRQHandler>

08003816 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800381c:	2300      	movs	r3, #0
 800381e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003820:	2003      	movs	r0, #3
 8003822:	f002 f9f9 	bl	8005c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003826:	2000      	movs	r0, #0
 8003828:	f000 f80e 	bl	8003848 <HAL_InitTick>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	71fb      	strb	r3, [r7, #7]
 8003836:	e001      	b.n	800383c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003838:	f7ff fbd2 	bl	8002fe0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800383c:	79fb      	ldrb	r3, [r7, #7]

}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8003854:	4b16      	ldr	r3, [pc, #88]	; (80038b0 <HAL_InitTick+0x68>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d022      	beq.n	80038a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800385c:	4b15      	ldr	r3, [pc, #84]	; (80038b4 <HAL_InitTick+0x6c>)
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4b13      	ldr	r3, [pc, #76]	; (80038b0 <HAL_InitTick+0x68>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003868:	fbb1 f3f3 	udiv	r3, r1, r3
 800386c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003870:	4618      	mov	r0, r3
 8003872:	f002 fa04 	bl	8005c7e <HAL_SYSTICK_Config>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d10f      	bne.n	800389c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	d809      	bhi.n	8003896 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003882:	2200      	movs	r2, #0
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	f04f 30ff 	mov.w	r0, #4294967295
 800388a:	f002 f9d0 	bl	8005c2e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800388e:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <HAL_InitTick+0x70>)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6013      	str	r3, [r2, #0]
 8003894:	e007      	b.n	80038a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	73fb      	strb	r3, [r7, #15]
 800389a:	e004      	b.n	80038a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	73fb      	strb	r3, [r7, #15]
 80038a0:	e001      	b.n	80038a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	20000058 	.word	0x20000058
 80038b4:	20000050 	.word	0x20000050
 80038b8:	20000054 	.word	0x20000054

080038bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80038bc:	b480      	push	{r7}
 80038be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80038c0:	4b05      	ldr	r3, [pc, #20]	; (80038d8 <HAL_IncTick+0x1c>)
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <HAL_IncTick+0x20>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4413      	add	r3, r2
 80038ca:	4a03      	ldr	r2, [pc, #12]	; (80038d8 <HAL_IncTick+0x1c>)
 80038cc:	6013      	str	r3, [r2, #0]
}
 80038ce:	bf00      	nop
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	20000a34 	.word	0x20000a34
 80038dc:	20000058 	.word	0x20000058

080038e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  return uwTick;
 80038e4:	4b03      	ldr	r3, [pc, #12]	; (80038f4 <HAL_GetTick+0x14>)
 80038e6:	681b      	ldr	r3, [r3, #0]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000a34 	.word	0x20000a34

080038f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003900:	f7ff ffee 	bl	80038e0 <HAL_GetTick>
 8003904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003910:	d004      	beq.n	800391c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003912:	4b09      	ldr	r3, [pc, #36]	; (8003938 <HAL_Delay+0x40>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	4413      	add	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800391c:	bf00      	nop
 800391e:	f7ff ffdf 	bl	80038e0 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	429a      	cmp	r2, r3
 800392c:	d8f7      	bhi.n	800391e <HAL_Delay+0x26>
  {
  }
}
 800392e:	bf00      	nop
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000058 	.word	0x20000058

0800393c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	431a      	orrs	r2, r3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	609a      	str	r2, [r3, #8]
}
 8003956:	bf00      	nop
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	431a      	orrs	r2, r3
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	609a      	str	r2, [r3, #8]
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003998:	4618      	mov	r0, r3
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3360      	adds	r3, #96	; 0x60
 80039b6:	461a      	mov	r2, r3
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	4413      	add	r3, r2
 80039be:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	4b08      	ldr	r3, [pc, #32]	; (80039e8 <LL_ADC_SetOffset+0x44>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	430a      	orrs	r2, r1
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80039dc:	bf00      	nop
 80039de:	371c      	adds	r7, #28
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr
 80039e8:	03fff000 	.word	0x03fff000

080039ec <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	3360      	adds	r3, #96	; 0x60
 80039fa:	461a      	mov	r2, r3
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	3360      	adds	r3, #96	; 0x60
 8003a28:	461a      	mov	r2, r3
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4413      	add	r3, r2
 8003a30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	431a      	orrs	r2, r3
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003a42:	bf00      	nop
 8003a44:	371c      	adds	r7, #28
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr

08003a4e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b087      	sub	sp, #28
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	60f8      	str	r0, [r7, #12]
 8003a56:	60b9      	str	r1, [r7, #8]
 8003a58:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3360      	adds	r3, #96	; 0x60
 8003a5e:	461a      	mov	r2, r3
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	4413      	add	r3, r2
 8003a66:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003a78:	bf00      	nop
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b087      	sub	sp, #28
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	3360      	adds	r3, #96	; 0x60
 8003a94:	461a      	mov	r2, r3
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	431a      	orrs	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr

08003aba <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003aba:	b480      	push	{r7}
 8003abc:	b083      	sub	sp, #12
 8003abe:	af00      	add	r7, sp, #0
 8003ac0:	6078      	str	r0, [r7, #4]
 8003ac2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	695b      	ldr	r3, [r3, #20]
 8003ac8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	615a      	str	r2, [r3, #20]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003af4:	2301      	movs	r3, #1
 8003af6:	e000      	b.n	8003afa <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	370c      	adds	r7, #12
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003b06:	b480      	push	{r7}
 8003b08:	b087      	sub	sp, #28
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	60f8      	str	r0, [r7, #12]
 8003b0e:	60b9      	str	r1, [r7, #8]
 8003b10:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3330      	adds	r3, #48	; 0x30
 8003b16:	461a      	mov	r2, r3
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	0a1b      	lsrs	r3, r3, #8
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	f003 030c 	and.w	r3, r3, #12
 8003b22:	4413      	add	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	211f      	movs	r1, #31
 8003b32:	fa01 f303 	lsl.w	r3, r1, r3
 8003b36:	43db      	mvns	r3, r3
 8003b38:	401a      	ands	r2, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	0e9b      	lsrs	r3, r3, #26
 8003b3e:	f003 011f 	and.w	r1, r3, #31
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f003 031f 	and.w	r3, r3, #31
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003b52:	bf00      	nop
 8003b54:	371c      	adds	r7, #28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d101      	bne.n	8003b76 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003b72:	2301      	movs	r3, #1
 8003b74:	e000      	b.n	8003b78 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003b76:	2300      	movs	r3, #0
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3314      	adds	r3, #20
 8003b94:	461a      	mov	r2, r3
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	0e5b      	lsrs	r3, r3, #25
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	f003 0304 	and.w	r3, r3, #4
 8003ba0:	4413      	add	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	0d1b      	lsrs	r3, r3, #20
 8003bac:	f003 031f 	and.w	r3, r3, #31
 8003bb0:	2107      	movs	r1, #7
 8003bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	401a      	ands	r2, r3
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	0d1b      	lsrs	r3, r3, #20
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
	...

08003bdc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a0f      	ldr	r2, [pc, #60]	; (8003c28 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d10a      	bne.n	8003c06 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bfc:	431a      	orrs	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003c04:	e00a      	b.n	8003c1c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c12:	43db      	mvns	r3, r3
 8003c14:	401a      	ands	r2, r3
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003c1c:	bf00      	nop
 8003c1e:	3714      	adds	r7, #20
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr
 8003c28:	407f0000 	.word	0x407f0000

08003c2c <LL_ADC_SetAnalogWDMonitChannels>:
  *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
  *          -  On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b087      	sub	sp, #28
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	330c      	adds	r3, #12
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	0d1b      	lsrs	r3, r3, #20
 8003c42:	f003 0103 	and.w	r1, r3, #3
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f003 0201 	and.w	r2, r3, #1
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	4403      	add	r3, r0
 8003c5a:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8003c66:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	401a      	ands	r2, r3
 8003c6e:	6879      	ldr	r1, [r7, #4]
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	400b      	ands	r3, r1
 8003c74:	431a      	orrs	r2, r3
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8003c7a:	bf00      	nop
 8003c7c:	371c      	adds	r7, #28
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c84:	4770      	bx	lr

08003c86 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8003c86:	b480      	push	{r7}
 8003c88:	b087      	sub	sp, #28
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	60f8      	str	r0, [r7, #12]
 8003c8e:	60b9      	str	r1, [r7, #8]
 8003c90:	607a      	str	r2, [r7, #4]
 8003c92:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3320      	adds	r3, #32
 8003c98:	461a      	mov	r2, r3
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	0d1b      	lsrs	r3, r3, #20
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	f003 030c 	and.w	r3, r3, #12
 8003ca4:	4413      	add	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	0419      	lsls	r1, r3, #16
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	430b      	orrs	r3, r1
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8003cbe:	bf00      	nop
 8003cc0:	371c      	adds	r7, #28
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc8:	4770      	bx	lr

08003cca <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cca:	b480      	push	{r7}
 8003ccc:	b083      	sub	sp, #12
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f003 031f 	and.w	r3, r3, #31
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	370c      	adds	r7, #12
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr

08003d02 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d02:	b480      	push	{r7}
 8003d04:	b083      	sub	sp, #12
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003d12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6093      	str	r3, [r2, #8]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d3a:	d101      	bne.n	8003d40 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e000      	b.n	8003d42 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d40:	2300      	movs	r3, #0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003d5e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d62:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d8a:	d101      	bne.n	8003d90 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003db2:	f043 0201 	orr.w	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	b083      	sub	sp, #12
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003dd6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003dda:	f043 0202 	orr.w	r2, r3, #2
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003de2:	bf00      	nop
 8003de4:	370c      	adds	r7, #12
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003dee:	b480      	push	{r7}
 8003df0:	b083      	sub	sp, #12
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <LL_ADC_IsEnabled+0x18>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <LL_ADC_IsEnabled+0x1a>
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	370c      	adds	r7, #12
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr

08003e14 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	f003 0302 	and.w	r3, r3, #2
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d101      	bne.n	8003e2c <LL_ADC_IsDisableOngoing+0x18>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <LL_ADC_IsDisableOngoing+0x1a>
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr

08003e3a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b083      	sub	sp, #12
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003e4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e4e:	f043 0204 	orr.w	r2, r3, #4
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e56:	bf00      	nop
 8003e58:	370c      	adds	r7, #12
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e62:	b480      	push	{r7}
 8003e64:	b083      	sub	sp, #12
 8003e66:	af00      	add	r7, sp, #0
 8003e68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d101      	bne.n	8003e7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e000      	b.n	8003e7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	370c      	adds	r7, #12
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	2b08      	cmp	r3, #8
 8003e9a:	d101      	bne.n	8003ea0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b083      	sub	sp, #12
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2280      	movs	r2, #128	; 0x80
 8003eba:	601a      	str	r2, [r3, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ed6:	601a      	str	r2, [r3, #0]
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ef2:	601a      	str	r2, [r3, #0]
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b083      	sub	sp, #12
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	605a      	str	r2, [r3, #4]
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	605a      	str	r2, [r3, #4]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	605a      	str	r2, [r3, #4]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	605a      	str	r2, [r3, #4]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	605a      	str	r2, [r3, #4]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b083      	sub	sp, #12
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	605a      	str	r2, [r3, #4]
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fc0:	b590      	push	{r4, r7, lr}
 8003fc2:	b089      	sub	sp, #36	; 0x24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e177      	b.n	80042ca <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d109      	bne.n	8003ffc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f7ff f81d 	bl	8003028 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fe90 	bl	8003d26 <LL_ADC_IsDeepPowerDownEnabled>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7ff fe76 	bl	8003d02 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4618      	mov	r0, r3
 800401c:	f7ff feab 	bl	8003d76 <LL_ADC_IsInternalRegulatorEnabled>
 8004020:	4603      	mov	r3, r0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d115      	bne.n	8004052 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7ff fe8f 	bl	8003d4e <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004030:	4b9c      	ldr	r3, [pc, #624]	; (80042a4 <HAL_ADC_Init+0x2e4>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	4a9c      	ldr	r2, [pc, #624]	; (80042a8 <HAL_ADC_Init+0x2e8>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	099b      	lsrs	r3, r3, #6
 800403e:	3301      	adds	r3, #1
 8004040:	005b      	lsls	r3, r3, #1
 8004042:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004044:	e002      	b.n	800404c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	3b01      	subs	r3, #1
 800404a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f9      	bne.n	8004046 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fe8d 	bl	8003d76 <LL_ADC_IsInternalRegulatorEnabled>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10d      	bne.n	800407e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004066:	f043 0210 	orr.w	r2, r3, #16
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004072:	f043 0201 	orr.w	r2, r3, #1
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f7ff feed 	bl	8003e62 <LL_ADC_REG_IsConversionOngoing>
 8004088:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b00      	cmp	r3, #0
 8004094:	f040 8110 	bne.w	80042b8 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 810c 	bne.w	80042b8 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040a8:	f043 0202 	orr.w	r2, r3, #2
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff fe9a 	bl	8003dee <LL_ADC_IsEnabled>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d111      	bne.n	80040e4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040c0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80040c4:	f7ff fe93 	bl	8003dee <LL_ADC_IsEnabled>
 80040c8:	4604      	mov	r4, r0
 80040ca:	4878      	ldr	r0, [pc, #480]	; (80042ac <HAL_ADC_Init+0x2ec>)
 80040cc:	f7ff fe8f 	bl	8003dee <LL_ADC_IsEnabled>
 80040d0:	4603      	mov	r3, r0
 80040d2:	4323      	orrs	r3, r4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d105      	bne.n	80040e4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	4619      	mov	r1, r3
 80040de:	4874      	ldr	r0, [pc, #464]	; (80042b0 <HAL_ADC_Init+0x2f0>)
 80040e0:	f7ff fc2c 	bl	800393c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	7f5b      	ldrb	r3, [r3, #29]
 80040e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80040ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80040f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80040fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004102:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004104:	4313      	orrs	r3, r2
 8004106:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800410e:	2b01      	cmp	r3, #1
 8004110:	d106      	bne.n	8004120 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004116:	3b01      	subs	r3, #1
 8004118:	045b      	lsls	r3, r3, #17
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004124:	2b00      	cmp	r3, #0
 8004126:	d009      	beq.n	800413c <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	4313      	orrs	r3, r2
 800413a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68da      	ldr	r2, [r3, #12]
 8004142:	4b5c      	ldr	r3, [pc, #368]	; (80042b4 <HAL_ADC_Init+0x2f4>)
 8004144:	4013      	ands	r3, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6812      	ldr	r2, [r2, #0]
 800414a:	69b9      	ldr	r1, [r7, #24]
 800414c:	430b      	orrs	r3, r1
 800414e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4618      	mov	r0, r3
 800416c:	f7ff fe79 	bl	8003e62 <LL_ADC_REG_IsConversionOngoing>
 8004170:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7ff fe86 	bl	8003e88 <LL_ADC_INJ_IsConversionOngoing>
 800417c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d16d      	bne.n	8004260 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d16a      	bne.n	8004260 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800418e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004196:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041a6:	f023 0302 	bic.w	r3, r3, #2
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	69b9      	ldr	r1, [r7, #24]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d017      	beq.n	80041ec <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80041ca:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80041d4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80041d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6911      	ldr	r1, [r2, #16]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	430b      	orrs	r3, r1
 80041e6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80041ea:	e013      	b.n	8004214 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	6812      	ldr	r2, [r2, #0]
 8004208:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800420c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004210:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421a:	2b01      	cmp	r3, #1
 800421c:	d118      	bne.n	8004250 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004228:	f023 0304 	bic.w	r3, r3, #4
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004234:	4311      	orrs	r1, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800423a:	4311      	orrs	r1, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004240:	430a      	orrs	r2, r1
 8004242:	431a      	orrs	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0201 	orr.w	r2, r2, #1
 800424c:	611a      	str	r2, [r3, #16]
 800424e:	e007      	b.n	8004260 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0201 	bic.w	r2, r2, #1
 800425e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	695b      	ldr	r3, [r3, #20]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d10c      	bne.n	8004282 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	f023 010f 	bic.w	r1, r3, #15
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	1e5a      	subs	r2, r3, #1
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
 8004280:	e007      	b.n	8004292 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 020f 	bic.w	r2, r2, #15
 8004290:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	f023 0303 	bic.w	r3, r3, #3
 800429a:	f043 0201 	orr.w	r2, r3, #1
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	65da      	str	r2, [r3, #92]	; 0x5c
 80042a2:	e011      	b.n	80042c8 <HAL_ADC_Init+0x308>
 80042a4:	20000050 	.word	0x20000050
 80042a8:	053e2d63 	.word	0x053e2d63
 80042ac:	50000100 	.word	0x50000100
 80042b0:	50000300 	.word	0x50000300
 80042b4:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f043 0210 	orr.w	r2, r3, #16
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80042c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3724      	adds	r7, #36	; 0x24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd90      	pop	{r4, r7, pc}
 80042d2:	bf00      	nop

080042d4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	60b9      	str	r1, [r7, #8]
 80042de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042e0:	4851      	ldr	r0, [pc, #324]	; (8004428 <HAL_ADC_Start_DMA+0x154>)
 80042e2:	f7ff fcf2 	bl	8003cca <LL_ADC_GetMultimode>
 80042e6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4618      	mov	r0, r3
 80042ee:	f7ff fdb8 	bl	8003e62 <LL_ADC_REG_IsConversionOngoing>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f040 808f 	bne.w	8004418 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004300:	2b01      	cmp	r3, #1
 8004302:	d101      	bne.n	8004308 <HAL_ADC_Start_DMA+0x34>
 8004304:	2302      	movs	r3, #2
 8004306:	e08a      	b.n	800441e <HAL_ADC_Start_DMA+0x14a>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d005      	beq.n	8004322 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b05      	cmp	r3, #5
 800431a:	d002      	beq.n	8004322 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	2b09      	cmp	r3, #9
 8004320:	d173      	bne.n	800440a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f001 f8c8 	bl	80054b8 <ADC_Enable>
 8004328:	4603      	mov	r3, r0
 800432a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800432c:	7dfb      	ldrb	r3, [r7, #23]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d166      	bne.n	8004400 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004336:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a38      	ldr	r2, [pc, #224]	; (800442c <HAL_ADC_Start_DMA+0x158>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d002      	beq.n	8004356 <HAL_ADC_Start_DMA+0x82>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	e001      	b.n	800435a <HAL_ADC_Start_DMA+0x86>
 8004356:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	6812      	ldr	r2, [r2, #0]
 800435e:	4293      	cmp	r3, r2
 8004360:	d002      	beq.n	8004368 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d006      	beq.n	800438e <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004384:	f023 0206 	bic.w	r2, r3, #6
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	661a      	str	r2, [r3, #96]	; 0x60
 800438c:	e002      	b.n	8004394 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	4a25      	ldr	r2, [pc, #148]	; (8004430 <HAL_ADC_Start_DMA+0x15c>)
 800439a:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	4a24      	ldr	r2, [pc, #144]	; (8004434 <HAL_ADC_Start_DMA+0x160>)
 80043a2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	4a23      	ldr	r2, [pc, #140]	; (8004438 <HAL_ADC_Start_DMA+0x164>)
 80043aa:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	221c      	movs	r2, #28
 80043b2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f042 0210 	orr.w	r2, r2, #16
 80043ca:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3340      	adds	r3, #64	; 0x40
 80043e6:	4619      	mov	r1, r3
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f001 fcfc 	bl	8005de8 <HAL_DMA_Start_IT>
 80043f0:	4603      	mov	r3, r0
 80043f2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fd1e 	bl	8003e3a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80043fe:	e00d      	b.n	800441c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004408:	e008      	b.n	800441c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8004416:	e001      	b.n	800441c <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004418:	2302      	movs	r3, #2
 800441a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800441c:	7dfb      	ldrb	r3, [r7, #23]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3718      	adds	r7, #24
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	50000300 	.word	0x50000300
 800442c:	50000100 	.word	0x50000100
 8004430:	0800563b 	.word	0x0800563b
 8004434:	08005713 	.word	0x08005713
 8004438:	0800572f 	.word	0x0800572f

0800443c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b08a      	sub	sp, #40	; 0x28
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004444:	2300      	movs	r3, #0
 8004446:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004458:	4883      	ldr	r0, [pc, #524]	; (8004668 <HAL_ADC_IRQHandler+0x22c>)
 800445a:	f7ff fc36 	bl	8003cca <LL_ADC_GetMultimode>
 800445e:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d017      	beq.n	800449a <HAL_ADC_IRQHandler+0x5e>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f003 0302 	and.w	r3, r3, #2
 8004470:	2b00      	cmp	r3, #0
 8004472:	d012      	beq.n	800449a <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004478:	f003 0310 	and.w	r3, r3, #16
 800447c:	2b00      	cmp	r3, #0
 800447e:	d105      	bne.n	800448c <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004484:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f001 fa45 	bl	800591c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2202      	movs	r2, #2
 8004498:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f003 0304 	and.w	r3, r3, #4
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d004      	beq.n	80044ae <HAL_ADC_IRQHandler+0x72>
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f003 0304 	and.w	r3, r3, #4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10a      	bne.n	80044c4 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8085 	beq.w	80045c4 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	f003 0308 	and.w	r3, r3, #8
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d07f      	beq.n	80045c4 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c8:	f003 0310 	and.w	r3, r3, #16
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d105      	bne.n	80044dc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4618      	mov	r0, r3
 80044e2:	f7ff fafd 	bl	8003ae0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d064      	beq.n	80045b6 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a5e      	ldr	r2, [pc, #376]	; (800466c <HAL_ADC_IRQHandler+0x230>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d002      	beq.n	80044fc <HAL_ADC_IRQHandler+0xc0>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	e001      	b.n	8004500 <HAL_ADC_IRQHandler+0xc4>
 80044fc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	6812      	ldr	r2, [r2, #0]
 8004504:	4293      	cmp	r3, r2
 8004506:	d008      	beq.n	800451a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d005      	beq.n	800451a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b05      	cmp	r3, #5
 8004512:	d002      	beq.n	800451a <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2b09      	cmp	r3, #9
 8004518:	d104      	bne.n	8004524 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	623b      	str	r3, [r7, #32]
 8004522:	e00d      	b.n	8004540 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a50      	ldr	r2, [pc, #320]	; (800466c <HAL_ADC_IRQHandler+0x230>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d002      	beq.n	8004534 <HAL_ADC_IRQHandler+0xf8>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	e001      	b.n	8004538 <HAL_ADC_IRQHandler+0xfc>
 8004534:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004538:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	68db      	ldr	r3, [r3, #12]
 800453e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004540:	6a3b      	ldr	r3, [r7, #32]
 8004542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d135      	bne.n	80045b6 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0308 	and.w	r3, r3, #8
 8004554:	2b08      	cmp	r3, #8
 8004556:	d12e      	bne.n	80045b6 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff fc80 	bl	8003e62 <LL_ADC_REG_IsConversionOngoing>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11a      	bne.n	800459e <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 020c 	bic.w	r2, r2, #12
 8004576:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800457c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004588:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d112      	bne.n	80045b6 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004594:	f043 0201 	orr.w	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	65da      	str	r2, [r3, #92]	; 0x5c
 800459c:	e00b      	b.n	80045b6 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a2:	f043 0210 	orr.w	r2, r3, #16
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ae:	f043 0201 	orr.w	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 f95a 	bl	8004870 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	220c      	movs	r2, #12
 80045c2:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d004      	beq.n	80045d8 <HAL_ADC_IRQHandler+0x19c>
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	f003 0320 	and.w	r3, r3, #32
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10b      	bne.n	80045f0 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f000 809e 	beq.w	8004720 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 8098 	beq.w	8004720 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f4:	f003 0310 	and.w	r3, r3, #16
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d105      	bne.n	8004608 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004600:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7ff faa6 	bl	8003b5e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004612:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4618      	mov	r0, r3
 800461a:	f7ff fa61 	bl	8003ae0 <LL_ADC_REG_IsTriggerSourceSWStart>
 800461e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a11      	ldr	r2, [pc, #68]	; (800466c <HAL_ADC_IRQHandler+0x230>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d002      	beq.n	8004630 <HAL_ADC_IRQHandler+0x1f4>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	e001      	b.n	8004634 <HAL_ADC_IRQHandler+0x1f8>
 8004630:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	6812      	ldr	r2, [r2, #0]
 8004638:	4293      	cmp	r3, r2
 800463a:	d008      	beq.n	800464e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d005      	beq.n	800464e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b06      	cmp	r3, #6
 8004646:	d002      	beq.n	800464e <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	2b07      	cmp	r3, #7
 800464c:	d104      	bne.n	8004658 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	623b      	str	r3, [r7, #32]
 8004656:	e011      	b.n	800467c <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a03      	ldr	r2, [pc, #12]	; (800466c <HAL_ADC_IRQHandler+0x230>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d006      	beq.n	8004670 <HAL_ADC_IRQHandler+0x234>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	e005      	b.n	8004674 <HAL_ADC_IRQHandler+0x238>
 8004668:	50000300 	.word	0x50000300
 800466c:	50000100 	.word	0x50000100
 8004670:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004674:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d047      	beq.n	8004712 <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d007      	beq.n	800469c <HAL_ADC_IRQHandler+0x260>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d03f      	beq.n	8004712 <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004698:	2b00      	cmp	r3, #0
 800469a:	d13a      	bne.n	8004712 <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046a6:	2b40      	cmp	r3, #64	; 0x40
 80046a8:	d133      	bne.n	8004712 <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80046aa:	6a3b      	ldr	r3, [r7, #32]
 80046ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d12e      	bne.n	8004712 <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7ff fbe5 	bl	8003e88 <LL_ADC_INJ_IsConversionOngoing>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d11a      	bne.n	80046fa <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046d2:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d112      	bne.n	8004712 <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046f0:	f043 0201 	orr.w	r2, r3, #1
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80046f8:	e00b      	b.n	8004712 <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fe:	f043 0210 	orr.w	r2, r3, #16
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800470a:	f043 0201 	orr.w	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f001 f8da 	bl	80058cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2260      	movs	r2, #96	; 0x60
 800471e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004726:	2b00      	cmp	r3, #0
 8004728:	d011      	beq.n	800474e <HAL_ADC_IRQHandler+0x312>
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00c      	beq.n	800474e <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004738:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f8a9 	bl	8004898 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2280      	movs	r2, #128	; 0x80
 800474c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d012      	beq.n	800477e <HAL_ADC_IRQHandler+0x342>
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00d      	beq.n	800477e <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004766:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f001 f8c0 	bl	80058f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800477c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004784:	2b00      	cmp	r3, #0
 8004786:	d012      	beq.n	80047ae <HAL_ADC_IRQHandler+0x372>
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00d      	beq.n	80047ae <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004796:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f001 f8b2 	bl	8005908 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80047ac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	f003 0310 	and.w	r3, r3, #16
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d036      	beq.n	8004826 <HAL_ADC_IRQHandler+0x3ea>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d031      	beq.n	8004826 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d102      	bne.n	80047d0 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80047ca:	2301      	movs	r3, #1
 80047cc:	627b      	str	r3, [r7, #36]	; 0x24
 80047ce:	e014      	b.n	80047fa <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d008      	beq.n	80047e8 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80047d6:	4825      	ldr	r0, [pc, #148]	; (800486c <HAL_ADC_IRQHandler+0x430>)
 80047d8:	f7ff fa85 	bl	8003ce6 <LL_ADC_GetMultiDMATransfer>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d00b      	beq.n	80047fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80047e2:	2301      	movs	r3, #1
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
 80047e6:	e008      	b.n	80047fa <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80047f6:	2301      	movs	r3, #1
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d10e      	bne.n	800481e <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004804:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004810:	f043 0202 	orr.w	r2, r3, #2
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f847 	bl	80048ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2210      	movs	r2, #16
 8004824:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800482c:	2b00      	cmp	r3, #0
 800482e:	d018      	beq.n	8004862 <HAL_ADC_IRQHandler+0x426>
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004836:	2b00      	cmp	r3, #0
 8004838:	d013      	beq.n	8004862 <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800484a:	f043 0208 	orr.w	r2, r3, #8
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800485a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f001 f83f 	bl	80058e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8004862:	bf00      	nop
 8004864:	3728      	adds	r7, #40	; 0x28
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	50000300 	.word	0x50000300

08004870 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr

08004884 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b0b6      	sub	sp, #216	; 0xd8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ca:	2300      	movs	r3, #0
 80048cc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80048d0:	2300      	movs	r3, #0
 80048d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d101      	bne.n	80048e2 <HAL_ADC_ConfigChannel+0x22>
 80048de:	2302      	movs	r3, #2
 80048e0:	e3c8      	b.n	8005074 <HAL_ADC_ConfigChannel+0x7b4>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff fab7 	bl	8003e62 <LL_ADC_REG_IsConversionOngoing>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	f040 83ad 	bne.w	8005056 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6818      	ldr	r0, [r3, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	6859      	ldr	r1, [r3, #4]
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	f7ff f8fc 	bl	8003b06 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f7ff faa5 	bl	8003e62 <LL_ADC_REG_IsConversionOngoing>
 8004918:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff fab1 	bl	8003e88 <LL_ADC_INJ_IsConversionOngoing>
 8004926:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800492a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800492e:	2b00      	cmp	r3, #0
 8004930:	f040 81d9 	bne.w	8004ce6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004938:	2b00      	cmp	r3, #0
 800493a:	f040 81d4 	bne.w	8004ce6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004946:	d10f      	bne.n	8004968 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2200      	movs	r2, #0
 8004952:	4619      	mov	r1, r3
 8004954:	f7ff f916 	bl	8003b84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff f8aa 	bl	8003aba <LL_ADC_SetSamplingTimeCommonConfig>
 8004966:	e00e      	b.n	8004986 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	6819      	ldr	r1, [r3, #0]
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	461a      	mov	r2, r3
 8004976:	f7ff f905 	bl	8003b84 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2100      	movs	r1, #0
 8004980:	4618      	mov	r0, r3
 8004982:	f7ff f89a 	bl	8003aba <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	695a      	ldr	r2, [r3, #20]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	08db      	lsrs	r3, r3, #3
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	fa02 f303 	lsl.w	r3, r2, r3
 800499c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	2b04      	cmp	r3, #4
 80049a6:	d022      	beq.n	80049ee <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6818      	ldr	r0, [r3, #0]
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	6919      	ldr	r1, [r3, #16]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80049b8:	f7fe fff4 	bl	80039a4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6818      	ldr	r0, [r3, #0]
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	6919      	ldr	r1, [r3, #16]
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	461a      	mov	r2, r3
 80049ca:	f7ff f840 	bl	8003a4e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6818      	ldr	r0, [r3, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	6919      	ldr	r1, [r3, #16]
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	7f1b      	ldrb	r3, [r3, #28]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d102      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x124>
 80049de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80049e2:	e000      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x126>
 80049e4:	2300      	movs	r3, #0
 80049e6:	461a      	mov	r2, r3
 80049e8:	f7ff f84c 	bl	8003a84 <LL_ADC_SetOffsetSaturation>
 80049ec:	e17b      	b.n	8004ce6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe fff9 	bl	80039ec <LL_ADC_GetOffsetChannel>
 80049fa:	4603      	mov	r3, r0
 80049fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10a      	bne.n	8004a1a <HAL_ADC_ConfigChannel+0x15a>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	2100      	movs	r1, #0
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fe ffee 	bl	80039ec <LL_ADC_GetOffsetChannel>
 8004a10:	4603      	mov	r3, r0
 8004a12:	0e9b      	lsrs	r3, r3, #26
 8004a14:	f003 021f 	and.w	r2, r3, #31
 8004a18:	e01e      	b.n	8004a58 <HAL_ADC_ConfigChannel+0x198>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f7fe ffe3 	bl	80039ec <LL_ADC_GetOffsetChannel>
 8004a26:	4603      	mov	r3, r0
 8004a28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a2c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004a30:	fa93 f3a3 	rbit	r3, r3
 8004a34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004a38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004a3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004a40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004a48:	2320      	movs	r3, #32
 8004a4a:	e004      	b.n	8004a56 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004a4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a50:	fab3 f383 	clz	r3, r3
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d105      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x1b0>
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	0e9b      	lsrs	r3, r3, #26
 8004a6a:	f003 031f 	and.w	r3, r3, #31
 8004a6e:	e018      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x1e2>
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004a7c:	fa93 f3a3 	rbit	r3, r3
 8004a80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004a84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004a8c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8004a94:	2320      	movs	r3, #32
 8004a96:	e004      	b.n	8004aa2 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004a98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004a9c:	fab3 f383 	clz	r3, r3
 8004aa0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d106      	bne.n	8004ab4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fe ffb2 	bl	8003a18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2101      	movs	r1, #1
 8004aba:	4618      	mov	r0, r3
 8004abc:	f7fe ff96 	bl	80039ec <LL_ADC_GetOffsetChannel>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <HAL_ADC_ConfigChannel+0x220>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2101      	movs	r1, #1
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe ff8b 	bl	80039ec <LL_ADC_GetOffsetChannel>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	0e9b      	lsrs	r3, r3, #26
 8004ada:	f003 021f 	and.w	r2, r3, #31
 8004ade:	e01e      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x25e>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe ff80 	bl	80039ec <LL_ADC_GetOffsetChannel>
 8004aec:	4603      	mov	r3, r0
 8004aee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004af6:	fa93 f3a3 	rbit	r3, r3
 8004afa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004b02:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004b06:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004b0e:	2320      	movs	r3, #32
 8004b10:	e004      	b.n	8004b1c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8004b12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004b16:	fab3 f383 	clz	r3, r3
 8004b1a:	b2db      	uxtb	r3, r3
 8004b1c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <HAL_ADC_ConfigChannel+0x276>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	0e9b      	lsrs	r3, r3, #26
 8004b30:	f003 031f 	and.w	r3, r3, #31
 8004b34:	e018      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x2a8>
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004b4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004b4e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8004b52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d101      	bne.n	8004b5e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004b5a:	2320      	movs	r3, #32
 8004b5c:	e004      	b.n	8004b68 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004b5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004b62:	fab3 f383 	clz	r3, r3
 8004b66:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d106      	bne.n	8004b7a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	2200      	movs	r2, #0
 8004b72:	2101      	movs	r1, #1
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe ff4f 	bl	8003a18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	2102      	movs	r1, #2
 8004b80:	4618      	mov	r0, r3
 8004b82:	f7fe ff33 	bl	80039ec <LL_ADC_GetOffsetChannel>
 8004b86:	4603      	mov	r3, r0
 8004b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10a      	bne.n	8004ba6 <HAL_ADC_ConfigChannel+0x2e6>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	2102      	movs	r1, #2
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe ff28 	bl	80039ec <LL_ADC_GetOffsetChannel>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	0e9b      	lsrs	r3, r3, #26
 8004ba0:	f003 021f 	and.w	r2, r3, #31
 8004ba4:	e01e      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x324>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	2102      	movs	r1, #2
 8004bac:	4618      	mov	r0, r3
 8004bae:	f7fe ff1d 	bl	80039ec <LL_ADC_GetOffsetChannel>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bbc:	fa93 f3a3 	rbit	r3, r3
 8004bc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004bc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bc8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004bcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d101      	bne.n	8004bd8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004bd4:	2320      	movs	r3, #32
 8004bd6:	e004      	b.n	8004be2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004bd8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004bdc:	fab3 f383 	clz	r3, r3
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <HAL_ADC_ConfigChannel+0x33c>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	0e9b      	lsrs	r3, r3, #26
 8004bf6:	f003 031f 	and.w	r3, r3, #31
 8004bfa:	e016      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x36a>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c08:	fa93 f3a3 	rbit	r3, r3
 8004c0c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004c0e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004c14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004c1c:	2320      	movs	r3, #32
 8004c1e:	e004      	b.n	8004c2a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004c20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004c24:	fab3 f383 	clz	r3, r3
 8004c28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d106      	bne.n	8004c3c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	2102      	movs	r1, #2
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fe feee 	bl	8003a18 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2103      	movs	r1, #3
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fed2 	bl	80039ec <LL_ADC_GetOffsetChannel>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10a      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x3a8>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2103      	movs	r1, #3
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fe fec7 	bl	80039ec <LL_ADC_GetOffsetChannel>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	0e9b      	lsrs	r3, r3, #26
 8004c62:	f003 021f 	and.w	r2, r3, #31
 8004c66:	e017      	b.n	8004c98 <HAL_ADC_ConfigChannel+0x3d8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2103      	movs	r1, #3
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe febc 	bl	80039ec <LL_ADC_GetOffsetChannel>
 8004c74:	4603      	mov	r3, r0
 8004c76:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c7a:	fa93 f3a3 	rbit	r3, r3
 8004c7e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004c80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c82:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004c84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004c8a:	2320      	movs	r3, #32
 8004c8c:	e003      	b.n	8004c96 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c90:	fab3 f383 	clz	r3, r3
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d105      	bne.n	8004cb0 <HAL_ADC_ConfigChannel+0x3f0>
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	0e9b      	lsrs	r3, r3, #26
 8004caa:	f003 031f 	and.w	r3, r3, #31
 8004cae:	e011      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x414>
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cb8:	fa93 f3a3 	rbit	r3, r3
 8004cbc:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004cbe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cc0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d101      	bne.n	8004ccc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004cc8:	2320      	movs	r3, #32
 8004cca:	e003      	b.n	8004cd4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cce:	fab3 f383 	clz	r3, r3
 8004cd2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d106      	bne.n	8004ce6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2103      	movs	r1, #3
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fe fe99 	bl	8003a18 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7ff f87f 	bl	8003dee <LL_ADC_IsEnabled>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f040 8140 	bne.w	8004f78 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6818      	ldr	r0, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6819      	ldr	r1, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	461a      	mov	r2, r3
 8004d06:	f7fe ff69 	bl	8003bdc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	4a8f      	ldr	r2, [pc, #572]	; (8004f4c <HAL_ADC_ConfigChannel+0x68c>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	f040 8131 	bne.w	8004f78 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d10b      	bne.n	8004d3e <HAL_ADC_ConfigChannel+0x47e>
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	0e9b      	lsrs	r3, r3, #26
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2b09      	cmp	r3, #9
 8004d34:	bf94      	ite	ls
 8004d36:	2301      	movls	r3, #1
 8004d38:	2300      	movhi	r3, #0
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	e019      	b.n	8004d72 <HAL_ADC_ConfigChannel+0x4b2>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d46:	fa93 f3a3 	rbit	r3, r3
 8004d4a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004d4c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d4e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d101      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004d56:	2320      	movs	r3, #32
 8004d58:	e003      	b.n	8004d62 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004d5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d5c:	fab3 f383 	clz	r3, r3
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	3301      	adds	r3, #1
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	2b09      	cmp	r3, #9
 8004d6a:	bf94      	ite	ls
 8004d6c:	2301      	movls	r3, #1
 8004d6e:	2300      	movhi	r3, #0
 8004d70:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d079      	beq.n	8004e6a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d107      	bne.n	8004d92 <HAL_ADC_ConfigChannel+0x4d2>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	0e9b      	lsrs	r3, r3, #26
 8004d88:	3301      	adds	r3, #1
 8004d8a:	069b      	lsls	r3, r3, #26
 8004d8c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d90:	e015      	b.n	8004dbe <HAL_ADC_ConfigChannel+0x4fe>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d9a:	fa93 f3a3 	rbit	r3, r3
 8004d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004da2:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004daa:	2320      	movs	r3, #32
 8004dac:	e003      	b.n	8004db6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db0:	fab3 f383 	clz	r3, r3
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	3301      	adds	r3, #1
 8004db8:	069b      	lsls	r3, r3, #26
 8004dba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d109      	bne.n	8004dde <HAL_ADC_ConfigChannel+0x51e>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	0e9b      	lsrs	r3, r3, #26
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ddc:	e017      	b.n	8004e0e <HAL_ADC_ConfigChannel+0x54e>
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de6:	fa93 f3a3 	rbit	r3, r3
 8004dea:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004df0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d101      	bne.n	8004dfa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004df6:	2320      	movs	r3, #32
 8004df8:	e003      	b.n	8004e02 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dfc:	fab3 f383 	clz	r3, r3
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	3301      	adds	r3, #1
 8004e04:	f003 031f 	and.w	r3, r3, #31
 8004e08:	2101      	movs	r1, #1
 8004e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0e:	ea42 0103 	orr.w	r1, r2, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <HAL_ADC_ConfigChannel+0x574>
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	0e9b      	lsrs	r3, r3, #26
 8004e24:	3301      	adds	r3, #1
 8004e26:	f003 021f 	and.w	r2, r3, #31
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	051b      	lsls	r3, r3, #20
 8004e32:	e018      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x5a6>
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	fa93 f3a3 	rbit	r3, r3
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e44:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	e003      	b.n	8004e58 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004e50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e52:	fab3 f383 	clz	r3, r3
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	3301      	adds	r3, #1
 8004e5a:	f003 021f 	and.w	r2, r3, #31
 8004e5e:	4613      	mov	r3, r2
 8004e60:	005b      	lsls	r3, r3, #1
 8004e62:	4413      	add	r3, r2
 8004e64:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004e66:	430b      	orrs	r3, r1
 8004e68:	e081      	b.n	8004f6e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d107      	bne.n	8004e86 <HAL_ADC_ConfigChannel+0x5c6>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	0e9b      	lsrs	r3, r3, #26
 8004e7c:	3301      	adds	r3, #1
 8004e7e:	069b      	lsls	r3, r3, #26
 8004e80:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004e84:	e015      	b.n	8004eb2 <HAL_ADC_ConfigChannel+0x5f2>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8e:	fa93 f3a3 	rbit	r3, r3
 8004e92:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e96:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d101      	bne.n	8004ea2 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004e9e:	2320      	movs	r3, #32
 8004ea0:	e003      	b.n	8004eaa <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	fab3 f383 	clz	r3, r3
 8004ea8:	b2db      	uxtb	r3, r3
 8004eaa:	3301      	adds	r3, #1
 8004eac:	069b      	lsls	r3, r3, #26
 8004eae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <HAL_ADC_ConfigChannel+0x612>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	0e9b      	lsrs	r3, r3, #26
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	2101      	movs	r1, #1
 8004ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed0:	e017      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x642>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	fa93 f3a3 	rbit	r3, r3
 8004ede:	61fb      	str	r3, [r7, #28]
  return result;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d101      	bne.n	8004eee <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004eea:	2320      	movs	r3, #32
 8004eec:	e003      	b.n	8004ef6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	fab3 f383 	clz	r3, r3
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	f003 031f 	and.w	r3, r3, #31
 8004efc:	2101      	movs	r1, #1
 8004efe:	fa01 f303 	lsl.w	r3, r1, r3
 8004f02:	ea42 0103 	orr.w	r1, r2, r3
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10d      	bne.n	8004f2e <HAL_ADC_ConfigChannel+0x66e>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	0e9b      	lsrs	r3, r3, #26
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f003 021f 	and.w	r2, r3, #31
 8004f1e:	4613      	mov	r3, r2
 8004f20:	005b      	lsls	r3, r3, #1
 8004f22:	4413      	add	r3, r2
 8004f24:	3b1e      	subs	r3, #30
 8004f26:	051b      	lsls	r3, r3, #20
 8004f28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004f2c:	e01e      	b.n	8004f6c <HAL_ADC_ConfigChannel+0x6ac>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	fa93 f3a3 	rbit	r3, r3
 8004f3a:	613b      	str	r3, [r7, #16]
  return result;
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d104      	bne.n	8004f50 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004f46:	2320      	movs	r3, #32
 8004f48:	e006      	b.n	8004f58 <HAL_ADC_ConfigChannel+0x698>
 8004f4a:	bf00      	nop
 8004f4c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	fab3 f383 	clz	r3, r3
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	3301      	adds	r3, #1
 8004f5a:	f003 021f 	and.w	r2, r3, #31
 8004f5e:	4613      	mov	r3, r2
 8004f60:	005b      	lsls	r3, r3, #1
 8004f62:	4413      	add	r3, r2
 8004f64:	3b1e      	subs	r3, #30
 8004f66:	051b      	lsls	r3, r3, #20
 8004f68:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004f6c:	430b      	orrs	r3, r1
 8004f6e:	683a      	ldr	r2, [r7, #0]
 8004f70:	6892      	ldr	r2, [r2, #8]
 8004f72:	4619      	mov	r1, r3
 8004f74:	f7fe fe06 	bl	8003b84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	4b3f      	ldr	r3, [pc, #252]	; (800507c <HAL_ADC_ConfigChannel+0x7bc>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d071      	beq.n	8005068 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004f84:	483e      	ldr	r0, [pc, #248]	; (8005080 <HAL_ADC_ConfigChannel+0x7c0>)
 8004f86:	f7fe fcff 	bl	8003988 <LL_ADC_GetCommonPathInternalCh>
 8004f8a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a3c      	ldr	r2, [pc, #240]	; (8005084 <HAL_ADC_ConfigChannel+0x7c4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d004      	beq.n	8004fa2 <HAL_ADC_ConfigChannel+0x6e2>
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a3a      	ldr	r2, [pc, #232]	; (8005088 <HAL_ADC_ConfigChannel+0x7c8>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d127      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004fa2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d121      	bne.n	8004ff2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fb6:	d157      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004fb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004fbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	482f      	ldr	r0, [pc, #188]	; (8005080 <HAL_ADC_ConfigChannel+0x7c0>)
 8004fc4:	f7fe fccd 	bl	8003962 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004fc8:	4b30      	ldr	r3, [pc, #192]	; (800508c <HAL_ADC_ConfigChannel+0x7cc>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	099b      	lsrs	r3, r3, #6
 8004fce:	4a30      	ldr	r2, [pc, #192]	; (8005090 <HAL_ADC_ConfigChannel+0x7d0>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	099b      	lsrs	r3, r3, #6
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	4613      	mov	r3, r2
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	4413      	add	r3, r2
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004fe2:	e002      	b.n	8004fea <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d1f9      	bne.n	8004fe4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004ff0:	e03a      	b.n	8005068 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a27      	ldr	r2, [pc, #156]	; (8005094 <HAL_ADC_ConfigChannel+0x7d4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d113      	bne.n	8005024 <HAL_ADC_ConfigChannel+0x764>
 8004ffc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005000:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10d      	bne.n	8005024 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a22      	ldr	r2, [pc, #136]	; (8005098 <HAL_ADC_ConfigChannel+0x7d8>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d02a      	beq.n	8005068 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005012:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005016:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800501a:	4619      	mov	r1, r3
 800501c:	4818      	ldr	r0, [pc, #96]	; (8005080 <HAL_ADC_ConfigChannel+0x7c0>)
 800501e:	f7fe fca0 	bl	8003962 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005022:	e021      	b.n	8005068 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a1c      	ldr	r2, [pc, #112]	; (800509c <HAL_ADC_ConfigChannel+0x7dc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d11c      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800502e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005036:	2b00      	cmp	r3, #0
 8005038:	d116      	bne.n	8005068 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a16      	ldr	r2, [pc, #88]	; (8005098 <HAL_ADC_ConfigChannel+0x7d8>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d011      	beq.n	8005068 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8005044:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800504c:	4619      	mov	r1, r3
 800504e:	480c      	ldr	r0, [pc, #48]	; (8005080 <HAL_ADC_ConfigChannel+0x7c0>)
 8005050:	f7fe fc87 	bl	8003962 <LL_ADC_SetCommonPathInternalCh>
 8005054:	e008      	b.n	8005068 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800505a:	f043 0220 	orr.w	r2, r3, #32
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2200      	movs	r2, #0
 800506c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005070:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8005074:	4618      	mov	r0, r3
 8005076:	37d8      	adds	r7, #216	; 0xd8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	80080000 	.word	0x80080000
 8005080:	50000300 	.word	0x50000300
 8005084:	c3210000 	.word	0xc3210000
 8005088:	90c00010 	.word	0x90c00010
 800508c:	20000050 	.word	0x20000050
 8005090:	053e2d63 	.word	0x053e2d63
 8005094:	c7520000 	.word	0xc7520000
 8005098:	50000100 	.word	0x50000100
 800509c:	cb840000 	.word	0xcb840000

080050a0 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b08e      	sub	sp, #56	; 0x38
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050aa:	2300      	movs	r3, #0
 80050ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050b8:	d003      	beq.n	80050c2 <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 80050be:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_ADC_AnalogWDGConfig+0x30>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e1ea      	b.n	80054a6 <HAL_ADC_AnalogWDGConfig+0x406>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fe fec0 	bl	8003e62 <LL_ADC_REG_IsConversionOngoing>
 80050e2:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f7fe fecd 	bl	8003e88 <LL_ADC_INJ_IsConversionOngoing>
 80050ee:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80050f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f040 8175 	bne.w	80053e2 <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80050f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f040 8171 	bne.w	80053e2 <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a90      	ldr	r2, [pc, #576]	; (8005348 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	f040 808d 	bne.w	8005226 <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005114:	d034      	beq.n	8005180 <HAL_ADC_AnalogWDGConfig+0xe0>
 8005116:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800511a:	d856      	bhi.n	80051ca <HAL_ADC_AnalogWDGConfig+0x12a>
 800511c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005120:	d04b      	beq.n	80051ba <HAL_ADC_AnalogWDGConfig+0x11a>
 8005122:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005126:	d850      	bhi.n	80051ca <HAL_ADC_AnalogWDGConfig+0x12a>
 8005128:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800512c:	d01b      	beq.n	8005166 <HAL_ADC_AnalogWDGConfig+0xc6>
 800512e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005132:	d84a      	bhi.n	80051ca <HAL_ADC_AnalogWDGConfig+0x12a>
 8005134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005138:	d037      	beq.n	80051aa <HAL_ADC_AnalogWDGConfig+0x10a>
 800513a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800513e:	d844      	bhi.n	80051ca <HAL_ADC_AnalogWDGConfig+0x12a>
 8005140:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005144:	d029      	beq.n	800519a <HAL_ADC_AnalogWDGConfig+0xfa>
 8005146:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800514a:	d13e      	bne.n	80051ca <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005158:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800515c:	461a      	mov	r2, r3
 800515e:	497a      	ldr	r1, [pc, #488]	; (8005348 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005160:	f7fe fd64 	bl	8003c2c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8005164:	e039      	b.n	80051da <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6818      	ldr	r0, [r3, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005172:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8005176:	461a      	mov	r2, r3
 8005178:	4973      	ldr	r1, [pc, #460]	; (8005348 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800517a:	f7fe fd57 	bl	8003c2c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 800517e:	e02c      	b.n	80051da <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6818      	ldr	r0, [r3, #0]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800518c:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8005190:	461a      	mov	r2, r3
 8005192:	496d      	ldr	r1, [pc, #436]	; (8005348 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005194:	f7fe fd4a 	bl	8003c2c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8005198:	e01f      	b.n	80051da <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a6b      	ldr	r2, [pc, #428]	; (800534c <HAL_ADC_AnalogWDGConfig+0x2ac>)
 80051a0:	4969      	ldr	r1, [pc, #420]	; (8005348 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fd42 	bl	8003c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80051a8:	e017      	b.n	80051da <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a68      	ldr	r2, [pc, #416]	; (8005350 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 80051b0:	4965      	ldr	r1, [pc, #404]	; (8005348 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe fd3a 	bl	8003c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80051b8:	e00f      	b.n	80051da <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a65      	ldr	r2, [pc, #404]	; (8005354 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80051c0:	4961      	ldr	r1, [pc, #388]	; (8005348 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80051c2:	4618      	mov	r0, r3
 80051c4:	f7fe fd32 	bl	8003c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80051c8:	e007      	b.n	80051da <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2200      	movs	r2, #0
 80051d0:	495d      	ldr	r1, [pc, #372]	; (8005348 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fd2a 	bl	8003c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80051d8:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	430a      	orrs	r2, r1
 80051ee:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7fe fe54 	bl	8003eae <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	7b1b      	ldrb	r3, [r3, #12]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d105      	bne.n	800521a <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4618      	mov	r0, r3
 8005214:	f7fe fe74 	bl	8003f00 <LL_ADC_EnableIT_AWD1>
 8005218:	e0e3      	b.n	80053e2 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe fe9e 	bl	8003f60 <LL_ADC_DisableIT_AWD1>
 8005224:	e0dd      	b.n	80053e2 <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800522e:	d01d      	beq.n	800526c <HAL_ADC_AnalogWDGConfig+0x1cc>
 8005230:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005234:	f200 8092 	bhi.w	800535c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005238:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800523c:	d07b      	beq.n	8005336 <HAL_ADC_AnalogWDGConfig+0x296>
 800523e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005242:	f200 808b 	bhi.w	800535c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005246:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800524a:	d00f      	beq.n	800526c <HAL_ADC_AnalogWDGConfig+0x1cc>
 800524c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005250:	f200 8084 	bhi.w	800535c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005258:	d06d      	beq.n	8005336 <HAL_ADC_AnalogWDGConfig+0x296>
 800525a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800525e:	d87d      	bhi.n	800535c <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005260:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005264:	d067      	beq.n	8005336 <HAL_ADC_AnalogWDGConfig+0x296>
 8005266:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800526a:	d177      	bne.n	800535c <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a39      	ldr	r2, [pc, #228]	; (8005358 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d12f      	bne.n	80052d6 <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800527e:	2b00      	cmp	r3, #0
 8005280:	d108      	bne.n	8005294 <HAL_ADC_AnalogWDGConfig+0x1f4>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	0e9b      	lsrs	r3, r3, #26
 8005288:	f003 031f 	and.w	r3, r3, #31
 800528c:	2201      	movs	r2, #1
 800528e:	fa02 f303 	lsl.w	r3, r2, r3
 8005292:	e016      	b.n	80052c2 <HAL_ADC_AnalogWDGConfig+0x222>
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	fa93 f3a3 	rbit	r3, r3
 80052a0:	61bb      	str	r3, [r7, #24]
  return result;
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 80052ac:	2320      	movs	r3, #32
 80052ae:	e003      	b.n	80052b8 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 80052b0:	6a3b      	ldr	r3, [r7, #32]
 80052b2:	fab3 f383 	clz	r3, r3
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	f003 031f 	and.w	r3, r3, #31
 80052bc:	2201      	movs	r2, #1
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	687a      	ldr	r2, [r7, #4]
 80052c4:	6812      	ldr	r2, [r2, #0]
 80052c6:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	430b      	orrs	r3, r1
 80052d0:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 80052d4:	e04b      	b.n	800536e <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d108      	bne.n	80052f4 <HAL_ADC_AnalogWDGConfig+0x254>
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	0e9b      	lsrs	r3, r3, #26
 80052e8:	f003 031f 	and.w	r3, r3, #31
 80052ec:	2201      	movs	r2, #1
 80052ee:	fa02 f303 	lsl.w	r3, r2, r3
 80052f2:	e016      	b.n	8005322 <HAL_ADC_AnalogWDGConfig+0x282>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	fa93 f3a3 	rbit	r3, r3
 8005300:	60fb      	str	r3, [r7, #12]
  return result;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 800530c:	2320      	movs	r3, #32
 800530e:	e003      	b.n	8005318 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8005310:	697b      	ldr	r3, [r7, #20]
 8005312:	fab3 f383 	clz	r3, r3
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f003 031f 	and.w	r3, r3, #31
 800531c:	2201      	movs	r2, #1
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6812      	ldr	r2, [r2, #0]
 8005326:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6812      	ldr	r2, [r2, #0]
 800532e:	430b      	orrs	r3, r1
 8005330:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 8005334:	e01b      	b.n	800536e <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a05      	ldr	r2, [pc, #20]	; (8005354 <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8005340:	4619      	mov	r1, r3
 8005342:	f7fe fc73 	bl	8003c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005346:	e012      	b.n	800536e <HAL_ADC_AnalogWDGConfig+0x2ce>
 8005348:	7dc00000 	.word	0x7dc00000
 800534c:	0087ffff 	.word	0x0087ffff
 8005350:	0107ffff 	.word	0x0107ffff
 8005354:	0187ffff 	.word	0x0187ffff
 8005358:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6818      	ldr	r0, [r3, #0]
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2200      	movs	r2, #0
 8005366:	4619      	mov	r1, r3
 8005368:	f7fe fc60 	bl	8003c2c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800536c:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a4f      	ldr	r2, [pc, #316]	; (80054b0 <HAL_ADC_AnalogWDGConfig+0x410>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d11a      	bne.n	80053ae <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4618      	mov	r0, r3
 800538a:	f7fe fd9d 	bl	8003ec8 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	7b1b      	ldrb	r3, [r3, #12]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d105      	bne.n	80053a2 <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4618      	mov	r0, r3
 800539c:	f7fe fdc0 	bl	8003f20 <LL_ADC_EnableIT_AWD2>
 80053a0:	e01f      	b.n	80053e2 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fe fdea 	bl	8003f80 <LL_ADC_DisableIT_AWD2>
 80053ac:	e019      	b.n	80053e2 <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4618      	mov	r0, r3
 80053c0:	f7fe fd90 	bl	8003ee4 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	7b1b      	ldrb	r3, [r3, #12]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d105      	bne.n	80053d8 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fe fdb5 	bl	8003f40 <LL_ADC_EnableIT_AWD3>
 80053d6:	e004      	b.n	80053e2 <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe fddf 	bl	8003fa0 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a33      	ldr	r2, [pc, #204]	; (80054b4 <HAL_ADC_AnalogWDGConfig+0x414>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d118      	bne.n	800541e <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	08db      	lsrs	r3, r3, #3
 80053f8:	f003 0303 	and.w	r3, r3, #3
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005402:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	695a      	ldr	r2, [r3, #20]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	08db      	lsrs	r3, r3, #3
 8005410:	f003 0303 	and.w	r3, r3, #3
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	fa02 f303 	lsl.w	r3, r2, r3
 800541a:	633b      	str	r3, [r7, #48]	; 0x30
 800541c:	e035      	b.n	800548a <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0318 	and.w	r3, r3, #24
 8005428:	2b18      	cmp	r3, #24
 800542a:	d00f      	beq.n	800544c <HAL_ADC_AnalogWDGConfig+0x3ac>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	691a      	ldr	r2, [r3, #16]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68db      	ldr	r3, [r3, #12]
 8005436:	08db      	lsrs	r3, r3, #3
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	f1c3 0302 	rsb	r3, r3, #2
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	f003 031e 	and.w	r3, r3, #30
 8005446:	fa22 f303 	lsr.w	r3, r2, r3
 800544a:	e002      	b.n	8005452 <HAL_ADC_AnalogWDGConfig+0x3b2>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0318 	and.w	r3, r3, #24
 800545e:	2b18      	cmp	r3, #24
 8005460:	d00f      	beq.n	8005482 <HAL_ADC_AnalogWDGConfig+0x3e2>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	08db      	lsrs	r3, r3, #3
 800546e:	f003 0303 	and.w	r3, r3, #3
 8005472:	f1c3 0302 	rsb	r3, r3, #2
 8005476:	005b      	lsls	r3, r3, #1
 8005478:	f003 031e 	and.w	r3, r3, #30
 800547c:	fa22 f303 	lsr.w	r3, r2, r3
 8005480:	e002      	b.n	8005488 <HAL_ADC_AnalogWDGConfig+0x3e8>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6818      	ldr	r0, [r3, #0]
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	6819      	ldr	r1, [r3, #0]
 8005492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005496:	f7fe fbf6 	bl	8003c86 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80054a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3738      	adds	r7, #56	; 0x38
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	0017ffff 	.word	0x0017ffff
 80054b4:	7dc00000 	.word	0x7dc00000

080054b8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fe fc92 	bl	8003dee <LL_ADC_IsEnabled>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d14d      	bne.n	800556c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	689a      	ldr	r2, [r3, #8]
 80054d6:	4b28      	ldr	r3, [pc, #160]	; (8005578 <ADC_Enable+0xc0>)
 80054d8:	4013      	ands	r3, r2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00d      	beq.n	80054fa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e2:	f043 0210 	orr.w	r2, r3, #16
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054ee:	f043 0201 	orr.w	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e039      	b.n	800556e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4618      	mov	r0, r3
 8005500:	f7fe fc4d 	bl	8003d9e <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005504:	f7fe f9ec 	bl	80038e0 <HAL_GetTick>
 8005508:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800550a:	e028      	b.n	800555e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f7fe fc6c 	bl	8003dee <LL_ADC_IsEnabled>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d104      	bne.n	8005526 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4618      	mov	r0, r3
 8005522:	f7fe fc3c 	bl	8003d9e <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005526:	f7fe f9db 	bl	80038e0 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d914      	bls.n	800555e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b01      	cmp	r3, #1
 8005540:	d00d      	beq.n	800555e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005546:	f043 0210 	orr.w	r2, r3, #16
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005552:	f043 0201 	orr.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e007      	b.n	800556e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b01      	cmp	r3, #1
 800556a:	d1cf      	bne.n	800550c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3710      	adds	r7, #16
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
 8005576:	bf00      	nop
 8005578:	8000003f 	.word	0x8000003f

0800557c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe fc43 	bl	8003e14 <LL_ADC_IsDisableOngoing>
 800558e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4618      	mov	r0, r3
 8005596:	f7fe fc2a 	bl	8003dee <LL_ADC_IsEnabled>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d047      	beq.n	8005630 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d144      	bne.n	8005630 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	f003 030d 	and.w	r3, r3, #13
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d10c      	bne.n	80055ce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7fe fc04 	bl	8003dc6 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2203      	movs	r2, #3
 80055c4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80055c6:	f7fe f98b 	bl	80038e0 <HAL_GetTick>
 80055ca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055cc:	e029      	b.n	8005622 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d2:	f043 0210 	orr.w	r2, r3, #16
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055de:	f043 0201 	orr.w	r2, r3, #1
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	e023      	b.n	8005632 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80055ea:	f7fe f979 	bl	80038e0 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d914      	bls.n	8005622 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 0301 	and.w	r3, r3, #1
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00d      	beq.n	8005622 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560a:	f043 0210 	orr.w	r2, r3, #16
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005616:	f043 0201 	orr.w	r2, r3, #1
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e007      	b.n	8005632 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1dc      	bne.n	80055ea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005646:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800564c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005650:	2b00      	cmp	r3, #0
 8005652:	d14b      	bne.n	80056ec <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005658:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0308 	and.w	r3, r3, #8
 800566a:	2b00      	cmp	r3, #0
 800566c:	d021      	beq.n	80056b2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4618      	mov	r0, r3
 8005674:	f7fe fa34 	bl	8003ae0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d032      	beq.n	80056e4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d12b      	bne.n	80056e4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005690:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800569c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d11f      	bne.n	80056e4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a8:	f043 0201 	orr.w	r2, r3, #1
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80056b0:	e018      	b.n	80056e4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d111      	bne.n	80056e4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d105      	bne.n	80056e4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056dc:	f043 0201 	orr.w	r2, r3, #1
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80056e4:	68f8      	ldr	r0, [r7, #12]
 80056e6:	f7ff f8c3 	bl	8004870 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80056ea:	e00e      	b.n	800570a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f7ff f8d7 	bl	80048ac <HAL_ADC_ErrorCallback>
}
 80056fe:	e004      	b.n	800570a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	4798      	blx	r3
}
 800570a:	bf00      	nop
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800571e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005720:	68f8      	ldr	r0, [r7, #12]
 8005722:	f7ff f8af 	bl	8004884 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005726:	bf00      	nop
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}

0800572e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800572e:	b580      	push	{r7, lr}
 8005730:	b084      	sub	sp, #16
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005740:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800574c:	f043 0204 	orr.w	r2, r3, #4
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff f8a9 	bl	80048ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800575a:	bf00      	nop
 800575c:	3710      	adds	r7, #16
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <LL_ADC_IsEnabled>:
{
 8005762:	b480      	push	{r7}
 8005764:	b083      	sub	sp, #12
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	689b      	ldr	r3, [r3, #8]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <LL_ADC_IsEnabled+0x18>
 8005776:	2301      	movs	r3, #1
 8005778:	e000      	b.n	800577c <LL_ADC_IsEnabled+0x1a>
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	370c      	adds	r7, #12
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr

08005788 <LL_ADC_StartCalibration>:
{
 8005788:	b480      	push	{r7}
 800578a:	b083      	sub	sp, #12
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800579a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80057a4:	4313      	orrs	r3, r2
 80057a6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	609a      	str	r2, [r3, #8]
}
 80057ae:	bf00      	nop
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <LL_ADC_IsCalibrationOnGoing>:
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ce:	d101      	bne.n	80057d4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80057d0:	2301      	movs	r3, #1
 80057d2:	e000      	b.n	80057d6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	370c      	adds	r7, #12
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <LL_ADC_REG_IsConversionOngoing>:
{
 80057e2:	b480      	push	{r7}
 80057e4:	b083      	sub	sp, #12
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d101      	bne.n	80057fa <LL_ADC_REG_IsConversionOngoing+0x18>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005812:	2300      	movs	r3, #0
 8005814:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_ADCEx_Calibration_Start+0x1c>
 8005820:	2302      	movs	r3, #2
 8005822:	e04d      	b.n	80058c0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f7ff fea5 	bl	800557c <ADC_Disable>
 8005832:	4603      	mov	r3, r0
 8005834:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d136      	bne.n	80058aa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005840:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005844:	f023 0302 	bic.w	r3, r3, #2
 8005848:	f043 0202 	orr.w	r2, r3, #2
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6839      	ldr	r1, [r7, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f7ff ff96 	bl	8005788 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800585c:	e014      	b.n	8005888 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	3301      	adds	r3, #1
 8005862:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	4a18      	ldr	r2, [pc, #96]	; (80058c8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d90d      	bls.n	8005888 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005870:	f023 0312 	bic.w	r3, r3, #18
 8005874:	f043 0210 	orr.w	r2, r3, #16
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e01b      	b.n	80058c0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff ff94 	bl	80057ba <LL_ADC_IsCalibrationOnGoing>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e2      	bne.n	800585e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800589c:	f023 0303 	bic.w	r3, r3, #3
 80058a0:	f043 0201 	orr.w	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	65da      	str	r2, [r3, #92]	; 0x5c
 80058a8:	e005      	b.n	80058b6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058ae:	f043 0210 	orr.w	r2, r3, #16
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80058be:	7bfb      	ldrb	r3, [r7, #15]
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	0004de01 	.word	0x0004de01

080058cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b083      	sub	sp, #12
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80058d4:	bf00      	nop
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005930:	b590      	push	{r4, r7, lr}
 8005932:	b0a1      	sub	sp, #132	; 0x84
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800594a:	2302      	movs	r3, #2
 800594c:	e08b      	b.n	8005a66 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8005956:	2300      	movs	r3, #0
 8005958:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800595a:	2300      	movs	r3, #0
 800595c:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005966:	d102      	bne.n	800596e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005968:	4b41      	ldr	r3, [pc, #260]	; (8005a70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800596a:	60bb      	str	r3, [r7, #8]
 800596c:	e001      	b.n	8005972 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d10b      	bne.n	8005990 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800597c:	f043 0220 	orr.w	r2, r3, #32
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e06a      	b.n	8005a66 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	4618      	mov	r0, r3
 8005994:	f7ff ff25 	bl	80057e2 <LL_ADC_REG_IsConversionOngoing>
 8005998:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff ff1f 	bl	80057e2 <LL_ADC_REG_IsConversionOngoing>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d14c      	bne.n	8005a44 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80059aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d149      	bne.n	8005a44 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80059b0:	4b30      	ldr	r3, [pc, #192]	; (8005a74 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80059b2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d028      	beq.n	8005a0e <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80059bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	6859      	ldr	r1, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059ce:	035b      	lsls	r3, r3, #13
 80059d0:	430b      	orrs	r3, r1
 80059d2:	431a      	orrs	r2, r3
 80059d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80059d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80059dc:	f7ff fec1 	bl	8005762 <LL_ADC_IsEnabled>
 80059e0:	4604      	mov	r4, r0
 80059e2:	4823      	ldr	r0, [pc, #140]	; (8005a70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80059e4:	f7ff febd 	bl	8005762 <LL_ADC_IsEnabled>
 80059e8:	4603      	mov	r3, r0
 80059ea:	4323      	orrs	r3, r4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d133      	bne.n	8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80059f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80059f8:	f023 030f 	bic.w	r3, r3, #15
 80059fc:	683a      	ldr	r2, [r7, #0]
 80059fe:	6811      	ldr	r1, [r2, #0]
 8005a00:	683a      	ldr	r2, [r7, #0]
 8005a02:	6892      	ldr	r2, [r2, #8]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	431a      	orrs	r2, r3
 8005a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a0c:	e024      	b.n	8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005a0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a18:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005a1a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005a1e:	f7ff fea0 	bl	8005762 <LL_ADC_IsEnabled>
 8005a22:	4604      	mov	r4, r0
 8005a24:	4812      	ldr	r0, [pc, #72]	; (8005a70 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8005a26:	f7ff fe9c 	bl	8005762 <LL_ADC_IsEnabled>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	4323      	orrs	r3, r4
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d112      	bne.n	8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005a32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005a3a:	f023 030f 	bic.w	r3, r3, #15
 8005a3e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005a40:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a42:	e009      	b.n	8005a58 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a48:	f043 0220 	orr.w	r2, r3, #32
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005a56:	e000      	b.n	8005a5a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005a58:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005a62:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3784      	adds	r7, #132	; 0x84
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd90      	pop	{r4, r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	50000100 	.word	0x50000100
 8005a74:	50000300 	.word	0x50000300

08005a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b085      	sub	sp, #20
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f003 0307 	and.w	r3, r3, #7
 8005a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a88:	4b0c      	ldr	r3, [pc, #48]	; (8005abc <__NVIC_SetPriorityGrouping+0x44>)
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a94:	4013      	ands	r3, r2
 8005a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005aaa:	4a04      	ldr	r2, [pc, #16]	; (8005abc <__NVIC_SetPriorityGrouping+0x44>)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	60d3      	str	r3, [r2, #12]
}
 8005ab0:	bf00      	nop
 8005ab2:	3714      	adds	r7, #20
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr
 8005abc:	e000ed00 	.word	0xe000ed00

08005ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005ac4:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8005ac6:	68db      	ldr	r3, [r3, #12]
 8005ac8:	0a1b      	lsrs	r3, r3, #8
 8005aca:	f003 0307 	and.w	r3, r3, #7
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	e000ed00 	.word	0xe000ed00

08005adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	db0b      	blt.n	8005b06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	f003 021f 	and.w	r2, r3, #31
 8005af4:	4907      	ldr	r1, [pc, #28]	; (8005b14 <__NVIC_EnableIRQ+0x38>)
 8005af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afa:	095b      	lsrs	r3, r3, #5
 8005afc:	2001      	movs	r0, #1
 8005afe:	fa00 f202 	lsl.w	r2, r0, r2
 8005b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	e000e100 	.word	0xe000e100

08005b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	6039      	str	r1, [r7, #0]
 8005b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	db0a      	blt.n	8005b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	490c      	ldr	r1, [pc, #48]	; (8005b64 <__NVIC_SetPriority+0x4c>)
 8005b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b36:	0112      	lsls	r2, r2, #4
 8005b38:	b2d2      	uxtb	r2, r2
 8005b3a:	440b      	add	r3, r1
 8005b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b40:	e00a      	b.n	8005b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	b2da      	uxtb	r2, r3
 8005b46:	4908      	ldr	r1, [pc, #32]	; (8005b68 <__NVIC_SetPriority+0x50>)
 8005b48:	79fb      	ldrb	r3, [r7, #7]
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	3b04      	subs	r3, #4
 8005b50:	0112      	lsls	r2, r2, #4
 8005b52:	b2d2      	uxtb	r2, r2
 8005b54:	440b      	add	r3, r1
 8005b56:	761a      	strb	r2, [r3, #24]
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	e000e100 	.word	0xe000e100
 8005b68:	e000ed00 	.word	0xe000ed00

08005b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b089      	sub	sp, #36	; 0x24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 0307 	and.w	r3, r3, #7
 8005b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	f1c3 0307 	rsb	r3, r3, #7
 8005b86:	2b04      	cmp	r3, #4
 8005b88:	bf28      	it	cs
 8005b8a:	2304      	movcs	r3, #4
 8005b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	3304      	adds	r3, #4
 8005b92:	2b06      	cmp	r3, #6
 8005b94:	d902      	bls.n	8005b9c <NVIC_EncodePriority+0x30>
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	3b03      	subs	r3, #3
 8005b9a:	e000      	b.n	8005b9e <NVIC_EncodePriority+0x32>
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8005baa:	43da      	mvns	r2, r3
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	401a      	ands	r2, r3
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	fa01 f303 	lsl.w	r3, r1, r3
 8005bbe:	43d9      	mvns	r1, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc4:	4313      	orrs	r3, r2
         );
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3724      	adds	r7, #36	; 0x24
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3b01      	subs	r3, #1
 8005be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005be4:	d301      	bcc.n	8005bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005be6:	2301      	movs	r3, #1
 8005be8:	e00f      	b.n	8005c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bea:	4a0a      	ldr	r2, [pc, #40]	; (8005c14 <SysTick_Config+0x40>)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bf2:	210f      	movs	r1, #15
 8005bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf8:	f7ff ff8e 	bl	8005b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bfc:	4b05      	ldr	r3, [pc, #20]	; (8005c14 <SysTick_Config+0x40>)
 8005bfe:	2200      	movs	r2, #0
 8005c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c02:	4b04      	ldr	r3, [pc, #16]	; (8005c14 <SysTick_Config+0x40>)
 8005c04:	2207      	movs	r2, #7
 8005c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	e000e010 	.word	0xe000e010

08005c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f7ff ff29 	bl	8005a78 <__NVIC_SetPriorityGrouping>
}
 8005c26:	bf00      	nop
 8005c28:	3708      	adds	r7, #8
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}

08005c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b086      	sub	sp, #24
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	4603      	mov	r3, r0
 8005c36:	60b9      	str	r1, [r7, #8]
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c3c:	f7ff ff40 	bl	8005ac0 <__NVIC_GetPriorityGrouping>
 8005c40:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	6978      	ldr	r0, [r7, #20]
 8005c48:	f7ff ff90 	bl	8005b6c <NVIC_EncodePriority>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c52:	4611      	mov	r1, r2
 8005c54:	4618      	mov	r0, r3
 8005c56:	f7ff ff5f 	bl	8005b18 <__NVIC_SetPriority>
}
 8005c5a:	bf00      	nop
 8005c5c:	3718      	adds	r7, #24
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}

08005c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b082      	sub	sp, #8
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	4603      	mov	r3, r0
 8005c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff ff33 	bl	8005adc <__NVIC_EnableIRQ>
}
 8005c76:	bf00      	nop
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b082      	sub	sp, #8
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f7ff ffa4 	bl	8005bd4 <SysTick_Config>
 8005c8c:	4603      	mov	r3, r0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e08d      	b.n	8005dc6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	461a      	mov	r2, r3
 8005cb0:	4b47      	ldr	r3, [pc, #284]	; (8005dd0 <HAL_DMA_Init+0x138>)
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d80f      	bhi.n	8005cd6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	461a      	mov	r2, r3
 8005cbc:	4b45      	ldr	r3, [pc, #276]	; (8005dd4 <HAL_DMA_Init+0x13c>)
 8005cbe:	4413      	add	r3, r2
 8005cc0:	4a45      	ldr	r2, [pc, #276]	; (8005dd8 <HAL_DMA_Init+0x140>)
 8005cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc6:	091b      	lsrs	r3, r3, #4
 8005cc8:	009a      	lsls	r2, r3, #2
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	4a42      	ldr	r2, [pc, #264]	; (8005ddc <HAL_DMA_Init+0x144>)
 8005cd2:	641a      	str	r2, [r3, #64]	; 0x40
 8005cd4:	e00e      	b.n	8005cf4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4b40      	ldr	r3, [pc, #256]	; (8005de0 <HAL_DMA_Init+0x148>)
 8005cde:	4413      	add	r3, r2
 8005ce0:	4a3d      	ldr	r2, [pc, #244]	; (8005dd8 <HAL_DMA_Init+0x140>)
 8005ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ce6:	091b      	lsrs	r3, r3, #4
 8005ce8:	009a      	lsls	r2, r3, #2
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a3c      	ldr	r2, [pc, #240]	; (8005de4 <HAL_DMA_Init+0x14c>)
 8005cf2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005d18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6a1b      	ldr	r3, [r3, #32]
 8005d36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d38:	68fa      	ldr	r2, [r7, #12]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fa76 	bl	8006238 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d54:	d102      	bne.n	8005d5c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685a      	ldr	r2, [r3, #4]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d64:	b2d2      	uxtb	r2, r2
 8005d66:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005d70:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d010      	beq.n	8005d9c <HAL_DMA_Init+0x104>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d80c      	bhi.n	8005d9c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa96 	bl	80062b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005d98:	605a      	str	r2, [r3, #4]
 8005d9a:	e008      	b.n	8005dae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40020407 	.word	0x40020407
 8005dd4:	bffdfff8 	.word	0xbffdfff8
 8005dd8:	cccccccd 	.word	0xcccccccd
 8005ddc:	40020000 	.word	0x40020000
 8005de0:	bffdfbf8 	.word	0xbffdfbf8
 8005de4:	40020400 	.word	0x40020400

08005de8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005df6:	2300      	movs	r3, #0
 8005df8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_DMA_Start_IT+0x20>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e066      	b.n	8005ed6 <HAL_DMA_Start_IT+0xee>
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d155      	bne.n	8005ec8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0201 	bic.w	r2, r2, #1
 8005e38:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f000 f9bb 	bl	80061bc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d008      	beq.n	8005e60 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f042 020e 	orr.w	r2, r2, #14
 8005e5c:	601a      	str	r2, [r3, #0]
 8005e5e:	e00f      	b.n	8005e80 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f022 0204 	bic.w	r2, r2, #4
 8005e6e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681a      	ldr	r2, [r3, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f042 020a 	orr.w	r2, r2, #10
 8005e7e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d007      	beq.n	8005e9e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e9c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eb4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681a      	ldr	r2, [r3, #0]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f042 0201 	orr.w	r2, r2, #1
 8005ec4:	601a      	str	r2, [r3, #0]
 8005ec6:	e005      	b.n	8005ed4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005ed0:	2302      	movs	r3, #2
 8005ed2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005ed4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005ede:	b480      	push	{r7}
 8005ee0:	b085      	sub	sp, #20
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d005      	beq.n	8005f02 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2204      	movs	r2, #4
 8005efa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005efc:	2301      	movs	r3, #1
 8005efe:	73fb      	strb	r3, [r7, #15]
 8005f00:	e037      	b.n	8005f72 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 020e 	bic.w	r2, r2, #14
 8005f10:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f20:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 0201 	bic.w	r2, r2, #1
 8005f30:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f36:	f003 021f 	and.w	r2, r3, #31
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f3e:	2101      	movs	r1, #1
 8005f40:	fa01 f202 	lsl.w	r2, r1, r2
 8005f44:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005f4e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00c      	beq.n	8005f72 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f66:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005f70:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2201      	movs	r2, #1
 8005f76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f84:	4618      	mov	r0, r3
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d00d      	beq.n	8005fc4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2204      	movs	r2, #4
 8005fac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
 8005fc2:	e047      	b.n	8006054 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 020e 	bic.w	r2, r2, #14
 8005fd2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0201 	bic.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ff2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff8:	f003 021f 	and.w	r2, r3, #31
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	2101      	movs	r1, #1
 8006002:	fa01 f202 	lsl.w	r2, r1, r2
 8006006:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800600c:	687a      	ldr	r2, [r7, #4]
 800600e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006010:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00c      	beq.n	8006034 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006028:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006032:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006048:	2b00      	cmp	r3, #0
 800604a:	d003      	beq.n	8006054 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
    }
  }
  return status;
 8006054:	7bfb      	ldrb	r3, [r7, #15]
}
 8006056:	4618      	mov	r0, r3
 8006058:	3710      	adds	r7, #16
 800605a:	46bd      	mov	sp, r7
 800605c:	bd80      	pop	{r7, pc}

0800605e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800605e:	b580      	push	{r7, lr}
 8006060:	b084      	sub	sp, #16
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800607a:	f003 031f 	and.w	r3, r3, #31
 800607e:	2204      	movs	r2, #4
 8006080:	409a      	lsls	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	4013      	ands	r3, r2
 8006086:	2b00      	cmp	r3, #0
 8006088:	d026      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x7a>
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d021      	beq.n	80060d8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0320 	and.w	r3, r3, #32
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d107      	bne.n	80060b2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f022 0204 	bic.w	r2, r2, #4
 80060b0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060b6:	f003 021f 	and.w	r2, r3, #31
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	2104      	movs	r1, #4
 80060c0:	fa01 f202 	lsl.w	r2, r1, r2
 80060c4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d071      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80060d6:	e06c      	b.n	80061b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060dc:	f003 031f 	and.w	r3, r3, #31
 80060e0:	2202      	movs	r2, #2
 80060e2:	409a      	lsls	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4013      	ands	r3, r2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d02e      	beq.n	800614a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f003 0302 	and.w	r3, r3, #2
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d029      	beq.n	800614a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0320 	and.w	r3, r3, #32
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10b      	bne.n	800611c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 020a 	bic.w	r2, r2, #10
 8006112:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2201      	movs	r2, #1
 8006118:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006120:	f003 021f 	and.w	r2, r3, #31
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	2102      	movs	r1, #2
 800612a:	fa01 f202 	lsl.w	r2, r1, r2
 800612e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	2b00      	cmp	r3, #0
 800613e:	d038      	beq.n	80061b2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006148:	e033      	b.n	80061b2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614e:	f003 031f 	and.w	r3, r3, #31
 8006152:	2208      	movs	r2, #8
 8006154:	409a      	lsls	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	4013      	ands	r3, r2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d02a      	beq.n	80061b4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	f003 0308 	and.w	r3, r3, #8
 8006164:	2b00      	cmp	r3, #0
 8006166:	d025      	beq.n	80061b4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f022 020e 	bic.w	r2, r2, #14
 8006176:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617c:	f003 021f 	and.w	r2, r3, #31
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	2101      	movs	r1, #1
 8006186:	fa01 f202 	lsl.w	r2, r1, r2
 800618a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d004      	beq.n	80061b4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80061b2:	bf00      	nop
 80061b4:	bf00      	nop
}
 80061b6:	3710      	adds	r7, #16
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
 80061c8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061d2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d004      	beq.n	80061e6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80061e4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ea:	f003 021f 	and.w	r2, r3, #31
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	2101      	movs	r1, #1
 80061f4:	fa01 f202 	lsl.w	r2, r1, r2
 80061f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	2b10      	cmp	r3, #16
 8006208:	d108      	bne.n	800621c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800621a:	e007      	b.n	800622c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	60da      	str	r2, [r3, #12]
}
 800622c:	bf00      	nop
 800622e:	3714      	adds	r7, #20
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	461a      	mov	r2, r3
 8006246:	4b16      	ldr	r3, [pc, #88]	; (80062a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006248:	429a      	cmp	r2, r3
 800624a:	d802      	bhi.n	8006252 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800624c:	4b15      	ldr	r3, [pc, #84]	; (80062a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	e001      	b.n	8006256 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8006252:	4b15      	ldr	r3, [pc, #84]	; (80062a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8006254:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8006256:	697b      	ldr	r3, [r7, #20]
 8006258:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	b2db      	uxtb	r3, r3
 8006260:	3b08      	subs	r3, #8
 8006262:	4a12      	ldr	r2, [pc, #72]	; (80062ac <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8006264:	fba2 2303 	umull	r2, r3, r2, r3
 8006268:	091b      	lsrs	r3, r3, #4
 800626a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006270:	089b      	lsrs	r3, r3, #2
 8006272:	009a      	lsls	r2, r3, #2
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	4413      	add	r3, r2
 8006278:	461a      	mov	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a0b      	ldr	r2, [pc, #44]	; (80062b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8006282:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f003 031f 	and.w	r3, r3, #31
 800628a:	2201      	movs	r2, #1
 800628c:	409a      	lsls	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40020407 	.word	0x40020407
 80062a4:	40020800 	.word	0x40020800
 80062a8:	40020820 	.word	0x40020820
 80062ac:	cccccccd 	.word	0xcccccccd
 80062b0:	40020880 	.word	0x40020880

080062b4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	461a      	mov	r2, r3
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a08      	ldr	r2, [pc, #32]	; (80062f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80062d6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	3b01      	subs	r3, #1
 80062dc:	f003 031f 	and.w	r3, r3, #31
 80062e0:	2201      	movs	r2, #1
 80062e2:	409a      	lsls	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80062e8:	bf00      	nop
 80062ea:	3714      	adds	r7, #20
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	1000823f 	.word	0x1000823f
 80062f8:	40020940 	.word	0x40020940

080062fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b087      	sub	sp, #28
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006306:	2300      	movs	r3, #0
 8006308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800630a:	e15a      	b.n	80065c2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	2101      	movs	r1, #1
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	fa01 f303 	lsl.w	r3, r1, r3
 8006318:	4013      	ands	r3, r2
 800631a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	f000 814c 	beq.w	80065bc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	f003 0303 	and.w	r3, r3, #3
 800632c:	2b01      	cmp	r3, #1
 800632e:	d005      	beq.n	800633c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006338:	2b02      	cmp	r3, #2
 800633a:	d130      	bne.n	800639e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	005b      	lsls	r3, r3, #1
 8006346:	2203      	movs	r2, #3
 8006348:	fa02 f303 	lsl.w	r3, r2, r3
 800634c:	43db      	mvns	r3, r3
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	4013      	ands	r3, r2
 8006352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68da      	ldr	r2, [r3, #12]
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	005b      	lsls	r3, r3, #1
 800635c:	fa02 f303 	lsl.w	r3, r2, r3
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006372:	2201      	movs	r2, #1
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	fa02 f303 	lsl.w	r3, r2, r3
 800637a:	43db      	mvns	r3, r3
 800637c:	693a      	ldr	r2, [r7, #16]
 800637e:	4013      	ands	r3, r2
 8006380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	091b      	lsrs	r3, r3, #4
 8006388:	f003 0201 	and.w	r2, r3, #1
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	fa02 f303 	lsl.w	r3, r2, r3
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	4313      	orrs	r3, r2
 8006396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	693a      	ldr	r2, [r7, #16]
 800639c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	2b03      	cmp	r3, #3
 80063a8:	d017      	beq.n	80063da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	2203      	movs	r2, #3
 80063b6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ba:	43db      	mvns	r3, r3
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	4013      	ands	r3, r2
 80063c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	689a      	ldr	r2, [r3, #8]
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	fa02 f303 	lsl.w	r3, r2, r3
 80063ce:	693a      	ldr	r2, [r7, #16]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f003 0303 	and.w	r3, r3, #3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d123      	bne.n	800642e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	08da      	lsrs	r2, r3, #3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3208      	adds	r2, #8
 80063ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	220f      	movs	r2, #15
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	43db      	mvns	r3, r3
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	4013      	ands	r3, r2
 8006408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	fa02 f303 	lsl.w	r3, r2, r3
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	4313      	orrs	r3, r2
 800641e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	08da      	lsrs	r2, r3, #3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3208      	adds	r2, #8
 8006428:	6939      	ldr	r1, [r7, #16]
 800642a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	2203      	movs	r2, #3
 800643a:	fa02 f303 	lsl.w	r3, r2, r3
 800643e:	43db      	mvns	r3, r3
 8006440:	693a      	ldr	r2, [r7, #16]
 8006442:	4013      	ands	r3, r2
 8006444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	f003 0203 	and.w	r2, r3, #3
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	005b      	lsls	r3, r3, #1
 8006452:	fa02 f303 	lsl.w	r3, r2, r3
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	693a      	ldr	r2, [r7, #16]
 8006460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800646a:	2b00      	cmp	r3, #0
 800646c:	f000 80a6 	beq.w	80065bc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006470:	4b5b      	ldr	r3, [pc, #364]	; (80065e0 <HAL_GPIO_Init+0x2e4>)
 8006472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006474:	4a5a      	ldr	r2, [pc, #360]	; (80065e0 <HAL_GPIO_Init+0x2e4>)
 8006476:	f043 0301 	orr.w	r3, r3, #1
 800647a:	6613      	str	r3, [r2, #96]	; 0x60
 800647c:	4b58      	ldr	r3, [pc, #352]	; (80065e0 <HAL_GPIO_Init+0x2e4>)
 800647e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006480:	f003 0301 	and.w	r3, r3, #1
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006488:	4a56      	ldr	r2, [pc, #344]	; (80065e4 <HAL_GPIO_Init+0x2e8>)
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	089b      	lsrs	r3, r3, #2
 800648e:	3302      	adds	r3, #2
 8006490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	f003 0303 	and.w	r3, r3, #3
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	220f      	movs	r2, #15
 80064a0:	fa02 f303 	lsl.w	r3, r2, r3
 80064a4:	43db      	mvns	r3, r3
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4013      	ands	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80064b2:	d01f      	beq.n	80064f4 <HAL_GPIO_Init+0x1f8>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4a4c      	ldr	r2, [pc, #304]	; (80065e8 <HAL_GPIO_Init+0x2ec>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d019      	beq.n	80064f0 <HAL_GPIO_Init+0x1f4>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	4a4b      	ldr	r2, [pc, #300]	; (80065ec <HAL_GPIO_Init+0x2f0>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d013      	beq.n	80064ec <HAL_GPIO_Init+0x1f0>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a4a      	ldr	r2, [pc, #296]	; (80065f0 <HAL_GPIO_Init+0x2f4>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d00d      	beq.n	80064e8 <HAL_GPIO_Init+0x1ec>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	4a49      	ldr	r2, [pc, #292]	; (80065f4 <HAL_GPIO_Init+0x2f8>)
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d007      	beq.n	80064e4 <HAL_GPIO_Init+0x1e8>
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	4a48      	ldr	r2, [pc, #288]	; (80065f8 <HAL_GPIO_Init+0x2fc>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d101      	bne.n	80064e0 <HAL_GPIO_Init+0x1e4>
 80064dc:	2305      	movs	r3, #5
 80064de:	e00a      	b.n	80064f6 <HAL_GPIO_Init+0x1fa>
 80064e0:	2306      	movs	r3, #6
 80064e2:	e008      	b.n	80064f6 <HAL_GPIO_Init+0x1fa>
 80064e4:	2304      	movs	r3, #4
 80064e6:	e006      	b.n	80064f6 <HAL_GPIO_Init+0x1fa>
 80064e8:	2303      	movs	r3, #3
 80064ea:	e004      	b.n	80064f6 <HAL_GPIO_Init+0x1fa>
 80064ec:	2302      	movs	r3, #2
 80064ee:	e002      	b.n	80064f6 <HAL_GPIO_Init+0x1fa>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <HAL_GPIO_Init+0x1fa>
 80064f4:	2300      	movs	r3, #0
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	f002 0203 	and.w	r2, r2, #3
 80064fc:	0092      	lsls	r2, r2, #2
 80064fe:	4093      	lsls	r3, r2
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	4313      	orrs	r3, r2
 8006504:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006506:	4937      	ldr	r1, [pc, #220]	; (80065e4 <HAL_GPIO_Init+0x2e8>)
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	089b      	lsrs	r3, r3, #2
 800650c:	3302      	adds	r3, #2
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006514:	4b39      	ldr	r3, [pc, #228]	; (80065fc <HAL_GPIO_Init+0x300>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	43db      	mvns	r3, r3
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	4013      	ands	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d003      	beq.n	8006538 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006530:	693a      	ldr	r2, [r7, #16]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	4313      	orrs	r3, r2
 8006536:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006538:	4a30      	ldr	r2, [pc, #192]	; (80065fc <HAL_GPIO_Init+0x300>)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800653e:	4b2f      	ldr	r3, [pc, #188]	; (80065fc <HAL_GPIO_Init+0x300>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	43db      	mvns	r3, r3
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	4013      	ands	r3, r2
 800654c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	685b      	ldr	r3, [r3, #4]
 8006552:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	4313      	orrs	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006562:	4a26      	ldr	r2, [pc, #152]	; (80065fc <HAL_GPIO_Init+0x300>)
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8006568:	4b24      	ldr	r3, [pc, #144]	; (80065fc <HAL_GPIO_Init+0x300>)
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	43db      	mvns	r3, r3
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	4013      	ands	r3, r2
 8006576:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006580:	2b00      	cmp	r3, #0
 8006582:	d003      	beq.n	800658c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4313      	orrs	r3, r2
 800658a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800658c:	4a1b      	ldr	r2, [pc, #108]	; (80065fc <HAL_GPIO_Init+0x300>)
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006592:	4b1a      	ldr	r3, [pc, #104]	; (80065fc <HAL_GPIO_Init+0x300>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	43db      	mvns	r3, r3
 800659c:	693a      	ldr	r2, [r7, #16]
 800659e:	4013      	ands	r3, r2
 80065a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80065a2:	683b      	ldr	r3, [r7, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d003      	beq.n	80065b6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80065b6:	4a11      	ldr	r2, [pc, #68]	; (80065fc <HAL_GPIO_Init+0x300>)
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3301      	adds	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	fa22 f303 	lsr.w	r3, r2, r3
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f47f ae9d 	bne.w	800630c <HAL_GPIO_Init+0x10>
  }
}
 80065d2:	bf00      	nop
 80065d4:	bf00      	nop
 80065d6:	371c      	adds	r7, #28
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr
 80065e0:	40021000 	.word	0x40021000
 80065e4:	40010000 	.word	0x40010000
 80065e8:	48000400 	.word	0x48000400
 80065ec:	48000800 	.word	0x48000800
 80065f0:	48000c00 	.word	0x48000c00
 80065f4:	48001000 	.word	0x48001000
 80065f8:	48001400 	.word	0x48001400
 80065fc:	40010400 	.word	0x40010400

08006600 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006600:	b480      	push	{r7}
 8006602:	b085      	sub	sp, #20
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	691a      	ldr	r2, [r3, #16]
 8006610:	887b      	ldrh	r3, [r7, #2]
 8006612:	4013      	ands	r3, r2
 8006614:	2b00      	cmp	r3, #0
 8006616:	d002      	beq.n	800661e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006618:	2301      	movs	r3, #1
 800661a:	73fb      	strb	r3, [r7, #15]
 800661c:	e001      	b.n	8006622 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006622:	7bfb      	ldrb	r3, [r7, #15]
}
 8006624:	4618      	mov	r0, r3
 8006626:	3714      	adds	r7, #20
 8006628:	46bd      	mov	sp, r7
 800662a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662e:	4770      	bx	lr

08006630 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	460b      	mov	r3, r1
 800663a:	807b      	strh	r3, [r7, #2]
 800663c:	4613      	mov	r3, r2
 800663e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006640:	787b      	ldrb	r3, [r7, #1]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d003      	beq.n	800664e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006646:	887a      	ldrh	r2, [r7, #2]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800664c:	e002      	b.n	8006654 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800664e:	887a      	ldrh	r2, [r7, #2]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006654:	bf00      	nop
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr

08006660 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	4603      	mov	r3, r0
 8006668:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800666a:	4b08      	ldr	r3, [pc, #32]	; (800668c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800666c:	695a      	ldr	r2, [r3, #20]
 800666e:	88fb      	ldrh	r3, [r7, #6]
 8006670:	4013      	ands	r3, r2
 8006672:	2b00      	cmp	r3, #0
 8006674:	d006      	beq.n	8006684 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006676:	4a05      	ldr	r2, [pc, #20]	; (800668c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006678:	88fb      	ldrh	r3, [r7, #6]
 800667a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800667c:	88fb      	ldrh	r3, [r7, #6]
 800667e:	4618      	mov	r0, r3
 8006680:	f7fb f944 	bl	800190c <HAL_GPIO_EXTI_Callback>
  }
}
 8006684:	bf00      	nop
 8006686:	3708      	adds	r7, #8
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}
 800668c:	40010400 	.word	0x40010400

08006690 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d101      	bne.n	80066a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800669e:	2301      	movs	r3, #1
 80066a0:	e081      	b.n	80067a6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7fc fd5a 	bl	8003170 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2224      	movs	r2, #36	; 0x24
 80066c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0201 	bic.w	r2, r2, #1
 80066d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689a      	ldr	r2, [r3, #8]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d107      	bne.n	800670a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	689a      	ldr	r2, [r3, #8]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006706:	609a      	str	r2, [r3, #8]
 8006708:	e006      	b.n	8006718 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689a      	ldr	r2, [r3, #8]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006716:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2b02      	cmp	r3, #2
 800671e:	d104      	bne.n	800672a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006728:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	6812      	ldr	r2, [r2, #0]
 8006734:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006738:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800673c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800674c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691a      	ldr	r2, [r3, #16]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	699b      	ldr	r3, [r3, #24]
 800675e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	69d9      	ldr	r1, [r3, #28]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a1a      	ldr	r2, [r3, #32]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	430a      	orrs	r2, r1
 8006776:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2200      	movs	r2, #0
 800678c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}

080067ae <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80067ae:	b480      	push	{r7}
 80067b0:	b083      	sub	sp, #12
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
 80067b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d138      	bne.n	8006836 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d101      	bne.n	80067d2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80067ce:	2302      	movs	r3, #2
 80067d0:	e032      	b.n	8006838 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2201      	movs	r2, #1
 80067d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2224      	movs	r2, #36	; 0x24
 80067de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f022 0201 	bic.w	r2, r2, #1
 80067f0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006800:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6819      	ldr	r1, [r3, #0]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	683a      	ldr	r2, [r7, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0201 	orr.w	r2, r2, #1
 8006820:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	e000      	b.n	8006838 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006836:	2302      	movs	r3, #2
  }
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
 800684c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b20      	cmp	r3, #32
 8006858:	d139      	bne.n	80068ce <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006860:	2b01      	cmp	r3, #1
 8006862:	d101      	bne.n	8006868 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006864:	2302      	movs	r3, #2
 8006866:	e033      	b.n	80068d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2224      	movs	r2, #36	; 0x24
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0201 	bic.w	r2, r2, #1
 8006886:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006896:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	021b      	lsls	r3, r3, #8
 800689c:	68fa      	ldr	r2, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0201 	orr.w	r2, r2, #1
 80068b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	e000      	b.n	80068d0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80068ce:	2302      	movs	r3, #2
  }
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d141      	bne.n	800696e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80068ea:	4b4b      	ldr	r3, [pc, #300]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f6:	d131      	bne.n	800695c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80068f8:	4b47      	ldr	r3, [pc, #284]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80068fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80068fe:	4a46      	ldr	r2, [pc, #280]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006904:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006908:	4b43      	ldr	r3, [pc, #268]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006910:	4a41      	ldr	r2, [pc, #260]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006916:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006918:	4b40      	ldr	r3, [pc, #256]	; (8006a1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2232      	movs	r2, #50	; 0x32
 800691e:	fb02 f303 	mul.w	r3, r2, r3
 8006922:	4a3f      	ldr	r2, [pc, #252]	; (8006a20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006924:	fba2 2303 	umull	r2, r3, r2, r3
 8006928:	0c9b      	lsrs	r3, r3, #18
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800692e:	e002      	b.n	8006936 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	3b01      	subs	r3, #1
 8006934:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006936:	4b38      	ldr	r3, [pc, #224]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006938:	695b      	ldr	r3, [r3, #20]
 800693a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800693e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006942:	d102      	bne.n	800694a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f2      	bne.n	8006930 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800694a:	4b33      	ldr	r3, [pc, #204]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006952:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006956:	d158      	bne.n	8006a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006958:	2303      	movs	r3, #3
 800695a:	e057      	b.n	8006a0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800695c:	4b2e      	ldr	r3, [pc, #184]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800695e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006962:	4a2d      	ldr	r2, [pc, #180]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006968:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800696c:	e04d      	b.n	8006a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006974:	d141      	bne.n	80069fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006976:	4b28      	ldr	r3, [pc, #160]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800697e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006982:	d131      	bne.n	80069e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006984:	4b24      	ldr	r3, [pc, #144]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006986:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800698a:	4a23      	ldr	r2, [pc, #140]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800698c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006990:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006994:	4b20      	ldr	r3, [pc, #128]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800699c:	4a1e      	ldr	r2, [pc, #120]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800699e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80069a4:	4b1d      	ldr	r3, [pc, #116]	; (8006a1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2232      	movs	r2, #50	; 0x32
 80069aa:	fb02 f303 	mul.w	r3, r2, r3
 80069ae:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80069b0:	fba2 2303 	umull	r2, r3, r2, r3
 80069b4:	0c9b      	lsrs	r3, r3, #18
 80069b6:	3301      	adds	r3, #1
 80069b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069ba:	e002      	b.n	80069c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	3b01      	subs	r3, #1
 80069c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80069c2:	4b15      	ldr	r3, [pc, #84]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069ce:	d102      	bne.n	80069d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f2      	bne.n	80069bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80069d6:	4b10      	ldr	r3, [pc, #64]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069e2:	d112      	bne.n	8006a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e011      	b.n	8006a0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80069e8:	4b0b      	ldr	r3, [pc, #44]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80069ee:	4a0a      	ldr	r2, [pc, #40]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80069f8:	e007      	b.n	8006a0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80069fa:	4b07      	ldr	r3, [pc, #28]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006a02:	4a05      	ldr	r2, [pc, #20]	; (8006a18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006a04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3714      	adds	r7, #20
 8006a10:	46bd      	mov	sp, r7
 8006a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a16:	4770      	bx	lr
 8006a18:	40007000 	.word	0x40007000
 8006a1c:	20000050 	.word	0x20000050
 8006a20:	431bde83 	.word	0x431bde83

08006a24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006a28:	4b05      	ldr	r3, [pc, #20]	; (8006a40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	4a04      	ldr	r2, [pc, #16]	; (8006a40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a32:	6093      	str	r3, [r2, #8]
}
 8006a34:	bf00      	nop
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop
 8006a40:	40007000 	.word	0x40007000

08006a44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b088      	sub	sp, #32
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d101      	bne.n	8006a56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e306      	b.n	8007064 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d075      	beq.n	8006b4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a62:	4b97      	ldr	r3, [pc, #604]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	f003 030c 	and.w	r3, r3, #12
 8006a6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006a6c:	4b94      	ldr	r3, [pc, #592]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f003 0303 	and.w	r3, r3, #3
 8006a74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	2b0c      	cmp	r3, #12
 8006a7a:	d102      	bne.n	8006a82 <HAL_RCC_OscConfig+0x3e>
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2b03      	cmp	r3, #3
 8006a80:	d002      	beq.n	8006a88 <HAL_RCC_OscConfig+0x44>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b08      	cmp	r3, #8
 8006a86:	d10b      	bne.n	8006aa0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a88:	4b8d      	ldr	r3, [pc, #564]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d05b      	beq.n	8006b4c <HAL_RCC_OscConfig+0x108>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d157      	bne.n	8006b4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e2e1      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aa8:	d106      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x74>
 8006aaa:	4b85      	ldr	r3, [pc, #532]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a84      	ldr	r2, [pc, #528]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006ab0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ab4:	6013      	str	r3, [r2, #0]
 8006ab6:	e01d      	b.n	8006af4 <HAL_RCC_OscConfig+0xb0>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	685b      	ldr	r3, [r3, #4]
 8006abc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ac0:	d10c      	bne.n	8006adc <HAL_RCC_OscConfig+0x98>
 8006ac2:	4b7f      	ldr	r3, [pc, #508]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a7e      	ldr	r2, [pc, #504]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006ac8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006acc:	6013      	str	r3, [r2, #0]
 8006ace:	4b7c      	ldr	r3, [pc, #496]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a7b      	ldr	r2, [pc, #492]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e00b      	b.n	8006af4 <HAL_RCC_OscConfig+0xb0>
 8006adc:	4b78      	ldr	r3, [pc, #480]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a77      	ldr	r2, [pc, #476]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006ae2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ae6:	6013      	str	r3, [r2, #0]
 8006ae8:	4b75      	ldr	r3, [pc, #468]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a74      	ldr	r2, [pc, #464]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006aee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006af2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d013      	beq.n	8006b24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006afc:	f7fc fef0 	bl	80038e0 <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b02:	e008      	b.n	8006b16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b04:	f7fc feec 	bl	80038e0 <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b64      	cmp	r3, #100	; 0x64
 8006b10:	d901      	bls.n	8006b16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e2a6      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b16:	4b6a      	ldr	r3, [pc, #424]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0f0      	beq.n	8006b04 <HAL_RCC_OscConfig+0xc0>
 8006b22:	e014      	b.n	8006b4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b24:	f7fc fedc 	bl	80038e0 <HAL_GetTick>
 8006b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b2a:	e008      	b.n	8006b3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b2c:	f7fc fed8 	bl	80038e0 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b64      	cmp	r3, #100	; 0x64
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e292      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b3e:	4b60      	ldr	r3, [pc, #384]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d1f0      	bne.n	8006b2c <HAL_RCC_OscConfig+0xe8>
 8006b4a:	e000      	b.n	8006b4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d075      	beq.n	8006c46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b5a:	4b59      	ldr	r3, [pc, #356]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	f003 030c 	and.w	r3, r3, #12
 8006b62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b64:	4b56      	ldr	r3, [pc, #344]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f003 0303 	and.w	r3, r3, #3
 8006b6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b0c      	cmp	r3, #12
 8006b72:	d102      	bne.n	8006b7a <HAL_RCC_OscConfig+0x136>
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d002      	beq.n	8006b80 <HAL_RCC_OscConfig+0x13c>
 8006b7a:	69bb      	ldr	r3, [r7, #24]
 8006b7c:	2b04      	cmp	r3, #4
 8006b7e:	d11f      	bne.n	8006bc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b80:	4b4f      	ldr	r3, [pc, #316]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d005      	beq.n	8006b98 <HAL_RCC_OscConfig+0x154>
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d101      	bne.n	8006b98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e265      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b98:	4b49      	ldr	r3, [pc, #292]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	061b      	lsls	r3, r3, #24
 8006ba6:	4946      	ldr	r1, [pc, #280]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006bac:	4b45      	ldr	r3, [pc, #276]	; (8006cc4 <HAL_RCC_OscConfig+0x280>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f7fc fe49 	bl	8003848 <HAL_InitTick>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d043      	beq.n	8006c44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e251      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d023      	beq.n	8006c10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bc8:	4b3d      	ldr	r3, [pc, #244]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a3c      	ldr	r2, [pc, #240]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bd4:	f7fc fe84 	bl	80038e0 <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bdc:	f7fc fe80 	bl	80038e0 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e23a      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bee:	4b34      	ldr	r3, [pc, #208]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0f0      	beq.n	8006bdc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bfa:	4b31      	ldr	r3, [pc, #196]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	061b      	lsls	r3, r3, #24
 8006c08:	492d      	ldr	r1, [pc, #180]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	604b      	str	r3, [r1, #4]
 8006c0e:	e01a      	b.n	8006c46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c10:	4b2b      	ldr	r3, [pc, #172]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a2a      	ldr	r2, [pc, #168]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006c16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c1c:	f7fc fe60 	bl	80038e0 <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c22:	e008      	b.n	8006c36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c24:	f7fc fe5c 	bl	80038e0 <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	2b02      	cmp	r3, #2
 8006c30:	d901      	bls.n	8006c36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006c32:	2303      	movs	r3, #3
 8006c34:	e216      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c36:	4b22      	ldr	r3, [pc, #136]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f0      	bne.n	8006c24 <HAL_RCC_OscConfig+0x1e0>
 8006c42:	e000      	b.n	8006c46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006c44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d041      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d01c      	beq.n	8006c94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c5a:	4b19      	ldr	r3, [pc, #100]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006c5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c60:	4a17      	ldr	r2, [pc, #92]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006c62:	f043 0301 	orr.w	r3, r3, #1
 8006c66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c6a:	f7fc fe39 	bl	80038e0 <HAL_GetTick>
 8006c6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c70:	e008      	b.n	8006c84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c72:	f7fc fe35 	bl	80038e0 <HAL_GetTick>
 8006c76:	4602      	mov	r2, r0
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	1ad3      	subs	r3, r2, r3
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e1ef      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c84:	4b0e      	ldr	r3, [pc, #56]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006c86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c8a:	f003 0302 	and.w	r3, r3, #2
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d0ef      	beq.n	8006c72 <HAL_RCC_OscConfig+0x22e>
 8006c92:	e020      	b.n	8006cd6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c94:	4b0a      	ldr	r3, [pc, #40]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c9a:	4a09      	ldr	r2, [pc, #36]	; (8006cc0 <HAL_RCC_OscConfig+0x27c>)
 8006c9c:	f023 0301 	bic.w	r3, r3, #1
 8006ca0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ca4:	f7fc fe1c 	bl	80038e0 <HAL_GetTick>
 8006ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006caa:	e00d      	b.n	8006cc8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cac:	f7fc fe18 	bl	80038e0 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	2b02      	cmp	r3, #2
 8006cb8:	d906      	bls.n	8006cc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e1d2      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
 8006cbe:	bf00      	nop
 8006cc0:	40021000 	.word	0x40021000
 8006cc4:	20000054 	.word	0x20000054
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cc8:	4b8c      	ldr	r3, [pc, #560]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006cca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1ea      	bne.n	8006cac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 80a6 	beq.w	8006e30 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006ce8:	4b84      	ldr	r3, [pc, #528]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d101      	bne.n	8006cf8 <HAL_RCC_OscConfig+0x2b4>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	e000      	b.n	8006cfa <HAL_RCC_OscConfig+0x2b6>
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00d      	beq.n	8006d1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cfe:	4b7f      	ldr	r3, [pc, #508]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d02:	4a7e      	ldr	r2, [pc, #504]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d08:	6593      	str	r3, [r2, #88]	; 0x58
 8006d0a:	4b7c      	ldr	r3, [pc, #496]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006d16:	2301      	movs	r3, #1
 8006d18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d1a:	4b79      	ldr	r3, [pc, #484]	; (8006f00 <HAL_RCC_OscConfig+0x4bc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d118      	bne.n	8006d58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d26:	4b76      	ldr	r3, [pc, #472]	; (8006f00 <HAL_RCC_OscConfig+0x4bc>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a75      	ldr	r2, [pc, #468]	; (8006f00 <HAL_RCC_OscConfig+0x4bc>)
 8006d2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d32:	f7fc fdd5 	bl	80038e0 <HAL_GetTick>
 8006d36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d38:	e008      	b.n	8006d4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d3a:	f7fc fdd1 	bl	80038e0 <HAL_GetTick>
 8006d3e:	4602      	mov	r2, r0
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	1ad3      	subs	r3, r2, r3
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d901      	bls.n	8006d4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006d48:	2303      	movs	r3, #3
 8006d4a:	e18b      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d4c:	4b6c      	ldr	r3, [pc, #432]	; (8006f00 <HAL_RCC_OscConfig+0x4bc>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0f0      	beq.n	8006d3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d108      	bne.n	8006d72 <HAL_RCC_OscConfig+0x32e>
 8006d60:	4b66      	ldr	r3, [pc, #408]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d66:	4a65      	ldr	r2, [pc, #404]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006d68:	f043 0301 	orr.w	r3, r3, #1
 8006d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d70:	e024      	b.n	8006dbc <HAL_RCC_OscConfig+0x378>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b05      	cmp	r3, #5
 8006d78:	d110      	bne.n	8006d9c <HAL_RCC_OscConfig+0x358>
 8006d7a:	4b60      	ldr	r3, [pc, #384]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d80:	4a5e      	ldr	r2, [pc, #376]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006d82:	f043 0304 	orr.w	r3, r3, #4
 8006d86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d8a:	4b5c      	ldr	r3, [pc, #368]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d90:	4a5a      	ldr	r2, [pc, #360]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006d92:	f043 0301 	orr.w	r3, r3, #1
 8006d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d9a:	e00f      	b.n	8006dbc <HAL_RCC_OscConfig+0x378>
 8006d9c:	4b57      	ldr	r3, [pc, #348]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da2:	4a56      	ldr	r2, [pc, #344]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006da4:	f023 0301 	bic.w	r3, r3, #1
 8006da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006dac:	4b53      	ldr	r3, [pc, #332]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db2:	4a52      	ldr	r2, [pc, #328]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006db4:	f023 0304 	bic.w	r3, r3, #4
 8006db8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d016      	beq.n	8006df2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dc4:	f7fc fd8c 	bl	80038e0 <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dca:	e00a      	b.n	8006de2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dcc:	f7fc fd88 	bl	80038e0 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e140      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006de2:	4b46      	ldr	r3, [pc, #280]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0ed      	beq.n	8006dcc <HAL_RCC_OscConfig+0x388>
 8006df0:	e015      	b.n	8006e1e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df2:	f7fc fd75 	bl	80038e0 <HAL_GetTick>
 8006df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006df8:	e00a      	b.n	8006e10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dfa:	f7fc fd71 	bl	80038e0 <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d901      	bls.n	8006e10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006e0c:	2303      	movs	r3, #3
 8006e0e:	e129      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e10:	4b3a      	ldr	r3, [pc, #232]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e16:	f003 0302 	and.w	r3, r3, #2
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1ed      	bne.n	8006dfa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e1e:	7ffb      	ldrb	r3, [r7, #31]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d105      	bne.n	8006e30 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e24:	4b35      	ldr	r3, [pc, #212]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e28:	4a34      	ldr	r2, [pc, #208]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006e2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0320 	and.w	r3, r3, #32
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d03c      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	699b      	ldr	r3, [r3, #24]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d01c      	beq.n	8006e7e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006e44:	4b2d      	ldr	r3, [pc, #180]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e4a:	4a2c      	ldr	r2, [pc, #176]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006e4c:	f043 0301 	orr.w	r3, r3, #1
 8006e50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e54:	f7fc fd44 	bl	80038e0 <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e5c:	f7fc fd40 	bl	80038e0 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e0fa      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e6e:	4b23      	ldr	r3, [pc, #140]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006e70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e74:	f003 0302 	and.w	r3, r3, #2
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d0ef      	beq.n	8006e5c <HAL_RCC_OscConfig+0x418>
 8006e7c:	e01b      	b.n	8006eb6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e7e:	4b1f      	ldr	r3, [pc, #124]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006e80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e84:	4a1d      	ldr	r2, [pc, #116]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006e86:	f023 0301 	bic.w	r3, r3, #1
 8006e8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e8e:	f7fc fd27 	bl	80038e0 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e94:	e008      	b.n	8006ea8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e96:	f7fc fd23 	bl	80038e0 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e0dd      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006ea8:	4b14      	ldr	r3, [pc, #80]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006eaa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006eae:	f003 0302 	and.w	r3, r3, #2
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1ef      	bne.n	8006e96 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	f000 80d1 	beq.w	8007062 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ec0:	4b0e      	ldr	r3, [pc, #56]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f003 030c 	and.w	r3, r3, #12
 8006ec8:	2b0c      	cmp	r3, #12
 8006eca:	f000 808b 	beq.w	8006fe4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	69db      	ldr	r3, [r3, #28]
 8006ed2:	2b02      	cmp	r3, #2
 8006ed4:	d15e      	bne.n	8006f94 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ed6:	4b09      	ldr	r3, [pc, #36]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a08      	ldr	r2, [pc, #32]	; (8006efc <HAL_RCC_OscConfig+0x4b8>)
 8006edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ee0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee2:	f7fc fcfd 	bl	80038e0 <HAL_GetTick>
 8006ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ee8:	e00c      	b.n	8006f04 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006eea:	f7fc fcf9 	bl	80038e0 <HAL_GetTick>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	1ad3      	subs	r3, r2, r3
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d905      	bls.n	8006f04 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e0b3      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
 8006efc:	40021000 	.word	0x40021000
 8006f00:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f04:	4b59      	ldr	r3, [pc, #356]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1ec      	bne.n	8006eea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f10:	4b56      	ldr	r3, [pc, #344]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006f12:	68da      	ldr	r2, [r3, #12]
 8006f14:	4b56      	ldr	r3, [pc, #344]	; (8007070 <HAL_RCC_OscConfig+0x62c>)
 8006f16:	4013      	ands	r3, r2
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6a11      	ldr	r1, [r2, #32]
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f20:	3a01      	subs	r2, #1
 8006f22:	0112      	lsls	r2, r2, #4
 8006f24:	4311      	orrs	r1, r2
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006f2a:	0212      	lsls	r2, r2, #8
 8006f2c:	4311      	orrs	r1, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f32:	0852      	lsrs	r2, r2, #1
 8006f34:	3a01      	subs	r2, #1
 8006f36:	0552      	lsls	r2, r2, #21
 8006f38:	4311      	orrs	r1, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f3e:	0852      	lsrs	r2, r2, #1
 8006f40:	3a01      	subs	r2, #1
 8006f42:	0652      	lsls	r2, r2, #25
 8006f44:	4311      	orrs	r1, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f4a:	06d2      	lsls	r2, r2, #27
 8006f4c:	430a      	orrs	r2, r1
 8006f4e:	4947      	ldr	r1, [pc, #284]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f54:	4b45      	ldr	r3, [pc, #276]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a44      	ldr	r2, [pc, #272]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006f5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f60:	4b42      	ldr	r3, [pc, #264]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	4a41      	ldr	r2, [pc, #260]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f6c:	f7fc fcb8 	bl	80038e0 <HAL_GetTick>
 8006f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f72:	e008      	b.n	8006f86 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f74:	f7fc fcb4 	bl	80038e0 <HAL_GetTick>
 8006f78:	4602      	mov	r2, r0
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	2b02      	cmp	r3, #2
 8006f80:	d901      	bls.n	8006f86 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006f82:	2303      	movs	r3, #3
 8006f84:	e06e      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f86:	4b39      	ldr	r3, [pc, #228]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d0f0      	beq.n	8006f74 <HAL_RCC_OscConfig+0x530>
 8006f92:	e066      	b.n	8007062 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f94:	4b35      	ldr	r3, [pc, #212]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a34      	ldr	r2, [pc, #208]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f9e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006fa0:	4b32      	ldr	r3, [pc, #200]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	4a31      	ldr	r2, [pc, #196]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006fa6:	f023 0303 	bic.w	r3, r3, #3
 8006faa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006fac:	4b2f      	ldr	r3, [pc, #188]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	4a2e      	ldr	r2, [pc, #184]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006fb2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006fb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fbc:	f7fc fc90 	bl	80038e0 <HAL_GetTick>
 8006fc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fc2:	e008      	b.n	8006fd6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fc4:	f7fc fc8c 	bl	80038e0 <HAL_GetTick>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d901      	bls.n	8006fd6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	e046      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fd6:	4b25      	ldr	r3, [pc, #148]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d1f0      	bne.n	8006fc4 <HAL_RCC_OscConfig+0x580>
 8006fe2:	e03e      	b.n	8007062 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	69db      	ldr	r3, [r3, #28]
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d101      	bne.n	8006ff0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006fec:	2301      	movs	r3, #1
 8006fee:	e039      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006ff0:	4b1e      	ldr	r3, [pc, #120]	; (800706c <HAL_RCC_OscConfig+0x628>)
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	f003 0203 	and.w	r2, r3, #3
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	6a1b      	ldr	r3, [r3, #32]
 8007000:	429a      	cmp	r2, r3
 8007002:	d12c      	bne.n	800705e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	3b01      	subs	r3, #1
 8007010:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007012:	429a      	cmp	r2, r3
 8007014:	d123      	bne.n	800705e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007020:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007022:	429a      	cmp	r2, r3
 8007024:	d11b      	bne.n	800705e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007030:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007032:	429a      	cmp	r2, r3
 8007034:	d113      	bne.n	800705e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	3b01      	subs	r3, #1
 8007044:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007046:	429a      	cmp	r2, r3
 8007048:	d109      	bne.n	800705e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007054:	085b      	lsrs	r3, r3, #1
 8007056:	3b01      	subs	r3, #1
 8007058:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800705a:	429a      	cmp	r2, r3
 800705c:	d001      	beq.n	8007062 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800705e:	2301      	movs	r3, #1
 8007060:	e000      	b.n	8007064 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	40021000 	.word	0x40021000
 8007070:	019f800c 	.word	0x019f800c

08007074 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b086      	sub	sp, #24
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800707e:	2300      	movs	r3, #0
 8007080:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d101      	bne.n	800708c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007088:	2301      	movs	r3, #1
 800708a:	e11e      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800708c:	4b91      	ldr	r3, [pc, #580]	; (80072d4 <HAL_RCC_ClockConfig+0x260>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 030f 	and.w	r3, r3, #15
 8007094:	683a      	ldr	r2, [r7, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d910      	bls.n	80070bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800709a:	4b8e      	ldr	r3, [pc, #568]	; (80072d4 <HAL_RCC_ClockConfig+0x260>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f023 020f 	bic.w	r2, r3, #15
 80070a2:	498c      	ldr	r1, [pc, #560]	; (80072d4 <HAL_RCC_ClockConfig+0x260>)
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070aa:	4b8a      	ldr	r3, [pc, #552]	; (80072d4 <HAL_RCC_ClockConfig+0x260>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d001      	beq.n	80070bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	e106      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d073      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d129      	bne.n	8007124 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070d0:	4b81      	ldr	r3, [pc, #516]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e0f4      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80070e0:	f000 f99e 	bl	8007420 <RCC_GetSysClockFreqFromPLLSource>
 80070e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	4a7c      	ldr	r2, [pc, #496]	; (80072dc <HAL_RCC_ClockConfig+0x268>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d93f      	bls.n	800716e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80070ee:	4b7a      	ldr	r3, [pc, #488]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d009      	beq.n	800710e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007102:	2b00      	cmp	r3, #0
 8007104:	d033      	beq.n	800716e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800710a:	2b00      	cmp	r3, #0
 800710c:	d12f      	bne.n	800716e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800710e:	4b72      	ldr	r3, [pc, #456]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007116:	4a70      	ldr	r2, [pc, #448]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 8007118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800711c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800711e:	2380      	movs	r3, #128	; 0x80
 8007120:	617b      	str	r3, [r7, #20]
 8007122:	e024      	b.n	800716e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	2b02      	cmp	r3, #2
 800712a:	d107      	bne.n	800713c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800712c:	4b6a      	ldr	r3, [pc, #424]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007134:	2b00      	cmp	r3, #0
 8007136:	d109      	bne.n	800714c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e0c6      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800713c:	4b66      	ldr	r3, [pc, #408]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007144:	2b00      	cmp	r3, #0
 8007146:	d101      	bne.n	800714c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	e0be      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800714c:	f000 f8ce 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 8007150:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	4a61      	ldr	r2, [pc, #388]	; (80072dc <HAL_RCC_ClockConfig+0x268>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d909      	bls.n	800716e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800715a:	4b5f      	ldr	r3, [pc, #380]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007162:	4a5d      	ldr	r2, [pc, #372]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 8007164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007168:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800716a:	2380      	movs	r3, #128	; 0x80
 800716c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800716e:	4b5a      	ldr	r3, [pc, #360]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f023 0203 	bic.w	r2, r3, #3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4957      	ldr	r1, [pc, #348]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800717c:	4313      	orrs	r3, r2
 800717e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007180:	f7fc fbae 	bl	80038e0 <HAL_GetTick>
 8007184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007186:	e00a      	b.n	800719e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007188:	f7fc fbaa 	bl	80038e0 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	f241 3288 	movw	r2, #5000	; 0x1388
 8007196:	4293      	cmp	r3, r2
 8007198:	d901      	bls.n	800719e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e095      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800719e:	4b4e      	ldr	r3, [pc, #312]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 020c 	and.w	r2, r3, #12
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d1eb      	bne.n	8007188 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0302 	and.w	r3, r3, #2
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d023      	beq.n	8007204 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 0304 	and.w	r3, r3, #4
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d005      	beq.n	80071d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80071c8:	4b43      	ldr	r3, [pc, #268]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	4a42      	ldr	r2, [pc, #264]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071ce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80071d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0308 	and.w	r3, r3, #8
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80071e0:	4b3d      	ldr	r3, [pc, #244]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80071e8:	4a3b      	ldr	r2, [pc, #236]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80071ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80071f0:	4b39      	ldr	r3, [pc, #228]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	4936      	ldr	r1, [pc, #216]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80071fe:	4313      	orrs	r3, r2
 8007200:	608b      	str	r3, [r1, #8]
 8007202:	e008      	b.n	8007216 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8007204:	697b      	ldr	r3, [r7, #20]
 8007206:	2b80      	cmp	r3, #128	; 0x80
 8007208:	d105      	bne.n	8007216 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800720a:	4b33      	ldr	r3, [pc, #204]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	4a32      	ldr	r2, [pc, #200]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 8007210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007214:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007216:	4b2f      	ldr	r3, [pc, #188]	; (80072d4 <HAL_RCC_ClockConfig+0x260>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 030f 	and.w	r3, r3, #15
 800721e:	683a      	ldr	r2, [r7, #0]
 8007220:	429a      	cmp	r2, r3
 8007222:	d21d      	bcs.n	8007260 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007224:	4b2b      	ldr	r3, [pc, #172]	; (80072d4 <HAL_RCC_ClockConfig+0x260>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f023 020f 	bic.w	r2, r3, #15
 800722c:	4929      	ldr	r1, [pc, #164]	; (80072d4 <HAL_RCC_ClockConfig+0x260>)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	4313      	orrs	r3, r2
 8007232:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8007234:	f7fc fb54 	bl	80038e0 <HAL_GetTick>
 8007238:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800723a:	e00a      	b.n	8007252 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800723c:	f7fc fb50 	bl	80038e0 <HAL_GetTick>
 8007240:	4602      	mov	r2, r0
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	f241 3288 	movw	r2, #5000	; 0x1388
 800724a:	4293      	cmp	r3, r2
 800724c:	d901      	bls.n	8007252 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800724e:	2303      	movs	r3, #3
 8007250:	e03b      	b.n	80072ca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007252:	4b20      	ldr	r3, [pc, #128]	; (80072d4 <HAL_RCC_ClockConfig+0x260>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 030f 	and.w	r3, r3, #15
 800725a:	683a      	ldr	r2, [r7, #0]
 800725c:	429a      	cmp	r2, r3
 800725e:	d1ed      	bne.n	800723c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d008      	beq.n	800727e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800726c:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	68db      	ldr	r3, [r3, #12]
 8007278:	4917      	ldr	r1, [pc, #92]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800727a:	4313      	orrs	r3, r2
 800727c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f003 0308 	and.w	r3, r3, #8
 8007286:	2b00      	cmp	r3, #0
 8007288:	d009      	beq.n	800729e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800728a:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	691b      	ldr	r3, [r3, #16]
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	490f      	ldr	r1, [pc, #60]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 800729a:	4313      	orrs	r3, r2
 800729c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800729e:	f000 f825 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 80072a2:	4602      	mov	r2, r0
 80072a4:	4b0c      	ldr	r3, [pc, #48]	; (80072d8 <HAL_RCC_ClockConfig+0x264>)
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	091b      	lsrs	r3, r3, #4
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	490c      	ldr	r1, [pc, #48]	; (80072e0 <HAL_RCC_ClockConfig+0x26c>)
 80072b0:	5ccb      	ldrb	r3, [r1, r3]
 80072b2:	f003 031f 	and.w	r3, r3, #31
 80072b6:	fa22 f303 	lsr.w	r3, r2, r3
 80072ba:	4a0a      	ldr	r2, [pc, #40]	; (80072e4 <HAL_RCC_ClockConfig+0x270>)
 80072bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80072be:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <HAL_RCC_ClockConfig+0x274>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	4618      	mov	r0, r3
 80072c4:	f7fc fac0 	bl	8003848 <HAL_InitTick>
 80072c8:	4603      	mov	r3, r0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3718      	adds	r7, #24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	40022000 	.word	0x40022000
 80072d8:	40021000 	.word	0x40021000
 80072dc:	04c4b400 	.word	0x04c4b400
 80072e0:	0800fda0 	.word	0x0800fda0
 80072e4:	20000050 	.word	0x20000050
 80072e8:	20000054 	.word	0x20000054

080072ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b087      	sub	sp, #28
 80072f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80072f2:	4b2c      	ldr	r3, [pc, #176]	; (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f003 030c 	and.w	r3, r3, #12
 80072fa:	2b04      	cmp	r3, #4
 80072fc:	d102      	bne.n	8007304 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072fe:	4b2a      	ldr	r3, [pc, #168]	; (80073a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007300:	613b      	str	r3, [r7, #16]
 8007302:	e047      	b.n	8007394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007304:	4b27      	ldr	r3, [pc, #156]	; (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f003 030c 	and.w	r3, r3, #12
 800730c:	2b08      	cmp	r3, #8
 800730e:	d102      	bne.n	8007316 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007310:	4b26      	ldr	r3, [pc, #152]	; (80073ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8007312:	613b      	str	r3, [r7, #16]
 8007314:	e03e      	b.n	8007394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007316:	4b23      	ldr	r3, [pc, #140]	; (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 030c 	and.w	r3, r3, #12
 800731e:	2b0c      	cmp	r3, #12
 8007320:	d136      	bne.n	8007390 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007322:	4b20      	ldr	r3, [pc, #128]	; (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f003 0303 	and.w	r3, r3, #3
 800732a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800732c:	4b1d      	ldr	r3, [pc, #116]	; (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800732e:	68db      	ldr	r3, [r3, #12]
 8007330:	091b      	lsrs	r3, r3, #4
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	3301      	adds	r3, #1
 8007338:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2b03      	cmp	r3, #3
 800733e:	d10c      	bne.n	800735a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007340:	4a1a      	ldr	r2, [pc, #104]	; (80073ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	fbb2 f3f3 	udiv	r3, r2, r3
 8007348:	4a16      	ldr	r2, [pc, #88]	; (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800734a:	68d2      	ldr	r2, [r2, #12]
 800734c:	0a12      	lsrs	r2, r2, #8
 800734e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007352:	fb02 f303 	mul.w	r3, r2, r3
 8007356:	617b      	str	r3, [r7, #20]
      break;
 8007358:	e00c      	b.n	8007374 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800735a:	4a13      	ldr	r2, [pc, #76]	; (80073a8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007362:	4a10      	ldr	r2, [pc, #64]	; (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007364:	68d2      	ldr	r2, [r2, #12]
 8007366:	0a12      	lsrs	r2, r2, #8
 8007368:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800736c:	fb02 f303 	mul.w	r3, r2, r3
 8007370:	617b      	str	r3, [r7, #20]
      break;
 8007372:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007374:	4b0b      	ldr	r3, [pc, #44]	; (80073a4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	0e5b      	lsrs	r3, r3, #25
 800737a:	f003 0303 	and.w	r3, r3, #3
 800737e:	3301      	adds	r3, #1
 8007380:	005b      	lsls	r3, r3, #1
 8007382:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	fbb2 f3f3 	udiv	r3, r2, r3
 800738c:	613b      	str	r3, [r7, #16]
 800738e:	e001      	b.n	8007394 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007390:	2300      	movs	r3, #0
 8007392:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8007394:	693b      	ldr	r3, [r7, #16]
}
 8007396:	4618      	mov	r0, r3
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40021000 	.word	0x40021000
 80073a8:	00f42400 	.word	0x00f42400
 80073ac:	007a1200 	.word	0x007a1200

080073b0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073b0:	b480      	push	{r7}
 80073b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073b4:	4b03      	ldr	r3, [pc, #12]	; (80073c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80073b6:	681b      	ldr	r3, [r3, #0]
}
 80073b8:	4618      	mov	r0, r3
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20000050 	.word	0x20000050

080073c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80073cc:	f7ff fff0 	bl	80073b0 <HAL_RCC_GetHCLKFreq>
 80073d0:	4602      	mov	r2, r0
 80073d2:	4b06      	ldr	r3, [pc, #24]	; (80073ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	0a1b      	lsrs	r3, r3, #8
 80073d8:	f003 0307 	and.w	r3, r3, #7
 80073dc:	4904      	ldr	r1, [pc, #16]	; (80073f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80073de:	5ccb      	ldrb	r3, [r1, r3]
 80073e0:	f003 031f 	and.w	r3, r3, #31
 80073e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	40021000 	.word	0x40021000
 80073f0:	0800fdb0 	.word	0x0800fdb0

080073f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073f8:	f7ff ffda 	bl	80073b0 <HAL_RCC_GetHCLKFreq>
 80073fc:	4602      	mov	r2, r0
 80073fe:	4b06      	ldr	r3, [pc, #24]	; (8007418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	0adb      	lsrs	r3, r3, #11
 8007404:	f003 0307 	and.w	r3, r3, #7
 8007408:	4904      	ldr	r1, [pc, #16]	; (800741c <HAL_RCC_GetPCLK2Freq+0x28>)
 800740a:	5ccb      	ldrb	r3, [r1, r3]
 800740c:	f003 031f 	and.w	r3, r3, #31
 8007410:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007414:	4618      	mov	r0, r3
 8007416:	bd80      	pop	{r7, pc}
 8007418:	40021000 	.word	0x40021000
 800741c:	0800fdb0 	.word	0x0800fdb0

08007420 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007426:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f003 0303 	and.w	r3, r3, #3
 800742e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007430:	4b1b      	ldr	r3, [pc, #108]	; (80074a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	091b      	lsrs	r3, r3, #4
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	3301      	adds	r3, #1
 800743c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b03      	cmp	r3, #3
 8007442:	d10c      	bne.n	800745e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007444:	4a17      	ldr	r2, [pc, #92]	; (80074a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	fbb2 f3f3 	udiv	r3, r2, r3
 800744c:	4a14      	ldr	r2, [pc, #80]	; (80074a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800744e:	68d2      	ldr	r2, [r2, #12]
 8007450:	0a12      	lsrs	r2, r2, #8
 8007452:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007456:	fb02 f303 	mul.w	r3, r2, r3
 800745a:	617b      	str	r3, [r7, #20]
    break;
 800745c:	e00c      	b.n	8007478 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800745e:	4a12      	ldr	r2, [pc, #72]	; (80074a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	fbb2 f3f3 	udiv	r3, r2, r3
 8007466:	4a0e      	ldr	r2, [pc, #56]	; (80074a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007468:	68d2      	ldr	r2, [r2, #12]
 800746a:	0a12      	lsrs	r2, r2, #8
 800746c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007470:	fb02 f303 	mul.w	r3, r2, r3
 8007474:	617b      	str	r3, [r7, #20]
    break;
 8007476:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007478:	4b09      	ldr	r3, [pc, #36]	; (80074a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	0e5b      	lsrs	r3, r3, #25
 800747e:	f003 0303 	and.w	r3, r3, #3
 8007482:	3301      	adds	r3, #1
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007488:	697a      	ldr	r2, [r7, #20]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007490:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8007492:	687b      	ldr	r3, [r7, #4]
}
 8007494:	4618      	mov	r0, r3
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	40021000 	.word	0x40021000
 80074a4:	007a1200 	.word	0x007a1200
 80074a8:	00f42400 	.word	0x00f42400

080074ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b086      	sub	sp, #24
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80074b4:	2300      	movs	r3, #0
 80074b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80074b8:	2300      	movs	r3, #0
 80074ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 8098 	beq.w	80075fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80074ca:	2300      	movs	r3, #0
 80074cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80074ce:	4b43      	ldr	r3, [pc, #268]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d10d      	bne.n	80074f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80074da:	4b40      	ldr	r3, [pc, #256]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074de:	4a3f      	ldr	r2, [pc, #252]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074e4:	6593      	str	r3, [r2, #88]	; 0x58
 80074e6:	4b3d      	ldr	r3, [pc, #244]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80074e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074ee:	60bb      	str	r3, [r7, #8]
 80074f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80074f2:	2301      	movs	r3, #1
 80074f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074f6:	4b3a      	ldr	r3, [pc, #232]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	4a39      	ldr	r2, [pc, #228]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80074fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007500:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007502:	f7fc f9ed 	bl	80038e0 <HAL_GetTick>
 8007506:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007508:	e009      	b.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800750a:	f7fc f9e9 	bl	80038e0 <HAL_GetTick>
 800750e:	4602      	mov	r2, r0
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	d902      	bls.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007518:	2303      	movs	r3, #3
 800751a:	74fb      	strb	r3, [r7, #19]
        break;
 800751c:	e005      	b.n	800752a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800751e:	4b30      	ldr	r3, [pc, #192]	; (80075e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007526:	2b00      	cmp	r3, #0
 8007528:	d0ef      	beq.n	800750a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800752a:	7cfb      	ldrb	r3, [r7, #19]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d159      	bne.n	80075e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007530:	4b2a      	ldr	r3, [pc, #168]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800753a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d01e      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	429a      	cmp	r2, r3
 800754a:	d019      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800754c:	4b23      	ldr	r3, [pc, #140]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800754e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007556:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007558:	4b20      	ldr	r3, [pc, #128]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800755a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800755e:	4a1f      	ldr	r2, [pc, #124]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007560:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007564:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007568:	4b1c      	ldr	r3, [pc, #112]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800756a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800756e:	4a1b      	ldr	r2, [pc, #108]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007570:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007578:	4a18      	ldr	r2, [pc, #96]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	2b00      	cmp	r3, #0
 8007588:	d016      	beq.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800758a:	f7fc f9a9 	bl	80038e0 <HAL_GetTick>
 800758e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007590:	e00b      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007592:	f7fc f9a5 	bl	80038e0 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	f241 3288 	movw	r2, #5000	; 0x1388
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d902      	bls.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	74fb      	strb	r3, [r7, #19]
            break;
 80075a8:	e006      	b.n	80075b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80075aa:	4b0c      	ldr	r3, [pc, #48]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075b0:	f003 0302 	and.w	r3, r3, #2
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d0ec      	beq.n	8007592 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80075b8:	7cfb      	ldrb	r3, [r7, #19]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10b      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075be:	4b07      	ldr	r3, [pc, #28]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	4903      	ldr	r1, [pc, #12]	; (80075dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80075ce:	4313      	orrs	r3, r2
 80075d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80075d4:	e008      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075d6:	7cfb      	ldrb	r3, [r7, #19]
 80075d8:	74bb      	strb	r3, [r7, #18]
 80075da:	e005      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80075dc:	40021000 	.word	0x40021000
 80075e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e4:	7cfb      	ldrb	r3, [r7, #19]
 80075e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80075e8:	7c7b      	ldrb	r3, [r7, #17]
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d105      	bne.n	80075fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80075ee:	4ba6      	ldr	r3, [pc, #664]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f2:	4aa5      	ldr	r2, [pc, #660]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007606:	4ba0      	ldr	r3, [pc, #640]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800760c:	f023 0203 	bic.w	r2, r3, #3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	685b      	ldr	r3, [r3, #4]
 8007614:	499c      	ldr	r1, [pc, #624]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007616:	4313      	orrs	r3, r2
 8007618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f003 0302 	and.w	r3, r3, #2
 8007624:	2b00      	cmp	r3, #0
 8007626:	d00a      	beq.n	800763e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007628:	4b97      	ldr	r3, [pc, #604]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800762a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800762e:	f023 020c 	bic.w	r2, r3, #12
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	4994      	ldr	r1, [pc, #592]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007638:	4313      	orrs	r3, r2
 800763a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0304 	and.w	r3, r3, #4
 8007646:	2b00      	cmp	r3, #0
 8007648:	d00a      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800764a:	4b8f      	ldr	r3, [pc, #572]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800764c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007650:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	498b      	ldr	r1, [pc, #556]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800765a:	4313      	orrs	r3, r2
 800765c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0308 	and.w	r3, r3, #8
 8007668:	2b00      	cmp	r3, #0
 800766a:	d00a      	beq.n	8007682 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800766c:	4b86      	ldr	r3, [pc, #536]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800766e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007672:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	4983      	ldr	r1, [pc, #524]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800767c:	4313      	orrs	r3, r2
 800767e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00a      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800768e:	4b7e      	ldr	r3, [pc, #504]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007694:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	497a      	ldr	r1, [pc, #488]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d00a      	beq.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80076b0:	4b75      	ldr	r3, [pc, #468]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	4972      	ldr	r1, [pc, #456]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076c0:	4313      	orrs	r3, r2
 80076c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d00a      	beq.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80076d2:	4b6d      	ldr	r3, [pc, #436]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	69db      	ldr	r3, [r3, #28]
 80076e0:	4969      	ldr	r1, [pc, #420]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076e2:	4313      	orrs	r3, r2
 80076e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d00a      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80076f4:	4b64      	ldr	r3, [pc, #400]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	4961      	ldr	r1, [pc, #388]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007704:	4313      	orrs	r3, r2
 8007706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007712:	2b00      	cmp	r3, #0
 8007714:	d00a      	beq.n	800772c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007716:	4b5c      	ldr	r3, [pc, #368]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007724:	4958      	ldr	r1, [pc, #352]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007726:	4313      	orrs	r3, r2
 8007728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007734:	2b00      	cmp	r3, #0
 8007736:	d015      	beq.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007738:	4b53      	ldr	r3, [pc, #332]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800773a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800773e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007746:	4950      	ldr	r1, [pc, #320]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007752:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007756:	d105      	bne.n	8007764 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007758:	4b4b      	ldr	r3, [pc, #300]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	4a4a      	ldr	r2, [pc, #296]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800775e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007762:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800776c:	2b00      	cmp	r3, #0
 800776e:	d015      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007770:	4b45      	ldr	r3, [pc, #276]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007776:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777e:	4942      	ldr	r1, [pc, #264]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007780:	4313      	orrs	r3, r2
 8007782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800778e:	d105      	bne.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007790:	4b3d      	ldr	r3, [pc, #244]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	4a3c      	ldr	r2, [pc, #240]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800779a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d015      	beq.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80077a8:	4b37      	ldr	r3, [pc, #220]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	4934      	ldr	r1, [pc, #208]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077c6:	d105      	bne.n	80077d4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077c8:	4b2f      	ldr	r3, [pc, #188]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	4a2e      	ldr	r2, [pc, #184]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d015      	beq.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077e0:	4b29      	ldr	r3, [pc, #164]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ee:	4926      	ldr	r1, [pc, #152]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80077f0:	4313      	orrs	r3, r2
 80077f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077fe:	d105      	bne.n	800780c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007800:	4b21      	ldr	r3, [pc, #132]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	4a20      	ldr	r2, [pc, #128]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007806:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800780a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d015      	beq.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007818:	4b1b      	ldr	r3, [pc, #108]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800781a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800781e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	4918      	ldr	r1, [pc, #96]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007828:	4313      	orrs	r3, r2
 800782a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007832:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007836:	d105      	bne.n	8007844 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007838:	4b13      	ldr	r3, [pc, #76]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	4a12      	ldr	r2, [pc, #72]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800783e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007842:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800784c:	2b00      	cmp	r3, #0
 800784e:	d015      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007850:	4b0d      	ldr	r3, [pc, #52]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007856:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800785e:	490a      	ldr	r1, [pc, #40]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007860:	4313      	orrs	r3, r2
 8007862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800786e:	d105      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007870:	4b05      	ldr	r3, [pc, #20]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	4a04      	ldr	r2, [pc, #16]	; (8007888 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007876:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800787a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800787c:	7cbb      	ldrb	r3, [r7, #18]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	40021000 	.word	0x40021000

0800788c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e09d      	b.n	80079da <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d108      	bne.n	80078b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ae:	d009      	beq.n	80078c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	61da      	str	r2, [r3, #28]
 80078b6:	e005      	b.n	80078c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d106      	bne.n	80078e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fb fca0 	bl	8003224 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2202      	movs	r2, #2
 80078e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007904:	d902      	bls.n	800790c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
 800790a:	e002      	b.n	8007912 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800790c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007910:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800791a:	d007      	beq.n	800792c <HAL_SPI_Init+0xa0>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007924:	d002      	beq.n	800792c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2200      	movs	r2, #0
 800792a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800793c:	431a      	orrs	r2, r3
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	431a      	orrs	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	695b      	ldr	r3, [r3, #20]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	431a      	orrs	r2, r3
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	699b      	ldr	r3, [r3, #24]
 8007956:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800795a:	431a      	orrs	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007964:	431a      	orrs	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a1b      	ldr	r3, [r3, #32]
 800796a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800796e:	ea42 0103 	orr.w	r1, r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007976:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	699b      	ldr	r3, [r3, #24]
 8007986:	0c1b      	lsrs	r3, r3, #16
 8007988:	f003 0204 	and.w	r2, r3, #4
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007990:	f003 0310 	and.w	r3, r3, #16
 8007994:	431a      	orrs	r2, r3
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800799a:	f003 0308 	and.w	r3, r3, #8
 800799e:	431a      	orrs	r2, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	68db      	ldr	r3, [r3, #12]
 80079a4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80079a8:	ea42 0103 	orr.w	r1, r2, r3
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	69da      	ldr	r2, [r3, #28]
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2200      	movs	r2, #0
 80079ce:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80079d8:	2300      	movs	r3, #0
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d101      	bne.n	80079f4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e049      	b.n	8007a88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079fa:	b2db      	uxtb	r3, r3
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d106      	bne.n	8007a0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f7fb fc4f 	bl	80032ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2202      	movs	r2, #2
 8007a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f000 fea1 	bl	8008768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2201      	movs	r2, #1
 8007a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2201      	movs	r2, #1
 8007a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2201      	movs	r2, #1
 8007a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2201      	movs	r2, #1
 8007a52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2201      	movs	r2, #1
 8007a5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	2201      	movs	r2, #1
 8007a62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2201      	movs	r2, #1
 8007a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2201      	movs	r2, #1
 8007a7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3708      	adds	r7, #8
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b082      	sub	sp, #8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d101      	bne.n	8007aa2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e049      	b.n	8007b36 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f841 	bl	8007b3e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3304      	adds	r3, #4
 8007acc:	4619      	mov	r1, r3
 8007ace:	4610      	mov	r0, r2
 8007ad0:	f000 fe4a 	bl	8008768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2201      	movs	r2, #1
 8007ad8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2201      	movs	r2, #1
 8007af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2201      	movs	r2, #1
 8007b08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2201      	movs	r2, #1
 8007b18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2201      	movs	r2, #1
 8007b28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2201      	movs	r2, #1
 8007b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3708      	adds	r7, #8
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007b46:	bf00      	nop
 8007b48:	370c      	adds	r7, #12
 8007b4a:	46bd      	mov	sp, r7
 8007b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b50:	4770      	bx	lr
	...

08007b54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
 8007b5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d109      	bne.n	8007b78 <HAL_TIM_PWM_Start+0x24>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	bf14      	ite	ne
 8007b70:	2301      	movne	r3, #1
 8007b72:	2300      	moveq	r3, #0
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	e03c      	b.n	8007bf2 <HAL_TIM_PWM_Start+0x9e>
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2b04      	cmp	r3, #4
 8007b7c:	d109      	bne.n	8007b92 <HAL_TIM_PWM_Start+0x3e>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007b84:	b2db      	uxtb	r3, r3
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	bf14      	ite	ne
 8007b8a:	2301      	movne	r3, #1
 8007b8c:	2300      	moveq	r3, #0
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	e02f      	b.n	8007bf2 <HAL_TIM_PWM_Start+0x9e>
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	d109      	bne.n	8007bac <HAL_TIM_PWM_Start+0x58>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	2b01      	cmp	r3, #1
 8007ba2:	bf14      	ite	ne
 8007ba4:	2301      	movne	r3, #1
 8007ba6:	2300      	moveq	r3, #0
 8007ba8:	b2db      	uxtb	r3, r3
 8007baa:	e022      	b.n	8007bf2 <HAL_TIM_PWM_Start+0x9e>
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	2b0c      	cmp	r3, #12
 8007bb0:	d109      	bne.n	8007bc6 <HAL_TIM_PWM_Start+0x72>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b01      	cmp	r3, #1
 8007bbc:	bf14      	ite	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	2300      	moveq	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	e015      	b.n	8007bf2 <HAL_TIM_PWM_Start+0x9e>
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	2b10      	cmp	r3, #16
 8007bca:	d109      	bne.n	8007be0 <HAL_TIM_PWM_Start+0x8c>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	bf14      	ite	ne
 8007bd8:	2301      	movne	r3, #1
 8007bda:	2300      	moveq	r3, #0
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	e008      	b.n	8007bf2 <HAL_TIM_PWM_Start+0x9e>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	bf14      	ite	ne
 8007bec:	2301      	movne	r3, #1
 8007bee:	2300      	moveq	r3, #0
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d001      	beq.n	8007bfa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e097      	b.n	8007d2a <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d104      	bne.n	8007c0a <HAL_TIM_PWM_Start+0xb6>
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2202      	movs	r2, #2
 8007c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007c08:	e023      	b.n	8007c52 <HAL_TIM_PWM_Start+0xfe>
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	2b04      	cmp	r3, #4
 8007c0e:	d104      	bne.n	8007c1a <HAL_TIM_PWM_Start+0xc6>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007c18:	e01b      	b.n	8007c52 <HAL_TIM_PWM_Start+0xfe>
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	2b08      	cmp	r3, #8
 8007c1e:	d104      	bne.n	8007c2a <HAL_TIM_PWM_Start+0xd6>
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	2202      	movs	r2, #2
 8007c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007c28:	e013      	b.n	8007c52 <HAL_TIM_PWM_Start+0xfe>
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b0c      	cmp	r3, #12
 8007c2e:	d104      	bne.n	8007c3a <HAL_TIM_PWM_Start+0xe6>
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007c38:	e00b      	b.n	8007c52 <HAL_TIM_PWM_Start+0xfe>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	2b10      	cmp	r3, #16
 8007c3e:	d104      	bne.n	8007c4a <HAL_TIM_PWM_Start+0xf6>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2202      	movs	r2, #2
 8007c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007c48:	e003      	b.n	8007c52 <HAL_TIM_PWM_Start+0xfe>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2202      	movs	r2, #2
 8007c4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	2201      	movs	r2, #1
 8007c58:	6839      	ldr	r1, [r7, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f001 f9a6 	bl	8008fac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a33      	ldr	r2, [pc, #204]	; (8007d34 <HAL_TIM_PWM_Start+0x1e0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d013      	beq.n	8007c92 <HAL_TIM_PWM_Start+0x13e>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a32      	ldr	r2, [pc, #200]	; (8007d38 <HAL_TIM_PWM_Start+0x1e4>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d00e      	beq.n	8007c92 <HAL_TIM_PWM_Start+0x13e>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a30      	ldr	r2, [pc, #192]	; (8007d3c <HAL_TIM_PWM_Start+0x1e8>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d009      	beq.n	8007c92 <HAL_TIM_PWM_Start+0x13e>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a2f      	ldr	r2, [pc, #188]	; (8007d40 <HAL_TIM_PWM_Start+0x1ec>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d004      	beq.n	8007c92 <HAL_TIM_PWM_Start+0x13e>
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4a2d      	ldr	r2, [pc, #180]	; (8007d44 <HAL_TIM_PWM_Start+0x1f0>)
 8007c8e:	4293      	cmp	r3, r2
 8007c90:	d101      	bne.n	8007c96 <HAL_TIM_PWM_Start+0x142>
 8007c92:	2301      	movs	r3, #1
 8007c94:	e000      	b.n	8007c98 <HAL_TIM_PWM_Start+0x144>
 8007c96:	2300      	movs	r3, #0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d007      	beq.n	8007cac <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007caa:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4a20      	ldr	r2, [pc, #128]	; (8007d34 <HAL_TIM_PWM_Start+0x1e0>)
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d018      	beq.n	8007ce8 <HAL_TIM_PWM_Start+0x194>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cbe:	d013      	beq.n	8007ce8 <HAL_TIM_PWM_Start+0x194>
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a20      	ldr	r2, [pc, #128]	; (8007d48 <HAL_TIM_PWM_Start+0x1f4>)
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d00e      	beq.n	8007ce8 <HAL_TIM_PWM_Start+0x194>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a1f      	ldr	r2, [pc, #124]	; (8007d4c <HAL_TIM_PWM_Start+0x1f8>)
 8007cd0:	4293      	cmp	r3, r2
 8007cd2:	d009      	beq.n	8007ce8 <HAL_TIM_PWM_Start+0x194>
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	4a17      	ldr	r2, [pc, #92]	; (8007d38 <HAL_TIM_PWM_Start+0x1e4>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d004      	beq.n	8007ce8 <HAL_TIM_PWM_Start+0x194>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a16      	ldr	r2, [pc, #88]	; (8007d3c <HAL_TIM_PWM_Start+0x1e8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d115      	bne.n	8007d14 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	689a      	ldr	r2, [r3, #8]
 8007cee:	4b18      	ldr	r3, [pc, #96]	; (8007d50 <HAL_TIM_PWM_Start+0x1fc>)
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b06      	cmp	r3, #6
 8007cf8:	d015      	beq.n	8007d26 <HAL_TIM_PWM_Start+0x1d2>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d00:	d011      	beq.n	8007d26 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f042 0201 	orr.w	r2, r2, #1
 8007d10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d12:	e008      	b.n	8007d26 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0201 	orr.w	r2, r2, #1
 8007d22:	601a      	str	r2, [r3, #0]
 8007d24:	e000      	b.n	8007d28 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d26:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007d28:	2300      	movs	r3, #0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3710      	adds	r7, #16
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	40012c00 	.word	0x40012c00
 8007d38:	40013400 	.word	0x40013400
 8007d3c:	40014000 	.word	0x40014000
 8007d40:	40014400 	.word	0x40014400
 8007d44:	40014800 	.word	0x40014800
 8007d48:	40000400 	.word	0x40000400
 8007d4c:	40000800 	.word	0x40000800
 8007d50:	00010007 	.word	0x00010007

08007d54 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d101      	bne.n	8007d68 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007d64:	2301      	movs	r3, #1
 8007d66:	e097      	b.n	8007e98 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d106      	bne.n	8007d82 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f7fb fae1 	bl	8003344 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2202      	movs	r2, #2
 8007d86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	687a      	ldr	r2, [r7, #4]
 8007d92:	6812      	ldr	r2, [r2, #0]
 8007d94:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007d98:	f023 0307 	bic.w	r3, r3, #7
 8007d9c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	3304      	adds	r3, #4
 8007da6:	4619      	mov	r1, r3
 8007da8:	4610      	mov	r0, r2
 8007daa:	f000 fcdd 	bl	8008768 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	689b      	ldr	r3, [r3, #8]
 8007db4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	699b      	ldr	r3, [r3, #24]
 8007dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	697a      	ldr	r2, [r7, #20]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dd6:	f023 0303 	bic.w	r3, r3, #3
 8007dda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	021b      	lsls	r3, r3, #8
 8007de6:	4313      	orrs	r3, r2
 8007de8:	693a      	ldr	r2, [r7, #16]
 8007dea:	4313      	orrs	r3, r2
 8007dec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007df4:	f023 030c 	bic.w	r3, r3, #12
 8007df8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007e00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	68da      	ldr	r2, [r3, #12]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	69db      	ldr	r3, [r3, #28]
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	4313      	orrs	r3, r2
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	4313      	orrs	r3, r2
 8007e16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	011a      	lsls	r2, r3, #4
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	031b      	lsls	r3, r3, #12
 8007e24:	4313      	orrs	r3, r2
 8007e26:	693a      	ldr	r2, [r7, #16]
 8007e28:	4313      	orrs	r3, r2
 8007e2a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007e32:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007e3a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	695b      	ldr	r3, [r3, #20]
 8007e44:	011b      	lsls	r3, r3, #4
 8007e46:	4313      	orrs	r3, r2
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	693a      	ldr	r2, [r7, #16]
 8007e5c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2201      	movs	r2, #1
 8007e7a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2201      	movs	r2, #1
 8007e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2201      	movs	r2, #1
 8007e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3718      	adds	r7, #24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007eb0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007eb8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007ec0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ec8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d110      	bne.n	8007ef2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ed0:	7bfb      	ldrb	r3, [r7, #15]
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d102      	bne.n	8007edc <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007ed6:	7b7b      	ldrb	r3, [r7, #13]
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	d001      	beq.n	8007ee0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e089      	b.n	8007ff4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2202      	movs	r2, #2
 8007ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2202      	movs	r2, #2
 8007eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ef0:	e031      	b.n	8007f56 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007ef2:	683b      	ldr	r3, [r7, #0]
 8007ef4:	2b04      	cmp	r3, #4
 8007ef6:	d110      	bne.n	8007f1a <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007ef8:	7bbb      	ldrb	r3, [r7, #14]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d102      	bne.n	8007f04 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007efe:	7b3b      	ldrb	r3, [r7, #12]
 8007f00:	2b01      	cmp	r3, #1
 8007f02:	d001      	beq.n	8007f08 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e075      	b.n	8007ff4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2202      	movs	r2, #2
 8007f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007f18:	e01d      	b.n	8007f56 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d108      	bne.n	8007f32 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f20:	7bbb      	ldrb	r3, [r7, #14]
 8007f22:	2b01      	cmp	r3, #1
 8007f24:	d105      	bne.n	8007f32 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007f26:	7b7b      	ldrb	r3, [r7, #13]
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	d102      	bne.n	8007f32 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007f2c:	7b3b      	ldrb	r3, [r7, #12]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d001      	beq.n	8007f36 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e05e      	b.n	8007ff4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2202      	movs	r2, #2
 8007f42:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2202      	movs	r2, #2
 8007f4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2202      	movs	r2, #2
 8007f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007f56:	683b      	ldr	r3, [r7, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d003      	beq.n	8007f64 <HAL_TIM_Encoder_Start_IT+0xc4>
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2b04      	cmp	r3, #4
 8007f60:	d010      	beq.n	8007f84 <HAL_TIM_Encoder_Start_IT+0xe4>
 8007f62:	e01f      	b.n	8007fa4 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2201      	movs	r2, #1
 8007f6a:	2100      	movs	r1, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	f001 f81d 	bl	8008fac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	68da      	ldr	r2, [r3, #12]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f042 0202 	orr.w	r2, r2, #2
 8007f80:	60da      	str	r2, [r3, #12]
      break;
 8007f82:	e02e      	b.n	8007fe2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	2104      	movs	r1, #4
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	f001 f80d 	bl	8008fac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68da      	ldr	r2, [r3, #12]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f042 0204 	orr.w	r2, r2, #4
 8007fa0:	60da      	str	r2, [r3, #12]
      break;
 8007fa2:	e01e      	b.n	8007fe2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2201      	movs	r2, #1
 8007faa:	2100      	movs	r1, #0
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fffd 	bl	8008fac <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	2104      	movs	r1, #4
 8007fba:	4618      	mov	r0, r3
 8007fbc:	f000 fff6 	bl	8008fac <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f042 0202 	orr.w	r2, r2, #2
 8007fce:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	68da      	ldr	r2, [r3, #12]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f042 0204 	orr.w	r2, r2, #4
 8007fde:	60da      	str	r2, [r3, #12]
      break;
 8007fe0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	681a      	ldr	r2, [r3, #0]
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f042 0201 	orr.w	r2, r2, #1
 8007ff0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007ff2:	2300      	movs	r3, #0
}
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	3710      	adds	r7, #16
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	bd80      	pop	{r7, pc}

08007ffc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f003 0302 	and.w	r3, r3, #2
 800800e:	2b02      	cmp	r3, #2
 8008010:	d122      	bne.n	8008058 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	f003 0302 	and.w	r3, r3, #2
 800801c:	2b02      	cmp	r3, #2
 800801e:	d11b      	bne.n	8008058 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f06f 0202 	mvn.w	r2, #2
 8008028:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	699b      	ldr	r3, [r3, #24]
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7f9 fc7c 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 8008044:	e005      	b.n	8008052 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fb70 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f000 fb77 	bl	8008740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	f003 0304 	and.w	r3, r3, #4
 8008062:	2b04      	cmp	r3, #4
 8008064:	d122      	bne.n	80080ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f003 0304 	and.w	r3, r3, #4
 8008070:	2b04      	cmp	r3, #4
 8008072:	d11b      	bne.n	80080ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f06f 0204 	mvn.w	r2, #4
 800807c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	699b      	ldr	r3, [r3, #24]
 800808a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f7f9 fc52 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 8008098:	e005      	b.n	80080a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fb46 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 fb4d 	bl	8008740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	691b      	ldr	r3, [r3, #16]
 80080b2:	f003 0308 	and.w	r3, r3, #8
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d122      	bne.n	8008100 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	f003 0308 	and.w	r3, r3, #8
 80080c4:	2b08      	cmp	r3, #8
 80080c6:	d11b      	bne.n	8008100 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f06f 0208 	mvn.w	r2, #8
 80080d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2204      	movs	r2, #4
 80080d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	69db      	ldr	r3, [r3, #28]
 80080de:	f003 0303 	and.w	r3, r3, #3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d003      	beq.n	80080ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7f9 fc28 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 80080ec:	e005      	b.n	80080fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ee:	6878      	ldr	r0, [r7, #4]
 80080f0:	f000 fb1c 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 fb23 	bl	8008740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	691b      	ldr	r3, [r3, #16]
 8008106:	f003 0310 	and.w	r3, r3, #16
 800810a:	2b10      	cmp	r3, #16
 800810c:	d122      	bne.n	8008154 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	f003 0310 	and.w	r3, r3, #16
 8008118:	2b10      	cmp	r3, #16
 800811a:	d11b      	bne.n	8008154 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f06f 0210 	mvn.w	r2, #16
 8008124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	2208      	movs	r2, #8
 800812a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	69db      	ldr	r3, [r3, #28]
 8008132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7f9 fbfe 	bl	800193c <HAL_TIM_IC_CaptureCallback>
 8008140:	e005      	b.n	800814e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f000 faf2 	bl	800872c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 faf9 	bl	8008740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	2200      	movs	r2, #0
 8008152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	f003 0301 	and.w	r3, r3, #1
 800815e:	2b01      	cmp	r3, #1
 8008160:	d10e      	bne.n	8008180 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	68db      	ldr	r3, [r3, #12]
 8008168:	f003 0301 	and.w	r3, r3, #1
 800816c:	2b01      	cmp	r3, #1
 800816e:	d107      	bne.n	8008180 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f06f 0201 	mvn.w	r2, #1
 8008178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f000 facc 	bl	8008718 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	691b      	ldr	r3, [r3, #16]
 8008186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800818a:	2b80      	cmp	r3, #128	; 0x80
 800818c:	d10e      	bne.n	80081ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008198:	2b80      	cmp	r3, #128	; 0x80
 800819a:	d107      	bne.n	80081ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80081a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f001 f852 	bl	8009250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	691b      	ldr	r3, [r3, #16]
 80081b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081ba:	d10e      	bne.n	80081da <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	68db      	ldr	r3, [r3, #12]
 80081c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c6:	2b80      	cmp	r3, #128	; 0x80
 80081c8:	d107      	bne.n	80081da <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80081d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f001 f845 	bl	8009264 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	691b      	ldr	r3, [r3, #16]
 80081e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081e4:	2b40      	cmp	r3, #64	; 0x40
 80081e6:	d10e      	bne.n	8008206 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081f2:	2b40      	cmp	r3, #64	; 0x40
 80081f4:	d107      	bne.n	8008206 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 faa7 	bl	8008754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	691b      	ldr	r3, [r3, #16]
 800820c:	f003 0320 	and.w	r3, r3, #32
 8008210:	2b20      	cmp	r3, #32
 8008212:	d10e      	bne.n	8008232 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	f003 0320 	and.w	r3, r3, #32
 800821e:	2b20      	cmp	r3, #32
 8008220:	d107      	bne.n	8008232 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f06f 0220 	mvn.w	r2, #32
 800822a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f001 f805 	bl	800923c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	691b      	ldr	r3, [r3, #16]
 8008238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800823c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008240:	d10f      	bne.n	8008262 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800824c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008250:	d107      	bne.n	8008262 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800825a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f001 f80b 	bl	8009278 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800826c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008270:	d10f      	bne.n	8008292 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800827c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008280:	d107      	bne.n	8008292 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800828a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fffd 	bl	800928c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	691b      	ldr	r3, [r3, #16]
 8008298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800829c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082a0:	d10f      	bne.n	80082c2 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082b0:	d107      	bne.n	80082c2 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80082ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 ffef 	bl	80092a0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	691b      	ldr	r3, [r3, #16]
 80082c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082d0:	d10f      	bne.n	80082f2 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082e0:	d107      	bne.n	80082f2 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80082ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 ffe1 	bl	80092b4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80082f2:	bf00      	nop
 80082f4:	3708      	adds	r7, #8
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
	...

080082fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	60f8      	str	r0, [r7, #12]
 8008304:	60b9      	str	r1, [r7, #8]
 8008306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008312:	2b01      	cmp	r3, #1
 8008314:	d101      	bne.n	800831a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008316:	2302      	movs	r3, #2
 8008318:	e0ff      	b.n	800851a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b14      	cmp	r3, #20
 8008326:	f200 80f0 	bhi.w	800850a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	08008385 	.word	0x08008385
 8008334:	0800850b 	.word	0x0800850b
 8008338:	0800850b 	.word	0x0800850b
 800833c:	0800850b 	.word	0x0800850b
 8008340:	080083c5 	.word	0x080083c5
 8008344:	0800850b 	.word	0x0800850b
 8008348:	0800850b 	.word	0x0800850b
 800834c:	0800850b 	.word	0x0800850b
 8008350:	08008407 	.word	0x08008407
 8008354:	0800850b 	.word	0x0800850b
 8008358:	0800850b 	.word	0x0800850b
 800835c:	0800850b 	.word	0x0800850b
 8008360:	08008447 	.word	0x08008447
 8008364:	0800850b 	.word	0x0800850b
 8008368:	0800850b 	.word	0x0800850b
 800836c:	0800850b 	.word	0x0800850b
 8008370:	08008489 	.word	0x08008489
 8008374:	0800850b 	.word	0x0800850b
 8008378:	0800850b 	.word	0x0800850b
 800837c:	0800850b 	.word	0x0800850b
 8008380:	080084c9 	.word	0x080084c9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68b9      	ldr	r1, [r7, #8]
 800838a:	4618      	mov	r0, r3
 800838c:	f000 fa7c 	bl	8008888 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	699a      	ldr	r2, [r3, #24]
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f042 0208 	orr.w	r2, r2, #8
 800839e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	699a      	ldr	r2, [r3, #24]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f022 0204 	bic.w	r2, r2, #4
 80083ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6999      	ldr	r1, [r3, #24]
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	691a      	ldr	r2, [r3, #16]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	619a      	str	r2, [r3, #24]
      break;
 80083c2:	e0a5      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68b9      	ldr	r1, [r7, #8]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 faec 	bl	80089a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	699a      	ldr	r2, [r3, #24]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80083de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699a      	ldr	r2, [r3, #24]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	6999      	ldr	r1, [r3, #24]
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	021a      	lsls	r2, r3, #8
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	430a      	orrs	r2, r1
 8008402:	619a      	str	r2, [r3, #24]
      break;
 8008404:	e084      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	68b9      	ldr	r1, [r7, #8]
 800840c:	4618      	mov	r0, r3
 800840e:	f000 fb55 	bl	8008abc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	69da      	ldr	r2, [r3, #28]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f042 0208 	orr.w	r2, r2, #8
 8008420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	69da      	ldr	r2, [r3, #28]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0204 	bic.w	r2, r2, #4
 8008430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69d9      	ldr	r1, [r3, #28]
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	691a      	ldr	r2, [r3, #16]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	430a      	orrs	r2, r1
 8008442:	61da      	str	r2, [r3, #28]
      break;
 8008444:	e064      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	4618      	mov	r0, r3
 800844e:	f000 fbbd 	bl	8008bcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69da      	ldr	r2, [r3, #28]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008460:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	69da      	ldr	r2, [r3, #28]
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008470:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69d9      	ldr	r1, [r3, #28]
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	691b      	ldr	r3, [r3, #16]
 800847c:	021a      	lsls	r2, r3, #8
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	430a      	orrs	r2, r1
 8008484:	61da      	str	r2, [r3, #28]
      break;
 8008486:	e043      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68b9      	ldr	r1, [r7, #8]
 800848e:	4618      	mov	r0, r3
 8008490:	f000 fc26 	bl	8008ce0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f042 0208 	orr.w	r2, r2, #8
 80084a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f022 0204 	bic.w	r2, r2, #4
 80084b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	691a      	ldr	r2, [r3, #16]
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	430a      	orrs	r2, r1
 80084c4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80084c6:	e023      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	68b9      	ldr	r1, [r7, #8]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f000 fc6a 	bl	8008da8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084f2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	021a      	lsls	r2, r3, #8
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	430a      	orrs	r2, r1
 8008506:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008508:	e002      	b.n	8008510 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	75fb      	strb	r3, [r7, #23]
      break;
 800850e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2200      	movs	r2, #0
 8008514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008518:	7dfb      	ldrb	r3, [r7, #23]
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop

08008524 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800852e:	2300      	movs	r3, #0
 8008530:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008538:	2b01      	cmp	r3, #1
 800853a:	d101      	bne.n	8008540 <HAL_TIM_ConfigClockSource+0x1c>
 800853c:	2302      	movs	r3, #2
 800853e:	e0de      	b.n	80086fe <HAL_TIM_ConfigClockSource+0x1da>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2202      	movs	r2, #2
 800854c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800855e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800856a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	4a63      	ldr	r2, [pc, #396]	; (8008708 <HAL_TIM_ConfigClockSource+0x1e4>)
 800857a:	4293      	cmp	r3, r2
 800857c:	f000 80a9 	beq.w	80086d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008580:	4a61      	ldr	r2, [pc, #388]	; (8008708 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008582:	4293      	cmp	r3, r2
 8008584:	f200 80ae 	bhi.w	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008588:	4a60      	ldr	r2, [pc, #384]	; (800870c <HAL_TIM_ConfigClockSource+0x1e8>)
 800858a:	4293      	cmp	r3, r2
 800858c:	f000 80a1 	beq.w	80086d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008590:	4a5e      	ldr	r2, [pc, #376]	; (800870c <HAL_TIM_ConfigClockSource+0x1e8>)
 8008592:	4293      	cmp	r3, r2
 8008594:	f200 80a6 	bhi.w	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008598:	4a5d      	ldr	r2, [pc, #372]	; (8008710 <HAL_TIM_ConfigClockSource+0x1ec>)
 800859a:	4293      	cmp	r3, r2
 800859c:	f000 8099 	beq.w	80086d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80085a0:	4a5b      	ldr	r2, [pc, #364]	; (8008710 <HAL_TIM_ConfigClockSource+0x1ec>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	f200 809e 	bhi.w	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085a8:	4a5a      	ldr	r2, [pc, #360]	; (8008714 <HAL_TIM_ConfigClockSource+0x1f0>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	f000 8091 	beq.w	80086d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80085b0:	4a58      	ldr	r2, [pc, #352]	; (8008714 <HAL_TIM_ConfigClockSource+0x1f0>)
 80085b2:	4293      	cmp	r3, r2
 80085b4:	f200 8096 	bhi.w	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085bc:	f000 8089 	beq.w	80086d2 <HAL_TIM_ConfigClockSource+0x1ae>
 80085c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80085c4:	f200 808e 	bhi.w	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085cc:	d03e      	beq.n	800864c <HAL_TIM_ConfigClockSource+0x128>
 80085ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085d2:	f200 8087 	bhi.w	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085da:	f000 8086 	beq.w	80086ea <HAL_TIM_ConfigClockSource+0x1c6>
 80085de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085e2:	d87f      	bhi.n	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085e4:	2b70      	cmp	r3, #112	; 0x70
 80085e6:	d01a      	beq.n	800861e <HAL_TIM_ConfigClockSource+0xfa>
 80085e8:	2b70      	cmp	r3, #112	; 0x70
 80085ea:	d87b      	bhi.n	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085ec:	2b60      	cmp	r3, #96	; 0x60
 80085ee:	d050      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0x16e>
 80085f0:	2b60      	cmp	r3, #96	; 0x60
 80085f2:	d877      	bhi.n	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085f4:	2b50      	cmp	r3, #80	; 0x50
 80085f6:	d03c      	beq.n	8008672 <HAL_TIM_ConfigClockSource+0x14e>
 80085f8:	2b50      	cmp	r3, #80	; 0x50
 80085fa:	d873      	bhi.n	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 80085fc:	2b40      	cmp	r3, #64	; 0x40
 80085fe:	d058      	beq.n	80086b2 <HAL_TIM_ConfigClockSource+0x18e>
 8008600:	2b40      	cmp	r3, #64	; 0x40
 8008602:	d86f      	bhi.n	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008604:	2b30      	cmp	r3, #48	; 0x30
 8008606:	d064      	beq.n	80086d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008608:	2b30      	cmp	r3, #48	; 0x30
 800860a:	d86b      	bhi.n	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 800860c:	2b20      	cmp	r3, #32
 800860e:	d060      	beq.n	80086d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008610:	2b20      	cmp	r3, #32
 8008612:	d867      	bhi.n	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
 8008614:	2b00      	cmp	r3, #0
 8008616:	d05c      	beq.n	80086d2 <HAL_TIM_ConfigClockSource+0x1ae>
 8008618:	2b10      	cmp	r3, #16
 800861a:	d05a      	beq.n	80086d2 <HAL_TIM_ConfigClockSource+0x1ae>
 800861c:	e062      	b.n	80086e4 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6818      	ldr	r0, [r3, #0]
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	6899      	ldr	r1, [r3, #8]
 8008626:	683b      	ldr	r3, [r7, #0]
 8008628:	685a      	ldr	r2, [r3, #4]
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f000 fc9d 	bl	8008f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	689b      	ldr	r3, [r3, #8]
 8008638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	609a      	str	r2, [r3, #8]
      break;
 800864a:	e04f      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6818      	ldr	r0, [r3, #0]
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	6899      	ldr	r1, [r3, #8]
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	68db      	ldr	r3, [r3, #12]
 800865c:	f000 fc86 	bl	8008f6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689a      	ldr	r2, [r3, #8]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800866e:	609a      	str	r2, [r3, #8]
      break;
 8008670:	e03c      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	6859      	ldr	r1, [r3, #4]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	461a      	mov	r2, r3
 8008680:	f000 fbf8 	bl	8008e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	2150      	movs	r1, #80	; 0x50
 800868a:	4618      	mov	r0, r3
 800868c:	f000 fc51 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 8008690:	e02c      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	6859      	ldr	r1, [r3, #4]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	461a      	mov	r2, r3
 80086a0:	f000 fc17 	bl	8008ed2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2160      	movs	r1, #96	; 0x60
 80086aa:	4618      	mov	r0, r3
 80086ac:	f000 fc41 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 80086b0:	e01c      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6818      	ldr	r0, [r3, #0]
 80086b6:	683b      	ldr	r3, [r7, #0]
 80086b8:	6859      	ldr	r1, [r3, #4]
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	68db      	ldr	r3, [r3, #12]
 80086be:	461a      	mov	r2, r3
 80086c0:	f000 fbd8 	bl	8008e74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	2140      	movs	r1, #64	; 0x40
 80086ca:	4618      	mov	r0, r3
 80086cc:	f000 fc31 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 80086d0:	e00c      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4619      	mov	r1, r3
 80086dc:	4610      	mov	r0, r2
 80086de:	f000 fc28 	bl	8008f32 <TIM_ITRx_SetConfig>
      break;
 80086e2:	e003      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80086e4:	2301      	movs	r3, #1
 80086e6:	73fb      	strb	r3, [r7, #15]
      break;
 80086e8:	e000      	b.n	80086ec <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80086ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3710      	adds	r7, #16
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	00100070 	.word	0x00100070
 800870c:	00100040 	.word	0x00100040
 8008710:	00100030 	.word	0x00100030
 8008714:	00100020 	.word	0x00100020

08008718 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008718:	b480      	push	{r7}
 800871a:	b083      	sub	sp, #12
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008720:	bf00      	nop
 8008722:	370c      	adds	r7, #12
 8008724:	46bd      	mov	sp, r7
 8008726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872a:	4770      	bx	lr

0800872c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800872c:	b480      	push	{r7}
 800872e:	b083      	sub	sp, #12
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008734:	bf00      	nop
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008740:	b480      	push	{r7}
 8008742:	b083      	sub	sp, #12
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008748:	bf00      	nop
 800874a:	370c      	adds	r7, #12
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008754:	b480      	push	{r7}
 8008756:	b083      	sub	sp, #12
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	4a3c      	ldr	r2, [pc, #240]	; (800886c <TIM_Base_SetConfig+0x104>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d00f      	beq.n	80087a0 <TIM_Base_SetConfig+0x38>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008786:	d00b      	beq.n	80087a0 <TIM_Base_SetConfig+0x38>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a39      	ldr	r2, [pc, #228]	; (8008870 <TIM_Base_SetConfig+0x108>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d007      	beq.n	80087a0 <TIM_Base_SetConfig+0x38>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a38      	ldr	r2, [pc, #224]	; (8008874 <TIM_Base_SetConfig+0x10c>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d003      	beq.n	80087a0 <TIM_Base_SetConfig+0x38>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	4a37      	ldr	r2, [pc, #220]	; (8008878 <TIM_Base_SetConfig+0x110>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d108      	bne.n	80087b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087a8:	683b      	ldr	r3, [r7, #0]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	4313      	orrs	r3, r2
 80087b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	4a2d      	ldr	r2, [pc, #180]	; (800886c <TIM_Base_SetConfig+0x104>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d01b      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c0:	d017      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	4a2a      	ldr	r2, [pc, #168]	; (8008870 <TIM_Base_SetConfig+0x108>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d013      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	4a29      	ldr	r2, [pc, #164]	; (8008874 <TIM_Base_SetConfig+0x10c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d00f      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a28      	ldr	r2, [pc, #160]	; (8008878 <TIM_Base_SetConfig+0x110>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d00b      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a27      	ldr	r2, [pc, #156]	; (800887c <TIM_Base_SetConfig+0x114>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d007      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a26      	ldr	r2, [pc, #152]	; (8008880 <TIM_Base_SetConfig+0x118>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d003      	beq.n	80087f2 <TIM_Base_SetConfig+0x8a>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a25      	ldr	r2, [pc, #148]	; (8008884 <TIM_Base_SetConfig+0x11c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d108      	bne.n	8008804 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4313      	orrs	r3, r2
 8008802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	4313      	orrs	r3, r2
 8008810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	68fa      	ldr	r2, [r7, #12]
 8008816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681a      	ldr	r2, [r3, #0]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a10      	ldr	r2, [pc, #64]	; (800886c <TIM_Base_SetConfig+0x104>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d00f      	beq.n	8008850 <TIM_Base_SetConfig+0xe8>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a11      	ldr	r2, [pc, #68]	; (8008878 <TIM_Base_SetConfig+0x110>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d00b      	beq.n	8008850 <TIM_Base_SetConfig+0xe8>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a10      	ldr	r2, [pc, #64]	; (800887c <TIM_Base_SetConfig+0x114>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d007      	beq.n	8008850 <TIM_Base_SetConfig+0xe8>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a0f      	ldr	r2, [pc, #60]	; (8008880 <TIM_Base_SetConfig+0x118>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d003      	beq.n	8008850 <TIM_Base_SetConfig+0xe8>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a0e      	ldr	r2, [pc, #56]	; (8008884 <TIM_Base_SetConfig+0x11c>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d103      	bne.n	8008858 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	691a      	ldr	r2, [r3, #16]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	615a      	str	r2, [r3, #20]
}
 800885e:	bf00      	nop
 8008860:	3714      	adds	r7, #20
 8008862:	46bd      	mov	sp, r7
 8008864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	40012c00 	.word	0x40012c00
 8008870:	40000400 	.word	0x40000400
 8008874:	40000800 	.word	0x40000800
 8008878:	40013400 	.word	0x40013400
 800887c:	40014000 	.word	0x40014000
 8008880:	40014400 	.word	0x40014400
 8008884:	40014800 	.word	0x40014800

08008888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008888:	b480      	push	{r7}
 800888a:	b087      	sub	sp, #28
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a1b      	ldr	r3, [r3, #32]
 8008896:	f023 0201 	bic.w	r2, r3, #1
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6a1b      	ldr	r3, [r3, #32]
 80088a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f023 0303 	bic.w	r3, r3, #3
 80088c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088c4:	683b      	ldr	r3, [r7, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	68fa      	ldr	r2, [r7, #12]
 80088ca:	4313      	orrs	r3, r2
 80088cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	f023 0302 	bic.w	r3, r3, #2
 80088d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	4313      	orrs	r3, r2
 80088de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4a2c      	ldr	r2, [pc, #176]	; (8008994 <TIM_OC1_SetConfig+0x10c>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00f      	beq.n	8008908 <TIM_OC1_SetConfig+0x80>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	4a2b      	ldr	r2, [pc, #172]	; (8008998 <TIM_OC1_SetConfig+0x110>)
 80088ec:	4293      	cmp	r3, r2
 80088ee:	d00b      	beq.n	8008908 <TIM_OC1_SetConfig+0x80>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	4a2a      	ldr	r2, [pc, #168]	; (800899c <TIM_OC1_SetConfig+0x114>)
 80088f4:	4293      	cmp	r3, r2
 80088f6:	d007      	beq.n	8008908 <TIM_OC1_SetConfig+0x80>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	4a29      	ldr	r2, [pc, #164]	; (80089a0 <TIM_OC1_SetConfig+0x118>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d003      	beq.n	8008908 <TIM_OC1_SetConfig+0x80>
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	4a28      	ldr	r2, [pc, #160]	; (80089a4 <TIM_OC1_SetConfig+0x11c>)
 8008904:	4293      	cmp	r3, r2
 8008906:	d10c      	bne.n	8008922 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008908:	697b      	ldr	r3, [r7, #20]
 800890a:	f023 0308 	bic.w	r3, r3, #8
 800890e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	4313      	orrs	r3, r2
 8008918:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f023 0304 	bic.w	r3, r3, #4
 8008920:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	4a1b      	ldr	r2, [pc, #108]	; (8008994 <TIM_OC1_SetConfig+0x10c>)
 8008926:	4293      	cmp	r3, r2
 8008928:	d00f      	beq.n	800894a <TIM_OC1_SetConfig+0xc2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	4a1a      	ldr	r2, [pc, #104]	; (8008998 <TIM_OC1_SetConfig+0x110>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d00b      	beq.n	800894a <TIM_OC1_SetConfig+0xc2>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4a19      	ldr	r2, [pc, #100]	; (800899c <TIM_OC1_SetConfig+0x114>)
 8008936:	4293      	cmp	r3, r2
 8008938:	d007      	beq.n	800894a <TIM_OC1_SetConfig+0xc2>
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	4a18      	ldr	r2, [pc, #96]	; (80089a0 <TIM_OC1_SetConfig+0x118>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d003      	beq.n	800894a <TIM_OC1_SetConfig+0xc2>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	4a17      	ldr	r2, [pc, #92]	; (80089a4 <TIM_OC1_SetConfig+0x11c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d111      	bne.n	800896e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800894a:	693b      	ldr	r3, [r7, #16]
 800894c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008952:	693b      	ldr	r3, [r7, #16]
 8008954:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	695b      	ldr	r3, [r3, #20]
 800895e:	693a      	ldr	r2, [r7, #16]
 8008960:	4313      	orrs	r3, r2
 8008962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	699b      	ldr	r3, [r3, #24]
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	4313      	orrs	r3, r2
 800896c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	693a      	ldr	r2, [r7, #16]
 8008972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	685a      	ldr	r2, [r3, #4]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	697a      	ldr	r2, [r7, #20]
 8008986:	621a      	str	r2, [r3, #32]
}
 8008988:	bf00      	nop
 800898a:	371c      	adds	r7, #28
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr
 8008994:	40012c00 	.word	0x40012c00
 8008998:	40013400 	.word	0x40013400
 800899c:	40014000 	.word	0x40014000
 80089a0:	40014400 	.word	0x40014400
 80089a4:	40014800 	.word	0x40014800

080089a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b087      	sub	sp, #28
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	6a1b      	ldr	r3, [r3, #32]
 80089b6:	f023 0210 	bic.w	r2, r3, #16
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a1b      	ldr	r3, [r3, #32]
 80089c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	021b      	lsls	r3, r3, #8
 80089ea:	68fa      	ldr	r2, [r7, #12]
 80089ec:	4313      	orrs	r3, r2
 80089ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	f023 0320 	bic.w	r3, r3, #32
 80089f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	011b      	lsls	r3, r3, #4
 80089fe:	697a      	ldr	r2, [r7, #20]
 8008a00:	4313      	orrs	r3, r2
 8008a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a28      	ldr	r2, [pc, #160]	; (8008aa8 <TIM_OC2_SetConfig+0x100>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d003      	beq.n	8008a14 <TIM_OC2_SetConfig+0x6c>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	4a27      	ldr	r2, [pc, #156]	; (8008aac <TIM_OC2_SetConfig+0x104>)
 8008a10:	4293      	cmp	r3, r2
 8008a12:	d10d      	bne.n	8008a30 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	011b      	lsls	r3, r3, #4
 8008a22:	697a      	ldr	r2, [r7, #20]
 8008a24:	4313      	orrs	r3, r2
 8008a26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a1d      	ldr	r2, [pc, #116]	; (8008aa8 <TIM_OC2_SetConfig+0x100>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d00f      	beq.n	8008a58 <TIM_OC2_SetConfig+0xb0>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a1c      	ldr	r2, [pc, #112]	; (8008aac <TIM_OC2_SetConfig+0x104>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d00b      	beq.n	8008a58 <TIM_OC2_SetConfig+0xb0>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a1b      	ldr	r2, [pc, #108]	; (8008ab0 <TIM_OC2_SetConfig+0x108>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d007      	beq.n	8008a58 <TIM_OC2_SetConfig+0xb0>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a1a      	ldr	r2, [pc, #104]	; (8008ab4 <TIM_OC2_SetConfig+0x10c>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d003      	beq.n	8008a58 <TIM_OC2_SetConfig+0xb0>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a19      	ldr	r2, [pc, #100]	; (8008ab8 <TIM_OC2_SetConfig+0x110>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d113      	bne.n	8008a80 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a5e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a66:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	4313      	orrs	r3, r2
 8008a72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	699b      	ldr	r3, [r3, #24]
 8008a78:	009b      	lsls	r3, r3, #2
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	693a      	ldr	r2, [r7, #16]
 8008a84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685a      	ldr	r2, [r3, #4]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	697a      	ldr	r2, [r7, #20]
 8008a98:	621a      	str	r2, [r3, #32]
}
 8008a9a:	bf00      	nop
 8008a9c:	371c      	adds	r7, #28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	40012c00 	.word	0x40012c00
 8008aac:	40013400 	.word	0x40013400
 8008ab0:	40014000 	.word	0x40014000
 8008ab4:	40014400 	.word	0x40014400
 8008ab8:	40014800 	.word	0x40014800

08008abc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b087      	sub	sp, #28
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a1b      	ldr	r3, [r3, #32]
 8008aca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6a1b      	ldr	r3, [r3, #32]
 8008ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69db      	ldr	r3, [r3, #28]
 8008ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f023 0303 	bic.w	r3, r3, #3
 8008af6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68fa      	ldr	r2, [r7, #12]
 8008afe:	4313      	orrs	r3, r2
 8008b00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	021b      	lsls	r3, r3, #8
 8008b10:	697a      	ldr	r2, [r7, #20]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a27      	ldr	r2, [pc, #156]	; (8008bb8 <TIM_OC3_SetConfig+0xfc>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d003      	beq.n	8008b26 <TIM_OC3_SetConfig+0x6a>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a26      	ldr	r2, [pc, #152]	; (8008bbc <TIM_OC3_SetConfig+0x100>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d10d      	bne.n	8008b42 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	021b      	lsls	r3, r3, #8
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a1c      	ldr	r2, [pc, #112]	; (8008bb8 <TIM_OC3_SetConfig+0xfc>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d00f      	beq.n	8008b6a <TIM_OC3_SetConfig+0xae>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a1b      	ldr	r2, [pc, #108]	; (8008bbc <TIM_OC3_SetConfig+0x100>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d00b      	beq.n	8008b6a <TIM_OC3_SetConfig+0xae>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a1a      	ldr	r2, [pc, #104]	; (8008bc0 <TIM_OC3_SetConfig+0x104>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d007      	beq.n	8008b6a <TIM_OC3_SetConfig+0xae>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a19      	ldr	r2, [pc, #100]	; (8008bc4 <TIM_OC3_SetConfig+0x108>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d003      	beq.n	8008b6a <TIM_OC3_SetConfig+0xae>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a18      	ldr	r2, [pc, #96]	; (8008bc8 <TIM_OC3_SetConfig+0x10c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d113      	bne.n	8008b92 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	695b      	ldr	r3, [r3, #20]
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	699b      	ldr	r3, [r3, #24]
 8008b8a:	011b      	lsls	r3, r3, #4
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	4313      	orrs	r3, r2
 8008b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	68fa      	ldr	r2, [r7, #12]
 8008b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	685a      	ldr	r2, [r3, #4]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	697a      	ldr	r2, [r7, #20]
 8008baa:	621a      	str	r2, [r3, #32]
}
 8008bac:	bf00      	nop
 8008bae:	371c      	adds	r7, #28
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb6:	4770      	bx	lr
 8008bb8:	40012c00 	.word	0x40012c00
 8008bbc:	40013400 	.word	0x40013400
 8008bc0:	40014000 	.word	0x40014000
 8008bc4:	40014400 	.word	0x40014400
 8008bc8:	40014800 	.word	0x40014800

08008bcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b087      	sub	sp, #28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a1b      	ldr	r3, [r3, #32]
 8008be6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	69db      	ldr	r3, [r3, #28]
 8008bf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bfa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	021b      	lsls	r3, r3, #8
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	689b      	ldr	r3, [r3, #8]
 8008c20:	031b      	lsls	r3, r3, #12
 8008c22:	697a      	ldr	r2, [r7, #20]
 8008c24:	4313      	orrs	r3, r2
 8008c26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	4a28      	ldr	r2, [pc, #160]	; (8008ccc <TIM_OC4_SetConfig+0x100>)
 8008c2c:	4293      	cmp	r3, r2
 8008c2e:	d003      	beq.n	8008c38 <TIM_OC4_SetConfig+0x6c>
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a27      	ldr	r2, [pc, #156]	; (8008cd0 <TIM_OC4_SetConfig+0x104>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d10d      	bne.n	8008c54 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	031b      	lsls	r3, r3, #12
 8008c46:	697a      	ldr	r2, [r7, #20]
 8008c48:	4313      	orrs	r3, r2
 8008c4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a1d      	ldr	r2, [pc, #116]	; (8008ccc <TIM_OC4_SetConfig+0x100>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d00f      	beq.n	8008c7c <TIM_OC4_SetConfig+0xb0>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a1c      	ldr	r2, [pc, #112]	; (8008cd0 <TIM_OC4_SetConfig+0x104>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00b      	beq.n	8008c7c <TIM_OC4_SetConfig+0xb0>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a1b      	ldr	r2, [pc, #108]	; (8008cd4 <TIM_OC4_SetConfig+0x108>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d007      	beq.n	8008c7c <TIM_OC4_SetConfig+0xb0>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a1a      	ldr	r2, [pc, #104]	; (8008cd8 <TIM_OC4_SetConfig+0x10c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d003      	beq.n	8008c7c <TIM_OC4_SetConfig+0xb0>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a19      	ldr	r2, [pc, #100]	; (8008cdc <TIM_OC4_SetConfig+0x110>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d113      	bne.n	8008ca4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c82:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c8a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	019b      	lsls	r3, r3, #6
 8008c92:	693a      	ldr	r2, [r7, #16]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	019b      	lsls	r3, r3, #6
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	685a      	ldr	r2, [r3, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	621a      	str	r2, [r3, #32]
}
 8008cbe:	bf00      	nop
 8008cc0:	371c      	adds	r7, #28
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc8:	4770      	bx	lr
 8008cca:	bf00      	nop
 8008ccc:	40012c00 	.word	0x40012c00
 8008cd0:	40013400 	.word	0x40013400
 8008cd4:	40014000 	.word	0x40014000
 8008cd8:	40014400 	.word	0x40014400
 8008cdc:	40014800 	.word	0x40014800

08008ce0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a1b      	ldr	r3, [r3, #32]
 8008cfa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	689b      	ldr	r3, [r3, #8]
 8008d2a:	041b      	lsls	r3, r3, #16
 8008d2c:	693a      	ldr	r2, [r7, #16]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	4a17      	ldr	r2, [pc, #92]	; (8008d94 <TIM_OC5_SetConfig+0xb4>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d00f      	beq.n	8008d5a <TIM_OC5_SetConfig+0x7a>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	4a16      	ldr	r2, [pc, #88]	; (8008d98 <TIM_OC5_SetConfig+0xb8>)
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	d00b      	beq.n	8008d5a <TIM_OC5_SetConfig+0x7a>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	4a15      	ldr	r2, [pc, #84]	; (8008d9c <TIM_OC5_SetConfig+0xbc>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d007      	beq.n	8008d5a <TIM_OC5_SetConfig+0x7a>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4a14      	ldr	r2, [pc, #80]	; (8008da0 <TIM_OC5_SetConfig+0xc0>)
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d003      	beq.n	8008d5a <TIM_OC5_SetConfig+0x7a>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4a13      	ldr	r2, [pc, #76]	; (8008da4 <TIM_OC5_SetConfig+0xc4>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d109      	bne.n	8008d6e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	695b      	ldr	r3, [r3, #20]
 8008d66:	021b      	lsls	r3, r3, #8
 8008d68:	697a      	ldr	r2, [r7, #20]
 8008d6a:	4313      	orrs	r3, r2
 8008d6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	697a      	ldr	r2, [r7, #20]
 8008d72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	68fa      	ldr	r2, [r7, #12]
 8008d78:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008d7a:	683b      	ldr	r3, [r7, #0]
 8008d7c:	685a      	ldr	r2, [r3, #4]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	693a      	ldr	r2, [r7, #16]
 8008d86:	621a      	str	r2, [r3, #32]
}
 8008d88:	bf00      	nop
 8008d8a:	371c      	adds	r7, #28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr
 8008d94:	40012c00 	.word	0x40012c00
 8008d98:	40013400 	.word	0x40013400
 8008d9c:	40014000 	.word	0x40014000
 8008da0:	40014400 	.word	0x40014400
 8008da4:	40014800 	.word	0x40014800

08008da8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008da8:	b480      	push	{r7}
 8008daa:	b087      	sub	sp, #28
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	6078      	str	r0, [r7, #4]
 8008db0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6a1b      	ldr	r3, [r3, #32]
 8008db6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a1b      	ldr	r3, [r3, #32]
 8008dc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008dd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	021b      	lsls	r3, r3, #8
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	689b      	ldr	r3, [r3, #8]
 8008df4:	051b      	lsls	r3, r3, #20
 8008df6:	693a      	ldr	r2, [r7, #16]
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a18      	ldr	r2, [pc, #96]	; (8008e60 <TIM_OC6_SetConfig+0xb8>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d00f      	beq.n	8008e24 <TIM_OC6_SetConfig+0x7c>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a17      	ldr	r2, [pc, #92]	; (8008e64 <TIM_OC6_SetConfig+0xbc>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d00b      	beq.n	8008e24 <TIM_OC6_SetConfig+0x7c>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a16      	ldr	r2, [pc, #88]	; (8008e68 <TIM_OC6_SetConfig+0xc0>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d007      	beq.n	8008e24 <TIM_OC6_SetConfig+0x7c>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a15      	ldr	r2, [pc, #84]	; (8008e6c <TIM_OC6_SetConfig+0xc4>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d003      	beq.n	8008e24 <TIM_OC6_SetConfig+0x7c>
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	4a14      	ldr	r2, [pc, #80]	; (8008e70 <TIM_OC6_SetConfig+0xc8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d109      	bne.n	8008e38 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	695b      	ldr	r3, [r3, #20]
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	697a      	ldr	r2, [r7, #20]
 8008e34:	4313      	orrs	r3, r2
 8008e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	697a      	ldr	r2, [r7, #20]
 8008e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	68fa      	ldr	r2, [r7, #12]
 8008e42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	685a      	ldr	r2, [r3, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	693a      	ldr	r2, [r7, #16]
 8008e50:	621a      	str	r2, [r3, #32]
}
 8008e52:	bf00      	nop
 8008e54:	371c      	adds	r7, #28
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	40012c00 	.word	0x40012c00
 8008e64:	40013400 	.word	0x40013400
 8008e68:	40014000 	.word	0x40014000
 8008e6c:	40014400 	.word	0x40014400
 8008e70:	40014800 	.word	0x40014800

08008e74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e74:	b480      	push	{r7}
 8008e76:	b087      	sub	sp, #28
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	6a1b      	ldr	r3, [r3, #32]
 8008e84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	6a1b      	ldr	r3, [r3, #32]
 8008e8a:	f023 0201 	bic.w	r2, r3, #1
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	699b      	ldr	r3, [r3, #24]
 8008e96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008e9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	011b      	lsls	r3, r3, #4
 8008ea4:	693a      	ldr	r2, [r7, #16]
 8008ea6:	4313      	orrs	r3, r2
 8008ea8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008eaa:	697b      	ldr	r3, [r7, #20]
 8008eac:	f023 030a 	bic.w	r3, r3, #10
 8008eb0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	693a      	ldr	r2, [r7, #16]
 8008ebe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	697a      	ldr	r2, [r7, #20]
 8008ec4:	621a      	str	r2, [r3, #32]
}
 8008ec6:	bf00      	nop
 8008ec8:	371c      	adds	r7, #28
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed0:	4770      	bx	lr

08008ed2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ed2:	b480      	push	{r7}
 8008ed4:	b087      	sub	sp, #28
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	6a1b      	ldr	r3, [r3, #32]
 8008ee2:	f023 0210 	bic.w	r2, r3, #16
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	699b      	ldr	r3, [r3, #24]
 8008eee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	6a1b      	ldr	r3, [r3, #32]
 8008ef4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ef6:	697b      	ldr	r3, [r7, #20]
 8008ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008efc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	031b      	lsls	r3, r3, #12
 8008f02:	697a      	ldr	r2, [r7, #20]
 8008f04:	4313      	orrs	r3, r2
 8008f06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f0e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f10:	68bb      	ldr	r3, [r7, #8]
 8008f12:	011b      	lsls	r3, r3, #4
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	693a      	ldr	r2, [r7, #16]
 8008f24:	621a      	str	r2, [r3, #32]
}
 8008f26:	bf00      	nop
 8008f28:	371c      	adds	r7, #28
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr

08008f32 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f32:	b480      	push	{r7}
 8008f34:	b085      	sub	sp, #20
 8008f36:	af00      	add	r7, sp, #0
 8008f38:	6078      	str	r0, [r7, #4]
 8008f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f4e:	683a      	ldr	r2, [r7, #0]
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	4313      	orrs	r3, r2
 8008f54:	f043 0307 	orr.w	r3, r3, #7
 8008f58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	609a      	str	r2, [r3, #8]
}
 8008f60:	bf00      	nop
 8008f62:	3714      	adds	r7, #20
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	689b      	ldr	r3, [r3, #8]
 8008f7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	021a      	lsls	r2, r3, #8
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	4313      	orrs	r3, r2
 8008f94:	697a      	ldr	r2, [r7, #20]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	697a      	ldr	r2, [r7, #20]
 8008f9e:	609a      	str	r2, [r3, #8]
}
 8008fa0:	bf00      	nop
 8008fa2:	371c      	adds	r7, #28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b087      	sub	sp, #28
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	60f8      	str	r0, [r7, #12]
 8008fb4:	60b9      	str	r1, [r7, #8]
 8008fb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	f003 031f 	and.w	r3, r3, #31
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	6a1a      	ldr	r2, [r3, #32]
 8008fca:	697b      	ldr	r3, [r7, #20]
 8008fcc:	43db      	mvns	r3, r3
 8008fce:	401a      	ands	r2, r3
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	6a1a      	ldr	r2, [r3, #32]
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f003 031f 	and.w	r3, r3, #31
 8008fde:	6879      	ldr	r1, [r7, #4]
 8008fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8008fe4:	431a      	orrs	r2, r3
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	621a      	str	r2, [r3, #32]
}
 8008fea:	bf00      	nop
 8008fec:	371c      	adds	r7, #28
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
	...

08008ff8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
 8009000:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009008:	2b01      	cmp	r3, #1
 800900a:	d101      	bne.n	8009010 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800900c:	2302      	movs	r3, #2
 800900e:	e065      	b.n	80090dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2202      	movs	r2, #2
 800901c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	685b      	ldr	r3, [r3, #4]
 8009026:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689b      	ldr	r3, [r3, #8]
 800902e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4a2c      	ldr	r2, [pc, #176]	; (80090e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d004      	beq.n	8009044 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	4a2b      	ldr	r2, [pc, #172]	; (80090ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009040:	4293      	cmp	r3, r2
 8009042:	d108      	bne.n	8009056 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800904a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4313      	orrs	r3, r2
 8009054:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800905c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009060:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	4313      	orrs	r3, r2
 800906a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68fa      	ldr	r2, [r7, #12]
 8009072:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a1b      	ldr	r2, [pc, #108]	; (80090e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d018      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009086:	d013      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a18      	ldr	r2, [pc, #96]	; (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d00e      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a17      	ldr	r2, [pc, #92]	; (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d009      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a12      	ldr	r2, [pc, #72]	; (80090ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d004      	beq.n	80090b0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a13      	ldr	r2, [pc, #76]	; (80090f8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d10c      	bne.n	80090ca <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	68ba      	ldr	r2, [r7, #8]
 80090be:	4313      	orrs	r3, r2
 80090c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68ba      	ldr	r2, [r7, #8]
 80090c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2200      	movs	r2, #0
 80090d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3714      	adds	r7, #20
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr
 80090e8:	40012c00 	.word	0x40012c00
 80090ec:	40013400 	.word	0x40013400
 80090f0:	40000400 	.word	0x40000400
 80090f4:	40000800 	.word	0x40000800
 80090f8:	40014000 	.word	0x40014000

080090fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009110:	2b01      	cmp	r3, #1
 8009112:	d101      	bne.n	8009118 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009114:	2302      	movs	r3, #2
 8009116:	e087      	b.n	8009228 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	689b      	ldr	r3, [r3, #8]
 8009138:	4313      	orrs	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	4313      	orrs	r3, r2
 8009148:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4313      	orrs	r3, r2
 8009156:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	4313      	orrs	r3, r2
 8009164:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	695b      	ldr	r3, [r3, #20]
 8009170:	4313      	orrs	r3, r2
 8009172:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800917e:	4313      	orrs	r3, r2
 8009180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	699b      	ldr	r3, [r3, #24]
 800918c:	041b      	lsls	r3, r3, #16
 800918e:	4313      	orrs	r3, r2
 8009190:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a27      	ldr	r2, [pc, #156]	; (8009234 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d004      	beq.n	80091a6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a25      	ldr	r2, [pc, #148]	; (8009238 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d106      	bne.n	80091b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	69db      	ldr	r3, [r3, #28]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1e      	ldr	r2, [pc, #120]	; (8009234 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d004      	beq.n	80091c8 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a1d      	ldr	r2, [pc, #116]	; (8009238 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d126      	bne.n	8009216 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d2:	051b      	lsls	r3, r3, #20
 80091d4:	4313      	orrs	r3, r2
 80091d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	6a1b      	ldr	r3, [r3, #32]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	4313      	orrs	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a0e      	ldr	r2, [pc, #56]	; (8009234 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d004      	beq.n	8009208 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a0d      	ldr	r2, [pc, #52]	; (8009238 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d106      	bne.n	8009216 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009212:	4313      	orrs	r3, r2
 8009214:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68fa      	ldr	r2, [r7, #12]
 800921c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2200      	movs	r2, #0
 8009222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009226:	2300      	movs	r3, #0
}
 8009228:	4618      	mov	r0, r3
 800922a:	3714      	adds	r7, #20
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr
 8009234:	40012c00 	.word	0x40012c00
 8009238:	40013400 	.word	0x40013400

0800923c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800923c:	b480      	push	{r7}
 800923e:	b083      	sub	sp, #12
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009244:	bf00      	nop
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr

08009250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009258:	bf00      	nop
 800925a:	370c      	adds	r7, #12
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800926c:	bf00      	nop
 800926e:	370c      	adds	r7, #12
 8009270:	46bd      	mov	sp, r7
 8009272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009276:	4770      	bx	lr

08009278 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009278:	b480      	push	{r7}
 800927a:	b083      	sub	sp, #12
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009280:	bf00      	nop
 8009282:	370c      	adds	r7, #12
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009294:	bf00      	nop
 8009296:	370c      	adds	r7, #12
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr

080092a0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80092a8:	bf00      	nop
 80092aa:	370c      	adds	r7, #12
 80092ac:	46bd      	mov	sp, r7
 80092ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b2:	4770      	bx	lr

080092b4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b082      	sub	sp, #8
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d101      	bne.n	80092da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092d6:	2301      	movs	r3, #1
 80092d8:	e042      	b.n	8009360 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d106      	bne.n	80092f2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7fa f8cd 	bl	800348c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2224      	movs	r2, #36	; 0x24
 80092f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	681a      	ldr	r2, [r3, #0]
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	f022 0201 	bic.w	r2, r2, #1
 8009308:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800930a:	6878      	ldr	r0, [r7, #4]
 800930c:	f000 fc02 	bl	8009b14 <UART_SetConfig>
 8009310:	4603      	mov	r3, r0
 8009312:	2b01      	cmp	r3, #1
 8009314:	d101      	bne.n	800931a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e022      	b.n	8009360 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931e:	2b00      	cmp	r3, #0
 8009320:	d002      	beq.n	8009328 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f000 fec2 	bl	800a0ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	685a      	ldr	r2, [r3, #4]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009336:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	689a      	ldr	r2, [r3, #8]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009346:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f042 0201 	orr.w	r2, r2, #1
 8009356:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 ff49 	bl	800a1f0 <UART_CheckIdleState>
 800935e:	4603      	mov	r3, r0
}
 8009360:	4618      	mov	r0, r3
 8009362:	3708      	adds	r7, #8
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009368:	b480      	push	{r7}
 800936a:	b091      	sub	sp, #68	; 0x44
 800936c:	af00      	add	r7, sp, #0
 800936e:	60f8      	str	r0, [r7, #12]
 8009370:	60b9      	str	r1, [r7, #8]
 8009372:	4613      	mov	r3, r2
 8009374:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800937c:	2b20      	cmp	r3, #32
 800937e:	f040 808c 	bne.w	800949a <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d002      	beq.n	800938e <HAL_UART_Transmit_IT+0x26>
 8009388:	88fb      	ldrh	r3, [r7, #6]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d101      	bne.n	8009392 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800938e:	2301      	movs	r3, #1
 8009390:	e084      	b.n	800949c <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009398:	2b01      	cmp	r3, #1
 800939a:	d101      	bne.n	80093a0 <HAL_UART_Transmit_IT+0x38>
 800939c:	2302      	movs	r3, #2
 800939e:	e07d      	b.n	800949c <HAL_UART_Transmit_IT+0x134>
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	68ba      	ldr	r2, [r7, #8]
 80093ac:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	88fa      	ldrh	r2, [r7, #6]
 80093b2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	88fa      	ldrh	r2, [r7, #6]
 80093ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	2200      	movs	r2, #0
 80093c2:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2221      	movs	r2, #33	; 0x21
 80093d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80093d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093dc:	d12e      	bne.n	800943c <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093e6:	d107      	bne.n	80093f8 <HAL_UART_Transmit_IT+0x90>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	691b      	ldr	r3, [r3, #16]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d103      	bne.n	80093f8 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	4a2d      	ldr	r2, [pc, #180]	; (80094a8 <HAL_UART_Transmit_IT+0x140>)
 80093f4:	675a      	str	r2, [r3, #116]	; 0x74
 80093f6:	e002      	b.n	80093fe <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	4a2c      	ldr	r2, [pc, #176]	; (80094ac <HAL_UART_Transmit_IT+0x144>)
 80093fc:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3308      	adds	r3, #8
 800940c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800940e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009410:	e853 3f00 	ldrex	r3, [r3]
 8009414:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009418:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800941c:	63bb      	str	r3, [r7, #56]	; 0x38
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	3308      	adds	r3, #8
 8009424:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009426:	637a      	str	r2, [r7, #52]	; 0x34
 8009428:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800942a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800942c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800942e:	e841 2300 	strex	r3, r2, [r1]
 8009432:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009436:	2b00      	cmp	r3, #0
 8009438:	d1e5      	bne.n	8009406 <HAL_UART_Transmit_IT+0x9e>
 800943a:	e02c      	b.n	8009496 <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009444:	d107      	bne.n	8009456 <HAL_UART_Transmit_IT+0xee>
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d103      	bne.n	8009456 <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	4a17      	ldr	r2, [pc, #92]	; (80094b0 <HAL_UART_Transmit_IT+0x148>)
 8009452:	675a      	str	r2, [r3, #116]	; 0x74
 8009454:	e002      	b.n	800945c <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	4a16      	ldr	r2, [pc, #88]	; (80094b4 <HAL_UART_Transmit_IT+0x14c>)
 800945a:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	e853 3f00 	ldrex	r3, [r3]
 8009470:	613b      	str	r3, [r7, #16]
   return(result);
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009478:	63fb      	str	r3, [r7, #60]	; 0x3c
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	461a      	mov	r2, r3
 8009480:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009482:	623b      	str	r3, [r7, #32]
 8009484:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	69f9      	ldr	r1, [r7, #28]
 8009488:	6a3a      	ldr	r2, [r7, #32]
 800948a:	e841 2300 	strex	r3, r2, [r1]
 800948e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009490:	69bb      	ldr	r3, [r7, #24]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d1e6      	bne.n	8009464 <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	e000      	b.n	800949c <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 800949a:	2302      	movs	r3, #2
  }
}
 800949c:	4618      	mov	r0, r3
 800949e:	3744      	adds	r7, #68	; 0x44
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	0800a769 	.word	0x0800a769
 80094ac:	0800a689 	.word	0x0800a689
 80094b0:	0800a5c7 	.word	0x0800a5c7
 80094b4:	0800a50f 	.word	0x0800a50f

080094b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b0ba      	sub	sp, #232	; 0xe8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	689b      	ldr	r3, [r3, #8]
 80094da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80094de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80094e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80094e6:	4013      	ands	r3, r2
 80094e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80094ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d11b      	bne.n	800952c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094f8:	f003 0320 	and.w	r3, r3, #32
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d015      	beq.n	800952c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009500:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009504:	f003 0320 	and.w	r3, r3, #32
 8009508:	2b00      	cmp	r3, #0
 800950a:	d105      	bne.n	8009518 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800950c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009514:	2b00      	cmp	r3, #0
 8009516:	d009      	beq.n	800952c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 82d6 	beq.w	8009ace <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009526:	6878      	ldr	r0, [r7, #4]
 8009528:	4798      	blx	r3
      }
      return;
 800952a:	e2d0      	b.n	8009ace <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800952c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 811f 	beq.w	8009774 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009536:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800953a:	4b8b      	ldr	r3, [pc, #556]	; (8009768 <HAL_UART_IRQHandler+0x2b0>)
 800953c:	4013      	ands	r3, r2
 800953e:	2b00      	cmp	r3, #0
 8009540:	d106      	bne.n	8009550 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009542:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009546:	4b89      	ldr	r3, [pc, #548]	; (800976c <HAL_UART_IRQHandler+0x2b4>)
 8009548:	4013      	ands	r3, r2
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 8112 	beq.w	8009774 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009550:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009554:	f003 0301 	and.w	r3, r3, #1
 8009558:	2b00      	cmp	r3, #0
 800955a:	d011      	beq.n	8009580 <HAL_UART_IRQHandler+0xc8>
 800955c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009564:	2b00      	cmp	r3, #0
 8009566:	d00b      	beq.n	8009580 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	2201      	movs	r2, #1
 800956e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009576:	f043 0201 	orr.w	r2, r3, #1
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009584:	f003 0302 	and.w	r3, r3, #2
 8009588:	2b00      	cmp	r3, #0
 800958a:	d011      	beq.n	80095b0 <HAL_UART_IRQHandler+0xf8>
 800958c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00b      	beq.n	80095b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2202      	movs	r2, #2
 800959e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095a6:	f043 0204 	orr.w	r2, r3, #4
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d011      	beq.n	80095e0 <HAL_UART_IRQHandler+0x128>
 80095bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095c0:	f003 0301 	and.w	r3, r3, #1
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d00b      	beq.n	80095e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2204      	movs	r2, #4
 80095ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095d6:	f043 0202 	orr.w	r2, r3, #2
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80095e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e4:	f003 0308 	and.w	r3, r3, #8
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d017      	beq.n	800961c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80095ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f0:	f003 0320 	and.w	r3, r3, #32
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d105      	bne.n	8009604 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80095f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80095fc:	4b5a      	ldr	r3, [pc, #360]	; (8009768 <HAL_UART_IRQHandler+0x2b0>)
 80095fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00b      	beq.n	800961c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2208      	movs	r2, #8
 800960a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009612:	f043 0208 	orr.w	r2, r3, #8
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800961c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009624:	2b00      	cmp	r3, #0
 8009626:	d012      	beq.n	800964e <HAL_UART_IRQHandler+0x196>
 8009628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800962c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00c      	beq.n	800964e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800963c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009644:	f043 0220 	orr.w	r2, r3, #32
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 823c 	beq.w	8009ad2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800965a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800965e:	f003 0320 	and.w	r3, r3, #32
 8009662:	2b00      	cmp	r3, #0
 8009664:	d013      	beq.n	800968e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800966a:	f003 0320 	and.w	r3, r3, #32
 800966e:	2b00      	cmp	r3, #0
 8009670:	d105      	bne.n	800967e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800967a:	2b00      	cmp	r3, #0
 800967c:	d007      	beq.n	800968e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096a2:	2b40      	cmp	r3, #64	; 0x40
 80096a4:	d005      	beq.n	80096b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80096a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d04f      	beq.n	8009752 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 feaf 	bl	800a416 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096c2:	2b40      	cmp	r3, #64	; 0x40
 80096c4:	d141      	bne.n	800974a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	3308      	adds	r3, #8
 80096cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80096dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80096e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3308      	adds	r3, #8
 80096ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009702:	e841 2300 	strex	r3, r2, [r1]
 8009706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800970a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1d9      	bne.n	80096c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009716:	2b00      	cmp	r3, #0
 8009718:	d013      	beq.n	8009742 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800971e:	4a14      	ldr	r2, [pc, #80]	; (8009770 <HAL_UART_IRQHandler+0x2b8>)
 8009720:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009726:	4618      	mov	r0, r3
 8009728:	f7fc fc32 	bl	8005f90 <HAL_DMA_Abort_IT>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d017      	beq.n	8009762 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800973c:	4610      	mov	r0, r2
 800973e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009740:	e00f      	b.n	8009762 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f9d0 	bl	8009ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009748:	e00b      	b.n	8009762 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f9cc 	bl	8009ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009750:	e007      	b.n	8009762 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 f9c8 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	2200      	movs	r2, #0
 800975c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009760:	e1b7      	b.n	8009ad2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009762:	bf00      	nop
    return;
 8009764:	e1b5      	b.n	8009ad2 <HAL_UART_IRQHandler+0x61a>
 8009766:	bf00      	nop
 8009768:	10000001 	.word	0x10000001
 800976c:	04000120 	.word	0x04000120
 8009770:	0800a4e3 	.word	0x0800a4e3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009778:	2b01      	cmp	r3, #1
 800977a:	f040 814a 	bne.w	8009a12 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800977e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009782:	f003 0310 	and.w	r3, r3, #16
 8009786:	2b00      	cmp	r3, #0
 8009788:	f000 8143 	beq.w	8009a12 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800978c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009790:	f003 0310 	and.w	r3, r3, #16
 8009794:	2b00      	cmp	r3, #0
 8009796:	f000 813c 	beq.w	8009a12 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	2210      	movs	r2, #16
 80097a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	689b      	ldr	r3, [r3, #8]
 80097a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ac:	2b40      	cmp	r3, #64	; 0x40
 80097ae:	f040 80b5 	bne.w	800991c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685b      	ldr	r3, [r3, #4]
 80097ba:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097be:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	f000 8187 	beq.w	8009ad6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80097ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097d2:	429a      	cmp	r2, r3
 80097d4:	f080 817f 	bcs.w	8009ad6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80097de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0320 	and.w	r3, r3, #32
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	f040 8086 	bne.w	8009900 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009800:	e853 3f00 	ldrex	r3, [r3]
 8009804:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009808:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800980c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009810:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	461a      	mov	r2, r3
 800981a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800981e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009822:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009826:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800982a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800982e:	e841 2300 	strex	r3, r2, [r1]
 8009832:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009836:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800983a:	2b00      	cmp	r3, #0
 800983c:	d1da      	bne.n	80097f4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	3308      	adds	r3, #8
 8009844:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009848:	e853 3f00 	ldrex	r3, [r3]
 800984c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800984e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009850:	f023 0301 	bic.w	r3, r3, #1
 8009854:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	3308      	adds	r3, #8
 800985e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009862:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009866:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009868:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800986a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800986e:	e841 2300 	strex	r3, r2, [r1]
 8009872:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009876:	2b00      	cmp	r3, #0
 8009878:	d1e1      	bne.n	800983e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009884:	e853 3f00 	ldrex	r3, [r3]
 8009888:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800988a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800988c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009890:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	3308      	adds	r3, #8
 800989a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800989e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80098a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80098a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80098ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d1e3      	bne.n	800987a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2220      	movs	r2, #32
 80098b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	2200      	movs	r2, #0
 80098be:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c8:	e853 3f00 	ldrex	r3, [r3]
 80098cc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80098ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80098d0:	f023 0310 	bic.w	r3, r3, #16
 80098d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	461a      	mov	r2, r3
 80098de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80098e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80098e4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80098e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80098ea:	e841 2300 	strex	r3, r2, [r1]
 80098ee:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80098f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d1e4      	bne.n	80098c0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098fa:	4618      	mov	r0, r3
 80098fc:	f7fc faef 	bl	8005ede <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800990c:	b29b      	uxth	r3, r3
 800990e:	1ad3      	subs	r3, r2, r3
 8009910:	b29b      	uxth	r3, r3
 8009912:	4619      	mov	r1, r3
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 f8f1 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800991a:	e0dc      	b.n	8009ad6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009928:	b29b      	uxth	r3, r3
 800992a:	1ad3      	subs	r3, r2, r3
 800992c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009936:	b29b      	uxth	r3, r3
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 80ce 	beq.w	8009ada <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800993e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 80c9 	beq.w	8009ada <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800994e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009950:	e853 3f00 	ldrex	r3, [r3]
 8009954:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009958:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800995c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800996a:	647b      	str	r3, [r7, #68]	; 0x44
 800996c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800996e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009972:	e841 2300 	strex	r3, r2, [r1]
 8009976:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800997a:	2b00      	cmp	r3, #0
 800997c:	d1e4      	bne.n	8009948 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	3308      	adds	r3, #8
 8009984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009988:	e853 3f00 	ldrex	r3, [r3]
 800998c:	623b      	str	r3, [r7, #32]
   return(result);
 800998e:	6a3b      	ldr	r3, [r7, #32]
 8009990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009994:	f023 0301 	bic.w	r3, r3, #1
 8009998:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3308      	adds	r3, #8
 80099a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80099a6:	633a      	str	r2, [r7, #48]	; 0x30
 80099a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ae:	e841 2300 	strex	r3, r2, [r1]
 80099b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80099b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d1e1      	bne.n	800997e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2220      	movs	r2, #32
 80099be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2200      	movs	r2, #0
 80099cc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	e853 3f00 	ldrex	r3, [r3]
 80099da:	60fb      	str	r3, [r7, #12]
   return(result);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	f023 0310 	bic.w	r3, r3, #16
 80099e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	461a      	mov	r2, r3
 80099ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80099f0:	61fb      	str	r3, [r7, #28]
 80099f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f4:	69b9      	ldr	r1, [r7, #24]
 80099f6:	69fa      	ldr	r2, [r7, #28]
 80099f8:	e841 2300 	strex	r3, r2, [r1]
 80099fc:	617b      	str	r3, [r7, #20]
   return(result);
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1e4      	bne.n	80099ce <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f876 	bl	8009afc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a10:	e063      	b.n	8009ada <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00e      	beq.n	8009a3c <HAL_UART_IRQHandler+0x584>
 8009a1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d008      	beq.n	8009a3c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009a32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 ff37 	bl	800a8a8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009a3a:	e051      	b.n	8009ae0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d014      	beq.n	8009a72 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d105      	bne.n	8009a60 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009a54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d008      	beq.n	8009a72 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d03a      	beq.n	8009ade <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	4798      	blx	r3
    }
    return;
 8009a70:	e035      	b.n	8009ade <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d009      	beq.n	8009a92 <HAL_UART_IRQHandler+0x5da>
 8009a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f000 fee1 	bl	800a852 <UART_EndTransmit_IT>
    return;
 8009a90:	e026      	b.n	8009ae0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d009      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x5fa>
 8009a9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009aa2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d003      	beq.n	8009ab2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	f000 ff10 	bl	800a8d0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ab0:	e016      	b.n	8009ae0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009ab2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d010      	beq.n	8009ae0 <HAL_UART_IRQHandler+0x628>
 8009abe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	da0c      	bge.n	8009ae0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fef8 	bl	800a8bc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009acc:	e008      	b.n	8009ae0 <HAL_UART_IRQHandler+0x628>
      return;
 8009ace:	bf00      	nop
 8009ad0:	e006      	b.n	8009ae0 <HAL_UART_IRQHandler+0x628>
    return;
 8009ad2:	bf00      	nop
 8009ad4:	e004      	b.n	8009ae0 <HAL_UART_IRQHandler+0x628>
      return;
 8009ad6:	bf00      	nop
 8009ad8:	e002      	b.n	8009ae0 <HAL_UART_IRQHandler+0x628>
      return;
 8009ada:	bf00      	nop
 8009adc:	e000      	b.n	8009ae0 <HAL_UART_IRQHandler+0x628>
    return;
 8009ade:	bf00      	nop
  }
}
 8009ae0:	37e8      	adds	r7, #232	; 0xe8
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bd80      	pop	{r7, pc}
 8009ae6:	bf00      	nop

08009ae8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	460b      	mov	r3, r1
 8009b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b18:	b08c      	sub	sp, #48	; 0x30
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b1e:	2300      	movs	r3, #0
 8009b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	689a      	ldr	r2, [r3, #8]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	691b      	ldr	r3, [r3, #16]
 8009b2c:	431a      	orrs	r2, r3
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	695b      	ldr	r3, [r3, #20]
 8009b32:	431a      	orrs	r2, r3
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	69db      	ldr	r3, [r3, #28]
 8009b38:	4313      	orrs	r3, r2
 8009b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009b3c:	697b      	ldr	r3, [r7, #20]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	4bab      	ldr	r3, [pc, #684]	; (8009df0 <UART_SetConfig+0x2dc>)
 8009b44:	4013      	ands	r3, r2
 8009b46:	697a      	ldr	r2, [r7, #20]
 8009b48:	6812      	ldr	r2, [r2, #0]
 8009b4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b4c:	430b      	orrs	r3, r1
 8009b4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b50:	697b      	ldr	r3, [r7, #20]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	68da      	ldr	r2, [r3, #12]
 8009b5e:	697b      	ldr	r3, [r7, #20]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	430a      	orrs	r2, r1
 8009b64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	699b      	ldr	r3, [r3, #24]
 8009b6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	4aa0      	ldr	r2, [pc, #640]	; (8009df4 <UART_SetConfig+0x2e0>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d004      	beq.n	8009b80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009b76:	697b      	ldr	r3, [r7, #20]
 8009b78:	6a1b      	ldr	r3, [r3, #32]
 8009b7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b7c:	4313      	orrs	r3, r2
 8009b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b80:	697b      	ldr	r3, [r7, #20]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009b8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009b8e:	697a      	ldr	r2, [r7, #20]
 8009b90:	6812      	ldr	r2, [r2, #0]
 8009b92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b94:	430b      	orrs	r3, r1
 8009b96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b9e:	f023 010f 	bic.w	r1, r3, #15
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009ba6:	697b      	ldr	r3, [r7, #20]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	430a      	orrs	r2, r1
 8009bac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a91      	ldr	r2, [pc, #580]	; (8009df8 <UART_SetConfig+0x2e4>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d125      	bne.n	8009c04 <UART_SetConfig+0xf0>
 8009bb8:	4b90      	ldr	r3, [pc, #576]	; (8009dfc <UART_SetConfig+0x2e8>)
 8009bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bbe:	f003 0303 	and.w	r3, r3, #3
 8009bc2:	2b03      	cmp	r3, #3
 8009bc4:	d81a      	bhi.n	8009bfc <UART_SetConfig+0xe8>
 8009bc6:	a201      	add	r2, pc, #4	; (adr r2, 8009bcc <UART_SetConfig+0xb8>)
 8009bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bcc:	08009bdd 	.word	0x08009bdd
 8009bd0:	08009bed 	.word	0x08009bed
 8009bd4:	08009be5 	.word	0x08009be5
 8009bd8:	08009bf5 	.word	0x08009bf5
 8009bdc:	2301      	movs	r3, #1
 8009bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009be2:	e0d6      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009be4:	2302      	movs	r3, #2
 8009be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bea:	e0d2      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009bec:	2304      	movs	r3, #4
 8009bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bf2:	e0ce      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009bf4:	2308      	movs	r3, #8
 8009bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bfa:	e0ca      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009bfc:	2310      	movs	r3, #16
 8009bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c02:	e0c6      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a7d      	ldr	r2, [pc, #500]	; (8009e00 <UART_SetConfig+0x2ec>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d138      	bne.n	8009c80 <UART_SetConfig+0x16c>
 8009c0e:	4b7b      	ldr	r3, [pc, #492]	; (8009dfc <UART_SetConfig+0x2e8>)
 8009c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c14:	f003 030c 	and.w	r3, r3, #12
 8009c18:	2b0c      	cmp	r3, #12
 8009c1a:	d82d      	bhi.n	8009c78 <UART_SetConfig+0x164>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <UART_SetConfig+0x110>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c59 	.word	0x08009c59
 8009c28:	08009c79 	.word	0x08009c79
 8009c2c:	08009c79 	.word	0x08009c79
 8009c30:	08009c79 	.word	0x08009c79
 8009c34:	08009c69 	.word	0x08009c69
 8009c38:	08009c79 	.word	0x08009c79
 8009c3c:	08009c79 	.word	0x08009c79
 8009c40:	08009c79 	.word	0x08009c79
 8009c44:	08009c61 	.word	0x08009c61
 8009c48:	08009c79 	.word	0x08009c79
 8009c4c:	08009c79 	.word	0x08009c79
 8009c50:	08009c79 	.word	0x08009c79
 8009c54:	08009c71 	.word	0x08009c71
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c5e:	e098      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c60:	2302      	movs	r3, #2
 8009c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c66:	e094      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c68:	2304      	movs	r3, #4
 8009c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c6e:	e090      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c70:	2308      	movs	r3, #8
 8009c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c76:	e08c      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c78:	2310      	movs	r3, #16
 8009c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009c7e:	e088      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a5f      	ldr	r2, [pc, #380]	; (8009e04 <UART_SetConfig+0x2f0>)
 8009c86:	4293      	cmp	r3, r2
 8009c88:	d125      	bne.n	8009cd6 <UART_SetConfig+0x1c2>
 8009c8a:	4b5c      	ldr	r3, [pc, #368]	; (8009dfc <UART_SetConfig+0x2e8>)
 8009c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c94:	2b30      	cmp	r3, #48	; 0x30
 8009c96:	d016      	beq.n	8009cc6 <UART_SetConfig+0x1b2>
 8009c98:	2b30      	cmp	r3, #48	; 0x30
 8009c9a:	d818      	bhi.n	8009cce <UART_SetConfig+0x1ba>
 8009c9c:	2b20      	cmp	r3, #32
 8009c9e:	d00a      	beq.n	8009cb6 <UART_SetConfig+0x1a2>
 8009ca0:	2b20      	cmp	r3, #32
 8009ca2:	d814      	bhi.n	8009cce <UART_SetConfig+0x1ba>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <UART_SetConfig+0x19a>
 8009ca8:	2b10      	cmp	r3, #16
 8009caa:	d008      	beq.n	8009cbe <UART_SetConfig+0x1aa>
 8009cac:	e00f      	b.n	8009cce <UART_SetConfig+0x1ba>
 8009cae:	2300      	movs	r3, #0
 8009cb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cb4:	e06d      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009cb6:	2302      	movs	r3, #2
 8009cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cbc:	e069      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009cbe:	2304      	movs	r3, #4
 8009cc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cc4:	e065      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009cc6:	2308      	movs	r3, #8
 8009cc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ccc:	e061      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009cce:	2310      	movs	r3, #16
 8009cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009cd4:	e05d      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	4a4b      	ldr	r2, [pc, #300]	; (8009e08 <UART_SetConfig+0x2f4>)
 8009cdc:	4293      	cmp	r3, r2
 8009cde:	d125      	bne.n	8009d2c <UART_SetConfig+0x218>
 8009ce0:	4b46      	ldr	r3, [pc, #280]	; (8009dfc <UART_SetConfig+0x2e8>)
 8009ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ce6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009cea:	2bc0      	cmp	r3, #192	; 0xc0
 8009cec:	d016      	beq.n	8009d1c <UART_SetConfig+0x208>
 8009cee:	2bc0      	cmp	r3, #192	; 0xc0
 8009cf0:	d818      	bhi.n	8009d24 <UART_SetConfig+0x210>
 8009cf2:	2b80      	cmp	r3, #128	; 0x80
 8009cf4:	d00a      	beq.n	8009d0c <UART_SetConfig+0x1f8>
 8009cf6:	2b80      	cmp	r3, #128	; 0x80
 8009cf8:	d814      	bhi.n	8009d24 <UART_SetConfig+0x210>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d002      	beq.n	8009d04 <UART_SetConfig+0x1f0>
 8009cfe:	2b40      	cmp	r3, #64	; 0x40
 8009d00:	d008      	beq.n	8009d14 <UART_SetConfig+0x200>
 8009d02:	e00f      	b.n	8009d24 <UART_SetConfig+0x210>
 8009d04:	2300      	movs	r3, #0
 8009d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d0a:	e042      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d0c:	2302      	movs	r3, #2
 8009d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d12:	e03e      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d14:	2304      	movs	r3, #4
 8009d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d1a:	e03a      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d1c:	2308      	movs	r3, #8
 8009d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d22:	e036      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d24:	2310      	movs	r3, #16
 8009d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d2a:	e032      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	4a30      	ldr	r2, [pc, #192]	; (8009df4 <UART_SetConfig+0x2e0>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d12a      	bne.n	8009d8c <UART_SetConfig+0x278>
 8009d36:	4b31      	ldr	r3, [pc, #196]	; (8009dfc <UART_SetConfig+0x2e8>)
 8009d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d44:	d01a      	beq.n	8009d7c <UART_SetConfig+0x268>
 8009d46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d4a:	d81b      	bhi.n	8009d84 <UART_SetConfig+0x270>
 8009d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d50:	d00c      	beq.n	8009d6c <UART_SetConfig+0x258>
 8009d52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d56:	d815      	bhi.n	8009d84 <UART_SetConfig+0x270>
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <UART_SetConfig+0x250>
 8009d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d60:	d008      	beq.n	8009d74 <UART_SetConfig+0x260>
 8009d62:	e00f      	b.n	8009d84 <UART_SetConfig+0x270>
 8009d64:	2300      	movs	r3, #0
 8009d66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d6a:	e012      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d6c:	2302      	movs	r3, #2
 8009d6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d72:	e00e      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d74:	2304      	movs	r3, #4
 8009d76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d7a:	e00a      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d7c:	2308      	movs	r3, #8
 8009d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d82:	e006      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d84:	2310      	movs	r3, #16
 8009d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009d8a:	e002      	b.n	8009d92 <UART_SetConfig+0x27e>
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a17      	ldr	r2, [pc, #92]	; (8009df4 <UART_SetConfig+0x2e0>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	f040 80a8 	bne.w	8009eee <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009da2:	2b08      	cmp	r3, #8
 8009da4:	d834      	bhi.n	8009e10 <UART_SetConfig+0x2fc>
 8009da6:	a201      	add	r2, pc, #4	; (adr r2, 8009dac <UART_SetConfig+0x298>)
 8009da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dac:	08009dd1 	.word	0x08009dd1
 8009db0:	08009e11 	.word	0x08009e11
 8009db4:	08009dd9 	.word	0x08009dd9
 8009db8:	08009e11 	.word	0x08009e11
 8009dbc:	08009ddf 	.word	0x08009ddf
 8009dc0:	08009e11 	.word	0x08009e11
 8009dc4:	08009e11 	.word	0x08009e11
 8009dc8:	08009e11 	.word	0x08009e11
 8009dcc:	08009de7 	.word	0x08009de7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dd0:	f7fd fafa 	bl	80073c8 <HAL_RCC_GetPCLK1Freq>
 8009dd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009dd6:	e021      	b.n	8009e1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dd8:	4b0c      	ldr	r3, [pc, #48]	; (8009e0c <UART_SetConfig+0x2f8>)
 8009dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009ddc:	e01e      	b.n	8009e1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dde:	f7fd fa85 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 8009de2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009de4:	e01a      	b.n	8009e1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009dec:	e016      	b.n	8009e1c <UART_SetConfig+0x308>
 8009dee:	bf00      	nop
 8009df0:	cfff69f3 	.word	0xcfff69f3
 8009df4:	40008000 	.word	0x40008000
 8009df8:	40013800 	.word	0x40013800
 8009dfc:	40021000 	.word	0x40021000
 8009e00:	40004400 	.word	0x40004400
 8009e04:	40004800 	.word	0x40004800
 8009e08:	40004c00 	.word	0x40004c00
 8009e0c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009e14:	2301      	movs	r3, #1
 8009e16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009e1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 812a 	beq.w	800a078 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e28:	4a9e      	ldr	r2, [pc, #632]	; (800a0a4 <UART_SetConfig+0x590>)
 8009e2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e2e:	461a      	mov	r2, r3
 8009e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e32:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e36:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	685a      	ldr	r2, [r3, #4]
 8009e3c:	4613      	mov	r3, r2
 8009e3e:	005b      	lsls	r3, r3, #1
 8009e40:	4413      	add	r3, r2
 8009e42:	69ba      	ldr	r2, [r7, #24]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d305      	bcc.n	8009e54 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e4e:	69ba      	ldr	r2, [r7, #24]
 8009e50:	429a      	cmp	r2, r3
 8009e52:	d903      	bls.n	8009e5c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009e54:	2301      	movs	r3, #1
 8009e56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e5a:	e10d      	b.n	800a078 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5e:	2200      	movs	r2, #0
 8009e60:	60bb      	str	r3, [r7, #8]
 8009e62:	60fa      	str	r2, [r7, #12]
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e68:	4a8e      	ldr	r2, [pc, #568]	; (800a0a4 <UART_SetConfig+0x590>)
 8009e6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	2200      	movs	r2, #0
 8009e72:	603b      	str	r3, [r7, #0]
 8009e74:	607a      	str	r2, [r7, #4]
 8009e76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009e7e:	f7f6 ff2b 	bl	8000cd8 <__aeabi_uldivmod>
 8009e82:	4602      	mov	r2, r0
 8009e84:	460b      	mov	r3, r1
 8009e86:	4610      	mov	r0, r2
 8009e88:	4619      	mov	r1, r3
 8009e8a:	f04f 0200 	mov.w	r2, #0
 8009e8e:	f04f 0300 	mov.w	r3, #0
 8009e92:	020b      	lsls	r3, r1, #8
 8009e94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e98:	0202      	lsls	r2, r0, #8
 8009e9a:	6979      	ldr	r1, [r7, #20]
 8009e9c:	6849      	ldr	r1, [r1, #4]
 8009e9e:	0849      	lsrs	r1, r1, #1
 8009ea0:	2000      	movs	r0, #0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	eb12 0804 	adds.w	r8, r2, r4
 8009eaa:	eb43 0905 	adc.w	r9, r3, r5
 8009eae:	697b      	ldr	r3, [r7, #20]
 8009eb0:	685b      	ldr	r3, [r3, #4]
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	469a      	mov	sl, r3
 8009eb6:	4693      	mov	fp, r2
 8009eb8:	4652      	mov	r2, sl
 8009eba:	465b      	mov	r3, fp
 8009ebc:	4640      	mov	r0, r8
 8009ebe:	4649      	mov	r1, r9
 8009ec0:	f7f6 ff0a 	bl	8000cd8 <__aeabi_uldivmod>
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	4613      	mov	r3, r2
 8009eca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ed2:	d308      	bcc.n	8009ee6 <UART_SetConfig+0x3d2>
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009eda:	d204      	bcs.n	8009ee6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	6a3a      	ldr	r2, [r7, #32]
 8009ee2:	60da      	str	r2, [r3, #12]
 8009ee4:	e0c8      	b.n	800a078 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009ee6:	2301      	movs	r3, #1
 8009ee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009eec:	e0c4      	b.n	800a078 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	69db      	ldr	r3, [r3, #28]
 8009ef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ef6:	d167      	bne.n	8009fc8 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009ef8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009efc:	2b08      	cmp	r3, #8
 8009efe:	d828      	bhi.n	8009f52 <UART_SetConfig+0x43e>
 8009f00:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <UART_SetConfig+0x3f4>)
 8009f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f06:	bf00      	nop
 8009f08:	08009f2d 	.word	0x08009f2d
 8009f0c:	08009f35 	.word	0x08009f35
 8009f10:	08009f3d 	.word	0x08009f3d
 8009f14:	08009f53 	.word	0x08009f53
 8009f18:	08009f43 	.word	0x08009f43
 8009f1c:	08009f53 	.word	0x08009f53
 8009f20:	08009f53 	.word	0x08009f53
 8009f24:	08009f53 	.word	0x08009f53
 8009f28:	08009f4b 	.word	0x08009f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f2c:	f7fd fa4c 	bl	80073c8 <HAL_RCC_GetPCLK1Freq>
 8009f30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f32:	e014      	b.n	8009f5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f34:	f7fd fa5e 	bl	80073f4 <HAL_RCC_GetPCLK2Freq>
 8009f38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f3a:	e010      	b.n	8009f5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f3c:	4b5a      	ldr	r3, [pc, #360]	; (800a0a8 <UART_SetConfig+0x594>)
 8009f3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f40:	e00d      	b.n	8009f5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f42:	f7fd f9d3 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 8009f46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f48:	e009      	b.n	8009f5e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f50:	e005      	b.n	8009f5e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009f52:	2300      	movs	r3, #0
 8009f54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009f56:	2301      	movs	r3, #1
 8009f58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009f5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 8089 	beq.w	800a078 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f6a:	4a4e      	ldr	r2, [pc, #312]	; (800a0a4 <UART_SetConfig+0x590>)
 8009f6c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009f70:	461a      	mov	r2, r3
 8009f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f74:	fbb3 f3f2 	udiv	r3, r3, r2
 8009f78:	005a      	lsls	r2, r3, #1
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	085b      	lsrs	r3, r3, #1
 8009f80:	441a      	add	r2, r3
 8009f82:	697b      	ldr	r3, [r7, #20]
 8009f84:	685b      	ldr	r3, [r3, #4]
 8009f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	2b0f      	cmp	r3, #15
 8009f90:	d916      	bls.n	8009fc0 <UART_SetConfig+0x4ac>
 8009f92:	6a3b      	ldr	r3, [r7, #32]
 8009f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f98:	d212      	bcs.n	8009fc0 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f9a:	6a3b      	ldr	r3, [r7, #32]
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	f023 030f 	bic.w	r3, r3, #15
 8009fa2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009fa4:	6a3b      	ldr	r3, [r7, #32]
 8009fa6:	085b      	lsrs	r3, r3, #1
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	f003 0307 	and.w	r3, r3, #7
 8009fae:	b29a      	uxth	r2, r3
 8009fb0:	8bfb      	ldrh	r3, [r7, #30]
 8009fb2:	4313      	orrs	r3, r2
 8009fb4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	8bfa      	ldrh	r2, [r7, #30]
 8009fbc:	60da      	str	r2, [r3, #12]
 8009fbe:	e05b      	b.n	800a078 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009fc6:	e057      	b.n	800a078 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009fc8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009fcc:	2b08      	cmp	r3, #8
 8009fce:	d828      	bhi.n	800a022 <UART_SetConfig+0x50e>
 8009fd0:	a201      	add	r2, pc, #4	; (adr r2, 8009fd8 <UART_SetConfig+0x4c4>)
 8009fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd6:	bf00      	nop
 8009fd8:	08009ffd 	.word	0x08009ffd
 8009fdc:	0800a005 	.word	0x0800a005
 8009fe0:	0800a00d 	.word	0x0800a00d
 8009fe4:	0800a023 	.word	0x0800a023
 8009fe8:	0800a013 	.word	0x0800a013
 8009fec:	0800a023 	.word	0x0800a023
 8009ff0:	0800a023 	.word	0x0800a023
 8009ff4:	0800a023 	.word	0x0800a023
 8009ff8:	0800a01b 	.word	0x0800a01b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ffc:	f7fd f9e4 	bl	80073c8 <HAL_RCC_GetPCLK1Freq>
 800a000:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a002:	e014      	b.n	800a02e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a004:	f7fd f9f6 	bl	80073f4 <HAL_RCC_GetPCLK2Freq>
 800a008:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a00a:	e010      	b.n	800a02e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a00c:	4b26      	ldr	r3, [pc, #152]	; (800a0a8 <UART_SetConfig+0x594>)
 800a00e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a010:	e00d      	b.n	800a02e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a012:	f7fd f96b 	bl	80072ec <HAL_RCC_GetSysClockFreq>
 800a016:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a018:	e009      	b.n	800a02e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a01a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a01e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a020:	e005      	b.n	800a02e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800a022:	2300      	movs	r3, #0
 800a024:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a026:	2301      	movs	r3, #1
 800a028:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a02c:	bf00      	nop
    }

    if (pclk != 0U)
 800a02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a030:	2b00      	cmp	r3, #0
 800a032:	d021      	beq.n	800a078 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a034:	697b      	ldr	r3, [r7, #20]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	4a1a      	ldr	r2, [pc, #104]	; (800a0a4 <UART_SetConfig+0x590>)
 800a03a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a03e:	461a      	mov	r2, r3
 800a040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a042:	fbb3 f2f2 	udiv	r2, r3, r2
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	085b      	lsrs	r3, r3, #1
 800a04c:	441a      	add	r2, r3
 800a04e:	697b      	ldr	r3, [r7, #20]
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	fbb2 f3f3 	udiv	r3, r2, r3
 800a056:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a058:	6a3b      	ldr	r3, [r7, #32]
 800a05a:	2b0f      	cmp	r3, #15
 800a05c:	d909      	bls.n	800a072 <UART_SetConfig+0x55e>
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a064:	d205      	bcs.n	800a072 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	b29a      	uxth	r2, r3
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	60da      	str	r2, [r3, #12]
 800a070:	e002      	b.n	800a078 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800a072:	2301      	movs	r3, #1
 800a074:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	2201      	movs	r2, #1
 800a084:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	2200      	movs	r2, #0
 800a08c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	2200      	movs	r2, #0
 800a092:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a094:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3730      	adds	r7, #48	; 0x30
 800a09c:	46bd      	mov	sp, r7
 800a09e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a0a2:	bf00      	nop
 800a0a4:	0800fdb8 	.word	0x0800fdb8
 800a0a8:	00f42400 	.word	0x00f42400

0800a0ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	f003 0301 	and.w	r3, r3, #1
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d00a      	beq.n	800a0d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	430a      	orrs	r2, r1
 800a0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0da:	f003 0302 	and.w	r3, r3, #2
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d00a      	beq.n	800a0f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fc:	f003 0304 	and.w	r3, r3, #4
 800a100:	2b00      	cmp	r3, #0
 800a102:	d00a      	beq.n	800a11a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	430a      	orrs	r2, r1
 800a118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a11e:	f003 0308 	and.w	r3, r3, #8
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00a      	beq.n	800a13c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	430a      	orrs	r2, r1
 800a13a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a140:	f003 0310 	and.w	r3, r3, #16
 800a144:	2b00      	cmp	r3, #0
 800a146:	d00a      	beq.n	800a15e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	430a      	orrs	r2, r1
 800a15c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a162:	f003 0320 	and.w	r3, r3, #32
 800a166:	2b00      	cmp	r3, #0
 800a168:	d00a      	beq.n	800a180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	430a      	orrs	r2, r1
 800a17e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d01a      	beq.n	800a1c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	430a      	orrs	r2, r1
 800a1a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a1aa:	d10a      	bne.n	800a1c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	430a      	orrs	r2, r1
 800a1c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00a      	beq.n	800a1e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	430a      	orrs	r2, r1
 800a1e2:	605a      	str	r2, [r3, #4]
  }
}
 800a1e4:	bf00      	nop
 800a1e6:	370c      	adds	r7, #12
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b086      	sub	sp, #24
 800a1f4:	af02      	add	r7, sp, #8
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a200:	f7f9 fb6e 	bl	80038e0 <HAL_GetTick>
 800a204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	f003 0308 	and.w	r3, r3, #8
 800a210:	2b08      	cmp	r3, #8
 800a212:	d10e      	bne.n	800a232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 f82f 	bl	800a286 <UART_WaitOnFlagUntilTimeout>
 800a228:	4603      	mov	r3, r0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d001      	beq.n	800a232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e025      	b.n	800a27e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b04      	cmp	r3, #4
 800a23e:	d10e      	bne.n	800a25e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2200      	movs	r2, #0
 800a24a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 f819 	bl	800a286 <UART_WaitOnFlagUntilTimeout>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e00f      	b.n	800a27e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2220      	movs	r2, #32
 800a262:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	2220      	movs	r2, #32
 800a26a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2200      	movs	r2, #0
 800a278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	3710      	adds	r7, #16
 800a282:	46bd      	mov	sp, r7
 800a284:	bd80      	pop	{r7, pc}

0800a286 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a286:	b580      	push	{r7, lr}
 800a288:	b09c      	sub	sp, #112	; 0x70
 800a28a:	af00      	add	r7, sp, #0
 800a28c:	60f8      	str	r0, [r7, #12]
 800a28e:	60b9      	str	r1, [r7, #8]
 800a290:	603b      	str	r3, [r7, #0]
 800a292:	4613      	mov	r3, r2
 800a294:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a296:	e0a9      	b.n	800a3ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a298:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a29a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a29e:	f000 80a5 	beq.w	800a3ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2a2:	f7f9 fb1d 	bl	80038e0 <HAL_GetTick>
 800a2a6:	4602      	mov	r2, r0
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	1ad3      	subs	r3, r2, r3
 800a2ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a2ae:	429a      	cmp	r2, r3
 800a2b0:	d302      	bcc.n	800a2b8 <UART_WaitOnFlagUntilTimeout+0x32>
 800a2b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d140      	bne.n	800a33a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2c0:	e853 3f00 	ldrex	r3, [r3]
 800a2c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a2c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2cc:	667b      	str	r3, [r7, #100]	; 0x64
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	461a      	mov	r2, r3
 800a2d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a2d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a2d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a2dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a2de:	e841 2300 	strex	r3, r2, [r1]
 800a2e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a2e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d1e6      	bne.n	800a2b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	3308      	adds	r3, #8
 800a2f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2f4:	e853 3f00 	ldrex	r3, [r3]
 800a2f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2fc:	f023 0301 	bic.w	r3, r3, #1
 800a300:	663b      	str	r3, [r7, #96]	; 0x60
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3308      	adds	r3, #8
 800a308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a30a:	64ba      	str	r2, [r7, #72]	; 0x48
 800a30c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a312:	e841 2300 	strex	r3, r2, [r1]
 800a316:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a318:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d1e5      	bne.n	800a2ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	2220      	movs	r2, #32
 800a322:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	2220      	movs	r2, #32
 800a32a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e069      	b.n	800a40e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b00      	cmp	r3, #0
 800a346:	d051      	beq.n	800a3ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	69db      	ldr	r3, [r3, #28]
 800a34e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a352:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a356:	d149      	bne.n	800a3ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a360:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a36a:	e853 3f00 	ldrex	r3, [r3]
 800a36e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a376:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	461a      	mov	r2, r3
 800a37e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a380:	637b      	str	r3, [r7, #52]	; 0x34
 800a382:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a384:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a386:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a388:	e841 2300 	strex	r3, r2, [r1]
 800a38c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e6      	bne.n	800a362 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3308      	adds	r3, #8
 800a39a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	697b      	ldr	r3, [r7, #20]
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	613b      	str	r3, [r7, #16]
   return(result);
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f023 0301 	bic.w	r3, r3, #1
 800a3aa:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3308      	adds	r3, #8
 800a3b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a3b4:	623a      	str	r2, [r7, #32]
 800a3b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	69f9      	ldr	r1, [r7, #28]
 800a3ba:	6a3a      	ldr	r2, [r7, #32]
 800a3bc:	e841 2300 	strex	r3, r2, [r1]
 800a3c0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3c2:	69bb      	ldr	r3, [r7, #24]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e5      	bne.n	800a394 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	2220      	movs	r2, #32
 800a3cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2220      	movs	r2, #32
 800a3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2220      	movs	r2, #32
 800a3dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e010      	b.n	800a40e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	69da      	ldr	r2, [r3, #28]
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	4013      	ands	r3, r2
 800a3f6:	68ba      	ldr	r2, [r7, #8]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	bf0c      	ite	eq
 800a3fc:	2301      	moveq	r3, #1
 800a3fe:	2300      	movne	r3, #0
 800a400:	b2db      	uxtb	r3, r3
 800a402:	461a      	mov	r2, r3
 800a404:	79fb      	ldrb	r3, [r7, #7]
 800a406:	429a      	cmp	r2, r3
 800a408:	f43f af46 	beq.w	800a298 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a40c:	2300      	movs	r3, #0
}
 800a40e:	4618      	mov	r0, r3
 800a410:	3770      	adds	r7, #112	; 0x70
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}

0800a416 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a416:	b480      	push	{r7}
 800a418:	b095      	sub	sp, #84	; 0x54
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a426:	e853 3f00 	ldrex	r3, [r3]
 800a42a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a432:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	461a      	mov	r2, r3
 800a43a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a43c:	643b      	str	r3, [r7, #64]	; 0x40
 800a43e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a440:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a442:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a444:	e841 2300 	strex	r3, r2, [r1]
 800a448:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a44a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1e6      	bne.n	800a41e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	3308      	adds	r3, #8
 800a456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a458:	6a3b      	ldr	r3, [r7, #32]
 800a45a:	e853 3f00 	ldrex	r3, [r3]
 800a45e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a466:	f023 0301 	bic.w	r3, r3, #1
 800a46a:	64bb      	str	r3, [r7, #72]	; 0x48
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	3308      	adds	r3, #8
 800a472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a474:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a476:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a47a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a47c:	e841 2300 	strex	r3, r2, [r1]
 800a480:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a484:	2b00      	cmp	r3, #0
 800a486:	d1e3      	bne.n	800a450 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d118      	bne.n	800a4c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	e853 3f00 	ldrex	r3, [r3]
 800a49c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	f023 0310 	bic.w	r3, r3, #16
 800a4a4:	647b      	str	r3, [r7, #68]	; 0x44
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4ae:	61bb      	str	r3, [r7, #24]
 800a4b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b2:	6979      	ldr	r1, [r7, #20]
 800a4b4:	69ba      	ldr	r2, [r7, #24]
 800a4b6:	e841 2300 	strex	r3, r2, [r1]
 800a4ba:	613b      	str	r3, [r7, #16]
   return(result);
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d1e6      	bne.n	800a490 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2220      	movs	r2, #32
 800a4c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2200      	movs	r2, #0
 800a4d4:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a4d6:	bf00      	nop
 800a4d8:	3754      	adds	r7, #84	; 0x54
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr

0800a4e2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a4e2:	b580      	push	{r7, lr}
 800a4e4:	b084      	sub	sp, #16
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f7ff faf1 	bl	8009ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a506:	bf00      	nop
 800a508:	3710      	adds	r7, #16
 800a50a:	46bd      	mov	sp, r7
 800a50c:	bd80      	pop	{r7, pc}

0800a50e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a50e:	b480      	push	{r7}
 800a510:	b08f      	sub	sp, #60	; 0x3c
 800a512:	af00      	add	r7, sp, #0
 800a514:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a51c:	2b21      	cmp	r3, #33	; 0x21
 800a51e:	d14c      	bne.n	800a5ba <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a526:	b29b      	uxth	r3, r3
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d132      	bne.n	800a592 <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a532:	6a3b      	ldr	r3, [r7, #32]
 800a534:	e853 3f00 	ldrex	r3, [r3]
 800a538:	61fb      	str	r3, [r7, #28]
   return(result);
 800a53a:	69fb      	ldr	r3, [r7, #28]
 800a53c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a540:	637b      	str	r3, [r7, #52]	; 0x34
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	461a      	mov	r2, r3
 800a548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a54c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a54e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a550:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a552:	e841 2300 	strex	r3, r2, [r1]
 800a556:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d1e6      	bne.n	800a52c <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	e853 3f00 	ldrex	r3, [r3]
 800a56a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a56c:	68bb      	ldr	r3, [r7, #8]
 800a56e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a572:	633b      	str	r3, [r7, #48]	; 0x30
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	461a      	mov	r2, r3
 800a57a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a57c:	61bb      	str	r3, [r7, #24]
 800a57e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a580:	6979      	ldr	r1, [r7, #20]
 800a582:	69ba      	ldr	r2, [r7, #24]
 800a584:	e841 2300 	strex	r3, r2, [r1]
 800a588:	613b      	str	r3, [r7, #16]
   return(result);
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d1e6      	bne.n	800a55e <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a590:	e013      	b.n	800a5ba <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a596:	781a      	ldrb	r2, [r3, #0]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5a2:	1c5a      	adds	r2, r3, #1
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	3b01      	subs	r3, #1
 800a5b2:	b29a      	uxth	r2, r3
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a5ba:	bf00      	nop
 800a5bc:	373c      	adds	r7, #60	; 0x3c
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c4:	4770      	bx	lr

0800a5c6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a5c6:	b480      	push	{r7}
 800a5c8:	b091      	sub	sp, #68	; 0x44
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5d4:	2b21      	cmp	r3, #33	; 0x21
 800a5d6:	d151      	bne.n	800a67c <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a5de:	b29b      	uxth	r3, r3
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d132      	bne.n	800a64a <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	e853 3f00 	ldrex	r3, [r3]
 800a5f0:	623b      	str	r3, [r7, #32]
   return(result);
 800a5f2:	6a3b      	ldr	r3, [r7, #32]
 800a5f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a602:	633b      	str	r3, [r7, #48]	; 0x30
 800a604:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a606:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a608:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a60a:	e841 2300 	strex	r3, r2, [r1]
 800a60e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1e6      	bne.n	800a5e4 <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61c:	693b      	ldr	r3, [r7, #16]
 800a61e:	e853 3f00 	ldrex	r3, [r3]
 800a622:	60fb      	str	r3, [r7, #12]
   return(result);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a62a:	637b      	str	r3, [r7, #52]	; 0x34
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	461a      	mov	r2, r3
 800a632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a634:	61fb      	str	r3, [r7, #28]
 800a636:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a638:	69b9      	ldr	r1, [r7, #24]
 800a63a:	69fa      	ldr	r2, [r7, #28]
 800a63c:	e841 2300 	strex	r3, r2, [r1]
 800a640:	617b      	str	r3, [r7, #20]
   return(result);
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d1e6      	bne.n	800a616 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a648:	e018      	b.n	800a67c <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a64e:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a652:	881b      	ldrh	r3, [r3, #0]
 800a654:	461a      	mov	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a65e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a664:	1c9a      	adds	r2, r3, #2
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a670:	b29b      	uxth	r3, r3
 800a672:	3b01      	subs	r3, #1
 800a674:	b29a      	uxth	r2, r3
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a67c:	bf00      	nop
 800a67e:	3744      	adds	r7, #68	; 0x44
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a688:	b480      	push	{r7}
 800a68a:	b091      	sub	sp, #68	; 0x44
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a696:	2b21      	cmp	r3, #33	; 0x21
 800a698:	d160      	bne.n	800a75c <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a6a0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a6a2:	e057      	b.n	800a754 <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d133      	bne.n	800a718 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	3308      	adds	r3, #8
 800a6b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ba:	e853 3f00 	ldrex	r3, [r3]
 800a6be:	623b      	str	r3, [r7, #32]
   return(result);
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a6c6:	63bb      	str	r3, [r7, #56]	; 0x38
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	3308      	adds	r3, #8
 800a6ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a6d0:	633a      	str	r2, [r7, #48]	; 0x30
 800a6d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a6d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a6de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e5      	bne.n	800a6b0 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6ea:	693b      	ldr	r3, [r7, #16]
 800a6ec:	e853 3f00 	ldrex	r3, [r3]
 800a6f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a6f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	461a      	mov	r2, r3
 800a700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a702:	61fb      	str	r3, [r7, #28]
 800a704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a706:	69b9      	ldr	r1, [r7, #24]
 800a708:	69fa      	ldr	r2, [r7, #28]
 800a70a:	e841 2300 	strex	r3, r2, [r1]
 800a70e:	617b      	str	r3, [r7, #20]
   return(result);
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d1e6      	bne.n	800a6e4 <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a716:	e021      	b.n	800a75c <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	69db      	ldr	r3, [r3, #28]
 800a71e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a722:	2b00      	cmp	r3, #0
 800a724:	d013      	beq.n	800a74e <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a72a:	781a      	ldrb	r2, [r3, #0]
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a736:	1c5a      	adds	r2, r3, #1
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a742:	b29b      	uxth	r3, r3
 800a744:	3b01      	subs	r3, #1
 800a746:	b29a      	uxth	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a74e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a750:	3b01      	subs	r3, #1
 800a752:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a754:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1a4      	bne.n	800a6a4 <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a75a:	e7ff      	b.n	800a75c <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a75c:	bf00      	nop
 800a75e:	3744      	adds	r7, #68	; 0x44
 800a760:	46bd      	mov	sp, r7
 800a762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a766:	4770      	bx	lr

0800a768 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a768:	b480      	push	{r7}
 800a76a:	b091      	sub	sp, #68	; 0x44
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a776:	2b21      	cmp	r3, #33	; 0x21
 800a778:	d165      	bne.n	800a846 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a780:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a782:	e05c      	b.n	800a83e <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d133      	bne.n	800a7f8 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	3308      	adds	r3, #8
 800a796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a798:	6a3b      	ldr	r3, [r7, #32]
 800a79a:	e853 3f00 	ldrex	r3, [r3]
 800a79e:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7a0:	69fb      	ldr	r3, [r7, #28]
 800a7a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a7a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a7b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a7b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a7b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a7b8:	e841 2300 	strex	r3, r2, [r1]
 800a7bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d1e5      	bne.n	800a790 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	e853 3f00 	ldrex	r3, [r3]
 800a7d0:	60bb      	str	r3, [r7, #8]
   return(result);
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d8:	633b      	str	r3, [r7, #48]	; 0x30
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	461a      	mov	r2, r3
 800a7e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7e2:	61bb      	str	r3, [r7, #24]
 800a7e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7e6:	6979      	ldr	r1, [r7, #20]
 800a7e8:	69ba      	ldr	r2, [r7, #24]
 800a7ea:	e841 2300 	strex	r3, r2, [r1]
 800a7ee:	613b      	str	r3, [r7, #16]
   return(result);
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d1e6      	bne.n	800a7c4 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a7f6:	e026      	b.n	800a846 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	69db      	ldr	r3, [r3, #28]
 800a7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a802:	2b00      	cmp	r3, #0
 800a804:	d018      	beq.n	800a838 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a80a:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a80c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a80e:	881b      	ldrh	r3, [r3, #0]
 800a810:	461a      	mov	r2, r3
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a81a:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a820:	1c9a      	adds	r2, r3, #2
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a82c:	b29b      	uxth	r3, r3
 800a82e:	3b01      	subs	r3, #1
 800a830:	b29a      	uxth	r2, r3
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a838:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a83a:	3b01      	subs	r3, #1
 800a83c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a83e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a840:	2b00      	cmp	r3, #0
 800a842:	d19f      	bne.n	800a784 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a844:	e7ff      	b.n	800a846 <UART_TxISR_16BIT_FIFOEN+0xde>
 800a846:	bf00      	nop
 800a848:	3744      	adds	r7, #68	; 0x44
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr

0800a852 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a852:	b580      	push	{r7, lr}
 800a854:	b088      	sub	sp, #32
 800a856:	af00      	add	r7, sp, #0
 800a858:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	e853 3f00 	ldrex	r3, [r3]
 800a866:	60bb      	str	r3, [r7, #8]
   return(result);
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a86e:	61fb      	str	r3, [r7, #28]
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	461a      	mov	r2, r3
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	61bb      	str	r3, [r7, #24]
 800a87a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87c:	6979      	ldr	r1, [r7, #20]
 800a87e:	69ba      	ldr	r2, [r7, #24]
 800a880:	e841 2300 	strex	r3, r2, [r1]
 800a884:	613b      	str	r3, [r7, #16]
   return(result);
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1e6      	bne.n	800a85a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2220      	movs	r2, #32
 800a890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f7f6 fb9a 	bl	8000fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a8a0:	bf00      	nop
 800a8a2:	3720      	adds	r7, #32
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}

0800a8a8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b083      	sub	sp, #12
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a8f2:	2b01      	cmp	r3, #1
 800a8f4:	d101      	bne.n	800a8fa <HAL_UARTEx_DisableFifoMode+0x16>
 800a8f6:	2302      	movs	r3, #2
 800a8f8:	e027      	b.n	800a94a <HAL_UARTEx_DisableFifoMode+0x66>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2201      	movs	r2, #1
 800a8fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2224      	movs	r2, #36	; 0x24
 800a906:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f022 0201 	bic.w	r2, r2, #1
 800a920:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a928:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	2220      	movs	r2, #32
 800a93c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr

0800a956 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a956:	b580      	push	{r7, lr}
 800a958:	b084      	sub	sp, #16
 800a95a:	af00      	add	r7, sp, #0
 800a95c:	6078      	str	r0, [r7, #4]
 800a95e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a966:	2b01      	cmp	r3, #1
 800a968:	d101      	bne.n	800a96e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a96a:	2302      	movs	r3, #2
 800a96c:	e02d      	b.n	800a9ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2224      	movs	r2, #36	; 0x24
 800a97a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	681a      	ldr	r2, [r3, #0]
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f022 0201 	bic.w	r2, r2, #1
 800a994:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	683a      	ldr	r2, [r7, #0]
 800a9a6:	430a      	orrs	r2, r1
 800a9a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f850 	bl	800aa50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2220      	movs	r2, #32
 800a9bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	2200      	movs	r2, #0
 800a9c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3710      	adds	r7, #16
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}

0800a9d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a9d2:	b580      	push	{r7, lr}
 800a9d4:	b084      	sub	sp, #16
 800a9d6:	af00      	add	r7, sp, #0
 800a9d8:	6078      	str	r0, [r7, #4]
 800a9da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a9e2:	2b01      	cmp	r3, #1
 800a9e4:	d101      	bne.n	800a9ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a9e6:	2302      	movs	r3, #2
 800a9e8:	e02d      	b.n	800aa46 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2201      	movs	r2, #1
 800a9ee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2224      	movs	r2, #36	; 0x24
 800a9f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f022 0201 	bic.w	r2, r2, #1
 800aa10:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	689b      	ldr	r3, [r3, #8]
 800aa18:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	683a      	ldr	r2, [r7, #0]
 800aa22:	430a      	orrs	r2, r1
 800aa24:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f812 	bl	800aa50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2220      	movs	r2, #32
 800aa38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aa44:	2300      	movs	r3, #0
}
 800aa46:	4618      	mov	r0, r3
 800aa48:	3710      	adds	r7, #16
 800aa4a:	46bd      	mov	sp, r7
 800aa4c:	bd80      	pop	{r7, pc}
	...

0800aa50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800aa50:	b480      	push	{r7}
 800aa52:	b085      	sub	sp, #20
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d108      	bne.n	800aa72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2201      	movs	r2, #1
 800aa64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800aa70:	e031      	b.n	800aad6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800aa72:	2308      	movs	r3, #8
 800aa74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800aa76:	2308      	movs	r3, #8
 800aa78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	0e5b      	lsrs	r3, r3, #25
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	f003 0307 	and.w	r3, r3, #7
 800aa88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	0f5b      	lsrs	r3, r3, #29
 800aa92:	b2db      	uxtb	r3, r3
 800aa94:	f003 0307 	and.w	r3, r3, #7
 800aa98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aa9a:	7bbb      	ldrb	r3, [r7, #14]
 800aa9c:	7b3a      	ldrb	r2, [r7, #12]
 800aa9e:	4911      	ldr	r1, [pc, #68]	; (800aae4 <UARTEx_SetNbDataToProcess+0x94>)
 800aaa0:	5c8a      	ldrb	r2, [r1, r2]
 800aaa2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800aaa6:	7b3a      	ldrb	r2, [r7, #12]
 800aaa8:	490f      	ldr	r1, [pc, #60]	; (800aae8 <UARTEx_SetNbDataToProcess+0x98>)
 800aaaa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800aaac:	fb93 f3f2 	sdiv	r3, r3, r2
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	7b7a      	ldrb	r2, [r7, #13]
 800aabc:	4909      	ldr	r1, [pc, #36]	; (800aae4 <UARTEx_SetNbDataToProcess+0x94>)
 800aabe:	5c8a      	ldrb	r2, [r1, r2]
 800aac0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800aac4:	7b7a      	ldrb	r2, [r7, #13]
 800aac6:	4908      	ldr	r1, [pc, #32]	; (800aae8 <UARTEx_SetNbDataToProcess+0x98>)
 800aac8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800aaca:	fb93 f3f2 	sdiv	r3, r3, r2
 800aace:	b29a      	uxth	r2, r3
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800aad6:	bf00      	nop
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
 800aae2:	bf00      	nop
 800aae4:	0800fdd0 	.word	0x0800fdd0
 800aae8:	0800fdd8 	.word	0x0800fdd8

0800aaec <SPI4W_Write_Byte>:
		Gpio analog SPI
	I2C_Write_Byte(value, cmd):
		HAL library hardware I2C
********************************************************************************/
uint8_t SPI4W_Write_Byte(uint8_t value)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b083      	sub	sp, #12
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	4603      	mov	r3, r0
 800aaf4:	71fb      	strb	r3, [r7, #7]
        SPI_SCK_1;
        Driver_Delay_us(10);
        value = (value << 1);
    }
#else
    __HAL_SPI_ENABLE(&hspi1);
 800aaf6:	4b17      	ldr	r3, [pc, #92]	; (800ab54 <SPI4W_Write_Byte+0x68>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	4b15      	ldr	r3, [pc, #84]	; (800ab54 <SPI4W_Write_Byte+0x68>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab04:	601a      	str	r2, [r3, #0]
    SPI1->CR2 |= (1) << 12;
 800ab06:	4b14      	ldr	r3, [pc, #80]	; (800ab58 <SPI4W_Write_Byte+0x6c>)
 800ab08:	685b      	ldr	r3, [r3, #4]
 800ab0a:	4a13      	ldr	r2, [pc, #76]	; (800ab58 <SPI4W_Write_Byte+0x6c>)
 800ab0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ab10:	6053      	str	r3, [r2, #4]

    while((SPI1->SR & (1 << 1)) == 0)
 800ab12:	bf00      	nop
 800ab14:	4b10      	ldr	r3, [pc, #64]	; (800ab58 <SPI4W_Write_Byte+0x6c>)
 800ab16:	689b      	ldr	r3, [r3, #8]
 800ab18:	f003 0302 	and.w	r3, r3, #2
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d0f9      	beq.n	800ab14 <SPI4W_Write_Byte+0x28>
        ;

    *((__IO uint8_t *)(&SPI1->DR)) = value;
 800ab20:	4a0e      	ldr	r2, [pc, #56]	; (800ab5c <SPI4W_Write_Byte+0x70>)
 800ab22:	79fb      	ldrb	r3, [r7, #7]
 800ab24:	7013      	strb	r3, [r2, #0]

    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 800ab26:	bf00      	nop
 800ab28:	4b0b      	ldr	r3, [pc, #44]	; (800ab58 <SPI4W_Write_Byte+0x6c>)
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d1f9      	bne.n	800ab28 <SPI4W_Write_Byte+0x3c>

    while((SPI1->SR & (1 << 0)) == 0) ; // Wait for the receiving area to be empty
 800ab34:	bf00      	nop
 800ab36:	4b08      	ldr	r3, [pc, #32]	; (800ab58 <SPI4W_Write_Byte+0x6c>)
 800ab38:	689b      	ldr	r3, [r3, #8]
 800ab3a:	f003 0301 	and.w	r3, r3, #1
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d0f9      	beq.n	800ab36 <SPI4W_Write_Byte+0x4a>

    return *((__IO uint8_t *)(&SPI1->DR));
 800ab42:	4b06      	ldr	r3, [pc, #24]	; (800ab5c <SPI4W_Write_Byte+0x70>)
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	b2db      	uxtb	r3, r3
#endif
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	20000774 	.word	0x20000774
 800ab58:	40013000 	.word	0x40013000
 800ab5c:	4001300c 	.word	0x4001300c

0800ab60 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b082      	sub	sp, #8
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 800ab68:	6878      	ldr	r0, [r7, #4]
 800ab6a:	f7f8 fec5 	bl	80038f8 <HAL_Delay>
}
 800ab6e:	bf00      	nop
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}
	...

0800ab78 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b085      	sub	sp, #20
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	60f8      	str	r0, [r7, #12]
 800ab80:	4608      	mov	r0, r1
 800ab82:	4611      	mov	r1, r2
 800ab84:	461a      	mov	r2, r3
 800ab86:	4603      	mov	r3, r0
 800ab88:	817b      	strh	r3, [r7, #10]
 800ab8a:	460b      	mov	r3, r1
 800ab8c:	813b      	strh	r3, [r7, #8]
 800ab8e:	4613      	mov	r3, r2
 800ab90:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 800ab92:	4b23      	ldr	r3, [pc, #140]	; (800ac20 <Paint_NewImage+0xa8>)
 800ab94:	2200      	movs	r2, #0
 800ab96:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800ab98:	4a21      	ldr	r2, [pc, #132]	; (800ac20 <Paint_NewImage+0xa8>)
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 800ab9e:	4a20      	ldr	r2, [pc, #128]	; (800ac20 <Paint_NewImage+0xa8>)
 800aba0:	897b      	ldrh	r3, [r7, #10]
 800aba2:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800aba4:	4a1e      	ldr	r2, [pc, #120]	; (800ac20 <Paint_NewImage+0xa8>)
 800aba6:	893b      	ldrh	r3, [r7, #8]
 800aba8:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800abaa:	4a1d      	ldr	r2, [pc, #116]	; (800ac20 <Paint_NewImage+0xa8>)
 800abac:	8b3b      	ldrh	r3, [r7, #24]
 800abae:	8193      	strh	r3, [r2, #12]
		Paint.Scale = 2;
 800abb0:	4b1b      	ldr	r3, [pc, #108]	; (800ac20 <Paint_NewImage+0xa8>)
 800abb2:	2202      	movs	r2, #2
 800abb4:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800abb6:	897b      	ldrh	r3, [r7, #10]
 800abb8:	f003 0307 	and.w	r3, r3, #7
 800abbc:	b29b      	uxth	r3, r3
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d103      	bne.n	800abca <Paint_NewImage+0x52>
 800abc2:	897b      	ldrh	r3, [r7, #10]
 800abc4:	08db      	lsrs	r3, r3, #3
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	e004      	b.n	800abd4 <Paint_NewImage+0x5c>
 800abca:	897b      	ldrh	r3, [r7, #10]
 800abcc:	08db      	lsrs	r3, r3, #3
 800abce:	b29b      	uxth	r3, r3
 800abd0:	3301      	adds	r3, #1
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	4a12      	ldr	r2, [pc, #72]	; (800ac20 <Paint_NewImage+0xa8>)
 800abd6:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800abd8:	4a11      	ldr	r2, [pc, #68]	; (800ac20 <Paint_NewImage+0xa8>)
 800abda:	893b      	ldrh	r3, [r7, #8]
 800abdc:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800abde:	4a10      	ldr	r2, [pc, #64]	; (800ac20 <Paint_NewImage+0xa8>)
 800abe0:	88fb      	ldrh	r3, [r7, #6]
 800abe2:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800abe4:	4b0e      	ldr	r3, [pc, #56]	; (800ac20 <Paint_NewImage+0xa8>)
 800abe6:	2200      	movs	r2, #0
 800abe8:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800abea:	88fb      	ldrh	r3, [r7, #6]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <Paint_NewImage+0x7e>
 800abf0:	88fb      	ldrh	r3, [r7, #6]
 800abf2:	2bb4      	cmp	r3, #180	; 0xb4
 800abf4:	d106      	bne.n	800ac04 <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800abf6:	4a0a      	ldr	r2, [pc, #40]	; (800ac20 <Paint_NewImage+0xa8>)
 800abf8:	897b      	ldrh	r3, [r7, #10]
 800abfa:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800abfc:	4a08      	ldr	r2, [pc, #32]	; (800ac20 <Paint_NewImage+0xa8>)
 800abfe:	893b      	ldrh	r3, [r7, #8]
 800ac00:	80d3      	strh	r3, [r2, #6]
 800ac02:	e006      	b.n	800ac12 <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 800ac04:	4a06      	ldr	r2, [pc, #24]	; (800ac20 <Paint_NewImage+0xa8>)
 800ac06:	893b      	ldrh	r3, [r7, #8]
 800ac08:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800ac0a:	4a05      	ldr	r2, [pc, #20]	; (800ac20 <Paint_NewImage+0xa8>)
 800ac0c:	897b      	ldrh	r3, [r7, #10]
 800ac0e:	80d3      	strh	r3, [r2, #6]
    }
}
 800ac10:	bf00      	nop
 800ac12:	bf00      	nop
 800ac14:	3714      	adds	r7, #20
 800ac16:	46bd      	mov	sp, r7
 800ac18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1c:	4770      	bx	lr
 800ac1e:	bf00      	nop
 800ac20:	20000a38 	.word	0x20000a38

0800ac24 <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800ac2c:	4a04      	ldr	r2, [pc, #16]	; (800ac40 <Paint_SelectImage+0x1c>)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6013      	str	r3, [r2, #0]
}
 800ac32:	bf00      	nop
 800ac34:	370c      	adds	r7, #12
 800ac36:	46bd      	mov	sp, r7
 800ac38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3c:	4770      	bx	lr
 800ac3e:	bf00      	nop
 800ac40:	20000a38 	.word	0x20000a38

0800ac44 <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	4603      	mov	r3, r0
 800ac4c:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 800ac4e:	79fb      	ldrb	r3, [r7, #7]
 800ac50:	2b02      	cmp	r3, #2
 800ac52:	d118      	bne.n	800ac86 <Paint_SetScale+0x42>
        Paint.Scale = scale;
 800ac54:	79fb      	ldrb	r3, [r7, #7]
 800ac56:	b29a      	uxth	r2, r3
 800ac58:	4b33      	ldr	r3, [pc, #204]	; (800ad28 <Paint_SetScale+0xe4>)
 800ac5a:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 800ac5c:	4b32      	ldr	r3, [pc, #200]	; (800ad28 <Paint_SetScale+0xe4>)
 800ac5e:	891b      	ldrh	r3, [r3, #8]
 800ac60:	f003 0307 	and.w	r3, r3, #7
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d104      	bne.n	800ac74 <Paint_SetScale+0x30>
 800ac6a:	4b2f      	ldr	r3, [pc, #188]	; (800ad28 <Paint_SetScale+0xe4>)
 800ac6c:	891b      	ldrh	r3, [r3, #8]
 800ac6e:	08db      	lsrs	r3, r3, #3
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	e005      	b.n	800ac80 <Paint_SetScale+0x3c>
 800ac74:	4b2c      	ldr	r3, [pc, #176]	; (800ad28 <Paint_SetScale+0xe4>)
 800ac76:	891b      	ldrh	r3, [r3, #8]
 800ac78:	08db      	lsrs	r3, r3, #3
 800ac7a:	b29b      	uxth	r3, r3
 800ac7c:	3301      	adds	r3, #1
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	4a29      	ldr	r2, [pc, #164]	; (800ad28 <Paint_SetScale+0xe4>)
 800ac82:	8253      	strh	r3, [r2, #18]
        Paint.WidthByte = Paint.WidthMemory*2; 
    }else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 16 65\r\n");
    }
}
 800ac84:	e04b      	b.n	800ad1e <Paint_SetScale+0xda>
    }else if(scale == 4){
 800ac86:	79fb      	ldrb	r3, [r7, #7]
 800ac88:	2b04      	cmp	r3, #4
 800ac8a:	d118      	bne.n	800acbe <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	b29a      	uxth	r2, r3
 800ac90:	4b25      	ldr	r3, [pc, #148]	; (800ad28 <Paint_SetScale+0xe4>)
 800ac92:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 800ac94:	4b24      	ldr	r3, [pc, #144]	; (800ad28 <Paint_SetScale+0xe4>)
 800ac96:	891b      	ldrh	r3, [r3, #8]
 800ac98:	f003 0303 	and.w	r3, r3, #3
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d104      	bne.n	800acac <Paint_SetScale+0x68>
 800aca2:	4b21      	ldr	r3, [pc, #132]	; (800ad28 <Paint_SetScale+0xe4>)
 800aca4:	891b      	ldrh	r3, [r3, #8]
 800aca6:	089b      	lsrs	r3, r3, #2
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	e005      	b.n	800acb8 <Paint_SetScale+0x74>
 800acac:	4b1e      	ldr	r3, [pc, #120]	; (800ad28 <Paint_SetScale+0xe4>)
 800acae:	891b      	ldrh	r3, [r3, #8]
 800acb0:	089b      	lsrs	r3, r3, #2
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	3301      	adds	r3, #1
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	4a1b      	ldr	r2, [pc, #108]	; (800ad28 <Paint_SetScale+0xe4>)
 800acba:	8253      	strh	r3, [r2, #18]
}
 800acbc:	e02f      	b.n	800ad1e <Paint_SetScale+0xda>
    }else if(scale ==16) {
 800acbe:	79fb      	ldrb	r3, [r7, #7]
 800acc0:	2b10      	cmp	r3, #16
 800acc2:	d118      	bne.n	800acf6 <Paint_SetScale+0xb2>
        Paint.Scale = scale;
 800acc4:	79fb      	ldrb	r3, [r7, #7]
 800acc6:	b29a      	uxth	r2, r3
 800acc8:	4b17      	ldr	r3, [pc, #92]	; (800ad28 <Paint_SetScale+0xe4>)
 800acca:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory%2==0) ? (Paint.WidthMemory/2) : (Paint.WidthMemory/2+1); 
 800accc:	4b16      	ldr	r3, [pc, #88]	; (800ad28 <Paint_SetScale+0xe4>)
 800acce:	891b      	ldrh	r3, [r3, #8]
 800acd0:	f003 0301 	and.w	r3, r3, #1
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d104      	bne.n	800ace4 <Paint_SetScale+0xa0>
 800acda:	4b13      	ldr	r3, [pc, #76]	; (800ad28 <Paint_SetScale+0xe4>)
 800acdc:	891b      	ldrh	r3, [r3, #8]
 800acde:	085b      	lsrs	r3, r3, #1
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	e005      	b.n	800acf0 <Paint_SetScale+0xac>
 800ace4:	4b10      	ldr	r3, [pc, #64]	; (800ad28 <Paint_SetScale+0xe4>)
 800ace6:	891b      	ldrh	r3, [r3, #8]
 800ace8:	085b      	lsrs	r3, r3, #1
 800acea:	b29b      	uxth	r3, r3
 800acec:	3301      	adds	r3, #1
 800acee:	b29b      	uxth	r3, r3
 800acf0:	4a0d      	ldr	r2, [pc, #52]	; (800ad28 <Paint_SetScale+0xe4>)
 800acf2:	8253      	strh	r3, [r2, #18]
}
 800acf4:	e013      	b.n	800ad1e <Paint_SetScale+0xda>
    }else if(scale ==65) {
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	2b41      	cmp	r3, #65	; 0x41
 800acfa:	d10a      	bne.n	800ad12 <Paint_SetScale+0xce>
        Paint.Scale = scale;
 800acfc:	79fb      	ldrb	r3, [r7, #7]
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	4b09      	ldr	r3, [pc, #36]	; (800ad28 <Paint_SetScale+0xe4>)
 800ad02:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = Paint.WidthMemory*2; 
 800ad04:	4b08      	ldr	r3, [pc, #32]	; (800ad28 <Paint_SetScale+0xe4>)
 800ad06:	891b      	ldrh	r3, [r3, #8]
 800ad08:	005b      	lsls	r3, r3, #1
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	4b06      	ldr	r3, [pc, #24]	; (800ad28 <Paint_SetScale+0xe4>)
 800ad0e:	825a      	strh	r2, [r3, #18]
}
 800ad10:	e005      	b.n	800ad1e <Paint_SetScale+0xda>
        Debug("Set Scale Input parameter error\r\n");
 800ad12:	4806      	ldr	r0, [pc, #24]	; (800ad2c <Paint_SetScale+0xe8>)
 800ad14:	f001 fe3e 	bl	800c994 <puts>
        Debug("Scale Only support: 2 4 16 65\r\n");
 800ad18:	4805      	ldr	r0, [pc, #20]	; (800ad30 <Paint_SetScale+0xec>)
 800ad1a:	f001 fe3b 	bl	800c994 <puts>
}
 800ad1e:	bf00      	nop
 800ad20:	3708      	adds	r7, #8
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	bf00      	nop
 800ad28:	20000a38 	.word	0x20000a38
 800ad2c:	0800fa88 	.word	0x0800fa88
 800ad30:	0800fab0 	.word	0x0800fab0

0800ad34 <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08a      	sub	sp, #40	; 0x28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	4603      	mov	r3, r0
 800ad3c:	80fb      	strh	r3, [r7, #6]
 800ad3e:	460b      	mov	r3, r1
 800ad40:	80bb      	strh	r3, [r7, #4]
 800ad42:	4613      	mov	r3, r2
 800ad44:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800ad46:	4b9e      	ldr	r3, [pc, #632]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ad48:	889b      	ldrh	r3, [r3, #4]
 800ad4a:	88fa      	ldrh	r2, [r7, #6]
 800ad4c:	429a      	cmp	r2, r3
 800ad4e:	d804      	bhi.n	800ad5a <Paint_SetPixel+0x26>
 800ad50:	4b9b      	ldr	r3, [pc, #620]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ad52:	88db      	ldrh	r3, [r3, #6]
 800ad54:	88ba      	ldrh	r2, [r7, #4]
 800ad56:	429a      	cmp	r2, r3
 800ad58:	d903      	bls.n	800ad62 <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 800ad5a:	489a      	ldr	r0, [pc, #616]	; (800afc4 <Paint_SetPixel+0x290>)
 800ad5c:	f001 fe1a 	bl	800c994 <puts>
        return;
 800ad60:	e154      	b.n	800b00c <Paint_SetPixel+0x2d8>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800ad62:	4b97      	ldr	r3, [pc, #604]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ad64:	89db      	ldrh	r3, [r3, #14]
 800ad66:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ad6a:	d02b      	beq.n	800adc4 <Paint_SetPixel+0x90>
 800ad6c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ad70:	f300 8149 	bgt.w	800b006 <Paint_SetPixel+0x2d2>
 800ad74:	2bb4      	cmp	r3, #180	; 0xb4
 800ad76:	d016      	beq.n	800ada6 <Paint_SetPixel+0x72>
 800ad78:	2bb4      	cmp	r3, #180	; 0xb4
 800ad7a:	f300 8144 	bgt.w	800b006 <Paint_SetPixel+0x2d2>
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d002      	beq.n	800ad88 <Paint_SetPixel+0x54>
 800ad82:	2b5a      	cmp	r3, #90	; 0x5a
 800ad84:	d005      	beq.n	800ad92 <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800ad86:	e13e      	b.n	800b006 <Paint_SetPixel+0x2d2>
        X = Xpoint;
 800ad88:	88fb      	ldrh	r3, [r7, #6]
 800ad8a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 800ad8c:	88bb      	ldrh	r3, [r7, #4]
 800ad8e:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800ad90:	e022      	b.n	800add8 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 800ad92:	4b8b      	ldr	r3, [pc, #556]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ad94:	891a      	ldrh	r2, [r3, #8]
 800ad96:	88bb      	ldrh	r3, [r7, #4]
 800ad98:	1ad3      	subs	r3, r2, r3
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 800ada0:	88fb      	ldrh	r3, [r7, #6]
 800ada2:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800ada4:	e018      	b.n	800add8 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 800ada6:	4b86      	ldr	r3, [pc, #536]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ada8:	891a      	ldrh	r2, [r3, #8]
 800adaa:	88fb      	ldrh	r3, [r7, #6]
 800adac:	1ad3      	subs	r3, r2, r3
 800adae:	b29b      	uxth	r3, r3
 800adb0:	3b01      	subs	r3, #1
 800adb2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 800adb4:	4b82      	ldr	r3, [pc, #520]	; (800afc0 <Paint_SetPixel+0x28c>)
 800adb6:	895a      	ldrh	r2, [r3, #10]
 800adb8:	88bb      	ldrh	r3, [r7, #4]
 800adba:	1ad3      	subs	r3, r2, r3
 800adbc:	b29b      	uxth	r3, r3
 800adbe:	3b01      	subs	r3, #1
 800adc0:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800adc2:	e009      	b.n	800add8 <Paint_SetPixel+0xa4>
        X = Ypoint;
 800adc4:	88bb      	ldrh	r3, [r7, #4]
 800adc6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800adc8:	4b7d      	ldr	r3, [pc, #500]	; (800afc0 <Paint_SetPixel+0x28c>)
 800adca:	895a      	ldrh	r2, [r3, #10]
 800adcc:	88fb      	ldrh	r3, [r7, #6]
 800adce:	1ad3      	subs	r3, r2, r3
 800add0:	b29b      	uxth	r3, r3
 800add2:	3b01      	subs	r3, #1
 800add4:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800add6:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800add8:	4b79      	ldr	r3, [pc, #484]	; (800afc0 <Paint_SetPixel+0x28c>)
 800adda:	8a1b      	ldrh	r3, [r3, #16]
 800addc:	2b03      	cmp	r3, #3
 800adde:	f200 8114 	bhi.w	800b00a <Paint_SetPixel+0x2d6>
 800ade2:	a201      	add	r2, pc, #4	; (adr r2, 800ade8 <Paint_SetPixel+0xb4>)
 800ade4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ade8:	0800ae37 	.word	0x0800ae37
 800adec:	0800adf9 	.word	0x0800adf9
 800adf0:	0800ae09 	.word	0x0800ae09
 800adf4:	0800ae19 	.word	0x0800ae19
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800adf8:	4b71      	ldr	r3, [pc, #452]	; (800afc0 <Paint_SetPixel+0x28c>)
 800adfa:	891a      	ldrh	r2, [r3, #8]
 800adfc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800adfe:	1ad3      	subs	r3, r2, r3
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	3b01      	subs	r3, #1
 800ae04:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 800ae06:	e017      	b.n	800ae38 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800ae08:	4b6d      	ldr	r3, [pc, #436]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ae0a:	895a      	ldrh	r2, [r3, #10]
 800ae0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae0e:	1ad3      	subs	r3, r2, r3
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	3b01      	subs	r3, #1
 800ae14:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800ae16:	e00f      	b.n	800ae38 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800ae18:	4b69      	ldr	r3, [pc, #420]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ae1a:	891a      	ldrh	r2, [r3, #8]
 800ae1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae1e:	1ad3      	subs	r3, r2, r3
 800ae20:	b29b      	uxth	r3, r3
 800ae22:	3b01      	subs	r3, #1
 800ae24:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 800ae26:	4b66      	ldr	r3, [pc, #408]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ae28:	895a      	ldrh	r2, [r3, #10]
 800ae2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae2c:	1ad3      	subs	r3, r2, r3
 800ae2e:	b29b      	uxth	r3, r3
 800ae30:	3b01      	subs	r3, #1
 800ae32:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800ae34:	e000      	b.n	800ae38 <Paint_SetPixel+0x104>
        break;
 800ae36:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800ae38:	4b61      	ldr	r3, [pc, #388]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ae3a:	891b      	ldrh	r3, [r3, #8]
 800ae3c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d804      	bhi.n	800ae4c <Paint_SetPixel+0x118>
 800ae42:	4b5f      	ldr	r3, [pc, #380]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ae44:	895b      	ldrh	r3, [r3, #10]
 800ae46:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d903      	bls.n	800ae54 <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 800ae4c:	485d      	ldr	r0, [pc, #372]	; (800afc4 <Paint_SetPixel+0x290>)
 800ae4e:	f001 fda1 	bl	800c994 <puts>
        return;
 800ae52:	e0db      	b.n	800b00c <Paint_SetPixel+0x2d8>
    }
    
    if(Paint.Scale == 2){
 800ae54:	4b5a      	ldr	r3, [pc, #360]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ae56:	8adb      	ldrh	r3, [r3, #22]
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d139      	bne.n	800aed0 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800ae5c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae5e:	08db      	lsrs	r3, r3, #3
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	4619      	mov	r1, r3
 800ae64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae66:	4a56      	ldr	r2, [pc, #344]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ae68:	8a52      	ldrh	r2, [r2, #18]
 800ae6a:	fb02 f303 	mul.w	r3, r2, r3
 800ae6e:	440b      	add	r3, r1
 800ae70:	60fb      	str	r3, [r7, #12]
        UBYTE Rdata = Paint.Image[Addr];
 800ae72:	4b53      	ldr	r3, [pc, #332]	; (800afc0 <Paint_SetPixel+0x28c>)
 800ae74:	681a      	ldr	r2, [r3, #0]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	4413      	add	r3, r2
 800ae7a:	781b      	ldrb	r3, [r3, #0]
 800ae7c:	72fb      	strb	r3, [r7, #11]
        if(Color == BLACK)
 800ae7e:	887b      	ldrh	r3, [r7, #2]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d113      	bne.n	800aeac <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800ae84:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae86:	f003 0307 	and.w	r3, r3, #7
 800ae8a:	2280      	movs	r2, #128	; 0x80
 800ae8c:	fa42 f303 	asr.w	r3, r2, r3
 800ae90:	b25b      	sxtb	r3, r3
 800ae92:	43db      	mvns	r3, r3
 800ae94:	b25a      	sxtb	r2, r3
 800ae96:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ae9a:	4013      	ands	r3, r2
 800ae9c:	b259      	sxtb	r1, r3
 800ae9e:	4b48      	ldr	r3, [pc, #288]	; (800afc0 <Paint_SetPixel+0x28c>)
 800aea0:	681a      	ldr	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	4413      	add	r3, r2
 800aea6:	b2ca      	uxtb	r2, r1
 800aea8:	701a      	strb	r2, [r3, #0]
 800aeaa:	e0af      	b.n	800b00c <Paint_SetPixel+0x2d8>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800aeac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aeae:	f003 0307 	and.w	r3, r3, #7
 800aeb2:	2280      	movs	r2, #128	; 0x80
 800aeb4:	fa42 f303 	asr.w	r3, r2, r3
 800aeb8:	b25a      	sxtb	r2, r3
 800aeba:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800aebe:	4313      	orrs	r3, r2
 800aec0:	b259      	sxtb	r1, r3
 800aec2:	4b3f      	ldr	r3, [pc, #252]	; (800afc0 <Paint_SetPixel+0x28c>)
 800aec4:	681a      	ldr	r2, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	4413      	add	r3, r2
 800aeca:	b2ca      	uxtb	r2, r1
 800aecc:	701a      	strb	r2, [r3, #0]
 800aece:	e09d      	b.n	800b00c <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 4){
 800aed0:	4b3b      	ldr	r3, [pc, #236]	; (800afc0 <Paint_SetPixel+0x28c>)
 800aed2:	8adb      	ldrh	r3, [r3, #22]
 800aed4:	2b04      	cmp	r3, #4
 800aed6:	d137      	bne.n	800af48 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800aed8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800aeda:	089b      	lsrs	r3, r3, #2
 800aedc:	b29b      	uxth	r3, r3
 800aede:	4619      	mov	r1, r3
 800aee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aee2:	4a37      	ldr	r2, [pc, #220]	; (800afc0 <Paint_SetPixel+0x28c>)
 800aee4:	8a52      	ldrh	r2, [r2, #18]
 800aee6:	fb02 f303 	mul.w	r3, r2, r3
 800aeea:	440b      	add	r3, r1
 800aeec:	617b      	str	r3, [r7, #20]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800aeee:	887b      	ldrh	r3, [r7, #2]
 800aef0:	f003 0303 	and.w	r3, r3, #3
 800aef4:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800aef6:	4b32      	ldr	r3, [pc, #200]	; (800afc0 <Paint_SetPixel+0x28c>)
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	4413      	add	r3, r2
 800aefe:	781b      	ldrb	r3, [r3, #0]
 800af00:	74fb      	strb	r3, [r7, #19]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800af02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af04:	f003 0303 	and.w	r3, r3, #3
 800af08:	005b      	lsls	r3, r3, #1
 800af0a:	22c0      	movs	r2, #192	; 0xc0
 800af0c:	fa42 f303 	asr.w	r3, r2, r3
 800af10:	b25b      	sxtb	r3, r3
 800af12:	43db      	mvns	r3, r3
 800af14:	b25a      	sxtb	r2, r3
 800af16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af1a:	4013      	ands	r3, r2
 800af1c:	b25b      	sxtb	r3, r3
 800af1e:	74fb      	strb	r3, [r7, #19]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800af20:	887b      	ldrh	r3, [r7, #2]
 800af22:	019a      	lsls	r2, r3, #6
 800af24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af26:	f003 0303 	and.w	r3, r3, #3
 800af2a:	005b      	lsls	r3, r3, #1
 800af2c:	fa42 f303 	asr.w	r3, r2, r3
 800af30:	b25a      	sxtb	r2, r3
 800af32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800af36:	4313      	orrs	r3, r2
 800af38:	b259      	sxtb	r1, r3
 800af3a:	4b21      	ldr	r3, [pc, #132]	; (800afc0 <Paint_SetPixel+0x28c>)
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	697b      	ldr	r3, [r7, #20]
 800af40:	4413      	add	r3, r2
 800af42:	b2ca      	uxtb	r2, r1
 800af44:	701a      	strb	r2, [r3, #0]
 800af46:	e061      	b.n	800b00c <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 16) {
 800af48:	4b1d      	ldr	r3, [pc, #116]	; (800afc0 <Paint_SetPixel+0x28c>)
 800af4a:	8adb      	ldrh	r3, [r3, #22]
 800af4c:	2b10      	cmp	r3, #16
 800af4e:	d13b      	bne.n	800afc8 <Paint_SetPixel+0x294>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800af50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af52:	085b      	lsrs	r3, r3, #1
 800af54:	b29b      	uxth	r3, r3
 800af56:	4619      	mov	r1, r3
 800af58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af5a:	4a19      	ldr	r2, [pc, #100]	; (800afc0 <Paint_SetPixel+0x28c>)
 800af5c:	8a52      	ldrh	r2, [r2, #18]
 800af5e:	fb02 f303 	mul.w	r3, r2, r3
 800af62:	440b      	add	r3, r1
 800af64:	61fb      	str	r3, [r7, #28]
        UBYTE Rdata = Paint.Image[Addr];
 800af66:	4b16      	ldr	r3, [pc, #88]	; (800afc0 <Paint_SetPixel+0x28c>)
 800af68:	681a      	ldr	r2, [r3, #0]
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	4413      	add	r3, r2
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	76fb      	strb	r3, [r7, #27]
        Color = Color % 16;
 800af72:	887b      	ldrh	r3, [r7, #2]
 800af74:	f003 030f 	and.w	r3, r3, #15
 800af78:	807b      	strh	r3, [r7, #2]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 800af7a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	22f0      	movs	r2, #240	; 0xf0
 800af84:	fa42 f303 	asr.w	r3, r2, r3
 800af88:	b25b      	sxtb	r3, r3
 800af8a:	43db      	mvns	r3, r3
 800af8c:	b25a      	sxtb	r2, r3
 800af8e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800af92:	4013      	ands	r3, r2
 800af94:	b25b      	sxtb	r3, r3
 800af96:	76fb      	strb	r3, [r7, #27]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 800af98:	887b      	ldrh	r3, [r7, #2]
 800af9a:	011a      	lsls	r2, r3, #4
 800af9c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af9e:	f003 0301 	and.w	r3, r3, #1
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	fa42 f303 	asr.w	r3, r2, r3
 800afa8:	b25a      	sxtb	r2, r3
 800afaa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800afae:	4313      	orrs	r3, r2
 800afb0:	b259      	sxtb	r1, r3
 800afb2:	4b03      	ldr	r3, [pc, #12]	; (800afc0 <Paint_SetPixel+0x28c>)
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	4413      	add	r3, r2
 800afba:	b2ca      	uxtb	r2, r1
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	e025      	b.n	800b00c <Paint_SetPixel+0x2d8>
 800afc0:	20000a38 	.word	0x20000a38
 800afc4:	0800fb70 	.word	0x0800fb70
    }else if(Paint.Scale == 65) {
 800afc8:	4b12      	ldr	r3, [pc, #72]	; (800b014 <Paint_SetPixel+0x2e0>)
 800afca:	8adb      	ldrh	r3, [r3, #22]
 800afcc:	2b41      	cmp	r3, #65	; 0x41
 800afce:	d11d      	bne.n	800b00c <Paint_SetPixel+0x2d8>
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800afd0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800afd2:	005a      	lsls	r2, r3, #1
 800afd4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afd6:	490f      	ldr	r1, [pc, #60]	; (800b014 <Paint_SetPixel+0x2e0>)
 800afd8:	8a49      	ldrh	r1, [r1, #18]
 800afda:	fb01 f303 	mul.w	r3, r1, r3
 800afde:	4413      	add	r3, r2
 800afe0:	623b      	str	r3, [r7, #32]
        Paint.Image[Addr] = 0xff & (Color>>8);
 800afe2:	887b      	ldrh	r3, [r7, #2]
 800afe4:	0a1b      	lsrs	r3, r3, #8
 800afe6:	b299      	uxth	r1, r3
 800afe8:	4b0a      	ldr	r3, [pc, #40]	; (800b014 <Paint_SetPixel+0x2e0>)
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	6a3b      	ldr	r3, [r7, #32]
 800afee:	4413      	add	r3, r2
 800aff0:	b2ca      	uxtb	r2, r1
 800aff2:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr+1] = 0xff & Color;
 800aff4:	4b07      	ldr	r3, [pc, #28]	; (800b014 <Paint_SetPixel+0x2e0>)
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	6a3b      	ldr	r3, [r7, #32]
 800affa:	3301      	adds	r3, #1
 800affc:	4413      	add	r3, r2
 800affe:	887a      	ldrh	r2, [r7, #2]
 800b000:	b2d2      	uxtb	r2, r2
 800b002:	701a      	strb	r2, [r3, #0]
 800b004:	e002      	b.n	800b00c <Paint_SetPixel+0x2d8>
        return;
 800b006:	bf00      	nop
 800b008:	e000      	b.n	800b00c <Paint_SetPixel+0x2d8>
        return;
 800b00a:	bf00      	nop
    }
}
 800b00c:	3728      	adds	r7, #40	; 0x28
 800b00e:	46bd      	mov	sp, r7
 800b010:	bd80      	pop	{r7, pc}
 800b012:	bf00      	nop
 800b014:	20000a38 	.word	0x20000a38

0800b018 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800b018:	b480      	push	{r7}
 800b01a:	b089      	sub	sp, #36	; 0x24
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	4603      	mov	r3, r0
 800b020:	80fb      	strh	r3, [r7, #6]
    if(Paint.Scale == 2 || Paint.Scale == 4) {
 800b022:	4b51      	ldr	r3, [pc, #324]	; (800b168 <Paint_Clear+0x150>)
 800b024:	8adb      	ldrh	r3, [r3, #22]
 800b026:	2b02      	cmp	r3, #2
 800b028:	d003      	beq.n	800b032 <Paint_Clear+0x1a>
 800b02a:	4b4f      	ldr	r3, [pc, #316]	; (800b168 <Paint_Clear+0x150>)
 800b02c:	8adb      	ldrh	r3, [r3, #22]
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d125      	bne.n	800b07e <Paint_Clear+0x66>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b032:	2300      	movs	r3, #0
 800b034:	83fb      	strh	r3, [r7, #30]
 800b036:	e01c      	b.n	800b072 <Paint_Clear+0x5a>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b038:	2300      	movs	r3, #0
 800b03a:	83bb      	strh	r3, [r7, #28]
 800b03c:	e011      	b.n	800b062 <Paint_Clear+0x4a>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800b03e:	8bba      	ldrh	r2, [r7, #28]
 800b040:	8bfb      	ldrh	r3, [r7, #30]
 800b042:	4949      	ldr	r1, [pc, #292]	; (800b168 <Paint_Clear+0x150>)
 800b044:	8a49      	ldrh	r1, [r1, #18]
 800b046:	fb01 f303 	mul.w	r3, r1, r3
 800b04a:	4413      	add	r3, r2
 800b04c:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800b04e:	4b46      	ldr	r3, [pc, #280]	; (800b168 <Paint_Clear+0x150>)
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	4413      	add	r3, r2
 800b056:	88fa      	ldrh	r2, [r7, #6]
 800b058:	b2d2      	uxtb	r2, r2
 800b05a:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b05c:	8bbb      	ldrh	r3, [r7, #28]
 800b05e:	3301      	adds	r3, #1
 800b060:	83bb      	strh	r3, [r7, #28]
 800b062:	4b41      	ldr	r3, [pc, #260]	; (800b168 <Paint_Clear+0x150>)
 800b064:	8a5b      	ldrh	r3, [r3, #18]
 800b066:	8bba      	ldrh	r2, [r7, #28]
 800b068:	429a      	cmp	r2, r3
 800b06a:	d3e8      	bcc.n	800b03e <Paint_Clear+0x26>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b06c:	8bfb      	ldrh	r3, [r7, #30]
 800b06e:	3301      	adds	r3, #1
 800b070:	83fb      	strh	r3, [r7, #30]
 800b072:	4b3d      	ldr	r3, [pc, #244]	; (800b168 <Paint_Clear+0x150>)
 800b074:	8a9b      	ldrh	r3, [r3, #20]
 800b076:	8bfa      	ldrh	r2, [r7, #30]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d3dd      	bcc.n	800b038 <Paint_Clear+0x20>
 800b07c:	e06e      	b.n	800b15c <Paint_Clear+0x144>
            }
        }
    }else if(Paint.Scale == 16) {
 800b07e:	4b3a      	ldr	r3, [pc, #232]	; (800b168 <Paint_Clear+0x150>)
 800b080:	8adb      	ldrh	r3, [r3, #22]
 800b082:	2b10      	cmp	r3, #16
 800b084:	d12f      	bne.n	800b0e6 <Paint_Clear+0xce>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b086:	2300      	movs	r3, #0
 800b088:	837b      	strh	r3, [r7, #26]
 800b08a:	e026      	b.n	800b0da <Paint_Clear+0xc2>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b08c:	2300      	movs	r3, #0
 800b08e:	833b      	strh	r3, [r7, #24]
 800b090:	e01b      	b.n	800b0ca <Paint_Clear+0xb2>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800b092:	8b3a      	ldrh	r2, [r7, #24]
 800b094:	8b7b      	ldrh	r3, [r7, #26]
 800b096:	4934      	ldr	r1, [pc, #208]	; (800b168 <Paint_Clear+0x150>)
 800b098:	8a49      	ldrh	r1, [r1, #18]
 800b09a:	fb01 f303 	mul.w	r3, r1, r3
 800b09e:	4413      	add	r3, r2
 800b0a0:	60fb      	str	r3, [r7, #12]
                Color = Color & 0x0f;
 800b0a2:	88fb      	ldrh	r3, [r7, #6]
 800b0a4:	f003 030f 	and.w	r3, r3, #15
 800b0a8:	80fb      	strh	r3, [r7, #6]
                Paint.Image[Addr] = (Color<<4) | Color;
 800b0aa:	88fb      	ldrh	r3, [r7, #6]
 800b0ac:	011b      	lsls	r3, r3, #4
 800b0ae:	b25a      	sxtb	r2, r3
 800b0b0:	88fb      	ldrh	r3, [r7, #6]
 800b0b2:	b25b      	sxtb	r3, r3
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	b259      	sxtb	r1, r3
 800b0b8:	4b2b      	ldr	r3, [pc, #172]	; (800b168 <Paint_Clear+0x150>)
 800b0ba:	681a      	ldr	r2, [r3, #0]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	4413      	add	r3, r2
 800b0c0:	b2ca      	uxtb	r2, r1
 800b0c2:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b0c4:	8b3b      	ldrh	r3, [r7, #24]
 800b0c6:	3301      	adds	r3, #1
 800b0c8:	833b      	strh	r3, [r7, #24]
 800b0ca:	4b27      	ldr	r3, [pc, #156]	; (800b168 <Paint_Clear+0x150>)
 800b0cc:	8a5b      	ldrh	r3, [r3, #18]
 800b0ce:	8b3a      	ldrh	r2, [r7, #24]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d3de      	bcc.n	800b092 <Paint_Clear+0x7a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b0d4:	8b7b      	ldrh	r3, [r7, #26]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	837b      	strh	r3, [r7, #26]
 800b0da:	4b23      	ldr	r3, [pc, #140]	; (800b168 <Paint_Clear+0x150>)
 800b0dc:	8a9b      	ldrh	r3, [r3, #20]
 800b0de:	8b7a      	ldrh	r2, [r7, #26]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d3d3      	bcc.n	800b08c <Paint_Clear+0x74>
                Paint.Image[Addr] = 0x0f & (Color>>8);
                Paint.Image[Addr+1] = 0x0f & Color;
            }
        }
    }
}
 800b0e4:	e03a      	b.n	800b15c <Paint_Clear+0x144>
    }else if(Paint.Scale == 65) {
 800b0e6:	4b20      	ldr	r3, [pc, #128]	; (800b168 <Paint_Clear+0x150>)
 800b0e8:	8adb      	ldrh	r3, [r3, #22]
 800b0ea:	2b41      	cmp	r3, #65	; 0x41
 800b0ec:	d136      	bne.n	800b15c <Paint_Clear+0x144>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	82fb      	strh	r3, [r7, #22]
 800b0f2:	e02d      	b.n	800b150 <Paint_Clear+0x138>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	82bb      	strh	r3, [r7, #20]
 800b0f8:	e022      	b.n	800b140 <Paint_Clear+0x128>
                UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800b0fa:	8abb      	ldrh	r3, [r7, #20]
 800b0fc:	005a      	lsls	r2, r3, #1
 800b0fe:	8afb      	ldrh	r3, [r7, #22]
 800b100:	4919      	ldr	r1, [pc, #100]	; (800b168 <Paint_Clear+0x150>)
 800b102:	8a49      	ldrh	r1, [r1, #18]
 800b104:	fb01 f303 	mul.w	r3, r1, r3
 800b108:	4413      	add	r3, r2
 800b10a:	613b      	str	r3, [r7, #16]
                Paint.Image[Addr] = 0x0f & (Color>>8);
 800b10c:	88fb      	ldrh	r3, [r7, #6]
 800b10e:	0a1b      	lsrs	r3, r3, #8
 800b110:	b29b      	uxth	r3, r3
 800b112:	b2da      	uxtb	r2, r3
 800b114:	4b14      	ldr	r3, [pc, #80]	; (800b168 <Paint_Clear+0x150>)
 800b116:	6819      	ldr	r1, [r3, #0]
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	440b      	add	r3, r1
 800b11c:	f002 020f 	and.w	r2, r2, #15
 800b120:	b2d2      	uxtb	r2, r2
 800b122:	701a      	strb	r2, [r3, #0]
                Paint.Image[Addr+1] = 0x0f & Color;
 800b124:	88fb      	ldrh	r3, [r7, #6]
 800b126:	b2da      	uxtb	r2, r3
 800b128:	4b0f      	ldr	r3, [pc, #60]	; (800b168 <Paint_Clear+0x150>)
 800b12a:	6819      	ldr	r1, [r3, #0]
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	3301      	adds	r3, #1
 800b130:	440b      	add	r3, r1
 800b132:	f002 020f 	and.w	r2, r2, #15
 800b136:	b2d2      	uxtb	r2, r2
 800b138:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800b13a:	8abb      	ldrh	r3, [r7, #20]
 800b13c:	3301      	adds	r3, #1
 800b13e:	82bb      	strh	r3, [r7, #20]
 800b140:	4b09      	ldr	r3, [pc, #36]	; (800b168 <Paint_Clear+0x150>)
 800b142:	8a5b      	ldrh	r3, [r3, #18]
 800b144:	8aba      	ldrh	r2, [r7, #20]
 800b146:	429a      	cmp	r2, r3
 800b148:	d3d7      	bcc.n	800b0fa <Paint_Clear+0xe2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800b14a:	8afb      	ldrh	r3, [r7, #22]
 800b14c:	3301      	adds	r3, #1
 800b14e:	82fb      	strh	r3, [r7, #22]
 800b150:	4b05      	ldr	r3, [pc, #20]	; (800b168 <Paint_Clear+0x150>)
 800b152:	8a9b      	ldrh	r3, [r3, #20]
 800b154:	8afa      	ldrh	r2, [r7, #22]
 800b156:	429a      	cmp	r2, r3
 800b158:	d3cc      	bcc.n	800b0f4 <Paint_Clear+0xdc>
}
 800b15a:	e7ff      	b.n	800b15c <Paint_Clear+0x144>
 800b15c:	bf00      	nop
 800b15e:	3724      	adds	r7, #36	; 0x24
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr
 800b168:	20000a38 	.word	0x20000a38

0800b16c <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 800b16c:	b590      	push	{r4, r7, lr}
 800b16e:	b085      	sub	sp, #20
 800b170:	af00      	add	r7, sp, #0
 800b172:	4604      	mov	r4, r0
 800b174:	4608      	mov	r0, r1
 800b176:	4611      	mov	r1, r2
 800b178:	461a      	mov	r2, r3
 800b17a:	4623      	mov	r3, r4
 800b17c:	80fb      	strh	r3, [r7, #6]
 800b17e:	4603      	mov	r3, r0
 800b180:	80bb      	strh	r3, [r7, #4]
 800b182:	460b      	mov	r3, r1
 800b184:	807b      	strh	r3, [r7, #2]
 800b186:	4613      	mov	r3, r2
 800b188:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800b18a:	4b4a      	ldr	r3, [pc, #296]	; (800b2b4 <Paint_DrawPoint+0x148>)
 800b18c:	889b      	ldrh	r3, [r3, #4]
 800b18e:	88fa      	ldrh	r2, [r7, #6]
 800b190:	429a      	cmp	r2, r3
 800b192:	d804      	bhi.n	800b19e <Paint_DrawPoint+0x32>
 800b194:	4b47      	ldr	r3, [pc, #284]	; (800b2b4 <Paint_DrawPoint+0x148>)
 800b196:	88db      	ldrh	r3, [r3, #6]
 800b198:	88ba      	ldrh	r2, [r7, #4]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d911      	bls.n	800b1c2 <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800b19e:	4846      	ldr	r0, [pc, #280]	; (800b2b8 <Paint_DrawPoint+0x14c>)
 800b1a0:	f001 fbf8 	bl	800c994 <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 800b1a4:	88fb      	ldrh	r3, [r7, #6]
 800b1a6:	4a43      	ldr	r2, [pc, #268]	; (800b2b4 <Paint_DrawPoint+0x148>)
 800b1a8:	8892      	ldrh	r2, [r2, #4]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	4843      	ldr	r0, [pc, #268]	; (800b2bc <Paint_DrawPoint+0x150>)
 800b1ae:	f001 fb8b 	bl	800c8c8 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 800b1b2:	88bb      	ldrh	r3, [r7, #4]
 800b1b4:	4a3f      	ldr	r2, [pc, #252]	; (800b2b4 <Paint_DrawPoint+0x148>)
 800b1b6:	88d2      	ldrh	r2, [r2, #6]
 800b1b8:	4619      	mov	r1, r3
 800b1ba:	4841      	ldr	r0, [pc, #260]	; (800b2c0 <Paint_DrawPoint+0x154>)
 800b1bc:	f001 fb84 	bl	800c8c8 <iprintf>
        return;
 800b1c0:	e074      	b.n	800b2ac <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 800b1c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d144      	bne.n	800b254 <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	81fb      	strh	r3, [r7, #14]
 800b1ce:	e039      	b.n	800b244 <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	81bb      	strh	r3, [r7, #12]
 800b1d4:	e029      	b.n	800b22a <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b1d6:	88fa      	ldrh	r2, [r7, #6]
 800b1d8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b1dc:	441a      	add	r2, r3
 800b1de:	787b      	ldrb	r3, [r7, #1]
 800b1e0:	1ad3      	subs	r3, r2, r3
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	db28      	blt.n	800b238 <Paint_DrawPoint+0xcc>
 800b1e6:	88ba      	ldrh	r2, [r7, #4]
 800b1e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b1ec:	441a      	add	r2, r3
 800b1ee:	787b      	ldrb	r3, [r7, #1]
 800b1f0:	1ad3      	subs	r3, r2, r3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	db20      	blt.n	800b238 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800b1f6:	89fa      	ldrh	r2, [r7, #14]
 800b1f8:	88fb      	ldrh	r3, [r7, #6]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	787b      	ldrb	r3, [r7, #1]
 800b200:	b29b      	uxth	r3, r3
 800b202:	1ad3      	subs	r3, r2, r3
 800b204:	b298      	uxth	r0, r3
 800b206:	89ba      	ldrh	r2, [r7, #12]
 800b208:	88bb      	ldrh	r3, [r7, #4]
 800b20a:	4413      	add	r3, r2
 800b20c:	b29a      	uxth	r2, r3
 800b20e:	787b      	ldrb	r3, [r7, #1]
 800b210:	b29b      	uxth	r3, r3
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	b29b      	uxth	r3, r3
 800b216:	887a      	ldrh	r2, [r7, #2]
 800b218:	4619      	mov	r1, r3
 800b21a:	f7ff fd8b 	bl	800ad34 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800b21e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b222:	b29b      	uxth	r3, r3
 800b224:	3301      	adds	r3, #1
 800b226:	b29b      	uxth	r3, r3
 800b228:	81bb      	strh	r3, [r7, #12]
 800b22a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b22e:	787b      	ldrb	r3, [r7, #1]
 800b230:	005b      	lsls	r3, r3, #1
 800b232:	3b01      	subs	r3, #1
 800b234:	429a      	cmp	r2, r3
 800b236:	dbce      	blt.n	800b1d6 <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800b238:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b23c:	b29b      	uxth	r3, r3
 800b23e:	3301      	adds	r3, #1
 800b240:	b29b      	uxth	r3, r3
 800b242:	81fb      	strh	r3, [r7, #14]
 800b244:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b248:	787b      	ldrb	r3, [r7, #1]
 800b24a:	005b      	lsls	r3, r3, #1
 800b24c:	3b01      	subs	r3, #1
 800b24e:	429a      	cmp	r2, r3
 800b250:	dbbe      	blt.n	800b1d0 <Paint_DrawPoint+0x64>
 800b252:	e02b      	b.n	800b2ac <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800b254:	2300      	movs	r3, #0
 800b256:	81fb      	strh	r3, [r7, #14]
 800b258:	e023      	b.n	800b2a2 <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800b25a:	2300      	movs	r3, #0
 800b25c:	81bb      	strh	r3, [r7, #12]
 800b25e:	e015      	b.n	800b28c <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800b260:	89fa      	ldrh	r2, [r7, #14]
 800b262:	88fb      	ldrh	r3, [r7, #6]
 800b264:	4413      	add	r3, r2
 800b266:	b29b      	uxth	r3, r3
 800b268:	3b01      	subs	r3, #1
 800b26a:	b298      	uxth	r0, r3
 800b26c:	89ba      	ldrh	r2, [r7, #12]
 800b26e:	88bb      	ldrh	r3, [r7, #4]
 800b270:	4413      	add	r3, r2
 800b272:	b29b      	uxth	r3, r3
 800b274:	3b01      	subs	r3, #1
 800b276:	b29b      	uxth	r3, r3
 800b278:	887a      	ldrh	r2, [r7, #2]
 800b27a:	4619      	mov	r1, r3
 800b27c:	f7ff fd5a 	bl	800ad34 <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800b280:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b284:	b29b      	uxth	r3, r3
 800b286:	3301      	adds	r3, #1
 800b288:	b29b      	uxth	r3, r3
 800b28a:	81bb      	strh	r3, [r7, #12]
 800b28c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b290:	787b      	ldrb	r3, [r7, #1]
 800b292:	429a      	cmp	r2, r3
 800b294:	dbe4      	blt.n	800b260 <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800b296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b29a:	b29b      	uxth	r3, r3
 800b29c:	3301      	adds	r3, #1
 800b29e:	b29b      	uxth	r3, r3
 800b2a0:	81fb      	strh	r3, [r7, #14]
 800b2a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b2a6:	787b      	ldrb	r3, [r7, #1]
 800b2a8:	429a      	cmp	r2, r3
 800b2aa:	dbd6      	blt.n	800b25a <Paint_DrawPoint+0xee>
            }
        }
    }
}
 800b2ac:	3714      	adds	r7, #20
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd90      	pop	{r4, r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000a38 	.word	0x20000a38
 800b2b8:	0800fb98 	.word	0x0800fb98
 800b2bc:	0800fbd8 	.word	0x0800fbd8
 800b2c0:	0800fbfc 	.word	0x0800fbfc

0800b2c4 <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800b2c4:	b590      	push	{r4, r7, lr}
 800b2c6:	b08d      	sub	sp, #52	; 0x34
 800b2c8:	af02      	add	r7, sp, #8
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	4608      	mov	r0, r1
 800b2ce:	4611      	mov	r1, r2
 800b2d0:	461a      	mov	r2, r3
 800b2d2:	4623      	mov	r3, r4
 800b2d4:	80fb      	strh	r3, [r7, #6]
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	80bb      	strh	r3, [r7, #4]
 800b2da:	460b      	mov	r3, r1
 800b2dc:	807b      	strh	r3, [r7, #2]
 800b2de:	4613      	mov	r3, r2
 800b2e0:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b2e2:	4b52      	ldr	r3, [pc, #328]	; (800b42c <Paint_DrawLine+0x168>)
 800b2e4:	889b      	ldrh	r3, [r3, #4]
 800b2e6:	88fa      	ldrh	r2, [r7, #6]
 800b2e8:	429a      	cmp	r2, r3
 800b2ea:	d80e      	bhi.n	800b30a <Paint_DrawLine+0x46>
 800b2ec:	4b4f      	ldr	r3, [pc, #316]	; (800b42c <Paint_DrawLine+0x168>)
 800b2ee:	88db      	ldrh	r3, [r3, #6]
 800b2f0:	88ba      	ldrh	r2, [r7, #4]
 800b2f2:	429a      	cmp	r2, r3
 800b2f4:	d809      	bhi.n	800b30a <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b2f6:	4b4d      	ldr	r3, [pc, #308]	; (800b42c <Paint_DrawLine+0x168>)
 800b2f8:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b2fa:	887a      	ldrh	r2, [r7, #2]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d804      	bhi.n	800b30a <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b300:	4b4a      	ldr	r3, [pc, #296]	; (800b42c <Paint_DrawLine+0x168>)
 800b302:	88db      	ldrh	r3, [r3, #6]
 800b304:	883a      	ldrh	r2, [r7, #0]
 800b306:	429a      	cmp	r2, r3
 800b308:	d903      	bls.n	800b312 <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800b30a:	4849      	ldr	r0, [pc, #292]	; (800b430 <Paint_DrawLine+0x16c>)
 800b30c:	f001 fb42 	bl	800c994 <puts>
        return;
 800b310:	e088      	b.n	800b424 <Paint_DrawLine+0x160>
    }

    UWORD Xpoint = Xstart;
 800b312:	88fb      	ldrh	r3, [r7, #6]
 800b314:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800b316:	88bb      	ldrh	r3, [r7, #4]
 800b318:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b31a:	887a      	ldrh	r2, [r7, #2]
 800b31c:	88fb      	ldrh	r3, [r7, #6]
 800b31e:	1ad3      	subs	r3, r2, r3
 800b320:	2b00      	cmp	r3, #0
 800b322:	bfb8      	it	lt
 800b324:	425b      	neglt	r3, r3
 800b326:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b328:	883a      	ldrh	r2, [r7, #0]
 800b32a:	88bb      	ldrh	r3, [r7, #4]
 800b32c:	1ad3      	subs	r3, r2, r3
 800b32e:	2b00      	cmp	r3, #0
 800b330:	bfb8      	it	lt
 800b332:	425b      	neglt	r3, r3
 800b334:	425b      	negs	r3, r3
 800b336:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800b338:	88fa      	ldrh	r2, [r7, #6]
 800b33a:	887b      	ldrh	r3, [r7, #2]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d201      	bcs.n	800b344 <Paint_DrawLine+0x80>
 800b340:	2301      	movs	r3, #1
 800b342:	e001      	b.n	800b348 <Paint_DrawLine+0x84>
 800b344:	f04f 33ff 	mov.w	r3, #4294967295
 800b348:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800b34a:	88ba      	ldrh	r2, [r7, #4]
 800b34c:	883b      	ldrh	r3, [r7, #0]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d201      	bcs.n	800b356 <Paint_DrawLine+0x92>
 800b352:	2301      	movs	r3, #1
 800b354:	e001      	b.n	800b35a <Paint_DrawLine+0x96>
 800b356:	f04f 33ff 	mov.w	r3, #4294967295
 800b35a:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800b35c:	69ba      	ldr	r2, [r7, #24]
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	4413      	add	r3, r2
 800b362:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800b364:	2300      	movs	r3, #0
 800b366:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 800b368:	7ffb      	ldrb	r3, [r7, #31]
 800b36a:	3301      	adds	r3, #1
 800b36c:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800b36e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b372:	2b01      	cmp	r3, #1
 800b374:	d125      	bne.n	800b3c2 <Paint_DrawLine+0xfe>
 800b376:	7ffa      	ldrb	r2, [r7, #31]
 800b378:	4b2e      	ldr	r3, [pc, #184]	; (800b434 <Paint_DrawLine+0x170>)
 800b37a:	fba3 1302 	umull	r1, r3, r3, r2
 800b37e:	0859      	lsrs	r1, r3, #1
 800b380:	460b      	mov	r3, r1
 800b382:	005b      	lsls	r3, r3, #1
 800b384:	440b      	add	r3, r1
 800b386:	1ad3      	subs	r3, r2, r3
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d119      	bne.n	800b3c2 <Paint_DrawLine+0xfe>
            //Debug("LINE_DOTTED\r\n");
						if(Color)
 800b38e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b390:	2b00      	cmp	r3, #0
 800b392:	d009      	beq.n	800b3a8 <Paint_DrawLine+0xe4>
							Paint_DrawPoint(Xpoint, Ypoint, BLACK, Line_width, DOT_STYLE_DFT);
 800b394:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b398:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b39a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b39c:	2201      	movs	r2, #1
 800b39e:	9200      	str	r2, [sp, #0]
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	f7ff fee3 	bl	800b16c <Paint_DrawPoint>
 800b3a6:	e009      	b.n	800b3bc <Paint_DrawLine+0xf8>
            else
							Paint_DrawPoint(Xpoint, Ypoint, WHITE, Line_width, DOT_STYLE_DFT);
 800b3a8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3ac:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b3ae:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b3b0:	2201      	movs	r2, #1
 800b3b2:	9200      	str	r2, [sp, #0]
 800b3b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3b8:	f7ff fed8 	bl	800b16c <Paint_DrawPoint>
            Dotted_Len = 0;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	77fb      	strb	r3, [r7, #31]
 800b3c0:	e008      	b.n	800b3d4 <Paint_DrawLine+0x110>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800b3c2:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b3c6:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b3c8:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b3ca:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b3cc:	2401      	movs	r4, #1
 800b3ce:	9400      	str	r4, [sp, #0]
 800b3d0:	f7ff fecc 	bl	800b16c <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800b3d4:	6a3b      	ldr	r3, [r7, #32]
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	697a      	ldr	r2, [r7, #20]
 800b3da:	429a      	cmp	r2, r3
 800b3dc:	dc0c      	bgt.n	800b3f8 <Paint_DrawLine+0x134>
            if (Xpoint == Xend)
 800b3de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b3e0:	887b      	ldrh	r3, [r7, #2]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d01b      	beq.n	800b41e <Paint_DrawLine+0x15a>
                break;
            Esp += dy;
 800b3e6:	6a3a      	ldr	r2, [r7, #32]
 800b3e8:	697b      	ldr	r3, [r7, #20]
 800b3ea:	4413      	add	r3, r2
 800b3ec:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	b29a      	uxth	r2, r3
 800b3f2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b3f4:	4413      	add	r3, r2
 800b3f6:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800b3f8:	6a3b      	ldr	r3, [r7, #32]
 800b3fa:	005b      	lsls	r3, r3, #1
 800b3fc:	69ba      	ldr	r2, [r7, #24]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	dbb2      	blt.n	800b368 <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 800b402:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b404:	883b      	ldrh	r3, [r7, #0]
 800b406:	429a      	cmp	r2, r3
 800b408:	d00b      	beq.n	800b422 <Paint_DrawLine+0x15e>
                break;
            Esp += dx;
 800b40a:	6a3a      	ldr	r2, [r7, #32]
 800b40c:	69bb      	ldr	r3, [r7, #24]
 800b40e:	4413      	add	r3, r2
 800b410:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	b29a      	uxth	r2, r3
 800b416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b418:	4413      	add	r3, r2
 800b41a:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800b41c:	e7a4      	b.n	800b368 <Paint_DrawLine+0xa4>
                break;
 800b41e:	bf00      	nop
 800b420:	e000      	b.n	800b424 <Paint_DrawLine+0x160>
                break;
 800b422:	bf00      	nop
        }
    }
}
 800b424:	372c      	adds	r7, #44	; 0x2c
 800b426:	46bd      	mov	sp, r7
 800b428:	bd90      	pop	{r4, r7, pc}
 800b42a:	bf00      	nop
 800b42c:	20000a38 	.word	0x20000a38
 800b430:	0800fc24 	.word	0x0800fc24
 800b434:	aaaaaaab 	.word	0xaaaaaaab

0800b438 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800b438:	b590      	push	{r4, r7, lr}
 800b43a:	b089      	sub	sp, #36	; 0x24
 800b43c:	af04      	add	r7, sp, #16
 800b43e:	4604      	mov	r4, r0
 800b440:	4608      	mov	r0, r1
 800b442:	4611      	mov	r1, r2
 800b444:	461a      	mov	r2, r3
 800b446:	4623      	mov	r3, r4
 800b448:	80fb      	strh	r3, [r7, #6]
 800b44a:	4603      	mov	r3, r0
 800b44c:	80bb      	strh	r3, [r7, #4]
 800b44e:	460b      	mov	r3, r1
 800b450:	807b      	strh	r3, [r7, #2]
 800b452:	4613      	mov	r3, r2
 800b454:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b456:	4b38      	ldr	r3, [pc, #224]	; (800b538 <Paint_DrawRectangle+0x100>)
 800b458:	889b      	ldrh	r3, [r3, #4]
 800b45a:	88fa      	ldrh	r2, [r7, #6]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d80e      	bhi.n	800b47e <Paint_DrawRectangle+0x46>
 800b460:	4b35      	ldr	r3, [pc, #212]	; (800b538 <Paint_DrawRectangle+0x100>)
 800b462:	88db      	ldrh	r3, [r3, #6]
 800b464:	88ba      	ldrh	r2, [r7, #4]
 800b466:	429a      	cmp	r2, r3
 800b468:	d809      	bhi.n	800b47e <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b46a:	4b33      	ldr	r3, [pc, #204]	; (800b538 <Paint_DrawRectangle+0x100>)
 800b46c:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b46e:	887a      	ldrh	r2, [r7, #2]
 800b470:	429a      	cmp	r2, r3
 800b472:	d804      	bhi.n	800b47e <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b474:	4b30      	ldr	r3, [pc, #192]	; (800b538 <Paint_DrawRectangle+0x100>)
 800b476:	88db      	ldrh	r3, [r3, #6]
 800b478:	883a      	ldrh	r2, [r7, #0]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	d903      	bls.n	800b486 <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 800b47e:	482f      	ldr	r0, [pc, #188]	; (800b53c <Paint_DrawRectangle+0x104>)
 800b480:	f001 fa88 	bl	800c994 <puts>
        return;
 800b484:	e054      	b.n	800b530 <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 800b486:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d018      	beq.n	800b4c0 <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800b48e:	88bb      	ldrh	r3, [r7, #4]
 800b490:	81fb      	strh	r3, [r7, #14]
 800b492:	e010      	b.n	800b4b6 <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 800b494:	89fc      	ldrh	r4, [r7, #14]
 800b496:	887a      	ldrh	r2, [r7, #2]
 800b498:	89f9      	ldrh	r1, [r7, #14]
 800b49a:	88f8      	ldrh	r0, [r7, #6]
 800b49c:	2300      	movs	r3, #0
 800b49e:	9302      	str	r3, [sp, #8]
 800b4a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b4a4:	9301      	str	r3, [sp, #4]
 800b4a6:	8c3b      	ldrh	r3, [r7, #32]
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	4623      	mov	r3, r4
 800b4ac:	f7ff ff0a 	bl	800b2c4 <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800b4b0:	89fb      	ldrh	r3, [r7, #14]
 800b4b2:	3301      	adds	r3, #1
 800b4b4:	81fb      	strh	r3, [r7, #14]
 800b4b6:	89fa      	ldrh	r2, [r7, #14]
 800b4b8:	883b      	ldrh	r3, [r7, #0]
 800b4ba:	429a      	cmp	r2, r3
 800b4bc:	d3ea      	bcc.n	800b494 <Paint_DrawRectangle+0x5c>
 800b4be:	e037      	b.n	800b530 <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800b4c0:	88bc      	ldrh	r4, [r7, #4]
 800b4c2:	887a      	ldrh	r2, [r7, #2]
 800b4c4:	88b9      	ldrh	r1, [r7, #4]
 800b4c6:	88f8      	ldrh	r0, [r7, #6]
 800b4c8:	2300      	movs	r3, #0
 800b4ca:	9302      	str	r3, [sp, #8]
 800b4cc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	8c3b      	ldrh	r3, [r7, #32]
 800b4d4:	9300      	str	r3, [sp, #0]
 800b4d6:	4623      	mov	r3, r4
 800b4d8:	f7ff fef4 	bl	800b2c4 <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800b4dc:	883c      	ldrh	r4, [r7, #0]
 800b4de:	88fa      	ldrh	r2, [r7, #6]
 800b4e0:	88b9      	ldrh	r1, [r7, #4]
 800b4e2:	88f8      	ldrh	r0, [r7, #6]
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	9302      	str	r3, [sp, #8]
 800b4e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b4ec:	9301      	str	r3, [sp, #4]
 800b4ee:	8c3b      	ldrh	r3, [r7, #32]
 800b4f0:	9300      	str	r3, [sp, #0]
 800b4f2:	4623      	mov	r3, r4
 800b4f4:	f7ff fee6 	bl	800b2c4 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800b4f8:	88bc      	ldrh	r4, [r7, #4]
 800b4fa:	887a      	ldrh	r2, [r7, #2]
 800b4fc:	8839      	ldrh	r1, [r7, #0]
 800b4fe:	8878      	ldrh	r0, [r7, #2]
 800b500:	2300      	movs	r3, #0
 800b502:	9302      	str	r3, [sp, #8]
 800b504:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b508:	9301      	str	r3, [sp, #4]
 800b50a:	8c3b      	ldrh	r3, [r7, #32]
 800b50c:	9300      	str	r3, [sp, #0]
 800b50e:	4623      	mov	r3, r4
 800b510:	f7ff fed8 	bl	800b2c4 <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800b514:	883c      	ldrh	r4, [r7, #0]
 800b516:	88fa      	ldrh	r2, [r7, #6]
 800b518:	8839      	ldrh	r1, [r7, #0]
 800b51a:	8878      	ldrh	r0, [r7, #2]
 800b51c:	2300      	movs	r3, #0
 800b51e:	9302      	str	r3, [sp, #8]
 800b520:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b524:	9301      	str	r3, [sp, #4]
 800b526:	8c3b      	ldrh	r3, [r7, #32]
 800b528:	9300      	str	r3, [sp, #0]
 800b52a:	4623      	mov	r3, r4
 800b52c:	f7ff feca 	bl	800b2c4 <Paint_DrawLine>
    }
}
 800b530:	3714      	adds	r7, #20
 800b532:	46bd      	mov	sp, r7
 800b534:	bd90      	pop	{r4, r7, pc}
 800b536:	bf00      	nop
 800b538:	20000a38 	.word	0x20000a38
 800b53c:	0800fc64 	.word	0x0800fc64

0800b540 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800b540:	b590      	push	{r4, r7, lr}
 800b542:	b087      	sub	sp, #28
 800b544:	af02      	add	r7, sp, #8
 800b546:	4604      	mov	r4, r0
 800b548:	4608      	mov	r0, r1
 800b54a:	4611      	mov	r1, r2
 800b54c:	461a      	mov	r2, r3
 800b54e:	4623      	mov	r3, r4
 800b550:	80fb      	strh	r3, [r7, #6]
 800b552:	4603      	mov	r3, r0
 800b554:	80bb      	strh	r3, [r7, #4]
 800b556:	460b      	mov	r3, r1
 800b558:	807b      	strh	r3, [r7, #2]
 800b55a:	4613      	mov	r3, r2
 800b55c:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 800b55e:	4b67      	ldr	r3, [pc, #412]	; (800b6fc <Paint_DrawCircle+0x1bc>)
 800b560:	889b      	ldrh	r3, [r3, #4]
 800b562:	88fa      	ldrh	r2, [r7, #6]
 800b564:	429a      	cmp	r2, r3
 800b566:	d804      	bhi.n	800b572 <Paint_DrawCircle+0x32>
 800b568:	4b64      	ldr	r3, [pc, #400]	; (800b6fc <Paint_DrawCircle+0x1bc>)
 800b56a:	88db      	ldrh	r3, [r3, #6]
 800b56c:	88ba      	ldrh	r2, [r7, #4]
 800b56e:	429a      	cmp	r2, r3
 800b570:	d303      	bcc.n	800b57a <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800b572:	4863      	ldr	r0, [pc, #396]	; (800b700 <Paint_DrawCircle+0x1c0>)
 800b574:	f001 fa0e 	bl	800c994 <puts>
        return;
 800b578:	e16b      	b.n	800b852 <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800b57e:	887b      	ldrh	r3, [r7, #2]
 800b580:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800b582:	887b      	ldrh	r3, [r7, #2]
 800b584:	005b      	lsls	r3, r3, #1
 800b586:	b29b      	uxth	r3, r3
 800b588:	f1c3 0303 	rsb	r3, r3, #3
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 800b590:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b594:	2b01      	cmp	r3, #1
 800b596:	f040 8155 	bne.w	800b844 <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800b59a:	e0a6      	b.n	800b6ea <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800b59c:	89fb      	ldrh	r3, [r7, #14]
 800b59e:	813b      	strh	r3, [r7, #8]
 800b5a0:	e075      	b.n	800b68e <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800b5a2:	89fa      	ldrh	r2, [r7, #14]
 800b5a4:	88fb      	ldrh	r3, [r7, #6]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	b298      	uxth	r0, r3
 800b5aa:	893a      	ldrh	r2, [r7, #8]
 800b5ac:	88bb      	ldrh	r3, [r7, #4]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	b299      	uxth	r1, r3
 800b5b2:	883a      	ldrh	r2, [r7, #0]
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	9300      	str	r3, [sp, #0]
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	f7ff fdd7 	bl	800b16c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800b5be:	89fb      	ldrh	r3, [r7, #14]
 800b5c0:	88fa      	ldrh	r2, [r7, #6]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	b298      	uxth	r0, r3
 800b5c6:	893a      	ldrh	r2, [r7, #8]
 800b5c8:	88bb      	ldrh	r3, [r7, #4]
 800b5ca:	4413      	add	r3, r2
 800b5cc:	b299      	uxth	r1, r3
 800b5ce:	883a      	ldrh	r2, [r7, #0]
 800b5d0:	2301      	movs	r3, #1
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	f7ff fdc9 	bl	800b16c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800b5da:	893b      	ldrh	r3, [r7, #8]
 800b5dc:	88fa      	ldrh	r2, [r7, #6]
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	b298      	uxth	r0, r3
 800b5e2:	89fa      	ldrh	r2, [r7, #14]
 800b5e4:	88bb      	ldrh	r3, [r7, #4]
 800b5e6:	4413      	add	r3, r2
 800b5e8:	b299      	uxth	r1, r3
 800b5ea:	883a      	ldrh	r2, [r7, #0]
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	9300      	str	r3, [sp, #0]
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	f7ff fdbb 	bl	800b16c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800b5f6:	893b      	ldrh	r3, [r7, #8]
 800b5f8:	88fa      	ldrh	r2, [r7, #6]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	b298      	uxth	r0, r3
 800b5fe:	89fb      	ldrh	r3, [r7, #14]
 800b600:	88ba      	ldrh	r2, [r7, #4]
 800b602:	1ad3      	subs	r3, r2, r3
 800b604:	b299      	uxth	r1, r3
 800b606:	883a      	ldrh	r2, [r7, #0]
 800b608:	2301      	movs	r3, #1
 800b60a:	9300      	str	r3, [sp, #0]
 800b60c:	2301      	movs	r3, #1
 800b60e:	f7ff fdad 	bl	800b16c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 800b612:	89fb      	ldrh	r3, [r7, #14]
 800b614:	88fa      	ldrh	r2, [r7, #6]
 800b616:	1ad3      	subs	r3, r2, r3
 800b618:	b298      	uxth	r0, r3
 800b61a:	893b      	ldrh	r3, [r7, #8]
 800b61c:	88ba      	ldrh	r2, [r7, #4]
 800b61e:	1ad3      	subs	r3, r2, r3
 800b620:	b299      	uxth	r1, r3
 800b622:	883a      	ldrh	r2, [r7, #0]
 800b624:	2301      	movs	r3, #1
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	2301      	movs	r3, #1
 800b62a:	f7ff fd9f 	bl	800b16c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800b62e:	89fa      	ldrh	r2, [r7, #14]
 800b630:	88fb      	ldrh	r3, [r7, #6]
 800b632:	4413      	add	r3, r2
 800b634:	b298      	uxth	r0, r3
 800b636:	893b      	ldrh	r3, [r7, #8]
 800b638:	88ba      	ldrh	r2, [r7, #4]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	b299      	uxth	r1, r3
 800b63e:	883a      	ldrh	r2, [r7, #0]
 800b640:	2301      	movs	r3, #1
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	2301      	movs	r3, #1
 800b646:	f7ff fd91 	bl	800b16c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800b64a:	893a      	ldrh	r2, [r7, #8]
 800b64c:	88fb      	ldrh	r3, [r7, #6]
 800b64e:	4413      	add	r3, r2
 800b650:	b298      	uxth	r0, r3
 800b652:	89fb      	ldrh	r3, [r7, #14]
 800b654:	88ba      	ldrh	r2, [r7, #4]
 800b656:	1ad3      	subs	r3, r2, r3
 800b658:	b299      	uxth	r1, r3
 800b65a:	883a      	ldrh	r2, [r7, #0]
 800b65c:	2301      	movs	r3, #1
 800b65e:	9300      	str	r3, [sp, #0]
 800b660:	2301      	movs	r3, #1
 800b662:	f7ff fd83 	bl	800b16c <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800b666:	893a      	ldrh	r2, [r7, #8]
 800b668:	88fb      	ldrh	r3, [r7, #6]
 800b66a:	4413      	add	r3, r2
 800b66c:	b298      	uxth	r0, r3
 800b66e:	89fa      	ldrh	r2, [r7, #14]
 800b670:	88bb      	ldrh	r3, [r7, #4]
 800b672:	4413      	add	r3, r2
 800b674:	b299      	uxth	r1, r3
 800b676:	883a      	ldrh	r2, [r7, #0]
 800b678:	2301      	movs	r3, #1
 800b67a:	9300      	str	r3, [sp, #0]
 800b67c:	2301      	movs	r3, #1
 800b67e:	f7ff fd75 	bl	800b16c <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800b682:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b686:	b29b      	uxth	r3, r3
 800b688:	3301      	adds	r3, #1
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	813b      	strh	r3, [r7, #8]
 800b68e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b692:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b696:	429a      	cmp	r2, r3
 800b698:	dd83      	ble.n	800b5a2 <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 800b69a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	da09      	bge.n	800b6b6 <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 800b6a2:	89fb      	ldrh	r3, [r7, #14]
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	b29a      	uxth	r2, r3
 800b6a8:	897b      	ldrh	r3, [r7, #10]
 800b6aa:	4413      	add	r3, r2
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	3306      	adds	r3, #6
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	817b      	strh	r3, [r7, #10]
 800b6b4:	e013      	b.n	800b6de <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800b6b6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b6ba:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b6be:	1ad3      	subs	r3, r2, r3
 800b6c0:	b29b      	uxth	r3, r3
 800b6c2:	009b      	lsls	r3, r3, #2
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	897b      	ldrh	r3, [r7, #10]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	330a      	adds	r3, #10
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800b6d2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	b29b      	uxth	r3, r3
 800b6dc:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800b6de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800b6ea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b6ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b6f2:	429a      	cmp	r2, r3
 800b6f4:	f77f af52 	ble.w	800b59c <Paint_DrawCircle+0x5c>
 800b6f8:	e0ab      	b.n	800b852 <Paint_DrawCircle+0x312>
 800b6fa:	bf00      	nop
 800b6fc:	20000a38 	.word	0x20000a38
 800b700:	0800fc94 	.word	0x0800fc94
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 800b704:	89fa      	ldrh	r2, [r7, #14]
 800b706:	88fb      	ldrh	r3, [r7, #6]
 800b708:	4413      	add	r3, r2
 800b70a:	b298      	uxth	r0, r3
 800b70c:	89ba      	ldrh	r2, [r7, #12]
 800b70e:	88bb      	ldrh	r3, [r7, #4]
 800b710:	4413      	add	r3, r2
 800b712:	b299      	uxth	r1, r3
 800b714:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b718:	883a      	ldrh	r2, [r7, #0]
 800b71a:	2401      	movs	r4, #1
 800b71c:	9400      	str	r4, [sp, #0]
 800b71e:	f7ff fd25 	bl	800b16c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800b722:	89fb      	ldrh	r3, [r7, #14]
 800b724:	88fa      	ldrh	r2, [r7, #6]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	b298      	uxth	r0, r3
 800b72a:	89ba      	ldrh	r2, [r7, #12]
 800b72c:	88bb      	ldrh	r3, [r7, #4]
 800b72e:	4413      	add	r3, r2
 800b730:	b299      	uxth	r1, r3
 800b732:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b736:	883a      	ldrh	r2, [r7, #0]
 800b738:	2401      	movs	r4, #1
 800b73a:	9400      	str	r4, [sp, #0]
 800b73c:	f7ff fd16 	bl	800b16c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 800b740:	89bb      	ldrh	r3, [r7, #12]
 800b742:	88fa      	ldrh	r2, [r7, #6]
 800b744:	1ad3      	subs	r3, r2, r3
 800b746:	b298      	uxth	r0, r3
 800b748:	89fa      	ldrh	r2, [r7, #14]
 800b74a:	88bb      	ldrh	r3, [r7, #4]
 800b74c:	4413      	add	r3, r2
 800b74e:	b299      	uxth	r1, r3
 800b750:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b754:	883a      	ldrh	r2, [r7, #0]
 800b756:	2401      	movs	r4, #1
 800b758:	9400      	str	r4, [sp, #0]
 800b75a:	f7ff fd07 	bl	800b16c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800b75e:	89bb      	ldrh	r3, [r7, #12]
 800b760:	88fa      	ldrh	r2, [r7, #6]
 800b762:	1ad3      	subs	r3, r2, r3
 800b764:	b298      	uxth	r0, r3
 800b766:	89fb      	ldrh	r3, [r7, #14]
 800b768:	88ba      	ldrh	r2, [r7, #4]
 800b76a:	1ad3      	subs	r3, r2, r3
 800b76c:	b299      	uxth	r1, r3
 800b76e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b772:	883a      	ldrh	r2, [r7, #0]
 800b774:	2401      	movs	r4, #1
 800b776:	9400      	str	r4, [sp, #0]
 800b778:	f7ff fcf8 	bl	800b16c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800b77c:	89fb      	ldrh	r3, [r7, #14]
 800b77e:	88fa      	ldrh	r2, [r7, #6]
 800b780:	1ad3      	subs	r3, r2, r3
 800b782:	b298      	uxth	r0, r3
 800b784:	89bb      	ldrh	r3, [r7, #12]
 800b786:	88ba      	ldrh	r2, [r7, #4]
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	b299      	uxth	r1, r3
 800b78c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b790:	883a      	ldrh	r2, [r7, #0]
 800b792:	2401      	movs	r4, #1
 800b794:	9400      	str	r4, [sp, #0]
 800b796:	f7ff fce9 	bl	800b16c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800b79a:	89fa      	ldrh	r2, [r7, #14]
 800b79c:	88fb      	ldrh	r3, [r7, #6]
 800b79e:	4413      	add	r3, r2
 800b7a0:	b298      	uxth	r0, r3
 800b7a2:	89bb      	ldrh	r3, [r7, #12]
 800b7a4:	88ba      	ldrh	r2, [r7, #4]
 800b7a6:	1ad3      	subs	r3, r2, r3
 800b7a8:	b299      	uxth	r1, r3
 800b7aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7ae:	883a      	ldrh	r2, [r7, #0]
 800b7b0:	2401      	movs	r4, #1
 800b7b2:	9400      	str	r4, [sp, #0]
 800b7b4:	f7ff fcda 	bl	800b16c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 800b7b8:	89ba      	ldrh	r2, [r7, #12]
 800b7ba:	88fb      	ldrh	r3, [r7, #6]
 800b7bc:	4413      	add	r3, r2
 800b7be:	b298      	uxth	r0, r3
 800b7c0:	89fb      	ldrh	r3, [r7, #14]
 800b7c2:	88ba      	ldrh	r2, [r7, #4]
 800b7c4:	1ad3      	subs	r3, r2, r3
 800b7c6:	b299      	uxth	r1, r3
 800b7c8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7cc:	883a      	ldrh	r2, [r7, #0]
 800b7ce:	2401      	movs	r4, #1
 800b7d0:	9400      	str	r4, [sp, #0]
 800b7d2:	f7ff fccb 	bl	800b16c <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 800b7d6:	89ba      	ldrh	r2, [r7, #12]
 800b7d8:	88fb      	ldrh	r3, [r7, #6]
 800b7da:	4413      	add	r3, r2
 800b7dc:	b298      	uxth	r0, r3
 800b7de:	89fa      	ldrh	r2, [r7, #14]
 800b7e0:	88bb      	ldrh	r3, [r7, #4]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	b299      	uxth	r1, r3
 800b7e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b7ea:	883a      	ldrh	r2, [r7, #0]
 800b7ec:	2401      	movs	r4, #1
 800b7ee:	9400      	str	r4, [sp, #0]
 800b7f0:	f7ff fcbc 	bl	800b16c <Paint_DrawPoint>

            if (Esp < 0 )
 800b7f4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	da09      	bge.n	800b810 <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 800b7fc:	89fb      	ldrh	r3, [r7, #14]
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	b29a      	uxth	r2, r3
 800b802:	897b      	ldrh	r3, [r7, #10]
 800b804:	4413      	add	r3, r2
 800b806:	b29b      	uxth	r3, r3
 800b808:	3306      	adds	r3, #6
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	817b      	strh	r3, [r7, #10]
 800b80e:	e013      	b.n	800b838 <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800b810:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b814:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b818:	1ad3      	subs	r3, r2, r3
 800b81a:	b29b      	uxth	r3, r3
 800b81c:	009b      	lsls	r3, r3, #2
 800b81e:	b29a      	uxth	r2, r3
 800b820:	897b      	ldrh	r3, [r7, #10]
 800b822:	4413      	add	r3, r2
 800b824:	b29b      	uxth	r3, r3
 800b826:	330a      	adds	r3, #10
 800b828:	b29b      	uxth	r3, r3
 800b82a:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800b82c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b830:	b29b      	uxth	r3, r3
 800b832:	3b01      	subs	r3, #1
 800b834:	b29b      	uxth	r3, r3
 800b836:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800b838:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b83c:	b29b      	uxth	r3, r3
 800b83e:	3301      	adds	r3, #1
 800b840:	b29b      	uxth	r3, r3
 800b842:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 800b844:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b848:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	f77f af59 	ble.w	800b704 <Paint_DrawCircle+0x1c4>
        }
    }
}
 800b852:	3714      	adds	r7, #20
 800b854:	46bd      	mov	sp, r7
 800b856:	bd90      	pop	{r4, r7, pc}

0800b858 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b088      	sub	sp, #32
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	607b      	str	r3, [r7, #4]
 800b860:	4603      	mov	r3, r0
 800b862:	81fb      	strh	r3, [r7, #14]
 800b864:	460b      	mov	r3, r1
 800b866:	81bb      	strh	r3, [r7, #12]
 800b868:	4613      	mov	r3, r2
 800b86a:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800b86c:	4b4d      	ldr	r3, [pc, #308]	; (800b9a4 <Paint_DrawChar+0x14c>)
 800b86e:	889b      	ldrh	r3, [r3, #4]
 800b870:	89fa      	ldrh	r2, [r7, #14]
 800b872:	429a      	cmp	r2, r3
 800b874:	d804      	bhi.n	800b880 <Paint_DrawChar+0x28>
 800b876:	4b4b      	ldr	r3, [pc, #300]	; (800b9a4 <Paint_DrawChar+0x14c>)
 800b878:	88db      	ldrh	r3, [r3, #6]
 800b87a:	89ba      	ldrh	r2, [r7, #12]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d903      	bls.n	800b888 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800b880:	4849      	ldr	r0, [pc, #292]	; (800b9a8 <Paint_DrawChar+0x150>)
 800b882:	f001 f887 	bl	800c994 <puts>
        return;
 800b886:	e089      	b.n	800b99c <Paint_DrawChar+0x144>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800b888:	7afb      	ldrb	r3, [r7, #11]
 800b88a:	3b20      	subs	r3, #32
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	88d2      	ldrh	r2, [r2, #6]
 800b890:	fb02 f303 	mul.w	r3, r2, r3
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	8892      	ldrh	r2, [r2, #4]
 800b898:	08d2      	lsrs	r2, r2, #3
 800b89a:	b292      	uxth	r2, r2
 800b89c:	4611      	mov	r1, r2
 800b89e:	687a      	ldr	r2, [r7, #4]
 800b8a0:	8892      	ldrh	r2, [r2, #4]
 800b8a2:	f002 0207 	and.w	r2, r2, #7
 800b8a6:	b292      	uxth	r2, r2
 800b8a8:	2a00      	cmp	r2, #0
 800b8aa:	bf14      	ite	ne
 800b8ac:	2201      	movne	r2, #1
 800b8ae:	2200      	moveq	r2, #0
 800b8b0:	b2d2      	uxtb	r2, r2
 800b8b2:	440a      	add	r2, r1
 800b8b4:	fb02 f303 	mul.w	r3, r2, r3
 800b8b8:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	681a      	ldr	r2, [r3, #0]
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	4413      	add	r3, r2
 800b8c2:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	83fb      	strh	r3, [r7, #30]
 800b8c8:	e063      	b.n	800b992 <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	83bb      	strh	r3, [r7, #28]
 800b8ce:	e04e      	b.n	800b96e <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800b8d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b8d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b8d6:	4293      	cmp	r3, r2
 800b8d8:	d118      	bne.n	800b90c <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 800b8da:	69bb      	ldr	r3, [r7, #24]
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	4619      	mov	r1, r3
 800b8e0:	8bbb      	ldrh	r3, [r7, #28]
 800b8e2:	f003 0307 	and.w	r3, r3, #7
 800b8e6:	2280      	movs	r2, #128	; 0x80
 800b8e8:	fa42 f303 	asr.w	r3, r2, r3
 800b8ec:	400b      	ands	r3, r1
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d031      	beq.n	800b956 <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800b8f2:	89fa      	ldrh	r2, [r7, #14]
 800b8f4:	8bbb      	ldrh	r3, [r7, #28]
 800b8f6:	4413      	add	r3, r2
 800b8f8:	b298      	uxth	r0, r3
 800b8fa:	89ba      	ldrh	r2, [r7, #12]
 800b8fc:	8bfb      	ldrh	r3, [r7, #30]
 800b8fe:	4413      	add	r3, r2
 800b900:	b29b      	uxth	r3, r3
 800b902:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b904:	4619      	mov	r1, r3
 800b906:	f7ff fa15 	bl	800ad34 <Paint_SetPixel>
 800b90a:	e024      	b.n	800b956 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	4619      	mov	r1, r3
 800b912:	8bbb      	ldrh	r3, [r7, #28]
 800b914:	f003 0307 	and.w	r3, r3, #7
 800b918:	2280      	movs	r2, #128	; 0x80
 800b91a:	fa42 f303 	asr.w	r3, r2, r3
 800b91e:	400b      	ands	r3, r1
 800b920:	2b00      	cmp	r3, #0
 800b922:	d00c      	beq.n	800b93e <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800b924:	89fa      	ldrh	r2, [r7, #14]
 800b926:	8bbb      	ldrh	r3, [r7, #28]
 800b928:	4413      	add	r3, r2
 800b92a:	b298      	uxth	r0, r3
 800b92c:	89ba      	ldrh	r2, [r7, #12]
 800b92e:	8bfb      	ldrh	r3, [r7, #30]
 800b930:	4413      	add	r3, r2
 800b932:	b29b      	uxth	r3, r3
 800b934:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b936:	4619      	mov	r1, r3
 800b938:	f7ff f9fc 	bl	800ad34 <Paint_SetPixel>
 800b93c:	e00b      	b.n	800b956 <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800b93e:	89fa      	ldrh	r2, [r7, #14]
 800b940:	8bbb      	ldrh	r3, [r7, #28]
 800b942:	4413      	add	r3, r2
 800b944:	b298      	uxth	r0, r3
 800b946:	89ba      	ldrh	r2, [r7, #12]
 800b948:	8bfb      	ldrh	r3, [r7, #30]
 800b94a:	4413      	add	r3, r2
 800b94c:	b29b      	uxth	r3, r3
 800b94e:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b950:	4619      	mov	r1, r3
 800b952:	f7ff f9ef 	bl	800ad34 <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800b956:	8bbb      	ldrh	r3, [r7, #28]
 800b958:	f003 0307 	and.w	r3, r3, #7
 800b95c:	b29b      	uxth	r3, r3
 800b95e:	2b07      	cmp	r3, #7
 800b960:	d102      	bne.n	800b968 <Paint_DrawChar+0x110>
                ptr++;
 800b962:	69bb      	ldr	r3, [r7, #24]
 800b964:	3301      	adds	r3, #1
 800b966:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800b968:	8bbb      	ldrh	r3, [r7, #28]
 800b96a:	3301      	adds	r3, #1
 800b96c:	83bb      	strh	r3, [r7, #28]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	889b      	ldrh	r3, [r3, #4]
 800b972:	8bba      	ldrh	r2, [r7, #28]
 800b974:	429a      	cmp	r2, r3
 800b976:	d3ab      	bcc.n	800b8d0 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	889b      	ldrh	r3, [r3, #4]
 800b97c:	f003 0307 	and.w	r3, r3, #7
 800b980:	b29b      	uxth	r3, r3
 800b982:	2b00      	cmp	r3, #0
 800b984:	d002      	beq.n	800b98c <Paint_DrawChar+0x134>
            ptr++;
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	3301      	adds	r3, #1
 800b98a:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800b98c:	8bfb      	ldrh	r3, [r7, #30]
 800b98e:	3301      	adds	r3, #1
 800b990:	83fb      	strh	r3, [r7, #30]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	88db      	ldrh	r3, [r3, #6]
 800b996:	8bfa      	ldrh	r2, [r7, #30]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d396      	bcc.n	800b8ca <Paint_DrawChar+0x72>
    }// Write all
}
 800b99c:	3720      	adds	r7, #32
 800b99e:	46bd      	mov	sp, r7
 800b9a0:	bd80      	pop	{r7, pc}
 800b9a2:	bf00      	nop
 800b9a4:	20000a38 	.word	0x20000a38
 800b9a8:	0800fcd4 	.word	0x0800fcd4

0800b9ac <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800b9ac:	b580      	push	{r7, lr}
 800b9ae:	b088      	sub	sp, #32
 800b9b0:	af02      	add	r7, sp, #8
 800b9b2:	60ba      	str	r2, [r7, #8]
 800b9b4:	607b      	str	r3, [r7, #4]
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	81fb      	strh	r3, [r7, #14]
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800b9be:	89fb      	ldrh	r3, [r7, #14]
 800b9c0:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800b9c2:	89bb      	ldrh	r3, [r7, #12]
 800b9c4:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800b9c6:	4b21      	ldr	r3, [pc, #132]	; (800ba4c <Paint_DrawString_EN+0xa0>)
 800b9c8:	889b      	ldrh	r3, [r3, #4]
 800b9ca:	89fa      	ldrh	r2, [r7, #14]
 800b9cc:	429a      	cmp	r2, r3
 800b9ce:	d804      	bhi.n	800b9da <Paint_DrawString_EN+0x2e>
 800b9d0:	4b1e      	ldr	r3, [pc, #120]	; (800ba4c <Paint_DrawString_EN+0xa0>)
 800b9d2:	88db      	ldrh	r3, [r3, #6]
 800b9d4:	89ba      	ldrh	r2, [r7, #12]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d931      	bls.n	800ba3e <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800b9da:	481d      	ldr	r0, [pc, #116]	; (800ba50 <Paint_DrawString_EN+0xa4>)
 800b9dc:	f000 ffda 	bl	800c994 <puts>
        return;
 800b9e0:	e031      	b.n	800ba46 <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800b9e2:	8afb      	ldrh	r3, [r7, #22]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	8892      	ldrh	r2, [r2, #4]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	4a18      	ldr	r2, [pc, #96]	; (800ba4c <Paint_DrawString_EN+0xa0>)
 800b9ec:	8892      	ldrh	r2, [r2, #4]
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	dd06      	ble.n	800ba00 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 800b9f2:	89fb      	ldrh	r3, [r7, #14]
 800b9f4:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	88da      	ldrh	r2, [r3, #6]
 800b9fa:	8abb      	ldrh	r3, [r7, #20]
 800b9fc:	4413      	add	r3, r2
 800b9fe:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800ba00:	8abb      	ldrh	r3, [r7, #20]
 800ba02:	687a      	ldr	r2, [r7, #4]
 800ba04:	88d2      	ldrh	r2, [r2, #6]
 800ba06:	4413      	add	r3, r2
 800ba08:	4a10      	ldr	r2, [pc, #64]	; (800ba4c <Paint_DrawString_EN+0xa0>)
 800ba0a:	88d2      	ldrh	r2, [r2, #6]
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	dd03      	ble.n	800ba18 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 800ba10:	89fb      	ldrh	r3, [r7, #14]
 800ba12:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800ba14:	89bb      	ldrh	r3, [r7, #12]
 800ba16:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	781a      	ldrb	r2, [r3, #0]
 800ba1c:	8ab9      	ldrh	r1, [r7, #20]
 800ba1e:	8af8      	ldrh	r0, [r7, #22]
 800ba20:	8c3b      	ldrh	r3, [r7, #32]
 800ba22:	9301      	str	r3, [sp, #4]
 800ba24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ba26:	9300      	str	r3, [sp, #0]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	f7ff ff15 	bl	800b858 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	3301      	adds	r3, #1
 800ba32:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	889a      	ldrh	r2, [r3, #4]
 800ba38:	8afb      	ldrh	r3, [r7, #22]
 800ba3a:	4413      	add	r3, r2
 800ba3c:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1cd      	bne.n	800b9e2 <Paint_DrawString_EN+0x36>
    }
}
 800ba46:	3718      	adds	r7, #24
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	20000a38 	.word	0x20000a38
 800ba50:	0800fd14 	.word	0x0800fd14

0800ba54 <OLED_Reset>:
/*******************************************************************************
function:
            Hardware reset
*******************************************************************************/
static void OLED_Reset(void)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	af00      	add	r7, sp, #0
	OLED_RST_1;
 800ba58:	2201      	movs	r2, #1
 800ba5a:	2110      	movs	r1, #16
 800ba5c:	480b      	ldr	r0, [pc, #44]	; (800ba8c <OLED_Reset+0x38>)
 800ba5e:	f7fa fde7 	bl	8006630 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800ba62:	2064      	movs	r0, #100	; 0x64
 800ba64:	f7ff f87c 	bl	800ab60 <Driver_Delay_ms>
    OLED_RST_0;
 800ba68:	2200      	movs	r2, #0
 800ba6a:	2110      	movs	r1, #16
 800ba6c:	4807      	ldr	r0, [pc, #28]	; (800ba8c <OLED_Reset+0x38>)
 800ba6e:	f7fa fddf 	bl	8006630 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800ba72:	2064      	movs	r0, #100	; 0x64
 800ba74:	f7ff f874 	bl	800ab60 <Driver_Delay_ms>
    OLED_RST_1;
 800ba78:	2201      	movs	r2, #1
 800ba7a:	2110      	movs	r1, #16
 800ba7c:	4803      	ldr	r0, [pc, #12]	; (800ba8c <OLED_Reset+0x38>)
 800ba7e:	f7fa fdd7 	bl	8006630 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800ba82:	2064      	movs	r0, #100	; 0x64
 800ba84:	f7ff f86c 	bl	800ab60 <Driver_Delay_ms>
}
 800ba88:	bf00      	nop
 800ba8a:	bd80      	pop	{r7, pc}
 800ba8c:	48000400 	.word	0x48000400

0800ba90 <OLED_WriteReg>:
/*******************************************************************************
function:
            Write register address and data
*******************************************************************************/
static void OLED_WriteReg(uint8_t Reg)
{
 800ba90:	b580      	push	{r7, lr}
 800ba92:	b082      	sub	sp, #8
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	4603      	mov	r3, r0
 800ba98:	71fb      	strb	r3, [r7, #7]
#if USE_SPI_4W
	OLED_DC_0;
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800baa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800baa4:	f7fa fdc4 	bl	8006630 <HAL_GPIO_WritePin>
	OLED_CS_0;
 800baa8:	2200      	movs	r2, #0
 800baaa:	2140      	movs	r1, #64	; 0x40
 800baac:	4807      	ldr	r0, [pc, #28]	; (800bacc <OLED_WriteReg+0x3c>)
 800baae:	f7fa fdbf 	bl	8006630 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Reg);
 800bab2:	79fb      	ldrb	r3, [r7, #7]
 800bab4:	4618      	mov	r0, r3
 800bab6:	f7ff f819 	bl	800aaec <SPI4W_Write_Byte>
    OLED_CS_1;
 800baba:	2201      	movs	r2, #1
 800babc:	2140      	movs	r1, #64	; 0x40
 800babe:	4803      	ldr	r0, [pc, #12]	; (800bacc <OLED_WriteReg+0x3c>)
 800bac0:	f7fa fdb6 	bl	8006630 <HAL_GPIO_WritePin>
#elif USE_IIC
    I2C_Write_Byte(Reg,IIC_CMD);
#endif
}
 800bac4:	bf00      	nop
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}
 800bacc:	48000400 	.word	0x48000400

0800bad0 <OLED_WriteData>:

static void OLED_WriteData(uint8_t Data)
{   
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	4603      	mov	r3, r0
 800bad8:	71fb      	strb	r3, [r7, #7]
#if USE_SPI_4W
	OLED_DC_1;
 800bada:	2201      	movs	r2, #1
 800badc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800bae0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bae4:	f7fa fda4 	bl	8006630 <HAL_GPIO_WritePin>
	OLED_CS_0;
 800bae8:	2200      	movs	r2, #0
 800baea:	2140      	movs	r1, #64	; 0x40
 800baec:	4807      	ldr	r0, [pc, #28]	; (800bb0c <OLED_WriteData+0x3c>)
 800baee:	f7fa fd9f 	bl	8006630 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Data);
 800baf2:	79fb      	ldrb	r3, [r7, #7]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7fe fff9 	bl	800aaec <SPI4W_Write_Byte>
    OLED_CS_1;
 800bafa:	2201      	movs	r2, #1
 800bafc:	2140      	movs	r1, #64	; 0x40
 800bafe:	4803      	ldr	r0, [pc, #12]	; (800bb0c <OLED_WriteData+0x3c>)
 800bb00:	f7fa fd96 	bl	8006630 <HAL_GPIO_WritePin>
#elif USE_IIC
    I2C_Write_Byte(Data,IIC_RAM);
#endif
}
 800bb04:	bf00      	nop
 800bb06:	3708      	adds	r7, #8
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	bd80      	pop	{r7, pc}
 800bb0c:	48000400 	.word	0x48000400

0800bb10 <OLED_InitReg>:
/*******************************************************************************
function:
        Common register initialization
*******************************************************************************/
static void OLED_InitReg(void)
{
 800bb10:	b580      	push	{r7, lr}
 800bb12:	af00      	add	r7, sp, #0
    OLED_WriteReg(0xae);//--turn off oled panel
 800bb14:	20ae      	movs	r0, #174	; 0xae
 800bb16:	f7ff ffbb 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0x15);    //   set column address
 800bb1a:	2015      	movs	r0, #21
 800bb1c:	f7ff ffb8 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start column   0
 800bb20:	2000      	movs	r0, #0
 800bb22:	f7ff ffb5 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end column   127
 800bb26:	207f      	movs	r0, #127	; 0x7f
 800bb28:	f7ff ffb2 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0x75);    //   set row address
 800bb2c:	2075      	movs	r0, #117	; 0x75
 800bb2e:	f7ff ffaf 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start row   0
 800bb32:	2000      	movs	r0, #0
 800bb34:	f7ff ffac 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end row   127
 800bb38:	207f      	movs	r0, #127	; 0x7f
 800bb3a:	f7ff ffa9 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0x81);  // set contrast control
 800bb3e:	2081      	movs	r0, #129	; 0x81
 800bb40:	f7ff ffa6 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x80);
 800bb44:	2080      	movs	r0, #128	; 0x80
 800bb46:	f7ff ffa3 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xa0);    // gment remap
 800bb4a:	20a0      	movs	r0, #160	; 0xa0
 800bb4c:	f7ff ffa0 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x51);   //51
 800bb50:	2051      	movs	r0, #81	; 0x51
 800bb52:	f7ff ff9d 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xa1);  // start line
 800bb56:	20a1      	movs	r0, #161	; 0xa1
 800bb58:	f7ff ff9a 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800bb5c:	2000      	movs	r0, #0
 800bb5e:	f7ff ff97 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xa2);  // display offset
 800bb62:	20a2      	movs	r0, #162	; 0xa2
 800bb64:	f7ff ff94 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800bb68:	2000      	movs	r0, #0
 800bb6a:	f7ff ff91 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xa4);    // rmal display
 800bb6e:	20a4      	movs	r0, #164	; 0xa4
 800bb70:	f7ff ff8e 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0xa8);    // set multiplex ratio
 800bb74:	20a8      	movs	r0, #168	; 0xa8
 800bb76:	f7ff ff8b 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x7f);
 800bb7a:	207f      	movs	r0, #127	; 0x7f
 800bb7c:	f7ff ff88 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xb1);  // set phase leghth
 800bb80:	20b1      	movs	r0, #177	; 0xb1
 800bb82:	f7ff ff85 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0xf1);
 800bb86:	20f1      	movs	r0, #241	; 0xf1
 800bb88:	f7ff ff82 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xb3);  // set dclk
 800bb8c:	20b3      	movs	r0, #179	; 0xb3
 800bb8e:	f7ff ff7f 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x00);  //80Hz:0xc1 90Hz:0xe1   100Hz:0x00   110Hz:0x30 120Hz:0x50   130Hz:0x70     01
 800bb92:	2000      	movs	r0, #0
 800bb94:	f7ff ff7c 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xab);  //
 800bb98:	20ab      	movs	r0, #171	; 0xab
 800bb9a:	f7ff ff79 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x01);  //
 800bb9e:	2001      	movs	r0, #1
 800bba0:	f7ff ff76 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xb6);  // set phase leghth
 800bba4:	20b6      	movs	r0, #182	; 0xb6
 800bba6:	f7ff ff73 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800bbaa:	200f      	movs	r0, #15
 800bbac:	f7ff ff70 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xbe);
 800bbb0:	20be      	movs	r0, #190	; 0xbe
 800bbb2:	f7ff ff6d 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800bbb6:	200f      	movs	r0, #15
 800bbb8:	f7ff ff6a 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xbc);
 800bbbc:	20bc      	movs	r0, #188	; 0xbc
 800bbbe:	f7ff ff67 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x08);
 800bbc2:	2008      	movs	r0, #8
 800bbc4:	f7ff ff64 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xd5);
 800bbc8:	20d5      	movs	r0, #213	; 0xd5
 800bbca:	f7ff ff61 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x62);
 800bbce:	2062      	movs	r0, #98	; 0x62
 800bbd0:	f7ff ff5e 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0xfd);
 800bbd4:	20fd      	movs	r0, #253	; 0xfd
 800bbd6:	f7ff ff5b 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(0x12);
 800bbda:	2012      	movs	r0, #18
 800bbdc:	f7ff ff58 	bl	800ba90 <OLED_WriteReg>

}
 800bbe0:	bf00      	nop
 800bbe2:	bd80      	pop	{r7, pc}

0800bbe4 <OLED_1in5_Init>:
/********************************************************************************
function:
            initialization
********************************************************************************/
void OLED_1in5_Init(void)
{
 800bbe4:	b580      	push	{r7, lr}
 800bbe6:	af00      	add	r7, sp, #0
    //Hardware reset
    OLED_Reset();
 800bbe8:	f7ff ff34 	bl	800ba54 <OLED_Reset>

    //Set the initialization register
    OLED_InitReg();
 800bbec:	f7ff ff90 	bl	800bb10 <OLED_InitReg>
    Driver_Delay_ms(200);
 800bbf0:	20c8      	movs	r0, #200	; 0xc8
 800bbf2:	f7fe ffb5 	bl	800ab60 <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_WriteReg(0xAF);
 800bbf6:	20af      	movs	r0, #175	; 0xaf
 800bbf8:	f7ff ff4a 	bl	800ba90 <OLED_WriteReg>
}
 800bbfc:	bf00      	nop
 800bbfe:	bd80      	pop	{r7, pc}

0800bc00 <OLED_SetWindow>:
        Ystart :   Y direction Start coordinates
        Xend   :   X direction end coordinates
        Yend   :   Y direction end coordinates
********************************************************************************/
static void OLED_SetWindow(UBYTE Xstart, UBYTE Ystart, UBYTE Xend, UBYTE Yend)
{
 800bc00:	b590      	push	{r4, r7, lr}
 800bc02:	b083      	sub	sp, #12
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	4604      	mov	r4, r0
 800bc08:	4608      	mov	r0, r1
 800bc0a:	4611      	mov	r1, r2
 800bc0c:	461a      	mov	r2, r3
 800bc0e:	4623      	mov	r3, r4
 800bc10:	71fb      	strb	r3, [r7, #7]
 800bc12:	4603      	mov	r3, r0
 800bc14:	71bb      	strb	r3, [r7, #6]
 800bc16:	460b      	mov	r3, r1
 800bc18:	717b      	strb	r3, [r7, #5]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	713b      	strb	r3, [r7, #4]
    if((Xstart > OLED_1in5_WIDTH) || (Ystart > OLED_1in5_HEIGHT) ||
 800bc1e:	79fb      	ldrb	r3, [r7, #7]
 800bc20:	2b80      	cmp	r3, #128	; 0x80
 800bc22:	d827      	bhi.n	800bc74 <OLED_SetWindow+0x74>
 800bc24:	79bb      	ldrb	r3, [r7, #6]
 800bc26:	2b80      	cmp	r3, #128	; 0x80
 800bc28:	d824      	bhi.n	800bc74 <OLED_SetWindow+0x74>
 800bc2a:	797b      	ldrb	r3, [r7, #5]
 800bc2c:	2b80      	cmp	r3, #128	; 0x80
 800bc2e:	d821      	bhi.n	800bc74 <OLED_SetWindow+0x74>
       (Xend > OLED_1in5_WIDTH) || (Yend > OLED_1in5_HEIGHT))
 800bc30:	793b      	ldrb	r3, [r7, #4]
 800bc32:	2b80      	cmp	r3, #128	; 0x80
 800bc34:	d81e      	bhi.n	800bc74 <OLED_SetWindow+0x74>
        return;

    OLED_WriteReg(0x15);
 800bc36:	2015      	movs	r0, #21
 800bc38:	f7ff ff2a 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(Xstart/2);
 800bc3c:	79fb      	ldrb	r3, [r7, #7]
 800bc3e:	085b      	lsrs	r3, r3, #1
 800bc40:	b2db      	uxtb	r3, r3
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7ff ff24 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(Xend/2 - 1);
 800bc48:	797b      	ldrb	r3, [r7, #5]
 800bc4a:	085b      	lsrs	r3, r3, #1
 800bc4c:	b2db      	uxtb	r3, r3
 800bc4e:	3b01      	subs	r3, #1
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7ff ff1c 	bl	800ba90 <OLED_WriteReg>

    OLED_WriteReg(0x75);
 800bc58:	2075      	movs	r0, #117	; 0x75
 800bc5a:	f7ff ff19 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(Ystart);
 800bc5e:	79bb      	ldrb	r3, [r7, #6]
 800bc60:	4618      	mov	r0, r3
 800bc62:	f7ff ff15 	bl	800ba90 <OLED_WriteReg>
    OLED_WriteReg(Yend - 1);
 800bc66:	793b      	ldrb	r3, [r7, #4]
 800bc68:	3b01      	subs	r3, #1
 800bc6a:	b2db      	uxtb	r3, r3
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f7ff ff0f 	bl	800ba90 <OLED_WriteReg>
 800bc72:	e000      	b.n	800bc76 <OLED_SetWindow+0x76>
        return;
 800bc74:	bf00      	nop
}
 800bc76:	370c      	adds	r7, #12
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd90      	pop	{r4, r7, pc}

0800bc7c <OLED_1in5_Clear>:
/********************************************************************************
function:
            Clear screen
********************************************************************************/
void OLED_1in5_Clear(void)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
    UWORD i;
    OLED_SetWindow(0, 0, 128, 128);
 800bc82:	2380      	movs	r3, #128	; 0x80
 800bc84:	2280      	movs	r2, #128	; 0x80
 800bc86:	2100      	movs	r1, #0
 800bc88:	2000      	movs	r0, #0
 800bc8a:	f7ff ffb9 	bl	800bc00 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 800bc8e:	2300      	movs	r3, #0
 800bc90:	80fb      	strh	r3, [r7, #6]
 800bc92:	e005      	b.n	800bca0 <OLED_1in5_Clear+0x24>
        OLED_WriteData(0x00);
 800bc94:	2000      	movs	r0, #0
 800bc96:	f7ff ff1b 	bl	800bad0 <OLED_WriteData>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 800bc9a:	88fb      	ldrh	r3, [r7, #6]
 800bc9c:	3301      	adds	r3, #1
 800bc9e:	80fb      	strh	r3, [r7, #6]
 800bca0:	88fb      	ldrh	r3, [r7, #6]
 800bca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bca6:	d3f5      	bcc.n	800bc94 <OLED_1in5_Clear+0x18>
    }
}
 800bca8:	bf00      	nop
 800bcaa:	bf00      	nop
 800bcac:	3708      	adds	r7, #8
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <OLED_1in5_Display>:

/********************************************************************************
function:   Update all memory to OLED
********************************************************************************/
void OLED_1in5_Display(const UBYTE *Image)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b084      	sub	sp, #16
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
    UWORD i, j, temp;
    OLED_SetWindow(0, 0, 128, 128);
 800bcba:	2380      	movs	r3, #128	; 0x80
 800bcbc:	2280      	movs	r2, #128	; 0x80
 800bcbe:	2100      	movs	r1, #0
 800bcc0:	2000      	movs	r0, #0
 800bcc2:	f7ff ff9d 	bl	800bc00 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	81fb      	strh	r3, [r7, #14]
 800bcca:	e019      	b.n	800bd00 <OLED_1in5_Display+0x4e>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 800bccc:	2300      	movs	r3, #0
 800bcce:	81bb      	strh	r3, [r7, #12]
 800bcd0:	e010      	b.n	800bcf4 <OLED_1in5_Display+0x42>
        {
            temp = Image[j + i*64];
 800bcd2:	89ba      	ldrh	r2, [r7, #12]
 800bcd4:	89fb      	ldrh	r3, [r7, #14]
 800bcd6:	019b      	lsls	r3, r3, #6
 800bcd8:	4413      	add	r3, r2
 800bcda:	461a      	mov	r2, r3
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	4413      	add	r3, r2
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	817b      	strh	r3, [r7, #10]
            OLED_WriteData(temp);
 800bce4:	897b      	ldrh	r3, [r7, #10]
 800bce6:	b2db      	uxtb	r3, r3
 800bce8:	4618      	mov	r0, r3
 800bcea:	f7ff fef1 	bl	800bad0 <OLED_WriteData>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 800bcee:	89bb      	ldrh	r3, [r7, #12]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	81bb      	strh	r3, [r7, #12]
 800bcf4:	89bb      	ldrh	r3, [r7, #12]
 800bcf6:	2b3f      	cmp	r3, #63	; 0x3f
 800bcf8:	d9eb      	bls.n	800bcd2 <OLED_1in5_Display+0x20>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 800bcfa:	89fb      	ldrh	r3, [r7, #14]
 800bcfc:	3301      	adds	r3, #1
 800bcfe:	81fb      	strh	r3, [r7, #14]
 800bd00:	89fb      	ldrh	r3, [r7, #14]
 800bd02:	2b7f      	cmp	r3, #127	; 0x7f
 800bd04:	d9e2      	bls.n	800bccc <OLED_1in5_Display+0x1a>
        }
}
 800bd06:	bf00      	nop
 800bd08:	bf00      	nop
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <malloc>:
 800bd10:	4b02      	ldr	r3, [pc, #8]	; (800bd1c <malloc+0xc>)
 800bd12:	4601      	mov	r1, r0
 800bd14:	6818      	ldr	r0, [r3, #0]
 800bd16:	f000 b823 	b.w	800bd60 <_malloc_r>
 800bd1a:	bf00      	nop
 800bd1c:	200000d4 	.word	0x200000d4

0800bd20 <sbrk_aligned>:
 800bd20:	b570      	push	{r4, r5, r6, lr}
 800bd22:	4e0e      	ldr	r6, [pc, #56]	; (800bd5c <sbrk_aligned+0x3c>)
 800bd24:	460c      	mov	r4, r1
 800bd26:	6831      	ldr	r1, [r6, #0]
 800bd28:	4605      	mov	r5, r0
 800bd2a:	b911      	cbnz	r1, 800bd32 <sbrk_aligned+0x12>
 800bd2c:	f000 ff72 	bl	800cc14 <_sbrk_r>
 800bd30:	6030      	str	r0, [r6, #0]
 800bd32:	4621      	mov	r1, r4
 800bd34:	4628      	mov	r0, r5
 800bd36:	f000 ff6d 	bl	800cc14 <_sbrk_r>
 800bd3a:	1c43      	adds	r3, r0, #1
 800bd3c:	d00a      	beq.n	800bd54 <sbrk_aligned+0x34>
 800bd3e:	1cc4      	adds	r4, r0, #3
 800bd40:	f024 0403 	bic.w	r4, r4, #3
 800bd44:	42a0      	cmp	r0, r4
 800bd46:	d007      	beq.n	800bd58 <sbrk_aligned+0x38>
 800bd48:	1a21      	subs	r1, r4, r0
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	f000 ff62 	bl	800cc14 <_sbrk_r>
 800bd50:	3001      	adds	r0, #1
 800bd52:	d101      	bne.n	800bd58 <sbrk_aligned+0x38>
 800bd54:	f04f 34ff 	mov.w	r4, #4294967295
 800bd58:	4620      	mov	r0, r4
 800bd5a:	bd70      	pop	{r4, r5, r6, pc}
 800bd5c:	20000a54 	.word	0x20000a54

0800bd60 <_malloc_r>:
 800bd60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd64:	1ccd      	adds	r5, r1, #3
 800bd66:	f025 0503 	bic.w	r5, r5, #3
 800bd6a:	3508      	adds	r5, #8
 800bd6c:	2d0c      	cmp	r5, #12
 800bd6e:	bf38      	it	cc
 800bd70:	250c      	movcc	r5, #12
 800bd72:	2d00      	cmp	r5, #0
 800bd74:	4607      	mov	r7, r0
 800bd76:	db01      	blt.n	800bd7c <_malloc_r+0x1c>
 800bd78:	42a9      	cmp	r1, r5
 800bd7a:	d905      	bls.n	800bd88 <_malloc_r+0x28>
 800bd7c:	230c      	movs	r3, #12
 800bd7e:	603b      	str	r3, [r7, #0]
 800bd80:	2600      	movs	r6, #0
 800bd82:	4630      	mov	r0, r6
 800bd84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800be5c <_malloc_r+0xfc>
 800bd8c:	f000 f868 	bl	800be60 <__malloc_lock>
 800bd90:	f8d8 3000 	ldr.w	r3, [r8]
 800bd94:	461c      	mov	r4, r3
 800bd96:	bb5c      	cbnz	r4, 800bdf0 <_malloc_r+0x90>
 800bd98:	4629      	mov	r1, r5
 800bd9a:	4638      	mov	r0, r7
 800bd9c:	f7ff ffc0 	bl	800bd20 <sbrk_aligned>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	4604      	mov	r4, r0
 800bda4:	d155      	bne.n	800be52 <_malloc_r+0xf2>
 800bda6:	f8d8 4000 	ldr.w	r4, [r8]
 800bdaa:	4626      	mov	r6, r4
 800bdac:	2e00      	cmp	r6, #0
 800bdae:	d145      	bne.n	800be3c <_malloc_r+0xdc>
 800bdb0:	2c00      	cmp	r4, #0
 800bdb2:	d048      	beq.n	800be46 <_malloc_r+0xe6>
 800bdb4:	6823      	ldr	r3, [r4, #0]
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4638      	mov	r0, r7
 800bdba:	eb04 0903 	add.w	r9, r4, r3
 800bdbe:	f000 ff29 	bl	800cc14 <_sbrk_r>
 800bdc2:	4581      	cmp	r9, r0
 800bdc4:	d13f      	bne.n	800be46 <_malloc_r+0xe6>
 800bdc6:	6821      	ldr	r1, [r4, #0]
 800bdc8:	1a6d      	subs	r5, r5, r1
 800bdca:	4629      	mov	r1, r5
 800bdcc:	4638      	mov	r0, r7
 800bdce:	f7ff ffa7 	bl	800bd20 <sbrk_aligned>
 800bdd2:	3001      	adds	r0, #1
 800bdd4:	d037      	beq.n	800be46 <_malloc_r+0xe6>
 800bdd6:	6823      	ldr	r3, [r4, #0]
 800bdd8:	442b      	add	r3, r5
 800bdda:	6023      	str	r3, [r4, #0]
 800bddc:	f8d8 3000 	ldr.w	r3, [r8]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d038      	beq.n	800be56 <_malloc_r+0xf6>
 800bde4:	685a      	ldr	r2, [r3, #4]
 800bde6:	42a2      	cmp	r2, r4
 800bde8:	d12b      	bne.n	800be42 <_malloc_r+0xe2>
 800bdea:	2200      	movs	r2, #0
 800bdec:	605a      	str	r2, [r3, #4]
 800bdee:	e00f      	b.n	800be10 <_malloc_r+0xb0>
 800bdf0:	6822      	ldr	r2, [r4, #0]
 800bdf2:	1b52      	subs	r2, r2, r5
 800bdf4:	d41f      	bmi.n	800be36 <_malloc_r+0xd6>
 800bdf6:	2a0b      	cmp	r2, #11
 800bdf8:	d917      	bls.n	800be2a <_malloc_r+0xca>
 800bdfa:	1961      	adds	r1, r4, r5
 800bdfc:	42a3      	cmp	r3, r4
 800bdfe:	6025      	str	r5, [r4, #0]
 800be00:	bf18      	it	ne
 800be02:	6059      	strne	r1, [r3, #4]
 800be04:	6863      	ldr	r3, [r4, #4]
 800be06:	bf08      	it	eq
 800be08:	f8c8 1000 	streq.w	r1, [r8]
 800be0c:	5162      	str	r2, [r4, r5]
 800be0e:	604b      	str	r3, [r1, #4]
 800be10:	4638      	mov	r0, r7
 800be12:	f104 060b 	add.w	r6, r4, #11
 800be16:	f000 f829 	bl	800be6c <__malloc_unlock>
 800be1a:	f026 0607 	bic.w	r6, r6, #7
 800be1e:	1d23      	adds	r3, r4, #4
 800be20:	1af2      	subs	r2, r6, r3
 800be22:	d0ae      	beq.n	800bd82 <_malloc_r+0x22>
 800be24:	1b9b      	subs	r3, r3, r6
 800be26:	50a3      	str	r3, [r4, r2]
 800be28:	e7ab      	b.n	800bd82 <_malloc_r+0x22>
 800be2a:	42a3      	cmp	r3, r4
 800be2c:	6862      	ldr	r2, [r4, #4]
 800be2e:	d1dd      	bne.n	800bdec <_malloc_r+0x8c>
 800be30:	f8c8 2000 	str.w	r2, [r8]
 800be34:	e7ec      	b.n	800be10 <_malloc_r+0xb0>
 800be36:	4623      	mov	r3, r4
 800be38:	6864      	ldr	r4, [r4, #4]
 800be3a:	e7ac      	b.n	800bd96 <_malloc_r+0x36>
 800be3c:	4634      	mov	r4, r6
 800be3e:	6876      	ldr	r6, [r6, #4]
 800be40:	e7b4      	b.n	800bdac <_malloc_r+0x4c>
 800be42:	4613      	mov	r3, r2
 800be44:	e7cc      	b.n	800bde0 <_malloc_r+0x80>
 800be46:	230c      	movs	r3, #12
 800be48:	603b      	str	r3, [r7, #0]
 800be4a:	4638      	mov	r0, r7
 800be4c:	f000 f80e 	bl	800be6c <__malloc_unlock>
 800be50:	e797      	b.n	800bd82 <_malloc_r+0x22>
 800be52:	6025      	str	r5, [r4, #0]
 800be54:	e7dc      	b.n	800be10 <_malloc_r+0xb0>
 800be56:	605b      	str	r3, [r3, #4]
 800be58:	deff      	udf	#255	; 0xff
 800be5a:	bf00      	nop
 800be5c:	20000a50 	.word	0x20000a50

0800be60 <__malloc_lock>:
 800be60:	4801      	ldr	r0, [pc, #4]	; (800be68 <__malloc_lock+0x8>)
 800be62:	f000 bf24 	b.w	800ccae <__retarget_lock_acquire_recursive>
 800be66:	bf00      	nop
 800be68:	20000b98 	.word	0x20000b98

0800be6c <__malloc_unlock>:
 800be6c:	4801      	ldr	r0, [pc, #4]	; (800be74 <__malloc_unlock+0x8>)
 800be6e:	f000 bf1f 	b.w	800ccb0 <__retarget_lock_release_recursive>
 800be72:	bf00      	nop
 800be74:	20000b98 	.word	0x20000b98

0800be78 <__cvt>:
 800be78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be7c:	ec55 4b10 	vmov	r4, r5, d0
 800be80:	2d00      	cmp	r5, #0
 800be82:	460e      	mov	r6, r1
 800be84:	4619      	mov	r1, r3
 800be86:	462b      	mov	r3, r5
 800be88:	bfbb      	ittet	lt
 800be8a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800be8e:	461d      	movlt	r5, r3
 800be90:	2300      	movge	r3, #0
 800be92:	232d      	movlt	r3, #45	; 0x2d
 800be94:	700b      	strb	r3, [r1, #0]
 800be96:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be98:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800be9c:	4691      	mov	r9, r2
 800be9e:	f023 0820 	bic.w	r8, r3, #32
 800bea2:	bfbc      	itt	lt
 800bea4:	4622      	movlt	r2, r4
 800bea6:	4614      	movlt	r4, r2
 800bea8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800beac:	d005      	beq.n	800beba <__cvt+0x42>
 800beae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800beb2:	d100      	bne.n	800beb6 <__cvt+0x3e>
 800beb4:	3601      	adds	r6, #1
 800beb6:	2102      	movs	r1, #2
 800beb8:	e000      	b.n	800bebc <__cvt+0x44>
 800beba:	2103      	movs	r1, #3
 800bebc:	ab03      	add	r3, sp, #12
 800bebe:	9301      	str	r3, [sp, #4]
 800bec0:	ab02      	add	r3, sp, #8
 800bec2:	9300      	str	r3, [sp, #0]
 800bec4:	ec45 4b10 	vmov	d0, r4, r5
 800bec8:	4653      	mov	r3, sl
 800beca:	4632      	mov	r2, r6
 800becc:	f000 ff7c 	bl	800cdc8 <_dtoa_r>
 800bed0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bed4:	4607      	mov	r7, r0
 800bed6:	d102      	bne.n	800bede <__cvt+0x66>
 800bed8:	f019 0f01 	tst.w	r9, #1
 800bedc:	d022      	beq.n	800bf24 <__cvt+0xac>
 800bede:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bee2:	eb07 0906 	add.w	r9, r7, r6
 800bee6:	d110      	bne.n	800bf0a <__cvt+0x92>
 800bee8:	783b      	ldrb	r3, [r7, #0]
 800beea:	2b30      	cmp	r3, #48	; 0x30
 800beec:	d10a      	bne.n	800bf04 <__cvt+0x8c>
 800beee:	2200      	movs	r2, #0
 800bef0:	2300      	movs	r3, #0
 800bef2:	4620      	mov	r0, r4
 800bef4:	4629      	mov	r1, r5
 800bef6:	f7f4 fe0f 	bl	8000b18 <__aeabi_dcmpeq>
 800befa:	b918      	cbnz	r0, 800bf04 <__cvt+0x8c>
 800befc:	f1c6 0601 	rsb	r6, r6, #1
 800bf00:	f8ca 6000 	str.w	r6, [sl]
 800bf04:	f8da 3000 	ldr.w	r3, [sl]
 800bf08:	4499      	add	r9, r3
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	4620      	mov	r0, r4
 800bf10:	4629      	mov	r1, r5
 800bf12:	f7f4 fe01 	bl	8000b18 <__aeabi_dcmpeq>
 800bf16:	b108      	cbz	r0, 800bf1c <__cvt+0xa4>
 800bf18:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf1c:	2230      	movs	r2, #48	; 0x30
 800bf1e:	9b03      	ldr	r3, [sp, #12]
 800bf20:	454b      	cmp	r3, r9
 800bf22:	d307      	bcc.n	800bf34 <__cvt+0xbc>
 800bf24:	9b03      	ldr	r3, [sp, #12]
 800bf26:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf28:	1bdb      	subs	r3, r3, r7
 800bf2a:	4638      	mov	r0, r7
 800bf2c:	6013      	str	r3, [r2, #0]
 800bf2e:	b004      	add	sp, #16
 800bf30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf34:	1c59      	adds	r1, r3, #1
 800bf36:	9103      	str	r1, [sp, #12]
 800bf38:	701a      	strb	r2, [r3, #0]
 800bf3a:	e7f0      	b.n	800bf1e <__cvt+0xa6>

0800bf3c <__exponent>:
 800bf3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf3e:	4603      	mov	r3, r0
 800bf40:	2900      	cmp	r1, #0
 800bf42:	bfb8      	it	lt
 800bf44:	4249      	neglt	r1, r1
 800bf46:	f803 2b02 	strb.w	r2, [r3], #2
 800bf4a:	bfb4      	ite	lt
 800bf4c:	222d      	movlt	r2, #45	; 0x2d
 800bf4e:	222b      	movge	r2, #43	; 0x2b
 800bf50:	2909      	cmp	r1, #9
 800bf52:	7042      	strb	r2, [r0, #1]
 800bf54:	dd2a      	ble.n	800bfac <__exponent+0x70>
 800bf56:	f10d 0207 	add.w	r2, sp, #7
 800bf5a:	4617      	mov	r7, r2
 800bf5c:	260a      	movs	r6, #10
 800bf5e:	4694      	mov	ip, r2
 800bf60:	fb91 f5f6 	sdiv	r5, r1, r6
 800bf64:	fb06 1415 	mls	r4, r6, r5, r1
 800bf68:	3430      	adds	r4, #48	; 0x30
 800bf6a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bf6e:	460c      	mov	r4, r1
 800bf70:	2c63      	cmp	r4, #99	; 0x63
 800bf72:	f102 32ff 	add.w	r2, r2, #4294967295
 800bf76:	4629      	mov	r1, r5
 800bf78:	dcf1      	bgt.n	800bf5e <__exponent+0x22>
 800bf7a:	3130      	adds	r1, #48	; 0x30
 800bf7c:	f1ac 0402 	sub.w	r4, ip, #2
 800bf80:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bf84:	1c41      	adds	r1, r0, #1
 800bf86:	4622      	mov	r2, r4
 800bf88:	42ba      	cmp	r2, r7
 800bf8a:	d30a      	bcc.n	800bfa2 <__exponent+0x66>
 800bf8c:	f10d 0209 	add.w	r2, sp, #9
 800bf90:	eba2 020c 	sub.w	r2, r2, ip
 800bf94:	42bc      	cmp	r4, r7
 800bf96:	bf88      	it	hi
 800bf98:	2200      	movhi	r2, #0
 800bf9a:	4413      	add	r3, r2
 800bf9c:	1a18      	subs	r0, r3, r0
 800bf9e:	b003      	add	sp, #12
 800bfa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfa2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bfa6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bfaa:	e7ed      	b.n	800bf88 <__exponent+0x4c>
 800bfac:	2330      	movs	r3, #48	; 0x30
 800bfae:	3130      	adds	r1, #48	; 0x30
 800bfb0:	7083      	strb	r3, [r0, #2]
 800bfb2:	70c1      	strb	r1, [r0, #3]
 800bfb4:	1d03      	adds	r3, r0, #4
 800bfb6:	e7f1      	b.n	800bf9c <__exponent+0x60>

0800bfb8 <_printf_float>:
 800bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfbc:	ed2d 8b02 	vpush	{d8}
 800bfc0:	b08d      	sub	sp, #52	; 0x34
 800bfc2:	460c      	mov	r4, r1
 800bfc4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bfc8:	4616      	mov	r6, r2
 800bfca:	461f      	mov	r7, r3
 800bfcc:	4605      	mov	r5, r0
 800bfce:	f000 fde9 	bl	800cba4 <_localeconv_r>
 800bfd2:	f8d0 a000 	ldr.w	sl, [r0]
 800bfd6:	4650      	mov	r0, sl
 800bfd8:	f7f4 f972 	bl	80002c0 <strlen>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	930a      	str	r3, [sp, #40]	; 0x28
 800bfe0:	6823      	ldr	r3, [r4, #0]
 800bfe2:	9305      	str	r3, [sp, #20]
 800bfe4:	f8d8 3000 	ldr.w	r3, [r8]
 800bfe8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bfec:	3307      	adds	r3, #7
 800bfee:	f023 0307 	bic.w	r3, r3, #7
 800bff2:	f103 0208 	add.w	r2, r3, #8
 800bff6:	f8c8 2000 	str.w	r2, [r8]
 800bffa:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bffe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c002:	9307      	str	r3, [sp, #28]
 800c004:	f8cd 8018 	str.w	r8, [sp, #24]
 800c008:	ee08 0a10 	vmov	s16, r0
 800c00c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800c010:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c014:	4b9e      	ldr	r3, [pc, #632]	; (800c290 <_printf_float+0x2d8>)
 800c016:	f04f 32ff 	mov.w	r2, #4294967295
 800c01a:	f7f4 fdaf 	bl	8000b7c <__aeabi_dcmpun>
 800c01e:	bb88      	cbnz	r0, 800c084 <_printf_float+0xcc>
 800c020:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c024:	4b9a      	ldr	r3, [pc, #616]	; (800c290 <_printf_float+0x2d8>)
 800c026:	f04f 32ff 	mov.w	r2, #4294967295
 800c02a:	f7f4 fd89 	bl	8000b40 <__aeabi_dcmple>
 800c02e:	bb48      	cbnz	r0, 800c084 <_printf_float+0xcc>
 800c030:	2200      	movs	r2, #0
 800c032:	2300      	movs	r3, #0
 800c034:	4640      	mov	r0, r8
 800c036:	4649      	mov	r1, r9
 800c038:	f7f4 fd78 	bl	8000b2c <__aeabi_dcmplt>
 800c03c:	b110      	cbz	r0, 800c044 <_printf_float+0x8c>
 800c03e:	232d      	movs	r3, #45	; 0x2d
 800c040:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c044:	4a93      	ldr	r2, [pc, #588]	; (800c294 <_printf_float+0x2dc>)
 800c046:	4b94      	ldr	r3, [pc, #592]	; (800c298 <_printf_float+0x2e0>)
 800c048:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c04c:	bf94      	ite	ls
 800c04e:	4690      	movls	r8, r2
 800c050:	4698      	movhi	r8, r3
 800c052:	2303      	movs	r3, #3
 800c054:	6123      	str	r3, [r4, #16]
 800c056:	9b05      	ldr	r3, [sp, #20]
 800c058:	f023 0304 	bic.w	r3, r3, #4
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	f04f 0900 	mov.w	r9, #0
 800c062:	9700      	str	r7, [sp, #0]
 800c064:	4633      	mov	r3, r6
 800c066:	aa0b      	add	r2, sp, #44	; 0x2c
 800c068:	4621      	mov	r1, r4
 800c06a:	4628      	mov	r0, r5
 800c06c:	f000 f9da 	bl	800c424 <_printf_common>
 800c070:	3001      	adds	r0, #1
 800c072:	f040 8090 	bne.w	800c196 <_printf_float+0x1de>
 800c076:	f04f 30ff 	mov.w	r0, #4294967295
 800c07a:	b00d      	add	sp, #52	; 0x34
 800c07c:	ecbd 8b02 	vpop	{d8}
 800c080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c084:	4642      	mov	r2, r8
 800c086:	464b      	mov	r3, r9
 800c088:	4640      	mov	r0, r8
 800c08a:	4649      	mov	r1, r9
 800c08c:	f7f4 fd76 	bl	8000b7c <__aeabi_dcmpun>
 800c090:	b140      	cbz	r0, 800c0a4 <_printf_float+0xec>
 800c092:	464b      	mov	r3, r9
 800c094:	2b00      	cmp	r3, #0
 800c096:	bfbc      	itt	lt
 800c098:	232d      	movlt	r3, #45	; 0x2d
 800c09a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c09e:	4a7f      	ldr	r2, [pc, #508]	; (800c29c <_printf_float+0x2e4>)
 800c0a0:	4b7f      	ldr	r3, [pc, #508]	; (800c2a0 <_printf_float+0x2e8>)
 800c0a2:	e7d1      	b.n	800c048 <_printf_float+0x90>
 800c0a4:	6863      	ldr	r3, [r4, #4]
 800c0a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c0aa:	9206      	str	r2, [sp, #24]
 800c0ac:	1c5a      	adds	r2, r3, #1
 800c0ae:	d13f      	bne.n	800c130 <_printf_float+0x178>
 800c0b0:	2306      	movs	r3, #6
 800c0b2:	6063      	str	r3, [r4, #4]
 800c0b4:	9b05      	ldr	r3, [sp, #20]
 800c0b6:	6861      	ldr	r1, [r4, #4]
 800c0b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c0bc:	2300      	movs	r3, #0
 800c0be:	9303      	str	r3, [sp, #12]
 800c0c0:	ab0a      	add	r3, sp, #40	; 0x28
 800c0c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c0c6:	ab09      	add	r3, sp, #36	; 0x24
 800c0c8:	ec49 8b10 	vmov	d0, r8, r9
 800c0cc:	9300      	str	r3, [sp, #0]
 800c0ce:	6022      	str	r2, [r4, #0]
 800c0d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c0d4:	4628      	mov	r0, r5
 800c0d6:	f7ff fecf 	bl	800be78 <__cvt>
 800c0da:	9b06      	ldr	r3, [sp, #24]
 800c0dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0de:	2b47      	cmp	r3, #71	; 0x47
 800c0e0:	4680      	mov	r8, r0
 800c0e2:	d108      	bne.n	800c0f6 <_printf_float+0x13e>
 800c0e4:	1cc8      	adds	r0, r1, #3
 800c0e6:	db02      	blt.n	800c0ee <_printf_float+0x136>
 800c0e8:	6863      	ldr	r3, [r4, #4]
 800c0ea:	4299      	cmp	r1, r3
 800c0ec:	dd41      	ble.n	800c172 <_printf_float+0x1ba>
 800c0ee:	f1ab 0302 	sub.w	r3, fp, #2
 800c0f2:	fa5f fb83 	uxtb.w	fp, r3
 800c0f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c0fa:	d820      	bhi.n	800c13e <_printf_float+0x186>
 800c0fc:	3901      	subs	r1, #1
 800c0fe:	465a      	mov	r2, fp
 800c100:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c104:	9109      	str	r1, [sp, #36]	; 0x24
 800c106:	f7ff ff19 	bl	800bf3c <__exponent>
 800c10a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c10c:	1813      	adds	r3, r2, r0
 800c10e:	2a01      	cmp	r2, #1
 800c110:	4681      	mov	r9, r0
 800c112:	6123      	str	r3, [r4, #16]
 800c114:	dc02      	bgt.n	800c11c <_printf_float+0x164>
 800c116:	6822      	ldr	r2, [r4, #0]
 800c118:	07d2      	lsls	r2, r2, #31
 800c11a:	d501      	bpl.n	800c120 <_printf_float+0x168>
 800c11c:	3301      	adds	r3, #1
 800c11e:	6123      	str	r3, [r4, #16]
 800c120:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c124:	2b00      	cmp	r3, #0
 800c126:	d09c      	beq.n	800c062 <_printf_float+0xaa>
 800c128:	232d      	movs	r3, #45	; 0x2d
 800c12a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c12e:	e798      	b.n	800c062 <_printf_float+0xaa>
 800c130:	9a06      	ldr	r2, [sp, #24]
 800c132:	2a47      	cmp	r2, #71	; 0x47
 800c134:	d1be      	bne.n	800c0b4 <_printf_float+0xfc>
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1bc      	bne.n	800c0b4 <_printf_float+0xfc>
 800c13a:	2301      	movs	r3, #1
 800c13c:	e7b9      	b.n	800c0b2 <_printf_float+0xfa>
 800c13e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c142:	d118      	bne.n	800c176 <_printf_float+0x1be>
 800c144:	2900      	cmp	r1, #0
 800c146:	6863      	ldr	r3, [r4, #4]
 800c148:	dd0b      	ble.n	800c162 <_printf_float+0x1aa>
 800c14a:	6121      	str	r1, [r4, #16]
 800c14c:	b913      	cbnz	r3, 800c154 <_printf_float+0x19c>
 800c14e:	6822      	ldr	r2, [r4, #0]
 800c150:	07d0      	lsls	r0, r2, #31
 800c152:	d502      	bpl.n	800c15a <_printf_float+0x1a2>
 800c154:	3301      	adds	r3, #1
 800c156:	440b      	add	r3, r1
 800c158:	6123      	str	r3, [r4, #16]
 800c15a:	65a1      	str	r1, [r4, #88]	; 0x58
 800c15c:	f04f 0900 	mov.w	r9, #0
 800c160:	e7de      	b.n	800c120 <_printf_float+0x168>
 800c162:	b913      	cbnz	r3, 800c16a <_printf_float+0x1b2>
 800c164:	6822      	ldr	r2, [r4, #0]
 800c166:	07d2      	lsls	r2, r2, #31
 800c168:	d501      	bpl.n	800c16e <_printf_float+0x1b6>
 800c16a:	3302      	adds	r3, #2
 800c16c:	e7f4      	b.n	800c158 <_printf_float+0x1a0>
 800c16e:	2301      	movs	r3, #1
 800c170:	e7f2      	b.n	800c158 <_printf_float+0x1a0>
 800c172:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c178:	4299      	cmp	r1, r3
 800c17a:	db05      	blt.n	800c188 <_printf_float+0x1d0>
 800c17c:	6823      	ldr	r3, [r4, #0]
 800c17e:	6121      	str	r1, [r4, #16]
 800c180:	07d8      	lsls	r0, r3, #31
 800c182:	d5ea      	bpl.n	800c15a <_printf_float+0x1a2>
 800c184:	1c4b      	adds	r3, r1, #1
 800c186:	e7e7      	b.n	800c158 <_printf_float+0x1a0>
 800c188:	2900      	cmp	r1, #0
 800c18a:	bfd4      	ite	le
 800c18c:	f1c1 0202 	rsble	r2, r1, #2
 800c190:	2201      	movgt	r2, #1
 800c192:	4413      	add	r3, r2
 800c194:	e7e0      	b.n	800c158 <_printf_float+0x1a0>
 800c196:	6823      	ldr	r3, [r4, #0]
 800c198:	055a      	lsls	r2, r3, #21
 800c19a:	d407      	bmi.n	800c1ac <_printf_float+0x1f4>
 800c19c:	6923      	ldr	r3, [r4, #16]
 800c19e:	4642      	mov	r2, r8
 800c1a0:	4631      	mov	r1, r6
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	47b8      	blx	r7
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	d12c      	bne.n	800c204 <_printf_float+0x24c>
 800c1aa:	e764      	b.n	800c076 <_printf_float+0xbe>
 800c1ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c1b0:	f240 80e0 	bls.w	800c374 <_printf_float+0x3bc>
 800c1b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	f7f4 fcac 	bl	8000b18 <__aeabi_dcmpeq>
 800c1c0:	2800      	cmp	r0, #0
 800c1c2:	d034      	beq.n	800c22e <_printf_float+0x276>
 800c1c4:	4a37      	ldr	r2, [pc, #220]	; (800c2a4 <_printf_float+0x2ec>)
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	4631      	mov	r1, r6
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	47b8      	blx	r7
 800c1ce:	3001      	adds	r0, #1
 800c1d0:	f43f af51 	beq.w	800c076 <_printf_float+0xbe>
 800c1d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1d8:	429a      	cmp	r2, r3
 800c1da:	db02      	blt.n	800c1e2 <_printf_float+0x22a>
 800c1dc:	6823      	ldr	r3, [r4, #0]
 800c1de:	07d8      	lsls	r0, r3, #31
 800c1e0:	d510      	bpl.n	800c204 <_printf_float+0x24c>
 800c1e2:	ee18 3a10 	vmov	r3, s16
 800c1e6:	4652      	mov	r2, sl
 800c1e8:	4631      	mov	r1, r6
 800c1ea:	4628      	mov	r0, r5
 800c1ec:	47b8      	blx	r7
 800c1ee:	3001      	adds	r0, #1
 800c1f0:	f43f af41 	beq.w	800c076 <_printf_float+0xbe>
 800c1f4:	f04f 0800 	mov.w	r8, #0
 800c1f8:	f104 091a 	add.w	r9, r4, #26
 800c1fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1fe:	3b01      	subs	r3, #1
 800c200:	4543      	cmp	r3, r8
 800c202:	dc09      	bgt.n	800c218 <_printf_float+0x260>
 800c204:	6823      	ldr	r3, [r4, #0]
 800c206:	079b      	lsls	r3, r3, #30
 800c208:	f100 8107 	bmi.w	800c41a <_printf_float+0x462>
 800c20c:	68e0      	ldr	r0, [r4, #12]
 800c20e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c210:	4298      	cmp	r0, r3
 800c212:	bfb8      	it	lt
 800c214:	4618      	movlt	r0, r3
 800c216:	e730      	b.n	800c07a <_printf_float+0xc2>
 800c218:	2301      	movs	r3, #1
 800c21a:	464a      	mov	r2, r9
 800c21c:	4631      	mov	r1, r6
 800c21e:	4628      	mov	r0, r5
 800c220:	47b8      	blx	r7
 800c222:	3001      	adds	r0, #1
 800c224:	f43f af27 	beq.w	800c076 <_printf_float+0xbe>
 800c228:	f108 0801 	add.w	r8, r8, #1
 800c22c:	e7e6      	b.n	800c1fc <_printf_float+0x244>
 800c22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c230:	2b00      	cmp	r3, #0
 800c232:	dc39      	bgt.n	800c2a8 <_printf_float+0x2f0>
 800c234:	4a1b      	ldr	r2, [pc, #108]	; (800c2a4 <_printf_float+0x2ec>)
 800c236:	2301      	movs	r3, #1
 800c238:	4631      	mov	r1, r6
 800c23a:	4628      	mov	r0, r5
 800c23c:	47b8      	blx	r7
 800c23e:	3001      	adds	r0, #1
 800c240:	f43f af19 	beq.w	800c076 <_printf_float+0xbe>
 800c244:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c248:	4313      	orrs	r3, r2
 800c24a:	d102      	bne.n	800c252 <_printf_float+0x29a>
 800c24c:	6823      	ldr	r3, [r4, #0]
 800c24e:	07d9      	lsls	r1, r3, #31
 800c250:	d5d8      	bpl.n	800c204 <_printf_float+0x24c>
 800c252:	ee18 3a10 	vmov	r3, s16
 800c256:	4652      	mov	r2, sl
 800c258:	4631      	mov	r1, r6
 800c25a:	4628      	mov	r0, r5
 800c25c:	47b8      	blx	r7
 800c25e:	3001      	adds	r0, #1
 800c260:	f43f af09 	beq.w	800c076 <_printf_float+0xbe>
 800c264:	f04f 0900 	mov.w	r9, #0
 800c268:	f104 0a1a 	add.w	sl, r4, #26
 800c26c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c26e:	425b      	negs	r3, r3
 800c270:	454b      	cmp	r3, r9
 800c272:	dc01      	bgt.n	800c278 <_printf_float+0x2c0>
 800c274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c276:	e792      	b.n	800c19e <_printf_float+0x1e6>
 800c278:	2301      	movs	r3, #1
 800c27a:	4652      	mov	r2, sl
 800c27c:	4631      	mov	r1, r6
 800c27e:	4628      	mov	r0, r5
 800c280:	47b8      	blx	r7
 800c282:	3001      	adds	r0, #1
 800c284:	f43f aef7 	beq.w	800c076 <_printf_float+0xbe>
 800c288:	f109 0901 	add.w	r9, r9, #1
 800c28c:	e7ee      	b.n	800c26c <_printf_float+0x2b4>
 800c28e:	bf00      	nop
 800c290:	7fefffff 	.word	0x7fefffff
 800c294:	08012be4 	.word	0x08012be4
 800c298:	08012be8 	.word	0x08012be8
 800c29c:	08012bec 	.word	0x08012bec
 800c2a0:	08012bf0 	.word	0x08012bf0
 800c2a4:	08012bf4 	.word	0x08012bf4
 800c2a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	bfa8      	it	ge
 800c2b0:	461a      	movge	r2, r3
 800c2b2:	2a00      	cmp	r2, #0
 800c2b4:	4691      	mov	r9, r2
 800c2b6:	dc37      	bgt.n	800c328 <_printf_float+0x370>
 800c2b8:	f04f 0b00 	mov.w	fp, #0
 800c2bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2c0:	f104 021a 	add.w	r2, r4, #26
 800c2c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2c6:	9305      	str	r3, [sp, #20]
 800c2c8:	eba3 0309 	sub.w	r3, r3, r9
 800c2cc:	455b      	cmp	r3, fp
 800c2ce:	dc33      	bgt.n	800c338 <_printf_float+0x380>
 800c2d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2d4:	429a      	cmp	r2, r3
 800c2d6:	db3b      	blt.n	800c350 <_printf_float+0x398>
 800c2d8:	6823      	ldr	r3, [r4, #0]
 800c2da:	07da      	lsls	r2, r3, #31
 800c2dc:	d438      	bmi.n	800c350 <_printf_float+0x398>
 800c2de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c2e2:	eba2 0903 	sub.w	r9, r2, r3
 800c2e6:	9b05      	ldr	r3, [sp, #20]
 800c2e8:	1ad2      	subs	r2, r2, r3
 800c2ea:	4591      	cmp	r9, r2
 800c2ec:	bfa8      	it	ge
 800c2ee:	4691      	movge	r9, r2
 800c2f0:	f1b9 0f00 	cmp.w	r9, #0
 800c2f4:	dc35      	bgt.n	800c362 <_printf_float+0x3aa>
 800c2f6:	f04f 0800 	mov.w	r8, #0
 800c2fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2fe:	f104 0a1a 	add.w	sl, r4, #26
 800c302:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c306:	1a9b      	subs	r3, r3, r2
 800c308:	eba3 0309 	sub.w	r3, r3, r9
 800c30c:	4543      	cmp	r3, r8
 800c30e:	f77f af79 	ble.w	800c204 <_printf_float+0x24c>
 800c312:	2301      	movs	r3, #1
 800c314:	4652      	mov	r2, sl
 800c316:	4631      	mov	r1, r6
 800c318:	4628      	mov	r0, r5
 800c31a:	47b8      	blx	r7
 800c31c:	3001      	adds	r0, #1
 800c31e:	f43f aeaa 	beq.w	800c076 <_printf_float+0xbe>
 800c322:	f108 0801 	add.w	r8, r8, #1
 800c326:	e7ec      	b.n	800c302 <_printf_float+0x34a>
 800c328:	4613      	mov	r3, r2
 800c32a:	4631      	mov	r1, r6
 800c32c:	4642      	mov	r2, r8
 800c32e:	4628      	mov	r0, r5
 800c330:	47b8      	blx	r7
 800c332:	3001      	adds	r0, #1
 800c334:	d1c0      	bne.n	800c2b8 <_printf_float+0x300>
 800c336:	e69e      	b.n	800c076 <_printf_float+0xbe>
 800c338:	2301      	movs	r3, #1
 800c33a:	4631      	mov	r1, r6
 800c33c:	4628      	mov	r0, r5
 800c33e:	9205      	str	r2, [sp, #20]
 800c340:	47b8      	blx	r7
 800c342:	3001      	adds	r0, #1
 800c344:	f43f ae97 	beq.w	800c076 <_printf_float+0xbe>
 800c348:	9a05      	ldr	r2, [sp, #20]
 800c34a:	f10b 0b01 	add.w	fp, fp, #1
 800c34e:	e7b9      	b.n	800c2c4 <_printf_float+0x30c>
 800c350:	ee18 3a10 	vmov	r3, s16
 800c354:	4652      	mov	r2, sl
 800c356:	4631      	mov	r1, r6
 800c358:	4628      	mov	r0, r5
 800c35a:	47b8      	blx	r7
 800c35c:	3001      	adds	r0, #1
 800c35e:	d1be      	bne.n	800c2de <_printf_float+0x326>
 800c360:	e689      	b.n	800c076 <_printf_float+0xbe>
 800c362:	9a05      	ldr	r2, [sp, #20]
 800c364:	464b      	mov	r3, r9
 800c366:	4442      	add	r2, r8
 800c368:	4631      	mov	r1, r6
 800c36a:	4628      	mov	r0, r5
 800c36c:	47b8      	blx	r7
 800c36e:	3001      	adds	r0, #1
 800c370:	d1c1      	bne.n	800c2f6 <_printf_float+0x33e>
 800c372:	e680      	b.n	800c076 <_printf_float+0xbe>
 800c374:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c376:	2a01      	cmp	r2, #1
 800c378:	dc01      	bgt.n	800c37e <_printf_float+0x3c6>
 800c37a:	07db      	lsls	r3, r3, #31
 800c37c:	d53a      	bpl.n	800c3f4 <_printf_float+0x43c>
 800c37e:	2301      	movs	r3, #1
 800c380:	4642      	mov	r2, r8
 800c382:	4631      	mov	r1, r6
 800c384:	4628      	mov	r0, r5
 800c386:	47b8      	blx	r7
 800c388:	3001      	adds	r0, #1
 800c38a:	f43f ae74 	beq.w	800c076 <_printf_float+0xbe>
 800c38e:	ee18 3a10 	vmov	r3, s16
 800c392:	4652      	mov	r2, sl
 800c394:	4631      	mov	r1, r6
 800c396:	4628      	mov	r0, r5
 800c398:	47b8      	blx	r7
 800c39a:	3001      	adds	r0, #1
 800c39c:	f43f ae6b 	beq.w	800c076 <_printf_float+0xbe>
 800c3a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c3ac:	f7f4 fbb4 	bl	8000b18 <__aeabi_dcmpeq>
 800c3b0:	b9d8      	cbnz	r0, 800c3ea <_printf_float+0x432>
 800c3b2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c3b6:	f108 0201 	add.w	r2, r8, #1
 800c3ba:	4631      	mov	r1, r6
 800c3bc:	4628      	mov	r0, r5
 800c3be:	47b8      	blx	r7
 800c3c0:	3001      	adds	r0, #1
 800c3c2:	d10e      	bne.n	800c3e2 <_printf_float+0x42a>
 800c3c4:	e657      	b.n	800c076 <_printf_float+0xbe>
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	4652      	mov	r2, sl
 800c3ca:	4631      	mov	r1, r6
 800c3cc:	4628      	mov	r0, r5
 800c3ce:	47b8      	blx	r7
 800c3d0:	3001      	adds	r0, #1
 800c3d2:	f43f ae50 	beq.w	800c076 <_printf_float+0xbe>
 800c3d6:	f108 0801 	add.w	r8, r8, #1
 800c3da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3dc:	3b01      	subs	r3, #1
 800c3de:	4543      	cmp	r3, r8
 800c3e0:	dcf1      	bgt.n	800c3c6 <_printf_float+0x40e>
 800c3e2:	464b      	mov	r3, r9
 800c3e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c3e8:	e6da      	b.n	800c1a0 <_printf_float+0x1e8>
 800c3ea:	f04f 0800 	mov.w	r8, #0
 800c3ee:	f104 0a1a 	add.w	sl, r4, #26
 800c3f2:	e7f2      	b.n	800c3da <_printf_float+0x422>
 800c3f4:	2301      	movs	r3, #1
 800c3f6:	4642      	mov	r2, r8
 800c3f8:	e7df      	b.n	800c3ba <_printf_float+0x402>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	464a      	mov	r2, r9
 800c3fe:	4631      	mov	r1, r6
 800c400:	4628      	mov	r0, r5
 800c402:	47b8      	blx	r7
 800c404:	3001      	adds	r0, #1
 800c406:	f43f ae36 	beq.w	800c076 <_printf_float+0xbe>
 800c40a:	f108 0801 	add.w	r8, r8, #1
 800c40e:	68e3      	ldr	r3, [r4, #12]
 800c410:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c412:	1a5b      	subs	r3, r3, r1
 800c414:	4543      	cmp	r3, r8
 800c416:	dcf0      	bgt.n	800c3fa <_printf_float+0x442>
 800c418:	e6f8      	b.n	800c20c <_printf_float+0x254>
 800c41a:	f04f 0800 	mov.w	r8, #0
 800c41e:	f104 0919 	add.w	r9, r4, #25
 800c422:	e7f4      	b.n	800c40e <_printf_float+0x456>

0800c424 <_printf_common>:
 800c424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c428:	4616      	mov	r6, r2
 800c42a:	4699      	mov	r9, r3
 800c42c:	688a      	ldr	r2, [r1, #8]
 800c42e:	690b      	ldr	r3, [r1, #16]
 800c430:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c434:	4293      	cmp	r3, r2
 800c436:	bfb8      	it	lt
 800c438:	4613      	movlt	r3, r2
 800c43a:	6033      	str	r3, [r6, #0]
 800c43c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c440:	4607      	mov	r7, r0
 800c442:	460c      	mov	r4, r1
 800c444:	b10a      	cbz	r2, 800c44a <_printf_common+0x26>
 800c446:	3301      	adds	r3, #1
 800c448:	6033      	str	r3, [r6, #0]
 800c44a:	6823      	ldr	r3, [r4, #0]
 800c44c:	0699      	lsls	r1, r3, #26
 800c44e:	bf42      	ittt	mi
 800c450:	6833      	ldrmi	r3, [r6, #0]
 800c452:	3302      	addmi	r3, #2
 800c454:	6033      	strmi	r3, [r6, #0]
 800c456:	6825      	ldr	r5, [r4, #0]
 800c458:	f015 0506 	ands.w	r5, r5, #6
 800c45c:	d106      	bne.n	800c46c <_printf_common+0x48>
 800c45e:	f104 0a19 	add.w	sl, r4, #25
 800c462:	68e3      	ldr	r3, [r4, #12]
 800c464:	6832      	ldr	r2, [r6, #0]
 800c466:	1a9b      	subs	r3, r3, r2
 800c468:	42ab      	cmp	r3, r5
 800c46a:	dc26      	bgt.n	800c4ba <_printf_common+0x96>
 800c46c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c470:	1e13      	subs	r3, r2, #0
 800c472:	6822      	ldr	r2, [r4, #0]
 800c474:	bf18      	it	ne
 800c476:	2301      	movne	r3, #1
 800c478:	0692      	lsls	r2, r2, #26
 800c47a:	d42b      	bmi.n	800c4d4 <_printf_common+0xb0>
 800c47c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c480:	4649      	mov	r1, r9
 800c482:	4638      	mov	r0, r7
 800c484:	47c0      	blx	r8
 800c486:	3001      	adds	r0, #1
 800c488:	d01e      	beq.n	800c4c8 <_printf_common+0xa4>
 800c48a:	6823      	ldr	r3, [r4, #0]
 800c48c:	6922      	ldr	r2, [r4, #16]
 800c48e:	f003 0306 	and.w	r3, r3, #6
 800c492:	2b04      	cmp	r3, #4
 800c494:	bf02      	ittt	eq
 800c496:	68e5      	ldreq	r5, [r4, #12]
 800c498:	6833      	ldreq	r3, [r6, #0]
 800c49a:	1aed      	subeq	r5, r5, r3
 800c49c:	68a3      	ldr	r3, [r4, #8]
 800c49e:	bf0c      	ite	eq
 800c4a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4a4:	2500      	movne	r5, #0
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	bfc4      	itt	gt
 800c4aa:	1a9b      	subgt	r3, r3, r2
 800c4ac:	18ed      	addgt	r5, r5, r3
 800c4ae:	2600      	movs	r6, #0
 800c4b0:	341a      	adds	r4, #26
 800c4b2:	42b5      	cmp	r5, r6
 800c4b4:	d11a      	bne.n	800c4ec <_printf_common+0xc8>
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	e008      	b.n	800c4cc <_printf_common+0xa8>
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	4652      	mov	r2, sl
 800c4be:	4649      	mov	r1, r9
 800c4c0:	4638      	mov	r0, r7
 800c4c2:	47c0      	blx	r8
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	d103      	bne.n	800c4d0 <_printf_common+0xac>
 800c4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c4cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d0:	3501      	adds	r5, #1
 800c4d2:	e7c6      	b.n	800c462 <_printf_common+0x3e>
 800c4d4:	18e1      	adds	r1, r4, r3
 800c4d6:	1c5a      	adds	r2, r3, #1
 800c4d8:	2030      	movs	r0, #48	; 0x30
 800c4da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4de:	4422      	add	r2, r4
 800c4e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4e8:	3302      	adds	r3, #2
 800c4ea:	e7c7      	b.n	800c47c <_printf_common+0x58>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	4622      	mov	r2, r4
 800c4f0:	4649      	mov	r1, r9
 800c4f2:	4638      	mov	r0, r7
 800c4f4:	47c0      	blx	r8
 800c4f6:	3001      	adds	r0, #1
 800c4f8:	d0e6      	beq.n	800c4c8 <_printf_common+0xa4>
 800c4fa:	3601      	adds	r6, #1
 800c4fc:	e7d9      	b.n	800c4b2 <_printf_common+0x8e>
	...

0800c500 <_printf_i>:
 800c500:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c504:	7e0f      	ldrb	r7, [r1, #24]
 800c506:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c508:	2f78      	cmp	r7, #120	; 0x78
 800c50a:	4691      	mov	r9, r2
 800c50c:	4680      	mov	r8, r0
 800c50e:	460c      	mov	r4, r1
 800c510:	469a      	mov	sl, r3
 800c512:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c516:	d807      	bhi.n	800c528 <_printf_i+0x28>
 800c518:	2f62      	cmp	r7, #98	; 0x62
 800c51a:	d80a      	bhi.n	800c532 <_printf_i+0x32>
 800c51c:	2f00      	cmp	r7, #0
 800c51e:	f000 80d4 	beq.w	800c6ca <_printf_i+0x1ca>
 800c522:	2f58      	cmp	r7, #88	; 0x58
 800c524:	f000 80c0 	beq.w	800c6a8 <_printf_i+0x1a8>
 800c528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c52c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c530:	e03a      	b.n	800c5a8 <_printf_i+0xa8>
 800c532:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c536:	2b15      	cmp	r3, #21
 800c538:	d8f6      	bhi.n	800c528 <_printf_i+0x28>
 800c53a:	a101      	add	r1, pc, #4	; (adr r1, 800c540 <_printf_i+0x40>)
 800c53c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c540:	0800c599 	.word	0x0800c599
 800c544:	0800c5ad 	.word	0x0800c5ad
 800c548:	0800c529 	.word	0x0800c529
 800c54c:	0800c529 	.word	0x0800c529
 800c550:	0800c529 	.word	0x0800c529
 800c554:	0800c529 	.word	0x0800c529
 800c558:	0800c5ad 	.word	0x0800c5ad
 800c55c:	0800c529 	.word	0x0800c529
 800c560:	0800c529 	.word	0x0800c529
 800c564:	0800c529 	.word	0x0800c529
 800c568:	0800c529 	.word	0x0800c529
 800c56c:	0800c6b1 	.word	0x0800c6b1
 800c570:	0800c5d9 	.word	0x0800c5d9
 800c574:	0800c66b 	.word	0x0800c66b
 800c578:	0800c529 	.word	0x0800c529
 800c57c:	0800c529 	.word	0x0800c529
 800c580:	0800c6d3 	.word	0x0800c6d3
 800c584:	0800c529 	.word	0x0800c529
 800c588:	0800c5d9 	.word	0x0800c5d9
 800c58c:	0800c529 	.word	0x0800c529
 800c590:	0800c529 	.word	0x0800c529
 800c594:	0800c673 	.word	0x0800c673
 800c598:	682b      	ldr	r3, [r5, #0]
 800c59a:	1d1a      	adds	r2, r3, #4
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	602a      	str	r2, [r5, #0]
 800c5a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5a8:	2301      	movs	r3, #1
 800c5aa:	e09f      	b.n	800c6ec <_printf_i+0x1ec>
 800c5ac:	6820      	ldr	r0, [r4, #0]
 800c5ae:	682b      	ldr	r3, [r5, #0]
 800c5b0:	0607      	lsls	r7, r0, #24
 800c5b2:	f103 0104 	add.w	r1, r3, #4
 800c5b6:	6029      	str	r1, [r5, #0]
 800c5b8:	d501      	bpl.n	800c5be <_printf_i+0xbe>
 800c5ba:	681e      	ldr	r6, [r3, #0]
 800c5bc:	e003      	b.n	800c5c6 <_printf_i+0xc6>
 800c5be:	0646      	lsls	r6, r0, #25
 800c5c0:	d5fb      	bpl.n	800c5ba <_printf_i+0xba>
 800c5c2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c5c6:	2e00      	cmp	r6, #0
 800c5c8:	da03      	bge.n	800c5d2 <_printf_i+0xd2>
 800c5ca:	232d      	movs	r3, #45	; 0x2d
 800c5cc:	4276      	negs	r6, r6
 800c5ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5d2:	485a      	ldr	r0, [pc, #360]	; (800c73c <_printf_i+0x23c>)
 800c5d4:	230a      	movs	r3, #10
 800c5d6:	e012      	b.n	800c5fe <_printf_i+0xfe>
 800c5d8:	682b      	ldr	r3, [r5, #0]
 800c5da:	6820      	ldr	r0, [r4, #0]
 800c5dc:	1d19      	adds	r1, r3, #4
 800c5de:	6029      	str	r1, [r5, #0]
 800c5e0:	0605      	lsls	r5, r0, #24
 800c5e2:	d501      	bpl.n	800c5e8 <_printf_i+0xe8>
 800c5e4:	681e      	ldr	r6, [r3, #0]
 800c5e6:	e002      	b.n	800c5ee <_printf_i+0xee>
 800c5e8:	0641      	lsls	r1, r0, #25
 800c5ea:	d5fb      	bpl.n	800c5e4 <_printf_i+0xe4>
 800c5ec:	881e      	ldrh	r6, [r3, #0]
 800c5ee:	4853      	ldr	r0, [pc, #332]	; (800c73c <_printf_i+0x23c>)
 800c5f0:	2f6f      	cmp	r7, #111	; 0x6f
 800c5f2:	bf0c      	ite	eq
 800c5f4:	2308      	moveq	r3, #8
 800c5f6:	230a      	movne	r3, #10
 800c5f8:	2100      	movs	r1, #0
 800c5fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c5fe:	6865      	ldr	r5, [r4, #4]
 800c600:	60a5      	str	r5, [r4, #8]
 800c602:	2d00      	cmp	r5, #0
 800c604:	bfa2      	ittt	ge
 800c606:	6821      	ldrge	r1, [r4, #0]
 800c608:	f021 0104 	bicge.w	r1, r1, #4
 800c60c:	6021      	strge	r1, [r4, #0]
 800c60e:	b90e      	cbnz	r6, 800c614 <_printf_i+0x114>
 800c610:	2d00      	cmp	r5, #0
 800c612:	d04b      	beq.n	800c6ac <_printf_i+0x1ac>
 800c614:	4615      	mov	r5, r2
 800c616:	fbb6 f1f3 	udiv	r1, r6, r3
 800c61a:	fb03 6711 	mls	r7, r3, r1, r6
 800c61e:	5dc7      	ldrb	r7, [r0, r7]
 800c620:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c624:	4637      	mov	r7, r6
 800c626:	42bb      	cmp	r3, r7
 800c628:	460e      	mov	r6, r1
 800c62a:	d9f4      	bls.n	800c616 <_printf_i+0x116>
 800c62c:	2b08      	cmp	r3, #8
 800c62e:	d10b      	bne.n	800c648 <_printf_i+0x148>
 800c630:	6823      	ldr	r3, [r4, #0]
 800c632:	07de      	lsls	r6, r3, #31
 800c634:	d508      	bpl.n	800c648 <_printf_i+0x148>
 800c636:	6923      	ldr	r3, [r4, #16]
 800c638:	6861      	ldr	r1, [r4, #4]
 800c63a:	4299      	cmp	r1, r3
 800c63c:	bfde      	ittt	le
 800c63e:	2330      	movle	r3, #48	; 0x30
 800c640:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c644:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c648:	1b52      	subs	r2, r2, r5
 800c64a:	6122      	str	r2, [r4, #16]
 800c64c:	f8cd a000 	str.w	sl, [sp]
 800c650:	464b      	mov	r3, r9
 800c652:	aa03      	add	r2, sp, #12
 800c654:	4621      	mov	r1, r4
 800c656:	4640      	mov	r0, r8
 800c658:	f7ff fee4 	bl	800c424 <_printf_common>
 800c65c:	3001      	adds	r0, #1
 800c65e:	d14a      	bne.n	800c6f6 <_printf_i+0x1f6>
 800c660:	f04f 30ff 	mov.w	r0, #4294967295
 800c664:	b004      	add	sp, #16
 800c666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c66a:	6823      	ldr	r3, [r4, #0]
 800c66c:	f043 0320 	orr.w	r3, r3, #32
 800c670:	6023      	str	r3, [r4, #0]
 800c672:	4833      	ldr	r0, [pc, #204]	; (800c740 <_printf_i+0x240>)
 800c674:	2778      	movs	r7, #120	; 0x78
 800c676:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c67a:	6823      	ldr	r3, [r4, #0]
 800c67c:	6829      	ldr	r1, [r5, #0]
 800c67e:	061f      	lsls	r7, r3, #24
 800c680:	f851 6b04 	ldr.w	r6, [r1], #4
 800c684:	d402      	bmi.n	800c68c <_printf_i+0x18c>
 800c686:	065f      	lsls	r7, r3, #25
 800c688:	bf48      	it	mi
 800c68a:	b2b6      	uxthmi	r6, r6
 800c68c:	07df      	lsls	r7, r3, #31
 800c68e:	bf48      	it	mi
 800c690:	f043 0320 	orrmi.w	r3, r3, #32
 800c694:	6029      	str	r1, [r5, #0]
 800c696:	bf48      	it	mi
 800c698:	6023      	strmi	r3, [r4, #0]
 800c69a:	b91e      	cbnz	r6, 800c6a4 <_printf_i+0x1a4>
 800c69c:	6823      	ldr	r3, [r4, #0]
 800c69e:	f023 0320 	bic.w	r3, r3, #32
 800c6a2:	6023      	str	r3, [r4, #0]
 800c6a4:	2310      	movs	r3, #16
 800c6a6:	e7a7      	b.n	800c5f8 <_printf_i+0xf8>
 800c6a8:	4824      	ldr	r0, [pc, #144]	; (800c73c <_printf_i+0x23c>)
 800c6aa:	e7e4      	b.n	800c676 <_printf_i+0x176>
 800c6ac:	4615      	mov	r5, r2
 800c6ae:	e7bd      	b.n	800c62c <_printf_i+0x12c>
 800c6b0:	682b      	ldr	r3, [r5, #0]
 800c6b2:	6826      	ldr	r6, [r4, #0]
 800c6b4:	6961      	ldr	r1, [r4, #20]
 800c6b6:	1d18      	adds	r0, r3, #4
 800c6b8:	6028      	str	r0, [r5, #0]
 800c6ba:	0635      	lsls	r5, r6, #24
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	d501      	bpl.n	800c6c4 <_printf_i+0x1c4>
 800c6c0:	6019      	str	r1, [r3, #0]
 800c6c2:	e002      	b.n	800c6ca <_printf_i+0x1ca>
 800c6c4:	0670      	lsls	r0, r6, #25
 800c6c6:	d5fb      	bpl.n	800c6c0 <_printf_i+0x1c0>
 800c6c8:	8019      	strh	r1, [r3, #0]
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	6123      	str	r3, [r4, #16]
 800c6ce:	4615      	mov	r5, r2
 800c6d0:	e7bc      	b.n	800c64c <_printf_i+0x14c>
 800c6d2:	682b      	ldr	r3, [r5, #0]
 800c6d4:	1d1a      	adds	r2, r3, #4
 800c6d6:	602a      	str	r2, [r5, #0]
 800c6d8:	681d      	ldr	r5, [r3, #0]
 800c6da:	6862      	ldr	r2, [r4, #4]
 800c6dc:	2100      	movs	r1, #0
 800c6de:	4628      	mov	r0, r5
 800c6e0:	f7f3 fd9e 	bl	8000220 <memchr>
 800c6e4:	b108      	cbz	r0, 800c6ea <_printf_i+0x1ea>
 800c6e6:	1b40      	subs	r0, r0, r5
 800c6e8:	6060      	str	r0, [r4, #4]
 800c6ea:	6863      	ldr	r3, [r4, #4]
 800c6ec:	6123      	str	r3, [r4, #16]
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c6f4:	e7aa      	b.n	800c64c <_printf_i+0x14c>
 800c6f6:	6923      	ldr	r3, [r4, #16]
 800c6f8:	462a      	mov	r2, r5
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	4640      	mov	r0, r8
 800c6fe:	47d0      	blx	sl
 800c700:	3001      	adds	r0, #1
 800c702:	d0ad      	beq.n	800c660 <_printf_i+0x160>
 800c704:	6823      	ldr	r3, [r4, #0]
 800c706:	079b      	lsls	r3, r3, #30
 800c708:	d413      	bmi.n	800c732 <_printf_i+0x232>
 800c70a:	68e0      	ldr	r0, [r4, #12]
 800c70c:	9b03      	ldr	r3, [sp, #12]
 800c70e:	4298      	cmp	r0, r3
 800c710:	bfb8      	it	lt
 800c712:	4618      	movlt	r0, r3
 800c714:	e7a6      	b.n	800c664 <_printf_i+0x164>
 800c716:	2301      	movs	r3, #1
 800c718:	4632      	mov	r2, r6
 800c71a:	4649      	mov	r1, r9
 800c71c:	4640      	mov	r0, r8
 800c71e:	47d0      	blx	sl
 800c720:	3001      	adds	r0, #1
 800c722:	d09d      	beq.n	800c660 <_printf_i+0x160>
 800c724:	3501      	adds	r5, #1
 800c726:	68e3      	ldr	r3, [r4, #12]
 800c728:	9903      	ldr	r1, [sp, #12]
 800c72a:	1a5b      	subs	r3, r3, r1
 800c72c:	42ab      	cmp	r3, r5
 800c72e:	dcf2      	bgt.n	800c716 <_printf_i+0x216>
 800c730:	e7eb      	b.n	800c70a <_printf_i+0x20a>
 800c732:	2500      	movs	r5, #0
 800c734:	f104 0619 	add.w	r6, r4, #25
 800c738:	e7f5      	b.n	800c726 <_printf_i+0x226>
 800c73a:	bf00      	nop
 800c73c:	08012bf6 	.word	0x08012bf6
 800c740:	08012c07 	.word	0x08012c07

0800c744 <std>:
 800c744:	2300      	movs	r3, #0
 800c746:	b510      	push	{r4, lr}
 800c748:	4604      	mov	r4, r0
 800c74a:	e9c0 3300 	strd	r3, r3, [r0]
 800c74e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c752:	6083      	str	r3, [r0, #8]
 800c754:	8181      	strh	r1, [r0, #12]
 800c756:	6643      	str	r3, [r0, #100]	; 0x64
 800c758:	81c2      	strh	r2, [r0, #14]
 800c75a:	6183      	str	r3, [r0, #24]
 800c75c:	4619      	mov	r1, r3
 800c75e:	2208      	movs	r2, #8
 800c760:	305c      	adds	r0, #92	; 0x5c
 800c762:	f000 fa17 	bl	800cb94 <memset>
 800c766:	4b0d      	ldr	r3, [pc, #52]	; (800c79c <std+0x58>)
 800c768:	6263      	str	r3, [r4, #36]	; 0x24
 800c76a:	4b0d      	ldr	r3, [pc, #52]	; (800c7a0 <std+0x5c>)
 800c76c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c76e:	4b0d      	ldr	r3, [pc, #52]	; (800c7a4 <std+0x60>)
 800c770:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c772:	4b0d      	ldr	r3, [pc, #52]	; (800c7a8 <std+0x64>)
 800c774:	6323      	str	r3, [r4, #48]	; 0x30
 800c776:	4b0d      	ldr	r3, [pc, #52]	; (800c7ac <std+0x68>)
 800c778:	6224      	str	r4, [r4, #32]
 800c77a:	429c      	cmp	r4, r3
 800c77c:	d006      	beq.n	800c78c <std+0x48>
 800c77e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c782:	4294      	cmp	r4, r2
 800c784:	d002      	beq.n	800c78c <std+0x48>
 800c786:	33d0      	adds	r3, #208	; 0xd0
 800c788:	429c      	cmp	r4, r3
 800c78a:	d105      	bne.n	800c798 <std+0x54>
 800c78c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c794:	f000 ba8a 	b.w	800ccac <__retarget_lock_init_recursive>
 800c798:	bd10      	pop	{r4, pc}
 800c79a:	bf00      	nop
 800c79c:	0800c9e5 	.word	0x0800c9e5
 800c7a0:	0800ca07 	.word	0x0800ca07
 800c7a4:	0800ca3f 	.word	0x0800ca3f
 800c7a8:	0800ca63 	.word	0x0800ca63
 800c7ac:	20000a58 	.word	0x20000a58

0800c7b0 <stdio_exit_handler>:
 800c7b0:	4a02      	ldr	r2, [pc, #8]	; (800c7bc <stdio_exit_handler+0xc>)
 800c7b2:	4903      	ldr	r1, [pc, #12]	; (800c7c0 <stdio_exit_handler+0x10>)
 800c7b4:	4803      	ldr	r0, [pc, #12]	; (800c7c4 <stdio_exit_handler+0x14>)
 800c7b6:	f000 b869 	b.w	800c88c <_fwalk_sglue>
 800c7ba:	bf00      	nop
 800c7bc:	2000007c 	.word	0x2000007c
 800c7c0:	0800e781 	.word	0x0800e781
 800c7c4:	20000088 	.word	0x20000088

0800c7c8 <cleanup_stdio>:
 800c7c8:	6841      	ldr	r1, [r0, #4]
 800c7ca:	4b0c      	ldr	r3, [pc, #48]	; (800c7fc <cleanup_stdio+0x34>)
 800c7cc:	4299      	cmp	r1, r3
 800c7ce:	b510      	push	{r4, lr}
 800c7d0:	4604      	mov	r4, r0
 800c7d2:	d001      	beq.n	800c7d8 <cleanup_stdio+0x10>
 800c7d4:	f001 ffd4 	bl	800e780 <_fflush_r>
 800c7d8:	68a1      	ldr	r1, [r4, #8]
 800c7da:	4b09      	ldr	r3, [pc, #36]	; (800c800 <cleanup_stdio+0x38>)
 800c7dc:	4299      	cmp	r1, r3
 800c7de:	d002      	beq.n	800c7e6 <cleanup_stdio+0x1e>
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f001 ffcd 	bl	800e780 <_fflush_r>
 800c7e6:	68e1      	ldr	r1, [r4, #12]
 800c7e8:	4b06      	ldr	r3, [pc, #24]	; (800c804 <cleanup_stdio+0x3c>)
 800c7ea:	4299      	cmp	r1, r3
 800c7ec:	d004      	beq.n	800c7f8 <cleanup_stdio+0x30>
 800c7ee:	4620      	mov	r0, r4
 800c7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7f4:	f001 bfc4 	b.w	800e780 <_fflush_r>
 800c7f8:	bd10      	pop	{r4, pc}
 800c7fa:	bf00      	nop
 800c7fc:	20000a58 	.word	0x20000a58
 800c800:	20000ac0 	.word	0x20000ac0
 800c804:	20000b28 	.word	0x20000b28

0800c808 <global_stdio_init.part.0>:
 800c808:	b510      	push	{r4, lr}
 800c80a:	4b0b      	ldr	r3, [pc, #44]	; (800c838 <global_stdio_init.part.0+0x30>)
 800c80c:	4c0b      	ldr	r4, [pc, #44]	; (800c83c <global_stdio_init.part.0+0x34>)
 800c80e:	4a0c      	ldr	r2, [pc, #48]	; (800c840 <global_stdio_init.part.0+0x38>)
 800c810:	601a      	str	r2, [r3, #0]
 800c812:	4620      	mov	r0, r4
 800c814:	2200      	movs	r2, #0
 800c816:	2104      	movs	r1, #4
 800c818:	f7ff ff94 	bl	800c744 <std>
 800c81c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c820:	2201      	movs	r2, #1
 800c822:	2109      	movs	r1, #9
 800c824:	f7ff ff8e 	bl	800c744 <std>
 800c828:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c82c:	2202      	movs	r2, #2
 800c82e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c832:	2112      	movs	r1, #18
 800c834:	f7ff bf86 	b.w	800c744 <std>
 800c838:	20000b90 	.word	0x20000b90
 800c83c:	20000a58 	.word	0x20000a58
 800c840:	0800c7b1 	.word	0x0800c7b1

0800c844 <__sfp_lock_acquire>:
 800c844:	4801      	ldr	r0, [pc, #4]	; (800c84c <__sfp_lock_acquire+0x8>)
 800c846:	f000 ba32 	b.w	800ccae <__retarget_lock_acquire_recursive>
 800c84a:	bf00      	nop
 800c84c:	20000b99 	.word	0x20000b99

0800c850 <__sfp_lock_release>:
 800c850:	4801      	ldr	r0, [pc, #4]	; (800c858 <__sfp_lock_release+0x8>)
 800c852:	f000 ba2d 	b.w	800ccb0 <__retarget_lock_release_recursive>
 800c856:	bf00      	nop
 800c858:	20000b99 	.word	0x20000b99

0800c85c <__sinit>:
 800c85c:	b510      	push	{r4, lr}
 800c85e:	4604      	mov	r4, r0
 800c860:	f7ff fff0 	bl	800c844 <__sfp_lock_acquire>
 800c864:	6a23      	ldr	r3, [r4, #32]
 800c866:	b11b      	cbz	r3, 800c870 <__sinit+0x14>
 800c868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c86c:	f7ff bff0 	b.w	800c850 <__sfp_lock_release>
 800c870:	4b04      	ldr	r3, [pc, #16]	; (800c884 <__sinit+0x28>)
 800c872:	6223      	str	r3, [r4, #32]
 800c874:	4b04      	ldr	r3, [pc, #16]	; (800c888 <__sinit+0x2c>)
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d1f5      	bne.n	800c868 <__sinit+0xc>
 800c87c:	f7ff ffc4 	bl	800c808 <global_stdio_init.part.0>
 800c880:	e7f2      	b.n	800c868 <__sinit+0xc>
 800c882:	bf00      	nop
 800c884:	0800c7c9 	.word	0x0800c7c9
 800c888:	20000b90 	.word	0x20000b90

0800c88c <_fwalk_sglue>:
 800c88c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c890:	4607      	mov	r7, r0
 800c892:	4688      	mov	r8, r1
 800c894:	4614      	mov	r4, r2
 800c896:	2600      	movs	r6, #0
 800c898:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c89c:	f1b9 0901 	subs.w	r9, r9, #1
 800c8a0:	d505      	bpl.n	800c8ae <_fwalk_sglue+0x22>
 800c8a2:	6824      	ldr	r4, [r4, #0]
 800c8a4:	2c00      	cmp	r4, #0
 800c8a6:	d1f7      	bne.n	800c898 <_fwalk_sglue+0xc>
 800c8a8:	4630      	mov	r0, r6
 800c8aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c8ae:	89ab      	ldrh	r3, [r5, #12]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d907      	bls.n	800c8c4 <_fwalk_sglue+0x38>
 800c8b4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	d003      	beq.n	800c8c4 <_fwalk_sglue+0x38>
 800c8bc:	4629      	mov	r1, r5
 800c8be:	4638      	mov	r0, r7
 800c8c0:	47c0      	blx	r8
 800c8c2:	4306      	orrs	r6, r0
 800c8c4:	3568      	adds	r5, #104	; 0x68
 800c8c6:	e7e9      	b.n	800c89c <_fwalk_sglue+0x10>

0800c8c8 <iprintf>:
 800c8c8:	b40f      	push	{r0, r1, r2, r3}
 800c8ca:	b507      	push	{r0, r1, r2, lr}
 800c8cc:	4906      	ldr	r1, [pc, #24]	; (800c8e8 <iprintf+0x20>)
 800c8ce:	ab04      	add	r3, sp, #16
 800c8d0:	6808      	ldr	r0, [r1, #0]
 800c8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c8d6:	6881      	ldr	r1, [r0, #8]
 800c8d8:	9301      	str	r3, [sp, #4]
 800c8da:	f001 fdb1 	bl	800e440 <_vfiprintf_r>
 800c8de:	b003      	add	sp, #12
 800c8e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c8e4:	b004      	add	sp, #16
 800c8e6:	4770      	bx	lr
 800c8e8:	200000d4 	.word	0x200000d4

0800c8ec <_puts_r>:
 800c8ec:	6a03      	ldr	r3, [r0, #32]
 800c8ee:	b570      	push	{r4, r5, r6, lr}
 800c8f0:	6884      	ldr	r4, [r0, #8]
 800c8f2:	4605      	mov	r5, r0
 800c8f4:	460e      	mov	r6, r1
 800c8f6:	b90b      	cbnz	r3, 800c8fc <_puts_r+0x10>
 800c8f8:	f7ff ffb0 	bl	800c85c <__sinit>
 800c8fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8fe:	07db      	lsls	r3, r3, #31
 800c900:	d405      	bmi.n	800c90e <_puts_r+0x22>
 800c902:	89a3      	ldrh	r3, [r4, #12]
 800c904:	0598      	lsls	r0, r3, #22
 800c906:	d402      	bmi.n	800c90e <_puts_r+0x22>
 800c908:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c90a:	f000 f9d0 	bl	800ccae <__retarget_lock_acquire_recursive>
 800c90e:	89a3      	ldrh	r3, [r4, #12]
 800c910:	0719      	lsls	r1, r3, #28
 800c912:	d513      	bpl.n	800c93c <_puts_r+0x50>
 800c914:	6923      	ldr	r3, [r4, #16]
 800c916:	b18b      	cbz	r3, 800c93c <_puts_r+0x50>
 800c918:	3e01      	subs	r6, #1
 800c91a:	68a3      	ldr	r3, [r4, #8]
 800c91c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c920:	3b01      	subs	r3, #1
 800c922:	60a3      	str	r3, [r4, #8]
 800c924:	b9e9      	cbnz	r1, 800c962 <_puts_r+0x76>
 800c926:	2b00      	cmp	r3, #0
 800c928:	da2e      	bge.n	800c988 <_puts_r+0x9c>
 800c92a:	4622      	mov	r2, r4
 800c92c:	210a      	movs	r1, #10
 800c92e:	4628      	mov	r0, r5
 800c930:	f000 f89b 	bl	800ca6a <__swbuf_r>
 800c934:	3001      	adds	r0, #1
 800c936:	d007      	beq.n	800c948 <_puts_r+0x5c>
 800c938:	250a      	movs	r5, #10
 800c93a:	e007      	b.n	800c94c <_puts_r+0x60>
 800c93c:	4621      	mov	r1, r4
 800c93e:	4628      	mov	r0, r5
 800c940:	f000 f8d0 	bl	800cae4 <__swsetup_r>
 800c944:	2800      	cmp	r0, #0
 800c946:	d0e7      	beq.n	800c918 <_puts_r+0x2c>
 800c948:	f04f 35ff 	mov.w	r5, #4294967295
 800c94c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c94e:	07da      	lsls	r2, r3, #31
 800c950:	d405      	bmi.n	800c95e <_puts_r+0x72>
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	059b      	lsls	r3, r3, #22
 800c956:	d402      	bmi.n	800c95e <_puts_r+0x72>
 800c958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c95a:	f000 f9a9 	bl	800ccb0 <__retarget_lock_release_recursive>
 800c95e:	4628      	mov	r0, r5
 800c960:	bd70      	pop	{r4, r5, r6, pc}
 800c962:	2b00      	cmp	r3, #0
 800c964:	da04      	bge.n	800c970 <_puts_r+0x84>
 800c966:	69a2      	ldr	r2, [r4, #24]
 800c968:	429a      	cmp	r2, r3
 800c96a:	dc06      	bgt.n	800c97a <_puts_r+0x8e>
 800c96c:	290a      	cmp	r1, #10
 800c96e:	d004      	beq.n	800c97a <_puts_r+0x8e>
 800c970:	6823      	ldr	r3, [r4, #0]
 800c972:	1c5a      	adds	r2, r3, #1
 800c974:	6022      	str	r2, [r4, #0]
 800c976:	7019      	strb	r1, [r3, #0]
 800c978:	e7cf      	b.n	800c91a <_puts_r+0x2e>
 800c97a:	4622      	mov	r2, r4
 800c97c:	4628      	mov	r0, r5
 800c97e:	f000 f874 	bl	800ca6a <__swbuf_r>
 800c982:	3001      	adds	r0, #1
 800c984:	d1c9      	bne.n	800c91a <_puts_r+0x2e>
 800c986:	e7df      	b.n	800c948 <_puts_r+0x5c>
 800c988:	6823      	ldr	r3, [r4, #0]
 800c98a:	250a      	movs	r5, #10
 800c98c:	1c5a      	adds	r2, r3, #1
 800c98e:	6022      	str	r2, [r4, #0]
 800c990:	701d      	strb	r5, [r3, #0]
 800c992:	e7db      	b.n	800c94c <_puts_r+0x60>

0800c994 <puts>:
 800c994:	4b02      	ldr	r3, [pc, #8]	; (800c9a0 <puts+0xc>)
 800c996:	4601      	mov	r1, r0
 800c998:	6818      	ldr	r0, [r3, #0]
 800c99a:	f7ff bfa7 	b.w	800c8ec <_puts_r>
 800c99e:	bf00      	nop
 800c9a0:	200000d4 	.word	0x200000d4

0800c9a4 <siprintf>:
 800c9a4:	b40e      	push	{r1, r2, r3}
 800c9a6:	b500      	push	{lr}
 800c9a8:	b09c      	sub	sp, #112	; 0x70
 800c9aa:	ab1d      	add	r3, sp, #116	; 0x74
 800c9ac:	9002      	str	r0, [sp, #8]
 800c9ae:	9006      	str	r0, [sp, #24]
 800c9b0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c9b4:	4809      	ldr	r0, [pc, #36]	; (800c9dc <siprintf+0x38>)
 800c9b6:	9107      	str	r1, [sp, #28]
 800c9b8:	9104      	str	r1, [sp, #16]
 800c9ba:	4909      	ldr	r1, [pc, #36]	; (800c9e0 <siprintf+0x3c>)
 800c9bc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c9c0:	9105      	str	r1, [sp, #20]
 800c9c2:	6800      	ldr	r0, [r0, #0]
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	a902      	add	r1, sp, #8
 800c9c8:	f001 fc12 	bl	800e1f0 <_svfiprintf_r>
 800c9cc:	9b02      	ldr	r3, [sp, #8]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	701a      	strb	r2, [r3, #0]
 800c9d2:	b01c      	add	sp, #112	; 0x70
 800c9d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c9d8:	b003      	add	sp, #12
 800c9da:	4770      	bx	lr
 800c9dc:	200000d4 	.word	0x200000d4
 800c9e0:	ffff0208 	.word	0xffff0208

0800c9e4 <__sread>:
 800c9e4:	b510      	push	{r4, lr}
 800c9e6:	460c      	mov	r4, r1
 800c9e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9ec:	f000 f900 	bl	800cbf0 <_read_r>
 800c9f0:	2800      	cmp	r0, #0
 800c9f2:	bfab      	itete	ge
 800c9f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c9f6:	89a3      	ldrhlt	r3, [r4, #12]
 800c9f8:	181b      	addge	r3, r3, r0
 800c9fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c9fe:	bfac      	ite	ge
 800ca00:	6563      	strge	r3, [r4, #84]	; 0x54
 800ca02:	81a3      	strhlt	r3, [r4, #12]
 800ca04:	bd10      	pop	{r4, pc}

0800ca06 <__swrite>:
 800ca06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca0a:	461f      	mov	r7, r3
 800ca0c:	898b      	ldrh	r3, [r1, #12]
 800ca0e:	05db      	lsls	r3, r3, #23
 800ca10:	4605      	mov	r5, r0
 800ca12:	460c      	mov	r4, r1
 800ca14:	4616      	mov	r6, r2
 800ca16:	d505      	bpl.n	800ca24 <__swrite+0x1e>
 800ca18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca1c:	2302      	movs	r3, #2
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f000 f8d4 	bl	800cbcc <_lseek_r>
 800ca24:	89a3      	ldrh	r3, [r4, #12]
 800ca26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ca2e:	81a3      	strh	r3, [r4, #12]
 800ca30:	4632      	mov	r2, r6
 800ca32:	463b      	mov	r3, r7
 800ca34:	4628      	mov	r0, r5
 800ca36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ca3a:	f000 b8fb 	b.w	800cc34 <_write_r>

0800ca3e <__sseek>:
 800ca3e:	b510      	push	{r4, lr}
 800ca40:	460c      	mov	r4, r1
 800ca42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca46:	f000 f8c1 	bl	800cbcc <_lseek_r>
 800ca4a:	1c43      	adds	r3, r0, #1
 800ca4c:	89a3      	ldrh	r3, [r4, #12]
 800ca4e:	bf15      	itete	ne
 800ca50:	6560      	strne	r0, [r4, #84]	; 0x54
 800ca52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ca56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ca5a:	81a3      	strheq	r3, [r4, #12]
 800ca5c:	bf18      	it	ne
 800ca5e:	81a3      	strhne	r3, [r4, #12]
 800ca60:	bd10      	pop	{r4, pc}

0800ca62 <__sclose>:
 800ca62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca66:	f000 b8a1 	b.w	800cbac <_close_r>

0800ca6a <__swbuf_r>:
 800ca6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca6c:	460e      	mov	r6, r1
 800ca6e:	4614      	mov	r4, r2
 800ca70:	4605      	mov	r5, r0
 800ca72:	b118      	cbz	r0, 800ca7c <__swbuf_r+0x12>
 800ca74:	6a03      	ldr	r3, [r0, #32]
 800ca76:	b90b      	cbnz	r3, 800ca7c <__swbuf_r+0x12>
 800ca78:	f7ff fef0 	bl	800c85c <__sinit>
 800ca7c:	69a3      	ldr	r3, [r4, #24]
 800ca7e:	60a3      	str	r3, [r4, #8]
 800ca80:	89a3      	ldrh	r3, [r4, #12]
 800ca82:	071a      	lsls	r2, r3, #28
 800ca84:	d525      	bpl.n	800cad2 <__swbuf_r+0x68>
 800ca86:	6923      	ldr	r3, [r4, #16]
 800ca88:	b31b      	cbz	r3, 800cad2 <__swbuf_r+0x68>
 800ca8a:	6823      	ldr	r3, [r4, #0]
 800ca8c:	6922      	ldr	r2, [r4, #16]
 800ca8e:	1a98      	subs	r0, r3, r2
 800ca90:	6963      	ldr	r3, [r4, #20]
 800ca92:	b2f6      	uxtb	r6, r6
 800ca94:	4283      	cmp	r3, r0
 800ca96:	4637      	mov	r7, r6
 800ca98:	dc04      	bgt.n	800caa4 <__swbuf_r+0x3a>
 800ca9a:	4621      	mov	r1, r4
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	f001 fe6f 	bl	800e780 <_fflush_r>
 800caa2:	b9e0      	cbnz	r0, 800cade <__swbuf_r+0x74>
 800caa4:	68a3      	ldr	r3, [r4, #8]
 800caa6:	3b01      	subs	r3, #1
 800caa8:	60a3      	str	r3, [r4, #8]
 800caaa:	6823      	ldr	r3, [r4, #0]
 800caac:	1c5a      	adds	r2, r3, #1
 800caae:	6022      	str	r2, [r4, #0]
 800cab0:	701e      	strb	r6, [r3, #0]
 800cab2:	6962      	ldr	r2, [r4, #20]
 800cab4:	1c43      	adds	r3, r0, #1
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d004      	beq.n	800cac4 <__swbuf_r+0x5a>
 800caba:	89a3      	ldrh	r3, [r4, #12]
 800cabc:	07db      	lsls	r3, r3, #31
 800cabe:	d506      	bpl.n	800cace <__swbuf_r+0x64>
 800cac0:	2e0a      	cmp	r6, #10
 800cac2:	d104      	bne.n	800cace <__swbuf_r+0x64>
 800cac4:	4621      	mov	r1, r4
 800cac6:	4628      	mov	r0, r5
 800cac8:	f001 fe5a 	bl	800e780 <_fflush_r>
 800cacc:	b938      	cbnz	r0, 800cade <__swbuf_r+0x74>
 800cace:	4638      	mov	r0, r7
 800cad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cad2:	4621      	mov	r1, r4
 800cad4:	4628      	mov	r0, r5
 800cad6:	f000 f805 	bl	800cae4 <__swsetup_r>
 800cada:	2800      	cmp	r0, #0
 800cadc:	d0d5      	beq.n	800ca8a <__swbuf_r+0x20>
 800cade:	f04f 37ff 	mov.w	r7, #4294967295
 800cae2:	e7f4      	b.n	800cace <__swbuf_r+0x64>

0800cae4 <__swsetup_r>:
 800cae4:	b538      	push	{r3, r4, r5, lr}
 800cae6:	4b2a      	ldr	r3, [pc, #168]	; (800cb90 <__swsetup_r+0xac>)
 800cae8:	4605      	mov	r5, r0
 800caea:	6818      	ldr	r0, [r3, #0]
 800caec:	460c      	mov	r4, r1
 800caee:	b118      	cbz	r0, 800caf8 <__swsetup_r+0x14>
 800caf0:	6a03      	ldr	r3, [r0, #32]
 800caf2:	b90b      	cbnz	r3, 800caf8 <__swsetup_r+0x14>
 800caf4:	f7ff feb2 	bl	800c85c <__sinit>
 800caf8:	89a3      	ldrh	r3, [r4, #12]
 800cafa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cafe:	0718      	lsls	r0, r3, #28
 800cb00:	d422      	bmi.n	800cb48 <__swsetup_r+0x64>
 800cb02:	06d9      	lsls	r1, r3, #27
 800cb04:	d407      	bmi.n	800cb16 <__swsetup_r+0x32>
 800cb06:	2309      	movs	r3, #9
 800cb08:	602b      	str	r3, [r5, #0]
 800cb0a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb0e:	81a3      	strh	r3, [r4, #12]
 800cb10:	f04f 30ff 	mov.w	r0, #4294967295
 800cb14:	e034      	b.n	800cb80 <__swsetup_r+0x9c>
 800cb16:	0758      	lsls	r0, r3, #29
 800cb18:	d512      	bpl.n	800cb40 <__swsetup_r+0x5c>
 800cb1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb1c:	b141      	cbz	r1, 800cb30 <__swsetup_r+0x4c>
 800cb1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb22:	4299      	cmp	r1, r3
 800cb24:	d002      	beq.n	800cb2c <__swsetup_r+0x48>
 800cb26:	4628      	mov	r0, r5
 800cb28:	f000 ff40 	bl	800d9ac <_free_r>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	6363      	str	r3, [r4, #52]	; 0x34
 800cb30:	89a3      	ldrh	r3, [r4, #12]
 800cb32:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb36:	81a3      	strh	r3, [r4, #12]
 800cb38:	2300      	movs	r3, #0
 800cb3a:	6063      	str	r3, [r4, #4]
 800cb3c:	6923      	ldr	r3, [r4, #16]
 800cb3e:	6023      	str	r3, [r4, #0]
 800cb40:	89a3      	ldrh	r3, [r4, #12]
 800cb42:	f043 0308 	orr.w	r3, r3, #8
 800cb46:	81a3      	strh	r3, [r4, #12]
 800cb48:	6923      	ldr	r3, [r4, #16]
 800cb4a:	b94b      	cbnz	r3, 800cb60 <__swsetup_r+0x7c>
 800cb4c:	89a3      	ldrh	r3, [r4, #12]
 800cb4e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb56:	d003      	beq.n	800cb60 <__swsetup_r+0x7c>
 800cb58:	4621      	mov	r1, r4
 800cb5a:	4628      	mov	r0, r5
 800cb5c:	f001 fe5e 	bl	800e81c <__smakebuf_r>
 800cb60:	89a0      	ldrh	r0, [r4, #12]
 800cb62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb66:	f010 0301 	ands.w	r3, r0, #1
 800cb6a:	d00a      	beq.n	800cb82 <__swsetup_r+0x9e>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	60a3      	str	r3, [r4, #8]
 800cb70:	6963      	ldr	r3, [r4, #20]
 800cb72:	425b      	negs	r3, r3
 800cb74:	61a3      	str	r3, [r4, #24]
 800cb76:	6923      	ldr	r3, [r4, #16]
 800cb78:	b943      	cbnz	r3, 800cb8c <__swsetup_r+0xa8>
 800cb7a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cb7e:	d1c4      	bne.n	800cb0a <__swsetup_r+0x26>
 800cb80:	bd38      	pop	{r3, r4, r5, pc}
 800cb82:	0781      	lsls	r1, r0, #30
 800cb84:	bf58      	it	pl
 800cb86:	6963      	ldrpl	r3, [r4, #20]
 800cb88:	60a3      	str	r3, [r4, #8]
 800cb8a:	e7f4      	b.n	800cb76 <__swsetup_r+0x92>
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	e7f7      	b.n	800cb80 <__swsetup_r+0x9c>
 800cb90:	200000d4 	.word	0x200000d4

0800cb94 <memset>:
 800cb94:	4402      	add	r2, r0
 800cb96:	4603      	mov	r3, r0
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d100      	bne.n	800cb9e <memset+0xa>
 800cb9c:	4770      	bx	lr
 800cb9e:	f803 1b01 	strb.w	r1, [r3], #1
 800cba2:	e7f9      	b.n	800cb98 <memset+0x4>

0800cba4 <_localeconv_r>:
 800cba4:	4800      	ldr	r0, [pc, #0]	; (800cba8 <_localeconv_r+0x4>)
 800cba6:	4770      	bx	lr
 800cba8:	200001c8 	.word	0x200001c8

0800cbac <_close_r>:
 800cbac:	b538      	push	{r3, r4, r5, lr}
 800cbae:	4d06      	ldr	r5, [pc, #24]	; (800cbc8 <_close_r+0x1c>)
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	4604      	mov	r4, r0
 800cbb4:	4608      	mov	r0, r1
 800cbb6:	602b      	str	r3, [r5, #0]
 800cbb8:	f7f6 fd87 	bl	80036ca <_close>
 800cbbc:	1c43      	adds	r3, r0, #1
 800cbbe:	d102      	bne.n	800cbc6 <_close_r+0x1a>
 800cbc0:	682b      	ldr	r3, [r5, #0]
 800cbc2:	b103      	cbz	r3, 800cbc6 <_close_r+0x1a>
 800cbc4:	6023      	str	r3, [r4, #0]
 800cbc6:	bd38      	pop	{r3, r4, r5, pc}
 800cbc8:	20000b94 	.word	0x20000b94

0800cbcc <_lseek_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4d07      	ldr	r5, [pc, #28]	; (800cbec <_lseek_r+0x20>)
 800cbd0:	4604      	mov	r4, r0
 800cbd2:	4608      	mov	r0, r1
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	602a      	str	r2, [r5, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	f7f6 fd9c 	bl	8003718 <_lseek>
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	d102      	bne.n	800cbea <_lseek_r+0x1e>
 800cbe4:	682b      	ldr	r3, [r5, #0]
 800cbe6:	b103      	cbz	r3, 800cbea <_lseek_r+0x1e>
 800cbe8:	6023      	str	r3, [r4, #0]
 800cbea:	bd38      	pop	{r3, r4, r5, pc}
 800cbec:	20000b94 	.word	0x20000b94

0800cbf0 <_read_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	4d07      	ldr	r5, [pc, #28]	; (800cc10 <_read_r+0x20>)
 800cbf4:	4604      	mov	r4, r0
 800cbf6:	4608      	mov	r0, r1
 800cbf8:	4611      	mov	r1, r2
 800cbfa:	2200      	movs	r2, #0
 800cbfc:	602a      	str	r2, [r5, #0]
 800cbfe:	461a      	mov	r2, r3
 800cc00:	f7f6 fd2a 	bl	8003658 <_read>
 800cc04:	1c43      	adds	r3, r0, #1
 800cc06:	d102      	bne.n	800cc0e <_read_r+0x1e>
 800cc08:	682b      	ldr	r3, [r5, #0]
 800cc0a:	b103      	cbz	r3, 800cc0e <_read_r+0x1e>
 800cc0c:	6023      	str	r3, [r4, #0]
 800cc0e:	bd38      	pop	{r3, r4, r5, pc}
 800cc10:	20000b94 	.word	0x20000b94

0800cc14 <_sbrk_r>:
 800cc14:	b538      	push	{r3, r4, r5, lr}
 800cc16:	4d06      	ldr	r5, [pc, #24]	; (800cc30 <_sbrk_r+0x1c>)
 800cc18:	2300      	movs	r3, #0
 800cc1a:	4604      	mov	r4, r0
 800cc1c:	4608      	mov	r0, r1
 800cc1e:	602b      	str	r3, [r5, #0]
 800cc20:	f7f6 fd88 	bl	8003734 <_sbrk>
 800cc24:	1c43      	adds	r3, r0, #1
 800cc26:	d102      	bne.n	800cc2e <_sbrk_r+0x1a>
 800cc28:	682b      	ldr	r3, [r5, #0]
 800cc2a:	b103      	cbz	r3, 800cc2e <_sbrk_r+0x1a>
 800cc2c:	6023      	str	r3, [r4, #0]
 800cc2e:	bd38      	pop	{r3, r4, r5, pc}
 800cc30:	20000b94 	.word	0x20000b94

0800cc34 <_write_r>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	4d07      	ldr	r5, [pc, #28]	; (800cc54 <_write_r+0x20>)
 800cc38:	4604      	mov	r4, r0
 800cc3a:	4608      	mov	r0, r1
 800cc3c:	4611      	mov	r1, r2
 800cc3e:	2200      	movs	r2, #0
 800cc40:	602a      	str	r2, [r5, #0]
 800cc42:	461a      	mov	r2, r3
 800cc44:	f7f6 fd25 	bl	8003692 <_write>
 800cc48:	1c43      	adds	r3, r0, #1
 800cc4a:	d102      	bne.n	800cc52 <_write_r+0x1e>
 800cc4c:	682b      	ldr	r3, [r5, #0]
 800cc4e:	b103      	cbz	r3, 800cc52 <_write_r+0x1e>
 800cc50:	6023      	str	r3, [r4, #0]
 800cc52:	bd38      	pop	{r3, r4, r5, pc}
 800cc54:	20000b94 	.word	0x20000b94

0800cc58 <__errno>:
 800cc58:	4b01      	ldr	r3, [pc, #4]	; (800cc60 <__errno+0x8>)
 800cc5a:	6818      	ldr	r0, [r3, #0]
 800cc5c:	4770      	bx	lr
 800cc5e:	bf00      	nop
 800cc60:	200000d4 	.word	0x200000d4

0800cc64 <__libc_init_array>:
 800cc64:	b570      	push	{r4, r5, r6, lr}
 800cc66:	4d0d      	ldr	r5, [pc, #52]	; (800cc9c <__libc_init_array+0x38>)
 800cc68:	4c0d      	ldr	r4, [pc, #52]	; (800cca0 <__libc_init_array+0x3c>)
 800cc6a:	1b64      	subs	r4, r4, r5
 800cc6c:	10a4      	asrs	r4, r4, #2
 800cc6e:	2600      	movs	r6, #0
 800cc70:	42a6      	cmp	r6, r4
 800cc72:	d109      	bne.n	800cc88 <__libc_init_array+0x24>
 800cc74:	4d0b      	ldr	r5, [pc, #44]	; (800cca4 <__libc_init_array+0x40>)
 800cc76:	4c0c      	ldr	r4, [pc, #48]	; (800cca8 <__libc_init_array+0x44>)
 800cc78:	f002 fe76 	bl	800f968 <_init>
 800cc7c:	1b64      	subs	r4, r4, r5
 800cc7e:	10a4      	asrs	r4, r4, #2
 800cc80:	2600      	movs	r6, #0
 800cc82:	42a6      	cmp	r6, r4
 800cc84:	d105      	bne.n	800cc92 <__libc_init_array+0x2e>
 800cc86:	bd70      	pop	{r4, r5, r6, pc}
 800cc88:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc8c:	4798      	blx	r3
 800cc8e:	3601      	adds	r6, #1
 800cc90:	e7ee      	b.n	800cc70 <__libc_init_array+0xc>
 800cc92:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc96:	4798      	blx	r3
 800cc98:	3601      	adds	r6, #1
 800cc9a:	e7f2      	b.n	800cc82 <__libc_init_array+0x1e>
 800cc9c:	08012f90 	.word	0x08012f90
 800cca0:	08012f90 	.word	0x08012f90
 800cca4:	08012f90 	.word	0x08012f90
 800cca8:	08012f94 	.word	0x08012f94

0800ccac <__retarget_lock_init_recursive>:
 800ccac:	4770      	bx	lr

0800ccae <__retarget_lock_acquire_recursive>:
 800ccae:	4770      	bx	lr

0800ccb0 <__retarget_lock_release_recursive>:
 800ccb0:	4770      	bx	lr

0800ccb2 <quorem>:
 800ccb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ccb6:	6903      	ldr	r3, [r0, #16]
 800ccb8:	690c      	ldr	r4, [r1, #16]
 800ccba:	42a3      	cmp	r3, r4
 800ccbc:	4607      	mov	r7, r0
 800ccbe:	db7e      	blt.n	800cdbe <quorem+0x10c>
 800ccc0:	3c01      	subs	r4, #1
 800ccc2:	f101 0814 	add.w	r8, r1, #20
 800ccc6:	f100 0514 	add.w	r5, r0, #20
 800ccca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ccce:	9301      	str	r3, [sp, #4]
 800ccd0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ccd4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ccd8:	3301      	adds	r3, #1
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cce0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cce4:	fbb2 f6f3 	udiv	r6, r2, r3
 800cce8:	d331      	bcc.n	800cd4e <quorem+0x9c>
 800ccea:	f04f 0e00 	mov.w	lr, #0
 800ccee:	4640      	mov	r0, r8
 800ccf0:	46ac      	mov	ip, r5
 800ccf2:	46f2      	mov	sl, lr
 800ccf4:	f850 2b04 	ldr.w	r2, [r0], #4
 800ccf8:	b293      	uxth	r3, r2
 800ccfa:	fb06 e303 	mla	r3, r6, r3, lr
 800ccfe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cd02:	0c1a      	lsrs	r2, r3, #16
 800cd04:	b29b      	uxth	r3, r3
 800cd06:	ebaa 0303 	sub.w	r3, sl, r3
 800cd0a:	f8dc a000 	ldr.w	sl, [ip]
 800cd0e:	fa13 f38a 	uxtah	r3, r3, sl
 800cd12:	fb06 220e 	mla	r2, r6, lr, r2
 800cd16:	9300      	str	r3, [sp, #0]
 800cd18:	9b00      	ldr	r3, [sp, #0]
 800cd1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cd1e:	b292      	uxth	r2, r2
 800cd20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cd24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd28:	f8bd 3000 	ldrh.w	r3, [sp]
 800cd2c:	4581      	cmp	r9, r0
 800cd2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd32:	f84c 3b04 	str.w	r3, [ip], #4
 800cd36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cd3a:	d2db      	bcs.n	800ccf4 <quorem+0x42>
 800cd3c:	f855 300b 	ldr.w	r3, [r5, fp]
 800cd40:	b92b      	cbnz	r3, 800cd4e <quorem+0x9c>
 800cd42:	9b01      	ldr	r3, [sp, #4]
 800cd44:	3b04      	subs	r3, #4
 800cd46:	429d      	cmp	r5, r3
 800cd48:	461a      	mov	r2, r3
 800cd4a:	d32c      	bcc.n	800cda6 <quorem+0xf4>
 800cd4c:	613c      	str	r4, [r7, #16]
 800cd4e:	4638      	mov	r0, r7
 800cd50:	f001 f8f4 	bl	800df3c <__mcmp>
 800cd54:	2800      	cmp	r0, #0
 800cd56:	db22      	blt.n	800cd9e <quorem+0xec>
 800cd58:	3601      	adds	r6, #1
 800cd5a:	4629      	mov	r1, r5
 800cd5c:	2000      	movs	r0, #0
 800cd5e:	f858 2b04 	ldr.w	r2, [r8], #4
 800cd62:	f8d1 c000 	ldr.w	ip, [r1]
 800cd66:	b293      	uxth	r3, r2
 800cd68:	1ac3      	subs	r3, r0, r3
 800cd6a:	0c12      	lsrs	r2, r2, #16
 800cd6c:	fa13 f38c 	uxtah	r3, r3, ip
 800cd70:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cd74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd7e:	45c1      	cmp	r9, r8
 800cd80:	f841 3b04 	str.w	r3, [r1], #4
 800cd84:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cd88:	d2e9      	bcs.n	800cd5e <quorem+0xac>
 800cd8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cd8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cd92:	b922      	cbnz	r2, 800cd9e <quorem+0xec>
 800cd94:	3b04      	subs	r3, #4
 800cd96:	429d      	cmp	r5, r3
 800cd98:	461a      	mov	r2, r3
 800cd9a:	d30a      	bcc.n	800cdb2 <quorem+0x100>
 800cd9c:	613c      	str	r4, [r7, #16]
 800cd9e:	4630      	mov	r0, r6
 800cda0:	b003      	add	sp, #12
 800cda2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cda6:	6812      	ldr	r2, [r2, #0]
 800cda8:	3b04      	subs	r3, #4
 800cdaa:	2a00      	cmp	r2, #0
 800cdac:	d1ce      	bne.n	800cd4c <quorem+0x9a>
 800cdae:	3c01      	subs	r4, #1
 800cdb0:	e7c9      	b.n	800cd46 <quorem+0x94>
 800cdb2:	6812      	ldr	r2, [r2, #0]
 800cdb4:	3b04      	subs	r3, #4
 800cdb6:	2a00      	cmp	r2, #0
 800cdb8:	d1f0      	bne.n	800cd9c <quorem+0xea>
 800cdba:	3c01      	subs	r4, #1
 800cdbc:	e7eb      	b.n	800cd96 <quorem+0xe4>
 800cdbe:	2000      	movs	r0, #0
 800cdc0:	e7ee      	b.n	800cda0 <quorem+0xee>
 800cdc2:	0000      	movs	r0, r0
 800cdc4:	0000      	movs	r0, r0
	...

0800cdc8 <_dtoa_r>:
 800cdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdcc:	ed2d 8b04 	vpush	{d8-d9}
 800cdd0:	69c5      	ldr	r5, [r0, #28]
 800cdd2:	b093      	sub	sp, #76	; 0x4c
 800cdd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cdd8:	ec57 6b10 	vmov	r6, r7, d0
 800cddc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cde0:	9107      	str	r1, [sp, #28]
 800cde2:	4604      	mov	r4, r0
 800cde4:	920a      	str	r2, [sp, #40]	; 0x28
 800cde6:	930d      	str	r3, [sp, #52]	; 0x34
 800cde8:	b975      	cbnz	r5, 800ce08 <_dtoa_r+0x40>
 800cdea:	2010      	movs	r0, #16
 800cdec:	f7fe ff90 	bl	800bd10 <malloc>
 800cdf0:	4602      	mov	r2, r0
 800cdf2:	61e0      	str	r0, [r4, #28]
 800cdf4:	b920      	cbnz	r0, 800ce00 <_dtoa_r+0x38>
 800cdf6:	4bae      	ldr	r3, [pc, #696]	; (800d0b0 <_dtoa_r+0x2e8>)
 800cdf8:	21ef      	movs	r1, #239	; 0xef
 800cdfa:	48ae      	ldr	r0, [pc, #696]	; (800d0b4 <_dtoa_r+0x2ec>)
 800cdfc:	f001 fd94 	bl	800e928 <__assert_func>
 800ce00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ce04:	6005      	str	r5, [r0, #0]
 800ce06:	60c5      	str	r5, [r0, #12]
 800ce08:	69e3      	ldr	r3, [r4, #28]
 800ce0a:	6819      	ldr	r1, [r3, #0]
 800ce0c:	b151      	cbz	r1, 800ce24 <_dtoa_r+0x5c>
 800ce0e:	685a      	ldr	r2, [r3, #4]
 800ce10:	604a      	str	r2, [r1, #4]
 800ce12:	2301      	movs	r3, #1
 800ce14:	4093      	lsls	r3, r2
 800ce16:	608b      	str	r3, [r1, #8]
 800ce18:	4620      	mov	r0, r4
 800ce1a:	f000 fe53 	bl	800dac4 <_Bfree>
 800ce1e:	69e3      	ldr	r3, [r4, #28]
 800ce20:	2200      	movs	r2, #0
 800ce22:	601a      	str	r2, [r3, #0]
 800ce24:	1e3b      	subs	r3, r7, #0
 800ce26:	bfbb      	ittet	lt
 800ce28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ce2c:	9303      	strlt	r3, [sp, #12]
 800ce2e:	2300      	movge	r3, #0
 800ce30:	2201      	movlt	r2, #1
 800ce32:	bfac      	ite	ge
 800ce34:	f8c8 3000 	strge.w	r3, [r8]
 800ce38:	f8c8 2000 	strlt.w	r2, [r8]
 800ce3c:	4b9e      	ldr	r3, [pc, #632]	; (800d0b8 <_dtoa_r+0x2f0>)
 800ce3e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ce42:	ea33 0308 	bics.w	r3, r3, r8
 800ce46:	d11b      	bne.n	800ce80 <_dtoa_r+0xb8>
 800ce48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce4a:	f242 730f 	movw	r3, #9999	; 0x270f
 800ce4e:	6013      	str	r3, [r2, #0]
 800ce50:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ce54:	4333      	orrs	r3, r6
 800ce56:	f000 8593 	beq.w	800d980 <_dtoa_r+0xbb8>
 800ce5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce5c:	b963      	cbnz	r3, 800ce78 <_dtoa_r+0xb0>
 800ce5e:	4b97      	ldr	r3, [pc, #604]	; (800d0bc <_dtoa_r+0x2f4>)
 800ce60:	e027      	b.n	800ceb2 <_dtoa_r+0xea>
 800ce62:	4b97      	ldr	r3, [pc, #604]	; (800d0c0 <_dtoa_r+0x2f8>)
 800ce64:	9300      	str	r3, [sp, #0]
 800ce66:	3308      	adds	r3, #8
 800ce68:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce6a:	6013      	str	r3, [r2, #0]
 800ce6c:	9800      	ldr	r0, [sp, #0]
 800ce6e:	b013      	add	sp, #76	; 0x4c
 800ce70:	ecbd 8b04 	vpop	{d8-d9}
 800ce74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce78:	4b90      	ldr	r3, [pc, #576]	; (800d0bc <_dtoa_r+0x2f4>)
 800ce7a:	9300      	str	r3, [sp, #0]
 800ce7c:	3303      	adds	r3, #3
 800ce7e:	e7f3      	b.n	800ce68 <_dtoa_r+0xa0>
 800ce80:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ce84:	2200      	movs	r2, #0
 800ce86:	ec51 0b17 	vmov	r0, r1, d7
 800ce8a:	eeb0 8a47 	vmov.f32	s16, s14
 800ce8e:	eef0 8a67 	vmov.f32	s17, s15
 800ce92:	2300      	movs	r3, #0
 800ce94:	f7f3 fe40 	bl	8000b18 <__aeabi_dcmpeq>
 800ce98:	4681      	mov	r9, r0
 800ce9a:	b160      	cbz	r0, 800ceb6 <_dtoa_r+0xee>
 800ce9c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ce9e:	2301      	movs	r3, #1
 800cea0:	6013      	str	r3, [r2, #0]
 800cea2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	f000 8568 	beq.w	800d97a <_dtoa_r+0xbb2>
 800ceaa:	4b86      	ldr	r3, [pc, #536]	; (800d0c4 <_dtoa_r+0x2fc>)
 800ceac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	3b01      	subs	r3, #1
 800ceb2:	9300      	str	r3, [sp, #0]
 800ceb4:	e7da      	b.n	800ce6c <_dtoa_r+0xa4>
 800ceb6:	aa10      	add	r2, sp, #64	; 0x40
 800ceb8:	a911      	add	r1, sp, #68	; 0x44
 800ceba:	4620      	mov	r0, r4
 800cebc:	eeb0 0a48 	vmov.f32	s0, s16
 800cec0:	eef0 0a68 	vmov.f32	s1, s17
 800cec4:	f001 f8e0 	bl	800e088 <__d2b>
 800cec8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cecc:	4682      	mov	sl, r0
 800cece:	2d00      	cmp	r5, #0
 800ced0:	d07f      	beq.n	800cfd2 <_dtoa_r+0x20a>
 800ced2:	ee18 3a90 	vmov	r3, s17
 800ced6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ceda:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cede:	ec51 0b18 	vmov	r0, r1, d8
 800cee2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cee6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ceea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ceee:	4619      	mov	r1, r3
 800cef0:	2200      	movs	r2, #0
 800cef2:	4b75      	ldr	r3, [pc, #468]	; (800d0c8 <_dtoa_r+0x300>)
 800cef4:	f7f3 f9f0 	bl	80002d8 <__aeabi_dsub>
 800cef8:	a367      	add	r3, pc, #412	; (adr r3, 800d098 <_dtoa_r+0x2d0>)
 800cefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cefe:	f7f3 fba3 	bl	8000648 <__aeabi_dmul>
 800cf02:	a367      	add	r3, pc, #412	; (adr r3, 800d0a0 <_dtoa_r+0x2d8>)
 800cf04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf08:	f7f3 f9e8 	bl	80002dc <__adddf3>
 800cf0c:	4606      	mov	r6, r0
 800cf0e:	4628      	mov	r0, r5
 800cf10:	460f      	mov	r7, r1
 800cf12:	f7f3 fb2f 	bl	8000574 <__aeabi_i2d>
 800cf16:	a364      	add	r3, pc, #400	; (adr r3, 800d0a8 <_dtoa_r+0x2e0>)
 800cf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1c:	f7f3 fb94 	bl	8000648 <__aeabi_dmul>
 800cf20:	4602      	mov	r2, r0
 800cf22:	460b      	mov	r3, r1
 800cf24:	4630      	mov	r0, r6
 800cf26:	4639      	mov	r1, r7
 800cf28:	f7f3 f9d8 	bl	80002dc <__adddf3>
 800cf2c:	4606      	mov	r6, r0
 800cf2e:	460f      	mov	r7, r1
 800cf30:	f7f3 fe3a 	bl	8000ba8 <__aeabi_d2iz>
 800cf34:	2200      	movs	r2, #0
 800cf36:	4683      	mov	fp, r0
 800cf38:	2300      	movs	r3, #0
 800cf3a:	4630      	mov	r0, r6
 800cf3c:	4639      	mov	r1, r7
 800cf3e:	f7f3 fdf5 	bl	8000b2c <__aeabi_dcmplt>
 800cf42:	b148      	cbz	r0, 800cf58 <_dtoa_r+0x190>
 800cf44:	4658      	mov	r0, fp
 800cf46:	f7f3 fb15 	bl	8000574 <__aeabi_i2d>
 800cf4a:	4632      	mov	r2, r6
 800cf4c:	463b      	mov	r3, r7
 800cf4e:	f7f3 fde3 	bl	8000b18 <__aeabi_dcmpeq>
 800cf52:	b908      	cbnz	r0, 800cf58 <_dtoa_r+0x190>
 800cf54:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf58:	f1bb 0f16 	cmp.w	fp, #22
 800cf5c:	d857      	bhi.n	800d00e <_dtoa_r+0x246>
 800cf5e:	4b5b      	ldr	r3, [pc, #364]	; (800d0cc <_dtoa_r+0x304>)
 800cf60:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf68:	ec51 0b18 	vmov	r0, r1, d8
 800cf6c:	f7f3 fdde 	bl	8000b2c <__aeabi_dcmplt>
 800cf70:	2800      	cmp	r0, #0
 800cf72:	d04e      	beq.n	800d012 <_dtoa_r+0x24a>
 800cf74:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cf78:	2300      	movs	r3, #0
 800cf7a:	930c      	str	r3, [sp, #48]	; 0x30
 800cf7c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf7e:	1b5b      	subs	r3, r3, r5
 800cf80:	1e5a      	subs	r2, r3, #1
 800cf82:	bf45      	ittet	mi
 800cf84:	f1c3 0301 	rsbmi	r3, r3, #1
 800cf88:	9305      	strmi	r3, [sp, #20]
 800cf8a:	2300      	movpl	r3, #0
 800cf8c:	2300      	movmi	r3, #0
 800cf8e:	9206      	str	r2, [sp, #24]
 800cf90:	bf54      	ite	pl
 800cf92:	9305      	strpl	r3, [sp, #20]
 800cf94:	9306      	strmi	r3, [sp, #24]
 800cf96:	f1bb 0f00 	cmp.w	fp, #0
 800cf9a:	db3c      	blt.n	800d016 <_dtoa_r+0x24e>
 800cf9c:	9b06      	ldr	r3, [sp, #24]
 800cf9e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800cfa2:	445b      	add	r3, fp
 800cfa4:	9306      	str	r3, [sp, #24]
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	9308      	str	r3, [sp, #32]
 800cfaa:	9b07      	ldr	r3, [sp, #28]
 800cfac:	2b09      	cmp	r3, #9
 800cfae:	d868      	bhi.n	800d082 <_dtoa_r+0x2ba>
 800cfb0:	2b05      	cmp	r3, #5
 800cfb2:	bfc4      	itt	gt
 800cfb4:	3b04      	subgt	r3, #4
 800cfb6:	9307      	strgt	r3, [sp, #28]
 800cfb8:	9b07      	ldr	r3, [sp, #28]
 800cfba:	f1a3 0302 	sub.w	r3, r3, #2
 800cfbe:	bfcc      	ite	gt
 800cfc0:	2500      	movgt	r5, #0
 800cfc2:	2501      	movle	r5, #1
 800cfc4:	2b03      	cmp	r3, #3
 800cfc6:	f200 8085 	bhi.w	800d0d4 <_dtoa_r+0x30c>
 800cfca:	e8df f003 	tbb	[pc, r3]
 800cfce:	3b2e      	.short	0x3b2e
 800cfd0:	5839      	.short	0x5839
 800cfd2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cfd6:	441d      	add	r5, r3
 800cfd8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cfdc:	2b20      	cmp	r3, #32
 800cfde:	bfc1      	itttt	gt
 800cfe0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cfe4:	fa08 f803 	lslgt.w	r8, r8, r3
 800cfe8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800cfec:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cff0:	bfd6      	itet	le
 800cff2:	f1c3 0320 	rsble	r3, r3, #32
 800cff6:	ea48 0003 	orrgt.w	r0, r8, r3
 800cffa:	fa06 f003 	lslle.w	r0, r6, r3
 800cffe:	f7f3 faa9 	bl	8000554 <__aeabi_ui2d>
 800d002:	2201      	movs	r2, #1
 800d004:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800d008:	3d01      	subs	r5, #1
 800d00a:	920e      	str	r2, [sp, #56]	; 0x38
 800d00c:	e76f      	b.n	800ceee <_dtoa_r+0x126>
 800d00e:	2301      	movs	r3, #1
 800d010:	e7b3      	b.n	800cf7a <_dtoa_r+0x1b2>
 800d012:	900c      	str	r0, [sp, #48]	; 0x30
 800d014:	e7b2      	b.n	800cf7c <_dtoa_r+0x1b4>
 800d016:	9b05      	ldr	r3, [sp, #20]
 800d018:	eba3 030b 	sub.w	r3, r3, fp
 800d01c:	9305      	str	r3, [sp, #20]
 800d01e:	f1cb 0300 	rsb	r3, fp, #0
 800d022:	9308      	str	r3, [sp, #32]
 800d024:	2300      	movs	r3, #0
 800d026:	930b      	str	r3, [sp, #44]	; 0x2c
 800d028:	e7bf      	b.n	800cfaa <_dtoa_r+0x1e2>
 800d02a:	2300      	movs	r3, #0
 800d02c:	9309      	str	r3, [sp, #36]	; 0x24
 800d02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d030:	2b00      	cmp	r3, #0
 800d032:	dc52      	bgt.n	800d0da <_dtoa_r+0x312>
 800d034:	2301      	movs	r3, #1
 800d036:	9301      	str	r3, [sp, #4]
 800d038:	9304      	str	r3, [sp, #16]
 800d03a:	461a      	mov	r2, r3
 800d03c:	920a      	str	r2, [sp, #40]	; 0x28
 800d03e:	e00b      	b.n	800d058 <_dtoa_r+0x290>
 800d040:	2301      	movs	r3, #1
 800d042:	e7f3      	b.n	800d02c <_dtoa_r+0x264>
 800d044:	2300      	movs	r3, #0
 800d046:	9309      	str	r3, [sp, #36]	; 0x24
 800d048:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d04a:	445b      	add	r3, fp
 800d04c:	9301      	str	r3, [sp, #4]
 800d04e:	3301      	adds	r3, #1
 800d050:	2b01      	cmp	r3, #1
 800d052:	9304      	str	r3, [sp, #16]
 800d054:	bfb8      	it	lt
 800d056:	2301      	movlt	r3, #1
 800d058:	69e0      	ldr	r0, [r4, #28]
 800d05a:	2100      	movs	r1, #0
 800d05c:	2204      	movs	r2, #4
 800d05e:	f102 0614 	add.w	r6, r2, #20
 800d062:	429e      	cmp	r6, r3
 800d064:	d93d      	bls.n	800d0e2 <_dtoa_r+0x31a>
 800d066:	6041      	str	r1, [r0, #4]
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 fceb 	bl	800da44 <_Balloc>
 800d06e:	9000      	str	r0, [sp, #0]
 800d070:	2800      	cmp	r0, #0
 800d072:	d139      	bne.n	800d0e8 <_dtoa_r+0x320>
 800d074:	4b16      	ldr	r3, [pc, #88]	; (800d0d0 <_dtoa_r+0x308>)
 800d076:	4602      	mov	r2, r0
 800d078:	f240 11af 	movw	r1, #431	; 0x1af
 800d07c:	e6bd      	b.n	800cdfa <_dtoa_r+0x32>
 800d07e:	2301      	movs	r3, #1
 800d080:	e7e1      	b.n	800d046 <_dtoa_r+0x27e>
 800d082:	2501      	movs	r5, #1
 800d084:	2300      	movs	r3, #0
 800d086:	9307      	str	r3, [sp, #28]
 800d088:	9509      	str	r5, [sp, #36]	; 0x24
 800d08a:	f04f 33ff 	mov.w	r3, #4294967295
 800d08e:	9301      	str	r3, [sp, #4]
 800d090:	9304      	str	r3, [sp, #16]
 800d092:	2200      	movs	r2, #0
 800d094:	2312      	movs	r3, #18
 800d096:	e7d1      	b.n	800d03c <_dtoa_r+0x274>
 800d098:	636f4361 	.word	0x636f4361
 800d09c:	3fd287a7 	.word	0x3fd287a7
 800d0a0:	8b60c8b3 	.word	0x8b60c8b3
 800d0a4:	3fc68a28 	.word	0x3fc68a28
 800d0a8:	509f79fb 	.word	0x509f79fb
 800d0ac:	3fd34413 	.word	0x3fd34413
 800d0b0:	08012c25 	.word	0x08012c25
 800d0b4:	08012c3c 	.word	0x08012c3c
 800d0b8:	7ff00000 	.word	0x7ff00000
 800d0bc:	08012c21 	.word	0x08012c21
 800d0c0:	08012c18 	.word	0x08012c18
 800d0c4:	08012bf5 	.word	0x08012bf5
 800d0c8:	3ff80000 	.word	0x3ff80000
 800d0cc:	08012d28 	.word	0x08012d28
 800d0d0:	08012c94 	.word	0x08012c94
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d0d8:	e7d7      	b.n	800d08a <_dtoa_r+0x2c2>
 800d0da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d0dc:	9301      	str	r3, [sp, #4]
 800d0de:	9304      	str	r3, [sp, #16]
 800d0e0:	e7ba      	b.n	800d058 <_dtoa_r+0x290>
 800d0e2:	3101      	adds	r1, #1
 800d0e4:	0052      	lsls	r2, r2, #1
 800d0e6:	e7ba      	b.n	800d05e <_dtoa_r+0x296>
 800d0e8:	69e3      	ldr	r3, [r4, #28]
 800d0ea:	9a00      	ldr	r2, [sp, #0]
 800d0ec:	601a      	str	r2, [r3, #0]
 800d0ee:	9b04      	ldr	r3, [sp, #16]
 800d0f0:	2b0e      	cmp	r3, #14
 800d0f2:	f200 80a8 	bhi.w	800d246 <_dtoa_r+0x47e>
 800d0f6:	2d00      	cmp	r5, #0
 800d0f8:	f000 80a5 	beq.w	800d246 <_dtoa_r+0x47e>
 800d0fc:	f1bb 0f00 	cmp.w	fp, #0
 800d100:	dd38      	ble.n	800d174 <_dtoa_r+0x3ac>
 800d102:	4bc0      	ldr	r3, [pc, #768]	; (800d404 <_dtoa_r+0x63c>)
 800d104:	f00b 020f 	and.w	r2, fp, #15
 800d108:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d10c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800d110:	e9d3 6700 	ldrd	r6, r7, [r3]
 800d114:	ea4f 182b 	mov.w	r8, fp, asr #4
 800d118:	d019      	beq.n	800d14e <_dtoa_r+0x386>
 800d11a:	4bbb      	ldr	r3, [pc, #748]	; (800d408 <_dtoa_r+0x640>)
 800d11c:	ec51 0b18 	vmov	r0, r1, d8
 800d120:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d124:	f7f3 fbba 	bl	800089c <__aeabi_ddiv>
 800d128:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d12c:	f008 080f 	and.w	r8, r8, #15
 800d130:	2503      	movs	r5, #3
 800d132:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d408 <_dtoa_r+0x640>
 800d136:	f1b8 0f00 	cmp.w	r8, #0
 800d13a:	d10a      	bne.n	800d152 <_dtoa_r+0x38a>
 800d13c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d140:	4632      	mov	r2, r6
 800d142:	463b      	mov	r3, r7
 800d144:	f7f3 fbaa 	bl	800089c <__aeabi_ddiv>
 800d148:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d14c:	e02b      	b.n	800d1a6 <_dtoa_r+0x3de>
 800d14e:	2502      	movs	r5, #2
 800d150:	e7ef      	b.n	800d132 <_dtoa_r+0x36a>
 800d152:	f018 0f01 	tst.w	r8, #1
 800d156:	d008      	beq.n	800d16a <_dtoa_r+0x3a2>
 800d158:	4630      	mov	r0, r6
 800d15a:	4639      	mov	r1, r7
 800d15c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d160:	f7f3 fa72 	bl	8000648 <__aeabi_dmul>
 800d164:	3501      	adds	r5, #1
 800d166:	4606      	mov	r6, r0
 800d168:	460f      	mov	r7, r1
 800d16a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d16e:	f109 0908 	add.w	r9, r9, #8
 800d172:	e7e0      	b.n	800d136 <_dtoa_r+0x36e>
 800d174:	f000 809f 	beq.w	800d2b6 <_dtoa_r+0x4ee>
 800d178:	f1cb 0600 	rsb	r6, fp, #0
 800d17c:	4ba1      	ldr	r3, [pc, #644]	; (800d404 <_dtoa_r+0x63c>)
 800d17e:	4fa2      	ldr	r7, [pc, #648]	; (800d408 <_dtoa_r+0x640>)
 800d180:	f006 020f 	and.w	r2, r6, #15
 800d184:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18c:	ec51 0b18 	vmov	r0, r1, d8
 800d190:	f7f3 fa5a 	bl	8000648 <__aeabi_dmul>
 800d194:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d198:	1136      	asrs	r6, r6, #4
 800d19a:	2300      	movs	r3, #0
 800d19c:	2502      	movs	r5, #2
 800d19e:	2e00      	cmp	r6, #0
 800d1a0:	d17e      	bne.n	800d2a0 <_dtoa_r+0x4d8>
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1d0      	bne.n	800d148 <_dtoa_r+0x380>
 800d1a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	f000 8084 	beq.w	800d2ba <_dtoa_r+0x4f2>
 800d1b2:	4b96      	ldr	r3, [pc, #600]	; (800d40c <_dtoa_r+0x644>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	4640      	mov	r0, r8
 800d1b8:	4649      	mov	r1, r9
 800d1ba:	f7f3 fcb7 	bl	8000b2c <__aeabi_dcmplt>
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	d07b      	beq.n	800d2ba <_dtoa_r+0x4f2>
 800d1c2:	9b04      	ldr	r3, [sp, #16]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d078      	beq.n	800d2ba <_dtoa_r+0x4f2>
 800d1c8:	9b01      	ldr	r3, [sp, #4]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	dd39      	ble.n	800d242 <_dtoa_r+0x47a>
 800d1ce:	4b90      	ldr	r3, [pc, #576]	; (800d410 <_dtoa_r+0x648>)
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	4640      	mov	r0, r8
 800d1d4:	4649      	mov	r1, r9
 800d1d6:	f7f3 fa37 	bl	8000648 <__aeabi_dmul>
 800d1da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1de:	9e01      	ldr	r6, [sp, #4]
 800d1e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800d1e4:	3501      	adds	r5, #1
 800d1e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	f7f3 f9c2 	bl	8000574 <__aeabi_i2d>
 800d1f0:	4642      	mov	r2, r8
 800d1f2:	464b      	mov	r3, r9
 800d1f4:	f7f3 fa28 	bl	8000648 <__aeabi_dmul>
 800d1f8:	4b86      	ldr	r3, [pc, #536]	; (800d414 <_dtoa_r+0x64c>)
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f7f3 f86e 	bl	80002dc <__adddf3>
 800d200:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d204:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d208:	9303      	str	r3, [sp, #12]
 800d20a:	2e00      	cmp	r6, #0
 800d20c:	d158      	bne.n	800d2c0 <_dtoa_r+0x4f8>
 800d20e:	4b82      	ldr	r3, [pc, #520]	; (800d418 <_dtoa_r+0x650>)
 800d210:	2200      	movs	r2, #0
 800d212:	4640      	mov	r0, r8
 800d214:	4649      	mov	r1, r9
 800d216:	f7f3 f85f 	bl	80002d8 <__aeabi_dsub>
 800d21a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d21e:	4680      	mov	r8, r0
 800d220:	4689      	mov	r9, r1
 800d222:	f7f3 fca1 	bl	8000b68 <__aeabi_dcmpgt>
 800d226:	2800      	cmp	r0, #0
 800d228:	f040 8296 	bne.w	800d758 <_dtoa_r+0x990>
 800d22c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d230:	4640      	mov	r0, r8
 800d232:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d236:	4649      	mov	r1, r9
 800d238:	f7f3 fc78 	bl	8000b2c <__aeabi_dcmplt>
 800d23c:	2800      	cmp	r0, #0
 800d23e:	f040 8289 	bne.w	800d754 <_dtoa_r+0x98c>
 800d242:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d246:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d248:	2b00      	cmp	r3, #0
 800d24a:	f2c0 814e 	blt.w	800d4ea <_dtoa_r+0x722>
 800d24e:	f1bb 0f0e 	cmp.w	fp, #14
 800d252:	f300 814a 	bgt.w	800d4ea <_dtoa_r+0x722>
 800d256:	4b6b      	ldr	r3, [pc, #428]	; (800d404 <_dtoa_r+0x63c>)
 800d258:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d25c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d262:	2b00      	cmp	r3, #0
 800d264:	f280 80dc 	bge.w	800d420 <_dtoa_r+0x658>
 800d268:	9b04      	ldr	r3, [sp, #16]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	f300 80d8 	bgt.w	800d420 <_dtoa_r+0x658>
 800d270:	f040 826f 	bne.w	800d752 <_dtoa_r+0x98a>
 800d274:	4b68      	ldr	r3, [pc, #416]	; (800d418 <_dtoa_r+0x650>)
 800d276:	2200      	movs	r2, #0
 800d278:	4640      	mov	r0, r8
 800d27a:	4649      	mov	r1, r9
 800d27c:	f7f3 f9e4 	bl	8000648 <__aeabi_dmul>
 800d280:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d284:	f7f3 fc66 	bl	8000b54 <__aeabi_dcmpge>
 800d288:	9e04      	ldr	r6, [sp, #16]
 800d28a:	4637      	mov	r7, r6
 800d28c:	2800      	cmp	r0, #0
 800d28e:	f040 8245 	bne.w	800d71c <_dtoa_r+0x954>
 800d292:	9d00      	ldr	r5, [sp, #0]
 800d294:	2331      	movs	r3, #49	; 0x31
 800d296:	f805 3b01 	strb.w	r3, [r5], #1
 800d29a:	f10b 0b01 	add.w	fp, fp, #1
 800d29e:	e241      	b.n	800d724 <_dtoa_r+0x95c>
 800d2a0:	07f2      	lsls	r2, r6, #31
 800d2a2:	d505      	bpl.n	800d2b0 <_dtoa_r+0x4e8>
 800d2a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d2a8:	f7f3 f9ce 	bl	8000648 <__aeabi_dmul>
 800d2ac:	3501      	adds	r5, #1
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	1076      	asrs	r6, r6, #1
 800d2b2:	3708      	adds	r7, #8
 800d2b4:	e773      	b.n	800d19e <_dtoa_r+0x3d6>
 800d2b6:	2502      	movs	r5, #2
 800d2b8:	e775      	b.n	800d1a6 <_dtoa_r+0x3de>
 800d2ba:	9e04      	ldr	r6, [sp, #16]
 800d2bc:	465f      	mov	r7, fp
 800d2be:	e792      	b.n	800d1e6 <_dtoa_r+0x41e>
 800d2c0:	9900      	ldr	r1, [sp, #0]
 800d2c2:	4b50      	ldr	r3, [pc, #320]	; (800d404 <_dtoa_r+0x63c>)
 800d2c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d2c8:	4431      	add	r1, r6
 800d2ca:	9102      	str	r1, [sp, #8]
 800d2cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d2ce:	eeb0 9a47 	vmov.f32	s18, s14
 800d2d2:	eef0 9a67 	vmov.f32	s19, s15
 800d2d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d2da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d2de:	2900      	cmp	r1, #0
 800d2e0:	d044      	beq.n	800d36c <_dtoa_r+0x5a4>
 800d2e2:	494e      	ldr	r1, [pc, #312]	; (800d41c <_dtoa_r+0x654>)
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	f7f3 fad9 	bl	800089c <__aeabi_ddiv>
 800d2ea:	ec53 2b19 	vmov	r2, r3, d9
 800d2ee:	f7f2 fff3 	bl	80002d8 <__aeabi_dsub>
 800d2f2:	9d00      	ldr	r5, [sp, #0]
 800d2f4:	ec41 0b19 	vmov	d9, r0, r1
 800d2f8:	4649      	mov	r1, r9
 800d2fa:	4640      	mov	r0, r8
 800d2fc:	f7f3 fc54 	bl	8000ba8 <__aeabi_d2iz>
 800d300:	4606      	mov	r6, r0
 800d302:	f7f3 f937 	bl	8000574 <__aeabi_i2d>
 800d306:	4602      	mov	r2, r0
 800d308:	460b      	mov	r3, r1
 800d30a:	4640      	mov	r0, r8
 800d30c:	4649      	mov	r1, r9
 800d30e:	f7f2 ffe3 	bl	80002d8 <__aeabi_dsub>
 800d312:	3630      	adds	r6, #48	; 0x30
 800d314:	f805 6b01 	strb.w	r6, [r5], #1
 800d318:	ec53 2b19 	vmov	r2, r3, d9
 800d31c:	4680      	mov	r8, r0
 800d31e:	4689      	mov	r9, r1
 800d320:	f7f3 fc04 	bl	8000b2c <__aeabi_dcmplt>
 800d324:	2800      	cmp	r0, #0
 800d326:	d164      	bne.n	800d3f2 <_dtoa_r+0x62a>
 800d328:	4642      	mov	r2, r8
 800d32a:	464b      	mov	r3, r9
 800d32c:	4937      	ldr	r1, [pc, #220]	; (800d40c <_dtoa_r+0x644>)
 800d32e:	2000      	movs	r0, #0
 800d330:	f7f2 ffd2 	bl	80002d8 <__aeabi_dsub>
 800d334:	ec53 2b19 	vmov	r2, r3, d9
 800d338:	f7f3 fbf8 	bl	8000b2c <__aeabi_dcmplt>
 800d33c:	2800      	cmp	r0, #0
 800d33e:	f040 80b6 	bne.w	800d4ae <_dtoa_r+0x6e6>
 800d342:	9b02      	ldr	r3, [sp, #8]
 800d344:	429d      	cmp	r5, r3
 800d346:	f43f af7c 	beq.w	800d242 <_dtoa_r+0x47a>
 800d34a:	4b31      	ldr	r3, [pc, #196]	; (800d410 <_dtoa_r+0x648>)
 800d34c:	ec51 0b19 	vmov	r0, r1, d9
 800d350:	2200      	movs	r2, #0
 800d352:	f7f3 f979 	bl	8000648 <__aeabi_dmul>
 800d356:	4b2e      	ldr	r3, [pc, #184]	; (800d410 <_dtoa_r+0x648>)
 800d358:	ec41 0b19 	vmov	d9, r0, r1
 800d35c:	2200      	movs	r2, #0
 800d35e:	4640      	mov	r0, r8
 800d360:	4649      	mov	r1, r9
 800d362:	f7f3 f971 	bl	8000648 <__aeabi_dmul>
 800d366:	4680      	mov	r8, r0
 800d368:	4689      	mov	r9, r1
 800d36a:	e7c5      	b.n	800d2f8 <_dtoa_r+0x530>
 800d36c:	ec51 0b17 	vmov	r0, r1, d7
 800d370:	f7f3 f96a 	bl	8000648 <__aeabi_dmul>
 800d374:	9b02      	ldr	r3, [sp, #8]
 800d376:	9d00      	ldr	r5, [sp, #0]
 800d378:	930f      	str	r3, [sp, #60]	; 0x3c
 800d37a:	ec41 0b19 	vmov	d9, r0, r1
 800d37e:	4649      	mov	r1, r9
 800d380:	4640      	mov	r0, r8
 800d382:	f7f3 fc11 	bl	8000ba8 <__aeabi_d2iz>
 800d386:	4606      	mov	r6, r0
 800d388:	f7f3 f8f4 	bl	8000574 <__aeabi_i2d>
 800d38c:	3630      	adds	r6, #48	; 0x30
 800d38e:	4602      	mov	r2, r0
 800d390:	460b      	mov	r3, r1
 800d392:	4640      	mov	r0, r8
 800d394:	4649      	mov	r1, r9
 800d396:	f7f2 ff9f 	bl	80002d8 <__aeabi_dsub>
 800d39a:	f805 6b01 	strb.w	r6, [r5], #1
 800d39e:	9b02      	ldr	r3, [sp, #8]
 800d3a0:	429d      	cmp	r5, r3
 800d3a2:	4680      	mov	r8, r0
 800d3a4:	4689      	mov	r9, r1
 800d3a6:	f04f 0200 	mov.w	r2, #0
 800d3aa:	d124      	bne.n	800d3f6 <_dtoa_r+0x62e>
 800d3ac:	4b1b      	ldr	r3, [pc, #108]	; (800d41c <_dtoa_r+0x654>)
 800d3ae:	ec51 0b19 	vmov	r0, r1, d9
 800d3b2:	f7f2 ff93 	bl	80002dc <__adddf3>
 800d3b6:	4602      	mov	r2, r0
 800d3b8:	460b      	mov	r3, r1
 800d3ba:	4640      	mov	r0, r8
 800d3bc:	4649      	mov	r1, r9
 800d3be:	f7f3 fbd3 	bl	8000b68 <__aeabi_dcmpgt>
 800d3c2:	2800      	cmp	r0, #0
 800d3c4:	d173      	bne.n	800d4ae <_dtoa_r+0x6e6>
 800d3c6:	ec53 2b19 	vmov	r2, r3, d9
 800d3ca:	4914      	ldr	r1, [pc, #80]	; (800d41c <_dtoa_r+0x654>)
 800d3cc:	2000      	movs	r0, #0
 800d3ce:	f7f2 ff83 	bl	80002d8 <__aeabi_dsub>
 800d3d2:	4602      	mov	r2, r0
 800d3d4:	460b      	mov	r3, r1
 800d3d6:	4640      	mov	r0, r8
 800d3d8:	4649      	mov	r1, r9
 800d3da:	f7f3 fba7 	bl	8000b2c <__aeabi_dcmplt>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	f43f af2f 	beq.w	800d242 <_dtoa_r+0x47a>
 800d3e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d3e6:	1e6b      	subs	r3, r5, #1
 800d3e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d3ee:	2b30      	cmp	r3, #48	; 0x30
 800d3f0:	d0f8      	beq.n	800d3e4 <_dtoa_r+0x61c>
 800d3f2:	46bb      	mov	fp, r7
 800d3f4:	e04a      	b.n	800d48c <_dtoa_r+0x6c4>
 800d3f6:	4b06      	ldr	r3, [pc, #24]	; (800d410 <_dtoa_r+0x648>)
 800d3f8:	f7f3 f926 	bl	8000648 <__aeabi_dmul>
 800d3fc:	4680      	mov	r8, r0
 800d3fe:	4689      	mov	r9, r1
 800d400:	e7bd      	b.n	800d37e <_dtoa_r+0x5b6>
 800d402:	bf00      	nop
 800d404:	08012d28 	.word	0x08012d28
 800d408:	08012d00 	.word	0x08012d00
 800d40c:	3ff00000 	.word	0x3ff00000
 800d410:	40240000 	.word	0x40240000
 800d414:	401c0000 	.word	0x401c0000
 800d418:	40140000 	.word	0x40140000
 800d41c:	3fe00000 	.word	0x3fe00000
 800d420:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d424:	9d00      	ldr	r5, [sp, #0]
 800d426:	4642      	mov	r2, r8
 800d428:	464b      	mov	r3, r9
 800d42a:	4630      	mov	r0, r6
 800d42c:	4639      	mov	r1, r7
 800d42e:	f7f3 fa35 	bl	800089c <__aeabi_ddiv>
 800d432:	f7f3 fbb9 	bl	8000ba8 <__aeabi_d2iz>
 800d436:	9001      	str	r0, [sp, #4]
 800d438:	f7f3 f89c 	bl	8000574 <__aeabi_i2d>
 800d43c:	4642      	mov	r2, r8
 800d43e:	464b      	mov	r3, r9
 800d440:	f7f3 f902 	bl	8000648 <__aeabi_dmul>
 800d444:	4602      	mov	r2, r0
 800d446:	460b      	mov	r3, r1
 800d448:	4630      	mov	r0, r6
 800d44a:	4639      	mov	r1, r7
 800d44c:	f7f2 ff44 	bl	80002d8 <__aeabi_dsub>
 800d450:	9e01      	ldr	r6, [sp, #4]
 800d452:	9f04      	ldr	r7, [sp, #16]
 800d454:	3630      	adds	r6, #48	; 0x30
 800d456:	f805 6b01 	strb.w	r6, [r5], #1
 800d45a:	9e00      	ldr	r6, [sp, #0]
 800d45c:	1bae      	subs	r6, r5, r6
 800d45e:	42b7      	cmp	r7, r6
 800d460:	4602      	mov	r2, r0
 800d462:	460b      	mov	r3, r1
 800d464:	d134      	bne.n	800d4d0 <_dtoa_r+0x708>
 800d466:	f7f2 ff39 	bl	80002dc <__adddf3>
 800d46a:	4642      	mov	r2, r8
 800d46c:	464b      	mov	r3, r9
 800d46e:	4606      	mov	r6, r0
 800d470:	460f      	mov	r7, r1
 800d472:	f7f3 fb79 	bl	8000b68 <__aeabi_dcmpgt>
 800d476:	b9c8      	cbnz	r0, 800d4ac <_dtoa_r+0x6e4>
 800d478:	4642      	mov	r2, r8
 800d47a:	464b      	mov	r3, r9
 800d47c:	4630      	mov	r0, r6
 800d47e:	4639      	mov	r1, r7
 800d480:	f7f3 fb4a 	bl	8000b18 <__aeabi_dcmpeq>
 800d484:	b110      	cbz	r0, 800d48c <_dtoa_r+0x6c4>
 800d486:	9b01      	ldr	r3, [sp, #4]
 800d488:	07db      	lsls	r3, r3, #31
 800d48a:	d40f      	bmi.n	800d4ac <_dtoa_r+0x6e4>
 800d48c:	4651      	mov	r1, sl
 800d48e:	4620      	mov	r0, r4
 800d490:	f000 fb18 	bl	800dac4 <_Bfree>
 800d494:	2300      	movs	r3, #0
 800d496:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d498:	702b      	strb	r3, [r5, #0]
 800d49a:	f10b 0301 	add.w	r3, fp, #1
 800d49e:	6013      	str	r3, [r2, #0]
 800d4a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	f43f ace2 	beq.w	800ce6c <_dtoa_r+0xa4>
 800d4a8:	601d      	str	r5, [r3, #0]
 800d4aa:	e4df      	b.n	800ce6c <_dtoa_r+0xa4>
 800d4ac:	465f      	mov	r7, fp
 800d4ae:	462b      	mov	r3, r5
 800d4b0:	461d      	mov	r5, r3
 800d4b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d4b6:	2a39      	cmp	r2, #57	; 0x39
 800d4b8:	d106      	bne.n	800d4c8 <_dtoa_r+0x700>
 800d4ba:	9a00      	ldr	r2, [sp, #0]
 800d4bc:	429a      	cmp	r2, r3
 800d4be:	d1f7      	bne.n	800d4b0 <_dtoa_r+0x6e8>
 800d4c0:	9900      	ldr	r1, [sp, #0]
 800d4c2:	2230      	movs	r2, #48	; 0x30
 800d4c4:	3701      	adds	r7, #1
 800d4c6:	700a      	strb	r2, [r1, #0]
 800d4c8:	781a      	ldrb	r2, [r3, #0]
 800d4ca:	3201      	adds	r2, #1
 800d4cc:	701a      	strb	r2, [r3, #0]
 800d4ce:	e790      	b.n	800d3f2 <_dtoa_r+0x62a>
 800d4d0:	4ba3      	ldr	r3, [pc, #652]	; (800d760 <_dtoa_r+0x998>)
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	f7f3 f8b8 	bl	8000648 <__aeabi_dmul>
 800d4d8:	2200      	movs	r2, #0
 800d4da:	2300      	movs	r3, #0
 800d4dc:	4606      	mov	r6, r0
 800d4de:	460f      	mov	r7, r1
 800d4e0:	f7f3 fb1a 	bl	8000b18 <__aeabi_dcmpeq>
 800d4e4:	2800      	cmp	r0, #0
 800d4e6:	d09e      	beq.n	800d426 <_dtoa_r+0x65e>
 800d4e8:	e7d0      	b.n	800d48c <_dtoa_r+0x6c4>
 800d4ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4ec:	2a00      	cmp	r2, #0
 800d4ee:	f000 80ca 	beq.w	800d686 <_dtoa_r+0x8be>
 800d4f2:	9a07      	ldr	r2, [sp, #28]
 800d4f4:	2a01      	cmp	r2, #1
 800d4f6:	f300 80ad 	bgt.w	800d654 <_dtoa_r+0x88c>
 800d4fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d4fc:	2a00      	cmp	r2, #0
 800d4fe:	f000 80a5 	beq.w	800d64c <_dtoa_r+0x884>
 800d502:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d506:	9e08      	ldr	r6, [sp, #32]
 800d508:	9d05      	ldr	r5, [sp, #20]
 800d50a:	9a05      	ldr	r2, [sp, #20]
 800d50c:	441a      	add	r2, r3
 800d50e:	9205      	str	r2, [sp, #20]
 800d510:	9a06      	ldr	r2, [sp, #24]
 800d512:	2101      	movs	r1, #1
 800d514:	441a      	add	r2, r3
 800d516:	4620      	mov	r0, r4
 800d518:	9206      	str	r2, [sp, #24]
 800d51a:	f000 fb89 	bl	800dc30 <__i2b>
 800d51e:	4607      	mov	r7, r0
 800d520:	b165      	cbz	r5, 800d53c <_dtoa_r+0x774>
 800d522:	9b06      	ldr	r3, [sp, #24]
 800d524:	2b00      	cmp	r3, #0
 800d526:	dd09      	ble.n	800d53c <_dtoa_r+0x774>
 800d528:	42ab      	cmp	r3, r5
 800d52a:	9a05      	ldr	r2, [sp, #20]
 800d52c:	bfa8      	it	ge
 800d52e:	462b      	movge	r3, r5
 800d530:	1ad2      	subs	r2, r2, r3
 800d532:	9205      	str	r2, [sp, #20]
 800d534:	9a06      	ldr	r2, [sp, #24]
 800d536:	1aed      	subs	r5, r5, r3
 800d538:	1ad3      	subs	r3, r2, r3
 800d53a:	9306      	str	r3, [sp, #24]
 800d53c:	9b08      	ldr	r3, [sp, #32]
 800d53e:	b1f3      	cbz	r3, 800d57e <_dtoa_r+0x7b6>
 800d540:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d542:	2b00      	cmp	r3, #0
 800d544:	f000 80a3 	beq.w	800d68e <_dtoa_r+0x8c6>
 800d548:	2e00      	cmp	r6, #0
 800d54a:	dd10      	ble.n	800d56e <_dtoa_r+0x7a6>
 800d54c:	4639      	mov	r1, r7
 800d54e:	4632      	mov	r2, r6
 800d550:	4620      	mov	r0, r4
 800d552:	f000 fc2d 	bl	800ddb0 <__pow5mult>
 800d556:	4652      	mov	r2, sl
 800d558:	4601      	mov	r1, r0
 800d55a:	4607      	mov	r7, r0
 800d55c:	4620      	mov	r0, r4
 800d55e:	f000 fb7d 	bl	800dc5c <__multiply>
 800d562:	4651      	mov	r1, sl
 800d564:	4680      	mov	r8, r0
 800d566:	4620      	mov	r0, r4
 800d568:	f000 faac 	bl	800dac4 <_Bfree>
 800d56c:	46c2      	mov	sl, r8
 800d56e:	9b08      	ldr	r3, [sp, #32]
 800d570:	1b9a      	subs	r2, r3, r6
 800d572:	d004      	beq.n	800d57e <_dtoa_r+0x7b6>
 800d574:	4651      	mov	r1, sl
 800d576:	4620      	mov	r0, r4
 800d578:	f000 fc1a 	bl	800ddb0 <__pow5mult>
 800d57c:	4682      	mov	sl, r0
 800d57e:	2101      	movs	r1, #1
 800d580:	4620      	mov	r0, r4
 800d582:	f000 fb55 	bl	800dc30 <__i2b>
 800d586:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d588:	2b00      	cmp	r3, #0
 800d58a:	4606      	mov	r6, r0
 800d58c:	f340 8081 	ble.w	800d692 <_dtoa_r+0x8ca>
 800d590:	461a      	mov	r2, r3
 800d592:	4601      	mov	r1, r0
 800d594:	4620      	mov	r0, r4
 800d596:	f000 fc0b 	bl	800ddb0 <__pow5mult>
 800d59a:	9b07      	ldr	r3, [sp, #28]
 800d59c:	2b01      	cmp	r3, #1
 800d59e:	4606      	mov	r6, r0
 800d5a0:	dd7a      	ble.n	800d698 <_dtoa_r+0x8d0>
 800d5a2:	f04f 0800 	mov.w	r8, #0
 800d5a6:	6933      	ldr	r3, [r6, #16]
 800d5a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d5ac:	6918      	ldr	r0, [r3, #16]
 800d5ae:	f000 faf1 	bl	800db94 <__hi0bits>
 800d5b2:	f1c0 0020 	rsb	r0, r0, #32
 800d5b6:	9b06      	ldr	r3, [sp, #24]
 800d5b8:	4418      	add	r0, r3
 800d5ba:	f010 001f 	ands.w	r0, r0, #31
 800d5be:	f000 8094 	beq.w	800d6ea <_dtoa_r+0x922>
 800d5c2:	f1c0 0320 	rsb	r3, r0, #32
 800d5c6:	2b04      	cmp	r3, #4
 800d5c8:	f340 8085 	ble.w	800d6d6 <_dtoa_r+0x90e>
 800d5cc:	9b05      	ldr	r3, [sp, #20]
 800d5ce:	f1c0 001c 	rsb	r0, r0, #28
 800d5d2:	4403      	add	r3, r0
 800d5d4:	9305      	str	r3, [sp, #20]
 800d5d6:	9b06      	ldr	r3, [sp, #24]
 800d5d8:	4403      	add	r3, r0
 800d5da:	4405      	add	r5, r0
 800d5dc:	9306      	str	r3, [sp, #24]
 800d5de:	9b05      	ldr	r3, [sp, #20]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	dd05      	ble.n	800d5f0 <_dtoa_r+0x828>
 800d5e4:	4651      	mov	r1, sl
 800d5e6:	461a      	mov	r2, r3
 800d5e8:	4620      	mov	r0, r4
 800d5ea:	f000 fc3b 	bl	800de64 <__lshift>
 800d5ee:	4682      	mov	sl, r0
 800d5f0:	9b06      	ldr	r3, [sp, #24]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	dd05      	ble.n	800d602 <_dtoa_r+0x83a>
 800d5f6:	4631      	mov	r1, r6
 800d5f8:	461a      	mov	r2, r3
 800d5fa:	4620      	mov	r0, r4
 800d5fc:	f000 fc32 	bl	800de64 <__lshift>
 800d600:	4606      	mov	r6, r0
 800d602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d604:	2b00      	cmp	r3, #0
 800d606:	d072      	beq.n	800d6ee <_dtoa_r+0x926>
 800d608:	4631      	mov	r1, r6
 800d60a:	4650      	mov	r0, sl
 800d60c:	f000 fc96 	bl	800df3c <__mcmp>
 800d610:	2800      	cmp	r0, #0
 800d612:	da6c      	bge.n	800d6ee <_dtoa_r+0x926>
 800d614:	2300      	movs	r3, #0
 800d616:	4651      	mov	r1, sl
 800d618:	220a      	movs	r2, #10
 800d61a:	4620      	mov	r0, r4
 800d61c:	f000 fa74 	bl	800db08 <__multadd>
 800d620:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d622:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d626:	4682      	mov	sl, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f000 81b0 	beq.w	800d98e <_dtoa_r+0xbc6>
 800d62e:	2300      	movs	r3, #0
 800d630:	4639      	mov	r1, r7
 800d632:	220a      	movs	r2, #10
 800d634:	4620      	mov	r0, r4
 800d636:	f000 fa67 	bl	800db08 <__multadd>
 800d63a:	9b01      	ldr	r3, [sp, #4]
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	4607      	mov	r7, r0
 800d640:	f300 8096 	bgt.w	800d770 <_dtoa_r+0x9a8>
 800d644:	9b07      	ldr	r3, [sp, #28]
 800d646:	2b02      	cmp	r3, #2
 800d648:	dc59      	bgt.n	800d6fe <_dtoa_r+0x936>
 800d64a:	e091      	b.n	800d770 <_dtoa_r+0x9a8>
 800d64c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d64e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d652:	e758      	b.n	800d506 <_dtoa_r+0x73e>
 800d654:	9b04      	ldr	r3, [sp, #16]
 800d656:	1e5e      	subs	r6, r3, #1
 800d658:	9b08      	ldr	r3, [sp, #32]
 800d65a:	42b3      	cmp	r3, r6
 800d65c:	bfbf      	itttt	lt
 800d65e:	9b08      	ldrlt	r3, [sp, #32]
 800d660:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d662:	9608      	strlt	r6, [sp, #32]
 800d664:	1af3      	sublt	r3, r6, r3
 800d666:	bfb4      	ite	lt
 800d668:	18d2      	addlt	r2, r2, r3
 800d66a:	1b9e      	subge	r6, r3, r6
 800d66c:	9b04      	ldr	r3, [sp, #16]
 800d66e:	bfbc      	itt	lt
 800d670:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d672:	2600      	movlt	r6, #0
 800d674:	2b00      	cmp	r3, #0
 800d676:	bfb7      	itett	lt
 800d678:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d67c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d680:	1a9d      	sublt	r5, r3, r2
 800d682:	2300      	movlt	r3, #0
 800d684:	e741      	b.n	800d50a <_dtoa_r+0x742>
 800d686:	9e08      	ldr	r6, [sp, #32]
 800d688:	9d05      	ldr	r5, [sp, #20]
 800d68a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d68c:	e748      	b.n	800d520 <_dtoa_r+0x758>
 800d68e:	9a08      	ldr	r2, [sp, #32]
 800d690:	e770      	b.n	800d574 <_dtoa_r+0x7ac>
 800d692:	9b07      	ldr	r3, [sp, #28]
 800d694:	2b01      	cmp	r3, #1
 800d696:	dc19      	bgt.n	800d6cc <_dtoa_r+0x904>
 800d698:	9b02      	ldr	r3, [sp, #8]
 800d69a:	b9bb      	cbnz	r3, 800d6cc <_dtoa_r+0x904>
 800d69c:	9b03      	ldr	r3, [sp, #12]
 800d69e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6a2:	b99b      	cbnz	r3, 800d6cc <_dtoa_r+0x904>
 800d6a4:	9b03      	ldr	r3, [sp, #12]
 800d6a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6aa:	0d1b      	lsrs	r3, r3, #20
 800d6ac:	051b      	lsls	r3, r3, #20
 800d6ae:	b183      	cbz	r3, 800d6d2 <_dtoa_r+0x90a>
 800d6b0:	9b05      	ldr	r3, [sp, #20]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	9305      	str	r3, [sp, #20]
 800d6b6:	9b06      	ldr	r3, [sp, #24]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	9306      	str	r3, [sp, #24]
 800d6bc:	f04f 0801 	mov.w	r8, #1
 800d6c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	f47f af6f 	bne.w	800d5a6 <_dtoa_r+0x7de>
 800d6c8:	2001      	movs	r0, #1
 800d6ca:	e774      	b.n	800d5b6 <_dtoa_r+0x7ee>
 800d6cc:	f04f 0800 	mov.w	r8, #0
 800d6d0:	e7f6      	b.n	800d6c0 <_dtoa_r+0x8f8>
 800d6d2:	4698      	mov	r8, r3
 800d6d4:	e7f4      	b.n	800d6c0 <_dtoa_r+0x8f8>
 800d6d6:	d082      	beq.n	800d5de <_dtoa_r+0x816>
 800d6d8:	9a05      	ldr	r2, [sp, #20]
 800d6da:	331c      	adds	r3, #28
 800d6dc:	441a      	add	r2, r3
 800d6de:	9205      	str	r2, [sp, #20]
 800d6e0:	9a06      	ldr	r2, [sp, #24]
 800d6e2:	441a      	add	r2, r3
 800d6e4:	441d      	add	r5, r3
 800d6e6:	9206      	str	r2, [sp, #24]
 800d6e8:	e779      	b.n	800d5de <_dtoa_r+0x816>
 800d6ea:	4603      	mov	r3, r0
 800d6ec:	e7f4      	b.n	800d6d8 <_dtoa_r+0x910>
 800d6ee:	9b04      	ldr	r3, [sp, #16]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	dc37      	bgt.n	800d764 <_dtoa_r+0x99c>
 800d6f4:	9b07      	ldr	r3, [sp, #28]
 800d6f6:	2b02      	cmp	r3, #2
 800d6f8:	dd34      	ble.n	800d764 <_dtoa_r+0x99c>
 800d6fa:	9b04      	ldr	r3, [sp, #16]
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	9b01      	ldr	r3, [sp, #4]
 800d700:	b963      	cbnz	r3, 800d71c <_dtoa_r+0x954>
 800d702:	4631      	mov	r1, r6
 800d704:	2205      	movs	r2, #5
 800d706:	4620      	mov	r0, r4
 800d708:	f000 f9fe 	bl	800db08 <__multadd>
 800d70c:	4601      	mov	r1, r0
 800d70e:	4606      	mov	r6, r0
 800d710:	4650      	mov	r0, sl
 800d712:	f000 fc13 	bl	800df3c <__mcmp>
 800d716:	2800      	cmp	r0, #0
 800d718:	f73f adbb 	bgt.w	800d292 <_dtoa_r+0x4ca>
 800d71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d71e:	9d00      	ldr	r5, [sp, #0]
 800d720:	ea6f 0b03 	mvn.w	fp, r3
 800d724:	f04f 0800 	mov.w	r8, #0
 800d728:	4631      	mov	r1, r6
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 f9ca 	bl	800dac4 <_Bfree>
 800d730:	2f00      	cmp	r7, #0
 800d732:	f43f aeab 	beq.w	800d48c <_dtoa_r+0x6c4>
 800d736:	f1b8 0f00 	cmp.w	r8, #0
 800d73a:	d005      	beq.n	800d748 <_dtoa_r+0x980>
 800d73c:	45b8      	cmp	r8, r7
 800d73e:	d003      	beq.n	800d748 <_dtoa_r+0x980>
 800d740:	4641      	mov	r1, r8
 800d742:	4620      	mov	r0, r4
 800d744:	f000 f9be 	bl	800dac4 <_Bfree>
 800d748:	4639      	mov	r1, r7
 800d74a:	4620      	mov	r0, r4
 800d74c:	f000 f9ba 	bl	800dac4 <_Bfree>
 800d750:	e69c      	b.n	800d48c <_dtoa_r+0x6c4>
 800d752:	2600      	movs	r6, #0
 800d754:	4637      	mov	r7, r6
 800d756:	e7e1      	b.n	800d71c <_dtoa_r+0x954>
 800d758:	46bb      	mov	fp, r7
 800d75a:	4637      	mov	r7, r6
 800d75c:	e599      	b.n	800d292 <_dtoa_r+0x4ca>
 800d75e:	bf00      	nop
 800d760:	40240000 	.word	0x40240000
 800d764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d766:	2b00      	cmp	r3, #0
 800d768:	f000 80c8 	beq.w	800d8fc <_dtoa_r+0xb34>
 800d76c:	9b04      	ldr	r3, [sp, #16]
 800d76e:	9301      	str	r3, [sp, #4]
 800d770:	2d00      	cmp	r5, #0
 800d772:	dd05      	ble.n	800d780 <_dtoa_r+0x9b8>
 800d774:	4639      	mov	r1, r7
 800d776:	462a      	mov	r2, r5
 800d778:	4620      	mov	r0, r4
 800d77a:	f000 fb73 	bl	800de64 <__lshift>
 800d77e:	4607      	mov	r7, r0
 800d780:	f1b8 0f00 	cmp.w	r8, #0
 800d784:	d05b      	beq.n	800d83e <_dtoa_r+0xa76>
 800d786:	6879      	ldr	r1, [r7, #4]
 800d788:	4620      	mov	r0, r4
 800d78a:	f000 f95b 	bl	800da44 <_Balloc>
 800d78e:	4605      	mov	r5, r0
 800d790:	b928      	cbnz	r0, 800d79e <_dtoa_r+0x9d6>
 800d792:	4b83      	ldr	r3, [pc, #524]	; (800d9a0 <_dtoa_r+0xbd8>)
 800d794:	4602      	mov	r2, r0
 800d796:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d79a:	f7ff bb2e 	b.w	800cdfa <_dtoa_r+0x32>
 800d79e:	693a      	ldr	r2, [r7, #16]
 800d7a0:	3202      	adds	r2, #2
 800d7a2:	0092      	lsls	r2, r2, #2
 800d7a4:	f107 010c 	add.w	r1, r7, #12
 800d7a8:	300c      	adds	r0, #12
 800d7aa:	f001 f8af 	bl	800e90c <memcpy>
 800d7ae:	2201      	movs	r2, #1
 800d7b0:	4629      	mov	r1, r5
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	f000 fb56 	bl	800de64 <__lshift>
 800d7b8:	9b00      	ldr	r3, [sp, #0]
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	9304      	str	r3, [sp, #16]
 800d7be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d7c2:	4413      	add	r3, r2
 800d7c4:	9308      	str	r3, [sp, #32]
 800d7c6:	9b02      	ldr	r3, [sp, #8]
 800d7c8:	f003 0301 	and.w	r3, r3, #1
 800d7cc:	46b8      	mov	r8, r7
 800d7ce:	9306      	str	r3, [sp, #24]
 800d7d0:	4607      	mov	r7, r0
 800d7d2:	9b04      	ldr	r3, [sp, #16]
 800d7d4:	4631      	mov	r1, r6
 800d7d6:	3b01      	subs	r3, #1
 800d7d8:	4650      	mov	r0, sl
 800d7da:	9301      	str	r3, [sp, #4]
 800d7dc:	f7ff fa69 	bl	800ccb2 <quorem>
 800d7e0:	4641      	mov	r1, r8
 800d7e2:	9002      	str	r0, [sp, #8]
 800d7e4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d7e8:	4650      	mov	r0, sl
 800d7ea:	f000 fba7 	bl	800df3c <__mcmp>
 800d7ee:	463a      	mov	r2, r7
 800d7f0:	9005      	str	r0, [sp, #20]
 800d7f2:	4631      	mov	r1, r6
 800d7f4:	4620      	mov	r0, r4
 800d7f6:	f000 fbbd 	bl	800df74 <__mdiff>
 800d7fa:	68c2      	ldr	r2, [r0, #12]
 800d7fc:	4605      	mov	r5, r0
 800d7fe:	bb02      	cbnz	r2, 800d842 <_dtoa_r+0xa7a>
 800d800:	4601      	mov	r1, r0
 800d802:	4650      	mov	r0, sl
 800d804:	f000 fb9a 	bl	800df3c <__mcmp>
 800d808:	4602      	mov	r2, r0
 800d80a:	4629      	mov	r1, r5
 800d80c:	4620      	mov	r0, r4
 800d80e:	9209      	str	r2, [sp, #36]	; 0x24
 800d810:	f000 f958 	bl	800dac4 <_Bfree>
 800d814:	9b07      	ldr	r3, [sp, #28]
 800d816:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d818:	9d04      	ldr	r5, [sp, #16]
 800d81a:	ea43 0102 	orr.w	r1, r3, r2
 800d81e:	9b06      	ldr	r3, [sp, #24]
 800d820:	4319      	orrs	r1, r3
 800d822:	d110      	bne.n	800d846 <_dtoa_r+0xa7e>
 800d824:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d828:	d029      	beq.n	800d87e <_dtoa_r+0xab6>
 800d82a:	9b05      	ldr	r3, [sp, #20]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	dd02      	ble.n	800d836 <_dtoa_r+0xa6e>
 800d830:	9b02      	ldr	r3, [sp, #8]
 800d832:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d836:	9b01      	ldr	r3, [sp, #4]
 800d838:	f883 9000 	strb.w	r9, [r3]
 800d83c:	e774      	b.n	800d728 <_dtoa_r+0x960>
 800d83e:	4638      	mov	r0, r7
 800d840:	e7ba      	b.n	800d7b8 <_dtoa_r+0x9f0>
 800d842:	2201      	movs	r2, #1
 800d844:	e7e1      	b.n	800d80a <_dtoa_r+0xa42>
 800d846:	9b05      	ldr	r3, [sp, #20]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	db04      	blt.n	800d856 <_dtoa_r+0xa8e>
 800d84c:	9907      	ldr	r1, [sp, #28]
 800d84e:	430b      	orrs	r3, r1
 800d850:	9906      	ldr	r1, [sp, #24]
 800d852:	430b      	orrs	r3, r1
 800d854:	d120      	bne.n	800d898 <_dtoa_r+0xad0>
 800d856:	2a00      	cmp	r2, #0
 800d858:	dded      	ble.n	800d836 <_dtoa_r+0xa6e>
 800d85a:	4651      	mov	r1, sl
 800d85c:	2201      	movs	r2, #1
 800d85e:	4620      	mov	r0, r4
 800d860:	f000 fb00 	bl	800de64 <__lshift>
 800d864:	4631      	mov	r1, r6
 800d866:	4682      	mov	sl, r0
 800d868:	f000 fb68 	bl	800df3c <__mcmp>
 800d86c:	2800      	cmp	r0, #0
 800d86e:	dc03      	bgt.n	800d878 <_dtoa_r+0xab0>
 800d870:	d1e1      	bne.n	800d836 <_dtoa_r+0xa6e>
 800d872:	f019 0f01 	tst.w	r9, #1
 800d876:	d0de      	beq.n	800d836 <_dtoa_r+0xa6e>
 800d878:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d87c:	d1d8      	bne.n	800d830 <_dtoa_r+0xa68>
 800d87e:	9a01      	ldr	r2, [sp, #4]
 800d880:	2339      	movs	r3, #57	; 0x39
 800d882:	7013      	strb	r3, [r2, #0]
 800d884:	462b      	mov	r3, r5
 800d886:	461d      	mov	r5, r3
 800d888:	3b01      	subs	r3, #1
 800d88a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d88e:	2a39      	cmp	r2, #57	; 0x39
 800d890:	d06c      	beq.n	800d96c <_dtoa_r+0xba4>
 800d892:	3201      	adds	r2, #1
 800d894:	701a      	strb	r2, [r3, #0]
 800d896:	e747      	b.n	800d728 <_dtoa_r+0x960>
 800d898:	2a00      	cmp	r2, #0
 800d89a:	dd07      	ble.n	800d8ac <_dtoa_r+0xae4>
 800d89c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d8a0:	d0ed      	beq.n	800d87e <_dtoa_r+0xab6>
 800d8a2:	9a01      	ldr	r2, [sp, #4]
 800d8a4:	f109 0301 	add.w	r3, r9, #1
 800d8a8:	7013      	strb	r3, [r2, #0]
 800d8aa:	e73d      	b.n	800d728 <_dtoa_r+0x960>
 800d8ac:	9b04      	ldr	r3, [sp, #16]
 800d8ae:	9a08      	ldr	r2, [sp, #32]
 800d8b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d043      	beq.n	800d940 <_dtoa_r+0xb78>
 800d8b8:	4651      	mov	r1, sl
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	220a      	movs	r2, #10
 800d8be:	4620      	mov	r0, r4
 800d8c0:	f000 f922 	bl	800db08 <__multadd>
 800d8c4:	45b8      	cmp	r8, r7
 800d8c6:	4682      	mov	sl, r0
 800d8c8:	f04f 0300 	mov.w	r3, #0
 800d8cc:	f04f 020a 	mov.w	r2, #10
 800d8d0:	4641      	mov	r1, r8
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	d107      	bne.n	800d8e6 <_dtoa_r+0xb1e>
 800d8d6:	f000 f917 	bl	800db08 <__multadd>
 800d8da:	4680      	mov	r8, r0
 800d8dc:	4607      	mov	r7, r0
 800d8de:	9b04      	ldr	r3, [sp, #16]
 800d8e0:	3301      	adds	r3, #1
 800d8e2:	9304      	str	r3, [sp, #16]
 800d8e4:	e775      	b.n	800d7d2 <_dtoa_r+0xa0a>
 800d8e6:	f000 f90f 	bl	800db08 <__multadd>
 800d8ea:	4639      	mov	r1, r7
 800d8ec:	4680      	mov	r8, r0
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	220a      	movs	r2, #10
 800d8f2:	4620      	mov	r0, r4
 800d8f4:	f000 f908 	bl	800db08 <__multadd>
 800d8f8:	4607      	mov	r7, r0
 800d8fa:	e7f0      	b.n	800d8de <_dtoa_r+0xb16>
 800d8fc:	9b04      	ldr	r3, [sp, #16]
 800d8fe:	9301      	str	r3, [sp, #4]
 800d900:	9d00      	ldr	r5, [sp, #0]
 800d902:	4631      	mov	r1, r6
 800d904:	4650      	mov	r0, sl
 800d906:	f7ff f9d4 	bl	800ccb2 <quorem>
 800d90a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d90e:	9b00      	ldr	r3, [sp, #0]
 800d910:	f805 9b01 	strb.w	r9, [r5], #1
 800d914:	1aea      	subs	r2, r5, r3
 800d916:	9b01      	ldr	r3, [sp, #4]
 800d918:	4293      	cmp	r3, r2
 800d91a:	dd07      	ble.n	800d92c <_dtoa_r+0xb64>
 800d91c:	4651      	mov	r1, sl
 800d91e:	2300      	movs	r3, #0
 800d920:	220a      	movs	r2, #10
 800d922:	4620      	mov	r0, r4
 800d924:	f000 f8f0 	bl	800db08 <__multadd>
 800d928:	4682      	mov	sl, r0
 800d92a:	e7ea      	b.n	800d902 <_dtoa_r+0xb3a>
 800d92c:	9b01      	ldr	r3, [sp, #4]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	bfc8      	it	gt
 800d932:	461d      	movgt	r5, r3
 800d934:	9b00      	ldr	r3, [sp, #0]
 800d936:	bfd8      	it	le
 800d938:	2501      	movle	r5, #1
 800d93a:	441d      	add	r5, r3
 800d93c:	f04f 0800 	mov.w	r8, #0
 800d940:	4651      	mov	r1, sl
 800d942:	2201      	movs	r2, #1
 800d944:	4620      	mov	r0, r4
 800d946:	f000 fa8d 	bl	800de64 <__lshift>
 800d94a:	4631      	mov	r1, r6
 800d94c:	4682      	mov	sl, r0
 800d94e:	f000 faf5 	bl	800df3c <__mcmp>
 800d952:	2800      	cmp	r0, #0
 800d954:	dc96      	bgt.n	800d884 <_dtoa_r+0xabc>
 800d956:	d102      	bne.n	800d95e <_dtoa_r+0xb96>
 800d958:	f019 0f01 	tst.w	r9, #1
 800d95c:	d192      	bne.n	800d884 <_dtoa_r+0xabc>
 800d95e:	462b      	mov	r3, r5
 800d960:	461d      	mov	r5, r3
 800d962:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d966:	2a30      	cmp	r2, #48	; 0x30
 800d968:	d0fa      	beq.n	800d960 <_dtoa_r+0xb98>
 800d96a:	e6dd      	b.n	800d728 <_dtoa_r+0x960>
 800d96c:	9a00      	ldr	r2, [sp, #0]
 800d96e:	429a      	cmp	r2, r3
 800d970:	d189      	bne.n	800d886 <_dtoa_r+0xabe>
 800d972:	f10b 0b01 	add.w	fp, fp, #1
 800d976:	2331      	movs	r3, #49	; 0x31
 800d978:	e796      	b.n	800d8a8 <_dtoa_r+0xae0>
 800d97a:	4b0a      	ldr	r3, [pc, #40]	; (800d9a4 <_dtoa_r+0xbdc>)
 800d97c:	f7ff ba99 	b.w	800ceb2 <_dtoa_r+0xea>
 800d980:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d982:	2b00      	cmp	r3, #0
 800d984:	f47f aa6d 	bne.w	800ce62 <_dtoa_r+0x9a>
 800d988:	4b07      	ldr	r3, [pc, #28]	; (800d9a8 <_dtoa_r+0xbe0>)
 800d98a:	f7ff ba92 	b.w	800ceb2 <_dtoa_r+0xea>
 800d98e:	9b01      	ldr	r3, [sp, #4]
 800d990:	2b00      	cmp	r3, #0
 800d992:	dcb5      	bgt.n	800d900 <_dtoa_r+0xb38>
 800d994:	9b07      	ldr	r3, [sp, #28]
 800d996:	2b02      	cmp	r3, #2
 800d998:	f73f aeb1 	bgt.w	800d6fe <_dtoa_r+0x936>
 800d99c:	e7b0      	b.n	800d900 <_dtoa_r+0xb38>
 800d99e:	bf00      	nop
 800d9a0:	08012c94 	.word	0x08012c94
 800d9a4:	08012bf4 	.word	0x08012bf4
 800d9a8:	08012c18 	.word	0x08012c18

0800d9ac <_free_r>:
 800d9ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9ae:	2900      	cmp	r1, #0
 800d9b0:	d044      	beq.n	800da3c <_free_r+0x90>
 800d9b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9b6:	9001      	str	r0, [sp, #4]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	f1a1 0404 	sub.w	r4, r1, #4
 800d9be:	bfb8      	it	lt
 800d9c0:	18e4      	addlt	r4, r4, r3
 800d9c2:	f7fe fa4d 	bl	800be60 <__malloc_lock>
 800d9c6:	4a1e      	ldr	r2, [pc, #120]	; (800da40 <_free_r+0x94>)
 800d9c8:	9801      	ldr	r0, [sp, #4]
 800d9ca:	6813      	ldr	r3, [r2, #0]
 800d9cc:	b933      	cbnz	r3, 800d9dc <_free_r+0x30>
 800d9ce:	6063      	str	r3, [r4, #4]
 800d9d0:	6014      	str	r4, [r2, #0]
 800d9d2:	b003      	add	sp, #12
 800d9d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9d8:	f7fe ba48 	b.w	800be6c <__malloc_unlock>
 800d9dc:	42a3      	cmp	r3, r4
 800d9de:	d908      	bls.n	800d9f2 <_free_r+0x46>
 800d9e0:	6825      	ldr	r5, [r4, #0]
 800d9e2:	1961      	adds	r1, r4, r5
 800d9e4:	428b      	cmp	r3, r1
 800d9e6:	bf01      	itttt	eq
 800d9e8:	6819      	ldreq	r1, [r3, #0]
 800d9ea:	685b      	ldreq	r3, [r3, #4]
 800d9ec:	1949      	addeq	r1, r1, r5
 800d9ee:	6021      	streq	r1, [r4, #0]
 800d9f0:	e7ed      	b.n	800d9ce <_free_r+0x22>
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	b10b      	cbz	r3, 800d9fc <_free_r+0x50>
 800d9f8:	42a3      	cmp	r3, r4
 800d9fa:	d9fa      	bls.n	800d9f2 <_free_r+0x46>
 800d9fc:	6811      	ldr	r1, [r2, #0]
 800d9fe:	1855      	adds	r5, r2, r1
 800da00:	42a5      	cmp	r5, r4
 800da02:	d10b      	bne.n	800da1c <_free_r+0x70>
 800da04:	6824      	ldr	r4, [r4, #0]
 800da06:	4421      	add	r1, r4
 800da08:	1854      	adds	r4, r2, r1
 800da0a:	42a3      	cmp	r3, r4
 800da0c:	6011      	str	r1, [r2, #0]
 800da0e:	d1e0      	bne.n	800d9d2 <_free_r+0x26>
 800da10:	681c      	ldr	r4, [r3, #0]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	6053      	str	r3, [r2, #4]
 800da16:	440c      	add	r4, r1
 800da18:	6014      	str	r4, [r2, #0]
 800da1a:	e7da      	b.n	800d9d2 <_free_r+0x26>
 800da1c:	d902      	bls.n	800da24 <_free_r+0x78>
 800da1e:	230c      	movs	r3, #12
 800da20:	6003      	str	r3, [r0, #0]
 800da22:	e7d6      	b.n	800d9d2 <_free_r+0x26>
 800da24:	6825      	ldr	r5, [r4, #0]
 800da26:	1961      	adds	r1, r4, r5
 800da28:	428b      	cmp	r3, r1
 800da2a:	bf04      	itt	eq
 800da2c:	6819      	ldreq	r1, [r3, #0]
 800da2e:	685b      	ldreq	r3, [r3, #4]
 800da30:	6063      	str	r3, [r4, #4]
 800da32:	bf04      	itt	eq
 800da34:	1949      	addeq	r1, r1, r5
 800da36:	6021      	streq	r1, [r4, #0]
 800da38:	6054      	str	r4, [r2, #4]
 800da3a:	e7ca      	b.n	800d9d2 <_free_r+0x26>
 800da3c:	b003      	add	sp, #12
 800da3e:	bd30      	pop	{r4, r5, pc}
 800da40:	20000a50 	.word	0x20000a50

0800da44 <_Balloc>:
 800da44:	b570      	push	{r4, r5, r6, lr}
 800da46:	69c6      	ldr	r6, [r0, #28]
 800da48:	4604      	mov	r4, r0
 800da4a:	460d      	mov	r5, r1
 800da4c:	b976      	cbnz	r6, 800da6c <_Balloc+0x28>
 800da4e:	2010      	movs	r0, #16
 800da50:	f7fe f95e 	bl	800bd10 <malloc>
 800da54:	4602      	mov	r2, r0
 800da56:	61e0      	str	r0, [r4, #28]
 800da58:	b920      	cbnz	r0, 800da64 <_Balloc+0x20>
 800da5a:	4b18      	ldr	r3, [pc, #96]	; (800dabc <_Balloc+0x78>)
 800da5c:	4818      	ldr	r0, [pc, #96]	; (800dac0 <_Balloc+0x7c>)
 800da5e:	216b      	movs	r1, #107	; 0x6b
 800da60:	f000 ff62 	bl	800e928 <__assert_func>
 800da64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da68:	6006      	str	r6, [r0, #0]
 800da6a:	60c6      	str	r6, [r0, #12]
 800da6c:	69e6      	ldr	r6, [r4, #28]
 800da6e:	68f3      	ldr	r3, [r6, #12]
 800da70:	b183      	cbz	r3, 800da94 <_Balloc+0x50>
 800da72:	69e3      	ldr	r3, [r4, #28]
 800da74:	68db      	ldr	r3, [r3, #12]
 800da76:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800da7a:	b9b8      	cbnz	r0, 800daac <_Balloc+0x68>
 800da7c:	2101      	movs	r1, #1
 800da7e:	fa01 f605 	lsl.w	r6, r1, r5
 800da82:	1d72      	adds	r2, r6, #5
 800da84:	0092      	lsls	r2, r2, #2
 800da86:	4620      	mov	r0, r4
 800da88:	f000 ff6c 	bl	800e964 <_calloc_r>
 800da8c:	b160      	cbz	r0, 800daa8 <_Balloc+0x64>
 800da8e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800da92:	e00e      	b.n	800dab2 <_Balloc+0x6e>
 800da94:	2221      	movs	r2, #33	; 0x21
 800da96:	2104      	movs	r1, #4
 800da98:	4620      	mov	r0, r4
 800da9a:	f000 ff63 	bl	800e964 <_calloc_r>
 800da9e:	69e3      	ldr	r3, [r4, #28]
 800daa0:	60f0      	str	r0, [r6, #12]
 800daa2:	68db      	ldr	r3, [r3, #12]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d1e4      	bne.n	800da72 <_Balloc+0x2e>
 800daa8:	2000      	movs	r0, #0
 800daaa:	bd70      	pop	{r4, r5, r6, pc}
 800daac:	6802      	ldr	r2, [r0, #0]
 800daae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dab2:	2300      	movs	r3, #0
 800dab4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dab8:	e7f7      	b.n	800daaa <_Balloc+0x66>
 800daba:	bf00      	nop
 800dabc:	08012c25 	.word	0x08012c25
 800dac0:	08012ca5 	.word	0x08012ca5

0800dac4 <_Bfree>:
 800dac4:	b570      	push	{r4, r5, r6, lr}
 800dac6:	69c6      	ldr	r6, [r0, #28]
 800dac8:	4605      	mov	r5, r0
 800daca:	460c      	mov	r4, r1
 800dacc:	b976      	cbnz	r6, 800daec <_Bfree+0x28>
 800dace:	2010      	movs	r0, #16
 800dad0:	f7fe f91e 	bl	800bd10 <malloc>
 800dad4:	4602      	mov	r2, r0
 800dad6:	61e8      	str	r0, [r5, #28]
 800dad8:	b920      	cbnz	r0, 800dae4 <_Bfree+0x20>
 800dada:	4b09      	ldr	r3, [pc, #36]	; (800db00 <_Bfree+0x3c>)
 800dadc:	4809      	ldr	r0, [pc, #36]	; (800db04 <_Bfree+0x40>)
 800dade:	218f      	movs	r1, #143	; 0x8f
 800dae0:	f000 ff22 	bl	800e928 <__assert_func>
 800dae4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dae8:	6006      	str	r6, [r0, #0]
 800daea:	60c6      	str	r6, [r0, #12]
 800daec:	b13c      	cbz	r4, 800dafe <_Bfree+0x3a>
 800daee:	69eb      	ldr	r3, [r5, #28]
 800daf0:	6862      	ldr	r2, [r4, #4]
 800daf2:	68db      	ldr	r3, [r3, #12]
 800daf4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800daf8:	6021      	str	r1, [r4, #0]
 800dafa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dafe:	bd70      	pop	{r4, r5, r6, pc}
 800db00:	08012c25 	.word	0x08012c25
 800db04:	08012ca5 	.word	0x08012ca5

0800db08 <__multadd>:
 800db08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db0c:	690d      	ldr	r5, [r1, #16]
 800db0e:	4607      	mov	r7, r0
 800db10:	460c      	mov	r4, r1
 800db12:	461e      	mov	r6, r3
 800db14:	f101 0c14 	add.w	ip, r1, #20
 800db18:	2000      	movs	r0, #0
 800db1a:	f8dc 3000 	ldr.w	r3, [ip]
 800db1e:	b299      	uxth	r1, r3
 800db20:	fb02 6101 	mla	r1, r2, r1, r6
 800db24:	0c1e      	lsrs	r6, r3, #16
 800db26:	0c0b      	lsrs	r3, r1, #16
 800db28:	fb02 3306 	mla	r3, r2, r6, r3
 800db2c:	b289      	uxth	r1, r1
 800db2e:	3001      	adds	r0, #1
 800db30:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800db34:	4285      	cmp	r5, r0
 800db36:	f84c 1b04 	str.w	r1, [ip], #4
 800db3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800db3e:	dcec      	bgt.n	800db1a <__multadd+0x12>
 800db40:	b30e      	cbz	r6, 800db86 <__multadd+0x7e>
 800db42:	68a3      	ldr	r3, [r4, #8]
 800db44:	42ab      	cmp	r3, r5
 800db46:	dc19      	bgt.n	800db7c <__multadd+0x74>
 800db48:	6861      	ldr	r1, [r4, #4]
 800db4a:	4638      	mov	r0, r7
 800db4c:	3101      	adds	r1, #1
 800db4e:	f7ff ff79 	bl	800da44 <_Balloc>
 800db52:	4680      	mov	r8, r0
 800db54:	b928      	cbnz	r0, 800db62 <__multadd+0x5a>
 800db56:	4602      	mov	r2, r0
 800db58:	4b0c      	ldr	r3, [pc, #48]	; (800db8c <__multadd+0x84>)
 800db5a:	480d      	ldr	r0, [pc, #52]	; (800db90 <__multadd+0x88>)
 800db5c:	21ba      	movs	r1, #186	; 0xba
 800db5e:	f000 fee3 	bl	800e928 <__assert_func>
 800db62:	6922      	ldr	r2, [r4, #16]
 800db64:	3202      	adds	r2, #2
 800db66:	f104 010c 	add.w	r1, r4, #12
 800db6a:	0092      	lsls	r2, r2, #2
 800db6c:	300c      	adds	r0, #12
 800db6e:	f000 fecd 	bl	800e90c <memcpy>
 800db72:	4621      	mov	r1, r4
 800db74:	4638      	mov	r0, r7
 800db76:	f7ff ffa5 	bl	800dac4 <_Bfree>
 800db7a:	4644      	mov	r4, r8
 800db7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800db80:	3501      	adds	r5, #1
 800db82:	615e      	str	r6, [r3, #20]
 800db84:	6125      	str	r5, [r4, #16]
 800db86:	4620      	mov	r0, r4
 800db88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db8c:	08012c94 	.word	0x08012c94
 800db90:	08012ca5 	.word	0x08012ca5

0800db94 <__hi0bits>:
 800db94:	0c03      	lsrs	r3, r0, #16
 800db96:	041b      	lsls	r3, r3, #16
 800db98:	b9d3      	cbnz	r3, 800dbd0 <__hi0bits+0x3c>
 800db9a:	0400      	lsls	r0, r0, #16
 800db9c:	2310      	movs	r3, #16
 800db9e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dba2:	bf04      	itt	eq
 800dba4:	0200      	lsleq	r0, r0, #8
 800dba6:	3308      	addeq	r3, #8
 800dba8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dbac:	bf04      	itt	eq
 800dbae:	0100      	lsleq	r0, r0, #4
 800dbb0:	3304      	addeq	r3, #4
 800dbb2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dbb6:	bf04      	itt	eq
 800dbb8:	0080      	lsleq	r0, r0, #2
 800dbba:	3302      	addeq	r3, #2
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	db05      	blt.n	800dbcc <__hi0bits+0x38>
 800dbc0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dbc4:	f103 0301 	add.w	r3, r3, #1
 800dbc8:	bf08      	it	eq
 800dbca:	2320      	moveq	r3, #32
 800dbcc:	4618      	mov	r0, r3
 800dbce:	4770      	bx	lr
 800dbd0:	2300      	movs	r3, #0
 800dbd2:	e7e4      	b.n	800db9e <__hi0bits+0xa>

0800dbd4 <__lo0bits>:
 800dbd4:	6803      	ldr	r3, [r0, #0]
 800dbd6:	f013 0207 	ands.w	r2, r3, #7
 800dbda:	d00c      	beq.n	800dbf6 <__lo0bits+0x22>
 800dbdc:	07d9      	lsls	r1, r3, #31
 800dbde:	d422      	bmi.n	800dc26 <__lo0bits+0x52>
 800dbe0:	079a      	lsls	r2, r3, #30
 800dbe2:	bf49      	itett	mi
 800dbe4:	085b      	lsrmi	r3, r3, #1
 800dbe6:	089b      	lsrpl	r3, r3, #2
 800dbe8:	6003      	strmi	r3, [r0, #0]
 800dbea:	2201      	movmi	r2, #1
 800dbec:	bf5c      	itt	pl
 800dbee:	6003      	strpl	r3, [r0, #0]
 800dbf0:	2202      	movpl	r2, #2
 800dbf2:	4610      	mov	r0, r2
 800dbf4:	4770      	bx	lr
 800dbf6:	b299      	uxth	r1, r3
 800dbf8:	b909      	cbnz	r1, 800dbfe <__lo0bits+0x2a>
 800dbfa:	0c1b      	lsrs	r3, r3, #16
 800dbfc:	2210      	movs	r2, #16
 800dbfe:	b2d9      	uxtb	r1, r3
 800dc00:	b909      	cbnz	r1, 800dc06 <__lo0bits+0x32>
 800dc02:	3208      	adds	r2, #8
 800dc04:	0a1b      	lsrs	r3, r3, #8
 800dc06:	0719      	lsls	r1, r3, #28
 800dc08:	bf04      	itt	eq
 800dc0a:	091b      	lsreq	r3, r3, #4
 800dc0c:	3204      	addeq	r2, #4
 800dc0e:	0799      	lsls	r1, r3, #30
 800dc10:	bf04      	itt	eq
 800dc12:	089b      	lsreq	r3, r3, #2
 800dc14:	3202      	addeq	r2, #2
 800dc16:	07d9      	lsls	r1, r3, #31
 800dc18:	d403      	bmi.n	800dc22 <__lo0bits+0x4e>
 800dc1a:	085b      	lsrs	r3, r3, #1
 800dc1c:	f102 0201 	add.w	r2, r2, #1
 800dc20:	d003      	beq.n	800dc2a <__lo0bits+0x56>
 800dc22:	6003      	str	r3, [r0, #0]
 800dc24:	e7e5      	b.n	800dbf2 <__lo0bits+0x1e>
 800dc26:	2200      	movs	r2, #0
 800dc28:	e7e3      	b.n	800dbf2 <__lo0bits+0x1e>
 800dc2a:	2220      	movs	r2, #32
 800dc2c:	e7e1      	b.n	800dbf2 <__lo0bits+0x1e>
	...

0800dc30 <__i2b>:
 800dc30:	b510      	push	{r4, lr}
 800dc32:	460c      	mov	r4, r1
 800dc34:	2101      	movs	r1, #1
 800dc36:	f7ff ff05 	bl	800da44 <_Balloc>
 800dc3a:	4602      	mov	r2, r0
 800dc3c:	b928      	cbnz	r0, 800dc4a <__i2b+0x1a>
 800dc3e:	4b05      	ldr	r3, [pc, #20]	; (800dc54 <__i2b+0x24>)
 800dc40:	4805      	ldr	r0, [pc, #20]	; (800dc58 <__i2b+0x28>)
 800dc42:	f240 1145 	movw	r1, #325	; 0x145
 800dc46:	f000 fe6f 	bl	800e928 <__assert_func>
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	6144      	str	r4, [r0, #20]
 800dc4e:	6103      	str	r3, [r0, #16]
 800dc50:	bd10      	pop	{r4, pc}
 800dc52:	bf00      	nop
 800dc54:	08012c94 	.word	0x08012c94
 800dc58:	08012ca5 	.word	0x08012ca5

0800dc5c <__multiply>:
 800dc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc60:	4691      	mov	r9, r2
 800dc62:	690a      	ldr	r2, [r1, #16]
 800dc64:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc68:	429a      	cmp	r2, r3
 800dc6a:	bfb8      	it	lt
 800dc6c:	460b      	movlt	r3, r1
 800dc6e:	460c      	mov	r4, r1
 800dc70:	bfbc      	itt	lt
 800dc72:	464c      	movlt	r4, r9
 800dc74:	4699      	movlt	r9, r3
 800dc76:	6927      	ldr	r7, [r4, #16]
 800dc78:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc7c:	68a3      	ldr	r3, [r4, #8]
 800dc7e:	6861      	ldr	r1, [r4, #4]
 800dc80:	eb07 060a 	add.w	r6, r7, sl
 800dc84:	42b3      	cmp	r3, r6
 800dc86:	b085      	sub	sp, #20
 800dc88:	bfb8      	it	lt
 800dc8a:	3101      	addlt	r1, #1
 800dc8c:	f7ff feda 	bl	800da44 <_Balloc>
 800dc90:	b930      	cbnz	r0, 800dca0 <__multiply+0x44>
 800dc92:	4602      	mov	r2, r0
 800dc94:	4b44      	ldr	r3, [pc, #272]	; (800dda8 <__multiply+0x14c>)
 800dc96:	4845      	ldr	r0, [pc, #276]	; (800ddac <__multiply+0x150>)
 800dc98:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800dc9c:	f000 fe44 	bl	800e928 <__assert_func>
 800dca0:	f100 0514 	add.w	r5, r0, #20
 800dca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dca8:	462b      	mov	r3, r5
 800dcaa:	2200      	movs	r2, #0
 800dcac:	4543      	cmp	r3, r8
 800dcae:	d321      	bcc.n	800dcf4 <__multiply+0x98>
 800dcb0:	f104 0314 	add.w	r3, r4, #20
 800dcb4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dcb8:	f109 0314 	add.w	r3, r9, #20
 800dcbc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dcc0:	9202      	str	r2, [sp, #8]
 800dcc2:	1b3a      	subs	r2, r7, r4
 800dcc4:	3a15      	subs	r2, #21
 800dcc6:	f022 0203 	bic.w	r2, r2, #3
 800dcca:	3204      	adds	r2, #4
 800dccc:	f104 0115 	add.w	r1, r4, #21
 800dcd0:	428f      	cmp	r7, r1
 800dcd2:	bf38      	it	cc
 800dcd4:	2204      	movcc	r2, #4
 800dcd6:	9201      	str	r2, [sp, #4]
 800dcd8:	9a02      	ldr	r2, [sp, #8]
 800dcda:	9303      	str	r3, [sp, #12]
 800dcdc:	429a      	cmp	r2, r3
 800dcde:	d80c      	bhi.n	800dcfa <__multiply+0x9e>
 800dce0:	2e00      	cmp	r6, #0
 800dce2:	dd03      	ble.n	800dcec <__multiply+0x90>
 800dce4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d05b      	beq.n	800dda4 <__multiply+0x148>
 800dcec:	6106      	str	r6, [r0, #16]
 800dcee:	b005      	add	sp, #20
 800dcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf4:	f843 2b04 	str.w	r2, [r3], #4
 800dcf8:	e7d8      	b.n	800dcac <__multiply+0x50>
 800dcfa:	f8b3 a000 	ldrh.w	sl, [r3]
 800dcfe:	f1ba 0f00 	cmp.w	sl, #0
 800dd02:	d024      	beq.n	800dd4e <__multiply+0xf2>
 800dd04:	f104 0e14 	add.w	lr, r4, #20
 800dd08:	46a9      	mov	r9, r5
 800dd0a:	f04f 0c00 	mov.w	ip, #0
 800dd0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dd12:	f8d9 1000 	ldr.w	r1, [r9]
 800dd16:	fa1f fb82 	uxth.w	fp, r2
 800dd1a:	b289      	uxth	r1, r1
 800dd1c:	fb0a 110b 	mla	r1, sl, fp, r1
 800dd20:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dd24:	f8d9 2000 	ldr.w	r2, [r9]
 800dd28:	4461      	add	r1, ip
 800dd2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd2e:	fb0a c20b 	mla	r2, sl, fp, ip
 800dd32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dd36:	b289      	uxth	r1, r1
 800dd38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd3c:	4577      	cmp	r7, lr
 800dd3e:	f849 1b04 	str.w	r1, [r9], #4
 800dd42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd46:	d8e2      	bhi.n	800dd0e <__multiply+0xb2>
 800dd48:	9a01      	ldr	r2, [sp, #4]
 800dd4a:	f845 c002 	str.w	ip, [r5, r2]
 800dd4e:	9a03      	ldr	r2, [sp, #12]
 800dd50:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd54:	3304      	adds	r3, #4
 800dd56:	f1b9 0f00 	cmp.w	r9, #0
 800dd5a:	d021      	beq.n	800dda0 <__multiply+0x144>
 800dd5c:	6829      	ldr	r1, [r5, #0]
 800dd5e:	f104 0c14 	add.w	ip, r4, #20
 800dd62:	46ae      	mov	lr, r5
 800dd64:	f04f 0a00 	mov.w	sl, #0
 800dd68:	f8bc b000 	ldrh.w	fp, [ip]
 800dd6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd70:	fb09 220b 	mla	r2, r9, fp, r2
 800dd74:	4452      	add	r2, sl
 800dd76:	b289      	uxth	r1, r1
 800dd78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd7c:	f84e 1b04 	str.w	r1, [lr], #4
 800dd80:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dd84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd88:	f8be 1000 	ldrh.w	r1, [lr]
 800dd8c:	fb09 110a 	mla	r1, r9, sl, r1
 800dd90:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800dd94:	4567      	cmp	r7, ip
 800dd96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd9a:	d8e5      	bhi.n	800dd68 <__multiply+0x10c>
 800dd9c:	9a01      	ldr	r2, [sp, #4]
 800dd9e:	50a9      	str	r1, [r5, r2]
 800dda0:	3504      	adds	r5, #4
 800dda2:	e799      	b.n	800dcd8 <__multiply+0x7c>
 800dda4:	3e01      	subs	r6, #1
 800dda6:	e79b      	b.n	800dce0 <__multiply+0x84>
 800dda8:	08012c94 	.word	0x08012c94
 800ddac:	08012ca5 	.word	0x08012ca5

0800ddb0 <__pow5mult>:
 800ddb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ddb4:	4615      	mov	r5, r2
 800ddb6:	f012 0203 	ands.w	r2, r2, #3
 800ddba:	4606      	mov	r6, r0
 800ddbc:	460f      	mov	r7, r1
 800ddbe:	d007      	beq.n	800ddd0 <__pow5mult+0x20>
 800ddc0:	4c25      	ldr	r4, [pc, #148]	; (800de58 <__pow5mult+0xa8>)
 800ddc2:	3a01      	subs	r2, #1
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddca:	f7ff fe9d 	bl	800db08 <__multadd>
 800ddce:	4607      	mov	r7, r0
 800ddd0:	10ad      	asrs	r5, r5, #2
 800ddd2:	d03d      	beq.n	800de50 <__pow5mult+0xa0>
 800ddd4:	69f4      	ldr	r4, [r6, #28]
 800ddd6:	b97c      	cbnz	r4, 800ddf8 <__pow5mult+0x48>
 800ddd8:	2010      	movs	r0, #16
 800ddda:	f7fd ff99 	bl	800bd10 <malloc>
 800ddde:	4602      	mov	r2, r0
 800dde0:	61f0      	str	r0, [r6, #28]
 800dde2:	b928      	cbnz	r0, 800ddf0 <__pow5mult+0x40>
 800dde4:	4b1d      	ldr	r3, [pc, #116]	; (800de5c <__pow5mult+0xac>)
 800dde6:	481e      	ldr	r0, [pc, #120]	; (800de60 <__pow5mult+0xb0>)
 800dde8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800ddec:	f000 fd9c 	bl	800e928 <__assert_func>
 800ddf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddf4:	6004      	str	r4, [r0, #0]
 800ddf6:	60c4      	str	r4, [r0, #12]
 800ddf8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ddfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800de00:	b94c      	cbnz	r4, 800de16 <__pow5mult+0x66>
 800de02:	f240 2171 	movw	r1, #625	; 0x271
 800de06:	4630      	mov	r0, r6
 800de08:	f7ff ff12 	bl	800dc30 <__i2b>
 800de0c:	2300      	movs	r3, #0
 800de0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800de12:	4604      	mov	r4, r0
 800de14:	6003      	str	r3, [r0, #0]
 800de16:	f04f 0900 	mov.w	r9, #0
 800de1a:	07eb      	lsls	r3, r5, #31
 800de1c:	d50a      	bpl.n	800de34 <__pow5mult+0x84>
 800de1e:	4639      	mov	r1, r7
 800de20:	4622      	mov	r2, r4
 800de22:	4630      	mov	r0, r6
 800de24:	f7ff ff1a 	bl	800dc5c <__multiply>
 800de28:	4639      	mov	r1, r7
 800de2a:	4680      	mov	r8, r0
 800de2c:	4630      	mov	r0, r6
 800de2e:	f7ff fe49 	bl	800dac4 <_Bfree>
 800de32:	4647      	mov	r7, r8
 800de34:	106d      	asrs	r5, r5, #1
 800de36:	d00b      	beq.n	800de50 <__pow5mult+0xa0>
 800de38:	6820      	ldr	r0, [r4, #0]
 800de3a:	b938      	cbnz	r0, 800de4c <__pow5mult+0x9c>
 800de3c:	4622      	mov	r2, r4
 800de3e:	4621      	mov	r1, r4
 800de40:	4630      	mov	r0, r6
 800de42:	f7ff ff0b 	bl	800dc5c <__multiply>
 800de46:	6020      	str	r0, [r4, #0]
 800de48:	f8c0 9000 	str.w	r9, [r0]
 800de4c:	4604      	mov	r4, r0
 800de4e:	e7e4      	b.n	800de1a <__pow5mult+0x6a>
 800de50:	4638      	mov	r0, r7
 800de52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de56:	bf00      	nop
 800de58:	08012df0 	.word	0x08012df0
 800de5c:	08012c25 	.word	0x08012c25
 800de60:	08012ca5 	.word	0x08012ca5

0800de64 <__lshift>:
 800de64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de68:	460c      	mov	r4, r1
 800de6a:	6849      	ldr	r1, [r1, #4]
 800de6c:	6923      	ldr	r3, [r4, #16]
 800de6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de72:	68a3      	ldr	r3, [r4, #8]
 800de74:	4607      	mov	r7, r0
 800de76:	4691      	mov	r9, r2
 800de78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de7c:	f108 0601 	add.w	r6, r8, #1
 800de80:	42b3      	cmp	r3, r6
 800de82:	db0b      	blt.n	800de9c <__lshift+0x38>
 800de84:	4638      	mov	r0, r7
 800de86:	f7ff fddd 	bl	800da44 <_Balloc>
 800de8a:	4605      	mov	r5, r0
 800de8c:	b948      	cbnz	r0, 800dea2 <__lshift+0x3e>
 800de8e:	4602      	mov	r2, r0
 800de90:	4b28      	ldr	r3, [pc, #160]	; (800df34 <__lshift+0xd0>)
 800de92:	4829      	ldr	r0, [pc, #164]	; (800df38 <__lshift+0xd4>)
 800de94:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800de98:	f000 fd46 	bl	800e928 <__assert_func>
 800de9c:	3101      	adds	r1, #1
 800de9e:	005b      	lsls	r3, r3, #1
 800dea0:	e7ee      	b.n	800de80 <__lshift+0x1c>
 800dea2:	2300      	movs	r3, #0
 800dea4:	f100 0114 	add.w	r1, r0, #20
 800dea8:	f100 0210 	add.w	r2, r0, #16
 800deac:	4618      	mov	r0, r3
 800deae:	4553      	cmp	r3, sl
 800deb0:	db33      	blt.n	800df1a <__lshift+0xb6>
 800deb2:	6920      	ldr	r0, [r4, #16]
 800deb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800deb8:	f104 0314 	add.w	r3, r4, #20
 800debc:	f019 091f 	ands.w	r9, r9, #31
 800dec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dec4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dec8:	d02b      	beq.n	800df22 <__lshift+0xbe>
 800deca:	f1c9 0e20 	rsb	lr, r9, #32
 800dece:	468a      	mov	sl, r1
 800ded0:	2200      	movs	r2, #0
 800ded2:	6818      	ldr	r0, [r3, #0]
 800ded4:	fa00 f009 	lsl.w	r0, r0, r9
 800ded8:	4310      	orrs	r0, r2
 800deda:	f84a 0b04 	str.w	r0, [sl], #4
 800dede:	f853 2b04 	ldr.w	r2, [r3], #4
 800dee2:	459c      	cmp	ip, r3
 800dee4:	fa22 f20e 	lsr.w	r2, r2, lr
 800dee8:	d8f3      	bhi.n	800ded2 <__lshift+0x6e>
 800deea:	ebac 0304 	sub.w	r3, ip, r4
 800deee:	3b15      	subs	r3, #21
 800def0:	f023 0303 	bic.w	r3, r3, #3
 800def4:	3304      	adds	r3, #4
 800def6:	f104 0015 	add.w	r0, r4, #21
 800defa:	4584      	cmp	ip, r0
 800defc:	bf38      	it	cc
 800defe:	2304      	movcc	r3, #4
 800df00:	50ca      	str	r2, [r1, r3]
 800df02:	b10a      	cbz	r2, 800df08 <__lshift+0xa4>
 800df04:	f108 0602 	add.w	r6, r8, #2
 800df08:	3e01      	subs	r6, #1
 800df0a:	4638      	mov	r0, r7
 800df0c:	612e      	str	r6, [r5, #16]
 800df0e:	4621      	mov	r1, r4
 800df10:	f7ff fdd8 	bl	800dac4 <_Bfree>
 800df14:	4628      	mov	r0, r5
 800df16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800df1e:	3301      	adds	r3, #1
 800df20:	e7c5      	b.n	800deae <__lshift+0x4a>
 800df22:	3904      	subs	r1, #4
 800df24:	f853 2b04 	ldr.w	r2, [r3], #4
 800df28:	f841 2f04 	str.w	r2, [r1, #4]!
 800df2c:	459c      	cmp	ip, r3
 800df2e:	d8f9      	bhi.n	800df24 <__lshift+0xc0>
 800df30:	e7ea      	b.n	800df08 <__lshift+0xa4>
 800df32:	bf00      	nop
 800df34:	08012c94 	.word	0x08012c94
 800df38:	08012ca5 	.word	0x08012ca5

0800df3c <__mcmp>:
 800df3c:	b530      	push	{r4, r5, lr}
 800df3e:	6902      	ldr	r2, [r0, #16]
 800df40:	690c      	ldr	r4, [r1, #16]
 800df42:	1b12      	subs	r2, r2, r4
 800df44:	d10e      	bne.n	800df64 <__mcmp+0x28>
 800df46:	f100 0314 	add.w	r3, r0, #20
 800df4a:	3114      	adds	r1, #20
 800df4c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df50:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df54:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df58:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df5c:	42a5      	cmp	r5, r4
 800df5e:	d003      	beq.n	800df68 <__mcmp+0x2c>
 800df60:	d305      	bcc.n	800df6e <__mcmp+0x32>
 800df62:	2201      	movs	r2, #1
 800df64:	4610      	mov	r0, r2
 800df66:	bd30      	pop	{r4, r5, pc}
 800df68:	4283      	cmp	r3, r0
 800df6a:	d3f3      	bcc.n	800df54 <__mcmp+0x18>
 800df6c:	e7fa      	b.n	800df64 <__mcmp+0x28>
 800df6e:	f04f 32ff 	mov.w	r2, #4294967295
 800df72:	e7f7      	b.n	800df64 <__mcmp+0x28>

0800df74 <__mdiff>:
 800df74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df78:	460c      	mov	r4, r1
 800df7a:	4606      	mov	r6, r0
 800df7c:	4611      	mov	r1, r2
 800df7e:	4620      	mov	r0, r4
 800df80:	4690      	mov	r8, r2
 800df82:	f7ff ffdb 	bl	800df3c <__mcmp>
 800df86:	1e05      	subs	r5, r0, #0
 800df88:	d110      	bne.n	800dfac <__mdiff+0x38>
 800df8a:	4629      	mov	r1, r5
 800df8c:	4630      	mov	r0, r6
 800df8e:	f7ff fd59 	bl	800da44 <_Balloc>
 800df92:	b930      	cbnz	r0, 800dfa2 <__mdiff+0x2e>
 800df94:	4b3a      	ldr	r3, [pc, #232]	; (800e080 <__mdiff+0x10c>)
 800df96:	4602      	mov	r2, r0
 800df98:	f240 2137 	movw	r1, #567	; 0x237
 800df9c:	4839      	ldr	r0, [pc, #228]	; (800e084 <__mdiff+0x110>)
 800df9e:	f000 fcc3 	bl	800e928 <__assert_func>
 800dfa2:	2301      	movs	r3, #1
 800dfa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dfa8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfac:	bfa4      	itt	ge
 800dfae:	4643      	movge	r3, r8
 800dfb0:	46a0      	movge	r8, r4
 800dfb2:	4630      	mov	r0, r6
 800dfb4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dfb8:	bfa6      	itte	ge
 800dfba:	461c      	movge	r4, r3
 800dfbc:	2500      	movge	r5, #0
 800dfbe:	2501      	movlt	r5, #1
 800dfc0:	f7ff fd40 	bl	800da44 <_Balloc>
 800dfc4:	b920      	cbnz	r0, 800dfd0 <__mdiff+0x5c>
 800dfc6:	4b2e      	ldr	r3, [pc, #184]	; (800e080 <__mdiff+0x10c>)
 800dfc8:	4602      	mov	r2, r0
 800dfca:	f240 2145 	movw	r1, #581	; 0x245
 800dfce:	e7e5      	b.n	800df9c <__mdiff+0x28>
 800dfd0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dfd4:	6926      	ldr	r6, [r4, #16]
 800dfd6:	60c5      	str	r5, [r0, #12]
 800dfd8:	f104 0914 	add.w	r9, r4, #20
 800dfdc:	f108 0514 	add.w	r5, r8, #20
 800dfe0:	f100 0e14 	add.w	lr, r0, #20
 800dfe4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dfe8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dfec:	f108 0210 	add.w	r2, r8, #16
 800dff0:	46f2      	mov	sl, lr
 800dff2:	2100      	movs	r1, #0
 800dff4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dff8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dffc:	fa11 f88b 	uxtah	r8, r1, fp
 800e000:	b299      	uxth	r1, r3
 800e002:	0c1b      	lsrs	r3, r3, #16
 800e004:	eba8 0801 	sub.w	r8, r8, r1
 800e008:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e00c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e010:	fa1f f888 	uxth.w	r8, r8
 800e014:	1419      	asrs	r1, r3, #16
 800e016:	454e      	cmp	r6, r9
 800e018:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e01c:	f84a 3b04 	str.w	r3, [sl], #4
 800e020:	d8e8      	bhi.n	800dff4 <__mdiff+0x80>
 800e022:	1b33      	subs	r3, r6, r4
 800e024:	3b15      	subs	r3, #21
 800e026:	f023 0303 	bic.w	r3, r3, #3
 800e02a:	3304      	adds	r3, #4
 800e02c:	3415      	adds	r4, #21
 800e02e:	42a6      	cmp	r6, r4
 800e030:	bf38      	it	cc
 800e032:	2304      	movcc	r3, #4
 800e034:	441d      	add	r5, r3
 800e036:	4473      	add	r3, lr
 800e038:	469e      	mov	lr, r3
 800e03a:	462e      	mov	r6, r5
 800e03c:	4566      	cmp	r6, ip
 800e03e:	d30e      	bcc.n	800e05e <__mdiff+0xea>
 800e040:	f10c 0203 	add.w	r2, ip, #3
 800e044:	1b52      	subs	r2, r2, r5
 800e046:	f022 0203 	bic.w	r2, r2, #3
 800e04a:	3d03      	subs	r5, #3
 800e04c:	45ac      	cmp	ip, r5
 800e04e:	bf38      	it	cc
 800e050:	2200      	movcc	r2, #0
 800e052:	4413      	add	r3, r2
 800e054:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800e058:	b17a      	cbz	r2, 800e07a <__mdiff+0x106>
 800e05a:	6107      	str	r7, [r0, #16]
 800e05c:	e7a4      	b.n	800dfa8 <__mdiff+0x34>
 800e05e:	f856 8b04 	ldr.w	r8, [r6], #4
 800e062:	fa11 f288 	uxtah	r2, r1, r8
 800e066:	1414      	asrs	r4, r2, #16
 800e068:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e06c:	b292      	uxth	r2, r2
 800e06e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e072:	f84e 2b04 	str.w	r2, [lr], #4
 800e076:	1421      	asrs	r1, r4, #16
 800e078:	e7e0      	b.n	800e03c <__mdiff+0xc8>
 800e07a:	3f01      	subs	r7, #1
 800e07c:	e7ea      	b.n	800e054 <__mdiff+0xe0>
 800e07e:	bf00      	nop
 800e080:	08012c94 	.word	0x08012c94
 800e084:	08012ca5 	.word	0x08012ca5

0800e088 <__d2b>:
 800e088:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e08c:	460f      	mov	r7, r1
 800e08e:	2101      	movs	r1, #1
 800e090:	ec59 8b10 	vmov	r8, r9, d0
 800e094:	4616      	mov	r6, r2
 800e096:	f7ff fcd5 	bl	800da44 <_Balloc>
 800e09a:	4604      	mov	r4, r0
 800e09c:	b930      	cbnz	r0, 800e0ac <__d2b+0x24>
 800e09e:	4602      	mov	r2, r0
 800e0a0:	4b24      	ldr	r3, [pc, #144]	; (800e134 <__d2b+0xac>)
 800e0a2:	4825      	ldr	r0, [pc, #148]	; (800e138 <__d2b+0xb0>)
 800e0a4:	f240 310f 	movw	r1, #783	; 0x30f
 800e0a8:	f000 fc3e 	bl	800e928 <__assert_func>
 800e0ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e0b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e0b4:	bb2d      	cbnz	r5, 800e102 <__d2b+0x7a>
 800e0b6:	9301      	str	r3, [sp, #4]
 800e0b8:	f1b8 0300 	subs.w	r3, r8, #0
 800e0bc:	d026      	beq.n	800e10c <__d2b+0x84>
 800e0be:	4668      	mov	r0, sp
 800e0c0:	9300      	str	r3, [sp, #0]
 800e0c2:	f7ff fd87 	bl	800dbd4 <__lo0bits>
 800e0c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e0ca:	b1e8      	cbz	r0, 800e108 <__d2b+0x80>
 800e0cc:	f1c0 0320 	rsb	r3, r0, #32
 800e0d0:	fa02 f303 	lsl.w	r3, r2, r3
 800e0d4:	430b      	orrs	r3, r1
 800e0d6:	40c2      	lsrs	r2, r0
 800e0d8:	6163      	str	r3, [r4, #20]
 800e0da:	9201      	str	r2, [sp, #4]
 800e0dc:	9b01      	ldr	r3, [sp, #4]
 800e0de:	61a3      	str	r3, [r4, #24]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	bf14      	ite	ne
 800e0e4:	2202      	movne	r2, #2
 800e0e6:	2201      	moveq	r2, #1
 800e0e8:	6122      	str	r2, [r4, #16]
 800e0ea:	b1bd      	cbz	r5, 800e11c <__d2b+0x94>
 800e0ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e0f0:	4405      	add	r5, r0
 800e0f2:	603d      	str	r5, [r7, #0]
 800e0f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e0f8:	6030      	str	r0, [r6, #0]
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	b003      	add	sp, #12
 800e0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e106:	e7d6      	b.n	800e0b6 <__d2b+0x2e>
 800e108:	6161      	str	r1, [r4, #20]
 800e10a:	e7e7      	b.n	800e0dc <__d2b+0x54>
 800e10c:	a801      	add	r0, sp, #4
 800e10e:	f7ff fd61 	bl	800dbd4 <__lo0bits>
 800e112:	9b01      	ldr	r3, [sp, #4]
 800e114:	6163      	str	r3, [r4, #20]
 800e116:	3020      	adds	r0, #32
 800e118:	2201      	movs	r2, #1
 800e11a:	e7e5      	b.n	800e0e8 <__d2b+0x60>
 800e11c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e120:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e124:	6038      	str	r0, [r7, #0]
 800e126:	6918      	ldr	r0, [r3, #16]
 800e128:	f7ff fd34 	bl	800db94 <__hi0bits>
 800e12c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e130:	e7e2      	b.n	800e0f8 <__d2b+0x70>
 800e132:	bf00      	nop
 800e134:	08012c94 	.word	0x08012c94
 800e138:	08012ca5 	.word	0x08012ca5

0800e13c <__ssputs_r>:
 800e13c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e140:	688e      	ldr	r6, [r1, #8]
 800e142:	461f      	mov	r7, r3
 800e144:	42be      	cmp	r6, r7
 800e146:	680b      	ldr	r3, [r1, #0]
 800e148:	4682      	mov	sl, r0
 800e14a:	460c      	mov	r4, r1
 800e14c:	4690      	mov	r8, r2
 800e14e:	d82c      	bhi.n	800e1aa <__ssputs_r+0x6e>
 800e150:	898a      	ldrh	r2, [r1, #12]
 800e152:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e156:	d026      	beq.n	800e1a6 <__ssputs_r+0x6a>
 800e158:	6965      	ldr	r5, [r4, #20]
 800e15a:	6909      	ldr	r1, [r1, #16]
 800e15c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e160:	eba3 0901 	sub.w	r9, r3, r1
 800e164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e168:	1c7b      	adds	r3, r7, #1
 800e16a:	444b      	add	r3, r9
 800e16c:	106d      	asrs	r5, r5, #1
 800e16e:	429d      	cmp	r5, r3
 800e170:	bf38      	it	cc
 800e172:	461d      	movcc	r5, r3
 800e174:	0553      	lsls	r3, r2, #21
 800e176:	d527      	bpl.n	800e1c8 <__ssputs_r+0x8c>
 800e178:	4629      	mov	r1, r5
 800e17a:	f7fd fdf1 	bl	800bd60 <_malloc_r>
 800e17e:	4606      	mov	r6, r0
 800e180:	b360      	cbz	r0, 800e1dc <__ssputs_r+0xa0>
 800e182:	6921      	ldr	r1, [r4, #16]
 800e184:	464a      	mov	r2, r9
 800e186:	f000 fbc1 	bl	800e90c <memcpy>
 800e18a:	89a3      	ldrh	r3, [r4, #12]
 800e18c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e194:	81a3      	strh	r3, [r4, #12]
 800e196:	6126      	str	r6, [r4, #16]
 800e198:	6165      	str	r5, [r4, #20]
 800e19a:	444e      	add	r6, r9
 800e19c:	eba5 0509 	sub.w	r5, r5, r9
 800e1a0:	6026      	str	r6, [r4, #0]
 800e1a2:	60a5      	str	r5, [r4, #8]
 800e1a4:	463e      	mov	r6, r7
 800e1a6:	42be      	cmp	r6, r7
 800e1a8:	d900      	bls.n	800e1ac <__ssputs_r+0x70>
 800e1aa:	463e      	mov	r6, r7
 800e1ac:	6820      	ldr	r0, [r4, #0]
 800e1ae:	4632      	mov	r2, r6
 800e1b0:	4641      	mov	r1, r8
 800e1b2:	f000 fb6f 	bl	800e894 <memmove>
 800e1b6:	68a3      	ldr	r3, [r4, #8]
 800e1b8:	1b9b      	subs	r3, r3, r6
 800e1ba:	60a3      	str	r3, [r4, #8]
 800e1bc:	6823      	ldr	r3, [r4, #0]
 800e1be:	4433      	add	r3, r6
 800e1c0:	6023      	str	r3, [r4, #0]
 800e1c2:	2000      	movs	r0, #0
 800e1c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1c8:	462a      	mov	r2, r5
 800e1ca:	f000 fbf3 	bl	800e9b4 <_realloc_r>
 800e1ce:	4606      	mov	r6, r0
 800e1d0:	2800      	cmp	r0, #0
 800e1d2:	d1e0      	bne.n	800e196 <__ssputs_r+0x5a>
 800e1d4:	6921      	ldr	r1, [r4, #16]
 800e1d6:	4650      	mov	r0, sl
 800e1d8:	f7ff fbe8 	bl	800d9ac <_free_r>
 800e1dc:	230c      	movs	r3, #12
 800e1de:	f8ca 3000 	str.w	r3, [sl]
 800e1e2:	89a3      	ldrh	r3, [r4, #12]
 800e1e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1e8:	81a3      	strh	r3, [r4, #12]
 800e1ea:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ee:	e7e9      	b.n	800e1c4 <__ssputs_r+0x88>

0800e1f0 <_svfiprintf_r>:
 800e1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1f4:	4698      	mov	r8, r3
 800e1f6:	898b      	ldrh	r3, [r1, #12]
 800e1f8:	061b      	lsls	r3, r3, #24
 800e1fa:	b09d      	sub	sp, #116	; 0x74
 800e1fc:	4607      	mov	r7, r0
 800e1fe:	460d      	mov	r5, r1
 800e200:	4614      	mov	r4, r2
 800e202:	d50e      	bpl.n	800e222 <_svfiprintf_r+0x32>
 800e204:	690b      	ldr	r3, [r1, #16]
 800e206:	b963      	cbnz	r3, 800e222 <_svfiprintf_r+0x32>
 800e208:	2140      	movs	r1, #64	; 0x40
 800e20a:	f7fd fda9 	bl	800bd60 <_malloc_r>
 800e20e:	6028      	str	r0, [r5, #0]
 800e210:	6128      	str	r0, [r5, #16]
 800e212:	b920      	cbnz	r0, 800e21e <_svfiprintf_r+0x2e>
 800e214:	230c      	movs	r3, #12
 800e216:	603b      	str	r3, [r7, #0]
 800e218:	f04f 30ff 	mov.w	r0, #4294967295
 800e21c:	e0d0      	b.n	800e3c0 <_svfiprintf_r+0x1d0>
 800e21e:	2340      	movs	r3, #64	; 0x40
 800e220:	616b      	str	r3, [r5, #20]
 800e222:	2300      	movs	r3, #0
 800e224:	9309      	str	r3, [sp, #36]	; 0x24
 800e226:	2320      	movs	r3, #32
 800e228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e22c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e230:	2330      	movs	r3, #48	; 0x30
 800e232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e3d8 <_svfiprintf_r+0x1e8>
 800e236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e23a:	f04f 0901 	mov.w	r9, #1
 800e23e:	4623      	mov	r3, r4
 800e240:	469a      	mov	sl, r3
 800e242:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e246:	b10a      	cbz	r2, 800e24c <_svfiprintf_r+0x5c>
 800e248:	2a25      	cmp	r2, #37	; 0x25
 800e24a:	d1f9      	bne.n	800e240 <_svfiprintf_r+0x50>
 800e24c:	ebba 0b04 	subs.w	fp, sl, r4
 800e250:	d00b      	beq.n	800e26a <_svfiprintf_r+0x7a>
 800e252:	465b      	mov	r3, fp
 800e254:	4622      	mov	r2, r4
 800e256:	4629      	mov	r1, r5
 800e258:	4638      	mov	r0, r7
 800e25a:	f7ff ff6f 	bl	800e13c <__ssputs_r>
 800e25e:	3001      	adds	r0, #1
 800e260:	f000 80a9 	beq.w	800e3b6 <_svfiprintf_r+0x1c6>
 800e264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e266:	445a      	add	r2, fp
 800e268:	9209      	str	r2, [sp, #36]	; 0x24
 800e26a:	f89a 3000 	ldrb.w	r3, [sl]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	f000 80a1 	beq.w	800e3b6 <_svfiprintf_r+0x1c6>
 800e274:	2300      	movs	r3, #0
 800e276:	f04f 32ff 	mov.w	r2, #4294967295
 800e27a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e27e:	f10a 0a01 	add.w	sl, sl, #1
 800e282:	9304      	str	r3, [sp, #16]
 800e284:	9307      	str	r3, [sp, #28]
 800e286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e28a:	931a      	str	r3, [sp, #104]	; 0x68
 800e28c:	4654      	mov	r4, sl
 800e28e:	2205      	movs	r2, #5
 800e290:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e294:	4850      	ldr	r0, [pc, #320]	; (800e3d8 <_svfiprintf_r+0x1e8>)
 800e296:	f7f1 ffc3 	bl	8000220 <memchr>
 800e29a:	9a04      	ldr	r2, [sp, #16]
 800e29c:	b9d8      	cbnz	r0, 800e2d6 <_svfiprintf_r+0xe6>
 800e29e:	06d0      	lsls	r0, r2, #27
 800e2a0:	bf44      	itt	mi
 800e2a2:	2320      	movmi	r3, #32
 800e2a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2a8:	0711      	lsls	r1, r2, #28
 800e2aa:	bf44      	itt	mi
 800e2ac:	232b      	movmi	r3, #43	; 0x2b
 800e2ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2b6:	2b2a      	cmp	r3, #42	; 0x2a
 800e2b8:	d015      	beq.n	800e2e6 <_svfiprintf_r+0xf6>
 800e2ba:	9a07      	ldr	r2, [sp, #28]
 800e2bc:	4654      	mov	r4, sl
 800e2be:	2000      	movs	r0, #0
 800e2c0:	f04f 0c0a 	mov.w	ip, #10
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2ca:	3b30      	subs	r3, #48	; 0x30
 800e2cc:	2b09      	cmp	r3, #9
 800e2ce:	d94d      	bls.n	800e36c <_svfiprintf_r+0x17c>
 800e2d0:	b1b0      	cbz	r0, 800e300 <_svfiprintf_r+0x110>
 800e2d2:	9207      	str	r2, [sp, #28]
 800e2d4:	e014      	b.n	800e300 <_svfiprintf_r+0x110>
 800e2d6:	eba0 0308 	sub.w	r3, r0, r8
 800e2da:	fa09 f303 	lsl.w	r3, r9, r3
 800e2de:	4313      	orrs	r3, r2
 800e2e0:	9304      	str	r3, [sp, #16]
 800e2e2:	46a2      	mov	sl, r4
 800e2e4:	e7d2      	b.n	800e28c <_svfiprintf_r+0x9c>
 800e2e6:	9b03      	ldr	r3, [sp, #12]
 800e2e8:	1d19      	adds	r1, r3, #4
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	9103      	str	r1, [sp, #12]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	bfbb      	ittet	lt
 800e2f2:	425b      	neglt	r3, r3
 800e2f4:	f042 0202 	orrlt.w	r2, r2, #2
 800e2f8:	9307      	strge	r3, [sp, #28]
 800e2fa:	9307      	strlt	r3, [sp, #28]
 800e2fc:	bfb8      	it	lt
 800e2fe:	9204      	strlt	r2, [sp, #16]
 800e300:	7823      	ldrb	r3, [r4, #0]
 800e302:	2b2e      	cmp	r3, #46	; 0x2e
 800e304:	d10c      	bne.n	800e320 <_svfiprintf_r+0x130>
 800e306:	7863      	ldrb	r3, [r4, #1]
 800e308:	2b2a      	cmp	r3, #42	; 0x2a
 800e30a:	d134      	bne.n	800e376 <_svfiprintf_r+0x186>
 800e30c:	9b03      	ldr	r3, [sp, #12]
 800e30e:	1d1a      	adds	r2, r3, #4
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	9203      	str	r2, [sp, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	bfb8      	it	lt
 800e318:	f04f 33ff 	movlt.w	r3, #4294967295
 800e31c:	3402      	adds	r4, #2
 800e31e:	9305      	str	r3, [sp, #20]
 800e320:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e3e8 <_svfiprintf_r+0x1f8>
 800e324:	7821      	ldrb	r1, [r4, #0]
 800e326:	2203      	movs	r2, #3
 800e328:	4650      	mov	r0, sl
 800e32a:	f7f1 ff79 	bl	8000220 <memchr>
 800e32e:	b138      	cbz	r0, 800e340 <_svfiprintf_r+0x150>
 800e330:	9b04      	ldr	r3, [sp, #16]
 800e332:	eba0 000a 	sub.w	r0, r0, sl
 800e336:	2240      	movs	r2, #64	; 0x40
 800e338:	4082      	lsls	r2, r0
 800e33a:	4313      	orrs	r3, r2
 800e33c:	3401      	adds	r4, #1
 800e33e:	9304      	str	r3, [sp, #16]
 800e340:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e344:	4825      	ldr	r0, [pc, #148]	; (800e3dc <_svfiprintf_r+0x1ec>)
 800e346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e34a:	2206      	movs	r2, #6
 800e34c:	f7f1 ff68 	bl	8000220 <memchr>
 800e350:	2800      	cmp	r0, #0
 800e352:	d038      	beq.n	800e3c6 <_svfiprintf_r+0x1d6>
 800e354:	4b22      	ldr	r3, [pc, #136]	; (800e3e0 <_svfiprintf_r+0x1f0>)
 800e356:	bb1b      	cbnz	r3, 800e3a0 <_svfiprintf_r+0x1b0>
 800e358:	9b03      	ldr	r3, [sp, #12]
 800e35a:	3307      	adds	r3, #7
 800e35c:	f023 0307 	bic.w	r3, r3, #7
 800e360:	3308      	adds	r3, #8
 800e362:	9303      	str	r3, [sp, #12]
 800e364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e366:	4433      	add	r3, r6
 800e368:	9309      	str	r3, [sp, #36]	; 0x24
 800e36a:	e768      	b.n	800e23e <_svfiprintf_r+0x4e>
 800e36c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e370:	460c      	mov	r4, r1
 800e372:	2001      	movs	r0, #1
 800e374:	e7a6      	b.n	800e2c4 <_svfiprintf_r+0xd4>
 800e376:	2300      	movs	r3, #0
 800e378:	3401      	adds	r4, #1
 800e37a:	9305      	str	r3, [sp, #20]
 800e37c:	4619      	mov	r1, r3
 800e37e:	f04f 0c0a 	mov.w	ip, #10
 800e382:	4620      	mov	r0, r4
 800e384:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e388:	3a30      	subs	r2, #48	; 0x30
 800e38a:	2a09      	cmp	r2, #9
 800e38c:	d903      	bls.n	800e396 <_svfiprintf_r+0x1a6>
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d0c6      	beq.n	800e320 <_svfiprintf_r+0x130>
 800e392:	9105      	str	r1, [sp, #20]
 800e394:	e7c4      	b.n	800e320 <_svfiprintf_r+0x130>
 800e396:	fb0c 2101 	mla	r1, ip, r1, r2
 800e39a:	4604      	mov	r4, r0
 800e39c:	2301      	movs	r3, #1
 800e39e:	e7f0      	b.n	800e382 <_svfiprintf_r+0x192>
 800e3a0:	ab03      	add	r3, sp, #12
 800e3a2:	9300      	str	r3, [sp, #0]
 800e3a4:	462a      	mov	r2, r5
 800e3a6:	4b0f      	ldr	r3, [pc, #60]	; (800e3e4 <_svfiprintf_r+0x1f4>)
 800e3a8:	a904      	add	r1, sp, #16
 800e3aa:	4638      	mov	r0, r7
 800e3ac:	f7fd fe04 	bl	800bfb8 <_printf_float>
 800e3b0:	1c42      	adds	r2, r0, #1
 800e3b2:	4606      	mov	r6, r0
 800e3b4:	d1d6      	bne.n	800e364 <_svfiprintf_r+0x174>
 800e3b6:	89ab      	ldrh	r3, [r5, #12]
 800e3b8:	065b      	lsls	r3, r3, #25
 800e3ba:	f53f af2d 	bmi.w	800e218 <_svfiprintf_r+0x28>
 800e3be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3c0:	b01d      	add	sp, #116	; 0x74
 800e3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3c6:	ab03      	add	r3, sp, #12
 800e3c8:	9300      	str	r3, [sp, #0]
 800e3ca:	462a      	mov	r2, r5
 800e3cc:	4b05      	ldr	r3, [pc, #20]	; (800e3e4 <_svfiprintf_r+0x1f4>)
 800e3ce:	a904      	add	r1, sp, #16
 800e3d0:	4638      	mov	r0, r7
 800e3d2:	f7fe f895 	bl	800c500 <_printf_i>
 800e3d6:	e7eb      	b.n	800e3b0 <_svfiprintf_r+0x1c0>
 800e3d8:	08012dfc 	.word	0x08012dfc
 800e3dc:	08012e06 	.word	0x08012e06
 800e3e0:	0800bfb9 	.word	0x0800bfb9
 800e3e4:	0800e13d 	.word	0x0800e13d
 800e3e8:	08012e02 	.word	0x08012e02

0800e3ec <__sfputc_r>:
 800e3ec:	6893      	ldr	r3, [r2, #8]
 800e3ee:	3b01      	subs	r3, #1
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	b410      	push	{r4}
 800e3f4:	6093      	str	r3, [r2, #8]
 800e3f6:	da08      	bge.n	800e40a <__sfputc_r+0x1e>
 800e3f8:	6994      	ldr	r4, [r2, #24]
 800e3fa:	42a3      	cmp	r3, r4
 800e3fc:	db01      	blt.n	800e402 <__sfputc_r+0x16>
 800e3fe:	290a      	cmp	r1, #10
 800e400:	d103      	bne.n	800e40a <__sfputc_r+0x1e>
 800e402:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e406:	f7fe bb30 	b.w	800ca6a <__swbuf_r>
 800e40a:	6813      	ldr	r3, [r2, #0]
 800e40c:	1c58      	adds	r0, r3, #1
 800e40e:	6010      	str	r0, [r2, #0]
 800e410:	7019      	strb	r1, [r3, #0]
 800e412:	4608      	mov	r0, r1
 800e414:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e418:	4770      	bx	lr

0800e41a <__sfputs_r>:
 800e41a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41c:	4606      	mov	r6, r0
 800e41e:	460f      	mov	r7, r1
 800e420:	4614      	mov	r4, r2
 800e422:	18d5      	adds	r5, r2, r3
 800e424:	42ac      	cmp	r4, r5
 800e426:	d101      	bne.n	800e42c <__sfputs_r+0x12>
 800e428:	2000      	movs	r0, #0
 800e42a:	e007      	b.n	800e43c <__sfputs_r+0x22>
 800e42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e430:	463a      	mov	r2, r7
 800e432:	4630      	mov	r0, r6
 800e434:	f7ff ffda 	bl	800e3ec <__sfputc_r>
 800e438:	1c43      	adds	r3, r0, #1
 800e43a:	d1f3      	bne.n	800e424 <__sfputs_r+0xa>
 800e43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e440 <_vfiprintf_r>:
 800e440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e444:	460d      	mov	r5, r1
 800e446:	b09d      	sub	sp, #116	; 0x74
 800e448:	4614      	mov	r4, r2
 800e44a:	4698      	mov	r8, r3
 800e44c:	4606      	mov	r6, r0
 800e44e:	b118      	cbz	r0, 800e458 <_vfiprintf_r+0x18>
 800e450:	6a03      	ldr	r3, [r0, #32]
 800e452:	b90b      	cbnz	r3, 800e458 <_vfiprintf_r+0x18>
 800e454:	f7fe fa02 	bl	800c85c <__sinit>
 800e458:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e45a:	07d9      	lsls	r1, r3, #31
 800e45c:	d405      	bmi.n	800e46a <_vfiprintf_r+0x2a>
 800e45e:	89ab      	ldrh	r3, [r5, #12]
 800e460:	059a      	lsls	r2, r3, #22
 800e462:	d402      	bmi.n	800e46a <_vfiprintf_r+0x2a>
 800e464:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e466:	f7fe fc22 	bl	800ccae <__retarget_lock_acquire_recursive>
 800e46a:	89ab      	ldrh	r3, [r5, #12]
 800e46c:	071b      	lsls	r3, r3, #28
 800e46e:	d501      	bpl.n	800e474 <_vfiprintf_r+0x34>
 800e470:	692b      	ldr	r3, [r5, #16]
 800e472:	b99b      	cbnz	r3, 800e49c <_vfiprintf_r+0x5c>
 800e474:	4629      	mov	r1, r5
 800e476:	4630      	mov	r0, r6
 800e478:	f7fe fb34 	bl	800cae4 <__swsetup_r>
 800e47c:	b170      	cbz	r0, 800e49c <_vfiprintf_r+0x5c>
 800e47e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e480:	07dc      	lsls	r4, r3, #31
 800e482:	d504      	bpl.n	800e48e <_vfiprintf_r+0x4e>
 800e484:	f04f 30ff 	mov.w	r0, #4294967295
 800e488:	b01d      	add	sp, #116	; 0x74
 800e48a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48e:	89ab      	ldrh	r3, [r5, #12]
 800e490:	0598      	lsls	r0, r3, #22
 800e492:	d4f7      	bmi.n	800e484 <_vfiprintf_r+0x44>
 800e494:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e496:	f7fe fc0b 	bl	800ccb0 <__retarget_lock_release_recursive>
 800e49a:	e7f3      	b.n	800e484 <_vfiprintf_r+0x44>
 800e49c:	2300      	movs	r3, #0
 800e49e:	9309      	str	r3, [sp, #36]	; 0x24
 800e4a0:	2320      	movs	r3, #32
 800e4a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4aa:	2330      	movs	r3, #48	; 0x30
 800e4ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e660 <_vfiprintf_r+0x220>
 800e4b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4b4:	f04f 0901 	mov.w	r9, #1
 800e4b8:	4623      	mov	r3, r4
 800e4ba:	469a      	mov	sl, r3
 800e4bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4c0:	b10a      	cbz	r2, 800e4c6 <_vfiprintf_r+0x86>
 800e4c2:	2a25      	cmp	r2, #37	; 0x25
 800e4c4:	d1f9      	bne.n	800e4ba <_vfiprintf_r+0x7a>
 800e4c6:	ebba 0b04 	subs.w	fp, sl, r4
 800e4ca:	d00b      	beq.n	800e4e4 <_vfiprintf_r+0xa4>
 800e4cc:	465b      	mov	r3, fp
 800e4ce:	4622      	mov	r2, r4
 800e4d0:	4629      	mov	r1, r5
 800e4d2:	4630      	mov	r0, r6
 800e4d4:	f7ff ffa1 	bl	800e41a <__sfputs_r>
 800e4d8:	3001      	adds	r0, #1
 800e4da:	f000 80a9 	beq.w	800e630 <_vfiprintf_r+0x1f0>
 800e4de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4e0:	445a      	add	r2, fp
 800e4e2:	9209      	str	r2, [sp, #36]	; 0x24
 800e4e4:	f89a 3000 	ldrb.w	r3, [sl]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	f000 80a1 	beq.w	800e630 <_vfiprintf_r+0x1f0>
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4f8:	f10a 0a01 	add.w	sl, sl, #1
 800e4fc:	9304      	str	r3, [sp, #16]
 800e4fe:	9307      	str	r3, [sp, #28]
 800e500:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e504:	931a      	str	r3, [sp, #104]	; 0x68
 800e506:	4654      	mov	r4, sl
 800e508:	2205      	movs	r2, #5
 800e50a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e50e:	4854      	ldr	r0, [pc, #336]	; (800e660 <_vfiprintf_r+0x220>)
 800e510:	f7f1 fe86 	bl	8000220 <memchr>
 800e514:	9a04      	ldr	r2, [sp, #16]
 800e516:	b9d8      	cbnz	r0, 800e550 <_vfiprintf_r+0x110>
 800e518:	06d1      	lsls	r1, r2, #27
 800e51a:	bf44      	itt	mi
 800e51c:	2320      	movmi	r3, #32
 800e51e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e522:	0713      	lsls	r3, r2, #28
 800e524:	bf44      	itt	mi
 800e526:	232b      	movmi	r3, #43	; 0x2b
 800e528:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e52c:	f89a 3000 	ldrb.w	r3, [sl]
 800e530:	2b2a      	cmp	r3, #42	; 0x2a
 800e532:	d015      	beq.n	800e560 <_vfiprintf_r+0x120>
 800e534:	9a07      	ldr	r2, [sp, #28]
 800e536:	4654      	mov	r4, sl
 800e538:	2000      	movs	r0, #0
 800e53a:	f04f 0c0a 	mov.w	ip, #10
 800e53e:	4621      	mov	r1, r4
 800e540:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e544:	3b30      	subs	r3, #48	; 0x30
 800e546:	2b09      	cmp	r3, #9
 800e548:	d94d      	bls.n	800e5e6 <_vfiprintf_r+0x1a6>
 800e54a:	b1b0      	cbz	r0, 800e57a <_vfiprintf_r+0x13a>
 800e54c:	9207      	str	r2, [sp, #28]
 800e54e:	e014      	b.n	800e57a <_vfiprintf_r+0x13a>
 800e550:	eba0 0308 	sub.w	r3, r0, r8
 800e554:	fa09 f303 	lsl.w	r3, r9, r3
 800e558:	4313      	orrs	r3, r2
 800e55a:	9304      	str	r3, [sp, #16]
 800e55c:	46a2      	mov	sl, r4
 800e55e:	e7d2      	b.n	800e506 <_vfiprintf_r+0xc6>
 800e560:	9b03      	ldr	r3, [sp, #12]
 800e562:	1d19      	adds	r1, r3, #4
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	9103      	str	r1, [sp, #12]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	bfbb      	ittet	lt
 800e56c:	425b      	neglt	r3, r3
 800e56e:	f042 0202 	orrlt.w	r2, r2, #2
 800e572:	9307      	strge	r3, [sp, #28]
 800e574:	9307      	strlt	r3, [sp, #28]
 800e576:	bfb8      	it	lt
 800e578:	9204      	strlt	r2, [sp, #16]
 800e57a:	7823      	ldrb	r3, [r4, #0]
 800e57c:	2b2e      	cmp	r3, #46	; 0x2e
 800e57e:	d10c      	bne.n	800e59a <_vfiprintf_r+0x15a>
 800e580:	7863      	ldrb	r3, [r4, #1]
 800e582:	2b2a      	cmp	r3, #42	; 0x2a
 800e584:	d134      	bne.n	800e5f0 <_vfiprintf_r+0x1b0>
 800e586:	9b03      	ldr	r3, [sp, #12]
 800e588:	1d1a      	adds	r2, r3, #4
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	9203      	str	r2, [sp, #12]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	bfb8      	it	lt
 800e592:	f04f 33ff 	movlt.w	r3, #4294967295
 800e596:	3402      	adds	r4, #2
 800e598:	9305      	str	r3, [sp, #20]
 800e59a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e670 <_vfiprintf_r+0x230>
 800e59e:	7821      	ldrb	r1, [r4, #0]
 800e5a0:	2203      	movs	r2, #3
 800e5a2:	4650      	mov	r0, sl
 800e5a4:	f7f1 fe3c 	bl	8000220 <memchr>
 800e5a8:	b138      	cbz	r0, 800e5ba <_vfiprintf_r+0x17a>
 800e5aa:	9b04      	ldr	r3, [sp, #16]
 800e5ac:	eba0 000a 	sub.w	r0, r0, sl
 800e5b0:	2240      	movs	r2, #64	; 0x40
 800e5b2:	4082      	lsls	r2, r0
 800e5b4:	4313      	orrs	r3, r2
 800e5b6:	3401      	adds	r4, #1
 800e5b8:	9304      	str	r3, [sp, #16]
 800e5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5be:	4829      	ldr	r0, [pc, #164]	; (800e664 <_vfiprintf_r+0x224>)
 800e5c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5c4:	2206      	movs	r2, #6
 800e5c6:	f7f1 fe2b 	bl	8000220 <memchr>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d03f      	beq.n	800e64e <_vfiprintf_r+0x20e>
 800e5ce:	4b26      	ldr	r3, [pc, #152]	; (800e668 <_vfiprintf_r+0x228>)
 800e5d0:	bb1b      	cbnz	r3, 800e61a <_vfiprintf_r+0x1da>
 800e5d2:	9b03      	ldr	r3, [sp, #12]
 800e5d4:	3307      	adds	r3, #7
 800e5d6:	f023 0307 	bic.w	r3, r3, #7
 800e5da:	3308      	adds	r3, #8
 800e5dc:	9303      	str	r3, [sp, #12]
 800e5de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5e0:	443b      	add	r3, r7
 800e5e2:	9309      	str	r3, [sp, #36]	; 0x24
 800e5e4:	e768      	b.n	800e4b8 <_vfiprintf_r+0x78>
 800e5e6:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5ea:	460c      	mov	r4, r1
 800e5ec:	2001      	movs	r0, #1
 800e5ee:	e7a6      	b.n	800e53e <_vfiprintf_r+0xfe>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	3401      	adds	r4, #1
 800e5f4:	9305      	str	r3, [sp, #20]
 800e5f6:	4619      	mov	r1, r3
 800e5f8:	f04f 0c0a 	mov.w	ip, #10
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e602:	3a30      	subs	r2, #48	; 0x30
 800e604:	2a09      	cmp	r2, #9
 800e606:	d903      	bls.n	800e610 <_vfiprintf_r+0x1d0>
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d0c6      	beq.n	800e59a <_vfiprintf_r+0x15a>
 800e60c:	9105      	str	r1, [sp, #20]
 800e60e:	e7c4      	b.n	800e59a <_vfiprintf_r+0x15a>
 800e610:	fb0c 2101 	mla	r1, ip, r1, r2
 800e614:	4604      	mov	r4, r0
 800e616:	2301      	movs	r3, #1
 800e618:	e7f0      	b.n	800e5fc <_vfiprintf_r+0x1bc>
 800e61a:	ab03      	add	r3, sp, #12
 800e61c:	9300      	str	r3, [sp, #0]
 800e61e:	462a      	mov	r2, r5
 800e620:	4b12      	ldr	r3, [pc, #72]	; (800e66c <_vfiprintf_r+0x22c>)
 800e622:	a904      	add	r1, sp, #16
 800e624:	4630      	mov	r0, r6
 800e626:	f7fd fcc7 	bl	800bfb8 <_printf_float>
 800e62a:	4607      	mov	r7, r0
 800e62c:	1c78      	adds	r0, r7, #1
 800e62e:	d1d6      	bne.n	800e5de <_vfiprintf_r+0x19e>
 800e630:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e632:	07d9      	lsls	r1, r3, #31
 800e634:	d405      	bmi.n	800e642 <_vfiprintf_r+0x202>
 800e636:	89ab      	ldrh	r3, [r5, #12]
 800e638:	059a      	lsls	r2, r3, #22
 800e63a:	d402      	bmi.n	800e642 <_vfiprintf_r+0x202>
 800e63c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e63e:	f7fe fb37 	bl	800ccb0 <__retarget_lock_release_recursive>
 800e642:	89ab      	ldrh	r3, [r5, #12]
 800e644:	065b      	lsls	r3, r3, #25
 800e646:	f53f af1d 	bmi.w	800e484 <_vfiprintf_r+0x44>
 800e64a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e64c:	e71c      	b.n	800e488 <_vfiprintf_r+0x48>
 800e64e:	ab03      	add	r3, sp, #12
 800e650:	9300      	str	r3, [sp, #0]
 800e652:	462a      	mov	r2, r5
 800e654:	4b05      	ldr	r3, [pc, #20]	; (800e66c <_vfiprintf_r+0x22c>)
 800e656:	a904      	add	r1, sp, #16
 800e658:	4630      	mov	r0, r6
 800e65a:	f7fd ff51 	bl	800c500 <_printf_i>
 800e65e:	e7e4      	b.n	800e62a <_vfiprintf_r+0x1ea>
 800e660:	08012dfc 	.word	0x08012dfc
 800e664:	08012e06 	.word	0x08012e06
 800e668:	0800bfb9 	.word	0x0800bfb9
 800e66c:	0800e41b 	.word	0x0800e41b
 800e670:	08012e02 	.word	0x08012e02

0800e674 <__sflush_r>:
 800e674:	898a      	ldrh	r2, [r1, #12]
 800e676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e67a:	4605      	mov	r5, r0
 800e67c:	0710      	lsls	r0, r2, #28
 800e67e:	460c      	mov	r4, r1
 800e680:	d458      	bmi.n	800e734 <__sflush_r+0xc0>
 800e682:	684b      	ldr	r3, [r1, #4]
 800e684:	2b00      	cmp	r3, #0
 800e686:	dc05      	bgt.n	800e694 <__sflush_r+0x20>
 800e688:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	dc02      	bgt.n	800e694 <__sflush_r+0x20>
 800e68e:	2000      	movs	r0, #0
 800e690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e694:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e696:	2e00      	cmp	r6, #0
 800e698:	d0f9      	beq.n	800e68e <__sflush_r+0x1a>
 800e69a:	2300      	movs	r3, #0
 800e69c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e6a0:	682f      	ldr	r7, [r5, #0]
 800e6a2:	6a21      	ldr	r1, [r4, #32]
 800e6a4:	602b      	str	r3, [r5, #0]
 800e6a6:	d032      	beq.n	800e70e <__sflush_r+0x9a>
 800e6a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e6aa:	89a3      	ldrh	r3, [r4, #12]
 800e6ac:	075a      	lsls	r2, r3, #29
 800e6ae:	d505      	bpl.n	800e6bc <__sflush_r+0x48>
 800e6b0:	6863      	ldr	r3, [r4, #4]
 800e6b2:	1ac0      	subs	r0, r0, r3
 800e6b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6b6:	b10b      	cbz	r3, 800e6bc <__sflush_r+0x48>
 800e6b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e6ba:	1ac0      	subs	r0, r0, r3
 800e6bc:	2300      	movs	r3, #0
 800e6be:	4602      	mov	r2, r0
 800e6c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e6c2:	6a21      	ldr	r1, [r4, #32]
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	47b0      	blx	r6
 800e6c8:	1c43      	adds	r3, r0, #1
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	d106      	bne.n	800e6dc <__sflush_r+0x68>
 800e6ce:	6829      	ldr	r1, [r5, #0]
 800e6d0:	291d      	cmp	r1, #29
 800e6d2:	d82b      	bhi.n	800e72c <__sflush_r+0xb8>
 800e6d4:	4a29      	ldr	r2, [pc, #164]	; (800e77c <__sflush_r+0x108>)
 800e6d6:	410a      	asrs	r2, r1
 800e6d8:	07d6      	lsls	r6, r2, #31
 800e6da:	d427      	bmi.n	800e72c <__sflush_r+0xb8>
 800e6dc:	2200      	movs	r2, #0
 800e6de:	6062      	str	r2, [r4, #4]
 800e6e0:	04d9      	lsls	r1, r3, #19
 800e6e2:	6922      	ldr	r2, [r4, #16]
 800e6e4:	6022      	str	r2, [r4, #0]
 800e6e6:	d504      	bpl.n	800e6f2 <__sflush_r+0x7e>
 800e6e8:	1c42      	adds	r2, r0, #1
 800e6ea:	d101      	bne.n	800e6f0 <__sflush_r+0x7c>
 800e6ec:	682b      	ldr	r3, [r5, #0]
 800e6ee:	b903      	cbnz	r3, 800e6f2 <__sflush_r+0x7e>
 800e6f0:	6560      	str	r0, [r4, #84]	; 0x54
 800e6f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e6f4:	602f      	str	r7, [r5, #0]
 800e6f6:	2900      	cmp	r1, #0
 800e6f8:	d0c9      	beq.n	800e68e <__sflush_r+0x1a>
 800e6fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6fe:	4299      	cmp	r1, r3
 800e700:	d002      	beq.n	800e708 <__sflush_r+0x94>
 800e702:	4628      	mov	r0, r5
 800e704:	f7ff f952 	bl	800d9ac <_free_r>
 800e708:	2000      	movs	r0, #0
 800e70a:	6360      	str	r0, [r4, #52]	; 0x34
 800e70c:	e7c0      	b.n	800e690 <__sflush_r+0x1c>
 800e70e:	2301      	movs	r3, #1
 800e710:	4628      	mov	r0, r5
 800e712:	47b0      	blx	r6
 800e714:	1c41      	adds	r1, r0, #1
 800e716:	d1c8      	bne.n	800e6aa <__sflush_r+0x36>
 800e718:	682b      	ldr	r3, [r5, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d0c5      	beq.n	800e6aa <__sflush_r+0x36>
 800e71e:	2b1d      	cmp	r3, #29
 800e720:	d001      	beq.n	800e726 <__sflush_r+0xb2>
 800e722:	2b16      	cmp	r3, #22
 800e724:	d101      	bne.n	800e72a <__sflush_r+0xb6>
 800e726:	602f      	str	r7, [r5, #0]
 800e728:	e7b1      	b.n	800e68e <__sflush_r+0x1a>
 800e72a:	89a3      	ldrh	r3, [r4, #12]
 800e72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e730:	81a3      	strh	r3, [r4, #12]
 800e732:	e7ad      	b.n	800e690 <__sflush_r+0x1c>
 800e734:	690f      	ldr	r7, [r1, #16]
 800e736:	2f00      	cmp	r7, #0
 800e738:	d0a9      	beq.n	800e68e <__sflush_r+0x1a>
 800e73a:	0793      	lsls	r3, r2, #30
 800e73c:	680e      	ldr	r6, [r1, #0]
 800e73e:	bf08      	it	eq
 800e740:	694b      	ldreq	r3, [r1, #20]
 800e742:	600f      	str	r7, [r1, #0]
 800e744:	bf18      	it	ne
 800e746:	2300      	movne	r3, #0
 800e748:	eba6 0807 	sub.w	r8, r6, r7
 800e74c:	608b      	str	r3, [r1, #8]
 800e74e:	f1b8 0f00 	cmp.w	r8, #0
 800e752:	dd9c      	ble.n	800e68e <__sflush_r+0x1a>
 800e754:	6a21      	ldr	r1, [r4, #32]
 800e756:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e758:	4643      	mov	r3, r8
 800e75a:	463a      	mov	r2, r7
 800e75c:	4628      	mov	r0, r5
 800e75e:	47b0      	blx	r6
 800e760:	2800      	cmp	r0, #0
 800e762:	dc06      	bgt.n	800e772 <__sflush_r+0xfe>
 800e764:	89a3      	ldrh	r3, [r4, #12]
 800e766:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e76a:	81a3      	strh	r3, [r4, #12]
 800e76c:	f04f 30ff 	mov.w	r0, #4294967295
 800e770:	e78e      	b.n	800e690 <__sflush_r+0x1c>
 800e772:	4407      	add	r7, r0
 800e774:	eba8 0800 	sub.w	r8, r8, r0
 800e778:	e7e9      	b.n	800e74e <__sflush_r+0xda>
 800e77a:	bf00      	nop
 800e77c:	dfbffffe 	.word	0xdfbffffe

0800e780 <_fflush_r>:
 800e780:	b538      	push	{r3, r4, r5, lr}
 800e782:	690b      	ldr	r3, [r1, #16]
 800e784:	4605      	mov	r5, r0
 800e786:	460c      	mov	r4, r1
 800e788:	b913      	cbnz	r3, 800e790 <_fflush_r+0x10>
 800e78a:	2500      	movs	r5, #0
 800e78c:	4628      	mov	r0, r5
 800e78e:	bd38      	pop	{r3, r4, r5, pc}
 800e790:	b118      	cbz	r0, 800e79a <_fflush_r+0x1a>
 800e792:	6a03      	ldr	r3, [r0, #32]
 800e794:	b90b      	cbnz	r3, 800e79a <_fflush_r+0x1a>
 800e796:	f7fe f861 	bl	800c85c <__sinit>
 800e79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d0f3      	beq.n	800e78a <_fflush_r+0xa>
 800e7a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e7a4:	07d0      	lsls	r0, r2, #31
 800e7a6:	d404      	bmi.n	800e7b2 <_fflush_r+0x32>
 800e7a8:	0599      	lsls	r1, r3, #22
 800e7aa:	d402      	bmi.n	800e7b2 <_fflush_r+0x32>
 800e7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7ae:	f7fe fa7e 	bl	800ccae <__retarget_lock_acquire_recursive>
 800e7b2:	4628      	mov	r0, r5
 800e7b4:	4621      	mov	r1, r4
 800e7b6:	f7ff ff5d 	bl	800e674 <__sflush_r>
 800e7ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7bc:	07da      	lsls	r2, r3, #31
 800e7be:	4605      	mov	r5, r0
 800e7c0:	d4e4      	bmi.n	800e78c <_fflush_r+0xc>
 800e7c2:	89a3      	ldrh	r3, [r4, #12]
 800e7c4:	059b      	lsls	r3, r3, #22
 800e7c6:	d4e1      	bmi.n	800e78c <_fflush_r+0xc>
 800e7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7ca:	f7fe fa71 	bl	800ccb0 <__retarget_lock_release_recursive>
 800e7ce:	e7dd      	b.n	800e78c <_fflush_r+0xc>

0800e7d0 <__swhatbuf_r>:
 800e7d0:	b570      	push	{r4, r5, r6, lr}
 800e7d2:	460c      	mov	r4, r1
 800e7d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d8:	2900      	cmp	r1, #0
 800e7da:	b096      	sub	sp, #88	; 0x58
 800e7dc:	4615      	mov	r5, r2
 800e7de:	461e      	mov	r6, r3
 800e7e0:	da0d      	bge.n	800e7fe <__swhatbuf_r+0x2e>
 800e7e2:	89a3      	ldrh	r3, [r4, #12]
 800e7e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e7e8:	f04f 0100 	mov.w	r1, #0
 800e7ec:	bf0c      	ite	eq
 800e7ee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e7f2:	2340      	movne	r3, #64	; 0x40
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	6031      	str	r1, [r6, #0]
 800e7f8:	602b      	str	r3, [r5, #0]
 800e7fa:	b016      	add	sp, #88	; 0x58
 800e7fc:	bd70      	pop	{r4, r5, r6, pc}
 800e7fe:	466a      	mov	r2, sp
 800e800:	f000 f862 	bl	800e8c8 <_fstat_r>
 800e804:	2800      	cmp	r0, #0
 800e806:	dbec      	blt.n	800e7e2 <__swhatbuf_r+0x12>
 800e808:	9901      	ldr	r1, [sp, #4]
 800e80a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e80e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e812:	4259      	negs	r1, r3
 800e814:	4159      	adcs	r1, r3
 800e816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e81a:	e7eb      	b.n	800e7f4 <__swhatbuf_r+0x24>

0800e81c <__smakebuf_r>:
 800e81c:	898b      	ldrh	r3, [r1, #12]
 800e81e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e820:	079d      	lsls	r5, r3, #30
 800e822:	4606      	mov	r6, r0
 800e824:	460c      	mov	r4, r1
 800e826:	d507      	bpl.n	800e838 <__smakebuf_r+0x1c>
 800e828:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e82c:	6023      	str	r3, [r4, #0]
 800e82e:	6123      	str	r3, [r4, #16]
 800e830:	2301      	movs	r3, #1
 800e832:	6163      	str	r3, [r4, #20]
 800e834:	b002      	add	sp, #8
 800e836:	bd70      	pop	{r4, r5, r6, pc}
 800e838:	ab01      	add	r3, sp, #4
 800e83a:	466a      	mov	r2, sp
 800e83c:	f7ff ffc8 	bl	800e7d0 <__swhatbuf_r>
 800e840:	9900      	ldr	r1, [sp, #0]
 800e842:	4605      	mov	r5, r0
 800e844:	4630      	mov	r0, r6
 800e846:	f7fd fa8b 	bl	800bd60 <_malloc_r>
 800e84a:	b948      	cbnz	r0, 800e860 <__smakebuf_r+0x44>
 800e84c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e850:	059a      	lsls	r2, r3, #22
 800e852:	d4ef      	bmi.n	800e834 <__smakebuf_r+0x18>
 800e854:	f023 0303 	bic.w	r3, r3, #3
 800e858:	f043 0302 	orr.w	r3, r3, #2
 800e85c:	81a3      	strh	r3, [r4, #12]
 800e85e:	e7e3      	b.n	800e828 <__smakebuf_r+0xc>
 800e860:	89a3      	ldrh	r3, [r4, #12]
 800e862:	6020      	str	r0, [r4, #0]
 800e864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e868:	81a3      	strh	r3, [r4, #12]
 800e86a:	9b00      	ldr	r3, [sp, #0]
 800e86c:	6163      	str	r3, [r4, #20]
 800e86e:	9b01      	ldr	r3, [sp, #4]
 800e870:	6120      	str	r0, [r4, #16]
 800e872:	b15b      	cbz	r3, 800e88c <__smakebuf_r+0x70>
 800e874:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e878:	4630      	mov	r0, r6
 800e87a:	f000 f837 	bl	800e8ec <_isatty_r>
 800e87e:	b128      	cbz	r0, 800e88c <__smakebuf_r+0x70>
 800e880:	89a3      	ldrh	r3, [r4, #12]
 800e882:	f023 0303 	bic.w	r3, r3, #3
 800e886:	f043 0301 	orr.w	r3, r3, #1
 800e88a:	81a3      	strh	r3, [r4, #12]
 800e88c:	89a3      	ldrh	r3, [r4, #12]
 800e88e:	431d      	orrs	r5, r3
 800e890:	81a5      	strh	r5, [r4, #12]
 800e892:	e7cf      	b.n	800e834 <__smakebuf_r+0x18>

0800e894 <memmove>:
 800e894:	4288      	cmp	r0, r1
 800e896:	b510      	push	{r4, lr}
 800e898:	eb01 0402 	add.w	r4, r1, r2
 800e89c:	d902      	bls.n	800e8a4 <memmove+0x10>
 800e89e:	4284      	cmp	r4, r0
 800e8a0:	4623      	mov	r3, r4
 800e8a2:	d807      	bhi.n	800e8b4 <memmove+0x20>
 800e8a4:	1e43      	subs	r3, r0, #1
 800e8a6:	42a1      	cmp	r1, r4
 800e8a8:	d008      	beq.n	800e8bc <memmove+0x28>
 800e8aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e8ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e8b2:	e7f8      	b.n	800e8a6 <memmove+0x12>
 800e8b4:	4402      	add	r2, r0
 800e8b6:	4601      	mov	r1, r0
 800e8b8:	428a      	cmp	r2, r1
 800e8ba:	d100      	bne.n	800e8be <memmove+0x2a>
 800e8bc:	bd10      	pop	{r4, pc}
 800e8be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e8c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e8c6:	e7f7      	b.n	800e8b8 <memmove+0x24>

0800e8c8 <_fstat_r>:
 800e8c8:	b538      	push	{r3, r4, r5, lr}
 800e8ca:	4d07      	ldr	r5, [pc, #28]	; (800e8e8 <_fstat_r+0x20>)
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	4604      	mov	r4, r0
 800e8d0:	4608      	mov	r0, r1
 800e8d2:	4611      	mov	r1, r2
 800e8d4:	602b      	str	r3, [r5, #0]
 800e8d6:	f7f4 ff04 	bl	80036e2 <_fstat>
 800e8da:	1c43      	adds	r3, r0, #1
 800e8dc:	d102      	bne.n	800e8e4 <_fstat_r+0x1c>
 800e8de:	682b      	ldr	r3, [r5, #0]
 800e8e0:	b103      	cbz	r3, 800e8e4 <_fstat_r+0x1c>
 800e8e2:	6023      	str	r3, [r4, #0]
 800e8e4:	bd38      	pop	{r3, r4, r5, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20000b94 	.word	0x20000b94

0800e8ec <_isatty_r>:
 800e8ec:	b538      	push	{r3, r4, r5, lr}
 800e8ee:	4d06      	ldr	r5, [pc, #24]	; (800e908 <_isatty_r+0x1c>)
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	4604      	mov	r4, r0
 800e8f4:	4608      	mov	r0, r1
 800e8f6:	602b      	str	r3, [r5, #0]
 800e8f8:	f7f4 ff03 	bl	8003702 <_isatty>
 800e8fc:	1c43      	adds	r3, r0, #1
 800e8fe:	d102      	bne.n	800e906 <_isatty_r+0x1a>
 800e900:	682b      	ldr	r3, [r5, #0]
 800e902:	b103      	cbz	r3, 800e906 <_isatty_r+0x1a>
 800e904:	6023      	str	r3, [r4, #0]
 800e906:	bd38      	pop	{r3, r4, r5, pc}
 800e908:	20000b94 	.word	0x20000b94

0800e90c <memcpy>:
 800e90c:	440a      	add	r2, r1
 800e90e:	4291      	cmp	r1, r2
 800e910:	f100 33ff 	add.w	r3, r0, #4294967295
 800e914:	d100      	bne.n	800e918 <memcpy+0xc>
 800e916:	4770      	bx	lr
 800e918:	b510      	push	{r4, lr}
 800e91a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e91e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e922:	4291      	cmp	r1, r2
 800e924:	d1f9      	bne.n	800e91a <memcpy+0xe>
 800e926:	bd10      	pop	{r4, pc}

0800e928 <__assert_func>:
 800e928:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e92a:	4614      	mov	r4, r2
 800e92c:	461a      	mov	r2, r3
 800e92e:	4b09      	ldr	r3, [pc, #36]	; (800e954 <__assert_func+0x2c>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	4605      	mov	r5, r0
 800e934:	68d8      	ldr	r0, [r3, #12]
 800e936:	b14c      	cbz	r4, 800e94c <__assert_func+0x24>
 800e938:	4b07      	ldr	r3, [pc, #28]	; (800e958 <__assert_func+0x30>)
 800e93a:	9100      	str	r1, [sp, #0]
 800e93c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e940:	4906      	ldr	r1, [pc, #24]	; (800e95c <__assert_func+0x34>)
 800e942:	462b      	mov	r3, r5
 800e944:	f000 f872 	bl	800ea2c <fiprintf>
 800e948:	f000 f882 	bl	800ea50 <abort>
 800e94c:	4b04      	ldr	r3, [pc, #16]	; (800e960 <__assert_func+0x38>)
 800e94e:	461c      	mov	r4, r3
 800e950:	e7f3      	b.n	800e93a <__assert_func+0x12>
 800e952:	bf00      	nop
 800e954:	200000d4 	.word	0x200000d4
 800e958:	08012e17 	.word	0x08012e17
 800e95c:	08012e24 	.word	0x08012e24
 800e960:	08012e52 	.word	0x08012e52

0800e964 <_calloc_r>:
 800e964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e966:	fba1 2402 	umull	r2, r4, r1, r2
 800e96a:	b94c      	cbnz	r4, 800e980 <_calloc_r+0x1c>
 800e96c:	4611      	mov	r1, r2
 800e96e:	9201      	str	r2, [sp, #4]
 800e970:	f7fd f9f6 	bl	800bd60 <_malloc_r>
 800e974:	9a01      	ldr	r2, [sp, #4]
 800e976:	4605      	mov	r5, r0
 800e978:	b930      	cbnz	r0, 800e988 <_calloc_r+0x24>
 800e97a:	4628      	mov	r0, r5
 800e97c:	b003      	add	sp, #12
 800e97e:	bd30      	pop	{r4, r5, pc}
 800e980:	220c      	movs	r2, #12
 800e982:	6002      	str	r2, [r0, #0]
 800e984:	2500      	movs	r5, #0
 800e986:	e7f8      	b.n	800e97a <_calloc_r+0x16>
 800e988:	4621      	mov	r1, r4
 800e98a:	f7fe f903 	bl	800cb94 <memset>
 800e98e:	e7f4      	b.n	800e97a <_calloc_r+0x16>

0800e990 <__ascii_mbtowc>:
 800e990:	b082      	sub	sp, #8
 800e992:	b901      	cbnz	r1, 800e996 <__ascii_mbtowc+0x6>
 800e994:	a901      	add	r1, sp, #4
 800e996:	b142      	cbz	r2, 800e9aa <__ascii_mbtowc+0x1a>
 800e998:	b14b      	cbz	r3, 800e9ae <__ascii_mbtowc+0x1e>
 800e99a:	7813      	ldrb	r3, [r2, #0]
 800e99c:	600b      	str	r3, [r1, #0]
 800e99e:	7812      	ldrb	r2, [r2, #0]
 800e9a0:	1e10      	subs	r0, r2, #0
 800e9a2:	bf18      	it	ne
 800e9a4:	2001      	movne	r0, #1
 800e9a6:	b002      	add	sp, #8
 800e9a8:	4770      	bx	lr
 800e9aa:	4610      	mov	r0, r2
 800e9ac:	e7fb      	b.n	800e9a6 <__ascii_mbtowc+0x16>
 800e9ae:	f06f 0001 	mvn.w	r0, #1
 800e9b2:	e7f8      	b.n	800e9a6 <__ascii_mbtowc+0x16>

0800e9b4 <_realloc_r>:
 800e9b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9b8:	4680      	mov	r8, r0
 800e9ba:	4614      	mov	r4, r2
 800e9bc:	460e      	mov	r6, r1
 800e9be:	b921      	cbnz	r1, 800e9ca <_realloc_r+0x16>
 800e9c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9c4:	4611      	mov	r1, r2
 800e9c6:	f7fd b9cb 	b.w	800bd60 <_malloc_r>
 800e9ca:	b92a      	cbnz	r2, 800e9d8 <_realloc_r+0x24>
 800e9cc:	f7fe ffee 	bl	800d9ac <_free_r>
 800e9d0:	4625      	mov	r5, r4
 800e9d2:	4628      	mov	r0, r5
 800e9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9d8:	f000 f841 	bl	800ea5e <_malloc_usable_size_r>
 800e9dc:	4284      	cmp	r4, r0
 800e9de:	4607      	mov	r7, r0
 800e9e0:	d802      	bhi.n	800e9e8 <_realloc_r+0x34>
 800e9e2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e9e6:	d812      	bhi.n	800ea0e <_realloc_r+0x5a>
 800e9e8:	4621      	mov	r1, r4
 800e9ea:	4640      	mov	r0, r8
 800e9ec:	f7fd f9b8 	bl	800bd60 <_malloc_r>
 800e9f0:	4605      	mov	r5, r0
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	d0ed      	beq.n	800e9d2 <_realloc_r+0x1e>
 800e9f6:	42bc      	cmp	r4, r7
 800e9f8:	4622      	mov	r2, r4
 800e9fa:	4631      	mov	r1, r6
 800e9fc:	bf28      	it	cs
 800e9fe:	463a      	movcs	r2, r7
 800ea00:	f7ff ff84 	bl	800e90c <memcpy>
 800ea04:	4631      	mov	r1, r6
 800ea06:	4640      	mov	r0, r8
 800ea08:	f7fe ffd0 	bl	800d9ac <_free_r>
 800ea0c:	e7e1      	b.n	800e9d2 <_realloc_r+0x1e>
 800ea0e:	4635      	mov	r5, r6
 800ea10:	e7df      	b.n	800e9d2 <_realloc_r+0x1e>

0800ea12 <__ascii_wctomb>:
 800ea12:	b149      	cbz	r1, 800ea28 <__ascii_wctomb+0x16>
 800ea14:	2aff      	cmp	r2, #255	; 0xff
 800ea16:	bf85      	ittet	hi
 800ea18:	238a      	movhi	r3, #138	; 0x8a
 800ea1a:	6003      	strhi	r3, [r0, #0]
 800ea1c:	700a      	strbls	r2, [r1, #0]
 800ea1e:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea22:	bf98      	it	ls
 800ea24:	2001      	movls	r0, #1
 800ea26:	4770      	bx	lr
 800ea28:	4608      	mov	r0, r1
 800ea2a:	4770      	bx	lr

0800ea2c <fiprintf>:
 800ea2c:	b40e      	push	{r1, r2, r3}
 800ea2e:	b503      	push	{r0, r1, lr}
 800ea30:	4601      	mov	r1, r0
 800ea32:	ab03      	add	r3, sp, #12
 800ea34:	4805      	ldr	r0, [pc, #20]	; (800ea4c <fiprintf+0x20>)
 800ea36:	f853 2b04 	ldr.w	r2, [r3], #4
 800ea3a:	6800      	ldr	r0, [r0, #0]
 800ea3c:	9301      	str	r3, [sp, #4]
 800ea3e:	f7ff fcff 	bl	800e440 <_vfiprintf_r>
 800ea42:	b002      	add	sp, #8
 800ea44:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea48:	b003      	add	sp, #12
 800ea4a:	4770      	bx	lr
 800ea4c:	200000d4 	.word	0x200000d4

0800ea50 <abort>:
 800ea50:	b508      	push	{r3, lr}
 800ea52:	2006      	movs	r0, #6
 800ea54:	f000 f834 	bl	800eac0 <raise>
 800ea58:	2001      	movs	r0, #1
 800ea5a:	f7f4 fdf3 	bl	8003644 <_exit>

0800ea5e <_malloc_usable_size_r>:
 800ea5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea62:	1f18      	subs	r0, r3, #4
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	bfbc      	itt	lt
 800ea68:	580b      	ldrlt	r3, [r1, r0]
 800ea6a:	18c0      	addlt	r0, r0, r3
 800ea6c:	4770      	bx	lr

0800ea6e <_raise_r>:
 800ea6e:	291f      	cmp	r1, #31
 800ea70:	b538      	push	{r3, r4, r5, lr}
 800ea72:	4604      	mov	r4, r0
 800ea74:	460d      	mov	r5, r1
 800ea76:	d904      	bls.n	800ea82 <_raise_r+0x14>
 800ea78:	2316      	movs	r3, #22
 800ea7a:	6003      	str	r3, [r0, #0]
 800ea7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea80:	bd38      	pop	{r3, r4, r5, pc}
 800ea82:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ea84:	b112      	cbz	r2, 800ea8c <_raise_r+0x1e>
 800ea86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea8a:	b94b      	cbnz	r3, 800eaa0 <_raise_r+0x32>
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	f000 f831 	bl	800eaf4 <_getpid_r>
 800ea92:	462a      	mov	r2, r5
 800ea94:	4601      	mov	r1, r0
 800ea96:	4620      	mov	r0, r4
 800ea98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea9c:	f000 b818 	b.w	800ead0 <_kill_r>
 800eaa0:	2b01      	cmp	r3, #1
 800eaa2:	d00a      	beq.n	800eaba <_raise_r+0x4c>
 800eaa4:	1c59      	adds	r1, r3, #1
 800eaa6:	d103      	bne.n	800eab0 <_raise_r+0x42>
 800eaa8:	2316      	movs	r3, #22
 800eaaa:	6003      	str	r3, [r0, #0]
 800eaac:	2001      	movs	r0, #1
 800eaae:	e7e7      	b.n	800ea80 <_raise_r+0x12>
 800eab0:	2400      	movs	r4, #0
 800eab2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800eab6:	4628      	mov	r0, r5
 800eab8:	4798      	blx	r3
 800eaba:	2000      	movs	r0, #0
 800eabc:	e7e0      	b.n	800ea80 <_raise_r+0x12>
	...

0800eac0 <raise>:
 800eac0:	4b02      	ldr	r3, [pc, #8]	; (800eacc <raise+0xc>)
 800eac2:	4601      	mov	r1, r0
 800eac4:	6818      	ldr	r0, [r3, #0]
 800eac6:	f7ff bfd2 	b.w	800ea6e <_raise_r>
 800eaca:	bf00      	nop
 800eacc:	200000d4 	.word	0x200000d4

0800ead0 <_kill_r>:
 800ead0:	b538      	push	{r3, r4, r5, lr}
 800ead2:	4d07      	ldr	r5, [pc, #28]	; (800eaf0 <_kill_r+0x20>)
 800ead4:	2300      	movs	r3, #0
 800ead6:	4604      	mov	r4, r0
 800ead8:	4608      	mov	r0, r1
 800eada:	4611      	mov	r1, r2
 800eadc:	602b      	str	r3, [r5, #0]
 800eade:	f7f4 fda1 	bl	8003624 <_kill>
 800eae2:	1c43      	adds	r3, r0, #1
 800eae4:	d102      	bne.n	800eaec <_kill_r+0x1c>
 800eae6:	682b      	ldr	r3, [r5, #0]
 800eae8:	b103      	cbz	r3, 800eaec <_kill_r+0x1c>
 800eaea:	6023      	str	r3, [r4, #0]
 800eaec:	bd38      	pop	{r3, r4, r5, pc}
 800eaee:	bf00      	nop
 800eaf0:	20000b94 	.word	0x20000b94

0800eaf4 <_getpid_r>:
 800eaf4:	f7f4 bd8e 	b.w	8003614 <_getpid>

0800eaf8 <pow>:
 800eaf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eafa:	ed2d 8b02 	vpush	{d8}
 800eafe:	eeb0 8a40 	vmov.f32	s16, s0
 800eb02:	eef0 8a60 	vmov.f32	s17, s1
 800eb06:	ec55 4b11 	vmov	r4, r5, d1
 800eb0a:	f000 f871 	bl	800ebf0 <__ieee754_pow>
 800eb0e:	4622      	mov	r2, r4
 800eb10:	462b      	mov	r3, r5
 800eb12:	4620      	mov	r0, r4
 800eb14:	4629      	mov	r1, r5
 800eb16:	ec57 6b10 	vmov	r6, r7, d0
 800eb1a:	f7f2 f82f 	bl	8000b7c <__aeabi_dcmpun>
 800eb1e:	2800      	cmp	r0, #0
 800eb20:	d13b      	bne.n	800eb9a <pow+0xa2>
 800eb22:	ec51 0b18 	vmov	r0, r1, d8
 800eb26:	2200      	movs	r2, #0
 800eb28:	2300      	movs	r3, #0
 800eb2a:	f7f1 fff5 	bl	8000b18 <__aeabi_dcmpeq>
 800eb2e:	b1b8      	cbz	r0, 800eb60 <pow+0x68>
 800eb30:	2200      	movs	r2, #0
 800eb32:	2300      	movs	r3, #0
 800eb34:	4620      	mov	r0, r4
 800eb36:	4629      	mov	r1, r5
 800eb38:	f7f1 ffee 	bl	8000b18 <__aeabi_dcmpeq>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	d146      	bne.n	800ebce <pow+0xd6>
 800eb40:	ec45 4b10 	vmov	d0, r4, r5
 800eb44:	f000 f848 	bl	800ebd8 <finite>
 800eb48:	b338      	cbz	r0, 800eb9a <pow+0xa2>
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	4620      	mov	r0, r4
 800eb50:	4629      	mov	r1, r5
 800eb52:	f7f1 ffeb 	bl	8000b2c <__aeabi_dcmplt>
 800eb56:	b300      	cbz	r0, 800eb9a <pow+0xa2>
 800eb58:	f7fe f87e 	bl	800cc58 <__errno>
 800eb5c:	2322      	movs	r3, #34	; 0x22
 800eb5e:	e01b      	b.n	800eb98 <pow+0xa0>
 800eb60:	ec47 6b10 	vmov	d0, r6, r7
 800eb64:	f000 f838 	bl	800ebd8 <finite>
 800eb68:	b9e0      	cbnz	r0, 800eba4 <pow+0xac>
 800eb6a:	eeb0 0a48 	vmov.f32	s0, s16
 800eb6e:	eef0 0a68 	vmov.f32	s1, s17
 800eb72:	f000 f831 	bl	800ebd8 <finite>
 800eb76:	b1a8      	cbz	r0, 800eba4 <pow+0xac>
 800eb78:	ec45 4b10 	vmov	d0, r4, r5
 800eb7c:	f000 f82c 	bl	800ebd8 <finite>
 800eb80:	b180      	cbz	r0, 800eba4 <pow+0xac>
 800eb82:	4632      	mov	r2, r6
 800eb84:	463b      	mov	r3, r7
 800eb86:	4630      	mov	r0, r6
 800eb88:	4639      	mov	r1, r7
 800eb8a:	f7f1 fff7 	bl	8000b7c <__aeabi_dcmpun>
 800eb8e:	2800      	cmp	r0, #0
 800eb90:	d0e2      	beq.n	800eb58 <pow+0x60>
 800eb92:	f7fe f861 	bl	800cc58 <__errno>
 800eb96:	2321      	movs	r3, #33	; 0x21
 800eb98:	6003      	str	r3, [r0, #0]
 800eb9a:	ecbd 8b02 	vpop	{d8}
 800eb9e:	ec47 6b10 	vmov	d0, r6, r7
 800eba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eba4:	2200      	movs	r2, #0
 800eba6:	2300      	movs	r3, #0
 800eba8:	4630      	mov	r0, r6
 800ebaa:	4639      	mov	r1, r7
 800ebac:	f7f1 ffb4 	bl	8000b18 <__aeabi_dcmpeq>
 800ebb0:	2800      	cmp	r0, #0
 800ebb2:	d0f2      	beq.n	800eb9a <pow+0xa2>
 800ebb4:	eeb0 0a48 	vmov.f32	s0, s16
 800ebb8:	eef0 0a68 	vmov.f32	s1, s17
 800ebbc:	f000 f80c 	bl	800ebd8 <finite>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d0ea      	beq.n	800eb9a <pow+0xa2>
 800ebc4:	ec45 4b10 	vmov	d0, r4, r5
 800ebc8:	f000 f806 	bl	800ebd8 <finite>
 800ebcc:	e7c3      	b.n	800eb56 <pow+0x5e>
 800ebce:	4f01      	ldr	r7, [pc, #4]	; (800ebd4 <pow+0xdc>)
 800ebd0:	2600      	movs	r6, #0
 800ebd2:	e7e2      	b.n	800eb9a <pow+0xa2>
 800ebd4:	3ff00000 	.word	0x3ff00000

0800ebd8 <finite>:
 800ebd8:	b082      	sub	sp, #8
 800ebda:	ed8d 0b00 	vstr	d0, [sp]
 800ebde:	9801      	ldr	r0, [sp, #4]
 800ebe0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800ebe4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800ebe8:	0fc0      	lsrs	r0, r0, #31
 800ebea:	b002      	add	sp, #8
 800ebec:	4770      	bx	lr
	...

0800ebf0 <__ieee754_pow>:
 800ebf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf4:	ed2d 8b06 	vpush	{d8-d10}
 800ebf8:	b089      	sub	sp, #36	; 0x24
 800ebfa:	ed8d 1b00 	vstr	d1, [sp]
 800ebfe:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ec02:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ec06:	ea58 0102 	orrs.w	r1, r8, r2
 800ec0a:	ec57 6b10 	vmov	r6, r7, d0
 800ec0e:	d115      	bne.n	800ec3c <__ieee754_pow+0x4c>
 800ec10:	19b3      	adds	r3, r6, r6
 800ec12:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ec16:	4152      	adcs	r2, r2
 800ec18:	4299      	cmp	r1, r3
 800ec1a:	4b89      	ldr	r3, [pc, #548]	; (800ee40 <__ieee754_pow+0x250>)
 800ec1c:	4193      	sbcs	r3, r2
 800ec1e:	f080 84d1 	bcs.w	800f5c4 <__ieee754_pow+0x9d4>
 800ec22:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec26:	4630      	mov	r0, r6
 800ec28:	4639      	mov	r1, r7
 800ec2a:	f7f1 fb57 	bl	80002dc <__adddf3>
 800ec2e:	ec41 0b10 	vmov	d0, r0, r1
 800ec32:	b009      	add	sp, #36	; 0x24
 800ec34:	ecbd 8b06 	vpop	{d8-d10}
 800ec38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec3c:	4b81      	ldr	r3, [pc, #516]	; (800ee44 <__ieee754_pow+0x254>)
 800ec3e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ec42:	429c      	cmp	r4, r3
 800ec44:	ee10 aa10 	vmov	sl, s0
 800ec48:	463d      	mov	r5, r7
 800ec4a:	dc06      	bgt.n	800ec5a <__ieee754_pow+0x6a>
 800ec4c:	d101      	bne.n	800ec52 <__ieee754_pow+0x62>
 800ec4e:	2e00      	cmp	r6, #0
 800ec50:	d1e7      	bne.n	800ec22 <__ieee754_pow+0x32>
 800ec52:	4598      	cmp	r8, r3
 800ec54:	dc01      	bgt.n	800ec5a <__ieee754_pow+0x6a>
 800ec56:	d10f      	bne.n	800ec78 <__ieee754_pow+0x88>
 800ec58:	b172      	cbz	r2, 800ec78 <__ieee754_pow+0x88>
 800ec5a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ec5e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ec62:	ea55 050a 	orrs.w	r5, r5, sl
 800ec66:	d1dc      	bne.n	800ec22 <__ieee754_pow+0x32>
 800ec68:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ec6c:	18db      	adds	r3, r3, r3
 800ec6e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ec72:	4152      	adcs	r2, r2
 800ec74:	429d      	cmp	r5, r3
 800ec76:	e7d0      	b.n	800ec1a <__ieee754_pow+0x2a>
 800ec78:	2d00      	cmp	r5, #0
 800ec7a:	da3b      	bge.n	800ecf4 <__ieee754_pow+0x104>
 800ec7c:	4b72      	ldr	r3, [pc, #456]	; (800ee48 <__ieee754_pow+0x258>)
 800ec7e:	4598      	cmp	r8, r3
 800ec80:	dc51      	bgt.n	800ed26 <__ieee754_pow+0x136>
 800ec82:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ec86:	4598      	cmp	r8, r3
 800ec88:	f340 84ab 	ble.w	800f5e2 <__ieee754_pow+0x9f2>
 800ec8c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ec90:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ec94:	2b14      	cmp	r3, #20
 800ec96:	dd0f      	ble.n	800ecb8 <__ieee754_pow+0xc8>
 800ec98:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ec9c:	fa22 f103 	lsr.w	r1, r2, r3
 800eca0:	fa01 f303 	lsl.w	r3, r1, r3
 800eca4:	4293      	cmp	r3, r2
 800eca6:	f040 849c 	bne.w	800f5e2 <__ieee754_pow+0x9f2>
 800ecaa:	f001 0101 	and.w	r1, r1, #1
 800ecae:	f1c1 0302 	rsb	r3, r1, #2
 800ecb2:	9304      	str	r3, [sp, #16]
 800ecb4:	b182      	cbz	r2, 800ecd8 <__ieee754_pow+0xe8>
 800ecb6:	e05f      	b.n	800ed78 <__ieee754_pow+0x188>
 800ecb8:	2a00      	cmp	r2, #0
 800ecba:	d15b      	bne.n	800ed74 <__ieee754_pow+0x184>
 800ecbc:	f1c3 0314 	rsb	r3, r3, #20
 800ecc0:	fa48 f103 	asr.w	r1, r8, r3
 800ecc4:	fa01 f303 	lsl.w	r3, r1, r3
 800ecc8:	4543      	cmp	r3, r8
 800ecca:	f040 8487 	bne.w	800f5dc <__ieee754_pow+0x9ec>
 800ecce:	f001 0101 	and.w	r1, r1, #1
 800ecd2:	f1c1 0302 	rsb	r3, r1, #2
 800ecd6:	9304      	str	r3, [sp, #16]
 800ecd8:	4b5c      	ldr	r3, [pc, #368]	; (800ee4c <__ieee754_pow+0x25c>)
 800ecda:	4598      	cmp	r8, r3
 800ecdc:	d132      	bne.n	800ed44 <__ieee754_pow+0x154>
 800ecde:	f1b9 0f00 	cmp.w	r9, #0
 800ece2:	f280 8477 	bge.w	800f5d4 <__ieee754_pow+0x9e4>
 800ece6:	4959      	ldr	r1, [pc, #356]	; (800ee4c <__ieee754_pow+0x25c>)
 800ece8:	4632      	mov	r2, r6
 800ecea:	463b      	mov	r3, r7
 800ecec:	2000      	movs	r0, #0
 800ecee:	f7f1 fdd5 	bl	800089c <__aeabi_ddiv>
 800ecf2:	e79c      	b.n	800ec2e <__ieee754_pow+0x3e>
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	9304      	str	r3, [sp, #16]
 800ecf8:	2a00      	cmp	r2, #0
 800ecfa:	d13d      	bne.n	800ed78 <__ieee754_pow+0x188>
 800ecfc:	4b51      	ldr	r3, [pc, #324]	; (800ee44 <__ieee754_pow+0x254>)
 800ecfe:	4598      	cmp	r8, r3
 800ed00:	d1ea      	bne.n	800ecd8 <__ieee754_pow+0xe8>
 800ed02:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ed06:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ed0a:	ea53 030a 	orrs.w	r3, r3, sl
 800ed0e:	f000 8459 	beq.w	800f5c4 <__ieee754_pow+0x9d4>
 800ed12:	4b4f      	ldr	r3, [pc, #316]	; (800ee50 <__ieee754_pow+0x260>)
 800ed14:	429c      	cmp	r4, r3
 800ed16:	dd08      	ble.n	800ed2a <__ieee754_pow+0x13a>
 800ed18:	f1b9 0f00 	cmp.w	r9, #0
 800ed1c:	f2c0 8456 	blt.w	800f5cc <__ieee754_pow+0x9dc>
 800ed20:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed24:	e783      	b.n	800ec2e <__ieee754_pow+0x3e>
 800ed26:	2302      	movs	r3, #2
 800ed28:	e7e5      	b.n	800ecf6 <__ieee754_pow+0x106>
 800ed2a:	f1b9 0f00 	cmp.w	r9, #0
 800ed2e:	f04f 0000 	mov.w	r0, #0
 800ed32:	f04f 0100 	mov.w	r1, #0
 800ed36:	f6bf af7a 	bge.w	800ec2e <__ieee754_pow+0x3e>
 800ed3a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ed3e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ed42:	e774      	b.n	800ec2e <__ieee754_pow+0x3e>
 800ed44:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ed48:	d106      	bne.n	800ed58 <__ieee754_pow+0x168>
 800ed4a:	4632      	mov	r2, r6
 800ed4c:	463b      	mov	r3, r7
 800ed4e:	4630      	mov	r0, r6
 800ed50:	4639      	mov	r1, r7
 800ed52:	f7f1 fc79 	bl	8000648 <__aeabi_dmul>
 800ed56:	e76a      	b.n	800ec2e <__ieee754_pow+0x3e>
 800ed58:	4b3e      	ldr	r3, [pc, #248]	; (800ee54 <__ieee754_pow+0x264>)
 800ed5a:	4599      	cmp	r9, r3
 800ed5c:	d10c      	bne.n	800ed78 <__ieee754_pow+0x188>
 800ed5e:	2d00      	cmp	r5, #0
 800ed60:	db0a      	blt.n	800ed78 <__ieee754_pow+0x188>
 800ed62:	ec47 6b10 	vmov	d0, r6, r7
 800ed66:	b009      	add	sp, #36	; 0x24
 800ed68:	ecbd 8b06 	vpop	{d8-d10}
 800ed6c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed70:	f000 bd20 	b.w	800f7b4 <__ieee754_sqrt>
 800ed74:	2300      	movs	r3, #0
 800ed76:	9304      	str	r3, [sp, #16]
 800ed78:	ec47 6b10 	vmov	d0, r6, r7
 800ed7c:	f000 fc62 	bl	800f644 <fabs>
 800ed80:	ec51 0b10 	vmov	r0, r1, d0
 800ed84:	f1ba 0f00 	cmp.w	sl, #0
 800ed88:	d129      	bne.n	800edde <__ieee754_pow+0x1ee>
 800ed8a:	b124      	cbz	r4, 800ed96 <__ieee754_pow+0x1a6>
 800ed8c:	4b2f      	ldr	r3, [pc, #188]	; (800ee4c <__ieee754_pow+0x25c>)
 800ed8e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ed92:	429a      	cmp	r2, r3
 800ed94:	d123      	bne.n	800edde <__ieee754_pow+0x1ee>
 800ed96:	f1b9 0f00 	cmp.w	r9, #0
 800ed9a:	da05      	bge.n	800eda8 <__ieee754_pow+0x1b8>
 800ed9c:	4602      	mov	r2, r0
 800ed9e:	460b      	mov	r3, r1
 800eda0:	2000      	movs	r0, #0
 800eda2:	492a      	ldr	r1, [pc, #168]	; (800ee4c <__ieee754_pow+0x25c>)
 800eda4:	f7f1 fd7a 	bl	800089c <__aeabi_ddiv>
 800eda8:	2d00      	cmp	r5, #0
 800edaa:	f6bf af40 	bge.w	800ec2e <__ieee754_pow+0x3e>
 800edae:	9b04      	ldr	r3, [sp, #16]
 800edb0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800edb4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800edb8:	431c      	orrs	r4, r3
 800edba:	d108      	bne.n	800edce <__ieee754_pow+0x1de>
 800edbc:	4602      	mov	r2, r0
 800edbe:	460b      	mov	r3, r1
 800edc0:	4610      	mov	r0, r2
 800edc2:	4619      	mov	r1, r3
 800edc4:	f7f1 fa88 	bl	80002d8 <__aeabi_dsub>
 800edc8:	4602      	mov	r2, r0
 800edca:	460b      	mov	r3, r1
 800edcc:	e78f      	b.n	800ecee <__ieee754_pow+0xfe>
 800edce:	9b04      	ldr	r3, [sp, #16]
 800edd0:	2b01      	cmp	r3, #1
 800edd2:	f47f af2c 	bne.w	800ec2e <__ieee754_pow+0x3e>
 800edd6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edda:	4619      	mov	r1, r3
 800eddc:	e727      	b.n	800ec2e <__ieee754_pow+0x3e>
 800edde:	0feb      	lsrs	r3, r5, #31
 800ede0:	3b01      	subs	r3, #1
 800ede2:	9306      	str	r3, [sp, #24]
 800ede4:	9a06      	ldr	r2, [sp, #24]
 800ede6:	9b04      	ldr	r3, [sp, #16]
 800ede8:	4313      	orrs	r3, r2
 800edea:	d102      	bne.n	800edf2 <__ieee754_pow+0x202>
 800edec:	4632      	mov	r2, r6
 800edee:	463b      	mov	r3, r7
 800edf0:	e7e6      	b.n	800edc0 <__ieee754_pow+0x1d0>
 800edf2:	4b19      	ldr	r3, [pc, #100]	; (800ee58 <__ieee754_pow+0x268>)
 800edf4:	4598      	cmp	r8, r3
 800edf6:	f340 80fb 	ble.w	800eff0 <__ieee754_pow+0x400>
 800edfa:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800edfe:	4598      	cmp	r8, r3
 800ee00:	4b13      	ldr	r3, [pc, #76]	; (800ee50 <__ieee754_pow+0x260>)
 800ee02:	dd0c      	ble.n	800ee1e <__ieee754_pow+0x22e>
 800ee04:	429c      	cmp	r4, r3
 800ee06:	dc0f      	bgt.n	800ee28 <__ieee754_pow+0x238>
 800ee08:	f1b9 0f00 	cmp.w	r9, #0
 800ee0c:	da0f      	bge.n	800ee2e <__ieee754_pow+0x23e>
 800ee0e:	2000      	movs	r0, #0
 800ee10:	b009      	add	sp, #36	; 0x24
 800ee12:	ecbd 8b06 	vpop	{d8-d10}
 800ee16:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1a:	f000 bcc2 	b.w	800f7a2 <__math_oflow>
 800ee1e:	429c      	cmp	r4, r3
 800ee20:	dbf2      	blt.n	800ee08 <__ieee754_pow+0x218>
 800ee22:	4b0a      	ldr	r3, [pc, #40]	; (800ee4c <__ieee754_pow+0x25c>)
 800ee24:	429c      	cmp	r4, r3
 800ee26:	dd19      	ble.n	800ee5c <__ieee754_pow+0x26c>
 800ee28:	f1b9 0f00 	cmp.w	r9, #0
 800ee2c:	dcef      	bgt.n	800ee0e <__ieee754_pow+0x21e>
 800ee2e:	2000      	movs	r0, #0
 800ee30:	b009      	add	sp, #36	; 0x24
 800ee32:	ecbd 8b06 	vpop	{d8-d10}
 800ee36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee3a:	f000 bca9 	b.w	800f790 <__math_uflow>
 800ee3e:	bf00      	nop
 800ee40:	fff00000 	.word	0xfff00000
 800ee44:	7ff00000 	.word	0x7ff00000
 800ee48:	433fffff 	.word	0x433fffff
 800ee4c:	3ff00000 	.word	0x3ff00000
 800ee50:	3fefffff 	.word	0x3fefffff
 800ee54:	3fe00000 	.word	0x3fe00000
 800ee58:	41e00000 	.word	0x41e00000
 800ee5c:	4b60      	ldr	r3, [pc, #384]	; (800efe0 <__ieee754_pow+0x3f0>)
 800ee5e:	2200      	movs	r2, #0
 800ee60:	f7f1 fa3a 	bl	80002d8 <__aeabi_dsub>
 800ee64:	a354      	add	r3, pc, #336	; (adr r3, 800efb8 <__ieee754_pow+0x3c8>)
 800ee66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee6a:	4604      	mov	r4, r0
 800ee6c:	460d      	mov	r5, r1
 800ee6e:	f7f1 fbeb 	bl	8000648 <__aeabi_dmul>
 800ee72:	a353      	add	r3, pc, #332	; (adr r3, 800efc0 <__ieee754_pow+0x3d0>)
 800ee74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee78:	4606      	mov	r6, r0
 800ee7a:	460f      	mov	r7, r1
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	4629      	mov	r1, r5
 800ee80:	f7f1 fbe2 	bl	8000648 <__aeabi_dmul>
 800ee84:	4b57      	ldr	r3, [pc, #348]	; (800efe4 <__ieee754_pow+0x3f4>)
 800ee86:	4682      	mov	sl, r0
 800ee88:	468b      	mov	fp, r1
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	4629      	mov	r1, r5
 800ee90:	f7f1 fbda 	bl	8000648 <__aeabi_dmul>
 800ee94:	4602      	mov	r2, r0
 800ee96:	460b      	mov	r3, r1
 800ee98:	a14b      	add	r1, pc, #300	; (adr r1, 800efc8 <__ieee754_pow+0x3d8>)
 800ee9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee9e:	f7f1 fa1b 	bl	80002d8 <__aeabi_dsub>
 800eea2:	4622      	mov	r2, r4
 800eea4:	462b      	mov	r3, r5
 800eea6:	f7f1 fbcf 	bl	8000648 <__aeabi_dmul>
 800eeaa:	4602      	mov	r2, r0
 800eeac:	460b      	mov	r3, r1
 800eeae:	2000      	movs	r0, #0
 800eeb0:	494d      	ldr	r1, [pc, #308]	; (800efe8 <__ieee754_pow+0x3f8>)
 800eeb2:	f7f1 fa11 	bl	80002d8 <__aeabi_dsub>
 800eeb6:	4622      	mov	r2, r4
 800eeb8:	4680      	mov	r8, r0
 800eeba:	4689      	mov	r9, r1
 800eebc:	462b      	mov	r3, r5
 800eebe:	4620      	mov	r0, r4
 800eec0:	4629      	mov	r1, r5
 800eec2:	f7f1 fbc1 	bl	8000648 <__aeabi_dmul>
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	4640      	mov	r0, r8
 800eecc:	4649      	mov	r1, r9
 800eece:	f7f1 fbbb 	bl	8000648 <__aeabi_dmul>
 800eed2:	a33f      	add	r3, pc, #252	; (adr r3, 800efd0 <__ieee754_pow+0x3e0>)
 800eed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed8:	f7f1 fbb6 	bl	8000648 <__aeabi_dmul>
 800eedc:	4602      	mov	r2, r0
 800eede:	460b      	mov	r3, r1
 800eee0:	4650      	mov	r0, sl
 800eee2:	4659      	mov	r1, fp
 800eee4:	f7f1 f9f8 	bl	80002d8 <__aeabi_dsub>
 800eee8:	4602      	mov	r2, r0
 800eeea:	460b      	mov	r3, r1
 800eeec:	4680      	mov	r8, r0
 800eeee:	4689      	mov	r9, r1
 800eef0:	4630      	mov	r0, r6
 800eef2:	4639      	mov	r1, r7
 800eef4:	f7f1 f9f2 	bl	80002dc <__adddf3>
 800eef8:	2000      	movs	r0, #0
 800eefa:	4632      	mov	r2, r6
 800eefc:	463b      	mov	r3, r7
 800eefe:	4604      	mov	r4, r0
 800ef00:	460d      	mov	r5, r1
 800ef02:	f7f1 f9e9 	bl	80002d8 <__aeabi_dsub>
 800ef06:	4602      	mov	r2, r0
 800ef08:	460b      	mov	r3, r1
 800ef0a:	4640      	mov	r0, r8
 800ef0c:	4649      	mov	r1, r9
 800ef0e:	f7f1 f9e3 	bl	80002d8 <__aeabi_dsub>
 800ef12:	9b04      	ldr	r3, [sp, #16]
 800ef14:	9a06      	ldr	r2, [sp, #24]
 800ef16:	3b01      	subs	r3, #1
 800ef18:	4313      	orrs	r3, r2
 800ef1a:	4682      	mov	sl, r0
 800ef1c:	468b      	mov	fp, r1
 800ef1e:	f040 81e7 	bne.w	800f2f0 <__ieee754_pow+0x700>
 800ef22:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800efd8 <__ieee754_pow+0x3e8>
 800ef26:	eeb0 8a47 	vmov.f32	s16, s14
 800ef2a:	eef0 8a67 	vmov.f32	s17, s15
 800ef2e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ef32:	2600      	movs	r6, #0
 800ef34:	4632      	mov	r2, r6
 800ef36:	463b      	mov	r3, r7
 800ef38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef3c:	f7f1 f9cc 	bl	80002d8 <__aeabi_dsub>
 800ef40:	4622      	mov	r2, r4
 800ef42:	462b      	mov	r3, r5
 800ef44:	f7f1 fb80 	bl	8000648 <__aeabi_dmul>
 800ef48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef4c:	4680      	mov	r8, r0
 800ef4e:	4689      	mov	r9, r1
 800ef50:	4650      	mov	r0, sl
 800ef52:	4659      	mov	r1, fp
 800ef54:	f7f1 fb78 	bl	8000648 <__aeabi_dmul>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	4640      	mov	r0, r8
 800ef5e:	4649      	mov	r1, r9
 800ef60:	f7f1 f9bc 	bl	80002dc <__adddf3>
 800ef64:	4632      	mov	r2, r6
 800ef66:	463b      	mov	r3, r7
 800ef68:	4680      	mov	r8, r0
 800ef6a:	4689      	mov	r9, r1
 800ef6c:	4620      	mov	r0, r4
 800ef6e:	4629      	mov	r1, r5
 800ef70:	f7f1 fb6a 	bl	8000648 <__aeabi_dmul>
 800ef74:	460b      	mov	r3, r1
 800ef76:	4604      	mov	r4, r0
 800ef78:	460d      	mov	r5, r1
 800ef7a:	4602      	mov	r2, r0
 800ef7c:	4649      	mov	r1, r9
 800ef7e:	4640      	mov	r0, r8
 800ef80:	f7f1 f9ac 	bl	80002dc <__adddf3>
 800ef84:	4b19      	ldr	r3, [pc, #100]	; (800efec <__ieee754_pow+0x3fc>)
 800ef86:	4299      	cmp	r1, r3
 800ef88:	ec45 4b19 	vmov	d9, r4, r5
 800ef8c:	4606      	mov	r6, r0
 800ef8e:	460f      	mov	r7, r1
 800ef90:	468b      	mov	fp, r1
 800ef92:	f340 82f0 	ble.w	800f576 <__ieee754_pow+0x986>
 800ef96:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ef9a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ef9e:	4303      	orrs	r3, r0
 800efa0:	f000 81e4 	beq.w	800f36c <__ieee754_pow+0x77c>
 800efa4:	ec51 0b18 	vmov	r0, r1, d8
 800efa8:	2200      	movs	r2, #0
 800efaa:	2300      	movs	r3, #0
 800efac:	f7f1 fdbe 	bl	8000b2c <__aeabi_dcmplt>
 800efb0:	3800      	subs	r0, #0
 800efb2:	bf18      	it	ne
 800efb4:	2001      	movne	r0, #1
 800efb6:	e72b      	b.n	800ee10 <__ieee754_pow+0x220>
 800efb8:	60000000 	.word	0x60000000
 800efbc:	3ff71547 	.word	0x3ff71547
 800efc0:	f85ddf44 	.word	0xf85ddf44
 800efc4:	3e54ae0b 	.word	0x3e54ae0b
 800efc8:	55555555 	.word	0x55555555
 800efcc:	3fd55555 	.word	0x3fd55555
 800efd0:	652b82fe 	.word	0x652b82fe
 800efd4:	3ff71547 	.word	0x3ff71547
 800efd8:	00000000 	.word	0x00000000
 800efdc:	bff00000 	.word	0xbff00000
 800efe0:	3ff00000 	.word	0x3ff00000
 800efe4:	3fd00000 	.word	0x3fd00000
 800efe8:	3fe00000 	.word	0x3fe00000
 800efec:	408fffff 	.word	0x408fffff
 800eff0:	4bd5      	ldr	r3, [pc, #852]	; (800f348 <__ieee754_pow+0x758>)
 800eff2:	402b      	ands	r3, r5
 800eff4:	2200      	movs	r2, #0
 800eff6:	b92b      	cbnz	r3, 800f004 <__ieee754_pow+0x414>
 800eff8:	4bd4      	ldr	r3, [pc, #848]	; (800f34c <__ieee754_pow+0x75c>)
 800effa:	f7f1 fb25 	bl	8000648 <__aeabi_dmul>
 800effe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800f002:	460c      	mov	r4, r1
 800f004:	1523      	asrs	r3, r4, #20
 800f006:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f00a:	4413      	add	r3, r2
 800f00c:	9305      	str	r3, [sp, #20]
 800f00e:	4bd0      	ldr	r3, [pc, #832]	; (800f350 <__ieee754_pow+0x760>)
 800f010:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f014:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800f018:	429c      	cmp	r4, r3
 800f01a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800f01e:	dd08      	ble.n	800f032 <__ieee754_pow+0x442>
 800f020:	4bcc      	ldr	r3, [pc, #816]	; (800f354 <__ieee754_pow+0x764>)
 800f022:	429c      	cmp	r4, r3
 800f024:	f340 8162 	ble.w	800f2ec <__ieee754_pow+0x6fc>
 800f028:	9b05      	ldr	r3, [sp, #20]
 800f02a:	3301      	adds	r3, #1
 800f02c:	9305      	str	r3, [sp, #20]
 800f02e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800f032:	2400      	movs	r4, #0
 800f034:	00e3      	lsls	r3, r4, #3
 800f036:	9307      	str	r3, [sp, #28]
 800f038:	4bc7      	ldr	r3, [pc, #796]	; (800f358 <__ieee754_pow+0x768>)
 800f03a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800f03e:	ed93 7b00 	vldr	d7, [r3]
 800f042:	4629      	mov	r1, r5
 800f044:	ec53 2b17 	vmov	r2, r3, d7
 800f048:	eeb0 9a47 	vmov.f32	s18, s14
 800f04c:	eef0 9a67 	vmov.f32	s19, s15
 800f050:	4682      	mov	sl, r0
 800f052:	f7f1 f941 	bl	80002d8 <__aeabi_dsub>
 800f056:	4652      	mov	r2, sl
 800f058:	4606      	mov	r6, r0
 800f05a:	460f      	mov	r7, r1
 800f05c:	462b      	mov	r3, r5
 800f05e:	ec51 0b19 	vmov	r0, r1, d9
 800f062:	f7f1 f93b 	bl	80002dc <__adddf3>
 800f066:	4602      	mov	r2, r0
 800f068:	460b      	mov	r3, r1
 800f06a:	2000      	movs	r0, #0
 800f06c:	49bb      	ldr	r1, [pc, #748]	; (800f35c <__ieee754_pow+0x76c>)
 800f06e:	f7f1 fc15 	bl	800089c <__aeabi_ddiv>
 800f072:	ec41 0b1a 	vmov	d10, r0, r1
 800f076:	4602      	mov	r2, r0
 800f078:	460b      	mov	r3, r1
 800f07a:	4630      	mov	r0, r6
 800f07c:	4639      	mov	r1, r7
 800f07e:	f7f1 fae3 	bl	8000648 <__aeabi_dmul>
 800f082:	2300      	movs	r3, #0
 800f084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f088:	9302      	str	r3, [sp, #8]
 800f08a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f08e:	46ab      	mov	fp, r5
 800f090:	106d      	asrs	r5, r5, #1
 800f092:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f096:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f09a:	ec41 0b18 	vmov	d8, r0, r1
 800f09e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	4640      	mov	r0, r8
 800f0a6:	4649      	mov	r1, r9
 800f0a8:	4614      	mov	r4, r2
 800f0aa:	461d      	mov	r5, r3
 800f0ac:	f7f1 facc 	bl	8000648 <__aeabi_dmul>
 800f0b0:	4602      	mov	r2, r0
 800f0b2:	460b      	mov	r3, r1
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	4639      	mov	r1, r7
 800f0b8:	f7f1 f90e 	bl	80002d8 <__aeabi_dsub>
 800f0bc:	ec53 2b19 	vmov	r2, r3, d9
 800f0c0:	4606      	mov	r6, r0
 800f0c2:	460f      	mov	r7, r1
 800f0c4:	4620      	mov	r0, r4
 800f0c6:	4629      	mov	r1, r5
 800f0c8:	f7f1 f906 	bl	80002d8 <__aeabi_dsub>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	460b      	mov	r3, r1
 800f0d0:	4650      	mov	r0, sl
 800f0d2:	4659      	mov	r1, fp
 800f0d4:	f7f1 f900 	bl	80002d8 <__aeabi_dsub>
 800f0d8:	4642      	mov	r2, r8
 800f0da:	464b      	mov	r3, r9
 800f0dc:	f7f1 fab4 	bl	8000648 <__aeabi_dmul>
 800f0e0:	4602      	mov	r2, r0
 800f0e2:	460b      	mov	r3, r1
 800f0e4:	4630      	mov	r0, r6
 800f0e6:	4639      	mov	r1, r7
 800f0e8:	f7f1 f8f6 	bl	80002d8 <__aeabi_dsub>
 800f0ec:	ec53 2b1a 	vmov	r2, r3, d10
 800f0f0:	f7f1 faaa 	bl	8000648 <__aeabi_dmul>
 800f0f4:	ec53 2b18 	vmov	r2, r3, d8
 800f0f8:	ec41 0b19 	vmov	d9, r0, r1
 800f0fc:	ec51 0b18 	vmov	r0, r1, d8
 800f100:	f7f1 faa2 	bl	8000648 <__aeabi_dmul>
 800f104:	a37c      	add	r3, pc, #496	; (adr r3, 800f2f8 <__ieee754_pow+0x708>)
 800f106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f10a:	4604      	mov	r4, r0
 800f10c:	460d      	mov	r5, r1
 800f10e:	f7f1 fa9b 	bl	8000648 <__aeabi_dmul>
 800f112:	a37b      	add	r3, pc, #492	; (adr r3, 800f300 <__ieee754_pow+0x710>)
 800f114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f118:	f7f1 f8e0 	bl	80002dc <__adddf3>
 800f11c:	4622      	mov	r2, r4
 800f11e:	462b      	mov	r3, r5
 800f120:	f7f1 fa92 	bl	8000648 <__aeabi_dmul>
 800f124:	a378      	add	r3, pc, #480	; (adr r3, 800f308 <__ieee754_pow+0x718>)
 800f126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12a:	f7f1 f8d7 	bl	80002dc <__adddf3>
 800f12e:	4622      	mov	r2, r4
 800f130:	462b      	mov	r3, r5
 800f132:	f7f1 fa89 	bl	8000648 <__aeabi_dmul>
 800f136:	a376      	add	r3, pc, #472	; (adr r3, 800f310 <__ieee754_pow+0x720>)
 800f138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13c:	f7f1 f8ce 	bl	80002dc <__adddf3>
 800f140:	4622      	mov	r2, r4
 800f142:	462b      	mov	r3, r5
 800f144:	f7f1 fa80 	bl	8000648 <__aeabi_dmul>
 800f148:	a373      	add	r3, pc, #460	; (adr r3, 800f318 <__ieee754_pow+0x728>)
 800f14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14e:	f7f1 f8c5 	bl	80002dc <__adddf3>
 800f152:	4622      	mov	r2, r4
 800f154:	462b      	mov	r3, r5
 800f156:	f7f1 fa77 	bl	8000648 <__aeabi_dmul>
 800f15a:	a371      	add	r3, pc, #452	; (adr r3, 800f320 <__ieee754_pow+0x730>)
 800f15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f160:	f7f1 f8bc 	bl	80002dc <__adddf3>
 800f164:	4622      	mov	r2, r4
 800f166:	4606      	mov	r6, r0
 800f168:	460f      	mov	r7, r1
 800f16a:	462b      	mov	r3, r5
 800f16c:	4620      	mov	r0, r4
 800f16e:	4629      	mov	r1, r5
 800f170:	f7f1 fa6a 	bl	8000648 <__aeabi_dmul>
 800f174:	4602      	mov	r2, r0
 800f176:	460b      	mov	r3, r1
 800f178:	4630      	mov	r0, r6
 800f17a:	4639      	mov	r1, r7
 800f17c:	f7f1 fa64 	bl	8000648 <__aeabi_dmul>
 800f180:	4642      	mov	r2, r8
 800f182:	4604      	mov	r4, r0
 800f184:	460d      	mov	r5, r1
 800f186:	464b      	mov	r3, r9
 800f188:	ec51 0b18 	vmov	r0, r1, d8
 800f18c:	f7f1 f8a6 	bl	80002dc <__adddf3>
 800f190:	ec53 2b19 	vmov	r2, r3, d9
 800f194:	f7f1 fa58 	bl	8000648 <__aeabi_dmul>
 800f198:	4622      	mov	r2, r4
 800f19a:	462b      	mov	r3, r5
 800f19c:	f7f1 f89e 	bl	80002dc <__adddf3>
 800f1a0:	4642      	mov	r2, r8
 800f1a2:	4682      	mov	sl, r0
 800f1a4:	468b      	mov	fp, r1
 800f1a6:	464b      	mov	r3, r9
 800f1a8:	4640      	mov	r0, r8
 800f1aa:	4649      	mov	r1, r9
 800f1ac:	f7f1 fa4c 	bl	8000648 <__aeabi_dmul>
 800f1b0:	4b6b      	ldr	r3, [pc, #428]	; (800f360 <__ieee754_pow+0x770>)
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	460f      	mov	r7, r1
 800f1b8:	f7f1 f890 	bl	80002dc <__adddf3>
 800f1bc:	4652      	mov	r2, sl
 800f1be:	465b      	mov	r3, fp
 800f1c0:	f7f1 f88c 	bl	80002dc <__adddf3>
 800f1c4:	2000      	movs	r0, #0
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	460d      	mov	r5, r1
 800f1ca:	4602      	mov	r2, r0
 800f1cc:	460b      	mov	r3, r1
 800f1ce:	4640      	mov	r0, r8
 800f1d0:	4649      	mov	r1, r9
 800f1d2:	f7f1 fa39 	bl	8000648 <__aeabi_dmul>
 800f1d6:	4b62      	ldr	r3, [pc, #392]	; (800f360 <__ieee754_pow+0x770>)
 800f1d8:	4680      	mov	r8, r0
 800f1da:	4689      	mov	r9, r1
 800f1dc:	2200      	movs	r2, #0
 800f1de:	4620      	mov	r0, r4
 800f1e0:	4629      	mov	r1, r5
 800f1e2:	f7f1 f879 	bl	80002d8 <__aeabi_dsub>
 800f1e6:	4632      	mov	r2, r6
 800f1e8:	463b      	mov	r3, r7
 800f1ea:	f7f1 f875 	bl	80002d8 <__aeabi_dsub>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	4650      	mov	r0, sl
 800f1f4:	4659      	mov	r1, fp
 800f1f6:	f7f1 f86f 	bl	80002d8 <__aeabi_dsub>
 800f1fa:	ec53 2b18 	vmov	r2, r3, d8
 800f1fe:	f7f1 fa23 	bl	8000648 <__aeabi_dmul>
 800f202:	4622      	mov	r2, r4
 800f204:	4606      	mov	r6, r0
 800f206:	460f      	mov	r7, r1
 800f208:	462b      	mov	r3, r5
 800f20a:	ec51 0b19 	vmov	r0, r1, d9
 800f20e:	f7f1 fa1b 	bl	8000648 <__aeabi_dmul>
 800f212:	4602      	mov	r2, r0
 800f214:	460b      	mov	r3, r1
 800f216:	4630      	mov	r0, r6
 800f218:	4639      	mov	r1, r7
 800f21a:	f7f1 f85f 	bl	80002dc <__adddf3>
 800f21e:	4606      	mov	r6, r0
 800f220:	460f      	mov	r7, r1
 800f222:	4602      	mov	r2, r0
 800f224:	460b      	mov	r3, r1
 800f226:	4640      	mov	r0, r8
 800f228:	4649      	mov	r1, r9
 800f22a:	f7f1 f857 	bl	80002dc <__adddf3>
 800f22e:	a33e      	add	r3, pc, #248	; (adr r3, 800f328 <__ieee754_pow+0x738>)
 800f230:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f234:	2000      	movs	r0, #0
 800f236:	4604      	mov	r4, r0
 800f238:	460d      	mov	r5, r1
 800f23a:	f7f1 fa05 	bl	8000648 <__aeabi_dmul>
 800f23e:	4642      	mov	r2, r8
 800f240:	ec41 0b18 	vmov	d8, r0, r1
 800f244:	464b      	mov	r3, r9
 800f246:	4620      	mov	r0, r4
 800f248:	4629      	mov	r1, r5
 800f24a:	f7f1 f845 	bl	80002d8 <__aeabi_dsub>
 800f24e:	4602      	mov	r2, r0
 800f250:	460b      	mov	r3, r1
 800f252:	4630      	mov	r0, r6
 800f254:	4639      	mov	r1, r7
 800f256:	f7f1 f83f 	bl	80002d8 <__aeabi_dsub>
 800f25a:	a335      	add	r3, pc, #212	; (adr r3, 800f330 <__ieee754_pow+0x740>)
 800f25c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f260:	f7f1 f9f2 	bl	8000648 <__aeabi_dmul>
 800f264:	a334      	add	r3, pc, #208	; (adr r3, 800f338 <__ieee754_pow+0x748>)
 800f266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26a:	4606      	mov	r6, r0
 800f26c:	460f      	mov	r7, r1
 800f26e:	4620      	mov	r0, r4
 800f270:	4629      	mov	r1, r5
 800f272:	f7f1 f9e9 	bl	8000648 <__aeabi_dmul>
 800f276:	4602      	mov	r2, r0
 800f278:	460b      	mov	r3, r1
 800f27a:	4630      	mov	r0, r6
 800f27c:	4639      	mov	r1, r7
 800f27e:	f7f1 f82d 	bl	80002dc <__adddf3>
 800f282:	9a07      	ldr	r2, [sp, #28]
 800f284:	4b37      	ldr	r3, [pc, #220]	; (800f364 <__ieee754_pow+0x774>)
 800f286:	4413      	add	r3, r2
 800f288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f28c:	f7f1 f826 	bl	80002dc <__adddf3>
 800f290:	4682      	mov	sl, r0
 800f292:	9805      	ldr	r0, [sp, #20]
 800f294:	468b      	mov	fp, r1
 800f296:	f7f1 f96d 	bl	8000574 <__aeabi_i2d>
 800f29a:	9a07      	ldr	r2, [sp, #28]
 800f29c:	4b32      	ldr	r3, [pc, #200]	; (800f368 <__ieee754_pow+0x778>)
 800f29e:	4413      	add	r3, r2
 800f2a0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f2a4:	4606      	mov	r6, r0
 800f2a6:	460f      	mov	r7, r1
 800f2a8:	4652      	mov	r2, sl
 800f2aa:	465b      	mov	r3, fp
 800f2ac:	ec51 0b18 	vmov	r0, r1, d8
 800f2b0:	f7f1 f814 	bl	80002dc <__adddf3>
 800f2b4:	4642      	mov	r2, r8
 800f2b6:	464b      	mov	r3, r9
 800f2b8:	f7f1 f810 	bl	80002dc <__adddf3>
 800f2bc:	4632      	mov	r2, r6
 800f2be:	463b      	mov	r3, r7
 800f2c0:	f7f1 f80c 	bl	80002dc <__adddf3>
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	4632      	mov	r2, r6
 800f2c8:	463b      	mov	r3, r7
 800f2ca:	4604      	mov	r4, r0
 800f2cc:	460d      	mov	r5, r1
 800f2ce:	f7f1 f803 	bl	80002d8 <__aeabi_dsub>
 800f2d2:	4642      	mov	r2, r8
 800f2d4:	464b      	mov	r3, r9
 800f2d6:	f7f0 ffff 	bl	80002d8 <__aeabi_dsub>
 800f2da:	ec53 2b18 	vmov	r2, r3, d8
 800f2de:	f7f0 fffb 	bl	80002d8 <__aeabi_dsub>
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	4650      	mov	r0, sl
 800f2e8:	4659      	mov	r1, fp
 800f2ea:	e610      	b.n	800ef0e <__ieee754_pow+0x31e>
 800f2ec:	2401      	movs	r4, #1
 800f2ee:	e6a1      	b.n	800f034 <__ieee754_pow+0x444>
 800f2f0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f340 <__ieee754_pow+0x750>
 800f2f4:	e617      	b.n	800ef26 <__ieee754_pow+0x336>
 800f2f6:	bf00      	nop
 800f2f8:	4a454eef 	.word	0x4a454eef
 800f2fc:	3fca7e28 	.word	0x3fca7e28
 800f300:	93c9db65 	.word	0x93c9db65
 800f304:	3fcd864a 	.word	0x3fcd864a
 800f308:	a91d4101 	.word	0xa91d4101
 800f30c:	3fd17460 	.word	0x3fd17460
 800f310:	518f264d 	.word	0x518f264d
 800f314:	3fd55555 	.word	0x3fd55555
 800f318:	db6fabff 	.word	0xdb6fabff
 800f31c:	3fdb6db6 	.word	0x3fdb6db6
 800f320:	33333303 	.word	0x33333303
 800f324:	3fe33333 	.word	0x3fe33333
 800f328:	e0000000 	.word	0xe0000000
 800f32c:	3feec709 	.word	0x3feec709
 800f330:	dc3a03fd 	.word	0xdc3a03fd
 800f334:	3feec709 	.word	0x3feec709
 800f338:	145b01f5 	.word	0x145b01f5
 800f33c:	be3e2fe0 	.word	0xbe3e2fe0
 800f340:	00000000 	.word	0x00000000
 800f344:	3ff00000 	.word	0x3ff00000
 800f348:	7ff00000 	.word	0x7ff00000
 800f34c:	43400000 	.word	0x43400000
 800f350:	0003988e 	.word	0x0003988e
 800f354:	000bb679 	.word	0x000bb679
 800f358:	08012f58 	.word	0x08012f58
 800f35c:	3ff00000 	.word	0x3ff00000
 800f360:	40080000 	.word	0x40080000
 800f364:	08012f78 	.word	0x08012f78
 800f368:	08012f68 	.word	0x08012f68
 800f36c:	a3b3      	add	r3, pc, #716	; (adr r3, 800f63c <__ieee754_pow+0xa4c>)
 800f36e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f372:	4640      	mov	r0, r8
 800f374:	4649      	mov	r1, r9
 800f376:	f7f0 ffb1 	bl	80002dc <__adddf3>
 800f37a:	4622      	mov	r2, r4
 800f37c:	ec41 0b1a 	vmov	d10, r0, r1
 800f380:	462b      	mov	r3, r5
 800f382:	4630      	mov	r0, r6
 800f384:	4639      	mov	r1, r7
 800f386:	f7f0 ffa7 	bl	80002d8 <__aeabi_dsub>
 800f38a:	4602      	mov	r2, r0
 800f38c:	460b      	mov	r3, r1
 800f38e:	ec51 0b1a 	vmov	r0, r1, d10
 800f392:	f7f1 fbe9 	bl	8000b68 <__aeabi_dcmpgt>
 800f396:	2800      	cmp	r0, #0
 800f398:	f47f ae04 	bne.w	800efa4 <__ieee754_pow+0x3b4>
 800f39c:	4aa2      	ldr	r2, [pc, #648]	; (800f628 <__ieee754_pow+0xa38>)
 800f39e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f3a2:	4293      	cmp	r3, r2
 800f3a4:	f340 8107 	ble.w	800f5b6 <__ieee754_pow+0x9c6>
 800f3a8:	151b      	asrs	r3, r3, #20
 800f3aa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f3ae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f3b2:	fa4a fa03 	asr.w	sl, sl, r3
 800f3b6:	44da      	add	sl, fp
 800f3b8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f3bc:	489b      	ldr	r0, [pc, #620]	; (800f62c <__ieee754_pow+0xa3c>)
 800f3be:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f3c2:	4108      	asrs	r0, r1
 800f3c4:	ea00 030a 	and.w	r3, r0, sl
 800f3c8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f3cc:	f1c1 0114 	rsb	r1, r1, #20
 800f3d0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f3d4:	fa4a fa01 	asr.w	sl, sl, r1
 800f3d8:	f1bb 0f00 	cmp.w	fp, #0
 800f3dc:	f04f 0200 	mov.w	r2, #0
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	bfb8      	it	lt
 800f3e6:	f1ca 0a00 	rsblt	sl, sl, #0
 800f3ea:	f7f0 ff75 	bl	80002d8 <__aeabi_dsub>
 800f3ee:	ec41 0b19 	vmov	d9, r0, r1
 800f3f2:	4642      	mov	r2, r8
 800f3f4:	464b      	mov	r3, r9
 800f3f6:	ec51 0b19 	vmov	r0, r1, d9
 800f3fa:	f7f0 ff6f 	bl	80002dc <__adddf3>
 800f3fe:	a37a      	add	r3, pc, #488	; (adr r3, 800f5e8 <__ieee754_pow+0x9f8>)
 800f400:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f404:	2000      	movs	r0, #0
 800f406:	4604      	mov	r4, r0
 800f408:	460d      	mov	r5, r1
 800f40a:	f7f1 f91d 	bl	8000648 <__aeabi_dmul>
 800f40e:	ec53 2b19 	vmov	r2, r3, d9
 800f412:	4606      	mov	r6, r0
 800f414:	460f      	mov	r7, r1
 800f416:	4620      	mov	r0, r4
 800f418:	4629      	mov	r1, r5
 800f41a:	f7f0 ff5d 	bl	80002d8 <__aeabi_dsub>
 800f41e:	4602      	mov	r2, r0
 800f420:	460b      	mov	r3, r1
 800f422:	4640      	mov	r0, r8
 800f424:	4649      	mov	r1, r9
 800f426:	f7f0 ff57 	bl	80002d8 <__aeabi_dsub>
 800f42a:	a371      	add	r3, pc, #452	; (adr r3, 800f5f0 <__ieee754_pow+0xa00>)
 800f42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f430:	f7f1 f90a 	bl	8000648 <__aeabi_dmul>
 800f434:	a370      	add	r3, pc, #448	; (adr r3, 800f5f8 <__ieee754_pow+0xa08>)
 800f436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f43a:	4680      	mov	r8, r0
 800f43c:	4689      	mov	r9, r1
 800f43e:	4620      	mov	r0, r4
 800f440:	4629      	mov	r1, r5
 800f442:	f7f1 f901 	bl	8000648 <__aeabi_dmul>
 800f446:	4602      	mov	r2, r0
 800f448:	460b      	mov	r3, r1
 800f44a:	4640      	mov	r0, r8
 800f44c:	4649      	mov	r1, r9
 800f44e:	f7f0 ff45 	bl	80002dc <__adddf3>
 800f452:	4604      	mov	r4, r0
 800f454:	460d      	mov	r5, r1
 800f456:	4602      	mov	r2, r0
 800f458:	460b      	mov	r3, r1
 800f45a:	4630      	mov	r0, r6
 800f45c:	4639      	mov	r1, r7
 800f45e:	f7f0 ff3d 	bl	80002dc <__adddf3>
 800f462:	4632      	mov	r2, r6
 800f464:	463b      	mov	r3, r7
 800f466:	4680      	mov	r8, r0
 800f468:	4689      	mov	r9, r1
 800f46a:	f7f0 ff35 	bl	80002d8 <__aeabi_dsub>
 800f46e:	4602      	mov	r2, r0
 800f470:	460b      	mov	r3, r1
 800f472:	4620      	mov	r0, r4
 800f474:	4629      	mov	r1, r5
 800f476:	f7f0 ff2f 	bl	80002d8 <__aeabi_dsub>
 800f47a:	4642      	mov	r2, r8
 800f47c:	4606      	mov	r6, r0
 800f47e:	460f      	mov	r7, r1
 800f480:	464b      	mov	r3, r9
 800f482:	4640      	mov	r0, r8
 800f484:	4649      	mov	r1, r9
 800f486:	f7f1 f8df 	bl	8000648 <__aeabi_dmul>
 800f48a:	a35d      	add	r3, pc, #372	; (adr r3, 800f600 <__ieee754_pow+0xa10>)
 800f48c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f490:	4604      	mov	r4, r0
 800f492:	460d      	mov	r5, r1
 800f494:	f7f1 f8d8 	bl	8000648 <__aeabi_dmul>
 800f498:	a35b      	add	r3, pc, #364	; (adr r3, 800f608 <__ieee754_pow+0xa18>)
 800f49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f49e:	f7f0 ff1b 	bl	80002d8 <__aeabi_dsub>
 800f4a2:	4622      	mov	r2, r4
 800f4a4:	462b      	mov	r3, r5
 800f4a6:	f7f1 f8cf 	bl	8000648 <__aeabi_dmul>
 800f4aa:	a359      	add	r3, pc, #356	; (adr r3, 800f610 <__ieee754_pow+0xa20>)
 800f4ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b0:	f7f0 ff14 	bl	80002dc <__adddf3>
 800f4b4:	4622      	mov	r2, r4
 800f4b6:	462b      	mov	r3, r5
 800f4b8:	f7f1 f8c6 	bl	8000648 <__aeabi_dmul>
 800f4bc:	a356      	add	r3, pc, #344	; (adr r3, 800f618 <__ieee754_pow+0xa28>)
 800f4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c2:	f7f0 ff09 	bl	80002d8 <__aeabi_dsub>
 800f4c6:	4622      	mov	r2, r4
 800f4c8:	462b      	mov	r3, r5
 800f4ca:	f7f1 f8bd 	bl	8000648 <__aeabi_dmul>
 800f4ce:	a354      	add	r3, pc, #336	; (adr r3, 800f620 <__ieee754_pow+0xa30>)
 800f4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d4:	f7f0 ff02 	bl	80002dc <__adddf3>
 800f4d8:	4622      	mov	r2, r4
 800f4da:	462b      	mov	r3, r5
 800f4dc:	f7f1 f8b4 	bl	8000648 <__aeabi_dmul>
 800f4e0:	4602      	mov	r2, r0
 800f4e2:	460b      	mov	r3, r1
 800f4e4:	4640      	mov	r0, r8
 800f4e6:	4649      	mov	r1, r9
 800f4e8:	f7f0 fef6 	bl	80002d8 <__aeabi_dsub>
 800f4ec:	4604      	mov	r4, r0
 800f4ee:	460d      	mov	r5, r1
 800f4f0:	4602      	mov	r2, r0
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	4640      	mov	r0, r8
 800f4f6:	4649      	mov	r1, r9
 800f4f8:	f7f1 f8a6 	bl	8000648 <__aeabi_dmul>
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	ec41 0b19 	vmov	d9, r0, r1
 800f502:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f506:	4620      	mov	r0, r4
 800f508:	4629      	mov	r1, r5
 800f50a:	f7f0 fee5 	bl	80002d8 <__aeabi_dsub>
 800f50e:	4602      	mov	r2, r0
 800f510:	460b      	mov	r3, r1
 800f512:	ec51 0b19 	vmov	r0, r1, d9
 800f516:	f7f1 f9c1 	bl	800089c <__aeabi_ddiv>
 800f51a:	4632      	mov	r2, r6
 800f51c:	4604      	mov	r4, r0
 800f51e:	460d      	mov	r5, r1
 800f520:	463b      	mov	r3, r7
 800f522:	4640      	mov	r0, r8
 800f524:	4649      	mov	r1, r9
 800f526:	f7f1 f88f 	bl	8000648 <__aeabi_dmul>
 800f52a:	4632      	mov	r2, r6
 800f52c:	463b      	mov	r3, r7
 800f52e:	f7f0 fed5 	bl	80002dc <__adddf3>
 800f532:	4602      	mov	r2, r0
 800f534:	460b      	mov	r3, r1
 800f536:	4620      	mov	r0, r4
 800f538:	4629      	mov	r1, r5
 800f53a:	f7f0 fecd 	bl	80002d8 <__aeabi_dsub>
 800f53e:	4642      	mov	r2, r8
 800f540:	464b      	mov	r3, r9
 800f542:	f7f0 fec9 	bl	80002d8 <__aeabi_dsub>
 800f546:	460b      	mov	r3, r1
 800f548:	4602      	mov	r2, r0
 800f54a:	4939      	ldr	r1, [pc, #228]	; (800f630 <__ieee754_pow+0xa40>)
 800f54c:	2000      	movs	r0, #0
 800f54e:	f7f0 fec3 	bl	80002d8 <__aeabi_dsub>
 800f552:	ec41 0b10 	vmov	d0, r0, r1
 800f556:	ee10 3a90 	vmov	r3, s1
 800f55a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f55e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f562:	da2b      	bge.n	800f5bc <__ieee754_pow+0x9cc>
 800f564:	4650      	mov	r0, sl
 800f566:	f000 f877 	bl	800f658 <scalbn>
 800f56a:	ec51 0b10 	vmov	r0, r1, d0
 800f56e:	ec53 2b18 	vmov	r2, r3, d8
 800f572:	f7ff bbee 	b.w	800ed52 <__ieee754_pow+0x162>
 800f576:	4b2f      	ldr	r3, [pc, #188]	; (800f634 <__ieee754_pow+0xa44>)
 800f578:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f57c:	429e      	cmp	r6, r3
 800f57e:	f77f af0d 	ble.w	800f39c <__ieee754_pow+0x7ac>
 800f582:	4b2d      	ldr	r3, [pc, #180]	; (800f638 <__ieee754_pow+0xa48>)
 800f584:	440b      	add	r3, r1
 800f586:	4303      	orrs	r3, r0
 800f588:	d009      	beq.n	800f59e <__ieee754_pow+0x9ae>
 800f58a:	ec51 0b18 	vmov	r0, r1, d8
 800f58e:	2200      	movs	r2, #0
 800f590:	2300      	movs	r3, #0
 800f592:	f7f1 facb 	bl	8000b2c <__aeabi_dcmplt>
 800f596:	3800      	subs	r0, #0
 800f598:	bf18      	it	ne
 800f59a:	2001      	movne	r0, #1
 800f59c:	e448      	b.n	800ee30 <__ieee754_pow+0x240>
 800f59e:	4622      	mov	r2, r4
 800f5a0:	462b      	mov	r3, r5
 800f5a2:	f7f0 fe99 	bl	80002d8 <__aeabi_dsub>
 800f5a6:	4642      	mov	r2, r8
 800f5a8:	464b      	mov	r3, r9
 800f5aa:	f7f1 fad3 	bl	8000b54 <__aeabi_dcmpge>
 800f5ae:	2800      	cmp	r0, #0
 800f5b0:	f43f aef4 	beq.w	800f39c <__ieee754_pow+0x7ac>
 800f5b4:	e7e9      	b.n	800f58a <__ieee754_pow+0x99a>
 800f5b6:	f04f 0a00 	mov.w	sl, #0
 800f5ba:	e71a      	b.n	800f3f2 <__ieee754_pow+0x802>
 800f5bc:	ec51 0b10 	vmov	r0, r1, d0
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	e7d4      	b.n	800f56e <__ieee754_pow+0x97e>
 800f5c4:	491a      	ldr	r1, [pc, #104]	; (800f630 <__ieee754_pow+0xa40>)
 800f5c6:	2000      	movs	r0, #0
 800f5c8:	f7ff bb31 	b.w	800ec2e <__ieee754_pow+0x3e>
 800f5cc:	2000      	movs	r0, #0
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	f7ff bb2d 	b.w	800ec2e <__ieee754_pow+0x3e>
 800f5d4:	4630      	mov	r0, r6
 800f5d6:	4639      	mov	r1, r7
 800f5d8:	f7ff bb29 	b.w	800ec2e <__ieee754_pow+0x3e>
 800f5dc:	9204      	str	r2, [sp, #16]
 800f5de:	f7ff bb7b 	b.w	800ecd8 <__ieee754_pow+0xe8>
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	f7ff bb65 	b.w	800ecb2 <__ieee754_pow+0xc2>
 800f5e8:	00000000 	.word	0x00000000
 800f5ec:	3fe62e43 	.word	0x3fe62e43
 800f5f0:	fefa39ef 	.word	0xfefa39ef
 800f5f4:	3fe62e42 	.word	0x3fe62e42
 800f5f8:	0ca86c39 	.word	0x0ca86c39
 800f5fc:	be205c61 	.word	0xbe205c61
 800f600:	72bea4d0 	.word	0x72bea4d0
 800f604:	3e663769 	.word	0x3e663769
 800f608:	c5d26bf1 	.word	0xc5d26bf1
 800f60c:	3ebbbd41 	.word	0x3ebbbd41
 800f610:	af25de2c 	.word	0xaf25de2c
 800f614:	3f11566a 	.word	0x3f11566a
 800f618:	16bebd93 	.word	0x16bebd93
 800f61c:	3f66c16c 	.word	0x3f66c16c
 800f620:	5555553e 	.word	0x5555553e
 800f624:	3fc55555 	.word	0x3fc55555
 800f628:	3fe00000 	.word	0x3fe00000
 800f62c:	fff00000 	.word	0xfff00000
 800f630:	3ff00000 	.word	0x3ff00000
 800f634:	4090cbff 	.word	0x4090cbff
 800f638:	3f6f3400 	.word	0x3f6f3400
 800f63c:	652b82fe 	.word	0x652b82fe
 800f640:	3c971547 	.word	0x3c971547

0800f644 <fabs>:
 800f644:	ec51 0b10 	vmov	r0, r1, d0
 800f648:	ee10 2a10 	vmov	r2, s0
 800f64c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f650:	ec43 2b10 	vmov	d0, r2, r3
 800f654:	4770      	bx	lr
	...

0800f658 <scalbn>:
 800f658:	b570      	push	{r4, r5, r6, lr}
 800f65a:	ec55 4b10 	vmov	r4, r5, d0
 800f65e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f662:	4606      	mov	r6, r0
 800f664:	462b      	mov	r3, r5
 800f666:	b999      	cbnz	r1, 800f690 <scalbn+0x38>
 800f668:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f66c:	4323      	orrs	r3, r4
 800f66e:	d03f      	beq.n	800f6f0 <scalbn+0x98>
 800f670:	4b35      	ldr	r3, [pc, #212]	; (800f748 <scalbn+0xf0>)
 800f672:	4629      	mov	r1, r5
 800f674:	ee10 0a10 	vmov	r0, s0
 800f678:	2200      	movs	r2, #0
 800f67a:	f7f0 ffe5 	bl	8000648 <__aeabi_dmul>
 800f67e:	4b33      	ldr	r3, [pc, #204]	; (800f74c <scalbn+0xf4>)
 800f680:	429e      	cmp	r6, r3
 800f682:	4604      	mov	r4, r0
 800f684:	460d      	mov	r5, r1
 800f686:	da10      	bge.n	800f6aa <scalbn+0x52>
 800f688:	a327      	add	r3, pc, #156	; (adr r3, 800f728 <scalbn+0xd0>)
 800f68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68e:	e01f      	b.n	800f6d0 <scalbn+0x78>
 800f690:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f694:	4291      	cmp	r1, r2
 800f696:	d10c      	bne.n	800f6b2 <scalbn+0x5a>
 800f698:	ee10 2a10 	vmov	r2, s0
 800f69c:	4620      	mov	r0, r4
 800f69e:	4629      	mov	r1, r5
 800f6a0:	f7f0 fe1c 	bl	80002dc <__adddf3>
 800f6a4:	4604      	mov	r4, r0
 800f6a6:	460d      	mov	r5, r1
 800f6a8:	e022      	b.n	800f6f0 <scalbn+0x98>
 800f6aa:	460b      	mov	r3, r1
 800f6ac:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f6b0:	3936      	subs	r1, #54	; 0x36
 800f6b2:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f6b6:	4296      	cmp	r6, r2
 800f6b8:	dd0d      	ble.n	800f6d6 <scalbn+0x7e>
 800f6ba:	2d00      	cmp	r5, #0
 800f6bc:	a11c      	add	r1, pc, #112	; (adr r1, 800f730 <scalbn+0xd8>)
 800f6be:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6c2:	da02      	bge.n	800f6ca <scalbn+0x72>
 800f6c4:	a11c      	add	r1, pc, #112	; (adr r1, 800f738 <scalbn+0xe0>)
 800f6c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6ca:	a319      	add	r3, pc, #100	; (adr r3, 800f730 <scalbn+0xd8>)
 800f6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d0:	f7f0 ffba 	bl	8000648 <__aeabi_dmul>
 800f6d4:	e7e6      	b.n	800f6a4 <scalbn+0x4c>
 800f6d6:	1872      	adds	r2, r6, r1
 800f6d8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f6dc:	428a      	cmp	r2, r1
 800f6de:	dcec      	bgt.n	800f6ba <scalbn+0x62>
 800f6e0:	2a00      	cmp	r2, #0
 800f6e2:	dd08      	ble.n	800f6f6 <scalbn+0x9e>
 800f6e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f6e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f6ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f6f0:	ec45 4b10 	vmov	d0, r4, r5
 800f6f4:	bd70      	pop	{r4, r5, r6, pc}
 800f6f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f6fa:	da08      	bge.n	800f70e <scalbn+0xb6>
 800f6fc:	2d00      	cmp	r5, #0
 800f6fe:	a10a      	add	r1, pc, #40	; (adr r1, 800f728 <scalbn+0xd0>)
 800f700:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f704:	dac0      	bge.n	800f688 <scalbn+0x30>
 800f706:	a10e      	add	r1, pc, #56	; (adr r1, 800f740 <scalbn+0xe8>)
 800f708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f70c:	e7bc      	b.n	800f688 <scalbn+0x30>
 800f70e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f712:	3236      	adds	r2, #54	; 0x36
 800f714:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f718:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f71c:	4620      	mov	r0, r4
 800f71e:	4b0c      	ldr	r3, [pc, #48]	; (800f750 <scalbn+0xf8>)
 800f720:	2200      	movs	r2, #0
 800f722:	e7d5      	b.n	800f6d0 <scalbn+0x78>
 800f724:	f3af 8000 	nop.w
 800f728:	c2f8f359 	.word	0xc2f8f359
 800f72c:	01a56e1f 	.word	0x01a56e1f
 800f730:	8800759c 	.word	0x8800759c
 800f734:	7e37e43c 	.word	0x7e37e43c
 800f738:	8800759c 	.word	0x8800759c
 800f73c:	fe37e43c 	.word	0xfe37e43c
 800f740:	c2f8f359 	.word	0xc2f8f359
 800f744:	81a56e1f 	.word	0x81a56e1f
 800f748:	43500000 	.word	0x43500000
 800f74c:	ffff3cb0 	.word	0xffff3cb0
 800f750:	3c900000 	.word	0x3c900000

0800f754 <with_errno>:
 800f754:	b570      	push	{r4, r5, r6, lr}
 800f756:	4604      	mov	r4, r0
 800f758:	460d      	mov	r5, r1
 800f75a:	4616      	mov	r6, r2
 800f75c:	f7fd fa7c 	bl	800cc58 <__errno>
 800f760:	4629      	mov	r1, r5
 800f762:	6006      	str	r6, [r0, #0]
 800f764:	4620      	mov	r0, r4
 800f766:	bd70      	pop	{r4, r5, r6, pc}

0800f768 <xflow>:
 800f768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f76a:	4614      	mov	r4, r2
 800f76c:	461d      	mov	r5, r3
 800f76e:	b108      	cbz	r0, 800f774 <xflow+0xc>
 800f770:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f774:	e9cd 2300 	strd	r2, r3, [sp]
 800f778:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f77c:	4620      	mov	r0, r4
 800f77e:	4629      	mov	r1, r5
 800f780:	f7f0 ff62 	bl	8000648 <__aeabi_dmul>
 800f784:	2222      	movs	r2, #34	; 0x22
 800f786:	b003      	add	sp, #12
 800f788:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f78c:	f7ff bfe2 	b.w	800f754 <with_errno>

0800f790 <__math_uflow>:
 800f790:	b508      	push	{r3, lr}
 800f792:	2200      	movs	r2, #0
 800f794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f798:	f7ff ffe6 	bl	800f768 <xflow>
 800f79c:	ec41 0b10 	vmov	d0, r0, r1
 800f7a0:	bd08      	pop	{r3, pc}

0800f7a2 <__math_oflow>:
 800f7a2:	b508      	push	{r3, lr}
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f7aa:	f7ff ffdd 	bl	800f768 <xflow>
 800f7ae:	ec41 0b10 	vmov	d0, r0, r1
 800f7b2:	bd08      	pop	{r3, pc}

0800f7b4 <__ieee754_sqrt>:
 800f7b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7b8:	ec55 4b10 	vmov	r4, r5, d0
 800f7bc:	4e67      	ldr	r6, [pc, #412]	; (800f95c <__ieee754_sqrt+0x1a8>)
 800f7be:	43ae      	bics	r6, r5
 800f7c0:	ee10 0a10 	vmov	r0, s0
 800f7c4:	ee10 2a10 	vmov	r2, s0
 800f7c8:	4629      	mov	r1, r5
 800f7ca:	462b      	mov	r3, r5
 800f7cc:	d10d      	bne.n	800f7ea <__ieee754_sqrt+0x36>
 800f7ce:	f7f0 ff3b 	bl	8000648 <__aeabi_dmul>
 800f7d2:	4602      	mov	r2, r0
 800f7d4:	460b      	mov	r3, r1
 800f7d6:	4620      	mov	r0, r4
 800f7d8:	4629      	mov	r1, r5
 800f7da:	f7f0 fd7f 	bl	80002dc <__adddf3>
 800f7de:	4604      	mov	r4, r0
 800f7e0:	460d      	mov	r5, r1
 800f7e2:	ec45 4b10 	vmov	d0, r4, r5
 800f7e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7ea:	2d00      	cmp	r5, #0
 800f7ec:	dc0b      	bgt.n	800f806 <__ieee754_sqrt+0x52>
 800f7ee:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f7f2:	4326      	orrs	r6, r4
 800f7f4:	d0f5      	beq.n	800f7e2 <__ieee754_sqrt+0x2e>
 800f7f6:	b135      	cbz	r5, 800f806 <__ieee754_sqrt+0x52>
 800f7f8:	f7f0 fd6e 	bl	80002d8 <__aeabi_dsub>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	460b      	mov	r3, r1
 800f800:	f7f1 f84c 	bl	800089c <__aeabi_ddiv>
 800f804:	e7eb      	b.n	800f7de <__ieee754_sqrt+0x2a>
 800f806:	1509      	asrs	r1, r1, #20
 800f808:	f000 808d 	beq.w	800f926 <__ieee754_sqrt+0x172>
 800f80c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f810:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f818:	07c9      	lsls	r1, r1, #31
 800f81a:	bf5c      	itt	pl
 800f81c:	005b      	lslpl	r3, r3, #1
 800f81e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f822:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f826:	bf58      	it	pl
 800f828:	0052      	lslpl	r2, r2, #1
 800f82a:	2500      	movs	r5, #0
 800f82c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f830:	1076      	asrs	r6, r6, #1
 800f832:	0052      	lsls	r2, r2, #1
 800f834:	f04f 0e16 	mov.w	lr, #22
 800f838:	46ac      	mov	ip, r5
 800f83a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f83e:	eb0c 0001 	add.w	r0, ip, r1
 800f842:	4298      	cmp	r0, r3
 800f844:	bfde      	ittt	le
 800f846:	1a1b      	suble	r3, r3, r0
 800f848:	eb00 0c01 	addle.w	ip, r0, r1
 800f84c:	186d      	addle	r5, r5, r1
 800f84e:	005b      	lsls	r3, r3, #1
 800f850:	f1be 0e01 	subs.w	lr, lr, #1
 800f854:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f858:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f85c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f860:	d1ed      	bne.n	800f83e <__ieee754_sqrt+0x8a>
 800f862:	4674      	mov	r4, lr
 800f864:	2720      	movs	r7, #32
 800f866:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f86a:	4563      	cmp	r3, ip
 800f86c:	eb01 000e 	add.w	r0, r1, lr
 800f870:	dc02      	bgt.n	800f878 <__ieee754_sqrt+0xc4>
 800f872:	d113      	bne.n	800f89c <__ieee754_sqrt+0xe8>
 800f874:	4290      	cmp	r0, r2
 800f876:	d811      	bhi.n	800f89c <__ieee754_sqrt+0xe8>
 800f878:	2800      	cmp	r0, #0
 800f87a:	eb00 0e01 	add.w	lr, r0, r1
 800f87e:	da57      	bge.n	800f930 <__ieee754_sqrt+0x17c>
 800f880:	f1be 0f00 	cmp.w	lr, #0
 800f884:	db54      	blt.n	800f930 <__ieee754_sqrt+0x17c>
 800f886:	f10c 0801 	add.w	r8, ip, #1
 800f88a:	eba3 030c 	sub.w	r3, r3, ip
 800f88e:	4290      	cmp	r0, r2
 800f890:	bf88      	it	hi
 800f892:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f896:	1a12      	subs	r2, r2, r0
 800f898:	440c      	add	r4, r1
 800f89a:	46c4      	mov	ip, r8
 800f89c:	005b      	lsls	r3, r3, #1
 800f89e:	3f01      	subs	r7, #1
 800f8a0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f8a4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f8a8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f8ac:	d1dd      	bne.n	800f86a <__ieee754_sqrt+0xb6>
 800f8ae:	4313      	orrs	r3, r2
 800f8b0:	d01b      	beq.n	800f8ea <__ieee754_sqrt+0x136>
 800f8b2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f960 <__ieee754_sqrt+0x1ac>
 800f8b6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f964 <__ieee754_sqrt+0x1b0>
 800f8ba:	e9da 0100 	ldrd	r0, r1, [sl]
 800f8be:	e9db 2300 	ldrd	r2, r3, [fp]
 800f8c2:	f7f0 fd09 	bl	80002d8 <__aeabi_dsub>
 800f8c6:	e9da 8900 	ldrd	r8, r9, [sl]
 800f8ca:	4602      	mov	r2, r0
 800f8cc:	460b      	mov	r3, r1
 800f8ce:	4640      	mov	r0, r8
 800f8d0:	4649      	mov	r1, r9
 800f8d2:	f7f1 f935 	bl	8000b40 <__aeabi_dcmple>
 800f8d6:	b140      	cbz	r0, 800f8ea <__ieee754_sqrt+0x136>
 800f8d8:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f8dc:	e9da 0100 	ldrd	r0, r1, [sl]
 800f8e0:	e9db 2300 	ldrd	r2, r3, [fp]
 800f8e4:	d126      	bne.n	800f934 <__ieee754_sqrt+0x180>
 800f8e6:	3501      	adds	r5, #1
 800f8e8:	463c      	mov	r4, r7
 800f8ea:	106a      	asrs	r2, r5, #1
 800f8ec:	0863      	lsrs	r3, r4, #1
 800f8ee:	07e9      	lsls	r1, r5, #31
 800f8f0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f8f4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f8f8:	bf48      	it	mi
 800f8fa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f8fe:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f902:	461c      	mov	r4, r3
 800f904:	e76d      	b.n	800f7e2 <__ieee754_sqrt+0x2e>
 800f906:	0ad3      	lsrs	r3, r2, #11
 800f908:	3815      	subs	r0, #21
 800f90a:	0552      	lsls	r2, r2, #21
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d0fa      	beq.n	800f906 <__ieee754_sqrt+0x152>
 800f910:	02dc      	lsls	r4, r3, #11
 800f912:	d50a      	bpl.n	800f92a <__ieee754_sqrt+0x176>
 800f914:	f1c1 0420 	rsb	r4, r1, #32
 800f918:	fa22 f404 	lsr.w	r4, r2, r4
 800f91c:	1e4d      	subs	r5, r1, #1
 800f91e:	408a      	lsls	r2, r1
 800f920:	4323      	orrs	r3, r4
 800f922:	1b41      	subs	r1, r0, r5
 800f924:	e772      	b.n	800f80c <__ieee754_sqrt+0x58>
 800f926:	4608      	mov	r0, r1
 800f928:	e7f0      	b.n	800f90c <__ieee754_sqrt+0x158>
 800f92a:	005b      	lsls	r3, r3, #1
 800f92c:	3101      	adds	r1, #1
 800f92e:	e7ef      	b.n	800f910 <__ieee754_sqrt+0x15c>
 800f930:	46e0      	mov	r8, ip
 800f932:	e7aa      	b.n	800f88a <__ieee754_sqrt+0xd6>
 800f934:	f7f0 fcd2 	bl	80002dc <__adddf3>
 800f938:	e9da 8900 	ldrd	r8, r9, [sl]
 800f93c:	4602      	mov	r2, r0
 800f93e:	460b      	mov	r3, r1
 800f940:	4640      	mov	r0, r8
 800f942:	4649      	mov	r1, r9
 800f944:	f7f1 f8f2 	bl	8000b2c <__aeabi_dcmplt>
 800f948:	b120      	cbz	r0, 800f954 <__ieee754_sqrt+0x1a0>
 800f94a:	1ca0      	adds	r0, r4, #2
 800f94c:	bf08      	it	eq
 800f94e:	3501      	addeq	r5, #1
 800f950:	3402      	adds	r4, #2
 800f952:	e7ca      	b.n	800f8ea <__ieee754_sqrt+0x136>
 800f954:	3401      	adds	r4, #1
 800f956:	f024 0401 	bic.w	r4, r4, #1
 800f95a:	e7c6      	b.n	800f8ea <__ieee754_sqrt+0x136>
 800f95c:	7ff00000 	.word	0x7ff00000
 800f960:	20000248 	.word	0x20000248
 800f964:	20000250 	.word	0x20000250

0800f968 <_init>:
 800f968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f96a:	bf00      	nop
 800f96c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f96e:	bc08      	pop	{r3}
 800f970:	469e      	mov	lr, r3
 800f972:	4770      	bx	lr

0800f974 <_fini>:
 800f974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f976:	bf00      	nop
 800f978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f97a:	bc08      	pop	{r3}
 800f97c:	469e      	mov	lr, r3
 800f97e:	4770      	bx	lr
