
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f71c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003668  0800f900  0800f900  0001f900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012f68  08012f68  00030244  2**0
                  CONTENTS
  4 .ARM          00000008  08012f68  08012f68  00022f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012f70  08012f70  00030244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012f70  08012f70  00022f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012f74  08012f74  00022f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08012f78  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000820  20000248  080131bc  00030248  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a68  080131bc  00030a68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00021a34  00000000  00000000  00030274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e97  00000000  00000000  00051ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d18  00000000  00000000  00055b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b30  00000000  00000000  00057858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a23  00000000  00000000  00059388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022a2c  00000000  00000000  0007cdab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e3b9a  00000000  00000000  0009f7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00183371  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000091ac  00000000  00000000  001833c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000248 	.word	0x20000248
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f8e4 	.word	0x0800f8e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000024c 	.word	0x2000024c
 800021c:	0800f8e4 	.word	0x0800f8e4

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b974 	b.w	8000fd8 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9d08      	ldr	r5, [sp, #32]
 8000d0e:	4604      	mov	r4, r0
 8000d10:	468e      	mov	lr, r1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d14d      	bne.n	8000db2 <__udivmoddi4+0xaa>
 8000d16:	428a      	cmp	r2, r1
 8000d18:	4694      	mov	ip, r2
 8000d1a:	d969      	bls.n	8000df0 <__udivmoddi4+0xe8>
 8000d1c:	fab2 f282 	clz	r2, r2
 8000d20:	b152      	cbz	r2, 8000d38 <__udivmoddi4+0x30>
 8000d22:	fa01 f302 	lsl.w	r3, r1, r2
 8000d26:	f1c2 0120 	rsb	r1, r2, #32
 8000d2a:	fa20 f101 	lsr.w	r1, r0, r1
 8000d2e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d32:	ea41 0e03 	orr.w	lr, r1, r3
 8000d36:	4094      	lsls	r4, r2
 8000d38:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d3c:	0c21      	lsrs	r1, r4, #16
 8000d3e:	fbbe f6f8 	udiv	r6, lr, r8
 8000d42:	fa1f f78c 	uxth.w	r7, ip
 8000d46:	fb08 e316 	mls	r3, r8, r6, lr
 8000d4a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d4e:	fb06 f107 	mul.w	r1, r6, r7
 8000d52:	4299      	cmp	r1, r3
 8000d54:	d90a      	bls.n	8000d6c <__udivmoddi4+0x64>
 8000d56:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d5e:	f080 811f 	bcs.w	8000fa0 <__udivmoddi4+0x298>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 811c 	bls.w	8000fa0 <__udivmoddi4+0x298>
 8000d68:	3e02      	subs	r6, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d74:	fb08 3310 	mls	r3, r8, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 f707 	mul.w	r7, r0, r7
 8000d80:	42a7      	cmp	r7, r4
 8000d82:	d90a      	bls.n	8000d9a <__udivmoddi4+0x92>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8c:	f080 810a 	bcs.w	8000fa4 <__udivmoddi4+0x29c>
 8000d90:	42a7      	cmp	r7, r4
 8000d92:	f240 8107 	bls.w	8000fa4 <__udivmoddi4+0x29c>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d9e:	1be4      	subs	r4, r4, r7
 8000da0:	2600      	movs	r6, #0
 8000da2:	b11d      	cbz	r5, 8000dac <__udivmoddi4+0xa4>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c5 4300 	strd	r4, r3, [r5]
 8000dac:	4631      	mov	r1, r6
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xc2>
 8000db6:	2d00      	cmp	r5, #0
 8000db8:	f000 80ef 	beq.w	8000f9a <__udivmoddi4+0x292>
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	e9c5 0100 	strd	r0, r1, [r5]
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f683 	clz	r6, r3
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	d14a      	bne.n	8000e68 <__udivmoddi4+0x160>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd4>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80f9 	bhi.w	8000fce <__udivmoddi4+0x2c6>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	469e      	mov	lr, r3
 8000de6:	2d00      	cmp	r5, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa4>
 8000dea:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa4>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xec>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 8092 	bne.w	8000f22 <__udivmoddi4+0x21a>
 8000dfe:	eba1 010c 	sub.w	r1, r1, ip
 8000e02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e06:	fa1f fe8c 	uxth.w	lr, ip
 8000e0a:	2601      	movs	r6, #1
 8000e0c:	0c20      	lsrs	r0, r4, #16
 8000e0e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e12:	fb07 1113 	mls	r1, r7, r3, r1
 8000e16:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1a:	fb0e f003 	mul.w	r0, lr, r3
 8000e1e:	4288      	cmp	r0, r1
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x12c>
 8000e22:	eb1c 0101 	adds.w	r1, ip, r1
 8000e26:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x12a>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	f200 80cb 	bhi.w	8000fc8 <__udivmoddi4+0x2c0>
 8000e32:	4643      	mov	r3, r8
 8000e34:	1a09      	subs	r1, r1, r0
 8000e36:	b2a4      	uxth	r4, r4
 8000e38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e3c:	fb07 1110 	mls	r1, r7, r0, r1
 8000e40:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e44:	fb0e fe00 	mul.w	lr, lr, r0
 8000e48:	45a6      	cmp	lr, r4
 8000e4a:	d908      	bls.n	8000e5e <__udivmoddi4+0x156>
 8000e4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e50:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e54:	d202      	bcs.n	8000e5c <__udivmoddi4+0x154>
 8000e56:	45a6      	cmp	lr, r4
 8000e58:	f200 80bb 	bhi.w	8000fd2 <__udivmoddi4+0x2ca>
 8000e5c:	4608      	mov	r0, r1
 8000e5e:	eba4 040e 	sub.w	r4, r4, lr
 8000e62:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e66:	e79c      	b.n	8000da2 <__udivmoddi4+0x9a>
 8000e68:	f1c6 0720 	rsb	r7, r6, #32
 8000e6c:	40b3      	lsls	r3, r6
 8000e6e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e72:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e76:	fa20 f407 	lsr.w	r4, r0, r7
 8000e7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e7e:	431c      	orrs	r4, r3
 8000e80:	40f9      	lsrs	r1, r7
 8000e82:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e86:	fa00 f306 	lsl.w	r3, r0, r6
 8000e8a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e8e:	0c20      	lsrs	r0, r4, #16
 8000e90:	fa1f fe8c 	uxth.w	lr, ip
 8000e94:	fb09 1118 	mls	r1, r9, r8, r1
 8000e98:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e9c:	fb08 f00e 	mul.w	r0, r8, lr
 8000ea0:	4288      	cmp	r0, r1
 8000ea2:	fa02 f206 	lsl.w	r2, r2, r6
 8000ea6:	d90b      	bls.n	8000ec0 <__udivmoddi4+0x1b8>
 8000ea8:	eb1c 0101 	adds.w	r1, ip, r1
 8000eac:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eb0:	f080 8088 	bcs.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eb4:	4288      	cmp	r0, r1
 8000eb6:	f240 8085 	bls.w	8000fc4 <__udivmoddi4+0x2bc>
 8000eba:	f1a8 0802 	sub.w	r8, r8, #2
 8000ebe:	4461      	add	r1, ip
 8000ec0:	1a09      	subs	r1, r1, r0
 8000ec2:	b2a4      	uxth	r4, r4
 8000ec4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ec8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ecc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ed0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ed4:	458e      	cmp	lr, r1
 8000ed6:	d908      	bls.n	8000eea <__udivmoddi4+0x1e2>
 8000ed8:	eb1c 0101 	adds.w	r1, ip, r1
 8000edc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ee0:	d26c      	bcs.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee2:	458e      	cmp	lr, r1
 8000ee4:	d96a      	bls.n	8000fbc <__udivmoddi4+0x2b4>
 8000ee6:	3802      	subs	r0, #2
 8000ee8:	4461      	add	r1, ip
 8000eea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000eee:	fba0 9402 	umull	r9, r4, r0, r2
 8000ef2:	eba1 010e 	sub.w	r1, r1, lr
 8000ef6:	42a1      	cmp	r1, r4
 8000ef8:	46c8      	mov	r8, r9
 8000efa:	46a6      	mov	lr, r4
 8000efc:	d356      	bcc.n	8000fac <__udivmoddi4+0x2a4>
 8000efe:	d053      	beq.n	8000fa8 <__udivmoddi4+0x2a0>
 8000f00:	b15d      	cbz	r5, 8000f1a <__udivmoddi4+0x212>
 8000f02:	ebb3 0208 	subs.w	r2, r3, r8
 8000f06:	eb61 010e 	sbc.w	r1, r1, lr
 8000f0a:	fa01 f707 	lsl.w	r7, r1, r7
 8000f0e:	fa22 f306 	lsr.w	r3, r2, r6
 8000f12:	40f1      	lsrs	r1, r6
 8000f14:	431f      	orrs	r7, r3
 8000f16:	e9c5 7100 	strd	r7, r1, [r5]
 8000f1a:	2600      	movs	r6, #0
 8000f1c:	4631      	mov	r1, r6
 8000f1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f22:	f1c2 0320 	rsb	r3, r2, #32
 8000f26:	40d8      	lsrs	r0, r3
 8000f28:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f2c:	fa21 f303 	lsr.w	r3, r1, r3
 8000f30:	4091      	lsls	r1, r2
 8000f32:	4301      	orrs	r1, r0
 8000f34:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f38:	fa1f fe8c 	uxth.w	lr, ip
 8000f3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f40:	fb07 3610 	mls	r6, r7, r0, r3
 8000f44:	0c0b      	lsrs	r3, r1, #16
 8000f46:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f4a:	fb00 f60e 	mul.w	r6, r0, lr
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	fa04 f402 	lsl.w	r4, r4, r2
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0x260>
 8000f56:	eb1c 0303 	adds.w	r3, ip, r3
 8000f5a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f5e:	d22f      	bcs.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f60:	429e      	cmp	r6, r3
 8000f62:	d92d      	bls.n	8000fc0 <__udivmoddi4+0x2b8>
 8000f64:	3802      	subs	r0, #2
 8000f66:	4463      	add	r3, ip
 8000f68:	1b9b      	subs	r3, r3, r6
 8000f6a:	b289      	uxth	r1, r1
 8000f6c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f70:	fb07 3316 	mls	r3, r7, r6, r3
 8000f74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f78:	fb06 f30e 	mul.w	r3, r6, lr
 8000f7c:	428b      	cmp	r3, r1
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x28a>
 8000f80:	eb1c 0101 	adds.w	r1, ip, r1
 8000f84:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f88:	d216      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d914      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f8e:	3e02      	subs	r6, #2
 8000f90:	4461      	add	r1, ip
 8000f92:	1ac9      	subs	r1, r1, r3
 8000f94:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f98:	e738      	b.n	8000e0c <__udivmoddi4+0x104>
 8000f9a:	462e      	mov	r6, r5
 8000f9c:	4628      	mov	r0, r5
 8000f9e:	e705      	b.n	8000dac <__udivmoddi4+0xa4>
 8000fa0:	4606      	mov	r6, r0
 8000fa2:	e6e3      	b.n	8000d6c <__udivmoddi4+0x64>
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	e6f8      	b.n	8000d9a <__udivmoddi4+0x92>
 8000fa8:	454b      	cmp	r3, r9
 8000faa:	d2a9      	bcs.n	8000f00 <__udivmoddi4+0x1f8>
 8000fac:	ebb9 0802 	subs.w	r8, r9, r2
 8000fb0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fb4:	3801      	subs	r0, #1
 8000fb6:	e7a3      	b.n	8000f00 <__udivmoddi4+0x1f8>
 8000fb8:	4646      	mov	r6, r8
 8000fba:	e7ea      	b.n	8000f92 <__udivmoddi4+0x28a>
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	e794      	b.n	8000eea <__udivmoddi4+0x1e2>
 8000fc0:	4640      	mov	r0, r8
 8000fc2:	e7d1      	b.n	8000f68 <__udivmoddi4+0x260>
 8000fc4:	46d0      	mov	r8, sl
 8000fc6:	e77b      	b.n	8000ec0 <__udivmoddi4+0x1b8>
 8000fc8:	3b02      	subs	r3, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	e732      	b.n	8000e34 <__udivmoddi4+0x12c>
 8000fce:	4630      	mov	r0, r6
 8000fd0:	e709      	b.n	8000de6 <__udivmoddi4+0xde>
 8000fd2:	4464      	add	r4, ip
 8000fd4:	3802      	subs	r0, #2
 8000fd6:	e742      	b.n	8000e5e <__udivmoddi4+0x156>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <HAL_UART_TxCpltCallback>:


PID_TypeDef TPID;
double Temp, PIDOut, TempSetpoint;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	txDone = true;
 8000fe4:	4b04      	ldr	r3, [pc, #16]	; (8000ff8 <HAL_UART_TxCpltCallback+0x1c>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	701a      	strb	r2, [r3, #0]
}
 8000fea:	bf00      	nop
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	20000018 	.word	0x20000018

08000ffc <get_mean_ADC_reading>:

//Returns the average of 100 readings of the index+4*n value in the adc1_buf vector
float get_mean_ADC_reading(uint8_t index){
 8000ffc:	b480      	push	{r7}
 8000ffe:	b085      	sub	sp, #20
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	71fb      	strb	r3, [r7, #7]
	ADC_filter_Mean = 0;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <get_mean_ADC_reading+0x68>)
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
	for(int n=index;n<400;n=n+4){
 800100e:	79fb      	ldrb	r3, [r7, #7]
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	e012      	b.n	800103a <get_mean_ADC_reading+0x3e>
		ADC_filter_Mean += adc1_buf[n];
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <get_mean_ADC_reading+0x6c>)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800101c:	ee07 3a90 	vmov	s15, r3
 8001020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <get_mean_ADC_reading+0x68>)
 8001026:	edd3 7a00 	vldr	s15, [r3]
 800102a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800102e:	4b0d      	ldr	r3, [pc, #52]	; (8001064 <get_mean_ADC_reading+0x68>)
 8001030:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<400;n=n+4){
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	3304      	adds	r3, #4
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001040:	dbe8      	blt.n	8001014 <get_mean_ADC_reading+0x18>
	}
	return ADC_filter_Mean/100.0;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <get_mean_ADC_reading+0x68>)
 8001044:	edd3 7a00 	vldr	s15, [r3]
 8001048:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800106c <get_mean_ADC_reading+0x70>
 800104c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001050:	eef0 7a66 	vmov.f32	s15, s13
}
 8001054:	eeb0 0a67 	vmov.f32	s0, s15
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	200002b4 	.word	0x200002b4
 8001068:	200002b8 	.word	0x200002b8
 800106c:	42c80000 	.word	0x42c80000

08001070 <get_busVoltage>:

void get_busVoltage(){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	af00      	add	r7, sp, #0
	//Index 3 is bus Voltage
	sensorValues.busVoltage = Moving_Average_Compute(get_mean_ADC_reading(3), &inp_voltage_filterStruct)*voltageCompensationConstant;
 8001074:	2003      	movs	r0, #3
 8001076:	f7ff ffc1 	bl	8000ffc <get_mean_ADC_reading>
 800107a:	eef0 7a40 	vmov.f32	s15, s0
 800107e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001082:	490e      	ldr	r1, [pc, #56]	; (80010bc <get_busVoltage+0x4c>)
 8001084:	ee17 0a90 	vmov	r0, s15
 8001088:	f001 faf0 	bl	800266c <Moving_Average_Compute>
 800108c:	ec55 4b10 	vmov	r4, r5, d0
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <get_busVoltage+0x50>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fa7f 	bl	8000598 <__aeabi_f2d>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4620      	mov	r0, r4
 80010a0:	4629      	mov	r1, r5
 80010a2:	f7ff fad1 	bl	8000648 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fdc3 	bl	8000c38 <__aeabi_d2f>
 80010b2:	4603      	mov	r3, r0
 80010b4:	4a03      	ldr	r2, [pc, #12]	; (80010c4 <get_busVoltage+0x54>)
 80010b6:	6113      	str	r3, [r2, #16]
}
 80010b8:	bf00      	nop
 80010ba:	bdb0      	pop	{r4, r5, r7, pc}
 80010bc:	20000648 	.word	0x20000648
 80010c0:	20000020 	.word	0x20000020
 80010c4:	200005e0 	.word	0x200005e0

080010c8 <get_act_temp>:

void get_act_temp(){
 80010c8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010cc:	af00      	add	r7, sp, #0
	//Index 0 is bus Voltage
	TC_temperature_temp = Moving_Average_Compute(get_mean_ADC_reading(0), &act_temp_filterStruct);
 80010ce:	2000      	movs	r0, #0
 80010d0:	f7ff ff94 	bl	8000ffc <get_mean_ADC_reading>
 80010d4:	eef0 7a40 	vmov.f32	s15, s0
 80010d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010dc:	4984      	ldr	r1, [pc, #528]	; (80012f0 <get_act_temp+0x228>)
 80010de:	ee17 0a90 	vmov	r0, s15
 80010e2:	f001 fac3 	bl	800266c <Moving_Average_Compute>
 80010e6:	ec53 2b10 	vmov	r2, r3, d0
 80010ea:	4610      	mov	r0, r2
 80010ec:	4619      	mov	r1, r3
 80010ee:	f7ff fda3 	bl	8000c38 <__aeabi_d2f>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4a7f      	ldr	r2, [pc, #508]	; (80012f4 <get_act_temp+0x22c>)
 80010f6:	6013      	str	r3, [r2, #0]

	if(handle == T210){
 80010f8:	4b7f      	ldr	r3, [pc, #508]	; (80012f8 <get_act_temp+0x230>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d168      	bne.n	80011d2 <get_act_temp+0x10a>
		sensorValues.act_temp = pow(TC_temperature_temp, 3)*TCCompensationConstant_x3_T210 + pow(TC_temperature_temp, 2)*TCCompensationConstant_x2_T210  +  	TC_temperature_temp*TCCompensationConstant_x1_T210  +  TCCompensationConstant_x0_T210;
 8001100:	4b7c      	ldr	r3, [pc, #496]	; (80012f4 <get_act_temp+0x22c>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa47 	bl	8000598 <__aeabi_f2d>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	ed9f 1b72 	vldr	d1, [pc, #456]	; 80012d8 <get_act_temp+0x210>
 8001112:	ec43 2b10 	vmov	d0, r2, r3
 8001116:	f00d fccb 	bl	800eab0 <pow>
 800111a:	ec55 4b10 	vmov	r4, r5, d0
 800111e:	4b77      	ldr	r3, [pc, #476]	; (80012fc <get_act_temp+0x234>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fa38 	bl	8000598 <__aeabi_f2d>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff fa8a 	bl	8000648 <__aeabi_dmul>
 8001134:	4602      	mov	r2, r0
 8001136:	460b      	mov	r3, r1
 8001138:	4614      	mov	r4, r2
 800113a:	461d      	mov	r5, r3
 800113c:	4b6d      	ldr	r3, [pc, #436]	; (80012f4 <get_act_temp+0x22c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fa29 	bl	8000598 <__aeabi_f2d>
 8001146:	4602      	mov	r2, r0
 8001148:	460b      	mov	r3, r1
 800114a:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80012e0 <get_act_temp+0x218>
 800114e:	ec43 2b10 	vmov	d0, r2, r3
 8001152:	f00d fcad 	bl	800eab0 <pow>
 8001156:	ec59 8b10 	vmov	r8, r9, d0
 800115a:	4b69      	ldr	r3, [pc, #420]	; (8001300 <get_act_temp+0x238>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fa1a 	bl	8000598 <__aeabi_f2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4640      	mov	r0, r8
 800116a:	4649      	mov	r1, r9
 800116c:	f7ff fa6c 	bl	8000648 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4620      	mov	r0, r4
 8001176:	4629      	mov	r1, r5
 8001178:	f7ff f8b0 	bl	80002dc <__adddf3>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4614      	mov	r4, r2
 8001182:	461d      	mov	r5, r3
 8001184:	4b5b      	ldr	r3, [pc, #364]	; (80012f4 <get_act_temp+0x22c>)
 8001186:	ed93 7a00 	vldr	s14, [r3]
 800118a:	4b5e      	ldr	r3, [pc, #376]	; (8001304 <get_act_temp+0x23c>)
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001194:	ee17 0a90 	vmov	r0, s15
 8001198:	f7ff f9fe 	bl	8000598 <__aeabi_f2d>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff f89a 	bl	80002dc <__adddf3>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4614      	mov	r4, r2
 80011ae:	461d      	mov	r5, r3
 80011b0:	4b55      	ldr	r3, [pc, #340]	; (8001308 <get_act_temp+0x240>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9ef 	bl	8000598 <__aeabi_f2d>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4620      	mov	r0, r4
 80011c0:	4629      	mov	r1, r5
 80011c2:	f7ff f88b 	bl	80002dc <__adddf3>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4950      	ldr	r1, [pc, #320]	; (800130c <get_act_temp+0x244>)
 80011cc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80011d0:	e06b      	b.n	80012aa <get_act_temp+0x1e2>
	}
	else if(handle == T245){
 80011d2:	4b49      	ldr	r3, [pc, #292]	; (80012f8 <get_act_temp+0x230>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d167      	bne.n	80012aa <get_act_temp+0x1e2>
		sensorValues.act_temp = pow(TC_temperature_temp, 3)*TCCompensationConstant_x3_T245 + pow(TC_temperature_temp, 2)*TCCompensationConstant_x2_T245  +  	TC_temperature_temp*TCCompensationConstant_x1_T245  +  TCCompensationConstant_x0_T245;
 80011da:	4b46      	ldr	r3, [pc, #280]	; (80012f4 <get_act_temp+0x22c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff f9da 	bl	8000598 <__aeabi_f2d>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 80012d8 <get_act_temp+0x210>
 80011ec:	ec43 2b10 	vmov	d0, r2, r3
 80011f0:	f00d fc5e 	bl	800eab0 <pow>
 80011f4:	ec55 4b10 	vmov	r4, r5, d0
 80011f8:	4b45      	ldr	r3, [pc, #276]	; (8001310 <get_act_temp+0x248>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9cb 	bl	8000598 <__aeabi_f2d>
 8001202:	4602      	mov	r2, r0
 8001204:	460b      	mov	r3, r1
 8001206:	4620      	mov	r0, r4
 8001208:	4629      	mov	r1, r5
 800120a:	f7ff fa1d 	bl	8000648 <__aeabi_dmul>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	4614      	mov	r4, r2
 8001214:	461d      	mov	r5, r3
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <get_act_temp+0x22c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f9bc 	bl	8000598 <__aeabi_f2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	ed9f 1b2e 	vldr	d1, [pc, #184]	; 80012e0 <get_act_temp+0x218>
 8001228:	ec43 2b10 	vmov	d0, r2, r3
 800122c:	f00d fc40 	bl	800eab0 <pow>
 8001230:	ec59 8b10 	vmov	r8, r9, d0
 8001234:	4b37      	ldr	r3, [pc, #220]	; (8001314 <get_act_temp+0x24c>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff f9ad 	bl	8000598 <__aeabi_f2d>
 800123e:	4602      	mov	r2, r0
 8001240:	460b      	mov	r3, r1
 8001242:	4640      	mov	r0, r8
 8001244:	4649      	mov	r1, r9
 8001246:	f7ff f9ff 	bl	8000648 <__aeabi_dmul>
 800124a:	4602      	mov	r2, r0
 800124c:	460b      	mov	r3, r1
 800124e:	4620      	mov	r0, r4
 8001250:	4629      	mov	r1, r5
 8001252:	f7ff f843 	bl	80002dc <__adddf3>
 8001256:	4602      	mov	r2, r0
 8001258:	460b      	mov	r3, r1
 800125a:	4614      	mov	r4, r2
 800125c:	461d      	mov	r5, r3
 800125e:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <get_act_temp+0x22c>)
 8001260:	ed93 7a00 	vldr	s14, [r3]
 8001264:	4b2c      	ldr	r3, [pc, #176]	; (8001318 <get_act_temp+0x250>)
 8001266:	edd3 7a00 	vldr	s15, [r3]
 800126a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800126e:	ee17 0a90 	vmov	r0, s15
 8001272:	f7ff f991 	bl	8000598 <__aeabi_f2d>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	4620      	mov	r0, r4
 800127c:	4629      	mov	r1, r5
 800127e:	f7ff f82d 	bl	80002dc <__adddf3>
 8001282:	4602      	mov	r2, r0
 8001284:	460b      	mov	r3, r1
 8001286:	4614      	mov	r4, r2
 8001288:	461d      	mov	r5, r3
 800128a:	4b24      	ldr	r3, [pc, #144]	; (800131c <get_act_temp+0x254>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff f982 	bl	8000598 <__aeabi_f2d>
 8001294:	4602      	mov	r2, r0
 8001296:	460b      	mov	r3, r1
 8001298:	4620      	mov	r0, r4
 800129a:	4629      	mov	r1, r5
 800129c:	f7ff f81e 	bl	80002dc <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4919      	ldr	r1, [pc, #100]	; (800130c <get_act_temp+0x244>)
 80012a6:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(sensorValues.act_temp > 999){
 80012aa:	4b18      	ldr	r3, [pc, #96]	; (800130c <get_act_temp+0x244>)
 80012ac:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80012b0:	a30d      	add	r3, pc, #52	; (adr r3, 80012e8 <get_act_temp+0x220>)
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f7ff fc57 	bl	8000b68 <__aeabi_dcmpgt>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d100      	bne.n	80012c2 <get_act_temp+0x1fa>
		sensorValues.act_temp = 999;
	}
}
 80012c0:	e005      	b.n	80012ce <get_act_temp+0x206>
		sensorValues.act_temp = 999;
 80012c2:	4912      	ldr	r1, [pc, #72]	; (800130c <get_act_temp+0x244>)
 80012c4:	a308      	add	r3, pc, #32	; (adr r3, 80012e8 <get_act_temp+0x220>)
 80012c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ca:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 80012ce:	bf00      	nop
 80012d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012d4:	f3af 8000 	nop.w
 80012d8:	00000000 	.word	0x00000000
 80012dc:	40080000 	.word	0x40080000
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40000000 	.word	0x40000000
 80012e8:	00000000 	.word	0x00000000
 80012ec:	408f3800 	.word	0x408f3800
 80012f0:	20000610 	.word	0x20000610
 80012f4:	200005d8 	.word	0x200005d8
 80012f8:	20000264 	.word	0x20000264
 80012fc:	20000024 	.word	0x20000024
 8001300:	20000028 	.word	0x20000028
 8001304:	2000002c 	.word	0x2000002c
 8001308:	20000030 	.word	0x20000030
 800130c:	200005e0 	.word	0x200005e0
 8001310:	20000034 	.word	0x20000034
 8001314:	20000038 	.word	0x20000038
 8001318:	2000003c 	.word	0x2000003c
 800131c:	20000040 	.word	0x20000040

08001320 <get_ambient_temp>:

void get_ambient_temp(){
 8001320:	b5b0      	push	{r4, r5, r7, lr}
 8001322:	af00      	add	r7, sp, #0
	//Index 2 is PCB temp
	sensorValues.amb_temp = ((Moving_Average_Compute(get_mean_ADC_reading(2), &amb_temp_filterStruct)*ambTempCompensationConstant)-0.4)/0.0195;
 8001324:	2002      	movs	r0, #2
 8001326:	f7ff fe69 	bl	8000ffc <get_mean_ADC_reading>
 800132a:	eef0 7a40 	vmov.f32	s15, s0
 800132e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001332:	491b      	ldr	r1, [pc, #108]	; (80013a0 <get_ambient_temp+0x80>)
 8001334:	ee17 0a90 	vmov	r0, s15
 8001338:	f001 f998 	bl	800266c <Moving_Average_Compute>
 800133c:	ec55 4b10 	vmov	r4, r5, d0
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <get_ambient_temp+0x84>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff f927 	bl	8000598 <__aeabi_f2d>
 800134a:	4602      	mov	r2, r0
 800134c:	460b      	mov	r3, r1
 800134e:	4620      	mov	r0, r4
 8001350:	4629      	mov	r1, r5
 8001352:	f7ff f979 	bl	8000648 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	a30c      	add	r3, pc, #48	; (adr r3, 8001390 <get_ambient_temp+0x70>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7fe ffb8 	bl	80002d8 <__aeabi_dsub>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	a309      	add	r3, pc, #36	; (adr r3, 8001398 <get_ambient_temp+0x78>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff fa91 	bl	800089c <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4610      	mov	r0, r2
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fc59 	bl	8000c38 <__aeabi_d2f>
 8001386:	4603      	mov	r3, r0
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <get_ambient_temp+0x88>)
 800138a:	61d3      	str	r3, [r2, #28]
	//• Positive slope sensor gain, offset (typical):
	//– 19.5 mV/°C, 400 mV at 0°C (TMP236-Q1) From data sheet
}
 800138c:	bf00      	nop
 800138e:	bdb0      	pop	{r4, r5, r7, pc}
 8001390:	9999999a 	.word	0x9999999a
 8001394:	3fd99999 	.word	0x3fd99999
 8001398:	d916872b 	.word	0xd916872b
 800139c:	3f93f7ce 	.word	0x3f93f7ce
 80013a0:	2000062c 	.word	0x2000062c
 80013a4:	20000044 	.word	0x20000044
 80013a8:	200005e0 	.word	0x200005e0

080013ac <debugPrint>:

void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
    txDone = false;
 80013b6:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <debugPrint+0x38>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 80013bc:	6838      	ldr	r0, [r7, #0]
 80013be:	f7fe ff2f 	bl	8000220 <strlen>
 80013c2:	4603      	mov	r3, r0
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	461a      	mov	r2, r3
 80013c8:	6839      	ldr	r1, [r7, #0]
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f007 fef8 	bl	80091c0 <HAL_UART_Transmit_IT>
	while(!txDone);
 80013d0:	bf00      	nop
 80013d2:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <debugPrint+0x38>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0fb      	beq.n	80013d2 <debugPrint+0x26>
}
 80013da:	bf00      	nop
 80013dc:	bf00      	nop
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	20000018 	.word	0x20000018

080013e8 <init_OLED>:

void init_OLED(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af02      	add	r7, sp, #8
	if((BlackImage = (UBYTE *)malloc(Imagesize)) == NULL) {
 80013ee:	4b1b      	ldr	r3, [pc, #108]	; (800145c <init_OLED+0x74>)
 80013f0:	881b      	ldrh	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f00a fbe2 	bl	800bbbc <malloc>
 80013f8:	4603      	mov	r3, r0
 80013fa:	461a      	mov	r2, r3
 80013fc:	4b18      	ldr	r3, [pc, #96]	; (8001460 <init_OLED+0x78>)
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <init_OLED+0x78>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d025      	beq.n	8001454 <init_OLED+0x6c>
		return;
	}
	Paint_NewImage(BlackImage, OLED_1in5_WIDTH, OLED_1in5_HEIGHT, 270, BLACK);
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <init_OLED+0x78>)
 800140a:	6818      	ldr	r0, [r3, #0]
 800140c:	2300      	movs	r3, #0
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001414:	2280      	movs	r2, #128	; 0x80
 8001416:	2180      	movs	r1, #128	; 0x80
 8001418:	f009 fada 	bl	800a9d0 <Paint_NewImage>
	Paint_SetScale(16);
 800141c:	2010      	movs	r0, #16
 800141e:	f009 fb3d 	bl	800aa9c <Paint_SetScale>
	Paint_SelectImage(BlackImage);
 8001422:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <init_OLED+0x78>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f009 fb28 	bl	800aa7c <Paint_SelectImage>
	Driver_Delay_ms(100);
 800142c:	2064      	movs	r0, #100	; 0x64
 800142e:	f009 fac3 	bl	800a9b8 <Driver_Delay_ms>
	Paint_Clear(BLACK);
 8001432:	2000      	movs	r0, #0
 8001434:	f009 fd1c 	bl	800ae70 <Paint_Clear>

	// Show image
	OLED_1in5_Display(BlackImage);
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <init_OLED+0x78>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4618      	mov	r0, r3
 800143e:	f00a fb64 	bl	800bb0a <OLED_1in5_Display>

	OLED_1in5_Init();
 8001442:	f00a fafb 	bl	800ba3c <OLED_1in5_Init>
	Driver_Delay_ms(500);
 8001446:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800144a:	f009 fab5 	bl	800a9b8 <Driver_Delay_ms>
	OLED_1in5_Clear();
 800144e:	f00a fb41 	bl	800bad4 <OLED_1in5_Clear>
 8001452:	e000      	b.n	8001456 <init_OLED+0x6e>
		return;
 8001454:	bf00      	nop
}
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000000 	.word	0x20000000
 8001460:	20000268 	.word	0x20000268

08001464 <update_OLED>:

void update_OLED(){
 8001464:	b580      	push	{r7, lr}
 8001466:	b084      	sub	sp, #16
 8001468:	af04      	add	r7, sp, #16
	Paint_DrawString_EN(0, 0, " AxxSolder ", &Font16, 0x00, 0xff);
 800146a:	23ff      	movs	r3, #255	; 0xff
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	2300      	movs	r3, #0
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	4ba9      	ldr	r3, [pc, #676]	; (8001718 <update_OLED+0x2b4>)
 8001474:	4aa9      	ldr	r2, [pc, #676]	; (800171c <update_OLED+0x2b8>)
 8001476:	2100      	movs	r1, #0
 8001478:	2000      	movs	r0, #0
 800147a:	f00a f9c3 	bl	800b804 <Paint_DrawString_EN>
    Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 800147e:	2300      	movs	r3, #0
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2302      	movs	r3, #2
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	2310      	movs	r3, #16
 800148e:	227f      	movs	r2, #127	; 0x7f
 8001490:	2110      	movs	r1, #16
 8001492:	2000      	movs	r0, #0
 8001494:	f009 fe42 	bl	800b11c <Paint_DrawLine>

	Paint_DrawString_EN(3, 20, "Set temp", &Font16, 0x00, 0xff);
 8001498:	23ff      	movs	r3, #255	; 0xff
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	2300      	movs	r3, #0
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	4b9d      	ldr	r3, [pc, #628]	; (8001718 <update_OLED+0x2b4>)
 80014a2:	4a9f      	ldr	r2, [pc, #636]	; (8001720 <update_OLED+0x2bc>)
 80014a4:	2114      	movs	r1, #20
 80014a6:	2003      	movs	r0, #3
 80014a8:	f00a f9ac 	bl	800b804 <Paint_DrawString_EN>
	memset(&buffer, '\0', sizeof(buffer));
 80014ac:	2228      	movs	r2, #40	; 0x28
 80014ae:	2100      	movs	r1, #0
 80014b0:	489c      	ldr	r0, [pc, #624]	; (8001724 <update_OLED+0x2c0>)
 80014b2:	f00a fb8b 	bl	800bbcc <memset>
	sprintf(buffer, "%.f", sensorValues.set_temp);
 80014b6:	4b9c      	ldr	r3, [pc, #624]	; (8001728 <update_OLED+0x2c4>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	499b      	ldr	r1, [pc, #620]	; (800172c <update_OLED+0x2c8>)
 80014be:	4899      	ldr	r0, [pc, #612]	; (8001724 <update_OLED+0x2c0>)
 80014c0:	f00b f974 	bl	800c7ac <siprintf>
	Paint_DrawString_EN(3, 32, buffer, &Font24,  0x0, 0xff);
 80014c4:	23ff      	movs	r3, #255	; 0xff
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	2300      	movs	r3, #0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	4b98      	ldr	r3, [pc, #608]	; (8001730 <update_OLED+0x2cc>)
 80014ce:	4a95      	ldr	r2, [pc, #596]	; (8001724 <update_OLED+0x2c0>)
 80014d0:	2120      	movs	r1, #32
 80014d2:	2003      	movs	r0, #3
 80014d4:	f00a f996 	bl	800b804 <Paint_DrawString_EN>
	Paint_DrawCircle(67, 37, 2, WHITE, 1, DRAW_FILL_EMPTY);
 80014d8:	2300      	movs	r3, #0
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	2301      	movs	r3, #1
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e4:	2202      	movs	r2, #2
 80014e6:	2125      	movs	r1, #37	; 0x25
 80014e8:	2043      	movs	r0, #67	; 0x43
 80014ea:	f009 ff55 	bl	800b398 <Paint_DrawCircle>
	Paint_DrawString_EN(70, 32, "C", &Font24,  0x0, 0xff);
 80014ee:	23ff      	movs	r3, #255	; 0xff
 80014f0:	9301      	str	r3, [sp, #4]
 80014f2:	2300      	movs	r3, #0
 80014f4:	9300      	str	r3, [sp, #0]
 80014f6:	4b8e      	ldr	r3, [pc, #568]	; (8001730 <update_OLED+0x2cc>)
 80014f8:	4a8e      	ldr	r2, [pc, #568]	; (8001734 <update_OLED+0x2d0>)
 80014fa:	2120      	movs	r1, #32
 80014fc:	2046      	movs	r0, #70	; 0x46
 80014fe:	f00a f981 	bl	800b804 <Paint_DrawString_EN>

	Paint_DrawString_EN(3, 58, "Act temp", &Font16, 0x00, 0xff);
 8001502:	23ff      	movs	r3, #255	; 0xff
 8001504:	9301      	str	r3, [sp, #4]
 8001506:	2300      	movs	r3, #0
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	4b83      	ldr	r3, [pc, #524]	; (8001718 <update_OLED+0x2b4>)
 800150c:	4a8a      	ldr	r2, [pc, #552]	; (8001738 <update_OLED+0x2d4>)
 800150e:	213a      	movs	r1, #58	; 0x3a
 8001510:	2003      	movs	r0, #3
 8001512:	f00a f977 	bl	800b804 <Paint_DrawString_EN>
	memset(&buffer, '\0', sizeof(buffer));
 8001516:	2228      	movs	r2, #40	; 0x28
 8001518:	2100      	movs	r1, #0
 800151a:	4882      	ldr	r0, [pc, #520]	; (8001724 <update_OLED+0x2c0>)
 800151c:	f00a fb56 	bl	800bbcc <memset>

	if(sensorValues.act_temp >= 600){
 8001520:	4b81      	ldr	r3, [pc, #516]	; (8001728 <update_OLED+0x2c4>)
 8001522:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001526:	f04f 0200 	mov.w	r2, #0
 800152a:	4b84      	ldr	r3, [pc, #528]	; (800173c <update_OLED+0x2d8>)
 800152c:	f7ff fb12 	bl	8000b54 <__aeabi_dcmpge>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00a      	beq.n	800154c <update_OLED+0xe8>
		Paint_DrawString_EN(3, 70, "---", &Font24, 0x0, 0xff);
 8001536:	23ff      	movs	r3, #255	; 0xff
 8001538:	9301      	str	r3, [sp, #4]
 800153a:	2300      	movs	r3, #0
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	4b7c      	ldr	r3, [pc, #496]	; (8001730 <update_OLED+0x2cc>)
 8001540:	4a7f      	ldr	r2, [pc, #508]	; (8001740 <update_OLED+0x2dc>)
 8001542:	2146      	movs	r1, #70	; 0x46
 8001544:	2003      	movs	r0, #3
 8001546:	f00a f95d 	bl	800b804 <Paint_DrawString_EN>
 800154a:	e010      	b.n	800156e <update_OLED+0x10a>
	}
	else{
		sprintf(buffer, "%.f", sensorValues.act_temp);
 800154c:	4b76      	ldr	r3, [pc, #472]	; (8001728 <update_OLED+0x2c4>)
 800154e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001552:	4976      	ldr	r1, [pc, #472]	; (800172c <update_OLED+0x2c8>)
 8001554:	4873      	ldr	r0, [pc, #460]	; (8001724 <update_OLED+0x2c0>)
 8001556:	f00b f929 	bl	800c7ac <siprintf>
		Paint_DrawString_EN(3, 70, buffer, &Font24, 0x0, 0xff);
 800155a:	23ff      	movs	r3, #255	; 0xff
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	2300      	movs	r3, #0
 8001560:	9300      	str	r3, [sp, #0]
 8001562:	4b73      	ldr	r3, [pc, #460]	; (8001730 <update_OLED+0x2cc>)
 8001564:	4a6f      	ldr	r2, [pc, #444]	; (8001724 <update_OLED+0x2c0>)
 8001566:	2146      	movs	r1, #70	; 0x46
 8001568:	2003      	movs	r0, #3
 800156a:	f00a f94b 	bl	800b804 <Paint_DrawString_EN>
	}

	Paint_DrawCircle(67, 75, 2, WHITE, 1, DRAW_FILL_EMPTY);
 800156e:	2300      	movs	r3, #0
 8001570:	9301      	str	r3, [sp, #4]
 8001572:	2301      	movs	r3, #1
 8001574:	9300      	str	r3, [sp, #0]
 8001576:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157a:	2202      	movs	r2, #2
 800157c:	214b      	movs	r1, #75	; 0x4b
 800157e:	2043      	movs	r0, #67	; 0x43
 8001580:	f009 ff0a 	bl	800b398 <Paint_DrawCircle>
	Paint_DrawString_EN(70, 70, "C", &Font24, 0x0, 0xff);
 8001584:	23ff      	movs	r3, #255	; 0xff
 8001586:	9301      	str	r3, [sp, #4]
 8001588:	2300      	movs	r3, #0
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	4b68      	ldr	r3, [pc, #416]	; (8001730 <update_OLED+0x2cc>)
 800158e:	4a69      	ldr	r2, [pc, #420]	; (8001734 <update_OLED+0x2d0>)
 8001590:	2146      	movs	r1, #70	; 0x46
 8001592:	2046      	movs	r0, #70	; 0x46
 8001594:	f00a f936 	bl	800b804 <Paint_DrawString_EN>
	Paint_DrawRectangle(1, 56, 100, 93 , WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8001598:	2300      	movs	r3, #0
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	2301      	movs	r3, #1
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	235d      	movs	r3, #93	; 0x5d
 80015a8:	2264      	movs	r2, #100	; 0x64
 80015aa:	2138      	movs	r1, #56	; 0x38
 80015ac:	2001      	movs	r0, #1
 80015ae:	f009 fe6f 	bl	800b290 <Paint_DrawRectangle>

	Paint_DrawString_EN(0, 96, "HANDLE:", &Font12, 0x00, 0xff);
 80015b2:	23ff      	movs	r3, #255	; 0xff
 80015b4:	9301      	str	r3, [sp, #4]
 80015b6:	2300      	movs	r3, #0
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4b62      	ldr	r3, [pc, #392]	; (8001744 <update_OLED+0x2e0>)
 80015bc:	4a62      	ldr	r2, [pc, #392]	; (8001748 <update_OLED+0x2e4>)
 80015be:	2160      	movs	r1, #96	; 0x60
 80015c0:	2000      	movs	r0, #0
 80015c2:	f00a f91f 	bl	800b804 <Paint_DrawString_EN>
	if(handle == T210){
 80015c6:	4b61      	ldr	r3, [pc, #388]	; (800174c <update_OLED+0x2e8>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10a      	bne.n	80015e4 <update_OLED+0x180>
		Paint_DrawString_EN(60, 96, "T210", &Font12, 0x00, 0xff);
 80015ce:	23ff      	movs	r3, #255	; 0xff
 80015d0:	9301      	str	r3, [sp, #4]
 80015d2:	2300      	movs	r3, #0
 80015d4:	9300      	str	r3, [sp, #0]
 80015d6:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <update_OLED+0x2e0>)
 80015d8:	4a5d      	ldr	r2, [pc, #372]	; (8001750 <update_OLED+0x2ec>)
 80015da:	2160      	movs	r1, #96	; 0x60
 80015dc:	203c      	movs	r0, #60	; 0x3c
 80015de:	f00a f911 	bl	800b804 <Paint_DrawString_EN>
 80015e2:	e00d      	b.n	8001600 <update_OLED+0x19c>
	}
	else if(handle == T245){
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <update_OLED+0x2e8>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d109      	bne.n	8001600 <update_OLED+0x19c>
		Paint_DrawString_EN(60, 96, "T245", &Font12, 0x00, 0xff);
 80015ec:	23ff      	movs	r3, #255	; 0xff
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4b53      	ldr	r3, [pc, #332]	; (8001744 <update_OLED+0x2e0>)
 80015f6:	4a57      	ldr	r2, [pc, #348]	; (8001754 <update_OLED+0x2f0>)
 80015f8:	2160      	movs	r1, #96	; 0x60
 80015fa:	203c      	movs	r0, #60	; 0x3c
 80015fc:	f00a f902 	bl	800b804 <Paint_DrawString_EN>
	}

	Paint_DrawString_EN(0, 109, "INPUT VOLTAGE:", &Font8, 0x00, 0xff);
 8001600:	23ff      	movs	r3, #255	; 0xff
 8001602:	9301      	str	r3, [sp, #4]
 8001604:	2300      	movs	r3, #0
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	4b53      	ldr	r3, [pc, #332]	; (8001758 <update_OLED+0x2f4>)
 800160a:	4a54      	ldr	r2, [pc, #336]	; (800175c <update_OLED+0x2f8>)
 800160c:	216d      	movs	r1, #109	; 0x6d
 800160e:	2000      	movs	r0, #0
 8001610:	f00a f8f8 	bl	800b804 <Paint_DrawString_EN>
	Paint_DrawString_EN(0, 118, "AMB TEMP:     POWER ->", &Font8, 0x00, 0xff);
 8001614:	23ff      	movs	r3, #255	; 0xff
 8001616:	9301      	str	r3, [sp, #4]
 8001618:	2300      	movs	r3, #0
 800161a:	9300      	str	r3, [sp, #0]
 800161c:	4b4e      	ldr	r3, [pc, #312]	; (8001758 <update_OLED+0x2f4>)
 800161e:	4a50      	ldr	r2, [pc, #320]	; (8001760 <update_OLED+0x2fc>)
 8001620:	2176      	movs	r1, #118	; 0x76
 8001622:	2000      	movs	r0, #0
 8001624:	f00a f8ee 	bl	800b804 <Paint_DrawString_EN>

	memset(&buffer, '\0', sizeof(buffer));
 8001628:	2228      	movs	r2, #40	; 0x28
 800162a:	2100      	movs	r1, #0
 800162c:	483d      	ldr	r0, [pc, #244]	; (8001724 <update_OLED+0x2c0>)
 800162e:	f00a facd 	bl	800bbcc <memset>
	sprintf(buffer, "%.1f", sensorValues.busVoltage);
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <update_OLED+0x2c4>)
 8001634:	691b      	ldr	r3, [r3, #16]
 8001636:	4618      	mov	r0, r3
 8001638:	f7fe ffae 	bl	8000598 <__aeabi_f2d>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4948      	ldr	r1, [pc, #288]	; (8001764 <update_OLED+0x300>)
 8001642:	4838      	ldr	r0, [pc, #224]	; (8001724 <update_OLED+0x2c0>)
 8001644:	f00b f8b2 	bl	800c7ac <siprintf>
	Paint_DrawString_EN(75, 109, buffer, &Font8, 0x0, 0xff);
 8001648:	23ff      	movs	r3, #255	; 0xff
 800164a:	9301      	str	r3, [sp, #4]
 800164c:	2300      	movs	r3, #0
 800164e:	9300      	str	r3, [sp, #0]
 8001650:	4b41      	ldr	r3, [pc, #260]	; (8001758 <update_OLED+0x2f4>)
 8001652:	4a34      	ldr	r2, [pc, #208]	; (8001724 <update_OLED+0x2c0>)
 8001654:	216d      	movs	r1, #109	; 0x6d
 8001656:	204b      	movs	r0, #75	; 0x4b
 8001658:	f00a f8d4 	bl	800b804 <Paint_DrawString_EN>

	memset(&buffer, '\0', sizeof(buffer));
 800165c:	2228      	movs	r2, #40	; 0x28
 800165e:	2100      	movs	r1, #0
 8001660:	4830      	ldr	r0, [pc, #192]	; (8001724 <update_OLED+0x2c0>)
 8001662:	f00a fab3 	bl	800bbcc <memset>
	sprintf(buffer, "%.1f", sensorValues.amb_temp);
 8001666:	4b30      	ldr	r3, [pc, #192]	; (8001728 <update_OLED+0x2c4>)
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff94 	bl	8000598 <__aeabi_f2d>
 8001670:	4602      	mov	r2, r0
 8001672:	460b      	mov	r3, r1
 8001674:	493b      	ldr	r1, [pc, #236]	; (8001764 <update_OLED+0x300>)
 8001676:	482b      	ldr	r0, [pc, #172]	; (8001724 <update_OLED+0x2c0>)
 8001678:	f00b f898 	bl	800c7ac <siprintf>
	Paint_DrawString_EN(45, 118, buffer, &Font8, 0x0, 0xff);
 800167c:	23ff      	movs	r3, #255	; 0xff
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	2300      	movs	r3, #0
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	4b34      	ldr	r3, [pc, #208]	; (8001758 <update_OLED+0x2f4>)
 8001686:	4a27      	ldr	r2, [pc, #156]	; (8001724 <update_OLED+0x2c0>)
 8001688:	2176      	movs	r1, #118	; 0x76
 800168a:	202d      	movs	r0, #45	; 0x2d
 800168c:	f00a f8ba 	bl	800b804 <Paint_DrawString_EN>

	Paint_DrawRectangle(116, 25, 128, 128, WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8001690:	2300      	movs	r3, #0
 8001692:	9302      	str	r3, [sp, #8]
 8001694:	2301      	movs	r3, #1
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	2119      	movs	r1, #25
 80016a4:	2074      	movs	r0, #116	; 0x74
 80016a6:	f009 fdf3 	bl	800b290 <Paint_DrawRectangle>
	if(sensorValues.inStand){
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <update_OLED+0x2c4>)
 80016ac:	7e1b      	ldrb	r3, [r3, #24]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d05e      	beq.n	8001770 <update_OLED+0x30c>
		Paint_DrawString_EN(116, 30,  "Z", &Font16, 0x00, 0xff);
 80016b2:	23ff      	movs	r3, #255	; 0xff
 80016b4:	9301      	str	r3, [sp, #4]
 80016b6:	2300      	movs	r3, #0
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	4b17      	ldr	r3, [pc, #92]	; (8001718 <update_OLED+0x2b4>)
 80016bc:	4a2a      	ldr	r2, [pc, #168]	; (8001768 <update_OLED+0x304>)
 80016be:	211e      	movs	r1, #30
 80016c0:	2074      	movs	r0, #116	; 0x74
 80016c2:	f00a f89f 	bl	800b804 <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 50,  "z", &Font16, 0x00, 0xff);
 80016c6:	23ff      	movs	r3, #255	; 0xff
 80016c8:	9301      	str	r3, [sp, #4]
 80016ca:	2300      	movs	r3, #0
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <update_OLED+0x2b4>)
 80016d0:	4a26      	ldr	r2, [pc, #152]	; (800176c <update_OLED+0x308>)
 80016d2:	2132      	movs	r1, #50	; 0x32
 80016d4:	2074      	movs	r0, #116	; 0x74
 80016d6:	f00a f895 	bl	800b804 <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 70,  "Z", &Font16, 0x00, 0xff);
 80016da:	23ff      	movs	r3, #255	; 0xff
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	2300      	movs	r3, #0
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <update_OLED+0x2b4>)
 80016e4:	4a20      	ldr	r2, [pc, #128]	; (8001768 <update_OLED+0x304>)
 80016e6:	2146      	movs	r1, #70	; 0x46
 80016e8:	2074      	movs	r0, #116	; 0x74
 80016ea:	f00a f88b 	bl	800b804 <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 90,  "z", &Font16, 0x00, 0xff);
 80016ee:	23ff      	movs	r3, #255	; 0xff
 80016f0:	9301      	str	r3, [sp, #4]
 80016f2:	2300      	movs	r3, #0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	4b08      	ldr	r3, [pc, #32]	; (8001718 <update_OLED+0x2b4>)
 80016f8:	4a1c      	ldr	r2, [pc, #112]	; (800176c <update_OLED+0x308>)
 80016fa:	215a      	movs	r1, #90	; 0x5a
 80016fc:	2074      	movs	r0, #116	; 0x74
 80016fe:	f00a f881 	bl	800b804 <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 110, "z", &Font16, 0x00, 0xff);
 8001702:	23ff      	movs	r3, #255	; 0xff
 8001704:	9301      	str	r3, [sp, #4]
 8001706:	2300      	movs	r3, #0
 8001708:	9300      	str	r3, [sp, #0]
 800170a:	4b03      	ldr	r3, [pc, #12]	; (8001718 <update_OLED+0x2b4>)
 800170c:	4a17      	ldr	r2, [pc, #92]	; (800176c <update_OLED+0x308>)
 800170e:	216e      	movs	r1, #110	; 0x6e
 8001710:	2074      	movs	r0, #116	; 0x74
 8001712:	f00a f877 	bl	800b804 <Paint_DrawString_EN>
 8001716:	e04e      	b.n	80017b6 <update_OLED+0x352>
 8001718:	2000005c 	.word	0x2000005c
 800171c:	0800f900 	.word	0x0800f900
 8001720:	0800f90c 	.word	0x0800f90c
 8001724:	20000288 	.word	0x20000288
 8001728:	200005e0 	.word	0x200005e0
 800172c:	0800f918 	.word	0x0800f918
 8001730:	20000064 	.word	0x20000064
 8001734:	0800f91c 	.word	0x0800f91c
 8001738:	0800f920 	.word	0x0800f920
 800173c:	4082c000 	.word	0x4082c000
 8001740:	0800f92c 	.word	0x0800f92c
 8001744:	20000054 	.word	0x20000054
 8001748:	0800f930 	.word	0x0800f930
 800174c:	20000264 	.word	0x20000264
 8001750:	0800f938 	.word	0x0800f938
 8001754:	0800f940 	.word	0x0800f940
 8001758:	2000006c 	.word	0x2000006c
 800175c:	0800f948 	.word	0x0800f948
 8001760:	0800f958 	.word	0x0800f958
 8001764:	0800f970 	.word	0x0800f970
 8001768:	0800f978 	.word	0x0800f978
 800176c:	0800f97c 	.word	0x0800f97c

	}
	else{
		Paint_DrawRectangle(116, 125-heaterPower/10, 128, 128, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <update_OLED+0x368>)
 8001772:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001776:	f04f 0200 	mov.w	r2, #0
 800177a:	4b15      	ldr	r3, [pc, #84]	; (80017d0 <update_OLED+0x36c>)
 800177c:	f7ff f88e 	bl	800089c <__aeabi_ddiv>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	f04f 0000 	mov.w	r0, #0
 8001788:	4912      	ldr	r1, [pc, #72]	; (80017d4 <update_OLED+0x370>)
 800178a:	f7fe fda5 	bl	80002d8 <__aeabi_dsub>
 800178e:	4602      	mov	r2, r0
 8001790:	460b      	mov	r3, r1
 8001792:	4610      	mov	r0, r2
 8001794:	4619      	mov	r1, r3
 8001796:	f7ff fa2f 	bl	8000bf8 <__aeabi_d2uiz>
 800179a:	4603      	mov	r3, r0
 800179c:	b299      	uxth	r1, r3
 800179e:	2301      	movs	r3, #1
 80017a0:	9302      	str	r3, [sp, #8]
 80017a2:	2301      	movs	r3, #1
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	2280      	movs	r2, #128	; 0x80
 80017b0:	2074      	movs	r0, #116	; 0x74
 80017b2:	f009 fd6d 	bl	800b290 <Paint_DrawRectangle>
	}
	// Show image on page2
	OLED_1in5_Display(BlackImage);
 80017b6:	4b08      	ldr	r3, [pc, #32]	; (80017d8 <update_OLED+0x374>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f00a f9a5 	bl	800bb0a <OLED_1in5_Display>
	Paint_Clear(BLACK);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f009 fb55 	bl	800ae70 <Paint_Clear>
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000600 	.word	0x20000600
 80017d0:	40240000 	.word	0x40240000
 80017d4:	405f4000 	.word	0x405f4000
 80017d8:	20000268 	.word	0x20000268

080017dc <get_set_temp>:

void get_set_temp(){
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
	// Get encoder value (Set temp.) and limit
	if (TIM3->CNT<=20){TIM3->CNT=20;}
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <get_set_temp+0x3c>)
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	2b14      	cmp	r3, #20
 80017e6:	d802      	bhi.n	80017ee <get_set_temp+0x12>
 80017e8:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <get_set_temp+0x3c>)
 80017ea:	2214      	movs	r2, #20
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
	if (TIM3->CNT>=450){TIM3->CNT=450;}
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <get_set_temp+0x3c>)
 80017f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f2:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80017f6:	d303      	bcc.n	8001800 <get_set_temp+0x24>
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <get_set_temp+0x3c>)
 80017fa:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80017fe:	625a      	str	r2, [r3, #36]	; 0x24

	sensorValues.set_temp = TIM3->CNT;
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <get_set_temp+0x3c>)
 8001802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fea5 	bl	8000554 <__aeabi_ui2d>
 800180a:	4602      	mov	r2, r0
 800180c:	460b      	mov	r3, r1
 800180e:	4903      	ldr	r1, [pc, #12]	; (800181c <get_set_temp+0x40>)
 8001810:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40000400 	.word	0x40000400
 800181c:	200005e0 	.word	0x200005e0

08001820 <get_stand_status>:

void get_stand_status(){
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin (GPIOA, INPUT0_Pin) == 0) || (HAL_GPIO_ReadPin (GPIOA, INPUT1_Pin) == 0)){
 8001824:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f004 fe2c 	bl	8006488 <HAL_GPIO_ReadPin>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d008      	beq.n	8001848 <get_stand_status+0x28>
 8001836:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800183a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183e:	f004 fe23 	bl	8006488 <HAL_GPIO_ReadPin>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d103      	bne.n	8001850 <get_stand_status+0x30>
		sensorValues.inStand = 1;
 8001848:	4b04      	ldr	r3, [pc, #16]	; (800185c <get_stand_status+0x3c>)
 800184a:	2201      	movs	r2, #1
 800184c:	761a      	strb	r2, [r3, #24]
 800184e:	e003      	b.n	8001858 <get_stand_status+0x38>
	}
	else{
		sensorValues.inStand = 0;
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <get_stand_status+0x3c>)
 8001852:	2200      	movs	r2, #0
 8001854:	761a      	strb	r2, [r3, #24]
	}
}
 8001856:	bf00      	nop
 8001858:	bf00      	nop
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200005e0 	.word	0x200005e0

08001860 <beep>:

void beep(int beep_time){
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  	TIM2->CCR1 = 50;
 8001868:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800186c:	2232      	movs	r2, #50	; 0x32
 800186e:	635a      	str	r2, [r3, #52]	; 0x34
  	HAL_Delay(beep_time);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	4618      	mov	r0, r3
 8001874:	f001 ff8e 	bl	8003794 <HAL_Delay>
  	TIM2->CCR1 = 0;
 8001878:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800187c:	2200      	movs	r2, #0
 800187e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled, used for DEBUG
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    //HAL_GPIO_TogglePin(GPIOF, DEBUG_SIGNAL_A_Pin);
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	7f1b      	ldrb	r3, [r3, #28]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d102      	bne.n	80018b2 <HAL_TIM_IC_CaptureCallback+0x16>
		beep_once = true;
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <HAL_TIM_IC_CaptureCallback+0x24>)
 80018ae:	2201      	movs	r2, #1
 80018b0:	701a      	strb	r2, [r3, #0]
	}
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	20000265 	.word	0x20000265

080018c4 <set_heater_duty>:

void set_heater_duty(uint16_t dutycycle){
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	80fb      	strh	r3, [r7, #6]
	TIM17->CCR1 = dutycycle;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <set_heater_duty+0x1c>)
 80018d0:	88fb      	ldrh	r3, [r7, #6]
 80018d2:	6353      	str	r3, [r2, #52]	; 0x34
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	40014800 	.word	0x40014800
 80018e4:	00000000 	.word	0x00000000

080018e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018ec:	ed2d 8b04 	vpush	{d8-d9}
 80018f0:	b08c      	sub	sp, #48	; 0x30
 80018f2:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018f4:	f001 fedd 	bl	80036b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018f8:	f000 fab2 	bl	8001e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018fc:	f000 fe2c 	bl	8002558 <MX_GPIO_Init>
  MX_DMA_Init();
 8001900:	f000 fe00 	bl	8002504 <MX_DMA_Init>
  MX_ADC1_Init();
 8001904:	f000 faf8 	bl	8001ef8 <MX_ADC1_Init>
  MX_TIM2_Init();
 8001908:	f000 fc42 	bl	8002190 <MX_TIM2_Init>
  MX_SPI1_Init();
 800190c:	f000 fc02 	bl	8002114 <MX_SPI1_Init>
  MX_TIM17_Init();
 8001910:	f000 fd32 	bl	8002378 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 8001914:	f000 fdaa 	bl	800246c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001918:	f000 fcb0 	bl	800227c <MX_TIM3_Init>
  MX_TIM16_Init();
 800191c:	f000 fd04 	bl	8002328 <MX_TIM16_Init>
  MX_I2C1_Init();
 8001920:	f000 fbb8 	bl	8002094 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8001924:	213c      	movs	r1, #60	; 0x3c
 8001926:	4886      	ldr	r0, [pc, #536]	; (8001b40 <main+0x258>)
 8001928:	f006 f9e6 	bl	8007cf8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 800192c:	2100      	movs	r1, #0
 800192e:	4885      	ldr	r0, [pc, #532]	; (8001b44 <main+0x25c>)
 8001930:	f006 f83c 	bl	80079ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001934:	2100      	movs	r1, #0
 8001936:	4884      	ldr	r0, [pc, #528]	; (8001b48 <main+0x260>)
 8001938:	f006 f838 	bl	80079ac <HAL_TIM_PWM_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800193c:	217f      	movs	r1, #127	; 0x7f
 800193e:	4883      	ldr	r0, [pc, #524]	; (8001b4c <main+0x264>)
 8001940:	f003 fea6 	bl	8005690 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC1_BUF_LEN);//Start ADC DMA
 8001944:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001948:	4981      	ldr	r1, [pc, #516]	; (8001b50 <main+0x268>)
 800194a:	4880      	ldr	r0, [pc, #512]	; (8001b4c <main+0x264>)
 800194c:	f002 fc10 	bl	8004170 <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	// Init and fill filter structures with initial values
	handle = T210; // Default handle
 8001950:	4b80      	ldr	r3, [pc, #512]	; (8001b54 <main+0x26c>)
 8001952:	2200      	movs	r2, #0
 8001954:	701a      	strb	r2, [r3, #0]
	set_heater_duty(0);
 8001956:	2000      	movs	r0, #0
 8001958:	f7ff ffb4 	bl	80018c4 <set_heater_duty>
	for (int i = 0; i<40;i++){
 800195c:	2300      	movs	r3, #0
 800195e:	607b      	str	r3, [r7, #4]
 8001960:	e00b      	b.n	800197a <main+0x92>
		get_busVoltage();
 8001962:	f7ff fb85 	bl	8001070 <get_busVoltage>
		get_ambient_temp();
 8001966:	f7ff fcdb 	bl	8001320 <get_ambient_temp>
		get_act_temp();
 800196a:	f7ff fbad 	bl	80010c8 <get_act_temp>
		HAL_Delay(1);
 800196e:	2001      	movs	r0, #1
 8001970:	f001 ff10 	bl	8003794 <HAL_Delay>
	for (int i = 0; i<40;i++){
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3301      	adds	r3, #1
 8001978:	607b      	str	r3, [r7, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b27      	cmp	r3, #39	; 0x27
 800197e:	ddf0      	ble.n	8001962 <main+0x7a>
	}

	// Start-up beep
	beep(10);
 8001980:	200a      	movs	r0, #10
 8001982:	f7ff ff6d 	bl	8001860 <beep>
	HAL_Delay(100);
 8001986:	2064      	movs	r0, #100	; 0x64
 8001988:	f001 ff04 	bl	8003794 <HAL_Delay>
	beep(10);
 800198c:	200a      	movs	r0, #10
 800198e:	f7ff ff67 	bl	8001860 <beep>

	init_OLED();
 8001992:	f7ff fd29 	bl	80013e8 <init_OLED>

	// if button is pressed during startup - Show SETTINGS and allow to release button, Then user can choose between T210 and T245 Handle
	if (HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 0){
 8001996:	f44f 7100 	mov.w	r1, #512	; 0x200
 800199a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800199e:	f004 fd73 	bl	8006488 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f040 80aa 	bne.w	8001afe <main+0x216>
		Paint_DrawString_EN(0, 0, " SETTINGS ", &Font16, 0x00, 0xff);
 80019aa:	23ff      	movs	r3, #255	; 0xff
 80019ac:	9301      	str	r3, [sp, #4]
 80019ae:	2300      	movs	r3, #0
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	4b69      	ldr	r3, [pc, #420]	; (8001b58 <main+0x270>)
 80019b4:	4a69      	ldr	r2, [pc, #420]	; (8001b5c <main+0x274>)
 80019b6:	2100      	movs	r1, #0
 80019b8:	2000      	movs	r0, #0
 80019ba:	f009 ff23 	bl	800b804 <Paint_DrawString_EN>
		Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 80019be:	2300      	movs	r3, #0
 80019c0:	9302      	str	r3, [sp, #8]
 80019c2:	2302      	movs	r3, #2
 80019c4:	9301      	str	r3, [sp, #4]
 80019c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	2310      	movs	r3, #16
 80019ce:	227f      	movs	r2, #127	; 0x7f
 80019d0:	2110      	movs	r1, #16
 80019d2:	2000      	movs	r0, #0
 80019d4:	f009 fba2 	bl	800b11c <Paint_DrawLine>
		Paint_DrawString_EN(3, 20, "Handle:", &Font12, 0x00, 0xff);
 80019d8:	23ff      	movs	r3, #255	; 0xff
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2300      	movs	r3, #0
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	4b5f      	ldr	r3, [pc, #380]	; (8001b60 <main+0x278>)
 80019e2:	4a60      	ldr	r2, [pc, #384]	; (8001b64 <main+0x27c>)
 80019e4:	2114      	movs	r1, #20
 80019e6:	2003      	movs	r0, #3
 80019e8:	f009 ff0c 	bl	800b804 <Paint_DrawString_EN>
		Paint_DrawString_EN(55, 20, "T210", &Font12, 0xff, 0x00);
 80019ec:	2300      	movs	r3, #0
 80019ee:	9301      	str	r3, [sp, #4]
 80019f0:	23ff      	movs	r3, #255	; 0xff
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	4b5a      	ldr	r3, [pc, #360]	; (8001b60 <main+0x278>)
 80019f6:	4a5c      	ldr	r2, [pc, #368]	; (8001b68 <main+0x280>)
 80019f8:	2114      	movs	r1, #20
 80019fa:	2037      	movs	r0, #55	; 0x37
 80019fc:	f009 ff02 	bl	800b804 <Paint_DrawString_EN>
		Paint_DrawString_EN(90, 20, "T245", &Font12, 0x00, 0xff);
 8001a00:	23ff      	movs	r3, #255	; 0xff
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4b55      	ldr	r3, [pc, #340]	; (8001b60 <main+0x278>)
 8001a0a:	4a58      	ldr	r2, [pc, #352]	; (8001b6c <main+0x284>)
 8001a0c:	2114      	movs	r1, #20
 8001a0e:	205a      	movs	r0, #90	; 0x5a
 8001a10:	f009 fef8 	bl	800b804 <Paint_DrawString_EN>
		OLED_1in5_Display(BlackImage);
 8001a14:	4b56      	ldr	r3, [pc, #344]	; (8001b70 <main+0x288>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f00a f876 	bl	800bb0a <OLED_1in5_Display>
		Paint_Clear(BLACK);
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f009 fa26 	bl	800ae70 <Paint_Clear>

		HAL_Delay(1000);
 8001a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a28:	f001 feb4 	bl	8003794 <HAL_Delay>

		while(HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 1){
 8001a2c:	e05e      	b.n	8001aec <main+0x204>
			Paint_DrawString_EN(0, 0, " SETTINGS ", &Font16, 0x00, 0xff);
 8001a2e:	23ff      	movs	r3, #255	; 0xff
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	2300      	movs	r3, #0
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	4b48      	ldr	r3, [pc, #288]	; (8001b58 <main+0x270>)
 8001a38:	4a48      	ldr	r2, [pc, #288]	; (8001b5c <main+0x274>)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2000      	movs	r0, #0
 8001a3e:	f009 fee1 	bl	800b804 <Paint_DrawString_EN>
			Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001a42:	2300      	movs	r3, #0
 8001a44:	9302      	str	r3, [sp, #8]
 8001a46:	2302      	movs	r3, #2
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	2310      	movs	r3, #16
 8001a52:	227f      	movs	r2, #127	; 0x7f
 8001a54:	2110      	movs	r1, #16
 8001a56:	2000      	movs	r0, #0
 8001a58:	f009 fb60 	bl	800b11c <Paint_DrawLine>

			Paint_DrawString_EN(3, 20, "Handle:", &Font12, 0x00, 0xff);
 8001a5c:	23ff      	movs	r3, #255	; 0xff
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	2300      	movs	r3, #0
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <main+0x278>)
 8001a66:	4a3f      	ldr	r2, [pc, #252]	; (8001b64 <main+0x27c>)
 8001a68:	2114      	movs	r1, #20
 8001a6a:	2003      	movs	r0, #3
 8001a6c:	f009 feca 	bl	800b804 <Paint_DrawString_EN>
			if(((TIM3->CNT)/2 % 2) == 0){
 8001a70:	4b40      	ldr	r3, [pc, #256]	; (8001b74 <main+0x28c>)
 8001a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a74:	085b      	lsrs	r3, r3, #1
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d117      	bne.n	8001aae <main+0x1c6>
				Paint_DrawString_EN(55, 20, "T210", &Font12, 0xff, 0x00);
 8001a7e:	2300      	movs	r3, #0
 8001a80:	9301      	str	r3, [sp, #4]
 8001a82:	23ff      	movs	r3, #255	; 0xff
 8001a84:	9300      	str	r3, [sp, #0]
 8001a86:	4b36      	ldr	r3, [pc, #216]	; (8001b60 <main+0x278>)
 8001a88:	4a37      	ldr	r2, [pc, #220]	; (8001b68 <main+0x280>)
 8001a8a:	2114      	movs	r1, #20
 8001a8c:	2037      	movs	r0, #55	; 0x37
 8001a8e:	f009 feb9 	bl	800b804 <Paint_DrawString_EN>
				Paint_DrawString_EN(90, 20, "T245", &Font12, 0x00, 0xff);
 8001a92:	23ff      	movs	r3, #255	; 0xff
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	2300      	movs	r3, #0
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	4b31      	ldr	r3, [pc, #196]	; (8001b60 <main+0x278>)
 8001a9c:	4a33      	ldr	r2, [pc, #204]	; (8001b6c <main+0x284>)
 8001a9e:	2114      	movs	r1, #20
 8001aa0:	205a      	movs	r0, #90	; 0x5a
 8001aa2:	f009 feaf 	bl	800b804 <Paint_DrawString_EN>
			    handle = T210;
 8001aa6:	4b2b      	ldr	r3, [pc, #172]	; (8001b54 <main+0x26c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
 8001aac:	e016      	b.n	8001adc <main+0x1f4>
			}
			else{
				Paint_DrawString_EN(55, 20, "T210", &Font12, 0x00, 0xff);
 8001aae:	23ff      	movs	r3, #255	; 0xff
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	4b2a      	ldr	r3, [pc, #168]	; (8001b60 <main+0x278>)
 8001ab8:	4a2b      	ldr	r2, [pc, #172]	; (8001b68 <main+0x280>)
 8001aba:	2114      	movs	r1, #20
 8001abc:	2037      	movs	r0, #55	; 0x37
 8001abe:	f009 fea1 	bl	800b804 <Paint_DrawString_EN>
				Paint_DrawString_EN(90, 20, "T245", &Font12, 0xff, 0x00);
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	23ff      	movs	r3, #255	; 0xff
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	4b25      	ldr	r3, [pc, #148]	; (8001b60 <main+0x278>)
 8001acc:	4a27      	ldr	r2, [pc, #156]	; (8001b6c <main+0x284>)
 8001ace:	2114      	movs	r1, #20
 8001ad0:	205a      	movs	r0, #90	; 0x5a
 8001ad2:	f009 fe97 	bl	800b804 <Paint_DrawString_EN>
			    handle = T245;
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <main+0x26c>)
 8001ad8:	2201      	movs	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
			}
			OLED_1in5_Display(BlackImage);
 8001adc:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <main+0x288>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f00a f812 	bl	800bb0a <OLED_1in5_Display>
			Paint_Clear(BLACK);
 8001ae6:	2000      	movs	r0, #0
 8001ae8:	f009 f9c2 	bl	800ae70 <Paint_Clear>
		while(HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 1){
 8001aec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af4:	f004 fcc8 	bl	8006488 <HAL_GPIO_ReadPin>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d097      	beq.n	8001a2e <main+0x146>
		}
	}

	// Set initial encoder timer value
	TIM3->CNT = 330;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <main+0x28c>)
 8001b00:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24

	//Startup beep
	beep(10);
 8001b06:	200a      	movs	r0, #10
 8001b08:	f7ff feaa 	bl	8001860 <beep>

	// Set-up handle-specific constants
	if(handle == T210){
 8001b0c:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <main+0x26c>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d141      	bne.n	8001b98 <main+0x2b0>
		max_power = 60;// 60W
 8001b14:	4b18      	ldr	r3, [pc, #96]	; (8001b78 <main+0x290>)
 8001b16:	4a19      	ldr	r2, [pc, #100]	; (8001b7c <main+0x294>)
 8001b18:	601a      	str	r2, [r3, #0]
		Kp = 20;
 8001b1a:	4919      	ldr	r1, [pc, #100]	; (8001b80 <main+0x298>)
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	4b18      	ldr	r3, [pc, #96]	; (8001b84 <main+0x29c>)
 8001b22:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 60;
 8001b26:	4918      	ldr	r1, [pc, #96]	; (8001b88 <main+0x2a0>)
 8001b28:	f04f 0200 	mov.w	r2, #0
 8001b2c:	4b17      	ldr	r3, [pc, #92]	; (8001b8c <main+0x2a4>)
 8001b2e:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 8001b32:	4917      	ldr	r1, [pc, #92]	; (8001b90 <main+0x2a8>)
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <main+0x2ac>)
 8001b3a:	e9c1 2300 	strd	r2, r3, [r1]
 8001b3e:	e044      	b.n	8001bca <main+0x2e2>
 8001b40:	2000082c 	.word	0x2000082c
 8001b44:	200008c4 	.word	0x200008c4
 8001b48:	200007e0 	.word	0x200007e0
 8001b4c:	20000664 	.word	0x20000664
 8001b50:	200002b8 	.word	0x200002b8
 8001b54:	20000264 	.word	0x20000264
 8001b58:	2000005c 	.word	0x2000005c
 8001b5c:	0800f980 	.word	0x0800f980
 8001b60:	20000054 	.word	0x20000054
 8001b64:	0800f98c 	.word	0x0800f98c
 8001b68:	0800f938 	.word	0x0800f938
 8001b6c:	0800f940 	.word	0x0800f940
 8001b70:	20000268 	.word	0x20000268
 8001b74:	40000400 	.word	0x40000400
 8001b78:	200002b0 	.word	0x200002b0
 8001b7c:	42700000 	.word	0x42700000
 8001b80:	20000010 	.word	0x20000010
 8001b84:	40340000 	.word	0x40340000
 8001b88:	20000278 	.word	0x20000278
 8001b8c:	404e0000 	.word	0x404e0000
 8001b90:	20000280 	.word	0x20000280
 8001b94:	3fe00000 	.word	0x3fe00000
	}
	else if(handle == T245){
 8001b98:	4b97      	ldr	r3, [pc, #604]	; (8001df8 <main+0x510>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d114      	bne.n	8001bca <main+0x2e2>
		max_power = 120;// 120W
 8001ba0:	4b96      	ldr	r3, [pc, #600]	; (8001dfc <main+0x514>)
 8001ba2:	4a97      	ldr	r2, [pc, #604]	; (8001e00 <main+0x518>)
 8001ba4:	601a      	str	r2, [r3, #0]
		Kp = 30;
 8001ba6:	4997      	ldr	r1, [pc, #604]	; (8001e04 <main+0x51c>)
 8001ba8:	f04f 0200 	mov.w	r2, #0
 8001bac:	4b96      	ldr	r3, [pc, #600]	; (8001e08 <main+0x520>)
 8001bae:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 60;
 8001bb2:	4996      	ldr	r1, [pc, #600]	; (8001e0c <main+0x524>)
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4b95      	ldr	r3, [pc, #596]	; (8001e10 <main+0x528>)
 8001bba:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 1;
 8001bbe:	4995      	ldr	r1, [pc, #596]	; (8001e14 <main+0x52c>)
 8001bc0:	f04f 0200 	mov.w	r2, #0
 8001bc4:	4b94      	ldr	r3, [pc, #592]	; (8001e18 <main+0x530>)
 8001bc6:	e9c1 2300 	strd	r2, r3, [r1]
	}

	// Initiate PID controller
	PID(&TPID, &sensorValues.act_temp, &heaterPower, &sensorValues.set_temp, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8001bca:	4b8e      	ldr	r3, [pc, #568]	; (8001e04 <main+0x51c>)
 8001bcc:	ed93 7b00 	vldr	d7, [r3]
 8001bd0:	4b8e      	ldr	r3, [pc, #568]	; (8001e0c <main+0x524>)
 8001bd2:	ed93 6b00 	vldr	d6, [r3]
 8001bd6:	4b8f      	ldr	r3, [pc, #572]	; (8001e14 <main+0x52c>)
 8001bd8:	ed93 5b00 	vldr	d5, [r3]
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2301      	movs	r3, #1
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	eeb0 2a45 	vmov.f32	s4, s10
 8001be8:	eef0 2a65 	vmov.f32	s5, s11
 8001bec:	eeb0 1a46 	vmov.f32	s2, s12
 8001bf0:	eef0 1a66 	vmov.f32	s3, s13
 8001bf4:	eeb0 0a47 	vmov.f32	s0, s14
 8001bf8:	eef0 0a67 	vmov.f32	s1, s15
 8001bfc:	4b87      	ldr	r3, [pc, #540]	; (8001e1c <main+0x534>)
 8001bfe:	4a88      	ldr	r2, [pc, #544]	; (8001e20 <main+0x538>)
 8001c00:	4988      	ldr	r1, [pc, #544]	; (8001e24 <main+0x53c>)
 8001c02:	4889      	ldr	r0, [pc, #548]	; (8001e28 <main+0x540>)
 8001c04:	f000 fdac 	bl	8002760 <PID>
	PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001c08:	2101      	movs	r1, #1
 8001c0a:	4887      	ldr	r0, [pc, #540]	; (8001e28 <main+0x540>)
 8001c0c:	f000 ff37 	bl	8002a7e <PID_SetMode>
	PID_SetSampleTime(&TPID, 50);
 8001c10:	2132      	movs	r1, #50	; 0x32
 8001c12:	4885      	ldr	r0, [pc, #532]	; (8001e28 <main+0x540>)
 8001c14:	f001 f8c8 	bl	8002da8 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPID, 0, 1000); // Set max and min output limit
 8001c18:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8001dd8 <main+0x4f0>
 8001c1c:	ed9f 0b70 	vldr	d0, [pc, #448]	; 8001de0 <main+0x4f8>
 8001c20:	4881      	ldr	r0, [pc, #516]	; (8001e28 <main+0x540>)
 8001c22:	f000 ff4a 	bl	8002aba <PID_SetOutputLimits>
	PID_SetILimits(&TPID, -200, 200); // Set max and min I limit
 8001c26:	ed9f 1b70 	vldr	d1, [pc, #448]	; 8001de8 <main+0x500>
 8001c2a:	ed9f 0b71 	vldr	d0, [pc, #452]	; 8001df0 <main+0x508>
 8001c2e:	487e      	ldr	r0, [pc, #504]	; (8001e28 <main+0x540>)
 8001c30:	f000 ffb1 	bl	8002b96 <PID_SetILimits>

	while (1){
		// beep if encoder value is changed
		if(beep_once){
 8001c34:	4b7d      	ldr	r3, [pc, #500]	; (8001e2c <main+0x544>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <main+0x360>
			beep(5);
 8001c3c:	2005      	movs	r0, #5
 8001c3e:	f7ff fe0f 	bl	8001860 <beep>
			beep_once = false;
 8001c42:	4b7a      	ldr	r3, [pc, #488]	; (8001e2c <main+0x544>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
		// ----------------------------------------------
		//PID_SetTunings(&TPID, Kp, Ki, Kd);
		//sensorValues.set_temp = custom_temp;
		// ----------------------------------------------

		if(HAL_GetTick() - PIDupdate_previousMillis >= PIDupdate_Interval){
 8001c48:	f001 fd98 	bl	800377c <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b78      	ldr	r3, [pc, #480]	; (8001e30 <main+0x548>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	1ad2      	subs	r2, r2, r3
 8001c54:	4b77      	ldr	r3, [pc, #476]	; (8001e34 <main+0x54c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d348      	bcc.n	8001cee <main+0x406>
			get_set_temp();
 8001c5c:	f7ff fdbe 	bl	80017dc <get_set_temp>
			get_stand_status();
 8001c60:	f7ff fdde 	bl	8001820 <get_stand_status>
			get_busVoltage();
 8001c64:	f7ff fa04 	bl	8001070 <get_busVoltage>

			set_heater_duty(0);
 8001c68:	2000      	movs	r0, #0
 8001c6a:	f7ff fe2b 	bl	80018c4 <set_heater_duty>
			HAL_Delay(10); // Wait to let the thermocouple voltage stabilize before taking measurement
 8001c6e:	200a      	movs	r0, #10
 8001c70:	f001 fd90 	bl	8003794 <HAL_Delay>
			get_act_temp();
 8001c74:	f7ff fa28 	bl	80010c8 <get_act_temp>
			PID_Compute(&TPID);
 8001c78:	486b      	ldr	r0, [pc, #428]	; (8001e28 <main+0x540>)
 8001c7a:	f000 fdbd 	bl	80027f8 <PID_Compute>

			if(!sensorValues.inStand){
 8001c7e:	4b67      	ldr	r3, [pc, #412]	; (8001e1c <main+0x534>)
 8001c80:	7e1b      	ldrb	r3, [r3, #24]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d11b      	bne.n	8001cbe <main+0x3d6>
				heaterPower_DutyCycle = heaterPower*(max_power*powerReductionFactor/sensorValues.busVoltage);
 8001c86:	4b5d      	ldr	r3, [pc, #372]	; (8001dfc <main+0x514>)
 8001c88:	ed93 7a00 	vldr	s14, [r3]
 8001c8c:	4b6a      	ldr	r3, [pc, #424]	; (8001e38 <main+0x550>)
 8001c8e:	edd3 7a00 	vldr	s15, [r3]
 8001c92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c96:	4b61      	ldr	r3, [pc, #388]	; (8001e1c <main+0x534>)
 8001c98:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c9c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ca0:	ee16 0a90 	vmov	r0, s13
 8001ca4:	f7fe fc78 	bl	8000598 <__aeabi_f2d>
 8001ca8:	4b5d      	ldr	r3, [pc, #372]	; (8001e20 <main+0x538>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe fccb 	bl	8000648 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4961      	ldr	r1, [pc, #388]	; (8001e3c <main+0x554>)
 8001cb8:	e9c1 2300 	strd	r2, r3, [r1]
 8001cbc:	e006      	b.n	8001ccc <main+0x3e4>
			}
			else{
				heaterPower_DutyCycle = 0;
 8001cbe:	495f      	ldr	r1, [pc, #380]	; (8001e3c <main+0x554>)
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	f04f 0300 	mov.w	r3, #0
 8001cc8:	e9c1 2300 	strd	r2, r3, [r1]
			}
			set_heater_duty(heaterPower_DutyCycle);
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <main+0x554>)
 8001cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cd2:	4610      	mov	r0, r2
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f7fe ff8f 	bl	8000bf8 <__aeabi_d2uiz>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff fdf0 	bl	80018c4 <set_heater_duty>
			PIDupdate_previousMillis = HAL_GetTick();
 8001ce4:	f001 fd4a 	bl	800377c <HAL_GetTick>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a51      	ldr	r2, [pc, #324]	; (8001e30 <main+0x548>)
 8001cec:	6013      	str	r3, [r2, #0]
		}


		if(HAL_GetTick() - DEBUG_previousMillis >= DEBUG_Interval){
 8001cee:	f001 fd45 	bl	800377c <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	4b52      	ldr	r3, [pc, #328]	; (8001e40 <main+0x558>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	1ad2      	subs	r2, r2, r3
 8001cfa:	4b52      	ldr	r3, [pc, #328]	; (8001e44 <main+0x55c>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d352      	bcc.n	8001da8 <main+0x4c0>
			memset(&buffer, '\0', sizeof(buffer));
 8001d02:	2228      	movs	r2, #40	; 0x28
 8001d04:	2100      	movs	r1, #0
 8001d06:	4850      	ldr	r0, [pc, #320]	; (8001e48 <main+0x560>)
 8001d08:	f009 ff60 	bl	800bbcc <memset>
			sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n", sensorValues.act_temp, sensorValues.set_temp, heaterPower/10, PID_GetPpart(&TPID)/10, PID_GetIpart(&TPID)/10, PID_GetDpart(&TPID))/10;
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <main+0x534>)
 8001d0e:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001d12:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <main+0x534>)
 8001d14:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d18:	4b41      	ldr	r3, [pc, #260]	; (8001e20 <main+0x538>)
 8001d1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	4b4a      	ldr	r3, [pc, #296]	; (8001e4c <main+0x564>)
 8001d24:	f7fe fdba 	bl	800089c <__aeabi_ddiv>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4692      	mov	sl, r2
 8001d2e:	469b      	mov	fp, r3
 8001d30:	483d      	ldr	r0, [pc, #244]	; (8001e28 <main+0x540>)
 8001d32:	f001 f874 	bl	8002e1e <PID_GetPpart>
 8001d36:	ec51 0b10 	vmov	r0, r1, d0
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <main+0x564>)
 8001d40:	f7fe fdac 	bl	800089c <__aeabi_ddiv>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	ec43 2b18 	vmov	d8, r2, r3
 8001d4c:	4836      	ldr	r0, [pc, #216]	; (8001e28 <main+0x540>)
 8001d4e:	f001 f878 	bl	8002e42 <PID_GetIpart>
 8001d52:	ec51 0b10 	vmov	r0, r1, d0
 8001d56:	f04f 0200 	mov.w	r2, #0
 8001d5a:	4b3c      	ldr	r3, [pc, #240]	; (8001e4c <main+0x564>)
 8001d5c:	f7fe fd9e 	bl	800089c <__aeabi_ddiv>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	ec43 2b19 	vmov	d9, r2, r3
 8001d68:	482f      	ldr	r0, [pc, #188]	; (8001e28 <main+0x540>)
 8001d6a:	f001 f87c 	bl	8002e66 <PID_GetDpart>
 8001d6e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d72:	eef0 7a60 	vmov.f32	s15, s1
 8001d76:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001d7a:	ed8d 9b06 	vstr	d9, [sp, #24]
 8001d7e:	ed8d 8b04 	vstr	d8, [sp, #16]
 8001d82:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001d86:	e9cd 4500 	strd	r4, r5, [sp]
 8001d8a:	4642      	mov	r2, r8
 8001d8c:	464b      	mov	r3, r9
 8001d8e:	4930      	ldr	r1, [pc, #192]	; (8001e50 <main+0x568>)
 8001d90:	482d      	ldr	r0, [pc, #180]	; (8001e48 <main+0x560>)
 8001d92:	f00a fd0b 	bl	800c7ac <siprintf>
			debugPrint(&huart2,buffer);
 8001d96:	492c      	ldr	r1, [pc, #176]	; (8001e48 <main+0x560>)
 8001d98:	482e      	ldr	r0, [pc, #184]	; (8001e54 <main+0x56c>)
 8001d9a:	f7ff fb07 	bl	80013ac <debugPrint>
			DEBUG_previousMillis = HAL_GetTick();
 8001d9e:	f001 fced 	bl	800377c <HAL_GetTick>
 8001da2:	4603      	mov	r3, r0
 8001da4:	4a26      	ldr	r2, [pc, #152]	; (8001e40 <main+0x558>)
 8001da6:	6013      	str	r3, [r2, #0]
		}


		if(HAL_GetTick() - display_previousMillis >= display_Interval){
 8001da8:	f001 fce8 	bl	800377c <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <main+0x570>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	1ad2      	subs	r2, r2, r3
 8001db4:	4b29      	ldr	r3, [pc, #164]	; (8001e5c <main+0x574>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	f4ff af3b 	bcc.w	8001c34 <main+0x34c>
			get_ambient_temp();
 8001dbe:	f7ff faaf 	bl	8001320 <get_ambient_temp>
			update_OLED();
 8001dc2:	f7ff fb4f 	bl	8001464 <update_OLED>
			display_previousMillis = HAL_GetTick();
 8001dc6:	f001 fcd9 	bl	800377c <HAL_GetTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	4a22      	ldr	r2, [pc, #136]	; (8001e58 <main+0x570>)
 8001dce:	6013      	str	r3, [r2, #0]
		if(beep_once){
 8001dd0:	e730      	b.n	8001c34 <main+0x34c>
 8001dd2:	bf00      	nop
 8001dd4:	f3af 8000 	nop.w
 8001dd8:	00000000 	.word	0x00000000
 8001ddc:	408f4000 	.word	0x408f4000
	...
 8001dec:	40690000 	.word	0x40690000
 8001df0:	00000000 	.word	0x00000000
 8001df4:	c0690000 	.word	0xc0690000
 8001df8:	20000264 	.word	0x20000264
 8001dfc:	200002b0 	.word	0x200002b0
 8001e00:	42f00000 	.word	0x42f00000
 8001e04:	20000010 	.word	0x20000010
 8001e08:	403e0000 	.word	0x403e0000
 8001e0c:	20000278 	.word	0x20000278
 8001e10:	404e0000 	.word	0x404e0000
 8001e14:	20000280 	.word	0x20000280
 8001e18:	3ff00000 	.word	0x3ff00000
 8001e1c:	200005e0 	.word	0x200005e0
 8001e20:	20000600 	.word	0x20000600
 8001e24:	200005e8 	.word	0x200005e8
 8001e28:	200009a0 	.word	0x200009a0
 8001e2c:	20000265 	.word	0x20000265
 8001e30:	20000274 	.word	0x20000274
 8001e34:	2000000c 	.word	0x2000000c
 8001e38:	2000001c 	.word	0x2000001c
 8001e3c:	20000608 	.word	0x20000608
 8001e40:	20000270 	.word	0x20000270
 8001e44:	20000008 	.word	0x20000008
 8001e48:	20000288 	.word	0x20000288
 8001e4c:	40240000 	.word	0x40240000
 8001e50:	0800f994 	.word	0x0800f994
 8001e54:	20000910 	.word	0x20000910
 8001e58:	2000026c 	.word	0x2000026c
 8001e5c:	20000004 	.word	0x20000004

08001e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b094      	sub	sp, #80	; 0x50
 8001e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	f107 0318 	add.w	r3, r7, #24
 8001e6a:	2238      	movs	r2, #56	; 0x38
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f009 feac 	bl	800bbcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e74:	1d3b      	adds	r3, r7, #4
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f004 fc56 	bl	8006734 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e92:	2340      	movs	r3, #64	; 0x40
 8001e94:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e96:	2302      	movs	r3, #2
 8001e98:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e9e:	2304      	movs	r3, #4
 8001ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ea2:	2355      	movs	r3, #85	; 0x55
 8001ea4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001eae:	2302      	movs	r3, #2
 8001eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eb2:	f107 0318 	add.w	r3, r7, #24
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f004 fcf0 	bl	800689c <HAL_RCC_OscConfig>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001ec2:	f000 fbcd 	bl	8002660 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ec6:	230f      	movs	r3, #15
 8001ec8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001eda:	1d3b      	adds	r3, r7, #4
 8001edc:	2104      	movs	r1, #4
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 fff4 	bl	8006ecc <HAL_RCC_ClockConfig>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d001      	beq.n	8001eee <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001eea:	f000 fbb9 	bl	8002660 <Error_Handler>
  }
}
 8001eee:	bf00      	nop
 8001ef0:	3750      	adds	r7, #80	; 0x50
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b092      	sub	sp, #72	; 0x48
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001efe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001f0a:	f107 0320 	add.w	r3, r7, #32
 8001f0e:	2200      	movs	r2, #0
 8001f10:	601a      	str	r2, [r3, #0]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	60da      	str	r2, [r3, #12]
 8001f18:	611a      	str	r2, [r3, #16]
 8001f1a:	615a      	str	r2, [r3, #20]
 8001f1c:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2220      	movs	r2, #32
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f009 fe51 	bl	800bbcc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001f2a:	4b54      	ldr	r3, [pc, #336]	; (800207c <MX_ADC1_Init+0x184>)
 8001f2c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f30:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001f32:	4b52      	ldr	r3, [pc, #328]	; (800207c <MX_ADC1_Init+0x184>)
 8001f34:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f38:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001f3a:	4b50      	ldr	r3, [pc, #320]	; (800207c <MX_ADC1_Init+0x184>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001f40:	4b4e      	ldr	r3, [pc, #312]	; (800207c <MX_ADC1_Init+0x184>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001f46:	4b4d      	ldr	r3, [pc, #308]	; (800207c <MX_ADC1_Init+0x184>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001f4c:	4b4b      	ldr	r3, [pc, #300]	; (800207c <MX_ADC1_Init+0x184>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f52:	4b4a      	ldr	r3, [pc, #296]	; (800207c <MX_ADC1_Init+0x184>)
 8001f54:	2204      	movs	r2, #4
 8001f56:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001f58:	4b48      	ldr	r3, [pc, #288]	; (800207c <MX_ADC1_Init+0x184>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001f5e:	4b47      	ldr	r3, [pc, #284]	; (800207c <MX_ADC1_Init+0x184>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001f64:	4b45      	ldr	r3, [pc, #276]	; (800207c <MX_ADC1_Init+0x184>)
 8001f66:	2204      	movs	r2, #4
 8001f68:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001f6a:	4b44      	ldr	r3, [pc, #272]	; (800207c <MX_ADC1_Init+0x184>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001f72:	4b42      	ldr	r3, [pc, #264]	; (800207c <MX_ADC1_Init+0x184>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001f78:	4b40      	ldr	r3, [pc, #256]	; (800207c <MX_ADC1_Init+0x184>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f7e:	4b3f      	ldr	r3, [pc, #252]	; (800207c <MX_ADC1_Init+0x184>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <MX_ADC1_Init+0x184>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001f8c:	4b3b      	ldr	r3, [pc, #236]	; (800207c <MX_ADC1_Init+0x184>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f94:	4839      	ldr	r0, [pc, #228]	; (800207c <MX_ADC1_Init+0x184>)
 8001f96:	f001 ff61 	bl	8003e5c <HAL_ADC_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001fa0:	f000 fb5e 	bl	8002660 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001fa8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001fac:	4619      	mov	r1, r3
 8001fae:	4833      	ldr	r0, [pc, #204]	; (800207c <MX_ADC1_Init+0x184>)
 8001fb0:	f003 fc02 	bl	80057b8 <HAL_ADCEx_MultiModeConfigChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001fba:	f000 fb51 	bl	8002660 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8001fbe:	4b30      	ldr	r3, [pc, #192]	; (8002080 <MX_ADC1_Init+0x188>)
 8001fc0:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001fc2:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <MX_ADC1_Init+0x18c>)
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 100;
 8001fd2:	2364      	movs	r3, #100	; 0x64
 8001fd4:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001fde:	f107 0320 	add.w	r3, r7, #32
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4825      	ldr	r0, [pc, #148]	; (800207c <MX_ADC1_Init+0x184>)
 8001fe6:	f002 ff9f 	bl	8004f28 <HAL_ADC_AnalogWDGConfig>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001ff0:	f000 fb36 	bl	8002660 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <MX_ADC1_Init+0x190>)
 8001ff6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ff8:	2306      	movs	r3, #6
 8001ffa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002000:	237f      	movs	r3, #127	; 0x7f
 8002002:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002004:	2304      	movs	r3, #4
 8002006:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800200c:	463b      	mov	r3, r7
 800200e:	4619      	mov	r1, r3
 8002010:	481a      	ldr	r0, [pc, #104]	; (800207c <MX_ADC1_Init+0x184>)
 8002012:	f002 fb99 	bl	8004748 <HAL_ADC_ConfigChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 800201c:	f000 fb20 	bl	8002660 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002020:	4b18      	ldr	r3, [pc, #96]	; (8002084 <MX_ADC1_Init+0x18c>)
 8002022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002024:	230c      	movs	r3, #12
 8002026:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002028:	463b      	mov	r3, r7
 800202a:	4619      	mov	r1, r3
 800202c:	4813      	ldr	r0, [pc, #76]	; (800207c <MX_ADC1_Init+0x184>)
 800202e:	f002 fb8b 	bl	8004748 <HAL_ADC_ConfigChannel>
 8002032:	4603      	mov	r3, r0
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8002038:	f000 fb12 	bl	8002660 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800203c:	4b13      	ldr	r3, [pc, #76]	; (800208c <MX_ADC1_Init+0x194>)
 800203e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8002040:	2312      	movs	r3, #18
 8002042:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002044:	463b      	mov	r3, r7
 8002046:	4619      	mov	r1, r3
 8002048:	480c      	ldr	r0, [pc, #48]	; (800207c <MX_ADC1_Init+0x184>)
 800204a:	f002 fb7d 	bl	8004748 <HAL_ADC_ConfigChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8002054:	f000 fb04 	bl	8002660 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8002058:	4b0d      	ldr	r3, [pc, #52]	; (8002090 <MX_ADC1_Init+0x198>)
 800205a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800205c:	2318      	movs	r3, #24
 800205e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002060:	463b      	mov	r3, r7
 8002062:	4619      	mov	r1, r3
 8002064:	4805      	ldr	r0, [pc, #20]	; (800207c <MX_ADC1_Init+0x184>)
 8002066:	f002 fb6f 	bl	8004748 <HAL_ADC_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8002070:	f000 faf6 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002074:	bf00      	nop
 8002076:	3748      	adds	r7, #72	; 0x48
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	20000664 	.word	0x20000664
 8002080:	7dc00000 	.word	0x7dc00000
 8002084:	08600004 	.word	0x08600004
 8002088:	04300002 	.word	0x04300002
 800208c:	10c00010 	.word	0x10c00010
 8002090:	3ef08000 	.word	0x3ef08000

08002094 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_I2C1_Init+0x74>)
 800209a:	4a1c      	ldr	r2, [pc, #112]	; (800210c <MX_I2C1_Init+0x78>)
 800209c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_I2C1_Init+0x74>)
 80020a0:	4a1b      	ldr	r2, [pc, #108]	; (8002110 <MX_I2C1_Init+0x7c>)
 80020a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020a4:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_I2C1_Init+0x74>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020aa:	4b17      	ldr	r3, [pc, #92]	; (8002108 <MX_I2C1_Init+0x74>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <MX_I2C1_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020b6:	4b14      	ldr	r3, [pc, #80]	; (8002108 <MX_I2C1_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020bc:	4b12      	ldr	r3, [pc, #72]	; (8002108 <MX_I2C1_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <MX_I2C1_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	; (8002108 <MX_I2C1_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020ce:	480e      	ldr	r0, [pc, #56]	; (8002108 <MX_I2C1_Init+0x74>)
 80020d0:	f004 fa0a 	bl	80064e8 <HAL_I2C_Init>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80020da:	f000 fac1 	bl	8002660 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020de:	2100      	movs	r1, #0
 80020e0:	4809      	ldr	r0, [pc, #36]	; (8002108 <MX_I2C1_Init+0x74>)
 80020e2:	f004 fa90 	bl	8006606 <HAL_I2CEx_ConfigAnalogFilter>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80020ec:	f000 fab8 	bl	8002660 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80020f0:	2100      	movs	r1, #0
 80020f2:	4805      	ldr	r0, [pc, #20]	; (8002108 <MX_I2C1_Init+0x74>)
 80020f4:	f004 fad2 	bl	800669c <HAL_I2CEx_ConfigDigitalFilter>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80020fe:	f000 faaf 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	20000730 	.word	0x20000730
 800210c:	40005400 	.word	0x40005400
 8002110:	30a0a7fb 	.word	0x30a0a7fb

08002114 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <MX_SPI1_Init+0x74>)
 800211a:	4a1c      	ldr	r2, [pc, #112]	; (800218c <MX_SPI1_Init+0x78>)
 800211c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800211e:	4b1a      	ldr	r3, [pc, #104]	; (8002188 <MX_SPI1_Init+0x74>)
 8002120:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002124:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <MX_SPI1_Init+0x74>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <MX_SPI1_Init+0x74>)
 800212e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002132:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002134:	4b14      	ldr	r3, [pc, #80]	; (8002188 <MX_SPI1_Init+0x74>)
 8002136:	2202      	movs	r2, #2
 8002138:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800213a:	4b13      	ldr	r3, [pc, #76]	; (8002188 <MX_SPI1_Init+0x74>)
 800213c:	2201      	movs	r2, #1
 800213e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_SPI1_Init+0x74>)
 8002142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002146:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002148:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_SPI1_Init+0x74>)
 800214a:	2218      	movs	r2, #24
 800214c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800214e:	4b0e      	ldr	r3, [pc, #56]	; (8002188 <MX_SPI1_Init+0x74>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <MX_SPI1_Init+0x74>)
 8002156:	2200      	movs	r2, #0
 8002158:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800215a:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <MX_SPI1_Init+0x74>)
 800215c:	2200      	movs	r2, #0
 800215e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8002160:	4b09      	ldr	r3, [pc, #36]	; (8002188 <MX_SPI1_Init+0x74>)
 8002162:	2207      	movs	r2, #7
 8002164:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002166:	4b08      	ldr	r3, [pc, #32]	; (8002188 <MX_SPI1_Init+0x74>)
 8002168:	2200      	movs	r2, #0
 800216a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <MX_SPI1_Init+0x74>)
 800216e:	2200      	movs	r2, #0
 8002170:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002172:	4805      	ldr	r0, [pc, #20]	; (8002188 <MX_SPI1_Init+0x74>)
 8002174:	f005 fab6 	bl	80076e4 <HAL_SPI_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800217e:	f000 fa6f 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002182:	bf00      	nop
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	2000077c 	.word	0x2000077c
 800218c:	40013000 	.word	0x40013000

08002190 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b08e      	sub	sp, #56	; 0x38
 8002194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	605a      	str	r2, [r3, #4]
 80021a0:	609a      	str	r2, [r3, #8]
 80021a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021a4:	f107 031c 	add.w	r3, r7, #28
 80021a8:	2200      	movs	r2, #0
 80021aa:	601a      	str	r2, [r3, #0]
 80021ac:	605a      	str	r2, [r3, #4]
 80021ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021b0:	463b      	mov	r3, r7
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]
 80021be:	615a      	str	r2, [r3, #20]
 80021c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021c2:	4b2d      	ldr	r3, [pc, #180]	; (8002278 <MX_TIM2_Init+0xe8>)
 80021c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 80021ca:	4b2b      	ldr	r3, [pc, #172]	; (8002278 <MX_TIM2_Init+0xe8>)
 80021cc:	f240 321f 	movw	r2, #799	; 0x31f
 80021d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b29      	ldr	r3, [pc, #164]	; (8002278 <MX_TIM2_Init+0xe8>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <MX_TIM2_Init+0xe8>)
 80021da:	2264      	movs	r2, #100	; 0x64
 80021dc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <MX_TIM2_Init+0xe8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021e4:	4b24      	ldr	r3, [pc, #144]	; (8002278 <MX_TIM2_Init+0xe8>)
 80021e6:	2280      	movs	r2, #128	; 0x80
 80021e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021ea:	4823      	ldr	r0, [pc, #140]	; (8002278 <MX_TIM2_Init+0xe8>)
 80021ec:	f005 fb25 	bl	800783a <HAL_TIM_Base_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80021f6:	f000 fa33 	bl	8002660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002204:	4619      	mov	r1, r3
 8002206:	481c      	ldr	r0, [pc, #112]	; (8002278 <MX_TIM2_Init+0xe8>)
 8002208:	f006 f8b8 	bl	800837c <HAL_TIM_ConfigClockSource>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002212:	f000 fa25 	bl	8002660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002216:	4818      	ldr	r0, [pc, #96]	; (8002278 <MX_TIM2_Init+0xe8>)
 8002218:	f005 fb66 	bl	80078e8 <HAL_TIM_PWM_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002222:	f000 fa1d 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800222e:	f107 031c 	add.w	r3, r7, #28
 8002232:	4619      	mov	r1, r3
 8002234:	4810      	ldr	r0, [pc, #64]	; (8002278 <MX_TIM2_Init+0xe8>)
 8002236:	f006 fe0b 	bl	8008e50 <HAL_TIMEx_MasterConfigSynchronization>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	d001      	beq.n	8002244 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002240:	f000 fa0e 	bl	8002660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002244:	2360      	movs	r3, #96	; 0x60
 8002246:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002248:	2300      	movs	r3, #0
 800224a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800224c:	2300      	movs	r3, #0
 800224e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002250:	2300      	movs	r3, #0
 8002252:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002254:	463b      	mov	r3, r7
 8002256:	2200      	movs	r2, #0
 8002258:	4619      	mov	r1, r3
 800225a:	4807      	ldr	r0, [pc, #28]	; (8002278 <MX_TIM2_Init+0xe8>)
 800225c:	f005 ff7a 	bl	8008154 <HAL_TIM_PWM_ConfigChannel>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002266:	f000 f9fb 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800226a:	4803      	ldr	r0, [pc, #12]	; (8002278 <MX_TIM2_Init+0xe8>)
 800226c:	f001 f80a 	bl	8003284 <HAL_TIM_MspPostInit>

}
 8002270:	bf00      	nop
 8002272:	3738      	adds	r7, #56	; 0x38
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	200007e0 	.word	0x200007e0

0800227c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08c      	sub	sp, #48	; 0x30
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	2224      	movs	r2, #36	; 0x24
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f009 fc9e 	bl	800bbcc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002290:	463b      	mov	r3, r7
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
 8002296:	605a      	str	r2, [r3, #4]
 8002298:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800229a:	4b21      	ldr	r3, [pc, #132]	; (8002320 <MX_TIM3_Init+0xa4>)
 800229c:	4a21      	ldr	r2, [pc, #132]	; (8002324 <MX_TIM3_Init+0xa8>)
 800229e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022a0:	4b1f      	ldr	r3, [pc, #124]	; (8002320 <MX_TIM3_Init+0xa4>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a6:	4b1e      	ldr	r3, [pc, #120]	; (8002320 <MX_TIM3_Init+0xa4>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022ac:	4b1c      	ldr	r3, [pc, #112]	; (8002320 <MX_TIM3_Init+0xa4>)
 80022ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b4:	4b1a      	ldr	r3, [pc, #104]	; (8002320 <MX_TIM3_Init+0xa4>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ba:	4b19      	ldr	r3, [pc, #100]	; (8002320 <MX_TIM3_Init+0xa4>)
 80022bc:	2280      	movs	r2, #128	; 0x80
 80022be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80022c0:	2301      	movs	r3, #1
 80022c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022c8:	2301      	movs	r3, #1
 80022ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80022d0:	230a      	movs	r3, #10
 80022d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022d8:	2301      	movs	r3, #1
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80022e0:	230a      	movs	r3, #10
 80022e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80022e4:	f107 030c 	add.w	r3, r7, #12
 80022e8:	4619      	mov	r1, r3
 80022ea:	480d      	ldr	r0, [pc, #52]	; (8002320 <MX_TIM3_Init+0xa4>)
 80022ec:	f005 fc5e 	bl	8007bac <HAL_TIM_Encoder_Init>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80022f6:	f000 f9b3 	bl	8002660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002302:	463b      	mov	r3, r7
 8002304:	4619      	mov	r1, r3
 8002306:	4806      	ldr	r0, [pc, #24]	; (8002320 <MX_TIM3_Init+0xa4>)
 8002308:	f006 fda2 	bl	8008e50 <HAL_TIMEx_MasterConfigSynchronization>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002312:	f000 f9a5 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002316:	bf00      	nop
 8002318:	3730      	adds	r7, #48	; 0x30
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	2000082c 	.word	0x2000082c
 8002324:	40000400 	.word	0x40000400

08002328 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800232c:	4b10      	ldr	r3, [pc, #64]	; (8002370 <MX_TIM16_Init+0x48>)
 800232e:	4a11      	ldr	r2, [pc, #68]	; (8002374 <MX_TIM16_Init+0x4c>)
 8002330:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <MX_TIM16_Init+0x48>)
 8002334:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002338:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <MX_TIM16_Init+0x48>)
 800233c:	2200      	movs	r2, #0
 800233e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 8002340:	4b0b      	ldr	r3, [pc, #44]	; (8002370 <MX_TIM16_Init+0x48>)
 8002342:	f242 7210 	movw	r2, #10000	; 0x2710
 8002346:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002348:	4b09      	ldr	r3, [pc, #36]	; (8002370 <MX_TIM16_Init+0x48>)
 800234a:	2200      	movs	r2, #0
 800234c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800234e:	4b08      	ldr	r3, [pc, #32]	; (8002370 <MX_TIM16_Init+0x48>)
 8002350:	2200      	movs	r2, #0
 8002352:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <MX_TIM16_Init+0x48>)
 8002356:	2280      	movs	r2, #128	; 0x80
 8002358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800235a:	4805      	ldr	r0, [pc, #20]	; (8002370 <MX_TIM16_Init+0x48>)
 800235c:	f005 fa6d 	bl	800783a <HAL_TIM_Base_Init>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d001      	beq.n	800236a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8002366:	f000 f97b 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000878 	.word	0x20000878
 8002374:	40014400 	.word	0x40014400

08002378 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b094      	sub	sp, #80	; 0x50
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800237e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
 8002386:	605a      	str	r2, [r3, #4]
 8002388:	609a      	str	r2, [r3, #8]
 800238a:	60da      	str	r2, [r3, #12]
 800238c:	611a      	str	r2, [r3, #16]
 800238e:	615a      	str	r2, [r3, #20]
 8002390:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002392:	463b      	mov	r3, r7
 8002394:	2234      	movs	r2, #52	; 0x34
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f009 fc17 	bl	800bbcc <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800239e:	4b31      	ldr	r3, [pc, #196]	; (8002464 <MX_TIM17_Init+0xec>)
 80023a0:	4a31      	ldr	r2, [pc, #196]	; (8002468 <MX_TIM17_Init+0xf0>)
 80023a2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1600-1;
 80023a4:	4b2f      	ldr	r3, [pc, #188]	; (8002464 <MX_TIM17_Init+0xec>)
 80023a6:	f240 623f 	movw	r2, #1599	; 0x63f
 80023aa:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <MX_TIM17_Init+0xec>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 80023b2:	4b2c      	ldr	r3, [pc, #176]	; (8002464 <MX_TIM17_Init+0xec>)
 80023b4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80023b8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ba:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <MX_TIM17_Init+0xec>)
 80023bc:	2200      	movs	r2, #0
 80023be:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80023c0:	4b28      	ldr	r3, [pc, #160]	; (8002464 <MX_TIM17_Init+0xec>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023c6:	4b27      	ldr	r3, [pc, #156]	; (8002464 <MX_TIM17_Init+0xec>)
 80023c8:	2280      	movs	r2, #128	; 0x80
 80023ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80023cc:	4825      	ldr	r0, [pc, #148]	; (8002464 <MX_TIM17_Init+0xec>)
 80023ce:	f005 fa34 	bl	800783a <HAL_TIM_Base_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM17_Init+0x64>
  {
    Error_Handler();
 80023d8:	f000 f942 	bl	8002660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80023dc:	4821      	ldr	r0, [pc, #132]	; (8002464 <MX_TIM17_Init+0xec>)
 80023de:	f005 fa83 	bl	80078e8 <HAL_TIM_PWM_Init>
 80023e2:	4603      	mov	r3, r0
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <MX_TIM17_Init+0x74>
  {
    Error_Handler();
 80023e8:	f000 f93a 	bl	8002660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ec:	2360      	movs	r3, #96	; 0x60
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 80023f0:	2300      	movs	r3, #0
 80023f2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f4:	2300      	movs	r3, #0
 80023f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023f8:	2300      	movs	r3, #0
 80023fa:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002400:	2300      	movs	r3, #0
 8002402:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002404:	2300      	movs	r3, #0
 8002406:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002408:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800240c:	2200      	movs	r2, #0
 800240e:	4619      	mov	r1, r3
 8002410:	4814      	ldr	r0, [pc, #80]	; (8002464 <MX_TIM17_Init+0xec>)
 8002412:	f005 fe9f 	bl	8008154 <HAL_TIM_PWM_ConfigChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM17_Init+0xa8>
  {
    Error_Handler();
 800241c:	f000 f920 	bl	8002660 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002420:	2300      	movs	r3, #0
 8002422:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002428:	2300      	movs	r3, #0
 800242a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002438:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002442:	463b      	mov	r3, r7
 8002444:	4619      	mov	r1, r3
 8002446:	4807      	ldr	r0, [pc, #28]	; (8002464 <MX_TIM17_Init+0xec>)
 8002448:	f006 fd84 	bl	8008f54 <HAL_TIMEx_ConfigBreakDeadTime>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM17_Init+0xde>
  {
    Error_Handler();
 8002452:	f000 f905 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002456:	4803      	ldr	r0, [pc, #12]	; (8002464 <MX_TIM17_Init+0xec>)
 8002458:	f000 ff14 	bl	8003284 <HAL_TIM_MspPostInit>

}
 800245c:	bf00      	nop
 800245e:	3750      	adds	r7, #80	; 0x50
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200008c4 	.word	0x200008c4
 8002468:	40014800 	.word	0x40014800

0800246c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002470:	4b22      	ldr	r3, [pc, #136]	; (80024fc <MX_USART2_UART_Init+0x90>)
 8002472:	4a23      	ldr	r2, [pc, #140]	; (8002500 <MX_USART2_UART_Init+0x94>)
 8002474:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 8002476:	4b21      	ldr	r3, [pc, #132]	; (80024fc <MX_USART2_UART_Init+0x90>)
 8002478:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 800247c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800247e:	4b1f      	ldr	r3, [pc, #124]	; (80024fc <MX_USART2_UART_Init+0x90>)
 8002480:	2200      	movs	r2, #0
 8002482:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002484:	4b1d      	ldr	r3, [pc, #116]	; (80024fc <MX_USART2_UART_Init+0x90>)
 8002486:	2200      	movs	r2, #0
 8002488:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800248a:	4b1c      	ldr	r3, [pc, #112]	; (80024fc <MX_USART2_UART_Init+0x90>)
 800248c:	2200      	movs	r2, #0
 800248e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002490:	4b1a      	ldr	r3, [pc, #104]	; (80024fc <MX_USART2_UART_Init+0x90>)
 8002492:	220c      	movs	r2, #12
 8002494:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002496:	4b19      	ldr	r3, [pc, #100]	; (80024fc <MX_USART2_UART_Init+0x90>)
 8002498:	2200      	movs	r2, #0
 800249a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800249c:	4b17      	ldr	r3, [pc, #92]	; (80024fc <MX_USART2_UART_Init+0x90>)
 800249e:	2200      	movs	r2, #0
 80024a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024a2:	4b16      	ldr	r3, [pc, #88]	; (80024fc <MX_USART2_UART_Init+0x90>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80024a8:	4b14      	ldr	r3, [pc, #80]	; (80024fc <MX_USART2_UART_Init+0x90>)
 80024aa:	2200      	movs	r2, #0
 80024ac:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024ae:	4b13      	ldr	r3, [pc, #76]	; (80024fc <MX_USART2_UART_Init+0x90>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024b4:	4811      	ldr	r0, [pc, #68]	; (80024fc <MX_USART2_UART_Init+0x90>)
 80024b6:	f006 fe33 	bl	8009120 <HAL_UART_Init>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80024c0:	f000 f8ce 	bl	8002660 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024c4:	2100      	movs	r1, #0
 80024c6:	480d      	ldr	r0, [pc, #52]	; (80024fc <MX_USART2_UART_Init+0x90>)
 80024c8:	f008 f971 	bl	800a7ae <HAL_UARTEx_SetTxFifoThreshold>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80024d2:	f000 f8c5 	bl	8002660 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80024d6:	2100      	movs	r1, #0
 80024d8:	4808      	ldr	r0, [pc, #32]	; (80024fc <MX_USART2_UART_Init+0x90>)
 80024da:	f008 f9a6 	bl	800a82a <HAL_UARTEx_SetRxFifoThreshold>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80024e4:	f000 f8bc 	bl	8002660 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80024e8:	4804      	ldr	r0, [pc, #16]	; (80024fc <MX_USART2_UART_Init+0x90>)
 80024ea:	f008 f927 	bl	800a73c <HAL_UARTEx_DisableFifoMode>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80024f4:	f000 f8b4 	bl	8002660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024f8:	bf00      	nop
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	20000910 	.word	0x20000910
 8002500:	40004400 	.word	0x40004400

08002504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <MX_DMA_Init+0x50>)
 800250c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800250e:	4a11      	ldr	r2, [pc, #68]	; (8002554 <MX_DMA_Init+0x50>)
 8002510:	f043 0304 	orr.w	r3, r3, #4
 8002514:	6493      	str	r3, [r2, #72]	; 0x48
 8002516:	4b0f      	ldr	r3, [pc, #60]	; (8002554 <MX_DMA_Init+0x50>)
 8002518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800251a:	f003 0304 	and.w	r3, r3, #4
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_DMA_Init+0x50>)
 8002524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002526:	4a0b      	ldr	r2, [pc, #44]	; (8002554 <MX_DMA_Init+0x50>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	6493      	str	r3, [r2, #72]	; 0x48
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_DMA_Init+0x50>)
 8002530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	200b      	movs	r0, #11
 8002540:	f003 fab9 	bl	8005ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002544:	200b      	movs	r0, #11
 8002546:	f003 fad0 	bl	8005aea <HAL_NVIC_EnableIRQ>

}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000

08002558 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800255e:	f107 030c 	add.w	r3, r7, #12
 8002562:	2200      	movs	r2, #0
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	605a      	str	r2, [r3, #4]
 8002568:	609a      	str	r2, [r3, #8]
 800256a:	60da      	str	r2, [r3, #12]
 800256c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800256e:	4b39      	ldr	r3, [pc, #228]	; (8002654 <MX_GPIO_Init+0xfc>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002572:	4a38      	ldr	r2, [pc, #224]	; (8002654 <MX_GPIO_Init+0xfc>)
 8002574:	f043 0320 	orr.w	r3, r3, #32
 8002578:	64d3      	str	r3, [r2, #76]	; 0x4c
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <MX_GPIO_Init+0xfc>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	60bb      	str	r3, [r7, #8]
 8002584:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002586:	4b33      	ldr	r3, [pc, #204]	; (8002654 <MX_GPIO_Init+0xfc>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800258a:	4a32      	ldr	r2, [pc, #200]	; (8002654 <MX_GPIO_Init+0xfc>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002592:	4b30      	ldr	r3, [pc, #192]	; (8002654 <MX_GPIO_Init+0xfc>)
 8002594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002596:	f003 0301 	and.w	r3, r3, #1
 800259a:	607b      	str	r3, [r7, #4]
 800259c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800259e:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <MX_GPIO_Init+0xfc>)
 80025a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a2:	4a2c      	ldr	r2, [pc, #176]	; (8002654 <MX_GPIO_Init+0xfc>)
 80025a4:	f043 0302 	orr.w	r3, r3, #2
 80025a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <MX_GPIO_Init+0xfc>)
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DEBUG_SIGNAL_A_Pin|DEBUG_SIGNAL_B_Pin, GPIO_PIN_RESET);
 80025b6:	2200      	movs	r2, #0
 80025b8:	2103      	movs	r1, #3
 80025ba:	4827      	ldr	r0, [pc, #156]	; (8002658 <MX_GPIO_Init+0x100>)
 80025bc:	f003 ff7c 	bl	80064b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_DC_GPIO_Port, SPI_DC_Pin, GPIO_PIN_RESET);
 80025c0:	2200      	movs	r2, #0
 80025c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ca:	f003 ff75 	bl	80064b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 80025ce:	2200      	movs	r2, #0
 80025d0:	2150      	movs	r1, #80	; 0x50
 80025d2:	4822      	ldr	r0, [pc, #136]	; (800265c <MX_GPIO_Init+0x104>)
 80025d4:	f003 ff70 	bl	80064b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_SIGNAL_A_Pin DEBUG_SIGNAL_B_Pin */
  GPIO_InitStruct.Pin = DEBUG_SIGNAL_A_Pin|DEBUG_SIGNAL_B_Pin;
 80025d8:	2303      	movs	r3, #3
 80025da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025dc:	2301      	movs	r3, #1
 80025de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80025e8:	f107 030c 	add.w	r3, r7, #12
 80025ec:	4619      	mov	r1, r3
 80025ee:	481a      	ldr	r0, [pc, #104]	; (8002658 <MX_GPIO_Init+0x100>)
 80025f0:	f003 fdc8 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_BUTTON_Pin INPUT0_Pin INPUT1_Pin */
  GPIO_InitStruct.Pin = ENC_BUTTON_Pin|INPUT0_Pin|INPUT1_Pin;
 80025f4:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 80025f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002602:	f107 030c 	add.w	r3, r7, #12
 8002606:	4619      	mov	r1, r3
 8002608:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800260c:	f003 fdba 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_DC_Pin */
  GPIO_InitStruct.Pin = SPI_DC_Pin;
 8002610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002616:	2301      	movs	r3, #1
 8002618:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_DC_GPIO_Port, &GPIO_InitStruct);
 8002622:	f107 030c 	add.w	r3, r7, #12
 8002626:	4619      	mov	r1, r3
 8002628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262c:	f003 fdaa 	bl	8006184 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RST_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin;
 8002630:	2350      	movs	r3, #80	; 0x50
 8002632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002634:	2301      	movs	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263c:	2300      	movs	r3, #0
 800263e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002640:	f107 030c 	add.w	r3, r7, #12
 8002644:	4619      	mov	r1, r3
 8002646:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_GPIO_Init+0x104>)
 8002648:	f003 fd9c 	bl	8006184 <HAL_GPIO_Init>

}
 800264c:	bf00      	nop
 800264e:	3720      	adds	r7, #32
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40021000 	.word	0x40021000
 8002658:	48001400 	.word	0x48001400
 800265c:	48000400 	.word	0x48000400

08002660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002664:	b672      	cpsid	i
}
 8002666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002668:	e7fe      	b.n	8002668 <Error_Handler+0x8>
	...

0800266c <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	695a      	ldr	r2, [r3, #20]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	441a      	add	r2, r3
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	615a      	str	r2, [r3, #20]
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	6999      	ldr	r1, [r3, #24]
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002690:	1ad2      	subs	r2, r2, r3
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	615a      	str	r2, [r3, #20]
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if(filter_struct->WindowPointer < WindowLength - 1)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d805      	bhi.n	80026b6 <Moving_Average_Compute+0x4a>
	{
		filter_struct->WindowPointer += 1;
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	619a      	str	r2, [r3, #24]
 80026b4:	e002      	b.n	80026bc <Moving_Average_Compute+0x50>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	2200      	movs	r2, #0
 80026ba:	619a      	str	r2, [r3, #24]
	}
	return filter_struct->Sum/5.0;
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd ff47 	bl	8000554 <__aeabi_ui2d>
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	4b07      	ldr	r3, [pc, #28]	; (80026e8 <Moving_Average_Compute+0x7c>)
 80026cc:	f7fe f8e6 	bl	800089c <__aeabi_ddiv>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	ec43 2b17 	vmov	d7, r2, r3
}
 80026d8:	eeb0 0a47 	vmov.f32	s0, s14
 80026dc:	eef0 0a67 	vmov.f32	s1, s15
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40140000 	.word	0x40140000

080026ec <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	6879      	ldr	r1, [r7, #4]
 80026fe:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800271c:	f7fe fa24 	bl	8000b68 <__aeabi_dcmpgt>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d006      	beq.n	8002734 <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8002732:	e011      	b.n	8002758 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002740:	f7fe f9f4 	bl	8000b2c <__aeabi_dcmplt>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d100      	bne.n	800274c <PID_Init+0x60>
}
 800274a:	e005      	b.n	8002758 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002752:	6879      	ldr	r1, [r7, #4]
 8002754:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6278      	str	r0, [r7, #36]	; 0x24
 8002768:	6239      	str	r1, [r7, #32]
 800276a:	61fa      	str	r2, [r7, #28]
 800276c:	61bb      	str	r3, [r7, #24]
 800276e:	ed87 0b04 	vstr	d0, [r7, #16]
 8002772:	ed87 1b02 	vstr	d1, [r7, #8]
 8002776:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	69fa      	ldr	r2, [r7, #28]
 800277e:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	6a3a      	ldr	r2, [r7, #32]
 8002784:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	69ba      	ldr	r2, [r7, #24]
 800278a:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	2200      	movs	r2, #0
 8002790:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8002792:	ed9f 1b15 	vldr	d1, [pc, #84]	; 80027e8 <PID+0x88>
 8002796:	ed9f 0b16 	vldr	d0, [pc, #88]	; 80027f0 <PID+0x90>
 800279a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800279c:	f000 f98d 	bl	8002aba <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	2264      	movs	r2, #100	; 0x64
 80027a4:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 80027a6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80027aa:	4619      	mov	r1, r3
 80027ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027ae:	f000 fabb 	bl	8002d28 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 80027b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80027b6:	4619      	mov	r1, r3
 80027b8:	ed97 2b00 	vldr	d2, [r7]
 80027bc:	ed97 1b02 	vldr	d1, [r7, #8]
 80027c0:	ed97 0b04 	vldr	d0, [r7, #16]
 80027c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027c6:	f000 fa07 	bl	8002bd8 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 80027ca:	f000 ffd7 	bl	800377c <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	1ad2      	subs	r2, r2, r3
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	605a      	str	r2, [r3, #4]

}
 80027da:	bf00      	nop
 80027dc:	3728      	adds	r7, #40	; 0x28
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	f3af 8000 	nop.w
 80027e8:	00000000 	.word	0x00000000
 80027ec:	406fe000 	.word	0x406fe000
	...

080027f8 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 80027f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80027fc:	b08c      	sub	sp, #48	; 0x30
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	785b      	ldrb	r3, [r3, #1]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d101      	bne.n	800280e <PID_Compute+0x16>
	{
		return _FALSE;
 800280a:	2300      	movs	r3, #0
 800280c:	e132      	b.n	8002a74 <PID_Compute+0x27c>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 800280e:	f000 ffb5 	bl	800377c <HAL_GetTick>
 8002812:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	6a3a      	ldr	r2, [r7, #32]
 8002824:	429a      	cmp	r2, r3
 8002826:	f0c0 8124 	bcc.w	8002a72 <PID_Compute+0x27a>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800282e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002832:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800283a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800283e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002842:	f7fd fd49 	bl	80002d8 <__aeabi_dsub>
 8002846:	4602      	mov	r2, r0
 8002848:	460b      	mov	r3, r1
 800284a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002854:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002858:	f7fd fd3e 	bl	80002d8 <__aeabi_dsub>
 800285c:	4602      	mov	r2, r0
 800285e:	460b      	mov	r3, r1
 8002860:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002870:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002874:	f7fd fee8 	bl	8000648 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4650      	mov	r0, sl
 800287e:	4659      	mov	r1, fp
 8002880:	f7fd fd2c 	bl	80002dc <__adddf3>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 800289a:	f7fe f965 	bl	8000b68 <__aeabi_dcmpgt>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d006      	beq.n	80028b2 <PID_Compute+0xba>
				{
					uPID->OutputSum = uPID->IMax;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80028b0:	e010      	b.n	80028d4 <PID_Compute+0xdc>
				}
		else if (uPID->OutputSum < uPID->IMin)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80028be:	f7fe f935 	bl	8000b2c <__aeabi_dcmplt>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d005      	beq.n	80028d4 <PID_Compute+0xdc>
		{
			uPID->OutputSum = uPID->IMin;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80028ce:	6879      	ldr	r1, [r7, #4]
 80028d0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80028da:	6879      	ldr	r1, [r7, #4]
 80028dc:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d114      	bne.n	8002912 <PID_Compute+0x11a>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80028f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028f8:	f7fd fea6 	bl	8000648 <__aeabi_dmul>
 80028fc:	4602      	mov	r2, r0
 80028fe:	460b      	mov	r3, r1
 8002900:	4650      	mov	r0, sl
 8002902:	4659      	mov	r1, fp
 8002904:	f7fd fce8 	bl	80002d8 <__aeabi_dsub>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	6879      	ldr	r1, [r7, #4]
 800290e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800291e:	f7fe f923 	bl	8000b68 <__aeabi_dcmpgt>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d006      	beq.n	8002936 <PID_Compute+0x13e>
		{
			uPID->OutputSum = uPID->OutMax;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002934:	e010      	b.n	8002958 <PID_Compute+0x160>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002942:	f7fe f8f3 	bl	8000b2c <__aeabi_dcmplt>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d005      	beq.n	8002958 <PID_Compute+0x160>
		{
			uPID->OutputSum = uPID->OutMin;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800295e:	4690      	mov	r8, r2
 8002960:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002968:	4640      	mov	r0, r8
 800296a:	4649      	mov	r1, r9
 800296c:	f7fd fe6c 	bl	8000648 <__aeabi_dmul>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	6879      	ldr	r1, [r7, #4]
 8002976:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d017      	beq.n	80029b2 <PID_Compute+0x1ba>
		{
			output = uPID->Kp * error;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002988:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800298c:	f7fd fe5c 	bl	8000648 <__aeabi_dmul>
 8002990:	4602      	mov	r2, r0
 8002992:	460b      	mov	r3, r1
 8002994:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800299e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029a2:	f7fd fe51 	bl	8000648 <__aeabi_dmul>
 80029a6:	4602      	mov	r2, r0
 80029a8:	460b      	mov	r3, r1
 80029aa:	6879      	ldr	r1, [r7, #4]
 80029ac:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80029b0:	e005      	b.n	80029be <PID_Compute+0x1c6>
		}
		else
		{
			output = 0;
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80029ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ce:	f7fd fe3b 	bl	8000648 <__aeabi_dmul>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	4640      	mov	r0, r8
 80029d8:	4649      	mov	r1, r9
 80029da:	f7fd fc7d 	bl	80002d8 <__aeabi_dsub>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029e6:	f7fd fc79 	bl	80002dc <__adddf3>
 80029ea:	4602      	mov	r2, r0
 80029ec:	460b      	mov	r3, r1
 80029ee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80029f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80029fc:	f7fe f8b4 	bl	8000b68 <__aeabi_dcmpgt>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <PID_Compute+0x21a>
		{
			output = uPID->OutMax;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002a0c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002a10:	e00e      	b.n	8002a30 <PID_Compute+0x238>
		}
		else if (output < uPID->OutMin)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002a18:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002a1c:	f7fe f886 	bl	8000b2c <__aeabi_dcmplt>
 8002a20:	4603      	mov	r3, r0
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d004      	beq.n	8002a30 <PID_Compute+0x238>
		{
			output = uPID->OutMin;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002a2c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002a36:	4614      	mov	r4, r2
 8002a38:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002a3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a40:	4620      	mov	r0, r4
 8002a42:	4629      	mov	r1, r5
 8002a44:	f7fd fe00 	bl	8000648 <__aeabi_dmul>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	6879      	ldr	r1, [r7, #4]
 8002a4e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002a56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a5a:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a64:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a6c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <PID_Compute+0x27c>

	}
	else
	{
		return _FALSE;
 8002a72:	2300      	movs	r3, #0
	}

}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3730      	adds	r7, #48	; 0x30
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002a7e <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 8002a7e:	b580      	push	{r7, lr}
 8002a80:	b084      	sub	sp, #16
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
 8002a86:	460b      	mov	r3, r1
 8002a88:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	bf0c      	ite	eq
 8002a90:	2301      	moveq	r3, #1
 8002a92:	2300      	movne	r3, #0
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d006      	beq.n	8002aac <PID_SetMode+0x2e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	785b      	ldrb	r3, [r3, #1]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fe20 	bl	80026ec <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7bfa      	ldrb	r2, [r7, #15]
 8002ab0:	705a      	strb	r2, [r3, #1]

}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b086      	sub	sp, #24
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6178      	str	r0, [r7, #20]
 8002ac2:	ed87 0b02 	vstr	d0, [r7, #8]
 8002ac6:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002aca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ace:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002ad2:	f7fe f83f 	bl	8000b54 <__aeabi_dcmpge>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d158      	bne.n	8002b8e <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8002adc:	6979      	ldr	r1, [r7, #20]
 8002ade:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ae2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 8002ae6:	6979      	ldr	r1, [r7, #20]
 8002ae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aec:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	785b      	ldrb	r3, [r3, #1]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d04b      	beq.n	8002b90 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002b06:	f7fe f82f 	bl	8000b68 <__aeabi_dcmpgt>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002b1a:	e9c1 2300 	strd	r2, r3, [r1]
 8002b1e:	e012      	b.n	8002b46 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002b2e:	f7fd fffd 	bl	8000b2c <__aeabi_dcmplt>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d006      	beq.n	8002b46 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002b42:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002b52:	f7fe f809 	bl	8000b68 <__aeabi_dcmpgt>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d006      	beq.n	8002b6a <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002b62:	6979      	ldr	r1, [r7, #20]
 8002b64:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002b68:	e012      	b.n	8002b90 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002b76:	f7fd ffd9 	bl	8000b2c <__aeabi_dcmplt>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d007      	beq.n	8002b90 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002b86:	6979      	ldr	r1, [r7, #20]
 8002b88:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002b8c:	e000      	b.n	8002b90 <PID_SetOutputLimits+0xd6>
		return;
 8002b8e:	bf00      	nop
		}
		else { }

	}

}
 8002b90:	3718      	adds	r7, #24
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}

08002b96 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b086      	sub	sp, #24
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6178      	str	r0, [r7, #20]
 8002b9e:	ed87 0b02 	vstr	d0, [r7, #8]
 8002ba2:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002ba6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002baa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bae:	f7fd ffd1 	bl	8000b54 <__aeabi_dcmpge>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d10a      	bne.n	8002bce <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8002bb8:	6979      	ldr	r1, [r7, #20]
 8002bba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bbe:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8002bc2:	6979      	ldr	r1, [r7, #20]
 8002bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002bc8:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8002bcc:	e000      	b.n	8002bd0 <PID_SetILimits+0x3a>
		return;
 8002bce:	bf00      	nop
}
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
	...

08002bd8 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	61f8      	str	r0, [r7, #28]
 8002be0:	ed87 0b04 	vstr	d0, [r7, #16]
 8002be4:	ed87 1b02 	vstr	d1, [r7, #8]
 8002be8:	ed87 2b00 	vstr	d2, [r7]
 8002bec:	460b      	mov	r3, r1
 8002bee:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002bf0:	f04f 0200 	mov.w	r2, #0
 8002bf4:	f04f 0300 	mov.w	r3, #0
 8002bf8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002bfc:	f7fd ff96 	bl	8000b2c <__aeabi_dcmplt>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f040 8089 	bne.w	8002d1a <PID_SetTunings2+0x142>
 8002c08:	f04f 0200 	mov.w	r2, #0
 8002c0c:	f04f 0300 	mov.w	r3, #0
 8002c10:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c14:	f7fd ff8a 	bl	8000b2c <__aeabi_dcmplt>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d17d      	bne.n	8002d1a <PID_SetTunings2+0x142>
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c2a:	f7fd ff7f 	bl	8000b2c <__aeabi_dcmplt>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d172      	bne.n	8002d1a <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	7efa      	ldrb	r2, [r7, #27]
 8002c38:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002c3a:	7efb      	ldrb	r3, [r7, #27]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	bf0c      	ite	eq
 8002c40:	2301      	moveq	r3, #1
 8002c42:	2300      	movne	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	461a      	mov	r2, r3
 8002c48:	69fb      	ldr	r3, [r7, #28]
 8002c4a:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002c4c:	69f9      	ldr	r1, [r7, #28]
 8002c4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c52:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002c56:	69f9      	ldr	r1, [r7, #28]
 8002c58:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c5c:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002c60:	69f9      	ldr	r1, [r7, #28]
 8002c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c66:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fd fc70 	bl	8000554 <__aeabi_ui2d>
 8002c74:	f04f 0200 	mov.w	r2, #0
 8002c78:	4b2a      	ldr	r3, [pc, #168]	; (8002d24 <PID_SetTunings2+0x14c>)
 8002c7a:	f7fd fe0f 	bl	800089c <__aeabi_ddiv>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	460b      	mov	r3, r1
 8002c82:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8002c86:	69f9      	ldr	r1, [r7, #28]
 8002c88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c8c:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002c90:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c94:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c98:	f7fd fcd6 	bl	8000648 <__aeabi_dmul>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	69f9      	ldr	r1, [r7, #28]
 8002ca2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002caa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002cae:	f7fd fdf5 	bl	800089c <__aeabi_ddiv>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	460b      	mov	r3, r1
 8002cb6:	69f9      	ldr	r1, [r7, #28]
 8002cb8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	78db      	ldrb	r3, [r3, #3]
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d12b      	bne.n	8002d1c <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002cca:	f04f 0000 	mov.w	r0, #0
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	f7fd fb01 	bl	80002d8 <__aeabi_dsub>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	460b      	mov	r3, r1
 8002cda:	69f9      	ldr	r1, [r7, #28]
 8002cdc:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002ce6:	f04f 0000 	mov.w	r0, #0
 8002cea:	f04f 0100 	mov.w	r1, #0
 8002cee:	f7fd faf3 	bl	80002d8 <__aeabi_dsub>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	69f9      	ldr	r1, [r7, #28]
 8002cf8:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d02:	f04f 0000 	mov.w	r0, #0
 8002d06:	f04f 0100 	mov.w	r1, #0
 8002d0a:	f7fd fae5 	bl	80002d8 <__aeabi_dsub>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	460b      	mov	r3, r1
 8002d12:	69f9      	ldr	r1, [r7, #28]
 8002d14:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002d18:	e000      	b.n	8002d1c <PID_SetTunings2+0x144>
		return;
 8002d1a:	bf00      	nop

	}

}
 8002d1c:	3728      	adds	r7, #40	; 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	408f4000 	.word	0x408f4000

08002d28 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	785b      	ldrb	r3, [r3, #1]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d02e      	beq.n	8002d9a <PID_SetControllerDirection+0x72>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	78db      	ldrb	r3, [r3, #3]
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d029      	beq.n	8002d9a <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002d4c:	f04f 0000 	mov.w	r0, #0
 8002d50:	f04f 0100 	mov.w	r1, #0
 8002d54:	f7fd fac0 	bl	80002d8 <__aeabi_dsub>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	6879      	ldr	r1, [r7, #4]
 8002d5e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002d68:	f04f 0000 	mov.w	r0, #0
 8002d6c:	f04f 0100 	mov.w	r1, #0
 8002d70:	f7fd fab2 	bl	80002d8 <__aeabi_dsub>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d84:	f04f 0000 	mov.w	r0, #0
 8002d88:	f04f 0100 	mov.w	r1, #0
 8002d8c:	f7fd faa4 	bl	80002d8 <__aeabi_dsub>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	70da      	strb	r2, [r3, #3]

}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}

08002da8 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002da8:	b5b0      	push	{r4, r5, r7, lr}
 8002daa:	b084      	sub	sp, #16
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	dd2e      	ble.n	8002e16 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002db8:	6838      	ldr	r0, [r7, #0]
 8002dba:	f7fd fbdb 	bl	8000574 <__aeabi_i2d>
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	460d      	mov	r5, r1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fd fbc4 	bl	8000554 <__aeabi_ui2d>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	f7fd fd62 	bl	800089c <__aeabi_ddiv>
 8002dd8:	4602      	mov	r2, r0
 8002dda:	460b      	mov	r3, r1
 8002ddc:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002de6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dea:	f7fd fc2d 	bl	8000648 <__aeabi_dmul>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002dfe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e02:	f7fd fd4b 	bl	800089c <__aeabi_ddiv>
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	6879      	ldr	r1, [r7, #4]
 8002e0c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	609a      	str	r2, [r3, #8]

	}

}
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bdb0      	pop	{r4, r5, r7, pc}

08002e1e <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002e2c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e30:	eeb0 0a47 	vmov.f32	s0, s14
 8002e34:	eef0 0a67 	vmov.f32	s1, s15
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr

08002e42 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8002e42:	b480      	push	{r7}
 8002e44:	b083      	sub	sp, #12
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002e50:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e54:	eeb0 0a47 	vmov.f32	s0, s14
 8002e58:	eef0 0a67 	vmov.f32	s1, s15
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002e74:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e78:	eeb0 0a47 	vmov.f32	s0, s14
 8002e7c:	eef0 0a67 	vmov.f32	s1, s15
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
	...

08002e8c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e92:	4b0f      	ldr	r3, [pc, #60]	; (8002ed0 <HAL_MspInit+0x44>)
 8002e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e96:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <HAL_MspInit+0x44>)
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	6613      	str	r3, [r2, #96]	; 0x60
 8002e9e:	4b0c      	ldr	r3, [pc, #48]	; (8002ed0 <HAL_MspInit+0x44>)
 8002ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea2:	f003 0301 	and.w	r3, r3, #1
 8002ea6:	607b      	str	r3, [r7, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eaa:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_MspInit+0x44>)
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	4a08      	ldr	r2, [pc, #32]	; (8002ed0 <HAL_MspInit+0x44>)
 8002eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_MspInit+0x44>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ebe:	603b      	str	r3, [r7, #0]
 8002ec0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002ec2:	f003 fcdb 	bl	800687c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40021000 	.word	0x40021000

08002ed4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b09c      	sub	sp, #112	; 0x70
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002edc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]
 8002ee4:	605a      	str	r2, [r3, #4]
 8002ee6:	609a      	str	r2, [r3, #8]
 8002ee8:	60da      	str	r2, [r3, #12]
 8002eea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002eec:	f107 0318 	add.w	r3, r7, #24
 8002ef0:	2244      	movs	r2, #68	; 0x44
 8002ef2:	2100      	movs	r1, #0
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f008 fe69 	bl	800bbcc <memset>
  if(hadc->Instance==ADC1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f02:	d17f      	bne.n	8003004 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002f04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f08:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002f0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002f0e:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f10:	f107 0318 	add.w	r3, r7, #24
 8002f14:	4618      	mov	r0, r3
 8002f16:	f004 f9f5 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d001      	beq.n	8002f24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002f20:	f7ff fb9e 	bl	8002660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002f24:	4b39      	ldr	r3, [pc, #228]	; (800300c <HAL_ADC_MspInit+0x138>)
 8002f26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f28:	4a38      	ldr	r2, [pc, #224]	; (800300c <HAL_ADC_MspInit+0x138>)
 8002f2a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f30:	4b36      	ldr	r3, [pc, #216]	; (800300c <HAL_ADC_MspInit+0x138>)
 8002f32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f38:	617b      	str	r3, [r7, #20]
 8002f3a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f3c:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_ADC_MspInit+0x138>)
 8002f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f40:	4a32      	ldr	r2, [pc, #200]	; (800300c <HAL_ADC_MspInit+0x138>)
 8002f42:	f043 0301 	orr.w	r3, r3, #1
 8002f46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f48:	4b30      	ldr	r3, [pc, #192]	; (800300c <HAL_ADC_MspInit+0x138>)
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_ADC_MspInit+0x138>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	4a2c      	ldr	r2, [pc, #176]	; (800300c <HAL_ADC_MspInit+0x138>)
 8002f5a:	f043 0302 	orr.w	r3, r3, #2
 8002f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f60:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_ADC_MspInit+0x138>)
 8002f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	60fb      	str	r3, [r7, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin|CURRENT_Pin|AMBIENT_TEMP_Pin;
 8002f6c:	230b      	movs	r3, #11
 8002f6e:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f70:	2303      	movs	r3, #3
 8002f72:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f74:	2300      	movs	r3, #0
 8002f76:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f7c:	4619      	mov	r1, r3
 8002f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f82:	f003 f8ff 	bl	8006184 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUSVOLTAGE_Pin;
 8002f86:	2301      	movs	r3, #1
 8002f88:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(BUSVOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002f92:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f96:	4619      	mov	r1, r3
 8002f98:	481d      	ldr	r0, [pc, #116]	; (8003010 <HAL_ADC_MspInit+0x13c>)
 8002f9a:	f003 f8f3 	bl	8006184 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f9e:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002fa0:	4a1d      	ldr	r2, [pc, #116]	; (8003018 <HAL_ADC_MspInit+0x144>)
 8002fa2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002fa6:	2205      	movs	r2, #5
 8002fa8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002faa:	4b1a      	ldr	r3, [pc, #104]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fb0:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002fb6:	4b17      	ldr	r3, [pc, #92]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002fb8:	2280      	movs	r2, #128	; 0x80
 8002fba:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002fbc:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002fbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fc2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002fc4:	4b13      	ldr	r3, [pc, #76]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002fc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fca:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002fcc:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002fce:	2220      	movs	r2, #32
 8002fd0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002fd2:	4b10      	ldr	r3, [pc, #64]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002fd8:	480e      	ldr	r0, [pc, #56]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002fda:	f002 fda1 	bl	8005b20 <HAL_DMA_Init>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8002fe4:	f7ff fb3c 	bl	8002660 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a0a      	ldr	r2, [pc, #40]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002fec:	655a      	str	r2, [r3, #84]	; 0x54
 8002fee:	4a09      	ldr	r2, [pc, #36]	; (8003014 <HAL_ADC_MspInit+0x140>)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	2100      	movs	r1, #0
 8002ff8:	2012      	movs	r0, #18
 8002ffa:	f002 fd5c 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002ffe:	2012      	movs	r0, #18
 8003000:	f002 fd73 	bl	8005aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003004:	bf00      	nop
 8003006:	3770      	adds	r7, #112	; 0x70
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	48000400 	.word	0x48000400
 8003014:	200006d0 	.word	0x200006d0
 8003018:	40020008 	.word	0x40020008

0800301c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b09a      	sub	sp, #104	; 0x68
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003028:	2200      	movs	r2, #0
 800302a:	601a      	str	r2, [r3, #0]
 800302c:	605a      	str	r2, [r3, #4]
 800302e:	609a      	str	r2, [r3, #8]
 8003030:	60da      	str	r2, [r3, #12]
 8003032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003034:	f107 0310 	add.w	r3, r7, #16
 8003038:	2244      	movs	r2, #68	; 0x44
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f008 fdc5 	bl	800bbcc <memset>
  if(hi2c->Instance==I2C1)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a1f      	ldr	r2, [pc, #124]	; (80030c4 <HAL_I2C_MspInit+0xa8>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d136      	bne.n	80030ba <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800304c:	2340      	movs	r3, #64	; 0x40
 800304e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003050:	2300      	movs	r3, #0
 8003052:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003054:	f107 0310 	add.w	r3, r7, #16
 8003058:	4618      	mov	r0, r3
 800305a:	f004 f953 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003064:	f7ff fafc 	bl	8002660 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003068:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <HAL_I2C_MspInit+0xac>)
 800306a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800306c:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <HAL_I2C_MspInit+0xac>)
 800306e:	f043 0302 	orr.w	r3, r3, #2
 8003072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003074:	4b14      	ldr	r3, [pc, #80]	; (80030c8 <HAL_I2C_MspInit+0xac>)
 8003076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003080:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003084:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003086:	2312      	movs	r3, #18
 8003088:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800308a:	2300      	movs	r3, #0
 800308c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800308e:	2300      	movs	r3, #0
 8003090:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003092:	2304      	movs	r3, #4
 8003094:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003096:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800309a:	4619      	mov	r1, r3
 800309c:	480b      	ldr	r0, [pc, #44]	; (80030cc <HAL_I2C_MspInit+0xb0>)
 800309e:	f003 f871 	bl	8006184 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80030a2:	4b09      	ldr	r3, [pc, #36]	; (80030c8 <HAL_I2C_MspInit+0xac>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	4a08      	ldr	r2, [pc, #32]	; (80030c8 <HAL_I2C_MspInit+0xac>)
 80030a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80030ac:	6593      	str	r3, [r2, #88]	; 0x58
 80030ae:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <HAL_I2C_MspInit+0xac>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80030ba:	bf00      	nop
 80030bc:	3768      	adds	r7, #104	; 0x68
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	40005400 	.word	0x40005400
 80030c8:	40021000 	.word	0x40021000
 80030cc:	48000400 	.word	0x48000400

080030d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a17      	ldr	r2, [pc, #92]	; (800314c <HAL_SPI_MspInit+0x7c>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d127      	bne.n	8003142 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030f2:	4b17      	ldr	r3, [pc, #92]	; (8003150 <HAL_SPI_MspInit+0x80>)
 80030f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f6:	4a16      	ldr	r2, [pc, #88]	; (8003150 <HAL_SPI_MspInit+0x80>)
 80030f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80030fc:	6613      	str	r3, [r2, #96]	; 0x60
 80030fe:	4b14      	ldr	r3, [pc, #80]	; (8003150 <HAL_SPI_MspInit+0x80>)
 8003100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003106:	613b      	str	r3, [r7, #16]
 8003108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800310a:	4b11      	ldr	r3, [pc, #68]	; (8003150 <HAL_SPI_MspInit+0x80>)
 800310c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310e:	4a10      	ldr	r2, [pc, #64]	; (8003150 <HAL_SPI_MspInit+0x80>)
 8003110:	f043 0302 	orr.w	r3, r3, #2
 8003114:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003116:	4b0e      	ldr	r3, [pc, #56]	; (8003150 <HAL_SPI_MspInit+0x80>)
 8003118:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8003122:	2328      	movs	r3, #40	; 0x28
 8003124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	2302      	movs	r3, #2
 8003128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312e:	2300      	movs	r3, #0
 8003130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003132:	2305      	movs	r3, #5
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003136:	f107 0314 	add.w	r3, r7, #20
 800313a:	4619      	mov	r1, r3
 800313c:	4805      	ldr	r0, [pc, #20]	; (8003154 <HAL_SPI_MspInit+0x84>)
 800313e:	f003 f821 	bl	8006184 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003142:	bf00      	nop
 8003144:	3728      	adds	r7, #40	; 0x28
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	bf00      	nop
 800314c:	40013000 	.word	0x40013000
 8003150:	40021000 	.word	0x40021000
 8003154:	48000400 	.word	0x48000400

08003158 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003168:	d10c      	bne.n	8003184 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800316a:	4b1e      	ldr	r3, [pc, #120]	; (80031e4 <HAL_TIM_Base_MspInit+0x8c>)
 800316c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800316e:	4a1d      	ldr	r2, [pc, #116]	; (80031e4 <HAL_TIM_Base_MspInit+0x8c>)
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	6593      	str	r3, [r2, #88]	; 0x58
 8003176:	4b1b      	ldr	r3, [pc, #108]	; (80031e4 <HAL_TIM_Base_MspInit+0x8c>)
 8003178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800317a:	f003 0301 	and.w	r3, r3, #1
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8003182:	e02a      	b.n	80031da <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_TIM_Base_MspInit+0x90>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d114      	bne.n	80031b8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800318e:	4b15      	ldr	r3, [pc, #84]	; (80031e4 <HAL_TIM_Base_MspInit+0x8c>)
 8003190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003192:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <HAL_TIM_Base_MspInit+0x8c>)
 8003194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003198:	6613      	str	r3, [r2, #96]	; 0x60
 800319a:	4b12      	ldr	r3, [pc, #72]	; (80031e4 <HAL_TIM_Base_MspInit+0x8c>)
 800319c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	613b      	str	r3, [r7, #16]
 80031a4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80031a6:	2200      	movs	r2, #0
 80031a8:	2100      	movs	r1, #0
 80031aa:	2019      	movs	r0, #25
 80031ac:	f002 fc83 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80031b0:	2019      	movs	r0, #25
 80031b2:	f002 fc9a 	bl	8005aea <HAL_NVIC_EnableIRQ>
}
 80031b6:	e010      	b.n	80031da <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a0b      	ldr	r2, [pc, #44]	; (80031ec <HAL_TIM_Base_MspInit+0x94>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d10b      	bne.n	80031da <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80031c2:	4b08      	ldr	r3, [pc, #32]	; (80031e4 <HAL_TIM_Base_MspInit+0x8c>)
 80031c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c6:	4a07      	ldr	r2, [pc, #28]	; (80031e4 <HAL_TIM_Base_MspInit+0x8c>)
 80031c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031cc:	6613      	str	r3, [r2, #96]	; 0x60
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_TIM_Base_MspInit+0x8c>)
 80031d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031d6:	60fb      	str	r3, [r7, #12]
 80031d8:	68fb      	ldr	r3, [r7, #12]
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40021000 	.word	0x40021000
 80031e8:	40014400 	.word	0x40014400
 80031ec:	40014800 	.word	0x40014800

080031f0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08a      	sub	sp, #40	; 0x28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	605a      	str	r2, [r3, #4]
 8003202:	609a      	str	r2, [r3, #8]
 8003204:	60da      	str	r2, [r3, #12]
 8003206:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1b      	ldr	r2, [pc, #108]	; (800327c <HAL_TIM_Encoder_MspInit+0x8c>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d130      	bne.n	8003274 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003212:	4b1b      	ldr	r3, [pc, #108]	; (8003280 <HAL_TIM_Encoder_MspInit+0x90>)
 8003214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003216:	4a1a      	ldr	r2, [pc, #104]	; (8003280 <HAL_TIM_Encoder_MspInit+0x90>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	6593      	str	r3, [r2, #88]	; 0x58
 800321e:	4b18      	ldr	r3, [pc, #96]	; (8003280 <HAL_TIM_Encoder_MspInit+0x90>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	613b      	str	r3, [r7, #16]
 8003228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	4b15      	ldr	r3, [pc, #84]	; (8003280 <HAL_TIM_Encoder_MspInit+0x90>)
 800322c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800322e:	4a14      	ldr	r2, [pc, #80]	; (8003280 <HAL_TIM_Encoder_MspInit+0x90>)
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003236:	4b12      	ldr	r3, [pc, #72]	; (8003280 <HAL_TIM_Encoder_MspInit+0x90>)
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8003242:	2350      	movs	r3, #80	; 0x50
 8003244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324a:	2300      	movs	r3, #0
 800324c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324e:	2300      	movs	r3, #0
 8003250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003252:	2302      	movs	r3, #2
 8003254:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003256:	f107 0314 	add.w	r3, r7, #20
 800325a:	4619      	mov	r1, r3
 800325c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003260:	f002 ff90 	bl	8006184 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003264:	2200      	movs	r2, #0
 8003266:	2100      	movs	r1, #0
 8003268:	201d      	movs	r0, #29
 800326a:	f002 fc24 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800326e:	201d      	movs	r0, #29
 8003270:	f002 fc3b 	bl	8005aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003274:	bf00      	nop
 8003276:	3728      	adds	r7, #40	; 0x28
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}
 800327c:	40000400 	.word	0x40000400
 8003280:	40021000 	.word	0x40021000

08003284 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b08a      	sub	sp, #40	; 0x28
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800328c:	f107 0314 	add.w	r3, r7, #20
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	605a      	str	r2, [r3, #4]
 8003296:	609a      	str	r2, [r3, #8]
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a4:	d11d      	bne.n	80032e2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_TIM_MspPostInit+0xac>)
 80032a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032aa:	4a21      	ldr	r2, [pc, #132]	; (8003330 <HAL_TIM_MspPostInit+0xac>)
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032b2:	4b1f      	ldr	r3, [pc, #124]	; (8003330 <HAL_TIM_MspPostInit+0xac>)
 80032b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	613b      	str	r3, [r7, #16]
 80032bc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80032be:	2320      	movs	r3, #32
 80032c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c2:	2302      	movs	r3, #2
 80032c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80032ce:	2301      	movs	r3, #1
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4619      	mov	r1, r3
 80032d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032dc:	f002 ff52 	bl	8006184 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80032e0:	e021      	b.n	8003326 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a13      	ldr	r2, [pc, #76]	; (8003334 <HAL_TIM_MspPostInit+0xb0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d11c      	bne.n	8003326 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ec:	4b10      	ldr	r3, [pc, #64]	; (8003330 <HAL_TIM_MspPostInit+0xac>)
 80032ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f0:	4a0f      	ldr	r2, [pc, #60]	; (8003330 <HAL_TIM_MspPostInit+0xac>)
 80032f2:	f043 0301 	orr.w	r3, r3, #1
 80032f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <HAL_TIM_MspPostInit+0xac>)
 80032fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEATER_Pin;
 8003304:	2380      	movs	r3, #128	; 0x80
 8003306:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	2300      	movs	r3, #0
 8003312:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 8003314:	2301      	movs	r3, #1
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8003318:	f107 0314 	add.w	r3, r7, #20
 800331c:	4619      	mov	r1, r3
 800331e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003322:	f002 ff2f 	bl	8006184 <HAL_GPIO_Init>
}
 8003326:	bf00      	nop
 8003328:	3728      	adds	r7, #40	; 0x28
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40021000 	.word	0x40021000
 8003334:	40014800 	.word	0x40014800

08003338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b09a      	sub	sp, #104	; 0x68
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003350:	f107 0310 	add.w	r3, r7, #16
 8003354:	2244      	movs	r2, #68	; 0x44
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f008 fc37 	bl	800bbcc <memset>
  if(huart->Instance==USART2)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a23      	ldr	r2, [pc, #140]	; (80033f0 <HAL_UART_MspInit+0xb8>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d13f      	bne.n	80033e8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003368:	2302      	movs	r3, #2
 800336a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800336c:	2300      	movs	r3, #0
 800336e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003370:	f107 0310 	add.w	r3, r7, #16
 8003374:	4618      	mov	r0, r3
 8003376:	f003 ffc5 	bl	8007304 <HAL_RCCEx_PeriphCLKConfig>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003380:	f7ff f96e 	bl	8002660 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003384:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_UART_MspInit+0xbc>)
 8003386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003388:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_UART_MspInit+0xbc>)
 800338a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800338e:	6593      	str	r3, [r2, #88]	; 0x58
 8003390:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <HAL_UART_MspInit+0xbc>)
 8003392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003398:	60fb      	str	r3, [r7, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800339c:	4b15      	ldr	r3, [pc, #84]	; (80033f4 <HAL_UART_MspInit+0xbc>)
 800339e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033a0:	4a14      	ldr	r2, [pc, #80]	; (80033f4 <HAL_UART_MspInit+0xbc>)
 80033a2:	f043 0301 	orr.w	r3, r3, #1
 80033a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <HAL_UART_MspInit+0xbc>)
 80033aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ac:	f003 0301 	and.w	r3, r3, #1
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80033b4:	f248 0304 	movw	r3, #32772	; 0x8004
 80033b8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ba:	2302      	movs	r3, #2
 80033bc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033be:	2300      	movs	r3, #0
 80033c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c2:	2303      	movs	r3, #3
 80033c4:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033c6:	2307      	movs	r3, #7
 80033c8:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80033ce:	4619      	mov	r1, r3
 80033d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033d4:	f002 fed6 	bl	8006184 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80033d8:	2200      	movs	r2, #0
 80033da:	2100      	movs	r1, #0
 80033dc:	2026      	movs	r0, #38	; 0x26
 80033de:	f002 fb6a 	bl	8005ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80033e2:	2026      	movs	r0, #38	; 0x26
 80033e4:	f002 fb81 	bl	8005aea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033e8:	bf00      	nop
 80033ea:	3768      	adds	r7, #104	; 0x68
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40004400 	.word	0x40004400
 80033f4:	40021000 	.word	0x40021000

080033f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033f8:	b480      	push	{r7}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033fc:	e7fe      	b.n	80033fc <NMI_Handler+0x4>

080033fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033fe:	b480      	push	{r7}
 8003400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003402:	e7fe      	b.n	8003402 <HardFault_Handler+0x4>

08003404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003408:	e7fe      	b.n	8003408 <MemManage_Handler+0x4>

0800340a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800340a:	b480      	push	{r7}
 800340c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800340e:	e7fe      	b.n	800340e <BusFault_Handler+0x4>

08003410 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003414:	e7fe      	b.n	8003414 <UsageFault_Handler+0x4>

08003416 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003416:	b480      	push	{r7}
 8003418:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr

08003424 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr

08003432 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003436:	bf00      	nop
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003444:	f000 f988 	bl	8003758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003448:	bf00      	nop
 800344a:	bd80      	pop	{r7, pc}

0800344c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003450:	4802      	ldr	r0, [pc, #8]	; (800345c <DMA1_Channel1_IRQHandler+0x10>)
 8003452:	f002 fd48 	bl	8005ee6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	bd80      	pop	{r7, pc}
 800345a:	bf00      	nop
 800345c:	200006d0 	.word	0x200006d0

08003460 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003464:	4802      	ldr	r0, [pc, #8]	; (8003470 <ADC1_2_IRQHandler+0x10>)
 8003466:	f000 ff37 	bl	80042d8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	20000664 	.word	0x20000664

08003474 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003478:	4802      	ldr	r0, [pc, #8]	; (8003484 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800347a:	f004 fceb 	bl	8007e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800347e:	bf00      	nop
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	20000878 	.word	0x20000878

08003488 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800348c:	4802      	ldr	r0, [pc, #8]	; (8003498 <TIM3_IRQHandler+0x10>)
 800348e:	f004 fce1 	bl	8007e54 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003492:	bf00      	nop
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	2000082c 	.word	0x2000082c

0800349c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80034a0:	4802      	ldr	r0, [pc, #8]	; (80034ac <USART2_IRQHandler+0x10>)
 80034a2:	f005 ff35 	bl	8009310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80034a6:	bf00      	nop
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000910 	.word	0x20000910

080034b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034b0:	b480      	push	{r7}
 80034b2:	af00      	add	r7, sp, #0
	return 1;
 80034b4:	2301      	movs	r3, #1
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <_kill>:

int _kill(int pid, int sig)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80034ca:	f008 fb4d 	bl	800bb68 <__errno>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2216      	movs	r2, #22
 80034d2:	601a      	str	r2, [r3, #0]
	return -1;
 80034d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <_exit>:

void _exit (int status)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ffe7 	bl	80034c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80034f2:	e7fe      	b.n	80034f2 <_exit+0x12>

080034f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	60f8      	str	r0, [r7, #12]
 80034fc:	60b9      	str	r1, [r7, #8]
 80034fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
 8003504:	e00a      	b.n	800351c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003506:	f3af 8000 	nop.w
 800350a:	4601      	mov	r1, r0
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	1c5a      	adds	r2, r3, #1
 8003510:	60ba      	str	r2, [r7, #8]
 8003512:	b2ca      	uxtb	r2, r1
 8003514:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	3301      	adds	r3, #1
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	697a      	ldr	r2, [r7, #20]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	dbf0      	blt.n	8003506 <_read+0x12>
	}

return len;
 8003524:	687b      	ldr	r3, [r7, #4]
}
 8003526:	4618      	mov	r0, r3
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b086      	sub	sp, #24
 8003532:	af00      	add	r7, sp, #0
 8003534:	60f8      	str	r0, [r7, #12]
 8003536:	60b9      	str	r1, [r7, #8]
 8003538:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800353a:	2300      	movs	r3, #0
 800353c:	617b      	str	r3, [r7, #20]
 800353e:	e009      	b.n	8003554 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	1c5a      	adds	r2, r3, #1
 8003544:	60ba      	str	r2, [r7, #8]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	3301      	adds	r3, #1
 8003552:	617b      	str	r3, [r7, #20]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	dbf1      	blt.n	8003540 <_write+0x12>
	}
	return len;
 800355c:	687b      	ldr	r3, [r7, #4]
}
 800355e:	4618      	mov	r0, r3
 8003560:	3718      	adds	r7, #24
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <_close>:

int _close(int file)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
	return -1;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800358e:	605a      	str	r2, [r3, #4]
	return 0;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <_isatty>:

int _isatty(int file)
{
 800359e:	b480      	push	{r7}
 80035a0:	b083      	sub	sp, #12
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
	return 1;
 80035a6:	2301      	movs	r3, #1
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
	return 0;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035d8:	4a14      	ldr	r2, [pc, #80]	; (800362c <_sbrk+0x5c>)
 80035da:	4b15      	ldr	r3, [pc, #84]	; (8003630 <_sbrk+0x60>)
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035e4:	4b13      	ldr	r3, [pc, #76]	; (8003634 <_sbrk+0x64>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d102      	bne.n	80035f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <_sbrk+0x64>)
 80035ee:	4a12      	ldr	r2, [pc, #72]	; (8003638 <_sbrk+0x68>)
 80035f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <_sbrk+0x64>)
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4413      	add	r3, r2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d207      	bcs.n	8003610 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003600:	f008 fab2 	bl	800bb68 <__errno>
 8003604:	4603      	mov	r3, r0
 8003606:	220c      	movs	r2, #12
 8003608:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800360a:	f04f 33ff 	mov.w	r3, #4294967295
 800360e:	e009      	b.n	8003624 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <_sbrk+0x64>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003616:	4b07      	ldr	r3, [pc, #28]	; (8003634 <_sbrk+0x64>)
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	4a05      	ldr	r2, [pc, #20]	; (8003634 <_sbrk+0x64>)
 8003620:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003622:	68fb      	ldr	r3, [r7, #12]
	}
 8003624:	4618      	mov	r0, r3
 8003626:	3718      	adds	r7, #24
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}
 800362c:	20008000 	.word	0x20008000
 8003630:	00000400 	.word	0x00000400
 8003634:	20000a38 	.word	0x20000a38
 8003638:	20000a68 	.word	0x20000a68

0800363c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003640:	4b06      	ldr	r3, [pc, #24]	; (800365c <SystemInit+0x20>)
 8003642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003646:	4a05      	ldr	r2, [pc, #20]	; (800365c <SystemInit+0x20>)
 8003648:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800364c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003650:	bf00      	nop
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 8003660:	480d      	ldr	r0, [pc, #52]	; (8003698 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003662:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003664:	480d      	ldr	r0, [pc, #52]	; (800369c <LoopForever+0x6>)
  ldr r1, =_edata
 8003666:	490e      	ldr	r1, [pc, #56]	; (80036a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003668:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <LoopForever+0xe>)
  movs r3, #0
 800366a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800366c:	e002      	b.n	8003674 <LoopCopyDataInit>

0800366e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800366e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003670:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003672:	3304      	adds	r3, #4

08003674 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003674:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003676:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003678:	d3f9      	bcc.n	800366e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800367a:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800367c:	4c0b      	ldr	r4, [pc, #44]	; (80036ac <LoopForever+0x16>)
  movs r3, #0
 800367e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003680:	e001      	b.n	8003686 <LoopFillZerobss>

08003682 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003682:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003684:	3204      	adds	r2, #4

08003686 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003686:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003688:	d3fb      	bcc.n	8003682 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800368a:	f7ff ffd7 	bl	800363c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800368e:	f008 fa71 	bl	800bb74 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003692:	f7fe f929 	bl	80018e8 <main>

08003696 <LoopForever>:

LoopForever:
    b LoopForever
 8003696:	e7fe      	b.n	8003696 <LoopForever>
	  ldr   r0, =_estack
 8003698:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800369c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a0:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 80036a4:	08012f78 	.word	0x08012f78
  ldr r2, =_sbss
 80036a8:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80036ac:	20000a68 	.word	0x20000a68

080036b0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036b0:	e7fe      	b.n	80036b0 <COMP1_2_3_IRQHandler>

080036b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b2:	b580      	push	{r7, lr}
 80036b4:	b082      	sub	sp, #8
 80036b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036bc:	2003      	movs	r0, #3
 80036be:	f002 f9ef 	bl	8005aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80036c2:	2000      	movs	r0, #0
 80036c4:	f000 f80e 	bl	80036e4 <HAL_InitTick>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d002      	beq.n	80036d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	71fb      	strb	r3, [r7, #7]
 80036d2:	e001      	b.n	80036d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80036d4:	f7ff fbda 	bl	8002e8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80036d8:	79fb      	ldrb	r3, [r7, #7]

}
 80036da:	4618      	mov	r0, r3
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
	...

080036e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80036f0:	4b16      	ldr	r3, [pc, #88]	; (800374c <HAL_InitTick+0x68>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d022      	beq.n	800373e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80036f8:	4b15      	ldr	r3, [pc, #84]	; (8003750 <HAL_InitTick+0x6c>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b13      	ldr	r3, [pc, #76]	; (800374c <HAL_InitTick+0x68>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003704:	fbb1 f3f3 	udiv	r3, r1, r3
 8003708:	fbb2 f3f3 	udiv	r3, r2, r3
 800370c:	4618      	mov	r0, r3
 800370e:	f002 f9fa 	bl	8005b06 <HAL_SYSTICK_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d10f      	bne.n	8003738 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2b0f      	cmp	r3, #15
 800371c:	d809      	bhi.n	8003732 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800371e:	2200      	movs	r2, #0
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	f04f 30ff 	mov.w	r0, #4294967295
 8003726:	f002 f9c6 	bl	8005ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800372a:	4a0a      	ldr	r2, [pc, #40]	; (8003754 <HAL_InitTick+0x70>)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6013      	str	r3, [r2, #0]
 8003730:	e007      	b.n	8003742 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	73fb      	strb	r3, [r7, #15]
 8003736:	e004      	b.n	8003742 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	73fb      	strb	r3, [r7, #15]
 800373c:	e001      	b.n	8003742 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003742:	7bfb      	ldrb	r3, [r7, #15]
}
 8003744:	4618      	mov	r0, r3
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	20000050 	.word	0x20000050
 8003750:	20000048 	.word	0x20000048
 8003754:	2000004c 	.word	0x2000004c

08003758 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800375c:	4b05      	ldr	r3, [pc, #20]	; (8003774 <HAL_IncTick+0x1c>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b05      	ldr	r3, [pc, #20]	; (8003778 <HAL_IncTick+0x20>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4413      	add	r3, r2
 8003766:	4a03      	ldr	r2, [pc, #12]	; (8003774 <HAL_IncTick+0x1c>)
 8003768:	6013      	str	r3, [r2, #0]
}
 800376a:	bf00      	nop
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	20000a3c 	.word	0x20000a3c
 8003778:	20000050 	.word	0x20000050

0800377c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return uwTick;
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_GetTick+0x14>)
 8003782:	681b      	ldr	r3, [r3, #0]
}
 8003784:	4618      	mov	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	20000a3c 	.word	0x20000a3c

08003794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800379c:	f7ff ffee 	bl	800377c <HAL_GetTick>
 80037a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ac:	d004      	beq.n	80037b8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80037ae:	4b09      	ldr	r3, [pc, #36]	; (80037d4 <HAL_Delay+0x40>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	4413      	add	r3, r2
 80037b6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80037b8:	bf00      	nop
 80037ba:	f7ff ffdf 	bl	800377c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	68fa      	ldr	r2, [r7, #12]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d8f7      	bhi.n	80037ba <HAL_Delay+0x26>
  {
  }
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	3710      	adds	r7, #16
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000050 	.word	0x20000050

080037d8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	609a      	str	r2, [r3, #8]
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr

080037fe <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
 8003806:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	431a      	orrs	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	609a      	str	r2, [r3, #8]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003834:	4618      	mov	r0, r3
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003840:	b480      	push	{r7}
 8003842:	b087      	sub	sp, #28
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
 800384c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	3360      	adds	r3, #96	; 0x60
 8003852:	461a      	mov	r2, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	4b08      	ldr	r3, [pc, #32]	; (8003884 <LL_ADC_SetOffset+0x44>)
 8003862:	4013      	ands	r3, r2
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	430a      	orrs	r2, r1
 800386e:	4313      	orrs	r3, r2
 8003870:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003878:	bf00      	nop
 800387a:	371c      	adds	r7, #28
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	03fff000 	.word	0x03fff000

08003888 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	3360      	adds	r3, #96	; 0x60
 8003896:	461a      	mov	r2, r3
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3360      	adds	r3, #96	; 0x60
 80038c4:	461a      	mov	r2, r3
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	4413      	add	r3, r2
 80038cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	431a      	orrs	r2, r3
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80038de:	bf00      	nop
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr

080038ea <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b087      	sub	sp, #28
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	60f8      	str	r0, [r7, #12]
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	3360      	adds	r3, #96	; 0x60
 80038fa:	461a      	mov	r2, r3
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	431a      	orrs	r2, r3
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	3360      	adds	r3, #96	; 0x60
 8003930:	461a      	mov	r2, r3
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	431a      	orrs	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800394a:	bf00      	nop
 800394c:	371c      	adds	r7, #28
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
 800395e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	695b      	ldr	r3, [r3, #20]
 8003964:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	615a      	str	r2, [r3, #20]
}
 8003970:	bf00      	nop
 8003972:	370c      	adds	r7, #12
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr

0800397c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003990:	2301      	movs	r3, #1
 8003992:	e000      	b.n	8003996 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b087      	sub	sp, #28
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	3330      	adds	r3, #48	; 0x30
 80039b2:	461a      	mov	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	0a1b      	lsrs	r3, r3, #8
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	4413      	add	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	f003 031f 	and.w	r3, r3, #31
 80039cc:	211f      	movs	r1, #31
 80039ce:	fa01 f303 	lsl.w	r3, r1, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	401a      	ands	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	0e9b      	lsrs	r3, r3, #26
 80039da:	f003 011f 	and.w	r1, r3, #31
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	fa01 f303 	lsl.w	r3, r1, r3
 80039e8:	431a      	orrs	r2, r3
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80039ee:	bf00      	nop
 80039f0:	371c      	adds	r7, #28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a06:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e000      	b.n	8003a14 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	3314      	adds	r3, #20
 8003a30:	461a      	mov	r2, r3
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	0e5b      	lsrs	r3, r3, #25
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	4413      	add	r3, r2
 8003a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	0d1b      	lsrs	r3, r3, #20
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2107      	movs	r1, #7
 8003a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	401a      	ands	r2, r3
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	0d1b      	lsrs	r3, r3, #20
 8003a5a:	f003 031f 	and.w	r3, r3, #31
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	fa01 f303 	lsl.w	r3, r1, r3
 8003a64:	431a      	orrs	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
	...

08003a78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b085      	sub	sp, #20
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a0f      	ldr	r2, [pc, #60]	; (8003ac4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d10a      	bne.n	8003aa2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a98:	431a      	orrs	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003aa0:	e00a      	b.n	8003ab8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aae:	43db      	mvns	r3, r3
 8003ab0:	401a      	ands	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003ab8:	bf00      	nop
 8003aba:	3714      	adds	r7, #20
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr
 8003ac4:	407f0000 	.word	0x407f0000

08003ac8 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
  *          -  On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b087      	sub	sp, #28
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	330c      	adds	r3, #12
 8003ad8:	4618      	mov	r0, r3
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	0d1b      	lsrs	r3, r3, #20
 8003ade:	f003 0103 	and.w	r1, r3, #3
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f003 0201 	and.w	r2, r3, #1
 8003ae8:	4613      	mov	r3, r2
 8003aea:	00db      	lsls	r3, r3, #3
 8003aec:	4413      	add	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	440b      	add	r3, r1
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	4403      	add	r3, r0
 8003af6:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8003b02:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8003b06:	43db      	mvns	r3, r3
 8003b08:	401a      	ands	r2, r3
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	400b      	ands	r3, r1
 8003b10:	431a      	orrs	r2, r3
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8003b16:	bf00      	nop
 8003b18:	371c      	adds	r7, #28
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr

08003b22 <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8003b22:	b480      	push	{r7}
 8003b24:	b087      	sub	sp, #28
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
 8003b2e:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	3320      	adds	r3, #32
 8003b34:	461a      	mov	r2, r3
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	0d1b      	lsrs	r3, r3, #20
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	4413      	add	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	0419      	lsls	r1, r3, #16
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	430b      	orrs	r3, r1
 8003b54:	431a      	orrs	r2, r3
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr

08003b66 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b66:	b480      	push	{r7}
 8003b68:	b083      	sub	sp, #12
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f003 031f 	and.w	r3, r3, #31
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	370c      	adds	r7, #12
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b80:	4770      	bx	lr

08003b82 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	370c      	adds	r7, #12
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr

08003b9e <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	b083      	sub	sp, #12
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003bae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6093      	str	r3, [r2, #8]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd6:	d101      	bne.n	8003bdc <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e000      	b.n	8003bde <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	370c      	adds	r7, #12
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr

08003bea <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003bea:	b480      	push	{r7}
 8003bec:	b083      	sub	sp, #12
 8003bee:	af00      	add	r7, sp, #0
 8003bf0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003bfa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bfe:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003c06:	bf00      	nop
 8003c08:	370c      	adds	r7, #12
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003c12:	b480      	push	{r7}
 8003c14:	b083      	sub	sp, #12
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c26:	d101      	bne.n	8003c2c <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c4e:	f043 0201 	orr.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c76:	f043 0202 	orr.w	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0301 	and.w	r3, r3, #1
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <LL_ADC_IsEnabled+0x18>
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e000      	b.n	8003ca4 <LL_ADC_IsEnabled+0x1a>
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	370c      	adds	r7, #12
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d101      	bne.n	8003cc8 <LL_ADC_IsDisableOngoing+0x18>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <LL_ADC_IsDisableOngoing+0x1a>
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ce6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cea:	f043 0204 	orr.w	r2, r3, #4
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003cf2:	bf00      	nop
 8003cf4:	370c      	adds	r7, #12
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cfe:	b480      	push	{r7}
 8003d00:	b083      	sub	sp, #12
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 0304 	and.w	r3, r3, #4
 8003d0e:	2b04      	cmp	r3, #4
 8003d10:	d101      	bne.n	8003d16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d12:	2301      	movs	r3, #1
 8003d14:	e000      	b.n	8003d18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d16:	2300      	movs	r3, #0
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	f003 0308 	and.w	r3, r3, #8
 8003d34:	2b08      	cmp	r3, #8
 8003d36:	d101      	bne.n	8003d3c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003d3c:	2300      	movs	r3, #0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr

08003d4a <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2280      	movs	r2, #128	; 0x80
 8003d56:	601a      	str	r2, [r3, #0]
}
 8003d58:	bf00      	nop
 8003d5a:	370c      	adds	r7, #12
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d72:	601a      	str	r2, [r3, #0]
}
 8003d74:	bf00      	nop
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d8e:	601a      	str	r2, [r3, #0]
}
 8003d90:	bf00      	nop
 8003d92:	370c      	adds	r7, #12
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	605a      	str	r2, [r3, #4]
}
 8003db0:	bf00      	nop
 8003db2:	370c      	adds	r7, #12
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr

08003dbc <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	605a      	str	r2, [r3, #4]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr

08003ddc <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b083      	sub	sp, #12
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	605a      	str	r2, [r3, #4]
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	605a      	str	r2, [r3, #4]
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	605a      	str	r2, [r3, #4]
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	605a      	str	r2, [r3, #4]
}
 8003e50:	bf00      	nop
 8003e52:	370c      	adds	r7, #12
 8003e54:	46bd      	mov	sp, r7
 8003e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5a:	4770      	bx	lr

08003e5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003e5c:	b590      	push	{r4, r7, lr}
 8003e5e:	b089      	sub	sp, #36	; 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e177      	b.n	8004166 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d109      	bne.n	8003e98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff f825 	bl	8002ed4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff fe90 	bl	8003bc2 <LL_ADC_IsDeepPowerDownEnabled>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d004      	beq.n	8003eb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7ff fe76 	bl	8003b9e <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff feab 	bl	8003c12 <LL_ADC_IsInternalRegulatorEnabled>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d115      	bne.n	8003eee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff fe8f 	bl	8003bea <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003ecc:	4b9c      	ldr	r3, [pc, #624]	; (8004140 <HAL_ADC_Init+0x2e4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	099b      	lsrs	r3, r3, #6
 8003ed2:	4a9c      	ldr	r2, [pc, #624]	; (8004144 <HAL_ADC_Init+0x2e8>)
 8003ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed8:	099b      	lsrs	r3, r3, #6
 8003eda:	3301      	adds	r3, #1
 8003edc:	005b      	lsls	r3, r3, #1
 8003ede:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ee0:	e002      	b.n	8003ee8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	3b01      	subs	r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f9      	bne.n	8003ee2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff fe8d 	bl	8003c12 <LL_ADC_IsInternalRegulatorEnabled>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10d      	bne.n	8003f1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f02:	f043 0210 	orr.w	r2, r3, #16
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0e:	f043 0201 	orr.w	r2, r3, #1
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7ff feed 	bl	8003cfe <LL_ADC_REG_IsConversionOngoing>
 8003f24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2a:	f003 0310 	and.w	r3, r3, #16
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f040 8110 	bne.w	8004154 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f040 810c 	bne.w	8004154 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f44:	f043 0202 	orr.w	r2, r3, #2
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7ff fe9a 	bl	8003c8a <LL_ADC_IsEnabled>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d111      	bne.n	8003f80 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f5c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f60:	f7ff fe93 	bl	8003c8a <LL_ADC_IsEnabled>
 8003f64:	4604      	mov	r4, r0
 8003f66:	4878      	ldr	r0, [pc, #480]	; (8004148 <HAL_ADC_Init+0x2ec>)
 8003f68:	f7ff fe8f 	bl	8003c8a <LL_ADC_IsEnabled>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	4323      	orrs	r3, r4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d105      	bne.n	8003f80 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	4874      	ldr	r0, [pc, #464]	; (800414c <HAL_ADC_Init+0x2f0>)
 8003f7c:	f7ff fc2c 	bl	80037d8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	7f5b      	ldrb	r3, [r3, #29]
 8003f84:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f8a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003f90:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003f96:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f9e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d106      	bne.n	8003fbc <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb2:	3b01      	subs	r3, #1
 8003fb4:	045b      	lsls	r3, r3, #17
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d009      	beq.n	8003fd8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fd0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	4b5c      	ldr	r3, [pc, #368]	; (8004150 <HAL_ADC_Init+0x2f4>)
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	69b9      	ldr	r1, [r7, #24]
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff fe79 	bl	8003cfe <LL_ADC_REG_IsConversionOngoing>
 800400c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7ff fe86 	bl	8003d24 <LL_ADC_INJ_IsConversionOngoing>
 8004018:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d16d      	bne.n	80040fc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d16a      	bne.n	80040fc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800402a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004032:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004034:	4313      	orrs	r3, r2
 8004036:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004042:	f023 0302 	bic.w	r3, r3, #2
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6812      	ldr	r2, [r2, #0]
 800404a:	69b9      	ldr	r1, [r7, #24]
 800404c:	430b      	orrs	r3, r1
 800404e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d017      	beq.n	8004088 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004066:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8004070:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004074:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6911      	ldr	r1, [r2, #16]
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6812      	ldr	r2, [r2, #0]
 8004080:	430b      	orrs	r3, r1
 8004082:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004086:	e013      	b.n	80040b0 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004096:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80040a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80040ac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d118      	bne.n	80040ec <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80040c4:	f023 0304 	bic.w	r3, r3, #4
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040d0:	4311      	orrs	r1, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80040d6:	4311      	orrs	r1, r2
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80040dc:	430a      	orrs	r2, r1
 80040de:	431a      	orrs	r2, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f042 0201 	orr.w	r2, r2, #1
 80040e8:	611a      	str	r2, [r3, #16]
 80040ea:	e007      	b.n	80040fc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0201 	bic.w	r2, r2, #1
 80040fa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d10c      	bne.n	800411e <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800410a:	f023 010f 	bic.w	r1, r3, #15
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	1e5a      	subs	r2, r3, #1
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
 800411c:	e007      	b.n	800412e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 020f 	bic.w	r2, r2, #15
 800412c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	f043 0201 	orr.w	r2, r3, #1
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	65da      	str	r2, [r3, #92]	; 0x5c
 800413e:	e011      	b.n	8004164 <HAL_ADC_Init+0x308>
 8004140:	20000048 	.word	0x20000048
 8004144:	053e2d63 	.word	0x053e2d63
 8004148:	50000100 	.word	0x50000100
 800414c:	50000300 	.word	0x50000300
 8004150:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	f043 0210 	orr.w	r2, r3, #16
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004164:	7ffb      	ldrb	r3, [r7, #31]
}
 8004166:	4618      	mov	r0, r3
 8004168:	3724      	adds	r7, #36	; 0x24
 800416a:	46bd      	mov	sp, r7
 800416c:	bd90      	pop	{r4, r7, pc}
 800416e:	bf00      	nop

08004170 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800417c:	4851      	ldr	r0, [pc, #324]	; (80042c4 <HAL_ADC_Start_DMA+0x154>)
 800417e:	f7ff fcf2 	bl	8003b66 <LL_ADC_GetMultimode>
 8004182:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4618      	mov	r0, r3
 800418a:	f7ff fdb8 	bl	8003cfe <LL_ADC_REG_IsConversionOngoing>
 800418e:	4603      	mov	r3, r0
 8004190:	2b00      	cmp	r3, #0
 8004192:	f040 808f 	bne.w	80042b4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_ADC_Start_DMA+0x34>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e08a      	b.n	80042ba <HAL_ADC_Start_DMA+0x14a>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b05      	cmp	r3, #5
 80041b6:	d002      	beq.n	80041be <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b09      	cmp	r3, #9
 80041bc:	d173      	bne.n	80042a6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f001 f8be 	bl	8005340 <ADC_Enable>
 80041c4:	4603      	mov	r3, r0
 80041c6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80041c8:	7dfb      	ldrb	r3, [r7, #23]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d166      	bne.n	800429c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a38      	ldr	r2, [pc, #224]	; (80042c8 <HAL_ADC_Start_DMA+0x158>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d002      	beq.n	80041f2 <HAL_ADC_Start_DMA+0x82>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	e001      	b.n	80041f6 <HAL_ADC_Start_DMA+0x86>
 80041f2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	6812      	ldr	r2, [r2, #0]
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d002      	beq.n	8004204 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d105      	bne.n	8004210 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004214:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d006      	beq.n	800422a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004220:	f023 0206 	bic.w	r2, r3, #6
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	661a      	str	r2, [r3, #96]	; 0x60
 8004228:	e002      	b.n	8004230 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004234:	4a25      	ldr	r2, [pc, #148]	; (80042cc <HAL_ADC_Start_DMA+0x15c>)
 8004236:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	4a24      	ldr	r2, [pc, #144]	; (80042d0 <HAL_ADC_Start_DMA+0x160>)
 800423e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	4a23      	ldr	r2, [pc, #140]	; (80042d4 <HAL_ADC_Start_DMA+0x164>)
 8004246:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	221c      	movs	r2, #28
 800424e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	685a      	ldr	r2, [r3, #4]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0210 	orr.w	r2, r2, #16
 8004266:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68da      	ldr	r2, [r3, #12]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f042 0201 	orr.w	r2, r2, #1
 8004276:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3340      	adds	r3, #64	; 0x40
 8004282:	4619      	mov	r1, r3
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f001 fcf2 	bl	8005c70 <HAL_DMA_Start_IT>
 800428c:	4603      	mov	r3, r0
 800428e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff fd1e 	bl	8003cd6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800429a:	e00d      	b.n	80042b8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80042a4:	e008      	b.n	80042b8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80042b2:	e001      	b.n	80042b8 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80042b4:	2302      	movs	r3, #2
 80042b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3718      	adds	r7, #24
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	50000300 	.word	0x50000300
 80042c8:	50000100 	.word	0x50000100
 80042cc:	080054c3 	.word	0x080054c3
 80042d0:	0800559b 	.word	0x0800559b
 80042d4:	080055b7 	.word	0x080055b7

080042d8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08a      	sub	sp, #40	; 0x28
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80042e0:	2300      	movs	r3, #0
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042f4:	4883      	ldr	r0, [pc, #524]	; (8004504 <HAL_ADC_IRQHandler+0x22c>)
 80042f6:	f7ff fc36 	bl	8003b66 <LL_ADC_GetMultimode>
 80042fa:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d017      	beq.n	8004336 <HAL_ADC_IRQHandler+0x5e>
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d012      	beq.n	8004336 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004314:	f003 0310 	and.w	r3, r3, #16
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004320:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f001 fa3b 	bl	80057a4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2202      	movs	r2, #2
 8004334:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f003 0304 	and.w	r3, r3, #4
 800433c:	2b00      	cmp	r3, #0
 800433e:	d004      	beq.n	800434a <HAL_ADC_IRQHandler+0x72>
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	f003 0304 	and.w	r3, r3, #4
 8004346:	2b00      	cmp	r3, #0
 8004348:	d10a      	bne.n	8004360 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8085 	beq.w	8004460 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f003 0308 	and.w	r3, r3, #8
 800435c:	2b00      	cmp	r3, #0
 800435e:	d07f      	beq.n	8004460 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004364:	f003 0310 	and.w	r3, r3, #16
 8004368:	2b00      	cmp	r3, #0
 800436a:	d105      	bne.n	8004378 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004370:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4618      	mov	r0, r3
 800437e:	f7ff fafd 	bl	800397c <LL_ADC_REG_IsTriggerSourceSWStart>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d064      	beq.n	8004452 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a5e      	ldr	r2, [pc, #376]	; (8004508 <HAL_ADC_IRQHandler+0x230>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d002      	beq.n	8004398 <HAL_ADC_IRQHandler+0xc0>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	e001      	b.n	800439c <HAL_ADC_IRQHandler+0xc4>
 8004398:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	6812      	ldr	r2, [r2, #0]
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d008      	beq.n	80043b6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	2b05      	cmp	r3, #5
 80043ae:	d002      	beq.n	80043b6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	2b09      	cmp	r3, #9
 80043b4:	d104      	bne.n	80043c0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	623b      	str	r3, [r7, #32]
 80043be:	e00d      	b.n	80043dc <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a50      	ldr	r2, [pc, #320]	; (8004508 <HAL_ADC_IRQHandler+0x230>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d002      	beq.n	80043d0 <HAL_ADC_IRQHandler+0xf8>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	e001      	b.n	80043d4 <HAL_ADC_IRQHandler+0xfc>
 80043d0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80043d4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80043dc:	6a3b      	ldr	r3, [r7, #32]
 80043de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d135      	bne.n	8004452 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b08      	cmp	r3, #8
 80043f2:	d12e      	bne.n	8004452 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f7ff fc80 	bl	8003cfe <LL_ADC_REG_IsConversionOngoing>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d11a      	bne.n	800443a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 020c 	bic.w	r2, r2, #12
 8004412:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004418:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004428:	2b00      	cmp	r3, #0
 800442a:	d112      	bne.n	8004452 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004430:	f043 0201 	orr.w	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	65da      	str	r2, [r3, #92]	; 0x5c
 8004438:	e00b      	b.n	8004452 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	f043 0210 	orr.w	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800444a:	f043 0201 	orr.w	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7fd fa18 	bl	8001888 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	220c      	movs	r2, #12
 800445e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0320 	and.w	r3, r3, #32
 8004466:	2b00      	cmp	r3, #0
 8004468:	d004      	beq.n	8004474 <HAL_ADC_IRQHandler+0x19c>
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	f003 0320 	and.w	r3, r3, #32
 8004470:	2b00      	cmp	r3, #0
 8004472:	d10b      	bne.n	800448c <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 809e 	beq.w	80045bc <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004486:	2b00      	cmp	r3, #0
 8004488:	f000 8098 	beq.w	80045bc <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	f003 0310 	and.w	r3, r3, #16
 8004494:	2b00      	cmp	r3, #0
 8004496:	d105      	bne.n	80044a4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff faa6 	bl	80039fa <LL_ADC_INJ_IsTriggerSourceSWStart>
 80044ae:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f7ff fa61 	bl	800397c <LL_ADC_REG_IsTriggerSourceSWStart>
 80044ba:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a11      	ldr	r2, [pc, #68]	; (8004508 <HAL_ADC_IRQHandler+0x230>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d002      	beq.n	80044cc <HAL_ADC_IRQHandler+0x1f4>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	e001      	b.n	80044d0 <HAL_ADC_IRQHandler+0x1f8>
 80044cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d008      	beq.n	80044ea <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b06      	cmp	r3, #6
 80044e2:	d002      	beq.n	80044ea <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	2b07      	cmp	r3, #7
 80044e8:	d104      	bne.n	80044f4 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	623b      	str	r3, [r7, #32]
 80044f2:	e011      	b.n	8004518 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a03      	ldr	r2, [pc, #12]	; (8004508 <HAL_ADC_IRQHandler+0x230>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d006      	beq.n	800450c <HAL_ADC_IRQHandler+0x234>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	e005      	b.n	8004510 <HAL_ADC_IRQHandler+0x238>
 8004504:	50000300 	.word	0x50000300
 8004508:	50000100 	.word	0x50000100
 800450c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004510:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d047      	beq.n	80045ae <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800451e:	6a3b      	ldr	r3, [r7, #32]
 8004520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004524:	2b00      	cmp	r3, #0
 8004526:	d007      	beq.n	8004538 <HAL_ADC_IRQHandler+0x260>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d03f      	beq.n	80045ae <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004534:	2b00      	cmp	r3, #0
 8004536:	d13a      	bne.n	80045ae <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004542:	2b40      	cmp	r3, #64	; 0x40
 8004544:	d133      	bne.n	80045ae <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800454c:	2b00      	cmp	r3, #0
 800454e:	d12e      	bne.n	80045ae <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fbe5 	bl	8003d24 <LL_ADC_INJ_IsConversionOngoing>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d11a      	bne.n	8004596 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800456e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004574:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d112      	bne.n	80045ae <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800458c:	f043 0201 	orr.w	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	65da      	str	r2, [r3, #92]	; 0x5c
 8004594:	e00b      	b.n	80045ae <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459a:	f043 0210 	orr.w	r2, r3, #16
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	f043 0201 	orr.w	r2, r3, #1
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f001 f8d0 	bl	8005754 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2260      	movs	r2, #96	; 0x60
 80045ba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d011      	beq.n	80045ea <HAL_ADC_IRQHandler+0x312>
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d00c      	beq.n	80045ea <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f89f 	bl	8004720 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2280      	movs	r2, #128	; 0x80
 80045e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d012      	beq.n	800461a <HAL_ADC_IRQHandler+0x342>
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00d      	beq.n	800461a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004602:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f001 f8b6 	bl	800577c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004618:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004620:	2b00      	cmp	r3, #0
 8004622:	d012      	beq.n	800464a <HAL_ADC_IRQHandler+0x372>
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800462a:	2b00      	cmp	r3, #0
 800462c:	d00d      	beq.n	800464a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f001 f8a8 	bl	8005790 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004648:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	f003 0310 	and.w	r3, r3, #16
 8004650:	2b00      	cmp	r3, #0
 8004652:	d036      	beq.n	80046c2 <HAL_ADC_IRQHandler+0x3ea>
 8004654:	69bb      	ldr	r3, [r7, #24]
 8004656:	f003 0310 	and.w	r3, r3, #16
 800465a:	2b00      	cmp	r3, #0
 800465c:	d031      	beq.n	80046c2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004662:	2b00      	cmp	r3, #0
 8004664:	d102      	bne.n	800466c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004666:	2301      	movs	r3, #1
 8004668:	627b      	str	r3, [r7, #36]	; 0x24
 800466a:	e014      	b.n	8004696 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d008      	beq.n	8004684 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8004672:	4825      	ldr	r0, [pc, #148]	; (8004708 <HAL_ADC_IRQHandler+0x430>)
 8004674:	f7ff fa85 	bl	8003b82 <LL_ADC_GetMultiDMATransfer>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d00b      	beq.n	8004696 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800467e:	2301      	movs	r3, #1
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
 8004682:	e008      	b.n	8004696 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68db      	ldr	r3, [r3, #12]
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 8004692:	2301      	movs	r3, #1
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	2b01      	cmp	r3, #1
 800469a:	d10e      	bne.n	80046ba <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ac:	f043 0202 	orr.w	r2, r3, #2
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f83d 	bl	8004734 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2210      	movs	r2, #16
 80046c0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80046c2:	69fb      	ldr	r3, [r7, #28]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d018      	beq.n	80046fe <HAL_ADC_IRQHandler+0x426>
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d013      	beq.n	80046fe <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046da:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046e6:	f043 0208 	orr.w	r2, r3, #8
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046f6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f001 f835 	bl	8005768 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80046fe:	bf00      	nop
 8004700:	3728      	adds	r7, #40	; 0x28
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	50000300 	.word	0x50000300

0800470c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8004720:	b480      	push	{r7}
 8004722:	b083      	sub	sp, #12
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8004728:	bf00      	nop
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b0b6      	sub	sp, #216	; 0xd8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004762:	2b01      	cmp	r3, #1
 8004764:	d101      	bne.n	800476a <HAL_ADC_ConfigChannel+0x22>
 8004766:	2302      	movs	r3, #2
 8004768:	e3c8      	b.n	8004efc <HAL_ADC_ConfigChannel+0x7b4>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2201      	movs	r2, #1
 800476e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4618      	mov	r0, r3
 8004778:	f7ff fac1 	bl	8003cfe <LL_ADC_REG_IsConversionOngoing>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	f040 83ad 	bne.w	8004ede <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	461a      	mov	r2, r3
 8004792:	f7ff f906 	bl	80039a2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7ff faaf 	bl	8003cfe <LL_ADC_REG_IsConversionOngoing>
 80047a0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f7ff fabb 	bl	8003d24 <LL_ADC_INJ_IsConversionOngoing>
 80047ae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80047b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	f040 81d9 	bne.w	8004b6e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80047bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f040 81d4 	bne.w	8004b6e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047ce:	d10f      	bne.n	80047f0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6818      	ldr	r0, [r3, #0]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2200      	movs	r2, #0
 80047da:	4619      	mov	r1, r3
 80047dc:	f7ff f920 	bl	8003a20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff f8b4 	bl	8003956 <LL_ADC_SetSamplingTimeCommonConfig>
 80047ee:	e00e      	b.n	800480e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6818      	ldr	r0, [r3, #0]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	6819      	ldr	r1, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	461a      	mov	r2, r3
 80047fe:	f7ff f90f 	bl	8003a20 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff f8a4 	bl	8003956 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	08db      	lsrs	r3, r3, #3
 800481a:	f003 0303 	and.w	r3, r3, #3
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	2b04      	cmp	r3, #4
 800482e:	d022      	beq.n	8004876 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	6919      	ldr	r1, [r3, #16]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004840:	f7fe fffe 	bl	8003840 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6818      	ldr	r0, [r3, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	6919      	ldr	r1, [r3, #16]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	461a      	mov	r2, r3
 8004852:	f7ff f84a 	bl	80038ea <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6919      	ldr	r1, [r3, #16]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	7f1b      	ldrb	r3, [r3, #28]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d102      	bne.n	800486c <HAL_ADC_ConfigChannel+0x124>
 8004866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800486a:	e000      	b.n	800486e <HAL_ADC_ConfigChannel+0x126>
 800486c:	2300      	movs	r3, #0
 800486e:	461a      	mov	r2, r3
 8004870:	f7ff f856 	bl	8003920 <LL_ADC_SetOffsetSaturation>
 8004874:	e17b      	b.n	8004b6e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	2100      	movs	r1, #0
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff f803 	bl	8003888 <LL_ADC_GetOffsetChannel>
 8004882:	4603      	mov	r3, r0
 8004884:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10a      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x15a>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2100      	movs	r1, #0
 8004892:	4618      	mov	r0, r3
 8004894:	f7fe fff8 	bl	8003888 <LL_ADC_GetOffsetChannel>
 8004898:	4603      	mov	r3, r0
 800489a:	0e9b      	lsrs	r3, r3, #26
 800489c:	f003 021f 	and.w	r2, r3, #31
 80048a0:	e01e      	b.n	80048e0 <HAL_ADC_ConfigChannel+0x198>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2100      	movs	r1, #0
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fe ffed 	bl	8003888 <LL_ADC_GetOffsetChannel>
 80048ae:	4603      	mov	r3, r0
 80048b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80048b8:	fa93 f3a3 	rbit	r3, r3
 80048bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80048c0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80048c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80048c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d101      	bne.n	80048d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80048d0:	2320      	movs	r3, #32
 80048d2:	e004      	b.n	80048de <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80048d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80048d8:	fab3 f383 	clz	r3, r3
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d105      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x1b0>
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	0e9b      	lsrs	r3, r3, #26
 80048f2:	f003 031f 	and.w	r3, r3, #31
 80048f6:	e018      	b.n	800492a <HAL_ADC_ConfigChannel+0x1e2>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004900:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004904:	fa93 f3a3 	rbit	r3, r3
 8004908:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800490c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004910:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004914:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004918:	2b00      	cmp	r3, #0
 800491a:	d101      	bne.n	8004920 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800491c:	2320      	movs	r3, #32
 800491e:	e004      	b.n	800492a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8004920:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004924:	fab3 f383 	clz	r3, r3
 8004928:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800492a:	429a      	cmp	r2, r3
 800492c:	d106      	bne.n	800493c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2200      	movs	r2, #0
 8004934:	2100      	movs	r1, #0
 8004936:	4618      	mov	r0, r3
 8004938:	f7fe ffbc 	bl	80038b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2101      	movs	r1, #1
 8004942:	4618      	mov	r0, r3
 8004944:	f7fe ffa0 	bl	8003888 <LL_ADC_GetOffsetChannel>
 8004948:	4603      	mov	r3, r0
 800494a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10a      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x220>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2101      	movs	r1, #1
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe ff95 	bl	8003888 <LL_ADC_GetOffsetChannel>
 800495e:	4603      	mov	r3, r0
 8004960:	0e9b      	lsrs	r3, r3, #26
 8004962:	f003 021f 	and.w	r2, r3, #31
 8004966:	e01e      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x25e>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2101      	movs	r1, #1
 800496e:	4618      	mov	r0, r3
 8004970:	f7fe ff8a 	bl	8003888 <LL_ADC_GetOffsetChannel>
 8004974:	4603      	mov	r3, r0
 8004976:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800497a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800497e:	fa93 f3a3 	rbit	r3, r3
 8004982:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004986:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800498a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800498e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004992:	2b00      	cmp	r3, #0
 8004994:	d101      	bne.n	800499a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004996:	2320      	movs	r3, #32
 8004998:	e004      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800499a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800499e:	fab3 f383 	clz	r3, r3
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d105      	bne.n	80049be <HAL_ADC_ConfigChannel+0x276>
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	0e9b      	lsrs	r3, r3, #26
 80049b8:	f003 031f 	and.w	r3, r3, #31
 80049bc:	e018      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x2a8>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049ca:	fa93 f3a3 	rbit	r3, r3
 80049ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80049d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80049d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80049da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 80049e2:	2320      	movs	r3, #32
 80049e4:	e004      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 80049e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d106      	bne.n	8004a02 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	2200      	movs	r2, #0
 80049fa:	2101      	movs	r1, #1
 80049fc:	4618      	mov	r0, r3
 80049fe:	f7fe ff59 	bl	80038b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2102      	movs	r1, #2
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe ff3d 	bl	8003888 <LL_ADC_GetOffsetChannel>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10a      	bne.n	8004a2e <HAL_ADC_ConfigChannel+0x2e6>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2102      	movs	r1, #2
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe ff32 	bl	8003888 <LL_ADC_GetOffsetChannel>
 8004a24:	4603      	mov	r3, r0
 8004a26:	0e9b      	lsrs	r3, r3, #26
 8004a28:	f003 021f 	and.w	r2, r3, #31
 8004a2c:	e01e      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x324>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2102      	movs	r1, #2
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7fe ff27 	bl	8003888 <LL_ADC_GetOffsetChannel>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a44:	fa93 f3a3 	rbit	r3, r3
 8004a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004a4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004a54:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d101      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	e004      	b.n	8004a6a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004a60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a64:	fab3 f383 	clz	r3, r3
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d105      	bne.n	8004a84 <HAL_ADC_ConfigChannel+0x33c>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	0e9b      	lsrs	r3, r3, #26
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	e016      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x36a>
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a90:	fa93 f3a3 	rbit	r3, r3
 8004a94:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004a96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004a9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	e004      	b.n	8004ab2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004aac:	fab3 f383 	clz	r3, r3
 8004ab0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d106      	bne.n	8004ac4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2200      	movs	r2, #0
 8004abc:	2102      	movs	r1, #2
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe fef8 	bl	80038b4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	2103      	movs	r1, #3
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe fedc 	bl	8003888 <LL_ADC_GetOffsetChannel>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10a      	bne.n	8004af0 <HAL_ADC_ConfigChannel+0x3a8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	2103      	movs	r1, #3
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f7fe fed1 	bl	8003888 <LL_ADC_GetOffsetChannel>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	0e9b      	lsrs	r3, r3, #26
 8004aea:	f003 021f 	and.w	r2, r3, #31
 8004aee:	e017      	b.n	8004b20 <HAL_ADC_ConfigChannel+0x3d8>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2103      	movs	r1, #3
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7fe fec6 	bl	8003888 <LL_ADC_GetOffsetChannel>
 8004afc:	4603      	mov	r3, r0
 8004afe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b02:	fa93 f3a3 	rbit	r3, r3
 8004b06:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b0a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004b12:	2320      	movs	r3, #32
 8004b14:	e003      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004b16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b18:	fab3 f383 	clz	r3, r3
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d105      	bne.n	8004b38 <HAL_ADC_ConfigChannel+0x3f0>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	0e9b      	lsrs	r3, r3, #26
 8004b32:	f003 031f 	and.w	r3, r3, #31
 8004b36:	e011      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x414>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b40:	fa93 f3a3 	rbit	r3, r3
 8004b44:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004b46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b48:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004b4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004b50:	2320      	movs	r3, #32
 8004b52:	e003      	b.n	8004b5c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004b54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b56:	fab3 f383 	clz	r3, r3
 8004b5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d106      	bne.n	8004b6e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2200      	movs	r2, #0
 8004b66:	2103      	movs	r1, #3
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fe fea3 	bl	80038b4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff f889 	bl	8003c8a <LL_ADC_IsEnabled>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	f040 8140 	bne.w	8004e00 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6818      	ldr	r0, [r3, #0]
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	6819      	ldr	r1, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	f7fe ff73 	bl	8003a78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	4a8f      	ldr	r2, [pc, #572]	; (8004dd4 <HAL_ADC_ConfigChannel+0x68c>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	f040 8131 	bne.w	8004e00 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10b      	bne.n	8004bc6 <HAL_ADC_ConfigChannel+0x47e>
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	0e9b      	lsrs	r3, r3, #26
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	f003 031f 	and.w	r3, r3, #31
 8004bba:	2b09      	cmp	r3, #9
 8004bbc:	bf94      	ite	ls
 8004bbe:	2301      	movls	r3, #1
 8004bc0:	2300      	movhi	r3, #0
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	e019      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x4b2>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bcc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004bd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004bd6:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004bd8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004bde:	2320      	movs	r3, #32
 8004be0:	e003      	b.n	8004bea <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004be2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004be4:	fab3 f383 	clz	r3, r3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	3301      	adds	r3, #1
 8004bec:	f003 031f 	and.w	r3, r3, #31
 8004bf0:	2b09      	cmp	r3, #9
 8004bf2:	bf94      	ite	ls
 8004bf4:	2301      	movls	r3, #1
 8004bf6:	2300      	movhi	r3, #0
 8004bf8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d079      	beq.n	8004cf2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d107      	bne.n	8004c1a <HAL_ADC_ConfigChannel+0x4d2>
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	0e9b      	lsrs	r3, r3, #26
 8004c10:	3301      	adds	r3, #1
 8004c12:	069b      	lsls	r3, r3, #26
 8004c14:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c18:	e015      	b.n	8004c46 <HAL_ADC_ConfigChannel+0x4fe>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c22:	fa93 f3a3 	rbit	r3, r3
 8004c26:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004c2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d101      	bne.n	8004c36 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004c32:	2320      	movs	r3, #32
 8004c34:	e003      	b.n	8004c3e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c38:	fab3 f383 	clz	r3, r3
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	3301      	adds	r3, #1
 8004c40:	069b      	lsls	r3, r3, #26
 8004c42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d109      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x51e>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	0e9b      	lsrs	r3, r3, #26
 8004c58:	3301      	adds	r3, #1
 8004c5a:	f003 031f 	and.w	r3, r3, #31
 8004c5e:	2101      	movs	r1, #1
 8004c60:	fa01 f303 	lsl.w	r3, r1, r3
 8004c64:	e017      	b.n	8004c96 <HAL_ADC_ConfigChannel+0x54e>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c6e:	fa93 f3a3 	rbit	r3, r3
 8004c72:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004c7e:	2320      	movs	r3, #32
 8004c80:	e003      	b.n	8004c8a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004c82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c84:	fab3 f383 	clz	r3, r3
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	3301      	adds	r3, #1
 8004c8c:	f003 031f 	and.w	r3, r3, #31
 8004c90:	2101      	movs	r1, #1
 8004c92:	fa01 f303 	lsl.w	r3, r1, r3
 8004c96:	ea42 0103 	orr.w	r1, r2, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10a      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x574>
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	0e9b      	lsrs	r3, r3, #26
 8004cac:	3301      	adds	r3, #1
 8004cae:	f003 021f 	and.w	r2, r3, #31
 8004cb2:	4613      	mov	r3, r2
 8004cb4:	005b      	lsls	r3, r3, #1
 8004cb6:	4413      	add	r3, r2
 8004cb8:	051b      	lsls	r3, r3, #20
 8004cba:	e018      	b.n	8004cee <HAL_ADC_ConfigChannel+0x5a6>
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc4:	fa93 f3a3 	rbit	r3, r3
 8004cc8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d101      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004cd4:	2320      	movs	r3, #32
 8004cd6:	e003      	b.n	8004ce0 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cda:	fab3 f383 	clz	r3, r3
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	f003 021f 	and.w	r2, r3, #31
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	4413      	add	r3, r2
 8004cec:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004cee:	430b      	orrs	r3, r1
 8004cf0:	e081      	b.n	8004df6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d107      	bne.n	8004d0e <HAL_ADC_ConfigChannel+0x5c6>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	0e9b      	lsrs	r3, r3, #26
 8004d04:	3301      	adds	r3, #1
 8004d06:	069b      	lsls	r3, r3, #26
 8004d08:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d0c:	e015      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x5f2>
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d16:	fa93 f3a3 	rbit	r3, r3
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004d26:	2320      	movs	r3, #32
 8004d28:	e003      	b.n	8004d32 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d2c:	fab3 f383 	clz	r3, r3
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	3301      	adds	r3, #1
 8004d34:	069b      	lsls	r3, r3, #26
 8004d36:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d109      	bne.n	8004d5a <HAL_ADC_ConfigChannel+0x612>
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	0e9b      	lsrs	r3, r3, #26
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	f003 031f 	and.w	r3, r3, #31
 8004d52:	2101      	movs	r1, #1
 8004d54:	fa01 f303 	lsl.w	r3, r1, r3
 8004d58:	e017      	b.n	8004d8a <HAL_ADC_ConfigChannel+0x642>
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	fa93 f3a3 	rbit	r3, r3
 8004d66:	61fb      	str	r3, [r7, #28]
  return result;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004d72:	2320      	movs	r3, #32
 8004d74:	e003      	b.n	8004d7e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d78:	fab3 f383 	clz	r3, r3
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	f003 031f 	and.w	r3, r3, #31
 8004d84:	2101      	movs	r1, #1
 8004d86:	fa01 f303 	lsl.w	r3, r1, r3
 8004d8a:	ea42 0103 	orr.w	r1, r2, r3
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d10d      	bne.n	8004db6 <HAL_ADC_ConfigChannel+0x66e>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	0e9b      	lsrs	r3, r3, #26
 8004da0:	3301      	adds	r3, #1
 8004da2:	f003 021f 	and.w	r2, r3, #31
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	3b1e      	subs	r3, #30
 8004dae:	051b      	lsls	r3, r3, #20
 8004db0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004db4:	e01e      	b.n	8004df4 <HAL_ADC_ConfigChannel+0x6ac>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	fa93 f3a3 	rbit	r3, r3
 8004dc2:	613b      	str	r3, [r7, #16]
  return result;
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004dc8:	69bb      	ldr	r3, [r7, #24]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d104      	bne.n	8004dd8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004dce:	2320      	movs	r3, #32
 8004dd0:	e006      	b.n	8004de0 <HAL_ADC_ConfigChannel+0x698>
 8004dd2:	bf00      	nop
 8004dd4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	fab3 f383 	clz	r3, r3
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	3301      	adds	r3, #1
 8004de2:	f003 021f 	and.w	r2, r3, #31
 8004de6:	4613      	mov	r3, r2
 8004de8:	005b      	lsls	r3, r3, #1
 8004dea:	4413      	add	r3, r2
 8004dec:	3b1e      	subs	r3, #30
 8004dee:	051b      	lsls	r3, r3, #20
 8004df0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004df4:	430b      	orrs	r3, r1
 8004df6:	683a      	ldr	r2, [r7, #0]
 8004df8:	6892      	ldr	r2, [r2, #8]
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	f7fe fe10 	bl	8003a20 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	4b3f      	ldr	r3, [pc, #252]	; (8004f04 <HAL_ADC_ConfigChannel+0x7bc>)
 8004e06:	4013      	ands	r3, r2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d071      	beq.n	8004ef0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004e0c:	483e      	ldr	r0, [pc, #248]	; (8004f08 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e0e:	f7fe fd09 	bl	8003824 <LL_ADC_GetCommonPathInternalCh>
 8004e12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a3c      	ldr	r2, [pc, #240]	; (8004f0c <HAL_ADC_ConfigChannel+0x7c4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d004      	beq.n	8004e2a <HAL_ADC_ConfigChannel+0x6e2>
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a3a      	ldr	r2, [pc, #232]	; (8004f10 <HAL_ADC_ConfigChannel+0x7c8>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d127      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004e2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d121      	bne.n	8004e7a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e3e:	d157      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e48:	4619      	mov	r1, r3
 8004e4a:	482f      	ldr	r0, [pc, #188]	; (8004f08 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e4c:	f7fe fcd7 	bl	80037fe <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e50:	4b30      	ldr	r3, [pc, #192]	; (8004f14 <HAL_ADC_ConfigChannel+0x7cc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	099b      	lsrs	r3, r3, #6
 8004e56:	4a30      	ldr	r2, [pc, #192]	; (8004f18 <HAL_ADC_ConfigChannel+0x7d0>)
 8004e58:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5c:	099b      	lsrs	r3, r3, #6
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	4613      	mov	r3, r2
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e6a:	e002      	b.n	8004e72 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f9      	bne.n	8004e6c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e78:	e03a      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a27      	ldr	r2, [pc, #156]	; (8004f1c <HAL_ADC_ConfigChannel+0x7d4>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d113      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x764>
 8004e84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10d      	bne.n	8004eac <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a22      	ldr	r2, [pc, #136]	; (8004f20 <HAL_ADC_ConfigChannel+0x7d8>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d02a      	beq.n	8004ef0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e9a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4818      	ldr	r0, [pc, #96]	; (8004f08 <HAL_ADC_ConfigChannel+0x7c0>)
 8004ea6:	f7fe fcaa 	bl	80037fe <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004eaa:	e021      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a1c      	ldr	r2, [pc, #112]	; (8004f24 <HAL_ADC_ConfigChannel+0x7dc>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d11c      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004eb6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d116      	bne.n	8004ef0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <HAL_ADC_ConfigChannel+0x7d8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d011      	beq.n	8004ef0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ecc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ed0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	480c      	ldr	r0, [pc, #48]	; (8004f08 <HAL_ADC_ConfigChannel+0x7c0>)
 8004ed8:	f7fe fc91 	bl	80037fe <LL_ADC_SetCommonPathInternalCh>
 8004edc:	e008      	b.n	8004ef0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ee2:	f043 0220 	orr.w	r2, r3, #32
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ef8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	37d8      	adds	r7, #216	; 0xd8
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	80080000 	.word	0x80080000
 8004f08:	50000300 	.word	0x50000300
 8004f0c:	c3210000 	.word	0xc3210000
 8004f10:	90c00010 	.word	0x90c00010
 8004f14:	20000048 	.word	0x20000048
 8004f18:	053e2d63 	.word	0x053e2d63
 8004f1c:	c7520000 	.word	0xc7520000
 8004f20:	50000100 	.word	0x50000100
 8004f24:	cb840000 	.word	0xcb840000

08004f28 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08e      	sub	sp, #56	; 0x38
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f40:	d003      	beq.n	8004f4a <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004f46:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d101      	bne.n	8004f58 <HAL_ADC_AnalogWDGConfig+0x30>
 8004f54:	2302      	movs	r3, #2
 8004f56:	e1ea      	b.n	800532e <HAL_ADC_AnalogWDGConfig+0x406>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f7fe feca 	bl	8003cfe <LL_ADC_REG_IsConversionOngoing>
 8004f6a:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f7fe fed7 	bl	8003d24 <LL_ADC_INJ_IsConversionOngoing>
 8004f76:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f040 8175 	bne.w	800526a <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	f040 8171 	bne.w	800526a <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a90      	ldr	r2, [pc, #576]	; (80051d0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	f040 808d 	bne.w	80050ae <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8004f9c:	d034      	beq.n	8005008 <HAL_ADC_AnalogWDGConfig+0xe0>
 8004f9e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8004fa2:	d856      	bhi.n	8005052 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004fa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fa8:	d04b      	beq.n	8005042 <HAL_ADC_AnalogWDGConfig+0x11a>
 8004faa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004fae:	d850      	bhi.n	8005052 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004fb0:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004fb4:	d01b      	beq.n	8004fee <HAL_ADC_AnalogWDGConfig+0xc6>
 8004fb6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004fba:	d84a      	bhi.n	8005052 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004fbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fc0:	d037      	beq.n	8005032 <HAL_ADC_AnalogWDGConfig+0x10a>
 8004fc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fc6:	d844      	bhi.n	8005052 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004fc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fcc:	d029      	beq.n	8005022 <HAL_ADC_AnalogWDGConfig+0xfa>
 8004fce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004fd2:	d13e      	bne.n	8005052 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6818      	ldr	r0, [r3, #0]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004fe0:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	497a      	ldr	r1, [pc, #488]	; (80051d0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8004fe8:	f7fe fd6e 	bl	8003ac8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8004fec:	e039      	b.n	8005062 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6818      	ldr	r0, [r3, #0]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004ffa:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8004ffe:	461a      	mov	r2, r3
 8005000:	4973      	ldr	r1, [pc, #460]	; (80051d0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8005002:	f7fe fd61 	bl	8003ac8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8005006:	e02c      	b.n	8005062 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6818      	ldr	r0, [r3, #0]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8005014:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8005018:	461a      	mov	r2, r3
 800501a:	496d      	ldr	r1, [pc, #436]	; (80051d0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800501c:	f7fe fd54 	bl	8003ac8 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8005020:	e01f      	b.n	8005062 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a6b      	ldr	r2, [pc, #428]	; (80051d4 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8005028:	4969      	ldr	r1, [pc, #420]	; (80051d0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe fd4c 	bl	8003ac8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005030:	e017      	b.n	8005062 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a68      	ldr	r2, [pc, #416]	; (80051d8 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8005038:	4965      	ldr	r1, [pc, #404]	; (80051d0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800503a:	4618      	mov	r0, r3
 800503c:	f7fe fd44 	bl	8003ac8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005040:	e00f      	b.n	8005062 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a65      	ldr	r2, [pc, #404]	; (80051dc <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8005048:	4961      	ldr	r1, [pc, #388]	; (80051d0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe fd3c 	bl	8003ac8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005050:	e007      	b.n	8005062 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	2200      	movs	r2, #0
 8005058:	495d      	ldr	r1, [pc, #372]	; (80051d0 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fd34 	bl	8003ac8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005060:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	699a      	ldr	r2, [r3, #24]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800507c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe fe5e 	bl	8003d4a <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	7b1b      	ldrb	r3, [r3, #12]
 8005092:	2b01      	cmp	r3, #1
 8005094:	d105      	bne.n	80050a2 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe fe7e 	bl	8003d9c <LL_ADC_EnableIT_AWD1>
 80050a0:	e0e3      	b.n	800526a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4618      	mov	r0, r3
 80050a8:	f7fe fea8 	bl	8003dfc <LL_ADC_DisableIT_AWD1>
 80050ac:	e0dd      	b.n	800526a <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80050b6:	d01d      	beq.n	80050f4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80050b8:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80050bc:	f200 8092 	bhi.w	80051e4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80050c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050c4:	d07b      	beq.n	80051be <HAL_ADC_AnalogWDGConfig+0x296>
 80050c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80050ca:	f200 808b 	bhi.w	80051e4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80050ce:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80050d2:	d00f      	beq.n	80050f4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 80050d4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80050d8:	f200 8084 	bhi.w	80051e4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80050dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050e0:	d06d      	beq.n	80051be <HAL_ADC_AnalogWDGConfig+0x296>
 80050e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80050e6:	d87d      	bhi.n	80051e4 <HAL_ADC_AnalogWDGConfig+0x2bc>
 80050e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80050ec:	d067      	beq.n	80051be <HAL_ADC_AnalogWDGConfig+0x296>
 80050ee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050f2:	d177      	bne.n	80051e4 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a39      	ldr	r2, [pc, #228]	; (80051e0 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d12f      	bne.n	800515e <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005106:	2b00      	cmp	r3, #0
 8005108:	d108      	bne.n	800511c <HAL_ADC_AnalogWDGConfig+0x1f4>
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0e9b      	lsrs	r3, r3, #26
 8005110:	f003 031f 	and.w	r3, r3, #31
 8005114:	2201      	movs	r2, #1
 8005116:	fa02 f303 	lsl.w	r3, r2, r3
 800511a:	e016      	b.n	800514a <HAL_ADC_AnalogWDGConfig+0x222>
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	fa93 f3a3 	rbit	r3, r3
 8005128:	61bb      	str	r3, [r7, #24]
  return result;
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 8005134:	2320      	movs	r3, #32
 8005136:	e003      	b.n	8005140 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 8005138:	6a3b      	ldr	r3, [r7, #32]
 800513a:	fab3 f383 	clz	r3, r3
 800513e:	b2db      	uxtb	r3, r3
 8005140:	f003 031f 	and.w	r3, r3, #31
 8005144:	2201      	movs	r2, #1
 8005146:	fa02 f303 	lsl.w	r3, r2, r3
 800514a:	687a      	ldr	r2, [r7, #4]
 800514c:	6812      	ldr	r2, [r2, #0]
 800514e:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8005152:	687a      	ldr	r2, [r7, #4]
 8005154:	6812      	ldr	r2, [r2, #0]
 8005156:	430b      	orrs	r3, r1
 8005158:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 800515c:	e04b      	b.n	80051f6 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005166:	2b00      	cmp	r3, #0
 8005168:	d108      	bne.n	800517c <HAL_ADC_AnalogWDGConfig+0x254>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	0e9b      	lsrs	r3, r3, #26
 8005170:	f003 031f 	and.w	r3, r3, #31
 8005174:	2201      	movs	r2, #1
 8005176:	fa02 f303 	lsl.w	r3, r2, r3
 800517a:	e016      	b.n	80051aa <HAL_ADC_AnalogWDGConfig+0x282>
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	fa93 f3a3 	rbit	r3, r3
 8005188:	60fb      	str	r3, [r7, #12]
  return result;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d101      	bne.n	8005198 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8005194:	2320      	movs	r3, #32
 8005196:	e003      	b.n	80051a0 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	fab3 f383 	clz	r3, r3
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	f003 031f 	and.w	r3, r3, #31
 80051a4:	2201      	movs	r2, #1
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6812      	ldr	r2, [r2, #0]
 80051ae:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6812      	ldr	r2, [r2, #0]
 80051b6:	430b      	orrs	r3, r1
 80051b8:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80051bc:	e01b      	b.n	80051f6 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a05      	ldr	r2, [pc, #20]	; (80051dc <HAL_ADC_AnalogWDGConfig+0x2b4>)
 80051c8:	4619      	mov	r1, r3
 80051ca:	f7fe fc7d 	bl	8003ac8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80051ce:	e012      	b.n	80051f6 <HAL_ADC_AnalogWDGConfig+0x2ce>
 80051d0:	7dc00000 	.word	0x7dc00000
 80051d4:	0087ffff 	.word	0x0087ffff
 80051d8:	0107ffff 	.word	0x0107ffff
 80051dc:	0187ffff 	.word	0x0187ffff
 80051e0:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6818      	ldr	r0, [r3, #0]
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2200      	movs	r2, #0
 80051ee:	4619      	mov	r1, r3
 80051f0:	f7fe fc6a 	bl	8003ac8 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80051f4:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a4f      	ldr	r2, [pc, #316]	; (8005338 <HAL_ADC_AnalogWDGConfig+0x410>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d11a      	bne.n	8005236 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005204:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4618      	mov	r0, r3
 8005212:	f7fe fda7 	bl	8003d64 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	7b1b      	ldrb	r3, [r3, #12]
 800521a:	2b01      	cmp	r3, #1
 800521c:	d105      	bne.n	800522a <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f7fe fdca 	bl	8003dbc <LL_ADC_EnableIT_AWD2>
 8005228:	e01f      	b.n	800526a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe fdf4 	bl	8003e1c <LL_ADC_DisableIT_AWD2>
 8005234:	e019      	b.n	800526a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800523a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4618      	mov	r0, r3
 8005248:	f7fe fd9a 	bl	8003d80 <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	7b1b      	ldrb	r3, [r3, #12]
 8005250:	2b01      	cmp	r3, #1
 8005252:	d105      	bne.n	8005260 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f7fe fdbf 	bl	8003ddc <LL_ADC_EnableIT_AWD3>
 800525e:	e004      	b.n	800526a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4618      	mov	r0, r3
 8005266:	f7fe fde9 	bl	8003e3c <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a33      	ldr	r2, [pc, #204]	; (800533c <HAL_ADC_AnalogWDGConfig+0x414>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d118      	bne.n	80052a6 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	691a      	ldr	r2, [r3, #16]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	08db      	lsrs	r3, r3, #3
 8005280:	f003 0303 	and.w	r3, r3, #3
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	fa02 f303 	lsl.w	r3, r2, r3
 800528a:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	695a      	ldr	r2, [r3, #20]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	08db      	lsrs	r3, r3, #3
 8005298:	f003 0303 	and.w	r3, r3, #3
 800529c:	005b      	lsls	r3, r3, #1
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	633b      	str	r3, [r7, #48]	; 0x30
 80052a4:	e035      	b.n	8005312 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	f003 0318 	and.w	r3, r3, #24
 80052b0:	2b18      	cmp	r3, #24
 80052b2:	d00f      	beq.n	80052d4 <HAL_ADC_AnalogWDGConfig+0x3ac>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	08db      	lsrs	r3, r3, #3
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	f1c3 0302 	rsb	r3, r3, #2
 80052c8:	005b      	lsls	r3, r3, #1
 80052ca:	f003 031e 	and.w	r3, r3, #30
 80052ce:	fa22 f303 	lsr.w	r3, r2, r3
 80052d2:	e002      	b.n	80052da <HAL_ADC_AnalogWDGConfig+0x3b2>
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	691b      	ldr	r3, [r3, #16]
 80052d8:	009b      	lsls	r3, r3, #2
 80052da:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68db      	ldr	r3, [r3, #12]
 80052e2:	f003 0318 	and.w	r3, r3, #24
 80052e6:	2b18      	cmp	r3, #24
 80052e8:	d00f      	beq.n	800530a <HAL_ADC_AnalogWDGConfig+0x3e2>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	695a      	ldr	r2, [r3, #20]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	08db      	lsrs	r3, r3, #3
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	f1c3 0302 	rsb	r3, r3, #2
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	f003 031e 	and.w	r3, r3, #30
 8005304:	fa22 f303 	lsr.w	r3, r2, r3
 8005308:	e002      	b.n	8005310 <HAL_ADC_AnalogWDGConfig+0x3e8>
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6818      	ldr	r0, [r3, #0]
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6819      	ldr	r1, [r3, #0]
 800531a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800531c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800531e:	f7fe fc00 	bl	8003b22 <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800532a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800532e:	4618      	mov	r0, r3
 8005330:	3738      	adds	r7, #56	; 0x38
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	0017ffff 	.word	0x0017ffff
 800533c:	7dc00000 	.word	0x7dc00000

08005340 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b084      	sub	sp, #16
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4618      	mov	r0, r3
 800534e:	f7fe fc9c 	bl	8003c8a <LL_ADC_IsEnabled>
 8005352:	4603      	mov	r3, r0
 8005354:	2b00      	cmp	r3, #0
 8005356:	d14d      	bne.n	80053f4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	4b28      	ldr	r3, [pc, #160]	; (8005400 <ADC_Enable+0xc0>)
 8005360:	4013      	ands	r3, r2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00d      	beq.n	8005382 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800536a:	f043 0210 	orr.w	r2, r3, #16
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e039      	b.n	80053f6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7fe fc57 	bl	8003c3a <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800538c:	f7fe f9f6 	bl	800377c <HAL_GetTick>
 8005390:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005392:	e028      	b.n	80053e6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4618      	mov	r0, r3
 800539a:	f7fe fc76 	bl	8003c8a <LL_ADC_IsEnabled>
 800539e:	4603      	mov	r3, r0
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4618      	mov	r0, r3
 80053aa:	f7fe fc46 	bl	8003c3a <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80053ae:	f7fe f9e5 	bl	800377c <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d914      	bls.n	80053e6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0301 	and.w	r3, r3, #1
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d00d      	beq.n	80053e6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ce:	f043 0210 	orr.w	r2, r3, #16
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053da:	f043 0201 	orr.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e007      	b.n	80053f6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0301 	and.w	r3, r3, #1
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d1cf      	bne.n	8005394 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80053f4:	2300      	movs	r3, #0
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3710      	adds	r7, #16
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	8000003f 	.word	0x8000003f

08005404 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4618      	mov	r0, r3
 8005412:	f7fe fc4d 	bl	8003cb0 <LL_ADC_IsDisableOngoing>
 8005416:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4618      	mov	r0, r3
 800541e:	f7fe fc34 	bl	8003c8a <LL_ADC_IsEnabled>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d047      	beq.n	80054b8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d144      	bne.n	80054b8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f003 030d 	and.w	r3, r3, #13
 8005438:	2b01      	cmp	r3, #1
 800543a:	d10c      	bne.n	8005456 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4618      	mov	r0, r3
 8005442:	f7fe fc0e 	bl	8003c62 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	2203      	movs	r2, #3
 800544c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800544e:	f7fe f995 	bl	800377c <HAL_GetTick>
 8005452:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005454:	e029      	b.n	80054aa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800545a:	f043 0210 	orr.w	r2, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005466:	f043 0201 	orr.w	r2, r3, #1
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e023      	b.n	80054ba <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005472:	f7fe f983 	bl	800377c <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d914      	bls.n	80054aa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00d      	beq.n	80054aa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005492:	f043 0210 	orr.w	r2, r3, #16
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800549e:	f043 0201 	orr.w	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e007      	b.n	80054ba <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 0301 	and.w	r3, r3, #1
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1dc      	bne.n	8005472 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3710      	adds	r7, #16
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b084      	sub	sp, #16
 80054c6:	af00      	add	r7, sp, #0
 80054c8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d14b      	bne.n	8005574 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0308 	and.w	r3, r3, #8
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d021      	beq.n	800553a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7fe fa3e 	bl	800397c <LL_ADC_REG_IsTriggerSourceSWStart>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d032      	beq.n	800556c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d12b      	bne.n	800556c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005518:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005524:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d11f      	bne.n	800556c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005530:	f043 0201 	orr.w	r2, r3, #1
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	65da      	str	r2, [r3, #92]	; 0x5c
 8005538:	e018      	b.n	800556c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f003 0302 	and.w	r3, r3, #2
 8005544:	2b00      	cmp	r3, #0
 8005546:	d111      	bne.n	800556c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800555c:	2b00      	cmp	r3, #0
 800555e:	d105      	bne.n	800556c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005564:	f043 0201 	orr.w	r2, r3, #1
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f7fc f98b 	bl	8001888 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005572:	e00e      	b.n	8005592 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005578:	f003 0310 	and.w	r3, r3, #16
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	f7ff f8d7 	bl	8004734 <HAL_ADC_ErrorCallback>
}
 8005586:	e004      	b.n	8005592 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	4798      	blx	r3
}
 8005592:	bf00      	nop
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80055a8:	68f8      	ldr	r0, [r7, #12]
 80055aa:	f7ff f8af 	bl	800470c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055ae:	bf00      	nop
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c2:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d4:	f043 0204 	orr.w	r2, r3, #4
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7ff f8a9 	bl	8004734 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80055e2:	bf00      	nop
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}

080055ea <LL_ADC_IsEnabled>:
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <LL_ADC_IsEnabled+0x18>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <LL_ADC_IsEnabled+0x1a>
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <LL_ADC_StartCalibration>:
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8005622:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005626:	683a      	ldr	r2, [r7, #0]
 8005628:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800562c:	4313      	orrs	r3, r2
 800562e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	609a      	str	r2, [r3, #8]
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <LL_ADC_IsCalibrationOnGoing>:
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005652:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005656:	d101      	bne.n	800565c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005658:	2301      	movs	r3, #1
 800565a:	e000      	b.n	800565e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <LL_ADC_REG_IsConversionOngoing>:
{
 800566a:	b480      	push	{r7}
 800566c:	b083      	sub	sp, #12
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b04      	cmp	r3, #4
 800567c:	d101      	bne.n	8005682 <LL_ADC_REG_IsConversionOngoing+0x18>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800569a:	2300      	movs	r3, #0
 800569c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d101      	bne.n	80056ac <HAL_ADCEx_Calibration_Start+0x1c>
 80056a8:	2302      	movs	r3, #2
 80056aa:	e04d      	b.n	8005748 <HAL_ADCEx_Calibration_Start+0xb8>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff fea5 	bl	8005404 <ADC_Disable>
 80056ba:	4603      	mov	r3, r0
 80056bc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d136      	bne.n	8005732 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80056cc:	f023 0302 	bic.w	r3, r3, #2
 80056d0:	f043 0202 	orr.w	r2, r3, #2
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f7ff ff96 	bl	8005610 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80056e4:	e014      	b.n	8005710 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	3301      	adds	r3, #1
 80056ea:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	4a18      	ldr	r2, [pc, #96]	; (8005750 <HAL_ADCEx_Calibration_Start+0xc0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d90d      	bls.n	8005710 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f8:	f023 0312 	bic.w	r3, r3, #18
 80056fc:	f043 0210 	orr.w	r2, r3, #16
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e01b      	b.n	8005748 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff ff94 	bl	8005642 <LL_ADC_IsCalibrationOnGoing>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1e2      	bne.n	80056e6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005724:	f023 0303 	bic.w	r3, r3, #3
 8005728:	f043 0201 	orr.w	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005730:	e005      	b.n	800573e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005736:	f043 0210 	orr.w	r2, r3, #16
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8005746:	7bfb      	ldrb	r3, [r7, #15]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3710      	adds	r7, #16
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	0004de01 	.word	0x0004de01

08005754 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800577c:	b480      	push	{r7}
 800577e:	b083      	sub	sp, #12
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005784:	bf00      	nop
 8005786:	370c      	adds	r7, #12
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005798:	bf00      	nop
 800579a:	370c      	adds	r7, #12
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr

080057a4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80057ac:	bf00      	nop
 80057ae:	370c      	adds	r7, #12
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80057b8:	b590      	push	{r4, r7, lr}
 80057ba:	b0a1      	sub	sp, #132	; 0x84
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
 80057c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80057c2:	2300      	movs	r3, #0
 80057c4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80057d2:	2302      	movs	r3, #2
 80057d4:	e08b      	b.n	80058ee <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2201      	movs	r2, #1
 80057da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80057de:	2300      	movs	r3, #0
 80057e0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80057e2:	2300      	movs	r3, #0
 80057e4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057ee:	d102      	bne.n	80057f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80057f0:	4b41      	ldr	r3, [pc, #260]	; (80058f8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80057f2:	60bb      	str	r3, [r7, #8]
 80057f4:	e001      	b.n	80057fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80057f6:	2300      	movs	r3, #0
 80057f8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d10b      	bne.n	8005818 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005804:	f043 0220 	orr.w	r2, r3, #32
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e06a      	b.n	80058ee <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4618      	mov	r0, r3
 800581c:	f7ff ff25 	bl	800566a <LL_ADC_REG_IsConversionOngoing>
 8005820:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff ff1f 	bl	800566a <LL_ADC_REG_IsConversionOngoing>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d14c      	bne.n	80058cc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8005832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005834:	2b00      	cmp	r3, #0
 8005836:	d149      	bne.n	80058cc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005838:	4b30      	ldr	r3, [pc, #192]	; (80058fc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800583a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d028      	beq.n	8005896 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8005844:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	6859      	ldr	r1, [r3, #4]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005856:	035b      	lsls	r3, r3, #13
 8005858:	430b      	orrs	r3, r1
 800585a:	431a      	orrs	r2, r3
 800585c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800585e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005860:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005864:	f7ff fec1 	bl	80055ea <LL_ADC_IsEnabled>
 8005868:	4604      	mov	r4, r0
 800586a:	4823      	ldr	r0, [pc, #140]	; (80058f8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800586c:	f7ff febd 	bl	80055ea <LL_ADC_IsEnabled>
 8005870:	4603      	mov	r3, r0
 8005872:	4323      	orrs	r3, r4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d133      	bne.n	80058e0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005878:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005880:	f023 030f 	bic.w	r3, r3, #15
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	6811      	ldr	r1, [r2, #0]
 8005888:	683a      	ldr	r2, [r7, #0]
 800588a:	6892      	ldr	r2, [r2, #8]
 800588c:	430a      	orrs	r2, r1
 800588e:	431a      	orrs	r2, r3
 8005890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005892:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005894:	e024      	b.n	80058e0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800589e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058a0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80058a2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80058a6:	f7ff fea0 	bl	80055ea <LL_ADC_IsEnabled>
 80058aa:	4604      	mov	r4, r0
 80058ac:	4812      	ldr	r0, [pc, #72]	; (80058f8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80058ae:	f7ff fe9c 	bl	80055ea <LL_ADC_IsEnabled>
 80058b2:	4603      	mov	r3, r0
 80058b4:	4323      	orrs	r3, r4
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d112      	bne.n	80058e0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80058ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80058c2:	f023 030f 	bic.w	r3, r3, #15
 80058c6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80058c8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058ca:	e009      	b.n	80058e0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058d0:	f043 0220 	orr.w	r2, r3, #32
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80058de:	e000      	b.n	80058e2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80058e0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80058ea:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3784      	adds	r7, #132	; 0x84
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd90      	pop	{r4, r7, pc}
 80058f6:	bf00      	nop
 80058f8:	50000100 	.word	0x50000100
 80058fc:	50000300 	.word	0x50000300

08005900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005900:	b480      	push	{r7}
 8005902:	b085      	sub	sp, #20
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f003 0307 	and.w	r3, r3, #7
 800590e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005910:	4b0c      	ldr	r3, [pc, #48]	; (8005944 <__NVIC_SetPriorityGrouping+0x44>)
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800591c:	4013      	ands	r3, r2
 800591e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800592c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005932:	4a04      	ldr	r2, [pc, #16]	; (8005944 <__NVIC_SetPriorityGrouping+0x44>)
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	60d3      	str	r3, [r2, #12]
}
 8005938:	bf00      	nop
 800593a:	3714      	adds	r7, #20
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	e000ed00 	.word	0xe000ed00

08005948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800594c:	4b04      	ldr	r3, [pc, #16]	; (8005960 <__NVIC_GetPriorityGrouping+0x18>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	0a1b      	lsrs	r3, r3, #8
 8005952:	f003 0307 	and.w	r3, r3, #7
}
 8005956:	4618      	mov	r0, r3
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	e000ed00 	.word	0xe000ed00

08005964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	4603      	mov	r3, r0
 800596c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800596e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005972:	2b00      	cmp	r3, #0
 8005974:	db0b      	blt.n	800598e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005976:	79fb      	ldrb	r3, [r7, #7]
 8005978:	f003 021f 	and.w	r2, r3, #31
 800597c:	4907      	ldr	r1, [pc, #28]	; (800599c <__NVIC_EnableIRQ+0x38>)
 800597e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005982:	095b      	lsrs	r3, r3, #5
 8005984:	2001      	movs	r0, #1
 8005986:	fa00 f202 	lsl.w	r2, r0, r2
 800598a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800598e:	bf00      	nop
 8005990:	370c      	adds	r7, #12
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	e000e100 	.word	0xe000e100

080059a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	4603      	mov	r3, r0
 80059a8:	6039      	str	r1, [r7, #0]
 80059aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80059ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	db0a      	blt.n	80059ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	490c      	ldr	r1, [pc, #48]	; (80059ec <__NVIC_SetPriority+0x4c>)
 80059ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059be:	0112      	lsls	r2, r2, #4
 80059c0:	b2d2      	uxtb	r2, r2
 80059c2:	440b      	add	r3, r1
 80059c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80059c8:	e00a      	b.n	80059e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	b2da      	uxtb	r2, r3
 80059ce:	4908      	ldr	r1, [pc, #32]	; (80059f0 <__NVIC_SetPriority+0x50>)
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	3b04      	subs	r3, #4
 80059d8:	0112      	lsls	r2, r2, #4
 80059da:	b2d2      	uxtb	r2, r2
 80059dc:	440b      	add	r3, r1
 80059de:	761a      	strb	r2, [r3, #24]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	e000e100 	.word	0xe000e100
 80059f0:	e000ed00 	.word	0xe000ed00

080059f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	; 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f1c3 0307 	rsb	r3, r3, #7
 8005a0e:	2b04      	cmp	r3, #4
 8005a10:	bf28      	it	cs
 8005a12:	2304      	movcs	r3, #4
 8005a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005a16:	69fb      	ldr	r3, [r7, #28]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	2b06      	cmp	r3, #6
 8005a1c:	d902      	bls.n	8005a24 <NVIC_EncodePriority+0x30>
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	3b03      	subs	r3, #3
 8005a22:	e000      	b.n	8005a26 <NVIC_EncodePriority+0x32>
 8005a24:	2300      	movs	r3, #0
 8005a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a28:	f04f 32ff 	mov.w	r2, #4294967295
 8005a2c:	69bb      	ldr	r3, [r7, #24]
 8005a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a32:	43da      	mvns	r2, r3
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	401a      	ands	r2, r3
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	fa01 f303 	lsl.w	r3, r1, r3
 8005a46:	43d9      	mvns	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005a4c:	4313      	orrs	r3, r2
         );
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3724      	adds	r7, #36	; 0x24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	3b01      	subs	r3, #1
 8005a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a6c:	d301      	bcc.n	8005a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e00f      	b.n	8005a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a72:	4a0a      	ldr	r2, [pc, #40]	; (8005a9c <SysTick_Config+0x40>)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	3b01      	subs	r3, #1
 8005a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a7a:	210f      	movs	r1, #15
 8005a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a80:	f7ff ff8e 	bl	80059a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a84:	4b05      	ldr	r3, [pc, #20]	; (8005a9c <SysTick_Config+0x40>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a8a:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <SysTick_Config+0x40>)
 8005a8c:	2207      	movs	r2, #7
 8005a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a90:	2300      	movs	r3, #0
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3708      	adds	r7, #8
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	e000e010 	.word	0xe000e010

08005aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff ff29 	bl	8005900 <__NVIC_SetPriorityGrouping>
}
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b086      	sub	sp, #24
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	4603      	mov	r3, r0
 8005abe:	60b9      	str	r1, [r7, #8]
 8005ac0:	607a      	str	r2, [r7, #4]
 8005ac2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ac4:	f7ff ff40 	bl	8005948 <__NVIC_GetPriorityGrouping>
 8005ac8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	6978      	ldr	r0, [r7, #20]
 8005ad0:	f7ff ff90 	bl	80059f4 <NVIC_EncodePriority>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ada:	4611      	mov	r1, r2
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff ff5f 	bl	80059a0 <__NVIC_SetPriority>
}
 8005ae2:	bf00      	nop
 8005ae4:	3718      	adds	r7, #24
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}

08005aea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aea:	b580      	push	{r7, lr}
 8005aec:	b082      	sub	sp, #8
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	4603      	mov	r3, r0
 8005af2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7ff ff33 	bl	8005964 <__NVIC_EnableIRQ>
}
 8005afe:	bf00      	nop
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005b06:	b580      	push	{r7, lr}
 8005b08:	b082      	sub	sp, #8
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f7ff ffa4 	bl	8005a5c <SysTick_Config>
 8005b14:	4603      	mov	r3, r0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3708      	adds	r7, #8
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d101      	bne.n	8005b32 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e08d      	b.n	8005c4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	461a      	mov	r2, r3
 8005b38:	4b47      	ldr	r3, [pc, #284]	; (8005c58 <HAL_DMA_Init+0x138>)
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d80f      	bhi.n	8005b5e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	461a      	mov	r2, r3
 8005b44:	4b45      	ldr	r3, [pc, #276]	; (8005c5c <HAL_DMA_Init+0x13c>)
 8005b46:	4413      	add	r3, r2
 8005b48:	4a45      	ldr	r2, [pc, #276]	; (8005c60 <HAL_DMA_Init+0x140>)
 8005b4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4e:	091b      	lsrs	r3, r3, #4
 8005b50:	009a      	lsls	r2, r3, #2
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a42      	ldr	r2, [pc, #264]	; (8005c64 <HAL_DMA_Init+0x144>)
 8005b5a:	641a      	str	r2, [r3, #64]	; 0x40
 8005b5c:	e00e      	b.n	8005b7c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	461a      	mov	r2, r3
 8005b64:	4b40      	ldr	r3, [pc, #256]	; (8005c68 <HAL_DMA_Init+0x148>)
 8005b66:	4413      	add	r3, r2
 8005b68:	4a3d      	ldr	r2, [pc, #244]	; (8005c60 <HAL_DMA_Init+0x140>)
 8005b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b6e:	091b      	lsrs	r3, r3, #4
 8005b70:	009a      	lsls	r2, r3, #2
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a3c      	ldr	r2, [pc, #240]	; (8005c6c <HAL_DMA_Init+0x14c>)
 8005b7a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b96:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005ba0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fa76 	bl	80060c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	689b      	ldr	r3, [r3, #8]
 8005bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bdc:	d102      	bne.n	8005be4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685a      	ldr	r2, [r3, #4]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bf4:	687a      	ldr	r2, [r7, #4]
 8005bf6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005bf8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d010      	beq.n	8005c24 <HAL_DMA_Init+0x104>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2b04      	cmp	r3, #4
 8005c08:	d80c      	bhi.n	8005c24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 fa96 	bl	800613c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c14:	2200      	movs	r2, #0
 8005c16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005c20:	605a      	str	r2, [r3, #4]
 8005c22:	e008      	b.n	8005c36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c4c:	2300      	movs	r3, #0
}
 8005c4e:	4618      	mov	r0, r3
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}
 8005c56:	bf00      	nop
 8005c58:	40020407 	.word	0x40020407
 8005c5c:	bffdfff8 	.word	0xbffdfff8
 8005c60:	cccccccd 	.word	0xcccccccd
 8005c64:	40020000 	.word	0x40020000
 8005c68:	bffdfbf8 	.word	0xbffdfbf8
 8005c6c:	40020400 	.word	0x40020400

08005c70 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
 8005c7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_DMA_Start_IT+0x20>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e066      	b.n	8005d5e <HAL_DMA_Start_IT+0xee>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d155      	bne.n	8005d50 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f022 0201 	bic.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	68b9      	ldr	r1, [r7, #8]
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 f9bb 	bl	8006044 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d008      	beq.n	8005ce8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 020e 	orr.w	r2, r2, #14
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	e00f      	b.n	8005d08 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f022 0204 	bic.w	r2, r2, #4
 8005cf6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 020a 	orr.w	r2, r2, #10
 8005d06:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d007      	beq.n	8005d26 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d24:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d007      	beq.n	8005d3e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d3c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f042 0201 	orr.w	r2, r2, #1
 8005d4c:	601a      	str	r2, [r3, #0]
 8005d4e:	e005      	b.n	8005d5c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d58:	2302      	movs	r3, #2
 8005d5a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b085      	sub	sp, #20
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d005      	beq.n	8005d8a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2204      	movs	r2, #4
 8005d82:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
 8005d88:	e037      	b.n	8005dfa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 020e 	bic.w	r2, r2, #14
 8005d98:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005da8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0201 	bic.w	r2, r2, #1
 8005db8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbe:	f003 021f 	and.w	r2, r3, #31
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc6:	2101      	movs	r1, #1
 8005dc8:	fa01 f202 	lsl.w	r2, r1, r2
 8005dcc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005dd6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00c      	beq.n	8005dfa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dee:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005df8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d00d      	beq.n	8005e4c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2204      	movs	r2, #4
 8005e34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	73fb      	strb	r3, [r7, #15]
 8005e4a:	e047      	b.n	8005edc <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 020e 	bic.w	r2, r2, #14
 8005e5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f022 0201 	bic.w	r2, r2, #1
 8005e6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e80:	f003 021f 	and.w	r2, r3, #31
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e88:	2101      	movs	r1, #1
 8005e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00c      	beq.n	8005ebc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005eb0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005eba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2201      	movs	r2, #1
 8005ec0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d003      	beq.n	8005edc <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	4798      	blx	r3
    }
  }
  return status;
 8005edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3710      	adds	r7, #16
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}

08005ee6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005ee6:	b580      	push	{r7, lr}
 8005ee8:	b084      	sub	sp, #16
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f02:	f003 031f 	and.w	r3, r3, #31
 8005f06:	2204      	movs	r2, #4
 8005f08:	409a      	lsls	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d026      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x7a>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	f003 0304 	and.w	r3, r3, #4
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d021      	beq.n	8005f60 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d107      	bne.n	8005f3a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f022 0204 	bic.w	r2, r2, #4
 8005f38:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3e:	f003 021f 	and.w	r2, r3, #31
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f46:	2104      	movs	r1, #4
 8005f48:	fa01 f202 	lsl.w	r2, r1, r2
 8005f4c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d071      	beq.n	800603a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f5e:	e06c      	b.n	800603a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f64:	f003 031f 	and.w	r3, r3, #31
 8005f68:	2202      	movs	r2, #2
 8005f6a:	409a      	lsls	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4013      	ands	r3, r2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d02e      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d029      	beq.n	8005fd2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d10b      	bne.n	8005fa4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 020a 	bic.w	r2, r2, #10
 8005f9a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa8:	f003 021f 	and.w	r2, r3, #31
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb0:	2102      	movs	r1, #2
 8005fb2:	fa01 f202 	lsl.w	r2, r1, r2
 8005fb6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d038      	beq.n	800603a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005fd0:	e033      	b.n	800603a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd6:	f003 031f 	and.w	r3, r3, #31
 8005fda:	2208      	movs	r2, #8
 8005fdc:	409a      	lsls	r2, r3
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	4013      	ands	r3, r2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d02a      	beq.n	800603c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f003 0308 	and.w	r3, r3, #8
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d025      	beq.n	800603c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	681a      	ldr	r2, [r3, #0]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 020e 	bic.w	r2, r2, #14
 8005ffe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006004:	f003 021f 	and.w	r2, r3, #31
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	2101      	movs	r1, #1
 800600e:	fa01 f202 	lsl.w	r2, r1, r2
 8006012:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2201      	movs	r2, #1
 800601e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	2b00      	cmp	r3, #0
 8006030:	d004      	beq.n	800603c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800603a:	bf00      	nop
 800603c:	bf00      	nop
}
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	60f8      	str	r0, [r7, #12]
 800604c:	60b9      	str	r1, [r7, #8]
 800604e:	607a      	str	r2, [r7, #4]
 8006050:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006056:	68fa      	ldr	r2, [r7, #12]
 8006058:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800605a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006060:	2b00      	cmp	r3, #0
 8006062:	d004      	beq.n	800606e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800606c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006072:	f003 021f 	and.w	r2, r3, #31
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607a:	2101      	movs	r1, #1
 800607c:	fa01 f202 	lsl.w	r2, r1, r2
 8006080:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b10      	cmp	r3, #16
 8006090:	d108      	bne.n	80060a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80060a2:	e007      	b.n	80060b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	60da      	str	r2, [r3, #12]
}
 80060b4:	bf00      	nop
 80060b6:	3714      	adds	r7, #20
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	4b16      	ldr	r3, [pc, #88]	; (8006128 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d802      	bhi.n	80060da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80060d4:	4b15      	ldr	r3, [pc, #84]	; (800612c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80060d6:	617b      	str	r3, [r7, #20]
 80060d8:	e001      	b.n	80060de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80060da:	4b15      	ldr	r3, [pc, #84]	; (8006130 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80060dc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	3b08      	subs	r3, #8
 80060ea:	4a12      	ldr	r2, [pc, #72]	; (8006134 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80060ec:	fba2 2303 	umull	r2, r3, r2, r3
 80060f0:	091b      	lsrs	r3, r3, #4
 80060f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f8:	089b      	lsrs	r3, r3, #2
 80060fa:	009a      	lsls	r2, r3, #2
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	4413      	add	r3, r2
 8006100:	461a      	mov	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	4a0b      	ldr	r2, [pc, #44]	; (8006138 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800610a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	2201      	movs	r2, #1
 8006114:	409a      	lsls	r2, r3
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	651a      	str	r2, [r3, #80]	; 0x50
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40020407 	.word	0x40020407
 800612c:	40020800 	.word	0x40020800
 8006130:	40020820 	.word	0x40020820
 8006134:	cccccccd 	.word	0xcccccccd
 8006138:	40020880 	.word	0x40020880

0800613c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	4b0b      	ldr	r3, [pc, #44]	; (800617c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	461a      	mov	r2, r3
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a08      	ldr	r2, [pc, #32]	; (8006180 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800615e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3b01      	subs	r3, #1
 8006164:	f003 031f 	and.w	r3, r3, #31
 8006168:	2201      	movs	r2, #1
 800616a:	409a      	lsls	r2, r3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006170:	bf00      	nop
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	1000823f 	.word	0x1000823f
 8006180:	40020940 	.word	0x40020940

08006184 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006184:	b480      	push	{r7}
 8006186:	b087      	sub	sp, #28
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800618e:	2300      	movs	r3, #0
 8006190:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006192:	e15a      	b.n	800644a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	2101      	movs	r1, #1
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	fa01 f303 	lsl.w	r3, r1, r3
 80061a0:	4013      	ands	r3, r2
 80061a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 814c 	beq.w	8006444 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f003 0303 	and.w	r3, r3, #3
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d005      	beq.n	80061c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80061c0:	2b02      	cmp	r3, #2
 80061c2:	d130      	bne.n	8006226 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	689b      	ldr	r3, [r3, #8]
 80061c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	2203      	movs	r2, #3
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	43db      	mvns	r3, r3
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	4013      	ands	r3, r2
 80061da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	005b      	lsls	r3, r3, #1
 80061e4:	fa02 f303 	lsl.w	r3, r2, r3
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061fa:	2201      	movs	r2, #1
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	43db      	mvns	r3, r3
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4013      	ands	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	091b      	lsrs	r3, r3, #4
 8006210:	f003 0201 	and.w	r2, r3, #1
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4313      	orrs	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685b      	ldr	r3, [r3, #4]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b03      	cmp	r3, #3
 8006230:	d017      	beq.n	8006262 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	2203      	movs	r2, #3
 800623e:	fa02 f303 	lsl.w	r3, r2, r3
 8006242:	43db      	mvns	r3, r3
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4013      	ands	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689a      	ldr	r2, [r3, #8]
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	fa02 f303 	lsl.w	r3, r2, r3
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 0303 	and.w	r3, r3, #3
 800626a:	2b02      	cmp	r3, #2
 800626c:	d123      	bne.n	80062b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	08da      	lsrs	r2, r3, #3
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3208      	adds	r2, #8
 8006276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800627a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	220f      	movs	r2, #15
 8006286:	fa02 f303 	lsl.w	r3, r2, r3
 800628a:	43db      	mvns	r3, r3
 800628c:	693a      	ldr	r2, [r7, #16]
 800628e:	4013      	ands	r3, r2
 8006290:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	691a      	ldr	r2, [r3, #16]
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f003 0307 	and.w	r3, r3, #7
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	fa02 f303 	lsl.w	r3, r2, r3
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	08da      	lsrs	r2, r3, #3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3208      	adds	r2, #8
 80062b0:	6939      	ldr	r1, [r7, #16]
 80062b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	2203      	movs	r2, #3
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	43db      	mvns	r3, r3
 80062c8:	693a      	ldr	r2, [r7, #16]
 80062ca:	4013      	ands	r3, r2
 80062cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f003 0203 	and.w	r2, r3, #3
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	fa02 f303 	lsl.w	r3, r2, r3
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80062ea:	683b      	ldr	r3, [r7, #0]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 80a6 	beq.w	8006444 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062f8:	4b5b      	ldr	r3, [pc, #364]	; (8006468 <HAL_GPIO_Init+0x2e4>)
 80062fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062fc:	4a5a      	ldr	r2, [pc, #360]	; (8006468 <HAL_GPIO_Init+0x2e4>)
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	6613      	str	r3, [r2, #96]	; 0x60
 8006304:	4b58      	ldr	r3, [pc, #352]	; (8006468 <HAL_GPIO_Init+0x2e4>)
 8006306:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006308:	f003 0301 	and.w	r3, r3, #1
 800630c:	60bb      	str	r3, [r7, #8]
 800630e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006310:	4a56      	ldr	r2, [pc, #344]	; (800646c <HAL_GPIO_Init+0x2e8>)
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	089b      	lsrs	r3, r3, #2
 8006316:	3302      	adds	r3, #2
 8006318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800631c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f003 0303 	and.w	r3, r3, #3
 8006324:	009b      	lsls	r3, r3, #2
 8006326:	220f      	movs	r2, #15
 8006328:	fa02 f303 	lsl.w	r3, r2, r3
 800632c:	43db      	mvns	r3, r3
 800632e:	693a      	ldr	r2, [r7, #16]
 8006330:	4013      	ands	r3, r2
 8006332:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800633a:	d01f      	beq.n	800637c <HAL_GPIO_Init+0x1f8>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a4c      	ldr	r2, [pc, #304]	; (8006470 <HAL_GPIO_Init+0x2ec>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d019      	beq.n	8006378 <HAL_GPIO_Init+0x1f4>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a4b      	ldr	r2, [pc, #300]	; (8006474 <HAL_GPIO_Init+0x2f0>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d013      	beq.n	8006374 <HAL_GPIO_Init+0x1f0>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a4a      	ldr	r2, [pc, #296]	; (8006478 <HAL_GPIO_Init+0x2f4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00d      	beq.n	8006370 <HAL_GPIO_Init+0x1ec>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a49      	ldr	r2, [pc, #292]	; (800647c <HAL_GPIO_Init+0x2f8>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d007      	beq.n	800636c <HAL_GPIO_Init+0x1e8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a48      	ldr	r2, [pc, #288]	; (8006480 <HAL_GPIO_Init+0x2fc>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d101      	bne.n	8006368 <HAL_GPIO_Init+0x1e4>
 8006364:	2305      	movs	r3, #5
 8006366:	e00a      	b.n	800637e <HAL_GPIO_Init+0x1fa>
 8006368:	2306      	movs	r3, #6
 800636a:	e008      	b.n	800637e <HAL_GPIO_Init+0x1fa>
 800636c:	2304      	movs	r3, #4
 800636e:	e006      	b.n	800637e <HAL_GPIO_Init+0x1fa>
 8006370:	2303      	movs	r3, #3
 8006372:	e004      	b.n	800637e <HAL_GPIO_Init+0x1fa>
 8006374:	2302      	movs	r3, #2
 8006376:	e002      	b.n	800637e <HAL_GPIO_Init+0x1fa>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <HAL_GPIO_Init+0x1fa>
 800637c:	2300      	movs	r3, #0
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	f002 0203 	and.w	r2, r2, #3
 8006384:	0092      	lsls	r2, r2, #2
 8006386:	4093      	lsls	r3, r2
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800638e:	4937      	ldr	r1, [pc, #220]	; (800646c <HAL_GPIO_Init+0x2e8>)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	089b      	lsrs	r3, r3, #2
 8006394:	3302      	adds	r3, #2
 8006396:	693a      	ldr	r2, [r7, #16]
 8006398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800639c:	4b39      	ldr	r3, [pc, #228]	; (8006484 <HAL_GPIO_Init+0x300>)
 800639e:	689b      	ldr	r3, [r3, #8]
 80063a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	43db      	mvns	r3, r3
 80063a6:	693a      	ldr	r2, [r7, #16]
 80063a8:	4013      	ands	r3, r2
 80063aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80063b8:	693a      	ldr	r2, [r7, #16]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	4313      	orrs	r3, r2
 80063be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80063c0:	4a30      	ldr	r2, [pc, #192]	; (8006484 <HAL_GPIO_Init+0x300>)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80063c6:	4b2f      	ldr	r3, [pc, #188]	; (8006484 <HAL_GPIO_Init+0x300>)
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	43db      	mvns	r3, r3
 80063d0:	693a      	ldr	r2, [r7, #16]
 80063d2:	4013      	ands	r3, r2
 80063d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80063ea:	4a26      	ldr	r2, [pc, #152]	; (8006484 <HAL_GPIO_Init+0x300>)
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80063f0:	4b24      	ldr	r3, [pc, #144]	; (8006484 <HAL_GPIO_Init+0x300>)
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	43db      	mvns	r3, r3
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4013      	ands	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	4313      	orrs	r3, r2
 8006412:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006414:	4a1b      	ldr	r2, [pc, #108]	; (8006484 <HAL_GPIO_Init+0x300>)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800641a:	4b1a      	ldr	r3, [pc, #104]	; (8006484 <HAL_GPIO_Init+0x300>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	43db      	mvns	r3, r3
 8006424:	693a      	ldr	r2, [r7, #16]
 8006426:	4013      	ands	r3, r2
 8006428:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	4313      	orrs	r3, r2
 800643c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800643e:	4a11      	ldr	r2, [pc, #68]	; (8006484 <HAL_GPIO_Init+0x300>)
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	3301      	adds	r3, #1
 8006448:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	fa22 f303 	lsr.w	r3, r2, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	f47f ae9d 	bne.w	8006194 <HAL_GPIO_Init+0x10>
  }
}
 800645a:	bf00      	nop
 800645c:	bf00      	nop
 800645e:	371c      	adds	r7, #28
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr
 8006468:	40021000 	.word	0x40021000
 800646c:	40010000 	.word	0x40010000
 8006470:	48000400 	.word	0x48000400
 8006474:	48000800 	.word	0x48000800
 8006478:	48000c00 	.word	0x48000c00
 800647c:	48001000 	.word	0x48001000
 8006480:	48001400 	.word	0x48001400
 8006484:	40010400 	.word	0x40010400

08006488 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	460b      	mov	r3, r1
 8006492:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	691a      	ldr	r2, [r3, #16]
 8006498:	887b      	ldrh	r3, [r7, #2]
 800649a:	4013      	ands	r3, r2
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064a0:	2301      	movs	r3, #1
 80064a2:	73fb      	strb	r3, [r7, #15]
 80064a4:	e001      	b.n	80064aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064a6:	2300      	movs	r3, #0
 80064a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
 80064c0:	460b      	mov	r3, r1
 80064c2:	807b      	strh	r3, [r7, #2]
 80064c4:	4613      	mov	r3, r2
 80064c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064c8:	787b      	ldrb	r3, [r7, #1]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80064ce:	887a      	ldrh	r2, [r7, #2]
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80064d4:	e002      	b.n	80064dc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80064d6:	887a      	ldrh	r2, [r7, #2]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	629a      	str	r2, [r3, #40]	; 0x28
}
 80064dc:	bf00      	nop
 80064de:	370c      	adds	r7, #12
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr

080064e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b082      	sub	sp, #8
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d101      	bne.n	80064fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	e081      	b.n	80065fe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006500:	b2db      	uxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d106      	bne.n	8006514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f7fc fd84 	bl	800301c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2224      	movs	r2, #36	; 0x24
 8006518:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f022 0201 	bic.w	r2, r2, #1
 800652a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	685a      	ldr	r2, [r3, #4]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006538:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	689a      	ldr	r2, [r3, #8]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006548:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	2b01      	cmp	r3, #1
 8006550:	d107      	bne.n	8006562 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	689a      	ldr	r2, [r3, #8]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800655e:	609a      	str	r2, [r3, #8]
 8006560:	e006      	b.n	8006570 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689a      	ldr	r2, [r3, #8]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800656e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	2b02      	cmp	r3, #2
 8006576:	d104      	bne.n	8006582 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006580:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	6812      	ldr	r2, [r2, #0]
 800658c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006590:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006594:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68da      	ldr	r2, [r3, #12]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065a4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	691a      	ldr	r2, [r3, #16]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	69d9      	ldr	r1, [r3, #28]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6a1a      	ldr	r2, [r3, #32]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681a      	ldr	r2, [r3, #0]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0201 	orr.w	r2, r2, #1
 80065de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2200      	movs	r2, #0
 80065e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2220      	movs	r2, #32
 80065ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}

08006606 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006606:	b480      	push	{r7}
 8006608:	b083      	sub	sp, #12
 800660a:	af00      	add	r7, sp, #0
 800660c:	6078      	str	r0, [r7, #4]
 800660e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006616:	b2db      	uxtb	r3, r3
 8006618:	2b20      	cmp	r3, #32
 800661a:	d138      	bne.n	800668e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006626:	2302      	movs	r3, #2
 8006628:	e032      	b.n	8006690 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2201      	movs	r2, #1
 800662e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2224      	movs	r2, #36	; 0x24
 8006636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f022 0201 	bic.w	r2, r2, #1
 8006648:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006658:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	6819      	ldr	r1, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	683a      	ldr	r2, [r7, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	681a      	ldr	r2, [r3, #0]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0201 	orr.w	r2, r2, #1
 8006678:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2220      	movs	r2, #32
 800667e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	e000      	b.n	8006690 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800668e:	2302      	movs	r3, #2
  }
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	2b20      	cmp	r3, #32
 80066b0:	d139      	bne.n	8006726 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80066bc:	2302      	movs	r3, #2
 80066be:	e033      	b.n	8006728 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2224      	movs	r2, #36	; 0x24
 80066cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f022 0201 	bic.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066ee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f042 0201 	orr.w	r2, r2, #1
 8006710:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2220      	movs	r2, #32
 8006716:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006722:	2300      	movs	r3, #0
 8006724:	e000      	b.n	8006728 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006726:	2302      	movs	r3, #2
  }
}
 8006728:	4618      	mov	r0, r3
 800672a:	3714      	adds	r7, #20
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d141      	bne.n	80067c6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8006742:	4b4b      	ldr	r3, [pc, #300]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800674a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674e:	d131      	bne.n	80067b4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006750:	4b47      	ldr	r3, [pc, #284]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006752:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006756:	4a46      	ldr	r2, [pc, #280]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800675c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006760:	4b43      	ldr	r3, [pc, #268]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006768:	4a41      	ldr	r2, [pc, #260]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800676a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800676e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006770:	4b40      	ldr	r3, [pc, #256]	; (8006874 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2232      	movs	r2, #50	; 0x32
 8006776:	fb02 f303 	mul.w	r3, r2, r3
 800677a:	4a3f      	ldr	r2, [pc, #252]	; (8006878 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800677c:	fba2 2303 	umull	r2, r3, r2, r3
 8006780:	0c9b      	lsrs	r3, r3, #18
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006786:	e002      	b.n	800678e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	3b01      	subs	r3, #1
 800678c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800678e:	4b38      	ldr	r3, [pc, #224]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679a:	d102      	bne.n	80067a2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1f2      	bne.n	8006788 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067a2:	4b33      	ldr	r3, [pc, #204]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a4:	695b      	ldr	r3, [r3, #20]
 80067a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ae:	d158      	bne.n	8006862 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067b0:	2303      	movs	r3, #3
 80067b2:	e057      	b.n	8006864 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067b4:	4b2e      	ldr	r3, [pc, #184]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067ba:	4a2d      	ldr	r2, [pc, #180]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80067c4:	e04d      	b.n	8006862 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067cc:	d141      	bne.n	8006852 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80067ce:	4b28      	ldr	r3, [pc, #160]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067da:	d131      	bne.n	8006840 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067dc:	4b24      	ldr	r3, [pc, #144]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067e2:	4a23      	ldr	r2, [pc, #140]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067ec:	4b20      	ldr	r3, [pc, #128]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067f4:	4a1e      	ldr	r2, [pc, #120]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067fa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067fc:	4b1d      	ldr	r3, [pc, #116]	; (8006874 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2232      	movs	r2, #50	; 0x32
 8006802:	fb02 f303 	mul.w	r3, r2, r3
 8006806:	4a1c      	ldr	r2, [pc, #112]	; (8006878 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	0c9b      	lsrs	r3, r3, #18
 800680e:	3301      	adds	r3, #1
 8006810:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006812:	e002      	b.n	800681a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	3b01      	subs	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800681a:	4b15      	ldr	r3, [pc, #84]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800681c:	695b      	ldr	r3, [r3, #20]
 800681e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006826:	d102      	bne.n	800682e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1f2      	bne.n	8006814 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800682e:	4b10      	ldr	r3, [pc, #64]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683a:	d112      	bne.n	8006862 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800683c:	2303      	movs	r3, #3
 800683e:	e011      	b.n	8006864 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006842:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006846:	4a0a      	ldr	r2, [pc, #40]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800684c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006850:	e007      	b.n	8006862 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006852:	4b07      	ldr	r3, [pc, #28]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800685a:	4a05      	ldr	r2, [pc, #20]	; (8006870 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800685c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006860:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3714      	adds	r7, #20
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr
 8006870:	40007000 	.word	0x40007000
 8006874:	20000048 	.word	0x20000048
 8006878:	431bde83 	.word	0x431bde83

0800687c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006880:	4b05      	ldr	r3, [pc, #20]	; (8006898 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	4a04      	ldr	r2, [pc, #16]	; (8006898 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800688a:	6093      	str	r3, [r2, #8]
}
 800688c:	bf00      	nop
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr
 8006896:	bf00      	nop
 8006898:	40007000 	.word	0x40007000

0800689c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d101      	bne.n	80068ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e306      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d075      	beq.n	80069a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ba:	4b97      	ldr	r3, [pc, #604]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f003 030c 	and.w	r3, r3, #12
 80068c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80068c4:	4b94      	ldr	r3, [pc, #592]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f003 0303 	and.w	r3, r3, #3
 80068cc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b0c      	cmp	r3, #12
 80068d2:	d102      	bne.n	80068da <HAL_RCC_OscConfig+0x3e>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d002      	beq.n	80068e0 <HAL_RCC_OscConfig+0x44>
 80068da:	69bb      	ldr	r3, [r7, #24]
 80068dc:	2b08      	cmp	r3, #8
 80068de:	d10b      	bne.n	80068f8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e0:	4b8d      	ldr	r3, [pc, #564]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d05b      	beq.n	80069a4 <HAL_RCC_OscConfig+0x108>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d157      	bne.n	80069a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e2e1      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006900:	d106      	bne.n	8006910 <HAL_RCC_OscConfig+0x74>
 8006902:	4b85      	ldr	r3, [pc, #532]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a84      	ldr	r2, [pc, #528]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006908:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	e01d      	b.n	800694c <HAL_RCC_OscConfig+0xb0>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006918:	d10c      	bne.n	8006934 <HAL_RCC_OscConfig+0x98>
 800691a:	4b7f      	ldr	r3, [pc, #508]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a7e      	ldr	r2, [pc, #504]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006920:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006924:	6013      	str	r3, [r2, #0]
 8006926:	4b7c      	ldr	r3, [pc, #496]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a7b      	ldr	r2, [pc, #492]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 800692c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e00b      	b.n	800694c <HAL_RCC_OscConfig+0xb0>
 8006934:	4b78      	ldr	r3, [pc, #480]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	4a77      	ldr	r2, [pc, #476]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 800693a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800693e:	6013      	str	r3, [r2, #0]
 8006940:	4b75      	ldr	r3, [pc, #468]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a74      	ldr	r2, [pc, #464]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800694a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d013      	beq.n	800697c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006954:	f7fc ff12 	bl	800377c <HAL_GetTick>
 8006958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800695a:	e008      	b.n	800696e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800695c:	f7fc ff0e 	bl	800377c <HAL_GetTick>
 8006960:	4602      	mov	r2, r0
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	1ad3      	subs	r3, r2, r3
 8006966:	2b64      	cmp	r3, #100	; 0x64
 8006968:	d901      	bls.n	800696e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	e2a6      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800696e:	4b6a      	ldr	r3, [pc, #424]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006976:	2b00      	cmp	r3, #0
 8006978:	d0f0      	beq.n	800695c <HAL_RCC_OscConfig+0xc0>
 800697a:	e014      	b.n	80069a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fc fefe 	bl	800377c <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006984:	f7fc fefa 	bl	800377c <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b64      	cmp	r3, #100	; 0x64
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e292      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006996:	4b60      	ldr	r3, [pc, #384]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1f0      	bne.n	8006984 <HAL_RCC_OscConfig+0xe8>
 80069a2:	e000      	b.n	80069a6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d075      	beq.n	8006a9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069b2:	4b59      	ldr	r3, [pc, #356]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 030c 	and.w	r3, r3, #12
 80069ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069bc:	4b56      	ldr	r3, [pc, #344]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	2b0c      	cmp	r3, #12
 80069ca:	d102      	bne.n	80069d2 <HAL_RCC_OscConfig+0x136>
 80069cc:	697b      	ldr	r3, [r7, #20]
 80069ce:	2b02      	cmp	r3, #2
 80069d0:	d002      	beq.n	80069d8 <HAL_RCC_OscConfig+0x13c>
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b04      	cmp	r3, #4
 80069d6:	d11f      	bne.n	8006a18 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80069d8:	4b4f      	ldr	r3, [pc, #316]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <HAL_RCC_OscConfig+0x154>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e265      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069f0:	4b49      	ldr	r3, [pc, #292]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	691b      	ldr	r3, [r3, #16]
 80069fc:	061b      	lsls	r3, r3, #24
 80069fe:	4946      	ldr	r1, [pc, #280]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006a04:	4b45      	ldr	r3, [pc, #276]	; (8006b1c <HAL_RCC_OscConfig+0x280>)
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7fc fe6b 	bl	80036e4 <HAL_InitTick>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d043      	beq.n	8006a9c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	e251      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d023      	beq.n	8006a68 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a20:	4b3d      	ldr	r3, [pc, #244]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a3c      	ldr	r2, [pc, #240]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fc fea6 	bl	800377c <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a34:	f7fc fea2 	bl	800377c <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e23a      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006a46:	4b34      	ldr	r3, [pc, #208]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a52:	4b31      	ldr	r3, [pc, #196]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	061b      	lsls	r3, r3, #24
 8006a60:	492d      	ldr	r1, [pc, #180]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006a62:	4313      	orrs	r3, r2
 8006a64:	604b      	str	r3, [r1, #4]
 8006a66:	e01a      	b.n	8006a9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a68:	4b2b      	ldr	r3, [pc, #172]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a2a      	ldr	r2, [pc, #168]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006a6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a74:	f7fc fe82 	bl	800377c <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a7c:	f7fc fe7e 	bl	800377c <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e216      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a8e:	4b22      	ldr	r3, [pc, #136]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f0      	bne.n	8006a7c <HAL_RCC_OscConfig+0x1e0>
 8006a9a:	e000      	b.n	8006a9e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a9c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d041      	beq.n	8006b2e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d01c      	beq.n	8006aec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ab2:	4b19      	ldr	r3, [pc, #100]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ab8:	4a17      	ldr	r2, [pc, #92]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ac2:	f7fc fe5b 	bl	800377c <HAL_GetTick>
 8006ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006ac8:	e008      	b.n	8006adc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006aca:	f7fc fe57 	bl	800377c <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e1ef      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006adc:	4b0e      	ldr	r3, [pc, #56]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ae2:	f003 0302 	and.w	r3, r3, #2
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0ef      	beq.n	8006aca <HAL_RCC_OscConfig+0x22e>
 8006aea:	e020      	b.n	8006b2e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006aec:	4b0a      	ldr	r3, [pc, #40]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006af2:	4a09      	ldr	r2, [pc, #36]	; (8006b18 <HAL_RCC_OscConfig+0x27c>)
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006afc:	f7fc fe3e 	bl	800377c <HAL_GetTick>
 8006b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b02:	e00d      	b.n	8006b20 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006b04:	f7fc fe3a 	bl	800377c <HAL_GetTick>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad3      	subs	r3, r2, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d906      	bls.n	8006b20 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e1d2      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
 8006b16:	bf00      	nop
 8006b18:	40021000 	.word	0x40021000
 8006b1c:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006b20:	4b8c      	ldr	r3, [pc, #560]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1ea      	bne.n	8006b04 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f000 80a6 	beq.w	8006c88 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006b40:	4b84      	ldr	r3, [pc, #528]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d101      	bne.n	8006b50 <HAL_RCC_OscConfig+0x2b4>
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e000      	b.n	8006b52 <HAL_RCC_OscConfig+0x2b6>
 8006b50:	2300      	movs	r3, #0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d00d      	beq.n	8006b72 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b56:	4b7f      	ldr	r3, [pc, #508]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5a:	4a7e      	ldr	r2, [pc, #504]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b60:	6593      	str	r3, [r2, #88]	; 0x58
 8006b62:	4b7c      	ldr	r3, [pc, #496]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b6a:	60fb      	str	r3, [r7, #12]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b6e:	2301      	movs	r3, #1
 8006b70:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b72:	4b79      	ldr	r3, [pc, #484]	; (8006d58 <HAL_RCC_OscConfig+0x4bc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d118      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b7e:	4b76      	ldr	r3, [pc, #472]	; (8006d58 <HAL_RCC_OscConfig+0x4bc>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	4a75      	ldr	r2, [pc, #468]	; (8006d58 <HAL_RCC_OscConfig+0x4bc>)
 8006b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b8a:	f7fc fdf7 	bl	800377c <HAL_GetTick>
 8006b8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b90:	e008      	b.n	8006ba4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b92:	f7fc fdf3 	bl	800377c <HAL_GetTick>
 8006b96:	4602      	mov	r2, r0
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	1ad3      	subs	r3, r2, r3
 8006b9c:	2b02      	cmp	r3, #2
 8006b9e:	d901      	bls.n	8006ba4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006ba0:	2303      	movs	r3, #3
 8006ba2:	e18b      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006ba4:	4b6c      	ldr	r3, [pc, #432]	; (8006d58 <HAL_RCC_OscConfig+0x4bc>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d0f0      	beq.n	8006b92 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d108      	bne.n	8006bca <HAL_RCC_OscConfig+0x32e>
 8006bb8:	4b66      	ldr	r3, [pc, #408]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bbe:	4a65      	ldr	r2, [pc, #404]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006bc0:	f043 0301 	orr.w	r3, r3, #1
 8006bc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bc8:	e024      	b.n	8006c14 <HAL_RCC_OscConfig+0x378>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	2b05      	cmp	r3, #5
 8006bd0:	d110      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x358>
 8006bd2:	4b60      	ldr	r3, [pc, #384]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd8:	4a5e      	ldr	r2, [pc, #376]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006bda:	f043 0304 	orr.w	r3, r3, #4
 8006bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006be2:	4b5c      	ldr	r3, [pc, #368]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be8:	4a5a      	ldr	r2, [pc, #360]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006bea:	f043 0301 	orr.w	r3, r3, #1
 8006bee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bf2:	e00f      	b.n	8006c14 <HAL_RCC_OscConfig+0x378>
 8006bf4:	4b57      	ldr	r3, [pc, #348]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bfa:	4a56      	ldr	r2, [pc, #344]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006bfc:	f023 0301 	bic.w	r3, r3, #1
 8006c00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006c04:	4b53      	ldr	r3, [pc, #332]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c0a:	4a52      	ldr	r2, [pc, #328]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006c0c:	f023 0304 	bic.w	r3, r3, #4
 8006c10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d016      	beq.n	8006c4a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c1c:	f7fc fdae 	bl	800377c <HAL_GetTick>
 8006c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c22:	e00a      	b.n	8006c3a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c24:	f7fc fdaa 	bl	800377c <HAL_GetTick>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	1ad3      	subs	r3, r2, r3
 8006c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d901      	bls.n	8006c3a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e140      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006c3a:	4b46      	ldr	r3, [pc, #280]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d0ed      	beq.n	8006c24 <HAL_RCC_OscConfig+0x388>
 8006c48:	e015      	b.n	8006c76 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c4a:	f7fc fd97 	bl	800377c <HAL_GetTick>
 8006c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c50:	e00a      	b.n	8006c68 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c52:	f7fc fd93 	bl	800377c <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d901      	bls.n	8006c68 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c64:	2303      	movs	r3, #3
 8006c66:	e129      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c68:	4b3a      	ldr	r3, [pc, #232]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c6e:	f003 0302 	and.w	r3, r3, #2
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1ed      	bne.n	8006c52 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c76:	7ffb      	ldrb	r3, [r7, #31]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d105      	bne.n	8006c88 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c7c:	4b35      	ldr	r3, [pc, #212]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c80:	4a34      	ldr	r2, [pc, #208]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006c82:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c86:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d03c      	beq.n	8006d0e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d01c      	beq.n	8006cd6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c9c:	4b2d      	ldr	r3, [pc, #180]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006c9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ca2:	4a2c      	ldr	r2, [pc, #176]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006ca4:	f043 0301 	orr.w	r3, r3, #1
 8006ca8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cac:	f7fc fd66 	bl	800377c <HAL_GetTick>
 8006cb0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cb2:	e008      	b.n	8006cc6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cb4:	f7fc fd62 	bl	800377c <HAL_GetTick>
 8006cb8:	4602      	mov	r2, r0
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	2b02      	cmp	r3, #2
 8006cc0:	d901      	bls.n	8006cc6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e0fa      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006cc6:	4b23      	ldr	r3, [pc, #140]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006cc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ccc:	f003 0302 	and.w	r3, r3, #2
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d0ef      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x418>
 8006cd4:	e01b      	b.n	8006d0e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006cd6:	4b1f      	ldr	r3, [pc, #124]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006cd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cdc:	4a1d      	ldr	r2, [pc, #116]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006cde:	f023 0301 	bic.w	r3, r3, #1
 8006ce2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce6:	f7fc fd49 	bl	800377c <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cec:	e008      	b.n	8006d00 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006cee:	f7fc fd45 	bl	800377c <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	2b02      	cmp	r3, #2
 8006cfa:	d901      	bls.n	8006d00 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e0dd      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006d00:	4b14      	ldr	r3, [pc, #80]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006d02:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1ef      	bne.n	8006cee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	69db      	ldr	r3, [r3, #28]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	f000 80d1 	beq.w	8006eba <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006d18:	4b0e      	ldr	r3, [pc, #56]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	f003 030c 	and.w	r3, r3, #12
 8006d20:	2b0c      	cmp	r3, #12
 8006d22:	f000 808b 	beq.w	8006e3c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	69db      	ldr	r3, [r3, #28]
 8006d2a:	2b02      	cmp	r3, #2
 8006d2c:	d15e      	bne.n	8006dec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d2e:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a08      	ldr	r2, [pc, #32]	; (8006d54 <HAL_RCC_OscConfig+0x4b8>)
 8006d34:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d3a:	f7fc fd1f 	bl	800377c <HAL_GetTick>
 8006d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d40:	e00c      	b.n	8006d5c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d42:	f7fc fd1b 	bl	800377c <HAL_GetTick>
 8006d46:	4602      	mov	r2, r0
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d905      	bls.n	8006d5c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d50:	2303      	movs	r3, #3
 8006d52:	e0b3      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
 8006d54:	40021000 	.word	0x40021000
 8006d58:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d5c:	4b59      	ldr	r3, [pc, #356]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1ec      	bne.n	8006d42 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d68:	4b56      	ldr	r3, [pc, #344]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	4b56      	ldr	r3, [pc, #344]	; (8006ec8 <HAL_RCC_OscConfig+0x62c>)
 8006d6e:	4013      	ands	r3, r2
 8006d70:	687a      	ldr	r2, [r7, #4]
 8006d72:	6a11      	ldr	r1, [r2, #32]
 8006d74:	687a      	ldr	r2, [r7, #4]
 8006d76:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d78:	3a01      	subs	r2, #1
 8006d7a:	0112      	lsls	r2, r2, #4
 8006d7c:	4311      	orrs	r1, r2
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006d82:	0212      	lsls	r2, r2, #8
 8006d84:	4311      	orrs	r1, r2
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d8a:	0852      	lsrs	r2, r2, #1
 8006d8c:	3a01      	subs	r2, #1
 8006d8e:	0552      	lsls	r2, r2, #21
 8006d90:	4311      	orrs	r1, r2
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d96:	0852      	lsrs	r2, r2, #1
 8006d98:	3a01      	subs	r2, #1
 8006d9a:	0652      	lsls	r2, r2, #25
 8006d9c:	4311      	orrs	r1, r2
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006da2:	06d2      	lsls	r2, r2, #27
 8006da4:	430a      	orrs	r2, r1
 8006da6:	4947      	ldr	r1, [pc, #284]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006da8:	4313      	orrs	r3, r2
 8006daa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dac:	4b45      	ldr	r3, [pc, #276]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a44      	ldr	r2, [pc, #272]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006db6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006db8:	4b42      	ldr	r3, [pc, #264]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006dba:	68db      	ldr	r3, [r3, #12]
 8006dbc:	4a41      	ldr	r2, [pc, #260]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006dbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc4:	f7fc fcda 	bl	800377c <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dcc:	f7fc fcd6 	bl	800377c <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e06e      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006dde:	4b39      	ldr	r3, [pc, #228]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0f0      	beq.n	8006dcc <HAL_RCC_OscConfig+0x530>
 8006dea:	e066      	b.n	8006eba <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dec:	4b35      	ldr	r3, [pc, #212]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	4a34      	ldr	r2, [pc, #208]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006df6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006df8:	4b32      	ldr	r3, [pc, #200]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	4a31      	ldr	r2, [pc, #196]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006dfe:	f023 0303 	bic.w	r3, r3, #3
 8006e02:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006e04:	4b2f      	ldr	r3, [pc, #188]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	4a2e      	ldr	r2, [pc, #184]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006e0a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e12:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e14:	f7fc fcb2 	bl	800377c <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e1c:	f7fc fcae 	bl	800377c <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b02      	cmp	r3, #2
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e046      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006e2e:	4b25      	ldr	r3, [pc, #148]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d1f0      	bne.n	8006e1c <HAL_RCC_OscConfig+0x580>
 8006e3a:	e03e      	b.n	8006eba <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e039      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006e48:	4b1e      	ldr	r3, [pc, #120]	; (8006ec4 <HAL_RCC_OscConfig+0x628>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f003 0203 	and.w	r2, r3, #3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	429a      	cmp	r2, r3
 8006e5a:	d12c      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e66:	3b01      	subs	r3, #1
 8006e68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e6a:	429a      	cmp	r2, r3
 8006e6c:	d123      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d11b      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d113      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e98:	085b      	lsrs	r3, r3, #1
 8006e9a:	3b01      	subs	r3, #1
 8006e9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d109      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	3b01      	subs	r3, #1
 8006eb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d001      	beq.n	8006eba <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	e000      	b.n	8006ebc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006eba:	2300      	movs	r3, #0
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	40021000 	.word	0x40021000
 8006ec8:	019f800c 	.word	0x019f800c

08006ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d101      	bne.n	8006ee4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e11e      	b.n	8007122 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ee4:	4b91      	ldr	r3, [pc, #580]	; (800712c <HAL_RCC_ClockConfig+0x260>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d910      	bls.n	8006f14 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ef2:	4b8e      	ldr	r3, [pc, #568]	; (800712c <HAL_RCC_ClockConfig+0x260>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f023 020f 	bic.w	r2, r3, #15
 8006efa:	498c      	ldr	r1, [pc, #560]	; (800712c <HAL_RCC_ClockConfig+0x260>)
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f02:	4b8a      	ldr	r3, [pc, #552]	; (800712c <HAL_RCC_ClockConfig+0x260>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 030f 	and.w	r3, r3, #15
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d001      	beq.n	8006f14 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e106      	b.n	8007122 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d073      	beq.n	8007008 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	2b03      	cmp	r3, #3
 8006f26:	d129      	bne.n	8006f7c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f28:	4b81      	ldr	r3, [pc, #516]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	e0f4      	b.n	8007122 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006f38:	f000 f99e 	bl	8007278 <RCC_GetSysClockFreqFromPLLSource>
 8006f3c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	4a7c      	ldr	r2, [pc, #496]	; (8007134 <HAL_RCC_ClockConfig+0x268>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d93f      	bls.n	8006fc6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f46:	4b7a      	ldr	r3, [pc, #488]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d009      	beq.n	8006f66 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d033      	beq.n	8006fc6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d12f      	bne.n	8006fc6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f66:	4b72      	ldr	r3, [pc, #456]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8006f68:	689b      	ldr	r3, [r3, #8]
 8006f6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f6e:	4a70      	ldr	r2, [pc, #448]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8006f70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f74:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f76:	2380      	movs	r3, #128	; 0x80
 8006f78:	617b      	str	r3, [r7, #20]
 8006f7a:	e024      	b.n	8006fc6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d107      	bne.n	8006f94 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f84:	4b6a      	ldr	r3, [pc, #424]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d109      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f90:	2301      	movs	r3, #1
 8006f92:	e0c6      	b.n	8007122 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f94:	4b66      	ldr	r3, [pc, #408]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d101      	bne.n	8006fa4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e0be      	b.n	8007122 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006fa4:	f000 f8ce 	bl	8007144 <HAL_RCC_GetSysClockFreq>
 8006fa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	4a61      	ldr	r2, [pc, #388]	; (8007134 <HAL_RCC_ClockConfig+0x268>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d909      	bls.n	8006fc6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006fb2:	4b5f      	ldr	r3, [pc, #380]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006fba:	4a5d      	ldr	r2, [pc, #372]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8006fbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fc0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006fc2:	2380      	movs	r3, #128	; 0x80
 8006fc4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006fc6:	4b5a      	ldr	r3, [pc, #360]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f023 0203 	bic.w	r2, r3, #3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	4957      	ldr	r1, [pc, #348]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fd8:	f7fc fbd0 	bl	800377c <HAL_GetTick>
 8006fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fde:	e00a      	b.n	8006ff6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fe0:	f7fc fbcc 	bl	800377c <HAL_GetTick>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	1ad3      	subs	r3, r2, r3
 8006fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e095      	b.n	8007122 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ff6:	4b4e      	ldr	r3, [pc, #312]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	f003 020c 	and.w	r2, r3, #12
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	685b      	ldr	r3, [r3, #4]
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	429a      	cmp	r2, r3
 8007006:	d1eb      	bne.n	8006fe0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0302 	and.w	r3, r3, #2
 8007010:	2b00      	cmp	r3, #0
 8007012:	d023      	beq.n	800705c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0304 	and.w	r3, r3, #4
 800701c:	2b00      	cmp	r3, #0
 800701e:	d005      	beq.n	800702c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007020:	4b43      	ldr	r3, [pc, #268]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	4a42      	ldr	r2, [pc, #264]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8007026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800702a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d007      	beq.n	8007048 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007038:	4b3d      	ldr	r3, [pc, #244]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007040:	4a3b      	ldr	r2, [pc, #236]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8007042:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8007046:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007048:	4b39      	ldr	r3, [pc, #228]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	689b      	ldr	r3, [r3, #8]
 8007054:	4936      	ldr	r1, [pc, #216]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8007056:	4313      	orrs	r3, r2
 8007058:	608b      	str	r3, [r1, #8]
 800705a:	e008      	b.n	800706e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	2b80      	cmp	r3, #128	; 0x80
 8007060:	d105      	bne.n	800706e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007062:	4b33      	ldr	r3, [pc, #204]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	4a32      	ldr	r2, [pc, #200]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 8007068:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800706c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800706e:	4b2f      	ldr	r3, [pc, #188]	; (800712c <HAL_RCC_ClockConfig+0x260>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f003 030f 	and.w	r3, r3, #15
 8007076:	683a      	ldr	r2, [r7, #0]
 8007078:	429a      	cmp	r2, r3
 800707a:	d21d      	bcs.n	80070b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800707c:	4b2b      	ldr	r3, [pc, #172]	; (800712c <HAL_RCC_ClockConfig+0x260>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f023 020f 	bic.w	r2, r3, #15
 8007084:	4929      	ldr	r1, [pc, #164]	; (800712c <HAL_RCC_ClockConfig+0x260>)
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	4313      	orrs	r3, r2
 800708a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800708c:	f7fc fb76 	bl	800377c <HAL_GetTick>
 8007090:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007092:	e00a      	b.n	80070aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007094:	f7fc fb72 	bl	800377c <HAL_GetTick>
 8007098:	4602      	mov	r2, r0
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e03b      	b.n	8007122 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070aa:	4b20      	ldr	r3, [pc, #128]	; (800712c <HAL_RCC_ClockConfig+0x260>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f003 030f 	and.w	r3, r3, #15
 80070b2:	683a      	ldr	r2, [r7, #0]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	d1ed      	bne.n	8007094 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d008      	beq.n	80070d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070c4:	4b1a      	ldr	r3, [pc, #104]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	4917      	ldr	r1, [pc, #92]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070e2:	4b13      	ldr	r3, [pc, #76]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	490f      	ldr	r1, [pc, #60]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070f6:	f000 f825 	bl	8007144 <HAL_RCC_GetSysClockFreq>
 80070fa:	4602      	mov	r2, r0
 80070fc:	4b0c      	ldr	r3, [pc, #48]	; (8007130 <HAL_RCC_ClockConfig+0x264>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	091b      	lsrs	r3, r3, #4
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	490c      	ldr	r1, [pc, #48]	; (8007138 <HAL_RCC_ClockConfig+0x26c>)
 8007108:	5ccb      	ldrb	r3, [r1, r3]
 800710a:	f003 031f 	and.w	r3, r3, #31
 800710e:	fa22 f303 	lsr.w	r3, r2, r3
 8007112:	4a0a      	ldr	r2, [pc, #40]	; (800713c <HAL_RCC_ClockConfig+0x270>)
 8007114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8007116:	4b0a      	ldr	r3, [pc, #40]	; (8007140 <HAL_RCC_ClockConfig+0x274>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f7fc fae2 	bl	80036e4 <HAL_InitTick>
 8007120:	4603      	mov	r3, r0
}
 8007122:	4618      	mov	r0, r3
 8007124:	3718      	adds	r7, #24
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40022000 	.word	0x40022000
 8007130:	40021000 	.word	0x40021000
 8007134:	04c4b400 	.word	0x04c4b400
 8007138:	0800fd18 	.word	0x0800fd18
 800713c:	20000048 	.word	0x20000048
 8007140:	2000004c 	.word	0x2000004c

08007144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007144:	b480      	push	{r7}
 8007146:	b087      	sub	sp, #28
 8007148:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800714a:	4b2c      	ldr	r3, [pc, #176]	; (80071fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f003 030c 	and.w	r3, r3, #12
 8007152:	2b04      	cmp	r3, #4
 8007154:	d102      	bne.n	800715c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007156:	4b2a      	ldr	r3, [pc, #168]	; (8007200 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007158:	613b      	str	r3, [r7, #16]
 800715a:	e047      	b.n	80071ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800715c:	4b27      	ldr	r3, [pc, #156]	; (80071fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800715e:	689b      	ldr	r3, [r3, #8]
 8007160:	f003 030c 	and.w	r3, r3, #12
 8007164:	2b08      	cmp	r3, #8
 8007166:	d102      	bne.n	800716e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007168:	4b26      	ldr	r3, [pc, #152]	; (8007204 <HAL_RCC_GetSysClockFreq+0xc0>)
 800716a:	613b      	str	r3, [r7, #16]
 800716c:	e03e      	b.n	80071ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800716e:	4b23      	ldr	r3, [pc, #140]	; (80071fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f003 030c 	and.w	r3, r3, #12
 8007176:	2b0c      	cmp	r3, #12
 8007178:	d136      	bne.n	80071e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800717a:	4b20      	ldr	r3, [pc, #128]	; (80071fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f003 0303 	and.w	r3, r3, #3
 8007182:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007184:	4b1d      	ldr	r3, [pc, #116]	; (80071fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	091b      	lsrs	r3, r3, #4
 800718a:	f003 030f 	and.w	r3, r3, #15
 800718e:	3301      	adds	r3, #1
 8007190:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b03      	cmp	r3, #3
 8007196:	d10c      	bne.n	80071b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007198:	4a1a      	ldr	r2, [pc, #104]	; (8007204 <HAL_RCC_GetSysClockFreq+0xc0>)
 800719a:	68bb      	ldr	r3, [r7, #8]
 800719c:	fbb2 f3f3 	udiv	r3, r2, r3
 80071a0:	4a16      	ldr	r2, [pc, #88]	; (80071fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80071a2:	68d2      	ldr	r2, [r2, #12]
 80071a4:	0a12      	lsrs	r2, r2, #8
 80071a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071aa:	fb02 f303 	mul.w	r3, r2, r3
 80071ae:	617b      	str	r3, [r7, #20]
      break;
 80071b0:	e00c      	b.n	80071cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80071b2:	4a13      	ldr	r2, [pc, #76]	; (8007200 <HAL_RCC_GetSysClockFreq+0xbc>)
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ba:	4a10      	ldr	r2, [pc, #64]	; (80071fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80071bc:	68d2      	ldr	r2, [r2, #12]
 80071be:	0a12      	lsrs	r2, r2, #8
 80071c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80071c4:	fb02 f303 	mul.w	r3, r2, r3
 80071c8:	617b      	str	r3, [r7, #20]
      break;
 80071ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80071cc:	4b0b      	ldr	r3, [pc, #44]	; (80071fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	0e5b      	lsrs	r3, r3, #25
 80071d2:	f003 0303 	and.w	r3, r3, #3
 80071d6:	3301      	adds	r3, #1
 80071d8:	005b      	lsls	r3, r3, #1
 80071da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e4:	613b      	str	r3, [r7, #16]
 80071e6:	e001      	b.n	80071ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80071ec:	693b      	ldr	r3, [r7, #16]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	40021000 	.word	0x40021000
 8007200:	00f42400 	.word	0x00f42400
 8007204:	007a1200 	.word	0x007a1200

08007208 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007208:	b480      	push	{r7}
 800720a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800720c:	4b03      	ldr	r3, [pc, #12]	; (800721c <HAL_RCC_GetHCLKFreq+0x14>)
 800720e:	681b      	ldr	r3, [r3, #0]
}
 8007210:	4618      	mov	r0, r3
 8007212:	46bd      	mov	sp, r7
 8007214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	20000048 	.word	0x20000048

08007220 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007224:	f7ff fff0 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8007228:	4602      	mov	r2, r0
 800722a:	4b06      	ldr	r3, [pc, #24]	; (8007244 <HAL_RCC_GetPCLK1Freq+0x24>)
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	0a1b      	lsrs	r3, r3, #8
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	4904      	ldr	r1, [pc, #16]	; (8007248 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007236:	5ccb      	ldrb	r3, [r1, r3]
 8007238:	f003 031f 	and.w	r3, r3, #31
 800723c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007240:	4618      	mov	r0, r3
 8007242:	bd80      	pop	{r7, pc}
 8007244:	40021000 	.word	0x40021000
 8007248:	0800fd28 	.word	0x0800fd28

0800724c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007250:	f7ff ffda 	bl	8007208 <HAL_RCC_GetHCLKFreq>
 8007254:	4602      	mov	r2, r0
 8007256:	4b06      	ldr	r3, [pc, #24]	; (8007270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	0adb      	lsrs	r3, r3, #11
 800725c:	f003 0307 	and.w	r3, r3, #7
 8007260:	4904      	ldr	r1, [pc, #16]	; (8007274 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007262:	5ccb      	ldrb	r3, [r1, r3]
 8007264:	f003 031f 	and.w	r3, r3, #31
 8007268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800726c:	4618      	mov	r0, r3
 800726e:	bd80      	pop	{r7, pc}
 8007270:	40021000 	.word	0x40021000
 8007274:	0800fd28 	.word	0x0800fd28

08007278 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800727e:	4b1e      	ldr	r3, [pc, #120]	; (80072f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f003 0303 	and.w	r3, r3, #3
 8007286:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007288:	4b1b      	ldr	r3, [pc, #108]	; (80072f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	091b      	lsrs	r3, r3, #4
 800728e:	f003 030f 	and.w	r3, r3, #15
 8007292:	3301      	adds	r3, #1
 8007294:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	2b03      	cmp	r3, #3
 800729a:	d10c      	bne.n	80072b6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800729c:	4a17      	ldr	r2, [pc, #92]	; (80072fc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a4:	4a14      	ldr	r2, [pc, #80]	; (80072f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072a6:	68d2      	ldr	r2, [r2, #12]
 80072a8:	0a12      	lsrs	r2, r2, #8
 80072aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072ae:	fb02 f303 	mul.w	r3, r2, r3
 80072b2:	617b      	str	r3, [r7, #20]
    break;
 80072b4:	e00c      	b.n	80072d0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80072b6:	4a12      	ldr	r2, [pc, #72]	; (8007300 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80072be:	4a0e      	ldr	r2, [pc, #56]	; (80072f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072c0:	68d2      	ldr	r2, [r2, #12]
 80072c2:	0a12      	lsrs	r2, r2, #8
 80072c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80072c8:	fb02 f303 	mul.w	r3, r2, r3
 80072cc:	617b      	str	r3, [r7, #20]
    break;
 80072ce:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80072d0:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80072d2:	68db      	ldr	r3, [r3, #12]
 80072d4:	0e5b      	lsrs	r3, r3, #25
 80072d6:	f003 0303 	and.w	r3, r3, #3
 80072da:	3301      	adds	r3, #1
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80072e0:	697a      	ldr	r2, [r7, #20]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80072ea:	687b      	ldr	r3, [r7, #4]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	371c      	adds	r7, #28
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	40021000 	.word	0x40021000
 80072fc:	007a1200 	.word	0x007a1200
 8007300:	00f42400 	.word	0x00f42400

08007304 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b086      	sub	sp, #24
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800730c:	2300      	movs	r3, #0
 800730e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007310:	2300      	movs	r3, #0
 8007312:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8098 	beq.w	8007452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007322:	2300      	movs	r3, #0
 8007324:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007326:	4b43      	ldr	r3, [pc, #268]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800732a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800732e:	2b00      	cmp	r3, #0
 8007330:	d10d      	bne.n	800734e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007332:	4b40      	ldr	r3, [pc, #256]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007336:	4a3f      	ldr	r2, [pc, #252]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800733c:	6593      	str	r3, [r2, #88]	; 0x58
 800733e:	4b3d      	ldr	r3, [pc, #244]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007346:	60bb      	str	r3, [r7, #8]
 8007348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800734a:	2301      	movs	r3, #1
 800734c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800734e:	4b3a      	ldr	r3, [pc, #232]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	4a39      	ldr	r2, [pc, #228]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007358:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800735a:	f7fc fa0f 	bl	800377c <HAL_GetTick>
 800735e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007360:	e009      	b.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007362:	f7fc fa0b 	bl	800377c <HAL_GetTick>
 8007366:	4602      	mov	r2, r0
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	d902      	bls.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	74fb      	strb	r3, [r7, #19]
        break;
 8007374:	e005      	b.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007376:	4b30      	ldr	r3, [pc, #192]	; (8007438 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800737e:	2b00      	cmp	r3, #0
 8007380:	d0ef      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007382:	7cfb      	ldrb	r3, [r7, #19]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d159      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007388:	4b2a      	ldr	r3, [pc, #168]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800738a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800738e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007392:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007394:	697b      	ldr	r3, [r7, #20]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d01e      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	697a      	ldr	r2, [r7, #20]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d019      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80073a4:	4b23      	ldr	r3, [pc, #140]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073b0:	4b20      	ldr	r3, [pc, #128]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b6:	4a1f      	ldr	r2, [pc, #124]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073c0:	4b1c      	ldr	r3, [pc, #112]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073c6:	4a1b      	ldr	r2, [pc, #108]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80073d0:	4a18      	ldr	r2, [pc, #96]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	f003 0301 	and.w	r3, r3, #1
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d016      	beq.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073e2:	f7fc f9cb 	bl	800377c <HAL_GetTick>
 80073e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073e8:	e00b      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ea:	f7fc f9c7 	bl	800377c <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d902      	bls.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	74fb      	strb	r3, [r7, #19]
            break;
 8007400:	e006      	b.n	8007410 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007402:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007408:	f003 0302 	and.w	r3, r3, #2
 800740c:	2b00      	cmp	r3, #0
 800740e:	d0ec      	beq.n	80073ea <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8007410:	7cfb      	ldrb	r3, [r7, #19]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10b      	bne.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007416:	4b07      	ldr	r3, [pc, #28]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007424:	4903      	ldr	r1, [pc, #12]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800742c:	e008      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800742e:	7cfb      	ldrb	r3, [r7, #19]
 8007430:	74bb      	strb	r3, [r7, #18]
 8007432:	e005      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8007434:	40021000 	.word	0x40021000
 8007438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800743c:	7cfb      	ldrb	r3, [r7, #19]
 800743e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007440:	7c7b      	ldrb	r3, [r7, #17]
 8007442:	2b01      	cmp	r3, #1
 8007444:	d105      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007446:	4ba6      	ldr	r3, [pc, #664]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744a:	4aa5      	ldr	r2, [pc, #660]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800744c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007450:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d00a      	beq.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800745e:	4ba0      	ldr	r3, [pc, #640]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007464:	f023 0203 	bic.w	r2, r3, #3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	499c      	ldr	r1, [pc, #624]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800746e:	4313      	orrs	r3, r2
 8007470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f003 0302 	and.w	r3, r3, #2
 800747c:	2b00      	cmp	r3, #0
 800747e:	d00a      	beq.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007480:	4b97      	ldr	r3, [pc, #604]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007486:	f023 020c 	bic.w	r2, r3, #12
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	4994      	ldr	r1, [pc, #592]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007490:	4313      	orrs	r3, r2
 8007492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0304 	and.w	r3, r3, #4
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00a      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80074a2:	4b8f      	ldr	r3, [pc, #572]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	498b      	ldr	r1, [pc, #556]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074b2:	4313      	orrs	r3, r2
 80074b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f003 0308 	and.w	r3, r3, #8
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d00a      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80074c4:	4b86      	ldr	r3, [pc, #536]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	4983      	ldr	r1, [pc, #524]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074d4:	4313      	orrs	r3, r2
 80074d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f003 0320 	and.w	r3, r3, #32
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00a      	beq.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80074e6:	4b7e      	ldr	r3, [pc, #504]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	695b      	ldr	r3, [r3, #20]
 80074f4:	497a      	ldr	r1, [pc, #488]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074f6:	4313      	orrs	r3, r2
 80074f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00a      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007508:	4b75      	ldr	r3, [pc, #468]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800750a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800750e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	699b      	ldr	r3, [r3, #24]
 8007516:	4972      	ldr	r1, [pc, #456]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007518:	4313      	orrs	r3, r2
 800751a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007526:	2b00      	cmp	r3, #0
 8007528:	d00a      	beq.n	8007540 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800752a:	4b6d      	ldr	r3, [pc, #436]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800752c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007530:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	4969      	ldr	r1, [pc, #420]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800753a:	4313      	orrs	r3, r2
 800753c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007548:	2b00      	cmp	r3, #0
 800754a:	d00a      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800754c:	4b64      	ldr	r3, [pc, #400]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800754e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007552:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a1b      	ldr	r3, [r3, #32]
 800755a:	4961      	ldr	r1, [pc, #388]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800755c:	4313      	orrs	r3, r2
 800755e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800756a:	2b00      	cmp	r3, #0
 800756c:	d00a      	beq.n	8007584 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800756e:	4b5c      	ldr	r3, [pc, #368]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007574:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	4958      	ldr	r1, [pc, #352]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800757e:	4313      	orrs	r3, r2
 8007580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800758c:	2b00      	cmp	r3, #0
 800758e:	d015      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007590:	4b53      	ldr	r3, [pc, #332]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007596:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800759e:	4950      	ldr	r1, [pc, #320]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075a0:	4313      	orrs	r3, r2
 80075a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075ae:	d105      	bne.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075b0:	4b4b      	ldr	r3, [pc, #300]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	4a4a      	ldr	r2, [pc, #296]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d015      	beq.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80075c8:	4b45      	ldr	r3, [pc, #276]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075d6:	4942      	ldr	r1, [pc, #264]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80075e6:	d105      	bne.n	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075e8:	4b3d      	ldr	r3, [pc, #244]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	4a3c      	ldr	r2, [pc, #240]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075f2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d015      	beq.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007600:	4b37      	ldr	r3, [pc, #220]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007606:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760e:	4934      	ldr	r1, [pc, #208]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007610:	4313      	orrs	r3, r2
 8007612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800761a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800761e:	d105      	bne.n	800762c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007620:	4b2f      	ldr	r3, [pc, #188]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	4a2e      	ldr	r2, [pc, #184]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007626:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800762a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007634:	2b00      	cmp	r3, #0
 8007636:	d015      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007638:	4b29      	ldr	r3, [pc, #164]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800763a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800763e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007646:	4926      	ldr	r1, [pc, #152]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007648:	4313      	orrs	r3, r2
 800764a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007652:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007656:	d105      	bne.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007658:	4b21      	ldr	r3, [pc, #132]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	4a20      	ldr	r2, [pc, #128]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800765e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007662:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800766c:	2b00      	cmp	r3, #0
 800766e:	d015      	beq.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007670:	4b1b      	ldr	r3, [pc, #108]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007676:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800767e:	4918      	ldr	r1, [pc, #96]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007680:	4313      	orrs	r3, r2
 8007682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800768a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800768e:	d105      	bne.n	800769c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007690:	4b13      	ldr	r3, [pc, #76]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	4a12      	ldr	r2, [pc, #72]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007696:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800769a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d015      	beq.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80076a8:	4b0d      	ldr	r3, [pc, #52]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b6:	490a      	ldr	r1, [pc, #40]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076c6:	d105      	bne.n	80076d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ca:	68db      	ldr	r3, [r3, #12]
 80076cc:	4a04      	ldr	r2, [pc, #16]	; (80076e0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80076ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80076d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3718      	adds	r7, #24
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	40021000 	.word	0x40021000

080076e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e09d      	b.n	8007832 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d108      	bne.n	8007710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007706:	d009      	beq.n	800771c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	61da      	str	r2, [r3, #28]
 800770e:	e005      	b.n	800771c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2200      	movs	r2, #0
 800771a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fb fcca 	bl	80030d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	681a      	ldr	r2, [r3, #0]
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007752:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	68db      	ldr	r3, [r3, #12]
 8007758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800775c:	d902      	bls.n	8007764 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800775e:	2300      	movs	r3, #0
 8007760:	60fb      	str	r3, [r7, #12]
 8007762:	e002      	b.n	800776a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007768:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007772:	d007      	beq.n	8007784 <HAL_SPI_Init+0xa0>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800777c:	d002      	beq.n	8007784 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007794:	431a      	orrs	r2, r3
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	691b      	ldr	r3, [r3, #16]
 800779a:	f003 0302 	and.w	r3, r3, #2
 800779e:	431a      	orrs	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	431a      	orrs	r2, r3
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	699b      	ldr	r3, [r3, #24]
 80077ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077b2:	431a      	orrs	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	69db      	ldr	r3, [r3, #28]
 80077b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c6:	ea42 0103 	orr.w	r1, r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	430a      	orrs	r2, r1
 80077d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	699b      	ldr	r3, [r3, #24]
 80077de:	0c1b      	lsrs	r3, r3, #16
 80077e0:	f003 0204 	and.w	r2, r3, #4
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	f003 0310 	and.w	r3, r3, #16
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077f2:	f003 0308 	and.w	r3, r3, #8
 80077f6:	431a      	orrs	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007800:	ea42 0103 	orr.w	r1, r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	430a      	orrs	r2, r1
 8007810:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69da      	ldr	r2, [r3, #28]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007820:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007830:	2300      	movs	r3, #0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e049      	b.n	80078e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f7fb fc79 	bl	8003158 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2202      	movs	r2, #2
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f000 fea1 	bl	80085c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2201      	movs	r2, #1
 800789a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2201      	movs	r2, #1
 80078a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2201      	movs	r2, #1
 80078b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2201      	movs	r2, #1
 80078ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2201      	movs	r2, #1
 80078ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2201      	movs	r2, #1
 80078d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	2201      	movs	r2, #1
 80078da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d101      	bne.n	80078fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e049      	b.n	800798e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007900:	b2db      	uxtb	r3, r3
 8007902:	2b00      	cmp	r3, #0
 8007904:	d106      	bne.n	8007914 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f841 	bl	8007996 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2202      	movs	r2, #2
 8007918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	3304      	adds	r3, #4
 8007924:	4619      	mov	r1, r3
 8007926:	4610      	mov	r0, r2
 8007928:	f000 fe4a 	bl	80085c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2201      	movs	r2, #1
 8007940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2201      	movs	r2, #1
 8007960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2201      	movs	r2, #1
 8007970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
	...

080079ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d109      	bne.n	80079d0 <HAL_TIM_PWM_Start+0x24>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	bf14      	ite	ne
 80079c8:	2301      	movne	r3, #1
 80079ca:	2300      	moveq	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	e03c      	b.n	8007a4a <HAL_TIM_PWM_Start+0x9e>
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d109      	bne.n	80079ea <HAL_TIM_PWM_Start+0x3e>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b01      	cmp	r3, #1
 80079e0:	bf14      	ite	ne
 80079e2:	2301      	movne	r3, #1
 80079e4:	2300      	moveq	r3, #0
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	e02f      	b.n	8007a4a <HAL_TIM_PWM_Start+0x9e>
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b08      	cmp	r3, #8
 80079ee:	d109      	bne.n	8007a04 <HAL_TIM_PWM_Start+0x58>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	bf14      	ite	ne
 80079fc:	2301      	movne	r3, #1
 80079fe:	2300      	moveq	r3, #0
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	e022      	b.n	8007a4a <HAL_TIM_PWM_Start+0x9e>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	2b0c      	cmp	r3, #12
 8007a08:	d109      	bne.n	8007a1e <HAL_TIM_PWM_Start+0x72>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	bf14      	ite	ne
 8007a16:	2301      	movne	r3, #1
 8007a18:	2300      	moveq	r3, #0
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	e015      	b.n	8007a4a <HAL_TIM_PWM_Start+0x9e>
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b10      	cmp	r3, #16
 8007a22:	d109      	bne.n	8007a38 <HAL_TIM_PWM_Start+0x8c>
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	bf14      	ite	ne
 8007a30:	2301      	movne	r3, #1
 8007a32:	2300      	moveq	r3, #0
 8007a34:	b2db      	uxtb	r3, r3
 8007a36:	e008      	b.n	8007a4a <HAL_TIM_PWM_Start+0x9e>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	bf14      	ite	ne
 8007a44:	2301      	movne	r3, #1
 8007a46:	2300      	moveq	r3, #0
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e097      	b.n	8007b82 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d104      	bne.n	8007a62 <HAL_TIM_PWM_Start+0xb6>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2202      	movs	r2, #2
 8007a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a60:	e023      	b.n	8007aaa <HAL_TIM_PWM_Start+0xfe>
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d104      	bne.n	8007a72 <HAL_TIM_PWM_Start+0xc6>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2202      	movs	r2, #2
 8007a6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a70:	e01b      	b.n	8007aaa <HAL_TIM_PWM_Start+0xfe>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b08      	cmp	r3, #8
 8007a76:	d104      	bne.n	8007a82 <HAL_TIM_PWM_Start+0xd6>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a80:	e013      	b.n	8007aaa <HAL_TIM_PWM_Start+0xfe>
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2b0c      	cmp	r3, #12
 8007a86:	d104      	bne.n	8007a92 <HAL_TIM_PWM_Start+0xe6>
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2202      	movs	r2, #2
 8007a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a90:	e00b      	b.n	8007aaa <HAL_TIM_PWM_Start+0xfe>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d104      	bne.n	8007aa2 <HAL_TIM_PWM_Start+0xf6>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aa0:	e003      	b.n	8007aaa <HAL_TIM_PWM_Start+0xfe>
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	6839      	ldr	r1, [r7, #0]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	f001 f9a6 	bl	8008e04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a33      	ldr	r2, [pc, #204]	; (8007b8c <HAL_TIM_PWM_Start+0x1e0>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d013      	beq.n	8007aea <HAL_TIM_PWM_Start+0x13e>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a32      	ldr	r2, [pc, #200]	; (8007b90 <HAL_TIM_PWM_Start+0x1e4>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d00e      	beq.n	8007aea <HAL_TIM_PWM_Start+0x13e>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a30      	ldr	r2, [pc, #192]	; (8007b94 <HAL_TIM_PWM_Start+0x1e8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d009      	beq.n	8007aea <HAL_TIM_PWM_Start+0x13e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a2f      	ldr	r2, [pc, #188]	; (8007b98 <HAL_TIM_PWM_Start+0x1ec>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d004      	beq.n	8007aea <HAL_TIM_PWM_Start+0x13e>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a2d      	ldr	r2, [pc, #180]	; (8007b9c <HAL_TIM_PWM_Start+0x1f0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d101      	bne.n	8007aee <HAL_TIM_PWM_Start+0x142>
 8007aea:	2301      	movs	r3, #1
 8007aec:	e000      	b.n	8007af0 <HAL_TIM_PWM_Start+0x144>
 8007aee:	2300      	movs	r3, #0
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d007      	beq.n	8007b04 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b02:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	4a20      	ldr	r2, [pc, #128]	; (8007b8c <HAL_TIM_PWM_Start+0x1e0>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d018      	beq.n	8007b40 <HAL_TIM_PWM_Start+0x194>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b16:	d013      	beq.n	8007b40 <HAL_TIM_PWM_Start+0x194>
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	4a20      	ldr	r2, [pc, #128]	; (8007ba0 <HAL_TIM_PWM_Start+0x1f4>)
 8007b1e:	4293      	cmp	r3, r2
 8007b20:	d00e      	beq.n	8007b40 <HAL_TIM_PWM_Start+0x194>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a1f      	ldr	r2, [pc, #124]	; (8007ba4 <HAL_TIM_PWM_Start+0x1f8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d009      	beq.n	8007b40 <HAL_TIM_PWM_Start+0x194>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a17      	ldr	r2, [pc, #92]	; (8007b90 <HAL_TIM_PWM_Start+0x1e4>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d004      	beq.n	8007b40 <HAL_TIM_PWM_Start+0x194>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a16      	ldr	r2, [pc, #88]	; (8007b94 <HAL_TIM_PWM_Start+0x1e8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d115      	bne.n	8007b6c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689a      	ldr	r2, [r3, #8]
 8007b46:	4b18      	ldr	r3, [pc, #96]	; (8007ba8 <HAL_TIM_PWM_Start+0x1fc>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2b06      	cmp	r3, #6
 8007b50:	d015      	beq.n	8007b7e <HAL_TIM_PWM_Start+0x1d2>
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b58:	d011      	beq.n	8007b7e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	681a      	ldr	r2, [r3, #0]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f042 0201 	orr.w	r2, r2, #1
 8007b68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b6a:	e008      	b.n	8007b7e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f042 0201 	orr.w	r2, r2, #1
 8007b7a:	601a      	str	r2, [r3, #0]
 8007b7c:	e000      	b.n	8007b80 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
 8007b8a:	bf00      	nop
 8007b8c:	40012c00 	.word	0x40012c00
 8007b90:	40013400 	.word	0x40013400
 8007b94:	40014000 	.word	0x40014000
 8007b98:	40014400 	.word	0x40014400
 8007b9c:	40014800 	.word	0x40014800
 8007ba0:	40000400 	.word	0x40000400
 8007ba4:	40000800 	.word	0x40000800
 8007ba8:	00010007 	.word	0x00010007

08007bac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d101      	bne.n	8007bc0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007bbc:	2301      	movs	r3, #1
 8007bbe:	e097      	b.n	8007cf0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d106      	bne.n	8007bda <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7fb fb0b 	bl	80031f0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2202      	movs	r2, #2
 8007bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	6812      	ldr	r2, [r2, #0]
 8007bec:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007bf0:	f023 0307 	bic.w	r3, r3, #7
 8007bf4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4610      	mov	r0, r2
 8007c02:	f000 fcdd 	bl	80085c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	699b      	ldr	r3, [r3, #24]
 8007c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	697a      	ldr	r2, [r7, #20]
 8007c24:	4313      	orrs	r3, r2
 8007c26:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c2e:	f023 0303 	bic.w	r3, r3, #3
 8007c32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	689a      	ldr	r2, [r3, #8]
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	693a      	ldr	r2, [r7, #16]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007c4c:	f023 030c 	bic.w	r3, r3, #12
 8007c50:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	68da      	ldr	r2, [r3, #12]
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	69db      	ldr	r3, [r3, #28]
 8007c66:	021b      	lsls	r3, r3, #8
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	693a      	ldr	r2, [r7, #16]
 8007c6c:	4313      	orrs	r3, r2
 8007c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c70:	683b      	ldr	r3, [r7, #0]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	011a      	lsls	r2, r3, #4
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	031b      	lsls	r3, r3, #12
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	693a      	ldr	r2, [r7, #16]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007c8a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	685a      	ldr	r2, [r3, #4]
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	695b      	ldr	r3, [r3, #20]
 8007c9c:	011b      	lsls	r3, r3, #4
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	697a      	ldr	r2, [r7, #20]
 8007cac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	693a      	ldr	r2, [r7, #16]
 8007cb4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68fa      	ldr	r2, [r7, #12]
 8007cbc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2201      	movs	r2, #1
 8007cc2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2201      	movs	r2, #1
 8007cda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2201      	movs	r2, #1
 8007cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007d10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d110      	bne.n	8007d4a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d102      	bne.n	8007d34 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d2e:	7b7b      	ldrb	r3, [r7, #13]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d001      	beq.n	8007d38 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	e089      	b.n	8007e4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2202      	movs	r2, #2
 8007d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d48:	e031      	b.n	8007dae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b04      	cmp	r3, #4
 8007d4e:	d110      	bne.n	8007d72 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d102      	bne.n	8007d5c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d56:	7b3b      	ldrb	r3, [r7, #12]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d001      	beq.n	8007d60 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	e075      	b.n	8007e4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d70:	e01d      	b.n	8007dae <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d72:	7bfb      	ldrb	r3, [r7, #15]
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d108      	bne.n	8007d8a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2b01      	cmp	r3, #1
 8007d7c:	d105      	bne.n	8007d8a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d7e:	7b7b      	ldrb	r3, [r7, #13]
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d102      	bne.n	8007d8a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d84:	7b3b      	ldrb	r3, [r7, #12]
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d001      	beq.n	8007d8e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e05e      	b.n	8007e4c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2202      	movs	r2, #2
 8007d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2202      	movs	r2, #2
 8007d9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2202      	movs	r2, #2
 8007da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2202      	movs	r2, #2
 8007daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d003      	beq.n	8007dbc <HAL_TIM_Encoder_Start_IT+0xc4>
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	2b04      	cmp	r3, #4
 8007db8:	d010      	beq.n	8007ddc <HAL_TIM_Encoder_Start_IT+0xe4>
 8007dba:	e01f      	b.n	8007dfc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 f81d 	bl	8008e04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68da      	ldr	r2, [r3, #12]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f042 0202 	orr.w	r2, r2, #2
 8007dd8:	60da      	str	r2, [r3, #12]
      break;
 8007dda:	e02e      	b.n	8007e3a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	2201      	movs	r2, #1
 8007de2:	2104      	movs	r1, #4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f001 f80d 	bl	8008e04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68da      	ldr	r2, [r3, #12]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f042 0204 	orr.w	r2, r2, #4
 8007df8:	60da      	str	r2, [r3, #12]
      break;
 8007dfa:	e01e      	b.n	8007e3a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2201      	movs	r2, #1
 8007e02:	2100      	movs	r1, #0
 8007e04:	4618      	mov	r0, r3
 8007e06:	f000 fffd 	bl	8008e04 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	2104      	movs	r1, #4
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fff6 	bl	8008e04 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68da      	ldr	r2, [r3, #12]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0202 	orr.w	r2, r2, #2
 8007e26:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68da      	ldr	r2, [r3, #12]
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f042 0204 	orr.w	r2, r2, #4
 8007e36:	60da      	str	r2, [r3, #12]
      break;
 8007e38:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681a      	ldr	r2, [r3, #0]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0201 	orr.w	r2, r2, #1
 8007e48:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
}
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	691b      	ldr	r3, [r3, #16]
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d122      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0302 	and.w	r3, r3, #2
 8007e74:	2b02      	cmp	r3, #2
 8007e76:	d11b      	bne.n	8007eb0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f06f 0202 	mvn.w	r2, #2
 8007e80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	2201      	movs	r2, #1
 8007e86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	f003 0303 	and.w	r3, r3, #3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7f9 fd00 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 8007e9c:	e005      	b.n	8007eaa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 fb70 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 fb77 	bl	8008598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	691b      	ldr	r3, [r3, #16]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d122      	bne.n	8007f04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f003 0304 	and.w	r3, r3, #4
 8007ec8:	2b04      	cmp	r3, #4
 8007eca:	d11b      	bne.n	8007f04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f06f 0204 	mvn.w	r2, #4
 8007ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2202      	movs	r2, #2
 8007eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d003      	beq.n	8007ef2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7f9 fcd6 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 8007ef0:	e005      	b.n	8007efe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 fb46 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fb4d 	bl	8008598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2200      	movs	r2, #0
 8007f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	f003 0308 	and.w	r3, r3, #8
 8007f0e:	2b08      	cmp	r3, #8
 8007f10:	d122      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	68db      	ldr	r3, [r3, #12]
 8007f18:	f003 0308 	and.w	r3, r3, #8
 8007f1c:	2b08      	cmp	r3, #8
 8007f1e:	d11b      	bne.n	8007f58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f06f 0208 	mvn.w	r2, #8
 8007f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2204      	movs	r2, #4
 8007f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	f003 0303 	and.w	r3, r3, #3
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f7f9 fcac 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 8007f44:	e005      	b.n	8007f52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f000 fb1c 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 fb23 	bl	8008598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	f003 0310 	and.w	r3, r3, #16
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d122      	bne.n	8007fac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	68db      	ldr	r3, [r3, #12]
 8007f6c:	f003 0310 	and.w	r3, r3, #16
 8007f70:	2b10      	cmp	r3, #16
 8007f72:	d11b      	bne.n	8007fac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f06f 0210 	mvn.w	r2, #16
 8007f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2208      	movs	r2, #8
 8007f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	69db      	ldr	r3, [r3, #28]
 8007f8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f7f9 fc82 	bl	800189c <HAL_TIM_IC_CaptureCallback>
 8007f98:	e005      	b.n	8007fa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 faf2 	bl	8008584 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa0:	6878      	ldr	r0, [r7, #4]
 8007fa2:	f000 faf9 	bl	8008598 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	691b      	ldr	r3, [r3, #16]
 8007fb2:	f003 0301 	and.w	r3, r3, #1
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d10e      	bne.n	8007fd8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d107      	bne.n	8007fd8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f06f 0201 	mvn.w	r2, #1
 8007fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f000 facc 	bl	8008570 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe2:	2b80      	cmp	r3, #128	; 0x80
 8007fe4:	d10e      	bne.n	8008004 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68db      	ldr	r3, [r3, #12]
 8007fec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ff0:	2b80      	cmp	r3, #128	; 0x80
 8007ff2:	d107      	bne.n	8008004 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f001 f852 	bl	80090a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	691b      	ldr	r3, [r3, #16]
 800800a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800800e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008012:	d10e      	bne.n	8008032 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801e:	2b80      	cmp	r3, #128	; 0x80
 8008020:	d107      	bne.n	8008032 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800802a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 f845 	bl	80090bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803c:	2b40      	cmp	r3, #64	; 0x40
 800803e:	d10e      	bne.n	800805e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	68db      	ldr	r3, [r3, #12]
 8008046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804a:	2b40      	cmp	r3, #64	; 0x40
 800804c:	d107      	bne.n	800805e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 faa7 	bl	80085ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	691b      	ldr	r3, [r3, #16]
 8008064:	f003 0320 	and.w	r3, r3, #32
 8008068:	2b20      	cmp	r3, #32
 800806a:	d10e      	bne.n	800808a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	68db      	ldr	r3, [r3, #12]
 8008072:	f003 0320 	and.w	r3, r3, #32
 8008076:	2b20      	cmp	r3, #32
 8008078:	d107      	bne.n	800808a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f06f 0220 	mvn.w	r2, #32
 8008082:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f001 f805 	bl	8009094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008094:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008098:	d10f      	bne.n	80080ba <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080a8:	d107      	bne.n	80080ba <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80080b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f001 f80b 	bl	80090d0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	691b      	ldr	r3, [r3, #16]
 80080c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080c8:	d10f      	bne.n	80080ea <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080d8:	d107      	bne.n	80080ea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80080e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80080e4:	6878      	ldr	r0, [r7, #4]
 80080e6:	f000 fffd 	bl	80090e4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	691b      	ldr	r3, [r3, #16]
 80080f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080f8:	d10f      	bne.n	800811a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008104:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008108:	d107      	bne.n	800811a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8008112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	f000 ffef 	bl	80090f8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008124:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008128:	d10f      	bne.n	800814a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008134:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008138:	d107      	bne.n	800814a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8008142:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 ffe1 	bl	800910c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800814a:	bf00      	nop
 800814c:	3708      	adds	r7, #8
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
	...

08008154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008160:	2300      	movs	r3, #0
 8008162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800816a:	2b01      	cmp	r3, #1
 800816c:	d101      	bne.n	8008172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800816e:	2302      	movs	r3, #2
 8008170:	e0ff      	b.n	8008372 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2201      	movs	r2, #1
 8008176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2b14      	cmp	r3, #20
 800817e:	f200 80f0 	bhi.w	8008362 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008182:	a201      	add	r2, pc, #4	; (adr r2, 8008188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008188:	080081dd 	.word	0x080081dd
 800818c:	08008363 	.word	0x08008363
 8008190:	08008363 	.word	0x08008363
 8008194:	08008363 	.word	0x08008363
 8008198:	0800821d 	.word	0x0800821d
 800819c:	08008363 	.word	0x08008363
 80081a0:	08008363 	.word	0x08008363
 80081a4:	08008363 	.word	0x08008363
 80081a8:	0800825f 	.word	0x0800825f
 80081ac:	08008363 	.word	0x08008363
 80081b0:	08008363 	.word	0x08008363
 80081b4:	08008363 	.word	0x08008363
 80081b8:	0800829f 	.word	0x0800829f
 80081bc:	08008363 	.word	0x08008363
 80081c0:	08008363 	.word	0x08008363
 80081c4:	08008363 	.word	0x08008363
 80081c8:	080082e1 	.word	0x080082e1
 80081cc:	08008363 	.word	0x08008363
 80081d0:	08008363 	.word	0x08008363
 80081d4:	08008363 	.word	0x08008363
 80081d8:	08008321 	.word	0x08008321
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68b9      	ldr	r1, [r7, #8]
 80081e2:	4618      	mov	r0, r3
 80081e4:	f000 fa7c 	bl	80086e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0208 	orr.w	r2, r2, #8
 80081f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	699a      	ldr	r2, [r3, #24]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f022 0204 	bic.w	r2, r2, #4
 8008206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6999      	ldr	r1, [r3, #24]
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	691a      	ldr	r2, [r3, #16]
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	430a      	orrs	r2, r1
 8008218:	619a      	str	r2, [r3, #24]
      break;
 800821a:	e0a5      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68b9      	ldr	r1, [r7, #8]
 8008222:	4618      	mov	r0, r3
 8008224:	f000 faec 	bl	8008800 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	699a      	ldr	r2, [r3, #24]
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008236:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	699a      	ldr	r2, [r3, #24]
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008246:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	6999      	ldr	r1, [r3, #24]
 800824e:	68bb      	ldr	r3, [r7, #8]
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	021a      	lsls	r2, r3, #8
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	430a      	orrs	r2, r1
 800825a:	619a      	str	r2, [r3, #24]
      break;
 800825c:	e084      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68b9      	ldr	r1, [r7, #8]
 8008264:	4618      	mov	r0, r3
 8008266:	f000 fb55 	bl	8008914 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f042 0208 	orr.w	r2, r2, #8
 8008278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69da      	ldr	r2, [r3, #28]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f022 0204 	bic.w	r2, r2, #4
 8008288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	69d9      	ldr	r1, [r3, #28]
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	691a      	ldr	r2, [r3, #16]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	430a      	orrs	r2, r1
 800829a:	61da      	str	r2, [r3, #28]
      break;
 800829c:	e064      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68b9      	ldr	r1, [r7, #8]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f000 fbbd 	bl	8008a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	69da      	ldr	r2, [r3, #28]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	69da      	ldr	r2, [r3, #28]
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69d9      	ldr	r1, [r3, #28]
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	691b      	ldr	r3, [r3, #16]
 80082d4:	021a      	lsls	r2, r3, #8
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	430a      	orrs	r2, r1
 80082dc:	61da      	str	r2, [r3, #28]
      break;
 80082de:	e043      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68b9      	ldr	r1, [r7, #8]
 80082e6:	4618      	mov	r0, r3
 80082e8:	f000 fc26 	bl	8008b38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f042 0208 	orr.w	r2, r2, #8
 80082fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0204 	bic.w	r2, r2, #4
 800830a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	691a      	ldr	r2, [r3, #16]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800831e:	e023      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68b9      	ldr	r1, [r7, #8]
 8008326:	4618      	mov	r0, r3
 8008328:	f000 fc6a 	bl	8008c00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800833a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800834a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	691b      	ldr	r3, [r3, #16]
 8008356:	021a      	lsls	r2, r3, #8
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	430a      	orrs	r2, r1
 800835e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008360:	e002      	b.n	8008368 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	75fb      	strb	r3, [r7, #23]
      break;
 8008366:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2200      	movs	r2, #0
 800836c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008370:	7dfb      	ldrb	r3, [r7, #23]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3718      	adds	r7, #24
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop

0800837c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b084      	sub	sp, #16
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
 8008384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008390:	2b01      	cmp	r3, #1
 8008392:	d101      	bne.n	8008398 <HAL_TIM_ConfigClockSource+0x1c>
 8008394:	2302      	movs	r3, #2
 8008396:	e0de      	b.n	8008556 <HAL_TIM_ConfigClockSource+0x1da>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2201      	movs	r2, #1
 800839c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2202      	movs	r2, #2
 80083a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	689b      	ldr	r3, [r3, #8]
 80083ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80083b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80083ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80083c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a63      	ldr	r2, [pc, #396]	; (8008560 <HAL_TIM_ConfigClockSource+0x1e4>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	f000 80a9 	beq.w	800852a <HAL_TIM_ConfigClockSource+0x1ae>
 80083d8:	4a61      	ldr	r2, [pc, #388]	; (8008560 <HAL_TIM_ConfigClockSource+0x1e4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	f200 80ae 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 80083e0:	4a60      	ldr	r2, [pc, #384]	; (8008564 <HAL_TIM_ConfigClockSource+0x1e8>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	f000 80a1 	beq.w	800852a <HAL_TIM_ConfigClockSource+0x1ae>
 80083e8:	4a5e      	ldr	r2, [pc, #376]	; (8008564 <HAL_TIM_ConfigClockSource+0x1e8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	f200 80a6 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 80083f0:	4a5d      	ldr	r2, [pc, #372]	; (8008568 <HAL_TIM_ConfigClockSource+0x1ec>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	f000 8099 	beq.w	800852a <HAL_TIM_ConfigClockSource+0x1ae>
 80083f8:	4a5b      	ldr	r2, [pc, #364]	; (8008568 <HAL_TIM_ConfigClockSource+0x1ec>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	f200 809e 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 8008400:	4a5a      	ldr	r2, [pc, #360]	; (800856c <HAL_TIM_ConfigClockSource+0x1f0>)
 8008402:	4293      	cmp	r3, r2
 8008404:	f000 8091 	beq.w	800852a <HAL_TIM_ConfigClockSource+0x1ae>
 8008408:	4a58      	ldr	r2, [pc, #352]	; (800856c <HAL_TIM_ConfigClockSource+0x1f0>)
 800840a:	4293      	cmp	r3, r2
 800840c:	f200 8096 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 8008410:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008414:	f000 8089 	beq.w	800852a <HAL_TIM_ConfigClockSource+0x1ae>
 8008418:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800841c:	f200 808e 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 8008420:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008424:	d03e      	beq.n	80084a4 <HAL_TIM_ConfigClockSource+0x128>
 8008426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800842a:	f200 8087 	bhi.w	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 800842e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008432:	f000 8086 	beq.w	8008542 <HAL_TIM_ConfigClockSource+0x1c6>
 8008436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800843a:	d87f      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 800843c:	2b70      	cmp	r3, #112	; 0x70
 800843e:	d01a      	beq.n	8008476 <HAL_TIM_ConfigClockSource+0xfa>
 8008440:	2b70      	cmp	r3, #112	; 0x70
 8008442:	d87b      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 8008444:	2b60      	cmp	r3, #96	; 0x60
 8008446:	d050      	beq.n	80084ea <HAL_TIM_ConfigClockSource+0x16e>
 8008448:	2b60      	cmp	r3, #96	; 0x60
 800844a:	d877      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 800844c:	2b50      	cmp	r3, #80	; 0x50
 800844e:	d03c      	beq.n	80084ca <HAL_TIM_ConfigClockSource+0x14e>
 8008450:	2b50      	cmp	r3, #80	; 0x50
 8008452:	d873      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 8008454:	2b40      	cmp	r3, #64	; 0x40
 8008456:	d058      	beq.n	800850a <HAL_TIM_ConfigClockSource+0x18e>
 8008458:	2b40      	cmp	r3, #64	; 0x40
 800845a:	d86f      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 800845c:	2b30      	cmp	r3, #48	; 0x30
 800845e:	d064      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x1ae>
 8008460:	2b30      	cmp	r3, #48	; 0x30
 8008462:	d86b      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 8008464:	2b20      	cmp	r3, #32
 8008466:	d060      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x1ae>
 8008468:	2b20      	cmp	r3, #32
 800846a:	d867      	bhi.n	800853c <HAL_TIM_ConfigClockSource+0x1c0>
 800846c:	2b00      	cmp	r3, #0
 800846e:	d05c      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x1ae>
 8008470:	2b10      	cmp	r3, #16
 8008472:	d05a      	beq.n	800852a <HAL_TIM_ConfigClockSource+0x1ae>
 8008474:	e062      	b.n	800853c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6818      	ldr	r0, [r3, #0]
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	6899      	ldr	r1, [r3, #8]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	685a      	ldr	r2, [r3, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	f000 fc9d 	bl	8008dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68ba      	ldr	r2, [r7, #8]
 80084a0:	609a      	str	r2, [r3, #8]
      break;
 80084a2:	e04f      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6818      	ldr	r0, [r3, #0]
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	6899      	ldr	r1, [r3, #8]
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	685a      	ldr	r2, [r3, #4]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f000 fc86 	bl	8008dc4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80084c6:	609a      	str	r2, [r3, #8]
      break;
 80084c8:	e03c      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6818      	ldr	r0, [r3, #0]
 80084ce:	683b      	ldr	r3, [r7, #0]
 80084d0:	6859      	ldr	r1, [r3, #4]
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	68db      	ldr	r3, [r3, #12]
 80084d6:	461a      	mov	r2, r3
 80084d8:	f000 fbf8 	bl	8008ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2150      	movs	r1, #80	; 0x50
 80084e2:	4618      	mov	r0, r3
 80084e4:	f000 fc51 	bl	8008d8a <TIM_ITRx_SetConfig>
      break;
 80084e8:	e02c      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6818      	ldr	r0, [r3, #0]
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	6859      	ldr	r1, [r3, #4]
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	68db      	ldr	r3, [r3, #12]
 80084f6:	461a      	mov	r2, r3
 80084f8:	f000 fc17 	bl	8008d2a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2160      	movs	r1, #96	; 0x60
 8008502:	4618      	mov	r0, r3
 8008504:	f000 fc41 	bl	8008d8a <TIM_ITRx_SetConfig>
      break;
 8008508:	e01c      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6818      	ldr	r0, [r3, #0]
 800850e:	683b      	ldr	r3, [r7, #0]
 8008510:	6859      	ldr	r1, [r3, #4]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	68db      	ldr	r3, [r3, #12]
 8008516:	461a      	mov	r2, r3
 8008518:	f000 fbd8 	bl	8008ccc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2140      	movs	r1, #64	; 0x40
 8008522:	4618      	mov	r0, r3
 8008524:	f000 fc31 	bl	8008d8a <TIM_ITRx_SetConfig>
      break;
 8008528:	e00c      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681a      	ldr	r2, [r3, #0]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4619      	mov	r1, r3
 8008534:	4610      	mov	r0, r2
 8008536:	f000 fc28 	bl	8008d8a <TIM_ITRx_SetConfig>
      break;
 800853a:	e003      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]
      break;
 8008540:	e000      	b.n	8008544 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8008542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}
 800855e:	bf00      	nop
 8008560:	00100070 	.word	0x00100070
 8008564:	00100040 	.word	0x00100040
 8008568:	00100030 	.word	0x00100030
 800856c:	00100020 	.word	0x00100020

08008570 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008570:	b480      	push	{r7}
 8008572:	b083      	sub	sp, #12
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008578:	bf00      	nop
 800857a:	370c      	adds	r7, #12
 800857c:	46bd      	mov	sp, r7
 800857e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008582:	4770      	bx	lr

08008584 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b085      	sub	sp, #20
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	4a3c      	ldr	r2, [pc, #240]	; (80086c4 <TIM_Base_SetConfig+0x104>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d00f      	beq.n	80085f8 <TIM_Base_SetConfig+0x38>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085de:	d00b      	beq.n	80085f8 <TIM_Base_SetConfig+0x38>
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	4a39      	ldr	r2, [pc, #228]	; (80086c8 <TIM_Base_SetConfig+0x108>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d007      	beq.n	80085f8 <TIM_Base_SetConfig+0x38>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	4a38      	ldr	r2, [pc, #224]	; (80086cc <TIM_Base_SetConfig+0x10c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d003      	beq.n	80085f8 <TIM_Base_SetConfig+0x38>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	4a37      	ldr	r2, [pc, #220]	; (80086d0 <TIM_Base_SetConfig+0x110>)
 80085f4:	4293      	cmp	r3, r2
 80085f6:	d108      	bne.n	800860a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	68fa      	ldr	r2, [r7, #12]
 8008606:	4313      	orrs	r3, r2
 8008608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a2d      	ldr	r2, [pc, #180]	; (80086c4 <TIM_Base_SetConfig+0x104>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d01b      	beq.n	800864a <TIM_Base_SetConfig+0x8a>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008618:	d017      	beq.n	800864a <TIM_Base_SetConfig+0x8a>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	4a2a      	ldr	r2, [pc, #168]	; (80086c8 <TIM_Base_SetConfig+0x108>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d013      	beq.n	800864a <TIM_Base_SetConfig+0x8a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	4a29      	ldr	r2, [pc, #164]	; (80086cc <TIM_Base_SetConfig+0x10c>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d00f      	beq.n	800864a <TIM_Base_SetConfig+0x8a>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a28      	ldr	r2, [pc, #160]	; (80086d0 <TIM_Base_SetConfig+0x110>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d00b      	beq.n	800864a <TIM_Base_SetConfig+0x8a>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	4a27      	ldr	r2, [pc, #156]	; (80086d4 <TIM_Base_SetConfig+0x114>)
 8008636:	4293      	cmp	r3, r2
 8008638:	d007      	beq.n	800864a <TIM_Base_SetConfig+0x8a>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4a26      	ldr	r2, [pc, #152]	; (80086d8 <TIM_Base_SetConfig+0x118>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d003      	beq.n	800864a <TIM_Base_SetConfig+0x8a>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4a25      	ldr	r2, [pc, #148]	; (80086dc <TIM_Base_SetConfig+0x11c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d108      	bne.n	800865c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008650:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	68db      	ldr	r3, [r3, #12]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	4313      	orrs	r3, r2
 800865a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	695b      	ldr	r3, [r3, #20]
 8008666:	4313      	orrs	r3, r2
 8008668:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	68fa      	ldr	r2, [r7, #12]
 800866e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	689a      	ldr	r2, [r3, #8]
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	4a10      	ldr	r2, [pc, #64]	; (80086c4 <TIM_Base_SetConfig+0x104>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d00f      	beq.n	80086a8 <TIM_Base_SetConfig+0xe8>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	4a11      	ldr	r2, [pc, #68]	; (80086d0 <TIM_Base_SetConfig+0x110>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d00b      	beq.n	80086a8 <TIM_Base_SetConfig+0xe8>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	4a10      	ldr	r2, [pc, #64]	; (80086d4 <TIM_Base_SetConfig+0x114>)
 8008694:	4293      	cmp	r3, r2
 8008696:	d007      	beq.n	80086a8 <TIM_Base_SetConfig+0xe8>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4a0f      	ldr	r2, [pc, #60]	; (80086d8 <TIM_Base_SetConfig+0x118>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d003      	beq.n	80086a8 <TIM_Base_SetConfig+0xe8>
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	4a0e      	ldr	r2, [pc, #56]	; (80086dc <TIM_Base_SetConfig+0x11c>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d103      	bne.n	80086b0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	691a      	ldr	r2, [r3, #16]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2201      	movs	r2, #1
 80086b4:	615a      	str	r2, [r3, #20]
}
 80086b6:	bf00      	nop
 80086b8:	3714      	adds	r7, #20
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop
 80086c4:	40012c00 	.word	0x40012c00
 80086c8:	40000400 	.word	0x40000400
 80086cc:	40000800 	.word	0x40000800
 80086d0:	40013400 	.word	0x40013400
 80086d4:	40014000 	.word	0x40014000
 80086d8:	40014400 	.word	0x40014400
 80086dc:	40014800 	.word	0x40014800

080086e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	f023 0201 	bic.w	r2, r3, #1
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	6a1b      	ldr	r3, [r3, #32]
 80086fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	699b      	ldr	r3, [r3, #24]
 8008706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800870e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f023 0302 	bic.w	r3, r3, #2
 800872c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	697a      	ldr	r2, [r7, #20]
 8008734:	4313      	orrs	r3, r2
 8008736:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	4a2c      	ldr	r2, [pc, #176]	; (80087ec <TIM_OC1_SetConfig+0x10c>)
 800873c:	4293      	cmp	r3, r2
 800873e:	d00f      	beq.n	8008760 <TIM_OC1_SetConfig+0x80>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a2b      	ldr	r2, [pc, #172]	; (80087f0 <TIM_OC1_SetConfig+0x110>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d00b      	beq.n	8008760 <TIM_OC1_SetConfig+0x80>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a2a      	ldr	r2, [pc, #168]	; (80087f4 <TIM_OC1_SetConfig+0x114>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d007      	beq.n	8008760 <TIM_OC1_SetConfig+0x80>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a29      	ldr	r2, [pc, #164]	; (80087f8 <TIM_OC1_SetConfig+0x118>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d003      	beq.n	8008760 <TIM_OC1_SetConfig+0x80>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a28      	ldr	r2, [pc, #160]	; (80087fc <TIM_OC1_SetConfig+0x11c>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d10c      	bne.n	800877a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	f023 0308 	bic.w	r3, r3, #8
 8008766:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	697a      	ldr	r2, [r7, #20]
 800876e:	4313      	orrs	r3, r2
 8008770:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	f023 0304 	bic.w	r3, r3, #4
 8008778:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a1b      	ldr	r2, [pc, #108]	; (80087ec <TIM_OC1_SetConfig+0x10c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d00f      	beq.n	80087a2 <TIM_OC1_SetConfig+0xc2>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a1a      	ldr	r2, [pc, #104]	; (80087f0 <TIM_OC1_SetConfig+0x110>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d00b      	beq.n	80087a2 <TIM_OC1_SetConfig+0xc2>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	4a19      	ldr	r2, [pc, #100]	; (80087f4 <TIM_OC1_SetConfig+0x114>)
 800878e:	4293      	cmp	r3, r2
 8008790:	d007      	beq.n	80087a2 <TIM_OC1_SetConfig+0xc2>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	4a18      	ldr	r2, [pc, #96]	; (80087f8 <TIM_OC1_SetConfig+0x118>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d003      	beq.n	80087a2 <TIM_OC1_SetConfig+0xc2>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	4a17      	ldr	r2, [pc, #92]	; (80087fc <TIM_OC1_SetConfig+0x11c>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d111      	bne.n	80087c6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80087b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	695b      	ldr	r3, [r3, #20]
 80087b6:	693a      	ldr	r2, [r7, #16]
 80087b8:	4313      	orrs	r3, r2
 80087ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	699b      	ldr	r3, [r3, #24]
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	68fa      	ldr	r2, [r7, #12]
 80087d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	685a      	ldr	r2, [r3, #4]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	621a      	str	r2, [r3, #32]
}
 80087e0:	bf00      	nop
 80087e2:	371c      	adds	r7, #28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ea:	4770      	bx	lr
 80087ec:	40012c00 	.word	0x40012c00
 80087f0:	40013400 	.word	0x40013400
 80087f4:	40014000 	.word	0x40014000
 80087f8:	40014400 	.word	0x40014400
 80087fc:	40014800 	.word	0x40014800

08008800 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6a1b      	ldr	r3, [r3, #32]
 800880e:	f023 0210 	bic.w	r2, r3, #16
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a1b      	ldr	r3, [r3, #32]
 800881a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	699b      	ldr	r3, [r3, #24]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800882e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800883a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800883c:	683b      	ldr	r3, [r7, #0]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	021b      	lsls	r3, r3, #8
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	4313      	orrs	r3, r2
 8008846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	f023 0320 	bic.w	r3, r3, #32
 800884e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	689b      	ldr	r3, [r3, #8]
 8008854:	011b      	lsls	r3, r3, #4
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	4313      	orrs	r3, r2
 800885a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a28      	ldr	r2, [pc, #160]	; (8008900 <TIM_OC2_SetConfig+0x100>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d003      	beq.n	800886c <TIM_OC2_SetConfig+0x6c>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a27      	ldr	r2, [pc, #156]	; (8008904 <TIM_OC2_SetConfig+0x104>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d10d      	bne.n	8008888 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008872:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	68db      	ldr	r3, [r3, #12]
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4313      	orrs	r3, r2
 800887e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008880:	697b      	ldr	r3, [r7, #20]
 8008882:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008886:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a1d      	ldr	r2, [pc, #116]	; (8008900 <TIM_OC2_SetConfig+0x100>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d00f      	beq.n	80088b0 <TIM_OC2_SetConfig+0xb0>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a1c      	ldr	r2, [pc, #112]	; (8008904 <TIM_OC2_SetConfig+0x104>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d00b      	beq.n	80088b0 <TIM_OC2_SetConfig+0xb0>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a1b      	ldr	r2, [pc, #108]	; (8008908 <TIM_OC2_SetConfig+0x108>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d007      	beq.n	80088b0 <TIM_OC2_SetConfig+0xb0>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a1a      	ldr	r2, [pc, #104]	; (800890c <TIM_OC2_SetConfig+0x10c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d003      	beq.n	80088b0 <TIM_OC2_SetConfig+0xb0>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a19      	ldr	r2, [pc, #100]	; (8008910 <TIM_OC2_SetConfig+0x110>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d113      	bne.n	80088d8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80088b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80088c0:	683b      	ldr	r3, [r7, #0]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	4313      	orrs	r3, r2
 80088ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	699b      	ldr	r3, [r3, #24]
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	693a      	ldr	r2, [r7, #16]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	693a      	ldr	r2, [r7, #16]
 80088dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	697a      	ldr	r2, [r7, #20]
 80088f0:	621a      	str	r2, [r3, #32]
}
 80088f2:	bf00      	nop
 80088f4:	371c      	adds	r7, #28
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	40012c00 	.word	0x40012c00
 8008904:	40013400 	.word	0x40013400
 8008908:	40014000 	.word	0x40014000
 800890c:	40014400 	.word	0x40014400
 8008910:	40014800 	.word	0x40014800

08008914 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6a1b      	ldr	r3, [r3, #32]
 8008922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	685b      	ldr	r3, [r3, #4]
 8008934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	69db      	ldr	r3, [r3, #28]
 800893a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	f023 0303 	bic.w	r3, r3, #3
 800894e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68fa      	ldr	r2, [r7, #12]
 8008956:	4313      	orrs	r3, r2
 8008958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	021b      	lsls	r3, r3, #8
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	4313      	orrs	r3, r2
 800896c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4a27      	ldr	r2, [pc, #156]	; (8008a10 <TIM_OC3_SetConfig+0xfc>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d003      	beq.n	800897e <TIM_OC3_SetConfig+0x6a>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4a26      	ldr	r2, [pc, #152]	; (8008a14 <TIM_OC3_SetConfig+0x100>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d10d      	bne.n	800899a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	021b      	lsls	r3, r3, #8
 800898c:	697a      	ldr	r2, [r7, #20]
 800898e:	4313      	orrs	r3, r2
 8008990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a1c      	ldr	r2, [pc, #112]	; (8008a10 <TIM_OC3_SetConfig+0xfc>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d00f      	beq.n	80089c2 <TIM_OC3_SetConfig+0xae>
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a1b      	ldr	r2, [pc, #108]	; (8008a14 <TIM_OC3_SetConfig+0x100>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d00b      	beq.n	80089c2 <TIM_OC3_SetConfig+0xae>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a1a      	ldr	r2, [pc, #104]	; (8008a18 <TIM_OC3_SetConfig+0x104>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d007      	beq.n	80089c2 <TIM_OC3_SetConfig+0xae>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a19      	ldr	r2, [pc, #100]	; (8008a1c <TIM_OC3_SetConfig+0x108>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d003      	beq.n	80089c2 <TIM_OC3_SetConfig+0xae>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a18      	ldr	r2, [pc, #96]	; (8008a20 <TIM_OC3_SetConfig+0x10c>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d113      	bne.n	80089ea <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80089c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80089d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	695b      	ldr	r3, [r3, #20]
 80089d6:	011b      	lsls	r3, r3, #4
 80089d8:	693a      	ldr	r2, [r7, #16]
 80089da:	4313      	orrs	r3, r2
 80089dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	011b      	lsls	r3, r3, #4
 80089e4:	693a      	ldr	r2, [r7, #16]
 80089e6:	4313      	orrs	r3, r2
 80089e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	693a      	ldr	r2, [r7, #16]
 80089ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	685a      	ldr	r2, [r3, #4]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	697a      	ldr	r2, [r7, #20]
 8008a02:	621a      	str	r2, [r3, #32]
}
 8008a04:	bf00      	nop
 8008a06:	371c      	adds	r7, #28
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	40012c00 	.word	0x40012c00
 8008a14:	40013400 	.word	0x40013400
 8008a18:	40014000 	.word	0x40014000
 8008a1c:	40014400 	.word	0x40014400
 8008a20:	40014800 	.word	0x40014800

08008a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b087      	sub	sp, #28
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6a1b      	ldr	r3, [r3, #32]
 8008a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	69db      	ldr	r3, [r3, #28]
 8008a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	021b      	lsls	r3, r3, #8
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	4313      	orrs	r3, r2
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a6c:	697b      	ldr	r3, [r7, #20]
 8008a6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	031b      	lsls	r3, r3, #12
 8008a7a:	697a      	ldr	r2, [r7, #20]
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	4a28      	ldr	r2, [pc, #160]	; (8008b24 <TIM_OC4_SetConfig+0x100>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d003      	beq.n	8008a90 <TIM_OC4_SetConfig+0x6c>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a27      	ldr	r2, [pc, #156]	; (8008b28 <TIM_OC4_SetConfig+0x104>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d10d      	bne.n	8008aac <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a90:	697b      	ldr	r3, [r7, #20]
 8008a92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	031b      	lsls	r3, r3, #12
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008aaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a1d      	ldr	r2, [pc, #116]	; (8008b24 <TIM_OC4_SetConfig+0x100>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d00f      	beq.n	8008ad4 <TIM_OC4_SetConfig+0xb0>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	4a1c      	ldr	r2, [pc, #112]	; (8008b28 <TIM_OC4_SetConfig+0x104>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d00b      	beq.n	8008ad4 <TIM_OC4_SetConfig+0xb0>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a1b      	ldr	r2, [pc, #108]	; (8008b2c <TIM_OC4_SetConfig+0x108>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d007      	beq.n	8008ad4 <TIM_OC4_SetConfig+0xb0>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a1a      	ldr	r2, [pc, #104]	; (8008b30 <TIM_OC4_SetConfig+0x10c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d003      	beq.n	8008ad4 <TIM_OC4_SetConfig+0xb0>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a19      	ldr	r2, [pc, #100]	; (8008b34 <TIM_OC4_SetConfig+0x110>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d113      	bne.n	8008afc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ada:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008ae2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	695b      	ldr	r3, [r3, #20]
 8008ae8:	019b      	lsls	r3, r3, #6
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	019b      	lsls	r3, r3, #6
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	693a      	ldr	r2, [r7, #16]
 8008b00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	68fa      	ldr	r2, [r7, #12]
 8008b06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685a      	ldr	r2, [r3, #4]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	697a      	ldr	r2, [r7, #20]
 8008b14:	621a      	str	r2, [r3, #32]
}
 8008b16:	bf00      	nop
 8008b18:	371c      	adds	r7, #28
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b20:	4770      	bx	lr
 8008b22:	bf00      	nop
 8008b24:	40012c00 	.word	0x40012c00
 8008b28:	40013400 	.word	0x40013400
 8008b2c:	40014000 	.word	0x40014000
 8008b30:	40014400 	.word	0x40014400
 8008b34:	40014800 	.word	0x40014800

08008b38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6a1b      	ldr	r3, [r3, #32]
 8008b46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	685b      	ldr	r3, [r3, #4]
 8008b58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	041b      	lsls	r3, r3, #16
 8008b84:	693a      	ldr	r2, [r7, #16]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a17      	ldr	r2, [pc, #92]	; (8008bec <TIM_OC5_SetConfig+0xb4>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00f      	beq.n	8008bb2 <TIM_OC5_SetConfig+0x7a>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a16      	ldr	r2, [pc, #88]	; (8008bf0 <TIM_OC5_SetConfig+0xb8>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d00b      	beq.n	8008bb2 <TIM_OC5_SetConfig+0x7a>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a15      	ldr	r2, [pc, #84]	; (8008bf4 <TIM_OC5_SetConfig+0xbc>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d007      	beq.n	8008bb2 <TIM_OC5_SetConfig+0x7a>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a14      	ldr	r2, [pc, #80]	; (8008bf8 <TIM_OC5_SetConfig+0xc0>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d003      	beq.n	8008bb2 <TIM_OC5_SetConfig+0x7a>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	4a13      	ldr	r2, [pc, #76]	; (8008bfc <TIM_OC5_SetConfig+0xc4>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d109      	bne.n	8008bc6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008bb8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	021b      	lsls	r3, r3, #8
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	697a      	ldr	r2, [r7, #20]
 8008bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68fa      	ldr	r2, [r7, #12]
 8008bd0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	693a      	ldr	r2, [r7, #16]
 8008bde:	621a      	str	r2, [r3, #32]
}
 8008be0:	bf00      	nop
 8008be2:	371c      	adds	r7, #28
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	40012c00 	.word	0x40012c00
 8008bf0:	40013400 	.word	0x40013400
 8008bf4:	40014000 	.word	0x40014000
 8008bf8:	40014400 	.word	0x40014400
 8008bfc:	40014800 	.word	0x40014800

08008c00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6a1b      	ldr	r3, [r3, #32]
 8008c0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a1b      	ldr	r3, [r3, #32]
 8008c1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	021b      	lsls	r3, r3, #8
 8008c3a:	68fa      	ldr	r2, [r7, #12]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	051b      	lsls	r3, r3, #20
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a18      	ldr	r2, [pc, #96]	; (8008cb8 <TIM_OC6_SetConfig+0xb8>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d00f      	beq.n	8008c7c <TIM_OC6_SetConfig+0x7c>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a17      	ldr	r2, [pc, #92]	; (8008cbc <TIM_OC6_SetConfig+0xbc>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d00b      	beq.n	8008c7c <TIM_OC6_SetConfig+0x7c>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a16      	ldr	r2, [pc, #88]	; (8008cc0 <TIM_OC6_SetConfig+0xc0>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d007      	beq.n	8008c7c <TIM_OC6_SetConfig+0x7c>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a15      	ldr	r2, [pc, #84]	; (8008cc4 <TIM_OC6_SetConfig+0xc4>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d003      	beq.n	8008c7c <TIM_OC6_SetConfig+0x7c>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a14      	ldr	r2, [pc, #80]	; (8008cc8 <TIM_OC6_SetConfig+0xc8>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d109      	bne.n	8008c90 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c82:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	029b      	lsls	r3, r3, #10
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	4313      	orrs	r3, r2
 8008c8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	697a      	ldr	r2, [r7, #20]
 8008c94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	621a      	str	r2, [r3, #32]
}
 8008caa:	bf00      	nop
 8008cac:	371c      	adds	r7, #28
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop
 8008cb8:	40012c00 	.word	0x40012c00
 8008cbc:	40013400 	.word	0x40013400
 8008cc0:	40014000 	.word	0x40014000
 8008cc4:	40014400 	.word	0x40014400
 8008cc8:	40014800 	.word	0x40014800

08008ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ccc:	b480      	push	{r7}
 8008cce:	b087      	sub	sp, #28
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	60f8      	str	r0, [r7, #12]
 8008cd4:	60b9      	str	r1, [r7, #8]
 8008cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6a1b      	ldr	r3, [r3, #32]
 8008cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	f023 0201 	bic.w	r2, r3, #1
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	699b      	ldr	r3, [r3, #24]
 8008cee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008cf6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	011b      	lsls	r3, r3, #4
 8008cfc:	693a      	ldr	r2, [r7, #16]
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d02:	697b      	ldr	r3, [r7, #20]
 8008d04:	f023 030a 	bic.w	r3, r3, #10
 8008d08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	693a      	ldr	r2, [r7, #16]
 8008d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	697a      	ldr	r2, [r7, #20]
 8008d1c:	621a      	str	r2, [r3, #32]
}
 8008d1e:	bf00      	nop
 8008d20:	371c      	adds	r7, #28
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr

08008d2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b087      	sub	sp, #28
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	60f8      	str	r0, [r7, #12]
 8008d32:	60b9      	str	r1, [r7, #8]
 8008d34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	6a1b      	ldr	r3, [r3, #32]
 8008d3a:	f023 0210 	bic.w	r2, r3, #16
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	699b      	ldr	r3, [r3, #24]
 8008d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6a1b      	ldr	r3, [r3, #32]
 8008d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008d4e:	697b      	ldr	r3, [r7, #20]
 8008d50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	031b      	lsls	r3, r3, #12
 8008d5a:	697a      	ldr	r2, [r7, #20]
 8008d5c:	4313      	orrs	r3, r2
 8008d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	011b      	lsls	r3, r3, #4
 8008d6c:	693a      	ldr	r2, [r7, #16]
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	697a      	ldr	r2, [r7, #20]
 8008d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	693a      	ldr	r2, [r7, #16]
 8008d7c:	621a      	str	r2, [r3, #32]
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b085      	sub	sp, #20
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008da4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008da6:	683a      	ldr	r2, [r7, #0]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	f043 0307 	orr.w	r3, r3, #7
 8008db0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	68fa      	ldr	r2, [r7, #12]
 8008db6:	609a      	str	r2, [r3, #8]
}
 8008db8:	bf00      	nop
 8008dba:	3714      	adds	r7, #20
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b087      	sub	sp, #28
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	60f8      	str	r0, [r7, #12]
 8008dcc:	60b9      	str	r1, [r7, #8]
 8008dce:	607a      	str	r2, [r7, #4]
 8008dd0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008dde:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	021a      	lsls	r2, r3, #8
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	431a      	orrs	r2, r3
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	4313      	orrs	r3, r2
 8008dec:	697a      	ldr	r2, [r7, #20]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	609a      	str	r2, [r3, #8]
}
 8008df8:	bf00      	nop
 8008dfa:	371c      	adds	r7, #28
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f003 031f 	and.w	r3, r3, #31
 8008e16:	2201      	movs	r2, #1
 8008e18:	fa02 f303 	lsl.w	r3, r2, r3
 8008e1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6a1a      	ldr	r2, [r3, #32]
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	43db      	mvns	r3, r3
 8008e26:	401a      	ands	r2, r3
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6a1a      	ldr	r2, [r3, #32]
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	f003 031f 	and.w	r3, r3, #31
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	fa01 f303 	lsl.w	r3, r1, r3
 8008e3c:	431a      	orrs	r2, r3
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	621a      	str	r2, [r3, #32]
}
 8008e42:	bf00      	nop
 8008e44:	371c      	adds	r7, #28
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
	...

08008e50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d101      	bne.n	8008e68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e64:	2302      	movs	r3, #2
 8008e66:	e065      	b.n	8008f34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2201      	movs	r2, #1
 8008e6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2202      	movs	r2, #2
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a2c      	ldr	r2, [pc, #176]	; (8008f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d004      	beq.n	8008e9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	4a2b      	ldr	r2, [pc, #172]	; (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e98:	4293      	cmp	r3, r2
 8008e9a:	d108      	bne.n	8008eae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008ea2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	685b      	ldr	r3, [r3, #4]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008eb8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	68fa      	ldr	r2, [r7, #12]
 8008ec0:	4313      	orrs	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a1b      	ldr	r2, [pc, #108]	; (8008f40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d018      	beq.n	8008f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ede:	d013      	beq.n	8008f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a18      	ldr	r2, [pc, #96]	; (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d00e      	beq.n	8008f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	4a17      	ldr	r2, [pc, #92]	; (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d009      	beq.n	8008f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	4a12      	ldr	r2, [pc, #72]	; (8008f44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d004      	beq.n	8008f08 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a13      	ldr	r2, [pc, #76]	; (8008f50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d10c      	bne.n	8008f22 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f0e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	689b      	ldr	r3, [r3, #8]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	4313      	orrs	r3, r2
 8008f18:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	68ba      	ldr	r2, [r7, #8]
 8008f20:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008f32:	2300      	movs	r3, #0
}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	40012c00 	.word	0x40012c00
 8008f44:	40013400 	.word	0x40013400
 8008f48:	40000400 	.word	0x40000400
 8008f4c:	40000800 	.word	0x40000800
 8008f50:	40014000 	.word	0x40014000

08008f54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f54:	b480      	push	{r7}
 8008f56:	b085      	sub	sp, #20
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
 8008f5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f5e:	2300      	movs	r3, #0
 8008f60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e087      	b.n	8009080 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	68db      	ldr	r3, [r3, #12]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	4313      	orrs	r3, r2
 8008f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	685b      	ldr	r3, [r3, #4]
 8008f9e:	4313      	orrs	r3, r2
 8008fa0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4313      	orrs	r3, r2
 8008fae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	691b      	ldr	r3, [r3, #16]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	695b      	ldr	r3, [r3, #20]
 8008fc8:	4313      	orrs	r3, r2
 8008fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	699b      	ldr	r3, [r3, #24]
 8008fe4:	041b      	lsls	r3, r3, #16
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4a27      	ldr	r2, [pc, #156]	; (800908c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d004      	beq.n	8008ffe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	4a25      	ldr	r2, [pc, #148]	; (8009090 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d106      	bne.n	800900c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	4313      	orrs	r3, r2
 800900a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a1e      	ldr	r2, [pc, #120]	; (800908c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d004      	beq.n	8009020 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a1d      	ldr	r2, [pc, #116]	; (8009090 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d126      	bne.n	800906e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902a:	051b      	lsls	r3, r3, #20
 800902c:	4313      	orrs	r3, r2
 800902e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	4313      	orrs	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009048:	4313      	orrs	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a0e      	ldr	r2, [pc, #56]	; (800908c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d004      	beq.n	8009060 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a0d      	ldr	r2, [pc, #52]	; (8009090 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d106      	bne.n	800906e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800907e:	2300      	movs	r3, #0
}
 8009080:	4618      	mov	r0, r3
 8009082:	3714      	adds	r7, #20
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr
 800908c:	40012c00 	.word	0x40012c00
 8009090:	40013400 	.word	0x40013400

08009094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b083      	sub	sp, #12
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b083      	sub	sp, #12
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d101      	bne.n	8009132 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800912e:	2301      	movs	r3, #1
 8009130:	e042      	b.n	80091b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7fa f8f7 	bl	8003338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2224      	movs	r2, #36	; 0x24
 800914e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681a      	ldr	r2, [r3, #0]
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f022 0201 	bic.w	r2, r2, #1
 8009160:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009162:	6878      	ldr	r0, [r7, #4]
 8009164:	f000 fc02 	bl	800996c <UART_SetConfig>
 8009168:	4603      	mov	r3, r0
 800916a:	2b01      	cmp	r3, #1
 800916c:	d101      	bne.n	8009172 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e022      	b.n	80091b8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009176:	2b00      	cmp	r3, #0
 8009178:	d002      	beq.n	8009180 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 fec2 	bl	8009f04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	685a      	ldr	r2, [r3, #4]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800918e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800919e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	681a      	ldr	r2, [r3, #0]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f042 0201 	orr.w	r2, r2, #1
 80091ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 ff49 	bl	800a048 <UART_CheckIdleState>
 80091b6:	4603      	mov	r3, r0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b091      	sub	sp, #68	; 0x44
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	4613      	mov	r3, r2
 80091cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091d4:	2b20      	cmp	r3, #32
 80091d6:	f040 808c 	bne.w	80092f2 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 80091da:	68bb      	ldr	r3, [r7, #8]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d002      	beq.n	80091e6 <HAL_UART_Transmit_IT+0x26>
 80091e0:	88fb      	ldrh	r3, [r7, #6]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d101      	bne.n	80091ea <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	e084      	b.n	80092f4 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d101      	bne.n	80091f8 <HAL_UART_Transmit_IT+0x38>
 80091f4:	2302      	movs	r3, #2
 80091f6:	e07d      	b.n	80092f4 <HAL_UART_Transmit_IT+0x134>
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2201      	movs	r2, #1
 80091fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	68ba      	ldr	r2, [r7, #8]
 8009204:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	88fa      	ldrh	r2, [r7, #6]
 800920a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	88fa      	ldrh	r2, [r7, #6]
 8009212:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	2200      	movs	r2, #0
 8009220:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2221      	movs	r2, #33	; 0x21
 8009228:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009234:	d12e      	bne.n	8009294 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	689b      	ldr	r3, [r3, #8]
 800923a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800923e:	d107      	bne.n	8009250 <HAL_UART_Transmit_IT+0x90>
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	691b      	ldr	r3, [r3, #16]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d103      	bne.n	8009250 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	4a2d      	ldr	r2, [pc, #180]	; (8009300 <HAL_UART_Transmit_IT+0x140>)
 800924c:	675a      	str	r2, [r3, #116]	; 0x74
 800924e:	e002      	b.n	8009256 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	4a2c      	ldr	r2, [pc, #176]	; (8009304 <HAL_UART_Transmit_IT+0x144>)
 8009254:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	3308      	adds	r3, #8
 8009264:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	e853 3f00 	ldrex	r3, [r3]
 800926c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009274:	63bb      	str	r3, [r7, #56]	; 0x38
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	3308      	adds	r3, #8
 800927c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800927e:	637a      	str	r2, [r7, #52]	; 0x34
 8009280:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009282:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009284:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009286:	e841 2300 	strex	r3, r2, [r1]
 800928a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800928c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800928e:	2b00      	cmp	r3, #0
 8009290:	d1e5      	bne.n	800925e <HAL_UART_Transmit_IT+0x9e>
 8009292:	e02c      	b.n	80092ee <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800929c:	d107      	bne.n	80092ae <HAL_UART_Transmit_IT+0xee>
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	691b      	ldr	r3, [r3, #16]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d103      	bne.n	80092ae <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	4a17      	ldr	r2, [pc, #92]	; (8009308 <HAL_UART_Transmit_IT+0x148>)
 80092aa:	675a      	str	r2, [r3, #116]	; 0x74
 80092ac:	e002      	b.n	80092b4 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	4a16      	ldr	r2, [pc, #88]	; (800930c <HAL_UART_Transmit_IT+0x14c>)
 80092b2:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	613b      	str	r3, [r7, #16]
   return(result);
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	461a      	mov	r2, r3
 80092d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092da:	623b      	str	r3, [r7, #32]
 80092dc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	69f9      	ldr	r1, [r7, #28]
 80092e0:	6a3a      	ldr	r2, [r7, #32]
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80092e8:	69bb      	ldr	r3, [r7, #24]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e6      	bne.n	80092bc <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 80092ee:	2300      	movs	r3, #0
 80092f0:	e000      	b.n	80092f4 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80092f2:	2302      	movs	r3, #2
  }
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3744      	adds	r7, #68	; 0x44
 80092f8:	46bd      	mov	sp, r7
 80092fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fe:	4770      	bx	lr
 8009300:	0800a5c1 	.word	0x0800a5c1
 8009304:	0800a4e1 	.word	0x0800a4e1
 8009308:	0800a41f 	.word	0x0800a41f
 800930c:	0800a367 	.word	0x0800a367

08009310 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b0ba      	sub	sp, #232	; 0xe8
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	69db      	ldr	r3, [r3, #28]
 800931e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009336:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800933a:	f640 030f 	movw	r3, #2063	; 0x80f
 800933e:	4013      	ands	r3, r2
 8009340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009344:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009348:	2b00      	cmp	r3, #0
 800934a:	d11b      	bne.n	8009384 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800934c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009350:	f003 0320 	and.w	r3, r3, #32
 8009354:	2b00      	cmp	r3, #0
 8009356:	d015      	beq.n	8009384 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800935c:	f003 0320 	and.w	r3, r3, #32
 8009360:	2b00      	cmp	r3, #0
 8009362:	d105      	bne.n	8009370 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d009      	beq.n	8009384 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009374:	2b00      	cmp	r3, #0
 8009376:	f000 82d6 	beq.w	8009926 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	4798      	blx	r3
      }
      return;
 8009382:	e2d0      	b.n	8009926 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009384:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009388:	2b00      	cmp	r3, #0
 800938a:	f000 811f 	beq.w	80095cc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800938e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009392:	4b8b      	ldr	r3, [pc, #556]	; (80095c0 <HAL_UART_IRQHandler+0x2b0>)
 8009394:	4013      	ands	r3, r2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d106      	bne.n	80093a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800939a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800939e:	4b89      	ldr	r3, [pc, #548]	; (80095c4 <HAL_UART_IRQHandler+0x2b4>)
 80093a0:	4013      	ands	r3, r2
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 8112 	beq.w	80095cc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80093a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d011      	beq.n	80093d8 <HAL_UART_IRQHandler+0xc8>
 80093b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d00b      	beq.n	80093d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2201      	movs	r2, #1
 80093c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ce:	f043 0201 	orr.w	r2, r3, #1
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093dc:	f003 0302 	and.w	r3, r3, #2
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d011      	beq.n	8009408 <HAL_UART_IRQHandler+0xf8>
 80093e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093e8:	f003 0301 	and.w	r3, r3, #1
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2202      	movs	r2, #2
 80093f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093fe:	f043 0204 	orr.w	r2, r3, #4
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800940c:	f003 0304 	and.w	r3, r3, #4
 8009410:	2b00      	cmp	r3, #0
 8009412:	d011      	beq.n	8009438 <HAL_UART_IRQHandler+0x128>
 8009414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	d00b      	beq.n	8009438 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2204      	movs	r2, #4
 8009426:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800942e:	f043 0202 	orr.w	r2, r3, #2
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800943c:	f003 0308 	and.w	r3, r3, #8
 8009440:	2b00      	cmp	r3, #0
 8009442:	d017      	beq.n	8009474 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b00      	cmp	r3, #0
 800944e:	d105      	bne.n	800945c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009450:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009454:	4b5a      	ldr	r3, [pc, #360]	; (80095c0 <HAL_UART_IRQHandler+0x2b0>)
 8009456:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009458:	2b00      	cmp	r3, #0
 800945a:	d00b      	beq.n	8009474 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2208      	movs	r2, #8
 8009462:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800946a:	f043 0208 	orr.w	r2, r3, #8
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009478:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800947c:	2b00      	cmp	r3, #0
 800947e:	d012      	beq.n	80094a6 <HAL_UART_IRQHandler+0x196>
 8009480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009484:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009488:	2b00      	cmp	r3, #0
 800948a:	d00c      	beq.n	80094a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009494:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800949c:	f043 0220 	orr.w	r2, r3, #32
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 823c 	beq.w	800992a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80094b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094b6:	f003 0320 	and.w	r3, r3, #32
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d013      	beq.n	80094e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80094be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094c2:	f003 0320 	and.w	r3, r3, #32
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d105      	bne.n	80094d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80094ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d007      	beq.n	80094e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d003      	beq.n	80094e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094fa:	2b40      	cmp	r3, #64	; 0x40
 80094fc:	d005      	beq.n	800950a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009502:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009506:	2b00      	cmp	r3, #0
 8009508:	d04f      	beq.n	80095aa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 feaf 	bl	800a26e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800951a:	2b40      	cmp	r3, #64	; 0x40
 800951c:	d141      	bne.n	80095a2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3308      	adds	r3, #8
 8009524:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009528:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800952c:	e853 3f00 	ldrex	r3, [r3]
 8009530:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009534:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009538:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800953c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3308      	adds	r3, #8
 8009546:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800954a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800954e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009556:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800955a:	e841 2300 	strex	r3, r2, [r1]
 800955e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009562:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1d9      	bne.n	800951e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800956e:	2b00      	cmp	r3, #0
 8009570:	d013      	beq.n	800959a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009576:	4a14      	ldr	r2, [pc, #80]	; (80095c8 <HAL_UART_IRQHandler+0x2b8>)
 8009578:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800957e:	4618      	mov	r0, r3
 8009580:	f7fc fc4a 	bl	8005e18 <HAL_DMA_Abort_IT>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d017      	beq.n	80095ba <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800958e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009590:	687a      	ldr	r2, [r7, #4]
 8009592:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009594:	4610      	mov	r0, r2
 8009596:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009598:	e00f      	b.n	80095ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 f9d0 	bl	8009940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a0:	e00b      	b.n	80095ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 f9cc 	bl	8009940 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095a8:	e007      	b.n	80095ba <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 f9c8 	bl	8009940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2200      	movs	r2, #0
 80095b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80095b8:	e1b7      	b.n	800992a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095ba:	bf00      	nop
    return;
 80095bc:	e1b5      	b.n	800992a <HAL_UART_IRQHandler+0x61a>
 80095be:	bf00      	nop
 80095c0:	10000001 	.word	0x10000001
 80095c4:	04000120 	.word	0x04000120
 80095c8:	0800a33b 	.word	0x0800a33b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	f040 814a 	bne.w	800986a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80095d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095da:	f003 0310 	and.w	r3, r3, #16
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 8143 	beq.w	800986a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80095e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095e8:	f003 0310 	and.w	r3, r3, #16
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	f000 813c 	beq.w	800986a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2210      	movs	r2, #16
 80095f8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009604:	2b40      	cmp	r3, #64	; 0x40
 8009606:	f040 80b5 	bne.w	8009774 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685b      	ldr	r3, [r3, #4]
 8009612:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009616:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800961a:	2b00      	cmp	r3, #0
 800961c:	f000 8187 	beq.w	800992e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009626:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800962a:	429a      	cmp	r2, r3
 800962c:	f080 817f 	bcs.w	800992e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009636:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f003 0320 	and.w	r3, r3, #32
 8009646:	2b00      	cmp	r3, #0
 8009648:	f040 8086 	bne.w	8009758 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009654:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009658:	e853 3f00 	ldrex	r3, [r3]
 800965c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009664:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	461a      	mov	r2, r3
 8009672:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009676:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800967a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009682:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009686:	e841 2300 	strex	r3, r2, [r1]
 800968a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800968e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009692:	2b00      	cmp	r3, #0
 8009694:	d1da      	bne.n	800964c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	3308      	adds	r3, #8
 800969c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80096a0:	e853 3f00 	ldrex	r3, [r3]
 80096a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80096a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80096a8:	f023 0301 	bic.w	r3, r3, #1
 80096ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3308      	adds	r3, #8
 80096b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80096ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80096be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80096c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80096c6:	e841 2300 	strex	r3, r2, [r1]
 80096ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80096cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e1      	bne.n	8009696 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	3308      	adds	r3, #8
 80096d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096dc:	e853 3f00 	ldrex	r3, [r3]
 80096e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80096e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80096e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	3308      	adds	r3, #8
 80096f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80096f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096fe:	e841 2300 	strex	r3, r2, [r1]
 8009702:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009704:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1e3      	bne.n	80096d2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	2220      	movs	r2, #32
 800970e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009720:	e853 3f00 	ldrex	r3, [r3]
 8009724:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009728:	f023 0310 	bic.w	r3, r3, #16
 800972c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	461a      	mov	r2, r3
 8009736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800973a:	65bb      	str	r3, [r7, #88]	; 0x58
 800973c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009740:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009742:	e841 2300 	strex	r3, r2, [r1]
 8009746:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e4      	bne.n	8009718 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009752:	4618      	mov	r0, r3
 8009754:	f7fc fb07 	bl	8005d66 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009764:	b29b      	uxth	r3, r3
 8009766:	1ad3      	subs	r3, r2, r3
 8009768:	b29b      	uxth	r3, r3
 800976a:	4619      	mov	r1, r3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f000 f8f1 	bl	8009954 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009772:	e0dc      	b.n	800992e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009780:	b29b      	uxth	r3, r3
 8009782:	1ad3      	subs	r3, r2, r3
 8009784:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800978e:	b29b      	uxth	r3, r3
 8009790:	2b00      	cmp	r3, #0
 8009792:	f000 80ce 	beq.w	8009932 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009796:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 80c9 	beq.w	8009932 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097a8:	e853 3f00 	ldrex	r3, [r3]
 80097ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80097ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80097b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	461a      	mov	r2, r3
 80097be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097c2:	647b      	str	r3, [r7, #68]	; 0x44
 80097c4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80097c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80097ca:	e841 2300 	strex	r3, r2, [r1]
 80097ce:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80097d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d1e4      	bne.n	80097a0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3308      	adds	r3, #8
 80097dc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	e853 3f00 	ldrex	r3, [r3]
 80097e4:	623b      	str	r3, [r7, #32]
   return(result);
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097ec:	f023 0301 	bic.w	r3, r3, #1
 80097f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	3308      	adds	r3, #8
 80097fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80097fe:	633a      	str	r2, [r7, #48]	; 0x30
 8009800:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009804:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009806:	e841 2300 	strex	r3, r2, [r1]
 800980a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e1      	bne.n	80097d6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2220      	movs	r2, #32
 8009816:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2200      	movs	r2, #0
 800981e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2200      	movs	r2, #0
 8009824:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982c:	693b      	ldr	r3, [r7, #16]
 800982e:	e853 3f00 	ldrex	r3, [r3]
 8009832:	60fb      	str	r3, [r7, #12]
   return(result);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	f023 0310 	bic.w	r3, r3, #16
 800983a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	461a      	mov	r2, r3
 8009844:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009848:	61fb      	str	r3, [r7, #28]
 800984a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	69b9      	ldr	r1, [r7, #24]
 800984e:	69fa      	ldr	r2, [r7, #28]
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	617b      	str	r3, [r7, #20]
   return(result);
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e4      	bne.n	8009826 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800985c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009860:	4619      	mov	r1, r3
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f000 f876 	bl	8009954 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009868:	e063      	b.n	8009932 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800986a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800986e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00e      	beq.n	8009894 <HAL_UART_IRQHandler+0x584>
 8009876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800987a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800987e:	2b00      	cmp	r3, #0
 8009880:	d008      	beq.n	8009894 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800988a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f000 ff37 	bl	800a700 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009892:	e051      	b.n	8009938 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800989c:	2b00      	cmp	r3, #0
 800989e:	d014      	beq.n	80098ca <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80098a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d105      	bne.n	80098b8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80098ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d008      	beq.n	80098ca <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d03a      	beq.n	8009936 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	4798      	blx	r3
    }
    return;
 80098c8:	e035      	b.n	8009936 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80098ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d009      	beq.n	80098ea <HAL_UART_IRQHandler+0x5da>
 80098d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d003      	beq.n	80098ea <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fee1 	bl	800a6aa <UART_EndTransmit_IT>
    return;
 80098e8:	e026      	b.n	8009938 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80098ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d009      	beq.n	800990a <HAL_UART_IRQHandler+0x5fa>
 80098f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d003      	beq.n	800990a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 ff10 	bl	800a728 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009908:	e016      	b.n	8009938 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800990a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800990e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009912:	2b00      	cmp	r3, #0
 8009914:	d010      	beq.n	8009938 <HAL_UART_IRQHandler+0x628>
 8009916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800991a:	2b00      	cmp	r3, #0
 800991c:	da0c      	bge.n	8009938 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fef8 	bl	800a714 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009924:	e008      	b.n	8009938 <HAL_UART_IRQHandler+0x628>
      return;
 8009926:	bf00      	nop
 8009928:	e006      	b.n	8009938 <HAL_UART_IRQHandler+0x628>
    return;
 800992a:	bf00      	nop
 800992c:	e004      	b.n	8009938 <HAL_UART_IRQHandler+0x628>
      return;
 800992e:	bf00      	nop
 8009930:	e002      	b.n	8009938 <HAL_UART_IRQHandler+0x628>
      return;
 8009932:	bf00      	nop
 8009934:	e000      	b.n	8009938 <HAL_UART_IRQHandler+0x628>
    return;
 8009936:	bf00      	nop
  }
}
 8009938:	37e8      	adds	r7, #232	; 0xe8
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop

08009940 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009940:	b480      	push	{r7}
 8009942:	b083      	sub	sp, #12
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009948:	bf00      	nop
 800994a:	370c      	adds	r7, #12
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009954:	b480      	push	{r7}
 8009956:	b083      	sub	sp, #12
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
 800995c:	460b      	mov	r3, r1
 800995e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009960:	bf00      	nop
 8009962:	370c      	adds	r7, #12
 8009964:	46bd      	mov	sp, r7
 8009966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996a:	4770      	bx	lr

0800996c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800996c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009970:	b08c      	sub	sp, #48	; 0x30
 8009972:	af00      	add	r7, sp, #0
 8009974:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009976:	2300      	movs	r3, #0
 8009978:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	689a      	ldr	r2, [r3, #8]
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	431a      	orrs	r2, r3
 8009986:	697b      	ldr	r3, [r7, #20]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	431a      	orrs	r2, r3
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	69db      	ldr	r3, [r3, #28]
 8009990:	4313      	orrs	r3, r2
 8009992:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681a      	ldr	r2, [r3, #0]
 800999a:	4bab      	ldr	r3, [pc, #684]	; (8009c48 <UART_SetConfig+0x2dc>)
 800999c:	4013      	ands	r3, r2
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	6812      	ldr	r2, [r2, #0]
 80099a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099a4:	430b      	orrs	r3, r1
 80099a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	68da      	ldr	r2, [r3, #12]
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	430a      	orrs	r2, r1
 80099bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	699b      	ldr	r3, [r3, #24]
 80099c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80099c4:	697b      	ldr	r3, [r7, #20]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4aa0      	ldr	r2, [pc, #640]	; (8009c4c <UART_SetConfig+0x2e0>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d004      	beq.n	80099d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	6a1b      	ldr	r3, [r3, #32]
 80099d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80099d4:	4313      	orrs	r3, r2
 80099d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	689b      	ldr	r3, [r3, #8]
 80099de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80099e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80099e6:	697a      	ldr	r2, [r7, #20]
 80099e8:	6812      	ldr	r2, [r2, #0]
 80099ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099ec:	430b      	orrs	r3, r1
 80099ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099f0:	697b      	ldr	r3, [r7, #20]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f6:	f023 010f 	bic.w	r1, r3, #15
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099fe:	697b      	ldr	r3, [r7, #20]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	430a      	orrs	r2, r1
 8009a04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a91      	ldr	r2, [pc, #580]	; (8009c50 <UART_SetConfig+0x2e4>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d125      	bne.n	8009a5c <UART_SetConfig+0xf0>
 8009a10:	4b90      	ldr	r3, [pc, #576]	; (8009c54 <UART_SetConfig+0x2e8>)
 8009a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a16:	f003 0303 	and.w	r3, r3, #3
 8009a1a:	2b03      	cmp	r3, #3
 8009a1c:	d81a      	bhi.n	8009a54 <UART_SetConfig+0xe8>
 8009a1e:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <UART_SetConfig+0xb8>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009a35 	.word	0x08009a35
 8009a28:	08009a45 	.word	0x08009a45
 8009a2c:	08009a3d 	.word	0x08009a3d
 8009a30:	08009a4d 	.word	0x08009a4d
 8009a34:	2301      	movs	r3, #1
 8009a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a3a:	e0d6      	b.n	8009bea <UART_SetConfig+0x27e>
 8009a3c:	2302      	movs	r3, #2
 8009a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a42:	e0d2      	b.n	8009bea <UART_SetConfig+0x27e>
 8009a44:	2304      	movs	r3, #4
 8009a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a4a:	e0ce      	b.n	8009bea <UART_SetConfig+0x27e>
 8009a4c:	2308      	movs	r3, #8
 8009a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a52:	e0ca      	b.n	8009bea <UART_SetConfig+0x27e>
 8009a54:	2310      	movs	r3, #16
 8009a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a5a:	e0c6      	b.n	8009bea <UART_SetConfig+0x27e>
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a7d      	ldr	r2, [pc, #500]	; (8009c58 <UART_SetConfig+0x2ec>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d138      	bne.n	8009ad8 <UART_SetConfig+0x16c>
 8009a66:	4b7b      	ldr	r3, [pc, #492]	; (8009c54 <UART_SetConfig+0x2e8>)
 8009a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a6c:	f003 030c 	and.w	r3, r3, #12
 8009a70:	2b0c      	cmp	r3, #12
 8009a72:	d82d      	bhi.n	8009ad0 <UART_SetConfig+0x164>
 8009a74:	a201      	add	r2, pc, #4	; (adr r2, 8009a7c <UART_SetConfig+0x110>)
 8009a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a7a:	bf00      	nop
 8009a7c:	08009ab1 	.word	0x08009ab1
 8009a80:	08009ad1 	.word	0x08009ad1
 8009a84:	08009ad1 	.word	0x08009ad1
 8009a88:	08009ad1 	.word	0x08009ad1
 8009a8c:	08009ac1 	.word	0x08009ac1
 8009a90:	08009ad1 	.word	0x08009ad1
 8009a94:	08009ad1 	.word	0x08009ad1
 8009a98:	08009ad1 	.word	0x08009ad1
 8009a9c:	08009ab9 	.word	0x08009ab9
 8009aa0:	08009ad1 	.word	0x08009ad1
 8009aa4:	08009ad1 	.word	0x08009ad1
 8009aa8:	08009ad1 	.word	0x08009ad1
 8009aac:	08009ac9 	.word	0x08009ac9
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ab6:	e098      	b.n	8009bea <UART_SetConfig+0x27e>
 8009ab8:	2302      	movs	r3, #2
 8009aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009abe:	e094      	b.n	8009bea <UART_SetConfig+0x27e>
 8009ac0:	2304      	movs	r3, #4
 8009ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ac6:	e090      	b.n	8009bea <UART_SetConfig+0x27e>
 8009ac8:	2308      	movs	r3, #8
 8009aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ace:	e08c      	b.n	8009bea <UART_SetConfig+0x27e>
 8009ad0:	2310      	movs	r3, #16
 8009ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ad6:	e088      	b.n	8009bea <UART_SetConfig+0x27e>
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	4a5f      	ldr	r2, [pc, #380]	; (8009c5c <UART_SetConfig+0x2f0>)
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d125      	bne.n	8009b2e <UART_SetConfig+0x1c2>
 8009ae2:	4b5c      	ldr	r3, [pc, #368]	; (8009c54 <UART_SetConfig+0x2e8>)
 8009ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ae8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009aec:	2b30      	cmp	r3, #48	; 0x30
 8009aee:	d016      	beq.n	8009b1e <UART_SetConfig+0x1b2>
 8009af0:	2b30      	cmp	r3, #48	; 0x30
 8009af2:	d818      	bhi.n	8009b26 <UART_SetConfig+0x1ba>
 8009af4:	2b20      	cmp	r3, #32
 8009af6:	d00a      	beq.n	8009b0e <UART_SetConfig+0x1a2>
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	d814      	bhi.n	8009b26 <UART_SetConfig+0x1ba>
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <UART_SetConfig+0x19a>
 8009b00:	2b10      	cmp	r3, #16
 8009b02:	d008      	beq.n	8009b16 <UART_SetConfig+0x1aa>
 8009b04:	e00f      	b.n	8009b26 <UART_SetConfig+0x1ba>
 8009b06:	2300      	movs	r3, #0
 8009b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b0c:	e06d      	b.n	8009bea <UART_SetConfig+0x27e>
 8009b0e:	2302      	movs	r3, #2
 8009b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b14:	e069      	b.n	8009bea <UART_SetConfig+0x27e>
 8009b16:	2304      	movs	r3, #4
 8009b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b1c:	e065      	b.n	8009bea <UART_SetConfig+0x27e>
 8009b1e:	2308      	movs	r3, #8
 8009b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b24:	e061      	b.n	8009bea <UART_SetConfig+0x27e>
 8009b26:	2310      	movs	r3, #16
 8009b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b2c:	e05d      	b.n	8009bea <UART_SetConfig+0x27e>
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4a4b      	ldr	r2, [pc, #300]	; (8009c60 <UART_SetConfig+0x2f4>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d125      	bne.n	8009b84 <UART_SetConfig+0x218>
 8009b38:	4b46      	ldr	r3, [pc, #280]	; (8009c54 <UART_SetConfig+0x2e8>)
 8009b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b42:	2bc0      	cmp	r3, #192	; 0xc0
 8009b44:	d016      	beq.n	8009b74 <UART_SetConfig+0x208>
 8009b46:	2bc0      	cmp	r3, #192	; 0xc0
 8009b48:	d818      	bhi.n	8009b7c <UART_SetConfig+0x210>
 8009b4a:	2b80      	cmp	r3, #128	; 0x80
 8009b4c:	d00a      	beq.n	8009b64 <UART_SetConfig+0x1f8>
 8009b4e:	2b80      	cmp	r3, #128	; 0x80
 8009b50:	d814      	bhi.n	8009b7c <UART_SetConfig+0x210>
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d002      	beq.n	8009b5c <UART_SetConfig+0x1f0>
 8009b56:	2b40      	cmp	r3, #64	; 0x40
 8009b58:	d008      	beq.n	8009b6c <UART_SetConfig+0x200>
 8009b5a:	e00f      	b.n	8009b7c <UART_SetConfig+0x210>
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b62:	e042      	b.n	8009bea <UART_SetConfig+0x27e>
 8009b64:	2302      	movs	r3, #2
 8009b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b6a:	e03e      	b.n	8009bea <UART_SetConfig+0x27e>
 8009b6c:	2304      	movs	r3, #4
 8009b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b72:	e03a      	b.n	8009bea <UART_SetConfig+0x27e>
 8009b74:	2308      	movs	r3, #8
 8009b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b7a:	e036      	b.n	8009bea <UART_SetConfig+0x27e>
 8009b7c:	2310      	movs	r3, #16
 8009b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b82:	e032      	b.n	8009bea <UART_SetConfig+0x27e>
 8009b84:	697b      	ldr	r3, [r7, #20]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a30      	ldr	r2, [pc, #192]	; (8009c4c <UART_SetConfig+0x2e0>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d12a      	bne.n	8009be4 <UART_SetConfig+0x278>
 8009b8e:	4b31      	ldr	r3, [pc, #196]	; (8009c54 <UART_SetConfig+0x2e8>)
 8009b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b9c:	d01a      	beq.n	8009bd4 <UART_SetConfig+0x268>
 8009b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ba2:	d81b      	bhi.n	8009bdc <UART_SetConfig+0x270>
 8009ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ba8:	d00c      	beq.n	8009bc4 <UART_SetConfig+0x258>
 8009baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bae:	d815      	bhi.n	8009bdc <UART_SetConfig+0x270>
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d003      	beq.n	8009bbc <UART_SetConfig+0x250>
 8009bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bb8:	d008      	beq.n	8009bcc <UART_SetConfig+0x260>
 8009bba:	e00f      	b.n	8009bdc <UART_SetConfig+0x270>
 8009bbc:	2300      	movs	r3, #0
 8009bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bc2:	e012      	b.n	8009bea <UART_SetConfig+0x27e>
 8009bc4:	2302      	movs	r3, #2
 8009bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bca:	e00e      	b.n	8009bea <UART_SetConfig+0x27e>
 8009bcc:	2304      	movs	r3, #4
 8009bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bd2:	e00a      	b.n	8009bea <UART_SetConfig+0x27e>
 8009bd4:	2308      	movs	r3, #8
 8009bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009bda:	e006      	b.n	8009bea <UART_SetConfig+0x27e>
 8009bdc:	2310      	movs	r3, #16
 8009bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009be2:	e002      	b.n	8009bea <UART_SetConfig+0x27e>
 8009be4:	2310      	movs	r3, #16
 8009be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a17      	ldr	r2, [pc, #92]	; (8009c4c <UART_SetConfig+0x2e0>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	f040 80a8 	bne.w	8009d46 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009bf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009bfa:	2b08      	cmp	r3, #8
 8009bfc:	d834      	bhi.n	8009c68 <UART_SetConfig+0x2fc>
 8009bfe:	a201      	add	r2, pc, #4	; (adr r2, 8009c04 <UART_SetConfig+0x298>)
 8009c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c04:	08009c29 	.word	0x08009c29
 8009c08:	08009c69 	.word	0x08009c69
 8009c0c:	08009c31 	.word	0x08009c31
 8009c10:	08009c69 	.word	0x08009c69
 8009c14:	08009c37 	.word	0x08009c37
 8009c18:	08009c69 	.word	0x08009c69
 8009c1c:	08009c69 	.word	0x08009c69
 8009c20:	08009c69 	.word	0x08009c69
 8009c24:	08009c3f 	.word	0x08009c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c28:	f7fd fafa 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8009c2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c2e:	e021      	b.n	8009c74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c30:	4b0c      	ldr	r3, [pc, #48]	; (8009c64 <UART_SetConfig+0x2f8>)
 8009c32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c34:	e01e      	b.n	8009c74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c36:	f7fd fa85 	bl	8007144 <HAL_RCC_GetSysClockFreq>
 8009c3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009c3c:	e01a      	b.n	8009c74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009c44:	e016      	b.n	8009c74 <UART_SetConfig+0x308>
 8009c46:	bf00      	nop
 8009c48:	cfff69f3 	.word	0xcfff69f3
 8009c4c:	40008000 	.word	0x40008000
 8009c50:	40013800 	.word	0x40013800
 8009c54:	40021000 	.word	0x40021000
 8009c58:	40004400 	.word	0x40004400
 8009c5c:	40004800 	.word	0x40004800
 8009c60:	40004c00 	.word	0x40004c00
 8009c64:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009c68:	2300      	movs	r3, #0
 8009c6a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009c72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	f000 812a 	beq.w	8009ed0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c80:	4a9e      	ldr	r2, [pc, #632]	; (8009efc <UART_SetConfig+0x590>)
 8009c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c86:	461a      	mov	r2, r3
 8009c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c8e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c90:	697b      	ldr	r3, [r7, #20]
 8009c92:	685a      	ldr	r2, [r3, #4]
 8009c94:	4613      	mov	r3, r2
 8009c96:	005b      	lsls	r3, r3, #1
 8009c98:	4413      	add	r3, r2
 8009c9a:	69ba      	ldr	r2, [r7, #24]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d305      	bcc.n	8009cac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009ca0:	697b      	ldr	r3, [r7, #20]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009ca6:	69ba      	ldr	r2, [r7, #24]
 8009ca8:	429a      	cmp	r2, r3
 8009caa:	d903      	bls.n	8009cb4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009cac:	2301      	movs	r3, #1
 8009cae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009cb2:	e10d      	b.n	8009ed0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	60bb      	str	r3, [r7, #8]
 8009cba:	60fa      	str	r2, [r7, #12]
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc0:	4a8e      	ldr	r2, [pc, #568]	; (8009efc <UART_SetConfig+0x590>)
 8009cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009cc6:	b29b      	uxth	r3, r3
 8009cc8:	2200      	movs	r2, #0
 8009cca:	603b      	str	r3, [r7, #0]
 8009ccc:	607a      	str	r2, [r7, #4]
 8009cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009cd6:	f7f6 ffff 	bl	8000cd8 <__aeabi_uldivmod>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4610      	mov	r0, r2
 8009ce0:	4619      	mov	r1, r3
 8009ce2:	f04f 0200 	mov.w	r2, #0
 8009ce6:	f04f 0300 	mov.w	r3, #0
 8009cea:	020b      	lsls	r3, r1, #8
 8009cec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cf0:	0202      	lsls	r2, r0, #8
 8009cf2:	6979      	ldr	r1, [r7, #20]
 8009cf4:	6849      	ldr	r1, [r1, #4]
 8009cf6:	0849      	lsrs	r1, r1, #1
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	4605      	mov	r5, r0
 8009cfe:	eb12 0804 	adds.w	r8, r2, r4
 8009d02:	eb43 0905 	adc.w	r9, r3, r5
 8009d06:	697b      	ldr	r3, [r7, #20]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	469a      	mov	sl, r3
 8009d0e:	4693      	mov	fp, r2
 8009d10:	4652      	mov	r2, sl
 8009d12:	465b      	mov	r3, fp
 8009d14:	4640      	mov	r0, r8
 8009d16:	4649      	mov	r1, r9
 8009d18:	f7f6 ffde 	bl	8000cd8 <__aeabi_uldivmod>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	460b      	mov	r3, r1
 8009d20:	4613      	mov	r3, r2
 8009d22:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009d24:	6a3b      	ldr	r3, [r7, #32]
 8009d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d2a:	d308      	bcc.n	8009d3e <UART_SetConfig+0x3d2>
 8009d2c:	6a3b      	ldr	r3, [r7, #32]
 8009d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d32:	d204      	bcs.n	8009d3e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	6a3a      	ldr	r2, [r7, #32]
 8009d3a:	60da      	str	r2, [r3, #12]
 8009d3c:	e0c8      	b.n	8009ed0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009d44:	e0c4      	b.n	8009ed0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	69db      	ldr	r3, [r3, #28]
 8009d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d4e:	d167      	bne.n	8009e20 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009d50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d54:	2b08      	cmp	r3, #8
 8009d56:	d828      	bhi.n	8009daa <UART_SetConfig+0x43e>
 8009d58:	a201      	add	r2, pc, #4	; (adr r2, 8009d60 <UART_SetConfig+0x3f4>)
 8009d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d5e:	bf00      	nop
 8009d60:	08009d85 	.word	0x08009d85
 8009d64:	08009d8d 	.word	0x08009d8d
 8009d68:	08009d95 	.word	0x08009d95
 8009d6c:	08009dab 	.word	0x08009dab
 8009d70:	08009d9b 	.word	0x08009d9b
 8009d74:	08009dab 	.word	0x08009dab
 8009d78:	08009dab 	.word	0x08009dab
 8009d7c:	08009dab 	.word	0x08009dab
 8009d80:	08009da3 	.word	0x08009da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d84:	f7fd fa4c 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8009d88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d8a:	e014      	b.n	8009db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d8c:	f7fd fa5e 	bl	800724c <HAL_RCC_GetPCLK2Freq>
 8009d90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d92:	e010      	b.n	8009db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d94:	4b5a      	ldr	r3, [pc, #360]	; (8009f00 <UART_SetConfig+0x594>)
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d98:	e00d      	b.n	8009db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d9a:	f7fd f9d3 	bl	8007144 <HAL_RCC_GetSysClockFreq>
 8009d9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009da0:	e009      	b.n	8009db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009da6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009da8:	e005      	b.n	8009db6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009daa:	2300      	movs	r3, #0
 8009dac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009db4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 8089 	beq.w	8009ed0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dc2:	4a4e      	ldr	r2, [pc, #312]	; (8009efc <UART_SetConfig+0x590>)
 8009dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dc8:	461a      	mov	r2, r3
 8009dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dd0:	005a      	lsls	r2, r3, #1
 8009dd2:	697b      	ldr	r3, [r7, #20]
 8009dd4:	685b      	ldr	r3, [r3, #4]
 8009dd6:	085b      	lsrs	r3, r3, #1
 8009dd8:	441a      	add	r2, r3
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8009de2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	2b0f      	cmp	r3, #15
 8009de8:	d916      	bls.n	8009e18 <UART_SetConfig+0x4ac>
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009df0:	d212      	bcs.n	8009e18 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009df2:	6a3b      	ldr	r3, [r7, #32]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	f023 030f 	bic.w	r3, r3, #15
 8009dfa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	085b      	lsrs	r3, r3, #1
 8009e00:	b29b      	uxth	r3, r3
 8009e02:	f003 0307 	and.w	r3, r3, #7
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	8bfb      	ldrh	r3, [r7, #30]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	8bfa      	ldrh	r2, [r7, #30]
 8009e14:	60da      	str	r2, [r3, #12]
 8009e16:	e05b      	b.n	8009ed0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009e1e:	e057      	b.n	8009ed0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009e20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009e24:	2b08      	cmp	r3, #8
 8009e26:	d828      	bhi.n	8009e7a <UART_SetConfig+0x50e>
 8009e28:	a201      	add	r2, pc, #4	; (adr r2, 8009e30 <UART_SetConfig+0x4c4>)
 8009e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e2e:	bf00      	nop
 8009e30:	08009e55 	.word	0x08009e55
 8009e34:	08009e5d 	.word	0x08009e5d
 8009e38:	08009e65 	.word	0x08009e65
 8009e3c:	08009e7b 	.word	0x08009e7b
 8009e40:	08009e6b 	.word	0x08009e6b
 8009e44:	08009e7b 	.word	0x08009e7b
 8009e48:	08009e7b 	.word	0x08009e7b
 8009e4c:	08009e7b 	.word	0x08009e7b
 8009e50:	08009e73 	.word	0x08009e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e54:	f7fd f9e4 	bl	8007220 <HAL_RCC_GetPCLK1Freq>
 8009e58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e5a:	e014      	b.n	8009e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e5c:	f7fd f9f6 	bl	800724c <HAL_RCC_GetPCLK2Freq>
 8009e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e62:	e010      	b.n	8009e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e64:	4b26      	ldr	r3, [pc, #152]	; (8009f00 <UART_SetConfig+0x594>)
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e68:	e00d      	b.n	8009e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e6a:	f7fd f96b 	bl	8007144 <HAL_RCC_GetSysClockFreq>
 8009e6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e70:	e009      	b.n	8009e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e78:	e005      	b.n	8009e86 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009e84:	bf00      	nop
    }

    if (pclk != 0U)
 8009e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d021      	beq.n	8009ed0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e8c:	697b      	ldr	r3, [r7, #20]
 8009e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e90:	4a1a      	ldr	r2, [pc, #104]	; (8009efc <UART_SetConfig+0x590>)
 8009e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e96:	461a      	mov	r2, r3
 8009e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	085b      	lsrs	r3, r3, #1
 8009ea4:	441a      	add	r2, r3
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009eb0:	6a3b      	ldr	r3, [r7, #32]
 8009eb2:	2b0f      	cmp	r3, #15
 8009eb4:	d909      	bls.n	8009eca <UART_SetConfig+0x55e>
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ebc:	d205      	bcs.n	8009eca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ebe:	6a3b      	ldr	r3, [r7, #32]
 8009ec0:	b29a      	uxth	r2, r3
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	60da      	str	r2, [r3, #12]
 8009ec8:	e002      	b.n	8009ed0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009ed8:	697b      	ldr	r3, [r7, #20]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009ee6:	697b      	ldr	r3, [r7, #20]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009eec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	3730      	adds	r7, #48	; 0x30
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009efa:	bf00      	nop
 8009efc:	0800fd30 	.word	0x0800fd30
 8009f00:	00f42400 	.word	0x00f42400

08009f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b083      	sub	sp, #12
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f10:	f003 0301 	and.w	r3, r3, #1
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d00a      	beq.n	8009f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f32:	f003 0302 	and.w	r3, r3, #2
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d00a      	beq.n	8009f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	430a      	orrs	r2, r1
 8009f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f54:	f003 0304 	and.w	r3, r3, #4
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d00a      	beq.n	8009f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	685b      	ldr	r3, [r3, #4]
 8009f62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	430a      	orrs	r2, r1
 8009f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f76:	f003 0308 	and.w	r3, r3, #8
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d00a      	beq.n	8009f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f98:	f003 0310 	and.w	r3, r3, #16
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00a      	beq.n	8009fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	430a      	orrs	r2, r1
 8009fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fba:	f003 0320 	and.w	r3, r3, #32
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00a      	beq.n	8009fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	430a      	orrs	r2, r1
 8009fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d01a      	beq.n	800a01a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	430a      	orrs	r2, r1
 8009ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a002:	d10a      	bne.n	800a01a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	685b      	ldr	r3, [r3, #4]
 800a00a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	430a      	orrs	r2, r1
 800a018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a01e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a022:	2b00      	cmp	r3, #0
 800a024:	d00a      	beq.n	800a03c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	430a      	orrs	r2, r1
 800a03a:	605a      	str	r2, [r3, #4]
  }
}
 800a03c:	bf00      	nop
 800a03e:	370c      	adds	r7, #12
 800a040:	46bd      	mov	sp, r7
 800a042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a046:	4770      	bx	lr

0800a048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b086      	sub	sp, #24
 800a04c:	af02      	add	r7, sp, #8
 800a04e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a058:	f7f9 fb90 	bl	800377c <HAL_GetTick>
 800a05c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f003 0308 	and.w	r3, r3, #8
 800a068:	2b08      	cmp	r3, #8
 800a06a:	d10e      	bne.n	800a08a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a06c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a070:	9300      	str	r3, [sp, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	2200      	movs	r2, #0
 800a076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f000 f82f 	bl	800a0de <UART_WaitOnFlagUntilTimeout>
 800a080:	4603      	mov	r3, r0
 800a082:	2b00      	cmp	r3, #0
 800a084:	d001      	beq.n	800a08a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a086:	2303      	movs	r3, #3
 800a088:	e025      	b.n	800a0d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f003 0304 	and.w	r3, r3, #4
 800a094:	2b04      	cmp	r3, #4
 800a096:	d10e      	bne.n	800a0b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a09c:	9300      	str	r3, [sp, #0]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f000 f819 	bl	800a0de <UART_WaitOnFlagUntilTimeout>
 800a0ac:	4603      	mov	r3, r0
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d001      	beq.n	800a0b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a0b2:	2303      	movs	r3, #3
 800a0b4:	e00f      	b.n	800a0d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2220      	movs	r2, #32
 800a0ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2220      	movs	r2, #32
 800a0c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2200      	movs	r2, #0
 800a0ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a0d4:	2300      	movs	r3, #0
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3710      	adds	r7, #16
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	bd80      	pop	{r7, pc}

0800a0de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0de:	b580      	push	{r7, lr}
 800a0e0:	b09c      	sub	sp, #112	; 0x70
 800a0e2:	af00      	add	r7, sp, #0
 800a0e4:	60f8      	str	r0, [r7, #12]
 800a0e6:	60b9      	str	r1, [r7, #8]
 800a0e8:	603b      	str	r3, [r7, #0]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0ee:	e0a9      	b.n	800a244 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f6:	f000 80a5 	beq.w	800a244 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0fa:	f7f9 fb3f 	bl	800377c <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	683b      	ldr	r3, [r7, #0]
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a106:	429a      	cmp	r2, r3
 800a108:	d302      	bcc.n	800a110 <UART_WaitOnFlagUntilTimeout+0x32>
 800a10a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d140      	bne.n	800a192 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a118:	e853 3f00 	ldrex	r3, [r3]
 800a11c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a11e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a124:	667b      	str	r3, [r7, #100]	; 0x64
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	461a      	mov	r2, r3
 800a12c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a12e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a130:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a132:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a134:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a136:	e841 2300 	strex	r3, r2, [r1]
 800a13a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a13c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d1e6      	bne.n	800a110 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	3308      	adds	r3, #8
 800a148:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a14a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a14c:	e853 3f00 	ldrex	r3, [r3]
 800a150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a154:	f023 0301 	bic.w	r3, r3, #1
 800a158:	663b      	str	r3, [r7, #96]	; 0x60
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	3308      	adds	r3, #8
 800a160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a162:	64ba      	str	r2, [r7, #72]	; 0x48
 800a164:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a166:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a16a:	e841 2300 	strex	r3, r2, [r1]
 800a16e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a172:	2b00      	cmp	r3, #0
 800a174:	d1e5      	bne.n	800a142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	2220      	movs	r2, #32
 800a17a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	2220      	movs	r2, #32
 800a182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2200      	movs	r2, #0
 800a18a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e069      	b.n	800a266 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f003 0304 	and.w	r3, r3, #4
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d051      	beq.n	800a244 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a1ae:	d149      	bne.n	800a244 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a1b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1c2:	e853 3f00 	ldrex	r3, [r3]
 800a1c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a1ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	461a      	mov	r2, r3
 800a1d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a1d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a1da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a1de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a1e0:	e841 2300 	strex	r3, r2, [r1]
 800a1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1e6      	bne.n	800a1ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	3308      	adds	r3, #8
 800a1f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	e853 3f00 	ldrex	r3, [r3]
 800a1fa:	613b      	str	r3, [r7, #16]
   return(result);
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	f023 0301 	bic.w	r3, r3, #1
 800a202:	66bb      	str	r3, [r7, #104]	; 0x68
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	3308      	adds	r3, #8
 800a20a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a20c:	623a      	str	r2, [r7, #32]
 800a20e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a210:	69f9      	ldr	r1, [r7, #28]
 800a212:	6a3a      	ldr	r2, [r7, #32]
 800a214:	e841 2300 	strex	r3, r2, [r1]
 800a218:	61bb      	str	r3, [r7, #24]
   return(result);
 800a21a:	69bb      	ldr	r3, [r7, #24]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1e5      	bne.n	800a1ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2220      	movs	r2, #32
 800a224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2220      	movs	r2, #32
 800a22c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2220      	movs	r2, #32
 800a234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2200      	movs	r2, #0
 800a23c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a240:	2303      	movs	r3, #3
 800a242:	e010      	b.n	800a266 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	69da      	ldr	r2, [r3, #28]
 800a24a:	68bb      	ldr	r3, [r7, #8]
 800a24c:	4013      	ands	r3, r2
 800a24e:	68ba      	ldr	r2, [r7, #8]
 800a250:	429a      	cmp	r2, r3
 800a252:	bf0c      	ite	eq
 800a254:	2301      	moveq	r3, #1
 800a256:	2300      	movne	r3, #0
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	461a      	mov	r2, r3
 800a25c:	79fb      	ldrb	r3, [r7, #7]
 800a25e:	429a      	cmp	r2, r3
 800a260:	f43f af46 	beq.w	800a0f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a264:	2300      	movs	r3, #0
}
 800a266:	4618      	mov	r0, r3
 800a268:	3770      	adds	r7, #112	; 0x70
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}

0800a26e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a26e:	b480      	push	{r7}
 800a270:	b095      	sub	sp, #84	; 0x54
 800a272:	af00      	add	r7, sp, #0
 800a274:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a27c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a27e:	e853 3f00 	ldrex	r3, [r3]
 800a282:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a286:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a28a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	461a      	mov	r2, r3
 800a292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a294:	643b      	str	r3, [r7, #64]	; 0x40
 800a296:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a298:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a29a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a29c:	e841 2300 	strex	r3, r2, [r1]
 800a2a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d1e6      	bne.n	800a276 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	3308      	adds	r3, #8
 800a2ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2b0:	6a3b      	ldr	r3, [r7, #32]
 800a2b2:	e853 3f00 	ldrex	r3, [r3]
 800a2b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a2b8:	69fb      	ldr	r3, [r7, #28]
 800a2ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2be:	f023 0301 	bic.w	r3, r3, #1
 800a2c2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a2ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a2d4:	e841 2300 	strex	r3, r2, [r1]
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d1e3      	bne.n	800a2a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d118      	bne.n	800a31a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	e853 3f00 	ldrex	r3, [r3]
 800a2f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	f023 0310 	bic.w	r3, r3, #16
 800a2fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	461a      	mov	r2, r3
 800a304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a306:	61bb      	str	r3, [r7, #24]
 800a308:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a30a:	6979      	ldr	r1, [r7, #20]
 800a30c:	69ba      	ldr	r2, [r7, #24]
 800a30e:	e841 2300 	strex	r3, r2, [r1]
 800a312:	613b      	str	r3, [r7, #16]
   return(result);
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d1e6      	bne.n	800a2e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2220      	movs	r2, #32
 800a31e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	2200      	movs	r2, #0
 800a326:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2200      	movs	r2, #0
 800a32c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a32e:	bf00      	nop
 800a330:	3754      	adds	r7, #84	; 0x54
 800a332:	46bd      	mov	sp, r7
 800a334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b084      	sub	sp, #16
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a346:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a358:	68f8      	ldr	r0, [r7, #12]
 800a35a:	f7ff faf1 	bl	8009940 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a35e:	bf00      	nop
 800a360:	3710      	adds	r7, #16
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}

0800a366 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a366:	b480      	push	{r7}
 800a368:	b08f      	sub	sp, #60	; 0x3c
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a374:	2b21      	cmp	r3, #33	; 0x21
 800a376:	d14c      	bne.n	800a412 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a37e:	b29b      	uxth	r3, r3
 800a380:	2b00      	cmp	r3, #0
 800a382:	d132      	bne.n	800a3ea <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a38a:	6a3b      	ldr	r3, [r7, #32]
 800a38c:	e853 3f00 	ldrex	r3, [r3]
 800a390:	61fb      	str	r3, [r7, #28]
   return(result);
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a398:	637b      	str	r3, [r7, #52]	; 0x34
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a3a4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3aa:	e841 2300 	strex	r3, r2, [r1]
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d1e6      	bne.n	800a384 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	e853 3f00 	ldrex	r3, [r3]
 800a3c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3ca:	633b      	str	r3, [r7, #48]	; 0x30
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	461a      	mov	r2, r3
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3d4:	61bb      	str	r3, [r7, #24]
 800a3d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3d8:	6979      	ldr	r1, [r7, #20]
 800a3da:	69ba      	ldr	r2, [r7, #24]
 800a3dc:	e841 2300 	strex	r3, r2, [r1]
 800a3e0:	613b      	str	r3, [r7, #16]
   return(result);
 800a3e2:	693b      	ldr	r3, [r7, #16]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1e6      	bne.n	800a3b6 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a3e8:	e013      	b.n	800a412 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ee:	781a      	ldrb	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a406:	b29b      	uxth	r3, r3
 800a408:	3b01      	subs	r3, #1
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a412:	bf00      	nop
 800a414:	373c      	adds	r7, #60	; 0x3c
 800a416:	46bd      	mov	sp, r7
 800a418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41c:	4770      	bx	lr

0800a41e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a41e:	b480      	push	{r7}
 800a420:	b091      	sub	sp, #68	; 0x44
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a42c:	2b21      	cmp	r3, #33	; 0x21
 800a42e:	d151      	bne.n	800a4d4 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a436:	b29b      	uxth	r3, r3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d132      	bne.n	800a4a2 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a444:	e853 3f00 	ldrex	r3, [r3]
 800a448:	623b      	str	r3, [r7, #32]
   return(result);
 800a44a:	6a3b      	ldr	r3, [r7, #32]
 800a44c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a450:	63bb      	str	r3, [r7, #56]	; 0x38
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	461a      	mov	r2, r3
 800a458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a45a:	633b      	str	r3, [r7, #48]	; 0x30
 800a45c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a45e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a462:	e841 2300 	strex	r3, r2, [r1]
 800a466:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d1e6      	bne.n	800a43c <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	e853 3f00 	ldrex	r3, [r3]
 800a47a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a482:	637b      	str	r3, [r7, #52]	; 0x34
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	461a      	mov	r2, r3
 800a48a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a48c:	61fb      	str	r3, [r7, #28]
 800a48e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a490:	69b9      	ldr	r1, [r7, #24]
 800a492:	69fa      	ldr	r2, [r7, #28]
 800a494:	e841 2300 	strex	r3, r2, [r1]
 800a498:	617b      	str	r3, [r7, #20]
   return(result);
 800a49a:	697b      	ldr	r3, [r7, #20]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e6      	bne.n	800a46e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a4a0:	e018      	b.n	800a4d4 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4b6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4bc:	1c9a      	adds	r2, r3, #2
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a4d4:	bf00      	nop
 800a4d6:	3744      	adds	r7, #68	; 0x44
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b091      	sub	sp, #68	; 0x44
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4ee:	2b21      	cmp	r3, #33	; 0x21
 800a4f0:	d160      	bne.n	800a5b4 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a4fa:	e057      	b.n	800a5ac <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a502:	b29b      	uxth	r3, r3
 800a504:	2b00      	cmp	r3, #0
 800a506:	d133      	bne.n	800a570 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	3308      	adds	r3, #8
 800a50e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a512:	e853 3f00 	ldrex	r3, [r3]
 800a516:	623b      	str	r3, [r7, #32]
   return(result);
 800a518:	6a3b      	ldr	r3, [r7, #32]
 800a51a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a51e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	3308      	adds	r3, #8
 800a526:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a528:	633a      	str	r2, [r7, #48]	; 0x30
 800a52a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a52c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a52e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a530:	e841 2300 	strex	r3, r2, [r1]
 800a534:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1e5      	bne.n	800a508 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	e853 3f00 	ldrex	r3, [r3]
 800a548:	60fb      	str	r3, [r7, #12]
   return(result);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a550:	637b      	str	r3, [r7, #52]	; 0x34
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	461a      	mov	r2, r3
 800a558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a55a:	61fb      	str	r3, [r7, #28]
 800a55c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a55e:	69b9      	ldr	r1, [r7, #24]
 800a560:	69fa      	ldr	r2, [r7, #28]
 800a562:	e841 2300 	strex	r3, r2, [r1]
 800a566:	617b      	str	r3, [r7, #20]
   return(result);
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d1e6      	bne.n	800a53c <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a56e:	e021      	b.n	800a5b4 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	69db      	ldr	r3, [r3, #28]
 800a576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d013      	beq.n	800a5a6 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a582:	781a      	ldrb	r2, [r3, #0]
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a58e:	1c5a      	adds	r2, r3, #1
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	3b01      	subs	r3, #1
 800a59e:	b29a      	uxth	r2, r3
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a5a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a5a8:	3b01      	subs	r3, #1
 800a5aa:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a5ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d1a4      	bne.n	800a4fc <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a5b2:	e7ff      	b.n	800a5b4 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a5b4:	bf00      	nop
 800a5b6:	3744      	adds	r7, #68	; 0x44
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr

0800a5c0 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b091      	sub	sp, #68	; 0x44
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a5ce:	2b21      	cmp	r3, #33	; 0x21
 800a5d0:	d165      	bne.n	800a69e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a5d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a5da:	e05c      	b.n	800a696 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a5e2:	b29b      	uxth	r3, r3
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d133      	bne.n	800a650 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3308      	adds	r3, #8
 800a5ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	e853 3f00 	ldrex	r3, [r3]
 800a5f6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5f8:	69fb      	ldr	r3, [r7, #28]
 800a5fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a5fe:	637b      	str	r3, [r7, #52]	; 0x34
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	3308      	adds	r3, #8
 800a606:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a60a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a60c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a60e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a610:	e841 2300 	strex	r3, r2, [r1]
 800a614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d1e5      	bne.n	800a5e8 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	e853 3f00 	ldrex	r3, [r3]
 800a628:	60bb      	str	r3, [r7, #8]
   return(result);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a630:	633b      	str	r3, [r7, #48]	; 0x30
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63a:	61bb      	str	r3, [r7, #24]
 800a63c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63e:	6979      	ldr	r1, [r7, #20]
 800a640:	69ba      	ldr	r2, [r7, #24]
 800a642:	e841 2300 	strex	r3, r2, [r1]
 800a646:	613b      	str	r3, [r7, #16]
   return(result);
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1e6      	bne.n	800a61c <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a64e:	e026      	b.n	800a69e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	69db      	ldr	r3, [r3, #28]
 800a656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d018      	beq.n	800a690 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a662:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a666:	881b      	ldrh	r3, [r3, #0]
 800a668:	461a      	mov	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a672:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a678:	1c9a      	adds	r2, r3, #2
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a684:	b29b      	uxth	r3, r3
 800a686:	3b01      	subs	r3, #1
 800a688:	b29a      	uxth	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a690:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a692:	3b01      	subs	r3, #1
 800a694:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a696:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d19f      	bne.n	800a5dc <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a69c:	e7ff      	b.n	800a69e <UART_TxISR_16BIT_FIFOEN+0xde>
 800a69e:	bf00      	nop
 800a6a0:	3744      	adds	r7, #68	; 0x44
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a8:	4770      	bx	lr

0800a6aa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b088      	sub	sp, #32
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	e853 3f00 	ldrex	r3, [r3]
 800a6be:	60bb      	str	r3, [r7, #8]
   return(result);
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a6c6:	61fb      	str	r3, [r7, #28]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	69fb      	ldr	r3, [r7, #28]
 800a6d0:	61bb      	str	r3, [r7, #24]
 800a6d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6d4:	6979      	ldr	r1, [r7, #20]
 800a6d6:	69ba      	ldr	r2, [r7, #24]
 800a6d8:	e841 2300 	strex	r3, r2, [r1]
 800a6dc:	613b      	str	r3, [r7, #16]
   return(result);
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d1e6      	bne.n	800a6b2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2220      	movs	r2, #32
 800a6e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7f6 fc72 	bl	8000fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6f8:	bf00      	nop
 800a6fa:	3720      	adds	r7, #32
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}

0800a700 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d101      	bne.n	800a752 <HAL_UARTEx_DisableFifoMode+0x16>
 800a74e:	2302      	movs	r3, #2
 800a750:	e027      	b.n	800a7a2 <HAL_UARTEx_DisableFifoMode+0x66>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2201      	movs	r2, #1
 800a756:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2224      	movs	r2, #36	; 0x24
 800a75e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	681a      	ldr	r2, [r3, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f022 0201 	bic.w	r2, r2, #1
 800a778:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a780:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2200      	movs	r2, #0
 800a786:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2220      	movs	r2, #32
 800a794:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7a0:	2300      	movs	r3, #0
}
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	3714      	adds	r7, #20
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b084      	sub	sp, #16
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	6078      	str	r0, [r7, #4]
 800a7b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7be:	2b01      	cmp	r3, #1
 800a7c0:	d101      	bne.n	800a7c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a7c2:	2302      	movs	r3, #2
 800a7c4:	e02d      	b.n	800a822 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2201      	movs	r2, #1
 800a7ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2224      	movs	r2, #36	; 0x24
 800a7d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	681a      	ldr	r2, [r3, #0]
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f022 0201 	bic.w	r2, r2, #1
 800a7ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	683a      	ldr	r2, [r7, #0]
 800a7fe:	430a      	orrs	r2, r1
 800a800:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f000 f850 	bl	800a8a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2220      	movs	r2, #32
 800a814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2200      	movs	r2, #0
 800a81c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a820:	2300      	movs	r3, #0
}
 800a822:	4618      	mov	r0, r3
 800a824:	3710      	adds	r7, #16
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}

0800a82a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a82a:	b580      	push	{r7, lr}
 800a82c:	b084      	sub	sp, #16
 800a82e:	af00      	add	r7, sp, #0
 800a830:	6078      	str	r0, [r7, #4]
 800a832:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a83a:	2b01      	cmp	r3, #1
 800a83c:	d101      	bne.n	800a842 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a83e:	2302      	movs	r3, #2
 800a840:	e02d      	b.n	800a89e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2201      	movs	r2, #1
 800a846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2224      	movs	r2, #36	; 0x24
 800a84e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681a      	ldr	r2, [r3, #0]
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f022 0201 	bic.w	r2, r2, #1
 800a868:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	689b      	ldr	r3, [r3, #8]
 800a870:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	683a      	ldr	r2, [r7, #0]
 800a87a:	430a      	orrs	r2, r1
 800a87c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f812 	bl	800a8a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	68fa      	ldr	r2, [r7, #12]
 800a88a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2220      	movs	r2, #32
 800a890:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
	...

0800a8a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	b085      	sub	sp, #20
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d108      	bne.n	800a8ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a8c8:	e031      	b.n	800a92e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a8ca:	2308      	movs	r3, #8
 800a8cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a8ce:	2308      	movs	r3, #8
 800a8d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	689b      	ldr	r3, [r3, #8]
 800a8d8:	0e5b      	lsrs	r3, r3, #25
 800a8da:	b2db      	uxtb	r3, r3
 800a8dc:	f003 0307 	and.w	r3, r3, #7
 800a8e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	689b      	ldr	r3, [r3, #8]
 800a8e8:	0f5b      	lsrs	r3, r3, #29
 800a8ea:	b2db      	uxtb	r3, r3
 800a8ec:	f003 0307 	and.w	r3, r3, #7
 800a8f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8f2:	7bbb      	ldrb	r3, [r7, #14]
 800a8f4:	7b3a      	ldrb	r2, [r7, #12]
 800a8f6:	4911      	ldr	r1, [pc, #68]	; (800a93c <UARTEx_SetNbDataToProcess+0x94>)
 800a8f8:	5c8a      	ldrb	r2, [r1, r2]
 800a8fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8fe:	7b3a      	ldrb	r2, [r7, #12]
 800a900:	490f      	ldr	r1, [pc, #60]	; (800a940 <UARTEx_SetNbDataToProcess+0x98>)
 800a902:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a904:	fb93 f3f2 	sdiv	r3, r3, r2
 800a908:	b29a      	uxth	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a910:	7bfb      	ldrb	r3, [r7, #15]
 800a912:	7b7a      	ldrb	r2, [r7, #13]
 800a914:	4909      	ldr	r1, [pc, #36]	; (800a93c <UARTEx_SetNbDataToProcess+0x94>)
 800a916:	5c8a      	ldrb	r2, [r1, r2]
 800a918:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a91c:	7b7a      	ldrb	r2, [r7, #13]
 800a91e:	4908      	ldr	r1, [pc, #32]	; (800a940 <UARTEx_SetNbDataToProcess+0x98>)
 800a920:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a922:	fb93 f3f2 	sdiv	r3, r3, r2
 800a926:	b29a      	uxth	r2, r3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a92e:	bf00      	nop
 800a930:	3714      	adds	r7, #20
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr
 800a93a:	bf00      	nop
 800a93c:	0800fd48 	.word	0x0800fd48
 800a940:	0800fd50 	.word	0x0800fd50

0800a944 <SPI4W_Write_Byte>:
		Gpio analog SPI
	I2C_Write_Byte(value, cmd):
		HAL library hardware I2C
********************************************************************************/
uint8_t SPI4W_Write_Byte(uint8_t value)
{
 800a944:	b480      	push	{r7}
 800a946:	b083      	sub	sp, #12
 800a948:	af00      	add	r7, sp, #0
 800a94a:	4603      	mov	r3, r0
 800a94c:	71fb      	strb	r3, [r7, #7]
        SPI_SCK_1;
        Driver_Delay_us(10);
        value = (value << 1);
    }
#else
    __HAL_SPI_ENABLE(&hspi1);
 800a94e:	4b17      	ldr	r3, [pc, #92]	; (800a9ac <SPI4W_Write_Byte+0x68>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	4b15      	ldr	r3, [pc, #84]	; (800a9ac <SPI4W_Write_Byte+0x68>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a95c:	601a      	str	r2, [r3, #0]
    SPI1->CR2 |= (1) << 12;
 800a95e:	4b14      	ldr	r3, [pc, #80]	; (800a9b0 <SPI4W_Write_Byte+0x6c>)
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	4a13      	ldr	r2, [pc, #76]	; (800a9b0 <SPI4W_Write_Byte+0x6c>)
 800a964:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a968:	6053      	str	r3, [r2, #4]

    while((SPI1->SR & (1 << 1)) == 0)
 800a96a:	bf00      	nop
 800a96c:	4b10      	ldr	r3, [pc, #64]	; (800a9b0 <SPI4W_Write_Byte+0x6c>)
 800a96e:	689b      	ldr	r3, [r3, #8]
 800a970:	f003 0302 	and.w	r3, r3, #2
 800a974:	2b00      	cmp	r3, #0
 800a976:	d0f9      	beq.n	800a96c <SPI4W_Write_Byte+0x28>
        ;

    *((__IO uint8_t *)(&SPI1->DR)) = value;
 800a978:	4a0e      	ldr	r2, [pc, #56]	; (800a9b4 <SPI4W_Write_Byte+0x70>)
 800a97a:	79fb      	ldrb	r3, [r7, #7]
 800a97c:	7013      	strb	r3, [r2, #0]

    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 800a97e:	bf00      	nop
 800a980:	4b0b      	ldr	r3, [pc, #44]	; (800a9b0 <SPI4W_Write_Byte+0x6c>)
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d1f9      	bne.n	800a980 <SPI4W_Write_Byte+0x3c>

    while((SPI1->SR & (1 << 0)) == 0) ; // Wait for the receiving area to be empty
 800a98c:	bf00      	nop
 800a98e:	4b08      	ldr	r3, [pc, #32]	; (800a9b0 <SPI4W_Write_Byte+0x6c>)
 800a990:	689b      	ldr	r3, [r3, #8]
 800a992:	f003 0301 	and.w	r3, r3, #1
 800a996:	2b00      	cmp	r3, #0
 800a998:	d0f9      	beq.n	800a98e <SPI4W_Write_Byte+0x4a>

    return *((__IO uint8_t *)(&SPI1->DR));
 800a99a:	4b06      	ldr	r3, [pc, #24]	; (800a9b4 <SPI4W_Write_Byte+0x70>)
 800a99c:	781b      	ldrb	r3, [r3, #0]
 800a99e:	b2db      	uxtb	r3, r3
#endif
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr
 800a9ac:	2000077c 	.word	0x2000077c
 800a9b0:	40013000 	.word	0x40013000
 800a9b4:	4001300c 	.word	0x4001300c

0800a9b8 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b082      	sub	sp, #8
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f7f8 fee7 	bl	8003794 <HAL_Delay>
}
 800a9c6:	bf00      	nop
 800a9c8:	3708      	adds	r7, #8
 800a9ca:	46bd      	mov	sp, r7
 800a9cc:	bd80      	pop	{r7, pc}
	...

0800a9d0 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	b085      	sub	sp, #20
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	60f8      	str	r0, [r7, #12]
 800a9d8:	4608      	mov	r0, r1
 800a9da:	4611      	mov	r1, r2
 800a9dc:	461a      	mov	r2, r3
 800a9de:	4603      	mov	r3, r0
 800a9e0:	817b      	strh	r3, [r7, #10]
 800a9e2:	460b      	mov	r3, r1
 800a9e4:	813b      	strh	r3, [r7, #8]
 800a9e6:	4613      	mov	r3, r2
 800a9e8:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 800a9ea:	4b23      	ldr	r3, [pc, #140]	; (800aa78 <Paint_NewImage+0xa8>)
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800a9f0:	4a21      	ldr	r2, [pc, #132]	; (800aa78 <Paint_NewImage+0xa8>)
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 800a9f6:	4a20      	ldr	r2, [pc, #128]	; (800aa78 <Paint_NewImage+0xa8>)
 800a9f8:	897b      	ldrh	r3, [r7, #10]
 800a9fa:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800a9fc:	4a1e      	ldr	r2, [pc, #120]	; (800aa78 <Paint_NewImage+0xa8>)
 800a9fe:	893b      	ldrh	r3, [r7, #8]
 800aa00:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800aa02:	4a1d      	ldr	r2, [pc, #116]	; (800aa78 <Paint_NewImage+0xa8>)
 800aa04:	8b3b      	ldrh	r3, [r7, #24]
 800aa06:	8193      	strh	r3, [r2, #12]
		Paint.Scale = 2;
 800aa08:	4b1b      	ldr	r3, [pc, #108]	; (800aa78 <Paint_NewImage+0xa8>)
 800aa0a:	2202      	movs	r2, #2
 800aa0c:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800aa0e:	897b      	ldrh	r3, [r7, #10]
 800aa10:	f003 0307 	and.w	r3, r3, #7
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d103      	bne.n	800aa22 <Paint_NewImage+0x52>
 800aa1a:	897b      	ldrh	r3, [r7, #10]
 800aa1c:	08db      	lsrs	r3, r3, #3
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	e004      	b.n	800aa2c <Paint_NewImage+0x5c>
 800aa22:	897b      	ldrh	r3, [r7, #10]
 800aa24:	08db      	lsrs	r3, r3, #3
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	3301      	adds	r3, #1
 800aa2a:	b29b      	uxth	r3, r3
 800aa2c:	4a12      	ldr	r2, [pc, #72]	; (800aa78 <Paint_NewImage+0xa8>)
 800aa2e:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800aa30:	4a11      	ldr	r2, [pc, #68]	; (800aa78 <Paint_NewImage+0xa8>)
 800aa32:	893b      	ldrh	r3, [r7, #8]
 800aa34:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800aa36:	4a10      	ldr	r2, [pc, #64]	; (800aa78 <Paint_NewImage+0xa8>)
 800aa38:	88fb      	ldrh	r3, [r7, #6]
 800aa3a:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800aa3c:	4b0e      	ldr	r3, [pc, #56]	; (800aa78 <Paint_NewImage+0xa8>)
 800aa3e:	2200      	movs	r2, #0
 800aa40:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800aa42:	88fb      	ldrh	r3, [r7, #6]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d002      	beq.n	800aa4e <Paint_NewImage+0x7e>
 800aa48:	88fb      	ldrh	r3, [r7, #6]
 800aa4a:	2bb4      	cmp	r3, #180	; 0xb4
 800aa4c:	d106      	bne.n	800aa5c <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800aa4e:	4a0a      	ldr	r2, [pc, #40]	; (800aa78 <Paint_NewImage+0xa8>)
 800aa50:	897b      	ldrh	r3, [r7, #10]
 800aa52:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800aa54:	4a08      	ldr	r2, [pc, #32]	; (800aa78 <Paint_NewImage+0xa8>)
 800aa56:	893b      	ldrh	r3, [r7, #8]
 800aa58:	80d3      	strh	r3, [r2, #6]
 800aa5a:	e006      	b.n	800aa6a <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 800aa5c:	4a06      	ldr	r2, [pc, #24]	; (800aa78 <Paint_NewImage+0xa8>)
 800aa5e:	893b      	ldrh	r3, [r7, #8]
 800aa60:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800aa62:	4a05      	ldr	r2, [pc, #20]	; (800aa78 <Paint_NewImage+0xa8>)
 800aa64:	897b      	ldrh	r3, [r7, #10]
 800aa66:	80d3      	strh	r3, [r2, #6]
    }
}
 800aa68:	bf00      	nop
 800aa6a:	bf00      	nop
 800aa6c:	3714      	adds	r7, #20
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr
 800aa76:	bf00      	nop
 800aa78:	20000a40 	.word	0x20000a40

0800aa7c <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b083      	sub	sp, #12
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800aa84:	4a04      	ldr	r2, [pc, #16]	; (800aa98 <Paint_SelectImage+0x1c>)
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6013      	str	r3, [r2, #0]
}
 800aa8a:	bf00      	nop
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	20000a40 	.word	0x20000a40

0800aa9c <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	2b02      	cmp	r3, #2
 800aaaa:	d118      	bne.n	800aade <Paint_SetScale+0x42>
        Paint.Scale = scale;
 800aaac:	79fb      	ldrb	r3, [r7, #7]
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	4b33      	ldr	r3, [pc, #204]	; (800ab80 <Paint_SetScale+0xe4>)
 800aab2:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 800aab4:	4b32      	ldr	r3, [pc, #200]	; (800ab80 <Paint_SetScale+0xe4>)
 800aab6:	891b      	ldrh	r3, [r3, #8]
 800aab8:	f003 0307 	and.w	r3, r3, #7
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d104      	bne.n	800aacc <Paint_SetScale+0x30>
 800aac2:	4b2f      	ldr	r3, [pc, #188]	; (800ab80 <Paint_SetScale+0xe4>)
 800aac4:	891b      	ldrh	r3, [r3, #8]
 800aac6:	08db      	lsrs	r3, r3, #3
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	e005      	b.n	800aad8 <Paint_SetScale+0x3c>
 800aacc:	4b2c      	ldr	r3, [pc, #176]	; (800ab80 <Paint_SetScale+0xe4>)
 800aace:	891b      	ldrh	r3, [r3, #8]
 800aad0:	08db      	lsrs	r3, r3, #3
 800aad2:	b29b      	uxth	r3, r3
 800aad4:	3301      	adds	r3, #1
 800aad6:	b29b      	uxth	r3, r3
 800aad8:	4a29      	ldr	r2, [pc, #164]	; (800ab80 <Paint_SetScale+0xe4>)
 800aada:	8253      	strh	r3, [r2, #18]
        Paint.WidthByte = Paint.WidthMemory*2; 
    }else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 16 65\r\n");
    }
}
 800aadc:	e04b      	b.n	800ab76 <Paint_SetScale+0xda>
    }else if(scale == 4){
 800aade:	79fb      	ldrb	r3, [r7, #7]
 800aae0:	2b04      	cmp	r3, #4
 800aae2:	d118      	bne.n	800ab16 <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 800aae4:	79fb      	ldrb	r3, [r7, #7]
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	4b25      	ldr	r3, [pc, #148]	; (800ab80 <Paint_SetScale+0xe4>)
 800aaea:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 800aaec:	4b24      	ldr	r3, [pc, #144]	; (800ab80 <Paint_SetScale+0xe4>)
 800aaee:	891b      	ldrh	r3, [r3, #8]
 800aaf0:	f003 0303 	and.w	r3, r3, #3
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d104      	bne.n	800ab04 <Paint_SetScale+0x68>
 800aafa:	4b21      	ldr	r3, [pc, #132]	; (800ab80 <Paint_SetScale+0xe4>)
 800aafc:	891b      	ldrh	r3, [r3, #8]
 800aafe:	089b      	lsrs	r3, r3, #2
 800ab00:	b29b      	uxth	r3, r3
 800ab02:	e005      	b.n	800ab10 <Paint_SetScale+0x74>
 800ab04:	4b1e      	ldr	r3, [pc, #120]	; (800ab80 <Paint_SetScale+0xe4>)
 800ab06:	891b      	ldrh	r3, [r3, #8]
 800ab08:	089b      	lsrs	r3, r3, #2
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	b29b      	uxth	r3, r3
 800ab10:	4a1b      	ldr	r2, [pc, #108]	; (800ab80 <Paint_SetScale+0xe4>)
 800ab12:	8253      	strh	r3, [r2, #18]
}
 800ab14:	e02f      	b.n	800ab76 <Paint_SetScale+0xda>
    }else if(scale ==16) {
 800ab16:	79fb      	ldrb	r3, [r7, #7]
 800ab18:	2b10      	cmp	r3, #16
 800ab1a:	d118      	bne.n	800ab4e <Paint_SetScale+0xb2>
        Paint.Scale = scale;
 800ab1c:	79fb      	ldrb	r3, [r7, #7]
 800ab1e:	b29a      	uxth	r2, r3
 800ab20:	4b17      	ldr	r3, [pc, #92]	; (800ab80 <Paint_SetScale+0xe4>)
 800ab22:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory%2==0) ? (Paint.WidthMemory/2) : (Paint.WidthMemory/2+1); 
 800ab24:	4b16      	ldr	r3, [pc, #88]	; (800ab80 <Paint_SetScale+0xe4>)
 800ab26:	891b      	ldrh	r3, [r3, #8]
 800ab28:	f003 0301 	and.w	r3, r3, #1
 800ab2c:	b29b      	uxth	r3, r3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d104      	bne.n	800ab3c <Paint_SetScale+0xa0>
 800ab32:	4b13      	ldr	r3, [pc, #76]	; (800ab80 <Paint_SetScale+0xe4>)
 800ab34:	891b      	ldrh	r3, [r3, #8]
 800ab36:	085b      	lsrs	r3, r3, #1
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	e005      	b.n	800ab48 <Paint_SetScale+0xac>
 800ab3c:	4b10      	ldr	r3, [pc, #64]	; (800ab80 <Paint_SetScale+0xe4>)
 800ab3e:	891b      	ldrh	r3, [r3, #8]
 800ab40:	085b      	lsrs	r3, r3, #1
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	3301      	adds	r3, #1
 800ab46:	b29b      	uxth	r3, r3
 800ab48:	4a0d      	ldr	r2, [pc, #52]	; (800ab80 <Paint_SetScale+0xe4>)
 800ab4a:	8253      	strh	r3, [r2, #18]
}
 800ab4c:	e013      	b.n	800ab76 <Paint_SetScale+0xda>
    }else if(scale ==65) {
 800ab4e:	79fb      	ldrb	r3, [r7, #7]
 800ab50:	2b41      	cmp	r3, #65	; 0x41
 800ab52:	d10a      	bne.n	800ab6a <Paint_SetScale+0xce>
        Paint.Scale = scale;
 800ab54:	79fb      	ldrb	r3, [r7, #7]
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	4b09      	ldr	r3, [pc, #36]	; (800ab80 <Paint_SetScale+0xe4>)
 800ab5a:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = Paint.WidthMemory*2; 
 800ab5c:	4b08      	ldr	r3, [pc, #32]	; (800ab80 <Paint_SetScale+0xe4>)
 800ab5e:	891b      	ldrh	r3, [r3, #8]
 800ab60:	005b      	lsls	r3, r3, #1
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	4b06      	ldr	r3, [pc, #24]	; (800ab80 <Paint_SetScale+0xe4>)
 800ab66:	825a      	strh	r2, [r3, #18]
}
 800ab68:	e005      	b.n	800ab76 <Paint_SetScale+0xda>
        Debug("Set Scale Input parameter error\r\n");
 800ab6a:	4806      	ldr	r0, [pc, #24]	; (800ab84 <Paint_SetScale+0xe8>)
 800ab6c:	f001 fe06 	bl	800c77c <puts>
        Debug("Scale Only support: 2 4 16 65\r\n");
 800ab70:	4805      	ldr	r0, [pc, #20]	; (800ab88 <Paint_SetScale+0xec>)
 800ab72:	f001 fe03 	bl	800c77c <puts>
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	20000a40 	.word	0x20000a40
 800ab84:	0800fa00 	.word	0x0800fa00
 800ab88:	0800fa28 	.word	0x0800fa28

0800ab8c <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08a      	sub	sp, #40	; 0x28
 800ab90:	af00      	add	r7, sp, #0
 800ab92:	4603      	mov	r3, r0
 800ab94:	80fb      	strh	r3, [r7, #6]
 800ab96:	460b      	mov	r3, r1
 800ab98:	80bb      	strh	r3, [r7, #4]
 800ab9a:	4613      	mov	r3, r2
 800ab9c:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800ab9e:	4b9e      	ldr	r3, [pc, #632]	; (800ae18 <Paint_SetPixel+0x28c>)
 800aba0:	889b      	ldrh	r3, [r3, #4]
 800aba2:	88fa      	ldrh	r2, [r7, #6]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d804      	bhi.n	800abb2 <Paint_SetPixel+0x26>
 800aba8:	4b9b      	ldr	r3, [pc, #620]	; (800ae18 <Paint_SetPixel+0x28c>)
 800abaa:	88db      	ldrh	r3, [r3, #6]
 800abac:	88ba      	ldrh	r2, [r7, #4]
 800abae:	429a      	cmp	r2, r3
 800abb0:	d903      	bls.n	800abba <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 800abb2:	489a      	ldr	r0, [pc, #616]	; (800ae1c <Paint_SetPixel+0x290>)
 800abb4:	f001 fde2 	bl	800c77c <puts>
        return;
 800abb8:	e154      	b.n	800ae64 <Paint_SetPixel+0x2d8>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800abba:	4b97      	ldr	r3, [pc, #604]	; (800ae18 <Paint_SetPixel+0x28c>)
 800abbc:	89db      	ldrh	r3, [r3, #14]
 800abbe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800abc2:	d02b      	beq.n	800ac1c <Paint_SetPixel+0x90>
 800abc4:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800abc8:	f300 8149 	bgt.w	800ae5e <Paint_SetPixel+0x2d2>
 800abcc:	2bb4      	cmp	r3, #180	; 0xb4
 800abce:	d016      	beq.n	800abfe <Paint_SetPixel+0x72>
 800abd0:	2bb4      	cmp	r3, #180	; 0xb4
 800abd2:	f300 8144 	bgt.w	800ae5e <Paint_SetPixel+0x2d2>
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d002      	beq.n	800abe0 <Paint_SetPixel+0x54>
 800abda:	2b5a      	cmp	r3, #90	; 0x5a
 800abdc:	d005      	beq.n	800abea <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800abde:	e13e      	b.n	800ae5e <Paint_SetPixel+0x2d2>
        X = Xpoint;
 800abe0:	88fb      	ldrh	r3, [r7, #6]
 800abe2:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 800abe4:	88bb      	ldrh	r3, [r7, #4]
 800abe6:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800abe8:	e022      	b.n	800ac30 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 800abea:	4b8b      	ldr	r3, [pc, #556]	; (800ae18 <Paint_SetPixel+0x28c>)
 800abec:	891a      	ldrh	r2, [r3, #8]
 800abee:	88bb      	ldrh	r3, [r7, #4]
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	b29b      	uxth	r3, r3
 800abf4:	3b01      	subs	r3, #1
 800abf6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 800abf8:	88fb      	ldrh	r3, [r7, #6]
 800abfa:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800abfc:	e018      	b.n	800ac30 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 800abfe:	4b86      	ldr	r3, [pc, #536]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ac00:	891a      	ldrh	r2, [r3, #8]
 800ac02:	88fb      	ldrh	r3, [r7, #6]
 800ac04:	1ad3      	subs	r3, r2, r3
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	3b01      	subs	r3, #1
 800ac0a:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 800ac0c:	4b82      	ldr	r3, [pc, #520]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ac0e:	895a      	ldrh	r2, [r3, #10]
 800ac10:	88bb      	ldrh	r3, [r7, #4]
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	b29b      	uxth	r3, r3
 800ac16:	3b01      	subs	r3, #1
 800ac18:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800ac1a:	e009      	b.n	800ac30 <Paint_SetPixel+0xa4>
        X = Ypoint;
 800ac1c:	88bb      	ldrh	r3, [r7, #4]
 800ac1e:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800ac20:	4b7d      	ldr	r3, [pc, #500]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ac22:	895a      	ldrh	r2, [r3, #10]
 800ac24:	88fb      	ldrh	r3, [r7, #6]
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800ac2e:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800ac30:	4b79      	ldr	r3, [pc, #484]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ac32:	8a1b      	ldrh	r3, [r3, #16]
 800ac34:	2b03      	cmp	r3, #3
 800ac36:	f200 8114 	bhi.w	800ae62 <Paint_SetPixel+0x2d6>
 800ac3a:	a201      	add	r2, pc, #4	; (adr r2, 800ac40 <Paint_SetPixel+0xb4>)
 800ac3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac40:	0800ac8f 	.word	0x0800ac8f
 800ac44:	0800ac51 	.word	0x0800ac51
 800ac48:	0800ac61 	.word	0x0800ac61
 800ac4c:	0800ac71 	.word	0x0800ac71
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800ac50:	4b71      	ldr	r3, [pc, #452]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ac52:	891a      	ldrh	r2, [r3, #8]
 800ac54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 800ac5e:	e017      	b.n	800ac90 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800ac60:	4b6d      	ldr	r3, [pc, #436]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ac62:	895a      	ldrh	r2, [r3, #10]
 800ac64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac66:	1ad3      	subs	r3, r2, r3
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800ac6e:	e00f      	b.n	800ac90 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800ac70:	4b69      	ldr	r3, [pc, #420]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ac72:	891a      	ldrh	r2, [r3, #8]
 800ac74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac76:	1ad3      	subs	r3, r2, r3
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	3b01      	subs	r3, #1
 800ac7c:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 800ac7e:	4b66      	ldr	r3, [pc, #408]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ac80:	895a      	ldrh	r2, [r3, #10]
 800ac82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800ac8c:	e000      	b.n	800ac90 <Paint_SetPixel+0x104>
        break;
 800ac8e:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800ac90:	4b61      	ldr	r3, [pc, #388]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ac92:	891b      	ldrh	r3, [r3, #8]
 800ac94:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d804      	bhi.n	800aca4 <Paint_SetPixel+0x118>
 800ac9a:	4b5f      	ldr	r3, [pc, #380]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ac9c:	895b      	ldrh	r3, [r3, #10]
 800ac9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d903      	bls.n	800acac <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 800aca4:	485d      	ldr	r0, [pc, #372]	; (800ae1c <Paint_SetPixel+0x290>)
 800aca6:	f001 fd69 	bl	800c77c <puts>
        return;
 800acaa:	e0db      	b.n	800ae64 <Paint_SetPixel+0x2d8>
    }
    
    if(Paint.Scale == 2){
 800acac:	4b5a      	ldr	r3, [pc, #360]	; (800ae18 <Paint_SetPixel+0x28c>)
 800acae:	8adb      	ldrh	r3, [r3, #22]
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	d139      	bne.n	800ad28 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800acb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acb6:	08db      	lsrs	r3, r3, #3
 800acb8:	b29b      	uxth	r3, r3
 800acba:	4619      	mov	r1, r3
 800acbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acbe:	4a56      	ldr	r2, [pc, #344]	; (800ae18 <Paint_SetPixel+0x28c>)
 800acc0:	8a52      	ldrh	r2, [r2, #18]
 800acc2:	fb02 f303 	mul.w	r3, r2, r3
 800acc6:	440b      	add	r3, r1
 800acc8:	60fb      	str	r3, [r7, #12]
        UBYTE Rdata = Paint.Image[Addr];
 800acca:	4b53      	ldr	r3, [pc, #332]	; (800ae18 <Paint_SetPixel+0x28c>)
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	4413      	add	r3, r2
 800acd2:	781b      	ldrb	r3, [r3, #0]
 800acd4:	72fb      	strb	r3, [r7, #11]
        if(Color == BLACK)
 800acd6:	887b      	ldrh	r3, [r7, #2]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d113      	bne.n	800ad04 <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800acdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acde:	f003 0307 	and.w	r3, r3, #7
 800ace2:	2280      	movs	r2, #128	; 0x80
 800ace4:	fa42 f303 	asr.w	r3, r2, r3
 800ace8:	b25b      	sxtb	r3, r3
 800acea:	43db      	mvns	r3, r3
 800acec:	b25a      	sxtb	r2, r3
 800acee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800acf2:	4013      	ands	r3, r2
 800acf4:	b259      	sxtb	r1, r3
 800acf6:	4b48      	ldr	r3, [pc, #288]	; (800ae18 <Paint_SetPixel+0x28c>)
 800acf8:	681a      	ldr	r2, [r3, #0]
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	4413      	add	r3, r2
 800acfe:	b2ca      	uxtb	r2, r1
 800ad00:	701a      	strb	r2, [r3, #0]
 800ad02:	e0af      	b.n	800ae64 <Paint_SetPixel+0x2d8>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800ad04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad06:	f003 0307 	and.w	r3, r3, #7
 800ad0a:	2280      	movs	r2, #128	; 0x80
 800ad0c:	fa42 f303 	asr.w	r3, r2, r3
 800ad10:	b25a      	sxtb	r2, r3
 800ad12:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ad16:	4313      	orrs	r3, r2
 800ad18:	b259      	sxtb	r1, r3
 800ad1a:	4b3f      	ldr	r3, [pc, #252]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ad1c:	681a      	ldr	r2, [r3, #0]
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	4413      	add	r3, r2
 800ad22:	b2ca      	uxtb	r2, r1
 800ad24:	701a      	strb	r2, [r3, #0]
 800ad26:	e09d      	b.n	800ae64 <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 4){
 800ad28:	4b3b      	ldr	r3, [pc, #236]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ad2a:	8adb      	ldrh	r3, [r3, #22]
 800ad2c:	2b04      	cmp	r3, #4
 800ad2e:	d137      	bne.n	800ada0 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800ad30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad32:	089b      	lsrs	r3, r3, #2
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	4619      	mov	r1, r3
 800ad38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad3a:	4a37      	ldr	r2, [pc, #220]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ad3c:	8a52      	ldrh	r2, [r2, #18]
 800ad3e:	fb02 f303 	mul.w	r3, r2, r3
 800ad42:	440b      	add	r3, r1
 800ad44:	617b      	str	r3, [r7, #20]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800ad46:	887b      	ldrh	r3, [r7, #2]
 800ad48:	f003 0303 	and.w	r3, r3, #3
 800ad4c:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800ad4e:	4b32      	ldr	r3, [pc, #200]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ad50:	681a      	ldr	r2, [r3, #0]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	4413      	add	r3, r2
 800ad56:	781b      	ldrb	r3, [r3, #0]
 800ad58:	74fb      	strb	r3, [r7, #19]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800ad5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad5c:	f003 0303 	and.w	r3, r3, #3
 800ad60:	005b      	lsls	r3, r3, #1
 800ad62:	22c0      	movs	r2, #192	; 0xc0
 800ad64:	fa42 f303 	asr.w	r3, r2, r3
 800ad68:	b25b      	sxtb	r3, r3
 800ad6a:	43db      	mvns	r3, r3
 800ad6c:	b25a      	sxtb	r2, r3
 800ad6e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad72:	4013      	ands	r3, r2
 800ad74:	b25b      	sxtb	r3, r3
 800ad76:	74fb      	strb	r3, [r7, #19]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800ad78:	887b      	ldrh	r3, [r7, #2]
 800ad7a:	019a      	lsls	r2, r3, #6
 800ad7c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad7e:	f003 0303 	and.w	r3, r3, #3
 800ad82:	005b      	lsls	r3, r3, #1
 800ad84:	fa42 f303 	asr.w	r3, r2, r3
 800ad88:	b25a      	sxtb	r2, r3
 800ad8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	b259      	sxtb	r1, r3
 800ad92:	4b21      	ldr	r3, [pc, #132]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	697b      	ldr	r3, [r7, #20]
 800ad98:	4413      	add	r3, r2
 800ad9a:	b2ca      	uxtb	r2, r1
 800ad9c:	701a      	strb	r2, [r3, #0]
 800ad9e:	e061      	b.n	800ae64 <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 16) {
 800ada0:	4b1d      	ldr	r3, [pc, #116]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ada2:	8adb      	ldrh	r3, [r3, #22]
 800ada4:	2b10      	cmp	r3, #16
 800ada6:	d13b      	bne.n	800ae20 <Paint_SetPixel+0x294>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800ada8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800adaa:	085b      	lsrs	r3, r3, #1
 800adac:	b29b      	uxth	r3, r3
 800adae:	4619      	mov	r1, r3
 800adb0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800adb2:	4a19      	ldr	r2, [pc, #100]	; (800ae18 <Paint_SetPixel+0x28c>)
 800adb4:	8a52      	ldrh	r2, [r2, #18]
 800adb6:	fb02 f303 	mul.w	r3, r2, r3
 800adba:	440b      	add	r3, r1
 800adbc:	61fb      	str	r3, [r7, #28]
        UBYTE Rdata = Paint.Image[Addr];
 800adbe:	4b16      	ldr	r3, [pc, #88]	; (800ae18 <Paint_SetPixel+0x28c>)
 800adc0:	681a      	ldr	r2, [r3, #0]
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	4413      	add	r3, r2
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	76fb      	strb	r3, [r7, #27]
        Color = Color % 16;
 800adca:	887b      	ldrh	r3, [r7, #2]
 800adcc:	f003 030f 	and.w	r3, r3, #15
 800add0:	807b      	strh	r3, [r7, #2]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 800add2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800add4:	f003 0301 	and.w	r3, r3, #1
 800add8:	009b      	lsls	r3, r3, #2
 800adda:	22f0      	movs	r2, #240	; 0xf0
 800addc:	fa42 f303 	asr.w	r3, r2, r3
 800ade0:	b25b      	sxtb	r3, r3
 800ade2:	43db      	mvns	r3, r3
 800ade4:	b25a      	sxtb	r2, r3
 800ade6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800adea:	4013      	ands	r3, r2
 800adec:	b25b      	sxtb	r3, r3
 800adee:	76fb      	strb	r3, [r7, #27]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 800adf0:	887b      	ldrh	r3, [r7, #2]
 800adf2:	011a      	lsls	r2, r3, #4
 800adf4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800adf6:	f003 0301 	and.w	r3, r3, #1
 800adfa:	009b      	lsls	r3, r3, #2
 800adfc:	fa42 f303 	asr.w	r3, r2, r3
 800ae00:	b25a      	sxtb	r2, r3
 800ae02:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	b259      	sxtb	r1, r3
 800ae0a:	4b03      	ldr	r3, [pc, #12]	; (800ae18 <Paint_SetPixel+0x28c>)
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	69fb      	ldr	r3, [r7, #28]
 800ae10:	4413      	add	r3, r2
 800ae12:	b2ca      	uxtb	r2, r1
 800ae14:	701a      	strb	r2, [r3, #0]
 800ae16:	e025      	b.n	800ae64 <Paint_SetPixel+0x2d8>
 800ae18:	20000a40 	.word	0x20000a40
 800ae1c:	0800fae8 	.word	0x0800fae8
    }else if(Paint.Scale == 65) {
 800ae20:	4b12      	ldr	r3, [pc, #72]	; (800ae6c <Paint_SetPixel+0x2e0>)
 800ae22:	8adb      	ldrh	r3, [r3, #22]
 800ae24:	2b41      	cmp	r3, #65	; 0x41
 800ae26:	d11d      	bne.n	800ae64 <Paint_SetPixel+0x2d8>
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800ae28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae2a:	005a      	lsls	r2, r3, #1
 800ae2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae2e:	490f      	ldr	r1, [pc, #60]	; (800ae6c <Paint_SetPixel+0x2e0>)
 800ae30:	8a49      	ldrh	r1, [r1, #18]
 800ae32:	fb01 f303 	mul.w	r3, r1, r3
 800ae36:	4413      	add	r3, r2
 800ae38:	623b      	str	r3, [r7, #32]
        Paint.Image[Addr] = 0xff & (Color>>8);
 800ae3a:	887b      	ldrh	r3, [r7, #2]
 800ae3c:	0a1b      	lsrs	r3, r3, #8
 800ae3e:	b299      	uxth	r1, r3
 800ae40:	4b0a      	ldr	r3, [pc, #40]	; (800ae6c <Paint_SetPixel+0x2e0>)
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	6a3b      	ldr	r3, [r7, #32]
 800ae46:	4413      	add	r3, r2
 800ae48:	b2ca      	uxtb	r2, r1
 800ae4a:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr+1] = 0xff & Color;
 800ae4c:	4b07      	ldr	r3, [pc, #28]	; (800ae6c <Paint_SetPixel+0x2e0>)
 800ae4e:	681a      	ldr	r2, [r3, #0]
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	3301      	adds	r3, #1
 800ae54:	4413      	add	r3, r2
 800ae56:	887a      	ldrh	r2, [r7, #2]
 800ae58:	b2d2      	uxtb	r2, r2
 800ae5a:	701a      	strb	r2, [r3, #0]
 800ae5c:	e002      	b.n	800ae64 <Paint_SetPixel+0x2d8>
        return;
 800ae5e:	bf00      	nop
 800ae60:	e000      	b.n	800ae64 <Paint_SetPixel+0x2d8>
        return;
 800ae62:	bf00      	nop
    }
}
 800ae64:	3728      	adds	r7, #40	; 0x28
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	20000a40 	.word	0x20000a40

0800ae70 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800ae70:	b480      	push	{r7}
 800ae72:	b089      	sub	sp, #36	; 0x24
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	4603      	mov	r3, r0
 800ae78:	80fb      	strh	r3, [r7, #6]
    if(Paint.Scale == 2 || Paint.Scale == 4) {
 800ae7a:	4b51      	ldr	r3, [pc, #324]	; (800afc0 <Paint_Clear+0x150>)
 800ae7c:	8adb      	ldrh	r3, [r3, #22]
 800ae7e:	2b02      	cmp	r3, #2
 800ae80:	d003      	beq.n	800ae8a <Paint_Clear+0x1a>
 800ae82:	4b4f      	ldr	r3, [pc, #316]	; (800afc0 <Paint_Clear+0x150>)
 800ae84:	8adb      	ldrh	r3, [r3, #22]
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d125      	bne.n	800aed6 <Paint_Clear+0x66>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	83fb      	strh	r3, [r7, #30]
 800ae8e:	e01c      	b.n	800aeca <Paint_Clear+0x5a>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800ae90:	2300      	movs	r3, #0
 800ae92:	83bb      	strh	r3, [r7, #28]
 800ae94:	e011      	b.n	800aeba <Paint_Clear+0x4a>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800ae96:	8bba      	ldrh	r2, [r7, #28]
 800ae98:	8bfb      	ldrh	r3, [r7, #30]
 800ae9a:	4949      	ldr	r1, [pc, #292]	; (800afc0 <Paint_Clear+0x150>)
 800ae9c:	8a49      	ldrh	r1, [r1, #18]
 800ae9e:	fb01 f303 	mul.w	r3, r1, r3
 800aea2:	4413      	add	r3, r2
 800aea4:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800aea6:	4b46      	ldr	r3, [pc, #280]	; (800afc0 <Paint_Clear+0x150>)
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	4413      	add	r3, r2
 800aeae:	88fa      	ldrh	r2, [r7, #6]
 800aeb0:	b2d2      	uxtb	r2, r2
 800aeb2:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800aeb4:	8bbb      	ldrh	r3, [r7, #28]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	83bb      	strh	r3, [r7, #28]
 800aeba:	4b41      	ldr	r3, [pc, #260]	; (800afc0 <Paint_Clear+0x150>)
 800aebc:	8a5b      	ldrh	r3, [r3, #18]
 800aebe:	8bba      	ldrh	r2, [r7, #28]
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d3e8      	bcc.n	800ae96 <Paint_Clear+0x26>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800aec4:	8bfb      	ldrh	r3, [r7, #30]
 800aec6:	3301      	adds	r3, #1
 800aec8:	83fb      	strh	r3, [r7, #30]
 800aeca:	4b3d      	ldr	r3, [pc, #244]	; (800afc0 <Paint_Clear+0x150>)
 800aecc:	8a9b      	ldrh	r3, [r3, #20]
 800aece:	8bfa      	ldrh	r2, [r7, #30]
 800aed0:	429a      	cmp	r2, r3
 800aed2:	d3dd      	bcc.n	800ae90 <Paint_Clear+0x20>
 800aed4:	e06e      	b.n	800afb4 <Paint_Clear+0x144>
            }
        }
    }else if(Paint.Scale == 16) {
 800aed6:	4b3a      	ldr	r3, [pc, #232]	; (800afc0 <Paint_Clear+0x150>)
 800aed8:	8adb      	ldrh	r3, [r3, #22]
 800aeda:	2b10      	cmp	r3, #16
 800aedc:	d12f      	bne.n	800af3e <Paint_Clear+0xce>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800aede:	2300      	movs	r3, #0
 800aee0:	837b      	strh	r3, [r7, #26]
 800aee2:	e026      	b.n	800af32 <Paint_Clear+0xc2>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800aee4:	2300      	movs	r3, #0
 800aee6:	833b      	strh	r3, [r7, #24]
 800aee8:	e01b      	b.n	800af22 <Paint_Clear+0xb2>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800aeea:	8b3a      	ldrh	r2, [r7, #24]
 800aeec:	8b7b      	ldrh	r3, [r7, #26]
 800aeee:	4934      	ldr	r1, [pc, #208]	; (800afc0 <Paint_Clear+0x150>)
 800aef0:	8a49      	ldrh	r1, [r1, #18]
 800aef2:	fb01 f303 	mul.w	r3, r1, r3
 800aef6:	4413      	add	r3, r2
 800aef8:	60fb      	str	r3, [r7, #12]
                Color = Color & 0x0f;
 800aefa:	88fb      	ldrh	r3, [r7, #6]
 800aefc:	f003 030f 	and.w	r3, r3, #15
 800af00:	80fb      	strh	r3, [r7, #6]
                Paint.Image[Addr] = (Color<<4) | Color;
 800af02:	88fb      	ldrh	r3, [r7, #6]
 800af04:	011b      	lsls	r3, r3, #4
 800af06:	b25a      	sxtb	r2, r3
 800af08:	88fb      	ldrh	r3, [r7, #6]
 800af0a:	b25b      	sxtb	r3, r3
 800af0c:	4313      	orrs	r3, r2
 800af0e:	b259      	sxtb	r1, r3
 800af10:	4b2b      	ldr	r3, [pc, #172]	; (800afc0 <Paint_Clear+0x150>)
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	4413      	add	r3, r2
 800af18:	b2ca      	uxtb	r2, r1
 800af1a:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800af1c:	8b3b      	ldrh	r3, [r7, #24]
 800af1e:	3301      	adds	r3, #1
 800af20:	833b      	strh	r3, [r7, #24]
 800af22:	4b27      	ldr	r3, [pc, #156]	; (800afc0 <Paint_Clear+0x150>)
 800af24:	8a5b      	ldrh	r3, [r3, #18]
 800af26:	8b3a      	ldrh	r2, [r7, #24]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d3de      	bcc.n	800aeea <Paint_Clear+0x7a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800af2c:	8b7b      	ldrh	r3, [r7, #26]
 800af2e:	3301      	adds	r3, #1
 800af30:	837b      	strh	r3, [r7, #26]
 800af32:	4b23      	ldr	r3, [pc, #140]	; (800afc0 <Paint_Clear+0x150>)
 800af34:	8a9b      	ldrh	r3, [r3, #20]
 800af36:	8b7a      	ldrh	r2, [r7, #26]
 800af38:	429a      	cmp	r2, r3
 800af3a:	d3d3      	bcc.n	800aee4 <Paint_Clear+0x74>
                Paint.Image[Addr] = 0x0f & (Color>>8);
                Paint.Image[Addr+1] = 0x0f & Color;
            }
        }
    }
}
 800af3c:	e03a      	b.n	800afb4 <Paint_Clear+0x144>
    }else if(Paint.Scale == 65) {
 800af3e:	4b20      	ldr	r3, [pc, #128]	; (800afc0 <Paint_Clear+0x150>)
 800af40:	8adb      	ldrh	r3, [r3, #22]
 800af42:	2b41      	cmp	r3, #65	; 0x41
 800af44:	d136      	bne.n	800afb4 <Paint_Clear+0x144>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800af46:	2300      	movs	r3, #0
 800af48:	82fb      	strh	r3, [r7, #22]
 800af4a:	e02d      	b.n	800afa8 <Paint_Clear+0x138>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800af4c:	2300      	movs	r3, #0
 800af4e:	82bb      	strh	r3, [r7, #20]
 800af50:	e022      	b.n	800af98 <Paint_Clear+0x128>
                UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800af52:	8abb      	ldrh	r3, [r7, #20]
 800af54:	005a      	lsls	r2, r3, #1
 800af56:	8afb      	ldrh	r3, [r7, #22]
 800af58:	4919      	ldr	r1, [pc, #100]	; (800afc0 <Paint_Clear+0x150>)
 800af5a:	8a49      	ldrh	r1, [r1, #18]
 800af5c:	fb01 f303 	mul.w	r3, r1, r3
 800af60:	4413      	add	r3, r2
 800af62:	613b      	str	r3, [r7, #16]
                Paint.Image[Addr] = 0x0f & (Color>>8);
 800af64:	88fb      	ldrh	r3, [r7, #6]
 800af66:	0a1b      	lsrs	r3, r3, #8
 800af68:	b29b      	uxth	r3, r3
 800af6a:	b2da      	uxtb	r2, r3
 800af6c:	4b14      	ldr	r3, [pc, #80]	; (800afc0 <Paint_Clear+0x150>)
 800af6e:	6819      	ldr	r1, [r3, #0]
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	440b      	add	r3, r1
 800af74:	f002 020f 	and.w	r2, r2, #15
 800af78:	b2d2      	uxtb	r2, r2
 800af7a:	701a      	strb	r2, [r3, #0]
                Paint.Image[Addr+1] = 0x0f & Color;
 800af7c:	88fb      	ldrh	r3, [r7, #6]
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	4b0f      	ldr	r3, [pc, #60]	; (800afc0 <Paint_Clear+0x150>)
 800af82:	6819      	ldr	r1, [r3, #0]
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	3301      	adds	r3, #1
 800af88:	440b      	add	r3, r1
 800af8a:	f002 020f 	and.w	r2, r2, #15
 800af8e:	b2d2      	uxtb	r2, r2
 800af90:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800af92:	8abb      	ldrh	r3, [r7, #20]
 800af94:	3301      	adds	r3, #1
 800af96:	82bb      	strh	r3, [r7, #20]
 800af98:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <Paint_Clear+0x150>)
 800af9a:	8a5b      	ldrh	r3, [r3, #18]
 800af9c:	8aba      	ldrh	r2, [r7, #20]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d3d7      	bcc.n	800af52 <Paint_Clear+0xe2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800afa2:	8afb      	ldrh	r3, [r7, #22]
 800afa4:	3301      	adds	r3, #1
 800afa6:	82fb      	strh	r3, [r7, #22]
 800afa8:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <Paint_Clear+0x150>)
 800afaa:	8a9b      	ldrh	r3, [r3, #20]
 800afac:	8afa      	ldrh	r2, [r7, #22]
 800afae:	429a      	cmp	r2, r3
 800afb0:	d3cc      	bcc.n	800af4c <Paint_Clear+0xdc>
}
 800afb2:	e7ff      	b.n	800afb4 <Paint_Clear+0x144>
 800afb4:	bf00      	nop
 800afb6:	3724      	adds	r7, #36	; 0x24
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	20000a40 	.word	0x20000a40

0800afc4 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 800afc4:	b590      	push	{r4, r7, lr}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	4604      	mov	r4, r0
 800afcc:	4608      	mov	r0, r1
 800afce:	4611      	mov	r1, r2
 800afd0:	461a      	mov	r2, r3
 800afd2:	4623      	mov	r3, r4
 800afd4:	80fb      	strh	r3, [r7, #6]
 800afd6:	4603      	mov	r3, r0
 800afd8:	80bb      	strh	r3, [r7, #4]
 800afda:	460b      	mov	r3, r1
 800afdc:	807b      	strh	r3, [r7, #2]
 800afde:	4613      	mov	r3, r2
 800afe0:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800afe2:	4b4a      	ldr	r3, [pc, #296]	; (800b10c <Paint_DrawPoint+0x148>)
 800afe4:	889b      	ldrh	r3, [r3, #4]
 800afe6:	88fa      	ldrh	r2, [r7, #6]
 800afe8:	429a      	cmp	r2, r3
 800afea:	d804      	bhi.n	800aff6 <Paint_DrawPoint+0x32>
 800afec:	4b47      	ldr	r3, [pc, #284]	; (800b10c <Paint_DrawPoint+0x148>)
 800afee:	88db      	ldrh	r3, [r3, #6]
 800aff0:	88ba      	ldrh	r2, [r7, #4]
 800aff2:	429a      	cmp	r2, r3
 800aff4:	d911      	bls.n	800b01a <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800aff6:	4846      	ldr	r0, [pc, #280]	; (800b110 <Paint_DrawPoint+0x14c>)
 800aff8:	f001 fbc0 	bl	800c77c <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 800affc:	88fb      	ldrh	r3, [r7, #6]
 800affe:	4a43      	ldr	r2, [pc, #268]	; (800b10c <Paint_DrawPoint+0x148>)
 800b000:	8892      	ldrh	r2, [r2, #4]
 800b002:	4619      	mov	r1, r3
 800b004:	4843      	ldr	r0, [pc, #268]	; (800b114 <Paint_DrawPoint+0x150>)
 800b006:	f001 fb33 	bl	800c670 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 800b00a:	88bb      	ldrh	r3, [r7, #4]
 800b00c:	4a3f      	ldr	r2, [pc, #252]	; (800b10c <Paint_DrawPoint+0x148>)
 800b00e:	88d2      	ldrh	r2, [r2, #6]
 800b010:	4619      	mov	r1, r3
 800b012:	4841      	ldr	r0, [pc, #260]	; (800b118 <Paint_DrawPoint+0x154>)
 800b014:	f001 fb2c 	bl	800c670 <iprintf>
        return;
 800b018:	e074      	b.n	800b104 <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 800b01a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d144      	bne.n	800b0ac <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800b022:	2300      	movs	r3, #0
 800b024:	81fb      	strh	r3, [r7, #14]
 800b026:	e039      	b.n	800b09c <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800b028:	2300      	movs	r3, #0
 800b02a:	81bb      	strh	r3, [r7, #12]
 800b02c:	e029      	b.n	800b082 <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800b02e:	88fa      	ldrh	r2, [r7, #6]
 800b030:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b034:	441a      	add	r2, r3
 800b036:	787b      	ldrb	r3, [r7, #1]
 800b038:	1ad3      	subs	r3, r2, r3
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	db28      	blt.n	800b090 <Paint_DrawPoint+0xcc>
 800b03e:	88ba      	ldrh	r2, [r7, #4]
 800b040:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b044:	441a      	add	r2, r3
 800b046:	787b      	ldrb	r3, [r7, #1]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	db20      	blt.n	800b090 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800b04e:	89fa      	ldrh	r2, [r7, #14]
 800b050:	88fb      	ldrh	r3, [r7, #6]
 800b052:	4413      	add	r3, r2
 800b054:	b29a      	uxth	r2, r3
 800b056:	787b      	ldrb	r3, [r7, #1]
 800b058:	b29b      	uxth	r3, r3
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	b298      	uxth	r0, r3
 800b05e:	89ba      	ldrh	r2, [r7, #12]
 800b060:	88bb      	ldrh	r3, [r7, #4]
 800b062:	4413      	add	r3, r2
 800b064:	b29a      	uxth	r2, r3
 800b066:	787b      	ldrb	r3, [r7, #1]
 800b068:	b29b      	uxth	r3, r3
 800b06a:	1ad3      	subs	r3, r2, r3
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	887a      	ldrh	r2, [r7, #2]
 800b070:	4619      	mov	r1, r3
 800b072:	f7ff fd8b 	bl	800ab8c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800b076:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	3301      	adds	r3, #1
 800b07e:	b29b      	uxth	r3, r3
 800b080:	81bb      	strh	r3, [r7, #12]
 800b082:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b086:	787b      	ldrb	r3, [r7, #1]
 800b088:	005b      	lsls	r3, r3, #1
 800b08a:	3b01      	subs	r3, #1
 800b08c:	429a      	cmp	r2, r3
 800b08e:	dbce      	blt.n	800b02e <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800b090:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b094:	b29b      	uxth	r3, r3
 800b096:	3301      	adds	r3, #1
 800b098:	b29b      	uxth	r3, r3
 800b09a:	81fb      	strh	r3, [r7, #14]
 800b09c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b0a0:	787b      	ldrb	r3, [r7, #1]
 800b0a2:	005b      	lsls	r3, r3, #1
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	dbbe      	blt.n	800b028 <Paint_DrawPoint+0x64>
 800b0aa:	e02b      	b.n	800b104 <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	81fb      	strh	r3, [r7, #14]
 800b0b0:	e023      	b.n	800b0fa <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	81bb      	strh	r3, [r7, #12]
 800b0b6:	e015      	b.n	800b0e4 <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800b0b8:	89fa      	ldrh	r2, [r7, #14]
 800b0ba:	88fb      	ldrh	r3, [r7, #6]
 800b0bc:	4413      	add	r3, r2
 800b0be:	b29b      	uxth	r3, r3
 800b0c0:	3b01      	subs	r3, #1
 800b0c2:	b298      	uxth	r0, r3
 800b0c4:	89ba      	ldrh	r2, [r7, #12]
 800b0c6:	88bb      	ldrh	r3, [r7, #4]
 800b0c8:	4413      	add	r3, r2
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	887a      	ldrh	r2, [r7, #2]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	f7ff fd5a 	bl	800ab8c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800b0d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	3301      	adds	r3, #1
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	81bb      	strh	r3, [r7, #12]
 800b0e4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b0e8:	787b      	ldrb	r3, [r7, #1]
 800b0ea:	429a      	cmp	r2, r3
 800b0ec:	dbe4      	blt.n	800b0b8 <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800b0ee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	81fb      	strh	r3, [r7, #14]
 800b0fa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b0fe:	787b      	ldrb	r3, [r7, #1]
 800b100:	429a      	cmp	r2, r3
 800b102:	dbd6      	blt.n	800b0b2 <Paint_DrawPoint+0xee>
            }
        }
    }
}
 800b104:	3714      	adds	r7, #20
 800b106:	46bd      	mov	sp, r7
 800b108:	bd90      	pop	{r4, r7, pc}
 800b10a:	bf00      	nop
 800b10c:	20000a40 	.word	0x20000a40
 800b110:	0800fb10 	.word	0x0800fb10
 800b114:	0800fb50 	.word	0x0800fb50
 800b118:	0800fb74 	.word	0x0800fb74

0800b11c <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800b11c:	b590      	push	{r4, r7, lr}
 800b11e:	b08d      	sub	sp, #52	; 0x34
 800b120:	af02      	add	r7, sp, #8
 800b122:	4604      	mov	r4, r0
 800b124:	4608      	mov	r0, r1
 800b126:	4611      	mov	r1, r2
 800b128:	461a      	mov	r2, r3
 800b12a:	4623      	mov	r3, r4
 800b12c:	80fb      	strh	r3, [r7, #6]
 800b12e:	4603      	mov	r3, r0
 800b130:	80bb      	strh	r3, [r7, #4]
 800b132:	460b      	mov	r3, r1
 800b134:	807b      	strh	r3, [r7, #2]
 800b136:	4613      	mov	r3, r2
 800b138:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b13a:	4b52      	ldr	r3, [pc, #328]	; (800b284 <Paint_DrawLine+0x168>)
 800b13c:	889b      	ldrh	r3, [r3, #4]
 800b13e:	88fa      	ldrh	r2, [r7, #6]
 800b140:	429a      	cmp	r2, r3
 800b142:	d80e      	bhi.n	800b162 <Paint_DrawLine+0x46>
 800b144:	4b4f      	ldr	r3, [pc, #316]	; (800b284 <Paint_DrawLine+0x168>)
 800b146:	88db      	ldrh	r3, [r3, #6]
 800b148:	88ba      	ldrh	r2, [r7, #4]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	d809      	bhi.n	800b162 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b14e:	4b4d      	ldr	r3, [pc, #308]	; (800b284 <Paint_DrawLine+0x168>)
 800b150:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b152:	887a      	ldrh	r2, [r7, #2]
 800b154:	429a      	cmp	r2, r3
 800b156:	d804      	bhi.n	800b162 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b158:	4b4a      	ldr	r3, [pc, #296]	; (800b284 <Paint_DrawLine+0x168>)
 800b15a:	88db      	ldrh	r3, [r3, #6]
 800b15c:	883a      	ldrh	r2, [r7, #0]
 800b15e:	429a      	cmp	r2, r3
 800b160:	d903      	bls.n	800b16a <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800b162:	4849      	ldr	r0, [pc, #292]	; (800b288 <Paint_DrawLine+0x16c>)
 800b164:	f001 fb0a 	bl	800c77c <puts>
        return;
 800b168:	e088      	b.n	800b27c <Paint_DrawLine+0x160>
    }

    UWORD Xpoint = Xstart;
 800b16a:	88fb      	ldrh	r3, [r7, #6]
 800b16c:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800b16e:	88bb      	ldrh	r3, [r7, #4]
 800b170:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b172:	887a      	ldrh	r2, [r7, #2]
 800b174:	88fb      	ldrh	r3, [r7, #6]
 800b176:	1ad3      	subs	r3, r2, r3
 800b178:	2b00      	cmp	r3, #0
 800b17a:	bfb8      	it	lt
 800b17c:	425b      	neglt	r3, r3
 800b17e:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b180:	883a      	ldrh	r2, [r7, #0]
 800b182:	88bb      	ldrh	r3, [r7, #4]
 800b184:	1ad3      	subs	r3, r2, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	bfb8      	it	lt
 800b18a:	425b      	neglt	r3, r3
 800b18c:	425b      	negs	r3, r3
 800b18e:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800b190:	88fa      	ldrh	r2, [r7, #6]
 800b192:	887b      	ldrh	r3, [r7, #2]
 800b194:	429a      	cmp	r2, r3
 800b196:	d201      	bcs.n	800b19c <Paint_DrawLine+0x80>
 800b198:	2301      	movs	r3, #1
 800b19a:	e001      	b.n	800b1a0 <Paint_DrawLine+0x84>
 800b19c:	f04f 33ff 	mov.w	r3, #4294967295
 800b1a0:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800b1a2:	88ba      	ldrh	r2, [r7, #4]
 800b1a4:	883b      	ldrh	r3, [r7, #0]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d201      	bcs.n	800b1ae <Paint_DrawLine+0x92>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	e001      	b.n	800b1b2 <Paint_DrawLine+0x96>
 800b1ae:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b2:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800b1b4:	69ba      	ldr	r2, [r7, #24]
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 800b1c0:	7ffb      	ldrb	r3, [r7, #31]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800b1c6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d125      	bne.n	800b21a <Paint_DrawLine+0xfe>
 800b1ce:	7ffa      	ldrb	r2, [r7, #31]
 800b1d0:	4b2e      	ldr	r3, [pc, #184]	; (800b28c <Paint_DrawLine+0x170>)
 800b1d2:	fba3 1302 	umull	r1, r3, r3, r2
 800b1d6:	0859      	lsrs	r1, r3, #1
 800b1d8:	460b      	mov	r3, r1
 800b1da:	005b      	lsls	r3, r3, #1
 800b1dc:	440b      	add	r3, r1
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d119      	bne.n	800b21a <Paint_DrawLine+0xfe>
            //Debug("LINE_DOTTED\r\n");
						if(Color)
 800b1e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d009      	beq.n	800b200 <Paint_DrawLine+0xe4>
							Paint_DrawPoint(Xpoint, Ypoint, BLACK, Line_width, DOT_STYLE_DFT);
 800b1ec:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b1f0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b1f2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b1f4:	2201      	movs	r2, #1
 800b1f6:	9200      	str	r2, [sp, #0]
 800b1f8:	2200      	movs	r2, #0
 800b1fa:	f7ff fee3 	bl	800afc4 <Paint_DrawPoint>
 800b1fe:	e009      	b.n	800b214 <Paint_DrawLine+0xf8>
            else
							Paint_DrawPoint(Xpoint, Ypoint, WHITE, Line_width, DOT_STYLE_DFT);
 800b200:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b204:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b206:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b208:	2201      	movs	r2, #1
 800b20a:	9200      	str	r2, [sp, #0]
 800b20c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b210:	f7ff fed8 	bl	800afc4 <Paint_DrawPoint>
            Dotted_Len = 0;
 800b214:	2300      	movs	r3, #0
 800b216:	77fb      	strb	r3, [r7, #31]
 800b218:	e008      	b.n	800b22c <Paint_DrawLine+0x110>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800b21a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b21e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b220:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b222:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b224:	2401      	movs	r4, #1
 800b226:	9400      	str	r4, [sp, #0]
 800b228:	f7ff fecc 	bl	800afc4 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800b22c:	6a3b      	ldr	r3, [r7, #32]
 800b22e:	005b      	lsls	r3, r3, #1
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	429a      	cmp	r2, r3
 800b234:	dc0c      	bgt.n	800b250 <Paint_DrawLine+0x134>
            if (Xpoint == Xend)
 800b236:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b238:	887b      	ldrh	r3, [r7, #2]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d01b      	beq.n	800b276 <Paint_DrawLine+0x15a>
                break;
            Esp += dy;
 800b23e:	6a3a      	ldr	r2, [r7, #32]
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	4413      	add	r3, r2
 800b244:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	b29a      	uxth	r2, r3
 800b24a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b24c:	4413      	add	r3, r2
 800b24e:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800b250:	6a3b      	ldr	r3, [r7, #32]
 800b252:	005b      	lsls	r3, r3, #1
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	429a      	cmp	r2, r3
 800b258:	dbb2      	blt.n	800b1c0 <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 800b25a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b25c:	883b      	ldrh	r3, [r7, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d00b      	beq.n	800b27a <Paint_DrawLine+0x15e>
                break;
            Esp += dx;
 800b262:	6a3a      	ldr	r2, [r7, #32]
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	4413      	add	r3, r2
 800b268:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b270:	4413      	add	r3, r2
 800b272:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800b274:	e7a4      	b.n	800b1c0 <Paint_DrawLine+0xa4>
                break;
 800b276:	bf00      	nop
 800b278:	e000      	b.n	800b27c <Paint_DrawLine+0x160>
                break;
 800b27a:	bf00      	nop
        }
    }
}
 800b27c:	372c      	adds	r7, #44	; 0x2c
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd90      	pop	{r4, r7, pc}
 800b282:	bf00      	nop
 800b284:	20000a40 	.word	0x20000a40
 800b288:	0800fb9c 	.word	0x0800fb9c
 800b28c:	aaaaaaab 	.word	0xaaaaaaab

0800b290 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800b290:	b590      	push	{r4, r7, lr}
 800b292:	b089      	sub	sp, #36	; 0x24
 800b294:	af04      	add	r7, sp, #16
 800b296:	4604      	mov	r4, r0
 800b298:	4608      	mov	r0, r1
 800b29a:	4611      	mov	r1, r2
 800b29c:	461a      	mov	r2, r3
 800b29e:	4623      	mov	r3, r4
 800b2a0:	80fb      	strh	r3, [r7, #6]
 800b2a2:	4603      	mov	r3, r0
 800b2a4:	80bb      	strh	r3, [r7, #4]
 800b2a6:	460b      	mov	r3, r1
 800b2a8:	807b      	strh	r3, [r7, #2]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b2ae:	4b38      	ldr	r3, [pc, #224]	; (800b390 <Paint_DrawRectangle+0x100>)
 800b2b0:	889b      	ldrh	r3, [r3, #4]
 800b2b2:	88fa      	ldrh	r2, [r7, #6]
 800b2b4:	429a      	cmp	r2, r3
 800b2b6:	d80e      	bhi.n	800b2d6 <Paint_DrawRectangle+0x46>
 800b2b8:	4b35      	ldr	r3, [pc, #212]	; (800b390 <Paint_DrawRectangle+0x100>)
 800b2ba:	88db      	ldrh	r3, [r3, #6]
 800b2bc:	88ba      	ldrh	r2, [r7, #4]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d809      	bhi.n	800b2d6 <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b2c2:	4b33      	ldr	r3, [pc, #204]	; (800b390 <Paint_DrawRectangle+0x100>)
 800b2c4:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b2c6:	887a      	ldrh	r2, [r7, #2]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d804      	bhi.n	800b2d6 <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b2cc:	4b30      	ldr	r3, [pc, #192]	; (800b390 <Paint_DrawRectangle+0x100>)
 800b2ce:	88db      	ldrh	r3, [r3, #6]
 800b2d0:	883a      	ldrh	r2, [r7, #0]
 800b2d2:	429a      	cmp	r2, r3
 800b2d4:	d903      	bls.n	800b2de <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 800b2d6:	482f      	ldr	r0, [pc, #188]	; (800b394 <Paint_DrawRectangle+0x104>)
 800b2d8:	f001 fa50 	bl	800c77c <puts>
        return;
 800b2dc:	e054      	b.n	800b388 <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 800b2de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d018      	beq.n	800b318 <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800b2e6:	88bb      	ldrh	r3, [r7, #4]
 800b2e8:	81fb      	strh	r3, [r7, #14]
 800b2ea:	e010      	b.n	800b30e <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 800b2ec:	89fc      	ldrh	r4, [r7, #14]
 800b2ee:	887a      	ldrh	r2, [r7, #2]
 800b2f0:	89f9      	ldrh	r1, [r7, #14]
 800b2f2:	88f8      	ldrh	r0, [r7, #6]
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	9302      	str	r3, [sp, #8]
 800b2f8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b2fc:	9301      	str	r3, [sp, #4]
 800b2fe:	8c3b      	ldrh	r3, [r7, #32]
 800b300:	9300      	str	r3, [sp, #0]
 800b302:	4623      	mov	r3, r4
 800b304:	f7ff ff0a 	bl	800b11c <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800b308:	89fb      	ldrh	r3, [r7, #14]
 800b30a:	3301      	adds	r3, #1
 800b30c:	81fb      	strh	r3, [r7, #14]
 800b30e:	89fa      	ldrh	r2, [r7, #14]
 800b310:	883b      	ldrh	r3, [r7, #0]
 800b312:	429a      	cmp	r2, r3
 800b314:	d3ea      	bcc.n	800b2ec <Paint_DrawRectangle+0x5c>
 800b316:	e037      	b.n	800b388 <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800b318:	88bc      	ldrh	r4, [r7, #4]
 800b31a:	887a      	ldrh	r2, [r7, #2]
 800b31c:	88b9      	ldrh	r1, [r7, #4]
 800b31e:	88f8      	ldrh	r0, [r7, #6]
 800b320:	2300      	movs	r3, #0
 800b322:	9302      	str	r3, [sp, #8]
 800b324:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b328:	9301      	str	r3, [sp, #4]
 800b32a:	8c3b      	ldrh	r3, [r7, #32]
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	4623      	mov	r3, r4
 800b330:	f7ff fef4 	bl	800b11c <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800b334:	883c      	ldrh	r4, [r7, #0]
 800b336:	88fa      	ldrh	r2, [r7, #6]
 800b338:	88b9      	ldrh	r1, [r7, #4]
 800b33a:	88f8      	ldrh	r0, [r7, #6]
 800b33c:	2300      	movs	r3, #0
 800b33e:	9302      	str	r3, [sp, #8]
 800b340:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b344:	9301      	str	r3, [sp, #4]
 800b346:	8c3b      	ldrh	r3, [r7, #32]
 800b348:	9300      	str	r3, [sp, #0]
 800b34a:	4623      	mov	r3, r4
 800b34c:	f7ff fee6 	bl	800b11c <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800b350:	88bc      	ldrh	r4, [r7, #4]
 800b352:	887a      	ldrh	r2, [r7, #2]
 800b354:	8839      	ldrh	r1, [r7, #0]
 800b356:	8878      	ldrh	r0, [r7, #2]
 800b358:	2300      	movs	r3, #0
 800b35a:	9302      	str	r3, [sp, #8]
 800b35c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b360:	9301      	str	r3, [sp, #4]
 800b362:	8c3b      	ldrh	r3, [r7, #32]
 800b364:	9300      	str	r3, [sp, #0]
 800b366:	4623      	mov	r3, r4
 800b368:	f7ff fed8 	bl	800b11c <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800b36c:	883c      	ldrh	r4, [r7, #0]
 800b36e:	88fa      	ldrh	r2, [r7, #6]
 800b370:	8839      	ldrh	r1, [r7, #0]
 800b372:	8878      	ldrh	r0, [r7, #2]
 800b374:	2300      	movs	r3, #0
 800b376:	9302      	str	r3, [sp, #8]
 800b378:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	8c3b      	ldrh	r3, [r7, #32]
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	4623      	mov	r3, r4
 800b384:	f7ff feca 	bl	800b11c <Paint_DrawLine>
    }
}
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd90      	pop	{r4, r7, pc}
 800b38e:	bf00      	nop
 800b390:	20000a40 	.word	0x20000a40
 800b394:	0800fbdc 	.word	0x0800fbdc

0800b398 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800b398:	b590      	push	{r4, r7, lr}
 800b39a:	b087      	sub	sp, #28
 800b39c:	af02      	add	r7, sp, #8
 800b39e:	4604      	mov	r4, r0
 800b3a0:	4608      	mov	r0, r1
 800b3a2:	4611      	mov	r1, r2
 800b3a4:	461a      	mov	r2, r3
 800b3a6:	4623      	mov	r3, r4
 800b3a8:	80fb      	strh	r3, [r7, #6]
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	80bb      	strh	r3, [r7, #4]
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	807b      	strh	r3, [r7, #2]
 800b3b2:	4613      	mov	r3, r2
 800b3b4:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 800b3b6:	4b67      	ldr	r3, [pc, #412]	; (800b554 <Paint_DrawCircle+0x1bc>)
 800b3b8:	889b      	ldrh	r3, [r3, #4]
 800b3ba:	88fa      	ldrh	r2, [r7, #6]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d804      	bhi.n	800b3ca <Paint_DrawCircle+0x32>
 800b3c0:	4b64      	ldr	r3, [pc, #400]	; (800b554 <Paint_DrawCircle+0x1bc>)
 800b3c2:	88db      	ldrh	r3, [r3, #6]
 800b3c4:	88ba      	ldrh	r2, [r7, #4]
 800b3c6:	429a      	cmp	r2, r3
 800b3c8:	d303      	bcc.n	800b3d2 <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800b3ca:	4863      	ldr	r0, [pc, #396]	; (800b558 <Paint_DrawCircle+0x1c0>)
 800b3cc:	f001 f9d6 	bl	800c77c <puts>
        return;
 800b3d0:	e16b      	b.n	800b6aa <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800b3d6:	887b      	ldrh	r3, [r7, #2]
 800b3d8:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800b3da:	887b      	ldrh	r3, [r7, #2]
 800b3dc:	005b      	lsls	r3, r3, #1
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	f1c3 0303 	rsb	r3, r3, #3
 800b3e4:	b29b      	uxth	r3, r3
 800b3e6:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 800b3e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	f040 8155 	bne.w	800b69c <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800b3f2:	e0a6      	b.n	800b542 <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800b3f4:	89fb      	ldrh	r3, [r7, #14]
 800b3f6:	813b      	strh	r3, [r7, #8]
 800b3f8:	e075      	b.n	800b4e6 <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800b3fa:	89fa      	ldrh	r2, [r7, #14]
 800b3fc:	88fb      	ldrh	r3, [r7, #6]
 800b3fe:	4413      	add	r3, r2
 800b400:	b298      	uxth	r0, r3
 800b402:	893a      	ldrh	r2, [r7, #8]
 800b404:	88bb      	ldrh	r3, [r7, #4]
 800b406:	4413      	add	r3, r2
 800b408:	b299      	uxth	r1, r3
 800b40a:	883a      	ldrh	r2, [r7, #0]
 800b40c:	2301      	movs	r3, #1
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	2301      	movs	r3, #1
 800b412:	f7ff fdd7 	bl	800afc4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800b416:	89fb      	ldrh	r3, [r7, #14]
 800b418:	88fa      	ldrh	r2, [r7, #6]
 800b41a:	1ad3      	subs	r3, r2, r3
 800b41c:	b298      	uxth	r0, r3
 800b41e:	893a      	ldrh	r2, [r7, #8]
 800b420:	88bb      	ldrh	r3, [r7, #4]
 800b422:	4413      	add	r3, r2
 800b424:	b299      	uxth	r1, r3
 800b426:	883a      	ldrh	r2, [r7, #0]
 800b428:	2301      	movs	r3, #1
 800b42a:	9300      	str	r3, [sp, #0]
 800b42c:	2301      	movs	r3, #1
 800b42e:	f7ff fdc9 	bl	800afc4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800b432:	893b      	ldrh	r3, [r7, #8]
 800b434:	88fa      	ldrh	r2, [r7, #6]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	b298      	uxth	r0, r3
 800b43a:	89fa      	ldrh	r2, [r7, #14]
 800b43c:	88bb      	ldrh	r3, [r7, #4]
 800b43e:	4413      	add	r3, r2
 800b440:	b299      	uxth	r1, r3
 800b442:	883a      	ldrh	r2, [r7, #0]
 800b444:	2301      	movs	r3, #1
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	2301      	movs	r3, #1
 800b44a:	f7ff fdbb 	bl	800afc4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800b44e:	893b      	ldrh	r3, [r7, #8]
 800b450:	88fa      	ldrh	r2, [r7, #6]
 800b452:	1ad3      	subs	r3, r2, r3
 800b454:	b298      	uxth	r0, r3
 800b456:	89fb      	ldrh	r3, [r7, #14]
 800b458:	88ba      	ldrh	r2, [r7, #4]
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	b299      	uxth	r1, r3
 800b45e:	883a      	ldrh	r2, [r7, #0]
 800b460:	2301      	movs	r3, #1
 800b462:	9300      	str	r3, [sp, #0]
 800b464:	2301      	movs	r3, #1
 800b466:	f7ff fdad 	bl	800afc4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 800b46a:	89fb      	ldrh	r3, [r7, #14]
 800b46c:	88fa      	ldrh	r2, [r7, #6]
 800b46e:	1ad3      	subs	r3, r2, r3
 800b470:	b298      	uxth	r0, r3
 800b472:	893b      	ldrh	r3, [r7, #8]
 800b474:	88ba      	ldrh	r2, [r7, #4]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	b299      	uxth	r1, r3
 800b47a:	883a      	ldrh	r2, [r7, #0]
 800b47c:	2301      	movs	r3, #1
 800b47e:	9300      	str	r3, [sp, #0]
 800b480:	2301      	movs	r3, #1
 800b482:	f7ff fd9f 	bl	800afc4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800b486:	89fa      	ldrh	r2, [r7, #14]
 800b488:	88fb      	ldrh	r3, [r7, #6]
 800b48a:	4413      	add	r3, r2
 800b48c:	b298      	uxth	r0, r3
 800b48e:	893b      	ldrh	r3, [r7, #8]
 800b490:	88ba      	ldrh	r2, [r7, #4]
 800b492:	1ad3      	subs	r3, r2, r3
 800b494:	b299      	uxth	r1, r3
 800b496:	883a      	ldrh	r2, [r7, #0]
 800b498:	2301      	movs	r3, #1
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	2301      	movs	r3, #1
 800b49e:	f7ff fd91 	bl	800afc4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800b4a2:	893a      	ldrh	r2, [r7, #8]
 800b4a4:	88fb      	ldrh	r3, [r7, #6]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	b298      	uxth	r0, r3
 800b4aa:	89fb      	ldrh	r3, [r7, #14]
 800b4ac:	88ba      	ldrh	r2, [r7, #4]
 800b4ae:	1ad3      	subs	r3, r2, r3
 800b4b0:	b299      	uxth	r1, r3
 800b4b2:	883a      	ldrh	r2, [r7, #0]
 800b4b4:	2301      	movs	r3, #1
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	f7ff fd83 	bl	800afc4 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800b4be:	893a      	ldrh	r2, [r7, #8]
 800b4c0:	88fb      	ldrh	r3, [r7, #6]
 800b4c2:	4413      	add	r3, r2
 800b4c4:	b298      	uxth	r0, r3
 800b4c6:	89fa      	ldrh	r2, [r7, #14]
 800b4c8:	88bb      	ldrh	r3, [r7, #4]
 800b4ca:	4413      	add	r3, r2
 800b4cc:	b299      	uxth	r1, r3
 800b4ce:	883a      	ldrh	r2, [r7, #0]
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	9300      	str	r3, [sp, #0]
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	f7ff fd75 	bl	800afc4 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800b4da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	813b      	strh	r3, [r7, #8]
 800b4e6:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b4ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4ee:	429a      	cmp	r2, r3
 800b4f0:	dd83      	ble.n	800b3fa <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 800b4f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	da09      	bge.n	800b50e <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 800b4fa:	89fb      	ldrh	r3, [r7, #14]
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	b29a      	uxth	r2, r3
 800b500:	897b      	ldrh	r3, [r7, #10]
 800b502:	4413      	add	r3, r2
 800b504:	b29b      	uxth	r3, r3
 800b506:	3306      	adds	r3, #6
 800b508:	b29b      	uxth	r3, r3
 800b50a:	817b      	strh	r3, [r7, #10]
 800b50c:	e013      	b.n	800b536 <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800b50e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b512:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b516:	1ad3      	subs	r3, r2, r3
 800b518:	b29b      	uxth	r3, r3
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	897b      	ldrh	r3, [r7, #10]
 800b520:	4413      	add	r3, r2
 800b522:	b29b      	uxth	r3, r3
 800b524:	330a      	adds	r3, #10
 800b526:	b29b      	uxth	r3, r3
 800b528:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800b52a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b52e:	b29b      	uxth	r3, r3
 800b530:	3b01      	subs	r3, #1
 800b532:	b29b      	uxth	r3, r3
 800b534:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800b536:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b53a:	b29b      	uxth	r3, r3
 800b53c:	3301      	adds	r3, #1
 800b53e:	b29b      	uxth	r3, r3
 800b540:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800b542:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b546:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	f77f af52 	ble.w	800b3f4 <Paint_DrawCircle+0x5c>
 800b550:	e0ab      	b.n	800b6aa <Paint_DrawCircle+0x312>
 800b552:	bf00      	nop
 800b554:	20000a40 	.word	0x20000a40
 800b558:	0800fc0c 	.word	0x0800fc0c
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 800b55c:	89fa      	ldrh	r2, [r7, #14]
 800b55e:	88fb      	ldrh	r3, [r7, #6]
 800b560:	4413      	add	r3, r2
 800b562:	b298      	uxth	r0, r3
 800b564:	89ba      	ldrh	r2, [r7, #12]
 800b566:	88bb      	ldrh	r3, [r7, #4]
 800b568:	4413      	add	r3, r2
 800b56a:	b299      	uxth	r1, r3
 800b56c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b570:	883a      	ldrh	r2, [r7, #0]
 800b572:	2401      	movs	r4, #1
 800b574:	9400      	str	r4, [sp, #0]
 800b576:	f7ff fd25 	bl	800afc4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800b57a:	89fb      	ldrh	r3, [r7, #14]
 800b57c:	88fa      	ldrh	r2, [r7, #6]
 800b57e:	1ad3      	subs	r3, r2, r3
 800b580:	b298      	uxth	r0, r3
 800b582:	89ba      	ldrh	r2, [r7, #12]
 800b584:	88bb      	ldrh	r3, [r7, #4]
 800b586:	4413      	add	r3, r2
 800b588:	b299      	uxth	r1, r3
 800b58a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b58e:	883a      	ldrh	r2, [r7, #0]
 800b590:	2401      	movs	r4, #1
 800b592:	9400      	str	r4, [sp, #0]
 800b594:	f7ff fd16 	bl	800afc4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 800b598:	89bb      	ldrh	r3, [r7, #12]
 800b59a:	88fa      	ldrh	r2, [r7, #6]
 800b59c:	1ad3      	subs	r3, r2, r3
 800b59e:	b298      	uxth	r0, r3
 800b5a0:	89fa      	ldrh	r2, [r7, #14]
 800b5a2:	88bb      	ldrh	r3, [r7, #4]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	b299      	uxth	r1, r3
 800b5a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5ac:	883a      	ldrh	r2, [r7, #0]
 800b5ae:	2401      	movs	r4, #1
 800b5b0:	9400      	str	r4, [sp, #0]
 800b5b2:	f7ff fd07 	bl	800afc4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800b5b6:	89bb      	ldrh	r3, [r7, #12]
 800b5b8:	88fa      	ldrh	r2, [r7, #6]
 800b5ba:	1ad3      	subs	r3, r2, r3
 800b5bc:	b298      	uxth	r0, r3
 800b5be:	89fb      	ldrh	r3, [r7, #14]
 800b5c0:	88ba      	ldrh	r2, [r7, #4]
 800b5c2:	1ad3      	subs	r3, r2, r3
 800b5c4:	b299      	uxth	r1, r3
 800b5c6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5ca:	883a      	ldrh	r2, [r7, #0]
 800b5cc:	2401      	movs	r4, #1
 800b5ce:	9400      	str	r4, [sp, #0]
 800b5d0:	f7ff fcf8 	bl	800afc4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800b5d4:	89fb      	ldrh	r3, [r7, #14]
 800b5d6:	88fa      	ldrh	r2, [r7, #6]
 800b5d8:	1ad3      	subs	r3, r2, r3
 800b5da:	b298      	uxth	r0, r3
 800b5dc:	89bb      	ldrh	r3, [r7, #12]
 800b5de:	88ba      	ldrh	r2, [r7, #4]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	b299      	uxth	r1, r3
 800b5e4:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5e8:	883a      	ldrh	r2, [r7, #0]
 800b5ea:	2401      	movs	r4, #1
 800b5ec:	9400      	str	r4, [sp, #0]
 800b5ee:	f7ff fce9 	bl	800afc4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800b5f2:	89fa      	ldrh	r2, [r7, #14]
 800b5f4:	88fb      	ldrh	r3, [r7, #6]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	b298      	uxth	r0, r3
 800b5fa:	89bb      	ldrh	r3, [r7, #12]
 800b5fc:	88ba      	ldrh	r2, [r7, #4]
 800b5fe:	1ad3      	subs	r3, r2, r3
 800b600:	b299      	uxth	r1, r3
 800b602:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b606:	883a      	ldrh	r2, [r7, #0]
 800b608:	2401      	movs	r4, #1
 800b60a:	9400      	str	r4, [sp, #0]
 800b60c:	f7ff fcda 	bl	800afc4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 800b610:	89ba      	ldrh	r2, [r7, #12]
 800b612:	88fb      	ldrh	r3, [r7, #6]
 800b614:	4413      	add	r3, r2
 800b616:	b298      	uxth	r0, r3
 800b618:	89fb      	ldrh	r3, [r7, #14]
 800b61a:	88ba      	ldrh	r2, [r7, #4]
 800b61c:	1ad3      	subs	r3, r2, r3
 800b61e:	b299      	uxth	r1, r3
 800b620:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b624:	883a      	ldrh	r2, [r7, #0]
 800b626:	2401      	movs	r4, #1
 800b628:	9400      	str	r4, [sp, #0]
 800b62a:	f7ff fccb 	bl	800afc4 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 800b62e:	89ba      	ldrh	r2, [r7, #12]
 800b630:	88fb      	ldrh	r3, [r7, #6]
 800b632:	4413      	add	r3, r2
 800b634:	b298      	uxth	r0, r3
 800b636:	89fa      	ldrh	r2, [r7, #14]
 800b638:	88bb      	ldrh	r3, [r7, #4]
 800b63a:	4413      	add	r3, r2
 800b63c:	b299      	uxth	r1, r3
 800b63e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b642:	883a      	ldrh	r2, [r7, #0]
 800b644:	2401      	movs	r4, #1
 800b646:	9400      	str	r4, [sp, #0]
 800b648:	f7ff fcbc 	bl	800afc4 <Paint_DrawPoint>

            if (Esp < 0 )
 800b64c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b650:	2b00      	cmp	r3, #0
 800b652:	da09      	bge.n	800b668 <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 800b654:	89fb      	ldrh	r3, [r7, #14]
 800b656:	009b      	lsls	r3, r3, #2
 800b658:	b29a      	uxth	r2, r3
 800b65a:	897b      	ldrh	r3, [r7, #10]
 800b65c:	4413      	add	r3, r2
 800b65e:	b29b      	uxth	r3, r3
 800b660:	3306      	adds	r3, #6
 800b662:	b29b      	uxth	r3, r3
 800b664:	817b      	strh	r3, [r7, #10]
 800b666:	e013      	b.n	800b690 <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800b668:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b66c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b670:	1ad3      	subs	r3, r2, r3
 800b672:	b29b      	uxth	r3, r3
 800b674:	009b      	lsls	r3, r3, #2
 800b676:	b29a      	uxth	r2, r3
 800b678:	897b      	ldrh	r3, [r7, #10]
 800b67a:	4413      	add	r3, r2
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	330a      	adds	r3, #10
 800b680:	b29b      	uxth	r3, r3
 800b682:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800b684:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b688:	b29b      	uxth	r3, r3
 800b68a:	3b01      	subs	r3, #1
 800b68c:	b29b      	uxth	r3, r3
 800b68e:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800b690:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b694:	b29b      	uxth	r3, r3
 800b696:	3301      	adds	r3, #1
 800b698:	b29b      	uxth	r3, r3
 800b69a:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 800b69c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b6a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	f77f af59 	ble.w	800b55c <Paint_DrawCircle+0x1c4>
        }
    }
}
 800b6aa:	3714      	adds	r7, #20
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd90      	pop	{r4, r7, pc}

0800b6b0 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b088      	sub	sp, #32
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	607b      	str	r3, [r7, #4]
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	81fb      	strh	r3, [r7, #14]
 800b6bc:	460b      	mov	r3, r1
 800b6be:	81bb      	strh	r3, [r7, #12]
 800b6c0:	4613      	mov	r3, r2
 800b6c2:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800b6c4:	4b4d      	ldr	r3, [pc, #308]	; (800b7fc <Paint_DrawChar+0x14c>)
 800b6c6:	889b      	ldrh	r3, [r3, #4]
 800b6c8:	89fa      	ldrh	r2, [r7, #14]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d804      	bhi.n	800b6d8 <Paint_DrawChar+0x28>
 800b6ce:	4b4b      	ldr	r3, [pc, #300]	; (800b7fc <Paint_DrawChar+0x14c>)
 800b6d0:	88db      	ldrh	r3, [r3, #6]
 800b6d2:	89ba      	ldrh	r2, [r7, #12]
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d903      	bls.n	800b6e0 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800b6d8:	4849      	ldr	r0, [pc, #292]	; (800b800 <Paint_DrawChar+0x150>)
 800b6da:	f001 f84f 	bl	800c77c <puts>
        return;
 800b6de:	e089      	b.n	800b7f4 <Paint_DrawChar+0x144>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800b6e0:	7afb      	ldrb	r3, [r7, #11]
 800b6e2:	3b20      	subs	r3, #32
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	88d2      	ldrh	r2, [r2, #6]
 800b6e8:	fb02 f303 	mul.w	r3, r2, r3
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	8892      	ldrh	r2, [r2, #4]
 800b6f0:	08d2      	lsrs	r2, r2, #3
 800b6f2:	b292      	uxth	r2, r2
 800b6f4:	4611      	mov	r1, r2
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	8892      	ldrh	r2, [r2, #4]
 800b6fa:	f002 0207 	and.w	r2, r2, #7
 800b6fe:	b292      	uxth	r2, r2
 800b700:	2a00      	cmp	r2, #0
 800b702:	bf14      	ite	ne
 800b704:	2201      	movne	r2, #1
 800b706:	2200      	moveq	r2, #0
 800b708:	b2d2      	uxtb	r2, r2
 800b70a:	440a      	add	r2, r1
 800b70c:	fb02 f303 	mul.w	r3, r2, r3
 800b710:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681a      	ldr	r2, [r3, #0]
 800b716:	697b      	ldr	r3, [r7, #20]
 800b718:	4413      	add	r3, r2
 800b71a:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800b71c:	2300      	movs	r3, #0
 800b71e:	83fb      	strh	r3, [r7, #30]
 800b720:	e063      	b.n	800b7ea <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800b722:	2300      	movs	r3, #0
 800b724:	83bb      	strh	r3, [r7, #28]
 800b726:	e04e      	b.n	800b7c6 <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800b728:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b72a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b72e:	4293      	cmp	r3, r2
 800b730:	d118      	bne.n	800b764 <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	781b      	ldrb	r3, [r3, #0]
 800b736:	4619      	mov	r1, r3
 800b738:	8bbb      	ldrh	r3, [r7, #28]
 800b73a:	f003 0307 	and.w	r3, r3, #7
 800b73e:	2280      	movs	r2, #128	; 0x80
 800b740:	fa42 f303 	asr.w	r3, r2, r3
 800b744:	400b      	ands	r3, r1
 800b746:	2b00      	cmp	r3, #0
 800b748:	d031      	beq.n	800b7ae <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800b74a:	89fa      	ldrh	r2, [r7, #14]
 800b74c:	8bbb      	ldrh	r3, [r7, #28]
 800b74e:	4413      	add	r3, r2
 800b750:	b298      	uxth	r0, r3
 800b752:	89ba      	ldrh	r2, [r7, #12]
 800b754:	8bfb      	ldrh	r3, [r7, #30]
 800b756:	4413      	add	r3, r2
 800b758:	b29b      	uxth	r3, r3
 800b75a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b75c:	4619      	mov	r1, r3
 800b75e:	f7ff fa15 	bl	800ab8c <Paint_SetPixel>
 800b762:	e024      	b.n	800b7ae <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	4619      	mov	r1, r3
 800b76a:	8bbb      	ldrh	r3, [r7, #28]
 800b76c:	f003 0307 	and.w	r3, r3, #7
 800b770:	2280      	movs	r2, #128	; 0x80
 800b772:	fa42 f303 	asr.w	r3, r2, r3
 800b776:	400b      	ands	r3, r1
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d00c      	beq.n	800b796 <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800b77c:	89fa      	ldrh	r2, [r7, #14]
 800b77e:	8bbb      	ldrh	r3, [r7, #28]
 800b780:	4413      	add	r3, r2
 800b782:	b298      	uxth	r0, r3
 800b784:	89ba      	ldrh	r2, [r7, #12]
 800b786:	8bfb      	ldrh	r3, [r7, #30]
 800b788:	4413      	add	r3, r2
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b78e:	4619      	mov	r1, r3
 800b790:	f7ff f9fc 	bl	800ab8c <Paint_SetPixel>
 800b794:	e00b      	b.n	800b7ae <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800b796:	89fa      	ldrh	r2, [r7, #14]
 800b798:	8bbb      	ldrh	r3, [r7, #28]
 800b79a:	4413      	add	r3, r2
 800b79c:	b298      	uxth	r0, r3
 800b79e:	89ba      	ldrh	r2, [r7, #12]
 800b7a0:	8bfb      	ldrh	r3, [r7, #30]
 800b7a2:	4413      	add	r3, r2
 800b7a4:	b29b      	uxth	r3, r3
 800b7a6:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	f7ff f9ef 	bl	800ab8c <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800b7ae:	8bbb      	ldrh	r3, [r7, #28]
 800b7b0:	f003 0307 	and.w	r3, r3, #7
 800b7b4:	b29b      	uxth	r3, r3
 800b7b6:	2b07      	cmp	r3, #7
 800b7b8:	d102      	bne.n	800b7c0 <Paint_DrawChar+0x110>
                ptr++;
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800b7c0:	8bbb      	ldrh	r3, [r7, #28]
 800b7c2:	3301      	adds	r3, #1
 800b7c4:	83bb      	strh	r3, [r7, #28]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	889b      	ldrh	r3, [r3, #4]
 800b7ca:	8bba      	ldrh	r2, [r7, #28]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d3ab      	bcc.n	800b728 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	889b      	ldrh	r3, [r3, #4]
 800b7d4:	f003 0307 	and.w	r3, r3, #7
 800b7d8:	b29b      	uxth	r3, r3
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d002      	beq.n	800b7e4 <Paint_DrawChar+0x134>
            ptr++;
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800b7e4:	8bfb      	ldrh	r3, [r7, #30]
 800b7e6:	3301      	adds	r3, #1
 800b7e8:	83fb      	strh	r3, [r7, #30]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	88db      	ldrh	r3, [r3, #6]
 800b7ee:	8bfa      	ldrh	r2, [r7, #30]
 800b7f0:	429a      	cmp	r2, r3
 800b7f2:	d396      	bcc.n	800b722 <Paint_DrawChar+0x72>
    }// Write all
}
 800b7f4:	3720      	adds	r7, #32
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	20000a40 	.word	0x20000a40
 800b800:	0800fc4c 	.word	0x0800fc4c

0800b804 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b088      	sub	sp, #32
 800b808:	af02      	add	r7, sp, #8
 800b80a:	60ba      	str	r2, [r7, #8]
 800b80c:	607b      	str	r3, [r7, #4]
 800b80e:	4603      	mov	r3, r0
 800b810:	81fb      	strh	r3, [r7, #14]
 800b812:	460b      	mov	r3, r1
 800b814:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800b816:	89fb      	ldrh	r3, [r7, #14]
 800b818:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800b81a:	89bb      	ldrh	r3, [r7, #12]
 800b81c:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800b81e:	4b21      	ldr	r3, [pc, #132]	; (800b8a4 <Paint_DrawString_EN+0xa0>)
 800b820:	889b      	ldrh	r3, [r3, #4]
 800b822:	89fa      	ldrh	r2, [r7, #14]
 800b824:	429a      	cmp	r2, r3
 800b826:	d804      	bhi.n	800b832 <Paint_DrawString_EN+0x2e>
 800b828:	4b1e      	ldr	r3, [pc, #120]	; (800b8a4 <Paint_DrawString_EN+0xa0>)
 800b82a:	88db      	ldrh	r3, [r3, #6]
 800b82c:	89ba      	ldrh	r2, [r7, #12]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d931      	bls.n	800b896 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800b832:	481d      	ldr	r0, [pc, #116]	; (800b8a8 <Paint_DrawString_EN+0xa4>)
 800b834:	f000 ffa2 	bl	800c77c <puts>
        return;
 800b838:	e031      	b.n	800b89e <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800b83a:	8afb      	ldrh	r3, [r7, #22]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	8892      	ldrh	r2, [r2, #4]
 800b840:	4413      	add	r3, r2
 800b842:	4a18      	ldr	r2, [pc, #96]	; (800b8a4 <Paint_DrawString_EN+0xa0>)
 800b844:	8892      	ldrh	r2, [r2, #4]
 800b846:	4293      	cmp	r3, r2
 800b848:	dd06      	ble.n	800b858 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 800b84a:	89fb      	ldrh	r3, [r7, #14]
 800b84c:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	88da      	ldrh	r2, [r3, #6]
 800b852:	8abb      	ldrh	r3, [r7, #20]
 800b854:	4413      	add	r3, r2
 800b856:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800b858:	8abb      	ldrh	r3, [r7, #20]
 800b85a:	687a      	ldr	r2, [r7, #4]
 800b85c:	88d2      	ldrh	r2, [r2, #6]
 800b85e:	4413      	add	r3, r2
 800b860:	4a10      	ldr	r2, [pc, #64]	; (800b8a4 <Paint_DrawString_EN+0xa0>)
 800b862:	88d2      	ldrh	r2, [r2, #6]
 800b864:	4293      	cmp	r3, r2
 800b866:	dd03      	ble.n	800b870 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 800b868:	89fb      	ldrh	r3, [r7, #14]
 800b86a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800b86c:	89bb      	ldrh	r3, [r7, #12]
 800b86e:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800b870:	68bb      	ldr	r3, [r7, #8]
 800b872:	781a      	ldrb	r2, [r3, #0]
 800b874:	8ab9      	ldrh	r1, [r7, #20]
 800b876:	8af8      	ldrh	r0, [r7, #22]
 800b878:	8c3b      	ldrh	r3, [r7, #32]
 800b87a:	9301      	str	r3, [sp, #4]
 800b87c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	f7ff ff15 	bl	800b6b0 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800b886:	68bb      	ldr	r3, [r7, #8]
 800b888:	3301      	adds	r3, #1
 800b88a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	889a      	ldrh	r2, [r3, #4]
 800b890:	8afb      	ldrh	r3, [r7, #22]
 800b892:	4413      	add	r3, r2
 800b894:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1cd      	bne.n	800b83a <Paint_DrawString_EN+0x36>
    }
}
 800b89e:	3718      	adds	r7, #24
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	20000a40 	.word	0x20000a40
 800b8a8:	0800fc8c 	.word	0x0800fc8c

0800b8ac <OLED_Reset>:
/*******************************************************************************
function:
            Hardware reset
*******************************************************************************/
static void OLED_Reset(void)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	af00      	add	r7, sp, #0
	OLED_RST_1;
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	2110      	movs	r1, #16
 800b8b4:	480b      	ldr	r0, [pc, #44]	; (800b8e4 <OLED_Reset+0x38>)
 800b8b6:	f7fa fdff 	bl	80064b8 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800b8ba:	2064      	movs	r0, #100	; 0x64
 800b8bc:	f7ff f87c 	bl	800a9b8 <Driver_Delay_ms>
    OLED_RST_0;
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	2110      	movs	r1, #16
 800b8c4:	4807      	ldr	r0, [pc, #28]	; (800b8e4 <OLED_Reset+0x38>)
 800b8c6:	f7fa fdf7 	bl	80064b8 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800b8ca:	2064      	movs	r0, #100	; 0x64
 800b8cc:	f7ff f874 	bl	800a9b8 <Driver_Delay_ms>
    OLED_RST_1;
 800b8d0:	2201      	movs	r2, #1
 800b8d2:	2110      	movs	r1, #16
 800b8d4:	4803      	ldr	r0, [pc, #12]	; (800b8e4 <OLED_Reset+0x38>)
 800b8d6:	f7fa fdef 	bl	80064b8 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800b8da:	2064      	movs	r0, #100	; 0x64
 800b8dc:	f7ff f86c 	bl	800a9b8 <Driver_Delay_ms>
}
 800b8e0:	bf00      	nop
 800b8e2:	bd80      	pop	{r7, pc}
 800b8e4:	48000400 	.word	0x48000400

0800b8e8 <OLED_WriteReg>:
/*******************************************************************************
function:
            Write register address and data
*******************************************************************************/
static void OLED_WriteReg(uint8_t Reg)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b082      	sub	sp, #8
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	71fb      	strb	r3, [r7, #7]
#if USE_SPI_4W
	OLED_DC_0;
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b8f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b8fc:	f7fa fddc 	bl	80064b8 <HAL_GPIO_WritePin>
	OLED_CS_0;
 800b900:	2200      	movs	r2, #0
 800b902:	2140      	movs	r1, #64	; 0x40
 800b904:	4807      	ldr	r0, [pc, #28]	; (800b924 <OLED_WriteReg+0x3c>)
 800b906:	f7fa fdd7 	bl	80064b8 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Reg);
 800b90a:	79fb      	ldrb	r3, [r7, #7]
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7ff f819 	bl	800a944 <SPI4W_Write_Byte>
    OLED_CS_1;
 800b912:	2201      	movs	r2, #1
 800b914:	2140      	movs	r1, #64	; 0x40
 800b916:	4803      	ldr	r0, [pc, #12]	; (800b924 <OLED_WriteReg+0x3c>)
 800b918:	f7fa fdce 	bl	80064b8 <HAL_GPIO_WritePin>
#elif USE_IIC
    I2C_Write_Byte(Reg,IIC_CMD);
#endif
}
 800b91c:	bf00      	nop
 800b91e:	3708      	adds	r7, #8
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}
 800b924:	48000400 	.word	0x48000400

0800b928 <OLED_WriteData>:

static void OLED_WriteData(uint8_t Data)
{   
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	4603      	mov	r3, r0
 800b930:	71fb      	strb	r3, [r7, #7]
#if USE_SPI_4W
	OLED_DC_1;
 800b932:	2201      	movs	r2, #1
 800b934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b93c:	f7fa fdbc 	bl	80064b8 <HAL_GPIO_WritePin>
	OLED_CS_0;
 800b940:	2200      	movs	r2, #0
 800b942:	2140      	movs	r1, #64	; 0x40
 800b944:	4807      	ldr	r0, [pc, #28]	; (800b964 <OLED_WriteData+0x3c>)
 800b946:	f7fa fdb7 	bl	80064b8 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Data);
 800b94a:	79fb      	ldrb	r3, [r7, #7]
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fe fff9 	bl	800a944 <SPI4W_Write_Byte>
    OLED_CS_1;
 800b952:	2201      	movs	r2, #1
 800b954:	2140      	movs	r1, #64	; 0x40
 800b956:	4803      	ldr	r0, [pc, #12]	; (800b964 <OLED_WriteData+0x3c>)
 800b958:	f7fa fdae 	bl	80064b8 <HAL_GPIO_WritePin>
#elif USE_IIC
    I2C_Write_Byte(Data,IIC_RAM);
#endif
}
 800b95c:	bf00      	nop
 800b95e:	3708      	adds	r7, #8
 800b960:	46bd      	mov	sp, r7
 800b962:	bd80      	pop	{r7, pc}
 800b964:	48000400 	.word	0x48000400

0800b968 <OLED_InitReg>:
/*******************************************************************************
function:
        Common register initialization
*******************************************************************************/
static void OLED_InitReg(void)
{
 800b968:	b580      	push	{r7, lr}
 800b96a:	af00      	add	r7, sp, #0
    OLED_WriteReg(0xae);//--turn off oled panel
 800b96c:	20ae      	movs	r0, #174	; 0xae
 800b96e:	f7ff ffbb 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0x15);    //   set column address
 800b972:	2015      	movs	r0, #21
 800b974:	f7ff ffb8 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start column   0
 800b978:	2000      	movs	r0, #0
 800b97a:	f7ff ffb5 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end column   127
 800b97e:	207f      	movs	r0, #127	; 0x7f
 800b980:	f7ff ffb2 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0x75);    //   set row address
 800b984:	2075      	movs	r0, #117	; 0x75
 800b986:	f7ff ffaf 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start row   0
 800b98a:	2000      	movs	r0, #0
 800b98c:	f7ff ffac 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end row   127
 800b990:	207f      	movs	r0, #127	; 0x7f
 800b992:	f7ff ffa9 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0x81);  // set contrast control
 800b996:	2081      	movs	r0, #129	; 0x81
 800b998:	f7ff ffa6 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x80);
 800b99c:	2080      	movs	r0, #128	; 0x80
 800b99e:	f7ff ffa3 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xa0);    // gment remap
 800b9a2:	20a0      	movs	r0, #160	; 0xa0
 800b9a4:	f7ff ffa0 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x51);   //51
 800b9a8:	2051      	movs	r0, #81	; 0x51
 800b9aa:	f7ff ff9d 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xa1);  // start line
 800b9ae:	20a1      	movs	r0, #161	; 0xa1
 800b9b0:	f7ff ff9a 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800b9b4:	2000      	movs	r0, #0
 800b9b6:	f7ff ff97 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xa2);  // display offset
 800b9ba:	20a2      	movs	r0, #162	; 0xa2
 800b9bc:	f7ff ff94 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800b9c0:	2000      	movs	r0, #0
 800b9c2:	f7ff ff91 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xa4);    // rmal display
 800b9c6:	20a4      	movs	r0, #164	; 0xa4
 800b9c8:	f7ff ff8e 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0xa8);    // set multiplex ratio
 800b9cc:	20a8      	movs	r0, #168	; 0xa8
 800b9ce:	f7ff ff8b 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x7f);
 800b9d2:	207f      	movs	r0, #127	; 0x7f
 800b9d4:	f7ff ff88 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xb1);  // set phase leghth
 800b9d8:	20b1      	movs	r0, #177	; 0xb1
 800b9da:	f7ff ff85 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0xf1);
 800b9de:	20f1      	movs	r0, #241	; 0xf1
 800b9e0:	f7ff ff82 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xb3);  // set dclk
 800b9e4:	20b3      	movs	r0, #179	; 0xb3
 800b9e6:	f7ff ff7f 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x00);  //80Hz:0xc1 90Hz:0xe1   100Hz:0x00   110Hz:0x30 120Hz:0x50   130Hz:0x70     01
 800b9ea:	2000      	movs	r0, #0
 800b9ec:	f7ff ff7c 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xab);  //
 800b9f0:	20ab      	movs	r0, #171	; 0xab
 800b9f2:	f7ff ff79 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x01);  //
 800b9f6:	2001      	movs	r0, #1
 800b9f8:	f7ff ff76 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xb6);  // set phase leghth
 800b9fc:	20b6      	movs	r0, #182	; 0xb6
 800b9fe:	f7ff ff73 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800ba02:	200f      	movs	r0, #15
 800ba04:	f7ff ff70 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xbe);
 800ba08:	20be      	movs	r0, #190	; 0xbe
 800ba0a:	f7ff ff6d 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800ba0e:	200f      	movs	r0, #15
 800ba10:	f7ff ff6a 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xbc);
 800ba14:	20bc      	movs	r0, #188	; 0xbc
 800ba16:	f7ff ff67 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x08);
 800ba1a:	2008      	movs	r0, #8
 800ba1c:	f7ff ff64 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xd5);
 800ba20:	20d5      	movs	r0, #213	; 0xd5
 800ba22:	f7ff ff61 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x62);
 800ba26:	2062      	movs	r0, #98	; 0x62
 800ba28:	f7ff ff5e 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0xfd);
 800ba2c:	20fd      	movs	r0, #253	; 0xfd
 800ba2e:	f7ff ff5b 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(0x12);
 800ba32:	2012      	movs	r0, #18
 800ba34:	f7ff ff58 	bl	800b8e8 <OLED_WriteReg>

}
 800ba38:	bf00      	nop
 800ba3a:	bd80      	pop	{r7, pc}

0800ba3c <OLED_1in5_Init>:
/********************************************************************************
function:
            initialization
********************************************************************************/
void OLED_1in5_Init(void)
{
 800ba3c:	b580      	push	{r7, lr}
 800ba3e:	af00      	add	r7, sp, #0
    //Hardware reset
    OLED_Reset();
 800ba40:	f7ff ff34 	bl	800b8ac <OLED_Reset>

    //Set the initialization register
    OLED_InitReg();
 800ba44:	f7ff ff90 	bl	800b968 <OLED_InitReg>
    Driver_Delay_ms(200);
 800ba48:	20c8      	movs	r0, #200	; 0xc8
 800ba4a:	f7fe ffb5 	bl	800a9b8 <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_WriteReg(0xAF);
 800ba4e:	20af      	movs	r0, #175	; 0xaf
 800ba50:	f7ff ff4a 	bl	800b8e8 <OLED_WriteReg>
}
 800ba54:	bf00      	nop
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <OLED_SetWindow>:
        Ystart :   Y direction Start coordinates
        Xend   :   X direction end coordinates
        Yend   :   Y direction end coordinates
********************************************************************************/
static void OLED_SetWindow(UBYTE Xstart, UBYTE Ystart, UBYTE Xend, UBYTE Yend)
{
 800ba58:	b590      	push	{r4, r7, lr}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4604      	mov	r4, r0
 800ba60:	4608      	mov	r0, r1
 800ba62:	4611      	mov	r1, r2
 800ba64:	461a      	mov	r2, r3
 800ba66:	4623      	mov	r3, r4
 800ba68:	71fb      	strb	r3, [r7, #7]
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	71bb      	strb	r3, [r7, #6]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	717b      	strb	r3, [r7, #5]
 800ba72:	4613      	mov	r3, r2
 800ba74:	713b      	strb	r3, [r7, #4]
    if((Xstart > OLED_1in5_WIDTH) || (Ystart > OLED_1in5_HEIGHT) ||
 800ba76:	79fb      	ldrb	r3, [r7, #7]
 800ba78:	2b80      	cmp	r3, #128	; 0x80
 800ba7a:	d827      	bhi.n	800bacc <OLED_SetWindow+0x74>
 800ba7c:	79bb      	ldrb	r3, [r7, #6]
 800ba7e:	2b80      	cmp	r3, #128	; 0x80
 800ba80:	d824      	bhi.n	800bacc <OLED_SetWindow+0x74>
 800ba82:	797b      	ldrb	r3, [r7, #5]
 800ba84:	2b80      	cmp	r3, #128	; 0x80
 800ba86:	d821      	bhi.n	800bacc <OLED_SetWindow+0x74>
       (Xend > OLED_1in5_WIDTH) || (Yend > OLED_1in5_HEIGHT))
 800ba88:	793b      	ldrb	r3, [r7, #4]
 800ba8a:	2b80      	cmp	r3, #128	; 0x80
 800ba8c:	d81e      	bhi.n	800bacc <OLED_SetWindow+0x74>
        return;

    OLED_WriteReg(0x15);
 800ba8e:	2015      	movs	r0, #21
 800ba90:	f7ff ff2a 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(Xstart/2);
 800ba94:	79fb      	ldrb	r3, [r7, #7]
 800ba96:	085b      	lsrs	r3, r3, #1
 800ba98:	b2db      	uxtb	r3, r3
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f7ff ff24 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(Xend/2 - 1);
 800baa0:	797b      	ldrb	r3, [r7, #5]
 800baa2:	085b      	lsrs	r3, r3, #1
 800baa4:	b2db      	uxtb	r3, r3
 800baa6:	3b01      	subs	r3, #1
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	4618      	mov	r0, r3
 800baac:	f7ff ff1c 	bl	800b8e8 <OLED_WriteReg>

    OLED_WriteReg(0x75);
 800bab0:	2075      	movs	r0, #117	; 0x75
 800bab2:	f7ff ff19 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(Ystart);
 800bab6:	79bb      	ldrb	r3, [r7, #6]
 800bab8:	4618      	mov	r0, r3
 800baba:	f7ff ff15 	bl	800b8e8 <OLED_WriteReg>
    OLED_WriteReg(Yend - 1);
 800babe:	793b      	ldrb	r3, [r7, #4]
 800bac0:	3b01      	subs	r3, #1
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	4618      	mov	r0, r3
 800bac6:	f7ff ff0f 	bl	800b8e8 <OLED_WriteReg>
 800baca:	e000      	b.n	800bace <OLED_SetWindow+0x76>
        return;
 800bacc:	bf00      	nop
}
 800bace:	370c      	adds	r7, #12
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd90      	pop	{r4, r7, pc}

0800bad4 <OLED_1in5_Clear>:
/********************************************************************************
function:
            Clear screen
********************************************************************************/
void OLED_1in5_Clear(void)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
    UWORD i;
    OLED_SetWindow(0, 0, 128, 128);
 800bada:	2380      	movs	r3, #128	; 0x80
 800badc:	2280      	movs	r2, #128	; 0x80
 800bade:	2100      	movs	r1, #0
 800bae0:	2000      	movs	r0, #0
 800bae2:	f7ff ffb9 	bl	800ba58 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 800bae6:	2300      	movs	r3, #0
 800bae8:	80fb      	strh	r3, [r7, #6]
 800baea:	e005      	b.n	800baf8 <OLED_1in5_Clear+0x24>
        OLED_WriteData(0x00);
 800baec:	2000      	movs	r0, #0
 800baee:	f7ff ff1b 	bl	800b928 <OLED_WriteData>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 800baf2:	88fb      	ldrh	r3, [r7, #6]
 800baf4:	3301      	adds	r3, #1
 800baf6:	80fb      	strh	r3, [r7, #6]
 800baf8:	88fb      	ldrh	r3, [r7, #6]
 800bafa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bafe:	d3f5      	bcc.n	800baec <OLED_1in5_Clear+0x18>
    }
}
 800bb00:	bf00      	nop
 800bb02:	bf00      	nop
 800bb04:	3708      	adds	r7, #8
 800bb06:	46bd      	mov	sp, r7
 800bb08:	bd80      	pop	{r7, pc}

0800bb0a <OLED_1in5_Display>:

/********************************************************************************
function:   Update all memory to OLED
********************************************************************************/
void OLED_1in5_Display(const UBYTE *Image)
{
 800bb0a:	b580      	push	{r7, lr}
 800bb0c:	b084      	sub	sp, #16
 800bb0e:	af00      	add	r7, sp, #0
 800bb10:	6078      	str	r0, [r7, #4]
    UWORD i, j, temp;
    OLED_SetWindow(0, 0, 128, 128);
 800bb12:	2380      	movs	r3, #128	; 0x80
 800bb14:	2280      	movs	r2, #128	; 0x80
 800bb16:	2100      	movs	r1, #0
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f7ff ff9d 	bl	800ba58 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 800bb1e:	2300      	movs	r3, #0
 800bb20:	81fb      	strh	r3, [r7, #14]
 800bb22:	e019      	b.n	800bb58 <OLED_1in5_Display+0x4e>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 800bb24:	2300      	movs	r3, #0
 800bb26:	81bb      	strh	r3, [r7, #12]
 800bb28:	e010      	b.n	800bb4c <OLED_1in5_Display+0x42>
        {
            temp = Image[j + i*64];
 800bb2a:	89ba      	ldrh	r2, [r7, #12]
 800bb2c:	89fb      	ldrh	r3, [r7, #14]
 800bb2e:	019b      	lsls	r3, r3, #6
 800bb30:	4413      	add	r3, r2
 800bb32:	461a      	mov	r2, r3
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4413      	add	r3, r2
 800bb38:	781b      	ldrb	r3, [r3, #0]
 800bb3a:	817b      	strh	r3, [r7, #10]
            OLED_WriteData(temp);
 800bb3c:	897b      	ldrh	r3, [r7, #10]
 800bb3e:	b2db      	uxtb	r3, r3
 800bb40:	4618      	mov	r0, r3
 800bb42:	f7ff fef1 	bl	800b928 <OLED_WriteData>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 800bb46:	89bb      	ldrh	r3, [r7, #12]
 800bb48:	3301      	adds	r3, #1
 800bb4a:	81bb      	strh	r3, [r7, #12]
 800bb4c:	89bb      	ldrh	r3, [r7, #12]
 800bb4e:	2b3f      	cmp	r3, #63	; 0x3f
 800bb50:	d9eb      	bls.n	800bb2a <OLED_1in5_Display+0x20>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 800bb52:	89fb      	ldrh	r3, [r7, #14]
 800bb54:	3301      	adds	r3, #1
 800bb56:	81fb      	strh	r3, [r7, #14]
 800bb58:	89fb      	ldrh	r3, [r7, #14]
 800bb5a:	2b7f      	cmp	r3, #127	; 0x7f
 800bb5c:	d9e2      	bls.n	800bb24 <OLED_1in5_Display+0x1a>
        }
}
 800bb5e:	bf00      	nop
 800bb60:	bf00      	nop
 800bb62:	3710      	adds	r7, #16
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}

0800bb68 <__errno>:
 800bb68:	4b01      	ldr	r3, [pc, #4]	; (800bb70 <__errno+0x8>)
 800bb6a:	6818      	ldr	r0, [r3, #0]
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	20000074 	.word	0x20000074

0800bb74 <__libc_init_array>:
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	4d0d      	ldr	r5, [pc, #52]	; (800bbac <__libc_init_array+0x38>)
 800bb78:	4c0d      	ldr	r4, [pc, #52]	; (800bbb0 <__libc_init_array+0x3c>)
 800bb7a:	1b64      	subs	r4, r4, r5
 800bb7c:	10a4      	asrs	r4, r4, #2
 800bb7e:	2600      	movs	r6, #0
 800bb80:	42a6      	cmp	r6, r4
 800bb82:	d109      	bne.n	800bb98 <__libc_init_array+0x24>
 800bb84:	4d0b      	ldr	r5, [pc, #44]	; (800bbb4 <__libc_init_array+0x40>)
 800bb86:	4c0c      	ldr	r4, [pc, #48]	; (800bbb8 <__libc_init_array+0x44>)
 800bb88:	f003 feac 	bl	800f8e4 <_init>
 800bb8c:	1b64      	subs	r4, r4, r5
 800bb8e:	10a4      	asrs	r4, r4, #2
 800bb90:	2600      	movs	r6, #0
 800bb92:	42a6      	cmp	r6, r4
 800bb94:	d105      	bne.n	800bba2 <__libc_init_array+0x2e>
 800bb96:	bd70      	pop	{r4, r5, r6, pc}
 800bb98:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb9c:	4798      	blx	r3
 800bb9e:	3601      	adds	r6, #1
 800bba0:	e7ee      	b.n	800bb80 <__libc_init_array+0xc>
 800bba2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bba6:	4798      	blx	r3
 800bba8:	3601      	adds	r6, #1
 800bbaa:	e7f2      	b.n	800bb92 <__libc_init_array+0x1e>
 800bbac:	08012f70 	.word	0x08012f70
 800bbb0:	08012f70 	.word	0x08012f70
 800bbb4:	08012f70 	.word	0x08012f70
 800bbb8:	08012f74 	.word	0x08012f74

0800bbbc <malloc>:
 800bbbc:	4b02      	ldr	r3, [pc, #8]	; (800bbc8 <malloc+0xc>)
 800bbbe:	4601      	mov	r1, r0
 800bbc0:	6818      	ldr	r0, [r3, #0]
 800bbc2:	f000 b877 	b.w	800bcb4 <_malloc_r>
 800bbc6:	bf00      	nop
 800bbc8:	20000074 	.word	0x20000074

0800bbcc <memset>:
 800bbcc:	4402      	add	r2, r0
 800bbce:	4603      	mov	r3, r0
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d100      	bne.n	800bbd6 <memset+0xa>
 800bbd4:	4770      	bx	lr
 800bbd6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbda:	e7f9      	b.n	800bbd0 <memset+0x4>

0800bbdc <_free_r>:
 800bbdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbde:	2900      	cmp	r1, #0
 800bbe0:	d044      	beq.n	800bc6c <_free_r+0x90>
 800bbe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bbe6:	9001      	str	r0, [sp, #4]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f1a1 0404 	sub.w	r4, r1, #4
 800bbee:	bfb8      	it	lt
 800bbf0:	18e4      	addlt	r4, r4, r3
 800bbf2:	f001 ff69 	bl	800dac8 <__malloc_lock>
 800bbf6:	4a1e      	ldr	r2, [pc, #120]	; (800bc70 <_free_r+0x94>)
 800bbf8:	9801      	ldr	r0, [sp, #4]
 800bbfa:	6813      	ldr	r3, [r2, #0]
 800bbfc:	b933      	cbnz	r3, 800bc0c <_free_r+0x30>
 800bbfe:	6063      	str	r3, [r4, #4]
 800bc00:	6014      	str	r4, [r2, #0]
 800bc02:	b003      	add	sp, #12
 800bc04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bc08:	f001 bf64 	b.w	800dad4 <__malloc_unlock>
 800bc0c:	42a3      	cmp	r3, r4
 800bc0e:	d908      	bls.n	800bc22 <_free_r+0x46>
 800bc10:	6825      	ldr	r5, [r4, #0]
 800bc12:	1961      	adds	r1, r4, r5
 800bc14:	428b      	cmp	r3, r1
 800bc16:	bf01      	itttt	eq
 800bc18:	6819      	ldreq	r1, [r3, #0]
 800bc1a:	685b      	ldreq	r3, [r3, #4]
 800bc1c:	1949      	addeq	r1, r1, r5
 800bc1e:	6021      	streq	r1, [r4, #0]
 800bc20:	e7ed      	b.n	800bbfe <_free_r+0x22>
 800bc22:	461a      	mov	r2, r3
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	b10b      	cbz	r3, 800bc2c <_free_r+0x50>
 800bc28:	42a3      	cmp	r3, r4
 800bc2a:	d9fa      	bls.n	800bc22 <_free_r+0x46>
 800bc2c:	6811      	ldr	r1, [r2, #0]
 800bc2e:	1855      	adds	r5, r2, r1
 800bc30:	42a5      	cmp	r5, r4
 800bc32:	d10b      	bne.n	800bc4c <_free_r+0x70>
 800bc34:	6824      	ldr	r4, [r4, #0]
 800bc36:	4421      	add	r1, r4
 800bc38:	1854      	adds	r4, r2, r1
 800bc3a:	42a3      	cmp	r3, r4
 800bc3c:	6011      	str	r1, [r2, #0]
 800bc3e:	d1e0      	bne.n	800bc02 <_free_r+0x26>
 800bc40:	681c      	ldr	r4, [r3, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	6053      	str	r3, [r2, #4]
 800bc46:	4421      	add	r1, r4
 800bc48:	6011      	str	r1, [r2, #0]
 800bc4a:	e7da      	b.n	800bc02 <_free_r+0x26>
 800bc4c:	d902      	bls.n	800bc54 <_free_r+0x78>
 800bc4e:	230c      	movs	r3, #12
 800bc50:	6003      	str	r3, [r0, #0]
 800bc52:	e7d6      	b.n	800bc02 <_free_r+0x26>
 800bc54:	6825      	ldr	r5, [r4, #0]
 800bc56:	1961      	adds	r1, r4, r5
 800bc58:	428b      	cmp	r3, r1
 800bc5a:	bf04      	itt	eq
 800bc5c:	6819      	ldreq	r1, [r3, #0]
 800bc5e:	685b      	ldreq	r3, [r3, #4]
 800bc60:	6063      	str	r3, [r4, #4]
 800bc62:	bf04      	itt	eq
 800bc64:	1949      	addeq	r1, r1, r5
 800bc66:	6021      	streq	r1, [r4, #0]
 800bc68:	6054      	str	r4, [r2, #4]
 800bc6a:	e7ca      	b.n	800bc02 <_free_r+0x26>
 800bc6c:	b003      	add	sp, #12
 800bc6e:	bd30      	pop	{r4, r5, pc}
 800bc70:	20000a58 	.word	0x20000a58

0800bc74 <sbrk_aligned>:
 800bc74:	b570      	push	{r4, r5, r6, lr}
 800bc76:	4e0e      	ldr	r6, [pc, #56]	; (800bcb0 <sbrk_aligned+0x3c>)
 800bc78:	460c      	mov	r4, r1
 800bc7a:	6831      	ldr	r1, [r6, #0]
 800bc7c:	4605      	mov	r5, r0
 800bc7e:	b911      	cbnz	r1, 800bc86 <sbrk_aligned+0x12>
 800bc80:	f000 fd84 	bl	800c78c <_sbrk_r>
 800bc84:	6030      	str	r0, [r6, #0]
 800bc86:	4621      	mov	r1, r4
 800bc88:	4628      	mov	r0, r5
 800bc8a:	f000 fd7f 	bl	800c78c <_sbrk_r>
 800bc8e:	1c43      	adds	r3, r0, #1
 800bc90:	d00a      	beq.n	800bca8 <sbrk_aligned+0x34>
 800bc92:	1cc4      	adds	r4, r0, #3
 800bc94:	f024 0403 	bic.w	r4, r4, #3
 800bc98:	42a0      	cmp	r0, r4
 800bc9a:	d007      	beq.n	800bcac <sbrk_aligned+0x38>
 800bc9c:	1a21      	subs	r1, r4, r0
 800bc9e:	4628      	mov	r0, r5
 800bca0:	f000 fd74 	bl	800c78c <_sbrk_r>
 800bca4:	3001      	adds	r0, #1
 800bca6:	d101      	bne.n	800bcac <sbrk_aligned+0x38>
 800bca8:	f04f 34ff 	mov.w	r4, #4294967295
 800bcac:	4620      	mov	r0, r4
 800bcae:	bd70      	pop	{r4, r5, r6, pc}
 800bcb0:	20000a5c 	.word	0x20000a5c

0800bcb4 <_malloc_r>:
 800bcb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcb8:	1ccd      	adds	r5, r1, #3
 800bcba:	f025 0503 	bic.w	r5, r5, #3
 800bcbe:	3508      	adds	r5, #8
 800bcc0:	2d0c      	cmp	r5, #12
 800bcc2:	bf38      	it	cc
 800bcc4:	250c      	movcc	r5, #12
 800bcc6:	2d00      	cmp	r5, #0
 800bcc8:	4607      	mov	r7, r0
 800bcca:	db01      	blt.n	800bcd0 <_malloc_r+0x1c>
 800bccc:	42a9      	cmp	r1, r5
 800bcce:	d905      	bls.n	800bcdc <_malloc_r+0x28>
 800bcd0:	230c      	movs	r3, #12
 800bcd2:	603b      	str	r3, [r7, #0]
 800bcd4:	2600      	movs	r6, #0
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcdc:	4e2e      	ldr	r6, [pc, #184]	; (800bd98 <_malloc_r+0xe4>)
 800bcde:	f001 fef3 	bl	800dac8 <__malloc_lock>
 800bce2:	6833      	ldr	r3, [r6, #0]
 800bce4:	461c      	mov	r4, r3
 800bce6:	bb34      	cbnz	r4, 800bd36 <_malloc_r+0x82>
 800bce8:	4629      	mov	r1, r5
 800bcea:	4638      	mov	r0, r7
 800bcec:	f7ff ffc2 	bl	800bc74 <sbrk_aligned>
 800bcf0:	1c43      	adds	r3, r0, #1
 800bcf2:	4604      	mov	r4, r0
 800bcf4:	d14d      	bne.n	800bd92 <_malloc_r+0xde>
 800bcf6:	6834      	ldr	r4, [r6, #0]
 800bcf8:	4626      	mov	r6, r4
 800bcfa:	2e00      	cmp	r6, #0
 800bcfc:	d140      	bne.n	800bd80 <_malloc_r+0xcc>
 800bcfe:	6823      	ldr	r3, [r4, #0]
 800bd00:	4631      	mov	r1, r6
 800bd02:	4638      	mov	r0, r7
 800bd04:	eb04 0803 	add.w	r8, r4, r3
 800bd08:	f000 fd40 	bl	800c78c <_sbrk_r>
 800bd0c:	4580      	cmp	r8, r0
 800bd0e:	d13a      	bne.n	800bd86 <_malloc_r+0xd2>
 800bd10:	6821      	ldr	r1, [r4, #0]
 800bd12:	3503      	adds	r5, #3
 800bd14:	1a6d      	subs	r5, r5, r1
 800bd16:	f025 0503 	bic.w	r5, r5, #3
 800bd1a:	3508      	adds	r5, #8
 800bd1c:	2d0c      	cmp	r5, #12
 800bd1e:	bf38      	it	cc
 800bd20:	250c      	movcc	r5, #12
 800bd22:	4629      	mov	r1, r5
 800bd24:	4638      	mov	r0, r7
 800bd26:	f7ff ffa5 	bl	800bc74 <sbrk_aligned>
 800bd2a:	3001      	adds	r0, #1
 800bd2c:	d02b      	beq.n	800bd86 <_malloc_r+0xd2>
 800bd2e:	6823      	ldr	r3, [r4, #0]
 800bd30:	442b      	add	r3, r5
 800bd32:	6023      	str	r3, [r4, #0]
 800bd34:	e00e      	b.n	800bd54 <_malloc_r+0xa0>
 800bd36:	6822      	ldr	r2, [r4, #0]
 800bd38:	1b52      	subs	r2, r2, r5
 800bd3a:	d41e      	bmi.n	800bd7a <_malloc_r+0xc6>
 800bd3c:	2a0b      	cmp	r2, #11
 800bd3e:	d916      	bls.n	800bd6e <_malloc_r+0xba>
 800bd40:	1961      	adds	r1, r4, r5
 800bd42:	42a3      	cmp	r3, r4
 800bd44:	6025      	str	r5, [r4, #0]
 800bd46:	bf18      	it	ne
 800bd48:	6059      	strne	r1, [r3, #4]
 800bd4a:	6863      	ldr	r3, [r4, #4]
 800bd4c:	bf08      	it	eq
 800bd4e:	6031      	streq	r1, [r6, #0]
 800bd50:	5162      	str	r2, [r4, r5]
 800bd52:	604b      	str	r3, [r1, #4]
 800bd54:	4638      	mov	r0, r7
 800bd56:	f104 060b 	add.w	r6, r4, #11
 800bd5a:	f001 febb 	bl	800dad4 <__malloc_unlock>
 800bd5e:	f026 0607 	bic.w	r6, r6, #7
 800bd62:	1d23      	adds	r3, r4, #4
 800bd64:	1af2      	subs	r2, r6, r3
 800bd66:	d0b6      	beq.n	800bcd6 <_malloc_r+0x22>
 800bd68:	1b9b      	subs	r3, r3, r6
 800bd6a:	50a3      	str	r3, [r4, r2]
 800bd6c:	e7b3      	b.n	800bcd6 <_malloc_r+0x22>
 800bd6e:	6862      	ldr	r2, [r4, #4]
 800bd70:	42a3      	cmp	r3, r4
 800bd72:	bf0c      	ite	eq
 800bd74:	6032      	streq	r2, [r6, #0]
 800bd76:	605a      	strne	r2, [r3, #4]
 800bd78:	e7ec      	b.n	800bd54 <_malloc_r+0xa0>
 800bd7a:	4623      	mov	r3, r4
 800bd7c:	6864      	ldr	r4, [r4, #4]
 800bd7e:	e7b2      	b.n	800bce6 <_malloc_r+0x32>
 800bd80:	4634      	mov	r4, r6
 800bd82:	6876      	ldr	r6, [r6, #4]
 800bd84:	e7b9      	b.n	800bcfa <_malloc_r+0x46>
 800bd86:	230c      	movs	r3, #12
 800bd88:	603b      	str	r3, [r7, #0]
 800bd8a:	4638      	mov	r0, r7
 800bd8c:	f001 fea2 	bl	800dad4 <__malloc_unlock>
 800bd90:	e7a1      	b.n	800bcd6 <_malloc_r+0x22>
 800bd92:	6025      	str	r5, [r4, #0]
 800bd94:	e7de      	b.n	800bd54 <_malloc_r+0xa0>
 800bd96:	bf00      	nop
 800bd98:	20000a58 	.word	0x20000a58

0800bd9c <__cvt>:
 800bd9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bda0:	ec55 4b10 	vmov	r4, r5, d0
 800bda4:	2d00      	cmp	r5, #0
 800bda6:	460e      	mov	r6, r1
 800bda8:	4619      	mov	r1, r3
 800bdaa:	462b      	mov	r3, r5
 800bdac:	bfbb      	ittet	lt
 800bdae:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bdb2:	461d      	movlt	r5, r3
 800bdb4:	2300      	movge	r3, #0
 800bdb6:	232d      	movlt	r3, #45	; 0x2d
 800bdb8:	700b      	strb	r3, [r1, #0]
 800bdba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bdbc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bdc0:	4691      	mov	r9, r2
 800bdc2:	f023 0820 	bic.w	r8, r3, #32
 800bdc6:	bfbc      	itt	lt
 800bdc8:	4622      	movlt	r2, r4
 800bdca:	4614      	movlt	r4, r2
 800bdcc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bdd0:	d005      	beq.n	800bdde <__cvt+0x42>
 800bdd2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bdd6:	d100      	bne.n	800bdda <__cvt+0x3e>
 800bdd8:	3601      	adds	r6, #1
 800bdda:	2102      	movs	r1, #2
 800bddc:	e000      	b.n	800bde0 <__cvt+0x44>
 800bdde:	2103      	movs	r1, #3
 800bde0:	ab03      	add	r3, sp, #12
 800bde2:	9301      	str	r3, [sp, #4]
 800bde4:	ab02      	add	r3, sp, #8
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	ec45 4b10 	vmov	d0, r4, r5
 800bdec:	4653      	mov	r3, sl
 800bdee:	4632      	mov	r2, r6
 800bdf0:	f000 fe4a 	bl	800ca88 <_dtoa_r>
 800bdf4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bdf8:	4607      	mov	r7, r0
 800bdfa:	d102      	bne.n	800be02 <__cvt+0x66>
 800bdfc:	f019 0f01 	tst.w	r9, #1
 800be00:	d022      	beq.n	800be48 <__cvt+0xac>
 800be02:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800be06:	eb07 0906 	add.w	r9, r7, r6
 800be0a:	d110      	bne.n	800be2e <__cvt+0x92>
 800be0c:	783b      	ldrb	r3, [r7, #0]
 800be0e:	2b30      	cmp	r3, #48	; 0x30
 800be10:	d10a      	bne.n	800be28 <__cvt+0x8c>
 800be12:	2200      	movs	r2, #0
 800be14:	2300      	movs	r3, #0
 800be16:	4620      	mov	r0, r4
 800be18:	4629      	mov	r1, r5
 800be1a:	f7f4 fe7d 	bl	8000b18 <__aeabi_dcmpeq>
 800be1e:	b918      	cbnz	r0, 800be28 <__cvt+0x8c>
 800be20:	f1c6 0601 	rsb	r6, r6, #1
 800be24:	f8ca 6000 	str.w	r6, [sl]
 800be28:	f8da 3000 	ldr.w	r3, [sl]
 800be2c:	4499      	add	r9, r3
 800be2e:	2200      	movs	r2, #0
 800be30:	2300      	movs	r3, #0
 800be32:	4620      	mov	r0, r4
 800be34:	4629      	mov	r1, r5
 800be36:	f7f4 fe6f 	bl	8000b18 <__aeabi_dcmpeq>
 800be3a:	b108      	cbz	r0, 800be40 <__cvt+0xa4>
 800be3c:	f8cd 900c 	str.w	r9, [sp, #12]
 800be40:	2230      	movs	r2, #48	; 0x30
 800be42:	9b03      	ldr	r3, [sp, #12]
 800be44:	454b      	cmp	r3, r9
 800be46:	d307      	bcc.n	800be58 <__cvt+0xbc>
 800be48:	9b03      	ldr	r3, [sp, #12]
 800be4a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be4c:	1bdb      	subs	r3, r3, r7
 800be4e:	4638      	mov	r0, r7
 800be50:	6013      	str	r3, [r2, #0]
 800be52:	b004      	add	sp, #16
 800be54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be58:	1c59      	adds	r1, r3, #1
 800be5a:	9103      	str	r1, [sp, #12]
 800be5c:	701a      	strb	r2, [r3, #0]
 800be5e:	e7f0      	b.n	800be42 <__cvt+0xa6>

0800be60 <__exponent>:
 800be60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be62:	4603      	mov	r3, r0
 800be64:	2900      	cmp	r1, #0
 800be66:	bfb8      	it	lt
 800be68:	4249      	neglt	r1, r1
 800be6a:	f803 2b02 	strb.w	r2, [r3], #2
 800be6e:	bfb4      	ite	lt
 800be70:	222d      	movlt	r2, #45	; 0x2d
 800be72:	222b      	movge	r2, #43	; 0x2b
 800be74:	2909      	cmp	r1, #9
 800be76:	7042      	strb	r2, [r0, #1]
 800be78:	dd2a      	ble.n	800bed0 <__exponent+0x70>
 800be7a:	f10d 0407 	add.w	r4, sp, #7
 800be7e:	46a4      	mov	ip, r4
 800be80:	270a      	movs	r7, #10
 800be82:	46a6      	mov	lr, r4
 800be84:	460a      	mov	r2, r1
 800be86:	fb91 f6f7 	sdiv	r6, r1, r7
 800be8a:	fb07 1516 	mls	r5, r7, r6, r1
 800be8e:	3530      	adds	r5, #48	; 0x30
 800be90:	2a63      	cmp	r2, #99	; 0x63
 800be92:	f104 34ff 	add.w	r4, r4, #4294967295
 800be96:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800be9a:	4631      	mov	r1, r6
 800be9c:	dcf1      	bgt.n	800be82 <__exponent+0x22>
 800be9e:	3130      	adds	r1, #48	; 0x30
 800bea0:	f1ae 0502 	sub.w	r5, lr, #2
 800bea4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bea8:	1c44      	adds	r4, r0, #1
 800beaa:	4629      	mov	r1, r5
 800beac:	4561      	cmp	r1, ip
 800beae:	d30a      	bcc.n	800bec6 <__exponent+0x66>
 800beb0:	f10d 0209 	add.w	r2, sp, #9
 800beb4:	eba2 020e 	sub.w	r2, r2, lr
 800beb8:	4565      	cmp	r5, ip
 800beba:	bf88      	it	hi
 800bebc:	2200      	movhi	r2, #0
 800bebe:	4413      	add	r3, r2
 800bec0:	1a18      	subs	r0, r3, r0
 800bec2:	b003      	add	sp, #12
 800bec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beca:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bece:	e7ed      	b.n	800beac <__exponent+0x4c>
 800bed0:	2330      	movs	r3, #48	; 0x30
 800bed2:	3130      	adds	r1, #48	; 0x30
 800bed4:	7083      	strb	r3, [r0, #2]
 800bed6:	70c1      	strb	r1, [r0, #3]
 800bed8:	1d03      	adds	r3, r0, #4
 800beda:	e7f1      	b.n	800bec0 <__exponent+0x60>

0800bedc <_printf_float>:
 800bedc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bee0:	ed2d 8b02 	vpush	{d8}
 800bee4:	b08d      	sub	sp, #52	; 0x34
 800bee6:	460c      	mov	r4, r1
 800bee8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800beec:	4616      	mov	r6, r2
 800beee:	461f      	mov	r7, r3
 800bef0:	4605      	mov	r5, r0
 800bef2:	f001 fd6f 	bl	800d9d4 <_localeconv_r>
 800bef6:	f8d0 a000 	ldr.w	sl, [r0]
 800befa:	4650      	mov	r0, sl
 800befc:	f7f4 f990 	bl	8000220 <strlen>
 800bf00:	2300      	movs	r3, #0
 800bf02:	930a      	str	r3, [sp, #40]	; 0x28
 800bf04:	6823      	ldr	r3, [r4, #0]
 800bf06:	9305      	str	r3, [sp, #20]
 800bf08:	f8d8 3000 	ldr.w	r3, [r8]
 800bf0c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bf10:	3307      	adds	r3, #7
 800bf12:	f023 0307 	bic.w	r3, r3, #7
 800bf16:	f103 0208 	add.w	r2, r3, #8
 800bf1a:	f8c8 2000 	str.w	r2, [r8]
 800bf1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf22:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bf26:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bf2a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf2e:	9307      	str	r3, [sp, #28]
 800bf30:	f8cd 8018 	str.w	r8, [sp, #24]
 800bf34:	ee08 0a10 	vmov	s16, r0
 800bf38:	4b9f      	ldr	r3, [pc, #636]	; (800c1b8 <_printf_float+0x2dc>)
 800bf3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf3e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf42:	f7f4 fe1b 	bl	8000b7c <__aeabi_dcmpun>
 800bf46:	bb88      	cbnz	r0, 800bfac <_printf_float+0xd0>
 800bf48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf4c:	4b9a      	ldr	r3, [pc, #616]	; (800c1b8 <_printf_float+0x2dc>)
 800bf4e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf52:	f7f4 fdf5 	bl	8000b40 <__aeabi_dcmple>
 800bf56:	bb48      	cbnz	r0, 800bfac <_printf_float+0xd0>
 800bf58:	2200      	movs	r2, #0
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	4640      	mov	r0, r8
 800bf5e:	4649      	mov	r1, r9
 800bf60:	f7f4 fde4 	bl	8000b2c <__aeabi_dcmplt>
 800bf64:	b110      	cbz	r0, 800bf6c <_printf_float+0x90>
 800bf66:	232d      	movs	r3, #45	; 0x2d
 800bf68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf6c:	4b93      	ldr	r3, [pc, #588]	; (800c1bc <_printf_float+0x2e0>)
 800bf6e:	4894      	ldr	r0, [pc, #592]	; (800c1c0 <_printf_float+0x2e4>)
 800bf70:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bf74:	bf94      	ite	ls
 800bf76:	4698      	movls	r8, r3
 800bf78:	4680      	movhi	r8, r0
 800bf7a:	2303      	movs	r3, #3
 800bf7c:	6123      	str	r3, [r4, #16]
 800bf7e:	9b05      	ldr	r3, [sp, #20]
 800bf80:	f023 0204 	bic.w	r2, r3, #4
 800bf84:	6022      	str	r2, [r4, #0]
 800bf86:	f04f 0900 	mov.w	r9, #0
 800bf8a:	9700      	str	r7, [sp, #0]
 800bf8c:	4633      	mov	r3, r6
 800bf8e:	aa0b      	add	r2, sp, #44	; 0x2c
 800bf90:	4621      	mov	r1, r4
 800bf92:	4628      	mov	r0, r5
 800bf94:	f000 f9d8 	bl	800c348 <_printf_common>
 800bf98:	3001      	adds	r0, #1
 800bf9a:	f040 8090 	bne.w	800c0be <_printf_float+0x1e2>
 800bf9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa2:	b00d      	add	sp, #52	; 0x34
 800bfa4:	ecbd 8b02 	vpop	{d8}
 800bfa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bfac:	4642      	mov	r2, r8
 800bfae:	464b      	mov	r3, r9
 800bfb0:	4640      	mov	r0, r8
 800bfb2:	4649      	mov	r1, r9
 800bfb4:	f7f4 fde2 	bl	8000b7c <__aeabi_dcmpun>
 800bfb8:	b140      	cbz	r0, 800bfcc <_printf_float+0xf0>
 800bfba:	464b      	mov	r3, r9
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	bfbc      	itt	lt
 800bfc0:	232d      	movlt	r3, #45	; 0x2d
 800bfc2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bfc6:	487f      	ldr	r0, [pc, #508]	; (800c1c4 <_printf_float+0x2e8>)
 800bfc8:	4b7f      	ldr	r3, [pc, #508]	; (800c1c8 <_printf_float+0x2ec>)
 800bfca:	e7d1      	b.n	800bf70 <_printf_float+0x94>
 800bfcc:	6863      	ldr	r3, [r4, #4]
 800bfce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bfd2:	9206      	str	r2, [sp, #24]
 800bfd4:	1c5a      	adds	r2, r3, #1
 800bfd6:	d13f      	bne.n	800c058 <_printf_float+0x17c>
 800bfd8:	2306      	movs	r3, #6
 800bfda:	6063      	str	r3, [r4, #4]
 800bfdc:	9b05      	ldr	r3, [sp, #20]
 800bfde:	6861      	ldr	r1, [r4, #4]
 800bfe0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bfe4:	2300      	movs	r3, #0
 800bfe6:	9303      	str	r3, [sp, #12]
 800bfe8:	ab0a      	add	r3, sp, #40	; 0x28
 800bfea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bfee:	ab09      	add	r3, sp, #36	; 0x24
 800bff0:	ec49 8b10 	vmov	d0, r8, r9
 800bff4:	9300      	str	r3, [sp, #0]
 800bff6:	6022      	str	r2, [r4, #0]
 800bff8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bffc:	4628      	mov	r0, r5
 800bffe:	f7ff fecd 	bl	800bd9c <__cvt>
 800c002:	9b06      	ldr	r3, [sp, #24]
 800c004:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c006:	2b47      	cmp	r3, #71	; 0x47
 800c008:	4680      	mov	r8, r0
 800c00a:	d108      	bne.n	800c01e <_printf_float+0x142>
 800c00c:	1cc8      	adds	r0, r1, #3
 800c00e:	db02      	blt.n	800c016 <_printf_float+0x13a>
 800c010:	6863      	ldr	r3, [r4, #4]
 800c012:	4299      	cmp	r1, r3
 800c014:	dd41      	ble.n	800c09a <_printf_float+0x1be>
 800c016:	f1ab 0b02 	sub.w	fp, fp, #2
 800c01a:	fa5f fb8b 	uxtb.w	fp, fp
 800c01e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c022:	d820      	bhi.n	800c066 <_printf_float+0x18a>
 800c024:	3901      	subs	r1, #1
 800c026:	465a      	mov	r2, fp
 800c028:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c02c:	9109      	str	r1, [sp, #36]	; 0x24
 800c02e:	f7ff ff17 	bl	800be60 <__exponent>
 800c032:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c034:	1813      	adds	r3, r2, r0
 800c036:	2a01      	cmp	r2, #1
 800c038:	4681      	mov	r9, r0
 800c03a:	6123      	str	r3, [r4, #16]
 800c03c:	dc02      	bgt.n	800c044 <_printf_float+0x168>
 800c03e:	6822      	ldr	r2, [r4, #0]
 800c040:	07d2      	lsls	r2, r2, #31
 800c042:	d501      	bpl.n	800c048 <_printf_float+0x16c>
 800c044:	3301      	adds	r3, #1
 800c046:	6123      	str	r3, [r4, #16]
 800c048:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d09c      	beq.n	800bf8a <_printf_float+0xae>
 800c050:	232d      	movs	r3, #45	; 0x2d
 800c052:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c056:	e798      	b.n	800bf8a <_printf_float+0xae>
 800c058:	9a06      	ldr	r2, [sp, #24]
 800c05a:	2a47      	cmp	r2, #71	; 0x47
 800c05c:	d1be      	bne.n	800bfdc <_printf_float+0x100>
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d1bc      	bne.n	800bfdc <_printf_float+0x100>
 800c062:	2301      	movs	r3, #1
 800c064:	e7b9      	b.n	800bfda <_printf_float+0xfe>
 800c066:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c06a:	d118      	bne.n	800c09e <_printf_float+0x1c2>
 800c06c:	2900      	cmp	r1, #0
 800c06e:	6863      	ldr	r3, [r4, #4]
 800c070:	dd0b      	ble.n	800c08a <_printf_float+0x1ae>
 800c072:	6121      	str	r1, [r4, #16]
 800c074:	b913      	cbnz	r3, 800c07c <_printf_float+0x1a0>
 800c076:	6822      	ldr	r2, [r4, #0]
 800c078:	07d0      	lsls	r0, r2, #31
 800c07a:	d502      	bpl.n	800c082 <_printf_float+0x1a6>
 800c07c:	3301      	adds	r3, #1
 800c07e:	440b      	add	r3, r1
 800c080:	6123      	str	r3, [r4, #16]
 800c082:	65a1      	str	r1, [r4, #88]	; 0x58
 800c084:	f04f 0900 	mov.w	r9, #0
 800c088:	e7de      	b.n	800c048 <_printf_float+0x16c>
 800c08a:	b913      	cbnz	r3, 800c092 <_printf_float+0x1b6>
 800c08c:	6822      	ldr	r2, [r4, #0]
 800c08e:	07d2      	lsls	r2, r2, #31
 800c090:	d501      	bpl.n	800c096 <_printf_float+0x1ba>
 800c092:	3302      	adds	r3, #2
 800c094:	e7f4      	b.n	800c080 <_printf_float+0x1a4>
 800c096:	2301      	movs	r3, #1
 800c098:	e7f2      	b.n	800c080 <_printf_float+0x1a4>
 800c09a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c09e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0a0:	4299      	cmp	r1, r3
 800c0a2:	db05      	blt.n	800c0b0 <_printf_float+0x1d4>
 800c0a4:	6823      	ldr	r3, [r4, #0]
 800c0a6:	6121      	str	r1, [r4, #16]
 800c0a8:	07d8      	lsls	r0, r3, #31
 800c0aa:	d5ea      	bpl.n	800c082 <_printf_float+0x1a6>
 800c0ac:	1c4b      	adds	r3, r1, #1
 800c0ae:	e7e7      	b.n	800c080 <_printf_float+0x1a4>
 800c0b0:	2900      	cmp	r1, #0
 800c0b2:	bfd4      	ite	le
 800c0b4:	f1c1 0202 	rsble	r2, r1, #2
 800c0b8:	2201      	movgt	r2, #1
 800c0ba:	4413      	add	r3, r2
 800c0bc:	e7e0      	b.n	800c080 <_printf_float+0x1a4>
 800c0be:	6823      	ldr	r3, [r4, #0]
 800c0c0:	055a      	lsls	r2, r3, #21
 800c0c2:	d407      	bmi.n	800c0d4 <_printf_float+0x1f8>
 800c0c4:	6923      	ldr	r3, [r4, #16]
 800c0c6:	4642      	mov	r2, r8
 800c0c8:	4631      	mov	r1, r6
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	47b8      	blx	r7
 800c0ce:	3001      	adds	r0, #1
 800c0d0:	d12c      	bne.n	800c12c <_printf_float+0x250>
 800c0d2:	e764      	b.n	800bf9e <_printf_float+0xc2>
 800c0d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c0d8:	f240 80e0 	bls.w	800c29c <_printf_float+0x3c0>
 800c0dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	f7f4 fd18 	bl	8000b18 <__aeabi_dcmpeq>
 800c0e8:	2800      	cmp	r0, #0
 800c0ea:	d034      	beq.n	800c156 <_printf_float+0x27a>
 800c0ec:	4a37      	ldr	r2, [pc, #220]	; (800c1cc <_printf_float+0x2f0>)
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	4631      	mov	r1, r6
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	47b8      	blx	r7
 800c0f6:	3001      	adds	r0, #1
 800c0f8:	f43f af51 	beq.w	800bf9e <_printf_float+0xc2>
 800c0fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c100:	429a      	cmp	r2, r3
 800c102:	db02      	blt.n	800c10a <_printf_float+0x22e>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	07d8      	lsls	r0, r3, #31
 800c108:	d510      	bpl.n	800c12c <_printf_float+0x250>
 800c10a:	ee18 3a10 	vmov	r3, s16
 800c10e:	4652      	mov	r2, sl
 800c110:	4631      	mov	r1, r6
 800c112:	4628      	mov	r0, r5
 800c114:	47b8      	blx	r7
 800c116:	3001      	adds	r0, #1
 800c118:	f43f af41 	beq.w	800bf9e <_printf_float+0xc2>
 800c11c:	f04f 0800 	mov.w	r8, #0
 800c120:	f104 091a 	add.w	r9, r4, #26
 800c124:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c126:	3b01      	subs	r3, #1
 800c128:	4543      	cmp	r3, r8
 800c12a:	dc09      	bgt.n	800c140 <_printf_float+0x264>
 800c12c:	6823      	ldr	r3, [r4, #0]
 800c12e:	079b      	lsls	r3, r3, #30
 800c130:	f100 8105 	bmi.w	800c33e <_printf_float+0x462>
 800c134:	68e0      	ldr	r0, [r4, #12]
 800c136:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c138:	4298      	cmp	r0, r3
 800c13a:	bfb8      	it	lt
 800c13c:	4618      	movlt	r0, r3
 800c13e:	e730      	b.n	800bfa2 <_printf_float+0xc6>
 800c140:	2301      	movs	r3, #1
 800c142:	464a      	mov	r2, r9
 800c144:	4631      	mov	r1, r6
 800c146:	4628      	mov	r0, r5
 800c148:	47b8      	blx	r7
 800c14a:	3001      	adds	r0, #1
 800c14c:	f43f af27 	beq.w	800bf9e <_printf_float+0xc2>
 800c150:	f108 0801 	add.w	r8, r8, #1
 800c154:	e7e6      	b.n	800c124 <_printf_float+0x248>
 800c156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c158:	2b00      	cmp	r3, #0
 800c15a:	dc39      	bgt.n	800c1d0 <_printf_float+0x2f4>
 800c15c:	4a1b      	ldr	r2, [pc, #108]	; (800c1cc <_printf_float+0x2f0>)
 800c15e:	2301      	movs	r3, #1
 800c160:	4631      	mov	r1, r6
 800c162:	4628      	mov	r0, r5
 800c164:	47b8      	blx	r7
 800c166:	3001      	adds	r0, #1
 800c168:	f43f af19 	beq.w	800bf9e <_printf_float+0xc2>
 800c16c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c170:	4313      	orrs	r3, r2
 800c172:	d102      	bne.n	800c17a <_printf_float+0x29e>
 800c174:	6823      	ldr	r3, [r4, #0]
 800c176:	07d9      	lsls	r1, r3, #31
 800c178:	d5d8      	bpl.n	800c12c <_printf_float+0x250>
 800c17a:	ee18 3a10 	vmov	r3, s16
 800c17e:	4652      	mov	r2, sl
 800c180:	4631      	mov	r1, r6
 800c182:	4628      	mov	r0, r5
 800c184:	47b8      	blx	r7
 800c186:	3001      	adds	r0, #1
 800c188:	f43f af09 	beq.w	800bf9e <_printf_float+0xc2>
 800c18c:	f04f 0900 	mov.w	r9, #0
 800c190:	f104 0a1a 	add.w	sl, r4, #26
 800c194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c196:	425b      	negs	r3, r3
 800c198:	454b      	cmp	r3, r9
 800c19a:	dc01      	bgt.n	800c1a0 <_printf_float+0x2c4>
 800c19c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c19e:	e792      	b.n	800c0c6 <_printf_float+0x1ea>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	4652      	mov	r2, sl
 800c1a4:	4631      	mov	r1, r6
 800c1a6:	4628      	mov	r0, r5
 800c1a8:	47b8      	blx	r7
 800c1aa:	3001      	adds	r0, #1
 800c1ac:	f43f aef7 	beq.w	800bf9e <_printf_float+0xc2>
 800c1b0:	f109 0901 	add.w	r9, r9, #1
 800c1b4:	e7ee      	b.n	800c194 <_printf_float+0x2b8>
 800c1b6:	bf00      	nop
 800c1b8:	7fefffff 	.word	0x7fefffff
 800c1bc:	08012b60 	.word	0x08012b60
 800c1c0:	08012b64 	.word	0x08012b64
 800c1c4:	08012b6c 	.word	0x08012b6c
 800c1c8:	08012b68 	.word	0x08012b68
 800c1cc:	08012b70 	.word	0x08012b70
 800c1d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1d4:	429a      	cmp	r2, r3
 800c1d6:	bfa8      	it	ge
 800c1d8:	461a      	movge	r2, r3
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	4691      	mov	r9, r2
 800c1de:	dc37      	bgt.n	800c250 <_printf_float+0x374>
 800c1e0:	f04f 0b00 	mov.w	fp, #0
 800c1e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c1e8:	f104 021a 	add.w	r2, r4, #26
 800c1ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c1ee:	9305      	str	r3, [sp, #20]
 800c1f0:	eba3 0309 	sub.w	r3, r3, r9
 800c1f4:	455b      	cmp	r3, fp
 800c1f6:	dc33      	bgt.n	800c260 <_printf_float+0x384>
 800c1f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	db3b      	blt.n	800c278 <_printf_float+0x39c>
 800c200:	6823      	ldr	r3, [r4, #0]
 800c202:	07da      	lsls	r2, r3, #31
 800c204:	d438      	bmi.n	800c278 <_printf_float+0x39c>
 800c206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c208:	9a05      	ldr	r2, [sp, #20]
 800c20a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c20c:	1a9a      	subs	r2, r3, r2
 800c20e:	eba3 0901 	sub.w	r9, r3, r1
 800c212:	4591      	cmp	r9, r2
 800c214:	bfa8      	it	ge
 800c216:	4691      	movge	r9, r2
 800c218:	f1b9 0f00 	cmp.w	r9, #0
 800c21c:	dc35      	bgt.n	800c28a <_printf_float+0x3ae>
 800c21e:	f04f 0800 	mov.w	r8, #0
 800c222:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c226:	f104 0a1a 	add.w	sl, r4, #26
 800c22a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c22e:	1a9b      	subs	r3, r3, r2
 800c230:	eba3 0309 	sub.w	r3, r3, r9
 800c234:	4543      	cmp	r3, r8
 800c236:	f77f af79 	ble.w	800c12c <_printf_float+0x250>
 800c23a:	2301      	movs	r3, #1
 800c23c:	4652      	mov	r2, sl
 800c23e:	4631      	mov	r1, r6
 800c240:	4628      	mov	r0, r5
 800c242:	47b8      	blx	r7
 800c244:	3001      	adds	r0, #1
 800c246:	f43f aeaa 	beq.w	800bf9e <_printf_float+0xc2>
 800c24a:	f108 0801 	add.w	r8, r8, #1
 800c24e:	e7ec      	b.n	800c22a <_printf_float+0x34e>
 800c250:	4613      	mov	r3, r2
 800c252:	4631      	mov	r1, r6
 800c254:	4642      	mov	r2, r8
 800c256:	4628      	mov	r0, r5
 800c258:	47b8      	blx	r7
 800c25a:	3001      	adds	r0, #1
 800c25c:	d1c0      	bne.n	800c1e0 <_printf_float+0x304>
 800c25e:	e69e      	b.n	800bf9e <_printf_float+0xc2>
 800c260:	2301      	movs	r3, #1
 800c262:	4631      	mov	r1, r6
 800c264:	4628      	mov	r0, r5
 800c266:	9205      	str	r2, [sp, #20]
 800c268:	47b8      	blx	r7
 800c26a:	3001      	adds	r0, #1
 800c26c:	f43f ae97 	beq.w	800bf9e <_printf_float+0xc2>
 800c270:	9a05      	ldr	r2, [sp, #20]
 800c272:	f10b 0b01 	add.w	fp, fp, #1
 800c276:	e7b9      	b.n	800c1ec <_printf_float+0x310>
 800c278:	ee18 3a10 	vmov	r3, s16
 800c27c:	4652      	mov	r2, sl
 800c27e:	4631      	mov	r1, r6
 800c280:	4628      	mov	r0, r5
 800c282:	47b8      	blx	r7
 800c284:	3001      	adds	r0, #1
 800c286:	d1be      	bne.n	800c206 <_printf_float+0x32a>
 800c288:	e689      	b.n	800bf9e <_printf_float+0xc2>
 800c28a:	9a05      	ldr	r2, [sp, #20]
 800c28c:	464b      	mov	r3, r9
 800c28e:	4442      	add	r2, r8
 800c290:	4631      	mov	r1, r6
 800c292:	4628      	mov	r0, r5
 800c294:	47b8      	blx	r7
 800c296:	3001      	adds	r0, #1
 800c298:	d1c1      	bne.n	800c21e <_printf_float+0x342>
 800c29a:	e680      	b.n	800bf9e <_printf_float+0xc2>
 800c29c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c29e:	2a01      	cmp	r2, #1
 800c2a0:	dc01      	bgt.n	800c2a6 <_printf_float+0x3ca>
 800c2a2:	07db      	lsls	r3, r3, #31
 800c2a4:	d538      	bpl.n	800c318 <_printf_float+0x43c>
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	4642      	mov	r2, r8
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	4628      	mov	r0, r5
 800c2ae:	47b8      	blx	r7
 800c2b0:	3001      	adds	r0, #1
 800c2b2:	f43f ae74 	beq.w	800bf9e <_printf_float+0xc2>
 800c2b6:	ee18 3a10 	vmov	r3, s16
 800c2ba:	4652      	mov	r2, sl
 800c2bc:	4631      	mov	r1, r6
 800c2be:	4628      	mov	r0, r5
 800c2c0:	47b8      	blx	r7
 800c2c2:	3001      	adds	r0, #1
 800c2c4:	f43f ae6b 	beq.w	800bf9e <_printf_float+0xc2>
 800c2c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c2cc:	2200      	movs	r2, #0
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	f7f4 fc22 	bl	8000b18 <__aeabi_dcmpeq>
 800c2d4:	b9d8      	cbnz	r0, 800c30e <_printf_float+0x432>
 800c2d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2d8:	f108 0201 	add.w	r2, r8, #1
 800c2dc:	3b01      	subs	r3, #1
 800c2de:	4631      	mov	r1, r6
 800c2e0:	4628      	mov	r0, r5
 800c2e2:	47b8      	blx	r7
 800c2e4:	3001      	adds	r0, #1
 800c2e6:	d10e      	bne.n	800c306 <_printf_float+0x42a>
 800c2e8:	e659      	b.n	800bf9e <_printf_float+0xc2>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	4652      	mov	r2, sl
 800c2ee:	4631      	mov	r1, r6
 800c2f0:	4628      	mov	r0, r5
 800c2f2:	47b8      	blx	r7
 800c2f4:	3001      	adds	r0, #1
 800c2f6:	f43f ae52 	beq.w	800bf9e <_printf_float+0xc2>
 800c2fa:	f108 0801 	add.w	r8, r8, #1
 800c2fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c300:	3b01      	subs	r3, #1
 800c302:	4543      	cmp	r3, r8
 800c304:	dcf1      	bgt.n	800c2ea <_printf_float+0x40e>
 800c306:	464b      	mov	r3, r9
 800c308:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c30c:	e6dc      	b.n	800c0c8 <_printf_float+0x1ec>
 800c30e:	f04f 0800 	mov.w	r8, #0
 800c312:	f104 0a1a 	add.w	sl, r4, #26
 800c316:	e7f2      	b.n	800c2fe <_printf_float+0x422>
 800c318:	2301      	movs	r3, #1
 800c31a:	4642      	mov	r2, r8
 800c31c:	e7df      	b.n	800c2de <_printf_float+0x402>
 800c31e:	2301      	movs	r3, #1
 800c320:	464a      	mov	r2, r9
 800c322:	4631      	mov	r1, r6
 800c324:	4628      	mov	r0, r5
 800c326:	47b8      	blx	r7
 800c328:	3001      	adds	r0, #1
 800c32a:	f43f ae38 	beq.w	800bf9e <_printf_float+0xc2>
 800c32e:	f108 0801 	add.w	r8, r8, #1
 800c332:	68e3      	ldr	r3, [r4, #12]
 800c334:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c336:	1a5b      	subs	r3, r3, r1
 800c338:	4543      	cmp	r3, r8
 800c33a:	dcf0      	bgt.n	800c31e <_printf_float+0x442>
 800c33c:	e6fa      	b.n	800c134 <_printf_float+0x258>
 800c33e:	f04f 0800 	mov.w	r8, #0
 800c342:	f104 0919 	add.w	r9, r4, #25
 800c346:	e7f4      	b.n	800c332 <_printf_float+0x456>

0800c348 <_printf_common>:
 800c348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c34c:	4616      	mov	r6, r2
 800c34e:	4699      	mov	r9, r3
 800c350:	688a      	ldr	r2, [r1, #8]
 800c352:	690b      	ldr	r3, [r1, #16]
 800c354:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c358:	4293      	cmp	r3, r2
 800c35a:	bfb8      	it	lt
 800c35c:	4613      	movlt	r3, r2
 800c35e:	6033      	str	r3, [r6, #0]
 800c360:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c364:	4607      	mov	r7, r0
 800c366:	460c      	mov	r4, r1
 800c368:	b10a      	cbz	r2, 800c36e <_printf_common+0x26>
 800c36a:	3301      	adds	r3, #1
 800c36c:	6033      	str	r3, [r6, #0]
 800c36e:	6823      	ldr	r3, [r4, #0]
 800c370:	0699      	lsls	r1, r3, #26
 800c372:	bf42      	ittt	mi
 800c374:	6833      	ldrmi	r3, [r6, #0]
 800c376:	3302      	addmi	r3, #2
 800c378:	6033      	strmi	r3, [r6, #0]
 800c37a:	6825      	ldr	r5, [r4, #0]
 800c37c:	f015 0506 	ands.w	r5, r5, #6
 800c380:	d106      	bne.n	800c390 <_printf_common+0x48>
 800c382:	f104 0a19 	add.w	sl, r4, #25
 800c386:	68e3      	ldr	r3, [r4, #12]
 800c388:	6832      	ldr	r2, [r6, #0]
 800c38a:	1a9b      	subs	r3, r3, r2
 800c38c:	42ab      	cmp	r3, r5
 800c38e:	dc26      	bgt.n	800c3de <_printf_common+0x96>
 800c390:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c394:	1e13      	subs	r3, r2, #0
 800c396:	6822      	ldr	r2, [r4, #0]
 800c398:	bf18      	it	ne
 800c39a:	2301      	movne	r3, #1
 800c39c:	0692      	lsls	r2, r2, #26
 800c39e:	d42b      	bmi.n	800c3f8 <_printf_common+0xb0>
 800c3a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c3a4:	4649      	mov	r1, r9
 800c3a6:	4638      	mov	r0, r7
 800c3a8:	47c0      	blx	r8
 800c3aa:	3001      	adds	r0, #1
 800c3ac:	d01e      	beq.n	800c3ec <_printf_common+0xa4>
 800c3ae:	6823      	ldr	r3, [r4, #0]
 800c3b0:	68e5      	ldr	r5, [r4, #12]
 800c3b2:	6832      	ldr	r2, [r6, #0]
 800c3b4:	f003 0306 	and.w	r3, r3, #6
 800c3b8:	2b04      	cmp	r3, #4
 800c3ba:	bf08      	it	eq
 800c3bc:	1aad      	subeq	r5, r5, r2
 800c3be:	68a3      	ldr	r3, [r4, #8]
 800c3c0:	6922      	ldr	r2, [r4, #16]
 800c3c2:	bf0c      	ite	eq
 800c3c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c3c8:	2500      	movne	r5, #0
 800c3ca:	4293      	cmp	r3, r2
 800c3cc:	bfc4      	itt	gt
 800c3ce:	1a9b      	subgt	r3, r3, r2
 800c3d0:	18ed      	addgt	r5, r5, r3
 800c3d2:	2600      	movs	r6, #0
 800c3d4:	341a      	adds	r4, #26
 800c3d6:	42b5      	cmp	r5, r6
 800c3d8:	d11a      	bne.n	800c410 <_printf_common+0xc8>
 800c3da:	2000      	movs	r0, #0
 800c3dc:	e008      	b.n	800c3f0 <_printf_common+0xa8>
 800c3de:	2301      	movs	r3, #1
 800c3e0:	4652      	mov	r2, sl
 800c3e2:	4649      	mov	r1, r9
 800c3e4:	4638      	mov	r0, r7
 800c3e6:	47c0      	blx	r8
 800c3e8:	3001      	adds	r0, #1
 800c3ea:	d103      	bne.n	800c3f4 <_printf_common+0xac>
 800c3ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f4:	3501      	adds	r5, #1
 800c3f6:	e7c6      	b.n	800c386 <_printf_common+0x3e>
 800c3f8:	18e1      	adds	r1, r4, r3
 800c3fa:	1c5a      	adds	r2, r3, #1
 800c3fc:	2030      	movs	r0, #48	; 0x30
 800c3fe:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c402:	4422      	add	r2, r4
 800c404:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c408:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c40c:	3302      	adds	r3, #2
 800c40e:	e7c7      	b.n	800c3a0 <_printf_common+0x58>
 800c410:	2301      	movs	r3, #1
 800c412:	4622      	mov	r2, r4
 800c414:	4649      	mov	r1, r9
 800c416:	4638      	mov	r0, r7
 800c418:	47c0      	blx	r8
 800c41a:	3001      	adds	r0, #1
 800c41c:	d0e6      	beq.n	800c3ec <_printf_common+0xa4>
 800c41e:	3601      	adds	r6, #1
 800c420:	e7d9      	b.n	800c3d6 <_printf_common+0x8e>
	...

0800c424 <_printf_i>:
 800c424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c428:	7e0f      	ldrb	r7, [r1, #24]
 800c42a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c42c:	2f78      	cmp	r7, #120	; 0x78
 800c42e:	4691      	mov	r9, r2
 800c430:	4680      	mov	r8, r0
 800c432:	460c      	mov	r4, r1
 800c434:	469a      	mov	sl, r3
 800c436:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c43a:	d807      	bhi.n	800c44c <_printf_i+0x28>
 800c43c:	2f62      	cmp	r7, #98	; 0x62
 800c43e:	d80a      	bhi.n	800c456 <_printf_i+0x32>
 800c440:	2f00      	cmp	r7, #0
 800c442:	f000 80d8 	beq.w	800c5f6 <_printf_i+0x1d2>
 800c446:	2f58      	cmp	r7, #88	; 0x58
 800c448:	f000 80a3 	beq.w	800c592 <_printf_i+0x16e>
 800c44c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c450:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c454:	e03a      	b.n	800c4cc <_printf_i+0xa8>
 800c456:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c45a:	2b15      	cmp	r3, #21
 800c45c:	d8f6      	bhi.n	800c44c <_printf_i+0x28>
 800c45e:	a101      	add	r1, pc, #4	; (adr r1, 800c464 <_printf_i+0x40>)
 800c460:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c464:	0800c4bd 	.word	0x0800c4bd
 800c468:	0800c4d1 	.word	0x0800c4d1
 800c46c:	0800c44d 	.word	0x0800c44d
 800c470:	0800c44d 	.word	0x0800c44d
 800c474:	0800c44d 	.word	0x0800c44d
 800c478:	0800c44d 	.word	0x0800c44d
 800c47c:	0800c4d1 	.word	0x0800c4d1
 800c480:	0800c44d 	.word	0x0800c44d
 800c484:	0800c44d 	.word	0x0800c44d
 800c488:	0800c44d 	.word	0x0800c44d
 800c48c:	0800c44d 	.word	0x0800c44d
 800c490:	0800c5dd 	.word	0x0800c5dd
 800c494:	0800c501 	.word	0x0800c501
 800c498:	0800c5bf 	.word	0x0800c5bf
 800c49c:	0800c44d 	.word	0x0800c44d
 800c4a0:	0800c44d 	.word	0x0800c44d
 800c4a4:	0800c5ff 	.word	0x0800c5ff
 800c4a8:	0800c44d 	.word	0x0800c44d
 800c4ac:	0800c501 	.word	0x0800c501
 800c4b0:	0800c44d 	.word	0x0800c44d
 800c4b4:	0800c44d 	.word	0x0800c44d
 800c4b8:	0800c5c7 	.word	0x0800c5c7
 800c4bc:	682b      	ldr	r3, [r5, #0]
 800c4be:	1d1a      	adds	r2, r3, #4
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	602a      	str	r2, [r5, #0]
 800c4c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c4c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	e0a3      	b.n	800c618 <_printf_i+0x1f4>
 800c4d0:	6820      	ldr	r0, [r4, #0]
 800c4d2:	6829      	ldr	r1, [r5, #0]
 800c4d4:	0606      	lsls	r6, r0, #24
 800c4d6:	f101 0304 	add.w	r3, r1, #4
 800c4da:	d50a      	bpl.n	800c4f2 <_printf_i+0xce>
 800c4dc:	680e      	ldr	r6, [r1, #0]
 800c4de:	602b      	str	r3, [r5, #0]
 800c4e0:	2e00      	cmp	r6, #0
 800c4e2:	da03      	bge.n	800c4ec <_printf_i+0xc8>
 800c4e4:	232d      	movs	r3, #45	; 0x2d
 800c4e6:	4276      	negs	r6, r6
 800c4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4ec:	485e      	ldr	r0, [pc, #376]	; (800c668 <_printf_i+0x244>)
 800c4ee:	230a      	movs	r3, #10
 800c4f0:	e019      	b.n	800c526 <_printf_i+0x102>
 800c4f2:	680e      	ldr	r6, [r1, #0]
 800c4f4:	602b      	str	r3, [r5, #0]
 800c4f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c4fa:	bf18      	it	ne
 800c4fc:	b236      	sxthne	r6, r6
 800c4fe:	e7ef      	b.n	800c4e0 <_printf_i+0xbc>
 800c500:	682b      	ldr	r3, [r5, #0]
 800c502:	6820      	ldr	r0, [r4, #0]
 800c504:	1d19      	adds	r1, r3, #4
 800c506:	6029      	str	r1, [r5, #0]
 800c508:	0601      	lsls	r1, r0, #24
 800c50a:	d501      	bpl.n	800c510 <_printf_i+0xec>
 800c50c:	681e      	ldr	r6, [r3, #0]
 800c50e:	e002      	b.n	800c516 <_printf_i+0xf2>
 800c510:	0646      	lsls	r6, r0, #25
 800c512:	d5fb      	bpl.n	800c50c <_printf_i+0xe8>
 800c514:	881e      	ldrh	r6, [r3, #0]
 800c516:	4854      	ldr	r0, [pc, #336]	; (800c668 <_printf_i+0x244>)
 800c518:	2f6f      	cmp	r7, #111	; 0x6f
 800c51a:	bf0c      	ite	eq
 800c51c:	2308      	moveq	r3, #8
 800c51e:	230a      	movne	r3, #10
 800c520:	2100      	movs	r1, #0
 800c522:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c526:	6865      	ldr	r5, [r4, #4]
 800c528:	60a5      	str	r5, [r4, #8]
 800c52a:	2d00      	cmp	r5, #0
 800c52c:	bfa2      	ittt	ge
 800c52e:	6821      	ldrge	r1, [r4, #0]
 800c530:	f021 0104 	bicge.w	r1, r1, #4
 800c534:	6021      	strge	r1, [r4, #0]
 800c536:	b90e      	cbnz	r6, 800c53c <_printf_i+0x118>
 800c538:	2d00      	cmp	r5, #0
 800c53a:	d04d      	beq.n	800c5d8 <_printf_i+0x1b4>
 800c53c:	4615      	mov	r5, r2
 800c53e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c542:	fb03 6711 	mls	r7, r3, r1, r6
 800c546:	5dc7      	ldrb	r7, [r0, r7]
 800c548:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c54c:	4637      	mov	r7, r6
 800c54e:	42bb      	cmp	r3, r7
 800c550:	460e      	mov	r6, r1
 800c552:	d9f4      	bls.n	800c53e <_printf_i+0x11a>
 800c554:	2b08      	cmp	r3, #8
 800c556:	d10b      	bne.n	800c570 <_printf_i+0x14c>
 800c558:	6823      	ldr	r3, [r4, #0]
 800c55a:	07de      	lsls	r6, r3, #31
 800c55c:	d508      	bpl.n	800c570 <_printf_i+0x14c>
 800c55e:	6923      	ldr	r3, [r4, #16]
 800c560:	6861      	ldr	r1, [r4, #4]
 800c562:	4299      	cmp	r1, r3
 800c564:	bfde      	ittt	le
 800c566:	2330      	movle	r3, #48	; 0x30
 800c568:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c56c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c570:	1b52      	subs	r2, r2, r5
 800c572:	6122      	str	r2, [r4, #16]
 800c574:	f8cd a000 	str.w	sl, [sp]
 800c578:	464b      	mov	r3, r9
 800c57a:	aa03      	add	r2, sp, #12
 800c57c:	4621      	mov	r1, r4
 800c57e:	4640      	mov	r0, r8
 800c580:	f7ff fee2 	bl	800c348 <_printf_common>
 800c584:	3001      	adds	r0, #1
 800c586:	d14c      	bne.n	800c622 <_printf_i+0x1fe>
 800c588:	f04f 30ff 	mov.w	r0, #4294967295
 800c58c:	b004      	add	sp, #16
 800c58e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c592:	4835      	ldr	r0, [pc, #212]	; (800c668 <_printf_i+0x244>)
 800c594:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c598:	6829      	ldr	r1, [r5, #0]
 800c59a:	6823      	ldr	r3, [r4, #0]
 800c59c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c5a0:	6029      	str	r1, [r5, #0]
 800c5a2:	061d      	lsls	r5, r3, #24
 800c5a4:	d514      	bpl.n	800c5d0 <_printf_i+0x1ac>
 800c5a6:	07df      	lsls	r7, r3, #31
 800c5a8:	bf44      	itt	mi
 800c5aa:	f043 0320 	orrmi.w	r3, r3, #32
 800c5ae:	6023      	strmi	r3, [r4, #0]
 800c5b0:	b91e      	cbnz	r6, 800c5ba <_printf_i+0x196>
 800c5b2:	6823      	ldr	r3, [r4, #0]
 800c5b4:	f023 0320 	bic.w	r3, r3, #32
 800c5b8:	6023      	str	r3, [r4, #0]
 800c5ba:	2310      	movs	r3, #16
 800c5bc:	e7b0      	b.n	800c520 <_printf_i+0xfc>
 800c5be:	6823      	ldr	r3, [r4, #0]
 800c5c0:	f043 0320 	orr.w	r3, r3, #32
 800c5c4:	6023      	str	r3, [r4, #0]
 800c5c6:	2378      	movs	r3, #120	; 0x78
 800c5c8:	4828      	ldr	r0, [pc, #160]	; (800c66c <_printf_i+0x248>)
 800c5ca:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5ce:	e7e3      	b.n	800c598 <_printf_i+0x174>
 800c5d0:	0659      	lsls	r1, r3, #25
 800c5d2:	bf48      	it	mi
 800c5d4:	b2b6      	uxthmi	r6, r6
 800c5d6:	e7e6      	b.n	800c5a6 <_printf_i+0x182>
 800c5d8:	4615      	mov	r5, r2
 800c5da:	e7bb      	b.n	800c554 <_printf_i+0x130>
 800c5dc:	682b      	ldr	r3, [r5, #0]
 800c5de:	6826      	ldr	r6, [r4, #0]
 800c5e0:	6961      	ldr	r1, [r4, #20]
 800c5e2:	1d18      	adds	r0, r3, #4
 800c5e4:	6028      	str	r0, [r5, #0]
 800c5e6:	0635      	lsls	r5, r6, #24
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	d501      	bpl.n	800c5f0 <_printf_i+0x1cc>
 800c5ec:	6019      	str	r1, [r3, #0]
 800c5ee:	e002      	b.n	800c5f6 <_printf_i+0x1d2>
 800c5f0:	0670      	lsls	r0, r6, #25
 800c5f2:	d5fb      	bpl.n	800c5ec <_printf_i+0x1c8>
 800c5f4:	8019      	strh	r1, [r3, #0]
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	6123      	str	r3, [r4, #16]
 800c5fa:	4615      	mov	r5, r2
 800c5fc:	e7ba      	b.n	800c574 <_printf_i+0x150>
 800c5fe:	682b      	ldr	r3, [r5, #0]
 800c600:	1d1a      	adds	r2, r3, #4
 800c602:	602a      	str	r2, [r5, #0]
 800c604:	681d      	ldr	r5, [r3, #0]
 800c606:	6862      	ldr	r2, [r4, #4]
 800c608:	2100      	movs	r1, #0
 800c60a:	4628      	mov	r0, r5
 800c60c:	f7f3 fe10 	bl	8000230 <memchr>
 800c610:	b108      	cbz	r0, 800c616 <_printf_i+0x1f2>
 800c612:	1b40      	subs	r0, r0, r5
 800c614:	6060      	str	r0, [r4, #4]
 800c616:	6863      	ldr	r3, [r4, #4]
 800c618:	6123      	str	r3, [r4, #16]
 800c61a:	2300      	movs	r3, #0
 800c61c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c620:	e7a8      	b.n	800c574 <_printf_i+0x150>
 800c622:	6923      	ldr	r3, [r4, #16]
 800c624:	462a      	mov	r2, r5
 800c626:	4649      	mov	r1, r9
 800c628:	4640      	mov	r0, r8
 800c62a:	47d0      	blx	sl
 800c62c:	3001      	adds	r0, #1
 800c62e:	d0ab      	beq.n	800c588 <_printf_i+0x164>
 800c630:	6823      	ldr	r3, [r4, #0]
 800c632:	079b      	lsls	r3, r3, #30
 800c634:	d413      	bmi.n	800c65e <_printf_i+0x23a>
 800c636:	68e0      	ldr	r0, [r4, #12]
 800c638:	9b03      	ldr	r3, [sp, #12]
 800c63a:	4298      	cmp	r0, r3
 800c63c:	bfb8      	it	lt
 800c63e:	4618      	movlt	r0, r3
 800c640:	e7a4      	b.n	800c58c <_printf_i+0x168>
 800c642:	2301      	movs	r3, #1
 800c644:	4632      	mov	r2, r6
 800c646:	4649      	mov	r1, r9
 800c648:	4640      	mov	r0, r8
 800c64a:	47d0      	blx	sl
 800c64c:	3001      	adds	r0, #1
 800c64e:	d09b      	beq.n	800c588 <_printf_i+0x164>
 800c650:	3501      	adds	r5, #1
 800c652:	68e3      	ldr	r3, [r4, #12]
 800c654:	9903      	ldr	r1, [sp, #12]
 800c656:	1a5b      	subs	r3, r3, r1
 800c658:	42ab      	cmp	r3, r5
 800c65a:	dcf2      	bgt.n	800c642 <_printf_i+0x21e>
 800c65c:	e7eb      	b.n	800c636 <_printf_i+0x212>
 800c65e:	2500      	movs	r5, #0
 800c660:	f104 0619 	add.w	r6, r4, #25
 800c664:	e7f5      	b.n	800c652 <_printf_i+0x22e>
 800c666:	bf00      	nop
 800c668:	08012b72 	.word	0x08012b72
 800c66c:	08012b83 	.word	0x08012b83

0800c670 <iprintf>:
 800c670:	b40f      	push	{r0, r1, r2, r3}
 800c672:	4b0a      	ldr	r3, [pc, #40]	; (800c69c <iprintf+0x2c>)
 800c674:	b513      	push	{r0, r1, r4, lr}
 800c676:	681c      	ldr	r4, [r3, #0]
 800c678:	b124      	cbz	r4, 800c684 <iprintf+0x14>
 800c67a:	69a3      	ldr	r3, [r4, #24]
 800c67c:	b913      	cbnz	r3, 800c684 <iprintf+0x14>
 800c67e:	4620      	mov	r0, r4
 800c680:	f001 f90a 	bl	800d898 <__sinit>
 800c684:	ab05      	add	r3, sp, #20
 800c686:	9a04      	ldr	r2, [sp, #16]
 800c688:	68a1      	ldr	r1, [r4, #8]
 800c68a:	9301      	str	r3, [sp, #4]
 800c68c:	4620      	mov	r0, r4
 800c68e:	f001 ff47 	bl	800e520 <_vfiprintf_r>
 800c692:	b002      	add	sp, #8
 800c694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c698:	b004      	add	sp, #16
 800c69a:	4770      	bx	lr
 800c69c:	20000074 	.word	0x20000074

0800c6a0 <_puts_r>:
 800c6a0:	b570      	push	{r4, r5, r6, lr}
 800c6a2:	460e      	mov	r6, r1
 800c6a4:	4605      	mov	r5, r0
 800c6a6:	b118      	cbz	r0, 800c6b0 <_puts_r+0x10>
 800c6a8:	6983      	ldr	r3, [r0, #24]
 800c6aa:	b90b      	cbnz	r3, 800c6b0 <_puts_r+0x10>
 800c6ac:	f001 f8f4 	bl	800d898 <__sinit>
 800c6b0:	69ab      	ldr	r3, [r5, #24]
 800c6b2:	68ac      	ldr	r4, [r5, #8]
 800c6b4:	b913      	cbnz	r3, 800c6bc <_puts_r+0x1c>
 800c6b6:	4628      	mov	r0, r5
 800c6b8:	f001 f8ee 	bl	800d898 <__sinit>
 800c6bc:	4b2c      	ldr	r3, [pc, #176]	; (800c770 <_puts_r+0xd0>)
 800c6be:	429c      	cmp	r4, r3
 800c6c0:	d120      	bne.n	800c704 <_puts_r+0x64>
 800c6c2:	686c      	ldr	r4, [r5, #4]
 800c6c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c6c6:	07db      	lsls	r3, r3, #31
 800c6c8:	d405      	bmi.n	800c6d6 <_puts_r+0x36>
 800c6ca:	89a3      	ldrh	r3, [r4, #12]
 800c6cc:	0598      	lsls	r0, r3, #22
 800c6ce:	d402      	bmi.n	800c6d6 <_puts_r+0x36>
 800c6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c6d2:	f001 f984 	bl	800d9de <__retarget_lock_acquire_recursive>
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	0719      	lsls	r1, r3, #28
 800c6da:	d51d      	bpl.n	800c718 <_puts_r+0x78>
 800c6dc:	6923      	ldr	r3, [r4, #16]
 800c6de:	b1db      	cbz	r3, 800c718 <_puts_r+0x78>
 800c6e0:	3e01      	subs	r6, #1
 800c6e2:	68a3      	ldr	r3, [r4, #8]
 800c6e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c6e8:	3b01      	subs	r3, #1
 800c6ea:	60a3      	str	r3, [r4, #8]
 800c6ec:	bb39      	cbnz	r1, 800c73e <_puts_r+0x9e>
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	da38      	bge.n	800c764 <_puts_r+0xc4>
 800c6f2:	4622      	mov	r2, r4
 800c6f4:	210a      	movs	r1, #10
 800c6f6:	4628      	mov	r0, r5
 800c6f8:	f000 f878 	bl	800c7ec <__swbuf_r>
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	d011      	beq.n	800c724 <_puts_r+0x84>
 800c700:	250a      	movs	r5, #10
 800c702:	e011      	b.n	800c728 <_puts_r+0x88>
 800c704:	4b1b      	ldr	r3, [pc, #108]	; (800c774 <_puts_r+0xd4>)
 800c706:	429c      	cmp	r4, r3
 800c708:	d101      	bne.n	800c70e <_puts_r+0x6e>
 800c70a:	68ac      	ldr	r4, [r5, #8]
 800c70c:	e7da      	b.n	800c6c4 <_puts_r+0x24>
 800c70e:	4b1a      	ldr	r3, [pc, #104]	; (800c778 <_puts_r+0xd8>)
 800c710:	429c      	cmp	r4, r3
 800c712:	bf08      	it	eq
 800c714:	68ec      	ldreq	r4, [r5, #12]
 800c716:	e7d5      	b.n	800c6c4 <_puts_r+0x24>
 800c718:	4621      	mov	r1, r4
 800c71a:	4628      	mov	r0, r5
 800c71c:	f000 f8b8 	bl	800c890 <__swsetup_r>
 800c720:	2800      	cmp	r0, #0
 800c722:	d0dd      	beq.n	800c6e0 <_puts_r+0x40>
 800c724:	f04f 35ff 	mov.w	r5, #4294967295
 800c728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c72a:	07da      	lsls	r2, r3, #31
 800c72c:	d405      	bmi.n	800c73a <_puts_r+0x9a>
 800c72e:	89a3      	ldrh	r3, [r4, #12]
 800c730:	059b      	lsls	r3, r3, #22
 800c732:	d402      	bmi.n	800c73a <_puts_r+0x9a>
 800c734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c736:	f001 f953 	bl	800d9e0 <__retarget_lock_release_recursive>
 800c73a:	4628      	mov	r0, r5
 800c73c:	bd70      	pop	{r4, r5, r6, pc}
 800c73e:	2b00      	cmp	r3, #0
 800c740:	da04      	bge.n	800c74c <_puts_r+0xac>
 800c742:	69a2      	ldr	r2, [r4, #24]
 800c744:	429a      	cmp	r2, r3
 800c746:	dc06      	bgt.n	800c756 <_puts_r+0xb6>
 800c748:	290a      	cmp	r1, #10
 800c74a:	d004      	beq.n	800c756 <_puts_r+0xb6>
 800c74c:	6823      	ldr	r3, [r4, #0]
 800c74e:	1c5a      	adds	r2, r3, #1
 800c750:	6022      	str	r2, [r4, #0]
 800c752:	7019      	strb	r1, [r3, #0]
 800c754:	e7c5      	b.n	800c6e2 <_puts_r+0x42>
 800c756:	4622      	mov	r2, r4
 800c758:	4628      	mov	r0, r5
 800c75a:	f000 f847 	bl	800c7ec <__swbuf_r>
 800c75e:	3001      	adds	r0, #1
 800c760:	d1bf      	bne.n	800c6e2 <_puts_r+0x42>
 800c762:	e7df      	b.n	800c724 <_puts_r+0x84>
 800c764:	6823      	ldr	r3, [r4, #0]
 800c766:	250a      	movs	r5, #10
 800c768:	1c5a      	adds	r2, r3, #1
 800c76a:	6022      	str	r2, [r4, #0]
 800c76c:	701d      	strb	r5, [r3, #0]
 800c76e:	e7db      	b.n	800c728 <_puts_r+0x88>
 800c770:	08012c44 	.word	0x08012c44
 800c774:	08012c64 	.word	0x08012c64
 800c778:	08012c24 	.word	0x08012c24

0800c77c <puts>:
 800c77c:	4b02      	ldr	r3, [pc, #8]	; (800c788 <puts+0xc>)
 800c77e:	4601      	mov	r1, r0
 800c780:	6818      	ldr	r0, [r3, #0]
 800c782:	f7ff bf8d 	b.w	800c6a0 <_puts_r>
 800c786:	bf00      	nop
 800c788:	20000074 	.word	0x20000074

0800c78c <_sbrk_r>:
 800c78c:	b538      	push	{r3, r4, r5, lr}
 800c78e:	4d06      	ldr	r5, [pc, #24]	; (800c7a8 <_sbrk_r+0x1c>)
 800c790:	2300      	movs	r3, #0
 800c792:	4604      	mov	r4, r0
 800c794:	4608      	mov	r0, r1
 800c796:	602b      	str	r3, [r5, #0]
 800c798:	f7f6 ff1a 	bl	80035d0 <_sbrk>
 800c79c:	1c43      	adds	r3, r0, #1
 800c79e:	d102      	bne.n	800c7a6 <_sbrk_r+0x1a>
 800c7a0:	682b      	ldr	r3, [r5, #0]
 800c7a2:	b103      	cbz	r3, 800c7a6 <_sbrk_r+0x1a>
 800c7a4:	6023      	str	r3, [r4, #0]
 800c7a6:	bd38      	pop	{r3, r4, r5, pc}
 800c7a8:	20000a64 	.word	0x20000a64

0800c7ac <siprintf>:
 800c7ac:	b40e      	push	{r1, r2, r3}
 800c7ae:	b500      	push	{lr}
 800c7b0:	b09c      	sub	sp, #112	; 0x70
 800c7b2:	ab1d      	add	r3, sp, #116	; 0x74
 800c7b4:	9002      	str	r0, [sp, #8]
 800c7b6:	9006      	str	r0, [sp, #24]
 800c7b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c7bc:	4809      	ldr	r0, [pc, #36]	; (800c7e4 <siprintf+0x38>)
 800c7be:	9107      	str	r1, [sp, #28]
 800c7c0:	9104      	str	r1, [sp, #16]
 800c7c2:	4909      	ldr	r1, [pc, #36]	; (800c7e8 <siprintf+0x3c>)
 800c7c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7c8:	9105      	str	r1, [sp, #20]
 800c7ca:	6800      	ldr	r0, [r0, #0]
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	a902      	add	r1, sp, #8
 800c7d0:	f001 fd7c 	bl	800e2cc <_svfiprintf_r>
 800c7d4:	9b02      	ldr	r3, [sp, #8]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	b01c      	add	sp, #112	; 0x70
 800c7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7e0:	b003      	add	sp, #12
 800c7e2:	4770      	bx	lr
 800c7e4:	20000074 	.word	0x20000074
 800c7e8:	ffff0208 	.word	0xffff0208

0800c7ec <__swbuf_r>:
 800c7ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ee:	460e      	mov	r6, r1
 800c7f0:	4614      	mov	r4, r2
 800c7f2:	4605      	mov	r5, r0
 800c7f4:	b118      	cbz	r0, 800c7fe <__swbuf_r+0x12>
 800c7f6:	6983      	ldr	r3, [r0, #24]
 800c7f8:	b90b      	cbnz	r3, 800c7fe <__swbuf_r+0x12>
 800c7fa:	f001 f84d 	bl	800d898 <__sinit>
 800c7fe:	4b21      	ldr	r3, [pc, #132]	; (800c884 <__swbuf_r+0x98>)
 800c800:	429c      	cmp	r4, r3
 800c802:	d12b      	bne.n	800c85c <__swbuf_r+0x70>
 800c804:	686c      	ldr	r4, [r5, #4]
 800c806:	69a3      	ldr	r3, [r4, #24]
 800c808:	60a3      	str	r3, [r4, #8]
 800c80a:	89a3      	ldrh	r3, [r4, #12]
 800c80c:	071a      	lsls	r2, r3, #28
 800c80e:	d52f      	bpl.n	800c870 <__swbuf_r+0x84>
 800c810:	6923      	ldr	r3, [r4, #16]
 800c812:	b36b      	cbz	r3, 800c870 <__swbuf_r+0x84>
 800c814:	6923      	ldr	r3, [r4, #16]
 800c816:	6820      	ldr	r0, [r4, #0]
 800c818:	1ac0      	subs	r0, r0, r3
 800c81a:	6963      	ldr	r3, [r4, #20]
 800c81c:	b2f6      	uxtb	r6, r6
 800c81e:	4283      	cmp	r3, r0
 800c820:	4637      	mov	r7, r6
 800c822:	dc04      	bgt.n	800c82e <__swbuf_r+0x42>
 800c824:	4621      	mov	r1, r4
 800c826:	4628      	mov	r0, r5
 800c828:	f000 ffa2 	bl	800d770 <_fflush_r>
 800c82c:	bb30      	cbnz	r0, 800c87c <__swbuf_r+0x90>
 800c82e:	68a3      	ldr	r3, [r4, #8]
 800c830:	3b01      	subs	r3, #1
 800c832:	60a3      	str	r3, [r4, #8]
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	1c5a      	adds	r2, r3, #1
 800c838:	6022      	str	r2, [r4, #0]
 800c83a:	701e      	strb	r6, [r3, #0]
 800c83c:	6963      	ldr	r3, [r4, #20]
 800c83e:	3001      	adds	r0, #1
 800c840:	4283      	cmp	r3, r0
 800c842:	d004      	beq.n	800c84e <__swbuf_r+0x62>
 800c844:	89a3      	ldrh	r3, [r4, #12]
 800c846:	07db      	lsls	r3, r3, #31
 800c848:	d506      	bpl.n	800c858 <__swbuf_r+0x6c>
 800c84a:	2e0a      	cmp	r6, #10
 800c84c:	d104      	bne.n	800c858 <__swbuf_r+0x6c>
 800c84e:	4621      	mov	r1, r4
 800c850:	4628      	mov	r0, r5
 800c852:	f000 ff8d 	bl	800d770 <_fflush_r>
 800c856:	b988      	cbnz	r0, 800c87c <__swbuf_r+0x90>
 800c858:	4638      	mov	r0, r7
 800c85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c85c:	4b0a      	ldr	r3, [pc, #40]	; (800c888 <__swbuf_r+0x9c>)
 800c85e:	429c      	cmp	r4, r3
 800c860:	d101      	bne.n	800c866 <__swbuf_r+0x7a>
 800c862:	68ac      	ldr	r4, [r5, #8]
 800c864:	e7cf      	b.n	800c806 <__swbuf_r+0x1a>
 800c866:	4b09      	ldr	r3, [pc, #36]	; (800c88c <__swbuf_r+0xa0>)
 800c868:	429c      	cmp	r4, r3
 800c86a:	bf08      	it	eq
 800c86c:	68ec      	ldreq	r4, [r5, #12]
 800c86e:	e7ca      	b.n	800c806 <__swbuf_r+0x1a>
 800c870:	4621      	mov	r1, r4
 800c872:	4628      	mov	r0, r5
 800c874:	f000 f80c 	bl	800c890 <__swsetup_r>
 800c878:	2800      	cmp	r0, #0
 800c87a:	d0cb      	beq.n	800c814 <__swbuf_r+0x28>
 800c87c:	f04f 37ff 	mov.w	r7, #4294967295
 800c880:	e7ea      	b.n	800c858 <__swbuf_r+0x6c>
 800c882:	bf00      	nop
 800c884:	08012c44 	.word	0x08012c44
 800c888:	08012c64 	.word	0x08012c64
 800c88c:	08012c24 	.word	0x08012c24

0800c890 <__swsetup_r>:
 800c890:	4b32      	ldr	r3, [pc, #200]	; (800c95c <__swsetup_r+0xcc>)
 800c892:	b570      	push	{r4, r5, r6, lr}
 800c894:	681d      	ldr	r5, [r3, #0]
 800c896:	4606      	mov	r6, r0
 800c898:	460c      	mov	r4, r1
 800c89a:	b125      	cbz	r5, 800c8a6 <__swsetup_r+0x16>
 800c89c:	69ab      	ldr	r3, [r5, #24]
 800c89e:	b913      	cbnz	r3, 800c8a6 <__swsetup_r+0x16>
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	f000 fff9 	bl	800d898 <__sinit>
 800c8a6:	4b2e      	ldr	r3, [pc, #184]	; (800c960 <__swsetup_r+0xd0>)
 800c8a8:	429c      	cmp	r4, r3
 800c8aa:	d10f      	bne.n	800c8cc <__swsetup_r+0x3c>
 800c8ac:	686c      	ldr	r4, [r5, #4]
 800c8ae:	89a3      	ldrh	r3, [r4, #12]
 800c8b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8b4:	0719      	lsls	r1, r3, #28
 800c8b6:	d42c      	bmi.n	800c912 <__swsetup_r+0x82>
 800c8b8:	06dd      	lsls	r5, r3, #27
 800c8ba:	d411      	bmi.n	800c8e0 <__swsetup_r+0x50>
 800c8bc:	2309      	movs	r3, #9
 800c8be:	6033      	str	r3, [r6, #0]
 800c8c0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c8c4:	81a3      	strh	r3, [r4, #12]
 800c8c6:	f04f 30ff 	mov.w	r0, #4294967295
 800c8ca:	e03e      	b.n	800c94a <__swsetup_r+0xba>
 800c8cc:	4b25      	ldr	r3, [pc, #148]	; (800c964 <__swsetup_r+0xd4>)
 800c8ce:	429c      	cmp	r4, r3
 800c8d0:	d101      	bne.n	800c8d6 <__swsetup_r+0x46>
 800c8d2:	68ac      	ldr	r4, [r5, #8]
 800c8d4:	e7eb      	b.n	800c8ae <__swsetup_r+0x1e>
 800c8d6:	4b24      	ldr	r3, [pc, #144]	; (800c968 <__swsetup_r+0xd8>)
 800c8d8:	429c      	cmp	r4, r3
 800c8da:	bf08      	it	eq
 800c8dc:	68ec      	ldreq	r4, [r5, #12]
 800c8de:	e7e6      	b.n	800c8ae <__swsetup_r+0x1e>
 800c8e0:	0758      	lsls	r0, r3, #29
 800c8e2:	d512      	bpl.n	800c90a <__swsetup_r+0x7a>
 800c8e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c8e6:	b141      	cbz	r1, 800c8fa <__swsetup_r+0x6a>
 800c8e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c8ec:	4299      	cmp	r1, r3
 800c8ee:	d002      	beq.n	800c8f6 <__swsetup_r+0x66>
 800c8f0:	4630      	mov	r0, r6
 800c8f2:	f7ff f973 	bl	800bbdc <_free_r>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	6363      	str	r3, [r4, #52]	; 0x34
 800c8fa:	89a3      	ldrh	r3, [r4, #12]
 800c8fc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	2300      	movs	r3, #0
 800c904:	6063      	str	r3, [r4, #4]
 800c906:	6923      	ldr	r3, [r4, #16]
 800c908:	6023      	str	r3, [r4, #0]
 800c90a:	89a3      	ldrh	r3, [r4, #12]
 800c90c:	f043 0308 	orr.w	r3, r3, #8
 800c910:	81a3      	strh	r3, [r4, #12]
 800c912:	6923      	ldr	r3, [r4, #16]
 800c914:	b94b      	cbnz	r3, 800c92a <__swsetup_r+0x9a>
 800c916:	89a3      	ldrh	r3, [r4, #12]
 800c918:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c91c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c920:	d003      	beq.n	800c92a <__swsetup_r+0x9a>
 800c922:	4621      	mov	r1, r4
 800c924:	4630      	mov	r0, r6
 800c926:	f001 f881 	bl	800da2c <__smakebuf_r>
 800c92a:	89a0      	ldrh	r0, [r4, #12]
 800c92c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c930:	f010 0301 	ands.w	r3, r0, #1
 800c934:	d00a      	beq.n	800c94c <__swsetup_r+0xbc>
 800c936:	2300      	movs	r3, #0
 800c938:	60a3      	str	r3, [r4, #8]
 800c93a:	6963      	ldr	r3, [r4, #20]
 800c93c:	425b      	negs	r3, r3
 800c93e:	61a3      	str	r3, [r4, #24]
 800c940:	6923      	ldr	r3, [r4, #16]
 800c942:	b943      	cbnz	r3, 800c956 <__swsetup_r+0xc6>
 800c944:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c948:	d1ba      	bne.n	800c8c0 <__swsetup_r+0x30>
 800c94a:	bd70      	pop	{r4, r5, r6, pc}
 800c94c:	0781      	lsls	r1, r0, #30
 800c94e:	bf58      	it	pl
 800c950:	6963      	ldrpl	r3, [r4, #20]
 800c952:	60a3      	str	r3, [r4, #8]
 800c954:	e7f4      	b.n	800c940 <__swsetup_r+0xb0>
 800c956:	2000      	movs	r0, #0
 800c958:	e7f7      	b.n	800c94a <__swsetup_r+0xba>
 800c95a:	bf00      	nop
 800c95c:	20000074 	.word	0x20000074
 800c960:	08012c44 	.word	0x08012c44
 800c964:	08012c64 	.word	0x08012c64
 800c968:	08012c24 	.word	0x08012c24

0800c96c <quorem>:
 800c96c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c970:	6903      	ldr	r3, [r0, #16]
 800c972:	690c      	ldr	r4, [r1, #16]
 800c974:	42a3      	cmp	r3, r4
 800c976:	4607      	mov	r7, r0
 800c978:	f2c0 8081 	blt.w	800ca7e <quorem+0x112>
 800c97c:	3c01      	subs	r4, #1
 800c97e:	f101 0814 	add.w	r8, r1, #20
 800c982:	f100 0514 	add.w	r5, r0, #20
 800c986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c98a:	9301      	str	r3, [sp, #4]
 800c98c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c994:	3301      	adds	r3, #1
 800c996:	429a      	cmp	r2, r3
 800c998:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c99c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c9a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c9a4:	d331      	bcc.n	800ca0a <quorem+0x9e>
 800c9a6:	f04f 0e00 	mov.w	lr, #0
 800c9aa:	4640      	mov	r0, r8
 800c9ac:	46ac      	mov	ip, r5
 800c9ae:	46f2      	mov	sl, lr
 800c9b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c9b4:	b293      	uxth	r3, r2
 800c9b6:	fb06 e303 	mla	r3, r6, r3, lr
 800c9ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	ebaa 0303 	sub.w	r3, sl, r3
 800c9c4:	f8dc a000 	ldr.w	sl, [ip]
 800c9c8:	0c12      	lsrs	r2, r2, #16
 800c9ca:	fa13 f38a 	uxtah	r3, r3, sl
 800c9ce:	fb06 e202 	mla	r2, r6, r2, lr
 800c9d2:	9300      	str	r3, [sp, #0]
 800c9d4:	9b00      	ldr	r3, [sp, #0]
 800c9d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c9da:	b292      	uxth	r2, r2
 800c9dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c9e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9e4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c9e8:	4581      	cmp	r9, r0
 800c9ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9ee:	f84c 3b04 	str.w	r3, [ip], #4
 800c9f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c9f6:	d2db      	bcs.n	800c9b0 <quorem+0x44>
 800c9f8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c9fc:	b92b      	cbnz	r3, 800ca0a <quorem+0x9e>
 800c9fe:	9b01      	ldr	r3, [sp, #4]
 800ca00:	3b04      	subs	r3, #4
 800ca02:	429d      	cmp	r5, r3
 800ca04:	461a      	mov	r2, r3
 800ca06:	d32e      	bcc.n	800ca66 <quorem+0xfa>
 800ca08:	613c      	str	r4, [r7, #16]
 800ca0a:	4638      	mov	r0, r7
 800ca0c:	f001 faea 	bl	800dfe4 <__mcmp>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	db24      	blt.n	800ca5e <quorem+0xf2>
 800ca14:	3601      	adds	r6, #1
 800ca16:	4628      	mov	r0, r5
 800ca18:	f04f 0c00 	mov.w	ip, #0
 800ca1c:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca20:	f8d0 e000 	ldr.w	lr, [r0]
 800ca24:	b293      	uxth	r3, r2
 800ca26:	ebac 0303 	sub.w	r3, ip, r3
 800ca2a:	0c12      	lsrs	r2, r2, #16
 800ca2c:	fa13 f38e 	uxtah	r3, r3, lr
 800ca30:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca38:	b29b      	uxth	r3, r3
 800ca3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca3e:	45c1      	cmp	r9, r8
 800ca40:	f840 3b04 	str.w	r3, [r0], #4
 800ca44:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca48:	d2e8      	bcs.n	800ca1c <quorem+0xb0>
 800ca4a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca52:	b922      	cbnz	r2, 800ca5e <quorem+0xf2>
 800ca54:	3b04      	subs	r3, #4
 800ca56:	429d      	cmp	r5, r3
 800ca58:	461a      	mov	r2, r3
 800ca5a:	d30a      	bcc.n	800ca72 <quorem+0x106>
 800ca5c:	613c      	str	r4, [r7, #16]
 800ca5e:	4630      	mov	r0, r6
 800ca60:	b003      	add	sp, #12
 800ca62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca66:	6812      	ldr	r2, [r2, #0]
 800ca68:	3b04      	subs	r3, #4
 800ca6a:	2a00      	cmp	r2, #0
 800ca6c:	d1cc      	bne.n	800ca08 <quorem+0x9c>
 800ca6e:	3c01      	subs	r4, #1
 800ca70:	e7c7      	b.n	800ca02 <quorem+0x96>
 800ca72:	6812      	ldr	r2, [r2, #0]
 800ca74:	3b04      	subs	r3, #4
 800ca76:	2a00      	cmp	r2, #0
 800ca78:	d1f0      	bne.n	800ca5c <quorem+0xf0>
 800ca7a:	3c01      	subs	r4, #1
 800ca7c:	e7eb      	b.n	800ca56 <quorem+0xea>
 800ca7e:	2000      	movs	r0, #0
 800ca80:	e7ee      	b.n	800ca60 <quorem+0xf4>
 800ca82:	0000      	movs	r0, r0
 800ca84:	0000      	movs	r0, r0
	...

0800ca88 <_dtoa_r>:
 800ca88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca8c:	ed2d 8b04 	vpush	{d8-d9}
 800ca90:	ec57 6b10 	vmov	r6, r7, d0
 800ca94:	b093      	sub	sp, #76	; 0x4c
 800ca96:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca98:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ca9c:	9106      	str	r1, [sp, #24]
 800ca9e:	ee10 aa10 	vmov	sl, s0
 800caa2:	4604      	mov	r4, r0
 800caa4:	9209      	str	r2, [sp, #36]	; 0x24
 800caa6:	930c      	str	r3, [sp, #48]	; 0x30
 800caa8:	46bb      	mov	fp, r7
 800caaa:	b975      	cbnz	r5, 800caca <_dtoa_r+0x42>
 800caac:	2010      	movs	r0, #16
 800caae:	f7ff f885 	bl	800bbbc <malloc>
 800cab2:	4602      	mov	r2, r0
 800cab4:	6260      	str	r0, [r4, #36]	; 0x24
 800cab6:	b920      	cbnz	r0, 800cac2 <_dtoa_r+0x3a>
 800cab8:	4ba7      	ldr	r3, [pc, #668]	; (800cd58 <_dtoa_r+0x2d0>)
 800caba:	21ea      	movs	r1, #234	; 0xea
 800cabc:	48a7      	ldr	r0, [pc, #668]	; (800cd5c <_dtoa_r+0x2d4>)
 800cabe:	f001 feb5 	bl	800e82c <__assert_func>
 800cac2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cac6:	6005      	str	r5, [r0, #0]
 800cac8:	60c5      	str	r5, [r0, #12]
 800caca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cacc:	6819      	ldr	r1, [r3, #0]
 800cace:	b151      	cbz	r1, 800cae6 <_dtoa_r+0x5e>
 800cad0:	685a      	ldr	r2, [r3, #4]
 800cad2:	604a      	str	r2, [r1, #4]
 800cad4:	2301      	movs	r3, #1
 800cad6:	4093      	lsls	r3, r2
 800cad8:	608b      	str	r3, [r1, #8]
 800cada:	4620      	mov	r0, r4
 800cadc:	f001 f840 	bl	800db60 <_Bfree>
 800cae0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cae2:	2200      	movs	r2, #0
 800cae4:	601a      	str	r2, [r3, #0]
 800cae6:	1e3b      	subs	r3, r7, #0
 800cae8:	bfaa      	itet	ge
 800caea:	2300      	movge	r3, #0
 800caec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800caf0:	f8c8 3000 	strge.w	r3, [r8]
 800caf4:	4b9a      	ldr	r3, [pc, #616]	; (800cd60 <_dtoa_r+0x2d8>)
 800caf6:	bfbc      	itt	lt
 800caf8:	2201      	movlt	r2, #1
 800cafa:	f8c8 2000 	strlt.w	r2, [r8]
 800cafe:	ea33 030b 	bics.w	r3, r3, fp
 800cb02:	d11b      	bne.n	800cb3c <_dtoa_r+0xb4>
 800cb04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb06:	f242 730f 	movw	r3, #9999	; 0x270f
 800cb0a:	6013      	str	r3, [r2, #0]
 800cb0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cb10:	4333      	orrs	r3, r6
 800cb12:	f000 8592 	beq.w	800d63a <_dtoa_r+0xbb2>
 800cb16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb18:	b963      	cbnz	r3, 800cb34 <_dtoa_r+0xac>
 800cb1a:	4b92      	ldr	r3, [pc, #584]	; (800cd64 <_dtoa_r+0x2dc>)
 800cb1c:	e022      	b.n	800cb64 <_dtoa_r+0xdc>
 800cb1e:	4b92      	ldr	r3, [pc, #584]	; (800cd68 <_dtoa_r+0x2e0>)
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	3308      	adds	r3, #8
 800cb24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	9801      	ldr	r0, [sp, #4]
 800cb2a:	b013      	add	sp, #76	; 0x4c
 800cb2c:	ecbd 8b04 	vpop	{d8-d9}
 800cb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb34:	4b8b      	ldr	r3, [pc, #556]	; (800cd64 <_dtoa_r+0x2dc>)
 800cb36:	9301      	str	r3, [sp, #4]
 800cb38:	3303      	adds	r3, #3
 800cb3a:	e7f3      	b.n	800cb24 <_dtoa_r+0x9c>
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	2300      	movs	r3, #0
 800cb40:	4650      	mov	r0, sl
 800cb42:	4659      	mov	r1, fp
 800cb44:	f7f3 ffe8 	bl	8000b18 <__aeabi_dcmpeq>
 800cb48:	ec4b ab19 	vmov	d9, sl, fp
 800cb4c:	4680      	mov	r8, r0
 800cb4e:	b158      	cbz	r0, 800cb68 <_dtoa_r+0xe0>
 800cb50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb52:	2301      	movs	r3, #1
 800cb54:	6013      	str	r3, [r2, #0]
 800cb56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	f000 856b 	beq.w	800d634 <_dtoa_r+0xbac>
 800cb5e:	4883      	ldr	r0, [pc, #524]	; (800cd6c <_dtoa_r+0x2e4>)
 800cb60:	6018      	str	r0, [r3, #0]
 800cb62:	1e43      	subs	r3, r0, #1
 800cb64:	9301      	str	r3, [sp, #4]
 800cb66:	e7df      	b.n	800cb28 <_dtoa_r+0xa0>
 800cb68:	ec4b ab10 	vmov	d0, sl, fp
 800cb6c:	aa10      	add	r2, sp, #64	; 0x40
 800cb6e:	a911      	add	r1, sp, #68	; 0x44
 800cb70:	4620      	mov	r0, r4
 800cb72:	f001 fadd 	bl	800e130 <__d2b>
 800cb76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cb7a:	ee08 0a10 	vmov	s16, r0
 800cb7e:	2d00      	cmp	r5, #0
 800cb80:	f000 8084 	beq.w	800cc8c <_dtoa_r+0x204>
 800cb84:	ee19 3a90 	vmov	r3, s19
 800cb88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cb90:	4656      	mov	r6, sl
 800cb92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cb96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cb9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cb9e:	4b74      	ldr	r3, [pc, #464]	; (800cd70 <_dtoa_r+0x2e8>)
 800cba0:	2200      	movs	r2, #0
 800cba2:	4630      	mov	r0, r6
 800cba4:	4639      	mov	r1, r7
 800cba6:	f7f3 fb97 	bl	80002d8 <__aeabi_dsub>
 800cbaa:	a365      	add	r3, pc, #404	; (adr r3, 800cd40 <_dtoa_r+0x2b8>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	f7f3 fd4a 	bl	8000648 <__aeabi_dmul>
 800cbb4:	a364      	add	r3, pc, #400	; (adr r3, 800cd48 <_dtoa_r+0x2c0>)
 800cbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbba:	f7f3 fb8f 	bl	80002dc <__adddf3>
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	460f      	mov	r7, r1
 800cbc4:	f7f3 fcd6 	bl	8000574 <__aeabi_i2d>
 800cbc8:	a361      	add	r3, pc, #388	; (adr r3, 800cd50 <_dtoa_r+0x2c8>)
 800cbca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbce:	f7f3 fd3b 	bl	8000648 <__aeabi_dmul>
 800cbd2:	4602      	mov	r2, r0
 800cbd4:	460b      	mov	r3, r1
 800cbd6:	4630      	mov	r0, r6
 800cbd8:	4639      	mov	r1, r7
 800cbda:	f7f3 fb7f 	bl	80002dc <__adddf3>
 800cbde:	4606      	mov	r6, r0
 800cbe0:	460f      	mov	r7, r1
 800cbe2:	f7f3 ffe1 	bl	8000ba8 <__aeabi_d2iz>
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	9000      	str	r0, [sp, #0]
 800cbea:	2300      	movs	r3, #0
 800cbec:	4630      	mov	r0, r6
 800cbee:	4639      	mov	r1, r7
 800cbf0:	f7f3 ff9c 	bl	8000b2c <__aeabi_dcmplt>
 800cbf4:	b150      	cbz	r0, 800cc0c <_dtoa_r+0x184>
 800cbf6:	9800      	ldr	r0, [sp, #0]
 800cbf8:	f7f3 fcbc 	bl	8000574 <__aeabi_i2d>
 800cbfc:	4632      	mov	r2, r6
 800cbfe:	463b      	mov	r3, r7
 800cc00:	f7f3 ff8a 	bl	8000b18 <__aeabi_dcmpeq>
 800cc04:	b910      	cbnz	r0, 800cc0c <_dtoa_r+0x184>
 800cc06:	9b00      	ldr	r3, [sp, #0]
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	9300      	str	r3, [sp, #0]
 800cc0c:	9b00      	ldr	r3, [sp, #0]
 800cc0e:	2b16      	cmp	r3, #22
 800cc10:	d85a      	bhi.n	800ccc8 <_dtoa_r+0x240>
 800cc12:	9a00      	ldr	r2, [sp, #0]
 800cc14:	4b57      	ldr	r3, [pc, #348]	; (800cd74 <_dtoa_r+0x2ec>)
 800cc16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1e:	ec51 0b19 	vmov	r0, r1, d9
 800cc22:	f7f3 ff83 	bl	8000b2c <__aeabi_dcmplt>
 800cc26:	2800      	cmp	r0, #0
 800cc28:	d050      	beq.n	800cccc <_dtoa_r+0x244>
 800cc2a:	9b00      	ldr	r3, [sp, #0]
 800cc2c:	3b01      	subs	r3, #1
 800cc2e:	9300      	str	r3, [sp, #0]
 800cc30:	2300      	movs	r3, #0
 800cc32:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc36:	1b5d      	subs	r5, r3, r5
 800cc38:	1e6b      	subs	r3, r5, #1
 800cc3a:	9305      	str	r3, [sp, #20]
 800cc3c:	bf45      	ittet	mi
 800cc3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cc42:	9304      	strmi	r3, [sp, #16]
 800cc44:	2300      	movpl	r3, #0
 800cc46:	2300      	movmi	r3, #0
 800cc48:	bf4c      	ite	mi
 800cc4a:	9305      	strmi	r3, [sp, #20]
 800cc4c:	9304      	strpl	r3, [sp, #16]
 800cc4e:	9b00      	ldr	r3, [sp, #0]
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	db3d      	blt.n	800ccd0 <_dtoa_r+0x248>
 800cc54:	9b05      	ldr	r3, [sp, #20]
 800cc56:	9a00      	ldr	r2, [sp, #0]
 800cc58:	920a      	str	r2, [sp, #40]	; 0x28
 800cc5a:	4413      	add	r3, r2
 800cc5c:	9305      	str	r3, [sp, #20]
 800cc5e:	2300      	movs	r3, #0
 800cc60:	9307      	str	r3, [sp, #28]
 800cc62:	9b06      	ldr	r3, [sp, #24]
 800cc64:	2b09      	cmp	r3, #9
 800cc66:	f200 8089 	bhi.w	800cd7c <_dtoa_r+0x2f4>
 800cc6a:	2b05      	cmp	r3, #5
 800cc6c:	bfc4      	itt	gt
 800cc6e:	3b04      	subgt	r3, #4
 800cc70:	9306      	strgt	r3, [sp, #24]
 800cc72:	9b06      	ldr	r3, [sp, #24]
 800cc74:	f1a3 0302 	sub.w	r3, r3, #2
 800cc78:	bfcc      	ite	gt
 800cc7a:	2500      	movgt	r5, #0
 800cc7c:	2501      	movle	r5, #1
 800cc7e:	2b03      	cmp	r3, #3
 800cc80:	f200 8087 	bhi.w	800cd92 <_dtoa_r+0x30a>
 800cc84:	e8df f003 	tbb	[pc, r3]
 800cc88:	59383a2d 	.word	0x59383a2d
 800cc8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cc90:	441d      	add	r5, r3
 800cc92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cc96:	2b20      	cmp	r3, #32
 800cc98:	bfc1      	itttt	gt
 800cc9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cca2:	fa0b f303 	lslgt.w	r3, fp, r3
 800cca6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ccaa:	bfda      	itte	le
 800ccac:	f1c3 0320 	rsble	r3, r3, #32
 800ccb0:	fa06 f003 	lslle.w	r0, r6, r3
 800ccb4:	4318      	orrgt	r0, r3
 800ccb6:	f7f3 fc4d 	bl	8000554 <__aeabi_ui2d>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	4606      	mov	r6, r0
 800ccbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ccc2:	3d01      	subs	r5, #1
 800ccc4:	930e      	str	r3, [sp, #56]	; 0x38
 800ccc6:	e76a      	b.n	800cb9e <_dtoa_r+0x116>
 800ccc8:	2301      	movs	r3, #1
 800ccca:	e7b2      	b.n	800cc32 <_dtoa_r+0x1aa>
 800cccc:	900b      	str	r0, [sp, #44]	; 0x2c
 800ccce:	e7b1      	b.n	800cc34 <_dtoa_r+0x1ac>
 800ccd0:	9b04      	ldr	r3, [sp, #16]
 800ccd2:	9a00      	ldr	r2, [sp, #0]
 800ccd4:	1a9b      	subs	r3, r3, r2
 800ccd6:	9304      	str	r3, [sp, #16]
 800ccd8:	4253      	negs	r3, r2
 800ccda:	9307      	str	r3, [sp, #28]
 800ccdc:	2300      	movs	r3, #0
 800ccde:	930a      	str	r3, [sp, #40]	; 0x28
 800cce0:	e7bf      	b.n	800cc62 <_dtoa_r+0x1da>
 800cce2:	2300      	movs	r3, #0
 800cce4:	9308      	str	r3, [sp, #32]
 800cce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	dc55      	bgt.n	800cd98 <_dtoa_r+0x310>
 800ccec:	2301      	movs	r3, #1
 800ccee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ccf2:	461a      	mov	r2, r3
 800ccf4:	9209      	str	r2, [sp, #36]	; 0x24
 800ccf6:	e00c      	b.n	800cd12 <_dtoa_r+0x28a>
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e7f3      	b.n	800cce4 <_dtoa_r+0x25c>
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd00:	9308      	str	r3, [sp, #32]
 800cd02:	9b00      	ldr	r3, [sp, #0]
 800cd04:	4413      	add	r3, r2
 800cd06:	9302      	str	r3, [sp, #8]
 800cd08:	3301      	adds	r3, #1
 800cd0a:	2b01      	cmp	r3, #1
 800cd0c:	9303      	str	r3, [sp, #12]
 800cd0e:	bfb8      	it	lt
 800cd10:	2301      	movlt	r3, #1
 800cd12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cd14:	2200      	movs	r2, #0
 800cd16:	6042      	str	r2, [r0, #4]
 800cd18:	2204      	movs	r2, #4
 800cd1a:	f102 0614 	add.w	r6, r2, #20
 800cd1e:	429e      	cmp	r6, r3
 800cd20:	6841      	ldr	r1, [r0, #4]
 800cd22:	d93d      	bls.n	800cda0 <_dtoa_r+0x318>
 800cd24:	4620      	mov	r0, r4
 800cd26:	f000 fedb 	bl	800dae0 <_Balloc>
 800cd2a:	9001      	str	r0, [sp, #4]
 800cd2c:	2800      	cmp	r0, #0
 800cd2e:	d13b      	bne.n	800cda8 <_dtoa_r+0x320>
 800cd30:	4b11      	ldr	r3, [pc, #68]	; (800cd78 <_dtoa_r+0x2f0>)
 800cd32:	4602      	mov	r2, r0
 800cd34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd38:	e6c0      	b.n	800cabc <_dtoa_r+0x34>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	e7df      	b.n	800ccfe <_dtoa_r+0x276>
 800cd3e:	bf00      	nop
 800cd40:	636f4361 	.word	0x636f4361
 800cd44:	3fd287a7 	.word	0x3fd287a7
 800cd48:	8b60c8b3 	.word	0x8b60c8b3
 800cd4c:	3fc68a28 	.word	0x3fc68a28
 800cd50:	509f79fb 	.word	0x509f79fb
 800cd54:	3fd34413 	.word	0x3fd34413
 800cd58:	08012ba1 	.word	0x08012ba1
 800cd5c:	08012bb8 	.word	0x08012bb8
 800cd60:	7ff00000 	.word	0x7ff00000
 800cd64:	08012b9d 	.word	0x08012b9d
 800cd68:	08012b94 	.word	0x08012b94
 800cd6c:	08012b71 	.word	0x08012b71
 800cd70:	3ff80000 	.word	0x3ff80000
 800cd74:	08012d08 	.word	0x08012d08
 800cd78:	08012c13 	.word	0x08012c13
 800cd7c:	2501      	movs	r5, #1
 800cd7e:	2300      	movs	r3, #0
 800cd80:	9306      	str	r3, [sp, #24]
 800cd82:	9508      	str	r5, [sp, #32]
 800cd84:	f04f 33ff 	mov.w	r3, #4294967295
 800cd88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	2312      	movs	r3, #18
 800cd90:	e7b0      	b.n	800ccf4 <_dtoa_r+0x26c>
 800cd92:	2301      	movs	r3, #1
 800cd94:	9308      	str	r3, [sp, #32]
 800cd96:	e7f5      	b.n	800cd84 <_dtoa_r+0x2fc>
 800cd98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd9e:	e7b8      	b.n	800cd12 <_dtoa_r+0x28a>
 800cda0:	3101      	adds	r1, #1
 800cda2:	6041      	str	r1, [r0, #4]
 800cda4:	0052      	lsls	r2, r2, #1
 800cda6:	e7b8      	b.n	800cd1a <_dtoa_r+0x292>
 800cda8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cdaa:	9a01      	ldr	r2, [sp, #4]
 800cdac:	601a      	str	r2, [r3, #0]
 800cdae:	9b03      	ldr	r3, [sp, #12]
 800cdb0:	2b0e      	cmp	r3, #14
 800cdb2:	f200 809d 	bhi.w	800cef0 <_dtoa_r+0x468>
 800cdb6:	2d00      	cmp	r5, #0
 800cdb8:	f000 809a 	beq.w	800cef0 <_dtoa_r+0x468>
 800cdbc:	9b00      	ldr	r3, [sp, #0]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	dd32      	ble.n	800ce28 <_dtoa_r+0x3a0>
 800cdc2:	4ab7      	ldr	r2, [pc, #732]	; (800d0a0 <_dtoa_r+0x618>)
 800cdc4:	f003 030f 	and.w	r3, r3, #15
 800cdc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdcc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cdd0:	9b00      	ldr	r3, [sp, #0]
 800cdd2:	05d8      	lsls	r0, r3, #23
 800cdd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cdd8:	d516      	bpl.n	800ce08 <_dtoa_r+0x380>
 800cdda:	4bb2      	ldr	r3, [pc, #712]	; (800d0a4 <_dtoa_r+0x61c>)
 800cddc:	ec51 0b19 	vmov	r0, r1, d9
 800cde0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cde4:	f7f3 fd5a 	bl	800089c <__aeabi_ddiv>
 800cde8:	f007 070f 	and.w	r7, r7, #15
 800cdec:	4682      	mov	sl, r0
 800cdee:	468b      	mov	fp, r1
 800cdf0:	2503      	movs	r5, #3
 800cdf2:	4eac      	ldr	r6, [pc, #688]	; (800d0a4 <_dtoa_r+0x61c>)
 800cdf4:	b957      	cbnz	r7, 800ce0c <_dtoa_r+0x384>
 800cdf6:	4642      	mov	r2, r8
 800cdf8:	464b      	mov	r3, r9
 800cdfa:	4650      	mov	r0, sl
 800cdfc:	4659      	mov	r1, fp
 800cdfe:	f7f3 fd4d 	bl	800089c <__aeabi_ddiv>
 800ce02:	4682      	mov	sl, r0
 800ce04:	468b      	mov	fp, r1
 800ce06:	e028      	b.n	800ce5a <_dtoa_r+0x3d2>
 800ce08:	2502      	movs	r5, #2
 800ce0a:	e7f2      	b.n	800cdf2 <_dtoa_r+0x36a>
 800ce0c:	07f9      	lsls	r1, r7, #31
 800ce0e:	d508      	bpl.n	800ce22 <_dtoa_r+0x39a>
 800ce10:	4640      	mov	r0, r8
 800ce12:	4649      	mov	r1, r9
 800ce14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ce18:	f7f3 fc16 	bl	8000648 <__aeabi_dmul>
 800ce1c:	3501      	adds	r5, #1
 800ce1e:	4680      	mov	r8, r0
 800ce20:	4689      	mov	r9, r1
 800ce22:	107f      	asrs	r7, r7, #1
 800ce24:	3608      	adds	r6, #8
 800ce26:	e7e5      	b.n	800cdf4 <_dtoa_r+0x36c>
 800ce28:	f000 809b 	beq.w	800cf62 <_dtoa_r+0x4da>
 800ce2c:	9b00      	ldr	r3, [sp, #0]
 800ce2e:	4f9d      	ldr	r7, [pc, #628]	; (800d0a4 <_dtoa_r+0x61c>)
 800ce30:	425e      	negs	r6, r3
 800ce32:	4b9b      	ldr	r3, [pc, #620]	; (800d0a0 <_dtoa_r+0x618>)
 800ce34:	f006 020f 	and.w	r2, r6, #15
 800ce38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce40:	ec51 0b19 	vmov	r0, r1, d9
 800ce44:	f7f3 fc00 	bl	8000648 <__aeabi_dmul>
 800ce48:	1136      	asrs	r6, r6, #4
 800ce4a:	4682      	mov	sl, r0
 800ce4c:	468b      	mov	fp, r1
 800ce4e:	2300      	movs	r3, #0
 800ce50:	2502      	movs	r5, #2
 800ce52:	2e00      	cmp	r6, #0
 800ce54:	d17a      	bne.n	800cf4c <_dtoa_r+0x4c4>
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d1d3      	bne.n	800ce02 <_dtoa_r+0x37a>
 800ce5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	f000 8082 	beq.w	800cf66 <_dtoa_r+0x4de>
 800ce62:	4b91      	ldr	r3, [pc, #580]	; (800d0a8 <_dtoa_r+0x620>)
 800ce64:	2200      	movs	r2, #0
 800ce66:	4650      	mov	r0, sl
 800ce68:	4659      	mov	r1, fp
 800ce6a:	f7f3 fe5f 	bl	8000b2c <__aeabi_dcmplt>
 800ce6e:	2800      	cmp	r0, #0
 800ce70:	d079      	beq.n	800cf66 <_dtoa_r+0x4de>
 800ce72:	9b03      	ldr	r3, [sp, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d076      	beq.n	800cf66 <_dtoa_r+0x4de>
 800ce78:	9b02      	ldr	r3, [sp, #8]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	dd36      	ble.n	800ceec <_dtoa_r+0x464>
 800ce7e:	9b00      	ldr	r3, [sp, #0]
 800ce80:	4650      	mov	r0, sl
 800ce82:	4659      	mov	r1, fp
 800ce84:	1e5f      	subs	r7, r3, #1
 800ce86:	2200      	movs	r2, #0
 800ce88:	4b88      	ldr	r3, [pc, #544]	; (800d0ac <_dtoa_r+0x624>)
 800ce8a:	f7f3 fbdd 	bl	8000648 <__aeabi_dmul>
 800ce8e:	9e02      	ldr	r6, [sp, #8]
 800ce90:	4682      	mov	sl, r0
 800ce92:	468b      	mov	fp, r1
 800ce94:	3501      	adds	r5, #1
 800ce96:	4628      	mov	r0, r5
 800ce98:	f7f3 fb6c 	bl	8000574 <__aeabi_i2d>
 800ce9c:	4652      	mov	r2, sl
 800ce9e:	465b      	mov	r3, fp
 800cea0:	f7f3 fbd2 	bl	8000648 <__aeabi_dmul>
 800cea4:	4b82      	ldr	r3, [pc, #520]	; (800d0b0 <_dtoa_r+0x628>)
 800cea6:	2200      	movs	r2, #0
 800cea8:	f7f3 fa18 	bl	80002dc <__adddf3>
 800ceac:	46d0      	mov	r8, sl
 800ceae:	46d9      	mov	r9, fp
 800ceb0:	4682      	mov	sl, r0
 800ceb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ceb6:	2e00      	cmp	r6, #0
 800ceb8:	d158      	bne.n	800cf6c <_dtoa_r+0x4e4>
 800ceba:	4b7e      	ldr	r3, [pc, #504]	; (800d0b4 <_dtoa_r+0x62c>)
 800cebc:	2200      	movs	r2, #0
 800cebe:	4640      	mov	r0, r8
 800cec0:	4649      	mov	r1, r9
 800cec2:	f7f3 fa09 	bl	80002d8 <__aeabi_dsub>
 800cec6:	4652      	mov	r2, sl
 800cec8:	465b      	mov	r3, fp
 800ceca:	4680      	mov	r8, r0
 800cecc:	4689      	mov	r9, r1
 800cece:	f7f3 fe4b 	bl	8000b68 <__aeabi_dcmpgt>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	f040 8295 	bne.w	800d402 <_dtoa_r+0x97a>
 800ced8:	4652      	mov	r2, sl
 800ceda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cede:	4640      	mov	r0, r8
 800cee0:	4649      	mov	r1, r9
 800cee2:	f7f3 fe23 	bl	8000b2c <__aeabi_dcmplt>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	f040 8289 	bne.w	800d3fe <_dtoa_r+0x976>
 800ceec:	ec5b ab19 	vmov	sl, fp, d9
 800cef0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	f2c0 8148 	blt.w	800d188 <_dtoa_r+0x700>
 800cef8:	9a00      	ldr	r2, [sp, #0]
 800cefa:	2a0e      	cmp	r2, #14
 800cefc:	f300 8144 	bgt.w	800d188 <_dtoa_r+0x700>
 800cf00:	4b67      	ldr	r3, [pc, #412]	; (800d0a0 <_dtoa_r+0x618>)
 800cf02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cf0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f280 80d5 	bge.w	800d0bc <_dtoa_r+0x634>
 800cf12:	9b03      	ldr	r3, [sp, #12]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f300 80d1 	bgt.w	800d0bc <_dtoa_r+0x634>
 800cf1a:	f040 826f 	bne.w	800d3fc <_dtoa_r+0x974>
 800cf1e:	4b65      	ldr	r3, [pc, #404]	; (800d0b4 <_dtoa_r+0x62c>)
 800cf20:	2200      	movs	r2, #0
 800cf22:	4640      	mov	r0, r8
 800cf24:	4649      	mov	r1, r9
 800cf26:	f7f3 fb8f 	bl	8000648 <__aeabi_dmul>
 800cf2a:	4652      	mov	r2, sl
 800cf2c:	465b      	mov	r3, fp
 800cf2e:	f7f3 fe11 	bl	8000b54 <__aeabi_dcmpge>
 800cf32:	9e03      	ldr	r6, [sp, #12]
 800cf34:	4637      	mov	r7, r6
 800cf36:	2800      	cmp	r0, #0
 800cf38:	f040 8245 	bne.w	800d3c6 <_dtoa_r+0x93e>
 800cf3c:	9d01      	ldr	r5, [sp, #4]
 800cf3e:	2331      	movs	r3, #49	; 0x31
 800cf40:	f805 3b01 	strb.w	r3, [r5], #1
 800cf44:	9b00      	ldr	r3, [sp, #0]
 800cf46:	3301      	adds	r3, #1
 800cf48:	9300      	str	r3, [sp, #0]
 800cf4a:	e240      	b.n	800d3ce <_dtoa_r+0x946>
 800cf4c:	07f2      	lsls	r2, r6, #31
 800cf4e:	d505      	bpl.n	800cf5c <_dtoa_r+0x4d4>
 800cf50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf54:	f7f3 fb78 	bl	8000648 <__aeabi_dmul>
 800cf58:	3501      	adds	r5, #1
 800cf5a:	2301      	movs	r3, #1
 800cf5c:	1076      	asrs	r6, r6, #1
 800cf5e:	3708      	adds	r7, #8
 800cf60:	e777      	b.n	800ce52 <_dtoa_r+0x3ca>
 800cf62:	2502      	movs	r5, #2
 800cf64:	e779      	b.n	800ce5a <_dtoa_r+0x3d2>
 800cf66:	9f00      	ldr	r7, [sp, #0]
 800cf68:	9e03      	ldr	r6, [sp, #12]
 800cf6a:	e794      	b.n	800ce96 <_dtoa_r+0x40e>
 800cf6c:	9901      	ldr	r1, [sp, #4]
 800cf6e:	4b4c      	ldr	r3, [pc, #304]	; (800d0a0 <_dtoa_r+0x618>)
 800cf70:	4431      	add	r1, r6
 800cf72:	910d      	str	r1, [sp, #52]	; 0x34
 800cf74:	9908      	ldr	r1, [sp, #32]
 800cf76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cf7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf7e:	2900      	cmp	r1, #0
 800cf80:	d043      	beq.n	800d00a <_dtoa_r+0x582>
 800cf82:	494d      	ldr	r1, [pc, #308]	; (800d0b8 <_dtoa_r+0x630>)
 800cf84:	2000      	movs	r0, #0
 800cf86:	f7f3 fc89 	bl	800089c <__aeabi_ddiv>
 800cf8a:	4652      	mov	r2, sl
 800cf8c:	465b      	mov	r3, fp
 800cf8e:	f7f3 f9a3 	bl	80002d8 <__aeabi_dsub>
 800cf92:	9d01      	ldr	r5, [sp, #4]
 800cf94:	4682      	mov	sl, r0
 800cf96:	468b      	mov	fp, r1
 800cf98:	4649      	mov	r1, r9
 800cf9a:	4640      	mov	r0, r8
 800cf9c:	f7f3 fe04 	bl	8000ba8 <__aeabi_d2iz>
 800cfa0:	4606      	mov	r6, r0
 800cfa2:	f7f3 fae7 	bl	8000574 <__aeabi_i2d>
 800cfa6:	4602      	mov	r2, r0
 800cfa8:	460b      	mov	r3, r1
 800cfaa:	4640      	mov	r0, r8
 800cfac:	4649      	mov	r1, r9
 800cfae:	f7f3 f993 	bl	80002d8 <__aeabi_dsub>
 800cfb2:	3630      	adds	r6, #48	; 0x30
 800cfb4:	f805 6b01 	strb.w	r6, [r5], #1
 800cfb8:	4652      	mov	r2, sl
 800cfba:	465b      	mov	r3, fp
 800cfbc:	4680      	mov	r8, r0
 800cfbe:	4689      	mov	r9, r1
 800cfc0:	f7f3 fdb4 	bl	8000b2c <__aeabi_dcmplt>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	d163      	bne.n	800d090 <_dtoa_r+0x608>
 800cfc8:	4642      	mov	r2, r8
 800cfca:	464b      	mov	r3, r9
 800cfcc:	4936      	ldr	r1, [pc, #216]	; (800d0a8 <_dtoa_r+0x620>)
 800cfce:	2000      	movs	r0, #0
 800cfd0:	f7f3 f982 	bl	80002d8 <__aeabi_dsub>
 800cfd4:	4652      	mov	r2, sl
 800cfd6:	465b      	mov	r3, fp
 800cfd8:	f7f3 fda8 	bl	8000b2c <__aeabi_dcmplt>
 800cfdc:	2800      	cmp	r0, #0
 800cfde:	f040 80b5 	bne.w	800d14c <_dtoa_r+0x6c4>
 800cfe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfe4:	429d      	cmp	r5, r3
 800cfe6:	d081      	beq.n	800ceec <_dtoa_r+0x464>
 800cfe8:	4b30      	ldr	r3, [pc, #192]	; (800d0ac <_dtoa_r+0x624>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	4650      	mov	r0, sl
 800cfee:	4659      	mov	r1, fp
 800cff0:	f7f3 fb2a 	bl	8000648 <__aeabi_dmul>
 800cff4:	4b2d      	ldr	r3, [pc, #180]	; (800d0ac <_dtoa_r+0x624>)
 800cff6:	4682      	mov	sl, r0
 800cff8:	468b      	mov	fp, r1
 800cffa:	4640      	mov	r0, r8
 800cffc:	4649      	mov	r1, r9
 800cffe:	2200      	movs	r2, #0
 800d000:	f7f3 fb22 	bl	8000648 <__aeabi_dmul>
 800d004:	4680      	mov	r8, r0
 800d006:	4689      	mov	r9, r1
 800d008:	e7c6      	b.n	800cf98 <_dtoa_r+0x510>
 800d00a:	4650      	mov	r0, sl
 800d00c:	4659      	mov	r1, fp
 800d00e:	f7f3 fb1b 	bl	8000648 <__aeabi_dmul>
 800d012:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d014:	9d01      	ldr	r5, [sp, #4]
 800d016:	930f      	str	r3, [sp, #60]	; 0x3c
 800d018:	4682      	mov	sl, r0
 800d01a:	468b      	mov	fp, r1
 800d01c:	4649      	mov	r1, r9
 800d01e:	4640      	mov	r0, r8
 800d020:	f7f3 fdc2 	bl	8000ba8 <__aeabi_d2iz>
 800d024:	4606      	mov	r6, r0
 800d026:	f7f3 faa5 	bl	8000574 <__aeabi_i2d>
 800d02a:	3630      	adds	r6, #48	; 0x30
 800d02c:	4602      	mov	r2, r0
 800d02e:	460b      	mov	r3, r1
 800d030:	4640      	mov	r0, r8
 800d032:	4649      	mov	r1, r9
 800d034:	f7f3 f950 	bl	80002d8 <__aeabi_dsub>
 800d038:	f805 6b01 	strb.w	r6, [r5], #1
 800d03c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d03e:	429d      	cmp	r5, r3
 800d040:	4680      	mov	r8, r0
 800d042:	4689      	mov	r9, r1
 800d044:	f04f 0200 	mov.w	r2, #0
 800d048:	d124      	bne.n	800d094 <_dtoa_r+0x60c>
 800d04a:	4b1b      	ldr	r3, [pc, #108]	; (800d0b8 <_dtoa_r+0x630>)
 800d04c:	4650      	mov	r0, sl
 800d04e:	4659      	mov	r1, fp
 800d050:	f7f3 f944 	bl	80002dc <__adddf3>
 800d054:	4602      	mov	r2, r0
 800d056:	460b      	mov	r3, r1
 800d058:	4640      	mov	r0, r8
 800d05a:	4649      	mov	r1, r9
 800d05c:	f7f3 fd84 	bl	8000b68 <__aeabi_dcmpgt>
 800d060:	2800      	cmp	r0, #0
 800d062:	d173      	bne.n	800d14c <_dtoa_r+0x6c4>
 800d064:	4652      	mov	r2, sl
 800d066:	465b      	mov	r3, fp
 800d068:	4913      	ldr	r1, [pc, #76]	; (800d0b8 <_dtoa_r+0x630>)
 800d06a:	2000      	movs	r0, #0
 800d06c:	f7f3 f934 	bl	80002d8 <__aeabi_dsub>
 800d070:	4602      	mov	r2, r0
 800d072:	460b      	mov	r3, r1
 800d074:	4640      	mov	r0, r8
 800d076:	4649      	mov	r1, r9
 800d078:	f7f3 fd58 	bl	8000b2c <__aeabi_dcmplt>
 800d07c:	2800      	cmp	r0, #0
 800d07e:	f43f af35 	beq.w	800ceec <_dtoa_r+0x464>
 800d082:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d084:	1e6b      	subs	r3, r5, #1
 800d086:	930f      	str	r3, [sp, #60]	; 0x3c
 800d088:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d08c:	2b30      	cmp	r3, #48	; 0x30
 800d08e:	d0f8      	beq.n	800d082 <_dtoa_r+0x5fa>
 800d090:	9700      	str	r7, [sp, #0]
 800d092:	e049      	b.n	800d128 <_dtoa_r+0x6a0>
 800d094:	4b05      	ldr	r3, [pc, #20]	; (800d0ac <_dtoa_r+0x624>)
 800d096:	f7f3 fad7 	bl	8000648 <__aeabi_dmul>
 800d09a:	4680      	mov	r8, r0
 800d09c:	4689      	mov	r9, r1
 800d09e:	e7bd      	b.n	800d01c <_dtoa_r+0x594>
 800d0a0:	08012d08 	.word	0x08012d08
 800d0a4:	08012ce0 	.word	0x08012ce0
 800d0a8:	3ff00000 	.word	0x3ff00000
 800d0ac:	40240000 	.word	0x40240000
 800d0b0:	401c0000 	.word	0x401c0000
 800d0b4:	40140000 	.word	0x40140000
 800d0b8:	3fe00000 	.word	0x3fe00000
 800d0bc:	9d01      	ldr	r5, [sp, #4]
 800d0be:	4656      	mov	r6, sl
 800d0c0:	465f      	mov	r7, fp
 800d0c2:	4642      	mov	r2, r8
 800d0c4:	464b      	mov	r3, r9
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	4639      	mov	r1, r7
 800d0ca:	f7f3 fbe7 	bl	800089c <__aeabi_ddiv>
 800d0ce:	f7f3 fd6b 	bl	8000ba8 <__aeabi_d2iz>
 800d0d2:	4682      	mov	sl, r0
 800d0d4:	f7f3 fa4e 	bl	8000574 <__aeabi_i2d>
 800d0d8:	4642      	mov	r2, r8
 800d0da:	464b      	mov	r3, r9
 800d0dc:	f7f3 fab4 	bl	8000648 <__aeabi_dmul>
 800d0e0:	4602      	mov	r2, r0
 800d0e2:	460b      	mov	r3, r1
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	4639      	mov	r1, r7
 800d0e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d0ec:	f7f3 f8f4 	bl	80002d8 <__aeabi_dsub>
 800d0f0:	f805 6b01 	strb.w	r6, [r5], #1
 800d0f4:	9e01      	ldr	r6, [sp, #4]
 800d0f6:	9f03      	ldr	r7, [sp, #12]
 800d0f8:	1bae      	subs	r6, r5, r6
 800d0fa:	42b7      	cmp	r7, r6
 800d0fc:	4602      	mov	r2, r0
 800d0fe:	460b      	mov	r3, r1
 800d100:	d135      	bne.n	800d16e <_dtoa_r+0x6e6>
 800d102:	f7f3 f8eb 	bl	80002dc <__adddf3>
 800d106:	4642      	mov	r2, r8
 800d108:	464b      	mov	r3, r9
 800d10a:	4606      	mov	r6, r0
 800d10c:	460f      	mov	r7, r1
 800d10e:	f7f3 fd2b 	bl	8000b68 <__aeabi_dcmpgt>
 800d112:	b9d0      	cbnz	r0, 800d14a <_dtoa_r+0x6c2>
 800d114:	4642      	mov	r2, r8
 800d116:	464b      	mov	r3, r9
 800d118:	4630      	mov	r0, r6
 800d11a:	4639      	mov	r1, r7
 800d11c:	f7f3 fcfc 	bl	8000b18 <__aeabi_dcmpeq>
 800d120:	b110      	cbz	r0, 800d128 <_dtoa_r+0x6a0>
 800d122:	f01a 0f01 	tst.w	sl, #1
 800d126:	d110      	bne.n	800d14a <_dtoa_r+0x6c2>
 800d128:	4620      	mov	r0, r4
 800d12a:	ee18 1a10 	vmov	r1, s16
 800d12e:	f000 fd17 	bl	800db60 <_Bfree>
 800d132:	2300      	movs	r3, #0
 800d134:	9800      	ldr	r0, [sp, #0]
 800d136:	702b      	strb	r3, [r5, #0]
 800d138:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d13a:	3001      	adds	r0, #1
 800d13c:	6018      	str	r0, [r3, #0]
 800d13e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d140:	2b00      	cmp	r3, #0
 800d142:	f43f acf1 	beq.w	800cb28 <_dtoa_r+0xa0>
 800d146:	601d      	str	r5, [r3, #0]
 800d148:	e4ee      	b.n	800cb28 <_dtoa_r+0xa0>
 800d14a:	9f00      	ldr	r7, [sp, #0]
 800d14c:	462b      	mov	r3, r5
 800d14e:	461d      	mov	r5, r3
 800d150:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d154:	2a39      	cmp	r2, #57	; 0x39
 800d156:	d106      	bne.n	800d166 <_dtoa_r+0x6de>
 800d158:	9a01      	ldr	r2, [sp, #4]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d1f7      	bne.n	800d14e <_dtoa_r+0x6c6>
 800d15e:	9901      	ldr	r1, [sp, #4]
 800d160:	2230      	movs	r2, #48	; 0x30
 800d162:	3701      	adds	r7, #1
 800d164:	700a      	strb	r2, [r1, #0]
 800d166:	781a      	ldrb	r2, [r3, #0]
 800d168:	3201      	adds	r2, #1
 800d16a:	701a      	strb	r2, [r3, #0]
 800d16c:	e790      	b.n	800d090 <_dtoa_r+0x608>
 800d16e:	4ba6      	ldr	r3, [pc, #664]	; (800d408 <_dtoa_r+0x980>)
 800d170:	2200      	movs	r2, #0
 800d172:	f7f3 fa69 	bl	8000648 <__aeabi_dmul>
 800d176:	2200      	movs	r2, #0
 800d178:	2300      	movs	r3, #0
 800d17a:	4606      	mov	r6, r0
 800d17c:	460f      	mov	r7, r1
 800d17e:	f7f3 fccb 	bl	8000b18 <__aeabi_dcmpeq>
 800d182:	2800      	cmp	r0, #0
 800d184:	d09d      	beq.n	800d0c2 <_dtoa_r+0x63a>
 800d186:	e7cf      	b.n	800d128 <_dtoa_r+0x6a0>
 800d188:	9a08      	ldr	r2, [sp, #32]
 800d18a:	2a00      	cmp	r2, #0
 800d18c:	f000 80d7 	beq.w	800d33e <_dtoa_r+0x8b6>
 800d190:	9a06      	ldr	r2, [sp, #24]
 800d192:	2a01      	cmp	r2, #1
 800d194:	f300 80ba 	bgt.w	800d30c <_dtoa_r+0x884>
 800d198:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d19a:	2a00      	cmp	r2, #0
 800d19c:	f000 80b2 	beq.w	800d304 <_dtoa_r+0x87c>
 800d1a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d1a4:	9e07      	ldr	r6, [sp, #28]
 800d1a6:	9d04      	ldr	r5, [sp, #16]
 800d1a8:	9a04      	ldr	r2, [sp, #16]
 800d1aa:	441a      	add	r2, r3
 800d1ac:	9204      	str	r2, [sp, #16]
 800d1ae:	9a05      	ldr	r2, [sp, #20]
 800d1b0:	2101      	movs	r1, #1
 800d1b2:	441a      	add	r2, r3
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	9205      	str	r2, [sp, #20]
 800d1b8:	f000 fd8a 	bl	800dcd0 <__i2b>
 800d1bc:	4607      	mov	r7, r0
 800d1be:	2d00      	cmp	r5, #0
 800d1c0:	dd0c      	ble.n	800d1dc <_dtoa_r+0x754>
 800d1c2:	9b05      	ldr	r3, [sp, #20]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	dd09      	ble.n	800d1dc <_dtoa_r+0x754>
 800d1c8:	42ab      	cmp	r3, r5
 800d1ca:	9a04      	ldr	r2, [sp, #16]
 800d1cc:	bfa8      	it	ge
 800d1ce:	462b      	movge	r3, r5
 800d1d0:	1ad2      	subs	r2, r2, r3
 800d1d2:	9204      	str	r2, [sp, #16]
 800d1d4:	9a05      	ldr	r2, [sp, #20]
 800d1d6:	1aed      	subs	r5, r5, r3
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	9305      	str	r3, [sp, #20]
 800d1dc:	9b07      	ldr	r3, [sp, #28]
 800d1de:	b31b      	cbz	r3, 800d228 <_dtoa_r+0x7a0>
 800d1e0:	9b08      	ldr	r3, [sp, #32]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	f000 80af 	beq.w	800d346 <_dtoa_r+0x8be>
 800d1e8:	2e00      	cmp	r6, #0
 800d1ea:	dd13      	ble.n	800d214 <_dtoa_r+0x78c>
 800d1ec:	4639      	mov	r1, r7
 800d1ee:	4632      	mov	r2, r6
 800d1f0:	4620      	mov	r0, r4
 800d1f2:	f000 fe2d 	bl	800de50 <__pow5mult>
 800d1f6:	ee18 2a10 	vmov	r2, s16
 800d1fa:	4601      	mov	r1, r0
 800d1fc:	4607      	mov	r7, r0
 800d1fe:	4620      	mov	r0, r4
 800d200:	f000 fd7c 	bl	800dcfc <__multiply>
 800d204:	ee18 1a10 	vmov	r1, s16
 800d208:	4680      	mov	r8, r0
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 fca8 	bl	800db60 <_Bfree>
 800d210:	ee08 8a10 	vmov	s16, r8
 800d214:	9b07      	ldr	r3, [sp, #28]
 800d216:	1b9a      	subs	r2, r3, r6
 800d218:	d006      	beq.n	800d228 <_dtoa_r+0x7a0>
 800d21a:	ee18 1a10 	vmov	r1, s16
 800d21e:	4620      	mov	r0, r4
 800d220:	f000 fe16 	bl	800de50 <__pow5mult>
 800d224:	ee08 0a10 	vmov	s16, r0
 800d228:	2101      	movs	r1, #1
 800d22a:	4620      	mov	r0, r4
 800d22c:	f000 fd50 	bl	800dcd0 <__i2b>
 800d230:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d232:	2b00      	cmp	r3, #0
 800d234:	4606      	mov	r6, r0
 800d236:	f340 8088 	ble.w	800d34a <_dtoa_r+0x8c2>
 800d23a:	461a      	mov	r2, r3
 800d23c:	4601      	mov	r1, r0
 800d23e:	4620      	mov	r0, r4
 800d240:	f000 fe06 	bl	800de50 <__pow5mult>
 800d244:	9b06      	ldr	r3, [sp, #24]
 800d246:	2b01      	cmp	r3, #1
 800d248:	4606      	mov	r6, r0
 800d24a:	f340 8081 	ble.w	800d350 <_dtoa_r+0x8c8>
 800d24e:	f04f 0800 	mov.w	r8, #0
 800d252:	6933      	ldr	r3, [r6, #16]
 800d254:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d258:	6918      	ldr	r0, [r3, #16]
 800d25a:	f000 fce9 	bl	800dc30 <__hi0bits>
 800d25e:	f1c0 0020 	rsb	r0, r0, #32
 800d262:	9b05      	ldr	r3, [sp, #20]
 800d264:	4418      	add	r0, r3
 800d266:	f010 001f 	ands.w	r0, r0, #31
 800d26a:	f000 8092 	beq.w	800d392 <_dtoa_r+0x90a>
 800d26e:	f1c0 0320 	rsb	r3, r0, #32
 800d272:	2b04      	cmp	r3, #4
 800d274:	f340 808a 	ble.w	800d38c <_dtoa_r+0x904>
 800d278:	f1c0 001c 	rsb	r0, r0, #28
 800d27c:	9b04      	ldr	r3, [sp, #16]
 800d27e:	4403      	add	r3, r0
 800d280:	9304      	str	r3, [sp, #16]
 800d282:	9b05      	ldr	r3, [sp, #20]
 800d284:	4403      	add	r3, r0
 800d286:	4405      	add	r5, r0
 800d288:	9305      	str	r3, [sp, #20]
 800d28a:	9b04      	ldr	r3, [sp, #16]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	dd07      	ble.n	800d2a0 <_dtoa_r+0x818>
 800d290:	ee18 1a10 	vmov	r1, s16
 800d294:	461a      	mov	r2, r3
 800d296:	4620      	mov	r0, r4
 800d298:	f000 fe34 	bl	800df04 <__lshift>
 800d29c:	ee08 0a10 	vmov	s16, r0
 800d2a0:	9b05      	ldr	r3, [sp, #20]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	dd05      	ble.n	800d2b2 <_dtoa_r+0x82a>
 800d2a6:	4631      	mov	r1, r6
 800d2a8:	461a      	mov	r2, r3
 800d2aa:	4620      	mov	r0, r4
 800d2ac:	f000 fe2a 	bl	800df04 <__lshift>
 800d2b0:	4606      	mov	r6, r0
 800d2b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d06e      	beq.n	800d396 <_dtoa_r+0x90e>
 800d2b8:	ee18 0a10 	vmov	r0, s16
 800d2bc:	4631      	mov	r1, r6
 800d2be:	f000 fe91 	bl	800dfe4 <__mcmp>
 800d2c2:	2800      	cmp	r0, #0
 800d2c4:	da67      	bge.n	800d396 <_dtoa_r+0x90e>
 800d2c6:	9b00      	ldr	r3, [sp, #0]
 800d2c8:	3b01      	subs	r3, #1
 800d2ca:	ee18 1a10 	vmov	r1, s16
 800d2ce:	9300      	str	r3, [sp, #0]
 800d2d0:	220a      	movs	r2, #10
 800d2d2:	2300      	movs	r3, #0
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 fc65 	bl	800dba4 <__multadd>
 800d2da:	9b08      	ldr	r3, [sp, #32]
 800d2dc:	ee08 0a10 	vmov	s16, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f000 81b1 	beq.w	800d648 <_dtoa_r+0xbc0>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	4639      	mov	r1, r7
 800d2ea:	220a      	movs	r2, #10
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f000 fc59 	bl	800dba4 <__multadd>
 800d2f2:	9b02      	ldr	r3, [sp, #8]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	4607      	mov	r7, r0
 800d2f8:	f300 808e 	bgt.w	800d418 <_dtoa_r+0x990>
 800d2fc:	9b06      	ldr	r3, [sp, #24]
 800d2fe:	2b02      	cmp	r3, #2
 800d300:	dc51      	bgt.n	800d3a6 <_dtoa_r+0x91e>
 800d302:	e089      	b.n	800d418 <_dtoa_r+0x990>
 800d304:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d306:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d30a:	e74b      	b.n	800d1a4 <_dtoa_r+0x71c>
 800d30c:	9b03      	ldr	r3, [sp, #12]
 800d30e:	1e5e      	subs	r6, r3, #1
 800d310:	9b07      	ldr	r3, [sp, #28]
 800d312:	42b3      	cmp	r3, r6
 800d314:	bfbf      	itttt	lt
 800d316:	9b07      	ldrlt	r3, [sp, #28]
 800d318:	9607      	strlt	r6, [sp, #28]
 800d31a:	1af2      	sublt	r2, r6, r3
 800d31c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d31e:	bfb6      	itet	lt
 800d320:	189b      	addlt	r3, r3, r2
 800d322:	1b9e      	subge	r6, r3, r6
 800d324:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d326:	9b03      	ldr	r3, [sp, #12]
 800d328:	bfb8      	it	lt
 800d32a:	2600      	movlt	r6, #0
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	bfb7      	itett	lt
 800d330:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d334:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d338:	1a9d      	sublt	r5, r3, r2
 800d33a:	2300      	movlt	r3, #0
 800d33c:	e734      	b.n	800d1a8 <_dtoa_r+0x720>
 800d33e:	9e07      	ldr	r6, [sp, #28]
 800d340:	9d04      	ldr	r5, [sp, #16]
 800d342:	9f08      	ldr	r7, [sp, #32]
 800d344:	e73b      	b.n	800d1be <_dtoa_r+0x736>
 800d346:	9a07      	ldr	r2, [sp, #28]
 800d348:	e767      	b.n	800d21a <_dtoa_r+0x792>
 800d34a:	9b06      	ldr	r3, [sp, #24]
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	dc18      	bgt.n	800d382 <_dtoa_r+0x8fa>
 800d350:	f1ba 0f00 	cmp.w	sl, #0
 800d354:	d115      	bne.n	800d382 <_dtoa_r+0x8fa>
 800d356:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d35a:	b993      	cbnz	r3, 800d382 <_dtoa_r+0x8fa>
 800d35c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d360:	0d1b      	lsrs	r3, r3, #20
 800d362:	051b      	lsls	r3, r3, #20
 800d364:	b183      	cbz	r3, 800d388 <_dtoa_r+0x900>
 800d366:	9b04      	ldr	r3, [sp, #16]
 800d368:	3301      	adds	r3, #1
 800d36a:	9304      	str	r3, [sp, #16]
 800d36c:	9b05      	ldr	r3, [sp, #20]
 800d36e:	3301      	adds	r3, #1
 800d370:	9305      	str	r3, [sp, #20]
 800d372:	f04f 0801 	mov.w	r8, #1
 800d376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d378:	2b00      	cmp	r3, #0
 800d37a:	f47f af6a 	bne.w	800d252 <_dtoa_r+0x7ca>
 800d37e:	2001      	movs	r0, #1
 800d380:	e76f      	b.n	800d262 <_dtoa_r+0x7da>
 800d382:	f04f 0800 	mov.w	r8, #0
 800d386:	e7f6      	b.n	800d376 <_dtoa_r+0x8ee>
 800d388:	4698      	mov	r8, r3
 800d38a:	e7f4      	b.n	800d376 <_dtoa_r+0x8ee>
 800d38c:	f43f af7d 	beq.w	800d28a <_dtoa_r+0x802>
 800d390:	4618      	mov	r0, r3
 800d392:	301c      	adds	r0, #28
 800d394:	e772      	b.n	800d27c <_dtoa_r+0x7f4>
 800d396:	9b03      	ldr	r3, [sp, #12]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	dc37      	bgt.n	800d40c <_dtoa_r+0x984>
 800d39c:	9b06      	ldr	r3, [sp, #24]
 800d39e:	2b02      	cmp	r3, #2
 800d3a0:	dd34      	ble.n	800d40c <_dtoa_r+0x984>
 800d3a2:	9b03      	ldr	r3, [sp, #12]
 800d3a4:	9302      	str	r3, [sp, #8]
 800d3a6:	9b02      	ldr	r3, [sp, #8]
 800d3a8:	b96b      	cbnz	r3, 800d3c6 <_dtoa_r+0x93e>
 800d3aa:	4631      	mov	r1, r6
 800d3ac:	2205      	movs	r2, #5
 800d3ae:	4620      	mov	r0, r4
 800d3b0:	f000 fbf8 	bl	800dba4 <__multadd>
 800d3b4:	4601      	mov	r1, r0
 800d3b6:	4606      	mov	r6, r0
 800d3b8:	ee18 0a10 	vmov	r0, s16
 800d3bc:	f000 fe12 	bl	800dfe4 <__mcmp>
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	f73f adbb 	bgt.w	800cf3c <_dtoa_r+0x4b4>
 800d3c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3c8:	9d01      	ldr	r5, [sp, #4]
 800d3ca:	43db      	mvns	r3, r3
 800d3cc:	9300      	str	r3, [sp, #0]
 800d3ce:	f04f 0800 	mov.w	r8, #0
 800d3d2:	4631      	mov	r1, r6
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f000 fbc3 	bl	800db60 <_Bfree>
 800d3da:	2f00      	cmp	r7, #0
 800d3dc:	f43f aea4 	beq.w	800d128 <_dtoa_r+0x6a0>
 800d3e0:	f1b8 0f00 	cmp.w	r8, #0
 800d3e4:	d005      	beq.n	800d3f2 <_dtoa_r+0x96a>
 800d3e6:	45b8      	cmp	r8, r7
 800d3e8:	d003      	beq.n	800d3f2 <_dtoa_r+0x96a>
 800d3ea:	4641      	mov	r1, r8
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	f000 fbb7 	bl	800db60 <_Bfree>
 800d3f2:	4639      	mov	r1, r7
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	f000 fbb3 	bl	800db60 <_Bfree>
 800d3fa:	e695      	b.n	800d128 <_dtoa_r+0x6a0>
 800d3fc:	2600      	movs	r6, #0
 800d3fe:	4637      	mov	r7, r6
 800d400:	e7e1      	b.n	800d3c6 <_dtoa_r+0x93e>
 800d402:	9700      	str	r7, [sp, #0]
 800d404:	4637      	mov	r7, r6
 800d406:	e599      	b.n	800cf3c <_dtoa_r+0x4b4>
 800d408:	40240000 	.word	0x40240000
 800d40c:	9b08      	ldr	r3, [sp, #32]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	f000 80ca 	beq.w	800d5a8 <_dtoa_r+0xb20>
 800d414:	9b03      	ldr	r3, [sp, #12]
 800d416:	9302      	str	r3, [sp, #8]
 800d418:	2d00      	cmp	r5, #0
 800d41a:	dd05      	ble.n	800d428 <_dtoa_r+0x9a0>
 800d41c:	4639      	mov	r1, r7
 800d41e:	462a      	mov	r2, r5
 800d420:	4620      	mov	r0, r4
 800d422:	f000 fd6f 	bl	800df04 <__lshift>
 800d426:	4607      	mov	r7, r0
 800d428:	f1b8 0f00 	cmp.w	r8, #0
 800d42c:	d05b      	beq.n	800d4e6 <_dtoa_r+0xa5e>
 800d42e:	6879      	ldr	r1, [r7, #4]
 800d430:	4620      	mov	r0, r4
 800d432:	f000 fb55 	bl	800dae0 <_Balloc>
 800d436:	4605      	mov	r5, r0
 800d438:	b928      	cbnz	r0, 800d446 <_dtoa_r+0x9be>
 800d43a:	4b87      	ldr	r3, [pc, #540]	; (800d658 <_dtoa_r+0xbd0>)
 800d43c:	4602      	mov	r2, r0
 800d43e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d442:	f7ff bb3b 	b.w	800cabc <_dtoa_r+0x34>
 800d446:	693a      	ldr	r2, [r7, #16]
 800d448:	3202      	adds	r2, #2
 800d44a:	0092      	lsls	r2, r2, #2
 800d44c:	f107 010c 	add.w	r1, r7, #12
 800d450:	300c      	adds	r0, #12
 800d452:	f000 fb2b 	bl	800daac <memcpy>
 800d456:	2201      	movs	r2, #1
 800d458:	4629      	mov	r1, r5
 800d45a:	4620      	mov	r0, r4
 800d45c:	f000 fd52 	bl	800df04 <__lshift>
 800d460:	9b01      	ldr	r3, [sp, #4]
 800d462:	f103 0901 	add.w	r9, r3, #1
 800d466:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d46a:	4413      	add	r3, r2
 800d46c:	9305      	str	r3, [sp, #20]
 800d46e:	f00a 0301 	and.w	r3, sl, #1
 800d472:	46b8      	mov	r8, r7
 800d474:	9304      	str	r3, [sp, #16]
 800d476:	4607      	mov	r7, r0
 800d478:	4631      	mov	r1, r6
 800d47a:	ee18 0a10 	vmov	r0, s16
 800d47e:	f7ff fa75 	bl	800c96c <quorem>
 800d482:	4641      	mov	r1, r8
 800d484:	9002      	str	r0, [sp, #8]
 800d486:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d48a:	ee18 0a10 	vmov	r0, s16
 800d48e:	f000 fda9 	bl	800dfe4 <__mcmp>
 800d492:	463a      	mov	r2, r7
 800d494:	9003      	str	r0, [sp, #12]
 800d496:	4631      	mov	r1, r6
 800d498:	4620      	mov	r0, r4
 800d49a:	f000 fdbf 	bl	800e01c <__mdiff>
 800d49e:	68c2      	ldr	r2, [r0, #12]
 800d4a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d4a4:	4605      	mov	r5, r0
 800d4a6:	bb02      	cbnz	r2, 800d4ea <_dtoa_r+0xa62>
 800d4a8:	4601      	mov	r1, r0
 800d4aa:	ee18 0a10 	vmov	r0, s16
 800d4ae:	f000 fd99 	bl	800dfe4 <__mcmp>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	4629      	mov	r1, r5
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	9207      	str	r2, [sp, #28]
 800d4ba:	f000 fb51 	bl	800db60 <_Bfree>
 800d4be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d4c2:	ea43 0102 	orr.w	r1, r3, r2
 800d4c6:	9b04      	ldr	r3, [sp, #16]
 800d4c8:	430b      	orrs	r3, r1
 800d4ca:	464d      	mov	r5, r9
 800d4cc:	d10f      	bne.n	800d4ee <_dtoa_r+0xa66>
 800d4ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d4d2:	d02a      	beq.n	800d52a <_dtoa_r+0xaa2>
 800d4d4:	9b03      	ldr	r3, [sp, #12]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	dd02      	ble.n	800d4e0 <_dtoa_r+0xa58>
 800d4da:	9b02      	ldr	r3, [sp, #8]
 800d4dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d4e0:	f88b a000 	strb.w	sl, [fp]
 800d4e4:	e775      	b.n	800d3d2 <_dtoa_r+0x94a>
 800d4e6:	4638      	mov	r0, r7
 800d4e8:	e7ba      	b.n	800d460 <_dtoa_r+0x9d8>
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	e7e2      	b.n	800d4b4 <_dtoa_r+0xa2c>
 800d4ee:	9b03      	ldr	r3, [sp, #12]
 800d4f0:	2b00      	cmp	r3, #0
 800d4f2:	db04      	blt.n	800d4fe <_dtoa_r+0xa76>
 800d4f4:	9906      	ldr	r1, [sp, #24]
 800d4f6:	430b      	orrs	r3, r1
 800d4f8:	9904      	ldr	r1, [sp, #16]
 800d4fa:	430b      	orrs	r3, r1
 800d4fc:	d122      	bne.n	800d544 <_dtoa_r+0xabc>
 800d4fe:	2a00      	cmp	r2, #0
 800d500:	ddee      	ble.n	800d4e0 <_dtoa_r+0xa58>
 800d502:	ee18 1a10 	vmov	r1, s16
 800d506:	2201      	movs	r2, #1
 800d508:	4620      	mov	r0, r4
 800d50a:	f000 fcfb 	bl	800df04 <__lshift>
 800d50e:	4631      	mov	r1, r6
 800d510:	ee08 0a10 	vmov	s16, r0
 800d514:	f000 fd66 	bl	800dfe4 <__mcmp>
 800d518:	2800      	cmp	r0, #0
 800d51a:	dc03      	bgt.n	800d524 <_dtoa_r+0xa9c>
 800d51c:	d1e0      	bne.n	800d4e0 <_dtoa_r+0xa58>
 800d51e:	f01a 0f01 	tst.w	sl, #1
 800d522:	d0dd      	beq.n	800d4e0 <_dtoa_r+0xa58>
 800d524:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d528:	d1d7      	bne.n	800d4da <_dtoa_r+0xa52>
 800d52a:	2339      	movs	r3, #57	; 0x39
 800d52c:	f88b 3000 	strb.w	r3, [fp]
 800d530:	462b      	mov	r3, r5
 800d532:	461d      	mov	r5, r3
 800d534:	3b01      	subs	r3, #1
 800d536:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d53a:	2a39      	cmp	r2, #57	; 0x39
 800d53c:	d071      	beq.n	800d622 <_dtoa_r+0xb9a>
 800d53e:	3201      	adds	r2, #1
 800d540:	701a      	strb	r2, [r3, #0]
 800d542:	e746      	b.n	800d3d2 <_dtoa_r+0x94a>
 800d544:	2a00      	cmp	r2, #0
 800d546:	dd07      	ble.n	800d558 <_dtoa_r+0xad0>
 800d548:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d54c:	d0ed      	beq.n	800d52a <_dtoa_r+0xaa2>
 800d54e:	f10a 0301 	add.w	r3, sl, #1
 800d552:	f88b 3000 	strb.w	r3, [fp]
 800d556:	e73c      	b.n	800d3d2 <_dtoa_r+0x94a>
 800d558:	9b05      	ldr	r3, [sp, #20]
 800d55a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d55e:	4599      	cmp	r9, r3
 800d560:	d047      	beq.n	800d5f2 <_dtoa_r+0xb6a>
 800d562:	ee18 1a10 	vmov	r1, s16
 800d566:	2300      	movs	r3, #0
 800d568:	220a      	movs	r2, #10
 800d56a:	4620      	mov	r0, r4
 800d56c:	f000 fb1a 	bl	800dba4 <__multadd>
 800d570:	45b8      	cmp	r8, r7
 800d572:	ee08 0a10 	vmov	s16, r0
 800d576:	f04f 0300 	mov.w	r3, #0
 800d57a:	f04f 020a 	mov.w	r2, #10
 800d57e:	4641      	mov	r1, r8
 800d580:	4620      	mov	r0, r4
 800d582:	d106      	bne.n	800d592 <_dtoa_r+0xb0a>
 800d584:	f000 fb0e 	bl	800dba4 <__multadd>
 800d588:	4680      	mov	r8, r0
 800d58a:	4607      	mov	r7, r0
 800d58c:	f109 0901 	add.w	r9, r9, #1
 800d590:	e772      	b.n	800d478 <_dtoa_r+0x9f0>
 800d592:	f000 fb07 	bl	800dba4 <__multadd>
 800d596:	4639      	mov	r1, r7
 800d598:	4680      	mov	r8, r0
 800d59a:	2300      	movs	r3, #0
 800d59c:	220a      	movs	r2, #10
 800d59e:	4620      	mov	r0, r4
 800d5a0:	f000 fb00 	bl	800dba4 <__multadd>
 800d5a4:	4607      	mov	r7, r0
 800d5a6:	e7f1      	b.n	800d58c <_dtoa_r+0xb04>
 800d5a8:	9b03      	ldr	r3, [sp, #12]
 800d5aa:	9302      	str	r3, [sp, #8]
 800d5ac:	9d01      	ldr	r5, [sp, #4]
 800d5ae:	ee18 0a10 	vmov	r0, s16
 800d5b2:	4631      	mov	r1, r6
 800d5b4:	f7ff f9da 	bl	800c96c <quorem>
 800d5b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d5bc:	9b01      	ldr	r3, [sp, #4]
 800d5be:	f805 ab01 	strb.w	sl, [r5], #1
 800d5c2:	1aea      	subs	r2, r5, r3
 800d5c4:	9b02      	ldr	r3, [sp, #8]
 800d5c6:	4293      	cmp	r3, r2
 800d5c8:	dd09      	ble.n	800d5de <_dtoa_r+0xb56>
 800d5ca:	ee18 1a10 	vmov	r1, s16
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	220a      	movs	r2, #10
 800d5d2:	4620      	mov	r0, r4
 800d5d4:	f000 fae6 	bl	800dba4 <__multadd>
 800d5d8:	ee08 0a10 	vmov	s16, r0
 800d5dc:	e7e7      	b.n	800d5ae <_dtoa_r+0xb26>
 800d5de:	9b02      	ldr	r3, [sp, #8]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	bfc8      	it	gt
 800d5e4:	461d      	movgt	r5, r3
 800d5e6:	9b01      	ldr	r3, [sp, #4]
 800d5e8:	bfd8      	it	le
 800d5ea:	2501      	movle	r5, #1
 800d5ec:	441d      	add	r5, r3
 800d5ee:	f04f 0800 	mov.w	r8, #0
 800d5f2:	ee18 1a10 	vmov	r1, s16
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f000 fc83 	bl	800df04 <__lshift>
 800d5fe:	4631      	mov	r1, r6
 800d600:	ee08 0a10 	vmov	s16, r0
 800d604:	f000 fcee 	bl	800dfe4 <__mcmp>
 800d608:	2800      	cmp	r0, #0
 800d60a:	dc91      	bgt.n	800d530 <_dtoa_r+0xaa8>
 800d60c:	d102      	bne.n	800d614 <_dtoa_r+0xb8c>
 800d60e:	f01a 0f01 	tst.w	sl, #1
 800d612:	d18d      	bne.n	800d530 <_dtoa_r+0xaa8>
 800d614:	462b      	mov	r3, r5
 800d616:	461d      	mov	r5, r3
 800d618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d61c:	2a30      	cmp	r2, #48	; 0x30
 800d61e:	d0fa      	beq.n	800d616 <_dtoa_r+0xb8e>
 800d620:	e6d7      	b.n	800d3d2 <_dtoa_r+0x94a>
 800d622:	9a01      	ldr	r2, [sp, #4]
 800d624:	429a      	cmp	r2, r3
 800d626:	d184      	bne.n	800d532 <_dtoa_r+0xaaa>
 800d628:	9b00      	ldr	r3, [sp, #0]
 800d62a:	3301      	adds	r3, #1
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	2331      	movs	r3, #49	; 0x31
 800d630:	7013      	strb	r3, [r2, #0]
 800d632:	e6ce      	b.n	800d3d2 <_dtoa_r+0x94a>
 800d634:	4b09      	ldr	r3, [pc, #36]	; (800d65c <_dtoa_r+0xbd4>)
 800d636:	f7ff ba95 	b.w	800cb64 <_dtoa_r+0xdc>
 800d63a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d63c:	2b00      	cmp	r3, #0
 800d63e:	f47f aa6e 	bne.w	800cb1e <_dtoa_r+0x96>
 800d642:	4b07      	ldr	r3, [pc, #28]	; (800d660 <_dtoa_r+0xbd8>)
 800d644:	f7ff ba8e 	b.w	800cb64 <_dtoa_r+0xdc>
 800d648:	9b02      	ldr	r3, [sp, #8]
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	dcae      	bgt.n	800d5ac <_dtoa_r+0xb24>
 800d64e:	9b06      	ldr	r3, [sp, #24]
 800d650:	2b02      	cmp	r3, #2
 800d652:	f73f aea8 	bgt.w	800d3a6 <_dtoa_r+0x91e>
 800d656:	e7a9      	b.n	800d5ac <_dtoa_r+0xb24>
 800d658:	08012c13 	.word	0x08012c13
 800d65c:	08012b70 	.word	0x08012b70
 800d660:	08012b94 	.word	0x08012b94

0800d664 <__sflush_r>:
 800d664:	898a      	ldrh	r2, [r1, #12]
 800d666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d66a:	4605      	mov	r5, r0
 800d66c:	0710      	lsls	r0, r2, #28
 800d66e:	460c      	mov	r4, r1
 800d670:	d458      	bmi.n	800d724 <__sflush_r+0xc0>
 800d672:	684b      	ldr	r3, [r1, #4]
 800d674:	2b00      	cmp	r3, #0
 800d676:	dc05      	bgt.n	800d684 <__sflush_r+0x20>
 800d678:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	dc02      	bgt.n	800d684 <__sflush_r+0x20>
 800d67e:	2000      	movs	r0, #0
 800d680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d684:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d686:	2e00      	cmp	r6, #0
 800d688:	d0f9      	beq.n	800d67e <__sflush_r+0x1a>
 800d68a:	2300      	movs	r3, #0
 800d68c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d690:	682f      	ldr	r7, [r5, #0]
 800d692:	602b      	str	r3, [r5, #0]
 800d694:	d032      	beq.n	800d6fc <__sflush_r+0x98>
 800d696:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d698:	89a3      	ldrh	r3, [r4, #12]
 800d69a:	075a      	lsls	r2, r3, #29
 800d69c:	d505      	bpl.n	800d6aa <__sflush_r+0x46>
 800d69e:	6863      	ldr	r3, [r4, #4]
 800d6a0:	1ac0      	subs	r0, r0, r3
 800d6a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6a4:	b10b      	cbz	r3, 800d6aa <__sflush_r+0x46>
 800d6a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6a8:	1ac0      	subs	r0, r0, r3
 800d6aa:	2300      	movs	r3, #0
 800d6ac:	4602      	mov	r2, r0
 800d6ae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6b0:	6a21      	ldr	r1, [r4, #32]
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	47b0      	blx	r6
 800d6b6:	1c43      	adds	r3, r0, #1
 800d6b8:	89a3      	ldrh	r3, [r4, #12]
 800d6ba:	d106      	bne.n	800d6ca <__sflush_r+0x66>
 800d6bc:	6829      	ldr	r1, [r5, #0]
 800d6be:	291d      	cmp	r1, #29
 800d6c0:	d82c      	bhi.n	800d71c <__sflush_r+0xb8>
 800d6c2:	4a2a      	ldr	r2, [pc, #168]	; (800d76c <__sflush_r+0x108>)
 800d6c4:	40ca      	lsrs	r2, r1
 800d6c6:	07d6      	lsls	r6, r2, #31
 800d6c8:	d528      	bpl.n	800d71c <__sflush_r+0xb8>
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	6062      	str	r2, [r4, #4]
 800d6ce:	04d9      	lsls	r1, r3, #19
 800d6d0:	6922      	ldr	r2, [r4, #16]
 800d6d2:	6022      	str	r2, [r4, #0]
 800d6d4:	d504      	bpl.n	800d6e0 <__sflush_r+0x7c>
 800d6d6:	1c42      	adds	r2, r0, #1
 800d6d8:	d101      	bne.n	800d6de <__sflush_r+0x7a>
 800d6da:	682b      	ldr	r3, [r5, #0]
 800d6dc:	b903      	cbnz	r3, 800d6e0 <__sflush_r+0x7c>
 800d6de:	6560      	str	r0, [r4, #84]	; 0x54
 800d6e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6e2:	602f      	str	r7, [r5, #0]
 800d6e4:	2900      	cmp	r1, #0
 800d6e6:	d0ca      	beq.n	800d67e <__sflush_r+0x1a>
 800d6e8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6ec:	4299      	cmp	r1, r3
 800d6ee:	d002      	beq.n	800d6f6 <__sflush_r+0x92>
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	f7fe fa73 	bl	800bbdc <_free_r>
 800d6f6:	2000      	movs	r0, #0
 800d6f8:	6360      	str	r0, [r4, #52]	; 0x34
 800d6fa:	e7c1      	b.n	800d680 <__sflush_r+0x1c>
 800d6fc:	6a21      	ldr	r1, [r4, #32]
 800d6fe:	2301      	movs	r3, #1
 800d700:	4628      	mov	r0, r5
 800d702:	47b0      	blx	r6
 800d704:	1c41      	adds	r1, r0, #1
 800d706:	d1c7      	bne.n	800d698 <__sflush_r+0x34>
 800d708:	682b      	ldr	r3, [r5, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d0c4      	beq.n	800d698 <__sflush_r+0x34>
 800d70e:	2b1d      	cmp	r3, #29
 800d710:	d001      	beq.n	800d716 <__sflush_r+0xb2>
 800d712:	2b16      	cmp	r3, #22
 800d714:	d101      	bne.n	800d71a <__sflush_r+0xb6>
 800d716:	602f      	str	r7, [r5, #0]
 800d718:	e7b1      	b.n	800d67e <__sflush_r+0x1a>
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d720:	81a3      	strh	r3, [r4, #12]
 800d722:	e7ad      	b.n	800d680 <__sflush_r+0x1c>
 800d724:	690f      	ldr	r7, [r1, #16]
 800d726:	2f00      	cmp	r7, #0
 800d728:	d0a9      	beq.n	800d67e <__sflush_r+0x1a>
 800d72a:	0793      	lsls	r3, r2, #30
 800d72c:	680e      	ldr	r6, [r1, #0]
 800d72e:	bf08      	it	eq
 800d730:	694b      	ldreq	r3, [r1, #20]
 800d732:	600f      	str	r7, [r1, #0]
 800d734:	bf18      	it	ne
 800d736:	2300      	movne	r3, #0
 800d738:	eba6 0807 	sub.w	r8, r6, r7
 800d73c:	608b      	str	r3, [r1, #8]
 800d73e:	f1b8 0f00 	cmp.w	r8, #0
 800d742:	dd9c      	ble.n	800d67e <__sflush_r+0x1a>
 800d744:	6a21      	ldr	r1, [r4, #32]
 800d746:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d748:	4643      	mov	r3, r8
 800d74a:	463a      	mov	r2, r7
 800d74c:	4628      	mov	r0, r5
 800d74e:	47b0      	blx	r6
 800d750:	2800      	cmp	r0, #0
 800d752:	dc06      	bgt.n	800d762 <__sflush_r+0xfe>
 800d754:	89a3      	ldrh	r3, [r4, #12]
 800d756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d75a:	81a3      	strh	r3, [r4, #12]
 800d75c:	f04f 30ff 	mov.w	r0, #4294967295
 800d760:	e78e      	b.n	800d680 <__sflush_r+0x1c>
 800d762:	4407      	add	r7, r0
 800d764:	eba8 0800 	sub.w	r8, r8, r0
 800d768:	e7e9      	b.n	800d73e <__sflush_r+0xda>
 800d76a:	bf00      	nop
 800d76c:	20400001 	.word	0x20400001

0800d770 <_fflush_r>:
 800d770:	b538      	push	{r3, r4, r5, lr}
 800d772:	690b      	ldr	r3, [r1, #16]
 800d774:	4605      	mov	r5, r0
 800d776:	460c      	mov	r4, r1
 800d778:	b913      	cbnz	r3, 800d780 <_fflush_r+0x10>
 800d77a:	2500      	movs	r5, #0
 800d77c:	4628      	mov	r0, r5
 800d77e:	bd38      	pop	{r3, r4, r5, pc}
 800d780:	b118      	cbz	r0, 800d78a <_fflush_r+0x1a>
 800d782:	6983      	ldr	r3, [r0, #24]
 800d784:	b90b      	cbnz	r3, 800d78a <_fflush_r+0x1a>
 800d786:	f000 f887 	bl	800d898 <__sinit>
 800d78a:	4b14      	ldr	r3, [pc, #80]	; (800d7dc <_fflush_r+0x6c>)
 800d78c:	429c      	cmp	r4, r3
 800d78e:	d11b      	bne.n	800d7c8 <_fflush_r+0x58>
 800d790:	686c      	ldr	r4, [r5, #4]
 800d792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d0ef      	beq.n	800d77a <_fflush_r+0xa>
 800d79a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d79c:	07d0      	lsls	r0, r2, #31
 800d79e:	d404      	bmi.n	800d7aa <_fflush_r+0x3a>
 800d7a0:	0599      	lsls	r1, r3, #22
 800d7a2:	d402      	bmi.n	800d7aa <_fflush_r+0x3a>
 800d7a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7a6:	f000 f91a 	bl	800d9de <__retarget_lock_acquire_recursive>
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	4621      	mov	r1, r4
 800d7ae:	f7ff ff59 	bl	800d664 <__sflush_r>
 800d7b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d7b4:	07da      	lsls	r2, r3, #31
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	d4e0      	bmi.n	800d77c <_fflush_r+0xc>
 800d7ba:	89a3      	ldrh	r3, [r4, #12]
 800d7bc:	059b      	lsls	r3, r3, #22
 800d7be:	d4dd      	bmi.n	800d77c <_fflush_r+0xc>
 800d7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7c2:	f000 f90d 	bl	800d9e0 <__retarget_lock_release_recursive>
 800d7c6:	e7d9      	b.n	800d77c <_fflush_r+0xc>
 800d7c8:	4b05      	ldr	r3, [pc, #20]	; (800d7e0 <_fflush_r+0x70>)
 800d7ca:	429c      	cmp	r4, r3
 800d7cc:	d101      	bne.n	800d7d2 <_fflush_r+0x62>
 800d7ce:	68ac      	ldr	r4, [r5, #8]
 800d7d0:	e7df      	b.n	800d792 <_fflush_r+0x22>
 800d7d2:	4b04      	ldr	r3, [pc, #16]	; (800d7e4 <_fflush_r+0x74>)
 800d7d4:	429c      	cmp	r4, r3
 800d7d6:	bf08      	it	eq
 800d7d8:	68ec      	ldreq	r4, [r5, #12]
 800d7da:	e7da      	b.n	800d792 <_fflush_r+0x22>
 800d7dc:	08012c44 	.word	0x08012c44
 800d7e0:	08012c64 	.word	0x08012c64
 800d7e4:	08012c24 	.word	0x08012c24

0800d7e8 <std>:
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	b510      	push	{r4, lr}
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d7f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d7f6:	6083      	str	r3, [r0, #8]
 800d7f8:	8181      	strh	r1, [r0, #12]
 800d7fa:	6643      	str	r3, [r0, #100]	; 0x64
 800d7fc:	81c2      	strh	r2, [r0, #14]
 800d7fe:	6183      	str	r3, [r0, #24]
 800d800:	4619      	mov	r1, r3
 800d802:	2208      	movs	r2, #8
 800d804:	305c      	adds	r0, #92	; 0x5c
 800d806:	f7fe f9e1 	bl	800bbcc <memset>
 800d80a:	4b05      	ldr	r3, [pc, #20]	; (800d820 <std+0x38>)
 800d80c:	6263      	str	r3, [r4, #36]	; 0x24
 800d80e:	4b05      	ldr	r3, [pc, #20]	; (800d824 <std+0x3c>)
 800d810:	62a3      	str	r3, [r4, #40]	; 0x28
 800d812:	4b05      	ldr	r3, [pc, #20]	; (800d828 <std+0x40>)
 800d814:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d816:	4b05      	ldr	r3, [pc, #20]	; (800d82c <std+0x44>)
 800d818:	6224      	str	r4, [r4, #32]
 800d81a:	6323      	str	r3, [r4, #48]	; 0x30
 800d81c:	bd10      	pop	{r4, pc}
 800d81e:	bf00      	nop
 800d820:	0800e781 	.word	0x0800e781
 800d824:	0800e7a3 	.word	0x0800e7a3
 800d828:	0800e7db 	.word	0x0800e7db
 800d82c:	0800e7ff 	.word	0x0800e7ff

0800d830 <_cleanup_r>:
 800d830:	4901      	ldr	r1, [pc, #4]	; (800d838 <_cleanup_r+0x8>)
 800d832:	f000 b8af 	b.w	800d994 <_fwalk_reent>
 800d836:	bf00      	nop
 800d838:	0800d771 	.word	0x0800d771

0800d83c <__sfmoreglue>:
 800d83c:	b570      	push	{r4, r5, r6, lr}
 800d83e:	2268      	movs	r2, #104	; 0x68
 800d840:	1e4d      	subs	r5, r1, #1
 800d842:	4355      	muls	r5, r2
 800d844:	460e      	mov	r6, r1
 800d846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d84a:	f7fe fa33 	bl	800bcb4 <_malloc_r>
 800d84e:	4604      	mov	r4, r0
 800d850:	b140      	cbz	r0, 800d864 <__sfmoreglue+0x28>
 800d852:	2100      	movs	r1, #0
 800d854:	e9c0 1600 	strd	r1, r6, [r0]
 800d858:	300c      	adds	r0, #12
 800d85a:	60a0      	str	r0, [r4, #8]
 800d85c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d860:	f7fe f9b4 	bl	800bbcc <memset>
 800d864:	4620      	mov	r0, r4
 800d866:	bd70      	pop	{r4, r5, r6, pc}

0800d868 <__sfp_lock_acquire>:
 800d868:	4801      	ldr	r0, [pc, #4]	; (800d870 <__sfp_lock_acquire+0x8>)
 800d86a:	f000 b8b8 	b.w	800d9de <__retarget_lock_acquire_recursive>
 800d86e:	bf00      	nop
 800d870:	20000a61 	.word	0x20000a61

0800d874 <__sfp_lock_release>:
 800d874:	4801      	ldr	r0, [pc, #4]	; (800d87c <__sfp_lock_release+0x8>)
 800d876:	f000 b8b3 	b.w	800d9e0 <__retarget_lock_release_recursive>
 800d87a:	bf00      	nop
 800d87c:	20000a61 	.word	0x20000a61

0800d880 <__sinit_lock_acquire>:
 800d880:	4801      	ldr	r0, [pc, #4]	; (800d888 <__sinit_lock_acquire+0x8>)
 800d882:	f000 b8ac 	b.w	800d9de <__retarget_lock_acquire_recursive>
 800d886:	bf00      	nop
 800d888:	20000a62 	.word	0x20000a62

0800d88c <__sinit_lock_release>:
 800d88c:	4801      	ldr	r0, [pc, #4]	; (800d894 <__sinit_lock_release+0x8>)
 800d88e:	f000 b8a7 	b.w	800d9e0 <__retarget_lock_release_recursive>
 800d892:	bf00      	nop
 800d894:	20000a62 	.word	0x20000a62

0800d898 <__sinit>:
 800d898:	b510      	push	{r4, lr}
 800d89a:	4604      	mov	r4, r0
 800d89c:	f7ff fff0 	bl	800d880 <__sinit_lock_acquire>
 800d8a0:	69a3      	ldr	r3, [r4, #24]
 800d8a2:	b11b      	cbz	r3, 800d8ac <__sinit+0x14>
 800d8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d8a8:	f7ff bff0 	b.w	800d88c <__sinit_lock_release>
 800d8ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d8b0:	6523      	str	r3, [r4, #80]	; 0x50
 800d8b2:	4b13      	ldr	r3, [pc, #76]	; (800d900 <__sinit+0x68>)
 800d8b4:	4a13      	ldr	r2, [pc, #76]	; (800d904 <__sinit+0x6c>)
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	62a2      	str	r2, [r4, #40]	; 0x28
 800d8ba:	42a3      	cmp	r3, r4
 800d8bc:	bf04      	itt	eq
 800d8be:	2301      	moveq	r3, #1
 800d8c0:	61a3      	streq	r3, [r4, #24]
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	f000 f820 	bl	800d908 <__sfp>
 800d8c8:	6060      	str	r0, [r4, #4]
 800d8ca:	4620      	mov	r0, r4
 800d8cc:	f000 f81c 	bl	800d908 <__sfp>
 800d8d0:	60a0      	str	r0, [r4, #8]
 800d8d2:	4620      	mov	r0, r4
 800d8d4:	f000 f818 	bl	800d908 <__sfp>
 800d8d8:	2200      	movs	r2, #0
 800d8da:	60e0      	str	r0, [r4, #12]
 800d8dc:	2104      	movs	r1, #4
 800d8de:	6860      	ldr	r0, [r4, #4]
 800d8e0:	f7ff ff82 	bl	800d7e8 <std>
 800d8e4:	68a0      	ldr	r0, [r4, #8]
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	2109      	movs	r1, #9
 800d8ea:	f7ff ff7d 	bl	800d7e8 <std>
 800d8ee:	68e0      	ldr	r0, [r4, #12]
 800d8f0:	2202      	movs	r2, #2
 800d8f2:	2112      	movs	r1, #18
 800d8f4:	f7ff ff78 	bl	800d7e8 <std>
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	61a3      	str	r3, [r4, #24]
 800d8fc:	e7d2      	b.n	800d8a4 <__sinit+0xc>
 800d8fe:	bf00      	nop
 800d900:	08012b5c 	.word	0x08012b5c
 800d904:	0800d831 	.word	0x0800d831

0800d908 <__sfp>:
 800d908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d90a:	4607      	mov	r7, r0
 800d90c:	f7ff ffac 	bl	800d868 <__sfp_lock_acquire>
 800d910:	4b1e      	ldr	r3, [pc, #120]	; (800d98c <__sfp+0x84>)
 800d912:	681e      	ldr	r6, [r3, #0]
 800d914:	69b3      	ldr	r3, [r6, #24]
 800d916:	b913      	cbnz	r3, 800d91e <__sfp+0x16>
 800d918:	4630      	mov	r0, r6
 800d91a:	f7ff ffbd 	bl	800d898 <__sinit>
 800d91e:	3648      	adds	r6, #72	; 0x48
 800d920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d924:	3b01      	subs	r3, #1
 800d926:	d503      	bpl.n	800d930 <__sfp+0x28>
 800d928:	6833      	ldr	r3, [r6, #0]
 800d92a:	b30b      	cbz	r3, 800d970 <__sfp+0x68>
 800d92c:	6836      	ldr	r6, [r6, #0]
 800d92e:	e7f7      	b.n	800d920 <__sfp+0x18>
 800d930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d934:	b9d5      	cbnz	r5, 800d96c <__sfp+0x64>
 800d936:	4b16      	ldr	r3, [pc, #88]	; (800d990 <__sfp+0x88>)
 800d938:	60e3      	str	r3, [r4, #12]
 800d93a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d93e:	6665      	str	r5, [r4, #100]	; 0x64
 800d940:	f000 f84c 	bl	800d9dc <__retarget_lock_init_recursive>
 800d944:	f7ff ff96 	bl	800d874 <__sfp_lock_release>
 800d948:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d94c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d950:	6025      	str	r5, [r4, #0]
 800d952:	61a5      	str	r5, [r4, #24]
 800d954:	2208      	movs	r2, #8
 800d956:	4629      	mov	r1, r5
 800d958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d95c:	f7fe f936 	bl	800bbcc <memset>
 800d960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d968:	4620      	mov	r0, r4
 800d96a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d96c:	3468      	adds	r4, #104	; 0x68
 800d96e:	e7d9      	b.n	800d924 <__sfp+0x1c>
 800d970:	2104      	movs	r1, #4
 800d972:	4638      	mov	r0, r7
 800d974:	f7ff ff62 	bl	800d83c <__sfmoreglue>
 800d978:	4604      	mov	r4, r0
 800d97a:	6030      	str	r0, [r6, #0]
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d1d5      	bne.n	800d92c <__sfp+0x24>
 800d980:	f7ff ff78 	bl	800d874 <__sfp_lock_release>
 800d984:	230c      	movs	r3, #12
 800d986:	603b      	str	r3, [r7, #0]
 800d988:	e7ee      	b.n	800d968 <__sfp+0x60>
 800d98a:	bf00      	nop
 800d98c:	08012b5c 	.word	0x08012b5c
 800d990:	ffff0001 	.word	0xffff0001

0800d994 <_fwalk_reent>:
 800d994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d998:	4606      	mov	r6, r0
 800d99a:	4688      	mov	r8, r1
 800d99c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d9a0:	2700      	movs	r7, #0
 800d9a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d9a6:	f1b9 0901 	subs.w	r9, r9, #1
 800d9aa:	d505      	bpl.n	800d9b8 <_fwalk_reent+0x24>
 800d9ac:	6824      	ldr	r4, [r4, #0]
 800d9ae:	2c00      	cmp	r4, #0
 800d9b0:	d1f7      	bne.n	800d9a2 <_fwalk_reent+0xe>
 800d9b2:	4638      	mov	r0, r7
 800d9b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d9b8:	89ab      	ldrh	r3, [r5, #12]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d907      	bls.n	800d9ce <_fwalk_reent+0x3a>
 800d9be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	d003      	beq.n	800d9ce <_fwalk_reent+0x3a>
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	47c0      	blx	r8
 800d9cc:	4307      	orrs	r7, r0
 800d9ce:	3568      	adds	r5, #104	; 0x68
 800d9d0:	e7e9      	b.n	800d9a6 <_fwalk_reent+0x12>
	...

0800d9d4 <_localeconv_r>:
 800d9d4:	4800      	ldr	r0, [pc, #0]	; (800d9d8 <_localeconv_r+0x4>)
 800d9d6:	4770      	bx	lr
 800d9d8:	200001c8 	.word	0x200001c8

0800d9dc <__retarget_lock_init_recursive>:
 800d9dc:	4770      	bx	lr

0800d9de <__retarget_lock_acquire_recursive>:
 800d9de:	4770      	bx	lr

0800d9e0 <__retarget_lock_release_recursive>:
 800d9e0:	4770      	bx	lr

0800d9e2 <__swhatbuf_r>:
 800d9e2:	b570      	push	{r4, r5, r6, lr}
 800d9e4:	460e      	mov	r6, r1
 800d9e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9ea:	2900      	cmp	r1, #0
 800d9ec:	b096      	sub	sp, #88	; 0x58
 800d9ee:	4614      	mov	r4, r2
 800d9f0:	461d      	mov	r5, r3
 800d9f2:	da08      	bge.n	800da06 <__swhatbuf_r+0x24>
 800d9f4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	602a      	str	r2, [r5, #0]
 800d9fc:	061a      	lsls	r2, r3, #24
 800d9fe:	d410      	bmi.n	800da22 <__swhatbuf_r+0x40>
 800da00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800da04:	e00e      	b.n	800da24 <__swhatbuf_r+0x42>
 800da06:	466a      	mov	r2, sp
 800da08:	f000 ff50 	bl	800e8ac <_fstat_r>
 800da0c:	2800      	cmp	r0, #0
 800da0e:	dbf1      	blt.n	800d9f4 <__swhatbuf_r+0x12>
 800da10:	9a01      	ldr	r2, [sp, #4]
 800da12:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800da16:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800da1a:	425a      	negs	r2, r3
 800da1c:	415a      	adcs	r2, r3
 800da1e:	602a      	str	r2, [r5, #0]
 800da20:	e7ee      	b.n	800da00 <__swhatbuf_r+0x1e>
 800da22:	2340      	movs	r3, #64	; 0x40
 800da24:	2000      	movs	r0, #0
 800da26:	6023      	str	r3, [r4, #0]
 800da28:	b016      	add	sp, #88	; 0x58
 800da2a:	bd70      	pop	{r4, r5, r6, pc}

0800da2c <__smakebuf_r>:
 800da2c:	898b      	ldrh	r3, [r1, #12]
 800da2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da30:	079d      	lsls	r5, r3, #30
 800da32:	4606      	mov	r6, r0
 800da34:	460c      	mov	r4, r1
 800da36:	d507      	bpl.n	800da48 <__smakebuf_r+0x1c>
 800da38:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da3c:	6023      	str	r3, [r4, #0]
 800da3e:	6123      	str	r3, [r4, #16]
 800da40:	2301      	movs	r3, #1
 800da42:	6163      	str	r3, [r4, #20]
 800da44:	b002      	add	sp, #8
 800da46:	bd70      	pop	{r4, r5, r6, pc}
 800da48:	ab01      	add	r3, sp, #4
 800da4a:	466a      	mov	r2, sp
 800da4c:	f7ff ffc9 	bl	800d9e2 <__swhatbuf_r>
 800da50:	9900      	ldr	r1, [sp, #0]
 800da52:	4605      	mov	r5, r0
 800da54:	4630      	mov	r0, r6
 800da56:	f7fe f92d 	bl	800bcb4 <_malloc_r>
 800da5a:	b948      	cbnz	r0, 800da70 <__smakebuf_r+0x44>
 800da5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da60:	059a      	lsls	r2, r3, #22
 800da62:	d4ef      	bmi.n	800da44 <__smakebuf_r+0x18>
 800da64:	f023 0303 	bic.w	r3, r3, #3
 800da68:	f043 0302 	orr.w	r3, r3, #2
 800da6c:	81a3      	strh	r3, [r4, #12]
 800da6e:	e7e3      	b.n	800da38 <__smakebuf_r+0xc>
 800da70:	4b0d      	ldr	r3, [pc, #52]	; (800daa8 <__smakebuf_r+0x7c>)
 800da72:	62b3      	str	r3, [r6, #40]	; 0x28
 800da74:	89a3      	ldrh	r3, [r4, #12]
 800da76:	6020      	str	r0, [r4, #0]
 800da78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da7c:	81a3      	strh	r3, [r4, #12]
 800da7e:	9b00      	ldr	r3, [sp, #0]
 800da80:	6163      	str	r3, [r4, #20]
 800da82:	9b01      	ldr	r3, [sp, #4]
 800da84:	6120      	str	r0, [r4, #16]
 800da86:	b15b      	cbz	r3, 800daa0 <__smakebuf_r+0x74>
 800da88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da8c:	4630      	mov	r0, r6
 800da8e:	f000 ff1f 	bl	800e8d0 <_isatty_r>
 800da92:	b128      	cbz	r0, 800daa0 <__smakebuf_r+0x74>
 800da94:	89a3      	ldrh	r3, [r4, #12]
 800da96:	f023 0303 	bic.w	r3, r3, #3
 800da9a:	f043 0301 	orr.w	r3, r3, #1
 800da9e:	81a3      	strh	r3, [r4, #12]
 800daa0:	89a0      	ldrh	r0, [r4, #12]
 800daa2:	4305      	orrs	r5, r0
 800daa4:	81a5      	strh	r5, [r4, #12]
 800daa6:	e7cd      	b.n	800da44 <__smakebuf_r+0x18>
 800daa8:	0800d831 	.word	0x0800d831

0800daac <memcpy>:
 800daac:	440a      	add	r2, r1
 800daae:	4291      	cmp	r1, r2
 800dab0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dab4:	d100      	bne.n	800dab8 <memcpy+0xc>
 800dab6:	4770      	bx	lr
 800dab8:	b510      	push	{r4, lr}
 800daba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dabe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dac2:	4291      	cmp	r1, r2
 800dac4:	d1f9      	bne.n	800daba <memcpy+0xe>
 800dac6:	bd10      	pop	{r4, pc}

0800dac8 <__malloc_lock>:
 800dac8:	4801      	ldr	r0, [pc, #4]	; (800dad0 <__malloc_lock+0x8>)
 800daca:	f7ff bf88 	b.w	800d9de <__retarget_lock_acquire_recursive>
 800dace:	bf00      	nop
 800dad0:	20000a60 	.word	0x20000a60

0800dad4 <__malloc_unlock>:
 800dad4:	4801      	ldr	r0, [pc, #4]	; (800dadc <__malloc_unlock+0x8>)
 800dad6:	f7ff bf83 	b.w	800d9e0 <__retarget_lock_release_recursive>
 800dada:	bf00      	nop
 800dadc:	20000a60 	.word	0x20000a60

0800dae0 <_Balloc>:
 800dae0:	b570      	push	{r4, r5, r6, lr}
 800dae2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dae4:	4604      	mov	r4, r0
 800dae6:	460d      	mov	r5, r1
 800dae8:	b976      	cbnz	r6, 800db08 <_Balloc+0x28>
 800daea:	2010      	movs	r0, #16
 800daec:	f7fe f866 	bl	800bbbc <malloc>
 800daf0:	4602      	mov	r2, r0
 800daf2:	6260      	str	r0, [r4, #36]	; 0x24
 800daf4:	b920      	cbnz	r0, 800db00 <_Balloc+0x20>
 800daf6:	4b18      	ldr	r3, [pc, #96]	; (800db58 <_Balloc+0x78>)
 800daf8:	4818      	ldr	r0, [pc, #96]	; (800db5c <_Balloc+0x7c>)
 800dafa:	2166      	movs	r1, #102	; 0x66
 800dafc:	f000 fe96 	bl	800e82c <__assert_func>
 800db00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db04:	6006      	str	r6, [r0, #0]
 800db06:	60c6      	str	r6, [r0, #12]
 800db08:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800db0a:	68f3      	ldr	r3, [r6, #12]
 800db0c:	b183      	cbz	r3, 800db30 <_Balloc+0x50>
 800db0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db10:	68db      	ldr	r3, [r3, #12]
 800db12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800db16:	b9b8      	cbnz	r0, 800db48 <_Balloc+0x68>
 800db18:	2101      	movs	r1, #1
 800db1a:	fa01 f605 	lsl.w	r6, r1, r5
 800db1e:	1d72      	adds	r2, r6, #5
 800db20:	0092      	lsls	r2, r2, #2
 800db22:	4620      	mov	r0, r4
 800db24:	f000 fb60 	bl	800e1e8 <_calloc_r>
 800db28:	b160      	cbz	r0, 800db44 <_Balloc+0x64>
 800db2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800db2e:	e00e      	b.n	800db4e <_Balloc+0x6e>
 800db30:	2221      	movs	r2, #33	; 0x21
 800db32:	2104      	movs	r1, #4
 800db34:	4620      	mov	r0, r4
 800db36:	f000 fb57 	bl	800e1e8 <_calloc_r>
 800db3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db3c:	60f0      	str	r0, [r6, #12]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d1e4      	bne.n	800db0e <_Balloc+0x2e>
 800db44:	2000      	movs	r0, #0
 800db46:	bd70      	pop	{r4, r5, r6, pc}
 800db48:	6802      	ldr	r2, [r0, #0]
 800db4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800db4e:	2300      	movs	r3, #0
 800db50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db54:	e7f7      	b.n	800db46 <_Balloc+0x66>
 800db56:	bf00      	nop
 800db58:	08012ba1 	.word	0x08012ba1
 800db5c:	08012c84 	.word	0x08012c84

0800db60 <_Bfree>:
 800db60:	b570      	push	{r4, r5, r6, lr}
 800db62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800db64:	4605      	mov	r5, r0
 800db66:	460c      	mov	r4, r1
 800db68:	b976      	cbnz	r6, 800db88 <_Bfree+0x28>
 800db6a:	2010      	movs	r0, #16
 800db6c:	f7fe f826 	bl	800bbbc <malloc>
 800db70:	4602      	mov	r2, r0
 800db72:	6268      	str	r0, [r5, #36]	; 0x24
 800db74:	b920      	cbnz	r0, 800db80 <_Bfree+0x20>
 800db76:	4b09      	ldr	r3, [pc, #36]	; (800db9c <_Bfree+0x3c>)
 800db78:	4809      	ldr	r0, [pc, #36]	; (800dba0 <_Bfree+0x40>)
 800db7a:	218a      	movs	r1, #138	; 0x8a
 800db7c:	f000 fe56 	bl	800e82c <__assert_func>
 800db80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800db84:	6006      	str	r6, [r0, #0]
 800db86:	60c6      	str	r6, [r0, #12]
 800db88:	b13c      	cbz	r4, 800db9a <_Bfree+0x3a>
 800db8a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800db8c:	6862      	ldr	r2, [r4, #4]
 800db8e:	68db      	ldr	r3, [r3, #12]
 800db90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db94:	6021      	str	r1, [r4, #0]
 800db96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800db9a:	bd70      	pop	{r4, r5, r6, pc}
 800db9c:	08012ba1 	.word	0x08012ba1
 800dba0:	08012c84 	.word	0x08012c84

0800dba4 <__multadd>:
 800dba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dba8:	690d      	ldr	r5, [r1, #16]
 800dbaa:	4607      	mov	r7, r0
 800dbac:	460c      	mov	r4, r1
 800dbae:	461e      	mov	r6, r3
 800dbb0:	f101 0c14 	add.w	ip, r1, #20
 800dbb4:	2000      	movs	r0, #0
 800dbb6:	f8dc 3000 	ldr.w	r3, [ip]
 800dbba:	b299      	uxth	r1, r3
 800dbbc:	fb02 6101 	mla	r1, r2, r1, r6
 800dbc0:	0c1e      	lsrs	r6, r3, #16
 800dbc2:	0c0b      	lsrs	r3, r1, #16
 800dbc4:	fb02 3306 	mla	r3, r2, r6, r3
 800dbc8:	b289      	uxth	r1, r1
 800dbca:	3001      	adds	r0, #1
 800dbcc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800dbd0:	4285      	cmp	r5, r0
 800dbd2:	f84c 1b04 	str.w	r1, [ip], #4
 800dbd6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dbda:	dcec      	bgt.n	800dbb6 <__multadd+0x12>
 800dbdc:	b30e      	cbz	r6, 800dc22 <__multadd+0x7e>
 800dbde:	68a3      	ldr	r3, [r4, #8]
 800dbe0:	42ab      	cmp	r3, r5
 800dbe2:	dc19      	bgt.n	800dc18 <__multadd+0x74>
 800dbe4:	6861      	ldr	r1, [r4, #4]
 800dbe6:	4638      	mov	r0, r7
 800dbe8:	3101      	adds	r1, #1
 800dbea:	f7ff ff79 	bl	800dae0 <_Balloc>
 800dbee:	4680      	mov	r8, r0
 800dbf0:	b928      	cbnz	r0, 800dbfe <__multadd+0x5a>
 800dbf2:	4602      	mov	r2, r0
 800dbf4:	4b0c      	ldr	r3, [pc, #48]	; (800dc28 <__multadd+0x84>)
 800dbf6:	480d      	ldr	r0, [pc, #52]	; (800dc2c <__multadd+0x88>)
 800dbf8:	21b5      	movs	r1, #181	; 0xb5
 800dbfa:	f000 fe17 	bl	800e82c <__assert_func>
 800dbfe:	6922      	ldr	r2, [r4, #16]
 800dc00:	3202      	adds	r2, #2
 800dc02:	f104 010c 	add.w	r1, r4, #12
 800dc06:	0092      	lsls	r2, r2, #2
 800dc08:	300c      	adds	r0, #12
 800dc0a:	f7ff ff4f 	bl	800daac <memcpy>
 800dc0e:	4621      	mov	r1, r4
 800dc10:	4638      	mov	r0, r7
 800dc12:	f7ff ffa5 	bl	800db60 <_Bfree>
 800dc16:	4644      	mov	r4, r8
 800dc18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dc1c:	3501      	adds	r5, #1
 800dc1e:	615e      	str	r6, [r3, #20]
 800dc20:	6125      	str	r5, [r4, #16]
 800dc22:	4620      	mov	r0, r4
 800dc24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc28:	08012c13 	.word	0x08012c13
 800dc2c:	08012c84 	.word	0x08012c84

0800dc30 <__hi0bits>:
 800dc30:	0c03      	lsrs	r3, r0, #16
 800dc32:	041b      	lsls	r3, r3, #16
 800dc34:	b9d3      	cbnz	r3, 800dc6c <__hi0bits+0x3c>
 800dc36:	0400      	lsls	r0, r0, #16
 800dc38:	2310      	movs	r3, #16
 800dc3a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800dc3e:	bf04      	itt	eq
 800dc40:	0200      	lsleq	r0, r0, #8
 800dc42:	3308      	addeq	r3, #8
 800dc44:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dc48:	bf04      	itt	eq
 800dc4a:	0100      	lsleq	r0, r0, #4
 800dc4c:	3304      	addeq	r3, #4
 800dc4e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dc52:	bf04      	itt	eq
 800dc54:	0080      	lsleq	r0, r0, #2
 800dc56:	3302      	addeq	r3, #2
 800dc58:	2800      	cmp	r0, #0
 800dc5a:	db05      	blt.n	800dc68 <__hi0bits+0x38>
 800dc5c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800dc60:	f103 0301 	add.w	r3, r3, #1
 800dc64:	bf08      	it	eq
 800dc66:	2320      	moveq	r3, #32
 800dc68:	4618      	mov	r0, r3
 800dc6a:	4770      	bx	lr
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	e7e4      	b.n	800dc3a <__hi0bits+0xa>

0800dc70 <__lo0bits>:
 800dc70:	6803      	ldr	r3, [r0, #0]
 800dc72:	f013 0207 	ands.w	r2, r3, #7
 800dc76:	4601      	mov	r1, r0
 800dc78:	d00b      	beq.n	800dc92 <__lo0bits+0x22>
 800dc7a:	07da      	lsls	r2, r3, #31
 800dc7c:	d423      	bmi.n	800dcc6 <__lo0bits+0x56>
 800dc7e:	0798      	lsls	r0, r3, #30
 800dc80:	bf49      	itett	mi
 800dc82:	085b      	lsrmi	r3, r3, #1
 800dc84:	089b      	lsrpl	r3, r3, #2
 800dc86:	2001      	movmi	r0, #1
 800dc88:	600b      	strmi	r3, [r1, #0]
 800dc8a:	bf5c      	itt	pl
 800dc8c:	600b      	strpl	r3, [r1, #0]
 800dc8e:	2002      	movpl	r0, #2
 800dc90:	4770      	bx	lr
 800dc92:	b298      	uxth	r0, r3
 800dc94:	b9a8      	cbnz	r0, 800dcc2 <__lo0bits+0x52>
 800dc96:	0c1b      	lsrs	r3, r3, #16
 800dc98:	2010      	movs	r0, #16
 800dc9a:	b2da      	uxtb	r2, r3
 800dc9c:	b90a      	cbnz	r2, 800dca2 <__lo0bits+0x32>
 800dc9e:	3008      	adds	r0, #8
 800dca0:	0a1b      	lsrs	r3, r3, #8
 800dca2:	071a      	lsls	r2, r3, #28
 800dca4:	bf04      	itt	eq
 800dca6:	091b      	lsreq	r3, r3, #4
 800dca8:	3004      	addeq	r0, #4
 800dcaa:	079a      	lsls	r2, r3, #30
 800dcac:	bf04      	itt	eq
 800dcae:	089b      	lsreq	r3, r3, #2
 800dcb0:	3002      	addeq	r0, #2
 800dcb2:	07da      	lsls	r2, r3, #31
 800dcb4:	d403      	bmi.n	800dcbe <__lo0bits+0x4e>
 800dcb6:	085b      	lsrs	r3, r3, #1
 800dcb8:	f100 0001 	add.w	r0, r0, #1
 800dcbc:	d005      	beq.n	800dcca <__lo0bits+0x5a>
 800dcbe:	600b      	str	r3, [r1, #0]
 800dcc0:	4770      	bx	lr
 800dcc2:	4610      	mov	r0, r2
 800dcc4:	e7e9      	b.n	800dc9a <__lo0bits+0x2a>
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	4770      	bx	lr
 800dcca:	2020      	movs	r0, #32
 800dccc:	4770      	bx	lr
	...

0800dcd0 <__i2b>:
 800dcd0:	b510      	push	{r4, lr}
 800dcd2:	460c      	mov	r4, r1
 800dcd4:	2101      	movs	r1, #1
 800dcd6:	f7ff ff03 	bl	800dae0 <_Balloc>
 800dcda:	4602      	mov	r2, r0
 800dcdc:	b928      	cbnz	r0, 800dcea <__i2b+0x1a>
 800dcde:	4b05      	ldr	r3, [pc, #20]	; (800dcf4 <__i2b+0x24>)
 800dce0:	4805      	ldr	r0, [pc, #20]	; (800dcf8 <__i2b+0x28>)
 800dce2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dce6:	f000 fda1 	bl	800e82c <__assert_func>
 800dcea:	2301      	movs	r3, #1
 800dcec:	6144      	str	r4, [r0, #20]
 800dcee:	6103      	str	r3, [r0, #16]
 800dcf0:	bd10      	pop	{r4, pc}
 800dcf2:	bf00      	nop
 800dcf4:	08012c13 	.word	0x08012c13
 800dcf8:	08012c84 	.word	0x08012c84

0800dcfc <__multiply>:
 800dcfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd00:	4691      	mov	r9, r2
 800dd02:	690a      	ldr	r2, [r1, #16]
 800dd04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd08:	429a      	cmp	r2, r3
 800dd0a:	bfb8      	it	lt
 800dd0c:	460b      	movlt	r3, r1
 800dd0e:	460c      	mov	r4, r1
 800dd10:	bfbc      	itt	lt
 800dd12:	464c      	movlt	r4, r9
 800dd14:	4699      	movlt	r9, r3
 800dd16:	6927      	ldr	r7, [r4, #16]
 800dd18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dd1c:	68a3      	ldr	r3, [r4, #8]
 800dd1e:	6861      	ldr	r1, [r4, #4]
 800dd20:	eb07 060a 	add.w	r6, r7, sl
 800dd24:	42b3      	cmp	r3, r6
 800dd26:	b085      	sub	sp, #20
 800dd28:	bfb8      	it	lt
 800dd2a:	3101      	addlt	r1, #1
 800dd2c:	f7ff fed8 	bl	800dae0 <_Balloc>
 800dd30:	b930      	cbnz	r0, 800dd40 <__multiply+0x44>
 800dd32:	4602      	mov	r2, r0
 800dd34:	4b44      	ldr	r3, [pc, #272]	; (800de48 <__multiply+0x14c>)
 800dd36:	4845      	ldr	r0, [pc, #276]	; (800de4c <__multiply+0x150>)
 800dd38:	f240 115d 	movw	r1, #349	; 0x15d
 800dd3c:	f000 fd76 	bl	800e82c <__assert_func>
 800dd40:	f100 0514 	add.w	r5, r0, #20
 800dd44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dd48:	462b      	mov	r3, r5
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	4543      	cmp	r3, r8
 800dd4e:	d321      	bcc.n	800dd94 <__multiply+0x98>
 800dd50:	f104 0314 	add.w	r3, r4, #20
 800dd54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dd58:	f109 0314 	add.w	r3, r9, #20
 800dd5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dd60:	9202      	str	r2, [sp, #8]
 800dd62:	1b3a      	subs	r2, r7, r4
 800dd64:	3a15      	subs	r2, #21
 800dd66:	f022 0203 	bic.w	r2, r2, #3
 800dd6a:	3204      	adds	r2, #4
 800dd6c:	f104 0115 	add.w	r1, r4, #21
 800dd70:	428f      	cmp	r7, r1
 800dd72:	bf38      	it	cc
 800dd74:	2204      	movcc	r2, #4
 800dd76:	9201      	str	r2, [sp, #4]
 800dd78:	9a02      	ldr	r2, [sp, #8]
 800dd7a:	9303      	str	r3, [sp, #12]
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d80c      	bhi.n	800dd9a <__multiply+0x9e>
 800dd80:	2e00      	cmp	r6, #0
 800dd82:	dd03      	ble.n	800dd8c <__multiply+0x90>
 800dd84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d05a      	beq.n	800de42 <__multiply+0x146>
 800dd8c:	6106      	str	r6, [r0, #16]
 800dd8e:	b005      	add	sp, #20
 800dd90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd94:	f843 2b04 	str.w	r2, [r3], #4
 800dd98:	e7d8      	b.n	800dd4c <__multiply+0x50>
 800dd9a:	f8b3 a000 	ldrh.w	sl, [r3]
 800dd9e:	f1ba 0f00 	cmp.w	sl, #0
 800dda2:	d024      	beq.n	800ddee <__multiply+0xf2>
 800dda4:	f104 0e14 	add.w	lr, r4, #20
 800dda8:	46a9      	mov	r9, r5
 800ddaa:	f04f 0c00 	mov.w	ip, #0
 800ddae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ddb2:	f8d9 1000 	ldr.w	r1, [r9]
 800ddb6:	fa1f fb82 	uxth.w	fp, r2
 800ddba:	b289      	uxth	r1, r1
 800ddbc:	fb0a 110b 	mla	r1, sl, fp, r1
 800ddc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ddc4:	f8d9 2000 	ldr.w	r2, [r9]
 800ddc8:	4461      	add	r1, ip
 800ddca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ddce:	fb0a c20b 	mla	r2, sl, fp, ip
 800ddd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ddd6:	b289      	uxth	r1, r1
 800ddd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dddc:	4577      	cmp	r7, lr
 800ddde:	f849 1b04 	str.w	r1, [r9], #4
 800dde2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dde6:	d8e2      	bhi.n	800ddae <__multiply+0xb2>
 800dde8:	9a01      	ldr	r2, [sp, #4]
 800ddea:	f845 c002 	str.w	ip, [r5, r2]
 800ddee:	9a03      	ldr	r2, [sp, #12]
 800ddf0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ddf4:	3304      	adds	r3, #4
 800ddf6:	f1b9 0f00 	cmp.w	r9, #0
 800ddfa:	d020      	beq.n	800de3e <__multiply+0x142>
 800ddfc:	6829      	ldr	r1, [r5, #0]
 800ddfe:	f104 0c14 	add.w	ip, r4, #20
 800de02:	46ae      	mov	lr, r5
 800de04:	f04f 0a00 	mov.w	sl, #0
 800de08:	f8bc b000 	ldrh.w	fp, [ip]
 800de0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800de10:	fb09 220b 	mla	r2, r9, fp, r2
 800de14:	4492      	add	sl, r2
 800de16:	b289      	uxth	r1, r1
 800de18:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800de1c:	f84e 1b04 	str.w	r1, [lr], #4
 800de20:	f85c 2b04 	ldr.w	r2, [ip], #4
 800de24:	f8be 1000 	ldrh.w	r1, [lr]
 800de28:	0c12      	lsrs	r2, r2, #16
 800de2a:	fb09 1102 	mla	r1, r9, r2, r1
 800de2e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800de32:	4567      	cmp	r7, ip
 800de34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800de38:	d8e6      	bhi.n	800de08 <__multiply+0x10c>
 800de3a:	9a01      	ldr	r2, [sp, #4]
 800de3c:	50a9      	str	r1, [r5, r2]
 800de3e:	3504      	adds	r5, #4
 800de40:	e79a      	b.n	800dd78 <__multiply+0x7c>
 800de42:	3e01      	subs	r6, #1
 800de44:	e79c      	b.n	800dd80 <__multiply+0x84>
 800de46:	bf00      	nop
 800de48:	08012c13 	.word	0x08012c13
 800de4c:	08012c84 	.word	0x08012c84

0800de50 <__pow5mult>:
 800de50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de54:	4615      	mov	r5, r2
 800de56:	f012 0203 	ands.w	r2, r2, #3
 800de5a:	4606      	mov	r6, r0
 800de5c:	460f      	mov	r7, r1
 800de5e:	d007      	beq.n	800de70 <__pow5mult+0x20>
 800de60:	4c25      	ldr	r4, [pc, #148]	; (800def8 <__pow5mult+0xa8>)
 800de62:	3a01      	subs	r2, #1
 800de64:	2300      	movs	r3, #0
 800de66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800de6a:	f7ff fe9b 	bl	800dba4 <__multadd>
 800de6e:	4607      	mov	r7, r0
 800de70:	10ad      	asrs	r5, r5, #2
 800de72:	d03d      	beq.n	800def0 <__pow5mult+0xa0>
 800de74:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800de76:	b97c      	cbnz	r4, 800de98 <__pow5mult+0x48>
 800de78:	2010      	movs	r0, #16
 800de7a:	f7fd fe9f 	bl	800bbbc <malloc>
 800de7e:	4602      	mov	r2, r0
 800de80:	6270      	str	r0, [r6, #36]	; 0x24
 800de82:	b928      	cbnz	r0, 800de90 <__pow5mult+0x40>
 800de84:	4b1d      	ldr	r3, [pc, #116]	; (800defc <__pow5mult+0xac>)
 800de86:	481e      	ldr	r0, [pc, #120]	; (800df00 <__pow5mult+0xb0>)
 800de88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800de8c:	f000 fcce 	bl	800e82c <__assert_func>
 800de90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800de94:	6004      	str	r4, [r0, #0]
 800de96:	60c4      	str	r4, [r0, #12]
 800de98:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800de9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dea0:	b94c      	cbnz	r4, 800deb6 <__pow5mult+0x66>
 800dea2:	f240 2171 	movw	r1, #625	; 0x271
 800dea6:	4630      	mov	r0, r6
 800dea8:	f7ff ff12 	bl	800dcd0 <__i2b>
 800deac:	2300      	movs	r3, #0
 800deae:	f8c8 0008 	str.w	r0, [r8, #8]
 800deb2:	4604      	mov	r4, r0
 800deb4:	6003      	str	r3, [r0, #0]
 800deb6:	f04f 0900 	mov.w	r9, #0
 800deba:	07eb      	lsls	r3, r5, #31
 800debc:	d50a      	bpl.n	800ded4 <__pow5mult+0x84>
 800debe:	4639      	mov	r1, r7
 800dec0:	4622      	mov	r2, r4
 800dec2:	4630      	mov	r0, r6
 800dec4:	f7ff ff1a 	bl	800dcfc <__multiply>
 800dec8:	4639      	mov	r1, r7
 800deca:	4680      	mov	r8, r0
 800decc:	4630      	mov	r0, r6
 800dece:	f7ff fe47 	bl	800db60 <_Bfree>
 800ded2:	4647      	mov	r7, r8
 800ded4:	106d      	asrs	r5, r5, #1
 800ded6:	d00b      	beq.n	800def0 <__pow5mult+0xa0>
 800ded8:	6820      	ldr	r0, [r4, #0]
 800deda:	b938      	cbnz	r0, 800deec <__pow5mult+0x9c>
 800dedc:	4622      	mov	r2, r4
 800dede:	4621      	mov	r1, r4
 800dee0:	4630      	mov	r0, r6
 800dee2:	f7ff ff0b 	bl	800dcfc <__multiply>
 800dee6:	6020      	str	r0, [r4, #0]
 800dee8:	f8c0 9000 	str.w	r9, [r0]
 800deec:	4604      	mov	r4, r0
 800deee:	e7e4      	b.n	800deba <__pow5mult+0x6a>
 800def0:	4638      	mov	r0, r7
 800def2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800def6:	bf00      	nop
 800def8:	08012dd0 	.word	0x08012dd0
 800defc:	08012ba1 	.word	0x08012ba1
 800df00:	08012c84 	.word	0x08012c84

0800df04 <__lshift>:
 800df04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df08:	460c      	mov	r4, r1
 800df0a:	6849      	ldr	r1, [r1, #4]
 800df0c:	6923      	ldr	r3, [r4, #16]
 800df0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800df12:	68a3      	ldr	r3, [r4, #8]
 800df14:	4607      	mov	r7, r0
 800df16:	4691      	mov	r9, r2
 800df18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800df1c:	f108 0601 	add.w	r6, r8, #1
 800df20:	42b3      	cmp	r3, r6
 800df22:	db0b      	blt.n	800df3c <__lshift+0x38>
 800df24:	4638      	mov	r0, r7
 800df26:	f7ff fddb 	bl	800dae0 <_Balloc>
 800df2a:	4605      	mov	r5, r0
 800df2c:	b948      	cbnz	r0, 800df42 <__lshift+0x3e>
 800df2e:	4602      	mov	r2, r0
 800df30:	4b2a      	ldr	r3, [pc, #168]	; (800dfdc <__lshift+0xd8>)
 800df32:	482b      	ldr	r0, [pc, #172]	; (800dfe0 <__lshift+0xdc>)
 800df34:	f240 11d9 	movw	r1, #473	; 0x1d9
 800df38:	f000 fc78 	bl	800e82c <__assert_func>
 800df3c:	3101      	adds	r1, #1
 800df3e:	005b      	lsls	r3, r3, #1
 800df40:	e7ee      	b.n	800df20 <__lshift+0x1c>
 800df42:	2300      	movs	r3, #0
 800df44:	f100 0114 	add.w	r1, r0, #20
 800df48:	f100 0210 	add.w	r2, r0, #16
 800df4c:	4618      	mov	r0, r3
 800df4e:	4553      	cmp	r3, sl
 800df50:	db37      	blt.n	800dfc2 <__lshift+0xbe>
 800df52:	6920      	ldr	r0, [r4, #16]
 800df54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df58:	f104 0314 	add.w	r3, r4, #20
 800df5c:	f019 091f 	ands.w	r9, r9, #31
 800df60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800df64:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800df68:	d02f      	beq.n	800dfca <__lshift+0xc6>
 800df6a:	f1c9 0e20 	rsb	lr, r9, #32
 800df6e:	468a      	mov	sl, r1
 800df70:	f04f 0c00 	mov.w	ip, #0
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	fa02 f209 	lsl.w	r2, r2, r9
 800df7a:	ea42 020c 	orr.w	r2, r2, ip
 800df7e:	f84a 2b04 	str.w	r2, [sl], #4
 800df82:	f853 2b04 	ldr.w	r2, [r3], #4
 800df86:	4298      	cmp	r0, r3
 800df88:	fa22 fc0e 	lsr.w	ip, r2, lr
 800df8c:	d8f2      	bhi.n	800df74 <__lshift+0x70>
 800df8e:	1b03      	subs	r3, r0, r4
 800df90:	3b15      	subs	r3, #21
 800df92:	f023 0303 	bic.w	r3, r3, #3
 800df96:	3304      	adds	r3, #4
 800df98:	f104 0215 	add.w	r2, r4, #21
 800df9c:	4290      	cmp	r0, r2
 800df9e:	bf38      	it	cc
 800dfa0:	2304      	movcc	r3, #4
 800dfa2:	f841 c003 	str.w	ip, [r1, r3]
 800dfa6:	f1bc 0f00 	cmp.w	ip, #0
 800dfaa:	d001      	beq.n	800dfb0 <__lshift+0xac>
 800dfac:	f108 0602 	add.w	r6, r8, #2
 800dfb0:	3e01      	subs	r6, #1
 800dfb2:	4638      	mov	r0, r7
 800dfb4:	612e      	str	r6, [r5, #16]
 800dfb6:	4621      	mov	r1, r4
 800dfb8:	f7ff fdd2 	bl	800db60 <_Bfree>
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfc2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	e7c1      	b.n	800df4e <__lshift+0x4a>
 800dfca:	3904      	subs	r1, #4
 800dfcc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dfd0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dfd4:	4298      	cmp	r0, r3
 800dfd6:	d8f9      	bhi.n	800dfcc <__lshift+0xc8>
 800dfd8:	e7ea      	b.n	800dfb0 <__lshift+0xac>
 800dfda:	bf00      	nop
 800dfdc:	08012c13 	.word	0x08012c13
 800dfe0:	08012c84 	.word	0x08012c84

0800dfe4 <__mcmp>:
 800dfe4:	b530      	push	{r4, r5, lr}
 800dfe6:	6902      	ldr	r2, [r0, #16]
 800dfe8:	690c      	ldr	r4, [r1, #16]
 800dfea:	1b12      	subs	r2, r2, r4
 800dfec:	d10e      	bne.n	800e00c <__mcmp+0x28>
 800dfee:	f100 0314 	add.w	r3, r0, #20
 800dff2:	3114      	adds	r1, #20
 800dff4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dff8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dffc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e000:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e004:	42a5      	cmp	r5, r4
 800e006:	d003      	beq.n	800e010 <__mcmp+0x2c>
 800e008:	d305      	bcc.n	800e016 <__mcmp+0x32>
 800e00a:	2201      	movs	r2, #1
 800e00c:	4610      	mov	r0, r2
 800e00e:	bd30      	pop	{r4, r5, pc}
 800e010:	4283      	cmp	r3, r0
 800e012:	d3f3      	bcc.n	800dffc <__mcmp+0x18>
 800e014:	e7fa      	b.n	800e00c <__mcmp+0x28>
 800e016:	f04f 32ff 	mov.w	r2, #4294967295
 800e01a:	e7f7      	b.n	800e00c <__mcmp+0x28>

0800e01c <__mdiff>:
 800e01c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e020:	460c      	mov	r4, r1
 800e022:	4606      	mov	r6, r0
 800e024:	4611      	mov	r1, r2
 800e026:	4620      	mov	r0, r4
 800e028:	4690      	mov	r8, r2
 800e02a:	f7ff ffdb 	bl	800dfe4 <__mcmp>
 800e02e:	1e05      	subs	r5, r0, #0
 800e030:	d110      	bne.n	800e054 <__mdiff+0x38>
 800e032:	4629      	mov	r1, r5
 800e034:	4630      	mov	r0, r6
 800e036:	f7ff fd53 	bl	800dae0 <_Balloc>
 800e03a:	b930      	cbnz	r0, 800e04a <__mdiff+0x2e>
 800e03c:	4b3a      	ldr	r3, [pc, #232]	; (800e128 <__mdiff+0x10c>)
 800e03e:	4602      	mov	r2, r0
 800e040:	f240 2132 	movw	r1, #562	; 0x232
 800e044:	4839      	ldr	r0, [pc, #228]	; (800e12c <__mdiff+0x110>)
 800e046:	f000 fbf1 	bl	800e82c <__assert_func>
 800e04a:	2301      	movs	r3, #1
 800e04c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e054:	bfa4      	itt	ge
 800e056:	4643      	movge	r3, r8
 800e058:	46a0      	movge	r8, r4
 800e05a:	4630      	mov	r0, r6
 800e05c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e060:	bfa6      	itte	ge
 800e062:	461c      	movge	r4, r3
 800e064:	2500      	movge	r5, #0
 800e066:	2501      	movlt	r5, #1
 800e068:	f7ff fd3a 	bl	800dae0 <_Balloc>
 800e06c:	b920      	cbnz	r0, 800e078 <__mdiff+0x5c>
 800e06e:	4b2e      	ldr	r3, [pc, #184]	; (800e128 <__mdiff+0x10c>)
 800e070:	4602      	mov	r2, r0
 800e072:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e076:	e7e5      	b.n	800e044 <__mdiff+0x28>
 800e078:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e07c:	6926      	ldr	r6, [r4, #16]
 800e07e:	60c5      	str	r5, [r0, #12]
 800e080:	f104 0914 	add.w	r9, r4, #20
 800e084:	f108 0514 	add.w	r5, r8, #20
 800e088:	f100 0e14 	add.w	lr, r0, #20
 800e08c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e090:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e094:	f108 0210 	add.w	r2, r8, #16
 800e098:	46f2      	mov	sl, lr
 800e09a:	2100      	movs	r1, #0
 800e09c:	f859 3b04 	ldr.w	r3, [r9], #4
 800e0a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e0a4:	fa1f f883 	uxth.w	r8, r3
 800e0a8:	fa11 f18b 	uxtah	r1, r1, fp
 800e0ac:	0c1b      	lsrs	r3, r3, #16
 800e0ae:	eba1 0808 	sub.w	r8, r1, r8
 800e0b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e0b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e0ba:	fa1f f888 	uxth.w	r8, r8
 800e0be:	1419      	asrs	r1, r3, #16
 800e0c0:	454e      	cmp	r6, r9
 800e0c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e0c6:	f84a 3b04 	str.w	r3, [sl], #4
 800e0ca:	d8e7      	bhi.n	800e09c <__mdiff+0x80>
 800e0cc:	1b33      	subs	r3, r6, r4
 800e0ce:	3b15      	subs	r3, #21
 800e0d0:	f023 0303 	bic.w	r3, r3, #3
 800e0d4:	3304      	adds	r3, #4
 800e0d6:	3415      	adds	r4, #21
 800e0d8:	42a6      	cmp	r6, r4
 800e0da:	bf38      	it	cc
 800e0dc:	2304      	movcc	r3, #4
 800e0de:	441d      	add	r5, r3
 800e0e0:	4473      	add	r3, lr
 800e0e2:	469e      	mov	lr, r3
 800e0e4:	462e      	mov	r6, r5
 800e0e6:	4566      	cmp	r6, ip
 800e0e8:	d30e      	bcc.n	800e108 <__mdiff+0xec>
 800e0ea:	f10c 0203 	add.w	r2, ip, #3
 800e0ee:	1b52      	subs	r2, r2, r5
 800e0f0:	f022 0203 	bic.w	r2, r2, #3
 800e0f4:	3d03      	subs	r5, #3
 800e0f6:	45ac      	cmp	ip, r5
 800e0f8:	bf38      	it	cc
 800e0fa:	2200      	movcc	r2, #0
 800e0fc:	441a      	add	r2, r3
 800e0fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e102:	b17b      	cbz	r3, 800e124 <__mdiff+0x108>
 800e104:	6107      	str	r7, [r0, #16]
 800e106:	e7a3      	b.n	800e050 <__mdiff+0x34>
 800e108:	f856 8b04 	ldr.w	r8, [r6], #4
 800e10c:	fa11 f288 	uxtah	r2, r1, r8
 800e110:	1414      	asrs	r4, r2, #16
 800e112:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e116:	b292      	uxth	r2, r2
 800e118:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e11c:	f84e 2b04 	str.w	r2, [lr], #4
 800e120:	1421      	asrs	r1, r4, #16
 800e122:	e7e0      	b.n	800e0e6 <__mdiff+0xca>
 800e124:	3f01      	subs	r7, #1
 800e126:	e7ea      	b.n	800e0fe <__mdiff+0xe2>
 800e128:	08012c13 	.word	0x08012c13
 800e12c:	08012c84 	.word	0x08012c84

0800e130 <__d2b>:
 800e130:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e134:	4689      	mov	r9, r1
 800e136:	2101      	movs	r1, #1
 800e138:	ec57 6b10 	vmov	r6, r7, d0
 800e13c:	4690      	mov	r8, r2
 800e13e:	f7ff fccf 	bl	800dae0 <_Balloc>
 800e142:	4604      	mov	r4, r0
 800e144:	b930      	cbnz	r0, 800e154 <__d2b+0x24>
 800e146:	4602      	mov	r2, r0
 800e148:	4b25      	ldr	r3, [pc, #148]	; (800e1e0 <__d2b+0xb0>)
 800e14a:	4826      	ldr	r0, [pc, #152]	; (800e1e4 <__d2b+0xb4>)
 800e14c:	f240 310a 	movw	r1, #778	; 0x30a
 800e150:	f000 fb6c 	bl	800e82c <__assert_func>
 800e154:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e158:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e15c:	bb35      	cbnz	r5, 800e1ac <__d2b+0x7c>
 800e15e:	2e00      	cmp	r6, #0
 800e160:	9301      	str	r3, [sp, #4]
 800e162:	d028      	beq.n	800e1b6 <__d2b+0x86>
 800e164:	4668      	mov	r0, sp
 800e166:	9600      	str	r6, [sp, #0]
 800e168:	f7ff fd82 	bl	800dc70 <__lo0bits>
 800e16c:	9900      	ldr	r1, [sp, #0]
 800e16e:	b300      	cbz	r0, 800e1b2 <__d2b+0x82>
 800e170:	9a01      	ldr	r2, [sp, #4]
 800e172:	f1c0 0320 	rsb	r3, r0, #32
 800e176:	fa02 f303 	lsl.w	r3, r2, r3
 800e17a:	430b      	orrs	r3, r1
 800e17c:	40c2      	lsrs	r2, r0
 800e17e:	6163      	str	r3, [r4, #20]
 800e180:	9201      	str	r2, [sp, #4]
 800e182:	9b01      	ldr	r3, [sp, #4]
 800e184:	61a3      	str	r3, [r4, #24]
 800e186:	2b00      	cmp	r3, #0
 800e188:	bf14      	ite	ne
 800e18a:	2202      	movne	r2, #2
 800e18c:	2201      	moveq	r2, #1
 800e18e:	6122      	str	r2, [r4, #16]
 800e190:	b1d5      	cbz	r5, 800e1c8 <__d2b+0x98>
 800e192:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e196:	4405      	add	r5, r0
 800e198:	f8c9 5000 	str.w	r5, [r9]
 800e19c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e1a0:	f8c8 0000 	str.w	r0, [r8]
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	b003      	add	sp, #12
 800e1a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1b0:	e7d5      	b.n	800e15e <__d2b+0x2e>
 800e1b2:	6161      	str	r1, [r4, #20]
 800e1b4:	e7e5      	b.n	800e182 <__d2b+0x52>
 800e1b6:	a801      	add	r0, sp, #4
 800e1b8:	f7ff fd5a 	bl	800dc70 <__lo0bits>
 800e1bc:	9b01      	ldr	r3, [sp, #4]
 800e1be:	6163      	str	r3, [r4, #20]
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	6122      	str	r2, [r4, #16]
 800e1c4:	3020      	adds	r0, #32
 800e1c6:	e7e3      	b.n	800e190 <__d2b+0x60>
 800e1c8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1cc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e1d0:	f8c9 0000 	str.w	r0, [r9]
 800e1d4:	6918      	ldr	r0, [r3, #16]
 800e1d6:	f7ff fd2b 	bl	800dc30 <__hi0bits>
 800e1da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1de:	e7df      	b.n	800e1a0 <__d2b+0x70>
 800e1e0:	08012c13 	.word	0x08012c13
 800e1e4:	08012c84 	.word	0x08012c84

0800e1e8 <_calloc_r>:
 800e1e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e1ea:	fba1 2402 	umull	r2, r4, r1, r2
 800e1ee:	b94c      	cbnz	r4, 800e204 <_calloc_r+0x1c>
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	9201      	str	r2, [sp, #4]
 800e1f4:	f7fd fd5e 	bl	800bcb4 <_malloc_r>
 800e1f8:	9a01      	ldr	r2, [sp, #4]
 800e1fa:	4605      	mov	r5, r0
 800e1fc:	b930      	cbnz	r0, 800e20c <_calloc_r+0x24>
 800e1fe:	4628      	mov	r0, r5
 800e200:	b003      	add	sp, #12
 800e202:	bd30      	pop	{r4, r5, pc}
 800e204:	220c      	movs	r2, #12
 800e206:	6002      	str	r2, [r0, #0]
 800e208:	2500      	movs	r5, #0
 800e20a:	e7f8      	b.n	800e1fe <_calloc_r+0x16>
 800e20c:	4621      	mov	r1, r4
 800e20e:	f7fd fcdd 	bl	800bbcc <memset>
 800e212:	e7f4      	b.n	800e1fe <_calloc_r+0x16>

0800e214 <__ssputs_r>:
 800e214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e218:	688e      	ldr	r6, [r1, #8]
 800e21a:	429e      	cmp	r6, r3
 800e21c:	4682      	mov	sl, r0
 800e21e:	460c      	mov	r4, r1
 800e220:	4690      	mov	r8, r2
 800e222:	461f      	mov	r7, r3
 800e224:	d838      	bhi.n	800e298 <__ssputs_r+0x84>
 800e226:	898a      	ldrh	r2, [r1, #12]
 800e228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e22c:	d032      	beq.n	800e294 <__ssputs_r+0x80>
 800e22e:	6825      	ldr	r5, [r4, #0]
 800e230:	6909      	ldr	r1, [r1, #16]
 800e232:	eba5 0901 	sub.w	r9, r5, r1
 800e236:	6965      	ldr	r5, [r4, #20]
 800e238:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e23c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e240:	3301      	adds	r3, #1
 800e242:	444b      	add	r3, r9
 800e244:	106d      	asrs	r5, r5, #1
 800e246:	429d      	cmp	r5, r3
 800e248:	bf38      	it	cc
 800e24a:	461d      	movcc	r5, r3
 800e24c:	0553      	lsls	r3, r2, #21
 800e24e:	d531      	bpl.n	800e2b4 <__ssputs_r+0xa0>
 800e250:	4629      	mov	r1, r5
 800e252:	f7fd fd2f 	bl	800bcb4 <_malloc_r>
 800e256:	4606      	mov	r6, r0
 800e258:	b950      	cbnz	r0, 800e270 <__ssputs_r+0x5c>
 800e25a:	230c      	movs	r3, #12
 800e25c:	f8ca 3000 	str.w	r3, [sl]
 800e260:	89a3      	ldrh	r3, [r4, #12]
 800e262:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e266:	81a3      	strh	r3, [r4, #12]
 800e268:	f04f 30ff 	mov.w	r0, #4294967295
 800e26c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e270:	6921      	ldr	r1, [r4, #16]
 800e272:	464a      	mov	r2, r9
 800e274:	f7ff fc1a 	bl	800daac <memcpy>
 800e278:	89a3      	ldrh	r3, [r4, #12]
 800e27a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e282:	81a3      	strh	r3, [r4, #12]
 800e284:	6126      	str	r6, [r4, #16]
 800e286:	6165      	str	r5, [r4, #20]
 800e288:	444e      	add	r6, r9
 800e28a:	eba5 0509 	sub.w	r5, r5, r9
 800e28e:	6026      	str	r6, [r4, #0]
 800e290:	60a5      	str	r5, [r4, #8]
 800e292:	463e      	mov	r6, r7
 800e294:	42be      	cmp	r6, r7
 800e296:	d900      	bls.n	800e29a <__ssputs_r+0x86>
 800e298:	463e      	mov	r6, r7
 800e29a:	6820      	ldr	r0, [r4, #0]
 800e29c:	4632      	mov	r2, r6
 800e29e:	4641      	mov	r1, r8
 800e2a0:	f000 fb4a 	bl	800e938 <memmove>
 800e2a4:	68a3      	ldr	r3, [r4, #8]
 800e2a6:	1b9b      	subs	r3, r3, r6
 800e2a8:	60a3      	str	r3, [r4, #8]
 800e2aa:	6823      	ldr	r3, [r4, #0]
 800e2ac:	4433      	add	r3, r6
 800e2ae:	6023      	str	r3, [r4, #0]
 800e2b0:	2000      	movs	r0, #0
 800e2b2:	e7db      	b.n	800e26c <__ssputs_r+0x58>
 800e2b4:	462a      	mov	r2, r5
 800e2b6:	f000 fb59 	bl	800e96c <_realloc_r>
 800e2ba:	4606      	mov	r6, r0
 800e2bc:	2800      	cmp	r0, #0
 800e2be:	d1e1      	bne.n	800e284 <__ssputs_r+0x70>
 800e2c0:	6921      	ldr	r1, [r4, #16]
 800e2c2:	4650      	mov	r0, sl
 800e2c4:	f7fd fc8a 	bl	800bbdc <_free_r>
 800e2c8:	e7c7      	b.n	800e25a <__ssputs_r+0x46>
	...

0800e2cc <_svfiprintf_r>:
 800e2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2d0:	4698      	mov	r8, r3
 800e2d2:	898b      	ldrh	r3, [r1, #12]
 800e2d4:	061b      	lsls	r3, r3, #24
 800e2d6:	b09d      	sub	sp, #116	; 0x74
 800e2d8:	4607      	mov	r7, r0
 800e2da:	460d      	mov	r5, r1
 800e2dc:	4614      	mov	r4, r2
 800e2de:	d50e      	bpl.n	800e2fe <_svfiprintf_r+0x32>
 800e2e0:	690b      	ldr	r3, [r1, #16]
 800e2e2:	b963      	cbnz	r3, 800e2fe <_svfiprintf_r+0x32>
 800e2e4:	2140      	movs	r1, #64	; 0x40
 800e2e6:	f7fd fce5 	bl	800bcb4 <_malloc_r>
 800e2ea:	6028      	str	r0, [r5, #0]
 800e2ec:	6128      	str	r0, [r5, #16]
 800e2ee:	b920      	cbnz	r0, 800e2fa <_svfiprintf_r+0x2e>
 800e2f0:	230c      	movs	r3, #12
 800e2f2:	603b      	str	r3, [r7, #0]
 800e2f4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2f8:	e0d1      	b.n	800e49e <_svfiprintf_r+0x1d2>
 800e2fa:	2340      	movs	r3, #64	; 0x40
 800e2fc:	616b      	str	r3, [r5, #20]
 800e2fe:	2300      	movs	r3, #0
 800e300:	9309      	str	r3, [sp, #36]	; 0x24
 800e302:	2320      	movs	r3, #32
 800e304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e308:	f8cd 800c 	str.w	r8, [sp, #12]
 800e30c:	2330      	movs	r3, #48	; 0x30
 800e30e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e4b8 <_svfiprintf_r+0x1ec>
 800e312:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e316:	f04f 0901 	mov.w	r9, #1
 800e31a:	4623      	mov	r3, r4
 800e31c:	469a      	mov	sl, r3
 800e31e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e322:	b10a      	cbz	r2, 800e328 <_svfiprintf_r+0x5c>
 800e324:	2a25      	cmp	r2, #37	; 0x25
 800e326:	d1f9      	bne.n	800e31c <_svfiprintf_r+0x50>
 800e328:	ebba 0b04 	subs.w	fp, sl, r4
 800e32c:	d00b      	beq.n	800e346 <_svfiprintf_r+0x7a>
 800e32e:	465b      	mov	r3, fp
 800e330:	4622      	mov	r2, r4
 800e332:	4629      	mov	r1, r5
 800e334:	4638      	mov	r0, r7
 800e336:	f7ff ff6d 	bl	800e214 <__ssputs_r>
 800e33a:	3001      	adds	r0, #1
 800e33c:	f000 80aa 	beq.w	800e494 <_svfiprintf_r+0x1c8>
 800e340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e342:	445a      	add	r2, fp
 800e344:	9209      	str	r2, [sp, #36]	; 0x24
 800e346:	f89a 3000 	ldrb.w	r3, [sl]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	f000 80a2 	beq.w	800e494 <_svfiprintf_r+0x1c8>
 800e350:	2300      	movs	r3, #0
 800e352:	f04f 32ff 	mov.w	r2, #4294967295
 800e356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e35a:	f10a 0a01 	add.w	sl, sl, #1
 800e35e:	9304      	str	r3, [sp, #16]
 800e360:	9307      	str	r3, [sp, #28]
 800e362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e366:	931a      	str	r3, [sp, #104]	; 0x68
 800e368:	4654      	mov	r4, sl
 800e36a:	2205      	movs	r2, #5
 800e36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e370:	4851      	ldr	r0, [pc, #324]	; (800e4b8 <_svfiprintf_r+0x1ec>)
 800e372:	f7f1 ff5d 	bl	8000230 <memchr>
 800e376:	9a04      	ldr	r2, [sp, #16]
 800e378:	b9d8      	cbnz	r0, 800e3b2 <_svfiprintf_r+0xe6>
 800e37a:	06d0      	lsls	r0, r2, #27
 800e37c:	bf44      	itt	mi
 800e37e:	2320      	movmi	r3, #32
 800e380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e384:	0711      	lsls	r1, r2, #28
 800e386:	bf44      	itt	mi
 800e388:	232b      	movmi	r3, #43	; 0x2b
 800e38a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e38e:	f89a 3000 	ldrb.w	r3, [sl]
 800e392:	2b2a      	cmp	r3, #42	; 0x2a
 800e394:	d015      	beq.n	800e3c2 <_svfiprintf_r+0xf6>
 800e396:	9a07      	ldr	r2, [sp, #28]
 800e398:	4654      	mov	r4, sl
 800e39a:	2000      	movs	r0, #0
 800e39c:	f04f 0c0a 	mov.w	ip, #10
 800e3a0:	4621      	mov	r1, r4
 800e3a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e3a6:	3b30      	subs	r3, #48	; 0x30
 800e3a8:	2b09      	cmp	r3, #9
 800e3aa:	d94e      	bls.n	800e44a <_svfiprintf_r+0x17e>
 800e3ac:	b1b0      	cbz	r0, 800e3dc <_svfiprintf_r+0x110>
 800e3ae:	9207      	str	r2, [sp, #28]
 800e3b0:	e014      	b.n	800e3dc <_svfiprintf_r+0x110>
 800e3b2:	eba0 0308 	sub.w	r3, r0, r8
 800e3b6:	fa09 f303 	lsl.w	r3, r9, r3
 800e3ba:	4313      	orrs	r3, r2
 800e3bc:	9304      	str	r3, [sp, #16]
 800e3be:	46a2      	mov	sl, r4
 800e3c0:	e7d2      	b.n	800e368 <_svfiprintf_r+0x9c>
 800e3c2:	9b03      	ldr	r3, [sp, #12]
 800e3c4:	1d19      	adds	r1, r3, #4
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	9103      	str	r1, [sp, #12]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	bfbb      	ittet	lt
 800e3ce:	425b      	neglt	r3, r3
 800e3d0:	f042 0202 	orrlt.w	r2, r2, #2
 800e3d4:	9307      	strge	r3, [sp, #28]
 800e3d6:	9307      	strlt	r3, [sp, #28]
 800e3d8:	bfb8      	it	lt
 800e3da:	9204      	strlt	r2, [sp, #16]
 800e3dc:	7823      	ldrb	r3, [r4, #0]
 800e3de:	2b2e      	cmp	r3, #46	; 0x2e
 800e3e0:	d10c      	bne.n	800e3fc <_svfiprintf_r+0x130>
 800e3e2:	7863      	ldrb	r3, [r4, #1]
 800e3e4:	2b2a      	cmp	r3, #42	; 0x2a
 800e3e6:	d135      	bne.n	800e454 <_svfiprintf_r+0x188>
 800e3e8:	9b03      	ldr	r3, [sp, #12]
 800e3ea:	1d1a      	adds	r2, r3, #4
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	9203      	str	r2, [sp, #12]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	bfb8      	it	lt
 800e3f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3f8:	3402      	adds	r4, #2
 800e3fa:	9305      	str	r3, [sp, #20]
 800e3fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e4c8 <_svfiprintf_r+0x1fc>
 800e400:	7821      	ldrb	r1, [r4, #0]
 800e402:	2203      	movs	r2, #3
 800e404:	4650      	mov	r0, sl
 800e406:	f7f1 ff13 	bl	8000230 <memchr>
 800e40a:	b140      	cbz	r0, 800e41e <_svfiprintf_r+0x152>
 800e40c:	2340      	movs	r3, #64	; 0x40
 800e40e:	eba0 000a 	sub.w	r0, r0, sl
 800e412:	fa03 f000 	lsl.w	r0, r3, r0
 800e416:	9b04      	ldr	r3, [sp, #16]
 800e418:	4303      	orrs	r3, r0
 800e41a:	3401      	adds	r4, #1
 800e41c:	9304      	str	r3, [sp, #16]
 800e41e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e422:	4826      	ldr	r0, [pc, #152]	; (800e4bc <_svfiprintf_r+0x1f0>)
 800e424:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e428:	2206      	movs	r2, #6
 800e42a:	f7f1 ff01 	bl	8000230 <memchr>
 800e42e:	2800      	cmp	r0, #0
 800e430:	d038      	beq.n	800e4a4 <_svfiprintf_r+0x1d8>
 800e432:	4b23      	ldr	r3, [pc, #140]	; (800e4c0 <_svfiprintf_r+0x1f4>)
 800e434:	bb1b      	cbnz	r3, 800e47e <_svfiprintf_r+0x1b2>
 800e436:	9b03      	ldr	r3, [sp, #12]
 800e438:	3307      	adds	r3, #7
 800e43a:	f023 0307 	bic.w	r3, r3, #7
 800e43e:	3308      	adds	r3, #8
 800e440:	9303      	str	r3, [sp, #12]
 800e442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e444:	4433      	add	r3, r6
 800e446:	9309      	str	r3, [sp, #36]	; 0x24
 800e448:	e767      	b.n	800e31a <_svfiprintf_r+0x4e>
 800e44a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e44e:	460c      	mov	r4, r1
 800e450:	2001      	movs	r0, #1
 800e452:	e7a5      	b.n	800e3a0 <_svfiprintf_r+0xd4>
 800e454:	2300      	movs	r3, #0
 800e456:	3401      	adds	r4, #1
 800e458:	9305      	str	r3, [sp, #20]
 800e45a:	4619      	mov	r1, r3
 800e45c:	f04f 0c0a 	mov.w	ip, #10
 800e460:	4620      	mov	r0, r4
 800e462:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e466:	3a30      	subs	r2, #48	; 0x30
 800e468:	2a09      	cmp	r2, #9
 800e46a:	d903      	bls.n	800e474 <_svfiprintf_r+0x1a8>
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d0c5      	beq.n	800e3fc <_svfiprintf_r+0x130>
 800e470:	9105      	str	r1, [sp, #20]
 800e472:	e7c3      	b.n	800e3fc <_svfiprintf_r+0x130>
 800e474:	fb0c 2101 	mla	r1, ip, r1, r2
 800e478:	4604      	mov	r4, r0
 800e47a:	2301      	movs	r3, #1
 800e47c:	e7f0      	b.n	800e460 <_svfiprintf_r+0x194>
 800e47e:	ab03      	add	r3, sp, #12
 800e480:	9300      	str	r3, [sp, #0]
 800e482:	462a      	mov	r2, r5
 800e484:	4b0f      	ldr	r3, [pc, #60]	; (800e4c4 <_svfiprintf_r+0x1f8>)
 800e486:	a904      	add	r1, sp, #16
 800e488:	4638      	mov	r0, r7
 800e48a:	f7fd fd27 	bl	800bedc <_printf_float>
 800e48e:	1c42      	adds	r2, r0, #1
 800e490:	4606      	mov	r6, r0
 800e492:	d1d6      	bne.n	800e442 <_svfiprintf_r+0x176>
 800e494:	89ab      	ldrh	r3, [r5, #12]
 800e496:	065b      	lsls	r3, r3, #25
 800e498:	f53f af2c 	bmi.w	800e2f4 <_svfiprintf_r+0x28>
 800e49c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e49e:	b01d      	add	sp, #116	; 0x74
 800e4a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4a4:	ab03      	add	r3, sp, #12
 800e4a6:	9300      	str	r3, [sp, #0]
 800e4a8:	462a      	mov	r2, r5
 800e4aa:	4b06      	ldr	r3, [pc, #24]	; (800e4c4 <_svfiprintf_r+0x1f8>)
 800e4ac:	a904      	add	r1, sp, #16
 800e4ae:	4638      	mov	r0, r7
 800e4b0:	f7fd ffb8 	bl	800c424 <_printf_i>
 800e4b4:	e7eb      	b.n	800e48e <_svfiprintf_r+0x1c2>
 800e4b6:	bf00      	nop
 800e4b8:	08012ddc 	.word	0x08012ddc
 800e4bc:	08012de6 	.word	0x08012de6
 800e4c0:	0800bedd 	.word	0x0800bedd
 800e4c4:	0800e215 	.word	0x0800e215
 800e4c8:	08012de2 	.word	0x08012de2

0800e4cc <__sfputc_r>:
 800e4cc:	6893      	ldr	r3, [r2, #8]
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	b410      	push	{r4}
 800e4d4:	6093      	str	r3, [r2, #8]
 800e4d6:	da08      	bge.n	800e4ea <__sfputc_r+0x1e>
 800e4d8:	6994      	ldr	r4, [r2, #24]
 800e4da:	42a3      	cmp	r3, r4
 800e4dc:	db01      	blt.n	800e4e2 <__sfputc_r+0x16>
 800e4de:	290a      	cmp	r1, #10
 800e4e0:	d103      	bne.n	800e4ea <__sfputc_r+0x1e>
 800e4e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4e6:	f7fe b981 	b.w	800c7ec <__swbuf_r>
 800e4ea:	6813      	ldr	r3, [r2, #0]
 800e4ec:	1c58      	adds	r0, r3, #1
 800e4ee:	6010      	str	r0, [r2, #0]
 800e4f0:	7019      	strb	r1, [r3, #0]
 800e4f2:	4608      	mov	r0, r1
 800e4f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e4f8:	4770      	bx	lr

0800e4fa <__sfputs_r>:
 800e4fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fc:	4606      	mov	r6, r0
 800e4fe:	460f      	mov	r7, r1
 800e500:	4614      	mov	r4, r2
 800e502:	18d5      	adds	r5, r2, r3
 800e504:	42ac      	cmp	r4, r5
 800e506:	d101      	bne.n	800e50c <__sfputs_r+0x12>
 800e508:	2000      	movs	r0, #0
 800e50a:	e007      	b.n	800e51c <__sfputs_r+0x22>
 800e50c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e510:	463a      	mov	r2, r7
 800e512:	4630      	mov	r0, r6
 800e514:	f7ff ffda 	bl	800e4cc <__sfputc_r>
 800e518:	1c43      	adds	r3, r0, #1
 800e51a:	d1f3      	bne.n	800e504 <__sfputs_r+0xa>
 800e51c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e520 <_vfiprintf_r>:
 800e520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e524:	460d      	mov	r5, r1
 800e526:	b09d      	sub	sp, #116	; 0x74
 800e528:	4614      	mov	r4, r2
 800e52a:	4698      	mov	r8, r3
 800e52c:	4606      	mov	r6, r0
 800e52e:	b118      	cbz	r0, 800e538 <_vfiprintf_r+0x18>
 800e530:	6983      	ldr	r3, [r0, #24]
 800e532:	b90b      	cbnz	r3, 800e538 <_vfiprintf_r+0x18>
 800e534:	f7ff f9b0 	bl	800d898 <__sinit>
 800e538:	4b89      	ldr	r3, [pc, #548]	; (800e760 <_vfiprintf_r+0x240>)
 800e53a:	429d      	cmp	r5, r3
 800e53c:	d11b      	bne.n	800e576 <_vfiprintf_r+0x56>
 800e53e:	6875      	ldr	r5, [r6, #4]
 800e540:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e542:	07d9      	lsls	r1, r3, #31
 800e544:	d405      	bmi.n	800e552 <_vfiprintf_r+0x32>
 800e546:	89ab      	ldrh	r3, [r5, #12]
 800e548:	059a      	lsls	r2, r3, #22
 800e54a:	d402      	bmi.n	800e552 <_vfiprintf_r+0x32>
 800e54c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e54e:	f7ff fa46 	bl	800d9de <__retarget_lock_acquire_recursive>
 800e552:	89ab      	ldrh	r3, [r5, #12]
 800e554:	071b      	lsls	r3, r3, #28
 800e556:	d501      	bpl.n	800e55c <_vfiprintf_r+0x3c>
 800e558:	692b      	ldr	r3, [r5, #16]
 800e55a:	b9eb      	cbnz	r3, 800e598 <_vfiprintf_r+0x78>
 800e55c:	4629      	mov	r1, r5
 800e55e:	4630      	mov	r0, r6
 800e560:	f7fe f996 	bl	800c890 <__swsetup_r>
 800e564:	b1c0      	cbz	r0, 800e598 <_vfiprintf_r+0x78>
 800e566:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e568:	07dc      	lsls	r4, r3, #31
 800e56a:	d50e      	bpl.n	800e58a <_vfiprintf_r+0x6a>
 800e56c:	f04f 30ff 	mov.w	r0, #4294967295
 800e570:	b01d      	add	sp, #116	; 0x74
 800e572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e576:	4b7b      	ldr	r3, [pc, #492]	; (800e764 <_vfiprintf_r+0x244>)
 800e578:	429d      	cmp	r5, r3
 800e57a:	d101      	bne.n	800e580 <_vfiprintf_r+0x60>
 800e57c:	68b5      	ldr	r5, [r6, #8]
 800e57e:	e7df      	b.n	800e540 <_vfiprintf_r+0x20>
 800e580:	4b79      	ldr	r3, [pc, #484]	; (800e768 <_vfiprintf_r+0x248>)
 800e582:	429d      	cmp	r5, r3
 800e584:	bf08      	it	eq
 800e586:	68f5      	ldreq	r5, [r6, #12]
 800e588:	e7da      	b.n	800e540 <_vfiprintf_r+0x20>
 800e58a:	89ab      	ldrh	r3, [r5, #12]
 800e58c:	0598      	lsls	r0, r3, #22
 800e58e:	d4ed      	bmi.n	800e56c <_vfiprintf_r+0x4c>
 800e590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e592:	f7ff fa25 	bl	800d9e0 <__retarget_lock_release_recursive>
 800e596:	e7e9      	b.n	800e56c <_vfiprintf_r+0x4c>
 800e598:	2300      	movs	r3, #0
 800e59a:	9309      	str	r3, [sp, #36]	; 0x24
 800e59c:	2320      	movs	r3, #32
 800e59e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5a6:	2330      	movs	r3, #48	; 0x30
 800e5a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e76c <_vfiprintf_r+0x24c>
 800e5ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5b0:	f04f 0901 	mov.w	r9, #1
 800e5b4:	4623      	mov	r3, r4
 800e5b6:	469a      	mov	sl, r3
 800e5b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5bc:	b10a      	cbz	r2, 800e5c2 <_vfiprintf_r+0xa2>
 800e5be:	2a25      	cmp	r2, #37	; 0x25
 800e5c0:	d1f9      	bne.n	800e5b6 <_vfiprintf_r+0x96>
 800e5c2:	ebba 0b04 	subs.w	fp, sl, r4
 800e5c6:	d00b      	beq.n	800e5e0 <_vfiprintf_r+0xc0>
 800e5c8:	465b      	mov	r3, fp
 800e5ca:	4622      	mov	r2, r4
 800e5cc:	4629      	mov	r1, r5
 800e5ce:	4630      	mov	r0, r6
 800e5d0:	f7ff ff93 	bl	800e4fa <__sfputs_r>
 800e5d4:	3001      	adds	r0, #1
 800e5d6:	f000 80aa 	beq.w	800e72e <_vfiprintf_r+0x20e>
 800e5da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e5dc:	445a      	add	r2, fp
 800e5de:	9209      	str	r2, [sp, #36]	; 0x24
 800e5e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f000 80a2 	beq.w	800e72e <_vfiprintf_r+0x20e>
 800e5ea:	2300      	movs	r3, #0
 800e5ec:	f04f 32ff 	mov.w	r2, #4294967295
 800e5f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e5f4:	f10a 0a01 	add.w	sl, sl, #1
 800e5f8:	9304      	str	r3, [sp, #16]
 800e5fa:	9307      	str	r3, [sp, #28]
 800e5fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e600:	931a      	str	r3, [sp, #104]	; 0x68
 800e602:	4654      	mov	r4, sl
 800e604:	2205      	movs	r2, #5
 800e606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e60a:	4858      	ldr	r0, [pc, #352]	; (800e76c <_vfiprintf_r+0x24c>)
 800e60c:	f7f1 fe10 	bl	8000230 <memchr>
 800e610:	9a04      	ldr	r2, [sp, #16]
 800e612:	b9d8      	cbnz	r0, 800e64c <_vfiprintf_r+0x12c>
 800e614:	06d1      	lsls	r1, r2, #27
 800e616:	bf44      	itt	mi
 800e618:	2320      	movmi	r3, #32
 800e61a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e61e:	0713      	lsls	r3, r2, #28
 800e620:	bf44      	itt	mi
 800e622:	232b      	movmi	r3, #43	; 0x2b
 800e624:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e628:	f89a 3000 	ldrb.w	r3, [sl]
 800e62c:	2b2a      	cmp	r3, #42	; 0x2a
 800e62e:	d015      	beq.n	800e65c <_vfiprintf_r+0x13c>
 800e630:	9a07      	ldr	r2, [sp, #28]
 800e632:	4654      	mov	r4, sl
 800e634:	2000      	movs	r0, #0
 800e636:	f04f 0c0a 	mov.w	ip, #10
 800e63a:	4621      	mov	r1, r4
 800e63c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e640:	3b30      	subs	r3, #48	; 0x30
 800e642:	2b09      	cmp	r3, #9
 800e644:	d94e      	bls.n	800e6e4 <_vfiprintf_r+0x1c4>
 800e646:	b1b0      	cbz	r0, 800e676 <_vfiprintf_r+0x156>
 800e648:	9207      	str	r2, [sp, #28]
 800e64a:	e014      	b.n	800e676 <_vfiprintf_r+0x156>
 800e64c:	eba0 0308 	sub.w	r3, r0, r8
 800e650:	fa09 f303 	lsl.w	r3, r9, r3
 800e654:	4313      	orrs	r3, r2
 800e656:	9304      	str	r3, [sp, #16]
 800e658:	46a2      	mov	sl, r4
 800e65a:	e7d2      	b.n	800e602 <_vfiprintf_r+0xe2>
 800e65c:	9b03      	ldr	r3, [sp, #12]
 800e65e:	1d19      	adds	r1, r3, #4
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	9103      	str	r1, [sp, #12]
 800e664:	2b00      	cmp	r3, #0
 800e666:	bfbb      	ittet	lt
 800e668:	425b      	neglt	r3, r3
 800e66a:	f042 0202 	orrlt.w	r2, r2, #2
 800e66e:	9307      	strge	r3, [sp, #28]
 800e670:	9307      	strlt	r3, [sp, #28]
 800e672:	bfb8      	it	lt
 800e674:	9204      	strlt	r2, [sp, #16]
 800e676:	7823      	ldrb	r3, [r4, #0]
 800e678:	2b2e      	cmp	r3, #46	; 0x2e
 800e67a:	d10c      	bne.n	800e696 <_vfiprintf_r+0x176>
 800e67c:	7863      	ldrb	r3, [r4, #1]
 800e67e:	2b2a      	cmp	r3, #42	; 0x2a
 800e680:	d135      	bne.n	800e6ee <_vfiprintf_r+0x1ce>
 800e682:	9b03      	ldr	r3, [sp, #12]
 800e684:	1d1a      	adds	r2, r3, #4
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	9203      	str	r2, [sp, #12]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	bfb8      	it	lt
 800e68e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e692:	3402      	adds	r4, #2
 800e694:	9305      	str	r3, [sp, #20]
 800e696:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e77c <_vfiprintf_r+0x25c>
 800e69a:	7821      	ldrb	r1, [r4, #0]
 800e69c:	2203      	movs	r2, #3
 800e69e:	4650      	mov	r0, sl
 800e6a0:	f7f1 fdc6 	bl	8000230 <memchr>
 800e6a4:	b140      	cbz	r0, 800e6b8 <_vfiprintf_r+0x198>
 800e6a6:	2340      	movs	r3, #64	; 0x40
 800e6a8:	eba0 000a 	sub.w	r0, r0, sl
 800e6ac:	fa03 f000 	lsl.w	r0, r3, r0
 800e6b0:	9b04      	ldr	r3, [sp, #16]
 800e6b2:	4303      	orrs	r3, r0
 800e6b4:	3401      	adds	r4, #1
 800e6b6:	9304      	str	r3, [sp, #16]
 800e6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6bc:	482c      	ldr	r0, [pc, #176]	; (800e770 <_vfiprintf_r+0x250>)
 800e6be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e6c2:	2206      	movs	r2, #6
 800e6c4:	f7f1 fdb4 	bl	8000230 <memchr>
 800e6c8:	2800      	cmp	r0, #0
 800e6ca:	d03f      	beq.n	800e74c <_vfiprintf_r+0x22c>
 800e6cc:	4b29      	ldr	r3, [pc, #164]	; (800e774 <_vfiprintf_r+0x254>)
 800e6ce:	bb1b      	cbnz	r3, 800e718 <_vfiprintf_r+0x1f8>
 800e6d0:	9b03      	ldr	r3, [sp, #12]
 800e6d2:	3307      	adds	r3, #7
 800e6d4:	f023 0307 	bic.w	r3, r3, #7
 800e6d8:	3308      	adds	r3, #8
 800e6da:	9303      	str	r3, [sp, #12]
 800e6dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6de:	443b      	add	r3, r7
 800e6e0:	9309      	str	r3, [sp, #36]	; 0x24
 800e6e2:	e767      	b.n	800e5b4 <_vfiprintf_r+0x94>
 800e6e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e6e8:	460c      	mov	r4, r1
 800e6ea:	2001      	movs	r0, #1
 800e6ec:	e7a5      	b.n	800e63a <_vfiprintf_r+0x11a>
 800e6ee:	2300      	movs	r3, #0
 800e6f0:	3401      	adds	r4, #1
 800e6f2:	9305      	str	r3, [sp, #20]
 800e6f4:	4619      	mov	r1, r3
 800e6f6:	f04f 0c0a 	mov.w	ip, #10
 800e6fa:	4620      	mov	r0, r4
 800e6fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e700:	3a30      	subs	r2, #48	; 0x30
 800e702:	2a09      	cmp	r2, #9
 800e704:	d903      	bls.n	800e70e <_vfiprintf_r+0x1ee>
 800e706:	2b00      	cmp	r3, #0
 800e708:	d0c5      	beq.n	800e696 <_vfiprintf_r+0x176>
 800e70a:	9105      	str	r1, [sp, #20]
 800e70c:	e7c3      	b.n	800e696 <_vfiprintf_r+0x176>
 800e70e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e712:	4604      	mov	r4, r0
 800e714:	2301      	movs	r3, #1
 800e716:	e7f0      	b.n	800e6fa <_vfiprintf_r+0x1da>
 800e718:	ab03      	add	r3, sp, #12
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	462a      	mov	r2, r5
 800e71e:	4b16      	ldr	r3, [pc, #88]	; (800e778 <_vfiprintf_r+0x258>)
 800e720:	a904      	add	r1, sp, #16
 800e722:	4630      	mov	r0, r6
 800e724:	f7fd fbda 	bl	800bedc <_printf_float>
 800e728:	4607      	mov	r7, r0
 800e72a:	1c78      	adds	r0, r7, #1
 800e72c:	d1d6      	bne.n	800e6dc <_vfiprintf_r+0x1bc>
 800e72e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e730:	07d9      	lsls	r1, r3, #31
 800e732:	d405      	bmi.n	800e740 <_vfiprintf_r+0x220>
 800e734:	89ab      	ldrh	r3, [r5, #12]
 800e736:	059a      	lsls	r2, r3, #22
 800e738:	d402      	bmi.n	800e740 <_vfiprintf_r+0x220>
 800e73a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e73c:	f7ff f950 	bl	800d9e0 <__retarget_lock_release_recursive>
 800e740:	89ab      	ldrh	r3, [r5, #12]
 800e742:	065b      	lsls	r3, r3, #25
 800e744:	f53f af12 	bmi.w	800e56c <_vfiprintf_r+0x4c>
 800e748:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e74a:	e711      	b.n	800e570 <_vfiprintf_r+0x50>
 800e74c:	ab03      	add	r3, sp, #12
 800e74e:	9300      	str	r3, [sp, #0]
 800e750:	462a      	mov	r2, r5
 800e752:	4b09      	ldr	r3, [pc, #36]	; (800e778 <_vfiprintf_r+0x258>)
 800e754:	a904      	add	r1, sp, #16
 800e756:	4630      	mov	r0, r6
 800e758:	f7fd fe64 	bl	800c424 <_printf_i>
 800e75c:	e7e4      	b.n	800e728 <_vfiprintf_r+0x208>
 800e75e:	bf00      	nop
 800e760:	08012c44 	.word	0x08012c44
 800e764:	08012c64 	.word	0x08012c64
 800e768:	08012c24 	.word	0x08012c24
 800e76c:	08012ddc 	.word	0x08012ddc
 800e770:	08012de6 	.word	0x08012de6
 800e774:	0800bedd 	.word	0x0800bedd
 800e778:	0800e4fb 	.word	0x0800e4fb
 800e77c:	08012de2 	.word	0x08012de2

0800e780 <__sread>:
 800e780:	b510      	push	{r4, lr}
 800e782:	460c      	mov	r4, r1
 800e784:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e788:	f000 f920 	bl	800e9cc <_read_r>
 800e78c:	2800      	cmp	r0, #0
 800e78e:	bfab      	itete	ge
 800e790:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e792:	89a3      	ldrhlt	r3, [r4, #12]
 800e794:	181b      	addge	r3, r3, r0
 800e796:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e79a:	bfac      	ite	ge
 800e79c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e79e:	81a3      	strhlt	r3, [r4, #12]
 800e7a0:	bd10      	pop	{r4, pc}

0800e7a2 <__swrite>:
 800e7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a6:	461f      	mov	r7, r3
 800e7a8:	898b      	ldrh	r3, [r1, #12]
 800e7aa:	05db      	lsls	r3, r3, #23
 800e7ac:	4605      	mov	r5, r0
 800e7ae:	460c      	mov	r4, r1
 800e7b0:	4616      	mov	r6, r2
 800e7b2:	d505      	bpl.n	800e7c0 <__swrite+0x1e>
 800e7b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7b8:	2302      	movs	r3, #2
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	f000 f898 	bl	800e8f0 <_lseek_r>
 800e7c0:	89a3      	ldrh	r3, [r4, #12]
 800e7c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e7c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7ca:	81a3      	strh	r3, [r4, #12]
 800e7cc:	4632      	mov	r2, r6
 800e7ce:	463b      	mov	r3, r7
 800e7d0:	4628      	mov	r0, r5
 800e7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d6:	f000 b817 	b.w	800e808 <_write_r>

0800e7da <__sseek>:
 800e7da:	b510      	push	{r4, lr}
 800e7dc:	460c      	mov	r4, r1
 800e7de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7e2:	f000 f885 	bl	800e8f0 <_lseek_r>
 800e7e6:	1c43      	adds	r3, r0, #1
 800e7e8:	89a3      	ldrh	r3, [r4, #12]
 800e7ea:	bf15      	itete	ne
 800e7ec:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7f6:	81a3      	strheq	r3, [r4, #12]
 800e7f8:	bf18      	it	ne
 800e7fa:	81a3      	strhne	r3, [r4, #12]
 800e7fc:	bd10      	pop	{r4, pc}

0800e7fe <__sclose>:
 800e7fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e802:	f000 b831 	b.w	800e868 <_close_r>
	...

0800e808 <_write_r>:
 800e808:	b538      	push	{r3, r4, r5, lr}
 800e80a:	4d07      	ldr	r5, [pc, #28]	; (800e828 <_write_r+0x20>)
 800e80c:	4604      	mov	r4, r0
 800e80e:	4608      	mov	r0, r1
 800e810:	4611      	mov	r1, r2
 800e812:	2200      	movs	r2, #0
 800e814:	602a      	str	r2, [r5, #0]
 800e816:	461a      	mov	r2, r3
 800e818:	f7f4 fe89 	bl	800352e <_write>
 800e81c:	1c43      	adds	r3, r0, #1
 800e81e:	d102      	bne.n	800e826 <_write_r+0x1e>
 800e820:	682b      	ldr	r3, [r5, #0]
 800e822:	b103      	cbz	r3, 800e826 <_write_r+0x1e>
 800e824:	6023      	str	r3, [r4, #0]
 800e826:	bd38      	pop	{r3, r4, r5, pc}
 800e828:	20000a64 	.word	0x20000a64

0800e82c <__assert_func>:
 800e82c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e82e:	4614      	mov	r4, r2
 800e830:	461a      	mov	r2, r3
 800e832:	4b09      	ldr	r3, [pc, #36]	; (800e858 <__assert_func+0x2c>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4605      	mov	r5, r0
 800e838:	68d8      	ldr	r0, [r3, #12]
 800e83a:	b14c      	cbz	r4, 800e850 <__assert_func+0x24>
 800e83c:	4b07      	ldr	r3, [pc, #28]	; (800e85c <__assert_func+0x30>)
 800e83e:	9100      	str	r1, [sp, #0]
 800e840:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e844:	4906      	ldr	r1, [pc, #24]	; (800e860 <__assert_func+0x34>)
 800e846:	462b      	mov	r3, r5
 800e848:	f000 f81e 	bl	800e888 <fiprintf>
 800e84c:	f000 f8dd 	bl	800ea0a <abort>
 800e850:	4b04      	ldr	r3, [pc, #16]	; (800e864 <__assert_func+0x38>)
 800e852:	461c      	mov	r4, r3
 800e854:	e7f3      	b.n	800e83e <__assert_func+0x12>
 800e856:	bf00      	nop
 800e858:	20000074 	.word	0x20000074
 800e85c:	08012ded 	.word	0x08012ded
 800e860:	08012dfa 	.word	0x08012dfa
 800e864:	08012e28 	.word	0x08012e28

0800e868 <_close_r>:
 800e868:	b538      	push	{r3, r4, r5, lr}
 800e86a:	4d06      	ldr	r5, [pc, #24]	; (800e884 <_close_r+0x1c>)
 800e86c:	2300      	movs	r3, #0
 800e86e:	4604      	mov	r4, r0
 800e870:	4608      	mov	r0, r1
 800e872:	602b      	str	r3, [r5, #0]
 800e874:	f7f4 fe77 	bl	8003566 <_close>
 800e878:	1c43      	adds	r3, r0, #1
 800e87a:	d102      	bne.n	800e882 <_close_r+0x1a>
 800e87c:	682b      	ldr	r3, [r5, #0]
 800e87e:	b103      	cbz	r3, 800e882 <_close_r+0x1a>
 800e880:	6023      	str	r3, [r4, #0]
 800e882:	bd38      	pop	{r3, r4, r5, pc}
 800e884:	20000a64 	.word	0x20000a64

0800e888 <fiprintf>:
 800e888:	b40e      	push	{r1, r2, r3}
 800e88a:	b503      	push	{r0, r1, lr}
 800e88c:	4601      	mov	r1, r0
 800e88e:	ab03      	add	r3, sp, #12
 800e890:	4805      	ldr	r0, [pc, #20]	; (800e8a8 <fiprintf+0x20>)
 800e892:	f853 2b04 	ldr.w	r2, [r3], #4
 800e896:	6800      	ldr	r0, [r0, #0]
 800e898:	9301      	str	r3, [sp, #4]
 800e89a:	f7ff fe41 	bl	800e520 <_vfiprintf_r>
 800e89e:	b002      	add	sp, #8
 800e8a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800e8a4:	b003      	add	sp, #12
 800e8a6:	4770      	bx	lr
 800e8a8:	20000074 	.word	0x20000074

0800e8ac <_fstat_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	4d07      	ldr	r5, [pc, #28]	; (800e8cc <_fstat_r+0x20>)
 800e8b0:	2300      	movs	r3, #0
 800e8b2:	4604      	mov	r4, r0
 800e8b4:	4608      	mov	r0, r1
 800e8b6:	4611      	mov	r1, r2
 800e8b8:	602b      	str	r3, [r5, #0]
 800e8ba:	f7f4 fe60 	bl	800357e <_fstat>
 800e8be:	1c43      	adds	r3, r0, #1
 800e8c0:	d102      	bne.n	800e8c8 <_fstat_r+0x1c>
 800e8c2:	682b      	ldr	r3, [r5, #0]
 800e8c4:	b103      	cbz	r3, 800e8c8 <_fstat_r+0x1c>
 800e8c6:	6023      	str	r3, [r4, #0]
 800e8c8:	bd38      	pop	{r3, r4, r5, pc}
 800e8ca:	bf00      	nop
 800e8cc:	20000a64 	.word	0x20000a64

0800e8d0 <_isatty_r>:
 800e8d0:	b538      	push	{r3, r4, r5, lr}
 800e8d2:	4d06      	ldr	r5, [pc, #24]	; (800e8ec <_isatty_r+0x1c>)
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	4604      	mov	r4, r0
 800e8d8:	4608      	mov	r0, r1
 800e8da:	602b      	str	r3, [r5, #0]
 800e8dc:	f7f4 fe5f 	bl	800359e <_isatty>
 800e8e0:	1c43      	adds	r3, r0, #1
 800e8e2:	d102      	bne.n	800e8ea <_isatty_r+0x1a>
 800e8e4:	682b      	ldr	r3, [r5, #0]
 800e8e6:	b103      	cbz	r3, 800e8ea <_isatty_r+0x1a>
 800e8e8:	6023      	str	r3, [r4, #0]
 800e8ea:	bd38      	pop	{r3, r4, r5, pc}
 800e8ec:	20000a64 	.word	0x20000a64

0800e8f0 <_lseek_r>:
 800e8f0:	b538      	push	{r3, r4, r5, lr}
 800e8f2:	4d07      	ldr	r5, [pc, #28]	; (800e910 <_lseek_r+0x20>)
 800e8f4:	4604      	mov	r4, r0
 800e8f6:	4608      	mov	r0, r1
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	602a      	str	r2, [r5, #0]
 800e8fe:	461a      	mov	r2, r3
 800e900:	f7f4 fe58 	bl	80035b4 <_lseek>
 800e904:	1c43      	adds	r3, r0, #1
 800e906:	d102      	bne.n	800e90e <_lseek_r+0x1e>
 800e908:	682b      	ldr	r3, [r5, #0]
 800e90a:	b103      	cbz	r3, 800e90e <_lseek_r+0x1e>
 800e90c:	6023      	str	r3, [r4, #0]
 800e90e:	bd38      	pop	{r3, r4, r5, pc}
 800e910:	20000a64 	.word	0x20000a64

0800e914 <__ascii_mbtowc>:
 800e914:	b082      	sub	sp, #8
 800e916:	b901      	cbnz	r1, 800e91a <__ascii_mbtowc+0x6>
 800e918:	a901      	add	r1, sp, #4
 800e91a:	b142      	cbz	r2, 800e92e <__ascii_mbtowc+0x1a>
 800e91c:	b14b      	cbz	r3, 800e932 <__ascii_mbtowc+0x1e>
 800e91e:	7813      	ldrb	r3, [r2, #0]
 800e920:	600b      	str	r3, [r1, #0]
 800e922:	7812      	ldrb	r2, [r2, #0]
 800e924:	1e10      	subs	r0, r2, #0
 800e926:	bf18      	it	ne
 800e928:	2001      	movne	r0, #1
 800e92a:	b002      	add	sp, #8
 800e92c:	4770      	bx	lr
 800e92e:	4610      	mov	r0, r2
 800e930:	e7fb      	b.n	800e92a <__ascii_mbtowc+0x16>
 800e932:	f06f 0001 	mvn.w	r0, #1
 800e936:	e7f8      	b.n	800e92a <__ascii_mbtowc+0x16>

0800e938 <memmove>:
 800e938:	4288      	cmp	r0, r1
 800e93a:	b510      	push	{r4, lr}
 800e93c:	eb01 0402 	add.w	r4, r1, r2
 800e940:	d902      	bls.n	800e948 <memmove+0x10>
 800e942:	4284      	cmp	r4, r0
 800e944:	4623      	mov	r3, r4
 800e946:	d807      	bhi.n	800e958 <memmove+0x20>
 800e948:	1e43      	subs	r3, r0, #1
 800e94a:	42a1      	cmp	r1, r4
 800e94c:	d008      	beq.n	800e960 <memmove+0x28>
 800e94e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e952:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e956:	e7f8      	b.n	800e94a <memmove+0x12>
 800e958:	4402      	add	r2, r0
 800e95a:	4601      	mov	r1, r0
 800e95c:	428a      	cmp	r2, r1
 800e95e:	d100      	bne.n	800e962 <memmove+0x2a>
 800e960:	bd10      	pop	{r4, pc}
 800e962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e96a:	e7f7      	b.n	800e95c <memmove+0x24>

0800e96c <_realloc_r>:
 800e96c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e970:	4680      	mov	r8, r0
 800e972:	4614      	mov	r4, r2
 800e974:	460e      	mov	r6, r1
 800e976:	b921      	cbnz	r1, 800e982 <_realloc_r+0x16>
 800e978:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e97c:	4611      	mov	r1, r2
 800e97e:	f7fd b999 	b.w	800bcb4 <_malloc_r>
 800e982:	b92a      	cbnz	r2, 800e990 <_realloc_r+0x24>
 800e984:	f7fd f92a 	bl	800bbdc <_free_r>
 800e988:	4625      	mov	r5, r4
 800e98a:	4628      	mov	r0, r5
 800e98c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e990:	f000 f842 	bl	800ea18 <_malloc_usable_size_r>
 800e994:	4284      	cmp	r4, r0
 800e996:	4607      	mov	r7, r0
 800e998:	d802      	bhi.n	800e9a0 <_realloc_r+0x34>
 800e99a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e99e:	d812      	bhi.n	800e9c6 <_realloc_r+0x5a>
 800e9a0:	4621      	mov	r1, r4
 800e9a2:	4640      	mov	r0, r8
 800e9a4:	f7fd f986 	bl	800bcb4 <_malloc_r>
 800e9a8:	4605      	mov	r5, r0
 800e9aa:	2800      	cmp	r0, #0
 800e9ac:	d0ed      	beq.n	800e98a <_realloc_r+0x1e>
 800e9ae:	42bc      	cmp	r4, r7
 800e9b0:	4622      	mov	r2, r4
 800e9b2:	4631      	mov	r1, r6
 800e9b4:	bf28      	it	cs
 800e9b6:	463a      	movcs	r2, r7
 800e9b8:	f7ff f878 	bl	800daac <memcpy>
 800e9bc:	4631      	mov	r1, r6
 800e9be:	4640      	mov	r0, r8
 800e9c0:	f7fd f90c 	bl	800bbdc <_free_r>
 800e9c4:	e7e1      	b.n	800e98a <_realloc_r+0x1e>
 800e9c6:	4635      	mov	r5, r6
 800e9c8:	e7df      	b.n	800e98a <_realloc_r+0x1e>
	...

0800e9cc <_read_r>:
 800e9cc:	b538      	push	{r3, r4, r5, lr}
 800e9ce:	4d07      	ldr	r5, [pc, #28]	; (800e9ec <_read_r+0x20>)
 800e9d0:	4604      	mov	r4, r0
 800e9d2:	4608      	mov	r0, r1
 800e9d4:	4611      	mov	r1, r2
 800e9d6:	2200      	movs	r2, #0
 800e9d8:	602a      	str	r2, [r5, #0]
 800e9da:	461a      	mov	r2, r3
 800e9dc:	f7f4 fd8a 	bl	80034f4 <_read>
 800e9e0:	1c43      	adds	r3, r0, #1
 800e9e2:	d102      	bne.n	800e9ea <_read_r+0x1e>
 800e9e4:	682b      	ldr	r3, [r5, #0]
 800e9e6:	b103      	cbz	r3, 800e9ea <_read_r+0x1e>
 800e9e8:	6023      	str	r3, [r4, #0]
 800e9ea:	bd38      	pop	{r3, r4, r5, pc}
 800e9ec:	20000a64 	.word	0x20000a64

0800e9f0 <__ascii_wctomb>:
 800e9f0:	b149      	cbz	r1, 800ea06 <__ascii_wctomb+0x16>
 800e9f2:	2aff      	cmp	r2, #255	; 0xff
 800e9f4:	bf85      	ittet	hi
 800e9f6:	238a      	movhi	r3, #138	; 0x8a
 800e9f8:	6003      	strhi	r3, [r0, #0]
 800e9fa:	700a      	strbls	r2, [r1, #0]
 800e9fc:	f04f 30ff 	movhi.w	r0, #4294967295
 800ea00:	bf98      	it	ls
 800ea02:	2001      	movls	r0, #1
 800ea04:	4770      	bx	lr
 800ea06:	4608      	mov	r0, r1
 800ea08:	4770      	bx	lr

0800ea0a <abort>:
 800ea0a:	b508      	push	{r3, lr}
 800ea0c:	2006      	movs	r0, #6
 800ea0e:	f000 f833 	bl	800ea78 <raise>
 800ea12:	2001      	movs	r0, #1
 800ea14:	f7f4 fd64 	bl	80034e0 <_exit>

0800ea18 <_malloc_usable_size_r>:
 800ea18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea1c:	1f18      	subs	r0, r3, #4
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	bfbc      	itt	lt
 800ea22:	580b      	ldrlt	r3, [r1, r0]
 800ea24:	18c0      	addlt	r0, r0, r3
 800ea26:	4770      	bx	lr

0800ea28 <_raise_r>:
 800ea28:	291f      	cmp	r1, #31
 800ea2a:	b538      	push	{r3, r4, r5, lr}
 800ea2c:	4604      	mov	r4, r0
 800ea2e:	460d      	mov	r5, r1
 800ea30:	d904      	bls.n	800ea3c <_raise_r+0x14>
 800ea32:	2316      	movs	r3, #22
 800ea34:	6003      	str	r3, [r0, #0]
 800ea36:	f04f 30ff 	mov.w	r0, #4294967295
 800ea3a:	bd38      	pop	{r3, r4, r5, pc}
 800ea3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ea3e:	b112      	cbz	r2, 800ea46 <_raise_r+0x1e>
 800ea40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ea44:	b94b      	cbnz	r3, 800ea5a <_raise_r+0x32>
 800ea46:	4620      	mov	r0, r4
 800ea48:	f000 f830 	bl	800eaac <_getpid_r>
 800ea4c:	462a      	mov	r2, r5
 800ea4e:	4601      	mov	r1, r0
 800ea50:	4620      	mov	r0, r4
 800ea52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ea56:	f000 b817 	b.w	800ea88 <_kill_r>
 800ea5a:	2b01      	cmp	r3, #1
 800ea5c:	d00a      	beq.n	800ea74 <_raise_r+0x4c>
 800ea5e:	1c59      	adds	r1, r3, #1
 800ea60:	d103      	bne.n	800ea6a <_raise_r+0x42>
 800ea62:	2316      	movs	r3, #22
 800ea64:	6003      	str	r3, [r0, #0]
 800ea66:	2001      	movs	r0, #1
 800ea68:	e7e7      	b.n	800ea3a <_raise_r+0x12>
 800ea6a:	2400      	movs	r4, #0
 800ea6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ea70:	4628      	mov	r0, r5
 800ea72:	4798      	blx	r3
 800ea74:	2000      	movs	r0, #0
 800ea76:	e7e0      	b.n	800ea3a <_raise_r+0x12>

0800ea78 <raise>:
 800ea78:	4b02      	ldr	r3, [pc, #8]	; (800ea84 <raise+0xc>)
 800ea7a:	4601      	mov	r1, r0
 800ea7c:	6818      	ldr	r0, [r3, #0]
 800ea7e:	f7ff bfd3 	b.w	800ea28 <_raise_r>
 800ea82:	bf00      	nop
 800ea84:	20000074 	.word	0x20000074

0800ea88 <_kill_r>:
 800ea88:	b538      	push	{r3, r4, r5, lr}
 800ea8a:	4d07      	ldr	r5, [pc, #28]	; (800eaa8 <_kill_r+0x20>)
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	4604      	mov	r4, r0
 800ea90:	4608      	mov	r0, r1
 800ea92:	4611      	mov	r1, r2
 800ea94:	602b      	str	r3, [r5, #0]
 800ea96:	f7f4 fd13 	bl	80034c0 <_kill>
 800ea9a:	1c43      	adds	r3, r0, #1
 800ea9c:	d102      	bne.n	800eaa4 <_kill_r+0x1c>
 800ea9e:	682b      	ldr	r3, [r5, #0]
 800eaa0:	b103      	cbz	r3, 800eaa4 <_kill_r+0x1c>
 800eaa2:	6023      	str	r3, [r4, #0]
 800eaa4:	bd38      	pop	{r3, r4, r5, pc}
 800eaa6:	bf00      	nop
 800eaa8:	20000a64 	.word	0x20000a64

0800eaac <_getpid_r>:
 800eaac:	f7f4 bd00 	b.w	80034b0 <_getpid>

0800eab0 <pow>:
 800eab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eab2:	ed2d 8b02 	vpush	{d8}
 800eab6:	eeb0 8a40 	vmov.f32	s16, s0
 800eaba:	eef0 8a60 	vmov.f32	s17, s1
 800eabe:	ec55 4b11 	vmov	r4, r5, d1
 800eac2:	f000 f865 	bl	800eb90 <__ieee754_pow>
 800eac6:	4622      	mov	r2, r4
 800eac8:	462b      	mov	r3, r5
 800eaca:	4620      	mov	r0, r4
 800eacc:	4629      	mov	r1, r5
 800eace:	ec57 6b10 	vmov	r6, r7, d0
 800ead2:	f7f2 f853 	bl	8000b7c <__aeabi_dcmpun>
 800ead6:	2800      	cmp	r0, #0
 800ead8:	d13b      	bne.n	800eb52 <pow+0xa2>
 800eada:	ec51 0b18 	vmov	r0, r1, d8
 800eade:	2200      	movs	r2, #0
 800eae0:	2300      	movs	r3, #0
 800eae2:	f7f2 f819 	bl	8000b18 <__aeabi_dcmpeq>
 800eae6:	b1b8      	cbz	r0, 800eb18 <pow+0x68>
 800eae8:	2200      	movs	r2, #0
 800eaea:	2300      	movs	r3, #0
 800eaec:	4620      	mov	r0, r4
 800eaee:	4629      	mov	r1, r5
 800eaf0:	f7f2 f812 	bl	8000b18 <__aeabi_dcmpeq>
 800eaf4:	2800      	cmp	r0, #0
 800eaf6:	d146      	bne.n	800eb86 <pow+0xd6>
 800eaf8:	ec45 4b10 	vmov	d0, r4, r5
 800eafc:	f000 fe61 	bl	800f7c2 <finite>
 800eb00:	b338      	cbz	r0, 800eb52 <pow+0xa2>
 800eb02:	2200      	movs	r2, #0
 800eb04:	2300      	movs	r3, #0
 800eb06:	4620      	mov	r0, r4
 800eb08:	4629      	mov	r1, r5
 800eb0a:	f7f2 f80f 	bl	8000b2c <__aeabi_dcmplt>
 800eb0e:	b300      	cbz	r0, 800eb52 <pow+0xa2>
 800eb10:	f7fd f82a 	bl	800bb68 <__errno>
 800eb14:	2322      	movs	r3, #34	; 0x22
 800eb16:	e01b      	b.n	800eb50 <pow+0xa0>
 800eb18:	ec47 6b10 	vmov	d0, r6, r7
 800eb1c:	f000 fe51 	bl	800f7c2 <finite>
 800eb20:	b9e0      	cbnz	r0, 800eb5c <pow+0xac>
 800eb22:	eeb0 0a48 	vmov.f32	s0, s16
 800eb26:	eef0 0a68 	vmov.f32	s1, s17
 800eb2a:	f000 fe4a 	bl	800f7c2 <finite>
 800eb2e:	b1a8      	cbz	r0, 800eb5c <pow+0xac>
 800eb30:	ec45 4b10 	vmov	d0, r4, r5
 800eb34:	f000 fe45 	bl	800f7c2 <finite>
 800eb38:	b180      	cbz	r0, 800eb5c <pow+0xac>
 800eb3a:	4632      	mov	r2, r6
 800eb3c:	463b      	mov	r3, r7
 800eb3e:	4630      	mov	r0, r6
 800eb40:	4639      	mov	r1, r7
 800eb42:	f7f2 f81b 	bl	8000b7c <__aeabi_dcmpun>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d0e2      	beq.n	800eb10 <pow+0x60>
 800eb4a:	f7fd f80d 	bl	800bb68 <__errno>
 800eb4e:	2321      	movs	r3, #33	; 0x21
 800eb50:	6003      	str	r3, [r0, #0]
 800eb52:	ecbd 8b02 	vpop	{d8}
 800eb56:	ec47 6b10 	vmov	d0, r6, r7
 800eb5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb5c:	2200      	movs	r2, #0
 800eb5e:	2300      	movs	r3, #0
 800eb60:	4630      	mov	r0, r6
 800eb62:	4639      	mov	r1, r7
 800eb64:	f7f1 ffd8 	bl	8000b18 <__aeabi_dcmpeq>
 800eb68:	2800      	cmp	r0, #0
 800eb6a:	d0f2      	beq.n	800eb52 <pow+0xa2>
 800eb6c:	eeb0 0a48 	vmov.f32	s0, s16
 800eb70:	eef0 0a68 	vmov.f32	s1, s17
 800eb74:	f000 fe25 	bl	800f7c2 <finite>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	d0ea      	beq.n	800eb52 <pow+0xa2>
 800eb7c:	ec45 4b10 	vmov	d0, r4, r5
 800eb80:	f000 fe1f 	bl	800f7c2 <finite>
 800eb84:	e7c3      	b.n	800eb0e <pow+0x5e>
 800eb86:	4f01      	ldr	r7, [pc, #4]	; (800eb8c <pow+0xdc>)
 800eb88:	2600      	movs	r6, #0
 800eb8a:	e7e2      	b.n	800eb52 <pow+0xa2>
 800eb8c:	3ff00000 	.word	0x3ff00000

0800eb90 <__ieee754_pow>:
 800eb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb94:	ed2d 8b06 	vpush	{d8-d10}
 800eb98:	b089      	sub	sp, #36	; 0x24
 800eb9a:	ed8d 1b00 	vstr	d1, [sp]
 800eb9e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800eba2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800eba6:	ea58 0102 	orrs.w	r1, r8, r2
 800ebaa:	ec57 6b10 	vmov	r6, r7, d0
 800ebae:	d115      	bne.n	800ebdc <__ieee754_pow+0x4c>
 800ebb0:	19b3      	adds	r3, r6, r6
 800ebb2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ebb6:	4152      	adcs	r2, r2
 800ebb8:	4299      	cmp	r1, r3
 800ebba:	4b89      	ldr	r3, [pc, #548]	; (800ede0 <__ieee754_pow+0x250>)
 800ebbc:	4193      	sbcs	r3, r2
 800ebbe:	f080 84d2 	bcs.w	800f566 <__ieee754_pow+0x9d6>
 800ebc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	4639      	mov	r1, r7
 800ebca:	f7f1 fb87 	bl	80002dc <__adddf3>
 800ebce:	ec41 0b10 	vmov	d0, r0, r1
 800ebd2:	b009      	add	sp, #36	; 0x24
 800ebd4:	ecbd 8b06 	vpop	{d8-d10}
 800ebd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebdc:	4b81      	ldr	r3, [pc, #516]	; (800ede4 <__ieee754_pow+0x254>)
 800ebde:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ebe2:	429c      	cmp	r4, r3
 800ebe4:	ee10 aa10 	vmov	sl, s0
 800ebe8:	463d      	mov	r5, r7
 800ebea:	dc06      	bgt.n	800ebfa <__ieee754_pow+0x6a>
 800ebec:	d101      	bne.n	800ebf2 <__ieee754_pow+0x62>
 800ebee:	2e00      	cmp	r6, #0
 800ebf0:	d1e7      	bne.n	800ebc2 <__ieee754_pow+0x32>
 800ebf2:	4598      	cmp	r8, r3
 800ebf4:	dc01      	bgt.n	800ebfa <__ieee754_pow+0x6a>
 800ebf6:	d10f      	bne.n	800ec18 <__ieee754_pow+0x88>
 800ebf8:	b172      	cbz	r2, 800ec18 <__ieee754_pow+0x88>
 800ebfa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ebfe:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ec02:	ea55 050a 	orrs.w	r5, r5, sl
 800ec06:	d1dc      	bne.n	800ebc2 <__ieee754_pow+0x32>
 800ec08:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ec0c:	18db      	adds	r3, r3, r3
 800ec0e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ec12:	4152      	adcs	r2, r2
 800ec14:	429d      	cmp	r5, r3
 800ec16:	e7d0      	b.n	800ebba <__ieee754_pow+0x2a>
 800ec18:	2d00      	cmp	r5, #0
 800ec1a:	da3b      	bge.n	800ec94 <__ieee754_pow+0x104>
 800ec1c:	4b72      	ldr	r3, [pc, #456]	; (800ede8 <__ieee754_pow+0x258>)
 800ec1e:	4598      	cmp	r8, r3
 800ec20:	dc51      	bgt.n	800ecc6 <__ieee754_pow+0x136>
 800ec22:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ec26:	4598      	cmp	r8, r3
 800ec28:	f340 84ac 	ble.w	800f584 <__ieee754_pow+0x9f4>
 800ec2c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ec30:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ec34:	2b14      	cmp	r3, #20
 800ec36:	dd0f      	ble.n	800ec58 <__ieee754_pow+0xc8>
 800ec38:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ec3c:	fa22 f103 	lsr.w	r1, r2, r3
 800ec40:	fa01 f303 	lsl.w	r3, r1, r3
 800ec44:	4293      	cmp	r3, r2
 800ec46:	f040 849d 	bne.w	800f584 <__ieee754_pow+0x9f4>
 800ec4a:	f001 0101 	and.w	r1, r1, #1
 800ec4e:	f1c1 0302 	rsb	r3, r1, #2
 800ec52:	9304      	str	r3, [sp, #16]
 800ec54:	b182      	cbz	r2, 800ec78 <__ieee754_pow+0xe8>
 800ec56:	e05f      	b.n	800ed18 <__ieee754_pow+0x188>
 800ec58:	2a00      	cmp	r2, #0
 800ec5a:	d15b      	bne.n	800ed14 <__ieee754_pow+0x184>
 800ec5c:	f1c3 0314 	rsb	r3, r3, #20
 800ec60:	fa48 f103 	asr.w	r1, r8, r3
 800ec64:	fa01 f303 	lsl.w	r3, r1, r3
 800ec68:	4543      	cmp	r3, r8
 800ec6a:	f040 8488 	bne.w	800f57e <__ieee754_pow+0x9ee>
 800ec6e:	f001 0101 	and.w	r1, r1, #1
 800ec72:	f1c1 0302 	rsb	r3, r1, #2
 800ec76:	9304      	str	r3, [sp, #16]
 800ec78:	4b5c      	ldr	r3, [pc, #368]	; (800edec <__ieee754_pow+0x25c>)
 800ec7a:	4598      	cmp	r8, r3
 800ec7c:	d132      	bne.n	800ece4 <__ieee754_pow+0x154>
 800ec7e:	f1b9 0f00 	cmp.w	r9, #0
 800ec82:	f280 8478 	bge.w	800f576 <__ieee754_pow+0x9e6>
 800ec86:	4959      	ldr	r1, [pc, #356]	; (800edec <__ieee754_pow+0x25c>)
 800ec88:	4632      	mov	r2, r6
 800ec8a:	463b      	mov	r3, r7
 800ec8c:	2000      	movs	r0, #0
 800ec8e:	f7f1 fe05 	bl	800089c <__aeabi_ddiv>
 800ec92:	e79c      	b.n	800ebce <__ieee754_pow+0x3e>
 800ec94:	2300      	movs	r3, #0
 800ec96:	9304      	str	r3, [sp, #16]
 800ec98:	2a00      	cmp	r2, #0
 800ec9a:	d13d      	bne.n	800ed18 <__ieee754_pow+0x188>
 800ec9c:	4b51      	ldr	r3, [pc, #324]	; (800ede4 <__ieee754_pow+0x254>)
 800ec9e:	4598      	cmp	r8, r3
 800eca0:	d1ea      	bne.n	800ec78 <__ieee754_pow+0xe8>
 800eca2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800eca6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ecaa:	ea53 030a 	orrs.w	r3, r3, sl
 800ecae:	f000 845a 	beq.w	800f566 <__ieee754_pow+0x9d6>
 800ecb2:	4b4f      	ldr	r3, [pc, #316]	; (800edf0 <__ieee754_pow+0x260>)
 800ecb4:	429c      	cmp	r4, r3
 800ecb6:	dd08      	ble.n	800ecca <__ieee754_pow+0x13a>
 800ecb8:	f1b9 0f00 	cmp.w	r9, #0
 800ecbc:	f2c0 8457 	blt.w	800f56e <__ieee754_pow+0x9de>
 800ecc0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecc4:	e783      	b.n	800ebce <__ieee754_pow+0x3e>
 800ecc6:	2302      	movs	r3, #2
 800ecc8:	e7e5      	b.n	800ec96 <__ieee754_pow+0x106>
 800ecca:	f1b9 0f00 	cmp.w	r9, #0
 800ecce:	f04f 0000 	mov.w	r0, #0
 800ecd2:	f04f 0100 	mov.w	r1, #0
 800ecd6:	f6bf af7a 	bge.w	800ebce <__ieee754_pow+0x3e>
 800ecda:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ecde:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ece2:	e774      	b.n	800ebce <__ieee754_pow+0x3e>
 800ece4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ece8:	d106      	bne.n	800ecf8 <__ieee754_pow+0x168>
 800ecea:	4632      	mov	r2, r6
 800ecec:	463b      	mov	r3, r7
 800ecee:	4630      	mov	r0, r6
 800ecf0:	4639      	mov	r1, r7
 800ecf2:	f7f1 fca9 	bl	8000648 <__aeabi_dmul>
 800ecf6:	e76a      	b.n	800ebce <__ieee754_pow+0x3e>
 800ecf8:	4b3e      	ldr	r3, [pc, #248]	; (800edf4 <__ieee754_pow+0x264>)
 800ecfa:	4599      	cmp	r9, r3
 800ecfc:	d10c      	bne.n	800ed18 <__ieee754_pow+0x188>
 800ecfe:	2d00      	cmp	r5, #0
 800ed00:	db0a      	blt.n	800ed18 <__ieee754_pow+0x188>
 800ed02:	ec47 6b10 	vmov	d0, r6, r7
 800ed06:	b009      	add	sp, #36	; 0x24
 800ed08:	ecbd 8b06 	vpop	{d8-d10}
 800ed0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed10:	f000 bc6c 	b.w	800f5ec <__ieee754_sqrt>
 800ed14:	2300      	movs	r3, #0
 800ed16:	9304      	str	r3, [sp, #16]
 800ed18:	ec47 6b10 	vmov	d0, r6, r7
 800ed1c:	f000 fd48 	bl	800f7b0 <fabs>
 800ed20:	ec51 0b10 	vmov	r0, r1, d0
 800ed24:	f1ba 0f00 	cmp.w	sl, #0
 800ed28:	d129      	bne.n	800ed7e <__ieee754_pow+0x1ee>
 800ed2a:	b124      	cbz	r4, 800ed36 <__ieee754_pow+0x1a6>
 800ed2c:	4b2f      	ldr	r3, [pc, #188]	; (800edec <__ieee754_pow+0x25c>)
 800ed2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d123      	bne.n	800ed7e <__ieee754_pow+0x1ee>
 800ed36:	f1b9 0f00 	cmp.w	r9, #0
 800ed3a:	da05      	bge.n	800ed48 <__ieee754_pow+0x1b8>
 800ed3c:	4602      	mov	r2, r0
 800ed3e:	460b      	mov	r3, r1
 800ed40:	2000      	movs	r0, #0
 800ed42:	492a      	ldr	r1, [pc, #168]	; (800edec <__ieee754_pow+0x25c>)
 800ed44:	f7f1 fdaa 	bl	800089c <__aeabi_ddiv>
 800ed48:	2d00      	cmp	r5, #0
 800ed4a:	f6bf af40 	bge.w	800ebce <__ieee754_pow+0x3e>
 800ed4e:	9b04      	ldr	r3, [sp, #16]
 800ed50:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ed54:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ed58:	4323      	orrs	r3, r4
 800ed5a:	d108      	bne.n	800ed6e <__ieee754_pow+0x1de>
 800ed5c:	4602      	mov	r2, r0
 800ed5e:	460b      	mov	r3, r1
 800ed60:	4610      	mov	r0, r2
 800ed62:	4619      	mov	r1, r3
 800ed64:	f7f1 fab8 	bl	80002d8 <__aeabi_dsub>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	e78f      	b.n	800ec8e <__ieee754_pow+0xfe>
 800ed6e:	9b04      	ldr	r3, [sp, #16]
 800ed70:	2b01      	cmp	r3, #1
 800ed72:	f47f af2c 	bne.w	800ebce <__ieee754_pow+0x3e>
 800ed76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed7a:	4619      	mov	r1, r3
 800ed7c:	e727      	b.n	800ebce <__ieee754_pow+0x3e>
 800ed7e:	0feb      	lsrs	r3, r5, #31
 800ed80:	3b01      	subs	r3, #1
 800ed82:	9306      	str	r3, [sp, #24]
 800ed84:	9a06      	ldr	r2, [sp, #24]
 800ed86:	9b04      	ldr	r3, [sp, #16]
 800ed88:	4313      	orrs	r3, r2
 800ed8a:	d102      	bne.n	800ed92 <__ieee754_pow+0x202>
 800ed8c:	4632      	mov	r2, r6
 800ed8e:	463b      	mov	r3, r7
 800ed90:	e7e6      	b.n	800ed60 <__ieee754_pow+0x1d0>
 800ed92:	4b19      	ldr	r3, [pc, #100]	; (800edf8 <__ieee754_pow+0x268>)
 800ed94:	4598      	cmp	r8, r3
 800ed96:	f340 80fb 	ble.w	800ef90 <__ieee754_pow+0x400>
 800ed9a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ed9e:	4598      	cmp	r8, r3
 800eda0:	4b13      	ldr	r3, [pc, #76]	; (800edf0 <__ieee754_pow+0x260>)
 800eda2:	dd0c      	ble.n	800edbe <__ieee754_pow+0x22e>
 800eda4:	429c      	cmp	r4, r3
 800eda6:	dc0f      	bgt.n	800edc8 <__ieee754_pow+0x238>
 800eda8:	f1b9 0f00 	cmp.w	r9, #0
 800edac:	da0f      	bge.n	800edce <__ieee754_pow+0x23e>
 800edae:	2000      	movs	r0, #0
 800edb0:	b009      	add	sp, #36	; 0x24
 800edb2:	ecbd 8b06 	vpop	{d8-d10}
 800edb6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edba:	f000 bcf0 	b.w	800f79e <__math_oflow>
 800edbe:	429c      	cmp	r4, r3
 800edc0:	dbf2      	blt.n	800eda8 <__ieee754_pow+0x218>
 800edc2:	4b0a      	ldr	r3, [pc, #40]	; (800edec <__ieee754_pow+0x25c>)
 800edc4:	429c      	cmp	r4, r3
 800edc6:	dd19      	ble.n	800edfc <__ieee754_pow+0x26c>
 800edc8:	f1b9 0f00 	cmp.w	r9, #0
 800edcc:	dcef      	bgt.n	800edae <__ieee754_pow+0x21e>
 800edce:	2000      	movs	r0, #0
 800edd0:	b009      	add	sp, #36	; 0x24
 800edd2:	ecbd 8b06 	vpop	{d8-d10}
 800edd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edda:	f000 bcd7 	b.w	800f78c <__math_uflow>
 800edde:	bf00      	nop
 800ede0:	fff00000 	.word	0xfff00000
 800ede4:	7ff00000 	.word	0x7ff00000
 800ede8:	433fffff 	.word	0x433fffff
 800edec:	3ff00000 	.word	0x3ff00000
 800edf0:	3fefffff 	.word	0x3fefffff
 800edf4:	3fe00000 	.word	0x3fe00000
 800edf8:	41e00000 	.word	0x41e00000
 800edfc:	4b60      	ldr	r3, [pc, #384]	; (800ef80 <__ieee754_pow+0x3f0>)
 800edfe:	2200      	movs	r2, #0
 800ee00:	f7f1 fa6a 	bl	80002d8 <__aeabi_dsub>
 800ee04:	a354      	add	r3, pc, #336	; (adr r3, 800ef58 <__ieee754_pow+0x3c8>)
 800ee06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee0a:	4604      	mov	r4, r0
 800ee0c:	460d      	mov	r5, r1
 800ee0e:	f7f1 fc1b 	bl	8000648 <__aeabi_dmul>
 800ee12:	a353      	add	r3, pc, #332	; (adr r3, 800ef60 <__ieee754_pow+0x3d0>)
 800ee14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee18:	4606      	mov	r6, r0
 800ee1a:	460f      	mov	r7, r1
 800ee1c:	4620      	mov	r0, r4
 800ee1e:	4629      	mov	r1, r5
 800ee20:	f7f1 fc12 	bl	8000648 <__aeabi_dmul>
 800ee24:	4b57      	ldr	r3, [pc, #348]	; (800ef84 <__ieee754_pow+0x3f4>)
 800ee26:	4682      	mov	sl, r0
 800ee28:	468b      	mov	fp, r1
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	4620      	mov	r0, r4
 800ee2e:	4629      	mov	r1, r5
 800ee30:	f7f1 fc0a 	bl	8000648 <__aeabi_dmul>
 800ee34:	4602      	mov	r2, r0
 800ee36:	460b      	mov	r3, r1
 800ee38:	a14b      	add	r1, pc, #300	; (adr r1, 800ef68 <__ieee754_pow+0x3d8>)
 800ee3a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ee3e:	f7f1 fa4b 	bl	80002d8 <__aeabi_dsub>
 800ee42:	4622      	mov	r2, r4
 800ee44:	462b      	mov	r3, r5
 800ee46:	f7f1 fbff 	bl	8000648 <__aeabi_dmul>
 800ee4a:	4602      	mov	r2, r0
 800ee4c:	460b      	mov	r3, r1
 800ee4e:	2000      	movs	r0, #0
 800ee50:	494d      	ldr	r1, [pc, #308]	; (800ef88 <__ieee754_pow+0x3f8>)
 800ee52:	f7f1 fa41 	bl	80002d8 <__aeabi_dsub>
 800ee56:	4622      	mov	r2, r4
 800ee58:	4680      	mov	r8, r0
 800ee5a:	4689      	mov	r9, r1
 800ee5c:	462b      	mov	r3, r5
 800ee5e:	4620      	mov	r0, r4
 800ee60:	4629      	mov	r1, r5
 800ee62:	f7f1 fbf1 	bl	8000648 <__aeabi_dmul>
 800ee66:	4602      	mov	r2, r0
 800ee68:	460b      	mov	r3, r1
 800ee6a:	4640      	mov	r0, r8
 800ee6c:	4649      	mov	r1, r9
 800ee6e:	f7f1 fbeb 	bl	8000648 <__aeabi_dmul>
 800ee72:	a33f      	add	r3, pc, #252	; (adr r3, 800ef70 <__ieee754_pow+0x3e0>)
 800ee74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee78:	f7f1 fbe6 	bl	8000648 <__aeabi_dmul>
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	460b      	mov	r3, r1
 800ee80:	4650      	mov	r0, sl
 800ee82:	4659      	mov	r1, fp
 800ee84:	f7f1 fa28 	bl	80002d8 <__aeabi_dsub>
 800ee88:	4602      	mov	r2, r0
 800ee8a:	460b      	mov	r3, r1
 800ee8c:	4680      	mov	r8, r0
 800ee8e:	4689      	mov	r9, r1
 800ee90:	4630      	mov	r0, r6
 800ee92:	4639      	mov	r1, r7
 800ee94:	f7f1 fa22 	bl	80002dc <__adddf3>
 800ee98:	2000      	movs	r0, #0
 800ee9a:	4632      	mov	r2, r6
 800ee9c:	463b      	mov	r3, r7
 800ee9e:	4604      	mov	r4, r0
 800eea0:	460d      	mov	r5, r1
 800eea2:	f7f1 fa19 	bl	80002d8 <__aeabi_dsub>
 800eea6:	4602      	mov	r2, r0
 800eea8:	460b      	mov	r3, r1
 800eeaa:	4640      	mov	r0, r8
 800eeac:	4649      	mov	r1, r9
 800eeae:	f7f1 fa13 	bl	80002d8 <__aeabi_dsub>
 800eeb2:	9b04      	ldr	r3, [sp, #16]
 800eeb4:	9a06      	ldr	r2, [sp, #24]
 800eeb6:	3b01      	subs	r3, #1
 800eeb8:	4313      	orrs	r3, r2
 800eeba:	4682      	mov	sl, r0
 800eebc:	468b      	mov	fp, r1
 800eebe:	f040 81e7 	bne.w	800f290 <__ieee754_pow+0x700>
 800eec2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ef78 <__ieee754_pow+0x3e8>
 800eec6:	eeb0 8a47 	vmov.f32	s16, s14
 800eeca:	eef0 8a67 	vmov.f32	s17, s15
 800eece:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eed2:	2600      	movs	r6, #0
 800eed4:	4632      	mov	r2, r6
 800eed6:	463b      	mov	r3, r7
 800eed8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eedc:	f7f1 f9fc 	bl	80002d8 <__aeabi_dsub>
 800eee0:	4622      	mov	r2, r4
 800eee2:	462b      	mov	r3, r5
 800eee4:	f7f1 fbb0 	bl	8000648 <__aeabi_dmul>
 800eee8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eeec:	4680      	mov	r8, r0
 800eeee:	4689      	mov	r9, r1
 800eef0:	4650      	mov	r0, sl
 800eef2:	4659      	mov	r1, fp
 800eef4:	f7f1 fba8 	bl	8000648 <__aeabi_dmul>
 800eef8:	4602      	mov	r2, r0
 800eefa:	460b      	mov	r3, r1
 800eefc:	4640      	mov	r0, r8
 800eefe:	4649      	mov	r1, r9
 800ef00:	f7f1 f9ec 	bl	80002dc <__adddf3>
 800ef04:	4632      	mov	r2, r6
 800ef06:	463b      	mov	r3, r7
 800ef08:	4680      	mov	r8, r0
 800ef0a:	4689      	mov	r9, r1
 800ef0c:	4620      	mov	r0, r4
 800ef0e:	4629      	mov	r1, r5
 800ef10:	f7f1 fb9a 	bl	8000648 <__aeabi_dmul>
 800ef14:	460b      	mov	r3, r1
 800ef16:	4604      	mov	r4, r0
 800ef18:	460d      	mov	r5, r1
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	4649      	mov	r1, r9
 800ef1e:	4640      	mov	r0, r8
 800ef20:	f7f1 f9dc 	bl	80002dc <__adddf3>
 800ef24:	4b19      	ldr	r3, [pc, #100]	; (800ef8c <__ieee754_pow+0x3fc>)
 800ef26:	4299      	cmp	r1, r3
 800ef28:	ec45 4b19 	vmov	d9, r4, r5
 800ef2c:	4606      	mov	r6, r0
 800ef2e:	460f      	mov	r7, r1
 800ef30:	468b      	mov	fp, r1
 800ef32:	f340 82f1 	ble.w	800f518 <__ieee754_pow+0x988>
 800ef36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ef3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ef3e:	4303      	orrs	r3, r0
 800ef40:	f000 81e4 	beq.w	800f30c <__ieee754_pow+0x77c>
 800ef44:	ec51 0b18 	vmov	r0, r1, d8
 800ef48:	2200      	movs	r2, #0
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	f7f1 fdee 	bl	8000b2c <__aeabi_dcmplt>
 800ef50:	3800      	subs	r0, #0
 800ef52:	bf18      	it	ne
 800ef54:	2001      	movne	r0, #1
 800ef56:	e72b      	b.n	800edb0 <__ieee754_pow+0x220>
 800ef58:	60000000 	.word	0x60000000
 800ef5c:	3ff71547 	.word	0x3ff71547
 800ef60:	f85ddf44 	.word	0xf85ddf44
 800ef64:	3e54ae0b 	.word	0x3e54ae0b
 800ef68:	55555555 	.word	0x55555555
 800ef6c:	3fd55555 	.word	0x3fd55555
 800ef70:	652b82fe 	.word	0x652b82fe
 800ef74:	3ff71547 	.word	0x3ff71547
 800ef78:	00000000 	.word	0x00000000
 800ef7c:	bff00000 	.word	0xbff00000
 800ef80:	3ff00000 	.word	0x3ff00000
 800ef84:	3fd00000 	.word	0x3fd00000
 800ef88:	3fe00000 	.word	0x3fe00000
 800ef8c:	408fffff 	.word	0x408fffff
 800ef90:	4bd5      	ldr	r3, [pc, #852]	; (800f2e8 <__ieee754_pow+0x758>)
 800ef92:	402b      	ands	r3, r5
 800ef94:	2200      	movs	r2, #0
 800ef96:	b92b      	cbnz	r3, 800efa4 <__ieee754_pow+0x414>
 800ef98:	4bd4      	ldr	r3, [pc, #848]	; (800f2ec <__ieee754_pow+0x75c>)
 800ef9a:	f7f1 fb55 	bl	8000648 <__aeabi_dmul>
 800ef9e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800efa2:	460c      	mov	r4, r1
 800efa4:	1523      	asrs	r3, r4, #20
 800efa6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800efaa:	4413      	add	r3, r2
 800efac:	9305      	str	r3, [sp, #20]
 800efae:	4bd0      	ldr	r3, [pc, #832]	; (800f2f0 <__ieee754_pow+0x760>)
 800efb0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800efb4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800efb8:	429c      	cmp	r4, r3
 800efba:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800efbe:	dd08      	ble.n	800efd2 <__ieee754_pow+0x442>
 800efc0:	4bcc      	ldr	r3, [pc, #816]	; (800f2f4 <__ieee754_pow+0x764>)
 800efc2:	429c      	cmp	r4, r3
 800efc4:	f340 8162 	ble.w	800f28c <__ieee754_pow+0x6fc>
 800efc8:	9b05      	ldr	r3, [sp, #20]
 800efca:	3301      	adds	r3, #1
 800efcc:	9305      	str	r3, [sp, #20]
 800efce:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800efd2:	2400      	movs	r4, #0
 800efd4:	00e3      	lsls	r3, r4, #3
 800efd6:	9307      	str	r3, [sp, #28]
 800efd8:	4bc7      	ldr	r3, [pc, #796]	; (800f2f8 <__ieee754_pow+0x768>)
 800efda:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800efde:	ed93 7b00 	vldr	d7, [r3]
 800efe2:	4629      	mov	r1, r5
 800efe4:	ec53 2b17 	vmov	r2, r3, d7
 800efe8:	eeb0 9a47 	vmov.f32	s18, s14
 800efec:	eef0 9a67 	vmov.f32	s19, s15
 800eff0:	4682      	mov	sl, r0
 800eff2:	f7f1 f971 	bl	80002d8 <__aeabi_dsub>
 800eff6:	4652      	mov	r2, sl
 800eff8:	4606      	mov	r6, r0
 800effa:	460f      	mov	r7, r1
 800effc:	462b      	mov	r3, r5
 800effe:	ec51 0b19 	vmov	r0, r1, d9
 800f002:	f7f1 f96b 	bl	80002dc <__adddf3>
 800f006:	4602      	mov	r2, r0
 800f008:	460b      	mov	r3, r1
 800f00a:	2000      	movs	r0, #0
 800f00c:	49bb      	ldr	r1, [pc, #748]	; (800f2fc <__ieee754_pow+0x76c>)
 800f00e:	f7f1 fc45 	bl	800089c <__aeabi_ddiv>
 800f012:	ec41 0b1a 	vmov	d10, r0, r1
 800f016:	4602      	mov	r2, r0
 800f018:	460b      	mov	r3, r1
 800f01a:	4630      	mov	r0, r6
 800f01c:	4639      	mov	r1, r7
 800f01e:	f7f1 fb13 	bl	8000648 <__aeabi_dmul>
 800f022:	2300      	movs	r3, #0
 800f024:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f028:	9302      	str	r3, [sp, #8]
 800f02a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f02e:	46ab      	mov	fp, r5
 800f030:	106d      	asrs	r5, r5, #1
 800f032:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800f036:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800f03a:	ec41 0b18 	vmov	d8, r0, r1
 800f03e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800f042:	2200      	movs	r2, #0
 800f044:	4640      	mov	r0, r8
 800f046:	4649      	mov	r1, r9
 800f048:	4614      	mov	r4, r2
 800f04a:	461d      	mov	r5, r3
 800f04c:	f7f1 fafc 	bl	8000648 <__aeabi_dmul>
 800f050:	4602      	mov	r2, r0
 800f052:	460b      	mov	r3, r1
 800f054:	4630      	mov	r0, r6
 800f056:	4639      	mov	r1, r7
 800f058:	f7f1 f93e 	bl	80002d8 <__aeabi_dsub>
 800f05c:	ec53 2b19 	vmov	r2, r3, d9
 800f060:	4606      	mov	r6, r0
 800f062:	460f      	mov	r7, r1
 800f064:	4620      	mov	r0, r4
 800f066:	4629      	mov	r1, r5
 800f068:	f7f1 f936 	bl	80002d8 <__aeabi_dsub>
 800f06c:	4602      	mov	r2, r0
 800f06e:	460b      	mov	r3, r1
 800f070:	4650      	mov	r0, sl
 800f072:	4659      	mov	r1, fp
 800f074:	f7f1 f930 	bl	80002d8 <__aeabi_dsub>
 800f078:	4642      	mov	r2, r8
 800f07a:	464b      	mov	r3, r9
 800f07c:	f7f1 fae4 	bl	8000648 <__aeabi_dmul>
 800f080:	4602      	mov	r2, r0
 800f082:	460b      	mov	r3, r1
 800f084:	4630      	mov	r0, r6
 800f086:	4639      	mov	r1, r7
 800f088:	f7f1 f926 	bl	80002d8 <__aeabi_dsub>
 800f08c:	ec53 2b1a 	vmov	r2, r3, d10
 800f090:	f7f1 fada 	bl	8000648 <__aeabi_dmul>
 800f094:	ec53 2b18 	vmov	r2, r3, d8
 800f098:	ec41 0b19 	vmov	d9, r0, r1
 800f09c:	ec51 0b18 	vmov	r0, r1, d8
 800f0a0:	f7f1 fad2 	bl	8000648 <__aeabi_dmul>
 800f0a4:	a37c      	add	r3, pc, #496	; (adr r3, 800f298 <__ieee754_pow+0x708>)
 800f0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0aa:	4604      	mov	r4, r0
 800f0ac:	460d      	mov	r5, r1
 800f0ae:	f7f1 facb 	bl	8000648 <__aeabi_dmul>
 800f0b2:	a37b      	add	r3, pc, #492	; (adr r3, 800f2a0 <__ieee754_pow+0x710>)
 800f0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b8:	f7f1 f910 	bl	80002dc <__adddf3>
 800f0bc:	4622      	mov	r2, r4
 800f0be:	462b      	mov	r3, r5
 800f0c0:	f7f1 fac2 	bl	8000648 <__aeabi_dmul>
 800f0c4:	a378      	add	r3, pc, #480	; (adr r3, 800f2a8 <__ieee754_pow+0x718>)
 800f0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ca:	f7f1 f907 	bl	80002dc <__adddf3>
 800f0ce:	4622      	mov	r2, r4
 800f0d0:	462b      	mov	r3, r5
 800f0d2:	f7f1 fab9 	bl	8000648 <__aeabi_dmul>
 800f0d6:	a376      	add	r3, pc, #472	; (adr r3, 800f2b0 <__ieee754_pow+0x720>)
 800f0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0dc:	f7f1 f8fe 	bl	80002dc <__adddf3>
 800f0e0:	4622      	mov	r2, r4
 800f0e2:	462b      	mov	r3, r5
 800f0e4:	f7f1 fab0 	bl	8000648 <__aeabi_dmul>
 800f0e8:	a373      	add	r3, pc, #460	; (adr r3, 800f2b8 <__ieee754_pow+0x728>)
 800f0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ee:	f7f1 f8f5 	bl	80002dc <__adddf3>
 800f0f2:	4622      	mov	r2, r4
 800f0f4:	462b      	mov	r3, r5
 800f0f6:	f7f1 faa7 	bl	8000648 <__aeabi_dmul>
 800f0fa:	a371      	add	r3, pc, #452	; (adr r3, 800f2c0 <__ieee754_pow+0x730>)
 800f0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f100:	f7f1 f8ec 	bl	80002dc <__adddf3>
 800f104:	4622      	mov	r2, r4
 800f106:	4606      	mov	r6, r0
 800f108:	460f      	mov	r7, r1
 800f10a:	462b      	mov	r3, r5
 800f10c:	4620      	mov	r0, r4
 800f10e:	4629      	mov	r1, r5
 800f110:	f7f1 fa9a 	bl	8000648 <__aeabi_dmul>
 800f114:	4602      	mov	r2, r0
 800f116:	460b      	mov	r3, r1
 800f118:	4630      	mov	r0, r6
 800f11a:	4639      	mov	r1, r7
 800f11c:	f7f1 fa94 	bl	8000648 <__aeabi_dmul>
 800f120:	4642      	mov	r2, r8
 800f122:	4604      	mov	r4, r0
 800f124:	460d      	mov	r5, r1
 800f126:	464b      	mov	r3, r9
 800f128:	ec51 0b18 	vmov	r0, r1, d8
 800f12c:	f7f1 f8d6 	bl	80002dc <__adddf3>
 800f130:	ec53 2b19 	vmov	r2, r3, d9
 800f134:	f7f1 fa88 	bl	8000648 <__aeabi_dmul>
 800f138:	4622      	mov	r2, r4
 800f13a:	462b      	mov	r3, r5
 800f13c:	f7f1 f8ce 	bl	80002dc <__adddf3>
 800f140:	4642      	mov	r2, r8
 800f142:	4682      	mov	sl, r0
 800f144:	468b      	mov	fp, r1
 800f146:	464b      	mov	r3, r9
 800f148:	4640      	mov	r0, r8
 800f14a:	4649      	mov	r1, r9
 800f14c:	f7f1 fa7c 	bl	8000648 <__aeabi_dmul>
 800f150:	4b6b      	ldr	r3, [pc, #428]	; (800f300 <__ieee754_pow+0x770>)
 800f152:	2200      	movs	r2, #0
 800f154:	4606      	mov	r6, r0
 800f156:	460f      	mov	r7, r1
 800f158:	f7f1 f8c0 	bl	80002dc <__adddf3>
 800f15c:	4652      	mov	r2, sl
 800f15e:	465b      	mov	r3, fp
 800f160:	f7f1 f8bc 	bl	80002dc <__adddf3>
 800f164:	2000      	movs	r0, #0
 800f166:	4604      	mov	r4, r0
 800f168:	460d      	mov	r5, r1
 800f16a:	4602      	mov	r2, r0
 800f16c:	460b      	mov	r3, r1
 800f16e:	4640      	mov	r0, r8
 800f170:	4649      	mov	r1, r9
 800f172:	f7f1 fa69 	bl	8000648 <__aeabi_dmul>
 800f176:	4b62      	ldr	r3, [pc, #392]	; (800f300 <__ieee754_pow+0x770>)
 800f178:	4680      	mov	r8, r0
 800f17a:	4689      	mov	r9, r1
 800f17c:	2200      	movs	r2, #0
 800f17e:	4620      	mov	r0, r4
 800f180:	4629      	mov	r1, r5
 800f182:	f7f1 f8a9 	bl	80002d8 <__aeabi_dsub>
 800f186:	4632      	mov	r2, r6
 800f188:	463b      	mov	r3, r7
 800f18a:	f7f1 f8a5 	bl	80002d8 <__aeabi_dsub>
 800f18e:	4602      	mov	r2, r0
 800f190:	460b      	mov	r3, r1
 800f192:	4650      	mov	r0, sl
 800f194:	4659      	mov	r1, fp
 800f196:	f7f1 f89f 	bl	80002d8 <__aeabi_dsub>
 800f19a:	ec53 2b18 	vmov	r2, r3, d8
 800f19e:	f7f1 fa53 	bl	8000648 <__aeabi_dmul>
 800f1a2:	4622      	mov	r2, r4
 800f1a4:	4606      	mov	r6, r0
 800f1a6:	460f      	mov	r7, r1
 800f1a8:	462b      	mov	r3, r5
 800f1aa:	ec51 0b19 	vmov	r0, r1, d9
 800f1ae:	f7f1 fa4b 	bl	8000648 <__aeabi_dmul>
 800f1b2:	4602      	mov	r2, r0
 800f1b4:	460b      	mov	r3, r1
 800f1b6:	4630      	mov	r0, r6
 800f1b8:	4639      	mov	r1, r7
 800f1ba:	f7f1 f88f 	bl	80002dc <__adddf3>
 800f1be:	4606      	mov	r6, r0
 800f1c0:	460f      	mov	r7, r1
 800f1c2:	4602      	mov	r2, r0
 800f1c4:	460b      	mov	r3, r1
 800f1c6:	4640      	mov	r0, r8
 800f1c8:	4649      	mov	r1, r9
 800f1ca:	f7f1 f887 	bl	80002dc <__adddf3>
 800f1ce:	a33e      	add	r3, pc, #248	; (adr r3, 800f2c8 <__ieee754_pow+0x738>)
 800f1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d4:	2000      	movs	r0, #0
 800f1d6:	4604      	mov	r4, r0
 800f1d8:	460d      	mov	r5, r1
 800f1da:	f7f1 fa35 	bl	8000648 <__aeabi_dmul>
 800f1de:	4642      	mov	r2, r8
 800f1e0:	ec41 0b18 	vmov	d8, r0, r1
 800f1e4:	464b      	mov	r3, r9
 800f1e6:	4620      	mov	r0, r4
 800f1e8:	4629      	mov	r1, r5
 800f1ea:	f7f1 f875 	bl	80002d8 <__aeabi_dsub>
 800f1ee:	4602      	mov	r2, r0
 800f1f0:	460b      	mov	r3, r1
 800f1f2:	4630      	mov	r0, r6
 800f1f4:	4639      	mov	r1, r7
 800f1f6:	f7f1 f86f 	bl	80002d8 <__aeabi_dsub>
 800f1fa:	a335      	add	r3, pc, #212	; (adr r3, 800f2d0 <__ieee754_pow+0x740>)
 800f1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f200:	f7f1 fa22 	bl	8000648 <__aeabi_dmul>
 800f204:	a334      	add	r3, pc, #208	; (adr r3, 800f2d8 <__ieee754_pow+0x748>)
 800f206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20a:	4606      	mov	r6, r0
 800f20c:	460f      	mov	r7, r1
 800f20e:	4620      	mov	r0, r4
 800f210:	4629      	mov	r1, r5
 800f212:	f7f1 fa19 	bl	8000648 <__aeabi_dmul>
 800f216:	4602      	mov	r2, r0
 800f218:	460b      	mov	r3, r1
 800f21a:	4630      	mov	r0, r6
 800f21c:	4639      	mov	r1, r7
 800f21e:	f7f1 f85d 	bl	80002dc <__adddf3>
 800f222:	9a07      	ldr	r2, [sp, #28]
 800f224:	4b37      	ldr	r3, [pc, #220]	; (800f304 <__ieee754_pow+0x774>)
 800f226:	4413      	add	r3, r2
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	f7f1 f856 	bl	80002dc <__adddf3>
 800f230:	4682      	mov	sl, r0
 800f232:	9805      	ldr	r0, [sp, #20]
 800f234:	468b      	mov	fp, r1
 800f236:	f7f1 f99d 	bl	8000574 <__aeabi_i2d>
 800f23a:	9a07      	ldr	r2, [sp, #28]
 800f23c:	4b32      	ldr	r3, [pc, #200]	; (800f308 <__ieee754_pow+0x778>)
 800f23e:	4413      	add	r3, r2
 800f240:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f244:	4606      	mov	r6, r0
 800f246:	460f      	mov	r7, r1
 800f248:	4652      	mov	r2, sl
 800f24a:	465b      	mov	r3, fp
 800f24c:	ec51 0b18 	vmov	r0, r1, d8
 800f250:	f7f1 f844 	bl	80002dc <__adddf3>
 800f254:	4642      	mov	r2, r8
 800f256:	464b      	mov	r3, r9
 800f258:	f7f1 f840 	bl	80002dc <__adddf3>
 800f25c:	4632      	mov	r2, r6
 800f25e:	463b      	mov	r3, r7
 800f260:	f7f1 f83c 	bl	80002dc <__adddf3>
 800f264:	2000      	movs	r0, #0
 800f266:	4632      	mov	r2, r6
 800f268:	463b      	mov	r3, r7
 800f26a:	4604      	mov	r4, r0
 800f26c:	460d      	mov	r5, r1
 800f26e:	f7f1 f833 	bl	80002d8 <__aeabi_dsub>
 800f272:	4642      	mov	r2, r8
 800f274:	464b      	mov	r3, r9
 800f276:	f7f1 f82f 	bl	80002d8 <__aeabi_dsub>
 800f27a:	ec53 2b18 	vmov	r2, r3, d8
 800f27e:	f7f1 f82b 	bl	80002d8 <__aeabi_dsub>
 800f282:	4602      	mov	r2, r0
 800f284:	460b      	mov	r3, r1
 800f286:	4650      	mov	r0, sl
 800f288:	4659      	mov	r1, fp
 800f28a:	e610      	b.n	800eeae <__ieee754_pow+0x31e>
 800f28c:	2401      	movs	r4, #1
 800f28e:	e6a1      	b.n	800efd4 <__ieee754_pow+0x444>
 800f290:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f2e0 <__ieee754_pow+0x750>
 800f294:	e617      	b.n	800eec6 <__ieee754_pow+0x336>
 800f296:	bf00      	nop
 800f298:	4a454eef 	.word	0x4a454eef
 800f29c:	3fca7e28 	.word	0x3fca7e28
 800f2a0:	93c9db65 	.word	0x93c9db65
 800f2a4:	3fcd864a 	.word	0x3fcd864a
 800f2a8:	a91d4101 	.word	0xa91d4101
 800f2ac:	3fd17460 	.word	0x3fd17460
 800f2b0:	518f264d 	.word	0x518f264d
 800f2b4:	3fd55555 	.word	0x3fd55555
 800f2b8:	db6fabff 	.word	0xdb6fabff
 800f2bc:	3fdb6db6 	.word	0x3fdb6db6
 800f2c0:	33333303 	.word	0x33333303
 800f2c4:	3fe33333 	.word	0x3fe33333
 800f2c8:	e0000000 	.word	0xe0000000
 800f2cc:	3feec709 	.word	0x3feec709
 800f2d0:	dc3a03fd 	.word	0xdc3a03fd
 800f2d4:	3feec709 	.word	0x3feec709
 800f2d8:	145b01f5 	.word	0x145b01f5
 800f2dc:	be3e2fe0 	.word	0xbe3e2fe0
 800f2e0:	00000000 	.word	0x00000000
 800f2e4:	3ff00000 	.word	0x3ff00000
 800f2e8:	7ff00000 	.word	0x7ff00000
 800f2ec:	43400000 	.word	0x43400000
 800f2f0:	0003988e 	.word	0x0003988e
 800f2f4:	000bb679 	.word	0x000bb679
 800f2f8:	08012f38 	.word	0x08012f38
 800f2fc:	3ff00000 	.word	0x3ff00000
 800f300:	40080000 	.word	0x40080000
 800f304:	08012f58 	.word	0x08012f58
 800f308:	08012f48 	.word	0x08012f48
 800f30c:	a3b5      	add	r3, pc, #724	; (adr r3, 800f5e4 <__ieee754_pow+0xa54>)
 800f30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f312:	4640      	mov	r0, r8
 800f314:	4649      	mov	r1, r9
 800f316:	f7f0 ffe1 	bl	80002dc <__adddf3>
 800f31a:	4622      	mov	r2, r4
 800f31c:	ec41 0b1a 	vmov	d10, r0, r1
 800f320:	462b      	mov	r3, r5
 800f322:	4630      	mov	r0, r6
 800f324:	4639      	mov	r1, r7
 800f326:	f7f0 ffd7 	bl	80002d8 <__aeabi_dsub>
 800f32a:	4602      	mov	r2, r0
 800f32c:	460b      	mov	r3, r1
 800f32e:	ec51 0b1a 	vmov	r0, r1, d10
 800f332:	f7f1 fc19 	bl	8000b68 <__aeabi_dcmpgt>
 800f336:	2800      	cmp	r0, #0
 800f338:	f47f ae04 	bne.w	800ef44 <__ieee754_pow+0x3b4>
 800f33c:	4aa4      	ldr	r2, [pc, #656]	; (800f5d0 <__ieee754_pow+0xa40>)
 800f33e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f342:	4293      	cmp	r3, r2
 800f344:	f340 8108 	ble.w	800f558 <__ieee754_pow+0x9c8>
 800f348:	151b      	asrs	r3, r3, #20
 800f34a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f34e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f352:	fa4a f303 	asr.w	r3, sl, r3
 800f356:	445b      	add	r3, fp
 800f358:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f35c:	4e9d      	ldr	r6, [pc, #628]	; (800f5d4 <__ieee754_pow+0xa44>)
 800f35e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f362:	4116      	asrs	r6, r2
 800f364:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f368:	2000      	movs	r0, #0
 800f36a:	ea23 0106 	bic.w	r1, r3, r6
 800f36e:	f1c2 0214 	rsb	r2, r2, #20
 800f372:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f376:	fa4a fa02 	asr.w	sl, sl, r2
 800f37a:	f1bb 0f00 	cmp.w	fp, #0
 800f37e:	4602      	mov	r2, r0
 800f380:	460b      	mov	r3, r1
 800f382:	4620      	mov	r0, r4
 800f384:	4629      	mov	r1, r5
 800f386:	bfb8      	it	lt
 800f388:	f1ca 0a00 	rsblt	sl, sl, #0
 800f38c:	f7f0 ffa4 	bl	80002d8 <__aeabi_dsub>
 800f390:	ec41 0b19 	vmov	d9, r0, r1
 800f394:	4642      	mov	r2, r8
 800f396:	464b      	mov	r3, r9
 800f398:	ec51 0b19 	vmov	r0, r1, d9
 800f39c:	f7f0 ff9e 	bl	80002dc <__adddf3>
 800f3a0:	a37b      	add	r3, pc, #492	; (adr r3, 800f590 <__ieee754_pow+0xa00>)
 800f3a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a6:	2000      	movs	r0, #0
 800f3a8:	4604      	mov	r4, r0
 800f3aa:	460d      	mov	r5, r1
 800f3ac:	f7f1 f94c 	bl	8000648 <__aeabi_dmul>
 800f3b0:	ec53 2b19 	vmov	r2, r3, d9
 800f3b4:	4606      	mov	r6, r0
 800f3b6:	460f      	mov	r7, r1
 800f3b8:	4620      	mov	r0, r4
 800f3ba:	4629      	mov	r1, r5
 800f3bc:	f7f0 ff8c 	bl	80002d8 <__aeabi_dsub>
 800f3c0:	4602      	mov	r2, r0
 800f3c2:	460b      	mov	r3, r1
 800f3c4:	4640      	mov	r0, r8
 800f3c6:	4649      	mov	r1, r9
 800f3c8:	f7f0 ff86 	bl	80002d8 <__aeabi_dsub>
 800f3cc:	a372      	add	r3, pc, #456	; (adr r3, 800f598 <__ieee754_pow+0xa08>)
 800f3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3d2:	f7f1 f939 	bl	8000648 <__aeabi_dmul>
 800f3d6:	a372      	add	r3, pc, #456	; (adr r3, 800f5a0 <__ieee754_pow+0xa10>)
 800f3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3dc:	4680      	mov	r8, r0
 800f3de:	4689      	mov	r9, r1
 800f3e0:	4620      	mov	r0, r4
 800f3e2:	4629      	mov	r1, r5
 800f3e4:	f7f1 f930 	bl	8000648 <__aeabi_dmul>
 800f3e8:	4602      	mov	r2, r0
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	4640      	mov	r0, r8
 800f3ee:	4649      	mov	r1, r9
 800f3f0:	f7f0 ff74 	bl	80002dc <__adddf3>
 800f3f4:	4604      	mov	r4, r0
 800f3f6:	460d      	mov	r5, r1
 800f3f8:	4602      	mov	r2, r0
 800f3fa:	460b      	mov	r3, r1
 800f3fc:	4630      	mov	r0, r6
 800f3fe:	4639      	mov	r1, r7
 800f400:	f7f0 ff6c 	bl	80002dc <__adddf3>
 800f404:	4632      	mov	r2, r6
 800f406:	463b      	mov	r3, r7
 800f408:	4680      	mov	r8, r0
 800f40a:	4689      	mov	r9, r1
 800f40c:	f7f0 ff64 	bl	80002d8 <__aeabi_dsub>
 800f410:	4602      	mov	r2, r0
 800f412:	460b      	mov	r3, r1
 800f414:	4620      	mov	r0, r4
 800f416:	4629      	mov	r1, r5
 800f418:	f7f0 ff5e 	bl	80002d8 <__aeabi_dsub>
 800f41c:	4642      	mov	r2, r8
 800f41e:	4606      	mov	r6, r0
 800f420:	460f      	mov	r7, r1
 800f422:	464b      	mov	r3, r9
 800f424:	4640      	mov	r0, r8
 800f426:	4649      	mov	r1, r9
 800f428:	f7f1 f90e 	bl	8000648 <__aeabi_dmul>
 800f42c:	a35e      	add	r3, pc, #376	; (adr r3, 800f5a8 <__ieee754_pow+0xa18>)
 800f42e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f432:	4604      	mov	r4, r0
 800f434:	460d      	mov	r5, r1
 800f436:	f7f1 f907 	bl	8000648 <__aeabi_dmul>
 800f43a:	a35d      	add	r3, pc, #372	; (adr r3, 800f5b0 <__ieee754_pow+0xa20>)
 800f43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f440:	f7f0 ff4a 	bl	80002d8 <__aeabi_dsub>
 800f444:	4622      	mov	r2, r4
 800f446:	462b      	mov	r3, r5
 800f448:	f7f1 f8fe 	bl	8000648 <__aeabi_dmul>
 800f44c:	a35a      	add	r3, pc, #360	; (adr r3, 800f5b8 <__ieee754_pow+0xa28>)
 800f44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f452:	f7f0 ff43 	bl	80002dc <__adddf3>
 800f456:	4622      	mov	r2, r4
 800f458:	462b      	mov	r3, r5
 800f45a:	f7f1 f8f5 	bl	8000648 <__aeabi_dmul>
 800f45e:	a358      	add	r3, pc, #352	; (adr r3, 800f5c0 <__ieee754_pow+0xa30>)
 800f460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f464:	f7f0 ff38 	bl	80002d8 <__aeabi_dsub>
 800f468:	4622      	mov	r2, r4
 800f46a:	462b      	mov	r3, r5
 800f46c:	f7f1 f8ec 	bl	8000648 <__aeabi_dmul>
 800f470:	a355      	add	r3, pc, #340	; (adr r3, 800f5c8 <__ieee754_pow+0xa38>)
 800f472:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f476:	f7f0 ff31 	bl	80002dc <__adddf3>
 800f47a:	4622      	mov	r2, r4
 800f47c:	462b      	mov	r3, r5
 800f47e:	f7f1 f8e3 	bl	8000648 <__aeabi_dmul>
 800f482:	4602      	mov	r2, r0
 800f484:	460b      	mov	r3, r1
 800f486:	4640      	mov	r0, r8
 800f488:	4649      	mov	r1, r9
 800f48a:	f7f0 ff25 	bl	80002d8 <__aeabi_dsub>
 800f48e:	4604      	mov	r4, r0
 800f490:	460d      	mov	r5, r1
 800f492:	4602      	mov	r2, r0
 800f494:	460b      	mov	r3, r1
 800f496:	4640      	mov	r0, r8
 800f498:	4649      	mov	r1, r9
 800f49a:	f7f1 f8d5 	bl	8000648 <__aeabi_dmul>
 800f49e:	2200      	movs	r2, #0
 800f4a0:	ec41 0b19 	vmov	d9, r0, r1
 800f4a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	4629      	mov	r1, r5
 800f4ac:	f7f0 ff14 	bl	80002d8 <__aeabi_dsub>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	460b      	mov	r3, r1
 800f4b4:	ec51 0b19 	vmov	r0, r1, d9
 800f4b8:	f7f1 f9f0 	bl	800089c <__aeabi_ddiv>
 800f4bc:	4632      	mov	r2, r6
 800f4be:	4604      	mov	r4, r0
 800f4c0:	460d      	mov	r5, r1
 800f4c2:	463b      	mov	r3, r7
 800f4c4:	4640      	mov	r0, r8
 800f4c6:	4649      	mov	r1, r9
 800f4c8:	f7f1 f8be 	bl	8000648 <__aeabi_dmul>
 800f4cc:	4632      	mov	r2, r6
 800f4ce:	463b      	mov	r3, r7
 800f4d0:	f7f0 ff04 	bl	80002dc <__adddf3>
 800f4d4:	4602      	mov	r2, r0
 800f4d6:	460b      	mov	r3, r1
 800f4d8:	4620      	mov	r0, r4
 800f4da:	4629      	mov	r1, r5
 800f4dc:	f7f0 fefc 	bl	80002d8 <__aeabi_dsub>
 800f4e0:	4642      	mov	r2, r8
 800f4e2:	464b      	mov	r3, r9
 800f4e4:	f7f0 fef8 	bl	80002d8 <__aeabi_dsub>
 800f4e8:	460b      	mov	r3, r1
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	493a      	ldr	r1, [pc, #232]	; (800f5d8 <__ieee754_pow+0xa48>)
 800f4ee:	2000      	movs	r0, #0
 800f4f0:	f7f0 fef2 	bl	80002d8 <__aeabi_dsub>
 800f4f4:	ec41 0b10 	vmov	d0, r0, r1
 800f4f8:	ee10 3a90 	vmov	r3, s1
 800f4fc:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f500:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f504:	da2b      	bge.n	800f55e <__ieee754_pow+0x9ce>
 800f506:	4650      	mov	r0, sl
 800f508:	f000 f966 	bl	800f7d8 <scalbn>
 800f50c:	ec51 0b10 	vmov	r0, r1, d0
 800f510:	ec53 2b18 	vmov	r2, r3, d8
 800f514:	f7ff bbed 	b.w	800ecf2 <__ieee754_pow+0x162>
 800f518:	4b30      	ldr	r3, [pc, #192]	; (800f5dc <__ieee754_pow+0xa4c>)
 800f51a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f51e:	429e      	cmp	r6, r3
 800f520:	f77f af0c 	ble.w	800f33c <__ieee754_pow+0x7ac>
 800f524:	4b2e      	ldr	r3, [pc, #184]	; (800f5e0 <__ieee754_pow+0xa50>)
 800f526:	440b      	add	r3, r1
 800f528:	4303      	orrs	r3, r0
 800f52a:	d009      	beq.n	800f540 <__ieee754_pow+0x9b0>
 800f52c:	ec51 0b18 	vmov	r0, r1, d8
 800f530:	2200      	movs	r2, #0
 800f532:	2300      	movs	r3, #0
 800f534:	f7f1 fafa 	bl	8000b2c <__aeabi_dcmplt>
 800f538:	3800      	subs	r0, #0
 800f53a:	bf18      	it	ne
 800f53c:	2001      	movne	r0, #1
 800f53e:	e447      	b.n	800edd0 <__ieee754_pow+0x240>
 800f540:	4622      	mov	r2, r4
 800f542:	462b      	mov	r3, r5
 800f544:	f7f0 fec8 	bl	80002d8 <__aeabi_dsub>
 800f548:	4642      	mov	r2, r8
 800f54a:	464b      	mov	r3, r9
 800f54c:	f7f1 fb02 	bl	8000b54 <__aeabi_dcmpge>
 800f550:	2800      	cmp	r0, #0
 800f552:	f43f aef3 	beq.w	800f33c <__ieee754_pow+0x7ac>
 800f556:	e7e9      	b.n	800f52c <__ieee754_pow+0x99c>
 800f558:	f04f 0a00 	mov.w	sl, #0
 800f55c:	e71a      	b.n	800f394 <__ieee754_pow+0x804>
 800f55e:	ec51 0b10 	vmov	r0, r1, d0
 800f562:	4619      	mov	r1, r3
 800f564:	e7d4      	b.n	800f510 <__ieee754_pow+0x980>
 800f566:	491c      	ldr	r1, [pc, #112]	; (800f5d8 <__ieee754_pow+0xa48>)
 800f568:	2000      	movs	r0, #0
 800f56a:	f7ff bb30 	b.w	800ebce <__ieee754_pow+0x3e>
 800f56e:	2000      	movs	r0, #0
 800f570:	2100      	movs	r1, #0
 800f572:	f7ff bb2c 	b.w	800ebce <__ieee754_pow+0x3e>
 800f576:	4630      	mov	r0, r6
 800f578:	4639      	mov	r1, r7
 800f57a:	f7ff bb28 	b.w	800ebce <__ieee754_pow+0x3e>
 800f57e:	9204      	str	r2, [sp, #16]
 800f580:	f7ff bb7a 	b.w	800ec78 <__ieee754_pow+0xe8>
 800f584:	2300      	movs	r3, #0
 800f586:	f7ff bb64 	b.w	800ec52 <__ieee754_pow+0xc2>
 800f58a:	bf00      	nop
 800f58c:	f3af 8000 	nop.w
 800f590:	00000000 	.word	0x00000000
 800f594:	3fe62e43 	.word	0x3fe62e43
 800f598:	fefa39ef 	.word	0xfefa39ef
 800f59c:	3fe62e42 	.word	0x3fe62e42
 800f5a0:	0ca86c39 	.word	0x0ca86c39
 800f5a4:	be205c61 	.word	0xbe205c61
 800f5a8:	72bea4d0 	.word	0x72bea4d0
 800f5ac:	3e663769 	.word	0x3e663769
 800f5b0:	c5d26bf1 	.word	0xc5d26bf1
 800f5b4:	3ebbbd41 	.word	0x3ebbbd41
 800f5b8:	af25de2c 	.word	0xaf25de2c
 800f5bc:	3f11566a 	.word	0x3f11566a
 800f5c0:	16bebd93 	.word	0x16bebd93
 800f5c4:	3f66c16c 	.word	0x3f66c16c
 800f5c8:	5555553e 	.word	0x5555553e
 800f5cc:	3fc55555 	.word	0x3fc55555
 800f5d0:	3fe00000 	.word	0x3fe00000
 800f5d4:	000fffff 	.word	0x000fffff
 800f5d8:	3ff00000 	.word	0x3ff00000
 800f5dc:	4090cbff 	.word	0x4090cbff
 800f5e0:	3f6f3400 	.word	0x3f6f3400
 800f5e4:	652b82fe 	.word	0x652b82fe
 800f5e8:	3c971547 	.word	0x3c971547

0800f5ec <__ieee754_sqrt>:
 800f5ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5f0:	ec55 4b10 	vmov	r4, r5, d0
 800f5f4:	4e55      	ldr	r6, [pc, #340]	; (800f74c <__ieee754_sqrt+0x160>)
 800f5f6:	43ae      	bics	r6, r5
 800f5f8:	ee10 0a10 	vmov	r0, s0
 800f5fc:	ee10 3a10 	vmov	r3, s0
 800f600:	462a      	mov	r2, r5
 800f602:	4629      	mov	r1, r5
 800f604:	d110      	bne.n	800f628 <__ieee754_sqrt+0x3c>
 800f606:	ee10 2a10 	vmov	r2, s0
 800f60a:	462b      	mov	r3, r5
 800f60c:	f7f1 f81c 	bl	8000648 <__aeabi_dmul>
 800f610:	4602      	mov	r2, r0
 800f612:	460b      	mov	r3, r1
 800f614:	4620      	mov	r0, r4
 800f616:	4629      	mov	r1, r5
 800f618:	f7f0 fe60 	bl	80002dc <__adddf3>
 800f61c:	4604      	mov	r4, r0
 800f61e:	460d      	mov	r5, r1
 800f620:	ec45 4b10 	vmov	d0, r4, r5
 800f624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f628:	2d00      	cmp	r5, #0
 800f62a:	dc10      	bgt.n	800f64e <__ieee754_sqrt+0x62>
 800f62c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f630:	4330      	orrs	r0, r6
 800f632:	d0f5      	beq.n	800f620 <__ieee754_sqrt+0x34>
 800f634:	b15d      	cbz	r5, 800f64e <__ieee754_sqrt+0x62>
 800f636:	ee10 2a10 	vmov	r2, s0
 800f63a:	462b      	mov	r3, r5
 800f63c:	ee10 0a10 	vmov	r0, s0
 800f640:	f7f0 fe4a 	bl	80002d8 <__aeabi_dsub>
 800f644:	4602      	mov	r2, r0
 800f646:	460b      	mov	r3, r1
 800f648:	f7f1 f928 	bl	800089c <__aeabi_ddiv>
 800f64c:	e7e6      	b.n	800f61c <__ieee754_sqrt+0x30>
 800f64e:	1512      	asrs	r2, r2, #20
 800f650:	d074      	beq.n	800f73c <__ieee754_sqrt+0x150>
 800f652:	07d4      	lsls	r4, r2, #31
 800f654:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f658:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f65c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f660:	bf5e      	ittt	pl
 800f662:	0fda      	lsrpl	r2, r3, #31
 800f664:	005b      	lslpl	r3, r3, #1
 800f666:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f66a:	2400      	movs	r4, #0
 800f66c:	0fda      	lsrs	r2, r3, #31
 800f66e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f672:	107f      	asrs	r7, r7, #1
 800f674:	005b      	lsls	r3, r3, #1
 800f676:	2516      	movs	r5, #22
 800f678:	4620      	mov	r0, r4
 800f67a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f67e:	1886      	adds	r6, r0, r2
 800f680:	428e      	cmp	r6, r1
 800f682:	bfde      	ittt	le
 800f684:	1b89      	suble	r1, r1, r6
 800f686:	18b0      	addle	r0, r6, r2
 800f688:	18a4      	addle	r4, r4, r2
 800f68a:	0049      	lsls	r1, r1, #1
 800f68c:	3d01      	subs	r5, #1
 800f68e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f692:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f696:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f69a:	d1f0      	bne.n	800f67e <__ieee754_sqrt+0x92>
 800f69c:	462a      	mov	r2, r5
 800f69e:	f04f 0e20 	mov.w	lr, #32
 800f6a2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f6a6:	4281      	cmp	r1, r0
 800f6a8:	eb06 0c05 	add.w	ip, r6, r5
 800f6ac:	dc02      	bgt.n	800f6b4 <__ieee754_sqrt+0xc8>
 800f6ae:	d113      	bne.n	800f6d8 <__ieee754_sqrt+0xec>
 800f6b0:	459c      	cmp	ip, r3
 800f6b2:	d811      	bhi.n	800f6d8 <__ieee754_sqrt+0xec>
 800f6b4:	f1bc 0f00 	cmp.w	ip, #0
 800f6b8:	eb0c 0506 	add.w	r5, ip, r6
 800f6bc:	da43      	bge.n	800f746 <__ieee754_sqrt+0x15a>
 800f6be:	2d00      	cmp	r5, #0
 800f6c0:	db41      	blt.n	800f746 <__ieee754_sqrt+0x15a>
 800f6c2:	f100 0801 	add.w	r8, r0, #1
 800f6c6:	1a09      	subs	r1, r1, r0
 800f6c8:	459c      	cmp	ip, r3
 800f6ca:	bf88      	it	hi
 800f6cc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f6d0:	eba3 030c 	sub.w	r3, r3, ip
 800f6d4:	4432      	add	r2, r6
 800f6d6:	4640      	mov	r0, r8
 800f6d8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f6dc:	f1be 0e01 	subs.w	lr, lr, #1
 800f6e0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f6e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f6e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f6ec:	d1db      	bne.n	800f6a6 <__ieee754_sqrt+0xba>
 800f6ee:	430b      	orrs	r3, r1
 800f6f0:	d006      	beq.n	800f700 <__ieee754_sqrt+0x114>
 800f6f2:	1c50      	adds	r0, r2, #1
 800f6f4:	bf13      	iteet	ne
 800f6f6:	3201      	addne	r2, #1
 800f6f8:	3401      	addeq	r4, #1
 800f6fa:	4672      	moveq	r2, lr
 800f6fc:	f022 0201 	bicne.w	r2, r2, #1
 800f700:	1063      	asrs	r3, r4, #1
 800f702:	0852      	lsrs	r2, r2, #1
 800f704:	07e1      	lsls	r1, r4, #31
 800f706:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f70a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f70e:	bf48      	it	mi
 800f710:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f714:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f718:	4614      	mov	r4, r2
 800f71a:	e781      	b.n	800f620 <__ieee754_sqrt+0x34>
 800f71c:	0ad9      	lsrs	r1, r3, #11
 800f71e:	3815      	subs	r0, #21
 800f720:	055b      	lsls	r3, r3, #21
 800f722:	2900      	cmp	r1, #0
 800f724:	d0fa      	beq.n	800f71c <__ieee754_sqrt+0x130>
 800f726:	02cd      	lsls	r5, r1, #11
 800f728:	d50a      	bpl.n	800f740 <__ieee754_sqrt+0x154>
 800f72a:	f1c2 0420 	rsb	r4, r2, #32
 800f72e:	fa23 f404 	lsr.w	r4, r3, r4
 800f732:	1e55      	subs	r5, r2, #1
 800f734:	4093      	lsls	r3, r2
 800f736:	4321      	orrs	r1, r4
 800f738:	1b42      	subs	r2, r0, r5
 800f73a:	e78a      	b.n	800f652 <__ieee754_sqrt+0x66>
 800f73c:	4610      	mov	r0, r2
 800f73e:	e7f0      	b.n	800f722 <__ieee754_sqrt+0x136>
 800f740:	0049      	lsls	r1, r1, #1
 800f742:	3201      	adds	r2, #1
 800f744:	e7ef      	b.n	800f726 <__ieee754_sqrt+0x13a>
 800f746:	4680      	mov	r8, r0
 800f748:	e7bd      	b.n	800f6c6 <__ieee754_sqrt+0xda>
 800f74a:	bf00      	nop
 800f74c:	7ff00000 	.word	0x7ff00000

0800f750 <with_errno>:
 800f750:	b570      	push	{r4, r5, r6, lr}
 800f752:	4604      	mov	r4, r0
 800f754:	460d      	mov	r5, r1
 800f756:	4616      	mov	r6, r2
 800f758:	f7fc fa06 	bl	800bb68 <__errno>
 800f75c:	4629      	mov	r1, r5
 800f75e:	6006      	str	r6, [r0, #0]
 800f760:	4620      	mov	r0, r4
 800f762:	bd70      	pop	{r4, r5, r6, pc}

0800f764 <xflow>:
 800f764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f766:	4614      	mov	r4, r2
 800f768:	461d      	mov	r5, r3
 800f76a:	b108      	cbz	r0, 800f770 <xflow+0xc>
 800f76c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f770:	e9cd 2300 	strd	r2, r3, [sp]
 800f774:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f778:	4620      	mov	r0, r4
 800f77a:	4629      	mov	r1, r5
 800f77c:	f7f0 ff64 	bl	8000648 <__aeabi_dmul>
 800f780:	2222      	movs	r2, #34	; 0x22
 800f782:	b003      	add	sp, #12
 800f784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f788:	f7ff bfe2 	b.w	800f750 <with_errno>

0800f78c <__math_uflow>:
 800f78c:	b508      	push	{r3, lr}
 800f78e:	2200      	movs	r2, #0
 800f790:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f794:	f7ff ffe6 	bl	800f764 <xflow>
 800f798:	ec41 0b10 	vmov	d0, r0, r1
 800f79c:	bd08      	pop	{r3, pc}

0800f79e <__math_oflow>:
 800f79e:	b508      	push	{r3, lr}
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f7a6:	f7ff ffdd 	bl	800f764 <xflow>
 800f7aa:	ec41 0b10 	vmov	d0, r0, r1
 800f7ae:	bd08      	pop	{r3, pc}

0800f7b0 <fabs>:
 800f7b0:	ec51 0b10 	vmov	r0, r1, d0
 800f7b4:	ee10 2a10 	vmov	r2, s0
 800f7b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f7bc:	ec43 2b10 	vmov	d0, r2, r3
 800f7c0:	4770      	bx	lr

0800f7c2 <finite>:
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	ed8d 0b00 	vstr	d0, [sp]
 800f7c8:	9801      	ldr	r0, [sp, #4]
 800f7ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f7ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f7d2:	0fc0      	lsrs	r0, r0, #31
 800f7d4:	b002      	add	sp, #8
 800f7d6:	4770      	bx	lr

0800f7d8 <scalbn>:
 800f7d8:	b570      	push	{r4, r5, r6, lr}
 800f7da:	ec55 4b10 	vmov	r4, r5, d0
 800f7de:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f7e2:	4606      	mov	r6, r0
 800f7e4:	462b      	mov	r3, r5
 800f7e6:	b99a      	cbnz	r2, 800f810 <scalbn+0x38>
 800f7e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f7ec:	4323      	orrs	r3, r4
 800f7ee:	d036      	beq.n	800f85e <scalbn+0x86>
 800f7f0:	4b39      	ldr	r3, [pc, #228]	; (800f8d8 <scalbn+0x100>)
 800f7f2:	4629      	mov	r1, r5
 800f7f4:	ee10 0a10 	vmov	r0, s0
 800f7f8:	2200      	movs	r2, #0
 800f7fa:	f7f0 ff25 	bl	8000648 <__aeabi_dmul>
 800f7fe:	4b37      	ldr	r3, [pc, #220]	; (800f8dc <scalbn+0x104>)
 800f800:	429e      	cmp	r6, r3
 800f802:	4604      	mov	r4, r0
 800f804:	460d      	mov	r5, r1
 800f806:	da10      	bge.n	800f82a <scalbn+0x52>
 800f808:	a32b      	add	r3, pc, #172	; (adr r3, 800f8b8 <scalbn+0xe0>)
 800f80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f80e:	e03a      	b.n	800f886 <scalbn+0xae>
 800f810:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f814:	428a      	cmp	r2, r1
 800f816:	d10c      	bne.n	800f832 <scalbn+0x5a>
 800f818:	ee10 2a10 	vmov	r2, s0
 800f81c:	4620      	mov	r0, r4
 800f81e:	4629      	mov	r1, r5
 800f820:	f7f0 fd5c 	bl	80002dc <__adddf3>
 800f824:	4604      	mov	r4, r0
 800f826:	460d      	mov	r5, r1
 800f828:	e019      	b.n	800f85e <scalbn+0x86>
 800f82a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f82e:	460b      	mov	r3, r1
 800f830:	3a36      	subs	r2, #54	; 0x36
 800f832:	4432      	add	r2, r6
 800f834:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f838:	428a      	cmp	r2, r1
 800f83a:	dd08      	ble.n	800f84e <scalbn+0x76>
 800f83c:	2d00      	cmp	r5, #0
 800f83e:	a120      	add	r1, pc, #128	; (adr r1, 800f8c0 <scalbn+0xe8>)
 800f840:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f844:	da1c      	bge.n	800f880 <scalbn+0xa8>
 800f846:	a120      	add	r1, pc, #128	; (adr r1, 800f8c8 <scalbn+0xf0>)
 800f848:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f84c:	e018      	b.n	800f880 <scalbn+0xa8>
 800f84e:	2a00      	cmp	r2, #0
 800f850:	dd08      	ble.n	800f864 <scalbn+0x8c>
 800f852:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f856:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f85a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f85e:	ec45 4b10 	vmov	d0, r4, r5
 800f862:	bd70      	pop	{r4, r5, r6, pc}
 800f864:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f868:	da19      	bge.n	800f89e <scalbn+0xc6>
 800f86a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f86e:	429e      	cmp	r6, r3
 800f870:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f874:	dd0a      	ble.n	800f88c <scalbn+0xb4>
 800f876:	a112      	add	r1, pc, #72	; (adr r1, 800f8c0 <scalbn+0xe8>)
 800f878:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d1e2      	bne.n	800f846 <scalbn+0x6e>
 800f880:	a30f      	add	r3, pc, #60	; (adr r3, 800f8c0 <scalbn+0xe8>)
 800f882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f886:	f7f0 fedf 	bl	8000648 <__aeabi_dmul>
 800f88a:	e7cb      	b.n	800f824 <scalbn+0x4c>
 800f88c:	a10a      	add	r1, pc, #40	; (adr r1, 800f8b8 <scalbn+0xe0>)
 800f88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d0b8      	beq.n	800f808 <scalbn+0x30>
 800f896:	a10e      	add	r1, pc, #56	; (adr r1, 800f8d0 <scalbn+0xf8>)
 800f898:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f89c:	e7b4      	b.n	800f808 <scalbn+0x30>
 800f89e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f8a2:	3236      	adds	r2, #54	; 0x36
 800f8a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f8a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f8ac:	4620      	mov	r0, r4
 800f8ae:	4b0c      	ldr	r3, [pc, #48]	; (800f8e0 <scalbn+0x108>)
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	e7e8      	b.n	800f886 <scalbn+0xae>
 800f8b4:	f3af 8000 	nop.w
 800f8b8:	c2f8f359 	.word	0xc2f8f359
 800f8bc:	01a56e1f 	.word	0x01a56e1f
 800f8c0:	8800759c 	.word	0x8800759c
 800f8c4:	7e37e43c 	.word	0x7e37e43c
 800f8c8:	8800759c 	.word	0x8800759c
 800f8cc:	fe37e43c 	.word	0xfe37e43c
 800f8d0:	c2f8f359 	.word	0xc2f8f359
 800f8d4:	81a56e1f 	.word	0x81a56e1f
 800f8d8:	43500000 	.word	0x43500000
 800f8dc:	ffff3cb0 	.word	0xffff3cb0
 800f8e0:	3c900000 	.word	0x3c900000

0800f8e4 <_init>:
 800f8e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e6:	bf00      	nop
 800f8e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8ea:	bc08      	pop	{r3}
 800f8ec:	469e      	mov	lr, r3
 800f8ee:	4770      	bx	lr

0800f8f0 <_fini>:
 800f8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8f2:	bf00      	nop
 800f8f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8f6:	bc08      	pop	{r3}
 800f8f8:	469e      	mov	lr, r3
 800f8fa:	4770      	bx	lr
