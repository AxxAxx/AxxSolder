
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5a8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003608  0800f788  0800f788  0001f788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d90  08012d90  00030228  2**0
                  CONTENTS
  4 .ARM          00000008  08012d90  08012d90  00022d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d98  08012d98  00030228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012d98  08012d98  00022d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012d9c  08012d9c  00022d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08012da0  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  20000228  08012fc8  00030228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000b84  08012fc8  00030b84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030258  2**0
                  CONTENTS, READONLY
 13 .debug_info   000202ba  00000000  00000000  0003029b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000402b  00000000  00000000  00050555  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d18  00000000  00000000  00054580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000166c  00000000  00000000  00056298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023948  00000000  00000000  00057904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023a0e  00000000  00000000  0007b24c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4113  00000000  00000000  0009ec5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000914c  00000000  00000000  00182d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  0018bebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000228 	.word	0x20000228
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800f770 	.word	0x0800f770

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000022c 	.word	0x2000022c
 800021c:	0800f770 	.word	0x0800f770

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <HAL_UART_TxCpltCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

PID_TypeDef TPID;

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle){
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
	/* Set transmission flag: transfer complete */
	tx_done = 1;
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <HAL_UART_TxCpltCallback+0x1c>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	701a      	strb	r2, [r3, #0]
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	20000020 	.word	0x20000020

08000ff4 <get_mean_ADC_reading>:

/* Returns the average of 100 readings of the index+4*n value in the ADC_buffer vector */
float get_mean_ADC_reading(uint8_t index){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <get_mean_ADC_reading+0x68>)
 8001000:	f04f 0200 	mov.w	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
	for(int n=index;n<400;n=n+4){
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	60fb      	str	r3, [r7, #12]
 800100a:	e012      	b.n	8001032 <get_mean_ADC_reading+0x3e>
		ADC_filter_mean += ADC_buffer[n];
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <get_mean_ADC_reading+0x6c>)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001014:	ee07 3a90 	vmov	s15, r3
 8001018:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <get_mean_ADC_reading+0x68>)
 800101e:	edd3 7a00 	vldr	s15, [r3]
 8001022:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001026:	4b0d      	ldr	r3, [pc, #52]	; (800105c <get_mean_ADC_reading+0x68>)
 8001028:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<400;n=n+4){
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3304      	adds	r3, #4
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001038:	dbe8      	blt.n	800100c <get_mean_ADC_reading+0x18>
	}
	return ADC_filter_mean/100.0;
 800103a:	4b08      	ldr	r3, [pc, #32]	; (800105c <get_mean_ADC_reading+0x68>)
 800103c:	edd3 7a00 	vldr	s15, [r3]
 8001040:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001064 <get_mean_ADC_reading+0x70>
 8001044:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001048:	eef0 7a66 	vmov.f32	s15, s13
}
 800104c:	eeb0 0a67 	vmov.f32	s0, s15
 8001050:	3714      	adds	r7, #20
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	2000029c 	.word	0x2000029c
 8001060:	200002a0 	.word	0x200002a0
 8001064:	42c80000 	.word	0x42c80000

08001068 <get_bus_voltage>:

void get_bus_voltage(){
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
	/* Index 3 is bus Voltage */
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading(3), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 800106c:	2003      	movs	r0, #3
 800106e:	f7ff ffc1 	bl	8000ff4 <get_mean_ADC_reading>
 8001072:	eef0 7a40 	vmov.f32	s15, s0
 8001076:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800107a:	490d      	ldr	r1, [pc, #52]	; (80010b0 <get_bus_voltage+0x48>)
 800107c:	ee17 0a90 	vmov	r0, s15
 8001080:	f001 faa8 	bl	80025d4 <Moving_Average_Compute>
 8001084:	ec51 0b10 	vmov	r0, r1, d0
 8001088:	a307      	add	r3, pc, #28	; (adr r3, 80010a8 <get_bus_voltage+0x40>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fadb 	bl	8000648 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fdcd 	bl	8000c38 <__aeabi_d2f>
 800109e:	4603      	mov	r3, r0
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <get_bus_voltage+0x4c>)
 80010a2:	6113      	str	r3, [r2, #16]
}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	48b35add 	.word	0x48b35add
 80010ac:	3f7a91e4 	.word	0x3f7a91e4
 80010b0:	20000628 	.word	0x20000628
 80010b4:	200005c0 	.word	0x200005c0

080010b8 <get_actual_temperature>:

void get_actual_temperature(){
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	float TC_temperature_temp = Moving_Average_Compute(get_mean_ADC_reading(0), &actual_temperature_filter_struct);
 80010be:	2000      	movs	r0, #0
 80010c0:	f7ff ff98 	bl	8000ff4 <get_mean_ADC_reading>
 80010c4:	eef0 7a40 	vmov.f32	s15, s0
 80010c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010cc:	497a      	ldr	r1, [pc, #488]	; (80012b8 <get_actual_temperature+0x200>)
 80010ce:	ee17 0a90 	vmov	r0, s15
 80010d2:	f001 fa7f 	bl	80025d4 <Moving_Average_Compute>
 80010d6:	ec53 2b10 	vmov	r2, r3, d0
 80010da:	4610      	mov	r0, r2
 80010dc:	4619      	mov	r1, r3
 80010de:	f7ff fdab 	bl	8000c38 <__aeabi_d2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	607b      	str	r3, [r7, #4]

	if(handle == T210){
 80010e6:	4b75      	ldr	r3, [pc, #468]	; (80012bc <get_actual_temperature+0x204>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d14e      	bne.n	800118c <get_actual_temperature+0xd4>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 + pow(TC_temperature_temp, 2)*
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fa52 	bl	8000598 <__aeabi_f2d>
 80010f4:	4602      	mov	r2, r0
 80010f6:	460b      	mov	r3, r1
 80010f8:	ed9f 1b59 	vldr	d1, [pc, #356]	; 8001260 <get_actual_temperature+0x1a8>
 80010fc:	ec43 2b10 	vmov	d0, r2, r3
 8001100:	f00d fbfe 	bl	800e900 <pow>
 8001104:	ec51 0b10 	vmov	r0, r1, d0
 8001108:	a357      	add	r3, pc, #348	; (adr r3, 8001268 <get_actual_temperature+0x1b0>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	f7ff fa9b 	bl	8000648 <__aeabi_dmul>
 8001112:	4602      	mov	r2, r0
 8001114:	460b      	mov	r3, r1
 8001116:	4614      	mov	r4, r2
 8001118:	461d      	mov	r5, r3
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fa3c 	bl	8000598 <__aeabi_f2d>
 8001120:	4602      	mov	r2, r0
 8001122:	460b      	mov	r3, r1
 8001124:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8001270 <get_actual_temperature+0x1b8>
 8001128:	ec43 2b10 	vmov	d0, r2, r3
 800112c:	f00d fbe8 	bl	800e900 <pow>
 8001130:	ec51 0b10 	vmov	r0, r1, d0
 8001134:	a350      	add	r3, pc, #320	; (adr r3, 8001278 <get_actual_temperature+0x1c0>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff fa85 	bl	8000648 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4620      	mov	r0, r4
 8001144:	4629      	mov	r1, r5
 8001146:	f7ff f8c9 	bl	80002dc <__adddf3>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4614      	mov	r4, r2
 8001150:	461d      	mov	r5, r3
						TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fa20 	bl	8000598 <__aeabi_f2d>
 8001158:	a349      	add	r3, pc, #292	; (adr r3, 8001280 <get_actual_temperature+0x1c8>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff fa73 	bl	8000648 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4620      	mov	r0, r4
 8001168:	4629      	mov	r1, r5
 800116a:	f7ff f8b7 	bl	80002dc <__adddf3>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	a344      	add	r3, pc, #272	; (adr r3, 8001288 <get_actual_temperature+0x1d0>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff f8ae 	bl	80002dc <__adddf3>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 + pow(TC_temperature_temp, 2)*
 8001184:	494e      	ldr	r1, [pc, #312]	; (80012c0 <get_actual_temperature+0x208>)
 8001186:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800118a:	e051      	b.n	8001230 <get_actual_temperature+0x178>
	}
	else if(handle == T245){
 800118c:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <get_actual_temperature+0x204>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d14d      	bne.n	8001230 <get_actual_temperature+0x178>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 + pow(TC_temperature_temp, 2)*
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff f9ff 	bl	8000598 <__aeabi_f2d>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	ed9f 1b30 	vldr	d1, [pc, #192]	; 8001260 <get_actual_temperature+0x1a8>
 80011a2:	ec43 2b10 	vmov	d0, r2, r3
 80011a6:	f00d fbab 	bl	800e900 <pow>
 80011aa:	ec51 0b10 	vmov	r0, r1, d0
 80011ae:	a338      	add	r3, pc, #224	; (adr r3, 8001290 <get_actual_temperature+0x1d8>)
 80011b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b4:	f7ff fa48 	bl	8000648 <__aeabi_dmul>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4614      	mov	r4, r2
 80011be:	461d      	mov	r5, r3
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff f9e9 	bl	8000598 <__aeabi_f2d>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	ed9f 1b29 	vldr	d1, [pc, #164]	; 8001270 <get_actual_temperature+0x1b8>
 80011ce:	ec43 2b10 	vmov	d0, r2, r3
 80011d2:	f00d fb95 	bl	800e900 <pow>
 80011d6:	ec51 0b10 	vmov	r0, r1, d0
 80011da:	a32f      	add	r3, pc, #188	; (adr r3, 8001298 <get_actual_temperature+0x1e0>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa32 	bl	8000648 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4620      	mov	r0, r4
 80011ea:	4629      	mov	r1, r5
 80011ec:	f7ff f876 	bl	80002dc <__adddf3>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	4614      	mov	r4, r2
 80011f6:	461d      	mov	r5, r3
						TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f7ff f9cd 	bl	8000598 <__aeabi_f2d>
 80011fe:	a328      	add	r3, pc, #160	; (adr r3, 80012a0 <get_actual_temperature+0x1e8>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff fa20 	bl	8000648 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4620      	mov	r0, r4
 800120e:	4629      	mov	r1, r5
 8001210:	f7ff f864 	bl	80002dc <__adddf3>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4610      	mov	r0, r2
 800121a:	4619      	mov	r1, r3
 800121c:	a322      	add	r3, pc, #136	; (adr r3, 80012a8 <get_actual_temperature+0x1f0>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f85b 	bl	80002dc <__adddf3>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 + pow(TC_temperature_temp, 2)*
 800122a:	4925      	ldr	r1, [pc, #148]	; (80012c0 <get_actual_temperature+0x208>)
 800122c:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	if(sensor_values.actual_temperature > 999){
 8001230:	4b23      	ldr	r3, [pc, #140]	; (80012c0 <get_actual_temperature+0x208>)
 8001232:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001236:	a31e      	add	r3, pc, #120	; (adr r3, 80012b0 <get_actual_temperature+0x1f8>)
 8001238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123c:	f7ff fc94 	bl	8000b68 <__aeabi_dcmpgt>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d100      	bne.n	8001248 <get_actual_temperature+0x190>
		sensor_values.actual_temperature = 999;
	}
}
 8001246:	e005      	b.n	8001254 <get_actual_temperature+0x19c>
		sensor_values.actual_temperature = 999;
 8001248:	491d      	ldr	r1, [pc, #116]	; (80012c0 <get_actual_temperature+0x208>)
 800124a:	a319      	add	r3, pc, #100	; (adr r3, 80012b0 <get_actual_temperature+0x1f8>)
 800124c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001250:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bdb0      	pop	{r4, r5, r7, pc}
 800125c:	f3af 8000 	nop.w
 8001260:	00000000 	.word	0x00000000
 8001264:	40080000 	.word	0x40080000
 8001268:	e6c91459 	.word	0xe6c91459
 800126c:	be3d333c 	.word	0xbe3d333c
 8001270:	00000000 	.word	0x00000000
 8001274:	40000000 	.word	0x40000000
 8001278:	77c4dab0 	.word	0x77c4dab0
 800127c:	bed98561 	.word	0xbed98561
 8001280:	0aa653bc 	.word	0x0aa653bc
 8001284:	3fd1585a 	.word	0x3fd1585a
 8001288:	d797deed 	.word	0xd797deed
 800128c:	40396624 	.word	0x40396624
 8001290:	b4effad8 	.word	0xb4effad8
 8001294:	3e21f933 	.word	0x3e21f933
 8001298:	c7e1dac1 	.word	0xc7e1dac1
 800129c:	bee97525 	.word	0xbee97525
 80012a0:	8d8ee863 	.word	0x8d8ee863
 80012a4:	3fbe16b0 	.word	0x3fbe16b0
 80012a8:	7373b751 	.word	0x7373b751
 80012ac:	40390d47 	.word	0x40390d47
 80012b0:	00000000 	.word	0x00000000
 80012b4:	408f3800 	.word	0x408f3800
 80012b8:	200005f0 	.word	0x200005f0
 80012bc:	20000244 	.word	0x20000244
 80012c0:	200005c0 	.word	0x200005c0
 80012c4:	00000000 	.word	0x00000000

080012c8 <get_ambient_temp>:

void get_ambient_temp(){
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	//Index 2 is PCB temp
	sensor_values.ambient_temperature = ((Moving_Average_Compute(get_mean_ADC_reading(2), &ambient_temperature_filter_struct)*AMBIENT_TEMP_COMPENSATION)-0.4)/0.0195;
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff fe91 	bl	8000ff4 <get_mean_ADC_reading>
 80012d2:	eef0 7a40 	vmov.f32	s15, s0
 80012d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012da:	491b      	ldr	r1, [pc, #108]	; (8001348 <get_ambient_temp+0x80>)
 80012dc:	ee17 0a90 	vmov	r0, s15
 80012e0:	f001 f978 	bl	80025d4 <Moving_Average_Compute>
 80012e4:	ec51 0b10 	vmov	r0, r1, d0
 80012e8:	a311      	add	r3, pc, #68	; (adr r3, 8001330 <get_ambient_temp+0x68>)
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f7ff f9ab 	bl	8000648 <__aeabi_dmul>
 80012f2:	4602      	mov	r2, r0
 80012f4:	460b      	mov	r3, r1
 80012f6:	4610      	mov	r0, r2
 80012f8:	4619      	mov	r1, r3
 80012fa:	a30f      	add	r3, pc, #60	; (adr r3, 8001338 <get_ambient_temp+0x70>)
 80012fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001300:	f7fe ffea 	bl	80002d8 <__aeabi_dsub>
 8001304:	4602      	mov	r2, r0
 8001306:	460b      	mov	r3, r1
 8001308:	4610      	mov	r0, r2
 800130a:	4619      	mov	r1, r3
 800130c:	a30c      	add	r3, pc, #48	; (adr r3, 8001340 <get_ambient_temp+0x78>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff fac3 	bl	800089c <__aeabi_ddiv>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4610      	mov	r0, r2
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc8b 	bl	8000c38 <__aeabi_d2f>
 8001322:	4603      	mov	r3, r0
 8001324:	4a09      	ldr	r2, [pc, #36]	; (800134c <get_ambient_temp+0x84>)
 8001326:	61d3      	str	r3, [r2, #28]
	//• Positive slope sensor gain, offset (typical):
	//– 19.5 mV/°C, 400 mV at 0°C (TMP236-Q1) From data sheet
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}
 800132c:	f3af 8000 	nop.w
 8001330:	e3fc03eb 	.word	0xe3fc03eb
 8001334:	3f4a680c 	.word	0x3f4a680c
 8001338:	9999999a 	.word	0x9999999a
 800133c:	3fd99999 	.word	0x3fd99999
 8001340:	d916872b 	.word	0xd916872b
 8001344:	3f93f7ce 	.word	0x3f93f7ce
 8001348:	2000060c 	.word	0x2000060c
 800134c:	200005c0 	.word	0x200005c0

08001350 <debugPrint>:

void debugPrint(UART_HandleTypeDef *huart, char _out[]){
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
    tx_done = 0;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <debugPrint+0x38>)
 800135c:	2200      	movs	r2, #0
 800135e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_IT(huart, (uint8_t *) _out, strlen(_out));
 8001360:	6838      	ldr	r0, [r7, #0]
 8001362:	f7fe ffad 	bl	80002c0 <strlen>
 8001366:	4603      	mov	r3, r0
 8001368:	b29b      	uxth	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	6839      	ldr	r1, [r7, #0]
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f007 fefe 	bl	8009170 <HAL_UART_Transmit_IT>
	while(!tx_done);
 8001374:	bf00      	nop
 8001376:	4b04      	ldr	r3, [pc, #16]	; (8001388 <debugPrint+0x38>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d0fb      	beq.n	8001376 <debugPrint+0x26>
}
 800137e:	bf00      	nop
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000020 	.word	0x20000020

0800138c <init_OLED>:

/* Initiate OLED display */
void init_OLED(){
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af02      	add	r7, sp, #8
	if((black_image = (UBYTE *)malloc(image_size)) == NULL) {
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <init_OLED+0x74>)
 8001394:	881b      	ldrh	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f00a fbbe 	bl	800bb18 <malloc>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <init_OLED+0x78>)
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <init_OLED+0x78>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d025      	beq.n	80013f8 <init_OLED+0x6c>
		return;
	}
	Paint_NewImage(black_image, OLED_1in5_WIDTH, OLED_1in5_HEIGHT, 270, BLACK);
 80013ac:	4b15      	ldr	r3, [pc, #84]	; (8001404 <init_OLED+0x78>)
 80013ae:	6818      	ldr	r0, [r3, #0]
 80013b0:	2300      	movs	r3, #0
 80013b2:	9300      	str	r3, [sp, #0]
 80013b4:	f44f 7387 	mov.w	r3, #270	; 0x10e
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	2180      	movs	r1, #128	; 0x80
 80013bc:	f009 fae0 	bl	800a980 <Paint_NewImage>
	Paint_SetScale(16);
 80013c0:	2010      	movs	r0, #16
 80013c2:	f009 fb43 	bl	800aa4c <Paint_SetScale>
	Paint_SelectImage(black_image);
 80013c6:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <init_OLED+0x78>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f009 fb2e 	bl	800aa2c <Paint_SelectImage>
	Driver_Delay_ms(100);
 80013d0:	2064      	movs	r0, #100	; 0x64
 80013d2:	f009 fac9 	bl	800a968 <Driver_Delay_ms>
	Paint_Clear(BLACK);
 80013d6:	2000      	movs	r0, #0
 80013d8:	f009 fd22 	bl	800ae20 <Paint_Clear>

	// Show image
	OLED_1in5_Display(black_image);
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <init_OLED+0x78>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f00a fb6a 	bl	800baba <OLED_1in5_Display>

	OLED_1in5_Init();
 80013e6:	f00a fb01 	bl	800b9ec <OLED_1in5_Init>
	Driver_Delay_ms(500);
 80013ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80013ee:	f009 fabb 	bl	800a968 <Driver_Delay_ms>
	OLED_1in5_Clear();
 80013f2:	f00a fb47 	bl	800ba84 <OLED_1in5_Clear>
 80013f6:	e000      	b.n	80013fa <init_OLED+0x6e>
		return;
 80013f8:	bf00      	nop
}
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	20000000 	.word	0x20000000
 8001404:	20000248 	.word	0x20000248

08001408 <update_OLED>:

void update_OLED(){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af04      	add	r7, sp, #16
	Paint_DrawString_EN(0, 0, " AxxSolder ", &Font16, 0x00, 0xff);
 800140e:	23ff      	movs	r3, #255	; 0xff
 8001410:	9301      	str	r3, [sp, #4]
 8001412:	2300      	movs	r3, #0
 8001414:	9300      	str	r3, [sp, #0]
 8001416:	4ba9      	ldr	r3, [pc, #676]	; (80016bc <update_OLED+0x2b4>)
 8001418:	4aa9      	ldr	r2, [pc, #676]	; (80016c0 <update_OLED+0x2b8>)
 800141a:	2100      	movs	r1, #0
 800141c:	2000      	movs	r0, #0
 800141e:	f00a f9c9 	bl	800b7b4 <Paint_DrawString_EN>
    Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001422:	2300      	movs	r3, #0
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2302      	movs	r3, #2
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	2310      	movs	r3, #16
 8001432:	227f      	movs	r2, #127	; 0x7f
 8001434:	2110      	movs	r1, #16
 8001436:	2000      	movs	r0, #0
 8001438:	f009 fe48 	bl	800b0cc <Paint_DrawLine>

	Paint_DrawString_EN(3, 20, "Set temp", &Font16, 0x00, 0xff);
 800143c:	23ff      	movs	r3, #255	; 0xff
 800143e:	9301      	str	r3, [sp, #4]
 8001440:	2300      	movs	r3, #0
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	4b9d      	ldr	r3, [pc, #628]	; (80016bc <update_OLED+0x2b4>)
 8001446:	4a9f      	ldr	r2, [pc, #636]	; (80016c4 <update_OLED+0x2bc>)
 8001448:	2114      	movs	r1, #20
 800144a:	2003      	movs	r0, #3
 800144c:	f00a f9b2 	bl	800b7b4 <Paint_DrawString_EN>
	memset(&buffer, '\0', sizeof(buffer));
 8001450:	2228      	movs	r2, #40	; 0x28
 8001452:	2100      	movs	r1, #0
 8001454:	489c      	ldr	r0, [pc, #624]	; (80016c8 <update_OLED+0x2c0>)
 8001456:	f00b faa1 	bl	800c99c <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 800145a:	4b9c      	ldr	r3, [pc, #624]	; (80016cc <update_OLED+0x2c4>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	499b      	ldr	r1, [pc, #620]	; (80016d0 <update_OLED+0x2c8>)
 8001462:	4899      	ldr	r0, [pc, #612]	; (80016c8 <update_OLED+0x2c0>)
 8001464:	f00b f9a2 	bl	800c7ac <siprintf>
	Paint_DrawString_EN(3, 32, buffer, &Font24,  0x0, 0xff);
 8001468:	23ff      	movs	r3, #255	; 0xff
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	2300      	movs	r3, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	4b98      	ldr	r3, [pc, #608]	; (80016d4 <update_OLED+0x2cc>)
 8001472:	4a95      	ldr	r2, [pc, #596]	; (80016c8 <update_OLED+0x2c0>)
 8001474:	2120      	movs	r1, #32
 8001476:	2003      	movs	r0, #3
 8001478:	f00a f99c 	bl	800b7b4 <Paint_DrawString_EN>
	Paint_DrawCircle(67, 37, 2, WHITE, 1, DRAW_FILL_EMPTY);
 800147c:	2300      	movs	r3, #0
 800147e:	9301      	str	r3, [sp, #4]
 8001480:	2301      	movs	r3, #1
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001488:	2202      	movs	r2, #2
 800148a:	2125      	movs	r1, #37	; 0x25
 800148c:	2043      	movs	r0, #67	; 0x43
 800148e:	f009 ff5b 	bl	800b348 <Paint_DrawCircle>
	Paint_DrawString_EN(70, 32, "C", &Font24,  0x0, 0xff);
 8001492:	23ff      	movs	r3, #255	; 0xff
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	4b8e      	ldr	r3, [pc, #568]	; (80016d4 <update_OLED+0x2cc>)
 800149c:	4a8e      	ldr	r2, [pc, #568]	; (80016d8 <update_OLED+0x2d0>)
 800149e:	2120      	movs	r1, #32
 80014a0:	2046      	movs	r0, #70	; 0x46
 80014a2:	f00a f987 	bl	800b7b4 <Paint_DrawString_EN>

	Paint_DrawString_EN(3, 58, "Act temp", &Font16, 0x00, 0xff);
 80014a6:	23ff      	movs	r3, #255	; 0xff
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	2300      	movs	r3, #0
 80014ac:	9300      	str	r3, [sp, #0]
 80014ae:	4b83      	ldr	r3, [pc, #524]	; (80016bc <update_OLED+0x2b4>)
 80014b0:	4a8a      	ldr	r2, [pc, #552]	; (80016dc <update_OLED+0x2d4>)
 80014b2:	213a      	movs	r1, #58	; 0x3a
 80014b4:	2003      	movs	r0, #3
 80014b6:	f00a f97d 	bl	800b7b4 <Paint_DrawString_EN>
	memset(&buffer, '\0', sizeof(buffer));
 80014ba:	2228      	movs	r2, #40	; 0x28
 80014bc:	2100      	movs	r1, #0
 80014be:	4882      	ldr	r0, [pc, #520]	; (80016c8 <update_OLED+0x2c0>)
 80014c0:	f00b fa6c 	bl	800c99c <memset>

	if(sensor_values.actual_temperature >= 600){
 80014c4:	4b81      	ldr	r3, [pc, #516]	; (80016cc <update_OLED+0x2c4>)
 80014c6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b84      	ldr	r3, [pc, #528]	; (80016e0 <update_OLED+0x2d8>)
 80014d0:	f7ff fb40 	bl	8000b54 <__aeabi_dcmpge>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d00a      	beq.n	80014f0 <update_OLED+0xe8>
		Paint_DrawString_EN(3, 70, "---", &Font24, 0x0, 0xff);
 80014da:	23ff      	movs	r3, #255	; 0xff
 80014dc:	9301      	str	r3, [sp, #4]
 80014de:	2300      	movs	r3, #0
 80014e0:	9300      	str	r3, [sp, #0]
 80014e2:	4b7c      	ldr	r3, [pc, #496]	; (80016d4 <update_OLED+0x2cc>)
 80014e4:	4a7f      	ldr	r2, [pc, #508]	; (80016e4 <update_OLED+0x2dc>)
 80014e6:	2146      	movs	r1, #70	; 0x46
 80014e8:	2003      	movs	r0, #3
 80014ea:	f00a f963 	bl	800b7b4 <Paint_DrawString_EN>
 80014ee:	e010      	b.n	8001512 <update_OLED+0x10a>
	}
	else{
		sprintf(buffer, "%.f", sensor_values.actual_temperature);
 80014f0:	4b76      	ldr	r3, [pc, #472]	; (80016cc <update_OLED+0x2c4>)
 80014f2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80014f6:	4976      	ldr	r1, [pc, #472]	; (80016d0 <update_OLED+0x2c8>)
 80014f8:	4873      	ldr	r0, [pc, #460]	; (80016c8 <update_OLED+0x2c0>)
 80014fa:	f00b f957 	bl	800c7ac <siprintf>
		Paint_DrawString_EN(3, 70, buffer, &Font24, 0x0, 0xff);
 80014fe:	23ff      	movs	r3, #255	; 0xff
 8001500:	9301      	str	r3, [sp, #4]
 8001502:	2300      	movs	r3, #0
 8001504:	9300      	str	r3, [sp, #0]
 8001506:	4b73      	ldr	r3, [pc, #460]	; (80016d4 <update_OLED+0x2cc>)
 8001508:	4a6f      	ldr	r2, [pc, #444]	; (80016c8 <update_OLED+0x2c0>)
 800150a:	2146      	movs	r1, #70	; 0x46
 800150c:	2003      	movs	r0, #3
 800150e:	f00a f951 	bl	800b7b4 <Paint_DrawString_EN>
	}

	Paint_DrawCircle(67, 75, 2, WHITE, 1, DRAW_FILL_EMPTY);
 8001512:	2300      	movs	r3, #0
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	2301      	movs	r3, #1
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800151e:	2202      	movs	r2, #2
 8001520:	214b      	movs	r1, #75	; 0x4b
 8001522:	2043      	movs	r0, #67	; 0x43
 8001524:	f009 ff10 	bl	800b348 <Paint_DrawCircle>
	Paint_DrawString_EN(70, 70, "C", &Font24, 0x0, 0xff);
 8001528:	23ff      	movs	r3, #255	; 0xff
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	2300      	movs	r3, #0
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	4b68      	ldr	r3, [pc, #416]	; (80016d4 <update_OLED+0x2cc>)
 8001532:	4a69      	ldr	r2, [pc, #420]	; (80016d8 <update_OLED+0x2d0>)
 8001534:	2146      	movs	r1, #70	; 0x46
 8001536:	2046      	movs	r0, #70	; 0x46
 8001538:	f00a f93c 	bl	800b7b4 <Paint_DrawString_EN>
	Paint_DrawRectangle(1, 56, 100, 93 , WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 800153c:	2300      	movs	r3, #0
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	2301      	movs	r3, #1
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	235d      	movs	r3, #93	; 0x5d
 800154c:	2264      	movs	r2, #100	; 0x64
 800154e:	2138      	movs	r1, #56	; 0x38
 8001550:	2001      	movs	r0, #1
 8001552:	f009 fe75 	bl	800b240 <Paint_DrawRectangle>

	Paint_DrawString_EN(0, 96, "HANDLE:", &Font12, 0x00, 0xff);
 8001556:	23ff      	movs	r3, #255	; 0xff
 8001558:	9301      	str	r3, [sp, #4]
 800155a:	2300      	movs	r3, #0
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	4b62      	ldr	r3, [pc, #392]	; (80016e8 <update_OLED+0x2e0>)
 8001560:	4a62      	ldr	r2, [pc, #392]	; (80016ec <update_OLED+0x2e4>)
 8001562:	2160      	movs	r1, #96	; 0x60
 8001564:	2000      	movs	r0, #0
 8001566:	f00a f925 	bl	800b7b4 <Paint_DrawString_EN>
	if(handle == T210){
 800156a:	4b61      	ldr	r3, [pc, #388]	; (80016f0 <update_OLED+0x2e8>)
 800156c:	781b      	ldrb	r3, [r3, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d10a      	bne.n	8001588 <update_OLED+0x180>
		Paint_DrawString_EN(60, 96, "T210", &Font12, 0x00, 0xff);
 8001572:	23ff      	movs	r3, #255	; 0xff
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	2300      	movs	r3, #0
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	4b5b      	ldr	r3, [pc, #364]	; (80016e8 <update_OLED+0x2e0>)
 800157c:	4a5d      	ldr	r2, [pc, #372]	; (80016f4 <update_OLED+0x2ec>)
 800157e:	2160      	movs	r1, #96	; 0x60
 8001580:	203c      	movs	r0, #60	; 0x3c
 8001582:	f00a f917 	bl	800b7b4 <Paint_DrawString_EN>
 8001586:	e00d      	b.n	80015a4 <update_OLED+0x19c>
	}
	else if(handle == T245){
 8001588:	4b59      	ldr	r3, [pc, #356]	; (80016f0 <update_OLED+0x2e8>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d109      	bne.n	80015a4 <update_OLED+0x19c>
		Paint_DrawString_EN(60, 96, "T245", &Font12, 0x00, 0xff);
 8001590:	23ff      	movs	r3, #255	; 0xff
 8001592:	9301      	str	r3, [sp, #4]
 8001594:	2300      	movs	r3, #0
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	4b53      	ldr	r3, [pc, #332]	; (80016e8 <update_OLED+0x2e0>)
 800159a:	4a57      	ldr	r2, [pc, #348]	; (80016f8 <update_OLED+0x2f0>)
 800159c:	2160      	movs	r1, #96	; 0x60
 800159e:	203c      	movs	r0, #60	; 0x3c
 80015a0:	f00a f908 	bl	800b7b4 <Paint_DrawString_EN>
	}

	Paint_DrawString_EN(0, 109, "INPUT VOLTAGE:", &Font8, 0x00, 0xff);
 80015a4:	23ff      	movs	r3, #255	; 0xff
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	2300      	movs	r3, #0
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <update_OLED+0x2f4>)
 80015ae:	4a54      	ldr	r2, [pc, #336]	; (8001700 <update_OLED+0x2f8>)
 80015b0:	216d      	movs	r1, #109	; 0x6d
 80015b2:	2000      	movs	r0, #0
 80015b4:	f00a f8fe 	bl	800b7b4 <Paint_DrawString_EN>
	Paint_DrawString_EN(0, 118, "AMB TEMP:     POWER ->", &Font8, 0x00, 0xff);
 80015b8:	23ff      	movs	r3, #255	; 0xff
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4b4e      	ldr	r3, [pc, #312]	; (80016fc <update_OLED+0x2f4>)
 80015c2:	4a50      	ldr	r2, [pc, #320]	; (8001704 <update_OLED+0x2fc>)
 80015c4:	2176      	movs	r1, #118	; 0x76
 80015c6:	2000      	movs	r0, #0
 80015c8:	f00a f8f4 	bl	800b7b4 <Paint_DrawString_EN>

	memset(&buffer, '\0', sizeof(buffer));
 80015cc:	2228      	movs	r2, #40	; 0x28
 80015ce:	2100      	movs	r1, #0
 80015d0:	483d      	ldr	r0, [pc, #244]	; (80016c8 <update_OLED+0x2c0>)
 80015d2:	f00b f9e3 	bl	800c99c <memset>
	sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <update_OLED+0x2c4>)
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffdc 	bl	8000598 <__aeabi_f2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	4948      	ldr	r1, [pc, #288]	; (8001708 <update_OLED+0x300>)
 80015e6:	4838      	ldr	r0, [pc, #224]	; (80016c8 <update_OLED+0x2c0>)
 80015e8:	f00b f8e0 	bl	800c7ac <siprintf>
	Paint_DrawString_EN(75, 109, buffer, &Font8, 0x0, 0xff);
 80015ec:	23ff      	movs	r3, #255	; 0xff
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2300      	movs	r3, #0
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	4b41      	ldr	r3, [pc, #260]	; (80016fc <update_OLED+0x2f4>)
 80015f6:	4a34      	ldr	r2, [pc, #208]	; (80016c8 <update_OLED+0x2c0>)
 80015f8:	216d      	movs	r1, #109	; 0x6d
 80015fa:	204b      	movs	r0, #75	; 0x4b
 80015fc:	f00a f8da 	bl	800b7b4 <Paint_DrawString_EN>

	memset(&buffer, '\0', sizeof(buffer));
 8001600:	2228      	movs	r2, #40	; 0x28
 8001602:	2100      	movs	r1, #0
 8001604:	4830      	ldr	r0, [pc, #192]	; (80016c8 <update_OLED+0x2c0>)
 8001606:	f00b f9c9 	bl	800c99c <memset>
	sprintf(buffer, "%.1f", sensor_values.ambient_temperature);
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <update_OLED+0x2c4>)
 800160c:	69db      	ldr	r3, [r3, #28]
 800160e:	4618      	mov	r0, r3
 8001610:	f7fe ffc2 	bl	8000598 <__aeabi_f2d>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	493b      	ldr	r1, [pc, #236]	; (8001708 <update_OLED+0x300>)
 800161a:	482b      	ldr	r0, [pc, #172]	; (80016c8 <update_OLED+0x2c0>)
 800161c:	f00b f8c6 	bl	800c7ac <siprintf>
	Paint_DrawString_EN(45, 118, buffer, &Font8, 0x0, 0xff);
 8001620:	23ff      	movs	r3, #255	; 0xff
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	2300      	movs	r3, #0
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	4b34      	ldr	r3, [pc, #208]	; (80016fc <update_OLED+0x2f4>)
 800162a:	4a27      	ldr	r2, [pc, #156]	; (80016c8 <update_OLED+0x2c0>)
 800162c:	2176      	movs	r1, #118	; 0x76
 800162e:	202d      	movs	r0, #45	; 0x2d
 8001630:	f00a f8c0 	bl	800b7b4 <Paint_DrawString_EN>

	Paint_DrawRectangle(116, 25, 128, 128, WHITE, DOT_PIXEL_1X1, DRAW_FILL_EMPTY);
 8001634:	2300      	movs	r3, #0
 8001636:	9302      	str	r3, [sp, #8]
 8001638:	2301      	movs	r3, #1
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001640:	9300      	str	r3, [sp, #0]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	2280      	movs	r2, #128	; 0x80
 8001646:	2119      	movs	r1, #25
 8001648:	2074      	movs	r0, #116	; 0x74
 800164a:	f009 fdf9 	bl	800b240 <Paint_DrawRectangle>
	if(sensor_values.in_stand){
 800164e:	4b1f      	ldr	r3, [pc, #124]	; (80016cc <update_OLED+0x2c4>)
 8001650:	7e1b      	ldrb	r3, [r3, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d05e      	beq.n	8001714 <update_OLED+0x30c>
		Paint_DrawString_EN(116, 30,  "Z", &Font16, 0x00, 0xff);
 8001656:	23ff      	movs	r3, #255	; 0xff
 8001658:	9301      	str	r3, [sp, #4]
 800165a:	2300      	movs	r3, #0
 800165c:	9300      	str	r3, [sp, #0]
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <update_OLED+0x2b4>)
 8001660:	4a2a      	ldr	r2, [pc, #168]	; (800170c <update_OLED+0x304>)
 8001662:	211e      	movs	r1, #30
 8001664:	2074      	movs	r0, #116	; 0x74
 8001666:	f00a f8a5 	bl	800b7b4 <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 50,  "z", &Font16, 0x00, 0xff);
 800166a:	23ff      	movs	r3, #255	; 0xff
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	2300      	movs	r3, #0
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4b12      	ldr	r3, [pc, #72]	; (80016bc <update_OLED+0x2b4>)
 8001674:	4a26      	ldr	r2, [pc, #152]	; (8001710 <update_OLED+0x308>)
 8001676:	2132      	movs	r1, #50	; 0x32
 8001678:	2074      	movs	r0, #116	; 0x74
 800167a:	f00a f89b 	bl	800b7b4 <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 70,  "Z", &Font16, 0x00, 0xff);
 800167e:	23ff      	movs	r3, #255	; 0xff
 8001680:	9301      	str	r3, [sp, #4]
 8001682:	2300      	movs	r3, #0
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	4b0d      	ldr	r3, [pc, #52]	; (80016bc <update_OLED+0x2b4>)
 8001688:	4a20      	ldr	r2, [pc, #128]	; (800170c <update_OLED+0x304>)
 800168a:	2146      	movs	r1, #70	; 0x46
 800168c:	2074      	movs	r0, #116	; 0x74
 800168e:	f00a f891 	bl	800b7b4 <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 90,  "z", &Font16, 0x00, 0xff);
 8001692:	23ff      	movs	r3, #255	; 0xff
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	2300      	movs	r3, #0
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <update_OLED+0x2b4>)
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <update_OLED+0x308>)
 800169e:	215a      	movs	r1, #90	; 0x5a
 80016a0:	2074      	movs	r0, #116	; 0x74
 80016a2:	f00a f887 	bl	800b7b4 <Paint_DrawString_EN>
		Paint_DrawString_EN(116, 110, "z", &Font16, 0x00, 0xff);
 80016a6:	23ff      	movs	r3, #255	; 0xff
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	2300      	movs	r3, #0
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	4b03      	ldr	r3, [pc, #12]	; (80016bc <update_OLED+0x2b4>)
 80016b0:	4a17      	ldr	r2, [pc, #92]	; (8001710 <update_OLED+0x308>)
 80016b2:	216e      	movs	r1, #110	; 0x6e
 80016b4:	2074      	movs	r0, #116	; 0x74
 80016b6:	f00a f87d 	bl	800b7b4 <Paint_DrawString_EN>
 80016ba:	e04e      	b.n	800175a <update_OLED+0x352>
 80016bc:	20000038 	.word	0x20000038
 80016c0:	0800f788 	.word	0x0800f788
 80016c4:	0800f794 	.word	0x0800f794
 80016c8:	20000270 	.word	0x20000270
 80016cc:	200005c0 	.word	0x200005c0
 80016d0:	0800f7a0 	.word	0x0800f7a0
 80016d4:	20000040 	.word	0x20000040
 80016d8:	0800f7a4 	.word	0x0800f7a4
 80016dc:	0800f7a8 	.word	0x0800f7a8
 80016e0:	4082c000 	.word	0x4082c000
 80016e4:	0800f7b4 	.word	0x0800f7b4
 80016e8:	20000030 	.word	0x20000030
 80016ec:	0800f7b8 	.word	0x0800f7b8
 80016f0:	20000244 	.word	0x20000244
 80016f4:	0800f7c0 	.word	0x0800f7c0
 80016f8:	0800f7c8 	.word	0x0800f7c8
 80016fc:	20000048 	.word	0x20000048
 8001700:	0800f7d0 	.word	0x0800f7d0
 8001704:	0800f7e0 	.word	0x0800f7e0
 8001708:	0800f7f8 	.word	0x0800f7f8
 800170c:	0800f800 	.word	0x0800f800
 8001710:	0800f804 	.word	0x0800f804

	}
	else{
		Paint_DrawRectangle(116, 125-heater_power/10, 128, 128, WHITE, DOT_PIXEL_1X1, DRAW_FILL_FULL);
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <update_OLED+0x368>)
 8001716:	e9d3 0100 	ldrd	r0, r1, [r3]
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <update_OLED+0x36c>)
 8001720:	f7ff f8bc 	bl	800089c <__aeabi_ddiv>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	f04f 0000 	mov.w	r0, #0
 800172c:	4912      	ldr	r1, [pc, #72]	; (8001778 <update_OLED+0x370>)
 800172e:	f7fe fdd3 	bl	80002d8 <__aeabi_dsub>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4610      	mov	r0, r2
 8001738:	4619      	mov	r1, r3
 800173a:	f7ff fa5d 	bl	8000bf8 <__aeabi_d2uiz>
 800173e:	4603      	mov	r3, r0
 8001740:	b299      	uxth	r1, r3
 8001742:	2301      	movs	r3, #1
 8001744:	9302      	str	r3, [sp, #8]
 8001746:	2301      	movs	r3, #1
 8001748:	9301      	str	r3, [sp, #4]
 800174a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2380      	movs	r3, #128	; 0x80
 8001752:	2280      	movs	r2, #128	; 0x80
 8001754:	2074      	movs	r0, #116	; 0x74
 8001756:	f009 fd73 	bl	800b240 <Paint_DrawRectangle>
	}
	// Show image on page
	OLED_1in5_Display(black_image);
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <update_OLED+0x374>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f00a f9ab 	bl	800baba <OLED_1in5_Display>
	Paint_Clear(BLACK);
 8001764:	2000      	movs	r0, #0
 8001766:	f009 fb5b 	bl	800ae20 <Paint_Clear>
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	200005e0 	.word	0x200005e0
 8001774:	40240000 	.word	0x40240000
 8001778:	405f4000 	.word	0x405f4000
 800177c:	20000248 	.word	0x20000248

08001780 <get_set_temperature>:

/* Get encoder value (Set temp.) and limit */
void get_set_temperature(){
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
	if (TIM3->CNT <= MIN_SELECTABLE_TEMPERTURE) {TIM3->CNT = MIN_SELECTABLE_TEMPERTURE; }
 8001784:	4b0d      	ldr	r3, [pc, #52]	; (80017bc <get_set_temperature+0x3c>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001788:	2b14      	cmp	r3, #20
 800178a:	d802      	bhi.n	8001792 <get_set_temperature+0x12>
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <get_set_temperature+0x3c>)
 800178e:	2214      	movs	r2, #20
 8001790:	625a      	str	r2, [r3, #36]	; 0x24
	if (TIM3->CNT >= MAX_SELECTABLE_TEMPERTURE) {TIM3->CNT = MAX_SELECTABLE_TEMPERTURE; }
 8001792:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <get_set_temperature+0x3c>)
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 800179a:	d303      	bcc.n	80017a4 <get_set_temperature+0x24>
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <get_set_temperature+0x3c>)
 800179e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
	sensor_values.set_temperature = TIM3->CNT;
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <get_set_temperature+0x3c>)
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7fe fed3 	bl	8000554 <__aeabi_ui2d>
 80017ae:	4602      	mov	r2, r0
 80017b0:	460b      	mov	r3, r1
 80017b2:	4903      	ldr	r1, [pc, #12]	; (80017c0 <get_set_temperature+0x40>)
 80017b4:	e9c1 2300 	strd	r2, r3, [r1]
}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	40000400 	.word	0x40000400
 80017c0:	200005c0 	.word	0x200005c0

080017c4 <get_stand_status>:

void get_stand_status(){
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin (GPIOA, STAND_Pin) == 0){
 80017c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d0:	f004 fe32 	bl	8006438 <HAL_GPIO_ReadPin>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <get_stand_status+0x1e>
		sensor_values.in_stand = 1;
 80017da:	4b04      	ldr	r3, [pc, #16]	; (80017ec <get_stand_status+0x28>)
 80017dc:	2201      	movs	r2, #1
 80017de:	761a      	strb	r2, [r3, #24]
	}
	else{
		sensor_values.in_stand = 0;
	}
}
 80017e0:	e002      	b.n	80017e8 <get_stand_status+0x24>
		sensor_values.in_stand = 0;
 80017e2:	4b02      	ldr	r3, [pc, #8]	; (80017ec <get_stand_status+0x28>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	200005c0 	.word	0x200005c0

080017f0 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin (GPIOA, HANDLE_DETECTION_Pin) == 0){
 80017f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fc:	f004 fe1c 	bl	8006438 <HAL_GPIO_ReadPin>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <get_handle_type+0x48>
		handle = T210;
 8001806:	4b25      	ldr	r3, [pc, #148]	; (800189c <get_handle_type+0xac>)
 8001808:	2200      	movs	r2, #0
 800180a:	701a      	strb	r2, [r3, #0]
		max_power_watt = 60; //60W
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <get_handle_type+0xb0>)
 800180e:	4a25      	ldr	r2, [pc, #148]	; (80018a4 <get_handle_type+0xb4>)
 8001810:	601a      	str	r2, [r3, #0]
		Kp = 20;
 8001812:	4925      	ldr	r1, [pc, #148]	; (80018a8 <get_handle_type+0xb8>)
 8001814:	f04f 0200 	mov.w	r2, #0
 8001818:	4b24      	ldr	r3, [pc, #144]	; (80018ac <get_handle_type+0xbc>)
 800181a:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 60;
 800181e:	4924      	ldr	r1, [pc, #144]	; (80018b0 <get_handle_type+0xc0>)
 8001820:	f04f 0200 	mov.w	r2, #0
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <get_handle_type+0xc4>)
 8001826:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 800182a:	4923      	ldr	r1, [pc, #140]	; (80018b8 <get_handle_type+0xc8>)
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	4b22      	ldr	r3, [pc, #136]	; (80018bc <get_handle_type+0xcc>)
 8001832:	e9c1 2300 	strd	r2, r3, [r1]
 8001836:	e017      	b.n	8001868 <get_handle_type+0x78>
	}
	else{
		handle = T245;
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <get_handle_type+0xac>)
 800183a:	2201      	movs	r2, #1
 800183c:	701a      	strb	r2, [r3, #0]
		max_power_watt = 120; //120W
 800183e:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <get_handle_type+0xb0>)
 8001840:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <get_handle_type+0xd0>)
 8001842:	601a      	str	r2, [r3, #0]
		Kp = 30;
 8001844:	4918      	ldr	r1, [pc, #96]	; (80018a8 <get_handle_type+0xb8>)
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	4b1e      	ldr	r3, [pc, #120]	; (80018c4 <get_handle_type+0xd4>)
 800184c:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 60;
 8001850:	4917      	ldr	r1, [pc, #92]	; (80018b0 <get_handle_type+0xc0>)
 8001852:	f04f 0200 	mov.w	r2, #0
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <get_handle_type+0xc4>)
 8001858:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 1;
 800185c:	4916      	ldr	r1, [pc, #88]	; (80018b8 <get_handle_type+0xc8>)
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <get_handle_type+0xd8>)
 8001864:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <get_handle_type+0xb8>)
 800186a:	ed93 7b00 	vldr	d7, [r3]
 800186e:	4b10      	ldr	r3, [pc, #64]	; (80018b0 <get_handle_type+0xc0>)
 8001870:	ed93 6b00 	vldr	d6, [r3]
 8001874:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <get_handle_type+0xc8>)
 8001876:	ed93 5b00 	vldr	d5, [r3]
 800187a:	eeb0 2a45 	vmov.f32	s4, s10
 800187e:	eef0 2a65 	vmov.f32	s5, s11
 8001882:	eeb0 1a46 	vmov.f32	s2, s12
 8001886:	eef0 1a66 	vmov.f32	s3, s13
 800188a:	eeb0 0a47 	vmov.f32	s0, s14
 800188e:	eef0 0a67 	vmov.f32	s1, s15
 8001892:	480e      	ldr	r0, [pc, #56]	; (80018cc <get_handle_type+0xdc>)
 8001894:	f001 f953 	bl	8002b3e <PID_SetTunings>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000244 	.word	0x20000244
 80018a0:	20000298 	.word	0x20000298
 80018a4:	42700000 	.word	0x42700000
 80018a8:	20000018 	.word	0x20000018
 80018ac:	40340000 	.word	0x40340000
 80018b0:	20000260 	.word	0x20000260
 80018b4:	404e0000 	.word	0x404e0000
 80018b8:	20000268 	.word	0x20000268
 80018bc:	3fe00000 	.word	0x3fe00000
 80018c0:	42f00000 	.word	0x42f00000
 80018c4:	403e0000 	.word	0x403e0000
 80018c8:	3ff00000 	.word	0x3ff00000
 80018cc:	20000980 	.word	0x20000980

080018d0 <beep_ms>:

void beep_ms(int beep_time){
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  	TIM2->CCR1 = 50;
 80018d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018dc:	2232      	movs	r2, #50	; 0x32
 80018de:	635a      	str	r2, [r3, #52]	; 0x34
  	HAL_Delay(beep_time);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f001 ff24 	bl	8003730 <HAL_Delay>
  	TIM2->CCR1 = 0;
 80018e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018ec:	2200      	movs	r2, #0
 80018ee:	635a      	str	r2, [r3, #52]	; 0x34
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <HAL_TIM_IC_CaptureCallback>:
//void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
//    //HAL_GPIO_TogglePin(GPIOF, DEBUG_SIGNAL_A_Pin);
//}

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) {
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	7f1b      	ldrb	r3, [r3, #28]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d102      	bne.n	800190e <HAL_TIM_IC_CaptureCallback+0x16>
		beep_requested = 1;
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <HAL_TIM_IC_CaptureCallback+0x24>)
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
	}
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20000245 	.word	0x20000245

08001920 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	80fb      	strh	r3, [r7, #6]
	TIM17->CCR1 = dutycycle;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <set_heater_duty+0x1c>)
 800192c:	88fb      	ldrh	r3, [r7, #6]
 800192e:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	40014800 	.word	0x40014800

08001940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001944:	ed2d 8b04 	vpush	{d8-d9}
 8001948:	b08c      	sub	sp, #48	; 0x30
 800194a:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800194c:	f001 fe7f 	bl	800364e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001950:	f000 fa3a 	bl	8001dc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001954:	f000 fdb4 	bl	80024c0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001958:	f000 fd88 	bl	800246c <MX_DMA_Init>
  MX_TIM2_Init();
 800195c:	f000 fbcc 	bl	80020f8 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001960:	f000 fb8c 	bl	800207c <MX_SPI1_Init>
  MX_ADC1_Init();
 8001964:	f000 fa7c 	bl	8001e60 <MX_ADC1_Init>
  MX_TIM17_Init();
 8001968:	f000 fcba 	bl	80022e0 <MX_TIM17_Init>
  MX_USART2_UART_Init();
 800196c:	f000 fd32 	bl	80023d4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001970:	f000 fc38 	bl	80021e4 <MX_TIM3_Init>
  MX_TIM16_Init();
 8001974:	f000 fc8c 	bl	8002290 <MX_TIM16_Init>
  MX_I2C1_Init();
 8001978:	f000 fb40 	bl	8001ffc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 800197c:	213c      	movs	r1, #60	; 0x3c
 800197e:	48a6      	ldr	r0, [pc, #664]	; (8001c18 <main+0x2d8>)
 8001980:	f006 f992 	bl	8007ca8 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8001984:	2100      	movs	r1, #0
 8001986:	48a5      	ldr	r0, [pc, #660]	; (8001c1c <main+0x2dc>)
 8001988:	f005 ffe8 	bl	800795c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800198c:	2100      	movs	r1, #0
 800198e:	48a4      	ldr	r0, [pc, #656]	; (8001c20 <main+0x2e0>)
 8001990:	f005 ffe4 	bl	800795c <HAL_TIM_PWM_Start>
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001994:	217f      	movs	r1, #127	; 0x7f
 8001996:	48a3      	ldr	r0, [pc, #652]	; (8001c24 <main+0x2e4>)
 8001998:	f003 fe52 	bl	8005640 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC_buffer, ADC_BUF_LEN);	//Start ADC DMA
 800199c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80019a0:	49a1      	ldr	r1, [pc, #644]	; (8001c28 <main+0x2e8>)
 80019a2:	48a0      	ldr	r0, [pc, #640]	; (8001c24 <main+0x2e4>)
 80019a4:	f002 fbb2 	bl	800410c <HAL_ADC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	/* Init and fill filter structures with initial values */
	handle = T210;		// Default handle
 80019a8:	4ba0      	ldr	r3, [pc, #640]	; (8001c2c <main+0x2ec>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
	set_heater_duty(0);
 80019ae:	2000      	movs	r0, #0
 80019b0:	f7ff ffb6 	bl	8001920 <set_heater_duty>
	for (int i = 0; i<40;i++){
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
 80019b8:	e00b      	b.n	80019d2 <main+0x92>
		get_bus_voltage();
 80019ba:	f7ff fb55 	bl	8001068 <get_bus_voltage>
		get_ambient_temp();
 80019be:	f7ff fc83 	bl	80012c8 <get_ambient_temp>
		get_actual_temperature();
 80019c2:	f7ff fb79 	bl	80010b8 <get_actual_temperature>
		HAL_Delay(1);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f001 feb2 	bl	8003730 <HAL_Delay>
	for (int i = 0; i<40;i++){
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3301      	adds	r3, #1
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b27      	cmp	r3, #39	; 0x27
 80019d6:	ddf0      	ble.n	80019ba <main+0x7a>
	}

	/* Start-up beep */
	beep_ms(10);
 80019d8:	200a      	movs	r0, #10
 80019da:	f7ff ff79 	bl	80018d0 <beep_ms>
	HAL_Delay(100);
 80019de:	2064      	movs	r0, #100	; 0x64
 80019e0:	f001 fea6 	bl	8003730 <HAL_Delay>
	beep_ms(10);
 80019e4:	200a      	movs	r0, #10
 80019e6:	f7ff ff73 	bl	80018d0 <beep_ms>

	/* Initiate OLED display */
	init_OLED();
 80019ea:	f7ff fccf 	bl	800138c <init_OLED>

	/* If button is pressed during startup - Show SETTINGS and allow to release button. Then the user can choose between T210 and T245 handle */
	if (HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 0){
 80019ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f6:	f004 fd1f 	bl	8006438 <HAL_GPIO_ReadPin>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d155      	bne.n	8001aac <main+0x16c>
		Paint_DrawString_EN(0, 0, " SETTINGS ", &Font16, 0x00, 0xff);
 8001a00:	23ff      	movs	r3, #255	; 0xff
 8001a02:	9301      	str	r3, [sp, #4]
 8001a04:	2300      	movs	r3, #0
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	4b89      	ldr	r3, [pc, #548]	; (8001c30 <main+0x2f0>)
 8001a0a:	4a8a      	ldr	r2, [pc, #552]	; (8001c34 <main+0x2f4>)
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f009 fed0 	bl	800b7b4 <Paint_DrawString_EN>
		Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001a14:	2300      	movs	r3, #0
 8001a16:	9302      	str	r3, [sp, #8]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	9301      	str	r3, [sp, #4]
 8001a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2310      	movs	r3, #16
 8001a24:	227f      	movs	r2, #127	; 0x7f
 8001a26:	2110      	movs	r1, #16
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f009 fb4f 	bl	800b0cc <Paint_DrawLine>
		OLED_1in5_Display(black_image);
 8001a2e:	4b82      	ldr	r3, [pc, #520]	; (8001c38 <main+0x2f8>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f00a f841 	bl	800baba <OLED_1in5_Display>
		Paint_Clear(BLACK);
 8001a38:	2000      	movs	r0, #0
 8001a3a:	f009 f9f1 	bl	800ae20 <Paint_Clear>
		HAL_Delay(1000);
 8001a3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a42:	f001 fe75 	bl	8003730 <HAL_Delay>

		while(HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 1){
 8001a46:	e028      	b.n	8001a9a <main+0x15a>
			Paint_DrawString_EN(0, 0, " SETTINGS ", &Font16, 0x00, 0xff);
 8001a48:	23ff      	movs	r3, #255	; 0xff
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	4b77      	ldr	r3, [pc, #476]	; (8001c30 <main+0x2f0>)
 8001a52:	4a78      	ldr	r2, [pc, #480]	; (8001c34 <main+0x2f4>)
 8001a54:	2100      	movs	r1, #0
 8001a56:	2000      	movs	r0, #0
 8001a58:	f009 feac 	bl	800b7b4 <Paint_DrawString_EN>
			Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9302      	str	r3, [sp, #8]
 8001a60:	2302      	movs	r3, #2
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2310      	movs	r3, #16
 8001a6c:	227f      	movs	r2, #127	; 0x7f
 8001a6e:	2110      	movs	r1, #16
 8001a70:	2000      	movs	r0, #0
 8001a72:	f009 fb2b 	bl	800b0cc <Paint_DrawLine>

			Paint_DrawString_EN(3, 20, "Coming soon...:", &Font12, 0x00, 0xff);
 8001a76:	23ff      	movs	r3, #255	; 0xff
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	4b6f      	ldr	r3, [pc, #444]	; (8001c3c <main+0x2fc>)
 8001a80:	4a6f      	ldr	r2, [pc, #444]	; (8001c40 <main+0x300>)
 8001a82:	2114      	movs	r1, #20
 8001a84:	2003      	movs	r0, #3
 8001a86:	f009 fe95 	bl	800b7b4 <Paint_DrawString_EN>
			//else{
			//	Paint_DrawString_EN(55, 20, "T210", &Font12, 0x00, 0xff);
			//	Paint_DrawString_EN(90, 20, "T245", &Font12, 0xff, 0x00);
			//	handle = T245;
			//}
			OLED_1in5_Display(black_image);
 8001a8a:	4b6b      	ldr	r3, [pc, #428]	; (8001c38 <main+0x2f8>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f00a f813 	bl	800baba <OLED_1in5_Display>
			Paint_Clear(BLACK);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f009 f9c3 	bl	800ae20 <Paint_Clear>
		while(HAL_GPIO_ReadPin (GPIOA, ENC_BUTTON_Pin) == 1){
 8001a9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aa2:	f004 fcc9 	bl	8006438 <HAL_GPIO_ReadPin>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b01      	cmp	r3, #1
 8001aaa:	d0cd      	beq.n	8001a48 <main+0x108>
		}
	}

	/* Set initial encoder timer value */
	TIM3->CNT = 330;
 8001aac:	4b65      	ldr	r3, [pc, #404]	; (8001c44 <main+0x304>)
 8001aae:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8001ab2:	625a      	str	r2, [r3, #36]	; 0x24

	/* Startup beep */
	beep_ms(10);
 8001ab4:	200a      	movs	r0, #10
 8001ab6:	f7ff ff0b 	bl	80018d0 <beep_ms>

	/* Get handle-specific constants */
	get_handle_type();
 8001aba:	f7ff fe99 	bl	80017f0 <get_handle_type>

	/* Initiate PID controller */
	PID(&TPID, &sensor_values.actual_temperature, &heater_power, &sensor_values.set_temperature, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8001abe:	4b62      	ldr	r3, [pc, #392]	; (8001c48 <main+0x308>)
 8001ac0:	ed93 7b00 	vldr	d7, [r3]
 8001ac4:	4b61      	ldr	r3, [pc, #388]	; (8001c4c <main+0x30c>)
 8001ac6:	ed93 6b00 	vldr	d6, [r3]
 8001aca:	4b61      	ldr	r3, [pc, #388]	; (8001c50 <main+0x310>)
 8001acc:	ed93 5b00 	vldr	d5, [r3]
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	eeb0 2a45 	vmov.f32	s4, s10
 8001adc:	eef0 2a65 	vmov.f32	s5, s11
 8001ae0:	eeb0 1a46 	vmov.f32	s2, s12
 8001ae4:	eef0 1a66 	vmov.f32	s3, s13
 8001ae8:	eeb0 0a47 	vmov.f32	s0, s14
 8001aec:	eef0 0a67 	vmov.f32	s1, s15
 8001af0:	4b58      	ldr	r3, [pc, #352]	; (8001c54 <main+0x314>)
 8001af2:	4a59      	ldr	r2, [pc, #356]	; (8001c58 <main+0x318>)
 8001af4:	4959      	ldr	r1, [pc, #356]	; (8001c5c <main+0x31c>)
 8001af6:	485a      	ldr	r0, [pc, #360]	; (8001c60 <main+0x320>)
 8001af8:	f000 fde6 	bl	80026c8 <PID>
	PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001afc:	2101      	movs	r1, #1
 8001afe:	4858      	ldr	r0, [pc, #352]	; (8001c60 <main+0x320>)
 8001b00:	f000 ff71 	bl	80029e6 <PID_SetMode>
	PID_SetSampleTime(&TPID, 50);
 8001b04:	2132      	movs	r1, #50	; 0x32
 8001b06:	4856      	ldr	r0, [pc, #344]	; (8001c60 <main+0x320>)
 8001b08:	f001 f91c 	bl	8002d44 <PID_SetSampleTime>
	PID_SetOutputLimits(&TPID, 0, 1000); 	// Set max and min output limit
 8001b0c:	ed9f 1b38 	vldr	d1, [pc, #224]	; 8001bf0 <main+0x2b0>
 8001b10:	ed9f 0b39 	vldr	d0, [pc, #228]	; 8001bf8 <main+0x2b8>
 8001b14:	4852      	ldr	r0, [pc, #328]	; (8001c60 <main+0x320>)
 8001b16:	f000 ff84 	bl	8002a22 <PID_SetOutputLimits>
	PID_SetILimits(&TPID, -200, 200); 		// Set max and min I limit
 8001b1a:	ed9f 1b39 	vldr	d1, [pc, #228]	; 8001c00 <main+0x2c0>
 8001b1e:	ed9f 0b3a 	vldr	d0, [pc, #232]	; 8001c08 <main+0x2c8>
 8001b22:	484f      	ldr	r0, [pc, #316]	; (8001c60 <main+0x320>)
 8001b24:	f000 ffeb 	bl	8002afe <PID_SetILimits>

	while (1){
	/* beep if encoder value is changed */
	if(beep_requested){
 8001b28:	4b4e      	ldr	r3, [pc, #312]	; (8001c64 <main+0x324>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <main+0x1fc>
		beep_ms(5);
 8001b30:	2005      	movs	r0, #5
 8001b32:	f7ff fecd 	bl	80018d0 <beep_ms>
		beep_requested = 0;
 8001b36:	4b4b      	ldr	r3, [pc, #300]	; (8001c64 <main+0x324>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
	}

	// Set handle type depending on HANDLE_DETECTION_Pin status
	if(HAL_GetTick() - previous_millis_HANDLE_update >= interval_HANDLE_update){
 8001b3c:	f001 fdec 	bl	8003718 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	4b49      	ldr	r3, [pc, #292]	; (8001c68 <main+0x328>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	1ad2      	subs	r2, r2, r3
 8001b48:	4b48      	ldr	r3, [pc, #288]	; (8001c6c <main+0x32c>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d306      	bcc.n	8001b5e <main+0x21e>
		get_handle_type();
 8001b50:	f7ff fe4e 	bl	80017f0 <get_handle_type>
	previous_millis_HANDLE_update = HAL_GetTick();
 8001b54:	f001 fde0 	bl	8003718 <HAL_GetTick>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	4a43      	ldr	r2, [pc, #268]	; (8001c68 <main+0x328>)
 8001b5c:	6013      	str	r3, [r2, #0]
	}

	if(HAL_GetTick() - previous_millis_PID_update >= interval_PID_update){
 8001b5e:	f001 fddb 	bl	8003718 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	4b42      	ldr	r3, [pc, #264]	; (8001c70 <main+0x330>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	1ad2      	subs	r2, r2, r3
 8001b6a:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <main+0x334>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	f0c0 809e 	bcc.w	8001cb0 <main+0x370>
		get_set_temperature();
 8001b74:	f7ff fe04 	bl	8001780 <get_set_temperature>
		get_stand_status();
 8001b78:	f7ff fe24 	bl	80017c4 <get_stand_status>
		get_bus_voltage();
 8001b7c:	f7ff fa74 	bl	8001068 <get_bus_voltage>
		// ----------------------------------------------
		//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
		//sensor_values.set_temperature = temperature_custom;
		// ----------------------------------------------

		set_heater_duty(0);
 8001b80:	2000      	movs	r0, #0
 8001b82:	f7ff fecd 	bl	8001920 <set_heater_duty>
		HAL_Delay(10); // Wait to let the thermocouple voltage stabilize before taking measurement
 8001b86:	200a      	movs	r0, #10
 8001b88:	f001 fdd2 	bl	8003730 <HAL_Delay>
		get_actual_temperature();
 8001b8c:	f7ff fa94 	bl	80010b8 <get_actual_temperature>
		PID_Compute(&TPID);
 8001b90:	4833      	ldr	r0, [pc, #204]	; (8001c60 <main+0x320>)
 8001b92:	f000 fde5 	bl	8002760 <PID_Compute>

		/* If handle is not in stand - calculate duty cycle for PWM */
		if(!sensor_values.in_stand){
 8001b96:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <main+0x314>)
 8001b98:	7e1b      	ldrb	r3, [r3, #24]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d170      	bne.n	8001c80 <main+0x340>
			heater_power_duty_cycle = heater_power*(max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8001b9e:	4b36      	ldr	r3, [pc, #216]	; (8001c78 <main+0x338>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fcf8 	bl	8000598 <__aeabi_f2d>
 8001ba8:	a319      	add	r3, pc, #100	; (adr r3, 8001c10 <main+0x2d0>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe fd4b 	bl	8000648 <__aeabi_dmul>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4614      	mov	r4, r2
 8001bb8:	461d      	mov	r5, r3
 8001bba:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <main+0x314>)
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7fe fcea 	bl	8000598 <__aeabi_f2d>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4620      	mov	r0, r4
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f7fe fe66 	bl	800089c <__aeabi_ddiv>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4610      	mov	r0, r2
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <main+0x318>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7fe fd33 	bl	8000648 <__aeabi_dmul>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4925      	ldr	r1, [pc, #148]	; (8001c7c <main+0x33c>)
 8001be8:	e9c1 2300 	strd	r2, r3, [r1]
 8001bec:	e04f      	b.n	8001c8e <main+0x34e>
 8001bee:	bf00      	nop
 8001bf0:	00000000 	.word	0x00000000
 8001bf4:	408f4000 	.word	0x408f4000
	...
 8001c04:	40690000 	.word	0x40690000
 8001c08:	00000000 	.word	0x00000000
 8001c0c:	c0690000 	.word	0xc0690000
 8001c10:	eb851eb8 	.word	0xeb851eb8
 8001c14:	3fbeb851 	.word	0x3fbeb851
 8001c18:	2000080c 	.word	0x2000080c
 8001c1c:	200008a4 	.word	0x200008a4
 8001c20:	200007c0 	.word	0x200007c0
 8001c24:	20000644 	.word	0x20000644
 8001c28:	200002a0 	.word	0x200002a0
 8001c2c:	20000244 	.word	0x20000244
 8001c30:	20000038 	.word	0x20000038
 8001c34:	0800f808 	.word	0x0800f808
 8001c38:	20000248 	.word	0x20000248
 8001c3c:	20000030 	.word	0x20000030
 8001c40:	0800f814 	.word	0x0800f814
 8001c44:	40000400 	.word	0x40000400
 8001c48:	20000018 	.word	0x20000018
 8001c4c:	20000260 	.word	0x20000260
 8001c50:	20000268 	.word	0x20000268
 8001c54:	200005c0 	.word	0x200005c0
 8001c58:	200005e0 	.word	0x200005e0
 8001c5c:	200005c8 	.word	0x200005c8
 8001c60:	20000980 	.word	0x20000980
 8001c64:	20000245 	.word	0x20000245
 8001c68:	20000258 	.word	0x20000258
 8001c6c:	20000010 	.word	0x20000010
 8001c70:	20000254 	.word	0x20000254
 8001c74:	2000000c 	.word	0x2000000c
 8001c78:	20000298 	.word	0x20000298
 8001c7c:	200005e8 	.word	0x200005e8
		}
		/* If handle is in stand - set duty cycle for PWM to zero */
		else{
			heater_power_duty_cycle = 0;
 8001c80:	4944      	ldr	r1, [pc, #272]	; (8001d94 <main+0x454>)
 8001c82:	f04f 0200 	mov.w	r2, #0
 8001c86:	f04f 0300 	mov.w	r3, #0
 8001c8a:	e9c1 2300 	strd	r2, r3, [r1]
		}
		set_heater_duty(heater_power_duty_cycle);
 8001c8e:	4b41      	ldr	r3, [pc, #260]	; (8001d94 <main+0x454>)
 8001c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe ffae 	bl	8000bf8 <__aeabi_d2uiz>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	b29b      	uxth	r3, r3
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fe3d 	bl	8001920 <set_heater_duty>
		previous_millis_PID_update = HAL_GetTick();
 8001ca6:	f001 fd37 	bl	8003718 <HAL_GetTick>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4a3a      	ldr	r2, [pc, #232]	; (8001d98 <main+0x458>)
 8001cae:	6013      	str	r3, [r2, #0]
	}


	/* Send debug information over serial */
	if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8001cb0:	f001 fd32 	bl	8003718 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <main+0x45c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	1ad2      	subs	r2, r2, r3
 8001cbc:	4b38      	ldr	r3, [pc, #224]	; (8001da0 <main+0x460>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d352      	bcc.n	8001d6a <main+0x42a>
		memset(&buffer, '\0', sizeof(buffer));
 8001cc4:	2228      	movs	r2, #40	; 0x28
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	4836      	ldr	r0, [pc, #216]	; (8001da4 <main+0x464>)
 8001cca:	f00a fe67 	bl	800c99c <memset>
		sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n", sensor_values.actual_temperature, sensor_values.set_temperature, heater_power/10,
 8001cce:	4b36      	ldr	r3, [pc, #216]	; (8001da8 <main+0x468>)
 8001cd0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8001cd4:	4b34      	ldr	r3, [pc, #208]	; (8001da8 <main+0x468>)
 8001cd6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cda:	4b34      	ldr	r3, [pc, #208]	; (8001dac <main+0x46c>)
 8001cdc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	4b32      	ldr	r3, [pc, #200]	; (8001db0 <main+0x470>)
 8001ce6:	f7fe fdd9 	bl	800089c <__aeabi_ddiv>
 8001cea:	4602      	mov	r2, r0
 8001cec:	460b      	mov	r3, r1
 8001cee:	4692      	mov	sl, r2
 8001cf0:	469b      	mov	fp, r3
						PID_GetPpart(&TPID)/10, PID_GetIpart(&TPID)/10, PID_GetDpart(&TPID))/10;
 8001cf2:	4830      	ldr	r0, [pc, #192]	; (8001db4 <main+0x474>)
 8001cf4:	f001 f861 	bl	8002dba <PID_GetPpart>
 8001cf8:	ec51 0b10 	vmov	r0, r1, d0
		sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n", sensor_values.actual_temperature, sensor_values.set_temperature, heater_power/10,
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <main+0x470>)
 8001d02:	f7fe fdcb 	bl	800089c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	ec43 2b18 	vmov	d8, r2, r3
						PID_GetPpart(&TPID)/10, PID_GetIpart(&TPID)/10, PID_GetDpart(&TPID))/10;
 8001d0e:	4829      	ldr	r0, [pc, #164]	; (8001db4 <main+0x474>)
 8001d10:	f001 f865 	bl	8002dde <PID_GetIpart>
 8001d14:	ec51 0b10 	vmov	r0, r1, d0
		sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\n", sensor_values.actual_temperature, sensor_values.set_temperature, heater_power/10,
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	4b24      	ldr	r3, [pc, #144]	; (8001db0 <main+0x470>)
 8001d1e:	f7fe fdbd 	bl	800089c <__aeabi_ddiv>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ec43 2b19 	vmov	d9, r2, r3
 8001d2a:	4822      	ldr	r0, [pc, #136]	; (8001db4 <main+0x474>)
 8001d2c:	f001 f869 	bl	8002e02 <PID_GetDpart>
 8001d30:	eeb0 7a40 	vmov.f32	s14, s0
 8001d34:	eef0 7a60 	vmov.f32	s15, s1
 8001d38:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001d3c:	ed8d 9b06 	vstr	d9, [sp, #24]
 8001d40:	ed8d 8b04 	vstr	d8, [sp, #16]
 8001d44:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001d48:	e9cd 4500 	strd	r4, r5, [sp]
 8001d4c:	4642      	mov	r2, r8
 8001d4e:	464b      	mov	r3, r9
 8001d50:	4919      	ldr	r1, [pc, #100]	; (8001db8 <main+0x478>)
 8001d52:	4814      	ldr	r0, [pc, #80]	; (8001da4 <main+0x464>)
 8001d54:	f00a fd2a 	bl	800c7ac <siprintf>
		debugPrint(&huart2,buffer);
 8001d58:	4912      	ldr	r1, [pc, #72]	; (8001da4 <main+0x464>)
 8001d5a:	4818      	ldr	r0, [pc, #96]	; (8001dbc <main+0x47c>)
 8001d5c:	f7ff faf8 	bl	8001350 <debugPrint>
		previous_millis_debug = HAL_GetTick();
 8001d60:	f001 fcda 	bl	8003718 <HAL_GetTick>
 8001d64:	4603      	mov	r3, r0
 8001d66:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <main+0x45c>)
 8001d68:	6013      	str	r3, [r2, #0]
	}

	/* Update display */
	if(HAL_GetTick() - previous_millis_display >= interval_display){
 8001d6a:	f001 fcd5 	bl	8003718 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b13      	ldr	r3, [pc, #76]	; (8001dc0 <main+0x480>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	1ad2      	subs	r2, r2, r3
 8001d76:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <main+0x484>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	f4ff aed4 	bcc.w	8001b28 <main+0x1e8>
		get_ambient_temp();
 8001d80:	f7ff faa2 	bl	80012c8 <get_ambient_temp>
		update_OLED();
 8001d84:	f7ff fb40 	bl	8001408 <update_OLED>
		previous_millis_display = HAL_GetTick();
 8001d88:	f001 fcc6 	bl	8003718 <HAL_GetTick>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	4a0c      	ldr	r2, [pc, #48]	; (8001dc0 <main+0x480>)
 8001d90:	6013      	str	r3, [r2, #0]
	if(beep_requested){
 8001d92:	e6c9      	b.n	8001b28 <main+0x1e8>
 8001d94:	200005e8 	.word	0x200005e8
 8001d98:	20000254 	.word	0x20000254
 8001d9c:	20000250 	.word	0x20000250
 8001da0:	20000008 	.word	0x20000008
 8001da4:	20000270 	.word	0x20000270
 8001da8:	200005c0 	.word	0x200005c0
 8001dac:	200005e0 	.word	0x200005e0
 8001db0:	40240000 	.word	0x40240000
 8001db4:	20000980 	.word	0x20000980
 8001db8:	0800f824 	.word	0x0800f824
 8001dbc:	200008f0 	.word	0x200008f0
 8001dc0:	2000024c 	.word	0x2000024c
 8001dc4:	20000004 	.word	0x20000004

08001dc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b094      	sub	sp, #80	; 0x50
 8001dcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dce:	f107 0318 	add.w	r3, r7, #24
 8001dd2:	2238      	movs	r2, #56	; 0x38
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f00a fde0 	bl	800c99c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
 8001de8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001dea:	2000      	movs	r0, #0
 8001dec:	f004 fc7a 	bl	80066e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df0:	2302      	movs	r3, #2
 8001df2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001df4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dfa:	2340      	movs	r3, #64	; 0x40
 8001dfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e02:	2302      	movs	r3, #2
 8001e04:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e06:	2304      	movs	r3, #4
 8001e08:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e0a:	2355      	movs	r3, #85	; 0x55
 8001e0c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e12:	2302      	movs	r3, #2
 8001e14:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e16:	2302      	movs	r3, #2
 8001e18:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e1a:	f107 0318 	add.w	r3, r7, #24
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 fd14 	bl	800684c <HAL_RCC_OscConfig>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e2a:	f000 fbcd 	bl	80025c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e2e:	230f      	movs	r3, #15
 8001e30:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e32:	2303      	movs	r3, #3
 8001e34:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e42:	1d3b      	adds	r3, r7, #4
 8001e44:	2104      	movs	r1, #4
 8001e46:	4618      	mov	r0, r3
 8001e48:	f005 f818 	bl	8006e7c <HAL_RCC_ClockConfig>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e52:	f000 fbb9 	bl	80025c8 <Error_Handler>
  }
}
 8001e56:	bf00      	nop
 8001e58:	3750      	adds	r7, #80	; 0x50
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b092      	sub	sp, #72	; 0x48
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001e66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
  ADC_AnalogWDGConfTypeDef AnalogWDGConfig = {0};
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
 8001e80:	611a      	str	r2, [r3, #16]
 8001e82:	615a      	str	r2, [r3, #20]
 8001e84:	619a      	str	r2, [r3, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001e86:	463b      	mov	r3, r7
 8001e88:	2220      	movs	r2, #32
 8001e8a:	2100      	movs	r1, #0
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00a fd85 	bl	800c99c <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001e92:	4b54      	ldr	r3, [pc, #336]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001e94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001e98:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e9a:	4b52      	ldr	r3, [pc, #328]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001e9c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001ea0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ea2:	4b50      	ldr	r3, [pc, #320]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ea8:	4b4e      	ldr	r3, [pc, #312]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001eae:	4b4d      	ldr	r3, [pc, #308]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001eb4:	4b4b      	ldr	r3, [pc, #300]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001eb6:	2201      	movs	r2, #1
 8001eb8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eba:	4b4a      	ldr	r3, [pc, #296]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ec0:	4b48      	ldr	r3, [pc, #288]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ec6:	4b47      	ldr	r3, [pc, #284]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001ec8:	2201      	movs	r2, #1
 8001eca:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 8001ecc:	4b45      	ldr	r3, [pc, #276]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001ece:	2204      	movs	r2, #4
 8001ed0:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ed2:	4b44      	ldr	r3, [pc, #272]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001eda:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ee0:	4b40      	ldr	r3, [pc, #256]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ee6:	4b3f      	ldr	r3, [pc, #252]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001eee:	4b3d      	ldr	r3, [pc, #244]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001ef4:	4b3b      	ldr	r3, [pc, #236]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001efc:	4839      	ldr	r0, [pc, #228]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001efe:	f001 ff7b 	bl	8003df8 <HAL_ADC_Init>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f08:	f000 fb5e 	bl	80025c8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001f10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f14:	4619      	mov	r1, r3
 8001f16:	4833      	ldr	r0, [pc, #204]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001f18:	f003 fc26 	bl	8005768 <HAL_ADCEx_MultiModeConfigChannel>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001f22:	f000 fb51 	bl	80025c8 <Error_Handler>
  }

  /** Configure Analog WatchDog 1
  */
  AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 8001f26:	4b30      	ldr	r3, [pc, #192]	; (8001fe8 <MX_ADC1_Init+0x188>)
 8001f28:	623b      	str	r3, [r7, #32]
  AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_REG;
 8001f2a:	f44f 0340 	mov.w	r3, #12582912	; 0xc00000
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  AnalogWDGConfig.Channel = ADC_CHANNEL_2;
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <MX_ADC1_Init+0x18c>)
 8001f32:	62bb      	str	r3, [r7, #40]	; 0x28
  AnalogWDGConfig.ITMode = ENABLE;
 8001f34:	2301      	movs	r3, #1
 8001f36:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  AnalogWDGConfig.HighThreshold = 100;
 8001f3a:	2364      	movs	r3, #100	; 0x64
 8001f3c:	633b      	str	r3, [r7, #48]	; 0x30
  AnalogWDGConfig.LowThreshold = 0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	637b      	str	r3, [r7, #52]	; 0x34
  AnalogWDGConfig.FilteringConfig = ADC_AWD_FILTERING_NONE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK)
 8001f46:	f107 0320 	add.w	r3, r7, #32
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4825      	ldr	r0, [pc, #148]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001f4e:	f002 ffc3 	bl	8004ed8 <HAL_ADC_AnalogWDGConfig>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001f58:	f000 fb36 	bl	80025c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f5c:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <MX_ADC1_Init+0x190>)
 8001f5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001f60:	2306      	movs	r3, #6
 8001f62:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001f64:	2304      	movs	r3, #4
 8001f66:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001f68:	237f      	movs	r3, #127	; 0x7f
 8001f6a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001f6c:	2304      	movs	r3, #4
 8001f6e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f74:	463b      	mov	r3, r7
 8001f76:	4619      	mov	r1, r3
 8001f78:	481a      	ldr	r0, [pc, #104]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001f7a:	f002 fbbd 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_ADC1_Init+0x128>
  {
    Error_Handler();
 8001f84:	f000 fb20 	bl	80025c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001f88:	4b18      	ldr	r3, [pc, #96]	; (8001fec <MX_ADC1_Init+0x18c>)
 8001f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001f8c:	230c      	movs	r3, #12
 8001f8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f90:	463b      	mov	r3, r7
 8001f92:	4619      	mov	r1, r3
 8001f94:	4813      	ldr	r0, [pc, #76]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001f96:	f002 fbaf 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_ADC1_Init+0x144>
  {
    Error_Handler();
 8001fa0:	f000 fb12 	bl	80025c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001fa4:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <MX_ADC1_Init+0x194>)
 8001fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001fa8:	2312      	movs	r3, #18
 8001faa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fac:	463b      	mov	r3, r7
 8001fae:	4619      	mov	r1, r3
 8001fb0:	480c      	ldr	r0, [pc, #48]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001fb2:	f002 fba1 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_ADC1_Init+0x160>
  {
    Error_Handler();
 8001fbc:	f000 fb04 	bl	80025c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8001fc0:	4b0d      	ldr	r3, [pc, #52]	; (8001ff8 <MX_ADC1_Init+0x198>)
 8001fc2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001fc4:	2318      	movs	r3, #24
 8001fc6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001fc8:	463b      	mov	r3, r7
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <MX_ADC1_Init+0x184>)
 8001fce:	f002 fb93 	bl	80046f8 <HAL_ADC_ConfigChannel>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_ADC1_Init+0x17c>
  {
    Error_Handler();
 8001fd8:	f000 faf6 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001fdc:	bf00      	nop
 8001fde:	3748      	adds	r7, #72	; 0x48
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000644 	.word	0x20000644
 8001fe8:	7dc00000 	.word	0x7dc00000
 8001fec:	08600004 	.word	0x08600004
 8001ff0:	04300002 	.word	0x04300002
 8001ff4:	10c00010 	.word	0x10c00010
 8001ff8:	3ef08000 	.word	0x3ef08000

08001ffc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002000:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <MX_I2C1_Init+0x74>)
 8002002:	4a1c      	ldr	r2, [pc, #112]	; (8002074 <MX_I2C1_Init+0x78>)
 8002004:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <MX_I2C1_Init+0x74>)
 8002008:	4a1b      	ldr	r2, [pc, #108]	; (8002078 <MX_I2C1_Init+0x7c>)
 800200a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800200c:	4b18      	ldr	r3, [pc, #96]	; (8002070 <MX_I2C1_Init+0x74>)
 800200e:	2200      	movs	r2, #0
 8002010:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002012:	4b17      	ldr	r3, [pc, #92]	; (8002070 <MX_I2C1_Init+0x74>)
 8002014:	2201      	movs	r2, #1
 8002016:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002018:	4b15      	ldr	r3, [pc, #84]	; (8002070 <MX_I2C1_Init+0x74>)
 800201a:	2200      	movs	r2, #0
 800201c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <MX_I2C1_Init+0x74>)
 8002020:	2200      	movs	r2, #0
 8002022:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <MX_I2C1_Init+0x74>)
 8002026:	2200      	movs	r2, #0
 8002028:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800202a:	4b11      	ldr	r3, [pc, #68]	; (8002070 <MX_I2C1_Init+0x74>)
 800202c:	2200      	movs	r2, #0
 800202e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <MX_I2C1_Init+0x74>)
 8002032:	2200      	movs	r2, #0
 8002034:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002036:	480e      	ldr	r0, [pc, #56]	; (8002070 <MX_I2C1_Init+0x74>)
 8002038:	f004 fa2e 	bl	8006498 <HAL_I2C_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002042:	f000 fac1 	bl	80025c8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002046:	2100      	movs	r1, #0
 8002048:	4809      	ldr	r0, [pc, #36]	; (8002070 <MX_I2C1_Init+0x74>)
 800204a:	f004 fab4 	bl	80065b6 <HAL_I2CEx_ConfigAnalogFilter>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002054:	f000 fab8 	bl	80025c8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002058:	2100      	movs	r1, #0
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <MX_I2C1_Init+0x74>)
 800205c:	f004 faf6 	bl	800664c <HAL_I2CEx_ConfigDigitalFilter>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002066:	f000 faaf 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000710 	.word	0x20000710
 8002074:	40005400 	.word	0x40005400
 8002078:	30a0a7fb 	.word	0x30a0a7fb

0800207c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002080:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <MX_SPI1_Init+0x74>)
 8002082:	4a1c      	ldr	r2, [pc, #112]	; (80020f4 <MX_SPI1_Init+0x78>)
 8002084:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <MX_SPI1_Init+0x74>)
 8002088:	f44f 7282 	mov.w	r2, #260	; 0x104
 800208c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800208e:	4b18      	ldr	r3, [pc, #96]	; (80020f0 <MX_SPI1_Init+0x74>)
 8002090:	2200      	movs	r2, #0
 8002092:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002094:	4b16      	ldr	r3, [pc, #88]	; (80020f0 <MX_SPI1_Init+0x74>)
 8002096:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800209a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <MX_SPI1_Init+0x74>)
 800209e:	2202      	movs	r2, #2
 80020a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <MX_SPI1_Init+0x74>)
 80020a4:	2201      	movs	r2, #1
 80020a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_SPI1_Init+0x74>)
 80020aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <MX_SPI1_Init+0x74>)
 80020b2:	2218      	movs	r2, #24
 80020b4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_SPI1_Init+0x74>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_SPI1_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MX_SPI1_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_SPI1_Init+0x74>)
 80020ca:	2207      	movs	r2, #7
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MX_SPI1_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_SPI1_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_SPI1_Init+0x74>)
 80020dc:	f005 fada 	bl	8007694 <HAL_SPI_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80020e6:	f000 fa6f 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	2000075c 	.word	0x2000075c
 80020f4:	40013000 	.word	0x40013000

080020f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08e      	sub	sp, #56	; 0x38
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800210c:	f107 031c 	add.w	r3, r7, #28
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002118:	463b      	mov	r3, r7
 800211a:	2200      	movs	r2, #0
 800211c:	601a      	str	r2, [r3, #0]
 800211e:	605a      	str	r2, [r3, #4]
 8002120:	609a      	str	r2, [r3, #8]
 8002122:	60da      	str	r2, [r3, #12]
 8002124:	611a      	str	r2, [r3, #16]
 8002126:	615a      	str	r2, [r3, #20]
 8002128:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800212a:	4b2d      	ldr	r3, [pc, #180]	; (80021e0 <MX_TIM2_Init+0xe8>)
 800212c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002130:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 800-1;
 8002132:	4b2b      	ldr	r3, [pc, #172]	; (80021e0 <MX_TIM2_Init+0xe8>)
 8002134:	f240 321f 	movw	r2, #799	; 0x31f
 8002138:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <MX_TIM2_Init+0xe8>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 8002140:	4b27      	ldr	r3, [pc, #156]	; (80021e0 <MX_TIM2_Init+0xe8>)
 8002142:	2264      	movs	r2, #100	; 0x64
 8002144:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <MX_TIM2_Init+0xe8>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800214c:	4b24      	ldr	r3, [pc, #144]	; (80021e0 <MX_TIM2_Init+0xe8>)
 800214e:	2280      	movs	r2, #128	; 0x80
 8002150:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002152:	4823      	ldr	r0, [pc, #140]	; (80021e0 <MX_TIM2_Init+0xe8>)
 8002154:	f005 fb49 	bl	80077ea <HAL_TIM_Base_Init>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800215e:	f000 fa33 	bl	80025c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002166:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002168:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800216c:	4619      	mov	r1, r3
 800216e:	481c      	ldr	r0, [pc, #112]	; (80021e0 <MX_TIM2_Init+0xe8>)
 8002170:	f006 f8dc 	bl	800832c <HAL_TIM_ConfigClockSource>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800217a:	f000 fa25 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800217e:	4818      	ldr	r0, [pc, #96]	; (80021e0 <MX_TIM2_Init+0xe8>)
 8002180:	f005 fb8a 	bl	8007898 <HAL_TIM_PWM_Init>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800218a:	f000 fa1d 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4810      	ldr	r0, [pc, #64]	; (80021e0 <MX_TIM2_Init+0xe8>)
 800219e:	f006 fe2f 	bl	8008e00 <HAL_TIMEx_MasterConfigSynchronization>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80021a8:	f000 fa0e 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021ac:	2360      	movs	r3, #96	; 0x60
 80021ae:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021bc:	463b      	mov	r3, r7
 80021be:	2200      	movs	r2, #0
 80021c0:	4619      	mov	r1, r3
 80021c2:	4807      	ldr	r0, [pc, #28]	; (80021e0 <MX_TIM2_Init+0xe8>)
 80021c4:	f005 ff9e 	bl	8008104 <HAL_TIM_PWM_ConfigChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80021ce:	f000 f9fb 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80021d2:	4803      	ldr	r0, [pc, #12]	; (80021e0 <MX_TIM2_Init+0xe8>)
 80021d4:	f001 f824 	bl	8003220 <HAL_TIM_MspPostInit>

}
 80021d8:	bf00      	nop
 80021da:	3738      	adds	r7, #56	; 0x38
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	200007c0 	.word	0x200007c0

080021e4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	; 0x30
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80021ea:	f107 030c 	add.w	r3, r7, #12
 80021ee:	2224      	movs	r2, #36	; 0x24
 80021f0:	2100      	movs	r1, #0
 80021f2:	4618      	mov	r0, r3
 80021f4:	f00a fbd2 	bl	800c99c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021f8:	463b      	mov	r3, r7
 80021fa:	2200      	movs	r2, #0
 80021fc:	601a      	str	r2, [r3, #0]
 80021fe:	605a      	str	r2, [r3, #4]
 8002200:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002202:	4b21      	ldr	r3, [pc, #132]	; (8002288 <MX_TIM3_Init+0xa4>)
 8002204:	4a21      	ldr	r2, [pc, #132]	; (800228c <MX_TIM3_Init+0xa8>)
 8002206:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002208:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <MX_TIM3_Init+0xa4>)
 800220a:	2200      	movs	r2, #0
 800220c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800220e:	4b1e      	ldr	r3, [pc, #120]	; (8002288 <MX_TIM3_Init+0xa4>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002214:	4b1c      	ldr	r3, [pc, #112]	; (8002288 <MX_TIM3_Init+0xa4>)
 8002216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800221a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221c:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <MX_TIM3_Init+0xa4>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002222:	4b19      	ldr	r3, [pc, #100]	; (8002288 <MX_TIM3_Init+0xa4>)
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8002228:	2301      	movs	r3, #1
 800222a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800222c:	2300      	movs	r3, #0
 800222e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002230:	2301      	movs	r3, #1
 8002232:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002234:	2300      	movs	r3, #0
 8002236:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8002238:	230a      	movs	r3, #10
 800223a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800223c:	2300      	movs	r3, #0
 800223e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002240:	2301      	movs	r3, #1
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002244:	2300      	movs	r3, #0
 8002246:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8002248:	230a      	movs	r3, #10
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	4619      	mov	r1, r3
 8002252:	480d      	ldr	r0, [pc, #52]	; (8002288 <MX_TIM3_Init+0xa4>)
 8002254:	f005 fc82 	bl	8007b5c <HAL_TIM_Encoder_Init>
 8002258:	4603      	mov	r3, r0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800225e:	f000 f9b3 	bl	80025c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002266:	2300      	movs	r3, #0
 8002268:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800226a:	463b      	mov	r3, r7
 800226c:	4619      	mov	r1, r3
 800226e:	4806      	ldr	r0, [pc, #24]	; (8002288 <MX_TIM3_Init+0xa4>)
 8002270:	f006 fdc6 	bl	8008e00 <HAL_TIMEx_MasterConfigSynchronization>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800227a:	f000 f9a5 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800227e:	bf00      	nop
 8002280:	3730      	adds	r7, #48	; 0x30
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	2000080c 	.word	0x2000080c
 800228c:	40000400 	.word	0x40000400

08002290 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8002294:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <MX_TIM16_Init+0x48>)
 8002296:	4a11      	ldr	r2, [pc, #68]	; (80022dc <MX_TIM16_Init+0x4c>)
 8002298:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 16000-1;
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <MX_TIM16_Init+0x48>)
 800229c:	f643 627f 	movw	r2, #15999	; 0x3e7f
 80022a0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <MX_TIM16_Init+0x48>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 10000;
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <MX_TIM16_Init+0x48>)
 80022aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80022ae:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <MX_TIM16_Init+0x48>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80022b6:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <MX_TIM16_Init+0x48>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022bc:	4b06      	ldr	r3, [pc, #24]	; (80022d8 <MX_TIM16_Init+0x48>)
 80022be:	2280      	movs	r2, #128	; 0x80
 80022c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80022c2:	4805      	ldr	r0, [pc, #20]	; (80022d8 <MX_TIM16_Init+0x48>)
 80022c4:	f005 fa91 	bl	80077ea <HAL_TIM_Base_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80022ce:	f000 f97b 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	20000858 	.word	0x20000858
 80022dc:	40014400 	.word	0x40014400

080022e0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b094      	sub	sp, #80	; 0x50
 80022e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022e6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80022ea:	2200      	movs	r2, #0
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	605a      	str	r2, [r3, #4]
 80022f0:	609a      	str	r2, [r3, #8]
 80022f2:	60da      	str	r2, [r3, #12]
 80022f4:	611a      	str	r2, [r3, #16]
 80022f6:	615a      	str	r2, [r3, #20]
 80022f8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022fa:	463b      	mov	r3, r7
 80022fc:	2234      	movs	r2, #52	; 0x34
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f00a fb4b 	bl	800c99c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <MX_TIM17_Init+0xec>)
 8002308:	4a31      	ldr	r2, [pc, #196]	; (80023d0 <MX_TIM17_Init+0xf0>)
 800230a:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8-1;
 800230c:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <MX_TIM17_Init+0xec>)
 800230e:	2207      	movs	r2, #7
 8002310:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002312:	4b2e      	ldr	r3, [pc, #184]	; (80023cc <MX_TIM17_Init+0xec>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1000;
 8002318:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <MX_TIM17_Init+0xec>)
 800231a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800231e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <MX_TIM17_Init+0xec>)
 8002322:	2200      	movs	r2, #0
 8002324:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8002326:	4b29      	ldr	r3, [pc, #164]	; (80023cc <MX_TIM17_Init+0xec>)
 8002328:	2200      	movs	r2, #0
 800232a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <MX_TIM17_Init+0xec>)
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002332:	4826      	ldr	r0, [pc, #152]	; (80023cc <MX_TIM17_Init+0xec>)
 8002334:	f005 fa59 	bl	80077ea <HAL_TIM_Base_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 800233e:	f000 f943 	bl	80025c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8002342:	4822      	ldr	r0, [pc, #136]	; (80023cc <MX_TIM17_Init+0xec>)
 8002344:	f005 faa8 	bl	8007898 <HAL_TIM_PWM_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 800234e:	f000 f93b 	bl	80025c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002352:	2360      	movs	r3, #96	; 0x60
 8002354:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800235a:	2300      	movs	r3, #0
 800235c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800235e:	2300      	movs	r3, #0
 8002360:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002362:	2300      	movs	r3, #0
 8002364:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002366:	2300      	movs	r3, #0
 8002368:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800236a:	2300      	movs	r3, #0
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800236e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002372:	2200      	movs	r2, #0
 8002374:	4619      	mov	r1, r3
 8002376:	4815      	ldr	r0, [pc, #84]	; (80023cc <MX_TIM17_Init+0xec>)
 8002378:	f005 fec4 	bl	8008104 <HAL_TIM_PWM_ConfigChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8002382:	f000 f921 	bl	80025c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800238e:	2300      	movs	r3, #0
 8002390:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800239a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800239e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80023a8:	463b      	mov	r3, r7
 80023aa:	4619      	mov	r1, r3
 80023ac:	4807      	ldr	r0, [pc, #28]	; (80023cc <MX_TIM17_Init+0xec>)
 80023ae:	f006 fda9 	bl	8008f04 <HAL_TIMEx_ConfigBreakDeadTime>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d001      	beq.n	80023bc <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80023b8:	f000 f906 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80023bc:	4803      	ldr	r0, [pc, #12]	; (80023cc <MX_TIM17_Init+0xec>)
 80023be:	f000 ff2f 	bl	8003220 <HAL_TIM_MspPostInit>

}
 80023c2:	bf00      	nop
 80023c4:	3750      	adds	r7, #80	; 0x50
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	200008a4 	.word	0x200008a4
 80023d0:	40014800 	.word	0x40014800

080023d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80023d8:	4b22      	ldr	r3, [pc, #136]	; (8002464 <MX_USART2_UART_Init+0x90>)
 80023da:	4a23      	ldr	r2, [pc, #140]	; (8002468 <MX_USART2_UART_Init+0x94>)
 80023dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 256000;
 80023de:	4b21      	ldr	r3, [pc, #132]	; (8002464 <MX_USART2_UART_Init+0x90>)
 80023e0:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 80023e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80023e6:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <MX_USART2_UART_Init+0x90>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <MX_USART2_UART_Init+0x90>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <MX_USART2_UART_Init+0x90>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <MX_USART2_UART_Init+0x90>)
 80023fa:	220c      	movs	r2, #12
 80023fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023fe:	4b19      	ldr	r3, [pc, #100]	; (8002464 <MX_USART2_UART_Init+0x90>)
 8002400:	2200      	movs	r2, #0
 8002402:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002404:	4b17      	ldr	r3, [pc, #92]	; (8002464 <MX_USART2_UART_Init+0x90>)
 8002406:	2200      	movs	r2, #0
 8002408:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800240a:	4b16      	ldr	r3, [pc, #88]	; (8002464 <MX_USART2_UART_Init+0x90>)
 800240c:	2200      	movs	r2, #0
 800240e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002410:	4b14      	ldr	r3, [pc, #80]	; (8002464 <MX_USART2_UART_Init+0x90>)
 8002412:	2200      	movs	r2, #0
 8002414:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002416:	4b13      	ldr	r3, [pc, #76]	; (8002464 <MX_USART2_UART_Init+0x90>)
 8002418:	2200      	movs	r2, #0
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800241c:	4811      	ldr	r0, [pc, #68]	; (8002464 <MX_USART2_UART_Init+0x90>)
 800241e:	f006 fe57 	bl	80090d0 <HAL_UART_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002428:	f000 f8ce 	bl	80025c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800242c:	2100      	movs	r1, #0
 800242e:	480d      	ldr	r0, [pc, #52]	; (8002464 <MX_USART2_UART_Init+0x90>)
 8002430:	f008 f995 	bl	800a75e <HAL_UARTEx_SetTxFifoThreshold>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800243a:	f000 f8c5 	bl	80025c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800243e:	2100      	movs	r1, #0
 8002440:	4808      	ldr	r0, [pc, #32]	; (8002464 <MX_USART2_UART_Init+0x90>)
 8002442:	f008 f9ca 	bl	800a7da <HAL_UARTEx_SetRxFifoThreshold>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800244c:	f000 f8bc 	bl	80025c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002450:	4804      	ldr	r0, [pc, #16]	; (8002464 <MX_USART2_UART_Init+0x90>)
 8002452:	f008 f94b 	bl	800a6ec <HAL_UARTEx_DisableFifoMode>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800245c:	f000 f8b4 	bl	80025c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002460:	bf00      	nop
 8002462:	bd80      	pop	{r7, pc}
 8002464:	200008f0 	.word	0x200008f0
 8002468:	40004400 	.word	0x40004400

0800246c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <MX_DMA_Init+0x50>)
 8002474:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002476:	4a11      	ldr	r2, [pc, #68]	; (80024bc <MX_DMA_Init+0x50>)
 8002478:	f043 0304 	orr.w	r3, r3, #4
 800247c:	6493      	str	r3, [r2, #72]	; 0x48
 800247e:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <MX_DMA_Init+0x50>)
 8002480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002482:	f003 0304 	and.w	r3, r3, #4
 8002486:	607b      	str	r3, [r7, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800248a:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <MX_DMA_Init+0x50>)
 800248c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800248e:	4a0b      	ldr	r2, [pc, #44]	; (80024bc <MX_DMA_Init+0x50>)
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	6493      	str	r3, [r2, #72]	; 0x48
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <MX_DMA_Init+0x50>)
 8002498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249a:	f003 0301 	and.w	r3, r3, #1
 800249e:	603b      	str	r3, [r7, #0]
 80024a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	200b      	movs	r0, #11
 80024a8:	f003 fadd 	bl	8005a66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024ac:	200b      	movs	r0, #11
 80024ae:	f003 faf4 	bl	8005a9a <HAL_NVIC_EnableIRQ>

}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000

080024c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b088      	sub	sp, #32
 80024c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	2200      	movs	r2, #0
 80024cc:	601a      	str	r2, [r3, #0]
 80024ce:	605a      	str	r2, [r3, #4]
 80024d0:	609a      	str	r2, [r3, #8]
 80024d2:	60da      	str	r2, [r3, #12]
 80024d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024d6:	4b39      	ldr	r3, [pc, #228]	; (80025bc <MX_GPIO_Init+0xfc>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024da:	4a38      	ldr	r2, [pc, #224]	; (80025bc <MX_GPIO_Init+0xfc>)
 80024dc:	f043 0320 	orr.w	r3, r3, #32
 80024e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e2:	4b36      	ldr	r3, [pc, #216]	; (80025bc <MX_GPIO_Init+0xfc>)
 80024e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	60bb      	str	r3, [r7, #8]
 80024ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	4b33      	ldr	r3, [pc, #204]	; (80025bc <MX_GPIO_Init+0xfc>)
 80024f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f2:	4a32      	ldr	r2, [pc, #200]	; (80025bc <MX_GPIO_Init+0xfc>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024fa:	4b30      	ldr	r3, [pc, #192]	; (80025bc <MX_GPIO_Init+0xfc>)
 80024fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024fe:	f003 0301 	and.w	r3, r3, #1
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002506:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <MX_GPIO_Init+0xfc>)
 8002508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800250a:	4a2c      	ldr	r2, [pc, #176]	; (80025bc <MX_GPIO_Init+0xfc>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002512:	4b2a      	ldr	r3, [pc, #168]	; (80025bc <MX_GPIO_Init+0xfc>)
 8002514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	603b      	str	r3, [r7, #0]
 800251c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, DEBUG_SIGNAL_A_Pin|DEBUG_SIGNAL_B_Pin, GPIO_PIN_RESET);
 800251e:	2200      	movs	r2, #0
 8002520:	2103      	movs	r1, #3
 8002522:	4827      	ldr	r0, [pc, #156]	; (80025c0 <MX_GPIO_Init+0x100>)
 8002524:	f003 ffa0 	bl	8006468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_DC_GPIO_Port, SPI_DC_Pin, GPIO_PIN_RESET);
 8002528:	2200      	movs	r2, #0
 800252a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800252e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002532:	f003 ff99 	bl	8006468 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_RST_Pin|SPI_CS_Pin, GPIO_PIN_RESET);
 8002536:	2200      	movs	r2, #0
 8002538:	2150      	movs	r1, #80	; 0x50
 800253a:	4822      	ldr	r0, [pc, #136]	; (80025c4 <MX_GPIO_Init+0x104>)
 800253c:	f003 ff94 	bl	8006468 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_SIGNAL_A_Pin DEBUG_SIGNAL_B_Pin */
  GPIO_InitStruct.Pin = DEBUG_SIGNAL_A_Pin|DEBUG_SIGNAL_B_Pin;
 8002540:	2303      	movs	r3, #3
 8002542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254c:	2300      	movs	r3, #0
 800254e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002550:	f107 030c 	add.w	r3, r7, #12
 8002554:	4619      	mov	r1, r3
 8002556:	481a      	ldr	r0, [pc, #104]	; (80025c0 <MX_GPIO_Init+0x100>)
 8002558:	f003 fdec 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_BUTTON_Pin STAND_Pin HANDLE_DETECTION_Pin */
  GPIO_InitStruct.Pin = ENC_BUTTON_Pin|STAND_Pin|HANDLE_DETECTION_Pin;
 800255c:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002560:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002562:	2300      	movs	r3, #0
 8002564:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256a:	f107 030c 	add.w	r3, r7, #12
 800256e:	4619      	mov	r1, r3
 8002570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002574:	f003 fdde 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI_DC_Pin */
  GPIO_InitStruct.Pin = SPI_DC_Pin;
 8002578:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800257e:	2301      	movs	r3, #1
 8002580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002582:	2300      	movs	r3, #0
 8002584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002586:	2300      	movs	r3, #0
 8002588:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI_DC_GPIO_Port, &GPIO_InitStruct);
 800258a:	f107 030c 	add.w	r3, r7, #12
 800258e:	4619      	mov	r1, r3
 8002590:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002594:	f003 fdce 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_RST_Pin SPI_CS_Pin */
  GPIO_InitStruct.Pin = SPI_RST_Pin|SPI_CS_Pin;
 8002598:	2350      	movs	r3, #80	; 0x50
 800259a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800259c:	2301      	movs	r3, #1
 800259e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025a8:	f107 030c 	add.w	r3, r7, #12
 80025ac:	4619      	mov	r1, r3
 80025ae:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_GPIO_Init+0x104>)
 80025b0:	f003 fdc0 	bl	8006134 <HAL_GPIO_Init>

}
 80025b4:	bf00      	nop
 80025b6:	3720      	adds	r7, #32
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	40021000 	.word	0x40021000
 80025c0:	48001400 	.word	0x48001400
 80025c4:	48000400 	.word	0x48000400

080025c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025cc:	b672      	cpsid	i
}
 80025ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025d0:	e7fe      	b.n	80025d0 <Error_Handler+0x8>
	...

080025d4 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	441a      	add	r2, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	615a      	str	r2, [r3, #20]
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	695a      	ldr	r2, [r3, #20]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	6999      	ldr	r1, [r3, #24]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80025f8:	1ad2      	subs	r2, r2, r3
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	615a      	str	r2, [r3, #20]
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	699a      	ldr	r2, [r3, #24]
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	6879      	ldr	r1, [r7, #4]
 8002606:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	if(filter_struct->WindowPointer < WindowLength - 1)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b03      	cmp	r3, #3
 8002610:	d805      	bhi.n	800261e <Moving_Average_Compute+0x4a>
	{
		filter_struct->WindowPointer += 1;
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	699b      	ldr	r3, [r3, #24]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	619a      	str	r2, [r3, #24]
 800261c:	e002      	b.n	8002624 <Moving_Average_Compute+0x50>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	2200      	movs	r2, #0
 8002622:	619a      	str	r2, [r3, #24]
	}
	return filter_struct->Sum/5.0;
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	4618      	mov	r0, r3
 800262a:	f7fd ff93 	bl	8000554 <__aeabi_ui2d>
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	4b07      	ldr	r3, [pc, #28]	; (8002650 <Moving_Average_Compute+0x7c>)
 8002634:	f7fe f932 	bl	800089c <__aeabi_ddiv>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	ec43 2b17 	vmov	d7, r2, r3
}
 8002640:	eeb0 0a47 	vmov.f32	s0, s14
 8002644:	eef0 0a67 	vmov.f32	s1, s15
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	40140000 	.word	0x40140000

08002654 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002664:	6879      	ldr	r1, [r7, #4]
 8002666:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002684:	f7fe fa70 	bl	8000b68 <__aeabi_dcmpgt>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d006      	beq.n	800269c <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 800269a:	e011      	b.n	80026c0 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80026a8:	f7fe fa40 	bl	8000b2c <__aeabi_dcmplt>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d100      	bne.n	80026b4 <PID_Init+0x60>
}
 80026b2:	e005      	b.n	80026c0 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 80026c0:	bf00      	nop
 80026c2:	3708      	adds	r7, #8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6278      	str	r0, [r7, #36]	; 0x24
 80026d0:	6239      	str	r1, [r7, #32]
 80026d2:	61fa      	str	r2, [r7, #28]
 80026d4:	61bb      	str	r3, [r7, #24]
 80026d6:	ed87 0b04 	vstr	d0, [r7, #16]
 80026da:	ed87 1b02 	vstr	d1, [r7, #8]
 80026de:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	69fa      	ldr	r2, [r7, #28]
 80026e6:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	6a3a      	ldr	r2, [r7, #32]
 80026ec:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 80026ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	2200      	movs	r2, #0
 80026f8:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 80026fa:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002750 <PID+0x88>
 80026fe:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002758 <PID+0x90>
 8002702:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002704:	f000 f98d 	bl	8002a22 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	2264      	movs	r2, #100	; 0x64
 800270c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 800270e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002712:	4619      	mov	r1, r3
 8002714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002716:	f000 fad5 	bl	8002cc4 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 800271a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800271e:	4619      	mov	r1, r3
 8002720:	ed97 2b00 	vldr	d2, [r7]
 8002724:	ed97 1b02 	vldr	d1, [r7, #8]
 8002728:	ed97 0b04 	vldr	d0, [r7, #16]
 800272c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800272e:	f000 fa21 	bl	8002b74 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002732:	f000 fff1 	bl	8003718 <HAL_GetTick>
 8002736:	4602      	mov	r2, r0
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	1ad2      	subs	r2, r2, r3
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	605a      	str	r2, [r3, #4]

}
 8002742:	bf00      	nop
 8002744:	3728      	adds	r7, #40	; 0x28
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	f3af 8000 	nop.w
 8002750:	00000000 	.word	0x00000000
 8002754:	406fe000 	.word	0x406fe000
	...

08002760 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002764:	b08c      	sub	sp, #48	; 0x30
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	785b      	ldrb	r3, [r3, #1]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <PID_Compute+0x16>
	{
		return _FALSE;
 8002772:	2300      	movs	r3, #0
 8002774:	e132      	b.n	80029dc <PID_Compute+0x27c>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002776:	f000 ffcf 	bl	8003718 <HAL_GetTick>
 800277a:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	6a3a      	ldr	r2, [r7, #32]
 800278c:	429a      	cmp	r2, r3
 800278e:	f0c0 8124 	bcc.w	80029da <PID_Compute+0x27a>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279a:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027a6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027aa:	f7fd fd95 	bl	80002d8 <__aeabi_dsub>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 80027bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80027c0:	f7fd fd8a 	bl	80002d8 <__aeabi_dsub>
 80027c4:	4602      	mov	r2, r0
 80027c6:	460b      	mov	r3, r1
 80027c8:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80027d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80027dc:	f7fd ff34 	bl	8000648 <__aeabi_dmul>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4650      	mov	r0, sl
 80027e6:	4659      	mov	r1, fp
 80027e8:	f7fd fd78 	bl	80002dc <__adddf3>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	6879      	ldr	r1, [r7, #4]
 80027f2:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002802:	f7fe f9b1 	bl	8000b68 <__aeabi_dcmpgt>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d006      	beq.n	800281a <PID_Compute+0xba>
				{
					uPID->OutputSum = uPID->IMax;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002818:	e010      	b.n	800283c <PID_Compute+0xdc>
				}
		else if (uPID->OutputSum < uPID->IMin)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002826:	f7fe f981 	bl	8000b2c <__aeabi_dcmplt>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <PID_Compute+0xdc>
		{
			uPID->OutputSum = uPID->IMin;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d114      	bne.n	800287a <PID_Compute+0x11a>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800285c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002860:	f7fd fef2 	bl	8000648 <__aeabi_dmul>
 8002864:	4602      	mov	r2, r0
 8002866:	460b      	mov	r3, r1
 8002868:	4650      	mov	r0, sl
 800286a:	4659      	mov	r1, fp
 800286c:	f7fd fd34 	bl	80002d8 <__aeabi_dsub>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	6879      	ldr	r1, [r7, #4]
 8002876:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002886:	f7fe f96f 	bl	8000b68 <__aeabi_dcmpgt>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d006      	beq.n	800289e <PID_Compute+0x13e>
		{
			uPID->OutputSum = uPID->OutMax;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800289c:	e010      	b.n	80028c0 <PID_Compute+0x160>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80028aa:	f7fe f93f 	bl	8000b2c <__aeabi_dcmplt>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d005      	beq.n	80028c0 <PID_Compute+0x160>
		{
			uPID->OutputSum = uPID->OutMin;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80028ba:	6879      	ldr	r1, [r7, #4]
 80028bc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80028c6:	4690      	mov	r8, r2
 80028c8:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80028cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80028d0:	4640      	mov	r0, r8
 80028d2:	4649      	mov	r1, r9
 80028d4:	f7fd feb8 	bl	8000648 <__aeabi_dmul>
 80028d8:	4602      	mov	r2, r0
 80028da:	460b      	mov	r3, r1
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d017      	beq.n	800291a <PID_Compute+0x1ba>
		{
			output = uPID->Kp * error;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80028f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80028f4:	f7fd fea8 	bl	8000648 <__aeabi_dmul>
 80028f8:	4602      	mov	r2, r0
 80028fa:	460b      	mov	r3, r1
 80028fc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002906:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800290a:	f7fd fe9d 	bl	8000648 <__aeabi_dmul>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8002918:	e005      	b.n	8002926 <PID_Compute+0x1c6>
		}
		else
		{
			output = 0;
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002932:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002936:	f7fd fe87 	bl	8000648 <__aeabi_dmul>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4640      	mov	r0, r8
 8002940:	4649      	mov	r1, r9
 8002942:	f7fd fcc9 	bl	80002d8 <__aeabi_dsub>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800294e:	f7fd fcc5 	bl	80002dc <__adddf3>
 8002952:	4602      	mov	r2, r0
 8002954:	460b      	mov	r3, r1
 8002956:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002960:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002964:	f7fe f900 	bl	8000b68 <__aeabi_dcmpgt>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d005      	beq.n	800297a <PID_Compute+0x21a>
		{
			output = uPID->OutMax;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002974:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002978:	e00e      	b.n	8002998 <PID_Compute+0x238>
		}
		else if (output < uPID->OutMin)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002980:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002984:	f7fe f8d2 	bl	8000b2c <__aeabi_dcmplt>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d004      	beq.n	8002998 <PID_Compute+0x238>
		{
			output = uPID->OutMin;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002994:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800299e:	4614      	mov	r4, r2
 80029a0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80029a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a8:	4620      	mov	r0, r4
 80029aa:	4629      	mov	r1, r5
 80029ac:	f7fd fe4c 	bl	8000648 <__aeabi_dmul>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80029be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029c2:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80029cc:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d4:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <PID_Compute+0x27c>

	}
	else
	{
		return _FALSE;
 80029da:	2300      	movs	r3, #0
	}

}
 80029dc:	4618      	mov	r0, r3
 80029de:	3730      	adds	r7, #48	; 0x30
 80029e0:	46bd      	mov	sp, r7
 80029e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080029e6 <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80029e6:	b580      	push	{r7, lr}
 80029e8:	b084      	sub	sp, #16
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	460b      	mov	r3, r1
 80029f0:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80029f2:	78fb      	ldrb	r3, [r7, #3]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	bf0c      	ite	eq
 80029f8:	2301      	moveq	r3, #1
 80029fa:	2300      	movne	r3, #0
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d006      	beq.n	8002a14 <PID_SetMode+0x2e>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	785b      	ldrb	r3, [r3, #1]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d102      	bne.n	8002a14 <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f7ff fe20 	bl	8002654 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	705a      	strb	r2, [r3, #1]

}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b086      	sub	sp, #24
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6178      	str	r0, [r7, #20]
 8002a2a:	ed87 0b02 	vstr	d0, [r7, #8]
 8002a2e:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002a32:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002a3a:	f7fe f88b 	bl	8000b54 <__aeabi_dcmpge>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d158      	bne.n	8002af6 <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 8002a44:	6979      	ldr	r1, [r7, #20]
 8002a46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002a4a:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 8002a4e:	6979      	ldr	r1, [r7, #20]
 8002a50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a54:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	785b      	ldrb	r3, [r3, #1]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d04b      	beq.n	8002af8 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002a6e:	f7fe f87b 	bl	8000b68 <__aeabi_dcmpgt>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d007      	beq.n	8002a88 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002a82:	e9c1 2300 	strd	r2, r3, [r1]
 8002a86:	e012      	b.n	8002aae <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a8c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002a96:	f7fe f849 	bl	8000b2c <__aeabi_dcmplt>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d006      	beq.n	8002aae <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002aaa:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002aba:	f7fe f855 	bl	8000b68 <__aeabi_dcmpgt>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d006      	beq.n	8002ad2 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002aca:	6979      	ldr	r1, [r7, #20]
 8002acc:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002ad0:	e012      	b.n	8002af8 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002ade:	f7fe f825 	bl	8000b2c <__aeabi_dcmplt>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d007      	beq.n	8002af8 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002aee:	6979      	ldr	r1, [r7, #20]
 8002af0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002af4:	e000      	b.n	8002af8 <PID_SetOutputLimits+0xd6>
		return;
 8002af6:	bf00      	nop
		}
		else { }

	}

}
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6178      	str	r0, [r7, #20]
 8002b06:	ed87 0b02 	vstr	d0, [r7, #8]
 8002b0a:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8002b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b12:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b16:	f7fe f81d 	bl	8000b54 <__aeabi_dcmpge>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d10a      	bne.n	8002b36 <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8002b20:	6979      	ldr	r1, [r7, #20]
 8002b22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b26:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8002b2a:	6979      	ldr	r1, [r7, #20]
 8002b2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002b30:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 8002b34:	e000      	b.n	8002b38 <PID_SetILimits+0x3a>
		return;
 8002b36:	bf00      	nop
}
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b088      	sub	sp, #32
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	61f8      	str	r0, [r7, #28]
 8002b46:	ed87 0b04 	vstr	d0, [r7, #16]
 8002b4a:	ed87 1b02 	vstr	d1, [r7, #8]
 8002b4e:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	789b      	ldrb	r3, [r3, #2]
 8002b56:	4619      	mov	r1, r3
 8002b58:	ed97 2b00 	vldr	d2, [r7]
 8002b5c:	ed97 1b02 	vldr	d1, [r7, #8]
 8002b60:	ed97 0b04 	vldr	d0, [r7, #16]
 8002b64:	69f8      	ldr	r0, [r7, #28]
 8002b66:	f000 f805 	bl	8002b74 <PID_SetTunings2>
}
 8002b6a:	bf00      	nop
 8002b6c:	3720      	adds	r7, #32
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
	...

08002b74 <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	61f8      	str	r0, [r7, #28]
 8002b7c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002b80:	ed87 1b02 	vstr	d1, [r7, #8]
 8002b84:	ed87 2b00 	vstr	d2, [r7]
 8002b88:	460b      	mov	r3, r1
 8002b8a:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002b98:	f7fd ffc8 	bl	8000b2c <__aeabi_dcmplt>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f040 8089 	bne.w	8002cb6 <PID_SetTunings2+0x142>
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002bb0:	f7fd ffbc 	bl	8000b2c <__aeabi_dcmplt>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d17d      	bne.n	8002cb6 <PID_SetTunings2+0x142>
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f04f 0300 	mov.w	r3, #0
 8002bc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002bc6:	f7fd ffb1 	bl	8000b2c <__aeabi_dcmplt>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d172      	bne.n	8002cb6 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	7efa      	ldrb	r2, [r7, #27]
 8002bd4:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 8002bd6:	7efb      	ldrb	r3, [r7, #27]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	461a      	mov	r2, r3
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8002be8:	69f9      	ldr	r1, [r7, #28]
 8002bea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002bee:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 8002bf2:	69f9      	ldr	r1, [r7, #28]
 8002bf4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002bf8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8002bfc:	69f9      	ldr	r1, [r7, #28]
 8002bfe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002c02:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fca2 	bl	8000554 <__aeabi_ui2d>
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	4b2a      	ldr	r3, [pc, #168]	; (8002cc0 <PID_SetTunings2+0x14c>)
 8002c16:	f7fd fe41 	bl	800089c <__aeabi_ddiv>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8002c22:	69f9      	ldr	r1, [r7, #28]
 8002c24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002c28:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8002c2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002c34:	f7fd fd08 	bl	8000648 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	69f9      	ldr	r1, [r7, #28]
 8002c3e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8002c42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002c46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002c4a:	f7fd fe27 	bl	800089c <__aeabi_ddiv>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	460b      	mov	r3, r1
 8002c52:	69f9      	ldr	r1, [r7, #28]
 8002c54:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	78db      	ldrb	r3, [r3, #3]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d12b      	bne.n	8002cb8 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002c66:	f04f 0000 	mov.w	r0, #0
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	f7fd fb33 	bl	80002d8 <__aeabi_dsub>
 8002c72:	4602      	mov	r2, r0
 8002c74:	460b      	mov	r3, r1
 8002c76:	69f9      	ldr	r1, [r7, #28]
 8002c78:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002c82:	f04f 0000 	mov.w	r0, #0
 8002c86:	f04f 0100 	mov.w	r1, #0
 8002c8a:	f7fd fb25 	bl	80002d8 <__aeabi_dsub>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	69f9      	ldr	r1, [r7, #28]
 8002c94:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002c9e:	f04f 0000 	mov.w	r0, #0
 8002ca2:	f04f 0100 	mov.w	r1, #0
 8002ca6:	f7fd fb17 	bl	80002d8 <__aeabi_dsub>
 8002caa:	4602      	mov	r2, r0
 8002cac:	460b      	mov	r3, r1
 8002cae:	69f9      	ldr	r1, [r7, #28]
 8002cb0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8002cb4:	e000      	b.n	8002cb8 <PID_SetTunings2+0x144>
		return;
 8002cb6:	bf00      	nop

	}

}
 8002cb8:	3728      	adds	r7, #40	; 0x28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	408f4000 	.word	0x408f4000

08002cc4 <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	785b      	ldrb	r3, [r3, #1]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d02e      	beq.n	8002d36 <PID_SetControllerDirection+0x72>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	78db      	ldrb	r3, [r3, #3]
 8002cdc:	78fa      	ldrb	r2, [r7, #3]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d029      	beq.n	8002d36 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002ce8:	f04f 0000 	mov.w	r0, #0
 8002cec:	f04f 0100 	mov.w	r1, #0
 8002cf0:	f7fd faf2 	bl	80002d8 <__aeabi_dsub>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	6879      	ldr	r1, [r7, #4]
 8002cfa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002d04:	f04f 0000 	mov.w	r0, #0
 8002d08:	f04f 0100 	mov.w	r1, #0
 8002d0c:	f7fd fae4 	bl	80002d8 <__aeabi_dsub>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002d20:	f04f 0000 	mov.w	r0, #0
 8002d24:	f04f 0100 	mov.w	r1, #0
 8002d28:	f7fd fad6 	bl	80002d8 <__aeabi_dsub>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	460b      	mov	r3, r1
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	70da      	strb	r2, [r3, #3]

}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8002d44:	b5b0      	push	{r4, r5, r7, lr}
 8002d46:	b084      	sub	sp, #16
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	dd2e      	ble.n	8002db2 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8002d54:	6838      	ldr	r0, [r7, #0]
 8002d56:	f7fd fc0d 	bl	8000574 <__aeabi_i2d>
 8002d5a:	4604      	mov	r4, r0
 8002d5c:	460d      	mov	r5, r1
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7fd fbf6 	bl	8000554 <__aeabi_ui2d>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f7fd fd94 	bl	800089c <__aeabi_ddiv>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002d82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d86:	f7fd fc5f 	bl	8000648 <__aeabi_dmul>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	6879      	ldr	r1, [r7, #4]
 8002d90:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002d9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d9e:	f7fd fd7d 	bl	800089c <__aeabi_ddiv>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	609a      	str	r2, [r3, #8]

	}

}
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bdb0      	pop	{r4, r5, r7, pc}

08002dba <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8002dba:	b480      	push	{r7}
 8002dbc:	b083      	sub	sp, #12
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8002dc8:	ec43 2b17 	vmov	d7, r2, r3
}
 8002dcc:	eeb0 0a47 	vmov.f32	s0, s14
 8002dd0:	eef0 0a67 	vmov.f32	s1, s15
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr

08002dde <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8002dde:	b480      	push	{r7}
 8002de0:	b083      	sub	sp, #12
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8002dec:	ec43 2b17 	vmov	d7, r2, r3
}
 8002df0:	eeb0 0a47 	vmov.f32	s0, s14
 8002df4:	eef0 0a67 	vmov.f32	s1, s15
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b083      	sub	sp, #12
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 8002e10:	ec43 2b17 	vmov	d7, r2, r3
}
 8002e14:	eeb0 0a47 	vmov.f32	s0, s14
 8002e18:	eef0 0a67 	vmov.f32	s1, s15
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
	...

08002e28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e2e:	4b0f      	ldr	r3, [pc, #60]	; (8002e6c <HAL_MspInit+0x44>)
 8002e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e32:	4a0e      	ldr	r2, [pc, #56]	; (8002e6c <HAL_MspInit+0x44>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6613      	str	r3, [r2, #96]	; 0x60
 8002e3a:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <HAL_MspInit+0x44>)
 8002e3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	607b      	str	r3, [r7, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <HAL_MspInit+0x44>)
 8002e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e4a:	4a08      	ldr	r2, [pc, #32]	; (8002e6c <HAL_MspInit+0x44>)
 8002e4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e50:	6593      	str	r3, [r2, #88]	; 0x58
 8002e52:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <HAL_MspInit+0x44>)
 8002e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002e5e:	f003 fce5 	bl	800682c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b09c      	sub	sp, #112	; 0x70
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e78:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	605a      	str	r2, [r3, #4]
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	60da      	str	r2, [r3, #12]
 8002e86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002e88:	f107 0318 	add.w	r3, r7, #24
 8002e8c:	2244      	movs	r2, #68	; 0x44
 8002e8e:	2100      	movs	r1, #0
 8002e90:	4618      	mov	r0, r3
 8002e92:	f009 fd83 	bl	800c99c <memset>
  if(hadc->Instance==ADC1)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e9e:	d17f      	bne.n	8002fa0 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002ea0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ea4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002ea6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002eaa:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002eac:	f107 0318 	add.w	r3, r7, #24
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f004 f9ff 	bl	80072b4 <HAL_RCCEx_PeriphCLKConfig>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d001      	beq.n	8002ec0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002ebc:	f7ff fb84 	bl	80025c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002ec0:	4b39      	ldr	r3, [pc, #228]	; (8002fa8 <HAL_ADC_MspInit+0x138>)
 8002ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ec4:	4a38      	ldr	r2, [pc, #224]	; (8002fa8 <HAL_ADC_MspInit+0x138>)
 8002ec6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ecc:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_ADC_MspInit+0x138>)
 8002ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed4:	617b      	str	r3, [r7, #20]
 8002ed6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed8:	4b33      	ldr	r3, [pc, #204]	; (8002fa8 <HAL_ADC_MspInit+0x138>)
 8002eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002edc:	4a32      	ldr	r2, [pc, #200]	; (8002fa8 <HAL_ADC_MspInit+0x138>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ee4:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <HAL_ADC_MspInit+0x138>)
 8002ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ef0:	4b2d      	ldr	r3, [pc, #180]	; (8002fa8 <HAL_ADC_MspInit+0x138>)
 8002ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef4:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <HAL_ADC_MspInit+0x138>)
 8002ef6:	f043 0302 	orr.w	r3, r3, #2
 8002efa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002efc:	4b2a      	ldr	r3, [pc, #168]	; (8002fa8 <HAL_ADC_MspInit+0x138>)
 8002efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = THERMOCOUPLE_Pin|CURRENT_Pin|AMBIENT_TEMP_Pin;
 8002f08:	230b      	movs	r3, #11
 8002f0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f10:	2300      	movs	r3, #0
 8002f12:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f14:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f18:	4619      	mov	r1, r3
 8002f1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f1e:	f003 f909 	bl	8006134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUSVOLTAGE_Pin;
 8002f22:	2301      	movs	r3, #1
 8002f24:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f26:	2303      	movs	r3, #3
 8002f28:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(BUSVOLTAGE_GPIO_Port, &GPIO_InitStruct);
 8002f2e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f32:	4619      	mov	r1, r3
 8002f34:	481d      	ldr	r0, [pc, #116]	; (8002fac <HAL_ADC_MspInit+0x13c>)
 8002f36:	f003 f8fd 	bl	8006134 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002f3a:	4b1d      	ldr	r3, [pc, #116]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f3c:	4a1d      	ldr	r2, [pc, #116]	; (8002fb4 <HAL_ADC_MspInit+0x144>)
 8002f3e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f42:	2205      	movs	r2, #5
 8002f44:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002f46:	4b1a      	ldr	r3, [pc, #104]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f48:	2200      	movs	r2, #0
 8002f4a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f4c:	4b18      	ldr	r3, [pc, #96]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f4e:	2200      	movs	r2, #0
 8002f50:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002f52:	4b17      	ldr	r3, [pc, #92]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f54:	2280      	movs	r2, #128	; 0x80
 8002f56:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002f58:	4b15      	ldr	r3, [pc, #84]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f5e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002f60:	4b13      	ldr	r3, [pc, #76]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f66:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002f68:	4b11      	ldr	r3, [pc, #68]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002f74:	480e      	ldr	r0, [pc, #56]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f76:	f002 fdab 	bl	8005ad0 <HAL_DMA_Init>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8002f80:	f7ff fb22 	bl	80025c8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a0a      	ldr	r2, [pc, #40]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
 8002f8a:	4a09      	ldr	r2, [pc, #36]	; (8002fb0 <HAL_ADC_MspInit+0x140>)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002f90:	2200      	movs	r2, #0
 8002f92:	2100      	movs	r1, #0
 8002f94:	2012      	movs	r0, #18
 8002f96:	f002 fd66 	bl	8005a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002f9a:	2012      	movs	r0, #18
 8002f9c:	f002 fd7d 	bl	8005a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002fa0:	bf00      	nop
 8002fa2:	3770      	adds	r7, #112	; 0x70
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	48000400 	.word	0x48000400
 8002fb0:	200006b0 	.word	0x200006b0
 8002fb4:	40020008 	.word	0x40020008

08002fb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b09a      	sub	sp, #104	; 0x68
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]
 8002fc8:	605a      	str	r2, [r3, #4]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fd0:	f107 0310 	add.w	r3, r7, #16
 8002fd4:	2244      	movs	r2, #68	; 0x44
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f009 fcdf 	bl	800c99c <memset>
  if(hi2c->Instance==I2C1)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1f      	ldr	r2, [pc, #124]	; (8003060 <HAL_I2C_MspInit+0xa8>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d136      	bne.n	8003056 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002fe8:	2340      	movs	r3, #64	; 0x40
 8002fea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002fec:	2300      	movs	r3, #0
 8002fee:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ff0:	f107 0310 	add.w	r3, r7, #16
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f004 f95d 	bl	80072b4 <HAL_RCCEx_PeriphCLKConfig>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003000:	f7ff fae2 	bl	80025c8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003004:	4b17      	ldr	r3, [pc, #92]	; (8003064 <HAL_I2C_MspInit+0xac>)
 8003006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003008:	4a16      	ldr	r2, [pc, #88]	; (8003064 <HAL_I2C_MspInit+0xac>)
 800300a:	f043 0302 	orr.w	r3, r3, #2
 800300e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003010:	4b14      	ldr	r3, [pc, #80]	; (8003064 <HAL_I2C_MspInit+0xac>)
 8003012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800301c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003020:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003022:	2312      	movs	r3, #18
 8003024:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003026:	2300      	movs	r3, #0
 8003028:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800302a:	2300      	movs	r3, #0
 800302c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800302e:	2304      	movs	r3, #4
 8003030:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003032:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003036:	4619      	mov	r1, r3
 8003038:	480b      	ldr	r0, [pc, #44]	; (8003068 <HAL_I2C_MspInit+0xb0>)
 800303a:	f003 f87b 	bl	8006134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800303e:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_I2C_MspInit+0xac>)
 8003040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003042:	4a08      	ldr	r2, [pc, #32]	; (8003064 <HAL_I2C_MspInit+0xac>)
 8003044:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003048:	6593      	str	r3, [r2, #88]	; 0x58
 800304a:	4b06      	ldr	r3, [pc, #24]	; (8003064 <HAL_I2C_MspInit+0xac>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800304e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003052:	60bb      	str	r3, [r7, #8]
 8003054:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003056:	bf00      	nop
 8003058:	3768      	adds	r7, #104	; 0x68
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40005400 	.word	0x40005400
 8003064:	40021000 	.word	0x40021000
 8003068:	48000400 	.word	0x48000400

0800306c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a17      	ldr	r2, [pc, #92]	; (80030e8 <HAL_SPI_MspInit+0x7c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d127      	bne.n	80030de <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_SPI_MspInit+0x80>)
 8003090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003092:	4a16      	ldr	r2, [pc, #88]	; (80030ec <HAL_SPI_MspInit+0x80>)
 8003094:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003098:	6613      	str	r3, [r2, #96]	; 0x60
 800309a:	4b14      	ldr	r3, [pc, #80]	; (80030ec <HAL_SPI_MspInit+0x80>)
 800309c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800309e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a2:	613b      	str	r3, [r7, #16]
 80030a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030a6:	4b11      	ldr	r3, [pc, #68]	; (80030ec <HAL_SPI_MspInit+0x80>)
 80030a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030aa:	4a10      	ldr	r2, [pc, #64]	; (80030ec <HAL_SPI_MspInit+0x80>)
 80030ac:	f043 0302 	orr.w	r3, r3, #2
 80030b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030b2:	4b0e      	ldr	r3, [pc, #56]	; (80030ec <HAL_SPI_MspInit+0x80>)
 80030b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 80030be:	2328      	movs	r3, #40	; 0x28
 80030c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c2:	2302      	movs	r3, #2
 80030c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ca:	2300      	movs	r3, #0
 80030cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030ce:	2305      	movs	r3, #5
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030d2:	f107 0314 	add.w	r3, r7, #20
 80030d6:	4619      	mov	r1, r3
 80030d8:	4805      	ldr	r0, [pc, #20]	; (80030f0 <HAL_SPI_MspInit+0x84>)
 80030da:	f003 f82b 	bl	8006134 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80030de:	bf00      	nop
 80030e0:	3728      	adds	r7, #40	; 0x28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40013000 	.word	0x40013000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	48000400 	.word	0x48000400

080030f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003104:	d10c      	bne.n	8003120 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003106:	4b1e      	ldr	r3, [pc, #120]	; (8003180 <HAL_TIM_Base_MspInit+0x8c>)
 8003108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_TIM_Base_MspInit+0x8c>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6593      	str	r3, [r2, #88]	; 0x58
 8003112:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_TIM_Base_MspInit+0x8c>)
 8003114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800311e:	e02a      	b.n	8003176 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a17      	ldr	r2, [pc, #92]	; (8003184 <HAL_TIM_Base_MspInit+0x90>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d114      	bne.n	8003154 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800312a:	4b15      	ldr	r3, [pc, #84]	; (8003180 <HAL_TIM_Base_MspInit+0x8c>)
 800312c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800312e:	4a14      	ldr	r2, [pc, #80]	; (8003180 <HAL_TIM_Base_MspInit+0x8c>)
 8003130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003134:	6613      	str	r3, [r2, #96]	; 0x60
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_TIM_Base_MspInit+0x8c>)
 8003138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	613b      	str	r3, [r7, #16]
 8003140:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003142:	2200      	movs	r2, #0
 8003144:	2100      	movs	r1, #0
 8003146:	2019      	movs	r0, #25
 8003148:	f002 fc8d 	bl	8005a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800314c:	2019      	movs	r0, #25
 800314e:	f002 fca4 	bl	8005a9a <HAL_NVIC_EnableIRQ>
}
 8003152:	e010      	b.n	8003176 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a0b      	ldr	r2, [pc, #44]	; (8003188 <HAL_TIM_Base_MspInit+0x94>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10b      	bne.n	8003176 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800315e:	4b08      	ldr	r3, [pc, #32]	; (8003180 <HAL_TIM_Base_MspInit+0x8c>)
 8003160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003162:	4a07      	ldr	r2, [pc, #28]	; (8003180 <HAL_TIM_Base_MspInit+0x8c>)
 8003164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003168:	6613      	str	r3, [r2, #96]	; 0x60
 800316a:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_TIM_Base_MspInit+0x8c>)
 800316c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800316e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	68fb      	ldr	r3, [r7, #12]
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	40014400 	.word	0x40014400
 8003188:	40014800 	.word	0x40014800

0800318c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1b      	ldr	r2, [pc, #108]	; (8003218 <HAL_TIM_Encoder_MspInit+0x8c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d130      	bne.n	8003210 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80031ae:	4b1b      	ldr	r3, [pc, #108]	; (800321c <HAL_TIM_Encoder_MspInit+0x90>)
 80031b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b2:	4a1a      	ldr	r2, [pc, #104]	; (800321c <HAL_TIM_Encoder_MspInit+0x90>)
 80031b4:	f043 0302 	orr.w	r3, r3, #2
 80031b8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ba:	4b18      	ldr	r3, [pc, #96]	; (800321c <HAL_TIM_Encoder_MspInit+0x90>)
 80031bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031c6:	4b15      	ldr	r3, [pc, #84]	; (800321c <HAL_TIM_Encoder_MspInit+0x90>)
 80031c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ca:	4a14      	ldr	r2, [pc, #80]	; (800321c <HAL_TIM_Encoder_MspInit+0x90>)
 80031cc:	f043 0301 	orr.w	r3, r3, #1
 80031d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80031d2:	4b12      	ldr	r3, [pc, #72]	; (800321c <HAL_TIM_Encoder_MspInit+0x90>)
 80031d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80031de:	2350      	movs	r3, #80	; 0x50
 80031e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031e2:	2302      	movs	r3, #2
 80031e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ea:	2300      	movs	r3, #0
 80031ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80031ee:	2302      	movs	r3, #2
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031f2:	f107 0314 	add.w	r3, r7, #20
 80031f6:	4619      	mov	r1, r3
 80031f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031fc:	f002 ff9a 	bl	8006134 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003200:	2200      	movs	r2, #0
 8003202:	2100      	movs	r1, #0
 8003204:	201d      	movs	r0, #29
 8003206:	f002 fc2e 	bl	8005a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800320a:	201d      	movs	r0, #29
 800320c:	f002 fc45 	bl	8005a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003210:	bf00      	nop
 8003212:	3728      	adds	r7, #40	; 0x28
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	40000400 	.word	0x40000400
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	; 0x28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003240:	d11d      	bne.n	800327e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003242:	4b22      	ldr	r3, [pc, #136]	; (80032cc <HAL_TIM_MspPostInit+0xac>)
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	4a21      	ldr	r2, [pc, #132]	; (80032cc <HAL_TIM_MspPostInit+0xac>)
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800324e:	4b1f      	ldr	r3, [pc, #124]	; (80032cc <HAL_TIM_MspPostInit+0xac>)
 8003250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	613b      	str	r3, [r7, #16]
 8003258:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 800325a:	2320      	movs	r3, #32
 800325c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800325e:	2302      	movs	r3, #2
 8003260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003262:	2300      	movs	r3, #0
 8003264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003266:	2300      	movs	r3, #0
 8003268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800326a:	2301      	movs	r3, #1
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800326e:	f107 0314 	add.w	r3, r7, #20
 8003272:	4619      	mov	r1, r3
 8003274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003278:	f002 ff5c 	bl	8006134 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800327c:	e021      	b.n	80032c2 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a13      	ldr	r2, [pc, #76]	; (80032d0 <HAL_TIM_MspPostInit+0xb0>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d11c      	bne.n	80032c2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003288:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_TIM_MspPostInit+0xac>)
 800328a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800328c:	4a0f      	ldr	r2, [pc, #60]	; (80032cc <HAL_TIM_MspPostInit+0xac>)
 800328e:	f043 0301 	orr.w	r3, r3, #1
 8003292:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003294:	4b0d      	ldr	r3, [pc, #52]	; (80032cc <HAL_TIM_MspPostInit+0xac>)
 8003296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEATER_Pin;
 80032a0:	2380      	movs	r3, #128	; 0x80
 80032a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032a4:	2302      	movs	r3, #2
 80032a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a8:	2300      	movs	r3, #0
 80032aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ac:	2300      	movs	r3, #0
 80032ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM17;
 80032b0:	2301      	movs	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	4619      	mov	r1, r3
 80032ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032be:	f002 ff39 	bl	8006134 <HAL_GPIO_Init>
}
 80032c2:	bf00      	nop
 80032c4:	3728      	adds	r7, #40	; 0x28
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40014800 	.word	0x40014800

080032d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b09a      	sub	sp, #104	; 0x68
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
 80032ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80032ec:	f107 0310 	add.w	r3, r7, #16
 80032f0:	2244      	movs	r2, #68	; 0x44
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f009 fb51 	bl	800c99c <memset>
  if(huart->Instance==USART2)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a23      	ldr	r2, [pc, #140]	; (800338c <HAL_UART_MspInit+0xb8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d13f      	bne.n	8003384 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003304:	2302      	movs	r3, #2
 8003306:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800330c:	f107 0310 	add.w	r3, r7, #16
 8003310:	4618      	mov	r0, r3
 8003312:	f003 ffcf 	bl	80072b4 <HAL_RCCEx_PeriphCLKConfig>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800331c:	f7ff f954 	bl	80025c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003320:	4b1b      	ldr	r3, [pc, #108]	; (8003390 <HAL_UART_MspInit+0xbc>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	4a1a      	ldr	r2, [pc, #104]	; (8003390 <HAL_UART_MspInit+0xbc>)
 8003326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332a:	6593      	str	r3, [r2, #88]	; 0x58
 800332c:	4b18      	ldr	r3, [pc, #96]	; (8003390 <HAL_UART_MspInit+0xbc>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003338:	4b15      	ldr	r3, [pc, #84]	; (8003390 <HAL_UART_MspInit+0xbc>)
 800333a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800333c:	4a14      	ldr	r2, [pc, #80]	; (8003390 <HAL_UART_MspInit+0xbc>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_UART_MspInit+0xbc>)
 8003346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003348:	f003 0301 	and.w	r3, r3, #1
 800334c:	60bb      	str	r3, [r7, #8]
 800334e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8003350:	f248 0304 	movw	r3, #32772	; 0x8004
 8003354:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003356:	2302      	movs	r3, #2
 8003358:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800335a:	2300      	movs	r3, #0
 800335c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800335e:	2303      	movs	r3, #3
 8003360:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003362:	2307      	movs	r3, #7
 8003364:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003366:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800336a:	4619      	mov	r1, r3
 800336c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003370:	f002 fee0 	bl	8006134 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003374:	2200      	movs	r2, #0
 8003376:	2100      	movs	r1, #0
 8003378:	2026      	movs	r0, #38	; 0x26
 800337a:	f002 fb74 	bl	8005a66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800337e:	2026      	movs	r0, #38	; 0x26
 8003380:	f002 fb8b 	bl	8005a9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003384:	bf00      	nop
 8003386:	3768      	adds	r7, #104	; 0x68
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40004400 	.word	0x40004400
 8003390:	40021000 	.word	0x40021000

08003394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003398:	e7fe      	b.n	8003398 <NMI_Handler+0x4>

0800339a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800339a:	b480      	push	{r7}
 800339c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339e:	e7fe      	b.n	800339e <HardFault_Handler+0x4>

080033a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a4:	e7fe      	b.n	80033a4 <MemManage_Handler+0x4>

080033a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a6:	b480      	push	{r7}
 80033a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033aa:	e7fe      	b.n	80033aa <BusFault_Handler+0x4>

080033ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033b0:	e7fe      	b.n	80033b0 <UsageFault_Handler+0x4>

080033b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033b2:	b480      	push	{r7}
 80033b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033b6:	bf00      	nop
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c4:	bf00      	nop
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr

080033ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033d2:	bf00      	nop
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033e0:	f000 f988 	bl	80036f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e4:	bf00      	nop
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <DMA1_Channel1_IRQHandler+0x10>)
 80033ee:	f002 fd52 	bl	8005e96 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	200006b0 	.word	0x200006b0

080033fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <ADC1_2_IRQHandler+0x10>)
 8003402:	f000 ff37 	bl	8004274 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000644 	.word	0x20000644

08003410 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003414:	4802      	ldr	r0, [pc, #8]	; (8003420 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003416:	f004 fcf5 	bl	8007e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800341a:	bf00      	nop
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	20000858 	.word	0x20000858

08003424 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003428:	4802      	ldr	r0, [pc, #8]	; (8003434 <TIM3_IRQHandler+0x10>)
 800342a:	f004 fceb 	bl	8007e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800342e:	bf00      	nop
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	2000080c 	.word	0x2000080c

08003438 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800343c:	4802      	ldr	r0, [pc, #8]	; (8003448 <USART2_IRQHandler+0x10>)
 800343e:	f005 ff3f 	bl	80092c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003442:	bf00      	nop
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	200008f0 	.word	0x200008f0

0800344c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
	return 1;
 8003450:	2301      	movs	r3, #1
}
 8003452:	4618      	mov	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <_kill>:

int _kill(int pid, int sig)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b082      	sub	sp, #8
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
 8003464:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003466:	f009 fafb 	bl	800ca60 <__errno>
 800346a:	4603      	mov	r3, r0
 800346c:	2216      	movs	r2, #22
 800346e:	601a      	str	r2, [r3, #0]
	return -1;
 8003470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003474:	4618      	mov	r0, r3
 8003476:	3708      	adds	r7, #8
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <_exit>:

void _exit (int status)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003484:	f04f 31ff 	mov.w	r1, #4294967295
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f7ff ffe7 	bl	800345c <_kill>
	while (1) {}		/* Make sure we hang here */
 800348e:	e7fe      	b.n	800348e <_exit+0x12>

08003490 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800349c:	2300      	movs	r3, #0
 800349e:	617b      	str	r3, [r7, #20]
 80034a0:	e00a      	b.n	80034b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80034a2:	f3af 8000 	nop.w
 80034a6:	4601      	mov	r1, r0
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	60ba      	str	r2, [r7, #8]
 80034ae:	b2ca      	uxtb	r2, r1
 80034b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	3301      	adds	r3, #1
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	dbf0      	blt.n	80034a2 <_read+0x12>
	}

return len;
 80034c0:	687b      	ldr	r3, [r7, #4]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3718      	adds	r7, #24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}

080034ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80034ca:	b580      	push	{r7, lr}
 80034cc:	b086      	sub	sp, #24
 80034ce:	af00      	add	r7, sp, #0
 80034d0:	60f8      	str	r0, [r7, #12]
 80034d2:	60b9      	str	r1, [r7, #8]
 80034d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e009      	b.n	80034f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	1c5a      	adds	r2, r3, #1
 80034e0:	60ba      	str	r2, [r7, #8]
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	3301      	adds	r3, #1
 80034ee:	617b      	str	r3, [r7, #20]
 80034f0:	697a      	ldr	r2, [r7, #20]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dbf1      	blt.n	80034dc <_write+0x12>
	}
	return len;
 80034f8:	687b      	ldr	r3, [r7, #4]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <_close>:

int _close(int file)
{
 8003502:	b480      	push	{r7}
 8003504:	b083      	sub	sp, #12
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
	return -1;
 800350a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800352a:	605a      	str	r2, [r3, #4]
	return 0;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	370c      	adds	r7, #12
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <_isatty>:

int _isatty(int file)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
	return 1;
 8003542:	2301      	movs	r3, #1
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
	return 0;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
	...

0800356c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003574:	4a14      	ldr	r2, [pc, #80]	; (80035c8 <_sbrk+0x5c>)
 8003576:	4b15      	ldr	r3, [pc, #84]	; (80035cc <_sbrk+0x60>)
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003580:	4b13      	ldr	r3, [pc, #76]	; (80035d0 <_sbrk+0x64>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d102      	bne.n	800358e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003588:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <_sbrk+0x64>)
 800358a:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <_sbrk+0x68>)
 800358c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <_sbrk+0x64>)
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4413      	add	r3, r2
 8003596:	693a      	ldr	r2, [r7, #16]
 8003598:	429a      	cmp	r2, r3
 800359a:	d207      	bcs.n	80035ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800359c:	f009 fa60 	bl	800ca60 <__errno>
 80035a0:	4603      	mov	r3, r0
 80035a2:	220c      	movs	r2, #12
 80035a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80035a6:	f04f 33ff 	mov.w	r3, #4294967295
 80035aa:	e009      	b.n	80035c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80035ac:	4b08      	ldr	r3, [pc, #32]	; (80035d0 <_sbrk+0x64>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <_sbrk+0x64>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4413      	add	r3, r2
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <_sbrk+0x64>)
 80035bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035be:	68fb      	ldr	r3, [r7, #12]
	}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20008000 	.word	0x20008000
 80035cc:	00000400 	.word	0x00000400
 80035d0:	20000a18 	.word	0x20000a18
 80035d4:	20000b88 	.word	0x20000b88

080035d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80035d8:	b480      	push	{r7}
 80035da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <SystemInit+0x20>)
 80035de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e2:	4a05      	ldr	r2, [pc, #20]	; (80035f8 <SystemInit+0x20>)
 80035e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
	  ldr   r0, =_estack
 80035fc:	480d      	ldr	r0, [pc, #52]	; (8003634 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80035fe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003600:	480d      	ldr	r0, [pc, #52]	; (8003638 <LoopForever+0x6>)
  ldr r1, =_edata
 8003602:	490e      	ldr	r1, [pc, #56]	; (800363c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003604:	4a0e      	ldr	r2, [pc, #56]	; (8003640 <LoopForever+0xe>)
  movs r3, #0
 8003606:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003608:	e002      	b.n	8003610 <LoopCopyDataInit>

0800360a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800360a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800360c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800360e:	3304      	adds	r3, #4

08003610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003614:	d3f9      	bcc.n	800360a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003616:	4a0b      	ldr	r2, [pc, #44]	; (8003644 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003618:	4c0b      	ldr	r4, [pc, #44]	; (8003648 <LoopForever+0x16>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800361c:	e001      	b.n	8003622 <LoopFillZerobss>

0800361e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800361e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003620:	3204      	adds	r2, #4

08003622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003624:	d3fb      	bcc.n	800361e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003626:	f7ff ffd7 	bl	80035d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800362a:	f009 fa1f 	bl	800ca6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800362e:	f7fe f987 	bl	8001940 <main>

08003632 <LoopForever>:

LoopForever:
    b LoopForever
 8003632:	e7fe      	b.n	8003632 <LoopForever>
	  ldr   r0, =_estack
 8003634:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800363c:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003640:	08012da0 	.word	0x08012da0
  ldr r2, =_sbss
 8003644:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8003648:	20000b84 	.word	0x20000b84

0800364c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800364c:	e7fe      	b.n	800364c <COMP1_2_3_IRQHandler>

0800364e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003654:	2300      	movs	r3, #0
 8003656:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003658:	2003      	movs	r0, #3
 800365a:	f002 f9f9 	bl	8005a50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800365e:	2000      	movs	r0, #0
 8003660:	f000 f80e 	bl	8003680 <HAL_InitTick>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d002      	beq.n	8003670 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	71fb      	strb	r3, [r7, #7]
 800366e:	e001      	b.n	8003674 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003670:	f7ff fbda 	bl	8002e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003674:	79fb      	ldrb	r3, [r7, #7]

}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800368c:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <HAL_InitTick+0x68>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d022      	beq.n	80036da <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003694:	4b15      	ldr	r3, [pc, #84]	; (80036ec <HAL_InitTick+0x6c>)
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_InitTick+0x68>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80036a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80036a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a8:	4618      	mov	r0, r3
 80036aa:	f002 fa04 	bl	8005ab6 <HAL_SYSTICK_Config>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10f      	bne.n	80036d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	d809      	bhi.n	80036ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036ba:	2200      	movs	r2, #0
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	f04f 30ff 	mov.w	r0, #4294967295
 80036c2:	f002 f9d0 	bl	8005a66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036c6:	4a0a      	ldr	r2, [pc, #40]	; (80036f0 <HAL_InitTick+0x70>)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6013      	str	r3, [r2, #0]
 80036cc:	e007      	b.n	80036de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	73fb      	strb	r3, [r7, #15]
 80036d2:	e004      	b.n	80036de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
 80036d8:	e001      	b.n	80036de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	2000002c 	.word	0x2000002c
 80036ec:	20000024 	.word	0x20000024
 80036f0:	20000028 	.word	0x20000028

080036f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036f8:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_IncTick+0x1c>)
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	4b05      	ldr	r3, [pc, #20]	; (8003714 <HAL_IncTick+0x20>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4413      	add	r3, r2
 8003702:	4a03      	ldr	r2, [pc, #12]	; (8003710 <HAL_IncTick+0x1c>)
 8003704:	6013      	str	r3, [r2, #0]
}
 8003706:	bf00      	nop
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	20000a1c 	.word	0x20000a1c
 8003714:	2000002c 	.word	0x2000002c

08003718 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return uwTick;
 800371c:	4b03      	ldr	r3, [pc, #12]	; (800372c <HAL_GetTick+0x14>)
 800371e:	681b      	ldr	r3, [r3, #0]
}
 8003720:	4618      	mov	r0, r3
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	20000a1c 	.word	0x20000a1c

08003730 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff ffee 	bl	8003718 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d004      	beq.n	8003754 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <HAL_Delay+0x40>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	4413      	add	r3, r2
 8003752:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003754:	bf00      	nop
 8003756:	f7ff ffdf 	bl	8003718 <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	429a      	cmp	r2, r3
 8003764:	d8f7      	bhi.n	8003756 <HAL_Delay+0x26>
  {
  }
}
 8003766:	bf00      	nop
 8003768:	bf00      	nop
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	2000002c 	.word	0x2000002c

08003774 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	609a      	str	r2, [r3, #8]
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800379a:	b480      	push	{r7}
 800379c:	b083      	sub	sp, #12
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	609a      	str	r2, [r3, #8]
}
 80037b4:	bf00      	nop
 80037b6:	370c      	adds	r7, #12
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	3360      	adds	r3, #96	; 0x60
 80037ee:	461a      	mov	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <LL_ADC_SetOffset+0x44>)
 80037fe:	4013      	ands	r3, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003806:	683a      	ldr	r2, [r7, #0]
 8003808:	430a      	orrs	r2, r1
 800380a:	4313      	orrs	r3, r2
 800380c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003814:	bf00      	nop
 8003816:	371c      	adds	r7, #28
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	03fff000 	.word	0x03fff000

08003824 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	3360      	adds	r3, #96	; 0x60
 8003832:	461a      	mov	r2, r3
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003844:	4618      	mov	r0, r3
 8003846:	3714      	adds	r7, #20
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003850:	b480      	push	{r7}
 8003852:	b087      	sub	sp, #28
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	3360      	adds	r3, #96	; 0x60
 8003860:	461a      	mov	r2, r3
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	431a      	orrs	r2, r3
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800387a:	bf00      	nop
 800387c:	371c      	adds	r7, #28
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003886:	b480      	push	{r7}
 8003888:	b087      	sub	sp, #28
 800388a:	af00      	add	r7, sp, #0
 800388c:	60f8      	str	r0, [r7, #12]
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	3360      	adds	r3, #96	; 0x60
 8003896:	461a      	mov	r2, r3
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	4413      	add	r3, r2
 800389e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80038b0:	bf00      	nop
 80038b2:	371c      	adds	r7, #28
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80038bc:	b480      	push	{r7}
 80038be:	b087      	sub	sp, #28
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3360      	adds	r3, #96	; 0x60
 80038cc:	461a      	mov	r2, r3
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	431a      	orrs	r2, r3
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	695b      	ldr	r3, [r3, #20]
 8003900:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	615a      	str	r2, [r3, #20]
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003928:	2b00      	cmp	r3, #0
 800392a:	d101      	bne.n	8003930 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800393e:	b480      	push	{r7}
 8003940:	b087      	sub	sp, #28
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3330      	adds	r3, #48	; 0x30
 800394e:	461a      	mov	r2, r3
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	0a1b      	lsrs	r3, r3, #8
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	f003 030c 	and.w	r3, r3, #12
 800395a:	4413      	add	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	f003 031f 	and.w	r3, r3, #31
 8003968:	211f      	movs	r1, #31
 800396a:	fa01 f303 	lsl.w	r3, r1, r3
 800396e:	43db      	mvns	r3, r3
 8003970:	401a      	ands	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	0e9b      	lsrs	r3, r3, #26
 8003976:	f003 011f 	and.w	r1, r3, #31
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	fa01 f303 	lsl.w	r3, r1, r3
 8003984:	431a      	orrs	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039a2:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80039aa:	2301      	movs	r3, #1
 80039ac:	e000      	b.n	80039b0 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80039bc:	b480      	push	{r7}
 80039be:	b087      	sub	sp, #28
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3314      	adds	r3, #20
 80039cc:	461a      	mov	r2, r3
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	0e5b      	lsrs	r3, r3, #25
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	f003 0304 	and.w	r3, r3, #4
 80039d8:	4413      	add	r3, r2
 80039da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	0d1b      	lsrs	r3, r3, #20
 80039e4:	f003 031f 	and.w	r3, r3, #31
 80039e8:	2107      	movs	r1, #7
 80039ea:	fa01 f303 	lsl.w	r3, r1, r3
 80039ee:	43db      	mvns	r3, r3
 80039f0:	401a      	ands	r2, r3
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	0d1b      	lsrs	r3, r3, #20
 80039f6:	f003 031f 	and.w	r3, r3, #31
 80039fa:	6879      	ldr	r1, [r7, #4]
 80039fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003a00:	431a      	orrs	r2, r3
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003a06:	bf00      	nop
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	4a0f      	ldr	r2, [pc, #60]	; (8003a60 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d10a      	bne.n	8003a3e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a34:	431a      	orrs	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8003a3c:	e00a      	b.n	8003a54 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4a:	43db      	mvns	r3, r3
 8003a4c:	401a      	ands	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8003a54:	bf00      	nop
 8003a56:	3714      	adds	r7, #20
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	407f0000 	.word	0x407f0000

08003a64 <LL_ADC_SetAnalogWDMonitChannels>:
  *         (7) On STM32G4, parameter available only on ADC instances: ADC1, ADC3, ADC4, ADC5.\n
  *          -  On this STM32 series, all ADCx are not available on all devices. Refer to device datasheet for more details.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDChannelGroup)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
  /* in register and register position depending on parameter "AWDy".         */
  /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	330c      	adds	r3, #12
 8003a74:	4618      	mov	r0, r3
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	0d1b      	lsrs	r3, r3, #20
 8003a7a:	f003 0103 	and.w	r1, r3, #3
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f003 0201 	and.w	r2, r3, #1
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	4403      	add	r3, r0
 8003a92:	617b      	str	r3, [r7, #20]
                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

  MODIFY_REG(*preg,
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 8003a9e:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 8003aa2:	43db      	mvns	r3, r3
 8003aa4:	401a      	ands	r2, r3
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	400b      	ands	r3, r1
 8003aac:	431a      	orrs	r2, r3
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	601a      	str	r2, [r3, #0]
             (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
             AWDChannelGroup & AWDy);
}
 8003ab2:	bf00      	nop
 8003ab4:	371c      	adds	r7, #28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <LL_ADC_ConfigAnalogWDThresholds>:
  * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThresholdHighValue,
                                                     uint32_t AWDThresholdLowValue)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b087      	sub	sp, #28
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	60f8      	str	r0, [r7, #12]
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	603b      	str	r3, [r7, #0]
  /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
  /* position in register and register position depending on parameter        */
  /* "AWDy".                                                                  */
  /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
  /* containing other bits reserved for other purpose.                        */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3320      	adds	r3, #32
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	0d1b      	lsrs	r3, r3, #20
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	4413      	add	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	0419      	lsls	r1, r3, #16
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	430b      	orrs	r3, r1
 8003af0:	431a      	orrs	r2, r3
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	601a      	str	r2, [r3, #0]
             ADC_TR1_HT1 | ADC_TR1_LT1,
             (AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr

08003b02 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	f003 031f 	and.w	r3, r3, #31
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr

08003b1e <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	b083      	sub	sp, #12
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b083      	sub	sp, #12
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003b4a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6093      	str	r3, [r2, #8]
}
 8003b52:	bf00      	nop
 8003b54:	370c      	adds	r7, #12
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr

08003b5e <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003b5e:	b480      	push	{r7}
 8003b60:	b083      	sub	sp, #12
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b72:	d101      	bne.n	8003b78 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003b74:	2301      	movs	r3, #1
 8003b76:	e000      	b.n	8003b7a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003b86:	b480      	push	{r7}
 8003b88:	b083      	sub	sp, #12
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003b96:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003b9a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr

08003bae <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003bae:	b480      	push	{r7}
 8003bb0:	b083      	sub	sp, #12
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bc2:	d101      	bne.n	8003bc8 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e000      	b.n	8003bca <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr

08003bd6 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003bd6:	b480      	push	{r7}
 8003bd8:	b083      	sub	sp, #12
 8003bda:	af00      	add	r7, sp, #0
 8003bdc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003be6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b083      	sub	sp, #12
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c12:	f043 0202 	orr.w	r2, r3, #2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003c1a:	bf00      	nop
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d101      	bne.n	8003c3e <LL_ADC_IsEnabled+0x18>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <LL_ADC_IsEnabled+0x1a>
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d101      	bne.n	8003c64 <LL_ADC_IsDisableOngoing+0x18>
 8003c60:	2301      	movs	r3, #1
 8003c62:	e000      	b.n	8003c66 <LL_ADC_IsDisableOngoing+0x1a>
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003c82:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c86:	f043 0204 	orr.w	r2, r3, #4
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f003 0304 	and.w	r3, r3, #4
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	d101      	bne.n	8003cb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e000      	b.n	8003cb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 0308 	and.w	r3, r3, #8
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d101      	bne.n	8003cd8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	370c      	adds	r7, #12
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr

08003ce6 <LL_ADC_ClearFlag_AWD1>:
  * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
{
 8003ce6:	b480      	push	{r7}
 8003ce8:	b083      	sub	sp, #12
 8003cea:	af00      	add	r7, sp, #0
 8003cec:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2280      	movs	r2, #128	; 0x80
 8003cf2:	601a      	str	r2, [r3, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <LL_ADC_ClearFlag_AWD2>:
  * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d0e:	601a      	str	r2, [r3, #0]
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <LL_ADC_ClearFlag_AWD3>:
  * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2a:	601a      	str	r2, [r3, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <LL_ADC_EnableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b083      	sub	sp, #12
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	605a      	str	r2, [r3, #4]
}
 8003d4c:	bf00      	nop
 8003d4e:	370c      	adds	r7, #12
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <LL_ADC_EnableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	605a      	str	r2, [r3, #4]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <LL_ADC_EnableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
{
 8003d78:	b480      	push	{r7}
 8003d7a:	b083      	sub	sp, #12
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	605a      	str	r2, [r3, #4]
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <LL_ADC_DisableIT_AWD1>:
  * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	605a      	str	r2, [r3, #4]
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <LL_ADC_DisableIT_AWD2>:
  * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	605a      	str	r2, [r3, #4]
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_ADC_DisableIT_AWD3>:
  * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	605a      	str	r2, [r3, #4]
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b089      	sub	sp, #36	; 0x24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003e04:	2300      	movs	r3, #0
 8003e06:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e177      	b.n	8004102 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d109      	bne.n	8003e34 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7ff f825 	bl	8002e70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f7ff fe90 	bl	8003b5e <LL_ADC_IsDeepPowerDownEnabled>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d004      	beq.n	8003e4e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7ff fe76 	bl	8003b3a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff feab 	bl	8003bae <LL_ADC_IsInternalRegulatorEnabled>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d115      	bne.n	8003e8a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff fe8f 	bl	8003b86 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e68:	4b9c      	ldr	r3, [pc, #624]	; (80040dc <HAL_ADC_Init+0x2e4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	099b      	lsrs	r3, r3, #6
 8003e6e:	4a9c      	ldr	r2, [pc, #624]	; (80040e0 <HAL_ADC_Init+0x2e8>)
 8003e70:	fba2 2303 	umull	r2, r3, r2, r3
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	3301      	adds	r3, #1
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e7c:	e002      	b.n	8003e84 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f9      	bne.n	8003e7e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff fe8d 	bl	8003bae <LL_ADC_IsInternalRegulatorEnabled>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10d      	bne.n	8003eb6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	f043 0210 	orr.w	r2, r3, #16
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eaa:	f043 0201 	orr.w	r2, r3, #1
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff feed 	bl	8003c9a <LL_ADC_REG_IsConversionOngoing>
 8003ec0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f040 8110 	bne.w	80040f0 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	f040 810c 	bne.w	80040f0 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003edc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003ee0:	f043 0202 	orr.w	r2, r3, #2
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7ff fe9a 	bl	8003c26 <LL_ADC_IsEnabled>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d111      	bne.n	8003f1c <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ef8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003efc:	f7ff fe93 	bl	8003c26 <LL_ADC_IsEnabled>
 8003f00:	4604      	mov	r4, r0
 8003f02:	4878      	ldr	r0, [pc, #480]	; (80040e4 <HAL_ADC_Init+0x2ec>)
 8003f04:	f7ff fe8f 	bl	8003c26 <LL_ADC_IsEnabled>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	4323      	orrs	r3, r4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d105      	bne.n	8003f1c <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	4619      	mov	r1, r3
 8003f16:	4874      	ldr	r0, [pc, #464]	; (80040e8 <HAL_ADC_Init+0x2f0>)
 8003f18:	f7ff fc2c 	bl	8003774 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	7f5b      	ldrb	r3, [r3, #29]
 8003f20:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f26:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8003f2c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8003f32:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f3a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d106      	bne.n	8003f58 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	045b      	lsls	r3, r3, #17
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d009      	beq.n	8003f74 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	4b5c      	ldr	r3, [pc, #368]	; (80040ec <HAL_ADC_Init+0x2f4>)
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6812      	ldr	r2, [r2, #0]
 8003f82:	69b9      	ldr	r1, [r7, #24]
 8003f84:	430b      	orrs	r3, r1
 8003f86:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff fe79 	bl	8003c9a <LL_ADC_REG_IsConversionOngoing>
 8003fa8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7ff fe86 	bl	8003cc0 <LL_ADC_INJ_IsConversionOngoing>
 8003fb4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d16d      	bne.n	8004098 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d16a      	bne.n	8004098 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fc6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003fce:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fde:	f023 0302 	bic.w	r3, r3, #2
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	69b9      	ldr	r1, [r7, #24]
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d017      	beq.n	8004024 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691a      	ldr	r2, [r3, #16]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004002:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800400c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004010:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6911      	ldr	r1, [r2, #16]
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6812      	ldr	r2, [r2, #0]
 800401c:	430b      	orrs	r3, r1
 800401e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8004022:	e013      	b.n	800404c <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691a      	ldr	r2, [r3, #16]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004032:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6812      	ldr	r2, [r2, #0]
 8004040:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004044:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004048:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004052:	2b01      	cmp	r3, #1
 8004054:	d118      	bne.n	8004088 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004060:	f023 0304 	bic.w	r3, r3, #4
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800406c:	4311      	orrs	r1, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004072:	4311      	orrs	r1, r2
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004078:	430a      	orrs	r2, r1
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	611a      	str	r2, [r3, #16]
 8004086:	e007      	b.n	8004098 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691a      	ldr	r2, [r3, #16]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0201 	bic.w	r2, r2, #1
 8004096:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	695b      	ldr	r3, [r3, #20]
 800409c:	2b01      	cmp	r3, #1
 800409e:	d10c      	bne.n	80040ba <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	f023 010f 	bic.w	r1, r3, #15
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a1b      	ldr	r3, [r3, #32]
 80040ae:	1e5a      	subs	r2, r3, #1
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
 80040b8:	e007      	b.n	80040ca <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f022 020f 	bic.w	r2, r2, #15
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ce:	f023 0303 	bic.w	r3, r3, #3
 80040d2:	f043 0201 	orr.w	r2, r3, #1
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80040da:	e011      	b.n	8004100 <HAL_ADC_Init+0x308>
 80040dc:	20000024 	.word	0x20000024
 80040e0:	053e2d63 	.word	0x053e2d63
 80040e4:	50000100 	.word	0x50000100
 80040e8:	50000300 	.word	0x50000300
 80040ec:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f4:	f043 0210 	orr.w	r2, r3, #16
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004100:	7ffb      	ldrb	r3, [r7, #31]
}
 8004102:	4618      	mov	r0, r3
 8004104:	3724      	adds	r7, #36	; 0x24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd90      	pop	{r4, r7, pc}
 800410a:	bf00      	nop

0800410c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004118:	4851      	ldr	r0, [pc, #324]	; (8004260 <HAL_ADC_Start_DMA+0x154>)
 800411a:	f7ff fcf2 	bl	8003b02 <LL_ADC_GetMultimode>
 800411e:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7ff fdb8 	bl	8003c9a <LL_ADC_REG_IsConversionOngoing>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	f040 808f 	bne.w	8004250 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004138:	2b01      	cmp	r3, #1
 800413a:	d101      	bne.n	8004140 <HAL_ADC_Start_DMA+0x34>
 800413c:	2302      	movs	r3, #2
 800413e:	e08a      	b.n	8004256 <HAL_ADC_Start_DMA+0x14a>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b05      	cmp	r3, #5
 8004152:	d002      	beq.n	800415a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	2b09      	cmp	r3, #9
 8004158:	d173      	bne.n	8004242 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f001 f8c8 	bl	80052f0 <ADC_Enable>
 8004160:	4603      	mov	r3, r0
 8004162:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004164:	7dfb      	ldrb	r3, [r7, #23]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d166      	bne.n	8004238 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800416e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a38      	ldr	r2, [pc, #224]	; (8004264 <HAL_ADC_Start_DMA+0x158>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d002      	beq.n	800418e <HAL_ADC_Start_DMA+0x82>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	e001      	b.n	8004192 <HAL_ADC_Start_DMA+0x86>
 800418e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	6812      	ldr	r2, [r2, #0]
 8004196:	4293      	cmp	r3, r2
 8004198:	d002      	beq.n	80041a0 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d006      	beq.n	80041c6 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041bc:	f023 0206 	bic.w	r2, r3, #6
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	661a      	str	r2, [r3, #96]	; 0x60
 80041c4:	e002      	b.n	80041cc <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	4a25      	ldr	r2, [pc, #148]	; (8004268 <HAL_ADC_Start_DMA+0x15c>)
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d8:	4a24      	ldr	r2, [pc, #144]	; (800426c <HAL_ADC_Start_DMA+0x160>)
 80041da:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041e0:	4a23      	ldr	r2, [pc, #140]	; (8004270 <HAL_ADC_Start_DMA+0x164>)
 80041e2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	221c      	movs	r2, #28
 80041ea:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685a      	ldr	r2, [r3, #4]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f042 0210 	orr.w	r2, r2, #16
 8004202:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	68da      	ldr	r2, [r3, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f042 0201 	orr.w	r2, r2, #1
 8004212:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3340      	adds	r3, #64	; 0x40
 800421e:	4619      	mov	r1, r3
 8004220:	68ba      	ldr	r2, [r7, #8]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f001 fcfc 	bl	8005c20 <HAL_DMA_Start_IT>
 8004228:	4603      	mov	r3, r0
 800422a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4618      	mov	r0, r3
 8004232:	f7ff fd1e 	bl	8003c72 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004236:	e00d      	b.n	8004254 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8004240:	e008      	b.n	8004254 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800424e:	e001      	b.n	8004254 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004250:	2302      	movs	r3, #2
 8004252:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004254:	7dfb      	ldrb	r3, [r7, #23]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	50000300 	.word	0x50000300
 8004264:	50000100 	.word	0x50000100
 8004268:	08005473 	.word	0x08005473
 800426c:	0800554b 	.word	0x0800554b
 8004270:	08005567 	.word	0x08005567

08004274 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	; 0x28
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800427c:	2300      	movs	r3, #0
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004290:	4883      	ldr	r0, [pc, #524]	; (80044a0 <HAL_ADC_IRQHandler+0x22c>)
 8004292:	f7ff fc36 	bl	8003b02 <LL_ADC_GetMultimode>
 8004296:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d017      	beq.n	80042d2 <HAL_ADC_IRQHandler+0x5e>
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d012      	beq.n	80042d2 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	f003 0310 	and.w	r3, r3, #16
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f001 fa45 	bl	8005754 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2202      	movs	r2, #2
 80042d0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <HAL_ADC_IRQHandler+0x72>
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10a      	bne.n	80042fc <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 8085 	beq.w	80043fc <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d07f      	beq.n	80043fc <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	f003 0310 	and.w	r3, r3, #16
 8004304:	2b00      	cmp	r3, #0
 8004306:	d105      	bne.n	8004314 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800430c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fafd 	bl	8003918 <LL_ADC_REG_IsTriggerSourceSWStart>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d064      	beq.n	80043ee <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a5e      	ldr	r2, [pc, #376]	; (80044a4 <HAL_ADC_IRQHandler+0x230>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d002      	beq.n	8004334 <HAL_ADC_IRQHandler+0xc0>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	e001      	b.n	8004338 <HAL_ADC_IRQHandler+0xc4>
 8004334:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	4293      	cmp	r3, r2
 800433e:	d008      	beq.n	8004352 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d005      	beq.n	8004352 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b05      	cmp	r3, #5
 800434a:	d002      	beq.n	8004352 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b09      	cmp	r3, #9
 8004350:	d104      	bne.n	800435c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	623b      	str	r3, [r7, #32]
 800435a:	e00d      	b.n	8004378 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a50      	ldr	r2, [pc, #320]	; (80044a4 <HAL_ADC_IRQHandler+0x230>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d002      	beq.n	800436c <HAL_ADC_IRQHandler+0xf8>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	e001      	b.n	8004370 <HAL_ADC_IRQHandler+0xfc>
 800436c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004370:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	68db      	ldr	r3, [r3, #12]
 8004376:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d135      	bne.n	80043ee <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0308 	and.w	r3, r3, #8
 800438c:	2b08      	cmp	r3, #8
 800438e:	d12e      	bne.n	80043ee <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4618      	mov	r0, r3
 8004396:	f7ff fc80 	bl	8003c9a <LL_ADC_REG_IsConversionOngoing>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d11a      	bne.n	80043d6 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 020c 	bic.w	r2, r2, #12
 80043ae:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d112      	bne.n	80043ee <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043cc:	f043 0201 	orr.w	r2, r3, #1
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80043d4:	e00b      	b.n	80043ee <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043da:	f043 0210 	orr.w	r2, r3, #16
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e6:	f043 0201 	orr.w	r2, r3, #1
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f95a 	bl	80046a8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	220c      	movs	r2, #12
 80043fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f003 0320 	and.w	r3, r3, #32
 8004402:	2b00      	cmp	r3, #0
 8004404:	d004      	beq.n	8004410 <HAL_ADC_IRQHandler+0x19c>
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 809e 	beq.w	8004558 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	f000 8098 	beq.w	8004558 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442c:	f003 0310 	and.w	r3, r3, #16
 8004430:	2b00      	cmp	r3, #0
 8004432:	d105      	bne.n	8004440 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004438:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff faa6 	bl	8003996 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800444a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fa61 	bl	8003918 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004456:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a11      	ldr	r2, [pc, #68]	; (80044a4 <HAL_ADC_IRQHandler+0x230>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d002      	beq.n	8004468 <HAL_ADC_IRQHandler+0x1f4>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	e001      	b.n	800446c <HAL_ADC_IRQHandler+0x1f8>
 8004468:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6812      	ldr	r2, [r2, #0]
 8004470:	4293      	cmp	r3, r2
 8004472:	d008      	beq.n	8004486 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d005      	beq.n	8004486 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b06      	cmp	r3, #6
 800447e:	d002      	beq.n	8004486 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b07      	cmp	r3, #7
 8004484:	d104      	bne.n	8004490 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	623b      	str	r3, [r7, #32]
 800448e:	e011      	b.n	80044b4 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a03      	ldr	r2, [pc, #12]	; (80044a4 <HAL_ADC_IRQHandler+0x230>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d006      	beq.n	80044a8 <HAL_ADC_IRQHandler+0x234>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	e005      	b.n	80044ac <HAL_ADC_IRQHandler+0x238>
 80044a0:	50000300 	.word	0x50000300
 80044a4:	50000100 	.word	0x50000100
 80044a8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80044ac:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d047      	beq.n	800454a <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80044ba:	6a3b      	ldr	r3, [r7, #32]
 80044bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d007      	beq.n	80044d4 <HAL_ADC_IRQHandler+0x260>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d03f      	beq.n	800454a <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80044ca:	6a3b      	ldr	r3, [r7, #32]
 80044cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d13a      	bne.n	800454a <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044de:	2b40      	cmp	r3, #64	; 0x40
 80044e0:	d133      	bne.n	800454a <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d12e      	bne.n	800454a <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	f7ff fbe5 	bl	8003cc0 <LL_ADC_INJ_IsConversionOngoing>
 80044f6:	4603      	mov	r3, r0
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d11a      	bne.n	8004532 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800450a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004510:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800451c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d112      	bne.n	800454a <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004528:	f043 0201 	orr.w	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004530:	e00b      	b.n	800454a <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004536:	f043 0210 	orr.w	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004542:	f043 0201 	orr.w	r2, r3, #1
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 f8da 	bl	8005704 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	2260      	movs	r2, #96	; 0x60
 8004556:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800455e:	2b00      	cmp	r3, #0
 8004560:	d011      	beq.n	8004586 <HAL_ADC_IRQHandler+0x312>
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00c      	beq.n	8004586 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004570:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f8a9 	bl	80046d0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2280      	movs	r2, #128	; 0x80
 8004584:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004586:	69fb      	ldr	r3, [r7, #28]
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d012      	beq.n	80045b6 <HAL_ADC_IRQHandler+0x342>
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00d      	beq.n	80045b6 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f001 f8c0 	bl	800572c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d012      	beq.n	80045e6 <HAL_ADC_IRQHandler+0x372>
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d00d      	beq.n	80045e6 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f001 f8b2 	bl	8005740 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045e4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80045e6:	69fb      	ldr	r3, [r7, #28]
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d036      	beq.n	800465e <HAL_ADC_IRQHandler+0x3ea>
 80045f0:	69bb      	ldr	r3, [r7, #24]
 80045f2:	f003 0310 	and.w	r3, r3, #16
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d031      	beq.n	800465e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d102      	bne.n	8004608 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8004602:	2301      	movs	r3, #1
 8004604:	627b      	str	r3, [r7, #36]	; 0x24
 8004606:	e014      	b.n	8004632 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d008      	beq.n	8004620 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800460e:	4825      	ldr	r0, [pc, #148]	; (80046a4 <HAL_ADC_IRQHandler+0x430>)
 8004610:	f7ff fa85 	bl	8003b1e <LL_ADC_GetMultiDMATransfer>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00b      	beq.n	8004632 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800461a:	2301      	movs	r3, #1
 800461c:	627b      	str	r3, [r7, #36]	; 0x24
 800461e:	e008      	b.n	8004632 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68db      	ldr	r3, [r3, #12]
 8004626:	f003 0301 	and.w	r3, r3, #1
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800462e:	2301      	movs	r3, #1
 8004630:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	2b01      	cmp	r3, #1
 8004636:	d10e      	bne.n	8004656 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004648:	f043 0202 	orr.w	r2, r3, #2
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f847 	bl	80046e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2210      	movs	r2, #16
 800465c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004664:	2b00      	cmp	r3, #0
 8004666:	d018      	beq.n	800469a <HAL_ADC_IRQHandler+0x426>
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466e:	2b00      	cmp	r3, #0
 8004670:	d013      	beq.n	800469a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004682:	f043 0208 	orr.w	r2, r3, #8
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004692:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f001 f83f 	bl	8005718 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800469a:	bf00      	nop
 800469c:	3728      	adds	r7, #40	; 0x28
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	50000300 	.word	0x50000300

080046a8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b0b6      	sub	sp, #216	; 0xd8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004702:	2300      	movs	r3, #0
 8004704:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004712:	2b01      	cmp	r3, #1
 8004714:	d101      	bne.n	800471a <HAL_ADC_ConfigChannel+0x22>
 8004716:	2302      	movs	r3, #2
 8004718:	e3c8      	b.n	8004eac <HAL_ADC_ConfigChannel+0x7b4>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4618      	mov	r0, r3
 8004728:	f7ff fab7 	bl	8003c9a <LL_ADC_REG_IsConversionOngoing>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	f040 83ad 	bne.w	8004e8e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6818      	ldr	r0, [r3, #0]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	6859      	ldr	r1, [r3, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	461a      	mov	r2, r3
 8004742:	f7ff f8fc 	bl	800393e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4618      	mov	r0, r3
 800474c:	f7ff faa5 	bl	8003c9a <LL_ADC_REG_IsConversionOngoing>
 8004750:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff fab1 	bl	8003cc0 <LL_ADC_INJ_IsConversionOngoing>
 800475e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004762:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004766:	2b00      	cmp	r3, #0
 8004768:	f040 81d9 	bne.w	8004b1e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800476c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004770:	2b00      	cmp	r3, #0
 8004772:	f040 81d4 	bne.w	8004b1e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800477e:	d10f      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6818      	ldr	r0, [r3, #0]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2200      	movs	r2, #0
 800478a:	4619      	mov	r1, r3
 800478c:	f7ff f916 	bl	80039bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff f8aa 	bl	80038f2 <LL_ADC_SetSamplingTimeCommonConfig>
 800479e:	e00e      	b.n	80047be <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	6819      	ldr	r1, [r3, #0]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	461a      	mov	r2, r3
 80047ae:	f7ff f905 	bl	80039bc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f7ff f89a 	bl	80038f2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	08db      	lsrs	r3, r3, #3
 80047ca:	f003 0303 	and.w	r3, r3, #3
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	2b04      	cmp	r3, #4
 80047de:	d022      	beq.n	8004826 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6818      	ldr	r0, [r3, #0]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	6919      	ldr	r1, [r3, #16]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80047f0:	f7fe fff4 	bl	80037dc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	6919      	ldr	r1, [r3, #16]
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	699b      	ldr	r3, [r3, #24]
 8004800:	461a      	mov	r2, r3
 8004802:	f7ff f840 	bl	8003886 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6818      	ldr	r0, [r3, #0]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	6919      	ldr	r1, [r3, #16]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	7f1b      	ldrb	r3, [r3, #28]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d102      	bne.n	800481c <HAL_ADC_ConfigChannel+0x124>
 8004816:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800481a:	e000      	b.n	800481e <HAL_ADC_ConfigChannel+0x126>
 800481c:	2300      	movs	r3, #0
 800481e:	461a      	mov	r2, r3
 8004820:	f7ff f84c 	bl	80038bc <LL_ADC_SetOffsetSaturation>
 8004824:	e17b      	b.n	8004b1e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2100      	movs	r1, #0
 800482c:	4618      	mov	r0, r3
 800482e:	f7fe fff9 	bl	8003824 <LL_ADC_GetOffsetChannel>
 8004832:	4603      	mov	r3, r0
 8004834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004838:	2b00      	cmp	r3, #0
 800483a:	d10a      	bne.n	8004852 <HAL_ADC_ConfigChannel+0x15a>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	2100      	movs	r1, #0
 8004842:	4618      	mov	r0, r3
 8004844:	f7fe ffee 	bl	8003824 <LL_ADC_GetOffsetChannel>
 8004848:	4603      	mov	r3, r0
 800484a:	0e9b      	lsrs	r3, r3, #26
 800484c:	f003 021f 	and.w	r2, r3, #31
 8004850:	e01e      	b.n	8004890 <HAL_ADC_ConfigChannel+0x198>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2100      	movs	r1, #0
 8004858:	4618      	mov	r0, r3
 800485a:	f7fe ffe3 	bl	8003824 <LL_ADC_GetOffsetChannel>
 800485e:	4603      	mov	r3, r0
 8004860:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004864:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004868:	fa93 f3a3 	rbit	r3, r3
 800486c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004874:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8004880:	2320      	movs	r3, #32
 8004882:	e004      	b.n	800488e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8004884:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004888:	fab3 f383 	clz	r3, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004898:	2b00      	cmp	r3, #0
 800489a:	d105      	bne.n	80048a8 <HAL_ADC_ConfigChannel+0x1b0>
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	0e9b      	lsrs	r3, r3, #26
 80048a2:	f003 031f 	and.w	r3, r3, #31
 80048a6:	e018      	b.n	80048da <HAL_ADC_ConfigChannel+0x1e2>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80048b4:	fa93 f3a3 	rbit	r3, r3
 80048b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80048bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80048c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d101      	bne.n	80048d0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80048cc:	2320      	movs	r3, #32
 80048ce:	e004      	b.n	80048da <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80048d0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80048d4:	fab3 f383 	clz	r3, r3
 80048d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80048da:	429a      	cmp	r2, r3
 80048dc:	d106      	bne.n	80048ec <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	2100      	movs	r1, #0
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fe ffb2 	bl	8003850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2101      	movs	r1, #1
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fe ff96 	bl	8003824 <LL_ADC_GetOffsetChannel>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10a      	bne.n	8004918 <HAL_ADC_ConfigChannel+0x220>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2101      	movs	r1, #1
 8004908:	4618      	mov	r0, r3
 800490a:	f7fe ff8b 	bl	8003824 <LL_ADC_GetOffsetChannel>
 800490e:	4603      	mov	r3, r0
 8004910:	0e9b      	lsrs	r3, r3, #26
 8004912:	f003 021f 	and.w	r2, r3, #31
 8004916:	e01e      	b.n	8004956 <HAL_ADC_ConfigChannel+0x25e>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2101      	movs	r1, #1
 800491e:	4618      	mov	r0, r3
 8004920:	f7fe ff80 	bl	8003824 <LL_ADC_GetOffsetChannel>
 8004924:	4603      	mov	r3, r0
 8004926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800492a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800492e:	fa93 f3a3 	rbit	r3, r3
 8004932:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800493a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800493e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004942:	2b00      	cmp	r3, #0
 8004944:	d101      	bne.n	800494a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8004946:	2320      	movs	r3, #32
 8004948:	e004      	b.n	8004954 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800494a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_ADC_ConfigChannel+0x276>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	0e9b      	lsrs	r3, r3, #26
 8004968:	f003 031f 	and.w	r3, r3, #31
 800496c:	e018      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x2a8>
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004976:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800497a:	fa93 f3a3 	rbit	r3, r3
 800497e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004982:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004986:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800498a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d101      	bne.n	8004996 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004992:	2320      	movs	r3, #32
 8004994:	e004      	b.n	80049a0 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8004996:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800499a:	fab3 f383 	clz	r3, r3
 800499e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d106      	bne.n	80049b2 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2200      	movs	r2, #0
 80049aa:	2101      	movs	r1, #1
 80049ac:	4618      	mov	r0, r3
 80049ae:	f7fe ff4f 	bl	8003850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2102      	movs	r1, #2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f7fe ff33 	bl	8003824 <LL_ADC_GetOffsetChannel>
 80049be:	4603      	mov	r3, r0
 80049c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10a      	bne.n	80049de <HAL_ADC_ConfigChannel+0x2e6>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2102      	movs	r1, #2
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe ff28 	bl	8003824 <LL_ADC_GetOffsetChannel>
 80049d4:	4603      	mov	r3, r0
 80049d6:	0e9b      	lsrs	r3, r3, #26
 80049d8:	f003 021f 	and.w	r2, r3, #31
 80049dc:	e01e      	b.n	8004a1c <HAL_ADC_ConfigChannel+0x324>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2102      	movs	r1, #2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f7fe ff1d 	bl	8003824 <LL_ADC_GetOffsetChannel>
 80049ea:	4603      	mov	r3, r0
 80049ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80049f4:	fa93 f3a3 	rbit	r3, r3
 80049f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80049fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a00:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004a04:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004a0c:	2320      	movs	r3, #32
 8004a0e:	e004      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004a10:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004a14:	fab3 f383 	clz	r3, r3
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d105      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x33c>
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	0e9b      	lsrs	r3, r3, #26
 8004a2e:	f003 031f 	and.w	r3, r3, #31
 8004a32:	e016      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x36a>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004a40:	fa93 f3a3 	rbit	r3, r3
 8004a44:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004a46:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004a48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8004a54:	2320      	movs	r3, #32
 8004a56:	e004      	b.n	8004a62 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8004a58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a5c:	fab3 f383 	clz	r3, r3
 8004a60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d106      	bne.n	8004a74 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f7fe feee 	bl	8003850 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	2103      	movs	r1, #3
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	f7fe fed2 	bl	8003824 <LL_ADC_GetOffsetChannel>
 8004a80:	4603      	mov	r3, r0
 8004a82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10a      	bne.n	8004aa0 <HAL_ADC_ConfigChannel+0x3a8>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2103      	movs	r1, #3
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fe fec7 	bl	8003824 <LL_ADC_GetOffsetChannel>
 8004a96:	4603      	mov	r3, r0
 8004a98:	0e9b      	lsrs	r3, r3, #26
 8004a9a:	f003 021f 	and.w	r2, r3, #31
 8004a9e:	e017      	b.n	8004ad0 <HAL_ADC_ConfigChannel+0x3d8>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2103      	movs	r1, #3
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f7fe febc 	bl	8003824 <LL_ADC_GetOffsetChannel>
 8004aac:	4603      	mov	r3, r0
 8004aae:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab2:	fa93 f3a3 	rbit	r3, r3
 8004ab6:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004ab8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004aba:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004abc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004ac2:	2320      	movs	r3, #32
 8004ac4:	e003      	b.n	8004ace <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004ac6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ac8:	fab3 f383 	clz	r3, r3
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d105      	bne.n	8004ae8 <HAL_ADC_ConfigChannel+0x3f0>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	0e9b      	lsrs	r3, r3, #26
 8004ae2:	f003 031f 	and.w	r3, r3, #31
 8004ae6:	e011      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x414>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004af0:	fa93 f3a3 	rbit	r3, r3
 8004af4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004af6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004af8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d101      	bne.n	8004b04 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004b00:	2320      	movs	r3, #32
 8004b02:	e003      	b.n	8004b0c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b06:	fab3 f383 	clz	r3, r3
 8004b0a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	d106      	bne.n	8004b1e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2200      	movs	r2, #0
 8004b16:	2103      	movs	r1, #3
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f7fe fe99 	bl	8003850 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff f87f 	bl	8003c26 <LL_ADC_IsEnabled>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	f040 8140 	bne.w	8004db0 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6818      	ldr	r0, [r3, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	6819      	ldr	r1, [r3, #0]
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	f7fe ff69 	bl	8003a14 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	4a8f      	ldr	r2, [pc, #572]	; (8004d84 <HAL_ADC_ConfigChannel+0x68c>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	f040 8131 	bne.w	8004db0 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d10b      	bne.n	8004b76 <HAL_ADC_ConfigChannel+0x47e>
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	0e9b      	lsrs	r3, r3, #26
 8004b64:	3301      	adds	r3, #1
 8004b66:	f003 031f 	and.w	r3, r3, #31
 8004b6a:	2b09      	cmp	r3, #9
 8004b6c:	bf94      	ite	ls
 8004b6e:	2301      	movls	r3, #1
 8004b70:	2300      	movhi	r3, #0
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	e019      	b.n	8004baa <HAL_ADC_ConfigChannel+0x4b2>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b7e:	fa93 f3a3 	rbit	r3, r3
 8004b82:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b86:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004b8e:	2320      	movs	r3, #32
 8004b90:	e003      	b.n	8004b9a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004b92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b94:	fab3 f383 	clz	r3, r3
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f003 031f 	and.w	r3, r3, #31
 8004ba0:	2b09      	cmp	r3, #9
 8004ba2:	bf94      	ite	ls
 8004ba4:	2301      	movls	r3, #1
 8004ba6:	2300      	movhi	r3, #0
 8004ba8:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d079      	beq.n	8004ca2 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d107      	bne.n	8004bca <HAL_ADC_ConfigChannel+0x4d2>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	0e9b      	lsrs	r3, r3, #26
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	069b      	lsls	r3, r3, #26
 8004bc4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bc8:	e015      	b.n	8004bf6 <HAL_ADC_ConfigChannel+0x4fe>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd2:	fa93 f3a3 	rbit	r3, r3
 8004bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bda:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004bdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004be2:	2320      	movs	r3, #32
 8004be4:	e003      	b.n	8004bee <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be8:	fab3 f383 	clz	r3, r3
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	3301      	adds	r3, #1
 8004bf0:	069b      	lsls	r3, r3, #26
 8004bf2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d109      	bne.n	8004c16 <HAL_ADC_ConfigChannel+0x51e>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	0e9b      	lsrs	r3, r3, #26
 8004c08:	3301      	adds	r3, #1
 8004c0a:	f003 031f 	and.w	r3, r3, #31
 8004c0e:	2101      	movs	r1, #1
 8004c10:	fa01 f303 	lsl.w	r3, r1, r3
 8004c14:	e017      	b.n	8004c46 <HAL_ADC_ConfigChannel+0x54e>
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c1e:	fa93 f3a3 	rbit	r3, r3
 8004c22:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c26:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004c28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8004c2e:	2320      	movs	r3, #32
 8004c30:	e003      	b.n	8004c3a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8004c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c34:	fab3 f383 	clz	r3, r3
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	f003 031f 	and.w	r3, r3, #31
 8004c40:	2101      	movs	r1, #1
 8004c42:	fa01 f303 	lsl.w	r3, r1, r3
 8004c46:	ea42 0103 	orr.w	r1, r2, r3
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d10a      	bne.n	8004c6c <HAL_ADC_ConfigChannel+0x574>
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	0e9b      	lsrs	r3, r3, #26
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	f003 021f 	and.w	r2, r3, #31
 8004c62:	4613      	mov	r3, r2
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	4413      	add	r3, r2
 8004c68:	051b      	lsls	r3, r3, #20
 8004c6a:	e018      	b.n	8004c9e <HAL_ADC_ConfigChannel+0x5a6>
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	fa93 f3a3 	rbit	r3, r3
 8004c78:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004c7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004c84:	2320      	movs	r3, #32
 8004c86:	e003      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c8a:	fab3 f383 	clz	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	3301      	adds	r3, #1
 8004c92:	f003 021f 	and.w	r2, r3, #31
 8004c96:	4613      	mov	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004c9e:	430b      	orrs	r3, r1
 8004ca0:	e081      	b.n	8004da6 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d107      	bne.n	8004cbe <HAL_ADC_ConfigChannel+0x5c6>
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	0e9b      	lsrs	r3, r3, #26
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	069b      	lsls	r3, r3, #26
 8004cb8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cbc:	e015      	b.n	8004cea <HAL_ADC_ConfigChannel+0x5f2>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	fa93 f3a3 	rbit	r3, r3
 8004cca:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cce:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004cd6:	2320      	movs	r3, #32
 8004cd8:	e003      	b.n	8004ce2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cdc:	fab3 f383 	clz	r3, r3
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	069b      	lsls	r3, r3, #26
 8004ce6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d109      	bne.n	8004d0a <HAL_ADC_ConfigChannel+0x612>
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	0e9b      	lsrs	r3, r3, #26
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	f003 031f 	and.w	r3, r3, #31
 8004d02:	2101      	movs	r1, #1
 8004d04:	fa01 f303 	lsl.w	r3, r1, r3
 8004d08:	e017      	b.n	8004d3a <HAL_ADC_ConfigChannel+0x642>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	fa93 f3a3 	rbit	r3, r3
 8004d16:	61fb      	str	r3, [r7, #28]
  return result;
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8004d22:	2320      	movs	r3, #32
 8004d24:	e003      	b.n	8004d2e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8004d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d28:	fab3 f383 	clz	r3, r3
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	3301      	adds	r3, #1
 8004d30:	f003 031f 	and.w	r3, r3, #31
 8004d34:	2101      	movs	r1, #1
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	ea42 0103 	orr.w	r1, r2, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <HAL_ADC_ConfigChannel+0x66e>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	0e9b      	lsrs	r3, r3, #26
 8004d50:	3301      	adds	r3, #1
 8004d52:	f003 021f 	and.w	r2, r3, #31
 8004d56:	4613      	mov	r3, r2
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3b1e      	subs	r3, #30
 8004d5e:	051b      	lsls	r3, r3, #20
 8004d60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004d64:	e01e      	b.n	8004da4 <HAL_ADC_ConfigChannel+0x6ac>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	fa93 f3a3 	rbit	r3, r3
 8004d72:	613b      	str	r3, [r7, #16]
  return result;
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d104      	bne.n	8004d88 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004d7e:	2320      	movs	r3, #32
 8004d80:	e006      	b.n	8004d90 <HAL_ADC_ConfigChannel+0x698>
 8004d82:	bf00      	nop
 8004d84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	fab3 f383 	clz	r3, r3
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3301      	adds	r3, #1
 8004d92:	f003 021f 	and.w	r2, r3, #31
 8004d96:	4613      	mov	r3, r2
 8004d98:	005b      	lsls	r3, r3, #1
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3b1e      	subs	r3, #30
 8004d9e:	051b      	lsls	r3, r3, #20
 8004da0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004da4:	430b      	orrs	r3, r1
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	6892      	ldr	r2, [r2, #8]
 8004daa:	4619      	mov	r1, r3
 8004dac:	f7fe fe06 	bl	80039bc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681a      	ldr	r2, [r3, #0]
 8004db4:	4b3f      	ldr	r3, [pc, #252]	; (8004eb4 <HAL_ADC_ConfigChannel+0x7bc>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d071      	beq.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004dbc:	483e      	ldr	r0, [pc, #248]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004dbe:	f7fe fcff 	bl	80037c0 <LL_ADC_GetCommonPathInternalCh>
 8004dc2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a3c      	ldr	r2, [pc, #240]	; (8004ebc <HAL_ADC_ConfigChannel+0x7c4>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d004      	beq.n	8004dda <HAL_ADC_ConfigChannel+0x6e2>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3a      	ldr	r2, [pc, #232]	; (8004ec0 <HAL_ADC_ConfigChannel+0x7c8>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d127      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004dde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d121      	bne.n	8004e2a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004dee:	d157      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004df0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004df8:	4619      	mov	r1, r3
 8004dfa:	482f      	ldr	r0, [pc, #188]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004dfc:	f7fe fccd 	bl	800379a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004e00:	4b30      	ldr	r3, [pc, #192]	; (8004ec4 <HAL_ADC_ConfigChannel+0x7cc>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	099b      	lsrs	r3, r3, #6
 8004e06:	4a30      	ldr	r2, [pc, #192]	; (8004ec8 <HAL_ADC_ConfigChannel+0x7d0>)
 8004e08:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0c:	099b      	lsrs	r3, r3, #6
 8004e0e:	1c5a      	adds	r2, r3, #1
 8004e10:	4613      	mov	r3, r2
 8004e12:	005b      	lsls	r3, r3, #1
 8004e14:	4413      	add	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e1a:	e002      	b.n	8004e22 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d1f9      	bne.n	8004e1c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004e28:	e03a      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a27      	ldr	r2, [pc, #156]	; (8004ecc <HAL_ADC_ConfigChannel+0x7d4>)
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d113      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x764>
 8004e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10d      	bne.n	8004e5c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a22      	ldr	r2, [pc, #136]	; (8004ed0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d02a      	beq.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e52:	4619      	mov	r1, r3
 8004e54:	4818      	ldr	r0, [pc, #96]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e56:	f7fe fca0 	bl	800379a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004e5a:	e021      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1c      	ldr	r2, [pc, #112]	; (8004ed4 <HAL_ADC_ConfigChannel+0x7dc>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d11c      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d116      	bne.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a16      	ldr	r2, [pc, #88]	; (8004ed0 <HAL_ADC_ConfigChannel+0x7d8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d011      	beq.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004e7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004e80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004e84:	4619      	mov	r1, r3
 8004e86:	480c      	ldr	r0, [pc, #48]	; (8004eb8 <HAL_ADC_ConfigChannel+0x7c0>)
 8004e88:	f7fe fc87 	bl	800379a <LL_ADC_SetCommonPathInternalCh>
 8004e8c:	e008      	b.n	8004ea0 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e92:	f043 0220 	orr.w	r2, r3, #32
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004ea8:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	37d8      	adds	r7, #216	; 0xd8
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}
 8004eb4:	80080000 	.word	0x80080000
 8004eb8:	50000300 	.word	0x50000300
 8004ebc:	c3210000 	.word	0xc3210000
 8004ec0:	90c00010 	.word	0x90c00010
 8004ec4:	20000024 	.word	0x20000024
 8004ec8:	053e2d63 	.word	0x053e2d63
 8004ecc:	c7520000 	.word	0xc7520000
 8004ed0:	50000100 	.word	0x50000100
 8004ed4:	cb840000 	.word	0xcb840000

08004ed8 <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08e      	sub	sp, #56	; 0x38
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_ADC_ANALOG_WATCHDOG_FILTERING_MODE(AnalogWDGConfig->FilteringConfig));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ef0:	d003      	beq.n	8004efa <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 8004ef6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_ADC_AnalogWDGConfig+0x30>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e1ea      	b.n	80052de <HAL_ADC_AnalogWDGConfig+0x406>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fe fec0 	bl	8003c9a <LL_ADC_REG_IsConversionOngoing>
 8004f1a:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4618      	mov	r0, r3
 8004f22:	f7fe fecd 	bl	8003cc0 <LL_ADC_INJ_IsConversionOngoing>
 8004f26:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	f040 8175 	bne.w	800521a <HAL_ADC_AnalogWDGConfig+0x342>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f040 8171 	bne.w	800521a <HAL_ADC_AnalogWDGConfig+0x342>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a90      	ldr	r2, [pc, #576]	; (8005180 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	f040 808d 	bne.w	800505e <HAL_ADC_AnalogWDGConfig+0x186>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8004f4c:	d034      	beq.n	8004fb8 <HAL_ADC_AnalogWDGConfig+0xe0>
 8004f4e:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8004f52:	d856      	bhi.n	8005002 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004f54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f58:	d04b      	beq.n	8004ff2 <HAL_ADC_AnalogWDGConfig+0x11a>
 8004f5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004f5e:	d850      	bhi.n	8005002 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004f60:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004f64:	d01b      	beq.n	8004f9e <HAL_ADC_AnalogWDGConfig+0xc6>
 8004f66:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8004f6a:	d84a      	bhi.n	8005002 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f70:	d037      	beq.n	8004fe2 <HAL_ADC_AnalogWDGConfig+0x10a>
 8004f72:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f76:	d844      	bhi.n	8005002 <HAL_ADC_AnalogWDGConfig+0x12a>
 8004f78:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004f7c:	d029      	beq.n	8004fd2 <HAL_ADC_AnalogWDGConfig+0xfa>
 8004f7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004f82:	d13e      	bne.n	8005002 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6818      	ldr	r0, [r3, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004f90:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8004f94:	461a      	mov	r2, r3
 8004f96:	497a      	ldr	r1, [pc, #488]	; (8005180 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8004f98:	f7fe fd64 	bl	8003a64 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 8004f9c:	e039      	b.n	8005012 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004faa:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4973      	ldr	r1, [pc, #460]	; (8005180 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8004fb2:	f7fe fd57 	bl	8003a64 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 8004fb6:	e02c      	b.n	8005012 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6818      	ldr	r0, [r3, #0]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8004fc4:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 8004fc8:	461a      	mov	r2, r3
 8004fca:	496d      	ldr	r1, [pc, #436]	; (8005180 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8004fcc:	f7fe fd4a 	bl	8003a64 <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8004fd0:	e01f      	b.n	8005012 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	4a6b      	ldr	r2, [pc, #428]	; (8005184 <HAL_ADC_AnalogWDGConfig+0x2ac>)
 8004fd8:	4969      	ldr	r1, [pc, #420]	; (8005180 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7fe fd42 	bl	8003a64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004fe0:	e017      	b.n	8005012 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a68      	ldr	r2, [pc, #416]	; (8005188 <HAL_ADC_AnalogWDGConfig+0x2b0>)
 8004fe8:	4965      	ldr	r1, [pc, #404]	; (8005180 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fe fd3a 	bl	8003a64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8004ff0:	e00f      	b.n	8005012 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a65      	ldr	r2, [pc, #404]	; (800518c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8004ff8:	4961      	ldr	r1, [pc, #388]	; (8005180 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe fd32 	bl	8003a64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005000:	e007      	b.n	8005012 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	2200      	movs	r2, #0
 8005008:	495d      	ldr	r1, [pc, #372]	; (8005180 <HAL_ADC_AnalogWDGConfig+0x2a8>)
 800500a:	4618      	mov	r0, r3
 800500c:	f7fe fd2a 	bl	8003a64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8005010:	bf00      	nop
      }

      /* Set the filtering configuration */
      MODIFY_REG(hadc->Instance->TR1,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	699a      	ldr	r2, [r3, #24]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	621a      	str	r2, [r3, #32]
                 ADC_TR1_AWDFILT,
                 AnalogWDGConfig->FilteringConfig);

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800502c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4618      	mov	r0, r3
 800503a:	f7fe fe54 	bl	8003ce6 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	7b1b      	ldrb	r3, [r3, #12]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d105      	bne.n	8005052 <HAL_ADC_AnalogWDGConfig+0x17a>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe fe74 	bl	8003d38 <LL_ADC_EnableIT_AWD1>
 8005050:	e0e3      	b.n	800521a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe fe9e 	bl	8003d98 <LL_ADC_DisableIT_AWD1>
 800505c:	e0dd      	b.n	800521a <HAL_ADC_AnalogWDGConfig+0x342>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 8005066:	d01d      	beq.n	80050a4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8005068:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 800506c:	f200 8092 	bhi.w	8005194 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005070:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005074:	d07b      	beq.n	800516e <HAL_ADC_AnalogWDGConfig+0x296>
 8005076:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800507a:	f200 808b 	bhi.w	8005194 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800507e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005082:	d00f      	beq.n	80050a4 <HAL_ADC_AnalogWDGConfig+0x1cc>
 8005084:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8005088:	f200 8084 	bhi.w	8005194 <HAL_ADC_AnalogWDGConfig+0x2bc>
 800508c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005090:	d06d      	beq.n	800516e <HAL_ADC_AnalogWDGConfig+0x296>
 8005092:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005096:	d87d      	bhi.n	8005194 <HAL_ADC_AnalogWDGConfig+0x2bc>
 8005098:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800509c:	d067      	beq.n	800516e <HAL_ADC_AnalogWDGConfig+0x296>
 800509e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80050a2:	d177      	bne.n	8005194 <HAL_ADC_AnalogWDGConfig+0x2bc>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a39      	ldr	r2, [pc, #228]	; (8005190 <HAL_ADC_AnalogWDGConfig+0x2b8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d12f      	bne.n	800510e <HAL_ADC_AnalogWDGConfig+0x236>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d108      	bne.n	80050cc <HAL_ADC_AnalogWDGConfig+0x1f4>
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	0e9b      	lsrs	r3, r3, #26
 80050c0:	f003 031f 	and.w	r3, r3, #31
 80050c4:	2201      	movs	r2, #1
 80050c6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ca:	e016      	b.n	80050fa <HAL_ADC_AnalogWDGConfig+0x222>
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	fa93 f3a3 	rbit	r3, r3
 80050d8:	61bb      	str	r3, [r7, #24]
  return result;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80050de:	6a3b      	ldr	r3, [r7, #32]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d101      	bne.n	80050e8 <HAL_ADC_AnalogWDGConfig+0x210>
    return 32U;
 80050e4:	2320      	movs	r3, #32
 80050e6:	e003      	b.n	80050f0 <HAL_ADC_AnalogWDGConfig+0x218>
  return __builtin_clz(value);
 80050e8:	6a3b      	ldr	r3, [r7, #32]
 80050ea:	fab3 f383 	clz	r3, r3
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	f003 031f 	and.w	r3, r3, #31
 80050f4:	2201      	movs	r2, #1
 80050f6:	fa02 f303 	lsl.w	r3, r2, r3
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	6812      	ldr	r2, [r2, #0]
 80050fe:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8005102:	687a      	ldr	r2, [r7, #4]
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	430b      	orrs	r3, r1
 8005108:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 800510c:	e04b      	b.n	80051a6 <HAL_ADC_AnalogWDGConfig+0x2ce>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005116:	2b00      	cmp	r3, #0
 8005118:	d108      	bne.n	800512c <HAL_ADC_AnalogWDGConfig+0x254>
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	0e9b      	lsrs	r3, r3, #26
 8005120:	f003 031f 	and.w	r3, r3, #31
 8005124:	2201      	movs	r2, #1
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	e016      	b.n	800515a <HAL_ADC_AnalogWDGConfig+0x282>
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	fa93 f3a3 	rbit	r3, r3
 8005138:	60fb      	str	r3, [r7, #12]
  return result;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d101      	bne.n	8005148 <HAL_ADC_AnalogWDGConfig+0x270>
    return 32U;
 8005144:	2320      	movs	r3, #32
 8005146:	e003      	b.n	8005150 <HAL_ADC_AnalogWDGConfig+0x278>
  return __builtin_clz(value);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	fab3 f383 	clz	r3, r3
 800514e:	b2db      	uxtb	r3, r3
 8005150:	f003 031f 	and.w	r3, r3, #31
 8005154:	2201      	movs	r2, #1
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	430b      	orrs	r3, r1
 8005168:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 800516c:	e01b      	b.n	80051a6 <HAL_ADC_AnalogWDGConfig+0x2ce>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a05      	ldr	r2, [pc, #20]	; (800518c <HAL_ADC_AnalogWDGConfig+0x2b4>)
 8005178:	4619      	mov	r1, r3
 800517a:	f7fe fc73 	bl	8003a64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 800517e:	e012      	b.n	80051a6 <HAL_ADC_AnalogWDGConfig+0x2ce>
 8005180:	7dc00000 	.word	0x7dc00000
 8005184:	0087ffff 	.word	0x0087ffff
 8005188:	0107ffff 	.word	0x0107ffff
 800518c:	0187ffff 	.word	0x0187ffff
 8005190:	0017ffff 	.word	0x0017ffff

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6818      	ldr	r0, [r3, #0]
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2200      	movs	r2, #0
 800519e:	4619      	mov	r1, r3
 80051a0:	f7fe fc60 	bl	8003a64 <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80051a4:	bf00      	nop
      }

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a4f      	ldr	r2, [pc, #316]	; (80052e8 <HAL_ADC_AnalogWDGConfig+0x410>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d11a      	bne.n	80051e6 <HAL_ADC_AnalogWDGConfig+0x30e>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051b4:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7fe fd9d 	bl	8003d00 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	7b1b      	ldrb	r3, [r3, #12]
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d105      	bne.n	80051da <HAL_ADC_AnalogWDGConfig+0x302>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fe fdc0 	bl	8003d58 <LL_ADC_EnableIT_AWD2>
 80051d8:	e01f      	b.n	800521a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4618      	mov	r0, r3
 80051e0:	f7fe fdea 	bl	8003db8 <LL_ADC_DisableIT_AWD2>
 80051e4:	e019      	b.n	800521a <HAL_ADC_AnalogWDGConfig+0x342>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7fe fd90 	bl	8003d1c <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	7b1b      	ldrb	r3, [r3, #12]
 8005200:	2b01      	cmp	r3, #1
 8005202:	d105      	bne.n	8005210 <HAL_ADC_AnalogWDGConfig+0x338>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f7fe fdb5 	bl	8003d78 <LL_ADC_EnableIT_AWD3>
 800520e:	e004      	b.n	800521a <HAL_ADC_AnalogWDGConfig+0x342>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f7fe fddf 	bl	8003dd8 <LL_ADC_DisableIT_AWD3>
    }

  }

  /* Analog watchdog thresholds configuration */
  if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4a33      	ldr	r2, [pc, #204]	; (80052ec <HAL_ADC_AnalogWDGConfig+0x414>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d118      	bne.n	8005256 <HAL_ADC_AnalogWDGConfig+0x37e>
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	691a      	ldr	r2, [r3, #16]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	08db      	lsrs	r3, r3, #3
 8005230:	f003 0303 	and.w	r3, r3, #3
 8005234:	005b      	lsls	r3, r3, #1
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	695a      	ldr	r2, [r3, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	08db      	lsrs	r3, r3, #3
 8005248:	f003 0303 	and.w	r3, r3, #3
 800524c:	005b      	lsls	r3, r3, #1
 800524e:	fa02 f303 	lsl.w	r3, r2, r3
 8005252:	633b      	str	r3, [r7, #48]	; 0x30
 8005254:	e035      	b.n	80052c2 <HAL_ADC_AnalogWDGConfig+0x3ea>
  else
  {
    /* Shift the offset with respect to the selected ADC resolution:        */
    /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
    /* are set to 0.                                                        */
    tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68db      	ldr	r3, [r3, #12]
 800525c:	f003 0318 	and.w	r3, r3, #24
 8005260:	2b18      	cmp	r3, #24
 8005262:	d00f      	beq.n	8005284 <HAL_ADC_AnalogWDGConfig+0x3ac>
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	08db      	lsrs	r3, r3, #3
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	f1c3 0302 	rsb	r3, r3, #2
 8005278:	005b      	lsls	r3, r3, #1
 800527a:	f003 031e 	and.w	r3, r3, #30
 800527e:	fa22 f303 	lsr.w	r3, r2, r3
 8005282:	e002      	b.n	800528a <HAL_ADC_AnalogWDGConfig+0x3b2>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	637b      	str	r3, [r7, #52]	; 0x34
    tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	f003 0318 	and.w	r3, r3, #24
 8005296:	2b18      	cmp	r3, #24
 8005298:	d00f      	beq.n	80052ba <HAL_ADC_AnalogWDGConfig+0x3e2>
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	695a      	ldr	r2, [r3, #20]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	08db      	lsrs	r3, r3, #3
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	f1c3 0302 	rsb	r3, r3, #2
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	f003 031e 	and.w	r3, r3, #30
 80052b4:	fa22 f303 	lsr.w	r3, r2, r3
 80052b8:	e002      	b.n	80052c0 <HAL_ADC_AnalogWDGConfig+0x3e8>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	633b      	str	r3, [r7, #48]	; 0x30
  }

  /* Set ADC analog watchdog thresholds value of both thresholds high and low */
  LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted,
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6818      	ldr	r0, [r3, #0]
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	6819      	ldr	r1, [r3, #0]
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052ce:	f7fe fbf6 	bl	8003abe <LL_ADC_ConfigAnalogWDThresholds>
                                  tmpAWDLowThresholdShifted);

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80052da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3738      	adds	r7, #56	; 0x38
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}
 80052e6:	bf00      	nop
 80052e8:	0017ffff 	.word	0x0017ffff
 80052ec:	7dc00000 	.word	0x7dc00000

080052f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f7fe fc92 	bl	8003c26 <LL_ADC_IsEnabled>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d14d      	bne.n	80053a4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	689a      	ldr	r2, [r3, #8]
 800530e:	4b28      	ldr	r3, [pc, #160]	; (80053b0 <ADC_Enable+0xc0>)
 8005310:	4013      	ands	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800531a:	f043 0210 	orr.w	r2, r3, #16
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005326:	f043 0201 	orr.w	r2, r3, #1
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e039      	b.n	80053a6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f7fe fc4d 	bl	8003bd6 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800533c:	f7fe f9ec 	bl	8003718 <HAL_GetTick>
 8005340:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005342:	e028      	b.n	8005396 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe fc6c 	bl	8003c26 <LL_ADC_IsEnabled>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d104      	bne.n	800535e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	4618      	mov	r0, r3
 800535a:	f7fe fc3c 	bl	8003bd6 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800535e:	f7fe f9db 	bl	8003718 <HAL_GetTick>
 8005362:	4602      	mov	r2, r0
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d914      	bls.n	8005396 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b01      	cmp	r3, #1
 8005378:	d00d      	beq.n	8005396 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800537e:	f043 0210 	orr.w	r2, r3, #16
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800538a:	f043 0201 	orr.w	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e007      	b.n	80053a6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d1cf      	bne.n	8005344 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	8000003f 	.word	0x8000003f

080053b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f7fe fc43 	bl	8003c4c <LL_ADC_IsDisableOngoing>
 80053c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7fe fc2a 	bl	8003c26 <LL_ADC_IsEnabled>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d047      	beq.n	8005468 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d144      	bne.n	8005468 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 030d 	and.w	r3, r3, #13
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d10c      	bne.n	8005406 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f7fe fc04 	bl	8003bfe <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	2203      	movs	r2, #3
 80053fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80053fe:	f7fe f98b 	bl	8003718 <HAL_GetTick>
 8005402:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005404:	e029      	b.n	800545a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800540a:	f043 0210 	orr.w	r2, r3, #16
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005416:	f043 0201 	orr.w	r2, r3, #1
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e023      	b.n	800546a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005422:	f7fe f979 	bl	8003718 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	2b02      	cmp	r3, #2
 800542e:	d914      	bls.n	800545a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	d00d      	beq.n	800545a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005442:	f043 0210 	orr.w	r2, r3, #16
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800544e:	f043 0201 	orr.w	r2, r3, #1
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e007      	b.n	800546a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1dc      	bne.n	8005422 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005484:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005488:	2b00      	cmp	r3, #0
 800548a:	d14b      	bne.n	8005524 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005490:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d021      	beq.n	80054ea <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f7fe fa34 	bl	8003918 <LL_ADC_REG_IsTriggerSourceSWStart>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d032      	beq.n	800551c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d12b      	bne.n	800551c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d11f      	bne.n	800551c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054e0:	f043 0201 	orr.w	r2, r3, #1
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80054e8:	e018      	b.n	800551c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0302 	and.w	r3, r3, #2
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d111      	bne.n	800551c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80054fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d105      	bne.n	800551c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005514:	f043 0201 	orr.w	r2, r3, #1
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f7ff f8c3 	bl	80046a8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005522:	e00e      	b.n	8005542 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005528:	f003 0310 	and.w	r3, r3, #16
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff f8d7 	bl	80046e4 <HAL_ADC_ErrorCallback>
}
 8005536:	e004      	b.n	8005542 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800553c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	4798      	blx	r3
}
 8005542:	bf00      	nop
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f7ff f8af 	bl	80046bc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800555e:	bf00      	nop
 8005560:	3710      	adds	r7, #16
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b084      	sub	sp, #16
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005578:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005584:	f043 0204 	orr.w	r2, r3, #4
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800558c:	68f8      	ldr	r0, [r7, #12]
 800558e:	f7ff f8a9 	bl	80046e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005592:	bf00      	nop
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <LL_ADC_IsEnabled>:
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <LL_ADC_IsEnabled+0x18>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <LL_ADC_IsEnabled+0x1a>
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <LL_ADC_StartCalibration>:
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80055d2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80055dc:	4313      	orrs	r3, r2
 80055de:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	609a      	str	r2, [r3, #8]
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <LL_ADC_IsCalibrationOnGoing>:
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005606:	d101      	bne.n	800560c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005608:	2301      	movs	r3, #1
 800560a:	e000      	b.n	800560e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <LL_ADC_REG_IsConversionOngoing>:
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	2b04      	cmp	r3, #4
 800562c:	d101      	bne.n	8005632 <LL_ADC_REG_IsConversionOngoing+0x18>
 800562e:	2301      	movs	r3, #1
 8005630:	e000      	b.n	8005634 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800564a:	2300      	movs	r3, #0
 800564c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_ADCEx_Calibration_Start+0x1c>
 8005658:	2302      	movs	r3, #2
 800565a:	e04d      	b.n	80056f8 <HAL_ADCEx_Calibration_Start+0xb8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f7ff fea5 	bl	80053b4 <ADC_Disable>
 800566a:	4603      	mov	r3, r0
 800566c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800566e:	7bfb      	ldrb	r3, [r7, #15]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d136      	bne.n	80056e2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005678:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800567c:	f023 0302 	bic.w	r3, r3, #2
 8005680:	f043 0202 	orr.w	r2, r3, #2
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	6839      	ldr	r1, [r7, #0]
 800568e:	4618      	mov	r0, r3
 8005690:	f7ff ff96 	bl	80055c0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005694:	e014      	b.n	80056c0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	3301      	adds	r3, #1
 800569a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	4a18      	ldr	r2, [pc, #96]	; (8005700 <HAL_ADCEx_Calibration_Start+0xc0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d90d      	bls.n	80056c0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056a8:	f023 0312 	bic.w	r3, r3, #18
 80056ac:	f043 0210 	orr.w	r2, r3, #16
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 80056bc:	2301      	movs	r3, #1
 80056be:	e01b      	b.n	80056f8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff ff94 	bl	80055f2 <LL_ADC_IsCalibrationOnGoing>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1e2      	bne.n	8005696 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056d4:	f023 0303 	bic.w	r3, r3, #3
 80056d8:	f043 0201 	orr.w	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	65da      	str	r2, [r3, #92]	; 0x5c
 80056e0:	e005      	b.n	80056ee <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056e6:	f043 0210 	orr.w	r2, r3, #16
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80056f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3710      	adds	r7, #16
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	0004de01 	.word	0x0004de01

08005704 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005718:	b480      	push	{r7}
 800571a:	b083      	sub	sp, #12
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005720:	bf00      	nop
 8005722:	370c      	adds	r7, #12
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr

0800572c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800572c:	b480      	push	{r7}
 800572e:	b083      	sub	sp, #12
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005734:	bf00      	nop
 8005736:	370c      	adds	r7, #12
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005768:	b590      	push	{r4, r7, lr}
 800576a:	b0a1      	sub	sp, #132	; 0x84
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800577e:	2b01      	cmp	r3, #1
 8005780:	d101      	bne.n	8005786 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005782:	2302      	movs	r3, #2
 8005784:	e08b      	b.n	800589e <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2201      	movs	r2, #1
 800578a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800578e:	2300      	movs	r3, #0
 8005790:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8005792:	2300      	movs	r3, #0
 8005794:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800579e:	d102      	bne.n	80057a6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80057a0:	4b41      	ldr	r3, [pc, #260]	; (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80057a2:	60bb      	str	r3, [r7, #8]
 80057a4:	e001      	b.n	80057aa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80057a6:	2300      	movs	r3, #0
 80057a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10b      	bne.n	80057c8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057b4:	f043 0220 	orr.w	r2, r3, #32
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e06a      	b.n	800589e <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	4618      	mov	r0, r3
 80057cc:	f7ff ff25 	bl	800561a <LL_ADC_REG_IsConversionOngoing>
 80057d0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7ff ff1f 	bl	800561a <LL_ADC_REG_IsConversionOngoing>
 80057dc:	4603      	mov	r3, r0
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d14c      	bne.n	800587c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80057e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d149      	bne.n	800587c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80057e8:	4b30      	ldr	r3, [pc, #192]	; (80058ac <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80057ea:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d028      	beq.n	8005846 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80057f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80057f6:	689b      	ldr	r3, [r3, #8]
 80057f8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	6859      	ldr	r1, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005806:	035b      	lsls	r3, r3, #13
 8005808:	430b      	orrs	r3, r1
 800580a:	431a      	orrs	r2, r3
 800580c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800580e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005810:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005814:	f7ff fec1 	bl	800559a <LL_ADC_IsEnabled>
 8005818:	4604      	mov	r4, r0
 800581a:	4823      	ldr	r0, [pc, #140]	; (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800581c:	f7ff febd 	bl	800559a <LL_ADC_IsEnabled>
 8005820:	4603      	mov	r3, r0
 8005822:	4323      	orrs	r3, r4
 8005824:	2b00      	cmp	r3, #0
 8005826:	d133      	bne.n	8005890 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005830:	f023 030f 	bic.w	r3, r3, #15
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	6811      	ldr	r1, [r2, #0]
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	6892      	ldr	r2, [r2, #8]
 800583c:	430a      	orrs	r2, r1
 800583e:	431a      	orrs	r2, r3
 8005840:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005842:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005844:	e024      	b.n	8005890 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8005846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800584e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005850:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005852:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005856:	f7ff fea0 	bl	800559a <LL_ADC_IsEnabled>
 800585a:	4604      	mov	r4, r0
 800585c:	4812      	ldr	r0, [pc, #72]	; (80058a8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800585e:	f7ff fe9c 	bl	800559a <LL_ADC_IsEnabled>
 8005862:	4603      	mov	r3, r0
 8005864:	4323      	orrs	r3, r4
 8005866:	2b00      	cmp	r3, #0
 8005868:	d112      	bne.n	8005890 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800586a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8005872:	f023 030f 	bic.w	r3, r3, #15
 8005876:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005878:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800587a:	e009      	b.n	8005890 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005880:	f043 0220 	orr.w	r2, r3, #32
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800588e:	e000      	b.n	8005892 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005890:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800589a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3784      	adds	r7, #132	; 0x84
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd90      	pop	{r4, r7, pc}
 80058a6:	bf00      	nop
 80058a8:	50000100 	.word	0x50000100
 80058ac:	50000300 	.word	0x50000300

080058b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80058c0:	4b0c      	ldr	r3, [pc, #48]	; (80058f4 <__NVIC_SetPriorityGrouping+0x44>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80058c6:	68ba      	ldr	r2, [r7, #8]
 80058c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80058cc:	4013      	ands	r3, r2
 80058ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80058d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80058dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80058e2:	4a04      	ldr	r2, [pc, #16]	; (80058f4 <__NVIC_SetPriorityGrouping+0x44>)
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	60d3      	str	r3, [r2, #12]
}
 80058e8:	bf00      	nop
 80058ea:	3714      	adds	r7, #20
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	e000ed00 	.word	0xe000ed00

080058f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80058fc:	4b04      	ldr	r3, [pc, #16]	; (8005910 <__NVIC_GetPriorityGrouping+0x18>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	0a1b      	lsrs	r3, r3, #8
 8005902:	f003 0307 	and.w	r3, r3, #7
}
 8005906:	4618      	mov	r0, r3
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr
 8005910:	e000ed00 	.word	0xe000ed00

08005914 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	4603      	mov	r3, r0
 800591c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800591e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005922:	2b00      	cmp	r3, #0
 8005924:	db0b      	blt.n	800593e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005926:	79fb      	ldrb	r3, [r7, #7]
 8005928:	f003 021f 	and.w	r2, r3, #31
 800592c:	4907      	ldr	r1, [pc, #28]	; (800594c <__NVIC_EnableIRQ+0x38>)
 800592e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005932:	095b      	lsrs	r3, r3, #5
 8005934:	2001      	movs	r0, #1
 8005936:	fa00 f202 	lsl.w	r2, r0, r2
 800593a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800593e:	bf00      	nop
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	e000e100 	.word	0xe000e100

08005950 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	6039      	str	r1, [r7, #0]
 800595a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800595c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005960:	2b00      	cmp	r3, #0
 8005962:	db0a      	blt.n	800597a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	b2da      	uxtb	r2, r3
 8005968:	490c      	ldr	r1, [pc, #48]	; (800599c <__NVIC_SetPriority+0x4c>)
 800596a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800596e:	0112      	lsls	r2, r2, #4
 8005970:	b2d2      	uxtb	r2, r2
 8005972:	440b      	add	r3, r1
 8005974:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005978:	e00a      	b.n	8005990 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	b2da      	uxtb	r2, r3
 800597e:	4908      	ldr	r1, [pc, #32]	; (80059a0 <__NVIC_SetPriority+0x50>)
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	3b04      	subs	r3, #4
 8005988:	0112      	lsls	r2, r2, #4
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	440b      	add	r3, r1
 800598e:	761a      	strb	r2, [r3, #24]
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	e000e100 	.word	0xe000e100
 80059a0:	e000ed00 	.word	0xe000ed00

080059a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b089      	sub	sp, #36	; 0x24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	f1c3 0307 	rsb	r3, r3, #7
 80059be:	2b04      	cmp	r3, #4
 80059c0:	bf28      	it	cs
 80059c2:	2304      	movcs	r3, #4
 80059c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	3304      	adds	r3, #4
 80059ca:	2b06      	cmp	r3, #6
 80059cc:	d902      	bls.n	80059d4 <NVIC_EncodePriority+0x30>
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	3b03      	subs	r3, #3
 80059d2:	e000      	b.n	80059d6 <NVIC_EncodePriority+0x32>
 80059d4:	2300      	movs	r3, #0
 80059d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059d8:	f04f 32ff 	mov.w	r2, #4294967295
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	fa02 f303 	lsl.w	r3, r2, r3
 80059e2:	43da      	mvns	r2, r3
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	401a      	ands	r2, r3
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80059ec:	f04f 31ff 	mov.w	r1, #4294967295
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	fa01 f303 	lsl.w	r3, r1, r3
 80059f6:	43d9      	mvns	r1, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80059fc:	4313      	orrs	r3, r2
         );
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3724      	adds	r7, #36	; 0x24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
	...

08005a0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	3b01      	subs	r3, #1
 8005a18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a1c:	d301      	bcc.n	8005a22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e00f      	b.n	8005a42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005a22:	4a0a      	ldr	r2, [pc, #40]	; (8005a4c <SysTick_Config+0x40>)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005a2a:	210f      	movs	r1, #15
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	f7ff ff8e 	bl	8005950 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005a34:	4b05      	ldr	r3, [pc, #20]	; (8005a4c <SysTick_Config+0x40>)
 8005a36:	2200      	movs	r2, #0
 8005a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005a3a:	4b04      	ldr	r3, [pc, #16]	; (8005a4c <SysTick_Config+0x40>)
 8005a3c:	2207      	movs	r2, #7
 8005a3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	e000e010 	.word	0xe000e010

08005a50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b082      	sub	sp, #8
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f7ff ff29 	bl	80058b0 <__NVIC_SetPriorityGrouping>
}
 8005a5e:	bf00      	nop
 8005a60:	3708      	adds	r7, #8
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b086      	sub	sp, #24
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	60b9      	str	r1, [r7, #8]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005a74:	f7ff ff40 	bl	80058f8 <__NVIC_GetPriorityGrouping>
 8005a78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	68b9      	ldr	r1, [r7, #8]
 8005a7e:	6978      	ldr	r0, [r7, #20]
 8005a80:	f7ff ff90 	bl	80059a4 <NVIC_EncodePriority>
 8005a84:	4602      	mov	r2, r0
 8005a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a8a:	4611      	mov	r1, r2
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f7ff ff5f 	bl	8005950 <__NVIC_SetPriority>
}
 8005a92:	bf00      	nop
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}

08005a9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a9a:	b580      	push	{r7, lr}
 8005a9c:	b082      	sub	sp, #8
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7ff ff33 	bl	8005914 <__NVIC_EnableIRQ>
}
 8005aae:	bf00      	nop
 8005ab0:	3708      	adds	r7, #8
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005ab6:	b580      	push	{r7, lr}
 8005ab8:	b082      	sub	sp, #8
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f7ff ffa4 	bl	8005a0c <SysTick_Config>
 8005ac4:	4603      	mov	r3, r0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d101      	bne.n	8005ae2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e08d      	b.n	8005bfe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	4b47      	ldr	r3, [pc, #284]	; (8005c08 <HAL_DMA_Init+0x138>)
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d80f      	bhi.n	8005b0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	4b45      	ldr	r3, [pc, #276]	; (8005c0c <HAL_DMA_Init+0x13c>)
 8005af6:	4413      	add	r3, r2
 8005af8:	4a45      	ldr	r2, [pc, #276]	; (8005c10 <HAL_DMA_Init+0x140>)
 8005afa:	fba2 2303 	umull	r2, r3, r2, r3
 8005afe:	091b      	lsrs	r3, r3, #4
 8005b00:	009a      	lsls	r2, r3, #2
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a42      	ldr	r2, [pc, #264]	; (8005c14 <HAL_DMA_Init+0x144>)
 8005b0a:	641a      	str	r2, [r3, #64]	; 0x40
 8005b0c:	e00e      	b.n	8005b2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	461a      	mov	r2, r3
 8005b14:	4b40      	ldr	r3, [pc, #256]	; (8005c18 <HAL_DMA_Init+0x148>)
 8005b16:	4413      	add	r3, r2
 8005b18:	4a3d      	ldr	r2, [pc, #244]	; (8005c10 <HAL_DMA_Init+0x140>)
 8005b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b1e:	091b      	lsrs	r3, r3, #4
 8005b20:	009a      	lsls	r2, r3, #2
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a3c      	ldr	r2, [pc, #240]	; (8005c1c <HAL_DMA_Init+0x14c>)
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	691b      	ldr	r3, [r3, #16]
 8005b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	4313      	orrs	r3, r2
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fa76 	bl	8006070 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b8c:	d102      	bne.n	8005b94 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ba8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d010      	beq.n	8005bd4 <HAL_DMA_Init+0x104>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	2b04      	cmp	r3, #4
 8005bb8:	d80c      	bhi.n	8005bd4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 fa96 	bl	80060ec <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005bd0:	605a      	str	r2, [r3, #4]
 8005bd2:	e008      	b.n	8005be6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2200      	movs	r2, #0
 8005bea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005bfc:	2300      	movs	r3, #0
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	40020407 	.word	0x40020407
 8005c0c:	bffdfff8 	.word	0xbffdfff8
 8005c10:	cccccccd 	.word	0xcccccccd
 8005c14:	40020000 	.word	0x40020000
 8005c18:	bffdfbf8 	.word	0xbffdfbf8
 8005c1c:	40020400 	.word	0x40020400

08005c20 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d101      	bne.n	8005c40 <HAL_DMA_Start_IT+0x20>
 8005c3c:	2302      	movs	r3, #2
 8005c3e:	e066      	b.n	8005d0e <HAL_DMA_Start_IT+0xee>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2201      	movs	r2, #1
 8005c44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d155      	bne.n	8005d00 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2202      	movs	r2, #2
 8005c58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0201 	bic.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f9bb 	bl	8005ff4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d008      	beq.n	8005c98 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 020e 	orr.w	r2, r2, #14
 8005c94:	601a      	str	r2, [r3, #0]
 8005c96:	e00f      	b.n	8005cb8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0204 	bic.w	r2, r2, #4
 8005ca6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 020a 	orr.w	r2, r2, #10
 8005cb6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cd4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d007      	beq.n	8005cee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005cec:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f042 0201 	orr.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	e005      	b.n	8005d0c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d08:	2302      	movs	r3, #2
 8005d0a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	3718      	adds	r7, #24
 8005d12:	46bd      	mov	sp, r7
 8005d14:	bd80      	pop	{r7, pc}

08005d16 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d16:	b480      	push	{r7}
 8005d18:	b085      	sub	sp, #20
 8005d1a:	af00      	add	r7, sp, #0
 8005d1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d005      	beq.n	8005d3a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2204      	movs	r2, #4
 8005d32:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	73fb      	strb	r3, [r7, #15]
 8005d38:	e037      	b.n	8005daa <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681a      	ldr	r2, [r3, #0]
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f022 020e 	bic.w	r2, r2, #14
 8005d48:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d58:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f022 0201 	bic.w	r2, r2, #1
 8005d68:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6e:	f003 021f 	and.w	r2, r3, #31
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2101      	movs	r1, #1
 8005d78:	fa01 f202 	lsl.w	r2, r1, r2
 8005d7c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005d86:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00c      	beq.n	8005daa <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d9e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005da8:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2201      	movs	r2, #1
 8005dae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2200      	movs	r2, #0
 8005db6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b02      	cmp	r3, #2
 8005dde:	d00d      	beq.n	8005dfc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2204      	movs	r2, #4
 8005de4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	73fb      	strb	r3, [r7, #15]
 8005dfa:	e047      	b.n	8005e8c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681a      	ldr	r2, [r3, #0]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f022 020e 	bic.w	r2, r2, #14
 8005e0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	f022 0201 	bic.w	r2, r2, #1
 8005e1a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e26:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e2a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e30:	f003 021f 	and.w	r2, r3, #31
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e38:	2101      	movs	r1, #1
 8005e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e3e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005e48:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00c      	beq.n	8005e6c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e60:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005e6a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2201      	movs	r2, #1
 8005e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	4798      	blx	r3
    }
  }
  return status;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}

08005e96 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e96:	b580      	push	{r7, lr}
 8005e98:	b084      	sub	sp, #16
 8005e9a:	af00      	add	r7, sp, #0
 8005e9c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb2:	f003 031f 	and.w	r3, r3, #31
 8005eb6:	2204      	movs	r2, #4
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d026      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x7a>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d021      	beq.n	8005f10 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0320 	and.w	r3, r3, #32
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d107      	bne.n	8005eea <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f022 0204 	bic.w	r2, r2, #4
 8005ee8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eee:	f003 021f 	and.w	r2, r3, #31
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef6:	2104      	movs	r1, #4
 8005ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8005efc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d071      	beq.n	8005fea <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005f0e:	e06c      	b.n	8005fea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2202      	movs	r2, #2
 8005f1a:	409a      	lsls	r2, r3
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d02e      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d029      	beq.n	8005f82 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d10b      	bne.n	8005f54 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 020a 	bic.w	r2, r2, #10
 8005f4a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f58:	f003 021f 	and.w	r2, r3, #31
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	2102      	movs	r1, #2
 8005f62:	fa01 f202 	lsl.w	r2, r1, r2
 8005f66:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d038      	beq.n	8005fea <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005f80:	e033      	b.n	8005fea <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2208      	movs	r2, #8
 8005f8c:	409a      	lsls	r2, r3
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4013      	ands	r3, r2
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d02a      	beq.n	8005fec <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f003 0308 	and.w	r3, r3, #8
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d025      	beq.n	8005fec <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 020e 	bic.w	r2, r2, #14
 8005fae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb4:	f003 021f 	and.w	r2, r3, #31
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8005fc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d004      	beq.n	8005fec <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005fea:	bf00      	nop
 8005fec:	bf00      	nop
}
 8005fee:	3710      	adds	r7, #16
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	bd80      	pop	{r7, pc}

08005ff4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	60f8      	str	r0, [r7, #12]
 8005ffc:	60b9      	str	r1, [r7, #8]
 8005ffe:	607a      	str	r2, [r7, #4]
 8006000:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800600a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800601c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	f003 021f 	and.w	r2, r3, #31
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	2101      	movs	r1, #1
 800602c:	fa01 f202 	lsl.w	r2, r1, r2
 8006030:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b10      	cmp	r3, #16
 8006040:	d108      	bne.n	8006054 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006052:	e007      	b.n	8006064 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	60da      	str	r2, [r3, #12]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	461a      	mov	r2, r3
 800607e:	4b16      	ldr	r3, [pc, #88]	; (80060d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8006080:	429a      	cmp	r2, r3
 8006082:	d802      	bhi.n	800608a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8006084:	4b15      	ldr	r3, [pc, #84]	; (80060dc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006086:	617b      	str	r3, [r7, #20]
 8006088:	e001      	b.n	800608e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800608a:	4b15      	ldr	r3, [pc, #84]	; (80060e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800608c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	b2db      	uxtb	r3, r3
 8006098:	3b08      	subs	r3, #8
 800609a:	4a12      	ldr	r2, [pc, #72]	; (80060e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800609c:	fba2 2303 	umull	r2, r3, r2, r3
 80060a0:	091b      	lsrs	r3, r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060a8:	089b      	lsrs	r3, r3, #2
 80060aa:	009a      	lsls	r2, r3, #2
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	4413      	add	r3, r2
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a0b      	ldr	r2, [pc, #44]	; (80060e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80060ba:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2201      	movs	r2, #1
 80060c4:	409a      	lsls	r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80060ca:	bf00      	nop
 80060cc:	371c      	adds	r7, #28
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	40020407 	.word	0x40020407
 80060dc:	40020800 	.word	0x40020800
 80060e0:	40020820 	.word	0x40020820
 80060e4:	cccccccd 	.word	0xcccccccd
 80060e8:	40020880 	.word	0x40020880

080060ec <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	4b0b      	ldr	r3, [pc, #44]	; (800612c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8006100:	4413      	add	r3, r2
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	461a      	mov	r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a08      	ldr	r2, [pc, #32]	; (8006130 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800610e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	3b01      	subs	r3, #1
 8006114:	f003 031f 	and.w	r3, r3, #31
 8006118:	2201      	movs	r2, #1
 800611a:	409a      	lsls	r2, r3
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006120:	bf00      	nop
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	1000823f 	.word	0x1000823f
 8006130:	40020940 	.word	0x40020940

08006134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006142:	e15a      	b.n	80063fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	2101      	movs	r1, #1
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	fa01 f303 	lsl.w	r3, r1, r3
 8006150:	4013      	ands	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 814c 	beq.w	80063f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 0303 	and.w	r3, r3, #3
 8006164:	2b01      	cmp	r3, #1
 8006166:	d005      	beq.n	8006174 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006170:	2b02      	cmp	r3, #2
 8006172:	d130      	bne.n	80061d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	2203      	movs	r2, #3
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4013      	ands	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061aa:	2201      	movs	r2, #1
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4013      	ands	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	f003 0201 	and.w	r2, r3, #1
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d017      	beq.n	8006212 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	2203      	movs	r2, #3
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	43db      	mvns	r3, r3
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4013      	ands	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d123      	bne.n	8006266 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	08da      	lsrs	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3208      	adds	r2, #8
 8006226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	220f      	movs	r2, #15
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43db      	mvns	r3, r3
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4013      	ands	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	08da      	lsrs	r2, r3, #3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3208      	adds	r2, #8
 8006260:	6939      	ldr	r1, [r7, #16]
 8006262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	2203      	movs	r2, #3
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	43db      	mvns	r3, r3
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4013      	ands	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0203 	and.w	r2, r3, #3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 80a6 	beq.w	80063f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062a8:	4b5b      	ldr	r3, [pc, #364]	; (8006418 <HAL_GPIO_Init+0x2e4>)
 80062aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ac:	4a5a      	ldr	r2, [pc, #360]	; (8006418 <HAL_GPIO_Init+0x2e4>)
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	6613      	str	r3, [r2, #96]	; 0x60
 80062b4:	4b58      	ldr	r3, [pc, #352]	; (8006418 <HAL_GPIO_Init+0x2e4>)
 80062b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062c0:	4a56      	ldr	r2, [pc, #344]	; (800641c <HAL_GPIO_Init+0x2e8>)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	089b      	lsrs	r3, r3, #2
 80062c6:	3302      	adds	r3, #2
 80062c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	220f      	movs	r2, #15
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	43db      	mvns	r3, r3
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4013      	ands	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80062ea:	d01f      	beq.n	800632c <HAL_GPIO_Init+0x1f8>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a4c      	ldr	r2, [pc, #304]	; (8006420 <HAL_GPIO_Init+0x2ec>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d019      	beq.n	8006328 <HAL_GPIO_Init+0x1f4>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a4b      	ldr	r2, [pc, #300]	; (8006424 <HAL_GPIO_Init+0x2f0>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d013      	beq.n	8006324 <HAL_GPIO_Init+0x1f0>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	4a4a      	ldr	r2, [pc, #296]	; (8006428 <HAL_GPIO_Init+0x2f4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d00d      	beq.n	8006320 <HAL_GPIO_Init+0x1ec>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4a49      	ldr	r2, [pc, #292]	; (800642c <HAL_GPIO_Init+0x2f8>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d007      	beq.n	800631c <HAL_GPIO_Init+0x1e8>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	4a48      	ldr	r2, [pc, #288]	; (8006430 <HAL_GPIO_Init+0x2fc>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d101      	bne.n	8006318 <HAL_GPIO_Init+0x1e4>
 8006314:	2305      	movs	r3, #5
 8006316:	e00a      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 8006318:	2306      	movs	r3, #6
 800631a:	e008      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 800631c:	2304      	movs	r3, #4
 800631e:	e006      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 8006320:	2303      	movs	r3, #3
 8006322:	e004      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 8006324:	2302      	movs	r3, #2
 8006326:	e002      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 8006328:	2301      	movs	r3, #1
 800632a:	e000      	b.n	800632e <HAL_GPIO_Init+0x1fa>
 800632c:	2300      	movs	r3, #0
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	f002 0203 	and.w	r2, r2, #3
 8006334:	0092      	lsls	r2, r2, #2
 8006336:	4093      	lsls	r3, r2
 8006338:	693a      	ldr	r2, [r7, #16]
 800633a:	4313      	orrs	r3, r2
 800633c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800633e:	4937      	ldr	r1, [pc, #220]	; (800641c <HAL_GPIO_Init+0x2e8>)
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	089b      	lsrs	r3, r3, #2
 8006344:	3302      	adds	r3, #2
 8006346:	693a      	ldr	r2, [r7, #16]
 8006348:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800634c:	4b39      	ldr	r3, [pc, #228]	; (8006434 <HAL_GPIO_Init+0x300>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	43db      	mvns	r3, r3
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	4013      	ands	r3, r2
 800635a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	4313      	orrs	r3, r2
 800636e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006370:	4a30      	ldr	r2, [pc, #192]	; (8006434 <HAL_GPIO_Init+0x300>)
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006376:	4b2f      	ldr	r3, [pc, #188]	; (8006434 <HAL_GPIO_Init+0x300>)
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	43db      	mvns	r3, r3
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	4013      	ands	r3, r2
 8006384:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d003      	beq.n	800639a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8006392:	693a      	ldr	r2, [r7, #16]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800639a:	4a26      	ldr	r2, [pc, #152]	; (8006434 <HAL_GPIO_Init+0x300>)
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80063a0:	4b24      	ldr	r3, [pc, #144]	; (8006434 <HAL_GPIO_Init+0x300>)
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	693a      	ldr	r2, [r7, #16]
 80063ac:	4013      	ands	r3, r2
 80063ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d003      	beq.n	80063c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063c4:	4a1b      	ldr	r2, [pc, #108]	; (8006434 <HAL_GPIO_Init+0x300>)
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80063ca:	4b1a      	ldr	r3, [pc, #104]	; (8006434 <HAL_GPIO_Init+0x300>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	43db      	mvns	r3, r3
 80063d4:	693a      	ldr	r2, [r7, #16]
 80063d6:	4013      	ands	r3, r2
 80063d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d003      	beq.n	80063ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80063e6:	693a      	ldr	r2, [r7, #16]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80063ee:	4a11      	ldr	r2, [pc, #68]	; (8006434 <HAL_GPIO_Init+0x300>)
 80063f0:	693b      	ldr	r3, [r7, #16]
 80063f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	3301      	adds	r3, #1
 80063f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	fa22 f303 	lsr.w	r3, r2, r3
 8006404:	2b00      	cmp	r3, #0
 8006406:	f47f ae9d 	bne.w	8006144 <HAL_GPIO_Init+0x10>
  }
}
 800640a:	bf00      	nop
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr
 8006418:	40021000 	.word	0x40021000
 800641c:	40010000 	.word	0x40010000
 8006420:	48000400 	.word	0x48000400
 8006424:	48000800 	.word	0x48000800
 8006428:	48000c00 	.word	0x48000c00
 800642c:	48001000 	.word	0x48001000
 8006430:	48001400 	.word	0x48001400
 8006434:	40010400 	.word	0x40010400

08006438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006438:	b480      	push	{r7}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691a      	ldr	r2, [r3, #16]
 8006448:	887b      	ldrh	r3, [r7, #2]
 800644a:	4013      	ands	r3, r2
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006450:	2301      	movs	r3, #1
 8006452:	73fb      	strb	r3, [r7, #15]
 8006454:	e001      	b.n	800645a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006456:	2300      	movs	r3, #0
 8006458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800645a:	7bfb      	ldrb	r3, [r7, #15]
}
 800645c:	4618      	mov	r0, r3
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
 8006470:	460b      	mov	r3, r1
 8006472:	807b      	strh	r3, [r7, #2]
 8006474:	4613      	mov	r3, r2
 8006476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006478:	787b      	ldrb	r3, [r7, #1]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d003      	beq.n	8006486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800647e:	887a      	ldrh	r2, [r7, #2]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006484:	e002      	b.n	800648c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006486:	887a      	ldrh	r2, [r7, #2]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e081      	b.n	80065ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d106      	bne.n	80064c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f7fc fd7a 	bl	8002fb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2224      	movs	r2, #36	; 0x24
 80064c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0201 	bic.w	r2, r2, #1
 80064da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d107      	bne.n	8006512 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	689a      	ldr	r2, [r3, #8]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	e006      	b.n	8006520 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	689a      	ldr	r2, [r3, #8]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800651e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	2b02      	cmp	r3, #2
 8006526:	d104      	bne.n	8006532 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006530:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006540:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006544:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68da      	ldr	r2, [r3, #12]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006554:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	691a      	ldr	r2, [r3, #16]
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699b      	ldr	r3, [r3, #24]
 8006566:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	69d9      	ldr	r1, [r3, #28]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a1a      	ldr	r2, [r3, #32]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	430a      	orrs	r2, r1
 800657e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0201 	orr.w	r2, r2, #1
 800658e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2200      	movs	r2, #0
 8006594:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065b6:	b480      	push	{r7}
 80065b8:	b083      	sub	sp, #12
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
 80065be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d138      	bne.n	800663e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d101      	bne.n	80065da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065d6:	2302      	movs	r3, #2
 80065d8:	e032      	b.n	8006640 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2224      	movs	r2, #36	; 0x24
 80065e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0201 	bic.w	r2, r2, #1
 80065f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681a      	ldr	r2, [r3, #0]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006608:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6819      	ldr	r1, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0201 	orr.w	r2, r2, #1
 8006628:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	e000      	b.n	8006640 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800663e:	2302      	movs	r3, #2
  }
}
 8006640:	4618      	mov	r0, r3
 8006642:	370c      	adds	r7, #12
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800664c:	b480      	push	{r7}
 800664e:	b085      	sub	sp, #20
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b20      	cmp	r3, #32
 8006660:	d139      	bne.n	80066d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800666c:	2302      	movs	r3, #2
 800666e:	e033      	b.n	80066d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2224      	movs	r2, #36	; 0x24
 800667c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f022 0201 	bic.w	r2, r2, #1
 800668e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800669e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f042 0201 	orr.w	r2, r2, #1
 80066c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2220      	movs	r2, #32
 80066c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	e000      	b.n	80066d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066d6:	2302      	movs	r3, #2
  }
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3714      	adds	r7, #20
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b085      	sub	sp, #20
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d141      	bne.n	8006776 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80066f2:	4b4b      	ldr	r3, [pc, #300]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80066fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066fe:	d131      	bne.n	8006764 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006700:	4b47      	ldr	r3, [pc, #284]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006706:	4a46      	ldr	r2, [pc, #280]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800670c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006710:	4b43      	ldr	r3, [pc, #268]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006718:	4a41      	ldr	r2, [pc, #260]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800671a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800671e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006720:	4b40      	ldr	r3, [pc, #256]	; (8006824 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2232      	movs	r2, #50	; 0x32
 8006726:	fb02 f303 	mul.w	r3, r2, r3
 800672a:	4a3f      	ldr	r2, [pc, #252]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800672c:	fba2 2303 	umull	r2, r3, r2, r3
 8006730:	0c9b      	lsrs	r3, r3, #18
 8006732:	3301      	adds	r3, #1
 8006734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006736:	e002      	b.n	800673e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3b01      	subs	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800673e:	4b38      	ldr	r3, [pc, #224]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006740:	695b      	ldr	r3, [r3, #20]
 8006742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800674a:	d102      	bne.n	8006752 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1f2      	bne.n	8006738 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006752:	4b33      	ldr	r3, [pc, #204]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800675a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800675e:	d158      	bne.n	8006812 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8006760:	2303      	movs	r3, #3
 8006762:	e057      	b.n	8006814 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8006764:	4b2e      	ldr	r3, [pc, #184]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006766:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800676a:	4a2d      	ldr	r2, [pc, #180]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800676c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006770:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006774:	e04d      	b.n	8006812 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800677c:	d141      	bne.n	8006802 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800677e:	4b28      	ldr	r3, [pc, #160]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800678a:	d131      	bne.n	80067f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800678c:	4b24      	ldr	r3, [pc, #144]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800678e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006792:	4a23      	ldr	r2, [pc, #140]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006794:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006798:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800679c:	4b20      	ldr	r3, [pc, #128]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067a4:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067ac:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	2232      	movs	r2, #50	; 0x32
 80067b2:	fb02 f303 	mul.w	r3, r2, r3
 80067b6:	4a1c      	ldr	r2, [pc, #112]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80067b8:	fba2 2303 	umull	r2, r3, r2, r3
 80067bc:	0c9b      	lsrs	r3, r3, #18
 80067be:	3301      	adds	r3, #1
 80067c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067c2:	e002      	b.n	80067ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067ca:	4b15      	ldr	r3, [pc, #84]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d6:	d102      	bne.n	80067de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1f2      	bne.n	80067c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067de:	4b10      	ldr	r3, [pc, #64]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ea:	d112      	bne.n	8006812 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e011      	b.n	8006814 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80067f0:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067f6:	4a0a      	ldr	r2, [pc, #40]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80067f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006800:	e007      	b.n	8006812 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006802:	4b07      	ldr	r3, [pc, #28]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800680a:	4a05      	ldr	r2, [pc, #20]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800680c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006810:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr
 8006820:	40007000 	.word	0x40007000
 8006824:	20000024 	.word	0x20000024
 8006828:	431bde83 	.word	0x431bde83

0800682c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006830:	4b05      	ldr	r3, [pc, #20]	; (8006848 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	4a04      	ldr	r2, [pc, #16]	; (8006848 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8006836:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800683a:	6093      	str	r3, [r2, #8]
}
 800683c:	bf00      	nop
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	40007000 	.word	0x40007000

0800684c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b088      	sub	sp, #32
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d101      	bne.n	800685e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	e306      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0301 	and.w	r3, r3, #1
 8006866:	2b00      	cmp	r3, #0
 8006868:	d075      	beq.n	8006956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800686a:	4b97      	ldr	r3, [pc, #604]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f003 030c 	and.w	r3, r3, #12
 8006872:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006874:	4b94      	ldr	r3, [pc, #592]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f003 0303 	and.w	r3, r3, #3
 800687c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	2b0c      	cmp	r3, #12
 8006882:	d102      	bne.n	800688a <HAL_RCC_OscConfig+0x3e>
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	2b03      	cmp	r3, #3
 8006888:	d002      	beq.n	8006890 <HAL_RCC_OscConfig+0x44>
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b08      	cmp	r3, #8
 800688e:	d10b      	bne.n	80068a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006890:	4b8d      	ldr	r3, [pc, #564]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d05b      	beq.n	8006954 <HAL_RCC_OscConfig+0x108>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d157      	bne.n	8006954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068a4:	2301      	movs	r3, #1
 80068a6:	e2e1      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b0:	d106      	bne.n	80068c0 <HAL_RCC_OscConfig+0x74>
 80068b2:	4b85      	ldr	r3, [pc, #532]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a84      	ldr	r2, [pc, #528]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80068b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	e01d      	b.n	80068fc <HAL_RCC_OscConfig+0xb0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068c8:	d10c      	bne.n	80068e4 <HAL_RCC_OscConfig+0x98>
 80068ca:	4b7f      	ldr	r3, [pc, #508]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a7e      	ldr	r2, [pc, #504]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80068d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068d4:	6013      	str	r3, [r2, #0]
 80068d6:	4b7c      	ldr	r3, [pc, #496]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a7b      	ldr	r2, [pc, #492]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80068dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	e00b      	b.n	80068fc <HAL_RCC_OscConfig+0xb0>
 80068e4:	4b78      	ldr	r3, [pc, #480]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4a77      	ldr	r2, [pc, #476]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80068ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068ee:	6013      	str	r3, [r2, #0]
 80068f0:	4b75      	ldr	r3, [pc, #468]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a74      	ldr	r2, [pc, #464]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80068f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80068fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d013      	beq.n	800692c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006904:	f7fc ff08 	bl	8003718 <HAL_GetTick>
 8006908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800690a:	e008      	b.n	800691e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800690c:	f7fc ff04 	bl	8003718 <HAL_GetTick>
 8006910:	4602      	mov	r2, r0
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	1ad3      	subs	r3, r2, r3
 8006916:	2b64      	cmp	r3, #100	; 0x64
 8006918:	d901      	bls.n	800691e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e2a6      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800691e:	4b6a      	ldr	r3, [pc, #424]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0f0      	beq.n	800690c <HAL_RCC_OscConfig+0xc0>
 800692a:	e014      	b.n	8006956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692c:	f7fc fef4 	bl	8003718 <HAL_GetTick>
 8006930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006932:	e008      	b.n	8006946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006934:	f7fc fef0 	bl	8003718 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	693b      	ldr	r3, [r7, #16]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	2b64      	cmp	r3, #100	; 0x64
 8006940:	d901      	bls.n	8006946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e292      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006946:	4b60      	ldr	r3, [pc, #384]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694e:	2b00      	cmp	r3, #0
 8006950:	d1f0      	bne.n	8006934 <HAL_RCC_OscConfig+0xe8>
 8006952:	e000      	b.n	8006956 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f003 0302 	and.w	r3, r3, #2
 800695e:	2b00      	cmp	r3, #0
 8006960:	d075      	beq.n	8006a4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006962:	4b59      	ldr	r3, [pc, #356]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f003 030c 	and.w	r3, r3, #12
 800696a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800696c:	4b56      	ldr	r3, [pc, #344]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	f003 0303 	and.w	r3, r3, #3
 8006974:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	2b0c      	cmp	r3, #12
 800697a:	d102      	bne.n	8006982 <HAL_RCC_OscConfig+0x136>
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	2b02      	cmp	r3, #2
 8006980:	d002      	beq.n	8006988 <HAL_RCC_OscConfig+0x13c>
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	2b04      	cmp	r3, #4
 8006986:	d11f      	bne.n	80069c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006988:	4b4f      	ldr	r3, [pc, #316]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006990:	2b00      	cmp	r3, #0
 8006992:	d005      	beq.n	80069a0 <HAL_RCC_OscConfig+0x154>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	68db      	ldr	r3, [r3, #12]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d101      	bne.n	80069a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800699c:	2301      	movs	r3, #1
 800699e:	e265      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069a0:	4b49      	ldr	r3, [pc, #292]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	691b      	ldr	r3, [r3, #16]
 80069ac:	061b      	lsls	r3, r3, #24
 80069ae:	4946      	ldr	r1, [pc, #280]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80069b0:	4313      	orrs	r3, r2
 80069b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80069b4:	4b45      	ldr	r3, [pc, #276]	; (8006acc <HAL_RCC_OscConfig+0x280>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fc fe61 	bl	8003680 <HAL_InitTick>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d043      	beq.n	8006a4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80069c4:	2301      	movs	r3, #1
 80069c6:	e251      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d023      	beq.n	8006a18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069d0:	4b3d      	ldr	r3, [pc, #244]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a3c      	ldr	r2, [pc, #240]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80069d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069dc:	f7fc fe9c 	bl	8003718 <HAL_GetTick>
 80069e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069e2:	e008      	b.n	80069f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069e4:	f7fc fe98 	bl	8003718 <HAL_GetTick>
 80069e8:	4602      	mov	r2, r0
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	1ad3      	subs	r3, r2, r3
 80069ee:	2b02      	cmp	r3, #2
 80069f0:	d901      	bls.n	80069f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e23a      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80069f6:	4b34      	ldr	r3, [pc, #208]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d0f0      	beq.n	80069e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a02:	4b31      	ldr	r3, [pc, #196]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	061b      	lsls	r3, r3, #24
 8006a10:	492d      	ldr	r1, [pc, #180]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	604b      	str	r3, [r1, #4]
 8006a16:	e01a      	b.n	8006a4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a18:	4b2b      	ldr	r3, [pc, #172]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a2a      	ldr	r2, [pc, #168]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006a1e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a24:	f7fc fe78 	bl	8003718 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a2c:	f7fc fe74 	bl	8003718 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e216      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006a3e:	4b22      	ldr	r3, [pc, #136]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1f0      	bne.n	8006a2c <HAL_RCC_OscConfig+0x1e0>
 8006a4a:	e000      	b.n	8006a4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d041      	beq.n	8006ade <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d01c      	beq.n	8006a9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a62:	4b19      	ldr	r3, [pc, #100]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a68:	4a17      	ldr	r2, [pc, #92]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006a6a:	f043 0301 	orr.w	r3, r3, #1
 8006a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a72:	f7fc fe51 	bl	8003718 <HAL_GetTick>
 8006a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a78:	e008      	b.n	8006a8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a7a:	f7fc fe4d 	bl	8003718 <HAL_GetTick>
 8006a7e:	4602      	mov	r2, r0
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	1ad3      	subs	r3, r2, r3
 8006a84:	2b02      	cmp	r3, #2
 8006a86:	d901      	bls.n	8006a8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e1ef      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006a8c:	4b0e      	ldr	r3, [pc, #56]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d0ef      	beq.n	8006a7a <HAL_RCC_OscConfig+0x22e>
 8006a9a:	e020      	b.n	8006ade <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a9c:	4b0a      	ldr	r3, [pc, #40]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aa2:	4a09      	ldr	r2, [pc, #36]	; (8006ac8 <HAL_RCC_OscConfig+0x27c>)
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aac:	f7fc fe34 	bl	8003718 <HAL_GetTick>
 8006ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ab2:	e00d      	b.n	8006ad0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ab4:	f7fc fe30 	bl	8003718 <HAL_GetTick>
 8006ab8:	4602      	mov	r2, r0
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d906      	bls.n	8006ad0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	e1d2      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
 8006ac6:	bf00      	nop
 8006ac8:	40021000 	.word	0x40021000
 8006acc:	20000028 	.word	0x20000028
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006ad0:	4b8c      	ldr	r3, [pc, #560]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1ea      	bne.n	8006ab4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f000 80a6 	beq.w	8006c38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aec:	2300      	movs	r3, #0
 8006aee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006af0:	4b84      	ldr	r3, [pc, #528]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006af2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d101      	bne.n	8006b00 <HAL_RCC_OscConfig+0x2b4>
 8006afc:	2301      	movs	r3, #1
 8006afe:	e000      	b.n	8006b02 <HAL_RCC_OscConfig+0x2b6>
 8006b00:	2300      	movs	r3, #0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00d      	beq.n	8006b22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b06:	4b7f      	ldr	r3, [pc, #508]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0a:	4a7e      	ldr	r2, [pc, #504]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b10:	6593      	str	r3, [r2, #88]	; 0x58
 8006b12:	4b7c      	ldr	r3, [pc, #496]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	60fb      	str	r3, [r7, #12]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b22:	4b79      	ldr	r3, [pc, #484]	; (8006d08 <HAL_RCC_OscConfig+0x4bc>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d118      	bne.n	8006b60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b2e:	4b76      	ldr	r3, [pc, #472]	; (8006d08 <HAL_RCC_OscConfig+0x4bc>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a75      	ldr	r2, [pc, #468]	; (8006d08 <HAL_RCC_OscConfig+0x4bc>)
 8006b34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b3a:	f7fc fded 	bl	8003718 <HAL_GetTick>
 8006b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b40:	e008      	b.n	8006b54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b42:	f7fc fde9 	bl	8003718 <HAL_GetTick>
 8006b46:	4602      	mov	r2, r0
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	1ad3      	subs	r3, r2, r3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d901      	bls.n	8006b54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8006b50:	2303      	movs	r3, #3
 8006b52:	e18b      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006b54:	4b6c      	ldr	r3, [pc, #432]	; (8006d08 <HAL_RCC_OscConfig+0x4bc>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d0f0      	beq.n	8006b42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d108      	bne.n	8006b7a <HAL_RCC_OscConfig+0x32e>
 8006b68:	4b66      	ldr	r3, [pc, #408]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b6e:	4a65      	ldr	r2, [pc, #404]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b78:	e024      	b.n	8006bc4 <HAL_RCC_OscConfig+0x378>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	2b05      	cmp	r3, #5
 8006b80:	d110      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x358>
 8006b82:	4b60      	ldr	r3, [pc, #384]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b88:	4a5e      	ldr	r2, [pc, #376]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006b8a:	f043 0304 	orr.w	r3, r3, #4
 8006b8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006b92:	4b5c      	ldr	r3, [pc, #368]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b98:	4a5a      	ldr	r2, [pc, #360]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006b9a:	f043 0301 	orr.w	r3, r3, #1
 8006b9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ba2:	e00f      	b.n	8006bc4 <HAL_RCC_OscConfig+0x378>
 8006ba4:	4b57      	ldr	r3, [pc, #348]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006baa:	4a56      	ldr	r2, [pc, #344]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006bac:	f023 0301 	bic.w	r3, r3, #1
 8006bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006bb4:	4b53      	ldr	r3, [pc, #332]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bba:	4a52      	ldr	r2, [pc, #328]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006bbc:	f023 0304 	bic.w	r3, r3, #4
 8006bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d016      	beq.n	8006bfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bcc:	f7fc fda4 	bl	8003718 <HAL_GetTick>
 8006bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bd2:	e00a      	b.n	8006bea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bd4:	f7fc fda0 	bl	8003718 <HAL_GetTick>
 8006bd8:	4602      	mov	r2, r0
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d901      	bls.n	8006bea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8006be6:	2303      	movs	r3, #3
 8006be8:	e140      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006bea:	4b46      	ldr	r3, [pc, #280]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d0ed      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x388>
 8006bf8:	e015      	b.n	8006c26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bfa:	f7fc fd8d 	bl	8003718 <HAL_GetTick>
 8006bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c00:	e00a      	b.n	8006c18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c02:	f7fc fd89 	bl	8003718 <HAL_GetTick>
 8006c06:	4602      	mov	r2, r0
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	1ad3      	subs	r3, r2, r3
 8006c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d901      	bls.n	8006c18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006c14:	2303      	movs	r3, #3
 8006c16:	e129      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006c18:	4b3a      	ldr	r3, [pc, #232]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c1e:	f003 0302 	and.w	r3, r3, #2
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1ed      	bne.n	8006c02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006c26:	7ffb      	ldrb	r3, [r7, #31]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d105      	bne.n	8006c38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c2c:	4b35      	ldr	r3, [pc, #212]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c30:	4a34      	ldr	r2, [pc, #208]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006c32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 0320 	and.w	r3, r3, #32
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d03c      	beq.n	8006cbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d01c      	beq.n	8006c86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c4c:	4b2d      	ldr	r3, [pc, #180]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c52:	4a2c      	ldr	r2, [pc, #176]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006c54:	f043 0301 	orr.w	r3, r3, #1
 8006c58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c5c:	f7fc fd5c 	bl	8003718 <HAL_GetTick>
 8006c60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c64:	f7fc fd58 	bl	8003718 <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e0fa      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006c76:	4b23      	ldr	r3, [pc, #140]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c7c:	f003 0302 	and.w	r3, r3, #2
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0ef      	beq.n	8006c64 <HAL_RCC_OscConfig+0x418>
 8006c84:	e01b      	b.n	8006cbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c86:	4b1f      	ldr	r3, [pc, #124]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c8c:	4a1d      	ldr	r2, [pc, #116]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006c8e:	f023 0301 	bic.w	r3, r3, #1
 8006c92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c96:	f7fc fd3f 	bl	8003718 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006c9c:	e008      	b.n	8006cb0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c9e:	f7fc fd3b 	bl	8003718 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e0dd      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006cb0:	4b14      	ldr	r3, [pc, #80]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006cb6:	f003 0302 	and.w	r3, r3, #2
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1ef      	bne.n	8006c9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	69db      	ldr	r3, [r3, #28]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 80d1 	beq.w	8006e6a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006cc8:	4b0e      	ldr	r3, [pc, #56]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f003 030c 	and.w	r3, r3, #12
 8006cd0:	2b0c      	cmp	r3, #12
 8006cd2:	f000 808b 	beq.w	8006dec <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	69db      	ldr	r3, [r3, #28]
 8006cda:	2b02      	cmp	r3, #2
 8006cdc:	d15e      	bne.n	8006d9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cde:	4b09      	ldr	r3, [pc, #36]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a08      	ldr	r2, [pc, #32]	; (8006d04 <HAL_RCC_OscConfig+0x4b8>)
 8006ce4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cea:	f7fc fd15 	bl	8003718 <HAL_GetTick>
 8006cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006cf0:	e00c      	b.n	8006d0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006cf2:	f7fc fd11 	bl	8003718 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	2b02      	cmp	r3, #2
 8006cfe:	d905      	bls.n	8006d0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e0b3      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
 8006d04:	40021000 	.word	0x40021000
 8006d08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006d0c:	4b59      	ldr	r3, [pc, #356]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d1ec      	bne.n	8006cf2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d18:	4b56      	ldr	r3, [pc, #344]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006d1a:	68da      	ldr	r2, [r3, #12]
 8006d1c:	4b56      	ldr	r3, [pc, #344]	; (8006e78 <HAL_RCC_OscConfig+0x62c>)
 8006d1e:	4013      	ands	r3, r2
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	6a11      	ldr	r1, [r2, #32]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d28:	3a01      	subs	r2, #1
 8006d2a:	0112      	lsls	r2, r2, #4
 8006d2c:	4311      	orrs	r1, r2
 8006d2e:	687a      	ldr	r2, [r7, #4]
 8006d30:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8006d32:	0212      	lsls	r2, r2, #8
 8006d34:	4311      	orrs	r1, r2
 8006d36:	687a      	ldr	r2, [r7, #4]
 8006d38:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006d3a:	0852      	lsrs	r2, r2, #1
 8006d3c:	3a01      	subs	r2, #1
 8006d3e:	0552      	lsls	r2, r2, #21
 8006d40:	4311      	orrs	r1, r2
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006d46:	0852      	lsrs	r2, r2, #1
 8006d48:	3a01      	subs	r2, #1
 8006d4a:	0652      	lsls	r2, r2, #25
 8006d4c:	4311      	orrs	r1, r2
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d52:	06d2      	lsls	r2, r2, #27
 8006d54:	430a      	orrs	r2, r1
 8006d56:	4947      	ldr	r1, [pc, #284]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006d5c:	4b45      	ldr	r3, [pc, #276]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a44      	ldr	r2, [pc, #272]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006d68:	4b42      	ldr	r3, [pc, #264]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	4a41      	ldr	r2, [pc, #260]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d74:	f7fc fcd0 	bl	8003718 <HAL_GetTick>
 8006d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d7a:	e008      	b.n	8006d8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d7c:	f7fc fccc 	bl	8003718 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d901      	bls.n	8006d8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e06e      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006d8e:	4b39      	ldr	r3, [pc, #228]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d0f0      	beq.n	8006d7c <HAL_RCC_OscConfig+0x530>
 8006d9a:	e066      	b.n	8006e6a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d9c:	4b35      	ldr	r3, [pc, #212]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4a34      	ldr	r2, [pc, #208]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006da6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006da8:	4b32      	ldr	r3, [pc, #200]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006daa:	68db      	ldr	r3, [r3, #12]
 8006dac:	4a31      	ldr	r2, [pc, #196]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006dae:	f023 0303 	bic.w	r3, r3, #3
 8006db2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006db4:	4b2f      	ldr	r3, [pc, #188]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	4a2e      	ldr	r2, [pc, #184]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006dba:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8006dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc4:	f7fc fca8 	bl	8003718 <HAL_GetTick>
 8006dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dca:	e008      	b.n	8006dde <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dcc:	f7fc fca4 	bl	8003718 <HAL_GetTick>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	1ad3      	subs	r3, r2, r3
 8006dd6:	2b02      	cmp	r3, #2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e046      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006dde:	4b25      	ldr	r3, [pc, #148]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d1f0      	bne.n	8006dcc <HAL_RCC_OscConfig+0x580>
 8006dea:	e03e      	b.n	8006e6a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	2b01      	cmp	r3, #1
 8006df2:	d101      	bne.n	8006df8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e039      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006df8:	4b1e      	ldr	r3, [pc, #120]	; (8006e74 <HAL_RCC_OscConfig+0x628>)
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f003 0203 	and.w	r2, r3, #3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d12c      	bne.n	8006e66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e16:	3b01      	subs	r3, #1
 8006e18:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d123      	bne.n	8006e66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e28:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d11b      	bne.n	8006e66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e38:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d113      	bne.n	8006e66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e48:	085b      	lsrs	r3, r3, #1
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d109      	bne.n	8006e66 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e5c:	085b      	lsrs	r3, r3, #1
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d001      	beq.n	8006e6a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e000      	b.n	8006e6c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8006e6a:	2300      	movs	r3, #0
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3720      	adds	r7, #32
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}
 8006e74:	40021000 	.word	0x40021000
 8006e78:	019f800c 	.word	0x019f800c

08006e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006e86:	2300      	movs	r3, #0
 8006e88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d101      	bne.n	8006e94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006e90:	2301      	movs	r3, #1
 8006e92:	e11e      	b.n	80070d2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006e94:	4b91      	ldr	r3, [pc, #580]	; (80070dc <HAL_RCC_ClockConfig+0x260>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 030f 	and.w	r3, r3, #15
 8006e9c:	683a      	ldr	r2, [r7, #0]
 8006e9e:	429a      	cmp	r2, r3
 8006ea0:	d910      	bls.n	8006ec4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ea2:	4b8e      	ldr	r3, [pc, #568]	; (80070dc <HAL_RCC_ClockConfig+0x260>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f023 020f 	bic.w	r2, r3, #15
 8006eaa:	498c      	ldr	r1, [pc, #560]	; (80070dc <HAL_RCC_ClockConfig+0x260>)
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006eb2:	4b8a      	ldr	r3, [pc, #552]	; (80070dc <HAL_RCC_ClockConfig+0x260>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f003 030f 	and.w	r3, r3, #15
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d001      	beq.n	8006ec4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e106      	b.n	80070d2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f003 0301 	and.w	r3, r3, #1
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d073      	beq.n	8006fb8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	d129      	bne.n	8006f2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006ed8:	4b81      	ldr	r3, [pc, #516]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d101      	bne.n	8006ee8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	e0f4      	b.n	80070d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006ee8:	f000 f99e 	bl	8007228 <RCC_GetSysClockFreqFromPLLSource>
 8006eec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	4a7c      	ldr	r2, [pc, #496]	; (80070e4 <HAL_RCC_ClockConfig+0x268>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d93f      	bls.n	8006f76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006ef6:	4b7a      	ldr	r3, [pc, #488]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d009      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d033      	beq.n	8006f76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d12f      	bne.n	8006f76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f16:	4b72      	ldr	r3, [pc, #456]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006f18:	689b      	ldr	r3, [r3, #8]
 8006f1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f1e:	4a70      	ldr	r2, [pc, #448]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006f26:	2380      	movs	r3, #128	; 0x80
 8006f28:	617b      	str	r3, [r7, #20]
 8006f2a:	e024      	b.n	8006f76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d107      	bne.n	8006f44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f34:	4b6a      	ldr	r3, [pc, #424]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d109      	bne.n	8006f54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e0c6      	b.n	80070d2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006f44:	4b66      	ldr	r3, [pc, #408]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0be      	b.n	80070d2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006f54:	f000 f8ce 	bl	80070f4 <HAL_RCC_GetSysClockFreq>
 8006f58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	4a61      	ldr	r2, [pc, #388]	; (80070e4 <HAL_RCC_ClockConfig+0x268>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d909      	bls.n	8006f76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006f62:	4b5f      	ldr	r3, [pc, #380]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f6a:	4a5d      	ldr	r2, [pc, #372]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8006f72:	2380      	movs	r3, #128	; 0x80
 8006f74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006f76:	4b5a      	ldr	r3, [pc, #360]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f023 0203 	bic.w	r2, r3, #3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	4957      	ldr	r1, [pc, #348]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006f84:	4313      	orrs	r3, r2
 8006f86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f88:	f7fc fbc6 	bl	8003718 <HAL_GetTick>
 8006f8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006f8e:	e00a      	b.n	8006fa6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006f90:	f7fc fbc2 	bl	8003718 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d901      	bls.n	8006fa6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e095      	b.n	80070d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fa6:	4b4e      	ldr	r3, [pc, #312]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 020c 	and.w	r2, r3, #12
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d1eb      	bne.n	8006f90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0302 	and.w	r3, r3, #2
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d023      	beq.n	800700c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 0304 	and.w	r3, r3, #4
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d005      	beq.n	8006fdc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fd0:	4b43      	ldr	r3, [pc, #268]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	4a42      	ldr	r2, [pc, #264]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006fd6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006fda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0308 	and.w	r3, r3, #8
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d007      	beq.n	8006ff8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006fe8:	4b3d      	ldr	r3, [pc, #244]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006ff0:	4a3b      	ldr	r2, [pc, #236]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006ff2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006ff6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ff8:	4b39      	ldr	r3, [pc, #228]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8006ffa:	689b      	ldr	r3, [r3, #8]
 8006ffc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	4936      	ldr	r1, [pc, #216]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8007006:	4313      	orrs	r3, r2
 8007008:	608b      	str	r3, [r1, #8]
 800700a:	e008      	b.n	800701e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	2b80      	cmp	r3, #128	; 0x80
 8007010:	d105      	bne.n	800701e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007012:	4b33      	ldr	r3, [pc, #204]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	4a32      	ldr	r2, [pc, #200]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8007018:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800701c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800701e:	4b2f      	ldr	r3, [pc, #188]	; (80070dc <HAL_RCC_ClockConfig+0x260>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f003 030f 	and.w	r3, r3, #15
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d21d      	bcs.n	8007068 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702c:	4b2b      	ldr	r3, [pc, #172]	; (80070dc <HAL_RCC_ClockConfig+0x260>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f023 020f 	bic.w	r2, r3, #15
 8007034:	4929      	ldr	r1, [pc, #164]	; (80070dc <HAL_RCC_ClockConfig+0x260>)
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	4313      	orrs	r3, r2
 800703a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800703c:	f7fc fb6c 	bl	8003718 <HAL_GetTick>
 8007040:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007042:	e00a      	b.n	800705a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007044:	f7fc fb68 	bl	8003718 <HAL_GetTick>
 8007048:	4602      	mov	r2, r0
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007052:	4293      	cmp	r3, r2
 8007054:	d901      	bls.n	800705a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e03b      	b.n	80070d2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800705a:	4b20      	ldr	r3, [pc, #128]	; (80070dc <HAL_RCC_ClockConfig+0x260>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 030f 	and.w	r3, r3, #15
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	429a      	cmp	r2, r3
 8007066:	d1ed      	bne.n	8007044 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0304 	and.w	r3, r3, #4
 8007070:	2b00      	cmp	r3, #0
 8007072:	d008      	beq.n	8007086 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007074:	4b1a      	ldr	r3, [pc, #104]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	4917      	ldr	r1, [pc, #92]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8007082:	4313      	orrs	r3, r2
 8007084:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d009      	beq.n	80070a6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007092:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 8007094:	689b      	ldr	r3, [r3, #8]
 8007096:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	490f      	ldr	r1, [pc, #60]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80070a6:	f000 f825 	bl	80070f4 <HAL_RCC_GetSysClockFreq>
 80070aa:	4602      	mov	r2, r0
 80070ac:	4b0c      	ldr	r3, [pc, #48]	; (80070e0 <HAL_RCC_ClockConfig+0x264>)
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	091b      	lsrs	r3, r3, #4
 80070b2:	f003 030f 	and.w	r3, r3, #15
 80070b6:	490c      	ldr	r1, [pc, #48]	; (80070e8 <HAL_RCC_ClockConfig+0x26c>)
 80070b8:	5ccb      	ldrb	r3, [r1, r3]
 80070ba:	f003 031f 	and.w	r3, r3, #31
 80070be:	fa22 f303 	lsr.w	r3, r2, r3
 80070c2:	4a0a      	ldr	r2, [pc, #40]	; (80070ec <HAL_RCC_ClockConfig+0x270>)
 80070c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80070c6:	4b0a      	ldr	r3, [pc, #40]	; (80070f0 <HAL_RCC_ClockConfig+0x274>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fc fad8 	bl	8003680 <HAL_InitTick>
 80070d0:	4603      	mov	r3, r0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	40022000 	.word	0x40022000
 80070e0:	40021000 	.word	0x40021000
 80070e4:	04c4b400 	.word	0x04c4b400
 80070e8:	0800fba8 	.word	0x0800fba8
 80070ec:	20000024 	.word	0x20000024
 80070f0:	20000028 	.word	0x20000028

080070f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80070fa:	4b2c      	ldr	r3, [pc, #176]	; (80071ac <HAL_RCC_GetSysClockFreq+0xb8>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	f003 030c 	and.w	r3, r3, #12
 8007102:	2b04      	cmp	r3, #4
 8007104:	d102      	bne.n	800710c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007106:	4b2a      	ldr	r3, [pc, #168]	; (80071b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007108:	613b      	str	r3, [r7, #16]
 800710a:	e047      	b.n	800719c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800710c:	4b27      	ldr	r3, [pc, #156]	; (80071ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f003 030c 	and.w	r3, r3, #12
 8007114:	2b08      	cmp	r3, #8
 8007116:	d102      	bne.n	800711e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007118:	4b26      	ldr	r3, [pc, #152]	; (80071b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800711a:	613b      	str	r3, [r7, #16]
 800711c:	e03e      	b.n	800719c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800711e:	4b23      	ldr	r3, [pc, #140]	; (80071ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007120:	689b      	ldr	r3, [r3, #8]
 8007122:	f003 030c 	and.w	r3, r3, #12
 8007126:	2b0c      	cmp	r3, #12
 8007128:	d136      	bne.n	8007198 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800712a:	4b20      	ldr	r3, [pc, #128]	; (80071ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	f003 0303 	and.w	r3, r3, #3
 8007132:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007134:	4b1d      	ldr	r3, [pc, #116]	; (80071ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	091b      	lsrs	r3, r3, #4
 800713a:	f003 030f 	and.w	r3, r3, #15
 800713e:	3301      	adds	r3, #1
 8007140:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b03      	cmp	r3, #3
 8007146:	d10c      	bne.n	8007162 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007148:	4a1a      	ldr	r2, [pc, #104]	; (80071b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007150:	4a16      	ldr	r2, [pc, #88]	; (80071ac <HAL_RCC_GetSysClockFreq+0xb8>)
 8007152:	68d2      	ldr	r2, [r2, #12]
 8007154:	0a12      	lsrs	r2, r2, #8
 8007156:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	617b      	str	r3, [r7, #20]
      break;
 8007160:	e00c      	b.n	800717c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007162:	4a13      	ldr	r2, [pc, #76]	; (80071b0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	fbb2 f3f3 	udiv	r3, r2, r3
 800716a:	4a10      	ldr	r2, [pc, #64]	; (80071ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800716c:	68d2      	ldr	r2, [r2, #12]
 800716e:	0a12      	lsrs	r2, r2, #8
 8007170:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007174:	fb02 f303 	mul.w	r3, r2, r3
 8007178:	617b      	str	r3, [r7, #20]
      break;
 800717a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800717c:	4b0b      	ldr	r3, [pc, #44]	; (80071ac <HAL_RCC_GetSysClockFreq+0xb8>)
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	0e5b      	lsrs	r3, r3, #25
 8007182:	f003 0303 	and.w	r3, r3, #3
 8007186:	3301      	adds	r3, #1
 8007188:	005b      	lsls	r3, r3, #1
 800718a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800718c:	697a      	ldr	r2, [r7, #20]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	fbb2 f3f3 	udiv	r3, r2, r3
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	e001      	b.n	800719c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800719c:	693b      	ldr	r3, [r7, #16]
}
 800719e:	4618      	mov	r0, r3
 80071a0:	371c      	adds	r7, #28
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40021000 	.word	0x40021000
 80071b0:	00f42400 	.word	0x00f42400
 80071b4:	007a1200 	.word	0x007a1200

080071b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80071b8:	b480      	push	{r7}
 80071ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80071bc:	4b03      	ldr	r3, [pc, #12]	; (80071cc <HAL_RCC_GetHCLKFreq+0x14>)
 80071be:	681b      	ldr	r3, [r3, #0]
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	20000024 	.word	0x20000024

080071d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80071d4:	f7ff fff0 	bl	80071b8 <HAL_RCC_GetHCLKFreq>
 80071d8:	4602      	mov	r2, r0
 80071da:	4b06      	ldr	r3, [pc, #24]	; (80071f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80071dc:	689b      	ldr	r3, [r3, #8]
 80071de:	0a1b      	lsrs	r3, r3, #8
 80071e0:	f003 0307 	and.w	r3, r3, #7
 80071e4:	4904      	ldr	r1, [pc, #16]	; (80071f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80071e6:	5ccb      	ldrb	r3, [r1, r3]
 80071e8:	f003 031f 	and.w	r3, r3, #31
 80071ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	40021000 	.word	0x40021000
 80071f8:	0800fbb8 	.word	0x0800fbb8

080071fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007200:	f7ff ffda 	bl	80071b8 <HAL_RCC_GetHCLKFreq>
 8007204:	4602      	mov	r2, r0
 8007206:	4b06      	ldr	r3, [pc, #24]	; (8007220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007208:	689b      	ldr	r3, [r3, #8]
 800720a:	0adb      	lsrs	r3, r3, #11
 800720c:	f003 0307 	and.w	r3, r3, #7
 8007210:	4904      	ldr	r1, [pc, #16]	; (8007224 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007212:	5ccb      	ldrb	r3, [r1, r3]
 8007214:	f003 031f 	and.w	r3, r3, #31
 8007218:	fa22 f303 	lsr.w	r3, r2, r3
}
 800721c:	4618      	mov	r0, r3
 800721e:	bd80      	pop	{r7, pc}
 8007220:	40021000 	.word	0x40021000
 8007224:	0800fbb8 	.word	0x0800fbb8

08007228 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800722e:	4b1e      	ldr	r3, [pc, #120]	; (80072a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	f003 0303 	and.w	r3, r3, #3
 8007236:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007238:	4b1b      	ldr	r3, [pc, #108]	; (80072a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800723a:	68db      	ldr	r3, [r3, #12]
 800723c:	091b      	lsrs	r3, r3, #4
 800723e:	f003 030f 	and.w	r3, r3, #15
 8007242:	3301      	adds	r3, #1
 8007244:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	2b03      	cmp	r3, #3
 800724a:	d10c      	bne.n	8007266 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800724c:	4a17      	ldr	r2, [pc, #92]	; (80072ac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	fbb2 f3f3 	udiv	r3, r2, r3
 8007254:	4a14      	ldr	r2, [pc, #80]	; (80072a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007256:	68d2      	ldr	r2, [r2, #12]
 8007258:	0a12      	lsrs	r2, r2, #8
 800725a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800725e:	fb02 f303 	mul.w	r3, r2, r3
 8007262:	617b      	str	r3, [r7, #20]
    break;
 8007264:	e00c      	b.n	8007280 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007266:	4a12      	ldr	r2, [pc, #72]	; (80072b0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	fbb2 f3f3 	udiv	r3, r2, r3
 800726e:	4a0e      	ldr	r2, [pc, #56]	; (80072a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007270:	68d2      	ldr	r2, [r2, #12]
 8007272:	0a12      	lsrs	r2, r2, #8
 8007274:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007278:	fb02 f303 	mul.w	r3, r2, r3
 800727c:	617b      	str	r3, [r7, #20]
    break;
 800727e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007280:	4b09      	ldr	r3, [pc, #36]	; (80072a8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8007282:	68db      	ldr	r3, [r3, #12]
 8007284:	0e5b      	lsrs	r3, r3, #25
 8007286:	f003 0303 	and.w	r3, r3, #3
 800728a:	3301      	adds	r3, #1
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8007290:	697a      	ldr	r2, [r7, #20]
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	fbb2 f3f3 	udiv	r3, r2, r3
 8007298:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800729a:	687b      	ldr	r3, [r7, #4]
}
 800729c:	4618      	mov	r0, r3
 800729e:	371c      	adds	r7, #28
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	40021000 	.word	0x40021000
 80072ac:	007a1200 	.word	0x007a1200
 80072b0:	00f42400 	.word	0x00f42400

080072b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b086      	sub	sp, #24
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80072bc:	2300      	movs	r3, #0
 80072be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80072c0:	2300      	movs	r3, #0
 80072c2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	f000 8098 	beq.w	8007402 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80072d2:	2300      	movs	r3, #0
 80072d4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072d6:	4b43      	ldr	r3, [pc, #268]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d10d      	bne.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80072e2:	4b40      	ldr	r3, [pc, #256]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072e6:	4a3f      	ldr	r2, [pc, #252]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ec:	6593      	str	r3, [r2, #88]	; 0x58
 80072ee:	4b3d      	ldr	r3, [pc, #244]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80072f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072f6:	60bb      	str	r3, [r7, #8]
 80072f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072fa:	2301      	movs	r3, #1
 80072fc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80072fe:	4b3a      	ldr	r3, [pc, #232]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a39      	ldr	r2, [pc, #228]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007308:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800730a:	f7fc fa05 	bl	8003718 <HAL_GetTick>
 800730e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007310:	e009      	b.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007312:	f7fc fa01 	bl	8003718 <HAL_GetTick>
 8007316:	4602      	mov	r2, r0
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	1ad3      	subs	r3, r2, r3
 800731c:	2b02      	cmp	r3, #2
 800731e:	d902      	bls.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	74fb      	strb	r3, [r7, #19]
        break;
 8007324:	e005      	b.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007326:	4b30      	ldr	r3, [pc, #192]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800732e:	2b00      	cmp	r3, #0
 8007330:	d0ef      	beq.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8007332:	7cfb      	ldrb	r3, [r7, #19]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d159      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007338:	4b2a      	ldr	r3, [pc, #168]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800733a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800733e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007342:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01e      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	429a      	cmp	r2, r3
 8007352:	d019      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007354:	4b23      	ldr	r3, [pc, #140]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800735a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800735e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007360:	4b20      	ldr	r3, [pc, #128]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007366:	4a1f      	ldr	r2, [pc, #124]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007368:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800736c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007370:	4b1c      	ldr	r3, [pc, #112]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007376:	4a1b      	ldr	r2, [pc, #108]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007378:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800737c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007380:	4a18      	ldr	r2, [pc, #96]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	f003 0301 	and.w	r3, r3, #1
 800738e:	2b00      	cmp	r3, #0
 8007390:	d016      	beq.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007392:	f7fc f9c1 	bl	8003718 <HAL_GetTick>
 8007396:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007398:	e00b      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800739a:	f7fc f9bd 	bl	8003718 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d902      	bls.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80073ac:	2303      	movs	r3, #3
 80073ae:	74fb      	strb	r3, [r7, #19]
            break;
 80073b0:	e006      	b.n	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80073b2:	4b0c      	ldr	r3, [pc, #48]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b8:	f003 0302 	and.w	r3, r3, #2
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d0ec      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80073c0:	7cfb      	ldrb	r3, [r7, #19]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10b      	bne.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80073c6:	4b07      	ldr	r3, [pc, #28]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d4:	4903      	ldr	r1, [pc, #12]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80073dc:	e008      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80073de:	7cfb      	ldrb	r3, [r7, #19]
 80073e0:	74bb      	strb	r3, [r7, #18]
 80073e2:	e005      	b.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80073e4:	40021000 	.word	0x40021000
 80073e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ec:	7cfb      	ldrb	r3, [r7, #19]
 80073ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80073f0:	7c7b      	ldrb	r3, [r7, #17]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d105      	bne.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073f6:	4ba6      	ldr	r3, [pc, #664]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073fa:	4aa5      	ldr	r2, [pc, #660]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80073fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007400:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 0301 	and.w	r3, r3, #1
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00a      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800740e:	4ba0      	ldr	r3, [pc, #640]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007414:	f023 0203 	bic.w	r2, r3, #3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	499c      	ldr	r1, [pc, #624]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b00      	cmp	r3, #0
 800742e:	d00a      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007430:	4b97      	ldr	r3, [pc, #604]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007436:	f023 020c 	bic.w	r2, r3, #12
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	4994      	ldr	r1, [pc, #592]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007440:	4313      	orrs	r3, r2
 8007442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f003 0304 	and.w	r3, r3, #4
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007452:	4b8f      	ldr	r3, [pc, #572]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007458:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	68db      	ldr	r3, [r3, #12]
 8007460:	498b      	ldr	r1, [pc, #556]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007462:	4313      	orrs	r3, r2
 8007464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0308 	and.w	r3, r3, #8
 8007470:	2b00      	cmp	r3, #0
 8007472:	d00a      	beq.n	800748a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007474:	4b86      	ldr	r3, [pc, #536]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800747a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	4983      	ldr	r1, [pc, #524]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007484:	4313      	orrs	r3, r2
 8007486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f003 0320 	and.w	r3, r3, #32
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00a      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007496:	4b7e      	ldr	r3, [pc, #504]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	695b      	ldr	r3, [r3, #20]
 80074a4:	497a      	ldr	r1, [pc, #488]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074a6:	4313      	orrs	r3, r2
 80074a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00a      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80074b8:	4b75      	ldr	r3, [pc, #468]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074be:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	699b      	ldr	r3, [r3, #24]
 80074c6:	4972      	ldr	r1, [pc, #456]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80074da:	4b6d      	ldr	r3, [pc, #436]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	69db      	ldr	r3, [r3, #28]
 80074e8:	4969      	ldr	r1, [pc, #420]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00a      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80074fc:	4b64      	ldr	r3, [pc, #400]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80074fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007502:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a1b      	ldr	r3, [r3, #32]
 800750a:	4961      	ldr	r1, [pc, #388]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800750c:	4313      	orrs	r3, r2
 800750e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00a      	beq.n	8007534 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800751e:	4b5c      	ldr	r3, [pc, #368]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007520:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007524:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800752c:	4958      	ldr	r1, [pc, #352]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800752e:	4313      	orrs	r3, r2
 8007530:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800753c:	2b00      	cmp	r3, #0
 800753e:	d015      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007540:	4b53      	ldr	r3, [pc, #332]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007542:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007546:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754e:	4950      	ldr	r1, [pc, #320]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007550:	4313      	orrs	r3, r2
 8007552:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800755a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800755e:	d105      	bne.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007560:	4b4b      	ldr	r3, [pc, #300]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007562:	68db      	ldr	r3, [r3, #12]
 8007564:	4a4a      	ldr	r2, [pc, #296]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007566:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800756a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007574:	2b00      	cmp	r3, #0
 8007576:	d015      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007578:	4b45      	ldr	r3, [pc, #276]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800757a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800757e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007586:	4942      	ldr	r1, [pc, #264]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007588:	4313      	orrs	r3, r2
 800758a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007596:	d105      	bne.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007598:	4b3d      	ldr	r3, [pc, #244]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	4a3c      	ldr	r2, [pc, #240]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800759e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075a2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d015      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80075b0:	4b37      	ldr	r3, [pc, #220]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075be:	4934      	ldr	r1, [pc, #208]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075c0:	4313      	orrs	r3, r2
 80075c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80075ce:	d105      	bne.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80075d0:	4b2f      	ldr	r3, [pc, #188]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075d2:	68db      	ldr	r3, [r3, #12]
 80075d4:	4a2e      	ldr	r2, [pc, #184]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80075da:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d015      	beq.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075e8:	4b29      	ldr	r3, [pc, #164]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f6:	4926      	ldr	r1, [pc, #152]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80075f8:	4313      	orrs	r3, r2
 80075fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007602:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007606:	d105      	bne.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007608:	4b21      	ldr	r3, [pc, #132]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	4a20      	ldr	r2, [pc, #128]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800760e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007612:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800761c:	2b00      	cmp	r3, #0
 800761e:	d015      	beq.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007620:	4b1b      	ldr	r3, [pc, #108]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007626:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762e:	4918      	ldr	r1, [pc, #96]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007630:	4313      	orrs	r3, r2
 8007632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800763e:	d105      	bne.n	800764c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007640:	4b13      	ldr	r3, [pc, #76]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	4a12      	ldr	r2, [pc, #72]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007646:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800764a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d015      	beq.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007658:	4b0d      	ldr	r3, [pc, #52]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800765a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800765e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007666:	490a      	ldr	r1, [pc, #40]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8007668:	4313      	orrs	r3, r2
 800766a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007672:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007676:	d105      	bne.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007678:	4b05      	ldr	r3, [pc, #20]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	4a04      	ldr	r2, [pc, #16]	; (8007690 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800767e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007682:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8007684:	7cbb      	ldrb	r3, [r7, #18]
}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40021000 	.word	0x40021000

08007694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b084      	sub	sp, #16
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e09d      	b.n	80077e2 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d108      	bne.n	80076c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076b6:	d009      	beq.n	80076cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2200      	movs	r2, #0
 80076bc:	61da      	str	r2, [r3, #28]
 80076be:	e005      	b.n	80076cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2200      	movs	r2, #0
 80076d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80076d8:	b2db      	uxtb	r3, r3
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d106      	bne.n	80076ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f7fb fcc0 	bl	800306c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007702:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800770c:	d902      	bls.n	8007714 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800770e:	2300      	movs	r3, #0
 8007710:	60fb      	str	r3, [r7, #12]
 8007712:	e002      	b.n	800771a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007718:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007722:	d007      	beq.n	8007734 <HAL_SPI_Init+0xa0>
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	68db      	ldr	r3, [r3, #12]
 8007728:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800772c:	d002      	beq.n	8007734 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007744:	431a      	orrs	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	f003 0302 	and.w	r3, r3, #2
 800774e:	431a      	orrs	r2, r3
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	695b      	ldr	r3, [r3, #20]
 8007754:	f003 0301 	and.w	r3, r3, #1
 8007758:	431a      	orrs	r2, r3
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	69db      	ldr	r3, [r3, #28]
 8007768:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800776c:	431a      	orrs	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a1b      	ldr	r3, [r3, #32]
 8007772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007776:	ea42 0103 	orr.w	r1, r2, r3
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800777e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	430a      	orrs	r2, r1
 8007788:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	699b      	ldr	r3, [r3, #24]
 800778e:	0c1b      	lsrs	r3, r3, #16
 8007790:	f003 0204 	and.w	r2, r3, #4
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	f003 0310 	and.w	r3, r3, #16
 800779c:	431a      	orrs	r2, r3
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a2:	f003 0308 	and.w	r3, r3, #8
 80077a6:	431a      	orrs	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80077b0:	ea42 0103 	orr.w	r1, r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	430a      	orrs	r2, r1
 80077c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69da      	ldr	r2, [r3, #28]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80077d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2201      	movs	r2, #1
 80077dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b082      	sub	sp, #8
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e049      	b.n	8007890 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d106      	bne.n	8007816 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f7fb fc6f 	bl	80030f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2202      	movs	r2, #2
 800781a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681a      	ldr	r2, [r3, #0]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	3304      	adds	r3, #4
 8007826:	4619      	mov	r1, r3
 8007828:	4610      	mov	r0, r2
 800782a:	f000 fea1 	bl	8008570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2201      	movs	r2, #1
 800787a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3708      	adds	r7, #8
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e049      	b.n	800793e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d106      	bne.n	80078c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f000 f841 	bl	8007946 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3304      	adds	r3, #4
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f000 fe4a 	bl	8008570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2201      	movs	r2, #1
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800794e:	bf00      	nop
 8007950:	370c      	adds	r7, #12
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
	...

0800795c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
 8007964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <HAL_TIM_PWM_Start+0x24>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b01      	cmp	r3, #1
 8007976:	bf14      	ite	ne
 8007978:	2301      	movne	r3, #1
 800797a:	2300      	moveq	r3, #0
 800797c:	b2db      	uxtb	r3, r3
 800797e:	e03c      	b.n	80079fa <HAL_TIM_PWM_Start+0x9e>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	2b04      	cmp	r3, #4
 8007984:	d109      	bne.n	800799a <HAL_TIM_PWM_Start+0x3e>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800798c:	b2db      	uxtb	r3, r3
 800798e:	2b01      	cmp	r3, #1
 8007990:	bf14      	ite	ne
 8007992:	2301      	movne	r3, #1
 8007994:	2300      	moveq	r3, #0
 8007996:	b2db      	uxtb	r3, r3
 8007998:	e02f      	b.n	80079fa <HAL_TIM_PWM_Start+0x9e>
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	2b08      	cmp	r3, #8
 800799e:	d109      	bne.n	80079b4 <HAL_TIM_PWM_Start+0x58>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	bf14      	ite	ne
 80079ac:	2301      	movne	r3, #1
 80079ae:	2300      	moveq	r3, #0
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	e022      	b.n	80079fa <HAL_TIM_PWM_Start+0x9e>
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b0c      	cmp	r3, #12
 80079b8:	d109      	bne.n	80079ce <HAL_TIM_PWM_Start+0x72>
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	bf14      	ite	ne
 80079c6:	2301      	movne	r3, #1
 80079c8:	2300      	moveq	r3, #0
 80079ca:	b2db      	uxtb	r3, r3
 80079cc:	e015      	b.n	80079fa <HAL_TIM_PWM_Start+0x9e>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	2b10      	cmp	r3, #16
 80079d2:	d109      	bne.n	80079e8 <HAL_TIM_PWM_Start+0x8c>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b01      	cmp	r3, #1
 80079de:	bf14      	ite	ne
 80079e0:	2301      	movne	r3, #1
 80079e2:	2300      	moveq	r3, #0
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	e008      	b.n	80079fa <HAL_TIM_PWM_Start+0x9e>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80079ee:	b2db      	uxtb	r3, r3
 80079f0:	2b01      	cmp	r3, #1
 80079f2:	bf14      	ite	ne
 80079f4:	2301      	movne	r3, #1
 80079f6:	2300      	moveq	r3, #0
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e097      	b.n	8007b32 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d104      	bne.n	8007a12 <HAL_TIM_PWM_Start+0xb6>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a10:	e023      	b.n	8007a5a <HAL_TIM_PWM_Start+0xfe>
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	2b04      	cmp	r3, #4
 8007a16:	d104      	bne.n	8007a22 <HAL_TIM_PWM_Start+0xc6>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2202      	movs	r2, #2
 8007a1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a20:	e01b      	b.n	8007a5a <HAL_TIM_PWM_Start+0xfe>
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b08      	cmp	r3, #8
 8007a26:	d104      	bne.n	8007a32 <HAL_TIM_PWM_Start+0xd6>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a30:	e013      	b.n	8007a5a <HAL_TIM_PWM_Start+0xfe>
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b0c      	cmp	r3, #12
 8007a36:	d104      	bne.n	8007a42 <HAL_TIM_PWM_Start+0xe6>
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2202      	movs	r2, #2
 8007a3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a40:	e00b      	b.n	8007a5a <HAL_TIM_PWM_Start+0xfe>
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b10      	cmp	r3, #16
 8007a46:	d104      	bne.n	8007a52 <HAL_TIM_PWM_Start+0xf6>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a50:	e003      	b.n	8007a5a <HAL_TIM_PWM_Start+0xfe>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2202      	movs	r2, #2
 8007a56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	4618      	mov	r0, r3
 8007a64:	f001 f9a6 	bl	8008db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4a33      	ldr	r2, [pc, #204]	; (8007b3c <HAL_TIM_PWM_Start+0x1e0>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d013      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x13e>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a32      	ldr	r2, [pc, #200]	; (8007b40 <HAL_TIM_PWM_Start+0x1e4>)
 8007a78:	4293      	cmp	r3, r2
 8007a7a:	d00e      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x13e>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	4a30      	ldr	r2, [pc, #192]	; (8007b44 <HAL_TIM_PWM_Start+0x1e8>)
 8007a82:	4293      	cmp	r3, r2
 8007a84:	d009      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x13e>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a2f      	ldr	r2, [pc, #188]	; (8007b48 <HAL_TIM_PWM_Start+0x1ec>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d004      	beq.n	8007a9a <HAL_TIM_PWM_Start+0x13e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a2d      	ldr	r2, [pc, #180]	; (8007b4c <HAL_TIM_PWM_Start+0x1f0>)
 8007a96:	4293      	cmp	r3, r2
 8007a98:	d101      	bne.n	8007a9e <HAL_TIM_PWM_Start+0x142>
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e000      	b.n	8007aa0 <HAL_TIM_PWM_Start+0x144>
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ab2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a20      	ldr	r2, [pc, #128]	; (8007b3c <HAL_TIM_PWM_Start+0x1e0>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d018      	beq.n	8007af0 <HAL_TIM_PWM_Start+0x194>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ac6:	d013      	beq.n	8007af0 <HAL_TIM_PWM_Start+0x194>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a20      	ldr	r2, [pc, #128]	; (8007b50 <HAL_TIM_PWM_Start+0x1f4>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d00e      	beq.n	8007af0 <HAL_TIM_PWM_Start+0x194>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a1f      	ldr	r2, [pc, #124]	; (8007b54 <HAL_TIM_PWM_Start+0x1f8>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d009      	beq.n	8007af0 <HAL_TIM_PWM_Start+0x194>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a17      	ldr	r2, [pc, #92]	; (8007b40 <HAL_TIM_PWM_Start+0x1e4>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d004      	beq.n	8007af0 <HAL_TIM_PWM_Start+0x194>
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a16      	ldr	r2, [pc, #88]	; (8007b44 <HAL_TIM_PWM_Start+0x1e8>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d115      	bne.n	8007b1c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	689a      	ldr	r2, [r3, #8]
 8007af6:	4b18      	ldr	r3, [pc, #96]	; (8007b58 <HAL_TIM_PWM_Start+0x1fc>)
 8007af8:	4013      	ands	r3, r2
 8007afa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2b06      	cmp	r3, #6
 8007b00:	d015      	beq.n	8007b2e <HAL_TIM_PWM_Start+0x1d2>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b08:	d011      	beq.n	8007b2e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	681a      	ldr	r2, [r3, #0]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f042 0201 	orr.w	r2, r2, #1
 8007b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b1a:	e008      	b.n	8007b2e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f042 0201 	orr.w	r2, r2, #1
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	e000      	b.n	8007b30 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40012c00 	.word	0x40012c00
 8007b40:	40013400 	.word	0x40013400
 8007b44:	40014000 	.word	0x40014000
 8007b48:	40014400 	.word	0x40014400
 8007b4c:	40014800 	.word	0x40014800
 8007b50:	40000400 	.word	0x40000400
 8007b54:	40000800 	.word	0x40000800
 8007b58:	00010007 	.word	0x00010007

08007b5c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b086      	sub	sp, #24
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d101      	bne.n	8007b70 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e097      	b.n	8007ca0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b76:	b2db      	uxtb	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d106      	bne.n	8007b8a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f7fb fb01 	bl	800318c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2202      	movs	r2, #2
 8007b8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6812      	ldr	r2, [r2, #0]
 8007b9c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8007ba0:	f023 0307 	bic.w	r3, r3, #7
 8007ba4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f000 fcdd 	bl	8008570 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	6a1b      	ldr	r3, [r3, #32]
 8007bcc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	697a      	ldr	r2, [r7, #20]
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bde:	f023 0303 	bic.w	r3, r3, #3
 8007be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	689a      	ldr	r2, [r3, #8]
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	021b      	lsls	r3, r3, #8
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	4313      	orrs	r3, r2
 8007bf4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007bf6:	693b      	ldr	r3, [r7, #16]
 8007bf8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007bfc:	f023 030c 	bic.w	r3, r3, #12
 8007c00:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	68da      	ldr	r2, [r3, #12]
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	69db      	ldr	r3, [r3, #28]
 8007c16:	021b      	lsls	r3, r3, #8
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	011a      	lsls	r2, r3, #4
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	6a1b      	ldr	r3, [r3, #32]
 8007c2a:	031b      	lsls	r3, r3, #12
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	4313      	orrs	r3, r2
 8007c32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8007c3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007c42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	695b      	ldr	r3, [r3, #20]
 8007c4c:	011b      	lsls	r3, r3, #4
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	68fa      	ldr	r2, [r7, #12]
 8007c52:	4313      	orrs	r3, r2
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	693a      	ldr	r2, [r7, #16]
 8007c64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	68fa      	ldr	r2, [r7, #12]
 8007c6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	2201      	movs	r2, #1
 8007c72:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2201      	movs	r2, #1
 8007c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2201      	movs	r2, #1
 8007c8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2201      	movs	r2, #1
 8007c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2201      	movs	r2, #1
 8007c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
}
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b084      	sub	sp, #16
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007cb8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007cc0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cc8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007cd0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d110      	bne.n	8007cfa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007cd8:	7bfb      	ldrb	r3, [r7, #15]
 8007cda:	2b01      	cmp	r3, #1
 8007cdc:	d102      	bne.n	8007ce4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007cde:	7b7b      	ldrb	r3, [r7, #13]
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d001      	beq.n	8007ce8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e089      	b.n	8007dfc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2202      	movs	r2, #2
 8007cf4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007cf8:	e031      	b.n	8007d5e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	2b04      	cmp	r3, #4
 8007cfe:	d110      	bne.n	8007d22 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d102      	bne.n	8007d0c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d06:	7b3b      	ldrb	r3, [r7, #12]
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d001      	beq.n	8007d10 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e075      	b.n	8007dfc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2202      	movs	r2, #2
 8007d14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d20:	e01d      	b.n	8007d5e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d108      	bne.n	8007d3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d28:	7bbb      	ldrb	r3, [r7, #14]
 8007d2a:	2b01      	cmp	r3, #1
 8007d2c:	d105      	bne.n	8007d3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007d2e:	7b7b      	ldrb	r3, [r7, #13]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d102      	bne.n	8007d3a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007d34:	7b3b      	ldrb	r3, [r7, #12]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d001      	beq.n	8007d3e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	e05e      	b.n	8007dfc <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2202      	movs	r2, #2
 8007d42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2202      	movs	r2, #2
 8007d4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2202      	movs	r2, #2
 8007d52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2202      	movs	r2, #2
 8007d5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d003      	beq.n	8007d6c <HAL_TIM_Encoder_Start_IT+0xc4>
 8007d64:	683b      	ldr	r3, [r7, #0]
 8007d66:	2b04      	cmp	r3, #4
 8007d68:	d010      	beq.n	8007d8c <HAL_TIM_Encoder_Start_IT+0xe4>
 8007d6a:	e01f      	b.n	8007dac <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2201      	movs	r2, #1
 8007d72:	2100      	movs	r1, #0
 8007d74:	4618      	mov	r0, r3
 8007d76:	f001 f81d 	bl	8008db4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68da      	ldr	r2, [r3, #12]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f042 0202 	orr.w	r2, r2, #2
 8007d88:	60da      	str	r2, [r3, #12]
      break;
 8007d8a:	e02e      	b.n	8007dea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	2201      	movs	r2, #1
 8007d92:	2104      	movs	r1, #4
 8007d94:	4618      	mov	r0, r3
 8007d96:	f001 f80d 	bl	8008db4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68da      	ldr	r2, [r3, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f042 0204 	orr.w	r2, r2, #4
 8007da8:	60da      	str	r2, [r3, #12]
      break;
 8007daa:	e01e      	b.n	8007dea <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	2201      	movs	r2, #1
 8007db2:	2100      	movs	r1, #0
 8007db4:	4618      	mov	r0, r3
 8007db6:	f000 fffd 	bl	8008db4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	2104      	movs	r1, #4
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 fff6 	bl	8008db4 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	68da      	ldr	r2, [r3, #12]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f042 0202 	orr.w	r2, r2, #2
 8007dd6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0204 	orr.w	r2, r2, #4
 8007de6:	60da      	str	r2, [r3, #12]
      break;
 8007de8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	f042 0201 	orr.w	r2, r2, #1
 8007df8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	691b      	ldr	r3, [r3, #16]
 8007e12:	f003 0302 	and.w	r3, r3, #2
 8007e16:	2b02      	cmp	r3, #2
 8007e18:	d122      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d11b      	bne.n	8007e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f06f 0202 	mvn.w	r2, #2
 8007e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2201      	movs	r2, #1
 8007e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699b      	ldr	r3, [r3, #24]
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d003      	beq.n	8007e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7f9 fd56 	bl	80018f8 <HAL_TIM_IC_CaptureCallback>
 8007e4c:	e005      	b.n	8007e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e4e:	6878      	ldr	r0, [r7, #4]
 8007e50:	f000 fb70 	bl	8008534 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 fb77 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	f003 0304 	and.w	r3, r3, #4
 8007e6a:	2b04      	cmp	r3, #4
 8007e6c:	d122      	bne.n	8007eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68db      	ldr	r3, [r3, #12]
 8007e74:	f003 0304 	and.w	r3, r3, #4
 8007e78:	2b04      	cmp	r3, #4
 8007e7a:	d11b      	bne.n	8007eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f06f 0204 	mvn.w	r2, #4
 8007e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2202      	movs	r2, #2
 8007e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	699b      	ldr	r3, [r3, #24]
 8007e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d003      	beq.n	8007ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e9a:	6878      	ldr	r0, [r7, #4]
 8007e9c:	f7f9 fd2c 	bl	80018f8 <HAL_TIM_IC_CaptureCallback>
 8007ea0:	e005      	b.n	8007eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 fb46 	bl	8008534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 fb4d 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	691b      	ldr	r3, [r3, #16]
 8007eba:	f003 0308 	and.w	r3, r3, #8
 8007ebe:	2b08      	cmp	r3, #8
 8007ec0:	d122      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f003 0308 	and.w	r3, r3, #8
 8007ecc:	2b08      	cmp	r3, #8
 8007ece:	d11b      	bne.n	8007f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f06f 0208 	mvn.w	r2, #8
 8007ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2204      	movs	r2, #4
 8007ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	69db      	ldr	r3, [r3, #28]
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7f9 fd02 	bl	80018f8 <HAL_TIM_IC_CaptureCallback>
 8007ef4:	e005      	b.n	8007f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f000 fb1c 	bl	8008534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fb23 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2200      	movs	r2, #0
 8007f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	f003 0310 	and.w	r3, r3, #16
 8007f12:	2b10      	cmp	r3, #16
 8007f14:	d122      	bne.n	8007f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	f003 0310 	and.w	r3, r3, #16
 8007f20:	2b10      	cmp	r3, #16
 8007f22:	d11b      	bne.n	8007f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f06f 0210 	mvn.w	r2, #16
 8007f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2208      	movs	r2, #8
 8007f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7f9 fcd8 	bl	80018f8 <HAL_TIM_IC_CaptureCallback>
 8007f48:	e005      	b.n	8007f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f000 faf2 	bl	8008534 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f000 faf9 	bl	8008548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	691b      	ldr	r3, [r3, #16]
 8007f62:	f003 0301 	and.w	r3, r3, #1
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d10e      	bne.n	8007f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	f003 0301 	and.w	r3, r3, #1
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d107      	bne.n	8007f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f06f 0201 	mvn.w	r2, #1
 8007f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 facc 	bl	8008520 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	691b      	ldr	r3, [r3, #16]
 8007f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f92:	2b80      	cmp	r3, #128	; 0x80
 8007f94:	d10e      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	68db      	ldr	r3, [r3, #12]
 8007f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fa0:	2b80      	cmp	r3, #128	; 0x80
 8007fa2:	d107      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 f852 	bl	8009058 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fc2:	d10e      	bne.n	8007fe2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fce:	2b80      	cmp	r3, #128	; 0x80
 8007fd0:	d107      	bne.n	8007fe2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 f845 	bl	800906c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fec:	2b40      	cmp	r3, #64	; 0x40
 8007fee:	d10e      	bne.n	800800e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ffa:	2b40      	cmp	r3, #64	; 0x40
 8007ffc:	d107      	bne.n	800800e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f000 faa7 	bl	800855c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	691b      	ldr	r3, [r3, #16]
 8008014:	f003 0320 	and.w	r3, r3, #32
 8008018:	2b20      	cmp	r3, #32
 800801a:	d10e      	bne.n	800803a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	68db      	ldr	r3, [r3, #12]
 8008022:	f003 0320 	and.w	r3, r3, #32
 8008026:	2b20      	cmp	r3, #32
 8008028:	d107      	bne.n	800803a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	f06f 0220 	mvn.w	r2, #32
 8008032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 f805 	bl	8009044 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008048:	d10f      	bne.n	800806a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008054:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008058:	d107      	bne.n	800806a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008062:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f80b 	bl	8009080 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008074:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008078:	d10f      	bne.n	800809a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008084:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008088:	d107      	bne.n	800809a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f000 fffd 	bl	8009094 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	691b      	ldr	r3, [r3, #16]
 80080a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080a8:	d10f      	bne.n	80080ca <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080b8:	d107      	bne.n	80080ca <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80080c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 ffef 	bl	80090a8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	691b      	ldr	r3, [r3, #16]
 80080d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080d8:	d10f      	bne.n	80080fa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080e8:	d107      	bne.n	80080fa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80080f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f000 ffe1 	bl	80090bc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80080fa:	bf00      	nop
 80080fc:	3708      	adds	r7, #8
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
	...

08008104 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008104:	b580      	push	{r7, lr}
 8008106:	b086      	sub	sp, #24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	60b9      	str	r1, [r7, #8]
 800810e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008110:	2300      	movs	r3, #0
 8008112:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800811a:	2b01      	cmp	r3, #1
 800811c:	d101      	bne.n	8008122 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800811e:	2302      	movs	r3, #2
 8008120:	e0ff      	b.n	8008322 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2201      	movs	r2, #1
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2b14      	cmp	r3, #20
 800812e:	f200 80f0 	bhi.w	8008312 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008132:	a201      	add	r2, pc, #4	; (adr r2, 8008138 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008138:	0800818d 	.word	0x0800818d
 800813c:	08008313 	.word	0x08008313
 8008140:	08008313 	.word	0x08008313
 8008144:	08008313 	.word	0x08008313
 8008148:	080081cd 	.word	0x080081cd
 800814c:	08008313 	.word	0x08008313
 8008150:	08008313 	.word	0x08008313
 8008154:	08008313 	.word	0x08008313
 8008158:	0800820f 	.word	0x0800820f
 800815c:	08008313 	.word	0x08008313
 8008160:	08008313 	.word	0x08008313
 8008164:	08008313 	.word	0x08008313
 8008168:	0800824f 	.word	0x0800824f
 800816c:	08008313 	.word	0x08008313
 8008170:	08008313 	.word	0x08008313
 8008174:	08008313 	.word	0x08008313
 8008178:	08008291 	.word	0x08008291
 800817c:	08008313 	.word	0x08008313
 8008180:	08008313 	.word	0x08008313
 8008184:	08008313 	.word	0x08008313
 8008188:	080082d1 	.word	0x080082d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	68b9      	ldr	r1, [r7, #8]
 8008192:	4618      	mov	r0, r3
 8008194:	f000 fa7c 	bl	8008690 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	699a      	ldr	r2, [r3, #24]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0208 	orr.w	r2, r2, #8
 80081a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	699a      	ldr	r2, [r3, #24]
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f022 0204 	bic.w	r2, r2, #4
 80081b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	6999      	ldr	r1, [r3, #24]
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	691a      	ldr	r2, [r3, #16]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	430a      	orrs	r2, r1
 80081c8:	619a      	str	r2, [r3, #24]
      break;
 80081ca:	e0a5      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68b9      	ldr	r1, [r7, #8]
 80081d2:	4618      	mov	r0, r3
 80081d4:	f000 faec 	bl	80087b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	699a      	ldr	r2, [r3, #24]
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80081e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6999      	ldr	r1, [r3, #24]
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	021a      	lsls	r2, r3, #8
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	430a      	orrs	r2, r1
 800820a:	619a      	str	r2, [r3, #24]
      break;
 800820c:	e084      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68b9      	ldr	r1, [r7, #8]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 fb55 	bl	80088c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	69da      	ldr	r2, [r3, #28]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f042 0208 	orr.w	r2, r2, #8
 8008228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	69da      	ldr	r2, [r3, #28]
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0204 	bic.w	r2, r2, #4
 8008238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	69d9      	ldr	r1, [r3, #28]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	430a      	orrs	r2, r1
 800824a:	61da      	str	r2, [r3, #28]
      break;
 800824c:	e064      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68b9      	ldr	r1, [r7, #8]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 fbbd 	bl	80089d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	69da      	ldr	r2, [r3, #28]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69da      	ldr	r2, [r3, #28]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	69d9      	ldr	r1, [r3, #28]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	691b      	ldr	r3, [r3, #16]
 8008284:	021a      	lsls	r2, r3, #8
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	430a      	orrs	r2, r1
 800828c:	61da      	str	r2, [r3, #28]
      break;
 800828e:	e043      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68b9      	ldr	r1, [r7, #8]
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fc26 	bl	8008ae8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f042 0208 	orr.w	r2, r2, #8
 80082aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f022 0204 	bic.w	r2, r2, #4
 80082ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	691a      	ldr	r2, [r3, #16]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	430a      	orrs	r2, r1
 80082cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80082ce:	e023      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	68b9      	ldr	r1, [r7, #8]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 fc6a 	bl	8008bb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80082ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	691b      	ldr	r3, [r3, #16]
 8008306:	021a      	lsls	r2, r3, #8
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	430a      	orrs	r2, r1
 800830e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008310:	e002      	b.n	8008318 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	75fb      	strb	r3, [r7, #23]
      break;
 8008316:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008320:	7dfb      	ldrb	r3, [r7, #23]
}
 8008322:	4618      	mov	r0, r3
 8008324:	3718      	adds	r7, #24
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop

0800832c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008336:	2300      	movs	r3, #0
 8008338:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008340:	2b01      	cmp	r3, #1
 8008342:	d101      	bne.n	8008348 <HAL_TIM_ConfigClockSource+0x1c>
 8008344:	2302      	movs	r3, #2
 8008346:	e0de      	b.n	8008506 <HAL_TIM_ConfigClockSource+0x1da>
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2202      	movs	r2, #2
 8008354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	689b      	ldr	r3, [r3, #8]
 800835e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008360:	68bb      	ldr	r3, [r7, #8]
 8008362:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008366:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800836a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008372:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	68ba      	ldr	r2, [r7, #8]
 800837a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a63      	ldr	r2, [pc, #396]	; (8008510 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008382:	4293      	cmp	r3, r2
 8008384:	f000 80a9 	beq.w	80084da <HAL_TIM_ConfigClockSource+0x1ae>
 8008388:	4a61      	ldr	r2, [pc, #388]	; (8008510 <HAL_TIM_ConfigClockSource+0x1e4>)
 800838a:	4293      	cmp	r3, r2
 800838c:	f200 80ae 	bhi.w	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 8008390:	4a60      	ldr	r2, [pc, #384]	; (8008514 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008392:	4293      	cmp	r3, r2
 8008394:	f000 80a1 	beq.w	80084da <HAL_TIM_ConfigClockSource+0x1ae>
 8008398:	4a5e      	ldr	r2, [pc, #376]	; (8008514 <HAL_TIM_ConfigClockSource+0x1e8>)
 800839a:	4293      	cmp	r3, r2
 800839c:	f200 80a6 	bhi.w	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 80083a0:	4a5d      	ldr	r2, [pc, #372]	; (8008518 <HAL_TIM_ConfigClockSource+0x1ec>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	f000 8099 	beq.w	80084da <HAL_TIM_ConfigClockSource+0x1ae>
 80083a8:	4a5b      	ldr	r2, [pc, #364]	; (8008518 <HAL_TIM_ConfigClockSource+0x1ec>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	f200 809e 	bhi.w	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 80083b0:	4a5a      	ldr	r2, [pc, #360]	; (800851c <HAL_TIM_ConfigClockSource+0x1f0>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	f000 8091 	beq.w	80084da <HAL_TIM_ConfigClockSource+0x1ae>
 80083b8:	4a58      	ldr	r2, [pc, #352]	; (800851c <HAL_TIM_ConfigClockSource+0x1f0>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	f200 8096 	bhi.w	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 80083c0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80083c4:	f000 8089 	beq.w	80084da <HAL_TIM_ConfigClockSource+0x1ae>
 80083c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80083cc:	f200 808e 	bhi.w	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 80083d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083d4:	d03e      	beq.n	8008454 <HAL_TIM_ConfigClockSource+0x128>
 80083d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083da:	f200 8087 	bhi.w	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 80083de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083e2:	f000 8086 	beq.w	80084f2 <HAL_TIM_ConfigClockSource+0x1c6>
 80083e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083ea:	d87f      	bhi.n	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 80083ec:	2b70      	cmp	r3, #112	; 0x70
 80083ee:	d01a      	beq.n	8008426 <HAL_TIM_ConfigClockSource+0xfa>
 80083f0:	2b70      	cmp	r3, #112	; 0x70
 80083f2:	d87b      	bhi.n	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 80083f4:	2b60      	cmp	r3, #96	; 0x60
 80083f6:	d050      	beq.n	800849a <HAL_TIM_ConfigClockSource+0x16e>
 80083f8:	2b60      	cmp	r3, #96	; 0x60
 80083fa:	d877      	bhi.n	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 80083fc:	2b50      	cmp	r3, #80	; 0x50
 80083fe:	d03c      	beq.n	800847a <HAL_TIM_ConfigClockSource+0x14e>
 8008400:	2b50      	cmp	r3, #80	; 0x50
 8008402:	d873      	bhi.n	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 8008404:	2b40      	cmp	r3, #64	; 0x40
 8008406:	d058      	beq.n	80084ba <HAL_TIM_ConfigClockSource+0x18e>
 8008408:	2b40      	cmp	r3, #64	; 0x40
 800840a:	d86f      	bhi.n	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 800840c:	2b30      	cmp	r3, #48	; 0x30
 800840e:	d064      	beq.n	80084da <HAL_TIM_ConfigClockSource+0x1ae>
 8008410:	2b30      	cmp	r3, #48	; 0x30
 8008412:	d86b      	bhi.n	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 8008414:	2b20      	cmp	r3, #32
 8008416:	d060      	beq.n	80084da <HAL_TIM_ConfigClockSource+0x1ae>
 8008418:	2b20      	cmp	r3, #32
 800841a:	d867      	bhi.n	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d05c      	beq.n	80084da <HAL_TIM_ConfigClockSource+0x1ae>
 8008420:	2b10      	cmp	r3, #16
 8008422:	d05a      	beq.n	80084da <HAL_TIM_ConfigClockSource+0x1ae>
 8008424:	e062      	b.n	80084ec <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6818      	ldr	r0, [r3, #0]
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	6899      	ldr	r1, [r3, #8]
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	f000 fc9d 	bl	8008d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	689b      	ldr	r3, [r3, #8]
 8008440:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008448:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	609a      	str	r2, [r3, #8]
      break;
 8008452:	e04f      	b.n	80084f4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6818      	ldr	r0, [r3, #0]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	6899      	ldr	r1, [r3, #8]
 800845c:	683b      	ldr	r3, [r7, #0]
 800845e:	685a      	ldr	r2, [r3, #4]
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	f000 fc86 	bl	8008d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	689a      	ldr	r2, [r3, #8]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008476:	609a      	str	r2, [r3, #8]
      break;
 8008478:	e03c      	b.n	80084f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6818      	ldr	r0, [r3, #0]
 800847e:	683b      	ldr	r3, [r7, #0]
 8008480:	6859      	ldr	r1, [r3, #4]
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	461a      	mov	r2, r3
 8008488:	f000 fbf8 	bl	8008c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	2150      	movs	r1, #80	; 0x50
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fc51 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 8008498:	e02c      	b.n	80084f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6818      	ldr	r0, [r3, #0]
 800849e:	683b      	ldr	r3, [r7, #0]
 80084a0:	6859      	ldr	r1, [r3, #4]
 80084a2:	683b      	ldr	r3, [r7, #0]
 80084a4:	68db      	ldr	r3, [r3, #12]
 80084a6:	461a      	mov	r2, r3
 80084a8:	f000 fc17 	bl	8008cda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	2160      	movs	r1, #96	; 0x60
 80084b2:	4618      	mov	r0, r3
 80084b4:	f000 fc41 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 80084b8:	e01c      	b.n	80084f4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	6818      	ldr	r0, [r3, #0]
 80084be:	683b      	ldr	r3, [r7, #0]
 80084c0:	6859      	ldr	r1, [r3, #4]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	68db      	ldr	r3, [r3, #12]
 80084c6:	461a      	mov	r2, r3
 80084c8:	f000 fbd8 	bl	8008c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2140      	movs	r1, #64	; 0x40
 80084d2:	4618      	mov	r0, r3
 80084d4:	f000 fc31 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 80084d8:	e00c      	b.n	80084f4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4619      	mov	r1, r3
 80084e4:	4610      	mov	r0, r2
 80084e6:	f000 fc28 	bl	8008d3a <TIM_ITRx_SetConfig>
      break;
 80084ea:	e003      	b.n	80084f4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80084ec:	2301      	movs	r3, #1
 80084ee:	73fb      	strb	r3, [r7, #15]
      break;
 80084f0:	e000      	b.n	80084f4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80084f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
}
 8008506:	4618      	mov	r0, r3
 8008508:	3710      	adds	r7, #16
 800850a:	46bd      	mov	sp, r7
 800850c:	bd80      	pop	{r7, pc}
 800850e:	bf00      	nop
 8008510:	00100070 	.word	0x00100070
 8008514:	00100040 	.word	0x00100040
 8008518:	00100030 	.word	0x00100030
 800851c:	00100020 	.word	0x00100020

08008520 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008534:	b480      	push	{r7}
 8008536:	b083      	sub	sp, #12
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800853c:	bf00      	nop
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008548:	b480      	push	{r7}
 800854a:	b083      	sub	sp, #12
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008550:	bf00      	nop
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800855c:	b480      	push	{r7}
 800855e:	b083      	sub	sp, #12
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008564:	bf00      	nop
 8008566:	370c      	adds	r7, #12
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr

08008570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008570:	b480      	push	{r7}
 8008572:	b085      	sub	sp, #20
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
 8008578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	4a3c      	ldr	r2, [pc, #240]	; (8008674 <TIM_Base_SetConfig+0x104>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d00f      	beq.n	80085a8 <TIM_Base_SetConfig+0x38>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800858e:	d00b      	beq.n	80085a8 <TIM_Base_SetConfig+0x38>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a39      	ldr	r2, [pc, #228]	; (8008678 <TIM_Base_SetConfig+0x108>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d007      	beq.n	80085a8 <TIM_Base_SetConfig+0x38>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a38      	ldr	r2, [pc, #224]	; (800867c <TIM_Base_SetConfig+0x10c>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d003      	beq.n	80085a8 <TIM_Base_SetConfig+0x38>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a37      	ldr	r2, [pc, #220]	; (8008680 <TIM_Base_SetConfig+0x110>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d108      	bne.n	80085ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a2d      	ldr	r2, [pc, #180]	; (8008674 <TIM_Base_SetConfig+0x104>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d01b      	beq.n	80085fa <TIM_Base_SetConfig+0x8a>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80085c8:	d017      	beq.n	80085fa <TIM_Base_SetConfig+0x8a>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a2a      	ldr	r2, [pc, #168]	; (8008678 <TIM_Base_SetConfig+0x108>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d013      	beq.n	80085fa <TIM_Base_SetConfig+0x8a>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a29      	ldr	r2, [pc, #164]	; (800867c <TIM_Base_SetConfig+0x10c>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d00f      	beq.n	80085fa <TIM_Base_SetConfig+0x8a>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a28      	ldr	r2, [pc, #160]	; (8008680 <TIM_Base_SetConfig+0x110>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d00b      	beq.n	80085fa <TIM_Base_SetConfig+0x8a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a27      	ldr	r2, [pc, #156]	; (8008684 <TIM_Base_SetConfig+0x114>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d007      	beq.n	80085fa <TIM_Base_SetConfig+0x8a>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a26      	ldr	r2, [pc, #152]	; (8008688 <TIM_Base_SetConfig+0x118>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d003      	beq.n	80085fa <TIM_Base_SetConfig+0x8a>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a25      	ldr	r2, [pc, #148]	; (800868c <TIM_Base_SetConfig+0x11c>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d108      	bne.n	800860c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
 8008606:	68fa      	ldr	r2, [r7, #12]
 8008608:	4313      	orrs	r3, r2
 800860a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	695b      	ldr	r3, [r3, #20]
 8008616:	4313      	orrs	r3, r2
 8008618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	681a      	ldr	r2, [r3, #0]
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4a10      	ldr	r2, [pc, #64]	; (8008674 <TIM_Base_SetConfig+0x104>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d00f      	beq.n	8008658 <TIM_Base_SetConfig+0xe8>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	4a11      	ldr	r2, [pc, #68]	; (8008680 <TIM_Base_SetConfig+0x110>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00b      	beq.n	8008658 <TIM_Base_SetConfig+0xe8>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	4a10      	ldr	r2, [pc, #64]	; (8008684 <TIM_Base_SetConfig+0x114>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d007      	beq.n	8008658 <TIM_Base_SetConfig+0xe8>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a0f      	ldr	r2, [pc, #60]	; (8008688 <TIM_Base_SetConfig+0x118>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d003      	beq.n	8008658 <TIM_Base_SetConfig+0xe8>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a0e      	ldr	r2, [pc, #56]	; (800868c <TIM_Base_SetConfig+0x11c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d103      	bne.n	8008660 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	691a      	ldr	r2, [r3, #16]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2201      	movs	r2, #1
 8008664:	615a      	str	r2, [r3, #20]
}
 8008666:	bf00      	nop
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	40012c00 	.word	0x40012c00
 8008678:	40000400 	.word	0x40000400
 800867c:	40000800 	.word	0x40000800
 8008680:	40013400 	.word	0x40013400
 8008684:	40014000 	.word	0x40014000
 8008688:	40014400 	.word	0x40014400
 800868c:	40014800 	.word	0x40014800

08008690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
 8008698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6a1b      	ldr	r3, [r3, #32]
 800869e:	f023 0201 	bic.w	r2, r3, #1
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6a1b      	ldr	r3, [r3, #32]
 80086aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	699b      	ldr	r3, [r3, #24]
 80086b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 0303 	bic.w	r3, r3, #3
 80086ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68fa      	ldr	r2, [r7, #12]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f023 0302 	bic.w	r3, r3, #2
 80086dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	697a      	ldr	r2, [r7, #20]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4a2c      	ldr	r2, [pc, #176]	; (800879c <TIM_OC1_SetConfig+0x10c>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d00f      	beq.n	8008710 <TIM_OC1_SetConfig+0x80>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	4a2b      	ldr	r2, [pc, #172]	; (80087a0 <TIM_OC1_SetConfig+0x110>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00b      	beq.n	8008710 <TIM_OC1_SetConfig+0x80>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	4a2a      	ldr	r2, [pc, #168]	; (80087a4 <TIM_OC1_SetConfig+0x114>)
 80086fc:	4293      	cmp	r3, r2
 80086fe:	d007      	beq.n	8008710 <TIM_OC1_SetConfig+0x80>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	4a29      	ldr	r2, [pc, #164]	; (80087a8 <TIM_OC1_SetConfig+0x118>)
 8008704:	4293      	cmp	r3, r2
 8008706:	d003      	beq.n	8008710 <TIM_OC1_SetConfig+0x80>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	4a28      	ldr	r2, [pc, #160]	; (80087ac <TIM_OC1_SetConfig+0x11c>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d10c      	bne.n	800872a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008710:	697b      	ldr	r3, [r7, #20]
 8008712:	f023 0308 	bic.w	r3, r3, #8
 8008716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	697a      	ldr	r2, [r7, #20]
 800871e:	4313      	orrs	r3, r2
 8008720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f023 0304 	bic.w	r3, r3, #4
 8008728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	4a1b      	ldr	r2, [pc, #108]	; (800879c <TIM_OC1_SetConfig+0x10c>)
 800872e:	4293      	cmp	r3, r2
 8008730:	d00f      	beq.n	8008752 <TIM_OC1_SetConfig+0xc2>
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a1a      	ldr	r2, [pc, #104]	; (80087a0 <TIM_OC1_SetConfig+0x110>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d00b      	beq.n	8008752 <TIM_OC1_SetConfig+0xc2>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a19      	ldr	r2, [pc, #100]	; (80087a4 <TIM_OC1_SetConfig+0x114>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d007      	beq.n	8008752 <TIM_OC1_SetConfig+0xc2>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	4a18      	ldr	r2, [pc, #96]	; (80087a8 <TIM_OC1_SetConfig+0x118>)
 8008746:	4293      	cmp	r3, r2
 8008748:	d003      	beq.n	8008752 <TIM_OC1_SetConfig+0xc2>
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	4a17      	ldr	r2, [pc, #92]	; (80087ac <TIM_OC1_SetConfig+0x11c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d111      	bne.n	8008776 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008752:	693b      	ldr	r3, [r7, #16]
 8008754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	695b      	ldr	r3, [r3, #20]
 8008766:	693a      	ldr	r2, [r7, #16]
 8008768:	4313      	orrs	r3, r2
 800876a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	693a      	ldr	r2, [r7, #16]
 8008772:	4313      	orrs	r3, r2
 8008774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	693a      	ldr	r2, [r7, #16]
 800877a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	68fa      	ldr	r2, [r7, #12]
 8008780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	697a      	ldr	r2, [r7, #20]
 800878e:	621a      	str	r2, [r3, #32]
}
 8008790:	bf00      	nop
 8008792:	371c      	adds	r7, #28
 8008794:	46bd      	mov	sp, r7
 8008796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879a:	4770      	bx	lr
 800879c:	40012c00 	.word	0x40012c00
 80087a0:	40013400 	.word	0x40013400
 80087a4:	40014000 	.word	0x40014000
 80087a8:	40014400 	.word	0x40014400
 80087ac:	40014800 	.word	0x40014800

080087b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b087      	sub	sp, #28
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6a1b      	ldr	r3, [r3, #32]
 80087be:	f023 0210 	bic.w	r2, r3, #16
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6a1b      	ldr	r3, [r3, #32]
 80087ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	699b      	ldr	r3, [r3, #24]
 80087d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80087de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087ec:	683b      	ldr	r3, [r7, #0]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	021b      	lsls	r3, r3, #8
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	f023 0320 	bic.w	r3, r3, #32
 80087fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	011b      	lsls	r3, r3, #4
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4313      	orrs	r3, r2
 800880a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a28      	ldr	r2, [pc, #160]	; (80088b0 <TIM_OC2_SetConfig+0x100>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d003      	beq.n	800881c <TIM_OC2_SetConfig+0x6c>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a27      	ldr	r2, [pc, #156]	; (80088b4 <TIM_OC2_SetConfig+0x104>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d10d      	bne.n	8008838 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800881c:	697b      	ldr	r3, [r7, #20]
 800881e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	011b      	lsls	r3, r3, #4
 800882a:	697a      	ldr	r2, [r7, #20]
 800882c:	4313      	orrs	r3, r2
 800882e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008836:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a1d      	ldr	r2, [pc, #116]	; (80088b0 <TIM_OC2_SetConfig+0x100>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d00f      	beq.n	8008860 <TIM_OC2_SetConfig+0xb0>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a1c      	ldr	r2, [pc, #112]	; (80088b4 <TIM_OC2_SetConfig+0x104>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d00b      	beq.n	8008860 <TIM_OC2_SetConfig+0xb0>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a1b      	ldr	r2, [pc, #108]	; (80088b8 <TIM_OC2_SetConfig+0x108>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d007      	beq.n	8008860 <TIM_OC2_SetConfig+0xb0>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	4a1a      	ldr	r2, [pc, #104]	; (80088bc <TIM_OC2_SetConfig+0x10c>)
 8008854:	4293      	cmp	r3, r2
 8008856:	d003      	beq.n	8008860 <TIM_OC2_SetConfig+0xb0>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a19      	ldr	r2, [pc, #100]	; (80088c0 <TIM_OC2_SetConfig+0x110>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d113      	bne.n	8008888 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800886e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008870:	683b      	ldr	r3, [r7, #0]
 8008872:	695b      	ldr	r3, [r3, #20]
 8008874:	009b      	lsls	r3, r3, #2
 8008876:	693a      	ldr	r2, [r7, #16]
 8008878:	4313      	orrs	r3, r2
 800887a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	699b      	ldr	r3, [r3, #24]
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	693a      	ldr	r2, [r7, #16]
 8008884:	4313      	orrs	r3, r2
 8008886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	693a      	ldr	r2, [r7, #16]
 800888c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	621a      	str	r2, [r3, #32]
}
 80088a2:	bf00      	nop
 80088a4:	371c      	adds	r7, #28
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr
 80088ae:	bf00      	nop
 80088b0:	40012c00 	.word	0x40012c00
 80088b4:	40013400 	.word	0x40013400
 80088b8:	40014000 	.word	0x40014000
 80088bc:	40014400 	.word	0x40014400
 80088c0:	40014800 	.word	0x40014800

080088c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b087      	sub	sp, #28
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6a1b      	ldr	r3, [r3, #32]
 80088d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6a1b      	ldr	r3, [r3, #32]
 80088de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	685b      	ldr	r3, [r3, #4]
 80088e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f023 0303 	bic.w	r3, r3, #3
 80088fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68fa      	ldr	r2, [r7, #12]
 8008906:	4313      	orrs	r3, r2
 8008908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008912:	683b      	ldr	r3, [r7, #0]
 8008914:	689b      	ldr	r3, [r3, #8]
 8008916:	021b      	lsls	r3, r3, #8
 8008918:	697a      	ldr	r2, [r7, #20]
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a27      	ldr	r2, [pc, #156]	; (80089c0 <TIM_OC3_SetConfig+0xfc>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d003      	beq.n	800892e <TIM_OC3_SetConfig+0x6a>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a26      	ldr	r2, [pc, #152]	; (80089c4 <TIM_OC3_SetConfig+0x100>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d10d      	bne.n	800894a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	68db      	ldr	r3, [r3, #12]
 800893a:	021b      	lsls	r3, r3, #8
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	4313      	orrs	r3, r2
 8008940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a1c      	ldr	r2, [pc, #112]	; (80089c0 <TIM_OC3_SetConfig+0xfc>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d00f      	beq.n	8008972 <TIM_OC3_SetConfig+0xae>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a1b      	ldr	r2, [pc, #108]	; (80089c4 <TIM_OC3_SetConfig+0x100>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d00b      	beq.n	8008972 <TIM_OC3_SetConfig+0xae>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a1a      	ldr	r2, [pc, #104]	; (80089c8 <TIM_OC3_SetConfig+0x104>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d007      	beq.n	8008972 <TIM_OC3_SetConfig+0xae>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a19      	ldr	r2, [pc, #100]	; (80089cc <TIM_OC3_SetConfig+0x108>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d003      	beq.n	8008972 <TIM_OC3_SetConfig+0xae>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a18      	ldr	r2, [pc, #96]	; (80089d0 <TIM_OC3_SetConfig+0x10c>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d113      	bne.n	800899a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	695b      	ldr	r3, [r3, #20]
 8008986:	011b      	lsls	r3, r3, #4
 8008988:	693a      	ldr	r2, [r7, #16]
 800898a:	4313      	orrs	r3, r2
 800898c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	699b      	ldr	r3, [r3, #24]
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	693a      	ldr	r2, [r7, #16]
 8008996:	4313      	orrs	r3, r2
 8008998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	685a      	ldr	r2, [r3, #4]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	697a      	ldr	r2, [r7, #20]
 80089b2:	621a      	str	r2, [r3, #32]
}
 80089b4:	bf00      	nop
 80089b6:	371c      	adds	r7, #28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr
 80089c0:	40012c00 	.word	0x40012c00
 80089c4:	40013400 	.word	0x40013400
 80089c8:	40014000 	.word	0x40014000
 80089cc:	40014400 	.word	0x40014400
 80089d0:	40014800 	.word	0x40014800

080089d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b087      	sub	sp, #28
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	031b      	lsls	r3, r3, #12
 8008a2a:	697a      	ldr	r2, [r7, #20]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a28      	ldr	r2, [pc, #160]	; (8008ad4 <TIM_OC4_SetConfig+0x100>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d003      	beq.n	8008a40 <TIM_OC4_SetConfig+0x6c>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a27      	ldr	r2, [pc, #156]	; (8008ad8 <TIM_OC4_SetConfig+0x104>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d10d      	bne.n	8008a5c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	031b      	lsls	r3, r3, #12
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	4a1d      	ldr	r2, [pc, #116]	; (8008ad4 <TIM_OC4_SetConfig+0x100>)
 8008a60:	4293      	cmp	r3, r2
 8008a62:	d00f      	beq.n	8008a84 <TIM_OC4_SetConfig+0xb0>
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a1c      	ldr	r2, [pc, #112]	; (8008ad8 <TIM_OC4_SetConfig+0x104>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d00b      	beq.n	8008a84 <TIM_OC4_SetConfig+0xb0>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a1b      	ldr	r2, [pc, #108]	; (8008adc <TIM_OC4_SetConfig+0x108>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d007      	beq.n	8008a84 <TIM_OC4_SetConfig+0xb0>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	4a1a      	ldr	r2, [pc, #104]	; (8008ae0 <TIM_OC4_SetConfig+0x10c>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d003      	beq.n	8008a84 <TIM_OC4_SetConfig+0xb0>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	4a19      	ldr	r2, [pc, #100]	; (8008ae4 <TIM_OC4_SetConfig+0x110>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d113      	bne.n	8008aac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	695b      	ldr	r3, [r3, #20]
 8008a98:	019b      	lsls	r3, r3, #6
 8008a9a:	693a      	ldr	r2, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	019b      	lsls	r3, r3, #6
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	685a      	ldr	r2, [r3, #4]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	621a      	str	r2, [r3, #32]
}
 8008ac6:	bf00      	nop
 8008ac8:	371c      	adds	r7, #28
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	40012c00 	.word	0x40012c00
 8008ad8:	40013400 	.word	0x40013400
 8008adc:	40014000 	.word	0x40014000
 8008ae0:	40014400 	.word	0x40014400
 8008ae4:	40014800 	.word	0x40014800

08008ae8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b087      	sub	sp, #28
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a1b      	ldr	r3, [r3, #32]
 8008b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	685b      	ldr	r3, [r3, #4]
 8008b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68fa      	ldr	r2, [r7, #12]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	041b      	lsls	r3, r3, #16
 8008b34:	693a      	ldr	r2, [r7, #16]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a17      	ldr	r2, [pc, #92]	; (8008b9c <TIM_OC5_SetConfig+0xb4>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d00f      	beq.n	8008b62 <TIM_OC5_SetConfig+0x7a>
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4a16      	ldr	r2, [pc, #88]	; (8008ba0 <TIM_OC5_SetConfig+0xb8>)
 8008b46:	4293      	cmp	r3, r2
 8008b48:	d00b      	beq.n	8008b62 <TIM_OC5_SetConfig+0x7a>
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a15      	ldr	r2, [pc, #84]	; (8008ba4 <TIM_OC5_SetConfig+0xbc>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d007      	beq.n	8008b62 <TIM_OC5_SetConfig+0x7a>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a14      	ldr	r2, [pc, #80]	; (8008ba8 <TIM_OC5_SetConfig+0xc0>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d003      	beq.n	8008b62 <TIM_OC5_SetConfig+0x7a>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a13      	ldr	r2, [pc, #76]	; (8008bac <TIM_OC5_SetConfig+0xc4>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d109      	bne.n	8008b76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	021b      	lsls	r3, r3, #8
 8008b70:	697a      	ldr	r2, [r7, #20]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	697a      	ldr	r2, [r7, #20]
 8008b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	685a      	ldr	r2, [r3, #4]
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	693a      	ldr	r2, [r7, #16]
 8008b8e:	621a      	str	r2, [r3, #32]
}
 8008b90:	bf00      	nop
 8008b92:	371c      	adds	r7, #28
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr
 8008b9c:	40012c00 	.word	0x40012c00
 8008ba0:	40013400 	.word	0x40013400
 8008ba4:	40014000 	.word	0x40014000
 8008ba8:	40014400 	.word	0x40014400
 8008bac:	40014800 	.word	0x40014800

08008bb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b087      	sub	sp, #28
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
 8008bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6a1b      	ldr	r3, [r3, #32]
 8008bbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a1b      	ldr	r3, [r3, #32]
 8008bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be4:	683b      	ldr	r3, [r7, #0]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	021b      	lsls	r3, r3, #8
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	4313      	orrs	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	051b      	lsls	r3, r3, #20
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	4a18      	ldr	r2, [pc, #96]	; (8008c68 <TIM_OC6_SetConfig+0xb8>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d00f      	beq.n	8008c2c <TIM_OC6_SetConfig+0x7c>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a17      	ldr	r2, [pc, #92]	; (8008c6c <TIM_OC6_SetConfig+0xbc>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d00b      	beq.n	8008c2c <TIM_OC6_SetConfig+0x7c>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a16      	ldr	r2, [pc, #88]	; (8008c70 <TIM_OC6_SetConfig+0xc0>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d007      	beq.n	8008c2c <TIM_OC6_SetConfig+0x7c>
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a15      	ldr	r2, [pc, #84]	; (8008c74 <TIM_OC6_SetConfig+0xc4>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d003      	beq.n	8008c2c <TIM_OC6_SetConfig+0x7c>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	4a14      	ldr	r2, [pc, #80]	; (8008c78 <TIM_OC6_SetConfig+0xc8>)
 8008c28:	4293      	cmp	r3, r2
 8008c2a:	d109      	bne.n	8008c40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	029b      	lsls	r3, r3, #10
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008c4c:	683b      	ldr	r3, [r7, #0]
 8008c4e:	685a      	ldr	r2, [r3, #4]
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	621a      	str	r2, [r3, #32]
}
 8008c5a:	bf00      	nop
 8008c5c:	371c      	adds	r7, #28
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
 8008c66:	bf00      	nop
 8008c68:	40012c00 	.word	0x40012c00
 8008c6c:	40013400 	.word	0x40013400
 8008c70:	40014000 	.word	0x40014000
 8008c74:	40014400 	.word	0x40014400
 8008c78:	40014800 	.word	0x40014800

08008c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b087      	sub	sp, #28
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	6a1b      	ldr	r3, [r3, #32]
 8008c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6a1b      	ldr	r3, [r3, #32]
 8008c92:	f023 0201 	bic.w	r2, r3, #1
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	699b      	ldr	r3, [r3, #24]
 8008c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	011b      	lsls	r3, r3, #4
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	f023 030a 	bic.w	r3, r3, #10
 8008cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	697a      	ldr	r2, [r7, #20]
 8008ccc:	621a      	str	r2, [r3, #32]
}
 8008cce:	bf00      	nop
 8008cd0:	371c      	adds	r7, #28
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd8:	4770      	bx	lr

08008cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cda:	b480      	push	{r7}
 8008cdc:	b087      	sub	sp, #28
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	60f8      	str	r0, [r7, #12]
 8008ce2:	60b9      	str	r1, [r7, #8]
 8008ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6a1b      	ldr	r3, [r3, #32]
 8008cea:	f023 0210 	bic.w	r2, r3, #16
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	699b      	ldr	r3, [r3, #24]
 8008cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6a1b      	ldr	r3, [r3, #32]
 8008cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cfe:	697b      	ldr	r3, [r7, #20]
 8008d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	031b      	lsls	r3, r3, #12
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008d16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	011b      	lsls	r3, r3, #4
 8008d1c:	693a      	ldr	r2, [r7, #16]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	697a      	ldr	r2, [r7, #20]
 8008d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	621a      	str	r2, [r3, #32]
}
 8008d2e:	bf00      	nop
 8008d30:	371c      	adds	r7, #28
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr

08008d3a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	b085      	sub	sp, #20
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d56:	683a      	ldr	r2, [r7, #0]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	f043 0307 	orr.w	r3, r3, #7
 8008d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	68fa      	ldr	r2, [r7, #12]
 8008d66:	609a      	str	r2, [r3, #8]
}
 8008d68:	bf00      	nop
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
 8008d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	021a      	lsls	r2, r3, #8
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	431a      	orrs	r2, r3
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	697a      	ldr	r2, [r7, #20]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	697a      	ldr	r2, [r7, #20]
 8008da6:	609a      	str	r2, [r3, #8]
}
 8008da8:	bf00      	nop
 8008daa:	371c      	adds	r7, #28
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b087      	sub	sp, #28
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f003 031f 	and.w	r3, r3, #31
 8008dc6:	2201      	movs	r2, #1
 8008dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8008dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	6a1a      	ldr	r2, [r3, #32]
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	43db      	mvns	r3, r3
 8008dd6:	401a      	ands	r2, r3
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	6a1a      	ldr	r2, [r3, #32]
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	f003 031f 	and.w	r3, r3, #31
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	fa01 f303 	lsl.w	r3, r1, r3
 8008dec:	431a      	orrs	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	621a      	str	r2, [r3, #32]
}
 8008df2:	bf00      	nop
 8008df4:	371c      	adds	r7, #28
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr
	...

08008e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b085      	sub	sp, #20
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d101      	bne.n	8008e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008e14:	2302      	movs	r3, #2
 8008e16:	e065      	b.n	8008ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2202      	movs	r2, #2
 8008e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	689b      	ldr	r3, [r3, #8]
 8008e36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a2c      	ldr	r2, [pc, #176]	; (8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d004      	beq.n	8008e4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a2b      	ldr	r2, [pc, #172]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d108      	bne.n	8008e5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008e52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008e54:	683b      	ldr	r3, [r7, #0]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	68fa      	ldr	r2, [r7, #12]
 8008e7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a1b      	ldr	r2, [pc, #108]	; (8008ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d018      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e8e:	d013      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a18      	ldr	r2, [pc, #96]	; (8008ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d00e      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a17      	ldr	r2, [pc, #92]	; (8008efc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d009      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a12      	ldr	r2, [pc, #72]	; (8008ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d004      	beq.n	8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	4a13      	ldr	r2, [pc, #76]	; (8008f00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d10c      	bne.n	8008ed2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	689b      	ldr	r3, [r3, #8]
 8008ec4:	68ba      	ldr	r2, [r7, #8]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2200      	movs	r2, #0
 8008ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ee2:	2300      	movs	r3, #0
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr
 8008ef0:	40012c00 	.word	0x40012c00
 8008ef4:	40013400 	.word	0x40013400
 8008ef8:	40000400 	.word	0x40000400
 8008efc:	40000800 	.word	0x40000800
 8008f00:	40014000 	.word	0x40014000

08008f04 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b085      	sub	sp, #20
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
 8008f0c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008f0e:	2300      	movs	r3, #0
 8008f10:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f18:	2b01      	cmp	r3, #1
 8008f1a:	d101      	bne.n	8008f20 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008f1c:	2302      	movs	r3, #2
 8008f1e:	e087      	b.n	8009030 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2201      	movs	r2, #1
 8008f24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	68db      	ldr	r3, [r3, #12]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	689b      	ldr	r3, [r3, #8]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	4313      	orrs	r3, r2
 8008f50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	691b      	ldr	r3, [r3, #16]
 8008f6a:	4313      	orrs	r3, r2
 8008f6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f86:	4313      	orrs	r3, r2
 8008f88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	041b      	lsls	r3, r3, #16
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a27      	ldr	r2, [pc, #156]	; (800903c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d004      	beq.n	8008fae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	4a25      	ldr	r2, [pc, #148]	; (8009040 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d106      	bne.n	8008fbc <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a1e      	ldr	r2, [pc, #120]	; (800903c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d004      	beq.n	8008fd0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a1d      	ldr	r2, [pc, #116]	; (8009040 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d126      	bne.n	800901e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fda:	051b      	lsls	r3, r3, #20
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff8:	4313      	orrs	r3, r2
 8008ffa:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a0e      	ldr	r2, [pc, #56]	; (800903c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d004      	beq.n	8009010 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a0d      	ldr	r2, [pc, #52]	; (8009040 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d106      	bne.n	800901e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800901a:	4313      	orrs	r3, r2
 800901c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2200      	movs	r2, #0
 800902a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800902e:	2300      	movs	r3, #0
}
 8009030:	4618      	mov	r0, r3
 8009032:	3714      	adds	r7, #20
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr
 800903c:	40012c00 	.word	0x40012c00
 8009040:	40013400 	.word	0x40013400

08009044 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009080:	b480      	push	{r7}
 8009082:	b083      	sub	sp, #12
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009088:	bf00      	nop
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009094:	b480      	push	{r7}
 8009096:	b083      	sub	sp, #12
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800909c:	bf00      	nop
 800909e:	370c      	adds	r7, #12
 80090a0:	46bd      	mov	sp, r7
 80090a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a6:	4770      	bx	lr

080090a8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80090b0:	bf00      	nop
 80090b2:	370c      	adds	r7, #12
 80090b4:	46bd      	mov	sp, r7
 80090b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ba:	4770      	bx	lr

080090bc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80090bc:	b480      	push	{r7}
 80090be:	b083      	sub	sp, #12
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80090c4:	bf00      	nop
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e042      	b.n	8009168 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d106      	bne.n	80090fa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2200      	movs	r2, #0
 80090f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f7fa f8ed 	bl	80032d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2224      	movs	r2, #36	; 0x24
 80090fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f022 0201 	bic.w	r2, r2, #1
 8009110:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fc02 	bl	800991c <UART_SetConfig>
 8009118:	4603      	mov	r3, r0
 800911a:	2b01      	cmp	r3, #1
 800911c:	d101      	bne.n	8009122 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e022      	b.n	8009168 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009126:	2b00      	cmp	r3, #0
 8009128:	d002      	beq.n	8009130 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 fec2 	bl	8009eb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	685a      	ldr	r2, [r3, #4]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800913e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	689a      	ldr	r2, [r3, #8]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800914e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f042 0201 	orr.w	r2, r2, #1
 800915e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f000 ff49 	bl	8009ff8 <UART_CheckIdleState>
 8009166:	4603      	mov	r3, r0
}
 8009168:	4618      	mov	r0, r3
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009170:	b480      	push	{r7}
 8009172:	b091      	sub	sp, #68	; 0x44
 8009174:	af00      	add	r7, sp, #0
 8009176:	60f8      	str	r0, [r7, #12]
 8009178:	60b9      	str	r1, [r7, #8]
 800917a:	4613      	mov	r3, r2
 800917c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009184:	2b20      	cmp	r3, #32
 8009186:	f040 808c 	bne.w	80092a2 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2b00      	cmp	r3, #0
 800918e:	d002      	beq.n	8009196 <HAL_UART_Transmit_IT+0x26>
 8009190:	88fb      	ldrh	r3, [r7, #6]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d101      	bne.n	800919a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8009196:	2301      	movs	r3, #1
 8009198:	e084      	b.n	80092a4 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d101      	bne.n	80091a8 <HAL_UART_Transmit_IT+0x38>
 80091a4:	2302      	movs	r3, #2
 80091a6:	e07d      	b.n	80092a4 <HAL_UART_Transmit_IT+0x134>
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	2201      	movs	r2, #1
 80091ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	68ba      	ldr	r2, [r7, #8]
 80091b4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	88fa      	ldrh	r2, [r7, #6]
 80091ba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	88fa      	ldrh	r2, [r7, #6]
 80091c2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2200      	movs	r2, #0
 80091ca:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2221      	movs	r2, #33	; 0x21
 80091d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80091e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091e4:	d12e      	bne.n	8009244 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091ee:	d107      	bne.n	8009200 <HAL_UART_Transmit_IT+0x90>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d103      	bne.n	8009200 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4a2d      	ldr	r2, [pc, #180]	; (80092b0 <HAL_UART_Transmit_IT+0x140>)
 80091fc:	675a      	str	r2, [r3, #116]	; 0x74
 80091fe:	e002      	b.n	8009206 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	4a2c      	ldr	r2, [pc, #176]	; (80092b4 <HAL_UART_Transmit_IT+0x144>)
 8009204:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	3308      	adds	r3, #8
 8009214:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	e853 3f00 	ldrex	r3, [r3]
 800921c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800921e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009220:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009224:	63bb      	str	r3, [r7, #56]	; 0x38
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3308      	adds	r3, #8
 800922c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800922e:	637a      	str	r2, [r7, #52]	; 0x34
 8009230:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009232:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009234:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923e:	2b00      	cmp	r3, #0
 8009240:	d1e5      	bne.n	800920e <HAL_UART_Transmit_IT+0x9e>
 8009242:	e02c      	b.n	800929e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800924c:	d107      	bne.n	800925e <HAL_UART_Transmit_IT+0xee>
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	691b      	ldr	r3, [r3, #16]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d103      	bne.n	800925e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	4a17      	ldr	r2, [pc, #92]	; (80092b8 <HAL_UART_Transmit_IT+0x148>)
 800925a:	675a      	str	r2, [r3, #116]	; 0x74
 800925c:	e002      	b.n	8009264 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	4a16      	ldr	r2, [pc, #88]	; (80092bc <HAL_UART_Transmit_IT+0x14c>)
 8009262:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	2200      	movs	r2, #0
 8009268:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	e853 3f00 	ldrex	r3, [r3]
 8009278:	613b      	str	r3, [r7, #16]
   return(result);
 800927a:	693b      	ldr	r3, [r7, #16]
 800927c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009280:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800928a:	623b      	str	r3, [r7, #32]
 800928c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928e:	69f9      	ldr	r1, [r7, #28]
 8009290:	6a3a      	ldr	r2, [r7, #32]
 8009292:	e841 2300 	strex	r3, r2, [r1]
 8009296:	61bb      	str	r3, [r7, #24]
   return(result);
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1e6      	bne.n	800926c <HAL_UART_Transmit_IT+0xfc>
    }

    return HAL_OK;
 800929e:	2300      	movs	r3, #0
 80092a0:	e000      	b.n	80092a4 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 80092a2:	2302      	movs	r3, #2
  }
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3744      	adds	r7, #68	; 0x44
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	0800a571 	.word	0x0800a571
 80092b4:	0800a491 	.word	0x0800a491
 80092b8:	0800a3cf 	.word	0x0800a3cf
 80092bc:	0800a317 	.word	0x0800a317

080092c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b0ba      	sub	sp, #232	; 0xe8
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	69db      	ldr	r3, [r3, #28]
 80092ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80092e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80092ea:	f640 030f 	movw	r3, #2063	; 0x80f
 80092ee:	4013      	ands	r3, r2
 80092f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80092f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d11b      	bne.n	8009334 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80092fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009300:	f003 0320 	and.w	r3, r3, #32
 8009304:	2b00      	cmp	r3, #0
 8009306:	d015      	beq.n	8009334 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800930c:	f003 0320 	and.w	r3, r3, #32
 8009310:	2b00      	cmp	r3, #0
 8009312:	d105      	bne.n	8009320 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009314:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009318:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d009      	beq.n	8009334 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009324:	2b00      	cmp	r3, #0
 8009326:	f000 82d6 	beq.w	80098d6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	4798      	blx	r3
      }
      return;
 8009332:	e2d0      	b.n	80098d6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009334:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009338:	2b00      	cmp	r3, #0
 800933a:	f000 811f 	beq.w	800957c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800933e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009342:	4b8b      	ldr	r3, [pc, #556]	; (8009570 <HAL_UART_IRQHandler+0x2b0>)
 8009344:	4013      	ands	r3, r2
 8009346:	2b00      	cmp	r3, #0
 8009348:	d106      	bne.n	8009358 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800934a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800934e:	4b89      	ldr	r3, [pc, #548]	; (8009574 <HAL_UART_IRQHandler+0x2b4>)
 8009350:	4013      	ands	r3, r2
 8009352:	2b00      	cmp	r3, #0
 8009354:	f000 8112 	beq.w	800957c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800935c:	f003 0301 	and.w	r3, r3, #1
 8009360:	2b00      	cmp	r3, #0
 8009362:	d011      	beq.n	8009388 <HAL_UART_IRQHandler+0xc8>
 8009364:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800936c:	2b00      	cmp	r3, #0
 800936e:	d00b      	beq.n	8009388 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2201      	movs	r2, #1
 8009376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800937e:	f043 0201 	orr.w	r2, r3, #1
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800938c:	f003 0302 	and.w	r3, r3, #2
 8009390:	2b00      	cmp	r3, #0
 8009392:	d011      	beq.n	80093b8 <HAL_UART_IRQHandler+0xf8>
 8009394:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009398:	f003 0301 	and.w	r3, r3, #1
 800939c:	2b00      	cmp	r3, #0
 800939e:	d00b      	beq.n	80093b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	2202      	movs	r2, #2
 80093a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093ae:	f043 0204 	orr.w	r2, r3, #4
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093bc:	f003 0304 	and.w	r3, r3, #4
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d011      	beq.n	80093e8 <HAL_UART_IRQHandler+0x128>
 80093c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80093c8:	f003 0301 	and.w	r3, r3, #1
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00b      	beq.n	80093e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	2204      	movs	r2, #4
 80093d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093de:	f043 0202 	orr.w	r2, r3, #2
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80093e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ec:	f003 0308 	and.w	r3, r3, #8
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d017      	beq.n	8009424 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80093f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093f8:	f003 0320 	and.w	r3, r3, #32
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d105      	bne.n	800940c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009400:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009404:	4b5a      	ldr	r3, [pc, #360]	; (8009570 <HAL_UART_IRQHandler+0x2b0>)
 8009406:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00b      	beq.n	8009424 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	2208      	movs	r2, #8
 8009412:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800941a:	f043 0208 	orr.w	r2, r3, #8
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800942c:	2b00      	cmp	r3, #0
 800942e:	d012      	beq.n	8009456 <HAL_UART_IRQHandler+0x196>
 8009430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00c      	beq.n	8009456 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009444:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800944c:	f043 0220 	orr.w	r2, r3, #32
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800945c:	2b00      	cmp	r3, #0
 800945e:	f000 823c 	beq.w	80098da <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009466:	f003 0320 	and.w	r3, r3, #32
 800946a:	2b00      	cmp	r3, #0
 800946c:	d013      	beq.n	8009496 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800946e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b00      	cmp	r3, #0
 8009478:	d105      	bne.n	8009486 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800947a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800947e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d007      	beq.n	8009496 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800948a:	2b00      	cmp	r3, #0
 800948c:	d003      	beq.n	8009496 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009492:	6878      	ldr	r0, [r7, #4]
 8009494:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800949c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d005      	beq.n	80094ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80094ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80094b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d04f      	beq.n	800955a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 feaf 	bl	800a21e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094ca:	2b40      	cmp	r3, #64	; 0x40
 80094cc:	d141      	bne.n	8009552 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	3308      	adds	r3, #8
 80094d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80094dc:	e853 3f00 	ldrex	r3, [r3]
 80094e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80094e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	3308      	adds	r3, #8
 80094f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80094fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80094fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009506:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800950a:	e841 2300 	strex	r3, r2, [r1]
 800950e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009512:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1d9      	bne.n	80094ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d013      	beq.n	800954a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009526:	4a14      	ldr	r2, [pc, #80]	; (8009578 <HAL_UART_IRQHandler+0x2b8>)
 8009528:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800952e:	4618      	mov	r0, r3
 8009530:	f7fc fc4a 	bl	8005dc8 <HAL_DMA_Abort_IT>
 8009534:	4603      	mov	r3, r0
 8009536:	2b00      	cmp	r3, #0
 8009538:	d017      	beq.n	800956a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800953e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009544:	4610      	mov	r0, r2
 8009546:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009548:	e00f      	b.n	800956a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 f9d0 	bl	80098f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009550:	e00b      	b.n	800956a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f9cc 	bl	80098f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009558:	e007      	b.n	800956a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f000 f9c8 	bl	80098f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009568:	e1b7      	b.n	80098da <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800956a:	bf00      	nop
    return;
 800956c:	e1b5      	b.n	80098da <HAL_UART_IRQHandler+0x61a>
 800956e:	bf00      	nop
 8009570:	10000001 	.word	0x10000001
 8009574:	04000120 	.word	0x04000120
 8009578:	0800a2eb 	.word	0x0800a2eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009580:	2b01      	cmp	r3, #1
 8009582:	f040 814a 	bne.w	800981a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800958a:	f003 0310 	and.w	r3, r3, #16
 800958e:	2b00      	cmp	r3, #0
 8009590:	f000 8143 	beq.w	800981a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009598:	f003 0310 	and.w	r3, r3, #16
 800959c:	2b00      	cmp	r3, #0
 800959e:	f000 813c 	beq.w	800981a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2210      	movs	r2, #16
 80095a8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095b4:	2b40      	cmp	r3, #64	; 0x40
 80095b6:	f040 80b5 	bne.w	8009724 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	685b      	ldr	r3, [r3, #4]
 80095c2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80095c6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	f000 8187 	beq.w	80098de <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80095d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095da:	429a      	cmp	r2, r3
 80095dc:	f080 817f 	bcs.w	80098de <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80095e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	f040 8086 	bne.w	8009708 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009604:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009608:	e853 3f00 	ldrex	r3, [r3]
 800960c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009610:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009614:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009618:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	461a      	mov	r2, r3
 8009622:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009626:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800962a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800962e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009632:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009636:	e841 2300 	strex	r3, r2, [r1]
 800963a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800963e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009642:	2b00      	cmp	r3, #0
 8009644:	d1da      	bne.n	80095fc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	3308      	adds	r3, #8
 800964c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800964e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009650:	e853 3f00 	ldrex	r3, [r3]
 8009654:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009658:	f023 0301 	bic.w	r3, r3, #1
 800965c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3308      	adds	r3, #8
 8009666:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800966a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800966e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009670:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009672:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009676:	e841 2300 	strex	r3, r2, [r1]
 800967a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800967c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1e1      	bne.n	8009646 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	3308      	adds	r3, #8
 8009688:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800968c:	e853 3f00 	ldrex	r3, [r3]
 8009690:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009692:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009698:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3308      	adds	r3, #8
 80096a2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80096a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80096a8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096aa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80096ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80096ae:	e841 2300 	strex	r3, r2, [r1]
 80096b2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80096b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d1e3      	bne.n	8009682 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2220      	movs	r2, #32
 80096be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2200      	movs	r2, #0
 80096c6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096d0:	e853 3f00 	ldrex	r3, [r3]
 80096d4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80096d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096d8:	f023 0310 	bic.w	r3, r3, #16
 80096dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	461a      	mov	r2, r3
 80096e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80096ea:	65bb      	str	r3, [r7, #88]	; 0x58
 80096ec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80096f0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80096f2:	e841 2300 	strex	r3, r2, [r1]
 80096f6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80096f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1e4      	bne.n	80096c8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009702:	4618      	mov	r0, r3
 8009704:	f7fc fb07 	bl	8005d16 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009714:	b29b      	uxth	r3, r3
 8009716:	1ad3      	subs	r3, r2, r3
 8009718:	b29b      	uxth	r3, r3
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 f8f1 	bl	8009904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009722:	e0dc      	b.n	80098de <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009730:	b29b      	uxth	r3, r3
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800973e:	b29b      	uxth	r3, r3
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 80ce 	beq.w	80098e2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8009746:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800974a:	2b00      	cmp	r3, #0
 800974c:	f000 80c9 	beq.w	80098e2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800975e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009760:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009772:	647b      	str	r3, [r7, #68]	; 0x44
 8009774:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009776:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009778:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800977a:	e841 2300 	strex	r3, r2, [r1]
 800977e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009782:	2b00      	cmp	r3, #0
 8009784:	d1e4      	bne.n	8009750 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	3308      	adds	r3, #8
 800978c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009790:	e853 3f00 	ldrex	r3, [r3]
 8009794:	623b      	str	r3, [r7, #32]
   return(result);
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800979c:	f023 0301 	bic.w	r3, r3, #1
 80097a0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3308      	adds	r3, #8
 80097aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80097ae:	633a      	str	r2, [r7, #48]	; 0x30
 80097b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097b6:	e841 2300 	strex	r3, r2, [r1]
 80097ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80097bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d1e1      	bne.n	8009786 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2220      	movs	r2, #32
 80097c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2200      	movs	r2, #0
 80097ce:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2200      	movs	r2, #0
 80097d4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	e853 3f00 	ldrex	r3, [r3]
 80097e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 0310 	bic.w	r3, r3, #16
 80097ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	461a      	mov	r2, r3
 80097f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80097f8:	61fb      	str	r3, [r7, #28]
 80097fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fc:	69b9      	ldr	r1, [r7, #24]
 80097fe:	69fa      	ldr	r2, [r7, #28]
 8009800:	e841 2300 	strex	r3, r2, [r1]
 8009804:	617b      	str	r3, [r7, #20]
   return(result);
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d1e4      	bne.n	80097d6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800980c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009810:	4619      	mov	r1, r3
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 f876 	bl	8009904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009818:	e063      	b.n	80098e2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800981a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800981e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00e      	beq.n	8009844 <HAL_UART_IRQHandler+0x584>
 8009826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800982a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800982e:	2b00      	cmp	r3, #0
 8009830:	d008      	beq.n	8009844 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800983a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 ff37 	bl	800a6b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009842:	e051      	b.n	80098e8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009844:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800984c:	2b00      	cmp	r3, #0
 800984e:	d014      	beq.n	800987a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009858:	2b00      	cmp	r3, #0
 800985a:	d105      	bne.n	8009868 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800985c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009860:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009864:	2b00      	cmp	r3, #0
 8009866:	d008      	beq.n	800987a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800986c:	2b00      	cmp	r3, #0
 800986e:	d03a      	beq.n	80098e6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	4798      	blx	r3
    }
    return;
 8009878:	e035      	b.n	80098e6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800987a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800987e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009882:	2b00      	cmp	r3, #0
 8009884:	d009      	beq.n	800989a <HAL_UART_IRQHandler+0x5da>
 8009886:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800988a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800988e:	2b00      	cmp	r3, #0
 8009890:	d003      	beq.n	800989a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f000 fee1 	bl	800a65a <UART_EndTransmit_IT>
    return;
 8009898:	e026      	b.n	80098e8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800989a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800989e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d009      	beq.n	80098ba <HAL_UART_IRQHandler+0x5fa>
 80098a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098aa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d003      	beq.n	80098ba <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80098b2:	6878      	ldr	r0, [r7, #4]
 80098b4:	f000 ff10 	bl	800a6d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098b8:	e016      	b.n	80098e8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80098ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d010      	beq.n	80098e8 <HAL_UART_IRQHandler+0x628>
 80098c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	da0c      	bge.n	80098e8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fef8 	bl	800a6c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80098d4:	e008      	b.n	80098e8 <HAL_UART_IRQHandler+0x628>
      return;
 80098d6:	bf00      	nop
 80098d8:	e006      	b.n	80098e8 <HAL_UART_IRQHandler+0x628>
    return;
 80098da:	bf00      	nop
 80098dc:	e004      	b.n	80098e8 <HAL_UART_IRQHandler+0x628>
      return;
 80098de:	bf00      	nop
 80098e0:	e002      	b.n	80098e8 <HAL_UART_IRQHandler+0x628>
      return;
 80098e2:	bf00      	nop
 80098e4:	e000      	b.n	80098e8 <HAL_UART_IRQHandler+0x628>
    return;
 80098e6:	bf00      	nop
  }
}
 80098e8:	37e8      	adds	r7, #232	; 0xe8
 80098ea:	46bd      	mov	sp, r7
 80098ec:	bd80      	pop	{r7, pc}
 80098ee:	bf00      	nop

080098f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80098f0:	b480      	push	{r7}
 80098f2:	b083      	sub	sp, #12
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80098f8:	bf00      	nop
 80098fa:	370c      	adds	r7, #12
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009904:	b480      	push	{r7}
 8009906:	b083      	sub	sp, #12
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009910:	bf00      	nop
 8009912:	370c      	adds	r7, #12
 8009914:	46bd      	mov	sp, r7
 8009916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991a:	4770      	bx	lr

0800991c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800991c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009920:	b08c      	sub	sp, #48	; 0x30
 8009922:	af00      	add	r7, sp, #0
 8009924:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009926:	2300      	movs	r3, #0
 8009928:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	689a      	ldr	r2, [r3, #8]
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	691b      	ldr	r3, [r3, #16]
 8009934:	431a      	orrs	r2, r3
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	431a      	orrs	r2, r3
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	4313      	orrs	r3, r2
 8009942:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	681a      	ldr	r2, [r3, #0]
 800994a:	4bab      	ldr	r3, [pc, #684]	; (8009bf8 <UART_SetConfig+0x2dc>)
 800994c:	4013      	ands	r3, r2
 800994e:	697a      	ldr	r2, [r7, #20]
 8009950:	6812      	ldr	r2, [r2, #0]
 8009952:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009954:	430b      	orrs	r3, r1
 8009956:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	68da      	ldr	r2, [r3, #12]
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	430a      	orrs	r2, r1
 800996c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	699b      	ldr	r3, [r3, #24]
 8009972:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4aa0      	ldr	r2, [pc, #640]	; (8009bfc <UART_SetConfig+0x2e0>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d004      	beq.n	8009988 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	6a1b      	ldr	r3, [r3, #32]
 8009982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009984:	4313      	orrs	r3, r2
 8009986:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009992:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009996:	697a      	ldr	r2, [r7, #20]
 8009998:	6812      	ldr	r2, [r2, #0]
 800999a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800999c:	430b      	orrs	r3, r1
 800999e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a6:	f023 010f 	bic.w	r1, r3, #15
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	430a      	orrs	r2, r1
 80099b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a91      	ldr	r2, [pc, #580]	; (8009c00 <UART_SetConfig+0x2e4>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d125      	bne.n	8009a0c <UART_SetConfig+0xf0>
 80099c0:	4b90      	ldr	r3, [pc, #576]	; (8009c04 <UART_SetConfig+0x2e8>)
 80099c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c6:	f003 0303 	and.w	r3, r3, #3
 80099ca:	2b03      	cmp	r3, #3
 80099cc:	d81a      	bhi.n	8009a04 <UART_SetConfig+0xe8>
 80099ce:	a201      	add	r2, pc, #4	; (adr r2, 80099d4 <UART_SetConfig+0xb8>)
 80099d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099d4:	080099e5 	.word	0x080099e5
 80099d8:	080099f5 	.word	0x080099f5
 80099dc:	080099ed 	.word	0x080099ed
 80099e0:	080099fd 	.word	0x080099fd
 80099e4:	2301      	movs	r3, #1
 80099e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099ea:	e0d6      	b.n	8009b9a <UART_SetConfig+0x27e>
 80099ec:	2302      	movs	r3, #2
 80099ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099f2:	e0d2      	b.n	8009b9a <UART_SetConfig+0x27e>
 80099f4:	2304      	movs	r3, #4
 80099f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80099fa:	e0ce      	b.n	8009b9a <UART_SetConfig+0x27e>
 80099fc:	2308      	movs	r3, #8
 80099fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a02:	e0ca      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009a04:	2310      	movs	r3, #16
 8009a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a0a:	e0c6      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a7d      	ldr	r2, [pc, #500]	; (8009c08 <UART_SetConfig+0x2ec>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d138      	bne.n	8009a88 <UART_SetConfig+0x16c>
 8009a16:	4b7b      	ldr	r3, [pc, #492]	; (8009c04 <UART_SetConfig+0x2e8>)
 8009a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a1c:	f003 030c 	and.w	r3, r3, #12
 8009a20:	2b0c      	cmp	r3, #12
 8009a22:	d82d      	bhi.n	8009a80 <UART_SetConfig+0x164>
 8009a24:	a201      	add	r2, pc, #4	; (adr r2, 8009a2c <UART_SetConfig+0x110>)
 8009a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a2a:	bf00      	nop
 8009a2c:	08009a61 	.word	0x08009a61
 8009a30:	08009a81 	.word	0x08009a81
 8009a34:	08009a81 	.word	0x08009a81
 8009a38:	08009a81 	.word	0x08009a81
 8009a3c:	08009a71 	.word	0x08009a71
 8009a40:	08009a81 	.word	0x08009a81
 8009a44:	08009a81 	.word	0x08009a81
 8009a48:	08009a81 	.word	0x08009a81
 8009a4c:	08009a69 	.word	0x08009a69
 8009a50:	08009a81 	.word	0x08009a81
 8009a54:	08009a81 	.word	0x08009a81
 8009a58:	08009a81 	.word	0x08009a81
 8009a5c:	08009a79 	.word	0x08009a79
 8009a60:	2300      	movs	r3, #0
 8009a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a66:	e098      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009a68:	2302      	movs	r3, #2
 8009a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a6e:	e094      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009a70:	2304      	movs	r3, #4
 8009a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a76:	e090      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009a78:	2308      	movs	r3, #8
 8009a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a7e:	e08c      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009a80:	2310      	movs	r3, #16
 8009a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009a86:	e088      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a5f      	ldr	r2, [pc, #380]	; (8009c0c <UART_SetConfig+0x2f0>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d125      	bne.n	8009ade <UART_SetConfig+0x1c2>
 8009a92:	4b5c      	ldr	r3, [pc, #368]	; (8009c04 <UART_SetConfig+0x2e8>)
 8009a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a98:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009a9c:	2b30      	cmp	r3, #48	; 0x30
 8009a9e:	d016      	beq.n	8009ace <UART_SetConfig+0x1b2>
 8009aa0:	2b30      	cmp	r3, #48	; 0x30
 8009aa2:	d818      	bhi.n	8009ad6 <UART_SetConfig+0x1ba>
 8009aa4:	2b20      	cmp	r3, #32
 8009aa6:	d00a      	beq.n	8009abe <UART_SetConfig+0x1a2>
 8009aa8:	2b20      	cmp	r3, #32
 8009aaa:	d814      	bhi.n	8009ad6 <UART_SetConfig+0x1ba>
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d002      	beq.n	8009ab6 <UART_SetConfig+0x19a>
 8009ab0:	2b10      	cmp	r3, #16
 8009ab2:	d008      	beq.n	8009ac6 <UART_SetConfig+0x1aa>
 8009ab4:	e00f      	b.n	8009ad6 <UART_SetConfig+0x1ba>
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009abc:	e06d      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009abe:	2302      	movs	r3, #2
 8009ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ac4:	e069      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009ac6:	2304      	movs	r3, #4
 8009ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009acc:	e065      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009ace:	2308      	movs	r3, #8
 8009ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ad4:	e061      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009ad6:	2310      	movs	r3, #16
 8009ad8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009adc:	e05d      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	4a4b      	ldr	r2, [pc, #300]	; (8009c10 <UART_SetConfig+0x2f4>)
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d125      	bne.n	8009b34 <UART_SetConfig+0x218>
 8009ae8:	4b46      	ldr	r3, [pc, #280]	; (8009c04 <UART_SetConfig+0x2e8>)
 8009aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009aee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009af2:	2bc0      	cmp	r3, #192	; 0xc0
 8009af4:	d016      	beq.n	8009b24 <UART_SetConfig+0x208>
 8009af6:	2bc0      	cmp	r3, #192	; 0xc0
 8009af8:	d818      	bhi.n	8009b2c <UART_SetConfig+0x210>
 8009afa:	2b80      	cmp	r3, #128	; 0x80
 8009afc:	d00a      	beq.n	8009b14 <UART_SetConfig+0x1f8>
 8009afe:	2b80      	cmp	r3, #128	; 0x80
 8009b00:	d814      	bhi.n	8009b2c <UART_SetConfig+0x210>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d002      	beq.n	8009b0c <UART_SetConfig+0x1f0>
 8009b06:	2b40      	cmp	r3, #64	; 0x40
 8009b08:	d008      	beq.n	8009b1c <UART_SetConfig+0x200>
 8009b0a:	e00f      	b.n	8009b2c <UART_SetConfig+0x210>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b12:	e042      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009b14:	2302      	movs	r3, #2
 8009b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b1a:	e03e      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009b1c:	2304      	movs	r3, #4
 8009b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b22:	e03a      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009b24:	2308      	movs	r3, #8
 8009b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b2a:	e036      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009b2c:	2310      	movs	r3, #16
 8009b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b32:	e032      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	4a30      	ldr	r2, [pc, #192]	; (8009bfc <UART_SetConfig+0x2e0>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d12a      	bne.n	8009b94 <UART_SetConfig+0x278>
 8009b3e:	4b31      	ldr	r3, [pc, #196]	; (8009c04 <UART_SetConfig+0x2e8>)
 8009b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009b48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b4c:	d01a      	beq.n	8009b84 <UART_SetConfig+0x268>
 8009b4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009b52:	d81b      	bhi.n	8009b8c <UART_SetConfig+0x270>
 8009b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b58:	d00c      	beq.n	8009b74 <UART_SetConfig+0x258>
 8009b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009b5e:	d815      	bhi.n	8009b8c <UART_SetConfig+0x270>
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <UART_SetConfig+0x250>
 8009b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b68:	d008      	beq.n	8009b7c <UART_SetConfig+0x260>
 8009b6a:	e00f      	b.n	8009b8c <UART_SetConfig+0x270>
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b72:	e012      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009b74:	2302      	movs	r3, #2
 8009b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b7a:	e00e      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009b7c:	2304      	movs	r3, #4
 8009b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b82:	e00a      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009b84:	2308      	movs	r3, #8
 8009b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b8a:	e006      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009b92:	e002      	b.n	8009b9a <UART_SetConfig+0x27e>
 8009b94:	2310      	movs	r3, #16
 8009b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a17      	ldr	r2, [pc, #92]	; (8009bfc <UART_SetConfig+0x2e0>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	f040 80a8 	bne.w	8009cf6 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ba6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009baa:	2b08      	cmp	r3, #8
 8009bac:	d834      	bhi.n	8009c18 <UART_SetConfig+0x2fc>
 8009bae:	a201      	add	r2, pc, #4	; (adr r2, 8009bb4 <UART_SetConfig+0x298>)
 8009bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb4:	08009bd9 	.word	0x08009bd9
 8009bb8:	08009c19 	.word	0x08009c19
 8009bbc:	08009be1 	.word	0x08009be1
 8009bc0:	08009c19 	.word	0x08009c19
 8009bc4:	08009be7 	.word	0x08009be7
 8009bc8:	08009c19 	.word	0x08009c19
 8009bcc:	08009c19 	.word	0x08009c19
 8009bd0:	08009c19 	.word	0x08009c19
 8009bd4:	08009bef 	.word	0x08009bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bd8:	f7fd fafa 	bl	80071d0 <HAL_RCC_GetPCLK1Freq>
 8009bdc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bde:	e021      	b.n	8009c24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009be0:	4b0c      	ldr	r3, [pc, #48]	; (8009c14 <UART_SetConfig+0x2f8>)
 8009be2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009be4:	e01e      	b.n	8009c24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009be6:	f7fd fa85 	bl	80070f4 <HAL_RCC_GetSysClockFreq>
 8009bea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009bec:	e01a      	b.n	8009c24 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bf2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009bf4:	e016      	b.n	8009c24 <UART_SetConfig+0x308>
 8009bf6:	bf00      	nop
 8009bf8:	cfff69f3 	.word	0xcfff69f3
 8009bfc:	40008000 	.word	0x40008000
 8009c00:	40013800 	.word	0x40013800
 8009c04:	40021000 	.word	0x40021000
 8009c08:	40004400 	.word	0x40004400
 8009c0c:	40004800 	.word	0x40004800
 8009c10:	40004c00 	.word	0x40004c00
 8009c14:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009c18:	2300      	movs	r3, #0
 8009c1a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009c22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	f000 812a 	beq.w	8009e80 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009c2c:	697b      	ldr	r3, [r7, #20]
 8009c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c30:	4a9e      	ldr	r2, [pc, #632]	; (8009eac <UART_SetConfig+0x590>)
 8009c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c36:	461a      	mov	r2, r3
 8009c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c3e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	685a      	ldr	r2, [r3, #4]
 8009c44:	4613      	mov	r3, r2
 8009c46:	005b      	lsls	r3, r3, #1
 8009c48:	4413      	add	r3, r2
 8009c4a:	69ba      	ldr	r2, [r7, #24]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d305      	bcc.n	8009c5c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	685b      	ldr	r3, [r3, #4]
 8009c54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009c56:	69ba      	ldr	r2, [r7, #24]
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d903      	bls.n	8009c64 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009c62:	e10d      	b.n	8009e80 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c66:	2200      	movs	r2, #0
 8009c68:	60bb      	str	r3, [r7, #8]
 8009c6a:	60fa      	str	r2, [r7, #12]
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	4a8e      	ldr	r2, [pc, #568]	; (8009eac <UART_SetConfig+0x590>)
 8009c72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c76:	b29b      	uxth	r3, r3
 8009c78:	2200      	movs	r2, #0
 8009c7a:	603b      	str	r3, [r7, #0]
 8009c7c:	607a      	str	r2, [r7, #4]
 8009c7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009c86:	f7f7 f827 	bl	8000cd8 <__aeabi_uldivmod>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4610      	mov	r0, r2
 8009c90:	4619      	mov	r1, r3
 8009c92:	f04f 0200 	mov.w	r2, #0
 8009c96:	f04f 0300 	mov.w	r3, #0
 8009c9a:	020b      	lsls	r3, r1, #8
 8009c9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ca0:	0202      	lsls	r2, r0, #8
 8009ca2:	6979      	ldr	r1, [r7, #20]
 8009ca4:	6849      	ldr	r1, [r1, #4]
 8009ca6:	0849      	lsrs	r1, r1, #1
 8009ca8:	2000      	movs	r0, #0
 8009caa:	460c      	mov	r4, r1
 8009cac:	4605      	mov	r5, r0
 8009cae:	eb12 0804 	adds.w	r8, r2, r4
 8009cb2:	eb43 0905 	adc.w	r9, r3, r5
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	2200      	movs	r2, #0
 8009cbc:	469a      	mov	sl, r3
 8009cbe:	4693      	mov	fp, r2
 8009cc0:	4652      	mov	r2, sl
 8009cc2:	465b      	mov	r3, fp
 8009cc4:	4640      	mov	r0, r8
 8009cc6:	4649      	mov	r1, r9
 8009cc8:	f7f7 f806 	bl	8000cd8 <__aeabi_uldivmod>
 8009ccc:	4602      	mov	r2, r0
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cd4:	6a3b      	ldr	r3, [r7, #32]
 8009cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cda:	d308      	bcc.n	8009cee <UART_SetConfig+0x3d2>
 8009cdc:	6a3b      	ldr	r3, [r7, #32]
 8009cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce2:	d204      	bcs.n	8009cee <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	6a3a      	ldr	r2, [r7, #32]
 8009cea:	60da      	str	r2, [r3, #12]
 8009cec:	e0c8      	b.n	8009e80 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009cf4:	e0c4      	b.n	8009e80 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009cfe:	d167      	bne.n	8009dd0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009d00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d828      	bhi.n	8009d5a <UART_SetConfig+0x43e>
 8009d08:	a201      	add	r2, pc, #4	; (adr r2, 8009d10 <UART_SetConfig+0x3f4>)
 8009d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d0e:	bf00      	nop
 8009d10:	08009d35 	.word	0x08009d35
 8009d14:	08009d3d 	.word	0x08009d3d
 8009d18:	08009d45 	.word	0x08009d45
 8009d1c:	08009d5b 	.word	0x08009d5b
 8009d20:	08009d4b 	.word	0x08009d4b
 8009d24:	08009d5b 	.word	0x08009d5b
 8009d28:	08009d5b 	.word	0x08009d5b
 8009d2c:	08009d5b 	.word	0x08009d5b
 8009d30:	08009d53 	.word	0x08009d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d34:	f7fd fa4c 	bl	80071d0 <HAL_RCC_GetPCLK1Freq>
 8009d38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d3a:	e014      	b.n	8009d66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d3c:	f7fd fa5e 	bl	80071fc <HAL_RCC_GetPCLK2Freq>
 8009d40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d42:	e010      	b.n	8009d66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d44:	4b5a      	ldr	r3, [pc, #360]	; (8009eb0 <UART_SetConfig+0x594>)
 8009d46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d48:	e00d      	b.n	8009d66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d4a:	f7fd f9d3 	bl	80070f4 <HAL_RCC_GetSysClockFreq>
 8009d4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009d50:	e009      	b.n	8009d66 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009d58:	e005      	b.n	8009d66 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009d5e:	2301      	movs	r3, #1
 8009d60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009d64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	f000 8089 	beq.w	8009e80 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009d6e:	697b      	ldr	r3, [r7, #20]
 8009d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d72:	4a4e      	ldr	r2, [pc, #312]	; (8009eac <UART_SetConfig+0x590>)
 8009d74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009d78:	461a      	mov	r2, r3
 8009d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009d80:	005a      	lsls	r2, r3, #1
 8009d82:	697b      	ldr	r3, [r7, #20]
 8009d84:	685b      	ldr	r3, [r3, #4]
 8009d86:	085b      	lsrs	r3, r3, #1
 8009d88:	441a      	add	r2, r3
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d92:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	2b0f      	cmp	r3, #15
 8009d98:	d916      	bls.n	8009dc8 <UART_SetConfig+0x4ac>
 8009d9a:	6a3b      	ldr	r3, [r7, #32]
 8009d9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009da0:	d212      	bcs.n	8009dc8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009da2:	6a3b      	ldr	r3, [r7, #32]
 8009da4:	b29b      	uxth	r3, r3
 8009da6:	f023 030f 	bic.w	r3, r3, #15
 8009daa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dac:	6a3b      	ldr	r3, [r7, #32]
 8009dae:	085b      	lsrs	r3, r3, #1
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	f003 0307 	and.w	r3, r3, #7
 8009db6:	b29a      	uxth	r2, r3
 8009db8:	8bfb      	ldrh	r3, [r7, #30]
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	8bfa      	ldrh	r2, [r7, #30]
 8009dc4:	60da      	str	r2, [r3, #12]
 8009dc6:	e05b      	b.n	8009e80 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009dce:	e057      	b.n	8009e80 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dd0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009dd4:	2b08      	cmp	r3, #8
 8009dd6:	d828      	bhi.n	8009e2a <UART_SetConfig+0x50e>
 8009dd8:	a201      	add	r2, pc, #4	; (adr r2, 8009de0 <UART_SetConfig+0x4c4>)
 8009dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dde:	bf00      	nop
 8009de0:	08009e05 	.word	0x08009e05
 8009de4:	08009e0d 	.word	0x08009e0d
 8009de8:	08009e15 	.word	0x08009e15
 8009dec:	08009e2b 	.word	0x08009e2b
 8009df0:	08009e1b 	.word	0x08009e1b
 8009df4:	08009e2b 	.word	0x08009e2b
 8009df8:	08009e2b 	.word	0x08009e2b
 8009dfc:	08009e2b 	.word	0x08009e2b
 8009e00:	08009e23 	.word	0x08009e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e04:	f7fd f9e4 	bl	80071d0 <HAL_RCC_GetPCLK1Freq>
 8009e08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e0a:	e014      	b.n	8009e36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e0c:	f7fd f9f6 	bl	80071fc <HAL_RCC_GetPCLK2Freq>
 8009e10:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e12:	e010      	b.n	8009e36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e14:	4b26      	ldr	r3, [pc, #152]	; (8009eb0 <UART_SetConfig+0x594>)
 8009e16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e18:	e00d      	b.n	8009e36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e1a:	f7fd f96b 	bl	80070f4 <HAL_RCC_GetSysClockFreq>
 8009e1e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009e20:	e009      	b.n	8009e36 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009e28:	e005      	b.n	8009e36 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009e34:	bf00      	nop
    }

    if (pclk != 0U)
 8009e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d021      	beq.n	8009e80 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e40:	4a1a      	ldr	r2, [pc, #104]	; (8009eac <UART_SetConfig+0x590>)
 8009e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e46:	461a      	mov	r2, r3
 8009e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e4a:	fbb3 f2f2 	udiv	r2, r3, r2
 8009e4e:	697b      	ldr	r3, [r7, #20]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	085b      	lsrs	r3, r3, #1
 8009e54:	441a      	add	r2, r3
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	685b      	ldr	r3, [r3, #4]
 8009e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e5e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e60:	6a3b      	ldr	r3, [r7, #32]
 8009e62:	2b0f      	cmp	r3, #15
 8009e64:	d909      	bls.n	8009e7a <UART_SetConfig+0x55e>
 8009e66:	6a3b      	ldr	r3, [r7, #32]
 8009e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e6c:	d205      	bcs.n	8009e7a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e6e:	6a3b      	ldr	r3, [r7, #32]
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	60da      	str	r2, [r3, #12]
 8009e78:	e002      	b.n	8009e80 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	2201      	movs	r2, #1
 8009e8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	2200      	movs	r2, #0
 8009e94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009e96:	697b      	ldr	r3, [r7, #20]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009e9c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3730      	adds	r7, #48	; 0x30
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009eaa:	bf00      	nop
 8009eac:	0800fbc0 	.word	0x0800fbc0
 8009eb0:	00f42400 	.word	0x00f42400

08009eb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b083      	sub	sp, #12
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec0:	f003 0301 	and.w	r3, r3, #1
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d00a      	beq.n	8009ede <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ee2:	f003 0302 	and.w	r3, r3, #2
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00a      	beq.n	8009f00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	685b      	ldr	r3, [r3, #4]
 8009ef0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	430a      	orrs	r2, r1
 8009efe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f04:	f003 0304 	and.w	r3, r3, #4
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d00a      	beq.n	8009f22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f26:	f003 0308 	and.w	r3, r3, #8
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d00a      	beq.n	8009f44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	430a      	orrs	r2, r1
 8009f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f48:	f003 0310 	and.w	r3, r3, #16
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00a      	beq.n	8009f66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	430a      	orrs	r2, r1
 8009f64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f6a:	f003 0320 	and.w	r3, r3, #32
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00a      	beq.n	8009f88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	689b      	ldr	r3, [r3, #8]
 8009f78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	430a      	orrs	r2, r1
 8009f86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d01a      	beq.n	8009fca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	685b      	ldr	r3, [r3, #4]
 8009f9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	430a      	orrs	r2, r1
 8009fa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009fae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fb2:	d10a      	bne.n	8009fca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	685b      	ldr	r3, [r3, #4]
 8009fba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	430a      	orrs	r2, r1
 8009fc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d00a      	beq.n	8009fec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	605a      	str	r2, [r3, #4]
  }
}
 8009fec:	bf00      	nop
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b086      	sub	sp, #24
 8009ffc:	af02      	add	r7, sp, #8
 8009ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2200      	movs	r2, #0
 800a004:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a008:	f7f9 fb86 	bl	8003718 <HAL_GetTick>
 800a00c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0308 	and.w	r3, r3, #8
 800a018:	2b08      	cmp	r3, #8
 800a01a:	d10e      	bne.n	800a03a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a01c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2200      	movs	r2, #0
 800a026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f82f 	bl	800a08e <UART_WaitOnFlagUntilTimeout>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d001      	beq.n	800a03a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a036:	2303      	movs	r3, #3
 800a038:	e025      	b.n	800a086 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0304 	and.w	r3, r3, #4
 800a044:	2b04      	cmp	r3, #4
 800a046:	d10e      	bne.n	800a066 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a048:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	2200      	movs	r2, #0
 800a052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f000 f819 	bl	800a08e <UART_WaitOnFlagUntilTimeout>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	e00f      	b.n	800a086 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	2220      	movs	r2, #32
 800a06a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2220      	movs	r2, #32
 800a072:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3710      	adds	r7, #16
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b09c      	sub	sp, #112	; 0x70
 800a092:	af00      	add	r7, sp, #0
 800a094:	60f8      	str	r0, [r7, #12]
 800a096:	60b9      	str	r1, [r7, #8]
 800a098:	603b      	str	r3, [r7, #0]
 800a09a:	4613      	mov	r3, r2
 800a09c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a09e:	e0a9      	b.n	800a1f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0a6:	f000 80a5 	beq.w	800a1f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0aa:	f7f9 fb35 	bl	8003718 <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d302      	bcc.n	800a0c0 <UART_WaitOnFlagUntilTimeout+0x32>
 800a0ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d140      	bne.n	800a142 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0c8:	e853 3f00 	ldrex	r3, [r3]
 800a0cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0d4:	667b      	str	r3, [r7, #100]	; 0x64
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	461a      	mov	r2, r3
 800a0dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0de:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0e6:	e841 2300 	strex	r3, r2, [r1]
 800a0ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a0ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d1e6      	bne.n	800a0c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0fc:	e853 3f00 	ldrex	r3, [r3]
 800a100:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a104:	f023 0301 	bic.w	r3, r3, #1
 800a108:	663b      	str	r3, [r7, #96]	; 0x60
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	3308      	adds	r3, #8
 800a110:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a112:	64ba      	str	r2, [r7, #72]	; 0x48
 800a114:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a116:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a118:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a11a:	e841 2300 	strex	r3, r2, [r1]
 800a11e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a120:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1e5      	bne.n	800a0f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2220      	movs	r2, #32
 800a12a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2220      	movs	r2, #32
 800a132:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a13e:	2303      	movs	r3, #3
 800a140:	e069      	b.n	800a216 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f003 0304 	and.w	r3, r3, #4
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d051      	beq.n	800a1f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a15a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a15e:	d149      	bne.n	800a1f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a168:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a172:	e853 3f00 	ldrex	r3, [r3]
 800a176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a17e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	461a      	mov	r2, r3
 800a186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a188:	637b      	str	r3, [r7, #52]	; 0x34
 800a18a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a18c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a18e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a190:	e841 2300 	strex	r3, r2, [r1]
 800a194:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1e6      	bne.n	800a16a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	3308      	adds	r3, #8
 800a1a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	e853 3f00 	ldrex	r3, [r3]
 800a1aa:	613b      	str	r3, [r7, #16]
   return(result);
 800a1ac:	693b      	ldr	r3, [r7, #16]
 800a1ae:	f023 0301 	bic.w	r3, r3, #1
 800a1b2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	3308      	adds	r3, #8
 800a1ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a1bc:	623a      	str	r2, [r7, #32]
 800a1be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1c0:	69f9      	ldr	r1, [r7, #28]
 800a1c2:	6a3a      	ldr	r2, [r7, #32]
 800a1c4:	e841 2300 	strex	r3, r2, [r1]
 800a1c8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e5      	bne.n	800a19c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	2220      	movs	r2, #32
 800a1d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2220      	movs	r2, #32
 800a1dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	2220      	movs	r2, #32
 800a1e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800a1f0:	2303      	movs	r3, #3
 800a1f2:	e010      	b.n	800a216 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	69da      	ldr	r2, [r3, #28]
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	4013      	ands	r3, r2
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	429a      	cmp	r2, r3
 800a202:	bf0c      	ite	eq
 800a204:	2301      	moveq	r3, #1
 800a206:	2300      	movne	r3, #0
 800a208:	b2db      	uxtb	r3, r3
 800a20a:	461a      	mov	r2, r3
 800a20c:	79fb      	ldrb	r3, [r7, #7]
 800a20e:	429a      	cmp	r2, r3
 800a210:	f43f af46 	beq.w	800a0a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3770      	adds	r7, #112	; 0x70
 800a21a:	46bd      	mov	sp, r7
 800a21c:	bd80      	pop	{r7, pc}

0800a21e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a21e:	b480      	push	{r7}
 800a220:	b095      	sub	sp, #84	; 0x54
 800a222:	af00      	add	r7, sp, #0
 800a224:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a22e:	e853 3f00 	ldrex	r3, [r3]
 800a232:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a236:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a23a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	461a      	mov	r2, r3
 800a242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a244:	643b      	str	r3, [r7, #64]	; 0x40
 800a246:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a248:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a24a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a24c:	e841 2300 	strex	r3, r2, [r1]
 800a250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a254:	2b00      	cmp	r3, #0
 800a256:	d1e6      	bne.n	800a226 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	3308      	adds	r3, #8
 800a25e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a260:	6a3b      	ldr	r3, [r7, #32]
 800a262:	e853 3f00 	ldrex	r3, [r3]
 800a266:	61fb      	str	r3, [r7, #28]
   return(result);
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a26e:	f023 0301 	bic.w	r3, r3, #1
 800a272:	64bb      	str	r3, [r7, #72]	; 0x48
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	3308      	adds	r3, #8
 800a27a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a27c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a27e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a280:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a282:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a284:	e841 2300 	strex	r3, r2, [r1]
 800a288:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a28a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d1e3      	bne.n	800a258 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a294:	2b01      	cmp	r3, #1
 800a296:	d118      	bne.n	800a2ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	e853 3f00 	ldrex	r3, [r3]
 800a2a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f023 0310 	bic.w	r3, r3, #16
 800a2ac:	647b      	str	r3, [r7, #68]	; 0x44
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	461a      	mov	r2, r3
 800a2b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a2b6:	61bb      	str	r3, [r7, #24]
 800a2b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2ba:	6979      	ldr	r1, [r7, #20]
 800a2bc:	69ba      	ldr	r2, [r7, #24]
 800a2be:	e841 2300 	strex	r3, r2, [r1]
 800a2c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1e6      	bne.n	800a298 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2220      	movs	r2, #32
 800a2ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2200      	movs	r2, #0
 800a2d6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	671a      	str	r2, [r3, #112]	; 0x70
}
 800a2de:	bf00      	nop
 800a2e0:	3754      	adds	r7, #84	; 0x54
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e8:	4770      	bx	lr

0800a2ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	2200      	movs	r2, #0
 800a304:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a308:	68f8      	ldr	r0, [r7, #12]
 800a30a:	f7ff faf1 	bl	80098f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a30e:	bf00      	nop
 800a310:	3710      	adds	r7, #16
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}

0800a316 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800a316:	b480      	push	{r7}
 800a318:	b08f      	sub	sp, #60	; 0x3c
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a324:	2b21      	cmp	r3, #33	; 0x21
 800a326:	d14c      	bne.n	800a3c2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a32e:	b29b      	uxth	r3, r3
 800a330:	2b00      	cmp	r3, #0
 800a332:	d132      	bne.n	800a39a <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a33a:	6a3b      	ldr	r3, [r7, #32]
 800a33c:	e853 3f00 	ldrex	r3, [r3]
 800a340:	61fb      	str	r3, [r7, #28]
   return(result);
 800a342:	69fb      	ldr	r3, [r7, #28]
 800a344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a348:	637b      	str	r3, [r7, #52]	; 0x34
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a352:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a354:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a35a:	e841 2300 	strex	r3, r2, [r1]
 800a35e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	2b00      	cmp	r3, #0
 800a364:	d1e6      	bne.n	800a334 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	e853 3f00 	ldrex	r3, [r3]
 800a372:	60bb      	str	r3, [r7, #8]
   return(result);
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a37a:	633b      	str	r3, [r7, #48]	; 0x30
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	461a      	mov	r2, r3
 800a382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a384:	61bb      	str	r3, [r7, #24]
 800a386:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a388:	6979      	ldr	r1, [r7, #20]
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	e841 2300 	strex	r3, r2, [r1]
 800a390:	613b      	str	r3, [r7, #16]
   return(result);
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	2b00      	cmp	r3, #0
 800a396:	d1e6      	bne.n	800a366 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800a398:	e013      	b.n	800a3c2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a39e:	781a      	ldrb	r2, [r3, #0]
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3aa:	1c5a      	adds	r2, r3, #1
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a3c2:	bf00      	nop
 800a3c4:	373c      	adds	r7, #60	; 0x3c
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b091      	sub	sp, #68	; 0x44
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3dc:	2b21      	cmp	r3, #33	; 0x21
 800a3de:	d151      	bne.n	800a484 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a3e6:	b29b      	uxth	r3, r3
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d132      	bne.n	800a452 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3f4:	e853 3f00 	ldrex	r3, [r3]
 800a3f8:	623b      	str	r3, [r7, #32]
   return(result);
 800a3fa:	6a3b      	ldr	r3, [r7, #32]
 800a3fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a400:	63bb      	str	r3, [r7, #56]	; 0x38
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	461a      	mov	r2, r3
 800a408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a40a:	633b      	str	r3, [r7, #48]	; 0x30
 800a40c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a40e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a410:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a412:	e841 2300 	strex	r3, r2, [r1]
 800a416:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1e6      	bne.n	800a3ec <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	e853 3f00 	ldrex	r3, [r3]
 800a42a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a432:	637b      	str	r3, [r7, #52]	; 0x34
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	461a      	mov	r2, r3
 800a43a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a43c:	61fb      	str	r3, [r7, #28]
 800a43e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a440:	69b9      	ldr	r1, [r7, #24]
 800a442:	69fa      	ldr	r2, [r7, #28]
 800a444:	e841 2300 	strex	r3, r2, [r1]
 800a448:	617b      	str	r3, [r7, #20]
   return(result);
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d1e6      	bne.n	800a41e <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800a450:	e018      	b.n	800a484 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a456:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a45a:	881b      	ldrh	r3, [r3, #0]
 800a45c:	461a      	mov	r2, r3
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a466:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a46c:	1c9a      	adds	r2, r3, #2
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a478:	b29b      	uxth	r3, r3
 800a47a:	3b01      	subs	r3, #1
 800a47c:	b29a      	uxth	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800a484:	bf00      	nop
 800a486:	3744      	adds	r7, #68	; 0x44
 800a488:	46bd      	mov	sp, r7
 800a48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48e:	4770      	bx	lr

0800a490 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a490:	b480      	push	{r7}
 800a492:	b091      	sub	sp, #68	; 0x44
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a49e:	2b21      	cmp	r3, #33	; 0x21
 800a4a0:	d160      	bne.n	800a564 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a4a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a4aa:	e057      	b.n	800a55c <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d133      	bne.n	800a520 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3308      	adds	r3, #8
 800a4be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c2:	e853 3f00 	ldrex	r3, [r3]
 800a4c6:	623b      	str	r3, [r7, #32]
   return(result);
 800a4c8:	6a3b      	ldr	r3, [r7, #32]
 800a4ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a4ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	3308      	adds	r3, #8
 800a4d6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4d8:	633a      	str	r2, [r7, #48]	; 0x30
 800a4da:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a4de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4e0:	e841 2300 	strex	r3, r2, [r1]
 800a4e4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d1e5      	bne.n	800a4b8 <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f2:	693b      	ldr	r3, [r7, #16]
 800a4f4:	e853 3f00 	ldrex	r3, [r3]
 800a4f8:	60fb      	str	r3, [r7, #12]
   return(result);
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a500:	637b      	str	r3, [r7, #52]	; 0x34
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	461a      	mov	r2, r3
 800a508:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a50a:	61fb      	str	r3, [r7, #28]
 800a50c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50e:	69b9      	ldr	r1, [r7, #24]
 800a510:	69fa      	ldr	r2, [r7, #28]
 800a512:	e841 2300 	strex	r3, r2, [r1]
 800a516:	617b      	str	r3, [r7, #20]
   return(result);
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d1e6      	bne.n	800a4ec <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a51e:	e021      	b.n	800a564 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	69db      	ldr	r3, [r3, #28]
 800a526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d013      	beq.n	800a556 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a532:	781a      	ldrb	r2, [r3, #0]
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a53e:	1c5a      	adds	r2, r3, #1
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	3b01      	subs	r3, #1
 800a54e:	b29a      	uxth	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a556:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a558:	3b01      	subs	r3, #1
 800a55a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a55c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d1a4      	bne.n	800a4ac <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a562:	e7ff      	b.n	800a564 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800a564:	bf00      	nop
 800a566:	3744      	adds	r7, #68	; 0x44
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800a570:	b480      	push	{r7}
 800a572:	b091      	sub	sp, #68	; 0x44
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a57e:	2b21      	cmp	r3, #33	; 0x21
 800a580:	d165      	bne.n	800a64e <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a588:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a58a:	e05c      	b.n	800a646 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a592:	b29b      	uxth	r3, r3
 800a594:	2b00      	cmp	r3, #0
 800a596:	d133      	bne.n	800a600 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3308      	adds	r3, #8
 800a59e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5a0:	6a3b      	ldr	r3, [r7, #32]
 800a5a2:	e853 3f00 	ldrex	r3, [r3]
 800a5a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a5ae:	637b      	str	r3, [r7, #52]	; 0x34
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	3308      	adds	r3, #8
 800a5b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a5ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a5c0:	e841 2300 	strex	r3, r2, [r1]
 800a5c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d1e5      	bne.n	800a598 <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	60bb      	str	r3, [r7, #8]
   return(result);
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5e0:	633b      	str	r3, [r7, #48]	; 0x30
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ea:	61bb      	str	r3, [r7, #24]
 800a5ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5ee:	6979      	ldr	r1, [r7, #20]
 800a5f0:	69ba      	ldr	r2, [r7, #24]
 800a5f2:	e841 2300 	strex	r3, r2, [r1]
 800a5f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d1e6      	bne.n	800a5cc <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800a5fe:	e026      	b.n	800a64e <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	69db      	ldr	r3, [r3, #28]
 800a606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d018      	beq.n	800a640 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a612:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800a614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a616:	881b      	ldrh	r3, [r3, #0]
 800a618:	461a      	mov	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a622:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a628:	1c9a      	adds	r2, r3, #2
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a634:	b29b      	uxth	r3, r3
 800a636:	3b01      	subs	r3, #1
 800a638:	b29a      	uxth	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800a640:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a642:	3b01      	subs	r3, #1
 800a644:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800a646:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d19f      	bne.n	800a58c <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800a64c:	e7ff      	b.n	800a64e <UART_TxISR_16BIT_FIFOEN+0xde>
 800a64e:	bf00      	nop
 800a650:	3744      	adds	r7, #68	; 0x44
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr

0800a65a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a65a:	b580      	push	{r7, lr}
 800a65c:	b088      	sub	sp, #32
 800a65e:	af00      	add	r7, sp, #0
 800a660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	e853 3f00 	ldrex	r3, [r3]
 800a66e:	60bb      	str	r3, [r7, #8]
   return(result);
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a676:	61fb      	str	r3, [r7, #28]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	461a      	mov	r2, r3
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	61bb      	str	r3, [r7, #24]
 800a682:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a684:	6979      	ldr	r1, [r7, #20]
 800a686:	69ba      	ldr	r2, [r7, #24]
 800a688:	e841 2300 	strex	r3, r2, [r1]
 800a68c:	613b      	str	r3, [r7, #16]
   return(result);
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	2b00      	cmp	r3, #0
 800a692:	d1e6      	bne.n	800a662 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2220      	movs	r2, #32
 800a698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f7f6 fc96 	bl	8000fd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6a8:	bf00      	nop
 800a6aa:	3720      	adds	r7, #32
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}

0800a6b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a6b8:	bf00      	nop
 800a6ba:	370c      	adds	r7, #12
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b085      	sub	sp, #20
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a6fa:	2b01      	cmp	r3, #1
 800a6fc:	d101      	bne.n	800a702 <HAL_UARTEx_DisableFifoMode+0x16>
 800a6fe:	2302      	movs	r3, #2
 800a700:	e027      	b.n	800a752 <HAL_UARTEx_DisableFifoMode+0x66>
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2201      	movs	r2, #1
 800a706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2224      	movs	r2, #36	; 0x24
 800a70e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f022 0201 	bic.w	r2, r2, #1
 800a728:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a730:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2220      	movs	r2, #32
 800a744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a750:	2300      	movs	r3, #0
}
 800a752:	4618      	mov	r0, r3
 800a754:	3714      	adds	r7, #20
 800a756:	46bd      	mov	sp, r7
 800a758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75c:	4770      	bx	lr

0800a75e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a75e:	b580      	push	{r7, lr}
 800a760:	b084      	sub	sp, #16
 800a762:	af00      	add	r7, sp, #0
 800a764:	6078      	str	r0, [r7, #4]
 800a766:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a76e:	2b01      	cmp	r3, #1
 800a770:	d101      	bne.n	800a776 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a772:	2302      	movs	r3, #2
 800a774:	e02d      	b.n	800a7d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	2201      	movs	r2, #1
 800a77a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	2224      	movs	r2, #36	; 0x24
 800a782:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f022 0201 	bic.w	r2, r2, #1
 800a79c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	683a      	ldr	r2, [r7, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 f850 	bl	800a858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	68fa      	ldr	r2, [r7, #12]
 800a7be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2220      	movs	r2, #32
 800a7c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3710      	adds	r7, #16
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}

0800a7da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a7da:	b580      	push	{r7, lr}
 800a7dc:	b084      	sub	sp, #16
 800a7de:	af00      	add	r7, sp, #0
 800a7e0:	6078      	str	r0, [r7, #4]
 800a7e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d101      	bne.n	800a7f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a7ee:	2302      	movs	r3, #2
 800a7f0:	e02d      	b.n	800a84e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2224      	movs	r2, #36	; 0x24
 800a7fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f022 0201 	bic.w	r2, r2, #1
 800a818:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	689b      	ldr	r3, [r3, #8]
 800a820:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	430a      	orrs	r2, r1
 800a82c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a82e:	6878      	ldr	r0, [r7, #4]
 800a830:	f000 f812 	bl	800a858 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2220      	movs	r2, #32
 800a840:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2200      	movs	r2, #0
 800a848:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3710      	adds	r7, #16
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
	...

0800a858 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a858:	b480      	push	{r7}
 800a85a:	b085      	sub	sp, #20
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a864:	2b00      	cmp	r3, #0
 800a866:	d108      	bne.n	800a87a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2201      	movs	r2, #1
 800a874:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a878:	e031      	b.n	800a8de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a87a:	2308      	movs	r3, #8
 800a87c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a87e:	2308      	movs	r3, #8
 800a880:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	689b      	ldr	r3, [r3, #8]
 800a888:	0e5b      	lsrs	r3, r3, #25
 800a88a:	b2db      	uxtb	r3, r3
 800a88c:	f003 0307 	and.w	r3, r3, #7
 800a890:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	689b      	ldr	r3, [r3, #8]
 800a898:	0f5b      	lsrs	r3, r3, #29
 800a89a:	b2db      	uxtb	r3, r3
 800a89c:	f003 0307 	and.w	r3, r3, #7
 800a8a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8a2:	7bbb      	ldrb	r3, [r7, #14]
 800a8a4:	7b3a      	ldrb	r2, [r7, #12]
 800a8a6:	4911      	ldr	r1, [pc, #68]	; (800a8ec <UARTEx_SetNbDataToProcess+0x94>)
 800a8a8:	5c8a      	ldrb	r2, [r1, r2]
 800a8aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a8ae:	7b3a      	ldrb	r2, [r7, #12]
 800a8b0:	490f      	ldr	r1, [pc, #60]	; (800a8f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a8b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a8b4:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8b8:	b29a      	uxth	r2, r3
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
 800a8c2:	7b7a      	ldrb	r2, [r7, #13]
 800a8c4:	4909      	ldr	r1, [pc, #36]	; (800a8ec <UARTEx_SetNbDataToProcess+0x94>)
 800a8c6:	5c8a      	ldrb	r2, [r1, r2]
 800a8c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a8cc:	7b7a      	ldrb	r2, [r7, #13]
 800a8ce:	4908      	ldr	r1, [pc, #32]	; (800a8f0 <UARTEx_SetNbDataToProcess+0x98>)
 800a8d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a8d2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8d6:	b29a      	uxth	r2, r3
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a8de:	bf00      	nop
 800a8e0:	3714      	adds	r7, #20
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop
 800a8ec:	0800fbd8 	.word	0x0800fbd8
 800a8f0:	0800fbe0 	.word	0x0800fbe0

0800a8f4 <SPI4W_Write_Byte>:
		Gpio analog SPI
	I2C_Write_Byte(value, cmd):
		HAL library hardware I2C
********************************************************************************/
uint8_t SPI4W_Write_Byte(uint8_t value)
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	71fb      	strb	r3, [r7, #7]
        SPI_SCK_1;
        Driver_Delay_us(10);
        value = (value << 1);
    }
#else
    __HAL_SPI_ENABLE(&hspi1);
 800a8fe:	4b17      	ldr	r3, [pc, #92]	; (800a95c <SPI4W_Write_Byte+0x68>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	681a      	ldr	r2, [r3, #0]
 800a904:	4b15      	ldr	r3, [pc, #84]	; (800a95c <SPI4W_Write_Byte+0x68>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a90c:	601a      	str	r2, [r3, #0]
    SPI1->CR2 |= (1) << 12;
 800a90e:	4b14      	ldr	r3, [pc, #80]	; (800a960 <SPI4W_Write_Byte+0x6c>)
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	4a13      	ldr	r2, [pc, #76]	; (800a960 <SPI4W_Write_Byte+0x6c>)
 800a914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a918:	6053      	str	r3, [r2, #4]

    while((SPI1->SR & (1 << 1)) == 0)
 800a91a:	bf00      	nop
 800a91c:	4b10      	ldr	r3, [pc, #64]	; (800a960 <SPI4W_Write_Byte+0x6c>)
 800a91e:	689b      	ldr	r3, [r3, #8]
 800a920:	f003 0302 	and.w	r3, r3, #2
 800a924:	2b00      	cmp	r3, #0
 800a926:	d0f9      	beq.n	800a91c <SPI4W_Write_Byte+0x28>
        ;

    *((__IO uint8_t *)(&SPI1->DR)) = value;
 800a928:	4a0e      	ldr	r2, [pc, #56]	; (800a964 <SPI4W_Write_Byte+0x70>)
 800a92a:	79fb      	ldrb	r3, [r7, #7]
 800a92c:	7013      	strb	r3, [r2, #0]

    while(SPI1->SR & (1 << 7)) ; //Wait for not busy
 800a92e:	bf00      	nop
 800a930:	4b0b      	ldr	r3, [pc, #44]	; (800a960 <SPI4W_Write_Byte+0x6c>)
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d1f9      	bne.n	800a930 <SPI4W_Write_Byte+0x3c>

    while((SPI1->SR & (1 << 0)) == 0) ; // Wait for the receiving area to be empty
 800a93c:	bf00      	nop
 800a93e:	4b08      	ldr	r3, [pc, #32]	; (800a960 <SPI4W_Write_Byte+0x6c>)
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0f9      	beq.n	800a93e <SPI4W_Write_Byte+0x4a>

    return *((__IO uint8_t *)(&SPI1->DR));
 800a94a:	4b06      	ldr	r3, [pc, #24]	; (800a964 <SPI4W_Write_Byte+0x70>)
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	b2db      	uxtb	r3, r3
#endif
}
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	2000075c 	.word	0x2000075c
 800a960:	40013000 	.word	0x40013000
 800a964:	4001300c 	.word	0x4001300c

0800a968 <Driver_Delay_ms>:
note:
	Driver_Delay_ms(xms) : Delay x ms
	Driver_Delay_us(xus) : Delay x us
********************************************************************************/
void Driver_Delay_ms(uint32_t xms)
{
 800a968:	b580      	push	{r7, lr}
 800a96a:	b082      	sub	sp, #8
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
    HAL_Delay(xms);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f7f8 fedd 	bl	8003730 <HAL_Delay>
}
 800a976:	bf00      	nop
 800a978:	3708      	adds	r7, #8
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
	...

0800a980 <Paint_NewImage>:
    width   :   The width of the picture
    Height  :   The height of the picture
    Color   :   Whether the picture is inverted
******************************************************************************/
void Paint_NewImage(UBYTE *image, UWORD Width, UWORD Height, UWORD Rotate, UWORD Color)
{
 800a980:	b480      	push	{r7}
 800a982:	b085      	sub	sp, #20
 800a984:	af00      	add	r7, sp, #0
 800a986:	60f8      	str	r0, [r7, #12]
 800a988:	4608      	mov	r0, r1
 800a98a:	4611      	mov	r1, r2
 800a98c:	461a      	mov	r2, r3
 800a98e:	4603      	mov	r3, r0
 800a990:	817b      	strh	r3, [r7, #10]
 800a992:	460b      	mov	r3, r1
 800a994:	813b      	strh	r3, [r7, #8]
 800a996:	4613      	mov	r3, r2
 800a998:	80fb      	strh	r3, [r7, #6]
    Paint.Image = NULL;
 800a99a:	4b23      	ldr	r3, [pc, #140]	; (800aa28 <Paint_NewImage+0xa8>)
 800a99c:	2200      	movs	r2, #0
 800a99e:	601a      	str	r2, [r3, #0]
    Paint.Image = image;
 800a9a0:	4a21      	ldr	r2, [pc, #132]	; (800aa28 <Paint_NewImage+0xa8>)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6013      	str	r3, [r2, #0]

    Paint.WidthMemory = Width;
 800a9a6:	4a20      	ldr	r2, [pc, #128]	; (800aa28 <Paint_NewImage+0xa8>)
 800a9a8:	897b      	ldrh	r3, [r7, #10]
 800a9aa:	8113      	strh	r3, [r2, #8]
    Paint.HeightMemory = Height;
 800a9ac:	4a1e      	ldr	r2, [pc, #120]	; (800aa28 <Paint_NewImage+0xa8>)
 800a9ae:	893b      	ldrh	r3, [r7, #8]
 800a9b0:	8153      	strh	r3, [r2, #10]
    Paint.Color = Color;    
 800a9b2:	4a1d      	ldr	r2, [pc, #116]	; (800aa28 <Paint_NewImage+0xa8>)
 800a9b4:	8b3b      	ldrh	r3, [r7, #24]
 800a9b6:	8193      	strh	r3, [r2, #12]
		Paint.Scale = 2;
 800a9b8:	4b1b      	ldr	r3, [pc, #108]	; (800aa28 <Paint_NewImage+0xa8>)
 800a9ba:	2202      	movs	r2, #2
 800a9bc:	82da      	strh	r2, [r3, #22]
		
    Paint.WidthByte = (Width % 8 == 0)? (Width / 8 ): (Width / 8 + 1);
 800a9be:	897b      	ldrh	r3, [r7, #10]
 800a9c0:	f003 0307 	and.w	r3, r3, #7
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d103      	bne.n	800a9d2 <Paint_NewImage+0x52>
 800a9ca:	897b      	ldrh	r3, [r7, #10]
 800a9cc:	08db      	lsrs	r3, r3, #3
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	e004      	b.n	800a9dc <Paint_NewImage+0x5c>
 800a9d2:	897b      	ldrh	r3, [r7, #10]
 800a9d4:	08db      	lsrs	r3, r3, #3
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	3301      	adds	r3, #1
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	4a12      	ldr	r2, [pc, #72]	; (800aa28 <Paint_NewImage+0xa8>)
 800a9de:	8253      	strh	r3, [r2, #18]
    Paint.HeightByte = Height;    
 800a9e0:	4a11      	ldr	r2, [pc, #68]	; (800aa28 <Paint_NewImage+0xa8>)
 800a9e2:	893b      	ldrh	r3, [r7, #8]
 800a9e4:	8293      	strh	r3, [r2, #20]
//    printf("WidthByte = %d, HeightByte = %d\r\n", Paint.WidthByte, Paint.HeightByte);
//    printf(" EPD_WIDTH / 8 = %d\r\n",  122 / 8);
   
    Paint.Rotate = Rotate;
 800a9e6:	4a10      	ldr	r2, [pc, #64]	; (800aa28 <Paint_NewImage+0xa8>)
 800a9e8:	88fb      	ldrh	r3, [r7, #6]
 800a9ea:	81d3      	strh	r3, [r2, #14]
    Paint.Mirror = MIRROR_NONE;
 800a9ec:	4b0e      	ldr	r3, [pc, #56]	; (800aa28 <Paint_NewImage+0xa8>)
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	821a      	strh	r2, [r3, #16]
    
    if(Rotate == ROTATE_0 || Rotate == ROTATE_180) {
 800a9f2:	88fb      	ldrh	r3, [r7, #6]
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d002      	beq.n	800a9fe <Paint_NewImage+0x7e>
 800a9f8:	88fb      	ldrh	r3, [r7, #6]
 800a9fa:	2bb4      	cmp	r3, #180	; 0xb4
 800a9fc:	d106      	bne.n	800aa0c <Paint_NewImage+0x8c>
        Paint.Width = Width;
 800a9fe:	4a0a      	ldr	r2, [pc, #40]	; (800aa28 <Paint_NewImage+0xa8>)
 800aa00:	897b      	ldrh	r3, [r7, #10]
 800aa02:	8093      	strh	r3, [r2, #4]
        Paint.Height = Height;
 800aa04:	4a08      	ldr	r2, [pc, #32]	; (800aa28 <Paint_NewImage+0xa8>)
 800aa06:	893b      	ldrh	r3, [r7, #8]
 800aa08:	80d3      	strh	r3, [r2, #6]
 800aa0a:	e006      	b.n	800aa1a <Paint_NewImage+0x9a>
    } else {
        Paint.Width = Height;
 800aa0c:	4a06      	ldr	r2, [pc, #24]	; (800aa28 <Paint_NewImage+0xa8>)
 800aa0e:	893b      	ldrh	r3, [r7, #8]
 800aa10:	8093      	strh	r3, [r2, #4]
        Paint.Height = Width;
 800aa12:	4a05      	ldr	r2, [pc, #20]	; (800aa28 <Paint_NewImage+0xa8>)
 800aa14:	897b      	ldrh	r3, [r7, #10]
 800aa16:	80d3      	strh	r3, [r2, #6]
    }
}
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
 800aa1c:	3714      	adds	r7, #20
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr
 800aa26:	bf00      	nop
 800aa28:	20000a20 	.word	0x20000a20

0800aa2c <Paint_SelectImage>:
function: Select Image
parameter:
    image : Pointer to the image cache
******************************************************************************/
void Paint_SelectImage(UBYTE *image)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b083      	sub	sp, #12
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
    Paint.Image = image;
 800aa34:	4a04      	ldr	r2, [pc, #16]	; (800aa48 <Paint_SelectImage+0x1c>)
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6013      	str	r3, [r2, #0]
}
 800aa3a:	bf00      	nop
 800aa3c:	370c      	adds	r7, #12
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	20000a20 	.word	0x20000a20

0800aa4c <Paint_SetScale>:
        Debug("rotate = 0, 90, 180, 270\r\n");
    }
}

void Paint_SetScale(UBYTE scale)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b082      	sub	sp, #8
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	4603      	mov	r3, r0
 800aa54:	71fb      	strb	r3, [r7, #7]
    if(scale == 2){
 800aa56:	79fb      	ldrb	r3, [r7, #7]
 800aa58:	2b02      	cmp	r3, #2
 800aa5a:	d118      	bne.n	800aa8e <Paint_SetScale+0x42>
        Paint.Scale = scale;
 800aa5c:	79fb      	ldrb	r3, [r7, #7]
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	4b33      	ldr	r3, [pc, #204]	; (800ab30 <Paint_SetScale+0xe4>)
 800aa62:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 8 == 0)? (Paint.WidthMemory / 8 ): (Paint.WidthMemory / 8 + 1);
 800aa64:	4b32      	ldr	r3, [pc, #200]	; (800ab30 <Paint_SetScale+0xe4>)
 800aa66:	891b      	ldrh	r3, [r3, #8]
 800aa68:	f003 0307 	and.w	r3, r3, #7
 800aa6c:	b29b      	uxth	r3, r3
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d104      	bne.n	800aa7c <Paint_SetScale+0x30>
 800aa72:	4b2f      	ldr	r3, [pc, #188]	; (800ab30 <Paint_SetScale+0xe4>)
 800aa74:	891b      	ldrh	r3, [r3, #8]
 800aa76:	08db      	lsrs	r3, r3, #3
 800aa78:	b29b      	uxth	r3, r3
 800aa7a:	e005      	b.n	800aa88 <Paint_SetScale+0x3c>
 800aa7c:	4b2c      	ldr	r3, [pc, #176]	; (800ab30 <Paint_SetScale+0xe4>)
 800aa7e:	891b      	ldrh	r3, [r3, #8]
 800aa80:	08db      	lsrs	r3, r3, #3
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	3301      	adds	r3, #1
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	4a29      	ldr	r2, [pc, #164]	; (800ab30 <Paint_SetScale+0xe4>)
 800aa8a:	8253      	strh	r3, [r2, #18]
        Paint.WidthByte = Paint.WidthMemory*2; 
    }else{
        Debug("Set Scale Input parameter error\r\n");
        Debug("Scale Only support: 2 4 16 65\r\n");
    }
}
 800aa8c:	e04b      	b.n	800ab26 <Paint_SetScale+0xda>
    }else if(scale == 4){
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	2b04      	cmp	r3, #4
 800aa92:	d118      	bne.n	800aac6 <Paint_SetScale+0x7a>
        Paint.Scale = scale;
 800aa94:	79fb      	ldrb	r3, [r7, #7]
 800aa96:	b29a      	uxth	r2, r3
 800aa98:	4b25      	ldr	r3, [pc, #148]	; (800ab30 <Paint_SetScale+0xe4>)
 800aa9a:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory % 4 == 0)? (Paint.WidthMemory / 4 ): (Paint.WidthMemory / 4 + 1);
 800aa9c:	4b24      	ldr	r3, [pc, #144]	; (800ab30 <Paint_SetScale+0xe4>)
 800aa9e:	891b      	ldrh	r3, [r3, #8]
 800aaa0:	f003 0303 	and.w	r3, r3, #3
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d104      	bne.n	800aab4 <Paint_SetScale+0x68>
 800aaaa:	4b21      	ldr	r3, [pc, #132]	; (800ab30 <Paint_SetScale+0xe4>)
 800aaac:	891b      	ldrh	r3, [r3, #8]
 800aaae:	089b      	lsrs	r3, r3, #2
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	e005      	b.n	800aac0 <Paint_SetScale+0x74>
 800aab4:	4b1e      	ldr	r3, [pc, #120]	; (800ab30 <Paint_SetScale+0xe4>)
 800aab6:	891b      	ldrh	r3, [r3, #8]
 800aab8:	089b      	lsrs	r3, r3, #2
 800aaba:	b29b      	uxth	r3, r3
 800aabc:	3301      	adds	r3, #1
 800aabe:	b29b      	uxth	r3, r3
 800aac0:	4a1b      	ldr	r2, [pc, #108]	; (800ab30 <Paint_SetScale+0xe4>)
 800aac2:	8253      	strh	r3, [r2, #18]
}
 800aac4:	e02f      	b.n	800ab26 <Paint_SetScale+0xda>
    }else if(scale ==16) {
 800aac6:	79fb      	ldrb	r3, [r7, #7]
 800aac8:	2b10      	cmp	r3, #16
 800aaca:	d118      	bne.n	800aafe <Paint_SetScale+0xb2>
        Paint.Scale = scale;
 800aacc:	79fb      	ldrb	r3, [r7, #7]
 800aace:	b29a      	uxth	r2, r3
 800aad0:	4b17      	ldr	r3, [pc, #92]	; (800ab30 <Paint_SetScale+0xe4>)
 800aad2:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = (Paint.WidthMemory%2==0) ? (Paint.WidthMemory/2) : (Paint.WidthMemory/2+1); 
 800aad4:	4b16      	ldr	r3, [pc, #88]	; (800ab30 <Paint_SetScale+0xe4>)
 800aad6:	891b      	ldrh	r3, [r3, #8]
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	b29b      	uxth	r3, r3
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d104      	bne.n	800aaec <Paint_SetScale+0xa0>
 800aae2:	4b13      	ldr	r3, [pc, #76]	; (800ab30 <Paint_SetScale+0xe4>)
 800aae4:	891b      	ldrh	r3, [r3, #8]
 800aae6:	085b      	lsrs	r3, r3, #1
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	e005      	b.n	800aaf8 <Paint_SetScale+0xac>
 800aaec:	4b10      	ldr	r3, [pc, #64]	; (800ab30 <Paint_SetScale+0xe4>)
 800aaee:	891b      	ldrh	r3, [r3, #8]
 800aaf0:	085b      	lsrs	r3, r3, #1
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	3301      	adds	r3, #1
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	4a0d      	ldr	r2, [pc, #52]	; (800ab30 <Paint_SetScale+0xe4>)
 800aafa:	8253      	strh	r3, [r2, #18]
}
 800aafc:	e013      	b.n	800ab26 <Paint_SetScale+0xda>
    }else if(scale ==65) {
 800aafe:	79fb      	ldrb	r3, [r7, #7]
 800ab00:	2b41      	cmp	r3, #65	; 0x41
 800ab02:	d10a      	bne.n	800ab1a <Paint_SetScale+0xce>
        Paint.Scale = scale;
 800ab04:	79fb      	ldrb	r3, [r7, #7]
 800ab06:	b29a      	uxth	r2, r3
 800ab08:	4b09      	ldr	r3, [pc, #36]	; (800ab30 <Paint_SetScale+0xe4>)
 800ab0a:	82da      	strh	r2, [r3, #22]
        Paint.WidthByte = Paint.WidthMemory*2; 
 800ab0c:	4b08      	ldr	r3, [pc, #32]	; (800ab30 <Paint_SetScale+0xe4>)
 800ab0e:	891b      	ldrh	r3, [r3, #8]
 800ab10:	005b      	lsls	r3, r3, #1
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	4b06      	ldr	r3, [pc, #24]	; (800ab30 <Paint_SetScale+0xe4>)
 800ab16:	825a      	strh	r2, [r3, #18]
}
 800ab18:	e005      	b.n	800ab26 <Paint_SetScale+0xda>
        Debug("Set Scale Input parameter error\r\n");
 800ab1a:	4806      	ldr	r0, [pc, #24]	; (800ab34 <Paint_SetScale+0xe8>)
 800ab1c:	f001 fe3e 	bl	800c79c <puts>
        Debug("Scale Only support: 2 4 16 65\r\n");
 800ab20:	4805      	ldr	r0, [pc, #20]	; (800ab38 <Paint_SetScale+0xec>)
 800ab22:	f001 fe3b 	bl	800c79c <puts>
}
 800ab26:	bf00      	nop
 800ab28:	3708      	adds	r7, #8
 800ab2a:	46bd      	mov	sp, r7
 800ab2c:	bd80      	pop	{r7, pc}
 800ab2e:	bf00      	nop
 800ab30:	20000a20 	.word	0x20000a20
 800ab34:	0800f890 	.word	0x0800f890
 800ab38:	0800f8b8 	.word	0x0800f8b8

0800ab3c <Paint_SetPixel>:
    Xpoint : At point X
    Ypoint : At point Y
    Color  : Painted colors
******************************************************************************/
void Paint_SetPixel(UWORD Xpoint, UWORD Ypoint, UWORD Color)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b08a      	sub	sp, #40	; 0x28
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	4603      	mov	r3, r0
 800ab44:	80fb      	strh	r3, [r7, #6]
 800ab46:	460b      	mov	r3, r1
 800ab48:	80bb      	strh	r3, [r7, #4]
 800ab4a:	4613      	mov	r3, r2
 800ab4c:	807b      	strh	r3, [r7, #2]
    if(Xpoint > Paint.Width || Ypoint > Paint.Height){
 800ab4e:	4b9e      	ldr	r3, [pc, #632]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ab50:	889b      	ldrh	r3, [r3, #4]
 800ab52:	88fa      	ldrh	r2, [r7, #6]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d804      	bhi.n	800ab62 <Paint_SetPixel+0x26>
 800ab58:	4b9b      	ldr	r3, [pc, #620]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ab5a:	88db      	ldrh	r3, [r3, #6]
 800ab5c:	88ba      	ldrh	r2, [r7, #4]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d903      	bls.n	800ab6a <Paint_SetPixel+0x2e>
        Debug("Exceeding display boundaries\r\n");
 800ab62:	489a      	ldr	r0, [pc, #616]	; (800adcc <Paint_SetPixel+0x290>)
 800ab64:	f001 fe1a 	bl	800c79c <puts>
        return;
 800ab68:	e154      	b.n	800ae14 <Paint_SetPixel+0x2d8>
    }      
    UWORD X, Y;

    switch(Paint.Rotate) {
 800ab6a:	4b97      	ldr	r3, [pc, #604]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ab6c:	89db      	ldrh	r3, [r3, #14]
 800ab6e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ab72:	d02b      	beq.n	800abcc <Paint_SetPixel+0x90>
 800ab74:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ab78:	f300 8149 	bgt.w	800ae0e <Paint_SetPixel+0x2d2>
 800ab7c:	2bb4      	cmp	r3, #180	; 0xb4
 800ab7e:	d016      	beq.n	800abae <Paint_SetPixel+0x72>
 800ab80:	2bb4      	cmp	r3, #180	; 0xb4
 800ab82:	f300 8144 	bgt.w	800ae0e <Paint_SetPixel+0x2d2>
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d002      	beq.n	800ab90 <Paint_SetPixel+0x54>
 800ab8a:	2b5a      	cmp	r3, #90	; 0x5a
 800ab8c:	d005      	beq.n	800ab9a <Paint_SetPixel+0x5e>
    case 270:
        X = Ypoint;
        Y = Paint.HeightMemory - Xpoint - 1;
        break;
    default:
        return;
 800ab8e:	e13e      	b.n	800ae0e <Paint_SetPixel+0x2d2>
        X = Xpoint;
 800ab90:	88fb      	ldrh	r3, [r7, #6]
 800ab92:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Ypoint;  
 800ab94:	88bb      	ldrh	r3, [r7, #4]
 800ab96:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800ab98:	e022      	b.n	800abe0 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Ypoint - 1;
 800ab9a:	4b8b      	ldr	r3, [pc, #556]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ab9c:	891a      	ldrh	r2, [r3, #8]
 800ab9e:	88bb      	ldrh	r3, [r7, #4]
 800aba0:	1ad3      	subs	r3, r2, r3
 800aba2:	b29b      	uxth	r3, r3
 800aba4:	3b01      	subs	r3, #1
 800aba6:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Xpoint;
 800aba8:	88fb      	ldrh	r3, [r7, #6]
 800abaa:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800abac:	e018      	b.n	800abe0 <Paint_SetPixel+0xa4>
        X = Paint.WidthMemory - Xpoint - 1;
 800abae:	4b86      	ldr	r3, [pc, #536]	; (800adc8 <Paint_SetPixel+0x28c>)
 800abb0:	891a      	ldrh	r2, [r3, #8]
 800abb2:	88fb      	ldrh	r3, [r7, #6]
 800abb4:	1ad3      	subs	r3, r2, r3
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	3b01      	subs	r3, #1
 800abba:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Ypoint - 1;
 800abbc:	4b82      	ldr	r3, [pc, #520]	; (800adc8 <Paint_SetPixel+0x28c>)
 800abbe:	895a      	ldrh	r2, [r3, #10]
 800abc0:	88bb      	ldrh	r3, [r7, #4]
 800abc2:	1ad3      	subs	r3, r2, r3
 800abc4:	b29b      	uxth	r3, r3
 800abc6:	3b01      	subs	r3, #1
 800abc8:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800abca:	e009      	b.n	800abe0 <Paint_SetPixel+0xa4>
        X = Ypoint;
 800abcc:	88bb      	ldrh	r3, [r7, #4]
 800abce:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Xpoint - 1;
 800abd0:	4b7d      	ldr	r3, [pc, #500]	; (800adc8 <Paint_SetPixel+0x28c>)
 800abd2:	895a      	ldrh	r2, [r3, #10]
 800abd4:	88fb      	ldrh	r3, [r7, #6]
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	b29b      	uxth	r3, r3
 800abda:	3b01      	subs	r3, #1
 800abdc:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800abde:	bf00      	nop
    }
    
    switch(Paint.Mirror) {
 800abe0:	4b79      	ldr	r3, [pc, #484]	; (800adc8 <Paint_SetPixel+0x28c>)
 800abe2:	8a1b      	ldrh	r3, [r3, #16]
 800abe4:	2b03      	cmp	r3, #3
 800abe6:	f200 8114 	bhi.w	800ae12 <Paint_SetPixel+0x2d6>
 800abea:	a201      	add	r2, pc, #4	; (adr r2, 800abf0 <Paint_SetPixel+0xb4>)
 800abec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abf0:	0800ac3f 	.word	0x0800ac3f
 800abf4:	0800ac01 	.word	0x0800ac01
 800abf8:	0800ac11 	.word	0x0800ac11
 800abfc:	0800ac21 	.word	0x0800ac21
    case MIRROR_NONE:
        break;
    case MIRROR_HORIZONTAL:
        X = Paint.WidthMemory - X - 1;
 800ac00:	4b71      	ldr	r3, [pc, #452]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ac02:	891a      	ldrh	r2, [r3, #8]
 800ac04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac06:	1ad3      	subs	r3, r2, r3
 800ac08:	b29b      	uxth	r3, r3
 800ac0a:	3b01      	subs	r3, #1
 800ac0c:	84fb      	strh	r3, [r7, #38]	; 0x26
        break;
 800ac0e:	e017      	b.n	800ac40 <Paint_SetPixel+0x104>
    case MIRROR_VERTICAL:
        Y = Paint.HeightMemory - Y - 1;
 800ac10:	4b6d      	ldr	r3, [pc, #436]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ac12:	895a      	ldrh	r2, [r3, #10]
 800ac14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800ac1e:	e00f      	b.n	800ac40 <Paint_SetPixel+0x104>
    case MIRROR_ORIGIN:
        X = Paint.WidthMemory - X - 1;
 800ac20:	4b69      	ldr	r3, [pc, #420]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ac22:	891a      	ldrh	r2, [r3, #8]
 800ac24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac26:	1ad3      	subs	r3, r2, r3
 800ac28:	b29b      	uxth	r3, r3
 800ac2a:	3b01      	subs	r3, #1
 800ac2c:	84fb      	strh	r3, [r7, #38]	; 0x26
        Y = Paint.HeightMemory - Y - 1;
 800ac2e:	4b66      	ldr	r3, [pc, #408]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ac30:	895a      	ldrh	r2, [r3, #10]
 800ac32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	3b01      	subs	r3, #1
 800ac3a:	84bb      	strh	r3, [r7, #36]	; 0x24
        break;
 800ac3c:	e000      	b.n	800ac40 <Paint_SetPixel+0x104>
        break;
 800ac3e:	bf00      	nop
    default:
        return;
    }

    if(X > Paint.WidthMemory || Y > Paint.HeightMemory){
 800ac40:	4b61      	ldr	r3, [pc, #388]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ac42:	891b      	ldrh	r3, [r3, #8]
 800ac44:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ac46:	429a      	cmp	r2, r3
 800ac48:	d804      	bhi.n	800ac54 <Paint_SetPixel+0x118>
 800ac4a:	4b5f      	ldr	r3, [pc, #380]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ac4c:	895b      	ldrh	r3, [r3, #10]
 800ac4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d903      	bls.n	800ac5c <Paint_SetPixel+0x120>
        Debug("Exceeding display boundaries\r\n");
 800ac54:	485d      	ldr	r0, [pc, #372]	; (800adcc <Paint_SetPixel+0x290>)
 800ac56:	f001 fda1 	bl	800c79c <puts>
        return;
 800ac5a:	e0db      	b.n	800ae14 <Paint_SetPixel+0x2d8>
    }
    
    if(Paint.Scale == 2){
 800ac5c:	4b5a      	ldr	r3, [pc, #360]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ac5e:	8adb      	ldrh	r3, [r3, #22]
 800ac60:	2b02      	cmp	r3, #2
 800ac62:	d139      	bne.n	800acd8 <Paint_SetPixel+0x19c>
        UDOUBLE Addr = X / 8 + Y * Paint.WidthByte;
 800ac64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac66:	08db      	lsrs	r3, r3, #3
 800ac68:	b29b      	uxth	r3, r3
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ac6e:	4a56      	ldr	r2, [pc, #344]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ac70:	8a52      	ldrh	r2, [r2, #18]
 800ac72:	fb02 f303 	mul.w	r3, r2, r3
 800ac76:	440b      	add	r3, r1
 800ac78:	60fb      	str	r3, [r7, #12]
        UBYTE Rdata = Paint.Image[Addr];
 800ac7a:	4b53      	ldr	r3, [pc, #332]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ac7c:	681a      	ldr	r2, [r3, #0]
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	4413      	add	r3, r2
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	72fb      	strb	r3, [r7, #11]
        if(Color == BLACK)
 800ac86:	887b      	ldrh	r3, [r7, #2]
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d113      	bne.n	800acb4 <Paint_SetPixel+0x178>
            Paint.Image[Addr] = Rdata & ~(0x80 >> (X % 8));
 800ac8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ac8e:	f003 0307 	and.w	r3, r3, #7
 800ac92:	2280      	movs	r2, #128	; 0x80
 800ac94:	fa42 f303 	asr.w	r3, r2, r3
 800ac98:	b25b      	sxtb	r3, r3
 800ac9a:	43db      	mvns	r3, r3
 800ac9c:	b25a      	sxtb	r2, r3
 800ac9e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800aca2:	4013      	ands	r3, r2
 800aca4:	b259      	sxtb	r1, r3
 800aca6:	4b48      	ldr	r3, [pc, #288]	; (800adc8 <Paint_SetPixel+0x28c>)
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	4413      	add	r3, r2
 800acae:	b2ca      	uxtb	r2, r1
 800acb0:	701a      	strb	r2, [r3, #0]
 800acb2:	e0af      	b.n	800ae14 <Paint_SetPixel+0x2d8>
        else
            Paint.Image[Addr] = Rdata | (0x80 >> (X % 8));
 800acb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800acb6:	f003 0307 	and.w	r3, r3, #7
 800acba:	2280      	movs	r2, #128	; 0x80
 800acbc:	fa42 f303 	asr.w	r3, r2, r3
 800acc0:	b25a      	sxtb	r2, r3
 800acc2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	b259      	sxtb	r1, r3
 800acca:	4b3f      	ldr	r3, [pc, #252]	; (800adc8 <Paint_SetPixel+0x28c>)
 800accc:	681a      	ldr	r2, [r3, #0]
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	4413      	add	r3, r2
 800acd2:	b2ca      	uxtb	r2, r1
 800acd4:	701a      	strb	r2, [r3, #0]
 800acd6:	e09d      	b.n	800ae14 <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 4){
 800acd8:	4b3b      	ldr	r3, [pc, #236]	; (800adc8 <Paint_SetPixel+0x28c>)
 800acda:	8adb      	ldrh	r3, [r3, #22]
 800acdc:	2b04      	cmp	r3, #4
 800acde:	d137      	bne.n	800ad50 <Paint_SetPixel+0x214>
        UDOUBLE Addr = X / 4 + Y * Paint.WidthByte;
 800ace0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ace2:	089b      	lsrs	r3, r3, #2
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	4619      	mov	r1, r3
 800ace8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800acea:	4a37      	ldr	r2, [pc, #220]	; (800adc8 <Paint_SetPixel+0x28c>)
 800acec:	8a52      	ldrh	r2, [r2, #18]
 800acee:	fb02 f303 	mul.w	r3, r2, r3
 800acf2:	440b      	add	r3, r1
 800acf4:	617b      	str	r3, [r7, #20]
        Color = Color % 4;//Guaranteed color scale is 4  --- 0~3
 800acf6:	887b      	ldrh	r3, [r7, #2]
 800acf8:	f003 0303 	and.w	r3, r3, #3
 800acfc:	807b      	strh	r3, [r7, #2]
        UBYTE Rdata = Paint.Image[Addr];
 800acfe:	4b32      	ldr	r3, [pc, #200]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	697b      	ldr	r3, [r7, #20]
 800ad04:	4413      	add	r3, r2
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	74fb      	strb	r3, [r7, #19]
        
        Rdata = Rdata & (~(0xC0 >> ((X % 4)*2)));
 800ad0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad0c:	f003 0303 	and.w	r3, r3, #3
 800ad10:	005b      	lsls	r3, r3, #1
 800ad12:	22c0      	movs	r2, #192	; 0xc0
 800ad14:	fa42 f303 	asr.w	r3, r2, r3
 800ad18:	b25b      	sxtb	r3, r3
 800ad1a:	43db      	mvns	r3, r3
 800ad1c:	b25a      	sxtb	r2, r3
 800ad1e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad22:	4013      	ands	r3, r2
 800ad24:	b25b      	sxtb	r3, r3
 800ad26:	74fb      	strb	r3, [r7, #19]
        Paint.Image[Addr] = Rdata | ((Color << 6) >> ((X % 4)*2));
 800ad28:	887b      	ldrh	r3, [r7, #2]
 800ad2a:	019a      	lsls	r2, r3, #6
 800ad2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad2e:	f003 0303 	and.w	r3, r3, #3
 800ad32:	005b      	lsls	r3, r3, #1
 800ad34:	fa42 f303 	asr.w	r3, r2, r3
 800ad38:	b25a      	sxtb	r2, r3
 800ad3a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ad3e:	4313      	orrs	r3, r2
 800ad40:	b259      	sxtb	r1, r3
 800ad42:	4b21      	ldr	r3, [pc, #132]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ad44:	681a      	ldr	r2, [r3, #0]
 800ad46:	697b      	ldr	r3, [r7, #20]
 800ad48:	4413      	add	r3, r2
 800ad4a:	b2ca      	uxtb	r2, r1
 800ad4c:	701a      	strb	r2, [r3, #0]
 800ad4e:	e061      	b.n	800ae14 <Paint_SetPixel+0x2d8>
    }else if(Paint.Scale == 16) {
 800ad50:	4b1d      	ldr	r3, [pc, #116]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ad52:	8adb      	ldrh	r3, [r3, #22]
 800ad54:	2b10      	cmp	r3, #16
 800ad56:	d13b      	bne.n	800add0 <Paint_SetPixel+0x294>
        UDOUBLE Addr = X / 2 + Y * Paint.WidthByte;
 800ad58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad5a:	085b      	lsrs	r3, r3, #1
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	4619      	mov	r1, r3
 800ad60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ad62:	4a19      	ldr	r2, [pc, #100]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ad64:	8a52      	ldrh	r2, [r2, #18]
 800ad66:	fb02 f303 	mul.w	r3, r2, r3
 800ad6a:	440b      	add	r3, r1
 800ad6c:	61fb      	str	r3, [r7, #28]
        UBYTE Rdata = Paint.Image[Addr];
 800ad6e:	4b16      	ldr	r3, [pc, #88]	; (800adc8 <Paint_SetPixel+0x28c>)
 800ad70:	681a      	ldr	r2, [r3, #0]
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	4413      	add	r3, r2
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	76fb      	strb	r3, [r7, #27]
        Color = Color % 16;
 800ad7a:	887b      	ldrh	r3, [r7, #2]
 800ad7c:	f003 030f 	and.w	r3, r3, #15
 800ad80:	807b      	strh	r3, [r7, #2]
        Rdata = Rdata & (~(0xf0 >> ((X % 2)*4)));
 800ad82:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ad84:	f003 0301 	and.w	r3, r3, #1
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	22f0      	movs	r2, #240	; 0xf0
 800ad8c:	fa42 f303 	asr.w	r3, r2, r3
 800ad90:	b25b      	sxtb	r3, r3
 800ad92:	43db      	mvns	r3, r3
 800ad94:	b25a      	sxtb	r2, r3
 800ad96:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	b25b      	sxtb	r3, r3
 800ad9e:	76fb      	strb	r3, [r7, #27]
        Paint.Image[Addr] = Rdata | ((Color << 4) >> ((X % 2)*4));
 800ada0:	887b      	ldrh	r3, [r7, #2]
 800ada2:	011a      	lsls	r2, r3, #4
 800ada4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	fa42 f303 	asr.w	r3, r2, r3
 800adb0:	b25a      	sxtb	r2, r3
 800adb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800adb6:	4313      	orrs	r3, r2
 800adb8:	b259      	sxtb	r1, r3
 800adba:	4b03      	ldr	r3, [pc, #12]	; (800adc8 <Paint_SetPixel+0x28c>)
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	69fb      	ldr	r3, [r7, #28]
 800adc0:	4413      	add	r3, r2
 800adc2:	b2ca      	uxtb	r2, r1
 800adc4:	701a      	strb	r2, [r3, #0]
 800adc6:	e025      	b.n	800ae14 <Paint_SetPixel+0x2d8>
 800adc8:	20000a20 	.word	0x20000a20
 800adcc:	0800f978 	.word	0x0800f978
    }else if(Paint.Scale == 65) {
 800add0:	4b12      	ldr	r3, [pc, #72]	; (800ae1c <Paint_SetPixel+0x2e0>)
 800add2:	8adb      	ldrh	r3, [r3, #22]
 800add4:	2b41      	cmp	r3, #65	; 0x41
 800add6:	d11d      	bne.n	800ae14 <Paint_SetPixel+0x2d8>
        UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800add8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800adda:	005a      	lsls	r2, r3, #1
 800addc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800adde:	490f      	ldr	r1, [pc, #60]	; (800ae1c <Paint_SetPixel+0x2e0>)
 800ade0:	8a49      	ldrh	r1, [r1, #18]
 800ade2:	fb01 f303 	mul.w	r3, r1, r3
 800ade6:	4413      	add	r3, r2
 800ade8:	623b      	str	r3, [r7, #32]
        Paint.Image[Addr] = 0xff & (Color>>8);
 800adea:	887b      	ldrh	r3, [r7, #2]
 800adec:	0a1b      	lsrs	r3, r3, #8
 800adee:	b299      	uxth	r1, r3
 800adf0:	4b0a      	ldr	r3, [pc, #40]	; (800ae1c <Paint_SetPixel+0x2e0>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	6a3b      	ldr	r3, [r7, #32]
 800adf6:	4413      	add	r3, r2
 800adf8:	b2ca      	uxtb	r2, r1
 800adfa:	701a      	strb	r2, [r3, #0]
        Paint.Image[Addr+1] = 0xff & Color;
 800adfc:	4b07      	ldr	r3, [pc, #28]	; (800ae1c <Paint_SetPixel+0x2e0>)
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	6a3b      	ldr	r3, [r7, #32]
 800ae02:	3301      	adds	r3, #1
 800ae04:	4413      	add	r3, r2
 800ae06:	887a      	ldrh	r2, [r7, #2]
 800ae08:	b2d2      	uxtb	r2, r2
 800ae0a:	701a      	strb	r2, [r3, #0]
 800ae0c:	e002      	b.n	800ae14 <Paint_SetPixel+0x2d8>
        return;
 800ae0e:	bf00      	nop
 800ae10:	e000      	b.n	800ae14 <Paint_SetPixel+0x2d8>
        return;
 800ae12:	bf00      	nop
    }
}
 800ae14:	3728      	adds	r7, #40	; 0x28
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	20000a20 	.word	0x20000a20

0800ae20 <Paint_Clear>:
function: Clear the color of the picture
parameter:
    Color : Painted colors
******************************************************************************/
void Paint_Clear(UWORD Color)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b089      	sub	sp, #36	; 0x24
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	4603      	mov	r3, r0
 800ae28:	80fb      	strh	r3, [r7, #6]
    if(Paint.Scale == 2 || Paint.Scale == 4) {
 800ae2a:	4b51      	ldr	r3, [pc, #324]	; (800af70 <Paint_Clear+0x150>)
 800ae2c:	8adb      	ldrh	r3, [r3, #22]
 800ae2e:	2b02      	cmp	r3, #2
 800ae30:	d003      	beq.n	800ae3a <Paint_Clear+0x1a>
 800ae32:	4b4f      	ldr	r3, [pc, #316]	; (800af70 <Paint_Clear+0x150>)
 800ae34:	8adb      	ldrh	r3, [r3, #22]
 800ae36:	2b04      	cmp	r3, #4
 800ae38:	d125      	bne.n	800ae86 <Paint_Clear+0x66>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	83fb      	strh	r3, [r7, #30]
 800ae3e:	e01c      	b.n	800ae7a <Paint_Clear+0x5a>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800ae40:	2300      	movs	r3, #0
 800ae42:	83bb      	strh	r3, [r7, #28]
 800ae44:	e011      	b.n	800ae6a <Paint_Clear+0x4a>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800ae46:	8bba      	ldrh	r2, [r7, #28]
 800ae48:	8bfb      	ldrh	r3, [r7, #30]
 800ae4a:	4949      	ldr	r1, [pc, #292]	; (800af70 <Paint_Clear+0x150>)
 800ae4c:	8a49      	ldrh	r1, [r1, #18]
 800ae4e:	fb01 f303 	mul.w	r3, r1, r3
 800ae52:	4413      	add	r3, r2
 800ae54:	60bb      	str	r3, [r7, #8]
                Paint.Image[Addr] = Color;
 800ae56:	4b46      	ldr	r3, [pc, #280]	; (800af70 <Paint_Clear+0x150>)
 800ae58:	681a      	ldr	r2, [r3, #0]
 800ae5a:	68bb      	ldr	r3, [r7, #8]
 800ae5c:	4413      	add	r3, r2
 800ae5e:	88fa      	ldrh	r2, [r7, #6]
 800ae60:	b2d2      	uxtb	r2, r2
 800ae62:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800ae64:	8bbb      	ldrh	r3, [r7, #28]
 800ae66:	3301      	adds	r3, #1
 800ae68:	83bb      	strh	r3, [r7, #28]
 800ae6a:	4b41      	ldr	r3, [pc, #260]	; (800af70 <Paint_Clear+0x150>)
 800ae6c:	8a5b      	ldrh	r3, [r3, #18]
 800ae6e:	8bba      	ldrh	r2, [r7, #28]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d3e8      	bcc.n	800ae46 <Paint_Clear+0x26>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800ae74:	8bfb      	ldrh	r3, [r7, #30]
 800ae76:	3301      	adds	r3, #1
 800ae78:	83fb      	strh	r3, [r7, #30]
 800ae7a:	4b3d      	ldr	r3, [pc, #244]	; (800af70 <Paint_Clear+0x150>)
 800ae7c:	8a9b      	ldrh	r3, [r3, #20]
 800ae7e:	8bfa      	ldrh	r2, [r7, #30]
 800ae80:	429a      	cmp	r2, r3
 800ae82:	d3dd      	bcc.n	800ae40 <Paint_Clear+0x20>
 800ae84:	e06e      	b.n	800af64 <Paint_Clear+0x144>
            }
        }
    }else if(Paint.Scale == 16) {
 800ae86:	4b3a      	ldr	r3, [pc, #232]	; (800af70 <Paint_Clear+0x150>)
 800ae88:	8adb      	ldrh	r3, [r3, #22]
 800ae8a:	2b10      	cmp	r3, #16
 800ae8c:	d12f      	bne.n	800aeee <Paint_Clear+0xce>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800ae8e:	2300      	movs	r3, #0
 800ae90:	837b      	strh	r3, [r7, #26]
 800ae92:	e026      	b.n	800aee2 <Paint_Clear+0xc2>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800ae94:	2300      	movs	r3, #0
 800ae96:	833b      	strh	r3, [r7, #24]
 800ae98:	e01b      	b.n	800aed2 <Paint_Clear+0xb2>
                UDOUBLE Addr = X + Y*Paint.WidthByte;
 800ae9a:	8b3a      	ldrh	r2, [r7, #24]
 800ae9c:	8b7b      	ldrh	r3, [r7, #26]
 800ae9e:	4934      	ldr	r1, [pc, #208]	; (800af70 <Paint_Clear+0x150>)
 800aea0:	8a49      	ldrh	r1, [r1, #18]
 800aea2:	fb01 f303 	mul.w	r3, r1, r3
 800aea6:	4413      	add	r3, r2
 800aea8:	60fb      	str	r3, [r7, #12]
                Color = Color & 0x0f;
 800aeaa:	88fb      	ldrh	r3, [r7, #6]
 800aeac:	f003 030f 	and.w	r3, r3, #15
 800aeb0:	80fb      	strh	r3, [r7, #6]
                Paint.Image[Addr] = (Color<<4) | Color;
 800aeb2:	88fb      	ldrh	r3, [r7, #6]
 800aeb4:	011b      	lsls	r3, r3, #4
 800aeb6:	b25a      	sxtb	r2, r3
 800aeb8:	88fb      	ldrh	r3, [r7, #6]
 800aeba:	b25b      	sxtb	r3, r3
 800aebc:	4313      	orrs	r3, r2
 800aebe:	b259      	sxtb	r1, r3
 800aec0:	4b2b      	ldr	r3, [pc, #172]	; (800af70 <Paint_Clear+0x150>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	4413      	add	r3, r2
 800aec8:	b2ca      	uxtb	r2, r1
 800aeca:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800aecc:	8b3b      	ldrh	r3, [r7, #24]
 800aece:	3301      	adds	r3, #1
 800aed0:	833b      	strh	r3, [r7, #24]
 800aed2:	4b27      	ldr	r3, [pc, #156]	; (800af70 <Paint_Clear+0x150>)
 800aed4:	8a5b      	ldrh	r3, [r3, #18]
 800aed6:	8b3a      	ldrh	r2, [r7, #24]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d3de      	bcc.n	800ae9a <Paint_Clear+0x7a>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800aedc:	8b7b      	ldrh	r3, [r7, #26]
 800aede:	3301      	adds	r3, #1
 800aee0:	837b      	strh	r3, [r7, #26]
 800aee2:	4b23      	ldr	r3, [pc, #140]	; (800af70 <Paint_Clear+0x150>)
 800aee4:	8a9b      	ldrh	r3, [r3, #20]
 800aee6:	8b7a      	ldrh	r2, [r7, #26]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d3d3      	bcc.n	800ae94 <Paint_Clear+0x74>
                Paint.Image[Addr] = 0x0f & (Color>>8);
                Paint.Image[Addr+1] = 0x0f & Color;
            }
        }
    }
}
 800aeec:	e03a      	b.n	800af64 <Paint_Clear+0x144>
    }else if(Paint.Scale == 65) {
 800aeee:	4b20      	ldr	r3, [pc, #128]	; (800af70 <Paint_Clear+0x150>)
 800aef0:	8adb      	ldrh	r3, [r3, #22]
 800aef2:	2b41      	cmp	r3, #65	; 0x41
 800aef4:	d136      	bne.n	800af64 <Paint_Clear+0x144>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800aef6:	2300      	movs	r3, #0
 800aef8:	82fb      	strh	r3, [r7, #22]
 800aefa:	e02d      	b.n	800af58 <Paint_Clear+0x138>
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800aefc:	2300      	movs	r3, #0
 800aefe:	82bb      	strh	r3, [r7, #20]
 800af00:	e022      	b.n	800af48 <Paint_Clear+0x128>
                UDOUBLE Addr = X*2 + Y*Paint.WidthByte;
 800af02:	8abb      	ldrh	r3, [r7, #20]
 800af04:	005a      	lsls	r2, r3, #1
 800af06:	8afb      	ldrh	r3, [r7, #22]
 800af08:	4919      	ldr	r1, [pc, #100]	; (800af70 <Paint_Clear+0x150>)
 800af0a:	8a49      	ldrh	r1, [r1, #18]
 800af0c:	fb01 f303 	mul.w	r3, r1, r3
 800af10:	4413      	add	r3, r2
 800af12:	613b      	str	r3, [r7, #16]
                Paint.Image[Addr] = 0x0f & (Color>>8);
 800af14:	88fb      	ldrh	r3, [r7, #6]
 800af16:	0a1b      	lsrs	r3, r3, #8
 800af18:	b29b      	uxth	r3, r3
 800af1a:	b2da      	uxtb	r2, r3
 800af1c:	4b14      	ldr	r3, [pc, #80]	; (800af70 <Paint_Clear+0x150>)
 800af1e:	6819      	ldr	r1, [r3, #0]
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	440b      	add	r3, r1
 800af24:	f002 020f 	and.w	r2, r2, #15
 800af28:	b2d2      	uxtb	r2, r2
 800af2a:	701a      	strb	r2, [r3, #0]
                Paint.Image[Addr+1] = 0x0f & Color;
 800af2c:	88fb      	ldrh	r3, [r7, #6]
 800af2e:	b2da      	uxtb	r2, r3
 800af30:	4b0f      	ldr	r3, [pc, #60]	; (800af70 <Paint_Clear+0x150>)
 800af32:	6819      	ldr	r1, [r3, #0]
 800af34:	693b      	ldr	r3, [r7, #16]
 800af36:	3301      	adds	r3, #1
 800af38:	440b      	add	r3, r1
 800af3a:	f002 020f 	and.w	r2, r2, #15
 800af3e:	b2d2      	uxtb	r2, r2
 800af40:	701a      	strb	r2, [r3, #0]
            for (UWORD X = 0; X < Paint.WidthByte; X++ ) {//8 pixel =  1 byte
 800af42:	8abb      	ldrh	r3, [r7, #20]
 800af44:	3301      	adds	r3, #1
 800af46:	82bb      	strh	r3, [r7, #20]
 800af48:	4b09      	ldr	r3, [pc, #36]	; (800af70 <Paint_Clear+0x150>)
 800af4a:	8a5b      	ldrh	r3, [r3, #18]
 800af4c:	8aba      	ldrh	r2, [r7, #20]
 800af4e:	429a      	cmp	r2, r3
 800af50:	d3d7      	bcc.n	800af02 <Paint_Clear+0xe2>
        for (UWORD Y = 0; Y < Paint.HeightByte; Y++) {
 800af52:	8afb      	ldrh	r3, [r7, #22]
 800af54:	3301      	adds	r3, #1
 800af56:	82fb      	strh	r3, [r7, #22]
 800af58:	4b05      	ldr	r3, [pc, #20]	; (800af70 <Paint_Clear+0x150>)
 800af5a:	8a9b      	ldrh	r3, [r3, #20]
 800af5c:	8afa      	ldrh	r2, [r7, #22]
 800af5e:	429a      	cmp	r2, r3
 800af60:	d3cc      	bcc.n	800aefc <Paint_Clear+0xdc>
}
 800af62:	e7ff      	b.n	800af64 <Paint_Clear+0x144>
 800af64:	bf00      	nop
 800af66:	3724      	adds	r7, #36	; 0x24
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	20000a20 	.word	0x20000a20

0800af74 <Paint_DrawPoint>:
    Dot_Pixel	: point size
    Dot_Style	: point Style
******************************************************************************/
void Paint_DrawPoint(UWORD Xpoint, UWORD Ypoint, UWORD Color,
                     DOT_PIXEL Dot_Pixel, DOT_STYLE Dot_Style)
{
 800af74:	b590      	push	{r4, r7, lr}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	4604      	mov	r4, r0
 800af7c:	4608      	mov	r0, r1
 800af7e:	4611      	mov	r1, r2
 800af80:	461a      	mov	r2, r3
 800af82:	4623      	mov	r3, r4
 800af84:	80fb      	strh	r3, [r7, #6]
 800af86:	4603      	mov	r3, r0
 800af88:	80bb      	strh	r3, [r7, #4]
 800af8a:	460b      	mov	r3, r1
 800af8c:	807b      	strh	r3, [r7, #2]
 800af8e:	4613      	mov	r3, r2
 800af90:	707b      	strb	r3, [r7, #1]
    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800af92:	4b4a      	ldr	r3, [pc, #296]	; (800b0bc <Paint_DrawPoint+0x148>)
 800af94:	889b      	ldrh	r3, [r3, #4]
 800af96:	88fa      	ldrh	r2, [r7, #6]
 800af98:	429a      	cmp	r2, r3
 800af9a:	d804      	bhi.n	800afa6 <Paint_DrawPoint+0x32>
 800af9c:	4b47      	ldr	r3, [pc, #284]	; (800b0bc <Paint_DrawPoint+0x148>)
 800af9e:	88db      	ldrh	r3, [r3, #6]
 800afa0:	88ba      	ldrh	r2, [r7, #4]
 800afa2:	429a      	cmp	r2, r3
 800afa4:	d911      	bls.n	800afca <Paint_DrawPoint+0x56>
        Debug("Paint_DrawPoint Input exceeds the normal display range\r\n");
 800afa6:	4846      	ldr	r0, [pc, #280]	; (800b0c0 <Paint_DrawPoint+0x14c>)
 800afa8:	f001 fbf8 	bl	800c79c <puts>
				printf("Xpoint = %d , Paint.Width = %d  \r\n ",Xpoint,Paint.Width);
 800afac:	88fb      	ldrh	r3, [r7, #6]
 800afae:	4a43      	ldr	r2, [pc, #268]	; (800b0bc <Paint_DrawPoint+0x148>)
 800afb0:	8892      	ldrh	r2, [r2, #4]
 800afb2:	4619      	mov	r1, r3
 800afb4:	4843      	ldr	r0, [pc, #268]	; (800b0c4 <Paint_DrawPoint+0x150>)
 800afb6:	f001 fb8b 	bl	800c6d0 <iprintf>
				printf("Ypoint = %d , Paint.Height = %d  \r\n ",Ypoint,Paint.Height);
 800afba:	88bb      	ldrh	r3, [r7, #4]
 800afbc:	4a3f      	ldr	r2, [pc, #252]	; (800b0bc <Paint_DrawPoint+0x148>)
 800afbe:	88d2      	ldrh	r2, [r2, #6]
 800afc0:	4619      	mov	r1, r3
 800afc2:	4841      	ldr	r0, [pc, #260]	; (800b0c8 <Paint_DrawPoint+0x154>)
 800afc4:	f001 fb84 	bl	800c6d0 <iprintf>
        return;
 800afc8:	e074      	b.n	800b0b4 <Paint_DrawPoint+0x140>
    }

    int16_t XDir_Num , YDir_Num;
    if (Dot_Style == DOT_FILL_AROUND) {
 800afca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800afce:	2b01      	cmp	r3, #1
 800afd0:	d144      	bne.n	800b05c <Paint_DrawPoint+0xe8>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800afd2:	2300      	movs	r3, #0
 800afd4:	81fb      	strh	r3, [r7, #14]
 800afd6:	e039      	b.n	800b04c <Paint_DrawPoint+0xd8>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800afd8:	2300      	movs	r3, #0
 800afda:	81bb      	strh	r3, [r7, #12]
 800afdc:	e029      	b.n	800b032 <Paint_DrawPoint+0xbe>
                if(Xpoint + XDir_Num - Dot_Pixel < 0 || Ypoint + YDir_Num - Dot_Pixel < 0)
 800afde:	88fa      	ldrh	r2, [r7, #6]
 800afe0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800afe4:	441a      	add	r2, r3
 800afe6:	787b      	ldrb	r3, [r7, #1]
 800afe8:	1ad3      	subs	r3, r2, r3
 800afea:	2b00      	cmp	r3, #0
 800afec:	db28      	blt.n	800b040 <Paint_DrawPoint+0xcc>
 800afee:	88ba      	ldrh	r2, [r7, #4]
 800aff0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aff4:	441a      	add	r2, r3
 800aff6:	787b      	ldrb	r3, [r7, #1]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	2b00      	cmp	r3, #0
 800affc:	db20      	blt.n	800b040 <Paint_DrawPoint+0xcc>
                    break;
                // printf("x = %d, y = %d\r\n", Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel);
                Paint_SetPixel(Xpoint + XDir_Num - Dot_Pixel, Ypoint + YDir_Num - Dot_Pixel, Color);
 800affe:	89fa      	ldrh	r2, [r7, #14]
 800b000:	88fb      	ldrh	r3, [r7, #6]
 800b002:	4413      	add	r3, r2
 800b004:	b29a      	uxth	r2, r3
 800b006:	787b      	ldrb	r3, [r7, #1]
 800b008:	b29b      	uxth	r3, r3
 800b00a:	1ad3      	subs	r3, r2, r3
 800b00c:	b298      	uxth	r0, r3
 800b00e:	89ba      	ldrh	r2, [r7, #12]
 800b010:	88bb      	ldrh	r3, [r7, #4]
 800b012:	4413      	add	r3, r2
 800b014:	b29a      	uxth	r2, r3
 800b016:	787b      	ldrb	r3, [r7, #1]
 800b018:	b29b      	uxth	r3, r3
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	887a      	ldrh	r2, [r7, #2]
 800b020:	4619      	mov	r1, r3
 800b022:	f7ff fd8b 	bl	800ab3c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num < 2 * Dot_Pixel - 1; YDir_Num++) {
 800b026:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	3301      	adds	r3, #1
 800b02e:	b29b      	uxth	r3, r3
 800b030:	81bb      	strh	r3, [r7, #12]
 800b032:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b036:	787b      	ldrb	r3, [r7, #1]
 800b038:	005b      	lsls	r3, r3, #1
 800b03a:	3b01      	subs	r3, #1
 800b03c:	429a      	cmp	r2, r3
 800b03e:	dbce      	blt.n	800afde <Paint_DrawPoint+0x6a>
        for (XDir_Num = 0; XDir_Num < 2 * Dot_Pixel - 1; XDir_Num++) {
 800b040:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b044:	b29b      	uxth	r3, r3
 800b046:	3301      	adds	r3, #1
 800b048:	b29b      	uxth	r3, r3
 800b04a:	81fb      	strh	r3, [r7, #14]
 800b04c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b050:	787b      	ldrb	r3, [r7, #1]
 800b052:	005b      	lsls	r3, r3, #1
 800b054:	3b01      	subs	r3, #1
 800b056:	429a      	cmp	r2, r3
 800b058:	dbbe      	blt.n	800afd8 <Paint_DrawPoint+0x64>
 800b05a:	e02b      	b.n	800b0b4 <Paint_DrawPoint+0x140>
            }
        }
    } else {
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800b05c:	2300      	movs	r3, #0
 800b05e:	81fb      	strh	r3, [r7, #14]
 800b060:	e023      	b.n	800b0aa <Paint_DrawPoint+0x136>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800b062:	2300      	movs	r3, #0
 800b064:	81bb      	strh	r3, [r7, #12]
 800b066:	e015      	b.n	800b094 <Paint_DrawPoint+0x120>
                Paint_SetPixel(Xpoint + XDir_Num - 1, Ypoint + YDir_Num - 1, Color);
 800b068:	89fa      	ldrh	r2, [r7, #14]
 800b06a:	88fb      	ldrh	r3, [r7, #6]
 800b06c:	4413      	add	r3, r2
 800b06e:	b29b      	uxth	r3, r3
 800b070:	3b01      	subs	r3, #1
 800b072:	b298      	uxth	r0, r3
 800b074:	89ba      	ldrh	r2, [r7, #12]
 800b076:	88bb      	ldrh	r3, [r7, #4]
 800b078:	4413      	add	r3, r2
 800b07a:	b29b      	uxth	r3, r3
 800b07c:	3b01      	subs	r3, #1
 800b07e:	b29b      	uxth	r3, r3
 800b080:	887a      	ldrh	r2, [r7, #2]
 800b082:	4619      	mov	r1, r3
 800b084:	f7ff fd5a 	bl	800ab3c <Paint_SetPixel>
            for (YDir_Num = 0; YDir_Num <  Dot_Pixel; YDir_Num++) {
 800b088:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b08c:	b29b      	uxth	r3, r3
 800b08e:	3301      	adds	r3, #1
 800b090:	b29b      	uxth	r3, r3
 800b092:	81bb      	strh	r3, [r7, #12]
 800b094:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800b098:	787b      	ldrb	r3, [r7, #1]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	dbe4      	blt.n	800b068 <Paint_DrawPoint+0xf4>
        for (XDir_Num = 0; XDir_Num <  Dot_Pixel; XDir_Num++) {
 800b09e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	b29b      	uxth	r3, r3
 800b0a8:	81fb      	strh	r3, [r7, #14]
 800b0aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b0ae:	787b      	ldrb	r3, [r7, #1]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	dbd6      	blt.n	800b062 <Paint_DrawPoint+0xee>
            }
        }
    }
}
 800b0b4:	3714      	adds	r7, #20
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd90      	pop	{r4, r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20000a20 	.word	0x20000a20
 800b0c0:	0800f9a0 	.word	0x0800f9a0
 800b0c4:	0800f9e0 	.word	0x0800f9e0
 800b0c8:	0800fa04 	.word	0x0800fa04

0800b0cc <Paint_DrawLine>:
    Line_width : Line width
    Line_Style: Solid and dotted lines
******************************************************************************/
void Paint_DrawLine(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                    UWORD Color, DOT_PIXEL Line_width, LINE_STYLE Line_Style)
{
 800b0cc:	b590      	push	{r4, r7, lr}
 800b0ce:	b08d      	sub	sp, #52	; 0x34
 800b0d0:	af02      	add	r7, sp, #8
 800b0d2:	4604      	mov	r4, r0
 800b0d4:	4608      	mov	r0, r1
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	461a      	mov	r2, r3
 800b0da:	4623      	mov	r3, r4
 800b0dc:	80fb      	strh	r3, [r7, #6]
 800b0de:	4603      	mov	r3, r0
 800b0e0:	80bb      	strh	r3, [r7, #4]
 800b0e2:	460b      	mov	r3, r1
 800b0e4:	807b      	strh	r3, [r7, #2]
 800b0e6:	4613      	mov	r3, r2
 800b0e8:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b0ea:	4b52      	ldr	r3, [pc, #328]	; (800b234 <Paint_DrawLine+0x168>)
 800b0ec:	889b      	ldrh	r3, [r3, #4]
 800b0ee:	88fa      	ldrh	r2, [r7, #6]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d80e      	bhi.n	800b112 <Paint_DrawLine+0x46>
 800b0f4:	4b4f      	ldr	r3, [pc, #316]	; (800b234 <Paint_DrawLine+0x168>)
 800b0f6:	88db      	ldrh	r3, [r3, #6]
 800b0f8:	88ba      	ldrh	r2, [r7, #4]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d809      	bhi.n	800b112 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b0fe:	4b4d      	ldr	r3, [pc, #308]	; (800b234 <Paint_DrawLine+0x168>)
 800b100:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b102:	887a      	ldrh	r2, [r7, #2]
 800b104:	429a      	cmp	r2, r3
 800b106:	d804      	bhi.n	800b112 <Paint_DrawLine+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b108:	4b4a      	ldr	r3, [pc, #296]	; (800b234 <Paint_DrawLine+0x168>)
 800b10a:	88db      	ldrh	r3, [r3, #6]
 800b10c:	883a      	ldrh	r2, [r7, #0]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d903      	bls.n	800b11a <Paint_DrawLine+0x4e>
        Debug("Paint_DrawLine Input exceeds the normal display range\r\n");
 800b112:	4849      	ldr	r0, [pc, #292]	; (800b238 <Paint_DrawLine+0x16c>)
 800b114:	f001 fb42 	bl	800c79c <puts>
        return;
 800b118:	e088      	b.n	800b22c <Paint_DrawLine+0x160>
    }

    UWORD Xpoint = Xstart;
 800b11a:	88fb      	ldrh	r3, [r7, #6]
 800b11c:	84fb      	strh	r3, [r7, #38]	; 0x26
    UWORD Ypoint = Ystart;
 800b11e:	88bb      	ldrh	r3, [r7, #4]
 800b120:	84bb      	strh	r3, [r7, #36]	; 0x24
    int dx = (int)Xend - (int)Xstart >= 0 ? Xend - Xstart : Xstart - Xend;
 800b122:	887a      	ldrh	r2, [r7, #2]
 800b124:	88fb      	ldrh	r3, [r7, #6]
 800b126:	1ad3      	subs	r3, r2, r3
 800b128:	2b00      	cmp	r3, #0
 800b12a:	bfb8      	it	lt
 800b12c:	425b      	neglt	r3, r3
 800b12e:	61bb      	str	r3, [r7, #24]
    int dy = (int)Yend - (int)Ystart <= 0 ? Yend - Ystart : Ystart - Yend;
 800b130:	883a      	ldrh	r2, [r7, #0]
 800b132:	88bb      	ldrh	r3, [r7, #4]
 800b134:	1ad3      	subs	r3, r2, r3
 800b136:	2b00      	cmp	r3, #0
 800b138:	bfb8      	it	lt
 800b13a:	425b      	neglt	r3, r3
 800b13c:	425b      	negs	r3, r3
 800b13e:	617b      	str	r3, [r7, #20]

    // Increment direction, 1 is positive, -1 is counter;
    int XAddway = Xstart < Xend ? 1 : -1;
 800b140:	88fa      	ldrh	r2, [r7, #6]
 800b142:	887b      	ldrh	r3, [r7, #2]
 800b144:	429a      	cmp	r2, r3
 800b146:	d201      	bcs.n	800b14c <Paint_DrawLine+0x80>
 800b148:	2301      	movs	r3, #1
 800b14a:	e001      	b.n	800b150 <Paint_DrawLine+0x84>
 800b14c:	f04f 33ff 	mov.w	r3, #4294967295
 800b150:	613b      	str	r3, [r7, #16]
    int YAddway = Ystart < Yend ? 1 : -1;
 800b152:	88ba      	ldrh	r2, [r7, #4]
 800b154:	883b      	ldrh	r3, [r7, #0]
 800b156:	429a      	cmp	r2, r3
 800b158:	d201      	bcs.n	800b15e <Paint_DrawLine+0x92>
 800b15a:	2301      	movs	r3, #1
 800b15c:	e001      	b.n	800b162 <Paint_DrawLine+0x96>
 800b15e:	f04f 33ff 	mov.w	r3, #4294967295
 800b162:	60fb      	str	r3, [r7, #12]

    //Cumulative error
    int Esp = dx + dy;
 800b164:	69ba      	ldr	r2, [r7, #24]
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	4413      	add	r3, r2
 800b16a:	623b      	str	r3, [r7, #32]
    char Dotted_Len = 0;
 800b16c:	2300      	movs	r3, #0
 800b16e:	77fb      	strb	r3, [r7, #31]

    for (;;) {
        Dotted_Len++;
 800b170:	7ffb      	ldrb	r3, [r7, #31]
 800b172:	3301      	adds	r3, #1
 800b174:	77fb      	strb	r3, [r7, #31]
        //Painted dotted line, 2 point is really virtual
        if (Line_Style == LINE_STYLE_DOTTED && Dotted_Len % 3 == 0) {
 800b176:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d125      	bne.n	800b1ca <Paint_DrawLine+0xfe>
 800b17e:	7ffa      	ldrb	r2, [r7, #31]
 800b180:	4b2e      	ldr	r3, [pc, #184]	; (800b23c <Paint_DrawLine+0x170>)
 800b182:	fba3 1302 	umull	r1, r3, r3, r2
 800b186:	0859      	lsrs	r1, r3, #1
 800b188:	460b      	mov	r3, r1
 800b18a:	005b      	lsls	r3, r3, #1
 800b18c:	440b      	add	r3, r1
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	b2db      	uxtb	r3, r3
 800b192:	2b00      	cmp	r3, #0
 800b194:	d119      	bne.n	800b1ca <Paint_DrawLine+0xfe>
            //Debug("LINE_DOTTED\r\n");
						if(Color)
 800b196:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d009      	beq.n	800b1b0 <Paint_DrawLine+0xe4>
							Paint_DrawPoint(Xpoint, Ypoint, BLACK, Line_width, DOT_STYLE_DFT);
 800b19c:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b1a0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b1a2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	9200      	str	r2, [sp, #0]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f7ff fee3 	bl	800af74 <Paint_DrawPoint>
 800b1ae:	e009      	b.n	800b1c4 <Paint_DrawLine+0xf8>
            else
							Paint_DrawPoint(Xpoint, Ypoint, WHITE, Line_width, DOT_STYLE_DFT);
 800b1b0:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b1b4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b1b6:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b1b8:	2201      	movs	r2, #1
 800b1ba:	9200      	str	r2, [sp, #0]
 800b1bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b1c0:	f7ff fed8 	bl	800af74 <Paint_DrawPoint>
            Dotted_Len = 0;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	77fb      	strb	r3, [r7, #31]
 800b1c8:	e008      	b.n	800b1dc <Paint_DrawLine+0x110>
        } else {
            Paint_DrawPoint(Xpoint, Ypoint, Color, Line_width, DOT_STYLE_DFT);
 800b1ca:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800b1ce:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b1d0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800b1d2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800b1d4:	2401      	movs	r4, #1
 800b1d6:	9400      	str	r4, [sp, #0]
 800b1d8:	f7ff fecc 	bl	800af74 <Paint_DrawPoint>
        }
        if (2 * Esp >= dy) {
 800b1dc:	6a3b      	ldr	r3, [r7, #32]
 800b1de:	005b      	lsls	r3, r3, #1
 800b1e0:	697a      	ldr	r2, [r7, #20]
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	dc0c      	bgt.n	800b200 <Paint_DrawLine+0x134>
            if (Xpoint == Xend)
 800b1e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800b1e8:	887b      	ldrh	r3, [r7, #2]
 800b1ea:	429a      	cmp	r2, r3
 800b1ec:	d01b      	beq.n	800b226 <Paint_DrawLine+0x15a>
                break;
            Esp += dy;
 800b1ee:	6a3a      	ldr	r2, [r7, #32]
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	623b      	str	r3, [r7, #32]
            Xpoint += XAddway;
 800b1f6:	693b      	ldr	r3, [r7, #16]
 800b1f8:	b29a      	uxth	r2, r3
 800b1fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b1fc:	4413      	add	r3, r2
 800b1fe:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
        if (2 * Esp <= dx) {
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	005b      	lsls	r3, r3, #1
 800b204:	69ba      	ldr	r2, [r7, #24]
 800b206:	429a      	cmp	r2, r3
 800b208:	dbb2      	blt.n	800b170 <Paint_DrawLine+0xa4>
            if (Ypoint == Yend)
 800b20a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b20c:	883b      	ldrh	r3, [r7, #0]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d00b      	beq.n	800b22a <Paint_DrawLine+0x15e>
                break;
            Esp += dx;
 800b212:	6a3a      	ldr	r2, [r7, #32]
 800b214:	69bb      	ldr	r3, [r7, #24]
 800b216:	4413      	add	r3, r2
 800b218:	623b      	str	r3, [r7, #32]
            Ypoint += YAddway;
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	b29a      	uxth	r2, r3
 800b21e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b220:	4413      	add	r3, r2
 800b222:	84bb      	strh	r3, [r7, #36]	; 0x24
        Dotted_Len++;
 800b224:	e7a4      	b.n	800b170 <Paint_DrawLine+0xa4>
                break;
 800b226:	bf00      	nop
 800b228:	e000      	b.n	800b22c <Paint_DrawLine+0x160>
                break;
 800b22a:	bf00      	nop
        }
    }
}
 800b22c:	372c      	adds	r7, #44	; 0x2c
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd90      	pop	{r4, r7, pc}
 800b232:	bf00      	nop
 800b234:	20000a20 	.word	0x20000a20
 800b238:	0800fa2c 	.word	0x0800fa2c
 800b23c:	aaaaaaab 	.word	0xaaaaaaab

0800b240 <Paint_DrawRectangle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the rectangle
******************************************************************************/
void Paint_DrawRectangle(UWORD Xstart, UWORD Ystart, UWORD Xend, UWORD Yend,
                         UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800b240:	b590      	push	{r4, r7, lr}
 800b242:	b089      	sub	sp, #36	; 0x24
 800b244:	af04      	add	r7, sp, #16
 800b246:	4604      	mov	r4, r0
 800b248:	4608      	mov	r0, r1
 800b24a:	4611      	mov	r1, r2
 800b24c:	461a      	mov	r2, r3
 800b24e:	4623      	mov	r3, r4
 800b250:	80fb      	strh	r3, [r7, #6]
 800b252:	4603      	mov	r3, r0
 800b254:	80bb      	strh	r3, [r7, #4]
 800b256:	460b      	mov	r3, r1
 800b258:	807b      	strh	r3, [r7, #2]
 800b25a:	4613      	mov	r3, r2
 800b25c:	803b      	strh	r3, [r7, #0]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b25e:	4b38      	ldr	r3, [pc, #224]	; (800b340 <Paint_DrawRectangle+0x100>)
 800b260:	889b      	ldrh	r3, [r3, #4]
 800b262:	88fa      	ldrh	r2, [r7, #6]
 800b264:	429a      	cmp	r2, r3
 800b266:	d80e      	bhi.n	800b286 <Paint_DrawRectangle+0x46>
 800b268:	4b35      	ldr	r3, [pc, #212]	; (800b340 <Paint_DrawRectangle+0x100>)
 800b26a:	88db      	ldrh	r3, [r3, #6]
 800b26c:	88ba      	ldrh	r2, [r7, #4]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d809      	bhi.n	800b286 <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b272:	4b33      	ldr	r3, [pc, #204]	; (800b340 <Paint_DrawRectangle+0x100>)
 800b274:	889b      	ldrh	r3, [r3, #4]
    if (Xstart > Paint.Width || Ystart > Paint.Height ||
 800b276:	887a      	ldrh	r2, [r7, #2]
 800b278:	429a      	cmp	r2, r3
 800b27a:	d804      	bhi.n	800b286 <Paint_DrawRectangle+0x46>
        Xend > Paint.Width || Yend > Paint.Height) {
 800b27c:	4b30      	ldr	r3, [pc, #192]	; (800b340 <Paint_DrawRectangle+0x100>)
 800b27e:	88db      	ldrh	r3, [r3, #6]
 800b280:	883a      	ldrh	r2, [r7, #0]
 800b282:	429a      	cmp	r2, r3
 800b284:	d903      	bls.n	800b28e <Paint_DrawRectangle+0x4e>
        Debug("Input exceeds the normal display range\r\n");
 800b286:	482f      	ldr	r0, [pc, #188]	; (800b344 <Paint_DrawRectangle+0x104>)
 800b288:	f001 fa88 	bl	800c79c <puts>
        return;
 800b28c:	e054      	b.n	800b338 <Paint_DrawRectangle+0xf8>
    }

    if (Draw_Fill) {
 800b28e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b292:	2b00      	cmp	r3, #0
 800b294:	d018      	beq.n	800b2c8 <Paint_DrawRectangle+0x88>
        UWORD Ypoint;
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800b296:	88bb      	ldrh	r3, [r7, #4]
 800b298:	81fb      	strh	r3, [r7, #14]
 800b29a:	e010      	b.n	800b2be <Paint_DrawRectangle+0x7e>
            Paint_DrawLine(Xstart, Ypoint, Xend, Ypoint, Color , Line_width, LINE_STYLE_SOLID);
 800b29c:	89fc      	ldrh	r4, [r7, #14]
 800b29e:	887a      	ldrh	r2, [r7, #2]
 800b2a0:	89f9      	ldrh	r1, [r7, #14]
 800b2a2:	88f8      	ldrh	r0, [r7, #6]
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	9302      	str	r3, [sp, #8]
 800b2a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b2ac:	9301      	str	r3, [sp, #4]
 800b2ae:	8c3b      	ldrh	r3, [r7, #32]
 800b2b0:	9300      	str	r3, [sp, #0]
 800b2b2:	4623      	mov	r3, r4
 800b2b4:	f7ff ff0a 	bl	800b0cc <Paint_DrawLine>
        for(Ypoint = Ystart; Ypoint < Yend; Ypoint++) {
 800b2b8:	89fb      	ldrh	r3, [r7, #14]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	81fb      	strh	r3, [r7, #14]
 800b2be:	89fa      	ldrh	r2, [r7, #14]
 800b2c0:	883b      	ldrh	r3, [r7, #0]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d3ea      	bcc.n	800b29c <Paint_DrawRectangle+0x5c>
 800b2c6:	e037      	b.n	800b338 <Paint_DrawRectangle+0xf8>
        }
    } else {
        Paint_DrawLine(Xstart, Ystart, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800b2c8:	88bc      	ldrh	r4, [r7, #4]
 800b2ca:	887a      	ldrh	r2, [r7, #2]
 800b2cc:	88b9      	ldrh	r1, [r7, #4]
 800b2ce:	88f8      	ldrh	r0, [r7, #6]
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	9302      	str	r3, [sp, #8]
 800b2d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b2d8:	9301      	str	r3, [sp, #4]
 800b2da:	8c3b      	ldrh	r3, [r7, #32]
 800b2dc:	9300      	str	r3, [sp, #0]
 800b2de:	4623      	mov	r3, r4
 800b2e0:	f7ff fef4 	bl	800b0cc <Paint_DrawLine>
        Paint_DrawLine(Xstart, Ystart, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800b2e4:	883c      	ldrh	r4, [r7, #0]
 800b2e6:	88fa      	ldrh	r2, [r7, #6]
 800b2e8:	88b9      	ldrh	r1, [r7, #4]
 800b2ea:	88f8      	ldrh	r0, [r7, #6]
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	9302      	str	r3, [sp, #8]
 800b2f0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b2f4:	9301      	str	r3, [sp, #4]
 800b2f6:	8c3b      	ldrh	r3, [r7, #32]
 800b2f8:	9300      	str	r3, [sp, #0]
 800b2fa:	4623      	mov	r3, r4
 800b2fc:	f7ff fee6 	bl	800b0cc <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xend, Ystart, Color, Line_width, LINE_STYLE_SOLID);
 800b300:	88bc      	ldrh	r4, [r7, #4]
 800b302:	887a      	ldrh	r2, [r7, #2]
 800b304:	8839      	ldrh	r1, [r7, #0]
 800b306:	8878      	ldrh	r0, [r7, #2]
 800b308:	2300      	movs	r3, #0
 800b30a:	9302      	str	r3, [sp, #8]
 800b30c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	8c3b      	ldrh	r3, [r7, #32]
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	4623      	mov	r3, r4
 800b318:	f7ff fed8 	bl	800b0cc <Paint_DrawLine>
        Paint_DrawLine(Xend, Yend, Xstart, Yend, Color, Line_width, LINE_STYLE_SOLID);
 800b31c:	883c      	ldrh	r4, [r7, #0]
 800b31e:	88fa      	ldrh	r2, [r7, #6]
 800b320:	8839      	ldrh	r1, [r7, #0]
 800b322:	8878      	ldrh	r0, [r7, #2]
 800b324:	2300      	movs	r3, #0
 800b326:	9302      	str	r3, [sp, #8]
 800b328:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b32c:	9301      	str	r3, [sp, #4]
 800b32e:	8c3b      	ldrh	r3, [r7, #32]
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	4623      	mov	r3, r4
 800b334:	f7ff feca 	bl	800b0cc <Paint_DrawLine>
    }
}
 800b338:	3714      	adds	r7, #20
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd90      	pop	{r4, r7, pc}
 800b33e:	bf00      	nop
 800b340:	20000a20 	.word	0x20000a20
 800b344:	0800fa6c 	.word	0x0800fa6c

0800b348 <Paint_DrawCircle>:
    Line_width: Line width
    Draw_Fill : Whether to fill the inside of the Circle
******************************************************************************/
void Paint_DrawCircle(UWORD X_Center, UWORD Y_Center, UWORD Radius,
                      UWORD Color, DOT_PIXEL Line_width, DRAW_FILL Draw_Fill)
{
 800b348:	b590      	push	{r4, r7, lr}
 800b34a:	b087      	sub	sp, #28
 800b34c:	af02      	add	r7, sp, #8
 800b34e:	4604      	mov	r4, r0
 800b350:	4608      	mov	r0, r1
 800b352:	4611      	mov	r1, r2
 800b354:	461a      	mov	r2, r3
 800b356:	4623      	mov	r3, r4
 800b358:	80fb      	strh	r3, [r7, #6]
 800b35a:	4603      	mov	r3, r0
 800b35c:	80bb      	strh	r3, [r7, #4]
 800b35e:	460b      	mov	r3, r1
 800b360:	807b      	strh	r3, [r7, #2]
 800b362:	4613      	mov	r3, r2
 800b364:	803b      	strh	r3, [r7, #0]
    if (X_Center > Paint.Width || Y_Center >= Paint.Height) {
 800b366:	4b67      	ldr	r3, [pc, #412]	; (800b504 <Paint_DrawCircle+0x1bc>)
 800b368:	889b      	ldrh	r3, [r3, #4]
 800b36a:	88fa      	ldrh	r2, [r7, #6]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d804      	bhi.n	800b37a <Paint_DrawCircle+0x32>
 800b370:	4b64      	ldr	r3, [pc, #400]	; (800b504 <Paint_DrawCircle+0x1bc>)
 800b372:	88db      	ldrh	r3, [r3, #6]
 800b374:	88ba      	ldrh	r2, [r7, #4]
 800b376:	429a      	cmp	r2, r3
 800b378:	d303      	bcc.n	800b382 <Paint_DrawCircle+0x3a>
        Debug("Paint_DrawCircle Input exceeds the normal display range\r\n");
 800b37a:	4863      	ldr	r0, [pc, #396]	; (800b508 <Paint_DrawCircle+0x1c0>)
 800b37c:	f001 fa0e 	bl	800c79c <puts>
        return;
 800b380:	e16b      	b.n	800b65a <Paint_DrawCircle+0x312>
    }

    //Draw a circle from(0, R) as a starting point
    int16_t XCurrent, YCurrent;
    XCurrent = 0;
 800b382:	2300      	movs	r3, #0
 800b384:	81fb      	strh	r3, [r7, #14]
    YCurrent = Radius;
 800b386:	887b      	ldrh	r3, [r7, #2]
 800b388:	81bb      	strh	r3, [r7, #12]

    //Cumulative error,judge the next point of the logo
    int16_t Esp = 3 - (Radius << 1 );
 800b38a:	887b      	ldrh	r3, [r7, #2]
 800b38c:	005b      	lsls	r3, r3, #1
 800b38e:	b29b      	uxth	r3, r3
 800b390:	f1c3 0303 	rsb	r3, r3, #3
 800b394:	b29b      	uxth	r3, r3
 800b396:	817b      	strh	r3, [r7, #10]

    int16_t sCountY;
    if (Draw_Fill == DRAW_FILL_FULL) {
 800b398:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	f040 8155 	bne.w	800b64c <Paint_DrawCircle+0x304>
        while (XCurrent <= YCurrent ) { //Realistic circles
 800b3a2:	e0a6      	b.n	800b4f2 <Paint_DrawCircle+0x1aa>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800b3a4:	89fb      	ldrh	r3, [r7, #14]
 800b3a6:	813b      	strh	r3, [r7, #8]
 800b3a8:	e075      	b.n	800b496 <Paint_DrawCircle+0x14e>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//1
 800b3aa:	89fa      	ldrh	r2, [r7, #14]
 800b3ac:	88fb      	ldrh	r3, [r7, #6]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	b298      	uxth	r0, r3
 800b3b2:	893a      	ldrh	r2, [r7, #8]
 800b3b4:	88bb      	ldrh	r3, [r7, #4]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	b299      	uxth	r1, r3
 800b3ba:	883a      	ldrh	r2, [r7, #0]
 800b3bc:	2301      	movs	r3, #1
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	f7ff fdd7 	bl	800af74 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center + sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//2
 800b3c6:	89fb      	ldrh	r3, [r7, #14]
 800b3c8:	88fa      	ldrh	r2, [r7, #6]
 800b3ca:	1ad3      	subs	r3, r2, r3
 800b3cc:	b298      	uxth	r0, r3
 800b3ce:	893a      	ldrh	r2, [r7, #8]
 800b3d0:	88bb      	ldrh	r3, [r7, #4]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	b299      	uxth	r1, r3
 800b3d6:	883a      	ldrh	r2, [r7, #0]
 800b3d8:	2301      	movs	r3, #1
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	2301      	movs	r3, #1
 800b3de:	f7ff fdc9 	bl	800af74 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//3
 800b3e2:	893b      	ldrh	r3, [r7, #8]
 800b3e4:	88fa      	ldrh	r2, [r7, #6]
 800b3e6:	1ad3      	subs	r3, r2, r3
 800b3e8:	b298      	uxth	r0, r3
 800b3ea:	89fa      	ldrh	r2, [r7, #14]
 800b3ec:	88bb      	ldrh	r3, [r7, #4]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	b299      	uxth	r1, r3
 800b3f2:	883a      	ldrh	r2, [r7, #0]
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	9300      	str	r3, [sp, #0]
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	f7ff fdbb 	bl	800af74 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//4
 800b3fe:	893b      	ldrh	r3, [r7, #8]
 800b400:	88fa      	ldrh	r2, [r7, #6]
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	b298      	uxth	r0, r3
 800b406:	89fb      	ldrh	r3, [r7, #14]
 800b408:	88ba      	ldrh	r2, [r7, #4]
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	b299      	uxth	r1, r3
 800b40e:	883a      	ldrh	r2, [r7, #0]
 800b410:	2301      	movs	r3, #1
 800b412:	9300      	str	r3, [sp, #0]
 800b414:	2301      	movs	r3, #1
 800b416:	f7ff fdad 	bl	800af74 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center - XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//5
 800b41a:	89fb      	ldrh	r3, [r7, #14]
 800b41c:	88fa      	ldrh	r2, [r7, #6]
 800b41e:	1ad3      	subs	r3, r2, r3
 800b420:	b298      	uxth	r0, r3
 800b422:	893b      	ldrh	r3, [r7, #8]
 800b424:	88ba      	ldrh	r2, [r7, #4]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	b299      	uxth	r1, r3
 800b42a:	883a      	ldrh	r2, [r7, #0]
 800b42c:	2301      	movs	r3, #1
 800b42e:	9300      	str	r3, [sp, #0]
 800b430:	2301      	movs	r3, #1
 800b432:	f7ff fd9f 	bl	800af74 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + XCurrent, Y_Center - sCountY, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//6
 800b436:	89fa      	ldrh	r2, [r7, #14]
 800b438:	88fb      	ldrh	r3, [r7, #6]
 800b43a:	4413      	add	r3, r2
 800b43c:	b298      	uxth	r0, r3
 800b43e:	893b      	ldrh	r3, [r7, #8]
 800b440:	88ba      	ldrh	r2, [r7, #4]
 800b442:	1ad3      	subs	r3, r2, r3
 800b444:	b299      	uxth	r1, r3
 800b446:	883a      	ldrh	r2, [r7, #0]
 800b448:	2301      	movs	r3, #1
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	2301      	movs	r3, #1
 800b44e:	f7ff fd91 	bl	800af74 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center - XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);//7
 800b452:	893a      	ldrh	r2, [r7, #8]
 800b454:	88fb      	ldrh	r3, [r7, #6]
 800b456:	4413      	add	r3, r2
 800b458:	b298      	uxth	r0, r3
 800b45a:	89fb      	ldrh	r3, [r7, #14]
 800b45c:	88ba      	ldrh	r2, [r7, #4]
 800b45e:	1ad3      	subs	r3, r2, r3
 800b460:	b299      	uxth	r1, r3
 800b462:	883a      	ldrh	r2, [r7, #0]
 800b464:	2301      	movs	r3, #1
 800b466:	9300      	str	r3, [sp, #0]
 800b468:	2301      	movs	r3, #1
 800b46a:	f7ff fd83 	bl	800af74 <Paint_DrawPoint>
                Paint_DrawPoint(X_Center + sCountY, Y_Center + XCurrent, Color, DOT_PIXEL_DFT, DOT_STYLE_DFT);
 800b46e:	893a      	ldrh	r2, [r7, #8]
 800b470:	88fb      	ldrh	r3, [r7, #6]
 800b472:	4413      	add	r3, r2
 800b474:	b298      	uxth	r0, r3
 800b476:	89fa      	ldrh	r2, [r7, #14]
 800b478:	88bb      	ldrh	r3, [r7, #4]
 800b47a:	4413      	add	r3, r2
 800b47c:	b299      	uxth	r1, r3
 800b47e:	883a      	ldrh	r2, [r7, #0]
 800b480:	2301      	movs	r3, #1
 800b482:	9300      	str	r3, [sp, #0]
 800b484:	2301      	movs	r3, #1
 800b486:	f7ff fd75 	bl	800af74 <Paint_DrawPoint>
            for (sCountY = XCurrent; sCountY <= YCurrent; sCountY ++ ) {
 800b48a:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800b48e:	b29b      	uxth	r3, r3
 800b490:	3301      	adds	r3, #1
 800b492:	b29b      	uxth	r3, r3
 800b494:	813b      	strh	r3, [r7, #8]
 800b496:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800b49a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	dd83      	ble.n	800b3aa <Paint_DrawCircle+0x62>
            }
            if (Esp < 0 )
 800b4a2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	da09      	bge.n	800b4be <Paint_DrawCircle+0x176>
                Esp += 4 * XCurrent + 6;
 800b4aa:	89fb      	ldrh	r3, [r7, #14]
 800b4ac:	009b      	lsls	r3, r3, #2
 800b4ae:	b29a      	uxth	r2, r3
 800b4b0:	897b      	ldrh	r3, [r7, #10]
 800b4b2:	4413      	add	r3, r2
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	3306      	adds	r3, #6
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	817b      	strh	r3, [r7, #10]
 800b4bc:	e013      	b.n	800b4e6 <Paint_DrawCircle+0x19e>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800b4be:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b4c2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	897b      	ldrh	r3, [r7, #10]
 800b4d0:	4413      	add	r3, r2
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	330a      	adds	r3, #10
 800b4d6:	b29b      	uxth	r3, r3
 800b4d8:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800b4da:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800b4e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b4ea:	b29b      	uxth	r3, r3
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	b29b      	uxth	r3, r3
 800b4f0:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) { //Realistic circles
 800b4f2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b4f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b4fa:	429a      	cmp	r2, r3
 800b4fc:	f77f af52 	ble.w	800b3a4 <Paint_DrawCircle+0x5c>
 800b500:	e0ab      	b.n	800b65a <Paint_DrawCircle+0x312>
 800b502:	bf00      	nop
 800b504:	20000a20 	.word	0x20000a20
 800b508:	0800fa9c 	.word	0x0800fa9c
        }
    } else { //Draw a hollow circle
        while (XCurrent <= YCurrent ) {
            Paint_DrawPoint(X_Center + XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//1
 800b50c:	89fa      	ldrh	r2, [r7, #14]
 800b50e:	88fb      	ldrh	r3, [r7, #6]
 800b510:	4413      	add	r3, r2
 800b512:	b298      	uxth	r0, r3
 800b514:	89ba      	ldrh	r2, [r7, #12]
 800b516:	88bb      	ldrh	r3, [r7, #4]
 800b518:	4413      	add	r3, r2
 800b51a:	b299      	uxth	r1, r3
 800b51c:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b520:	883a      	ldrh	r2, [r7, #0]
 800b522:	2401      	movs	r4, #1
 800b524:	9400      	str	r4, [sp, #0]
 800b526:	f7ff fd25 	bl	800af74 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center + YCurrent, Color, Line_width, DOT_STYLE_DFT);//2
 800b52a:	89fb      	ldrh	r3, [r7, #14]
 800b52c:	88fa      	ldrh	r2, [r7, #6]
 800b52e:	1ad3      	subs	r3, r2, r3
 800b530:	b298      	uxth	r0, r3
 800b532:	89ba      	ldrh	r2, [r7, #12]
 800b534:	88bb      	ldrh	r3, [r7, #4]
 800b536:	4413      	add	r3, r2
 800b538:	b299      	uxth	r1, r3
 800b53a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b53e:	883a      	ldrh	r2, [r7, #0]
 800b540:	2401      	movs	r4, #1
 800b542:	9400      	str	r4, [sp, #0]
 800b544:	f7ff fd16 	bl	800af74 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//3
 800b548:	89bb      	ldrh	r3, [r7, #12]
 800b54a:	88fa      	ldrh	r2, [r7, #6]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	b298      	uxth	r0, r3
 800b550:	89fa      	ldrh	r2, [r7, #14]
 800b552:	88bb      	ldrh	r3, [r7, #4]
 800b554:	4413      	add	r3, r2
 800b556:	b299      	uxth	r1, r3
 800b558:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b55c:	883a      	ldrh	r2, [r7, #0]
 800b55e:	2401      	movs	r4, #1
 800b560:	9400      	str	r4, [sp, #0]
 800b562:	f7ff fd07 	bl	800af74 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//4
 800b566:	89bb      	ldrh	r3, [r7, #12]
 800b568:	88fa      	ldrh	r2, [r7, #6]
 800b56a:	1ad3      	subs	r3, r2, r3
 800b56c:	b298      	uxth	r0, r3
 800b56e:	89fb      	ldrh	r3, [r7, #14]
 800b570:	88ba      	ldrh	r2, [r7, #4]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	b299      	uxth	r1, r3
 800b576:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b57a:	883a      	ldrh	r2, [r7, #0]
 800b57c:	2401      	movs	r4, #1
 800b57e:	9400      	str	r4, [sp, #0]
 800b580:	f7ff fcf8 	bl	800af74 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center - XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//5
 800b584:	89fb      	ldrh	r3, [r7, #14]
 800b586:	88fa      	ldrh	r2, [r7, #6]
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	b298      	uxth	r0, r3
 800b58c:	89bb      	ldrh	r3, [r7, #12]
 800b58e:	88ba      	ldrh	r2, [r7, #4]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	b299      	uxth	r1, r3
 800b594:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b598:	883a      	ldrh	r2, [r7, #0]
 800b59a:	2401      	movs	r4, #1
 800b59c:	9400      	str	r4, [sp, #0]
 800b59e:	f7ff fce9 	bl	800af74 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + XCurrent, Y_Center - YCurrent, Color, Line_width, DOT_STYLE_DFT);//6
 800b5a2:	89fa      	ldrh	r2, [r7, #14]
 800b5a4:	88fb      	ldrh	r3, [r7, #6]
 800b5a6:	4413      	add	r3, r2
 800b5a8:	b298      	uxth	r0, r3
 800b5aa:	89bb      	ldrh	r3, [r7, #12]
 800b5ac:	88ba      	ldrh	r2, [r7, #4]
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	b299      	uxth	r1, r3
 800b5b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5b6:	883a      	ldrh	r2, [r7, #0]
 800b5b8:	2401      	movs	r4, #1
 800b5ba:	9400      	str	r4, [sp, #0]
 800b5bc:	f7ff fcda 	bl	800af74 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center - XCurrent, Color, Line_width, DOT_STYLE_DFT);//7
 800b5c0:	89ba      	ldrh	r2, [r7, #12]
 800b5c2:	88fb      	ldrh	r3, [r7, #6]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	b298      	uxth	r0, r3
 800b5c8:	89fb      	ldrh	r3, [r7, #14]
 800b5ca:	88ba      	ldrh	r2, [r7, #4]
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	b299      	uxth	r1, r3
 800b5d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5d4:	883a      	ldrh	r2, [r7, #0]
 800b5d6:	2401      	movs	r4, #1
 800b5d8:	9400      	str	r4, [sp, #0]
 800b5da:	f7ff fccb 	bl	800af74 <Paint_DrawPoint>
            Paint_DrawPoint(X_Center + YCurrent, Y_Center + XCurrent, Color, Line_width, DOT_STYLE_DFT);//0
 800b5de:	89ba      	ldrh	r2, [r7, #12]
 800b5e0:	88fb      	ldrh	r3, [r7, #6]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	b298      	uxth	r0, r3
 800b5e6:	89fa      	ldrh	r2, [r7, #14]
 800b5e8:	88bb      	ldrh	r3, [r7, #4]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	b299      	uxth	r1, r3
 800b5ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5f2:	883a      	ldrh	r2, [r7, #0]
 800b5f4:	2401      	movs	r4, #1
 800b5f6:	9400      	str	r4, [sp, #0]
 800b5f8:	f7ff fcbc 	bl	800af74 <Paint_DrawPoint>

            if (Esp < 0 )
 800b5fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b600:	2b00      	cmp	r3, #0
 800b602:	da09      	bge.n	800b618 <Paint_DrawCircle+0x2d0>
                Esp += 4 * XCurrent + 6;
 800b604:	89fb      	ldrh	r3, [r7, #14]
 800b606:	009b      	lsls	r3, r3, #2
 800b608:	b29a      	uxth	r2, r3
 800b60a:	897b      	ldrh	r3, [r7, #10]
 800b60c:	4413      	add	r3, r2
 800b60e:	b29b      	uxth	r3, r3
 800b610:	3306      	adds	r3, #6
 800b612:	b29b      	uxth	r3, r3
 800b614:	817b      	strh	r3, [r7, #10]
 800b616:	e013      	b.n	800b640 <Paint_DrawCircle+0x2f8>
            else {
                Esp += 10 + 4 * (XCurrent - YCurrent );
 800b618:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b61c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	b29b      	uxth	r3, r3
 800b624:	009b      	lsls	r3, r3, #2
 800b626:	b29a      	uxth	r2, r3
 800b628:	897b      	ldrh	r3, [r7, #10]
 800b62a:	4413      	add	r3, r2
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	330a      	adds	r3, #10
 800b630:	b29b      	uxth	r3, r3
 800b632:	817b      	strh	r3, [r7, #10]
                YCurrent --;
 800b634:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b638:	b29b      	uxth	r3, r3
 800b63a:	3b01      	subs	r3, #1
 800b63c:	b29b      	uxth	r3, r3
 800b63e:	81bb      	strh	r3, [r7, #12]
            }
            XCurrent ++;
 800b640:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800b644:	b29b      	uxth	r3, r3
 800b646:	3301      	adds	r3, #1
 800b648:	b29b      	uxth	r3, r3
 800b64a:	81fb      	strh	r3, [r7, #14]
        while (XCurrent <= YCurrent ) {
 800b64c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800b650:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b654:	429a      	cmp	r2, r3
 800b656:	f77f af59 	ble.w	800b50c <Paint_DrawCircle+0x1c4>
        }
    }
}
 800b65a:	3714      	adds	r7, #20
 800b65c:	46bd      	mov	sp, r7
 800b65e:	bd90      	pop	{r4, r7, pc}

0800b660 <Paint_DrawChar>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawChar(UWORD Xpoint, UWORD Ypoint, const char Acsii_Char,
                    sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b088      	sub	sp, #32
 800b664:	af00      	add	r7, sp, #0
 800b666:	607b      	str	r3, [r7, #4]
 800b668:	4603      	mov	r3, r0
 800b66a:	81fb      	strh	r3, [r7, #14]
 800b66c:	460b      	mov	r3, r1
 800b66e:	81bb      	strh	r3, [r7, #12]
 800b670:	4613      	mov	r3, r2
 800b672:	72fb      	strb	r3, [r7, #11]
    UWORD Page, Column;

    if (Xpoint > Paint.Width || Ypoint > Paint.Height) {
 800b674:	4b4d      	ldr	r3, [pc, #308]	; (800b7ac <Paint_DrawChar+0x14c>)
 800b676:	889b      	ldrh	r3, [r3, #4]
 800b678:	89fa      	ldrh	r2, [r7, #14]
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d804      	bhi.n	800b688 <Paint_DrawChar+0x28>
 800b67e:	4b4b      	ldr	r3, [pc, #300]	; (800b7ac <Paint_DrawChar+0x14c>)
 800b680:	88db      	ldrh	r3, [r3, #6]
 800b682:	89ba      	ldrh	r2, [r7, #12]
 800b684:	429a      	cmp	r2, r3
 800b686:	d903      	bls.n	800b690 <Paint_DrawChar+0x30>
        Debug("Paint_DrawChar Input exceeds the normal display range\r\n");
 800b688:	4849      	ldr	r0, [pc, #292]	; (800b7b0 <Paint_DrawChar+0x150>)
 800b68a:	f001 f887 	bl	800c79c <puts>
        return;
 800b68e:	e089      	b.n	800b7a4 <Paint_DrawChar+0x144>
    }

    uint32_t Char_Offset = (Acsii_Char - ' ') * Font->Height * (Font->Width / 8 + (Font->Width % 8 ? 1 : 0));
 800b690:	7afb      	ldrb	r3, [r7, #11]
 800b692:	3b20      	subs	r3, #32
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	88d2      	ldrh	r2, [r2, #6]
 800b698:	fb02 f303 	mul.w	r3, r2, r3
 800b69c:	687a      	ldr	r2, [r7, #4]
 800b69e:	8892      	ldrh	r2, [r2, #4]
 800b6a0:	08d2      	lsrs	r2, r2, #3
 800b6a2:	b292      	uxth	r2, r2
 800b6a4:	4611      	mov	r1, r2
 800b6a6:	687a      	ldr	r2, [r7, #4]
 800b6a8:	8892      	ldrh	r2, [r2, #4]
 800b6aa:	f002 0207 	and.w	r2, r2, #7
 800b6ae:	b292      	uxth	r2, r2
 800b6b0:	2a00      	cmp	r2, #0
 800b6b2:	bf14      	ite	ne
 800b6b4:	2201      	movne	r2, #1
 800b6b6:	2200      	moveq	r2, #0
 800b6b8:	b2d2      	uxtb	r2, r2
 800b6ba:	440a      	add	r2, r1
 800b6bc:	fb02 f303 	mul.w	r3, r2, r3
 800b6c0:	617b      	str	r3, [r7, #20]
    const unsigned char *ptr = &Font->table[Char_Offset];
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	61bb      	str	r3, [r7, #24]

    for (Page = 0; Page < Font->Height; Page ++ ) {
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	83fb      	strh	r3, [r7, #30]
 800b6d0:	e063      	b.n	800b79a <Paint_DrawChar+0x13a>
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	83bb      	strh	r3, [r7, #28]
 800b6d6:	e04e      	b.n	800b776 <Paint_DrawChar+0x116>

            //To determine whether the font background color and screen background color is consistent
            if (FONT_BACKGROUND == Color_Background) { //this process is to speed up the scan
 800b6d8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b6da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b6de:	4293      	cmp	r3, r2
 800b6e0:	d118      	bne.n	800b714 <Paint_DrawChar+0xb4>
                if (*ptr & (0x80 >> (Column % 8)))
 800b6e2:	69bb      	ldr	r3, [r7, #24]
 800b6e4:	781b      	ldrb	r3, [r3, #0]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	8bbb      	ldrh	r3, [r7, #28]
 800b6ea:	f003 0307 	and.w	r3, r3, #7
 800b6ee:	2280      	movs	r2, #128	; 0x80
 800b6f0:	fa42 f303 	asr.w	r3, r2, r3
 800b6f4:	400b      	ands	r3, r1
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d031      	beq.n	800b75e <Paint_DrawChar+0xfe>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800b6fa:	89fa      	ldrh	r2, [r7, #14]
 800b6fc:	8bbb      	ldrh	r3, [r7, #28]
 800b6fe:	4413      	add	r3, r2
 800b700:	b298      	uxth	r0, r3
 800b702:	89ba      	ldrh	r2, [r7, #12]
 800b704:	8bfb      	ldrh	r3, [r7, #30]
 800b706:	4413      	add	r3, r2
 800b708:	b29b      	uxth	r3, r3
 800b70a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b70c:	4619      	mov	r1, r3
 800b70e:	f7ff fa15 	bl	800ab3c <Paint_SetPixel>
 800b712:	e024      	b.n	800b75e <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
            } else {
                if (*ptr & (0x80 >> (Column % 8))) {
 800b714:	69bb      	ldr	r3, [r7, #24]
 800b716:	781b      	ldrb	r3, [r3, #0]
 800b718:	4619      	mov	r1, r3
 800b71a:	8bbb      	ldrh	r3, [r7, #28]
 800b71c:	f003 0307 	and.w	r3, r3, #7
 800b720:	2280      	movs	r2, #128	; 0x80
 800b722:	fa42 f303 	asr.w	r3, r2, r3
 800b726:	400b      	ands	r3, r1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d00c      	beq.n	800b746 <Paint_DrawChar+0xe6>
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Foreground);
 800b72c:	89fa      	ldrh	r2, [r7, #14]
 800b72e:	8bbb      	ldrh	r3, [r7, #28]
 800b730:	4413      	add	r3, r2
 800b732:	b298      	uxth	r0, r3
 800b734:	89ba      	ldrh	r2, [r7, #12]
 800b736:	8bfb      	ldrh	r3, [r7, #30]
 800b738:	4413      	add	r3, r2
 800b73a:	b29b      	uxth	r3, r3
 800b73c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b73e:	4619      	mov	r1, r3
 800b740:	f7ff f9fc 	bl	800ab3c <Paint_SetPixel>
 800b744:	e00b      	b.n	800b75e <Paint_DrawChar+0xfe>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Foreground, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                } else {
                    Paint_SetPixel(Xpoint + Column, Ypoint + Page, Color_Background);
 800b746:	89fa      	ldrh	r2, [r7, #14]
 800b748:	8bbb      	ldrh	r3, [r7, #28]
 800b74a:	4413      	add	r3, r2
 800b74c:	b298      	uxth	r0, r3
 800b74e:	89ba      	ldrh	r2, [r7, #12]
 800b750:	8bfb      	ldrh	r3, [r7, #30]
 800b752:	4413      	add	r3, r2
 800b754:	b29b      	uxth	r3, r3
 800b756:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b758:	4619      	mov	r1, r3
 800b75a:	f7ff f9ef 	bl	800ab3c <Paint_SetPixel>
                    // Paint_DrawPoint(Xpoint + Column, Ypoint + Page, Color_Background, DOT_PIXEL_DFT, DOT_STYLE_DFT);
                }
            }
            //One pixel is 8 bits
            if (Column % 8 == 7)
 800b75e:	8bbb      	ldrh	r3, [r7, #28]
 800b760:	f003 0307 	and.w	r3, r3, #7
 800b764:	b29b      	uxth	r3, r3
 800b766:	2b07      	cmp	r3, #7
 800b768:	d102      	bne.n	800b770 <Paint_DrawChar+0x110>
                ptr++;
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	3301      	adds	r3, #1
 800b76e:	61bb      	str	r3, [r7, #24]
        for (Column = 0; Column < Font->Width; Column ++ ) {
 800b770:	8bbb      	ldrh	r3, [r7, #28]
 800b772:	3301      	adds	r3, #1
 800b774:	83bb      	strh	r3, [r7, #28]
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	889b      	ldrh	r3, [r3, #4]
 800b77a:	8bba      	ldrh	r2, [r7, #28]
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d3ab      	bcc.n	800b6d8 <Paint_DrawChar+0x78>
        }// Write a line
        if (Font->Width % 8 != 0)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	889b      	ldrh	r3, [r3, #4]
 800b784:	f003 0307 	and.w	r3, r3, #7
 800b788:	b29b      	uxth	r3, r3
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d002      	beq.n	800b794 <Paint_DrawChar+0x134>
            ptr++;
 800b78e:	69bb      	ldr	r3, [r7, #24]
 800b790:	3301      	adds	r3, #1
 800b792:	61bb      	str	r3, [r7, #24]
    for (Page = 0; Page < Font->Height; Page ++ ) {
 800b794:	8bfb      	ldrh	r3, [r7, #30]
 800b796:	3301      	adds	r3, #1
 800b798:	83fb      	strh	r3, [r7, #30]
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	88db      	ldrh	r3, [r3, #6]
 800b79e:	8bfa      	ldrh	r2, [r7, #30]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d396      	bcc.n	800b6d2 <Paint_DrawChar+0x72>
    }// Write all
}
 800b7a4:	3720      	adds	r7, #32
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	20000a20 	.word	0x20000a20
 800b7b0:	0800fadc 	.word	0x0800fadc

0800b7b4 <Paint_DrawString_EN>:
    Color_Foreground : Select the foreground color
    Color_Background : Select the background color
******************************************************************************/
void Paint_DrawString_EN(UWORD Xstart, UWORD Ystart, const char * pString,
                         sFONT* Font, UWORD Color_Foreground, UWORD Color_Background)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b088      	sub	sp, #32
 800b7b8:	af02      	add	r7, sp, #8
 800b7ba:	60ba      	str	r2, [r7, #8]
 800b7bc:	607b      	str	r3, [r7, #4]
 800b7be:	4603      	mov	r3, r0
 800b7c0:	81fb      	strh	r3, [r7, #14]
 800b7c2:	460b      	mov	r3, r1
 800b7c4:	81bb      	strh	r3, [r7, #12]
    UWORD Xpoint = Xstart;
 800b7c6:	89fb      	ldrh	r3, [r7, #14]
 800b7c8:	82fb      	strh	r3, [r7, #22]
    UWORD Ypoint = Ystart;
 800b7ca:	89bb      	ldrh	r3, [r7, #12]
 800b7cc:	82bb      	strh	r3, [r7, #20]

    if (Xstart > Paint.Width || Ystart > Paint.Height) {
 800b7ce:	4b21      	ldr	r3, [pc, #132]	; (800b854 <Paint_DrawString_EN+0xa0>)
 800b7d0:	889b      	ldrh	r3, [r3, #4]
 800b7d2:	89fa      	ldrh	r2, [r7, #14]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d804      	bhi.n	800b7e2 <Paint_DrawString_EN+0x2e>
 800b7d8:	4b1e      	ldr	r3, [pc, #120]	; (800b854 <Paint_DrawString_EN+0xa0>)
 800b7da:	88db      	ldrh	r3, [r3, #6]
 800b7dc:	89ba      	ldrh	r2, [r7, #12]
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d931      	bls.n	800b846 <Paint_DrawString_EN+0x92>
        Debug("Paint_DrawString_EN Input exceeds the normal display range\r\n");
 800b7e2:	481d      	ldr	r0, [pc, #116]	; (800b858 <Paint_DrawString_EN+0xa4>)
 800b7e4:	f000 ffda 	bl	800c79c <puts>
        return;
 800b7e8:	e031      	b.n	800b84e <Paint_DrawString_EN+0x9a>
    }

    while (* pString != '\0') {
        //if X direction filled , reposition to(Xstart,Ypoint),Ypoint is Y direction plus the Height of the character
        if ((Xpoint + Font->Width ) > Paint.Width ) {
 800b7ea:	8afb      	ldrh	r3, [r7, #22]
 800b7ec:	687a      	ldr	r2, [r7, #4]
 800b7ee:	8892      	ldrh	r2, [r2, #4]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	4a18      	ldr	r2, [pc, #96]	; (800b854 <Paint_DrawString_EN+0xa0>)
 800b7f4:	8892      	ldrh	r2, [r2, #4]
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	dd06      	ble.n	800b808 <Paint_DrawString_EN+0x54>
            Xpoint = Xstart;
 800b7fa:	89fb      	ldrh	r3, [r7, #14]
 800b7fc:	82fb      	strh	r3, [r7, #22]
            Ypoint += Font->Height;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	88da      	ldrh	r2, [r3, #6]
 800b802:	8abb      	ldrh	r3, [r7, #20]
 800b804:	4413      	add	r3, r2
 800b806:	82bb      	strh	r3, [r7, #20]
        }

        // If the Y direction is full, reposition to(Xstart, Ystart)
        if ((Ypoint  + Font->Height ) > Paint.Height ) {
 800b808:	8abb      	ldrh	r3, [r7, #20]
 800b80a:	687a      	ldr	r2, [r7, #4]
 800b80c:	88d2      	ldrh	r2, [r2, #6]
 800b80e:	4413      	add	r3, r2
 800b810:	4a10      	ldr	r2, [pc, #64]	; (800b854 <Paint_DrawString_EN+0xa0>)
 800b812:	88d2      	ldrh	r2, [r2, #6]
 800b814:	4293      	cmp	r3, r2
 800b816:	dd03      	ble.n	800b820 <Paint_DrawString_EN+0x6c>
            Xpoint = Xstart;
 800b818:	89fb      	ldrh	r3, [r7, #14]
 800b81a:	82fb      	strh	r3, [r7, #22]
            Ypoint = Ystart;
 800b81c:	89bb      	ldrh	r3, [r7, #12]
 800b81e:	82bb      	strh	r3, [r7, #20]
        }
        Paint_DrawChar(Xpoint, Ypoint, * pString, Font, Color_Background, Color_Foreground);
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	781a      	ldrb	r2, [r3, #0]
 800b824:	8ab9      	ldrh	r1, [r7, #20]
 800b826:	8af8      	ldrh	r0, [r7, #22]
 800b828:	8c3b      	ldrh	r3, [r7, #32]
 800b82a:	9301      	str	r3, [sp, #4]
 800b82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b82e:	9300      	str	r3, [sp, #0]
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f7ff ff15 	bl	800b660 <Paint_DrawChar>

        //The next character of the address
        pString ++;
 800b836:	68bb      	ldr	r3, [r7, #8]
 800b838:	3301      	adds	r3, #1
 800b83a:	60bb      	str	r3, [r7, #8]

        //The next word of the abscissa increases the font of the broadband
        Xpoint += Font->Width;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	889a      	ldrh	r2, [r3, #4]
 800b840:	8afb      	ldrh	r3, [r7, #22]
 800b842:	4413      	add	r3, r2
 800b844:	82fb      	strh	r3, [r7, #22]
    while (* pString != '\0') {
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d1cd      	bne.n	800b7ea <Paint_DrawString_EN+0x36>
    }
}
 800b84e:	3718      	adds	r7, #24
 800b850:	46bd      	mov	sp, r7
 800b852:	bd80      	pop	{r7, pc}
 800b854:	20000a20 	.word	0x20000a20
 800b858:	0800fb1c 	.word	0x0800fb1c

0800b85c <OLED_Reset>:
/*******************************************************************************
function:
            Hardware reset
*******************************************************************************/
static void OLED_Reset(void)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	af00      	add	r7, sp, #0
	OLED_RST_1;
 800b860:	2201      	movs	r2, #1
 800b862:	2110      	movs	r1, #16
 800b864:	480b      	ldr	r0, [pc, #44]	; (800b894 <OLED_Reset+0x38>)
 800b866:	f7fa fdff 	bl	8006468 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800b86a:	2064      	movs	r0, #100	; 0x64
 800b86c:	f7ff f87c 	bl	800a968 <Driver_Delay_ms>
    OLED_RST_0;
 800b870:	2200      	movs	r2, #0
 800b872:	2110      	movs	r1, #16
 800b874:	4807      	ldr	r0, [pc, #28]	; (800b894 <OLED_Reset+0x38>)
 800b876:	f7fa fdf7 	bl	8006468 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800b87a:	2064      	movs	r0, #100	; 0x64
 800b87c:	f7ff f874 	bl	800a968 <Driver_Delay_ms>
    OLED_RST_1;
 800b880:	2201      	movs	r2, #1
 800b882:	2110      	movs	r1, #16
 800b884:	4803      	ldr	r0, [pc, #12]	; (800b894 <OLED_Reset+0x38>)
 800b886:	f7fa fdef 	bl	8006468 <HAL_GPIO_WritePin>
    Driver_Delay_ms(100);
 800b88a:	2064      	movs	r0, #100	; 0x64
 800b88c:	f7ff f86c 	bl	800a968 <Driver_Delay_ms>
}
 800b890:	bf00      	nop
 800b892:	bd80      	pop	{r7, pc}
 800b894:	48000400 	.word	0x48000400

0800b898 <OLED_WriteReg>:
/*******************************************************************************
function:
            Write register address and data
*******************************************************************************/
static void OLED_WriteReg(uint8_t Reg)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b082      	sub	sp, #8
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	4603      	mov	r3, r0
 800b8a0:	71fb      	strb	r3, [r7, #7]
#if USE_SPI_4W
	OLED_DC_0;
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b8a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b8ac:	f7fa fddc 	bl	8006468 <HAL_GPIO_WritePin>
	OLED_CS_0;
 800b8b0:	2200      	movs	r2, #0
 800b8b2:	2140      	movs	r1, #64	; 0x40
 800b8b4:	4807      	ldr	r0, [pc, #28]	; (800b8d4 <OLED_WriteReg+0x3c>)
 800b8b6:	f7fa fdd7 	bl	8006468 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Reg);
 800b8ba:	79fb      	ldrb	r3, [r7, #7]
 800b8bc:	4618      	mov	r0, r3
 800b8be:	f7ff f819 	bl	800a8f4 <SPI4W_Write_Byte>
    OLED_CS_1;
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	2140      	movs	r1, #64	; 0x40
 800b8c6:	4803      	ldr	r0, [pc, #12]	; (800b8d4 <OLED_WriteReg+0x3c>)
 800b8c8:	f7fa fdce 	bl	8006468 <HAL_GPIO_WritePin>
#elif USE_IIC
    I2C_Write_Byte(Reg,IIC_CMD);
#endif
}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	48000400 	.word	0x48000400

0800b8d8 <OLED_WriteData>:

static void OLED_WriteData(uint8_t Data)
{   
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b082      	sub	sp, #8
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	4603      	mov	r3, r0
 800b8e0:	71fb      	strb	r3, [r7, #7]
#if USE_SPI_4W
	OLED_DC_1;
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b8e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b8ec:	f7fa fdbc 	bl	8006468 <HAL_GPIO_WritePin>
	OLED_CS_0;
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	2140      	movs	r1, #64	; 0x40
 800b8f4:	4807      	ldr	r0, [pc, #28]	; (800b914 <OLED_WriteData+0x3c>)
 800b8f6:	f7fa fdb7 	bl	8006468 <HAL_GPIO_WritePin>
    SPI4W_Write_Byte(Data);
 800b8fa:	79fb      	ldrb	r3, [r7, #7]
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7fe fff9 	bl	800a8f4 <SPI4W_Write_Byte>
    OLED_CS_1;
 800b902:	2201      	movs	r2, #1
 800b904:	2140      	movs	r1, #64	; 0x40
 800b906:	4803      	ldr	r0, [pc, #12]	; (800b914 <OLED_WriteData+0x3c>)
 800b908:	f7fa fdae 	bl	8006468 <HAL_GPIO_WritePin>
#elif USE_IIC
    I2C_Write_Byte(Data,IIC_RAM);
#endif
}
 800b90c:	bf00      	nop
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}
 800b914:	48000400 	.word	0x48000400

0800b918 <OLED_InitReg>:
/*******************************************************************************
function:
        Common register initialization
*******************************************************************************/
static void OLED_InitReg(void)
{
 800b918:	b580      	push	{r7, lr}
 800b91a:	af00      	add	r7, sp, #0
    OLED_WriteReg(0xae);//--turn off oled panel
 800b91c:	20ae      	movs	r0, #174	; 0xae
 800b91e:	f7ff ffbb 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0x15);    //   set column address
 800b922:	2015      	movs	r0, #21
 800b924:	f7ff ffb8 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start column   0
 800b928:	2000      	movs	r0, #0
 800b92a:	f7ff ffb5 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end column   127
 800b92e:	207f      	movs	r0, #127	; 0x7f
 800b930:	f7ff ffb2 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0x75);    //   set row address
 800b934:	2075      	movs	r0, #117	; 0x75
 800b936:	f7ff ffaf 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x00);    //  start row   0
 800b93a:	2000      	movs	r0, #0
 800b93c:	f7ff ffac 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x7f);    //  end row   127
 800b940:	207f      	movs	r0, #127	; 0x7f
 800b942:	f7ff ffa9 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0x81);  // set contrast control
 800b946:	2081      	movs	r0, #129	; 0x81
 800b948:	f7ff ffa6 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x80);
 800b94c:	2080      	movs	r0, #128	; 0x80
 800b94e:	f7ff ffa3 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xa0);    // gment remap
 800b952:	20a0      	movs	r0, #160	; 0xa0
 800b954:	f7ff ffa0 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x51);   //51
 800b958:	2051      	movs	r0, #81	; 0x51
 800b95a:	f7ff ff9d 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xa1);  // start line
 800b95e:	20a1      	movs	r0, #161	; 0xa1
 800b960:	f7ff ff9a 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800b964:	2000      	movs	r0, #0
 800b966:	f7ff ff97 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xa2);  // display offset
 800b96a:	20a2      	movs	r0, #162	; 0xa2
 800b96c:	f7ff ff94 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x00);
 800b970:	2000      	movs	r0, #0
 800b972:	f7ff ff91 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xa4);    // rmal display
 800b976:	20a4      	movs	r0, #164	; 0xa4
 800b978:	f7ff ff8e 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0xa8);    // set multiplex ratio
 800b97c:	20a8      	movs	r0, #168	; 0xa8
 800b97e:	f7ff ff8b 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x7f);
 800b982:	207f      	movs	r0, #127	; 0x7f
 800b984:	f7ff ff88 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xb1);  // set phase leghth
 800b988:	20b1      	movs	r0, #177	; 0xb1
 800b98a:	f7ff ff85 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0xf1);
 800b98e:	20f1      	movs	r0, #241	; 0xf1
 800b990:	f7ff ff82 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xb3);  // set dclk
 800b994:	20b3      	movs	r0, #179	; 0xb3
 800b996:	f7ff ff7f 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x00);  //80Hz:0xc1 90Hz:0xe1   100Hz:0x00   110Hz:0x30 120Hz:0x50   130Hz:0x70     01
 800b99a:	2000      	movs	r0, #0
 800b99c:	f7ff ff7c 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xab);  //
 800b9a0:	20ab      	movs	r0, #171	; 0xab
 800b9a2:	f7ff ff79 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x01);  //
 800b9a6:	2001      	movs	r0, #1
 800b9a8:	f7ff ff76 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xb6);  // set phase leghth
 800b9ac:	20b6      	movs	r0, #182	; 0xb6
 800b9ae:	f7ff ff73 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800b9b2:	200f      	movs	r0, #15
 800b9b4:	f7ff ff70 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xbe);
 800b9b8:	20be      	movs	r0, #190	; 0xbe
 800b9ba:	f7ff ff6d 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x0f);
 800b9be:	200f      	movs	r0, #15
 800b9c0:	f7ff ff6a 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xbc);
 800b9c4:	20bc      	movs	r0, #188	; 0xbc
 800b9c6:	f7ff ff67 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x08);
 800b9ca:	2008      	movs	r0, #8
 800b9cc:	f7ff ff64 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xd5);
 800b9d0:	20d5      	movs	r0, #213	; 0xd5
 800b9d2:	f7ff ff61 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x62);
 800b9d6:	2062      	movs	r0, #98	; 0x62
 800b9d8:	f7ff ff5e 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0xfd);
 800b9dc:	20fd      	movs	r0, #253	; 0xfd
 800b9de:	f7ff ff5b 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(0x12);
 800b9e2:	2012      	movs	r0, #18
 800b9e4:	f7ff ff58 	bl	800b898 <OLED_WriteReg>

}
 800b9e8:	bf00      	nop
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <OLED_1in5_Init>:
/********************************************************************************
function:
            initialization
********************************************************************************/
void OLED_1in5_Init(void)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	af00      	add	r7, sp, #0
    //Hardware reset
    OLED_Reset();
 800b9f0:	f7ff ff34 	bl	800b85c <OLED_Reset>

    //Set the initialization register
    OLED_InitReg();
 800b9f4:	f7ff ff90 	bl	800b918 <OLED_InitReg>
    Driver_Delay_ms(200);
 800b9f8:	20c8      	movs	r0, #200	; 0xc8
 800b9fa:	f7fe ffb5 	bl	800a968 <Driver_Delay_ms>

    //Turn on the OLED display
    OLED_WriteReg(0xAF);
 800b9fe:	20af      	movs	r0, #175	; 0xaf
 800ba00:	f7ff ff4a 	bl	800b898 <OLED_WriteReg>
}
 800ba04:	bf00      	nop
 800ba06:	bd80      	pop	{r7, pc}

0800ba08 <OLED_SetWindow>:
        Ystart :   Y direction Start coordinates
        Xend   :   X direction end coordinates
        Yend   :   Y direction end coordinates
********************************************************************************/
static void OLED_SetWindow(UBYTE Xstart, UBYTE Ystart, UBYTE Xend, UBYTE Yend)
{
 800ba08:	b590      	push	{r4, r7, lr}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	4604      	mov	r4, r0
 800ba10:	4608      	mov	r0, r1
 800ba12:	4611      	mov	r1, r2
 800ba14:	461a      	mov	r2, r3
 800ba16:	4623      	mov	r3, r4
 800ba18:	71fb      	strb	r3, [r7, #7]
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	71bb      	strb	r3, [r7, #6]
 800ba1e:	460b      	mov	r3, r1
 800ba20:	717b      	strb	r3, [r7, #5]
 800ba22:	4613      	mov	r3, r2
 800ba24:	713b      	strb	r3, [r7, #4]
    if((Xstart > OLED_1in5_WIDTH) || (Ystart > OLED_1in5_HEIGHT) ||
 800ba26:	79fb      	ldrb	r3, [r7, #7]
 800ba28:	2b80      	cmp	r3, #128	; 0x80
 800ba2a:	d827      	bhi.n	800ba7c <OLED_SetWindow+0x74>
 800ba2c:	79bb      	ldrb	r3, [r7, #6]
 800ba2e:	2b80      	cmp	r3, #128	; 0x80
 800ba30:	d824      	bhi.n	800ba7c <OLED_SetWindow+0x74>
 800ba32:	797b      	ldrb	r3, [r7, #5]
 800ba34:	2b80      	cmp	r3, #128	; 0x80
 800ba36:	d821      	bhi.n	800ba7c <OLED_SetWindow+0x74>
       (Xend > OLED_1in5_WIDTH) || (Yend > OLED_1in5_HEIGHT))
 800ba38:	793b      	ldrb	r3, [r7, #4]
 800ba3a:	2b80      	cmp	r3, #128	; 0x80
 800ba3c:	d81e      	bhi.n	800ba7c <OLED_SetWindow+0x74>
        return;

    OLED_WriteReg(0x15);
 800ba3e:	2015      	movs	r0, #21
 800ba40:	f7ff ff2a 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(Xstart/2);
 800ba44:	79fb      	ldrb	r3, [r7, #7]
 800ba46:	085b      	lsrs	r3, r3, #1
 800ba48:	b2db      	uxtb	r3, r3
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7ff ff24 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(Xend/2 - 1);
 800ba50:	797b      	ldrb	r3, [r7, #5]
 800ba52:	085b      	lsrs	r3, r3, #1
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	3b01      	subs	r3, #1
 800ba58:	b2db      	uxtb	r3, r3
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	f7ff ff1c 	bl	800b898 <OLED_WriteReg>

    OLED_WriteReg(0x75);
 800ba60:	2075      	movs	r0, #117	; 0x75
 800ba62:	f7ff ff19 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(Ystart);
 800ba66:	79bb      	ldrb	r3, [r7, #6]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f7ff ff15 	bl	800b898 <OLED_WriteReg>
    OLED_WriteReg(Yend - 1);
 800ba6e:	793b      	ldrb	r3, [r7, #4]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	b2db      	uxtb	r3, r3
 800ba74:	4618      	mov	r0, r3
 800ba76:	f7ff ff0f 	bl	800b898 <OLED_WriteReg>
 800ba7a:	e000      	b.n	800ba7e <OLED_SetWindow+0x76>
        return;
 800ba7c:	bf00      	nop
}
 800ba7e:	370c      	adds	r7, #12
 800ba80:	46bd      	mov	sp, r7
 800ba82:	bd90      	pop	{r4, r7, pc}

0800ba84 <OLED_1in5_Clear>:
/********************************************************************************
function:
            Clear screen
********************************************************************************/
void OLED_1in5_Clear(void)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
    UWORD i;
    OLED_SetWindow(0, 0, 128, 128);
 800ba8a:	2380      	movs	r3, #128	; 0x80
 800ba8c:	2280      	movs	r2, #128	; 0x80
 800ba8e:	2100      	movs	r1, #0
 800ba90:	2000      	movs	r0, #0
 800ba92:	f7ff ffb9 	bl	800ba08 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 800ba96:	2300      	movs	r3, #0
 800ba98:	80fb      	strh	r3, [r7, #6]
 800ba9a:	e005      	b.n	800baa8 <OLED_1in5_Clear+0x24>
        OLED_WriteData(0x00);
 800ba9c:	2000      	movs	r0, #0
 800ba9e:	f7ff ff1b 	bl	800b8d8 <OLED_WriteData>
    for(i=0; i<OLED_1in5_WIDTH*OLED_1in5_HEIGHT/2; i++){
 800baa2:	88fb      	ldrh	r3, [r7, #6]
 800baa4:	3301      	adds	r3, #1
 800baa6:	80fb      	strh	r3, [r7, #6]
 800baa8:	88fb      	ldrh	r3, [r7, #6]
 800baaa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baae:	d3f5      	bcc.n	800ba9c <OLED_1in5_Clear+0x18>
    }
}
 800bab0:	bf00      	nop
 800bab2:	bf00      	nop
 800bab4:	3708      	adds	r7, #8
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}

0800baba <OLED_1in5_Display>:

/********************************************************************************
function:   Update all memory to OLED
********************************************************************************/
void OLED_1in5_Display(const UBYTE *Image)
{
 800baba:	b580      	push	{r7, lr}
 800babc:	b084      	sub	sp, #16
 800babe:	af00      	add	r7, sp, #0
 800bac0:	6078      	str	r0, [r7, #4]
    UWORD i, j, temp;
    OLED_SetWindow(0, 0, 128, 128);
 800bac2:	2380      	movs	r3, #128	; 0x80
 800bac4:	2280      	movs	r2, #128	; 0x80
 800bac6:	2100      	movs	r1, #0
 800bac8:	2000      	movs	r0, #0
 800baca:	f7ff ff9d 	bl	800ba08 <OLED_SetWindow>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 800bace:	2300      	movs	r3, #0
 800bad0:	81fb      	strh	r3, [r7, #14]
 800bad2:	e019      	b.n	800bb08 <OLED_1in5_Display+0x4e>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 800bad4:	2300      	movs	r3, #0
 800bad6:	81bb      	strh	r3, [r7, #12]
 800bad8:	e010      	b.n	800bafc <OLED_1in5_Display+0x42>
        {
            temp = Image[j + i*64];
 800bada:	89ba      	ldrh	r2, [r7, #12]
 800badc:	89fb      	ldrh	r3, [r7, #14]
 800bade:	019b      	lsls	r3, r3, #6
 800bae0:	4413      	add	r3, r2
 800bae2:	461a      	mov	r2, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4413      	add	r3, r2
 800bae8:	781b      	ldrb	r3, [r3, #0]
 800baea:	817b      	strh	r3, [r7, #10]
            OLED_WriteData(temp);
 800baec:	897b      	ldrh	r3, [r7, #10]
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	4618      	mov	r0, r3
 800baf2:	f7ff fef1 	bl	800b8d8 <OLED_WriteData>
        for(j=0; j<OLED_1in5_WIDTH/2; j++)
 800baf6:	89bb      	ldrh	r3, [r7, #12]
 800baf8:	3301      	adds	r3, #1
 800bafa:	81bb      	strh	r3, [r7, #12]
 800bafc:	89bb      	ldrh	r3, [r7, #12]
 800bafe:	2b3f      	cmp	r3, #63	; 0x3f
 800bb00:	d9eb      	bls.n	800bada <OLED_1in5_Display+0x20>
    for(i=0; i<OLED_1in5_HEIGHT; i++)
 800bb02:	89fb      	ldrh	r3, [r7, #14]
 800bb04:	3301      	adds	r3, #1
 800bb06:	81fb      	strh	r3, [r7, #14]
 800bb08:	89fb      	ldrh	r3, [r7, #14]
 800bb0a:	2b7f      	cmp	r3, #127	; 0x7f
 800bb0c:	d9e2      	bls.n	800bad4 <OLED_1in5_Display+0x1a>
        }
}
 800bb0e:	bf00      	nop
 800bb10:	bf00      	nop
 800bb12:	3710      	adds	r7, #16
 800bb14:	46bd      	mov	sp, r7
 800bb16:	bd80      	pop	{r7, pc}

0800bb18 <malloc>:
 800bb18:	4b02      	ldr	r3, [pc, #8]	; (800bb24 <malloc+0xc>)
 800bb1a:	4601      	mov	r1, r0
 800bb1c:	6818      	ldr	r0, [r3, #0]
 800bb1e:	f000 b823 	b.w	800bb68 <_malloc_r>
 800bb22:	bf00      	nop
 800bb24:	200000a8 	.word	0x200000a8

0800bb28 <sbrk_aligned>:
 800bb28:	b570      	push	{r4, r5, r6, lr}
 800bb2a:	4e0e      	ldr	r6, [pc, #56]	; (800bb64 <sbrk_aligned+0x3c>)
 800bb2c:	460c      	mov	r4, r1
 800bb2e:	6831      	ldr	r1, [r6, #0]
 800bb30:	4605      	mov	r5, r0
 800bb32:	b911      	cbnz	r1, 800bb3a <sbrk_aligned+0x12>
 800bb34:	f000 ff72 	bl	800ca1c <_sbrk_r>
 800bb38:	6030      	str	r0, [r6, #0]
 800bb3a:	4621      	mov	r1, r4
 800bb3c:	4628      	mov	r0, r5
 800bb3e:	f000 ff6d 	bl	800ca1c <_sbrk_r>
 800bb42:	1c43      	adds	r3, r0, #1
 800bb44:	d00a      	beq.n	800bb5c <sbrk_aligned+0x34>
 800bb46:	1cc4      	adds	r4, r0, #3
 800bb48:	f024 0403 	bic.w	r4, r4, #3
 800bb4c:	42a0      	cmp	r0, r4
 800bb4e:	d007      	beq.n	800bb60 <sbrk_aligned+0x38>
 800bb50:	1a21      	subs	r1, r4, r0
 800bb52:	4628      	mov	r0, r5
 800bb54:	f000 ff62 	bl	800ca1c <_sbrk_r>
 800bb58:	3001      	adds	r0, #1
 800bb5a:	d101      	bne.n	800bb60 <sbrk_aligned+0x38>
 800bb5c:	f04f 34ff 	mov.w	r4, #4294967295
 800bb60:	4620      	mov	r0, r4
 800bb62:	bd70      	pop	{r4, r5, r6, pc}
 800bb64:	20000a3c 	.word	0x20000a3c

0800bb68 <_malloc_r>:
 800bb68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb6c:	1ccd      	adds	r5, r1, #3
 800bb6e:	f025 0503 	bic.w	r5, r5, #3
 800bb72:	3508      	adds	r5, #8
 800bb74:	2d0c      	cmp	r5, #12
 800bb76:	bf38      	it	cc
 800bb78:	250c      	movcc	r5, #12
 800bb7a:	2d00      	cmp	r5, #0
 800bb7c:	4607      	mov	r7, r0
 800bb7e:	db01      	blt.n	800bb84 <_malloc_r+0x1c>
 800bb80:	42a9      	cmp	r1, r5
 800bb82:	d905      	bls.n	800bb90 <_malloc_r+0x28>
 800bb84:	230c      	movs	r3, #12
 800bb86:	603b      	str	r3, [r7, #0]
 800bb88:	2600      	movs	r6, #0
 800bb8a:	4630      	mov	r0, r6
 800bb8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc64 <_malloc_r+0xfc>
 800bb94:	f000 f868 	bl	800bc68 <__malloc_lock>
 800bb98:	f8d8 3000 	ldr.w	r3, [r8]
 800bb9c:	461c      	mov	r4, r3
 800bb9e:	bb5c      	cbnz	r4, 800bbf8 <_malloc_r+0x90>
 800bba0:	4629      	mov	r1, r5
 800bba2:	4638      	mov	r0, r7
 800bba4:	f7ff ffc0 	bl	800bb28 <sbrk_aligned>
 800bba8:	1c43      	adds	r3, r0, #1
 800bbaa:	4604      	mov	r4, r0
 800bbac:	d155      	bne.n	800bc5a <_malloc_r+0xf2>
 800bbae:	f8d8 4000 	ldr.w	r4, [r8]
 800bbb2:	4626      	mov	r6, r4
 800bbb4:	2e00      	cmp	r6, #0
 800bbb6:	d145      	bne.n	800bc44 <_malloc_r+0xdc>
 800bbb8:	2c00      	cmp	r4, #0
 800bbba:	d048      	beq.n	800bc4e <_malloc_r+0xe6>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	4631      	mov	r1, r6
 800bbc0:	4638      	mov	r0, r7
 800bbc2:	eb04 0903 	add.w	r9, r4, r3
 800bbc6:	f000 ff29 	bl	800ca1c <_sbrk_r>
 800bbca:	4581      	cmp	r9, r0
 800bbcc:	d13f      	bne.n	800bc4e <_malloc_r+0xe6>
 800bbce:	6821      	ldr	r1, [r4, #0]
 800bbd0:	1a6d      	subs	r5, r5, r1
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f7ff ffa7 	bl	800bb28 <sbrk_aligned>
 800bbda:	3001      	adds	r0, #1
 800bbdc:	d037      	beq.n	800bc4e <_malloc_r+0xe6>
 800bbde:	6823      	ldr	r3, [r4, #0]
 800bbe0:	442b      	add	r3, r5
 800bbe2:	6023      	str	r3, [r4, #0]
 800bbe4:	f8d8 3000 	ldr.w	r3, [r8]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d038      	beq.n	800bc5e <_malloc_r+0xf6>
 800bbec:	685a      	ldr	r2, [r3, #4]
 800bbee:	42a2      	cmp	r2, r4
 800bbf0:	d12b      	bne.n	800bc4a <_malloc_r+0xe2>
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	605a      	str	r2, [r3, #4]
 800bbf6:	e00f      	b.n	800bc18 <_malloc_r+0xb0>
 800bbf8:	6822      	ldr	r2, [r4, #0]
 800bbfa:	1b52      	subs	r2, r2, r5
 800bbfc:	d41f      	bmi.n	800bc3e <_malloc_r+0xd6>
 800bbfe:	2a0b      	cmp	r2, #11
 800bc00:	d917      	bls.n	800bc32 <_malloc_r+0xca>
 800bc02:	1961      	adds	r1, r4, r5
 800bc04:	42a3      	cmp	r3, r4
 800bc06:	6025      	str	r5, [r4, #0]
 800bc08:	bf18      	it	ne
 800bc0a:	6059      	strne	r1, [r3, #4]
 800bc0c:	6863      	ldr	r3, [r4, #4]
 800bc0e:	bf08      	it	eq
 800bc10:	f8c8 1000 	streq.w	r1, [r8]
 800bc14:	5162      	str	r2, [r4, r5]
 800bc16:	604b      	str	r3, [r1, #4]
 800bc18:	4638      	mov	r0, r7
 800bc1a:	f104 060b 	add.w	r6, r4, #11
 800bc1e:	f000 f829 	bl	800bc74 <__malloc_unlock>
 800bc22:	f026 0607 	bic.w	r6, r6, #7
 800bc26:	1d23      	adds	r3, r4, #4
 800bc28:	1af2      	subs	r2, r6, r3
 800bc2a:	d0ae      	beq.n	800bb8a <_malloc_r+0x22>
 800bc2c:	1b9b      	subs	r3, r3, r6
 800bc2e:	50a3      	str	r3, [r4, r2]
 800bc30:	e7ab      	b.n	800bb8a <_malloc_r+0x22>
 800bc32:	42a3      	cmp	r3, r4
 800bc34:	6862      	ldr	r2, [r4, #4]
 800bc36:	d1dd      	bne.n	800bbf4 <_malloc_r+0x8c>
 800bc38:	f8c8 2000 	str.w	r2, [r8]
 800bc3c:	e7ec      	b.n	800bc18 <_malloc_r+0xb0>
 800bc3e:	4623      	mov	r3, r4
 800bc40:	6864      	ldr	r4, [r4, #4]
 800bc42:	e7ac      	b.n	800bb9e <_malloc_r+0x36>
 800bc44:	4634      	mov	r4, r6
 800bc46:	6876      	ldr	r6, [r6, #4]
 800bc48:	e7b4      	b.n	800bbb4 <_malloc_r+0x4c>
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	e7cc      	b.n	800bbe8 <_malloc_r+0x80>
 800bc4e:	230c      	movs	r3, #12
 800bc50:	603b      	str	r3, [r7, #0]
 800bc52:	4638      	mov	r0, r7
 800bc54:	f000 f80e 	bl	800bc74 <__malloc_unlock>
 800bc58:	e797      	b.n	800bb8a <_malloc_r+0x22>
 800bc5a:	6025      	str	r5, [r4, #0]
 800bc5c:	e7dc      	b.n	800bc18 <_malloc_r+0xb0>
 800bc5e:	605b      	str	r3, [r3, #4]
 800bc60:	deff      	udf	#255	; 0xff
 800bc62:	bf00      	nop
 800bc64:	20000a38 	.word	0x20000a38

0800bc68 <__malloc_lock>:
 800bc68:	4801      	ldr	r0, [pc, #4]	; (800bc70 <__malloc_lock+0x8>)
 800bc6a:	f000 bf24 	b.w	800cab6 <__retarget_lock_acquire_recursive>
 800bc6e:	bf00      	nop
 800bc70:	20000b80 	.word	0x20000b80

0800bc74 <__malloc_unlock>:
 800bc74:	4801      	ldr	r0, [pc, #4]	; (800bc7c <__malloc_unlock+0x8>)
 800bc76:	f000 bf1f 	b.w	800cab8 <__retarget_lock_release_recursive>
 800bc7a:	bf00      	nop
 800bc7c:	20000b80 	.word	0x20000b80

0800bc80 <__cvt>:
 800bc80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc84:	ec55 4b10 	vmov	r4, r5, d0
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	460e      	mov	r6, r1
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	462b      	mov	r3, r5
 800bc90:	bfbb      	ittet	lt
 800bc92:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bc96:	461d      	movlt	r5, r3
 800bc98:	2300      	movge	r3, #0
 800bc9a:	232d      	movlt	r3, #45	; 0x2d
 800bc9c:	700b      	strb	r3, [r1, #0]
 800bc9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bca0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bca4:	4691      	mov	r9, r2
 800bca6:	f023 0820 	bic.w	r8, r3, #32
 800bcaa:	bfbc      	itt	lt
 800bcac:	4622      	movlt	r2, r4
 800bcae:	4614      	movlt	r4, r2
 800bcb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bcb4:	d005      	beq.n	800bcc2 <__cvt+0x42>
 800bcb6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bcba:	d100      	bne.n	800bcbe <__cvt+0x3e>
 800bcbc:	3601      	adds	r6, #1
 800bcbe:	2102      	movs	r1, #2
 800bcc0:	e000      	b.n	800bcc4 <__cvt+0x44>
 800bcc2:	2103      	movs	r1, #3
 800bcc4:	ab03      	add	r3, sp, #12
 800bcc6:	9301      	str	r3, [sp, #4]
 800bcc8:	ab02      	add	r3, sp, #8
 800bcca:	9300      	str	r3, [sp, #0]
 800bccc:	ec45 4b10 	vmov	d0, r4, r5
 800bcd0:	4653      	mov	r3, sl
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	f000 ff7c 	bl	800cbd0 <_dtoa_r>
 800bcd8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bcdc:	4607      	mov	r7, r0
 800bcde:	d102      	bne.n	800bce6 <__cvt+0x66>
 800bce0:	f019 0f01 	tst.w	r9, #1
 800bce4:	d022      	beq.n	800bd2c <__cvt+0xac>
 800bce6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bcea:	eb07 0906 	add.w	r9, r7, r6
 800bcee:	d110      	bne.n	800bd12 <__cvt+0x92>
 800bcf0:	783b      	ldrb	r3, [r7, #0]
 800bcf2:	2b30      	cmp	r3, #48	; 0x30
 800bcf4:	d10a      	bne.n	800bd0c <__cvt+0x8c>
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	4620      	mov	r0, r4
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	f7f4 ff0b 	bl	8000b18 <__aeabi_dcmpeq>
 800bd02:	b918      	cbnz	r0, 800bd0c <__cvt+0x8c>
 800bd04:	f1c6 0601 	rsb	r6, r6, #1
 800bd08:	f8ca 6000 	str.w	r6, [sl]
 800bd0c:	f8da 3000 	ldr.w	r3, [sl]
 800bd10:	4499      	add	r9, r3
 800bd12:	2200      	movs	r2, #0
 800bd14:	2300      	movs	r3, #0
 800bd16:	4620      	mov	r0, r4
 800bd18:	4629      	mov	r1, r5
 800bd1a:	f7f4 fefd 	bl	8000b18 <__aeabi_dcmpeq>
 800bd1e:	b108      	cbz	r0, 800bd24 <__cvt+0xa4>
 800bd20:	f8cd 900c 	str.w	r9, [sp, #12]
 800bd24:	2230      	movs	r2, #48	; 0x30
 800bd26:	9b03      	ldr	r3, [sp, #12]
 800bd28:	454b      	cmp	r3, r9
 800bd2a:	d307      	bcc.n	800bd3c <__cvt+0xbc>
 800bd2c:	9b03      	ldr	r3, [sp, #12]
 800bd2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bd30:	1bdb      	subs	r3, r3, r7
 800bd32:	4638      	mov	r0, r7
 800bd34:	6013      	str	r3, [r2, #0]
 800bd36:	b004      	add	sp, #16
 800bd38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd3c:	1c59      	adds	r1, r3, #1
 800bd3e:	9103      	str	r1, [sp, #12]
 800bd40:	701a      	strb	r2, [r3, #0]
 800bd42:	e7f0      	b.n	800bd26 <__cvt+0xa6>

0800bd44 <__exponent>:
 800bd44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd46:	4603      	mov	r3, r0
 800bd48:	2900      	cmp	r1, #0
 800bd4a:	bfb8      	it	lt
 800bd4c:	4249      	neglt	r1, r1
 800bd4e:	f803 2b02 	strb.w	r2, [r3], #2
 800bd52:	bfb4      	ite	lt
 800bd54:	222d      	movlt	r2, #45	; 0x2d
 800bd56:	222b      	movge	r2, #43	; 0x2b
 800bd58:	2909      	cmp	r1, #9
 800bd5a:	7042      	strb	r2, [r0, #1]
 800bd5c:	dd2a      	ble.n	800bdb4 <__exponent+0x70>
 800bd5e:	f10d 0207 	add.w	r2, sp, #7
 800bd62:	4617      	mov	r7, r2
 800bd64:	260a      	movs	r6, #10
 800bd66:	4694      	mov	ip, r2
 800bd68:	fb91 f5f6 	sdiv	r5, r1, r6
 800bd6c:	fb06 1415 	mls	r4, r6, r5, r1
 800bd70:	3430      	adds	r4, #48	; 0x30
 800bd72:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800bd76:	460c      	mov	r4, r1
 800bd78:	2c63      	cmp	r4, #99	; 0x63
 800bd7a:	f102 32ff 	add.w	r2, r2, #4294967295
 800bd7e:	4629      	mov	r1, r5
 800bd80:	dcf1      	bgt.n	800bd66 <__exponent+0x22>
 800bd82:	3130      	adds	r1, #48	; 0x30
 800bd84:	f1ac 0402 	sub.w	r4, ip, #2
 800bd88:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bd8c:	1c41      	adds	r1, r0, #1
 800bd8e:	4622      	mov	r2, r4
 800bd90:	42ba      	cmp	r2, r7
 800bd92:	d30a      	bcc.n	800bdaa <__exponent+0x66>
 800bd94:	f10d 0209 	add.w	r2, sp, #9
 800bd98:	eba2 020c 	sub.w	r2, r2, ip
 800bd9c:	42bc      	cmp	r4, r7
 800bd9e:	bf88      	it	hi
 800bda0:	2200      	movhi	r2, #0
 800bda2:	4413      	add	r3, r2
 800bda4:	1a18      	subs	r0, r3, r0
 800bda6:	b003      	add	sp, #12
 800bda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdaa:	f812 5b01 	ldrb.w	r5, [r2], #1
 800bdae:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bdb2:	e7ed      	b.n	800bd90 <__exponent+0x4c>
 800bdb4:	2330      	movs	r3, #48	; 0x30
 800bdb6:	3130      	adds	r1, #48	; 0x30
 800bdb8:	7083      	strb	r3, [r0, #2]
 800bdba:	70c1      	strb	r1, [r0, #3]
 800bdbc:	1d03      	adds	r3, r0, #4
 800bdbe:	e7f1      	b.n	800bda4 <__exponent+0x60>

0800bdc0 <_printf_float>:
 800bdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdc4:	ed2d 8b02 	vpush	{d8}
 800bdc8:	b08d      	sub	sp, #52	; 0x34
 800bdca:	460c      	mov	r4, r1
 800bdcc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bdd0:	4616      	mov	r6, r2
 800bdd2:	461f      	mov	r7, r3
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	f000 fde9 	bl	800c9ac <_localeconv_r>
 800bdda:	f8d0 a000 	ldr.w	sl, [r0]
 800bdde:	4650      	mov	r0, sl
 800bde0:	f7f4 fa6e 	bl	80002c0 <strlen>
 800bde4:	2300      	movs	r3, #0
 800bde6:	930a      	str	r3, [sp, #40]	; 0x28
 800bde8:	6823      	ldr	r3, [r4, #0]
 800bdea:	9305      	str	r3, [sp, #20]
 800bdec:	f8d8 3000 	ldr.w	r3, [r8]
 800bdf0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bdf4:	3307      	adds	r3, #7
 800bdf6:	f023 0307 	bic.w	r3, r3, #7
 800bdfa:	f103 0208 	add.w	r2, r3, #8
 800bdfe:	f8c8 2000 	str.w	r2, [r8]
 800be02:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800be0a:	9307      	str	r3, [sp, #28]
 800be0c:	f8cd 8018 	str.w	r8, [sp, #24]
 800be10:	ee08 0a10 	vmov	s16, r0
 800be14:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800be18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be1c:	4b9e      	ldr	r3, [pc, #632]	; (800c098 <_printf_float+0x2d8>)
 800be1e:	f04f 32ff 	mov.w	r2, #4294967295
 800be22:	f7f4 feab 	bl	8000b7c <__aeabi_dcmpun>
 800be26:	bb88      	cbnz	r0, 800be8c <_printf_float+0xcc>
 800be28:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be2c:	4b9a      	ldr	r3, [pc, #616]	; (800c098 <_printf_float+0x2d8>)
 800be2e:	f04f 32ff 	mov.w	r2, #4294967295
 800be32:	f7f4 fe85 	bl	8000b40 <__aeabi_dcmple>
 800be36:	bb48      	cbnz	r0, 800be8c <_printf_float+0xcc>
 800be38:	2200      	movs	r2, #0
 800be3a:	2300      	movs	r3, #0
 800be3c:	4640      	mov	r0, r8
 800be3e:	4649      	mov	r1, r9
 800be40:	f7f4 fe74 	bl	8000b2c <__aeabi_dcmplt>
 800be44:	b110      	cbz	r0, 800be4c <_printf_float+0x8c>
 800be46:	232d      	movs	r3, #45	; 0x2d
 800be48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be4c:	4a93      	ldr	r2, [pc, #588]	; (800c09c <_printf_float+0x2dc>)
 800be4e:	4b94      	ldr	r3, [pc, #592]	; (800c0a0 <_printf_float+0x2e0>)
 800be50:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800be54:	bf94      	ite	ls
 800be56:	4690      	movls	r8, r2
 800be58:	4698      	movhi	r8, r3
 800be5a:	2303      	movs	r3, #3
 800be5c:	6123      	str	r3, [r4, #16]
 800be5e:	9b05      	ldr	r3, [sp, #20]
 800be60:	f023 0304 	bic.w	r3, r3, #4
 800be64:	6023      	str	r3, [r4, #0]
 800be66:	f04f 0900 	mov.w	r9, #0
 800be6a:	9700      	str	r7, [sp, #0]
 800be6c:	4633      	mov	r3, r6
 800be6e:	aa0b      	add	r2, sp, #44	; 0x2c
 800be70:	4621      	mov	r1, r4
 800be72:	4628      	mov	r0, r5
 800be74:	f000 f9da 	bl	800c22c <_printf_common>
 800be78:	3001      	adds	r0, #1
 800be7a:	f040 8090 	bne.w	800bf9e <_printf_float+0x1de>
 800be7e:	f04f 30ff 	mov.w	r0, #4294967295
 800be82:	b00d      	add	sp, #52	; 0x34
 800be84:	ecbd 8b02 	vpop	{d8}
 800be88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be8c:	4642      	mov	r2, r8
 800be8e:	464b      	mov	r3, r9
 800be90:	4640      	mov	r0, r8
 800be92:	4649      	mov	r1, r9
 800be94:	f7f4 fe72 	bl	8000b7c <__aeabi_dcmpun>
 800be98:	b140      	cbz	r0, 800beac <_printf_float+0xec>
 800be9a:	464b      	mov	r3, r9
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	bfbc      	itt	lt
 800bea0:	232d      	movlt	r3, #45	; 0x2d
 800bea2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bea6:	4a7f      	ldr	r2, [pc, #508]	; (800c0a4 <_printf_float+0x2e4>)
 800bea8:	4b7f      	ldr	r3, [pc, #508]	; (800c0a8 <_printf_float+0x2e8>)
 800beaa:	e7d1      	b.n	800be50 <_printf_float+0x90>
 800beac:	6863      	ldr	r3, [r4, #4]
 800beae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800beb2:	9206      	str	r2, [sp, #24]
 800beb4:	1c5a      	adds	r2, r3, #1
 800beb6:	d13f      	bne.n	800bf38 <_printf_float+0x178>
 800beb8:	2306      	movs	r3, #6
 800beba:	6063      	str	r3, [r4, #4]
 800bebc:	9b05      	ldr	r3, [sp, #20]
 800bebe:	6861      	ldr	r1, [r4, #4]
 800bec0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bec4:	2300      	movs	r3, #0
 800bec6:	9303      	str	r3, [sp, #12]
 800bec8:	ab0a      	add	r3, sp, #40	; 0x28
 800beca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bece:	ab09      	add	r3, sp, #36	; 0x24
 800bed0:	ec49 8b10 	vmov	d0, r8, r9
 800bed4:	9300      	str	r3, [sp, #0]
 800bed6:	6022      	str	r2, [r4, #0]
 800bed8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bedc:	4628      	mov	r0, r5
 800bede:	f7ff fecf 	bl	800bc80 <__cvt>
 800bee2:	9b06      	ldr	r3, [sp, #24]
 800bee4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bee6:	2b47      	cmp	r3, #71	; 0x47
 800bee8:	4680      	mov	r8, r0
 800beea:	d108      	bne.n	800befe <_printf_float+0x13e>
 800beec:	1cc8      	adds	r0, r1, #3
 800beee:	db02      	blt.n	800bef6 <_printf_float+0x136>
 800bef0:	6863      	ldr	r3, [r4, #4]
 800bef2:	4299      	cmp	r1, r3
 800bef4:	dd41      	ble.n	800bf7a <_printf_float+0x1ba>
 800bef6:	f1ab 0302 	sub.w	r3, fp, #2
 800befa:	fa5f fb83 	uxtb.w	fp, r3
 800befe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bf02:	d820      	bhi.n	800bf46 <_printf_float+0x186>
 800bf04:	3901      	subs	r1, #1
 800bf06:	465a      	mov	r2, fp
 800bf08:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bf0c:	9109      	str	r1, [sp, #36]	; 0x24
 800bf0e:	f7ff ff19 	bl	800bd44 <__exponent>
 800bf12:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf14:	1813      	adds	r3, r2, r0
 800bf16:	2a01      	cmp	r2, #1
 800bf18:	4681      	mov	r9, r0
 800bf1a:	6123      	str	r3, [r4, #16]
 800bf1c:	dc02      	bgt.n	800bf24 <_printf_float+0x164>
 800bf1e:	6822      	ldr	r2, [r4, #0]
 800bf20:	07d2      	lsls	r2, r2, #31
 800bf22:	d501      	bpl.n	800bf28 <_printf_float+0x168>
 800bf24:	3301      	adds	r3, #1
 800bf26:	6123      	str	r3, [r4, #16]
 800bf28:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d09c      	beq.n	800be6a <_printf_float+0xaa>
 800bf30:	232d      	movs	r3, #45	; 0x2d
 800bf32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf36:	e798      	b.n	800be6a <_printf_float+0xaa>
 800bf38:	9a06      	ldr	r2, [sp, #24]
 800bf3a:	2a47      	cmp	r2, #71	; 0x47
 800bf3c:	d1be      	bne.n	800bebc <_printf_float+0xfc>
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1bc      	bne.n	800bebc <_printf_float+0xfc>
 800bf42:	2301      	movs	r3, #1
 800bf44:	e7b9      	b.n	800beba <_printf_float+0xfa>
 800bf46:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bf4a:	d118      	bne.n	800bf7e <_printf_float+0x1be>
 800bf4c:	2900      	cmp	r1, #0
 800bf4e:	6863      	ldr	r3, [r4, #4]
 800bf50:	dd0b      	ble.n	800bf6a <_printf_float+0x1aa>
 800bf52:	6121      	str	r1, [r4, #16]
 800bf54:	b913      	cbnz	r3, 800bf5c <_printf_float+0x19c>
 800bf56:	6822      	ldr	r2, [r4, #0]
 800bf58:	07d0      	lsls	r0, r2, #31
 800bf5a:	d502      	bpl.n	800bf62 <_printf_float+0x1a2>
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	440b      	add	r3, r1
 800bf60:	6123      	str	r3, [r4, #16]
 800bf62:	65a1      	str	r1, [r4, #88]	; 0x58
 800bf64:	f04f 0900 	mov.w	r9, #0
 800bf68:	e7de      	b.n	800bf28 <_printf_float+0x168>
 800bf6a:	b913      	cbnz	r3, 800bf72 <_printf_float+0x1b2>
 800bf6c:	6822      	ldr	r2, [r4, #0]
 800bf6e:	07d2      	lsls	r2, r2, #31
 800bf70:	d501      	bpl.n	800bf76 <_printf_float+0x1b6>
 800bf72:	3302      	adds	r3, #2
 800bf74:	e7f4      	b.n	800bf60 <_printf_float+0x1a0>
 800bf76:	2301      	movs	r3, #1
 800bf78:	e7f2      	b.n	800bf60 <_printf_float+0x1a0>
 800bf7a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bf7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf80:	4299      	cmp	r1, r3
 800bf82:	db05      	blt.n	800bf90 <_printf_float+0x1d0>
 800bf84:	6823      	ldr	r3, [r4, #0]
 800bf86:	6121      	str	r1, [r4, #16]
 800bf88:	07d8      	lsls	r0, r3, #31
 800bf8a:	d5ea      	bpl.n	800bf62 <_printf_float+0x1a2>
 800bf8c:	1c4b      	adds	r3, r1, #1
 800bf8e:	e7e7      	b.n	800bf60 <_printf_float+0x1a0>
 800bf90:	2900      	cmp	r1, #0
 800bf92:	bfd4      	ite	le
 800bf94:	f1c1 0202 	rsble	r2, r1, #2
 800bf98:	2201      	movgt	r2, #1
 800bf9a:	4413      	add	r3, r2
 800bf9c:	e7e0      	b.n	800bf60 <_printf_float+0x1a0>
 800bf9e:	6823      	ldr	r3, [r4, #0]
 800bfa0:	055a      	lsls	r2, r3, #21
 800bfa2:	d407      	bmi.n	800bfb4 <_printf_float+0x1f4>
 800bfa4:	6923      	ldr	r3, [r4, #16]
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	4631      	mov	r1, r6
 800bfaa:	4628      	mov	r0, r5
 800bfac:	47b8      	blx	r7
 800bfae:	3001      	adds	r0, #1
 800bfb0:	d12c      	bne.n	800c00c <_printf_float+0x24c>
 800bfb2:	e764      	b.n	800be7e <_printf_float+0xbe>
 800bfb4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bfb8:	f240 80e0 	bls.w	800c17c <_printf_float+0x3bc>
 800bfbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	f7f4 fda8 	bl	8000b18 <__aeabi_dcmpeq>
 800bfc8:	2800      	cmp	r0, #0
 800bfca:	d034      	beq.n	800c036 <_printf_float+0x276>
 800bfcc:	4a37      	ldr	r2, [pc, #220]	; (800c0ac <_printf_float+0x2ec>)
 800bfce:	2301      	movs	r3, #1
 800bfd0:	4631      	mov	r1, r6
 800bfd2:	4628      	mov	r0, r5
 800bfd4:	47b8      	blx	r7
 800bfd6:	3001      	adds	r0, #1
 800bfd8:	f43f af51 	beq.w	800be7e <_printf_float+0xbe>
 800bfdc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfe0:	429a      	cmp	r2, r3
 800bfe2:	db02      	blt.n	800bfea <_printf_float+0x22a>
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	07d8      	lsls	r0, r3, #31
 800bfe8:	d510      	bpl.n	800c00c <_printf_float+0x24c>
 800bfea:	ee18 3a10 	vmov	r3, s16
 800bfee:	4652      	mov	r2, sl
 800bff0:	4631      	mov	r1, r6
 800bff2:	4628      	mov	r0, r5
 800bff4:	47b8      	blx	r7
 800bff6:	3001      	adds	r0, #1
 800bff8:	f43f af41 	beq.w	800be7e <_printf_float+0xbe>
 800bffc:	f04f 0800 	mov.w	r8, #0
 800c000:	f104 091a 	add.w	r9, r4, #26
 800c004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c006:	3b01      	subs	r3, #1
 800c008:	4543      	cmp	r3, r8
 800c00a:	dc09      	bgt.n	800c020 <_printf_float+0x260>
 800c00c:	6823      	ldr	r3, [r4, #0]
 800c00e:	079b      	lsls	r3, r3, #30
 800c010:	f100 8107 	bmi.w	800c222 <_printf_float+0x462>
 800c014:	68e0      	ldr	r0, [r4, #12]
 800c016:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c018:	4298      	cmp	r0, r3
 800c01a:	bfb8      	it	lt
 800c01c:	4618      	movlt	r0, r3
 800c01e:	e730      	b.n	800be82 <_printf_float+0xc2>
 800c020:	2301      	movs	r3, #1
 800c022:	464a      	mov	r2, r9
 800c024:	4631      	mov	r1, r6
 800c026:	4628      	mov	r0, r5
 800c028:	47b8      	blx	r7
 800c02a:	3001      	adds	r0, #1
 800c02c:	f43f af27 	beq.w	800be7e <_printf_float+0xbe>
 800c030:	f108 0801 	add.w	r8, r8, #1
 800c034:	e7e6      	b.n	800c004 <_printf_float+0x244>
 800c036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c038:	2b00      	cmp	r3, #0
 800c03a:	dc39      	bgt.n	800c0b0 <_printf_float+0x2f0>
 800c03c:	4a1b      	ldr	r2, [pc, #108]	; (800c0ac <_printf_float+0x2ec>)
 800c03e:	2301      	movs	r3, #1
 800c040:	4631      	mov	r1, r6
 800c042:	4628      	mov	r0, r5
 800c044:	47b8      	blx	r7
 800c046:	3001      	adds	r0, #1
 800c048:	f43f af19 	beq.w	800be7e <_printf_float+0xbe>
 800c04c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c050:	4313      	orrs	r3, r2
 800c052:	d102      	bne.n	800c05a <_printf_float+0x29a>
 800c054:	6823      	ldr	r3, [r4, #0]
 800c056:	07d9      	lsls	r1, r3, #31
 800c058:	d5d8      	bpl.n	800c00c <_printf_float+0x24c>
 800c05a:	ee18 3a10 	vmov	r3, s16
 800c05e:	4652      	mov	r2, sl
 800c060:	4631      	mov	r1, r6
 800c062:	4628      	mov	r0, r5
 800c064:	47b8      	blx	r7
 800c066:	3001      	adds	r0, #1
 800c068:	f43f af09 	beq.w	800be7e <_printf_float+0xbe>
 800c06c:	f04f 0900 	mov.w	r9, #0
 800c070:	f104 0a1a 	add.w	sl, r4, #26
 800c074:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c076:	425b      	negs	r3, r3
 800c078:	454b      	cmp	r3, r9
 800c07a:	dc01      	bgt.n	800c080 <_printf_float+0x2c0>
 800c07c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c07e:	e792      	b.n	800bfa6 <_printf_float+0x1e6>
 800c080:	2301      	movs	r3, #1
 800c082:	4652      	mov	r2, sl
 800c084:	4631      	mov	r1, r6
 800c086:	4628      	mov	r0, r5
 800c088:	47b8      	blx	r7
 800c08a:	3001      	adds	r0, #1
 800c08c:	f43f aef7 	beq.w	800be7e <_printf_float+0xbe>
 800c090:	f109 0901 	add.w	r9, r9, #1
 800c094:	e7ee      	b.n	800c074 <_printf_float+0x2b4>
 800c096:	bf00      	nop
 800c098:	7fefffff 	.word	0x7fefffff
 800c09c:	080129ec 	.word	0x080129ec
 800c0a0:	080129f0 	.word	0x080129f0
 800c0a4:	080129f4 	.word	0x080129f4
 800c0a8:	080129f8 	.word	0x080129f8
 800c0ac:	080129fc 	.word	0x080129fc
 800c0b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c0b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	bfa8      	it	ge
 800c0b8:	461a      	movge	r2, r3
 800c0ba:	2a00      	cmp	r2, #0
 800c0bc:	4691      	mov	r9, r2
 800c0be:	dc37      	bgt.n	800c130 <_printf_float+0x370>
 800c0c0:	f04f 0b00 	mov.w	fp, #0
 800c0c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0c8:	f104 021a 	add.w	r2, r4, #26
 800c0cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c0ce:	9305      	str	r3, [sp, #20]
 800c0d0:	eba3 0309 	sub.w	r3, r3, r9
 800c0d4:	455b      	cmp	r3, fp
 800c0d6:	dc33      	bgt.n	800c140 <_printf_float+0x380>
 800c0d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	db3b      	blt.n	800c158 <_printf_float+0x398>
 800c0e0:	6823      	ldr	r3, [r4, #0]
 800c0e2:	07da      	lsls	r2, r3, #31
 800c0e4:	d438      	bmi.n	800c158 <_printf_float+0x398>
 800c0e6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c0ea:	eba2 0903 	sub.w	r9, r2, r3
 800c0ee:	9b05      	ldr	r3, [sp, #20]
 800c0f0:	1ad2      	subs	r2, r2, r3
 800c0f2:	4591      	cmp	r9, r2
 800c0f4:	bfa8      	it	ge
 800c0f6:	4691      	movge	r9, r2
 800c0f8:	f1b9 0f00 	cmp.w	r9, #0
 800c0fc:	dc35      	bgt.n	800c16a <_printf_float+0x3aa>
 800c0fe:	f04f 0800 	mov.w	r8, #0
 800c102:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c106:	f104 0a1a 	add.w	sl, r4, #26
 800c10a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c10e:	1a9b      	subs	r3, r3, r2
 800c110:	eba3 0309 	sub.w	r3, r3, r9
 800c114:	4543      	cmp	r3, r8
 800c116:	f77f af79 	ble.w	800c00c <_printf_float+0x24c>
 800c11a:	2301      	movs	r3, #1
 800c11c:	4652      	mov	r2, sl
 800c11e:	4631      	mov	r1, r6
 800c120:	4628      	mov	r0, r5
 800c122:	47b8      	blx	r7
 800c124:	3001      	adds	r0, #1
 800c126:	f43f aeaa 	beq.w	800be7e <_printf_float+0xbe>
 800c12a:	f108 0801 	add.w	r8, r8, #1
 800c12e:	e7ec      	b.n	800c10a <_printf_float+0x34a>
 800c130:	4613      	mov	r3, r2
 800c132:	4631      	mov	r1, r6
 800c134:	4642      	mov	r2, r8
 800c136:	4628      	mov	r0, r5
 800c138:	47b8      	blx	r7
 800c13a:	3001      	adds	r0, #1
 800c13c:	d1c0      	bne.n	800c0c0 <_printf_float+0x300>
 800c13e:	e69e      	b.n	800be7e <_printf_float+0xbe>
 800c140:	2301      	movs	r3, #1
 800c142:	4631      	mov	r1, r6
 800c144:	4628      	mov	r0, r5
 800c146:	9205      	str	r2, [sp, #20]
 800c148:	47b8      	blx	r7
 800c14a:	3001      	adds	r0, #1
 800c14c:	f43f ae97 	beq.w	800be7e <_printf_float+0xbe>
 800c150:	9a05      	ldr	r2, [sp, #20]
 800c152:	f10b 0b01 	add.w	fp, fp, #1
 800c156:	e7b9      	b.n	800c0cc <_printf_float+0x30c>
 800c158:	ee18 3a10 	vmov	r3, s16
 800c15c:	4652      	mov	r2, sl
 800c15e:	4631      	mov	r1, r6
 800c160:	4628      	mov	r0, r5
 800c162:	47b8      	blx	r7
 800c164:	3001      	adds	r0, #1
 800c166:	d1be      	bne.n	800c0e6 <_printf_float+0x326>
 800c168:	e689      	b.n	800be7e <_printf_float+0xbe>
 800c16a:	9a05      	ldr	r2, [sp, #20]
 800c16c:	464b      	mov	r3, r9
 800c16e:	4442      	add	r2, r8
 800c170:	4631      	mov	r1, r6
 800c172:	4628      	mov	r0, r5
 800c174:	47b8      	blx	r7
 800c176:	3001      	adds	r0, #1
 800c178:	d1c1      	bne.n	800c0fe <_printf_float+0x33e>
 800c17a:	e680      	b.n	800be7e <_printf_float+0xbe>
 800c17c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c17e:	2a01      	cmp	r2, #1
 800c180:	dc01      	bgt.n	800c186 <_printf_float+0x3c6>
 800c182:	07db      	lsls	r3, r3, #31
 800c184:	d53a      	bpl.n	800c1fc <_printf_float+0x43c>
 800c186:	2301      	movs	r3, #1
 800c188:	4642      	mov	r2, r8
 800c18a:	4631      	mov	r1, r6
 800c18c:	4628      	mov	r0, r5
 800c18e:	47b8      	blx	r7
 800c190:	3001      	adds	r0, #1
 800c192:	f43f ae74 	beq.w	800be7e <_printf_float+0xbe>
 800c196:	ee18 3a10 	vmov	r3, s16
 800c19a:	4652      	mov	r2, sl
 800c19c:	4631      	mov	r1, r6
 800c19e:	4628      	mov	r0, r5
 800c1a0:	47b8      	blx	r7
 800c1a2:	3001      	adds	r0, #1
 800c1a4:	f43f ae6b 	beq.w	800be7e <_printf_float+0xbe>
 800c1a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800c1b4:	f7f4 fcb0 	bl	8000b18 <__aeabi_dcmpeq>
 800c1b8:	b9d8      	cbnz	r0, 800c1f2 <_printf_float+0x432>
 800c1ba:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c1be:	f108 0201 	add.w	r2, r8, #1
 800c1c2:	4631      	mov	r1, r6
 800c1c4:	4628      	mov	r0, r5
 800c1c6:	47b8      	blx	r7
 800c1c8:	3001      	adds	r0, #1
 800c1ca:	d10e      	bne.n	800c1ea <_printf_float+0x42a>
 800c1cc:	e657      	b.n	800be7e <_printf_float+0xbe>
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	4652      	mov	r2, sl
 800c1d2:	4631      	mov	r1, r6
 800c1d4:	4628      	mov	r0, r5
 800c1d6:	47b8      	blx	r7
 800c1d8:	3001      	adds	r0, #1
 800c1da:	f43f ae50 	beq.w	800be7e <_printf_float+0xbe>
 800c1de:	f108 0801 	add.w	r8, r8, #1
 800c1e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1e4:	3b01      	subs	r3, #1
 800c1e6:	4543      	cmp	r3, r8
 800c1e8:	dcf1      	bgt.n	800c1ce <_printf_float+0x40e>
 800c1ea:	464b      	mov	r3, r9
 800c1ec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c1f0:	e6da      	b.n	800bfa8 <_printf_float+0x1e8>
 800c1f2:	f04f 0800 	mov.w	r8, #0
 800c1f6:	f104 0a1a 	add.w	sl, r4, #26
 800c1fa:	e7f2      	b.n	800c1e2 <_printf_float+0x422>
 800c1fc:	2301      	movs	r3, #1
 800c1fe:	4642      	mov	r2, r8
 800c200:	e7df      	b.n	800c1c2 <_printf_float+0x402>
 800c202:	2301      	movs	r3, #1
 800c204:	464a      	mov	r2, r9
 800c206:	4631      	mov	r1, r6
 800c208:	4628      	mov	r0, r5
 800c20a:	47b8      	blx	r7
 800c20c:	3001      	adds	r0, #1
 800c20e:	f43f ae36 	beq.w	800be7e <_printf_float+0xbe>
 800c212:	f108 0801 	add.w	r8, r8, #1
 800c216:	68e3      	ldr	r3, [r4, #12]
 800c218:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c21a:	1a5b      	subs	r3, r3, r1
 800c21c:	4543      	cmp	r3, r8
 800c21e:	dcf0      	bgt.n	800c202 <_printf_float+0x442>
 800c220:	e6f8      	b.n	800c014 <_printf_float+0x254>
 800c222:	f04f 0800 	mov.w	r8, #0
 800c226:	f104 0919 	add.w	r9, r4, #25
 800c22a:	e7f4      	b.n	800c216 <_printf_float+0x456>

0800c22c <_printf_common>:
 800c22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c230:	4616      	mov	r6, r2
 800c232:	4699      	mov	r9, r3
 800c234:	688a      	ldr	r2, [r1, #8]
 800c236:	690b      	ldr	r3, [r1, #16]
 800c238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c23c:	4293      	cmp	r3, r2
 800c23e:	bfb8      	it	lt
 800c240:	4613      	movlt	r3, r2
 800c242:	6033      	str	r3, [r6, #0]
 800c244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c248:	4607      	mov	r7, r0
 800c24a:	460c      	mov	r4, r1
 800c24c:	b10a      	cbz	r2, 800c252 <_printf_common+0x26>
 800c24e:	3301      	adds	r3, #1
 800c250:	6033      	str	r3, [r6, #0]
 800c252:	6823      	ldr	r3, [r4, #0]
 800c254:	0699      	lsls	r1, r3, #26
 800c256:	bf42      	ittt	mi
 800c258:	6833      	ldrmi	r3, [r6, #0]
 800c25a:	3302      	addmi	r3, #2
 800c25c:	6033      	strmi	r3, [r6, #0]
 800c25e:	6825      	ldr	r5, [r4, #0]
 800c260:	f015 0506 	ands.w	r5, r5, #6
 800c264:	d106      	bne.n	800c274 <_printf_common+0x48>
 800c266:	f104 0a19 	add.w	sl, r4, #25
 800c26a:	68e3      	ldr	r3, [r4, #12]
 800c26c:	6832      	ldr	r2, [r6, #0]
 800c26e:	1a9b      	subs	r3, r3, r2
 800c270:	42ab      	cmp	r3, r5
 800c272:	dc26      	bgt.n	800c2c2 <_printf_common+0x96>
 800c274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c278:	1e13      	subs	r3, r2, #0
 800c27a:	6822      	ldr	r2, [r4, #0]
 800c27c:	bf18      	it	ne
 800c27e:	2301      	movne	r3, #1
 800c280:	0692      	lsls	r2, r2, #26
 800c282:	d42b      	bmi.n	800c2dc <_printf_common+0xb0>
 800c284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c288:	4649      	mov	r1, r9
 800c28a:	4638      	mov	r0, r7
 800c28c:	47c0      	blx	r8
 800c28e:	3001      	adds	r0, #1
 800c290:	d01e      	beq.n	800c2d0 <_printf_common+0xa4>
 800c292:	6823      	ldr	r3, [r4, #0]
 800c294:	6922      	ldr	r2, [r4, #16]
 800c296:	f003 0306 	and.w	r3, r3, #6
 800c29a:	2b04      	cmp	r3, #4
 800c29c:	bf02      	ittt	eq
 800c29e:	68e5      	ldreq	r5, [r4, #12]
 800c2a0:	6833      	ldreq	r3, [r6, #0]
 800c2a2:	1aed      	subeq	r5, r5, r3
 800c2a4:	68a3      	ldr	r3, [r4, #8]
 800c2a6:	bf0c      	ite	eq
 800c2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c2ac:	2500      	movne	r5, #0
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	bfc4      	itt	gt
 800c2b2:	1a9b      	subgt	r3, r3, r2
 800c2b4:	18ed      	addgt	r5, r5, r3
 800c2b6:	2600      	movs	r6, #0
 800c2b8:	341a      	adds	r4, #26
 800c2ba:	42b5      	cmp	r5, r6
 800c2bc:	d11a      	bne.n	800c2f4 <_printf_common+0xc8>
 800c2be:	2000      	movs	r0, #0
 800c2c0:	e008      	b.n	800c2d4 <_printf_common+0xa8>
 800c2c2:	2301      	movs	r3, #1
 800c2c4:	4652      	mov	r2, sl
 800c2c6:	4649      	mov	r1, r9
 800c2c8:	4638      	mov	r0, r7
 800c2ca:	47c0      	blx	r8
 800c2cc:	3001      	adds	r0, #1
 800c2ce:	d103      	bne.n	800c2d8 <_printf_common+0xac>
 800c2d0:	f04f 30ff 	mov.w	r0, #4294967295
 800c2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d8:	3501      	adds	r5, #1
 800c2da:	e7c6      	b.n	800c26a <_printf_common+0x3e>
 800c2dc:	18e1      	adds	r1, r4, r3
 800c2de:	1c5a      	adds	r2, r3, #1
 800c2e0:	2030      	movs	r0, #48	; 0x30
 800c2e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c2e6:	4422      	add	r2, r4
 800c2e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c2ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c2f0:	3302      	adds	r3, #2
 800c2f2:	e7c7      	b.n	800c284 <_printf_common+0x58>
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	4622      	mov	r2, r4
 800c2f8:	4649      	mov	r1, r9
 800c2fa:	4638      	mov	r0, r7
 800c2fc:	47c0      	blx	r8
 800c2fe:	3001      	adds	r0, #1
 800c300:	d0e6      	beq.n	800c2d0 <_printf_common+0xa4>
 800c302:	3601      	adds	r6, #1
 800c304:	e7d9      	b.n	800c2ba <_printf_common+0x8e>
	...

0800c308 <_printf_i>:
 800c308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c30c:	7e0f      	ldrb	r7, [r1, #24]
 800c30e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c310:	2f78      	cmp	r7, #120	; 0x78
 800c312:	4691      	mov	r9, r2
 800c314:	4680      	mov	r8, r0
 800c316:	460c      	mov	r4, r1
 800c318:	469a      	mov	sl, r3
 800c31a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c31e:	d807      	bhi.n	800c330 <_printf_i+0x28>
 800c320:	2f62      	cmp	r7, #98	; 0x62
 800c322:	d80a      	bhi.n	800c33a <_printf_i+0x32>
 800c324:	2f00      	cmp	r7, #0
 800c326:	f000 80d4 	beq.w	800c4d2 <_printf_i+0x1ca>
 800c32a:	2f58      	cmp	r7, #88	; 0x58
 800c32c:	f000 80c0 	beq.w	800c4b0 <_printf_i+0x1a8>
 800c330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c338:	e03a      	b.n	800c3b0 <_printf_i+0xa8>
 800c33a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c33e:	2b15      	cmp	r3, #21
 800c340:	d8f6      	bhi.n	800c330 <_printf_i+0x28>
 800c342:	a101      	add	r1, pc, #4	; (adr r1, 800c348 <_printf_i+0x40>)
 800c344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c348:	0800c3a1 	.word	0x0800c3a1
 800c34c:	0800c3b5 	.word	0x0800c3b5
 800c350:	0800c331 	.word	0x0800c331
 800c354:	0800c331 	.word	0x0800c331
 800c358:	0800c331 	.word	0x0800c331
 800c35c:	0800c331 	.word	0x0800c331
 800c360:	0800c3b5 	.word	0x0800c3b5
 800c364:	0800c331 	.word	0x0800c331
 800c368:	0800c331 	.word	0x0800c331
 800c36c:	0800c331 	.word	0x0800c331
 800c370:	0800c331 	.word	0x0800c331
 800c374:	0800c4b9 	.word	0x0800c4b9
 800c378:	0800c3e1 	.word	0x0800c3e1
 800c37c:	0800c473 	.word	0x0800c473
 800c380:	0800c331 	.word	0x0800c331
 800c384:	0800c331 	.word	0x0800c331
 800c388:	0800c4db 	.word	0x0800c4db
 800c38c:	0800c331 	.word	0x0800c331
 800c390:	0800c3e1 	.word	0x0800c3e1
 800c394:	0800c331 	.word	0x0800c331
 800c398:	0800c331 	.word	0x0800c331
 800c39c:	0800c47b 	.word	0x0800c47b
 800c3a0:	682b      	ldr	r3, [r5, #0]
 800c3a2:	1d1a      	adds	r2, r3, #4
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	602a      	str	r2, [r5, #0]
 800c3a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c3ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	e09f      	b.n	800c4f4 <_printf_i+0x1ec>
 800c3b4:	6820      	ldr	r0, [r4, #0]
 800c3b6:	682b      	ldr	r3, [r5, #0]
 800c3b8:	0607      	lsls	r7, r0, #24
 800c3ba:	f103 0104 	add.w	r1, r3, #4
 800c3be:	6029      	str	r1, [r5, #0]
 800c3c0:	d501      	bpl.n	800c3c6 <_printf_i+0xbe>
 800c3c2:	681e      	ldr	r6, [r3, #0]
 800c3c4:	e003      	b.n	800c3ce <_printf_i+0xc6>
 800c3c6:	0646      	lsls	r6, r0, #25
 800c3c8:	d5fb      	bpl.n	800c3c2 <_printf_i+0xba>
 800c3ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c3ce:	2e00      	cmp	r6, #0
 800c3d0:	da03      	bge.n	800c3da <_printf_i+0xd2>
 800c3d2:	232d      	movs	r3, #45	; 0x2d
 800c3d4:	4276      	negs	r6, r6
 800c3d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3da:	485a      	ldr	r0, [pc, #360]	; (800c544 <_printf_i+0x23c>)
 800c3dc:	230a      	movs	r3, #10
 800c3de:	e012      	b.n	800c406 <_printf_i+0xfe>
 800c3e0:	682b      	ldr	r3, [r5, #0]
 800c3e2:	6820      	ldr	r0, [r4, #0]
 800c3e4:	1d19      	adds	r1, r3, #4
 800c3e6:	6029      	str	r1, [r5, #0]
 800c3e8:	0605      	lsls	r5, r0, #24
 800c3ea:	d501      	bpl.n	800c3f0 <_printf_i+0xe8>
 800c3ec:	681e      	ldr	r6, [r3, #0]
 800c3ee:	e002      	b.n	800c3f6 <_printf_i+0xee>
 800c3f0:	0641      	lsls	r1, r0, #25
 800c3f2:	d5fb      	bpl.n	800c3ec <_printf_i+0xe4>
 800c3f4:	881e      	ldrh	r6, [r3, #0]
 800c3f6:	4853      	ldr	r0, [pc, #332]	; (800c544 <_printf_i+0x23c>)
 800c3f8:	2f6f      	cmp	r7, #111	; 0x6f
 800c3fa:	bf0c      	ite	eq
 800c3fc:	2308      	moveq	r3, #8
 800c3fe:	230a      	movne	r3, #10
 800c400:	2100      	movs	r1, #0
 800c402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c406:	6865      	ldr	r5, [r4, #4]
 800c408:	60a5      	str	r5, [r4, #8]
 800c40a:	2d00      	cmp	r5, #0
 800c40c:	bfa2      	ittt	ge
 800c40e:	6821      	ldrge	r1, [r4, #0]
 800c410:	f021 0104 	bicge.w	r1, r1, #4
 800c414:	6021      	strge	r1, [r4, #0]
 800c416:	b90e      	cbnz	r6, 800c41c <_printf_i+0x114>
 800c418:	2d00      	cmp	r5, #0
 800c41a:	d04b      	beq.n	800c4b4 <_printf_i+0x1ac>
 800c41c:	4615      	mov	r5, r2
 800c41e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c422:	fb03 6711 	mls	r7, r3, r1, r6
 800c426:	5dc7      	ldrb	r7, [r0, r7]
 800c428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c42c:	4637      	mov	r7, r6
 800c42e:	42bb      	cmp	r3, r7
 800c430:	460e      	mov	r6, r1
 800c432:	d9f4      	bls.n	800c41e <_printf_i+0x116>
 800c434:	2b08      	cmp	r3, #8
 800c436:	d10b      	bne.n	800c450 <_printf_i+0x148>
 800c438:	6823      	ldr	r3, [r4, #0]
 800c43a:	07de      	lsls	r6, r3, #31
 800c43c:	d508      	bpl.n	800c450 <_printf_i+0x148>
 800c43e:	6923      	ldr	r3, [r4, #16]
 800c440:	6861      	ldr	r1, [r4, #4]
 800c442:	4299      	cmp	r1, r3
 800c444:	bfde      	ittt	le
 800c446:	2330      	movle	r3, #48	; 0x30
 800c448:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c44c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c450:	1b52      	subs	r2, r2, r5
 800c452:	6122      	str	r2, [r4, #16]
 800c454:	f8cd a000 	str.w	sl, [sp]
 800c458:	464b      	mov	r3, r9
 800c45a:	aa03      	add	r2, sp, #12
 800c45c:	4621      	mov	r1, r4
 800c45e:	4640      	mov	r0, r8
 800c460:	f7ff fee4 	bl	800c22c <_printf_common>
 800c464:	3001      	adds	r0, #1
 800c466:	d14a      	bne.n	800c4fe <_printf_i+0x1f6>
 800c468:	f04f 30ff 	mov.w	r0, #4294967295
 800c46c:	b004      	add	sp, #16
 800c46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c472:	6823      	ldr	r3, [r4, #0]
 800c474:	f043 0320 	orr.w	r3, r3, #32
 800c478:	6023      	str	r3, [r4, #0]
 800c47a:	4833      	ldr	r0, [pc, #204]	; (800c548 <_printf_i+0x240>)
 800c47c:	2778      	movs	r7, #120	; 0x78
 800c47e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	6829      	ldr	r1, [r5, #0]
 800c486:	061f      	lsls	r7, r3, #24
 800c488:	f851 6b04 	ldr.w	r6, [r1], #4
 800c48c:	d402      	bmi.n	800c494 <_printf_i+0x18c>
 800c48e:	065f      	lsls	r7, r3, #25
 800c490:	bf48      	it	mi
 800c492:	b2b6      	uxthmi	r6, r6
 800c494:	07df      	lsls	r7, r3, #31
 800c496:	bf48      	it	mi
 800c498:	f043 0320 	orrmi.w	r3, r3, #32
 800c49c:	6029      	str	r1, [r5, #0]
 800c49e:	bf48      	it	mi
 800c4a0:	6023      	strmi	r3, [r4, #0]
 800c4a2:	b91e      	cbnz	r6, 800c4ac <_printf_i+0x1a4>
 800c4a4:	6823      	ldr	r3, [r4, #0]
 800c4a6:	f023 0320 	bic.w	r3, r3, #32
 800c4aa:	6023      	str	r3, [r4, #0]
 800c4ac:	2310      	movs	r3, #16
 800c4ae:	e7a7      	b.n	800c400 <_printf_i+0xf8>
 800c4b0:	4824      	ldr	r0, [pc, #144]	; (800c544 <_printf_i+0x23c>)
 800c4b2:	e7e4      	b.n	800c47e <_printf_i+0x176>
 800c4b4:	4615      	mov	r5, r2
 800c4b6:	e7bd      	b.n	800c434 <_printf_i+0x12c>
 800c4b8:	682b      	ldr	r3, [r5, #0]
 800c4ba:	6826      	ldr	r6, [r4, #0]
 800c4bc:	6961      	ldr	r1, [r4, #20]
 800c4be:	1d18      	adds	r0, r3, #4
 800c4c0:	6028      	str	r0, [r5, #0]
 800c4c2:	0635      	lsls	r5, r6, #24
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	d501      	bpl.n	800c4cc <_printf_i+0x1c4>
 800c4c8:	6019      	str	r1, [r3, #0]
 800c4ca:	e002      	b.n	800c4d2 <_printf_i+0x1ca>
 800c4cc:	0670      	lsls	r0, r6, #25
 800c4ce:	d5fb      	bpl.n	800c4c8 <_printf_i+0x1c0>
 800c4d0:	8019      	strh	r1, [r3, #0]
 800c4d2:	2300      	movs	r3, #0
 800c4d4:	6123      	str	r3, [r4, #16]
 800c4d6:	4615      	mov	r5, r2
 800c4d8:	e7bc      	b.n	800c454 <_printf_i+0x14c>
 800c4da:	682b      	ldr	r3, [r5, #0]
 800c4dc:	1d1a      	adds	r2, r3, #4
 800c4de:	602a      	str	r2, [r5, #0]
 800c4e0:	681d      	ldr	r5, [r3, #0]
 800c4e2:	6862      	ldr	r2, [r4, #4]
 800c4e4:	2100      	movs	r1, #0
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	f7f3 fe9a 	bl	8000220 <memchr>
 800c4ec:	b108      	cbz	r0, 800c4f2 <_printf_i+0x1ea>
 800c4ee:	1b40      	subs	r0, r0, r5
 800c4f0:	6060      	str	r0, [r4, #4]
 800c4f2:	6863      	ldr	r3, [r4, #4]
 800c4f4:	6123      	str	r3, [r4, #16]
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c4fc:	e7aa      	b.n	800c454 <_printf_i+0x14c>
 800c4fe:	6923      	ldr	r3, [r4, #16]
 800c500:	462a      	mov	r2, r5
 800c502:	4649      	mov	r1, r9
 800c504:	4640      	mov	r0, r8
 800c506:	47d0      	blx	sl
 800c508:	3001      	adds	r0, #1
 800c50a:	d0ad      	beq.n	800c468 <_printf_i+0x160>
 800c50c:	6823      	ldr	r3, [r4, #0]
 800c50e:	079b      	lsls	r3, r3, #30
 800c510:	d413      	bmi.n	800c53a <_printf_i+0x232>
 800c512:	68e0      	ldr	r0, [r4, #12]
 800c514:	9b03      	ldr	r3, [sp, #12]
 800c516:	4298      	cmp	r0, r3
 800c518:	bfb8      	it	lt
 800c51a:	4618      	movlt	r0, r3
 800c51c:	e7a6      	b.n	800c46c <_printf_i+0x164>
 800c51e:	2301      	movs	r3, #1
 800c520:	4632      	mov	r2, r6
 800c522:	4649      	mov	r1, r9
 800c524:	4640      	mov	r0, r8
 800c526:	47d0      	blx	sl
 800c528:	3001      	adds	r0, #1
 800c52a:	d09d      	beq.n	800c468 <_printf_i+0x160>
 800c52c:	3501      	adds	r5, #1
 800c52e:	68e3      	ldr	r3, [r4, #12]
 800c530:	9903      	ldr	r1, [sp, #12]
 800c532:	1a5b      	subs	r3, r3, r1
 800c534:	42ab      	cmp	r3, r5
 800c536:	dcf2      	bgt.n	800c51e <_printf_i+0x216>
 800c538:	e7eb      	b.n	800c512 <_printf_i+0x20a>
 800c53a:	2500      	movs	r5, #0
 800c53c:	f104 0619 	add.w	r6, r4, #25
 800c540:	e7f5      	b.n	800c52e <_printf_i+0x226>
 800c542:	bf00      	nop
 800c544:	080129fe 	.word	0x080129fe
 800c548:	08012a0f 	.word	0x08012a0f

0800c54c <std>:
 800c54c:	2300      	movs	r3, #0
 800c54e:	b510      	push	{r4, lr}
 800c550:	4604      	mov	r4, r0
 800c552:	e9c0 3300 	strd	r3, r3, [r0]
 800c556:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c55a:	6083      	str	r3, [r0, #8]
 800c55c:	8181      	strh	r1, [r0, #12]
 800c55e:	6643      	str	r3, [r0, #100]	; 0x64
 800c560:	81c2      	strh	r2, [r0, #14]
 800c562:	6183      	str	r3, [r0, #24]
 800c564:	4619      	mov	r1, r3
 800c566:	2208      	movs	r2, #8
 800c568:	305c      	adds	r0, #92	; 0x5c
 800c56a:	f000 fa17 	bl	800c99c <memset>
 800c56e:	4b0d      	ldr	r3, [pc, #52]	; (800c5a4 <std+0x58>)
 800c570:	6263      	str	r3, [r4, #36]	; 0x24
 800c572:	4b0d      	ldr	r3, [pc, #52]	; (800c5a8 <std+0x5c>)
 800c574:	62a3      	str	r3, [r4, #40]	; 0x28
 800c576:	4b0d      	ldr	r3, [pc, #52]	; (800c5ac <std+0x60>)
 800c578:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c57a:	4b0d      	ldr	r3, [pc, #52]	; (800c5b0 <std+0x64>)
 800c57c:	6323      	str	r3, [r4, #48]	; 0x30
 800c57e:	4b0d      	ldr	r3, [pc, #52]	; (800c5b4 <std+0x68>)
 800c580:	6224      	str	r4, [r4, #32]
 800c582:	429c      	cmp	r4, r3
 800c584:	d006      	beq.n	800c594 <std+0x48>
 800c586:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c58a:	4294      	cmp	r4, r2
 800c58c:	d002      	beq.n	800c594 <std+0x48>
 800c58e:	33d0      	adds	r3, #208	; 0xd0
 800c590:	429c      	cmp	r4, r3
 800c592:	d105      	bne.n	800c5a0 <std+0x54>
 800c594:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c59c:	f000 ba8a 	b.w	800cab4 <__retarget_lock_init_recursive>
 800c5a0:	bd10      	pop	{r4, pc}
 800c5a2:	bf00      	nop
 800c5a4:	0800c7ed 	.word	0x0800c7ed
 800c5a8:	0800c80f 	.word	0x0800c80f
 800c5ac:	0800c847 	.word	0x0800c847
 800c5b0:	0800c86b 	.word	0x0800c86b
 800c5b4:	20000a40 	.word	0x20000a40

0800c5b8 <stdio_exit_handler>:
 800c5b8:	4a02      	ldr	r2, [pc, #8]	; (800c5c4 <stdio_exit_handler+0xc>)
 800c5ba:	4903      	ldr	r1, [pc, #12]	; (800c5c8 <stdio_exit_handler+0x10>)
 800c5bc:	4803      	ldr	r0, [pc, #12]	; (800c5cc <stdio_exit_handler+0x14>)
 800c5be:	f000 b869 	b.w	800c694 <_fwalk_sglue>
 800c5c2:	bf00      	nop
 800c5c4:	20000050 	.word	0x20000050
 800c5c8:	0800e589 	.word	0x0800e589
 800c5cc:	2000005c 	.word	0x2000005c

0800c5d0 <cleanup_stdio>:
 800c5d0:	6841      	ldr	r1, [r0, #4]
 800c5d2:	4b0c      	ldr	r3, [pc, #48]	; (800c604 <cleanup_stdio+0x34>)
 800c5d4:	4299      	cmp	r1, r3
 800c5d6:	b510      	push	{r4, lr}
 800c5d8:	4604      	mov	r4, r0
 800c5da:	d001      	beq.n	800c5e0 <cleanup_stdio+0x10>
 800c5dc:	f001 ffd4 	bl	800e588 <_fflush_r>
 800c5e0:	68a1      	ldr	r1, [r4, #8]
 800c5e2:	4b09      	ldr	r3, [pc, #36]	; (800c608 <cleanup_stdio+0x38>)
 800c5e4:	4299      	cmp	r1, r3
 800c5e6:	d002      	beq.n	800c5ee <cleanup_stdio+0x1e>
 800c5e8:	4620      	mov	r0, r4
 800c5ea:	f001 ffcd 	bl	800e588 <_fflush_r>
 800c5ee:	68e1      	ldr	r1, [r4, #12]
 800c5f0:	4b06      	ldr	r3, [pc, #24]	; (800c60c <cleanup_stdio+0x3c>)
 800c5f2:	4299      	cmp	r1, r3
 800c5f4:	d004      	beq.n	800c600 <cleanup_stdio+0x30>
 800c5f6:	4620      	mov	r0, r4
 800c5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5fc:	f001 bfc4 	b.w	800e588 <_fflush_r>
 800c600:	bd10      	pop	{r4, pc}
 800c602:	bf00      	nop
 800c604:	20000a40 	.word	0x20000a40
 800c608:	20000aa8 	.word	0x20000aa8
 800c60c:	20000b10 	.word	0x20000b10

0800c610 <global_stdio_init.part.0>:
 800c610:	b510      	push	{r4, lr}
 800c612:	4b0b      	ldr	r3, [pc, #44]	; (800c640 <global_stdio_init.part.0+0x30>)
 800c614:	4c0b      	ldr	r4, [pc, #44]	; (800c644 <global_stdio_init.part.0+0x34>)
 800c616:	4a0c      	ldr	r2, [pc, #48]	; (800c648 <global_stdio_init.part.0+0x38>)
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	4620      	mov	r0, r4
 800c61c:	2200      	movs	r2, #0
 800c61e:	2104      	movs	r1, #4
 800c620:	f7ff ff94 	bl	800c54c <std>
 800c624:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c628:	2201      	movs	r2, #1
 800c62a:	2109      	movs	r1, #9
 800c62c:	f7ff ff8e 	bl	800c54c <std>
 800c630:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c634:	2202      	movs	r2, #2
 800c636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c63a:	2112      	movs	r1, #18
 800c63c:	f7ff bf86 	b.w	800c54c <std>
 800c640:	20000b78 	.word	0x20000b78
 800c644:	20000a40 	.word	0x20000a40
 800c648:	0800c5b9 	.word	0x0800c5b9

0800c64c <__sfp_lock_acquire>:
 800c64c:	4801      	ldr	r0, [pc, #4]	; (800c654 <__sfp_lock_acquire+0x8>)
 800c64e:	f000 ba32 	b.w	800cab6 <__retarget_lock_acquire_recursive>
 800c652:	bf00      	nop
 800c654:	20000b81 	.word	0x20000b81

0800c658 <__sfp_lock_release>:
 800c658:	4801      	ldr	r0, [pc, #4]	; (800c660 <__sfp_lock_release+0x8>)
 800c65a:	f000 ba2d 	b.w	800cab8 <__retarget_lock_release_recursive>
 800c65e:	bf00      	nop
 800c660:	20000b81 	.word	0x20000b81

0800c664 <__sinit>:
 800c664:	b510      	push	{r4, lr}
 800c666:	4604      	mov	r4, r0
 800c668:	f7ff fff0 	bl	800c64c <__sfp_lock_acquire>
 800c66c:	6a23      	ldr	r3, [r4, #32]
 800c66e:	b11b      	cbz	r3, 800c678 <__sinit+0x14>
 800c670:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c674:	f7ff bff0 	b.w	800c658 <__sfp_lock_release>
 800c678:	4b04      	ldr	r3, [pc, #16]	; (800c68c <__sinit+0x28>)
 800c67a:	6223      	str	r3, [r4, #32]
 800c67c:	4b04      	ldr	r3, [pc, #16]	; (800c690 <__sinit+0x2c>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d1f5      	bne.n	800c670 <__sinit+0xc>
 800c684:	f7ff ffc4 	bl	800c610 <global_stdio_init.part.0>
 800c688:	e7f2      	b.n	800c670 <__sinit+0xc>
 800c68a:	bf00      	nop
 800c68c:	0800c5d1 	.word	0x0800c5d1
 800c690:	20000b78 	.word	0x20000b78

0800c694 <_fwalk_sglue>:
 800c694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c698:	4607      	mov	r7, r0
 800c69a:	4688      	mov	r8, r1
 800c69c:	4614      	mov	r4, r2
 800c69e:	2600      	movs	r6, #0
 800c6a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c6a4:	f1b9 0901 	subs.w	r9, r9, #1
 800c6a8:	d505      	bpl.n	800c6b6 <_fwalk_sglue+0x22>
 800c6aa:	6824      	ldr	r4, [r4, #0]
 800c6ac:	2c00      	cmp	r4, #0
 800c6ae:	d1f7      	bne.n	800c6a0 <_fwalk_sglue+0xc>
 800c6b0:	4630      	mov	r0, r6
 800c6b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6b6:	89ab      	ldrh	r3, [r5, #12]
 800c6b8:	2b01      	cmp	r3, #1
 800c6ba:	d907      	bls.n	800c6cc <_fwalk_sglue+0x38>
 800c6bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c6c0:	3301      	adds	r3, #1
 800c6c2:	d003      	beq.n	800c6cc <_fwalk_sglue+0x38>
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	4638      	mov	r0, r7
 800c6c8:	47c0      	blx	r8
 800c6ca:	4306      	orrs	r6, r0
 800c6cc:	3568      	adds	r5, #104	; 0x68
 800c6ce:	e7e9      	b.n	800c6a4 <_fwalk_sglue+0x10>

0800c6d0 <iprintf>:
 800c6d0:	b40f      	push	{r0, r1, r2, r3}
 800c6d2:	b507      	push	{r0, r1, r2, lr}
 800c6d4:	4906      	ldr	r1, [pc, #24]	; (800c6f0 <iprintf+0x20>)
 800c6d6:	ab04      	add	r3, sp, #16
 800c6d8:	6808      	ldr	r0, [r1, #0]
 800c6da:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6de:	6881      	ldr	r1, [r0, #8]
 800c6e0:	9301      	str	r3, [sp, #4]
 800c6e2:	f001 fdb1 	bl	800e248 <_vfiprintf_r>
 800c6e6:	b003      	add	sp, #12
 800c6e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6ec:	b004      	add	sp, #16
 800c6ee:	4770      	bx	lr
 800c6f0:	200000a8 	.word	0x200000a8

0800c6f4 <_puts_r>:
 800c6f4:	6a03      	ldr	r3, [r0, #32]
 800c6f6:	b570      	push	{r4, r5, r6, lr}
 800c6f8:	6884      	ldr	r4, [r0, #8]
 800c6fa:	4605      	mov	r5, r0
 800c6fc:	460e      	mov	r6, r1
 800c6fe:	b90b      	cbnz	r3, 800c704 <_puts_r+0x10>
 800c700:	f7ff ffb0 	bl	800c664 <__sinit>
 800c704:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c706:	07db      	lsls	r3, r3, #31
 800c708:	d405      	bmi.n	800c716 <_puts_r+0x22>
 800c70a:	89a3      	ldrh	r3, [r4, #12]
 800c70c:	0598      	lsls	r0, r3, #22
 800c70e:	d402      	bmi.n	800c716 <_puts_r+0x22>
 800c710:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c712:	f000 f9d0 	bl	800cab6 <__retarget_lock_acquire_recursive>
 800c716:	89a3      	ldrh	r3, [r4, #12]
 800c718:	0719      	lsls	r1, r3, #28
 800c71a:	d513      	bpl.n	800c744 <_puts_r+0x50>
 800c71c:	6923      	ldr	r3, [r4, #16]
 800c71e:	b18b      	cbz	r3, 800c744 <_puts_r+0x50>
 800c720:	3e01      	subs	r6, #1
 800c722:	68a3      	ldr	r3, [r4, #8]
 800c724:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c728:	3b01      	subs	r3, #1
 800c72a:	60a3      	str	r3, [r4, #8]
 800c72c:	b9e9      	cbnz	r1, 800c76a <_puts_r+0x76>
 800c72e:	2b00      	cmp	r3, #0
 800c730:	da2e      	bge.n	800c790 <_puts_r+0x9c>
 800c732:	4622      	mov	r2, r4
 800c734:	210a      	movs	r1, #10
 800c736:	4628      	mov	r0, r5
 800c738:	f000 f89b 	bl	800c872 <__swbuf_r>
 800c73c:	3001      	adds	r0, #1
 800c73e:	d007      	beq.n	800c750 <_puts_r+0x5c>
 800c740:	250a      	movs	r5, #10
 800c742:	e007      	b.n	800c754 <_puts_r+0x60>
 800c744:	4621      	mov	r1, r4
 800c746:	4628      	mov	r0, r5
 800c748:	f000 f8d0 	bl	800c8ec <__swsetup_r>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d0e7      	beq.n	800c720 <_puts_r+0x2c>
 800c750:	f04f 35ff 	mov.w	r5, #4294967295
 800c754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c756:	07da      	lsls	r2, r3, #31
 800c758:	d405      	bmi.n	800c766 <_puts_r+0x72>
 800c75a:	89a3      	ldrh	r3, [r4, #12]
 800c75c:	059b      	lsls	r3, r3, #22
 800c75e:	d402      	bmi.n	800c766 <_puts_r+0x72>
 800c760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c762:	f000 f9a9 	bl	800cab8 <__retarget_lock_release_recursive>
 800c766:	4628      	mov	r0, r5
 800c768:	bd70      	pop	{r4, r5, r6, pc}
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	da04      	bge.n	800c778 <_puts_r+0x84>
 800c76e:	69a2      	ldr	r2, [r4, #24]
 800c770:	429a      	cmp	r2, r3
 800c772:	dc06      	bgt.n	800c782 <_puts_r+0x8e>
 800c774:	290a      	cmp	r1, #10
 800c776:	d004      	beq.n	800c782 <_puts_r+0x8e>
 800c778:	6823      	ldr	r3, [r4, #0]
 800c77a:	1c5a      	adds	r2, r3, #1
 800c77c:	6022      	str	r2, [r4, #0]
 800c77e:	7019      	strb	r1, [r3, #0]
 800c780:	e7cf      	b.n	800c722 <_puts_r+0x2e>
 800c782:	4622      	mov	r2, r4
 800c784:	4628      	mov	r0, r5
 800c786:	f000 f874 	bl	800c872 <__swbuf_r>
 800c78a:	3001      	adds	r0, #1
 800c78c:	d1c9      	bne.n	800c722 <_puts_r+0x2e>
 800c78e:	e7df      	b.n	800c750 <_puts_r+0x5c>
 800c790:	6823      	ldr	r3, [r4, #0]
 800c792:	250a      	movs	r5, #10
 800c794:	1c5a      	adds	r2, r3, #1
 800c796:	6022      	str	r2, [r4, #0]
 800c798:	701d      	strb	r5, [r3, #0]
 800c79a:	e7db      	b.n	800c754 <_puts_r+0x60>

0800c79c <puts>:
 800c79c:	4b02      	ldr	r3, [pc, #8]	; (800c7a8 <puts+0xc>)
 800c79e:	4601      	mov	r1, r0
 800c7a0:	6818      	ldr	r0, [r3, #0]
 800c7a2:	f7ff bfa7 	b.w	800c6f4 <_puts_r>
 800c7a6:	bf00      	nop
 800c7a8:	200000a8 	.word	0x200000a8

0800c7ac <siprintf>:
 800c7ac:	b40e      	push	{r1, r2, r3}
 800c7ae:	b500      	push	{lr}
 800c7b0:	b09c      	sub	sp, #112	; 0x70
 800c7b2:	ab1d      	add	r3, sp, #116	; 0x74
 800c7b4:	9002      	str	r0, [sp, #8]
 800c7b6:	9006      	str	r0, [sp, #24]
 800c7b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c7bc:	4809      	ldr	r0, [pc, #36]	; (800c7e4 <siprintf+0x38>)
 800c7be:	9107      	str	r1, [sp, #28]
 800c7c0:	9104      	str	r1, [sp, #16]
 800c7c2:	4909      	ldr	r1, [pc, #36]	; (800c7e8 <siprintf+0x3c>)
 800c7c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7c8:	9105      	str	r1, [sp, #20]
 800c7ca:	6800      	ldr	r0, [r0, #0]
 800c7cc:	9301      	str	r3, [sp, #4]
 800c7ce:	a902      	add	r1, sp, #8
 800c7d0:	f001 fc12 	bl	800dff8 <_svfiprintf_r>
 800c7d4:	9b02      	ldr	r3, [sp, #8]
 800c7d6:	2200      	movs	r2, #0
 800c7d8:	701a      	strb	r2, [r3, #0]
 800c7da:	b01c      	add	sp, #112	; 0x70
 800c7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7e0:	b003      	add	sp, #12
 800c7e2:	4770      	bx	lr
 800c7e4:	200000a8 	.word	0x200000a8
 800c7e8:	ffff0208 	.word	0xffff0208

0800c7ec <__sread>:
 800c7ec:	b510      	push	{r4, lr}
 800c7ee:	460c      	mov	r4, r1
 800c7f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f4:	f000 f900 	bl	800c9f8 <_read_r>
 800c7f8:	2800      	cmp	r0, #0
 800c7fa:	bfab      	itete	ge
 800c7fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7fe:	89a3      	ldrhlt	r3, [r4, #12]
 800c800:	181b      	addge	r3, r3, r0
 800c802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c806:	bfac      	ite	ge
 800c808:	6563      	strge	r3, [r4, #84]	; 0x54
 800c80a:	81a3      	strhlt	r3, [r4, #12]
 800c80c:	bd10      	pop	{r4, pc}

0800c80e <__swrite>:
 800c80e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c812:	461f      	mov	r7, r3
 800c814:	898b      	ldrh	r3, [r1, #12]
 800c816:	05db      	lsls	r3, r3, #23
 800c818:	4605      	mov	r5, r0
 800c81a:	460c      	mov	r4, r1
 800c81c:	4616      	mov	r6, r2
 800c81e:	d505      	bpl.n	800c82c <__swrite+0x1e>
 800c820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c824:	2302      	movs	r3, #2
 800c826:	2200      	movs	r2, #0
 800c828:	f000 f8d4 	bl	800c9d4 <_lseek_r>
 800c82c:	89a3      	ldrh	r3, [r4, #12]
 800c82e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c836:	81a3      	strh	r3, [r4, #12]
 800c838:	4632      	mov	r2, r6
 800c83a:	463b      	mov	r3, r7
 800c83c:	4628      	mov	r0, r5
 800c83e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c842:	f000 b8fb 	b.w	800ca3c <_write_r>

0800c846 <__sseek>:
 800c846:	b510      	push	{r4, lr}
 800c848:	460c      	mov	r4, r1
 800c84a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84e:	f000 f8c1 	bl	800c9d4 <_lseek_r>
 800c852:	1c43      	adds	r3, r0, #1
 800c854:	89a3      	ldrh	r3, [r4, #12]
 800c856:	bf15      	itete	ne
 800c858:	6560      	strne	r0, [r4, #84]	; 0x54
 800c85a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c85e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c862:	81a3      	strheq	r3, [r4, #12]
 800c864:	bf18      	it	ne
 800c866:	81a3      	strhne	r3, [r4, #12]
 800c868:	bd10      	pop	{r4, pc}

0800c86a <__sclose>:
 800c86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c86e:	f000 b8a1 	b.w	800c9b4 <_close_r>

0800c872 <__swbuf_r>:
 800c872:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c874:	460e      	mov	r6, r1
 800c876:	4614      	mov	r4, r2
 800c878:	4605      	mov	r5, r0
 800c87a:	b118      	cbz	r0, 800c884 <__swbuf_r+0x12>
 800c87c:	6a03      	ldr	r3, [r0, #32]
 800c87e:	b90b      	cbnz	r3, 800c884 <__swbuf_r+0x12>
 800c880:	f7ff fef0 	bl	800c664 <__sinit>
 800c884:	69a3      	ldr	r3, [r4, #24]
 800c886:	60a3      	str	r3, [r4, #8]
 800c888:	89a3      	ldrh	r3, [r4, #12]
 800c88a:	071a      	lsls	r2, r3, #28
 800c88c:	d525      	bpl.n	800c8da <__swbuf_r+0x68>
 800c88e:	6923      	ldr	r3, [r4, #16]
 800c890:	b31b      	cbz	r3, 800c8da <__swbuf_r+0x68>
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	6922      	ldr	r2, [r4, #16]
 800c896:	1a98      	subs	r0, r3, r2
 800c898:	6963      	ldr	r3, [r4, #20]
 800c89a:	b2f6      	uxtb	r6, r6
 800c89c:	4283      	cmp	r3, r0
 800c89e:	4637      	mov	r7, r6
 800c8a0:	dc04      	bgt.n	800c8ac <__swbuf_r+0x3a>
 800c8a2:	4621      	mov	r1, r4
 800c8a4:	4628      	mov	r0, r5
 800c8a6:	f001 fe6f 	bl	800e588 <_fflush_r>
 800c8aa:	b9e0      	cbnz	r0, 800c8e6 <__swbuf_r+0x74>
 800c8ac:	68a3      	ldr	r3, [r4, #8]
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	60a3      	str	r3, [r4, #8]
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	1c5a      	adds	r2, r3, #1
 800c8b6:	6022      	str	r2, [r4, #0]
 800c8b8:	701e      	strb	r6, [r3, #0]
 800c8ba:	6962      	ldr	r2, [r4, #20]
 800c8bc:	1c43      	adds	r3, r0, #1
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d004      	beq.n	800c8cc <__swbuf_r+0x5a>
 800c8c2:	89a3      	ldrh	r3, [r4, #12]
 800c8c4:	07db      	lsls	r3, r3, #31
 800c8c6:	d506      	bpl.n	800c8d6 <__swbuf_r+0x64>
 800c8c8:	2e0a      	cmp	r6, #10
 800c8ca:	d104      	bne.n	800c8d6 <__swbuf_r+0x64>
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	f001 fe5a 	bl	800e588 <_fflush_r>
 800c8d4:	b938      	cbnz	r0, 800c8e6 <__swbuf_r+0x74>
 800c8d6:	4638      	mov	r0, r7
 800c8d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c8da:	4621      	mov	r1, r4
 800c8dc:	4628      	mov	r0, r5
 800c8de:	f000 f805 	bl	800c8ec <__swsetup_r>
 800c8e2:	2800      	cmp	r0, #0
 800c8e4:	d0d5      	beq.n	800c892 <__swbuf_r+0x20>
 800c8e6:	f04f 37ff 	mov.w	r7, #4294967295
 800c8ea:	e7f4      	b.n	800c8d6 <__swbuf_r+0x64>

0800c8ec <__swsetup_r>:
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	4b2a      	ldr	r3, [pc, #168]	; (800c998 <__swsetup_r+0xac>)
 800c8f0:	4605      	mov	r5, r0
 800c8f2:	6818      	ldr	r0, [r3, #0]
 800c8f4:	460c      	mov	r4, r1
 800c8f6:	b118      	cbz	r0, 800c900 <__swsetup_r+0x14>
 800c8f8:	6a03      	ldr	r3, [r0, #32]
 800c8fa:	b90b      	cbnz	r3, 800c900 <__swsetup_r+0x14>
 800c8fc:	f7ff feb2 	bl	800c664 <__sinit>
 800c900:	89a3      	ldrh	r3, [r4, #12]
 800c902:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c906:	0718      	lsls	r0, r3, #28
 800c908:	d422      	bmi.n	800c950 <__swsetup_r+0x64>
 800c90a:	06d9      	lsls	r1, r3, #27
 800c90c:	d407      	bmi.n	800c91e <__swsetup_r+0x32>
 800c90e:	2309      	movs	r3, #9
 800c910:	602b      	str	r3, [r5, #0]
 800c912:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c916:	81a3      	strh	r3, [r4, #12]
 800c918:	f04f 30ff 	mov.w	r0, #4294967295
 800c91c:	e034      	b.n	800c988 <__swsetup_r+0x9c>
 800c91e:	0758      	lsls	r0, r3, #29
 800c920:	d512      	bpl.n	800c948 <__swsetup_r+0x5c>
 800c922:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c924:	b141      	cbz	r1, 800c938 <__swsetup_r+0x4c>
 800c926:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c92a:	4299      	cmp	r1, r3
 800c92c:	d002      	beq.n	800c934 <__swsetup_r+0x48>
 800c92e:	4628      	mov	r0, r5
 800c930:	f000 ff40 	bl	800d7b4 <_free_r>
 800c934:	2300      	movs	r3, #0
 800c936:	6363      	str	r3, [r4, #52]	; 0x34
 800c938:	89a3      	ldrh	r3, [r4, #12]
 800c93a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c93e:	81a3      	strh	r3, [r4, #12]
 800c940:	2300      	movs	r3, #0
 800c942:	6063      	str	r3, [r4, #4]
 800c944:	6923      	ldr	r3, [r4, #16]
 800c946:	6023      	str	r3, [r4, #0]
 800c948:	89a3      	ldrh	r3, [r4, #12]
 800c94a:	f043 0308 	orr.w	r3, r3, #8
 800c94e:	81a3      	strh	r3, [r4, #12]
 800c950:	6923      	ldr	r3, [r4, #16]
 800c952:	b94b      	cbnz	r3, 800c968 <__swsetup_r+0x7c>
 800c954:	89a3      	ldrh	r3, [r4, #12]
 800c956:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c95a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c95e:	d003      	beq.n	800c968 <__swsetup_r+0x7c>
 800c960:	4621      	mov	r1, r4
 800c962:	4628      	mov	r0, r5
 800c964:	f001 fe5e 	bl	800e624 <__smakebuf_r>
 800c968:	89a0      	ldrh	r0, [r4, #12]
 800c96a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c96e:	f010 0301 	ands.w	r3, r0, #1
 800c972:	d00a      	beq.n	800c98a <__swsetup_r+0x9e>
 800c974:	2300      	movs	r3, #0
 800c976:	60a3      	str	r3, [r4, #8]
 800c978:	6963      	ldr	r3, [r4, #20]
 800c97a:	425b      	negs	r3, r3
 800c97c:	61a3      	str	r3, [r4, #24]
 800c97e:	6923      	ldr	r3, [r4, #16]
 800c980:	b943      	cbnz	r3, 800c994 <__swsetup_r+0xa8>
 800c982:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c986:	d1c4      	bne.n	800c912 <__swsetup_r+0x26>
 800c988:	bd38      	pop	{r3, r4, r5, pc}
 800c98a:	0781      	lsls	r1, r0, #30
 800c98c:	bf58      	it	pl
 800c98e:	6963      	ldrpl	r3, [r4, #20]
 800c990:	60a3      	str	r3, [r4, #8]
 800c992:	e7f4      	b.n	800c97e <__swsetup_r+0x92>
 800c994:	2000      	movs	r0, #0
 800c996:	e7f7      	b.n	800c988 <__swsetup_r+0x9c>
 800c998:	200000a8 	.word	0x200000a8

0800c99c <memset>:
 800c99c:	4402      	add	r2, r0
 800c99e:	4603      	mov	r3, r0
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d100      	bne.n	800c9a6 <memset+0xa>
 800c9a4:	4770      	bx	lr
 800c9a6:	f803 1b01 	strb.w	r1, [r3], #1
 800c9aa:	e7f9      	b.n	800c9a0 <memset+0x4>

0800c9ac <_localeconv_r>:
 800c9ac:	4800      	ldr	r0, [pc, #0]	; (800c9b0 <_localeconv_r+0x4>)
 800c9ae:	4770      	bx	lr
 800c9b0:	2000019c 	.word	0x2000019c

0800c9b4 <_close_r>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	4d06      	ldr	r5, [pc, #24]	; (800c9d0 <_close_r+0x1c>)
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	4604      	mov	r4, r0
 800c9bc:	4608      	mov	r0, r1
 800c9be:	602b      	str	r3, [r5, #0]
 800c9c0:	f7f6 fd9f 	bl	8003502 <_close>
 800c9c4:	1c43      	adds	r3, r0, #1
 800c9c6:	d102      	bne.n	800c9ce <_close_r+0x1a>
 800c9c8:	682b      	ldr	r3, [r5, #0]
 800c9ca:	b103      	cbz	r3, 800c9ce <_close_r+0x1a>
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	bd38      	pop	{r3, r4, r5, pc}
 800c9d0:	20000b7c 	.word	0x20000b7c

0800c9d4 <_lseek_r>:
 800c9d4:	b538      	push	{r3, r4, r5, lr}
 800c9d6:	4d07      	ldr	r5, [pc, #28]	; (800c9f4 <_lseek_r+0x20>)
 800c9d8:	4604      	mov	r4, r0
 800c9da:	4608      	mov	r0, r1
 800c9dc:	4611      	mov	r1, r2
 800c9de:	2200      	movs	r2, #0
 800c9e0:	602a      	str	r2, [r5, #0]
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	f7f6 fdb4 	bl	8003550 <_lseek>
 800c9e8:	1c43      	adds	r3, r0, #1
 800c9ea:	d102      	bne.n	800c9f2 <_lseek_r+0x1e>
 800c9ec:	682b      	ldr	r3, [r5, #0]
 800c9ee:	b103      	cbz	r3, 800c9f2 <_lseek_r+0x1e>
 800c9f0:	6023      	str	r3, [r4, #0]
 800c9f2:	bd38      	pop	{r3, r4, r5, pc}
 800c9f4:	20000b7c 	.word	0x20000b7c

0800c9f8 <_read_r>:
 800c9f8:	b538      	push	{r3, r4, r5, lr}
 800c9fa:	4d07      	ldr	r5, [pc, #28]	; (800ca18 <_read_r+0x20>)
 800c9fc:	4604      	mov	r4, r0
 800c9fe:	4608      	mov	r0, r1
 800ca00:	4611      	mov	r1, r2
 800ca02:	2200      	movs	r2, #0
 800ca04:	602a      	str	r2, [r5, #0]
 800ca06:	461a      	mov	r2, r3
 800ca08:	f7f6 fd42 	bl	8003490 <_read>
 800ca0c:	1c43      	adds	r3, r0, #1
 800ca0e:	d102      	bne.n	800ca16 <_read_r+0x1e>
 800ca10:	682b      	ldr	r3, [r5, #0]
 800ca12:	b103      	cbz	r3, 800ca16 <_read_r+0x1e>
 800ca14:	6023      	str	r3, [r4, #0]
 800ca16:	bd38      	pop	{r3, r4, r5, pc}
 800ca18:	20000b7c 	.word	0x20000b7c

0800ca1c <_sbrk_r>:
 800ca1c:	b538      	push	{r3, r4, r5, lr}
 800ca1e:	4d06      	ldr	r5, [pc, #24]	; (800ca38 <_sbrk_r+0x1c>)
 800ca20:	2300      	movs	r3, #0
 800ca22:	4604      	mov	r4, r0
 800ca24:	4608      	mov	r0, r1
 800ca26:	602b      	str	r3, [r5, #0]
 800ca28:	f7f6 fda0 	bl	800356c <_sbrk>
 800ca2c:	1c43      	adds	r3, r0, #1
 800ca2e:	d102      	bne.n	800ca36 <_sbrk_r+0x1a>
 800ca30:	682b      	ldr	r3, [r5, #0]
 800ca32:	b103      	cbz	r3, 800ca36 <_sbrk_r+0x1a>
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	bd38      	pop	{r3, r4, r5, pc}
 800ca38:	20000b7c 	.word	0x20000b7c

0800ca3c <_write_r>:
 800ca3c:	b538      	push	{r3, r4, r5, lr}
 800ca3e:	4d07      	ldr	r5, [pc, #28]	; (800ca5c <_write_r+0x20>)
 800ca40:	4604      	mov	r4, r0
 800ca42:	4608      	mov	r0, r1
 800ca44:	4611      	mov	r1, r2
 800ca46:	2200      	movs	r2, #0
 800ca48:	602a      	str	r2, [r5, #0]
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	f7f6 fd3d 	bl	80034ca <_write>
 800ca50:	1c43      	adds	r3, r0, #1
 800ca52:	d102      	bne.n	800ca5a <_write_r+0x1e>
 800ca54:	682b      	ldr	r3, [r5, #0]
 800ca56:	b103      	cbz	r3, 800ca5a <_write_r+0x1e>
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	bd38      	pop	{r3, r4, r5, pc}
 800ca5c:	20000b7c 	.word	0x20000b7c

0800ca60 <__errno>:
 800ca60:	4b01      	ldr	r3, [pc, #4]	; (800ca68 <__errno+0x8>)
 800ca62:	6818      	ldr	r0, [r3, #0]
 800ca64:	4770      	bx	lr
 800ca66:	bf00      	nop
 800ca68:	200000a8 	.word	0x200000a8

0800ca6c <__libc_init_array>:
 800ca6c:	b570      	push	{r4, r5, r6, lr}
 800ca6e:	4d0d      	ldr	r5, [pc, #52]	; (800caa4 <__libc_init_array+0x38>)
 800ca70:	4c0d      	ldr	r4, [pc, #52]	; (800caa8 <__libc_init_array+0x3c>)
 800ca72:	1b64      	subs	r4, r4, r5
 800ca74:	10a4      	asrs	r4, r4, #2
 800ca76:	2600      	movs	r6, #0
 800ca78:	42a6      	cmp	r6, r4
 800ca7a:	d109      	bne.n	800ca90 <__libc_init_array+0x24>
 800ca7c:	4d0b      	ldr	r5, [pc, #44]	; (800caac <__libc_init_array+0x40>)
 800ca7e:	4c0c      	ldr	r4, [pc, #48]	; (800cab0 <__libc_init_array+0x44>)
 800ca80:	f002 fe76 	bl	800f770 <_init>
 800ca84:	1b64      	subs	r4, r4, r5
 800ca86:	10a4      	asrs	r4, r4, #2
 800ca88:	2600      	movs	r6, #0
 800ca8a:	42a6      	cmp	r6, r4
 800ca8c:	d105      	bne.n	800ca9a <__libc_init_array+0x2e>
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca94:	4798      	blx	r3
 800ca96:	3601      	adds	r6, #1
 800ca98:	e7ee      	b.n	800ca78 <__libc_init_array+0xc>
 800ca9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca9e:	4798      	blx	r3
 800caa0:	3601      	adds	r6, #1
 800caa2:	e7f2      	b.n	800ca8a <__libc_init_array+0x1e>
 800caa4:	08012d98 	.word	0x08012d98
 800caa8:	08012d98 	.word	0x08012d98
 800caac:	08012d98 	.word	0x08012d98
 800cab0:	08012d9c 	.word	0x08012d9c

0800cab4 <__retarget_lock_init_recursive>:
 800cab4:	4770      	bx	lr

0800cab6 <__retarget_lock_acquire_recursive>:
 800cab6:	4770      	bx	lr

0800cab8 <__retarget_lock_release_recursive>:
 800cab8:	4770      	bx	lr

0800caba <quorem>:
 800caba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cabe:	6903      	ldr	r3, [r0, #16]
 800cac0:	690c      	ldr	r4, [r1, #16]
 800cac2:	42a3      	cmp	r3, r4
 800cac4:	4607      	mov	r7, r0
 800cac6:	db7e      	blt.n	800cbc6 <quorem+0x10c>
 800cac8:	3c01      	subs	r4, #1
 800caca:	f101 0814 	add.w	r8, r1, #20
 800cace:	f100 0514 	add.w	r5, r0, #20
 800cad2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cad6:	9301      	str	r3, [sp, #4]
 800cad8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cadc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cae0:	3301      	adds	r3, #1
 800cae2:	429a      	cmp	r2, r3
 800cae4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cae8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800caec:	fbb2 f6f3 	udiv	r6, r2, r3
 800caf0:	d331      	bcc.n	800cb56 <quorem+0x9c>
 800caf2:	f04f 0e00 	mov.w	lr, #0
 800caf6:	4640      	mov	r0, r8
 800caf8:	46ac      	mov	ip, r5
 800cafa:	46f2      	mov	sl, lr
 800cafc:	f850 2b04 	ldr.w	r2, [r0], #4
 800cb00:	b293      	uxth	r3, r2
 800cb02:	fb06 e303 	mla	r3, r6, r3, lr
 800cb06:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb0a:	0c1a      	lsrs	r2, r3, #16
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	ebaa 0303 	sub.w	r3, sl, r3
 800cb12:	f8dc a000 	ldr.w	sl, [ip]
 800cb16:	fa13 f38a 	uxtah	r3, r3, sl
 800cb1a:	fb06 220e 	mla	r2, r6, lr, r2
 800cb1e:	9300      	str	r3, [sp, #0]
 800cb20:	9b00      	ldr	r3, [sp, #0]
 800cb22:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cb26:	b292      	uxth	r2, r2
 800cb28:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800cb2c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb30:	f8bd 3000 	ldrh.w	r3, [sp]
 800cb34:	4581      	cmp	r9, r0
 800cb36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb3a:	f84c 3b04 	str.w	r3, [ip], #4
 800cb3e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cb42:	d2db      	bcs.n	800cafc <quorem+0x42>
 800cb44:	f855 300b 	ldr.w	r3, [r5, fp]
 800cb48:	b92b      	cbnz	r3, 800cb56 <quorem+0x9c>
 800cb4a:	9b01      	ldr	r3, [sp, #4]
 800cb4c:	3b04      	subs	r3, #4
 800cb4e:	429d      	cmp	r5, r3
 800cb50:	461a      	mov	r2, r3
 800cb52:	d32c      	bcc.n	800cbae <quorem+0xf4>
 800cb54:	613c      	str	r4, [r7, #16]
 800cb56:	4638      	mov	r0, r7
 800cb58:	f001 f8f4 	bl	800dd44 <__mcmp>
 800cb5c:	2800      	cmp	r0, #0
 800cb5e:	db22      	blt.n	800cba6 <quorem+0xec>
 800cb60:	3601      	adds	r6, #1
 800cb62:	4629      	mov	r1, r5
 800cb64:	2000      	movs	r0, #0
 800cb66:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb6a:	f8d1 c000 	ldr.w	ip, [r1]
 800cb6e:	b293      	uxth	r3, r2
 800cb70:	1ac3      	subs	r3, r0, r3
 800cb72:	0c12      	lsrs	r2, r2, #16
 800cb74:	fa13 f38c 	uxtah	r3, r3, ip
 800cb78:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800cb7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb86:	45c1      	cmp	r9, r8
 800cb88:	f841 3b04 	str.w	r3, [r1], #4
 800cb8c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cb90:	d2e9      	bcs.n	800cb66 <quorem+0xac>
 800cb92:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb9a:	b922      	cbnz	r2, 800cba6 <quorem+0xec>
 800cb9c:	3b04      	subs	r3, #4
 800cb9e:	429d      	cmp	r5, r3
 800cba0:	461a      	mov	r2, r3
 800cba2:	d30a      	bcc.n	800cbba <quorem+0x100>
 800cba4:	613c      	str	r4, [r7, #16]
 800cba6:	4630      	mov	r0, r6
 800cba8:	b003      	add	sp, #12
 800cbaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbae:	6812      	ldr	r2, [r2, #0]
 800cbb0:	3b04      	subs	r3, #4
 800cbb2:	2a00      	cmp	r2, #0
 800cbb4:	d1ce      	bne.n	800cb54 <quorem+0x9a>
 800cbb6:	3c01      	subs	r4, #1
 800cbb8:	e7c9      	b.n	800cb4e <quorem+0x94>
 800cbba:	6812      	ldr	r2, [r2, #0]
 800cbbc:	3b04      	subs	r3, #4
 800cbbe:	2a00      	cmp	r2, #0
 800cbc0:	d1f0      	bne.n	800cba4 <quorem+0xea>
 800cbc2:	3c01      	subs	r4, #1
 800cbc4:	e7eb      	b.n	800cb9e <quorem+0xe4>
 800cbc6:	2000      	movs	r0, #0
 800cbc8:	e7ee      	b.n	800cba8 <quorem+0xee>
 800cbca:	0000      	movs	r0, r0
 800cbcc:	0000      	movs	r0, r0
	...

0800cbd0 <_dtoa_r>:
 800cbd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbd4:	ed2d 8b04 	vpush	{d8-d9}
 800cbd8:	69c5      	ldr	r5, [r0, #28]
 800cbda:	b093      	sub	sp, #76	; 0x4c
 800cbdc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cbe0:	ec57 6b10 	vmov	r6, r7, d0
 800cbe4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cbe8:	9107      	str	r1, [sp, #28]
 800cbea:	4604      	mov	r4, r0
 800cbec:	920a      	str	r2, [sp, #40]	; 0x28
 800cbee:	930d      	str	r3, [sp, #52]	; 0x34
 800cbf0:	b975      	cbnz	r5, 800cc10 <_dtoa_r+0x40>
 800cbf2:	2010      	movs	r0, #16
 800cbf4:	f7fe ff90 	bl	800bb18 <malloc>
 800cbf8:	4602      	mov	r2, r0
 800cbfa:	61e0      	str	r0, [r4, #28]
 800cbfc:	b920      	cbnz	r0, 800cc08 <_dtoa_r+0x38>
 800cbfe:	4bae      	ldr	r3, [pc, #696]	; (800ceb8 <_dtoa_r+0x2e8>)
 800cc00:	21ef      	movs	r1, #239	; 0xef
 800cc02:	48ae      	ldr	r0, [pc, #696]	; (800cebc <_dtoa_r+0x2ec>)
 800cc04:	f001 fd94 	bl	800e730 <__assert_func>
 800cc08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cc0c:	6005      	str	r5, [r0, #0]
 800cc0e:	60c5      	str	r5, [r0, #12]
 800cc10:	69e3      	ldr	r3, [r4, #28]
 800cc12:	6819      	ldr	r1, [r3, #0]
 800cc14:	b151      	cbz	r1, 800cc2c <_dtoa_r+0x5c>
 800cc16:	685a      	ldr	r2, [r3, #4]
 800cc18:	604a      	str	r2, [r1, #4]
 800cc1a:	2301      	movs	r3, #1
 800cc1c:	4093      	lsls	r3, r2
 800cc1e:	608b      	str	r3, [r1, #8]
 800cc20:	4620      	mov	r0, r4
 800cc22:	f000 fe53 	bl	800d8cc <_Bfree>
 800cc26:	69e3      	ldr	r3, [r4, #28]
 800cc28:	2200      	movs	r2, #0
 800cc2a:	601a      	str	r2, [r3, #0]
 800cc2c:	1e3b      	subs	r3, r7, #0
 800cc2e:	bfbb      	ittet	lt
 800cc30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cc34:	9303      	strlt	r3, [sp, #12]
 800cc36:	2300      	movge	r3, #0
 800cc38:	2201      	movlt	r2, #1
 800cc3a:	bfac      	ite	ge
 800cc3c:	f8c8 3000 	strge.w	r3, [r8]
 800cc40:	f8c8 2000 	strlt.w	r2, [r8]
 800cc44:	4b9e      	ldr	r3, [pc, #632]	; (800cec0 <_dtoa_r+0x2f0>)
 800cc46:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800cc4a:	ea33 0308 	bics.w	r3, r3, r8
 800cc4e:	d11b      	bne.n	800cc88 <_dtoa_r+0xb8>
 800cc50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cc52:	f242 730f 	movw	r3, #9999	; 0x270f
 800cc56:	6013      	str	r3, [r2, #0]
 800cc58:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800cc5c:	4333      	orrs	r3, r6
 800cc5e:	f000 8593 	beq.w	800d788 <_dtoa_r+0xbb8>
 800cc62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc64:	b963      	cbnz	r3, 800cc80 <_dtoa_r+0xb0>
 800cc66:	4b97      	ldr	r3, [pc, #604]	; (800cec4 <_dtoa_r+0x2f4>)
 800cc68:	e027      	b.n	800ccba <_dtoa_r+0xea>
 800cc6a:	4b97      	ldr	r3, [pc, #604]	; (800cec8 <_dtoa_r+0x2f8>)
 800cc6c:	9300      	str	r3, [sp, #0]
 800cc6e:	3308      	adds	r3, #8
 800cc70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc72:	6013      	str	r3, [r2, #0]
 800cc74:	9800      	ldr	r0, [sp, #0]
 800cc76:	b013      	add	sp, #76	; 0x4c
 800cc78:	ecbd 8b04 	vpop	{d8-d9}
 800cc7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc80:	4b90      	ldr	r3, [pc, #576]	; (800cec4 <_dtoa_r+0x2f4>)
 800cc82:	9300      	str	r3, [sp, #0]
 800cc84:	3303      	adds	r3, #3
 800cc86:	e7f3      	b.n	800cc70 <_dtoa_r+0xa0>
 800cc88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	ec51 0b17 	vmov	r0, r1, d7
 800cc92:	eeb0 8a47 	vmov.f32	s16, s14
 800cc96:	eef0 8a67 	vmov.f32	s17, s15
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	f7f3 ff3c 	bl	8000b18 <__aeabi_dcmpeq>
 800cca0:	4681      	mov	r9, r0
 800cca2:	b160      	cbz	r0, 800ccbe <_dtoa_r+0xee>
 800cca4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800cca6:	2301      	movs	r3, #1
 800cca8:	6013      	str	r3, [r2, #0]
 800ccaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	f000 8568 	beq.w	800d782 <_dtoa_r+0xbb2>
 800ccb2:	4b86      	ldr	r3, [pc, #536]	; (800cecc <_dtoa_r+0x2fc>)
 800ccb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ccb6:	6013      	str	r3, [r2, #0]
 800ccb8:	3b01      	subs	r3, #1
 800ccba:	9300      	str	r3, [sp, #0]
 800ccbc:	e7da      	b.n	800cc74 <_dtoa_r+0xa4>
 800ccbe:	aa10      	add	r2, sp, #64	; 0x40
 800ccc0:	a911      	add	r1, sp, #68	; 0x44
 800ccc2:	4620      	mov	r0, r4
 800ccc4:	eeb0 0a48 	vmov.f32	s0, s16
 800ccc8:	eef0 0a68 	vmov.f32	s1, s17
 800cccc:	f001 f8e0 	bl	800de90 <__d2b>
 800ccd0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800ccd4:	4682      	mov	sl, r0
 800ccd6:	2d00      	cmp	r5, #0
 800ccd8:	d07f      	beq.n	800cdda <_dtoa_r+0x20a>
 800ccda:	ee18 3a90 	vmov	r3, s17
 800ccde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cce2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800cce6:	ec51 0b18 	vmov	r0, r1, d8
 800ccea:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ccee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ccf2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	2200      	movs	r2, #0
 800ccfa:	4b75      	ldr	r3, [pc, #468]	; (800ced0 <_dtoa_r+0x300>)
 800ccfc:	f7f3 faec 	bl	80002d8 <__aeabi_dsub>
 800cd00:	a367      	add	r3, pc, #412	; (adr r3, 800cea0 <_dtoa_r+0x2d0>)
 800cd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd06:	f7f3 fc9f 	bl	8000648 <__aeabi_dmul>
 800cd0a:	a367      	add	r3, pc, #412	; (adr r3, 800cea8 <_dtoa_r+0x2d8>)
 800cd0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd10:	f7f3 fae4 	bl	80002dc <__adddf3>
 800cd14:	4606      	mov	r6, r0
 800cd16:	4628      	mov	r0, r5
 800cd18:	460f      	mov	r7, r1
 800cd1a:	f7f3 fc2b 	bl	8000574 <__aeabi_i2d>
 800cd1e:	a364      	add	r3, pc, #400	; (adr r3, 800ceb0 <_dtoa_r+0x2e0>)
 800cd20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd24:	f7f3 fc90 	bl	8000648 <__aeabi_dmul>
 800cd28:	4602      	mov	r2, r0
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	4639      	mov	r1, r7
 800cd30:	f7f3 fad4 	bl	80002dc <__adddf3>
 800cd34:	4606      	mov	r6, r0
 800cd36:	460f      	mov	r7, r1
 800cd38:	f7f3 ff36 	bl	8000ba8 <__aeabi_d2iz>
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	4683      	mov	fp, r0
 800cd40:	2300      	movs	r3, #0
 800cd42:	4630      	mov	r0, r6
 800cd44:	4639      	mov	r1, r7
 800cd46:	f7f3 fef1 	bl	8000b2c <__aeabi_dcmplt>
 800cd4a:	b148      	cbz	r0, 800cd60 <_dtoa_r+0x190>
 800cd4c:	4658      	mov	r0, fp
 800cd4e:	f7f3 fc11 	bl	8000574 <__aeabi_i2d>
 800cd52:	4632      	mov	r2, r6
 800cd54:	463b      	mov	r3, r7
 800cd56:	f7f3 fedf 	bl	8000b18 <__aeabi_dcmpeq>
 800cd5a:	b908      	cbnz	r0, 800cd60 <_dtoa_r+0x190>
 800cd5c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd60:	f1bb 0f16 	cmp.w	fp, #22
 800cd64:	d857      	bhi.n	800ce16 <_dtoa_r+0x246>
 800cd66:	4b5b      	ldr	r3, [pc, #364]	; (800ced4 <_dtoa_r+0x304>)
 800cd68:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	ec51 0b18 	vmov	r0, r1, d8
 800cd74:	f7f3 feda 	bl	8000b2c <__aeabi_dcmplt>
 800cd78:	2800      	cmp	r0, #0
 800cd7a:	d04e      	beq.n	800ce1a <_dtoa_r+0x24a>
 800cd7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800cd80:	2300      	movs	r3, #0
 800cd82:	930c      	str	r3, [sp, #48]	; 0x30
 800cd84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cd86:	1b5b      	subs	r3, r3, r5
 800cd88:	1e5a      	subs	r2, r3, #1
 800cd8a:	bf45      	ittet	mi
 800cd8c:	f1c3 0301 	rsbmi	r3, r3, #1
 800cd90:	9305      	strmi	r3, [sp, #20]
 800cd92:	2300      	movpl	r3, #0
 800cd94:	2300      	movmi	r3, #0
 800cd96:	9206      	str	r2, [sp, #24]
 800cd98:	bf54      	ite	pl
 800cd9a:	9305      	strpl	r3, [sp, #20]
 800cd9c:	9306      	strmi	r3, [sp, #24]
 800cd9e:	f1bb 0f00 	cmp.w	fp, #0
 800cda2:	db3c      	blt.n	800ce1e <_dtoa_r+0x24e>
 800cda4:	9b06      	ldr	r3, [sp, #24]
 800cda6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800cdaa:	445b      	add	r3, fp
 800cdac:	9306      	str	r3, [sp, #24]
 800cdae:	2300      	movs	r3, #0
 800cdb0:	9308      	str	r3, [sp, #32]
 800cdb2:	9b07      	ldr	r3, [sp, #28]
 800cdb4:	2b09      	cmp	r3, #9
 800cdb6:	d868      	bhi.n	800ce8a <_dtoa_r+0x2ba>
 800cdb8:	2b05      	cmp	r3, #5
 800cdba:	bfc4      	itt	gt
 800cdbc:	3b04      	subgt	r3, #4
 800cdbe:	9307      	strgt	r3, [sp, #28]
 800cdc0:	9b07      	ldr	r3, [sp, #28]
 800cdc2:	f1a3 0302 	sub.w	r3, r3, #2
 800cdc6:	bfcc      	ite	gt
 800cdc8:	2500      	movgt	r5, #0
 800cdca:	2501      	movle	r5, #1
 800cdcc:	2b03      	cmp	r3, #3
 800cdce:	f200 8085 	bhi.w	800cedc <_dtoa_r+0x30c>
 800cdd2:	e8df f003 	tbb	[pc, r3]
 800cdd6:	3b2e      	.short	0x3b2e
 800cdd8:	5839      	.short	0x5839
 800cdda:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cdde:	441d      	add	r5, r3
 800cde0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cde4:	2b20      	cmp	r3, #32
 800cde6:	bfc1      	itttt	gt
 800cde8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cdec:	fa08 f803 	lslgt.w	r8, r8, r3
 800cdf0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800cdf4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800cdf8:	bfd6      	itet	le
 800cdfa:	f1c3 0320 	rsble	r3, r3, #32
 800cdfe:	ea48 0003 	orrgt.w	r0, r8, r3
 800ce02:	fa06 f003 	lslle.w	r0, r6, r3
 800ce06:	f7f3 fba5 	bl	8000554 <__aeabi_ui2d>
 800ce0a:	2201      	movs	r2, #1
 800ce0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800ce10:	3d01      	subs	r5, #1
 800ce12:	920e      	str	r2, [sp, #56]	; 0x38
 800ce14:	e76f      	b.n	800ccf6 <_dtoa_r+0x126>
 800ce16:	2301      	movs	r3, #1
 800ce18:	e7b3      	b.n	800cd82 <_dtoa_r+0x1b2>
 800ce1a:	900c      	str	r0, [sp, #48]	; 0x30
 800ce1c:	e7b2      	b.n	800cd84 <_dtoa_r+0x1b4>
 800ce1e:	9b05      	ldr	r3, [sp, #20]
 800ce20:	eba3 030b 	sub.w	r3, r3, fp
 800ce24:	9305      	str	r3, [sp, #20]
 800ce26:	f1cb 0300 	rsb	r3, fp, #0
 800ce2a:	9308      	str	r3, [sp, #32]
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ce30:	e7bf      	b.n	800cdb2 <_dtoa_r+0x1e2>
 800ce32:	2300      	movs	r3, #0
 800ce34:	9309      	str	r3, [sp, #36]	; 0x24
 800ce36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	dc52      	bgt.n	800cee2 <_dtoa_r+0x312>
 800ce3c:	2301      	movs	r3, #1
 800ce3e:	9301      	str	r3, [sp, #4]
 800ce40:	9304      	str	r3, [sp, #16]
 800ce42:	461a      	mov	r2, r3
 800ce44:	920a      	str	r2, [sp, #40]	; 0x28
 800ce46:	e00b      	b.n	800ce60 <_dtoa_r+0x290>
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e7f3      	b.n	800ce34 <_dtoa_r+0x264>
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce52:	445b      	add	r3, fp
 800ce54:	9301      	str	r3, [sp, #4]
 800ce56:	3301      	adds	r3, #1
 800ce58:	2b01      	cmp	r3, #1
 800ce5a:	9304      	str	r3, [sp, #16]
 800ce5c:	bfb8      	it	lt
 800ce5e:	2301      	movlt	r3, #1
 800ce60:	69e0      	ldr	r0, [r4, #28]
 800ce62:	2100      	movs	r1, #0
 800ce64:	2204      	movs	r2, #4
 800ce66:	f102 0614 	add.w	r6, r2, #20
 800ce6a:	429e      	cmp	r6, r3
 800ce6c:	d93d      	bls.n	800ceea <_dtoa_r+0x31a>
 800ce6e:	6041      	str	r1, [r0, #4]
 800ce70:	4620      	mov	r0, r4
 800ce72:	f000 fceb 	bl	800d84c <_Balloc>
 800ce76:	9000      	str	r0, [sp, #0]
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	d139      	bne.n	800cef0 <_dtoa_r+0x320>
 800ce7c:	4b16      	ldr	r3, [pc, #88]	; (800ced8 <_dtoa_r+0x308>)
 800ce7e:	4602      	mov	r2, r0
 800ce80:	f240 11af 	movw	r1, #431	; 0x1af
 800ce84:	e6bd      	b.n	800cc02 <_dtoa_r+0x32>
 800ce86:	2301      	movs	r3, #1
 800ce88:	e7e1      	b.n	800ce4e <_dtoa_r+0x27e>
 800ce8a:	2501      	movs	r5, #1
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	9307      	str	r3, [sp, #28]
 800ce90:	9509      	str	r5, [sp, #36]	; 0x24
 800ce92:	f04f 33ff 	mov.w	r3, #4294967295
 800ce96:	9301      	str	r3, [sp, #4]
 800ce98:	9304      	str	r3, [sp, #16]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	2312      	movs	r3, #18
 800ce9e:	e7d1      	b.n	800ce44 <_dtoa_r+0x274>
 800cea0:	636f4361 	.word	0x636f4361
 800cea4:	3fd287a7 	.word	0x3fd287a7
 800cea8:	8b60c8b3 	.word	0x8b60c8b3
 800ceac:	3fc68a28 	.word	0x3fc68a28
 800ceb0:	509f79fb 	.word	0x509f79fb
 800ceb4:	3fd34413 	.word	0x3fd34413
 800ceb8:	08012a2d 	.word	0x08012a2d
 800cebc:	08012a44 	.word	0x08012a44
 800cec0:	7ff00000 	.word	0x7ff00000
 800cec4:	08012a29 	.word	0x08012a29
 800cec8:	08012a20 	.word	0x08012a20
 800cecc:	080129fd 	.word	0x080129fd
 800ced0:	3ff80000 	.word	0x3ff80000
 800ced4:	08012b30 	.word	0x08012b30
 800ced8:	08012a9c 	.word	0x08012a9c
 800cedc:	2301      	movs	r3, #1
 800cede:	9309      	str	r3, [sp, #36]	; 0x24
 800cee0:	e7d7      	b.n	800ce92 <_dtoa_r+0x2c2>
 800cee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cee4:	9301      	str	r3, [sp, #4]
 800cee6:	9304      	str	r3, [sp, #16]
 800cee8:	e7ba      	b.n	800ce60 <_dtoa_r+0x290>
 800ceea:	3101      	adds	r1, #1
 800ceec:	0052      	lsls	r2, r2, #1
 800ceee:	e7ba      	b.n	800ce66 <_dtoa_r+0x296>
 800cef0:	69e3      	ldr	r3, [r4, #28]
 800cef2:	9a00      	ldr	r2, [sp, #0]
 800cef4:	601a      	str	r2, [r3, #0]
 800cef6:	9b04      	ldr	r3, [sp, #16]
 800cef8:	2b0e      	cmp	r3, #14
 800cefa:	f200 80a8 	bhi.w	800d04e <_dtoa_r+0x47e>
 800cefe:	2d00      	cmp	r5, #0
 800cf00:	f000 80a5 	beq.w	800d04e <_dtoa_r+0x47e>
 800cf04:	f1bb 0f00 	cmp.w	fp, #0
 800cf08:	dd38      	ble.n	800cf7c <_dtoa_r+0x3ac>
 800cf0a:	4bc0      	ldr	r3, [pc, #768]	; (800d20c <_dtoa_r+0x63c>)
 800cf0c:	f00b 020f 	and.w	r2, fp, #15
 800cf10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf14:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800cf18:	e9d3 6700 	ldrd	r6, r7, [r3]
 800cf1c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800cf20:	d019      	beq.n	800cf56 <_dtoa_r+0x386>
 800cf22:	4bbb      	ldr	r3, [pc, #748]	; (800d210 <_dtoa_r+0x640>)
 800cf24:	ec51 0b18 	vmov	r0, r1, d8
 800cf28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cf2c:	f7f3 fcb6 	bl	800089c <__aeabi_ddiv>
 800cf30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf34:	f008 080f 	and.w	r8, r8, #15
 800cf38:	2503      	movs	r5, #3
 800cf3a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800d210 <_dtoa_r+0x640>
 800cf3e:	f1b8 0f00 	cmp.w	r8, #0
 800cf42:	d10a      	bne.n	800cf5a <_dtoa_r+0x38a>
 800cf44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf48:	4632      	mov	r2, r6
 800cf4a:	463b      	mov	r3, r7
 800cf4c:	f7f3 fca6 	bl	800089c <__aeabi_ddiv>
 800cf50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf54:	e02b      	b.n	800cfae <_dtoa_r+0x3de>
 800cf56:	2502      	movs	r5, #2
 800cf58:	e7ef      	b.n	800cf3a <_dtoa_r+0x36a>
 800cf5a:	f018 0f01 	tst.w	r8, #1
 800cf5e:	d008      	beq.n	800cf72 <_dtoa_r+0x3a2>
 800cf60:	4630      	mov	r0, r6
 800cf62:	4639      	mov	r1, r7
 800cf64:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cf68:	f7f3 fb6e 	bl	8000648 <__aeabi_dmul>
 800cf6c:	3501      	adds	r5, #1
 800cf6e:	4606      	mov	r6, r0
 800cf70:	460f      	mov	r7, r1
 800cf72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cf76:	f109 0908 	add.w	r9, r9, #8
 800cf7a:	e7e0      	b.n	800cf3e <_dtoa_r+0x36e>
 800cf7c:	f000 809f 	beq.w	800d0be <_dtoa_r+0x4ee>
 800cf80:	f1cb 0600 	rsb	r6, fp, #0
 800cf84:	4ba1      	ldr	r3, [pc, #644]	; (800d20c <_dtoa_r+0x63c>)
 800cf86:	4fa2      	ldr	r7, [pc, #648]	; (800d210 <_dtoa_r+0x640>)
 800cf88:	f006 020f 	and.w	r2, r6, #15
 800cf8c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf94:	ec51 0b18 	vmov	r0, r1, d8
 800cf98:	f7f3 fb56 	bl	8000648 <__aeabi_dmul>
 800cf9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfa0:	1136      	asrs	r6, r6, #4
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	2502      	movs	r5, #2
 800cfa6:	2e00      	cmp	r6, #0
 800cfa8:	d17e      	bne.n	800d0a8 <_dtoa_r+0x4d8>
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d1d0      	bne.n	800cf50 <_dtoa_r+0x380>
 800cfae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f000 8084 	beq.w	800d0c2 <_dtoa_r+0x4f2>
 800cfba:	4b96      	ldr	r3, [pc, #600]	; (800d214 <_dtoa_r+0x644>)
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	4640      	mov	r0, r8
 800cfc0:	4649      	mov	r1, r9
 800cfc2:	f7f3 fdb3 	bl	8000b2c <__aeabi_dcmplt>
 800cfc6:	2800      	cmp	r0, #0
 800cfc8:	d07b      	beq.n	800d0c2 <_dtoa_r+0x4f2>
 800cfca:	9b04      	ldr	r3, [sp, #16]
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d078      	beq.n	800d0c2 <_dtoa_r+0x4f2>
 800cfd0:	9b01      	ldr	r3, [sp, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	dd39      	ble.n	800d04a <_dtoa_r+0x47a>
 800cfd6:	4b90      	ldr	r3, [pc, #576]	; (800d218 <_dtoa_r+0x648>)
 800cfd8:	2200      	movs	r2, #0
 800cfda:	4640      	mov	r0, r8
 800cfdc:	4649      	mov	r1, r9
 800cfde:	f7f3 fb33 	bl	8000648 <__aeabi_dmul>
 800cfe2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfe6:	9e01      	ldr	r6, [sp, #4]
 800cfe8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800cfec:	3501      	adds	r5, #1
 800cfee:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cff2:	4628      	mov	r0, r5
 800cff4:	f7f3 fabe 	bl	8000574 <__aeabi_i2d>
 800cff8:	4642      	mov	r2, r8
 800cffa:	464b      	mov	r3, r9
 800cffc:	f7f3 fb24 	bl	8000648 <__aeabi_dmul>
 800d000:	4b86      	ldr	r3, [pc, #536]	; (800d21c <_dtoa_r+0x64c>)
 800d002:	2200      	movs	r2, #0
 800d004:	f7f3 f96a 	bl	80002dc <__adddf3>
 800d008:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d00c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d010:	9303      	str	r3, [sp, #12]
 800d012:	2e00      	cmp	r6, #0
 800d014:	d158      	bne.n	800d0c8 <_dtoa_r+0x4f8>
 800d016:	4b82      	ldr	r3, [pc, #520]	; (800d220 <_dtoa_r+0x650>)
 800d018:	2200      	movs	r2, #0
 800d01a:	4640      	mov	r0, r8
 800d01c:	4649      	mov	r1, r9
 800d01e:	f7f3 f95b 	bl	80002d8 <__aeabi_dsub>
 800d022:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d026:	4680      	mov	r8, r0
 800d028:	4689      	mov	r9, r1
 800d02a:	f7f3 fd9d 	bl	8000b68 <__aeabi_dcmpgt>
 800d02e:	2800      	cmp	r0, #0
 800d030:	f040 8296 	bne.w	800d560 <_dtoa_r+0x990>
 800d034:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d038:	4640      	mov	r0, r8
 800d03a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d03e:	4649      	mov	r1, r9
 800d040:	f7f3 fd74 	bl	8000b2c <__aeabi_dcmplt>
 800d044:	2800      	cmp	r0, #0
 800d046:	f040 8289 	bne.w	800d55c <_dtoa_r+0x98c>
 800d04a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800d04e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d050:	2b00      	cmp	r3, #0
 800d052:	f2c0 814e 	blt.w	800d2f2 <_dtoa_r+0x722>
 800d056:	f1bb 0f0e 	cmp.w	fp, #14
 800d05a:	f300 814a 	bgt.w	800d2f2 <_dtoa_r+0x722>
 800d05e:	4b6b      	ldr	r3, [pc, #428]	; (800d20c <_dtoa_r+0x63c>)
 800d060:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800d064:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d068:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	f280 80dc 	bge.w	800d228 <_dtoa_r+0x658>
 800d070:	9b04      	ldr	r3, [sp, #16]
 800d072:	2b00      	cmp	r3, #0
 800d074:	f300 80d8 	bgt.w	800d228 <_dtoa_r+0x658>
 800d078:	f040 826f 	bne.w	800d55a <_dtoa_r+0x98a>
 800d07c:	4b68      	ldr	r3, [pc, #416]	; (800d220 <_dtoa_r+0x650>)
 800d07e:	2200      	movs	r2, #0
 800d080:	4640      	mov	r0, r8
 800d082:	4649      	mov	r1, r9
 800d084:	f7f3 fae0 	bl	8000648 <__aeabi_dmul>
 800d088:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d08c:	f7f3 fd62 	bl	8000b54 <__aeabi_dcmpge>
 800d090:	9e04      	ldr	r6, [sp, #16]
 800d092:	4637      	mov	r7, r6
 800d094:	2800      	cmp	r0, #0
 800d096:	f040 8245 	bne.w	800d524 <_dtoa_r+0x954>
 800d09a:	9d00      	ldr	r5, [sp, #0]
 800d09c:	2331      	movs	r3, #49	; 0x31
 800d09e:	f805 3b01 	strb.w	r3, [r5], #1
 800d0a2:	f10b 0b01 	add.w	fp, fp, #1
 800d0a6:	e241      	b.n	800d52c <_dtoa_r+0x95c>
 800d0a8:	07f2      	lsls	r2, r6, #31
 800d0aa:	d505      	bpl.n	800d0b8 <_dtoa_r+0x4e8>
 800d0ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0b0:	f7f3 faca 	bl	8000648 <__aeabi_dmul>
 800d0b4:	3501      	adds	r5, #1
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	1076      	asrs	r6, r6, #1
 800d0ba:	3708      	adds	r7, #8
 800d0bc:	e773      	b.n	800cfa6 <_dtoa_r+0x3d6>
 800d0be:	2502      	movs	r5, #2
 800d0c0:	e775      	b.n	800cfae <_dtoa_r+0x3de>
 800d0c2:	9e04      	ldr	r6, [sp, #16]
 800d0c4:	465f      	mov	r7, fp
 800d0c6:	e792      	b.n	800cfee <_dtoa_r+0x41e>
 800d0c8:	9900      	ldr	r1, [sp, #0]
 800d0ca:	4b50      	ldr	r3, [pc, #320]	; (800d20c <_dtoa_r+0x63c>)
 800d0cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d0d0:	4431      	add	r1, r6
 800d0d2:	9102      	str	r1, [sp, #8]
 800d0d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d0d6:	eeb0 9a47 	vmov.f32	s18, s14
 800d0da:	eef0 9a67 	vmov.f32	s19, s15
 800d0de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d0e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d0e6:	2900      	cmp	r1, #0
 800d0e8:	d044      	beq.n	800d174 <_dtoa_r+0x5a4>
 800d0ea:	494e      	ldr	r1, [pc, #312]	; (800d224 <_dtoa_r+0x654>)
 800d0ec:	2000      	movs	r0, #0
 800d0ee:	f7f3 fbd5 	bl	800089c <__aeabi_ddiv>
 800d0f2:	ec53 2b19 	vmov	r2, r3, d9
 800d0f6:	f7f3 f8ef 	bl	80002d8 <__aeabi_dsub>
 800d0fa:	9d00      	ldr	r5, [sp, #0]
 800d0fc:	ec41 0b19 	vmov	d9, r0, r1
 800d100:	4649      	mov	r1, r9
 800d102:	4640      	mov	r0, r8
 800d104:	f7f3 fd50 	bl	8000ba8 <__aeabi_d2iz>
 800d108:	4606      	mov	r6, r0
 800d10a:	f7f3 fa33 	bl	8000574 <__aeabi_i2d>
 800d10e:	4602      	mov	r2, r0
 800d110:	460b      	mov	r3, r1
 800d112:	4640      	mov	r0, r8
 800d114:	4649      	mov	r1, r9
 800d116:	f7f3 f8df 	bl	80002d8 <__aeabi_dsub>
 800d11a:	3630      	adds	r6, #48	; 0x30
 800d11c:	f805 6b01 	strb.w	r6, [r5], #1
 800d120:	ec53 2b19 	vmov	r2, r3, d9
 800d124:	4680      	mov	r8, r0
 800d126:	4689      	mov	r9, r1
 800d128:	f7f3 fd00 	bl	8000b2c <__aeabi_dcmplt>
 800d12c:	2800      	cmp	r0, #0
 800d12e:	d164      	bne.n	800d1fa <_dtoa_r+0x62a>
 800d130:	4642      	mov	r2, r8
 800d132:	464b      	mov	r3, r9
 800d134:	4937      	ldr	r1, [pc, #220]	; (800d214 <_dtoa_r+0x644>)
 800d136:	2000      	movs	r0, #0
 800d138:	f7f3 f8ce 	bl	80002d8 <__aeabi_dsub>
 800d13c:	ec53 2b19 	vmov	r2, r3, d9
 800d140:	f7f3 fcf4 	bl	8000b2c <__aeabi_dcmplt>
 800d144:	2800      	cmp	r0, #0
 800d146:	f040 80b6 	bne.w	800d2b6 <_dtoa_r+0x6e6>
 800d14a:	9b02      	ldr	r3, [sp, #8]
 800d14c:	429d      	cmp	r5, r3
 800d14e:	f43f af7c 	beq.w	800d04a <_dtoa_r+0x47a>
 800d152:	4b31      	ldr	r3, [pc, #196]	; (800d218 <_dtoa_r+0x648>)
 800d154:	ec51 0b19 	vmov	r0, r1, d9
 800d158:	2200      	movs	r2, #0
 800d15a:	f7f3 fa75 	bl	8000648 <__aeabi_dmul>
 800d15e:	4b2e      	ldr	r3, [pc, #184]	; (800d218 <_dtoa_r+0x648>)
 800d160:	ec41 0b19 	vmov	d9, r0, r1
 800d164:	2200      	movs	r2, #0
 800d166:	4640      	mov	r0, r8
 800d168:	4649      	mov	r1, r9
 800d16a:	f7f3 fa6d 	bl	8000648 <__aeabi_dmul>
 800d16e:	4680      	mov	r8, r0
 800d170:	4689      	mov	r9, r1
 800d172:	e7c5      	b.n	800d100 <_dtoa_r+0x530>
 800d174:	ec51 0b17 	vmov	r0, r1, d7
 800d178:	f7f3 fa66 	bl	8000648 <__aeabi_dmul>
 800d17c:	9b02      	ldr	r3, [sp, #8]
 800d17e:	9d00      	ldr	r5, [sp, #0]
 800d180:	930f      	str	r3, [sp, #60]	; 0x3c
 800d182:	ec41 0b19 	vmov	d9, r0, r1
 800d186:	4649      	mov	r1, r9
 800d188:	4640      	mov	r0, r8
 800d18a:	f7f3 fd0d 	bl	8000ba8 <__aeabi_d2iz>
 800d18e:	4606      	mov	r6, r0
 800d190:	f7f3 f9f0 	bl	8000574 <__aeabi_i2d>
 800d194:	3630      	adds	r6, #48	; 0x30
 800d196:	4602      	mov	r2, r0
 800d198:	460b      	mov	r3, r1
 800d19a:	4640      	mov	r0, r8
 800d19c:	4649      	mov	r1, r9
 800d19e:	f7f3 f89b 	bl	80002d8 <__aeabi_dsub>
 800d1a2:	f805 6b01 	strb.w	r6, [r5], #1
 800d1a6:	9b02      	ldr	r3, [sp, #8]
 800d1a8:	429d      	cmp	r5, r3
 800d1aa:	4680      	mov	r8, r0
 800d1ac:	4689      	mov	r9, r1
 800d1ae:	f04f 0200 	mov.w	r2, #0
 800d1b2:	d124      	bne.n	800d1fe <_dtoa_r+0x62e>
 800d1b4:	4b1b      	ldr	r3, [pc, #108]	; (800d224 <_dtoa_r+0x654>)
 800d1b6:	ec51 0b19 	vmov	r0, r1, d9
 800d1ba:	f7f3 f88f 	bl	80002dc <__adddf3>
 800d1be:	4602      	mov	r2, r0
 800d1c0:	460b      	mov	r3, r1
 800d1c2:	4640      	mov	r0, r8
 800d1c4:	4649      	mov	r1, r9
 800d1c6:	f7f3 fccf 	bl	8000b68 <__aeabi_dcmpgt>
 800d1ca:	2800      	cmp	r0, #0
 800d1cc:	d173      	bne.n	800d2b6 <_dtoa_r+0x6e6>
 800d1ce:	ec53 2b19 	vmov	r2, r3, d9
 800d1d2:	4914      	ldr	r1, [pc, #80]	; (800d224 <_dtoa_r+0x654>)
 800d1d4:	2000      	movs	r0, #0
 800d1d6:	f7f3 f87f 	bl	80002d8 <__aeabi_dsub>
 800d1da:	4602      	mov	r2, r0
 800d1dc:	460b      	mov	r3, r1
 800d1de:	4640      	mov	r0, r8
 800d1e0:	4649      	mov	r1, r9
 800d1e2:	f7f3 fca3 	bl	8000b2c <__aeabi_dcmplt>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	f43f af2f 	beq.w	800d04a <_dtoa_r+0x47a>
 800d1ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d1ee:	1e6b      	subs	r3, r5, #1
 800d1f0:	930f      	str	r3, [sp, #60]	; 0x3c
 800d1f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d1f6:	2b30      	cmp	r3, #48	; 0x30
 800d1f8:	d0f8      	beq.n	800d1ec <_dtoa_r+0x61c>
 800d1fa:	46bb      	mov	fp, r7
 800d1fc:	e04a      	b.n	800d294 <_dtoa_r+0x6c4>
 800d1fe:	4b06      	ldr	r3, [pc, #24]	; (800d218 <_dtoa_r+0x648>)
 800d200:	f7f3 fa22 	bl	8000648 <__aeabi_dmul>
 800d204:	4680      	mov	r8, r0
 800d206:	4689      	mov	r9, r1
 800d208:	e7bd      	b.n	800d186 <_dtoa_r+0x5b6>
 800d20a:	bf00      	nop
 800d20c:	08012b30 	.word	0x08012b30
 800d210:	08012b08 	.word	0x08012b08
 800d214:	3ff00000 	.word	0x3ff00000
 800d218:	40240000 	.word	0x40240000
 800d21c:	401c0000 	.word	0x401c0000
 800d220:	40140000 	.word	0x40140000
 800d224:	3fe00000 	.word	0x3fe00000
 800d228:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d22c:	9d00      	ldr	r5, [sp, #0]
 800d22e:	4642      	mov	r2, r8
 800d230:	464b      	mov	r3, r9
 800d232:	4630      	mov	r0, r6
 800d234:	4639      	mov	r1, r7
 800d236:	f7f3 fb31 	bl	800089c <__aeabi_ddiv>
 800d23a:	f7f3 fcb5 	bl	8000ba8 <__aeabi_d2iz>
 800d23e:	9001      	str	r0, [sp, #4]
 800d240:	f7f3 f998 	bl	8000574 <__aeabi_i2d>
 800d244:	4642      	mov	r2, r8
 800d246:	464b      	mov	r3, r9
 800d248:	f7f3 f9fe 	bl	8000648 <__aeabi_dmul>
 800d24c:	4602      	mov	r2, r0
 800d24e:	460b      	mov	r3, r1
 800d250:	4630      	mov	r0, r6
 800d252:	4639      	mov	r1, r7
 800d254:	f7f3 f840 	bl	80002d8 <__aeabi_dsub>
 800d258:	9e01      	ldr	r6, [sp, #4]
 800d25a:	9f04      	ldr	r7, [sp, #16]
 800d25c:	3630      	adds	r6, #48	; 0x30
 800d25e:	f805 6b01 	strb.w	r6, [r5], #1
 800d262:	9e00      	ldr	r6, [sp, #0]
 800d264:	1bae      	subs	r6, r5, r6
 800d266:	42b7      	cmp	r7, r6
 800d268:	4602      	mov	r2, r0
 800d26a:	460b      	mov	r3, r1
 800d26c:	d134      	bne.n	800d2d8 <_dtoa_r+0x708>
 800d26e:	f7f3 f835 	bl	80002dc <__adddf3>
 800d272:	4642      	mov	r2, r8
 800d274:	464b      	mov	r3, r9
 800d276:	4606      	mov	r6, r0
 800d278:	460f      	mov	r7, r1
 800d27a:	f7f3 fc75 	bl	8000b68 <__aeabi_dcmpgt>
 800d27e:	b9c8      	cbnz	r0, 800d2b4 <_dtoa_r+0x6e4>
 800d280:	4642      	mov	r2, r8
 800d282:	464b      	mov	r3, r9
 800d284:	4630      	mov	r0, r6
 800d286:	4639      	mov	r1, r7
 800d288:	f7f3 fc46 	bl	8000b18 <__aeabi_dcmpeq>
 800d28c:	b110      	cbz	r0, 800d294 <_dtoa_r+0x6c4>
 800d28e:	9b01      	ldr	r3, [sp, #4]
 800d290:	07db      	lsls	r3, r3, #31
 800d292:	d40f      	bmi.n	800d2b4 <_dtoa_r+0x6e4>
 800d294:	4651      	mov	r1, sl
 800d296:	4620      	mov	r0, r4
 800d298:	f000 fb18 	bl	800d8cc <_Bfree>
 800d29c:	2300      	movs	r3, #0
 800d29e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d2a0:	702b      	strb	r3, [r5, #0]
 800d2a2:	f10b 0301 	add.w	r3, fp, #1
 800d2a6:	6013      	str	r3, [r2, #0]
 800d2a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f43f ace2 	beq.w	800cc74 <_dtoa_r+0xa4>
 800d2b0:	601d      	str	r5, [r3, #0]
 800d2b2:	e4df      	b.n	800cc74 <_dtoa_r+0xa4>
 800d2b4:	465f      	mov	r7, fp
 800d2b6:	462b      	mov	r3, r5
 800d2b8:	461d      	mov	r5, r3
 800d2ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d2be:	2a39      	cmp	r2, #57	; 0x39
 800d2c0:	d106      	bne.n	800d2d0 <_dtoa_r+0x700>
 800d2c2:	9a00      	ldr	r2, [sp, #0]
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d1f7      	bne.n	800d2b8 <_dtoa_r+0x6e8>
 800d2c8:	9900      	ldr	r1, [sp, #0]
 800d2ca:	2230      	movs	r2, #48	; 0x30
 800d2cc:	3701      	adds	r7, #1
 800d2ce:	700a      	strb	r2, [r1, #0]
 800d2d0:	781a      	ldrb	r2, [r3, #0]
 800d2d2:	3201      	adds	r2, #1
 800d2d4:	701a      	strb	r2, [r3, #0]
 800d2d6:	e790      	b.n	800d1fa <_dtoa_r+0x62a>
 800d2d8:	4ba3      	ldr	r3, [pc, #652]	; (800d568 <_dtoa_r+0x998>)
 800d2da:	2200      	movs	r2, #0
 800d2dc:	f7f3 f9b4 	bl	8000648 <__aeabi_dmul>
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	4606      	mov	r6, r0
 800d2e6:	460f      	mov	r7, r1
 800d2e8:	f7f3 fc16 	bl	8000b18 <__aeabi_dcmpeq>
 800d2ec:	2800      	cmp	r0, #0
 800d2ee:	d09e      	beq.n	800d22e <_dtoa_r+0x65e>
 800d2f0:	e7d0      	b.n	800d294 <_dtoa_r+0x6c4>
 800d2f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2f4:	2a00      	cmp	r2, #0
 800d2f6:	f000 80ca 	beq.w	800d48e <_dtoa_r+0x8be>
 800d2fa:	9a07      	ldr	r2, [sp, #28]
 800d2fc:	2a01      	cmp	r2, #1
 800d2fe:	f300 80ad 	bgt.w	800d45c <_dtoa_r+0x88c>
 800d302:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d304:	2a00      	cmp	r2, #0
 800d306:	f000 80a5 	beq.w	800d454 <_dtoa_r+0x884>
 800d30a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d30e:	9e08      	ldr	r6, [sp, #32]
 800d310:	9d05      	ldr	r5, [sp, #20]
 800d312:	9a05      	ldr	r2, [sp, #20]
 800d314:	441a      	add	r2, r3
 800d316:	9205      	str	r2, [sp, #20]
 800d318:	9a06      	ldr	r2, [sp, #24]
 800d31a:	2101      	movs	r1, #1
 800d31c:	441a      	add	r2, r3
 800d31e:	4620      	mov	r0, r4
 800d320:	9206      	str	r2, [sp, #24]
 800d322:	f000 fb89 	bl	800da38 <__i2b>
 800d326:	4607      	mov	r7, r0
 800d328:	b165      	cbz	r5, 800d344 <_dtoa_r+0x774>
 800d32a:	9b06      	ldr	r3, [sp, #24]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	dd09      	ble.n	800d344 <_dtoa_r+0x774>
 800d330:	42ab      	cmp	r3, r5
 800d332:	9a05      	ldr	r2, [sp, #20]
 800d334:	bfa8      	it	ge
 800d336:	462b      	movge	r3, r5
 800d338:	1ad2      	subs	r2, r2, r3
 800d33a:	9205      	str	r2, [sp, #20]
 800d33c:	9a06      	ldr	r2, [sp, #24]
 800d33e:	1aed      	subs	r5, r5, r3
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	9306      	str	r3, [sp, #24]
 800d344:	9b08      	ldr	r3, [sp, #32]
 800d346:	b1f3      	cbz	r3, 800d386 <_dtoa_r+0x7b6>
 800d348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	f000 80a3 	beq.w	800d496 <_dtoa_r+0x8c6>
 800d350:	2e00      	cmp	r6, #0
 800d352:	dd10      	ble.n	800d376 <_dtoa_r+0x7a6>
 800d354:	4639      	mov	r1, r7
 800d356:	4632      	mov	r2, r6
 800d358:	4620      	mov	r0, r4
 800d35a:	f000 fc2d 	bl	800dbb8 <__pow5mult>
 800d35e:	4652      	mov	r2, sl
 800d360:	4601      	mov	r1, r0
 800d362:	4607      	mov	r7, r0
 800d364:	4620      	mov	r0, r4
 800d366:	f000 fb7d 	bl	800da64 <__multiply>
 800d36a:	4651      	mov	r1, sl
 800d36c:	4680      	mov	r8, r0
 800d36e:	4620      	mov	r0, r4
 800d370:	f000 faac 	bl	800d8cc <_Bfree>
 800d374:	46c2      	mov	sl, r8
 800d376:	9b08      	ldr	r3, [sp, #32]
 800d378:	1b9a      	subs	r2, r3, r6
 800d37a:	d004      	beq.n	800d386 <_dtoa_r+0x7b6>
 800d37c:	4651      	mov	r1, sl
 800d37e:	4620      	mov	r0, r4
 800d380:	f000 fc1a 	bl	800dbb8 <__pow5mult>
 800d384:	4682      	mov	sl, r0
 800d386:	2101      	movs	r1, #1
 800d388:	4620      	mov	r0, r4
 800d38a:	f000 fb55 	bl	800da38 <__i2b>
 800d38e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d390:	2b00      	cmp	r3, #0
 800d392:	4606      	mov	r6, r0
 800d394:	f340 8081 	ble.w	800d49a <_dtoa_r+0x8ca>
 800d398:	461a      	mov	r2, r3
 800d39a:	4601      	mov	r1, r0
 800d39c:	4620      	mov	r0, r4
 800d39e:	f000 fc0b 	bl	800dbb8 <__pow5mult>
 800d3a2:	9b07      	ldr	r3, [sp, #28]
 800d3a4:	2b01      	cmp	r3, #1
 800d3a6:	4606      	mov	r6, r0
 800d3a8:	dd7a      	ble.n	800d4a0 <_dtoa_r+0x8d0>
 800d3aa:	f04f 0800 	mov.w	r8, #0
 800d3ae:	6933      	ldr	r3, [r6, #16]
 800d3b0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d3b4:	6918      	ldr	r0, [r3, #16]
 800d3b6:	f000 faf1 	bl	800d99c <__hi0bits>
 800d3ba:	f1c0 0020 	rsb	r0, r0, #32
 800d3be:	9b06      	ldr	r3, [sp, #24]
 800d3c0:	4418      	add	r0, r3
 800d3c2:	f010 001f 	ands.w	r0, r0, #31
 800d3c6:	f000 8094 	beq.w	800d4f2 <_dtoa_r+0x922>
 800d3ca:	f1c0 0320 	rsb	r3, r0, #32
 800d3ce:	2b04      	cmp	r3, #4
 800d3d0:	f340 8085 	ble.w	800d4de <_dtoa_r+0x90e>
 800d3d4:	9b05      	ldr	r3, [sp, #20]
 800d3d6:	f1c0 001c 	rsb	r0, r0, #28
 800d3da:	4403      	add	r3, r0
 800d3dc:	9305      	str	r3, [sp, #20]
 800d3de:	9b06      	ldr	r3, [sp, #24]
 800d3e0:	4403      	add	r3, r0
 800d3e2:	4405      	add	r5, r0
 800d3e4:	9306      	str	r3, [sp, #24]
 800d3e6:	9b05      	ldr	r3, [sp, #20]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	dd05      	ble.n	800d3f8 <_dtoa_r+0x828>
 800d3ec:	4651      	mov	r1, sl
 800d3ee:	461a      	mov	r2, r3
 800d3f0:	4620      	mov	r0, r4
 800d3f2:	f000 fc3b 	bl	800dc6c <__lshift>
 800d3f6:	4682      	mov	sl, r0
 800d3f8:	9b06      	ldr	r3, [sp, #24]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	dd05      	ble.n	800d40a <_dtoa_r+0x83a>
 800d3fe:	4631      	mov	r1, r6
 800d400:	461a      	mov	r2, r3
 800d402:	4620      	mov	r0, r4
 800d404:	f000 fc32 	bl	800dc6c <__lshift>
 800d408:	4606      	mov	r6, r0
 800d40a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d072      	beq.n	800d4f6 <_dtoa_r+0x926>
 800d410:	4631      	mov	r1, r6
 800d412:	4650      	mov	r0, sl
 800d414:	f000 fc96 	bl	800dd44 <__mcmp>
 800d418:	2800      	cmp	r0, #0
 800d41a:	da6c      	bge.n	800d4f6 <_dtoa_r+0x926>
 800d41c:	2300      	movs	r3, #0
 800d41e:	4651      	mov	r1, sl
 800d420:	220a      	movs	r2, #10
 800d422:	4620      	mov	r0, r4
 800d424:	f000 fa74 	bl	800d910 <__multadd>
 800d428:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d42a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800d42e:	4682      	mov	sl, r0
 800d430:	2b00      	cmp	r3, #0
 800d432:	f000 81b0 	beq.w	800d796 <_dtoa_r+0xbc6>
 800d436:	2300      	movs	r3, #0
 800d438:	4639      	mov	r1, r7
 800d43a:	220a      	movs	r2, #10
 800d43c:	4620      	mov	r0, r4
 800d43e:	f000 fa67 	bl	800d910 <__multadd>
 800d442:	9b01      	ldr	r3, [sp, #4]
 800d444:	2b00      	cmp	r3, #0
 800d446:	4607      	mov	r7, r0
 800d448:	f300 8096 	bgt.w	800d578 <_dtoa_r+0x9a8>
 800d44c:	9b07      	ldr	r3, [sp, #28]
 800d44e:	2b02      	cmp	r3, #2
 800d450:	dc59      	bgt.n	800d506 <_dtoa_r+0x936>
 800d452:	e091      	b.n	800d578 <_dtoa_r+0x9a8>
 800d454:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d456:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d45a:	e758      	b.n	800d30e <_dtoa_r+0x73e>
 800d45c:	9b04      	ldr	r3, [sp, #16]
 800d45e:	1e5e      	subs	r6, r3, #1
 800d460:	9b08      	ldr	r3, [sp, #32]
 800d462:	42b3      	cmp	r3, r6
 800d464:	bfbf      	itttt	lt
 800d466:	9b08      	ldrlt	r3, [sp, #32]
 800d468:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800d46a:	9608      	strlt	r6, [sp, #32]
 800d46c:	1af3      	sublt	r3, r6, r3
 800d46e:	bfb4      	ite	lt
 800d470:	18d2      	addlt	r2, r2, r3
 800d472:	1b9e      	subge	r6, r3, r6
 800d474:	9b04      	ldr	r3, [sp, #16]
 800d476:	bfbc      	itt	lt
 800d478:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800d47a:	2600      	movlt	r6, #0
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	bfb7      	itett	lt
 800d480:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800d484:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800d488:	1a9d      	sublt	r5, r3, r2
 800d48a:	2300      	movlt	r3, #0
 800d48c:	e741      	b.n	800d312 <_dtoa_r+0x742>
 800d48e:	9e08      	ldr	r6, [sp, #32]
 800d490:	9d05      	ldr	r5, [sp, #20]
 800d492:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800d494:	e748      	b.n	800d328 <_dtoa_r+0x758>
 800d496:	9a08      	ldr	r2, [sp, #32]
 800d498:	e770      	b.n	800d37c <_dtoa_r+0x7ac>
 800d49a:	9b07      	ldr	r3, [sp, #28]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	dc19      	bgt.n	800d4d4 <_dtoa_r+0x904>
 800d4a0:	9b02      	ldr	r3, [sp, #8]
 800d4a2:	b9bb      	cbnz	r3, 800d4d4 <_dtoa_r+0x904>
 800d4a4:	9b03      	ldr	r3, [sp, #12]
 800d4a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4aa:	b99b      	cbnz	r3, 800d4d4 <_dtoa_r+0x904>
 800d4ac:	9b03      	ldr	r3, [sp, #12]
 800d4ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4b2:	0d1b      	lsrs	r3, r3, #20
 800d4b4:	051b      	lsls	r3, r3, #20
 800d4b6:	b183      	cbz	r3, 800d4da <_dtoa_r+0x90a>
 800d4b8:	9b05      	ldr	r3, [sp, #20]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	9305      	str	r3, [sp, #20]
 800d4be:	9b06      	ldr	r3, [sp, #24]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	9306      	str	r3, [sp, #24]
 800d4c4:	f04f 0801 	mov.w	r8, #1
 800d4c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	f47f af6f 	bne.w	800d3ae <_dtoa_r+0x7de>
 800d4d0:	2001      	movs	r0, #1
 800d4d2:	e774      	b.n	800d3be <_dtoa_r+0x7ee>
 800d4d4:	f04f 0800 	mov.w	r8, #0
 800d4d8:	e7f6      	b.n	800d4c8 <_dtoa_r+0x8f8>
 800d4da:	4698      	mov	r8, r3
 800d4dc:	e7f4      	b.n	800d4c8 <_dtoa_r+0x8f8>
 800d4de:	d082      	beq.n	800d3e6 <_dtoa_r+0x816>
 800d4e0:	9a05      	ldr	r2, [sp, #20]
 800d4e2:	331c      	adds	r3, #28
 800d4e4:	441a      	add	r2, r3
 800d4e6:	9205      	str	r2, [sp, #20]
 800d4e8:	9a06      	ldr	r2, [sp, #24]
 800d4ea:	441a      	add	r2, r3
 800d4ec:	441d      	add	r5, r3
 800d4ee:	9206      	str	r2, [sp, #24]
 800d4f0:	e779      	b.n	800d3e6 <_dtoa_r+0x816>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	e7f4      	b.n	800d4e0 <_dtoa_r+0x910>
 800d4f6:	9b04      	ldr	r3, [sp, #16]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	dc37      	bgt.n	800d56c <_dtoa_r+0x99c>
 800d4fc:	9b07      	ldr	r3, [sp, #28]
 800d4fe:	2b02      	cmp	r3, #2
 800d500:	dd34      	ble.n	800d56c <_dtoa_r+0x99c>
 800d502:	9b04      	ldr	r3, [sp, #16]
 800d504:	9301      	str	r3, [sp, #4]
 800d506:	9b01      	ldr	r3, [sp, #4]
 800d508:	b963      	cbnz	r3, 800d524 <_dtoa_r+0x954>
 800d50a:	4631      	mov	r1, r6
 800d50c:	2205      	movs	r2, #5
 800d50e:	4620      	mov	r0, r4
 800d510:	f000 f9fe 	bl	800d910 <__multadd>
 800d514:	4601      	mov	r1, r0
 800d516:	4606      	mov	r6, r0
 800d518:	4650      	mov	r0, sl
 800d51a:	f000 fc13 	bl	800dd44 <__mcmp>
 800d51e:	2800      	cmp	r0, #0
 800d520:	f73f adbb 	bgt.w	800d09a <_dtoa_r+0x4ca>
 800d524:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d526:	9d00      	ldr	r5, [sp, #0]
 800d528:	ea6f 0b03 	mvn.w	fp, r3
 800d52c:	f04f 0800 	mov.w	r8, #0
 800d530:	4631      	mov	r1, r6
 800d532:	4620      	mov	r0, r4
 800d534:	f000 f9ca 	bl	800d8cc <_Bfree>
 800d538:	2f00      	cmp	r7, #0
 800d53a:	f43f aeab 	beq.w	800d294 <_dtoa_r+0x6c4>
 800d53e:	f1b8 0f00 	cmp.w	r8, #0
 800d542:	d005      	beq.n	800d550 <_dtoa_r+0x980>
 800d544:	45b8      	cmp	r8, r7
 800d546:	d003      	beq.n	800d550 <_dtoa_r+0x980>
 800d548:	4641      	mov	r1, r8
 800d54a:	4620      	mov	r0, r4
 800d54c:	f000 f9be 	bl	800d8cc <_Bfree>
 800d550:	4639      	mov	r1, r7
 800d552:	4620      	mov	r0, r4
 800d554:	f000 f9ba 	bl	800d8cc <_Bfree>
 800d558:	e69c      	b.n	800d294 <_dtoa_r+0x6c4>
 800d55a:	2600      	movs	r6, #0
 800d55c:	4637      	mov	r7, r6
 800d55e:	e7e1      	b.n	800d524 <_dtoa_r+0x954>
 800d560:	46bb      	mov	fp, r7
 800d562:	4637      	mov	r7, r6
 800d564:	e599      	b.n	800d09a <_dtoa_r+0x4ca>
 800d566:	bf00      	nop
 800d568:	40240000 	.word	0x40240000
 800d56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d56e:	2b00      	cmp	r3, #0
 800d570:	f000 80c8 	beq.w	800d704 <_dtoa_r+0xb34>
 800d574:	9b04      	ldr	r3, [sp, #16]
 800d576:	9301      	str	r3, [sp, #4]
 800d578:	2d00      	cmp	r5, #0
 800d57a:	dd05      	ble.n	800d588 <_dtoa_r+0x9b8>
 800d57c:	4639      	mov	r1, r7
 800d57e:	462a      	mov	r2, r5
 800d580:	4620      	mov	r0, r4
 800d582:	f000 fb73 	bl	800dc6c <__lshift>
 800d586:	4607      	mov	r7, r0
 800d588:	f1b8 0f00 	cmp.w	r8, #0
 800d58c:	d05b      	beq.n	800d646 <_dtoa_r+0xa76>
 800d58e:	6879      	ldr	r1, [r7, #4]
 800d590:	4620      	mov	r0, r4
 800d592:	f000 f95b 	bl	800d84c <_Balloc>
 800d596:	4605      	mov	r5, r0
 800d598:	b928      	cbnz	r0, 800d5a6 <_dtoa_r+0x9d6>
 800d59a:	4b83      	ldr	r3, [pc, #524]	; (800d7a8 <_dtoa_r+0xbd8>)
 800d59c:	4602      	mov	r2, r0
 800d59e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800d5a2:	f7ff bb2e 	b.w	800cc02 <_dtoa_r+0x32>
 800d5a6:	693a      	ldr	r2, [r7, #16]
 800d5a8:	3202      	adds	r2, #2
 800d5aa:	0092      	lsls	r2, r2, #2
 800d5ac:	f107 010c 	add.w	r1, r7, #12
 800d5b0:	300c      	adds	r0, #12
 800d5b2:	f001 f8af 	bl	800e714 <memcpy>
 800d5b6:	2201      	movs	r2, #1
 800d5b8:	4629      	mov	r1, r5
 800d5ba:	4620      	mov	r0, r4
 800d5bc:	f000 fb56 	bl	800dc6c <__lshift>
 800d5c0:	9b00      	ldr	r3, [sp, #0]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	9304      	str	r3, [sp, #16]
 800d5c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5ca:	4413      	add	r3, r2
 800d5cc:	9308      	str	r3, [sp, #32]
 800d5ce:	9b02      	ldr	r3, [sp, #8]
 800d5d0:	f003 0301 	and.w	r3, r3, #1
 800d5d4:	46b8      	mov	r8, r7
 800d5d6:	9306      	str	r3, [sp, #24]
 800d5d8:	4607      	mov	r7, r0
 800d5da:	9b04      	ldr	r3, [sp, #16]
 800d5dc:	4631      	mov	r1, r6
 800d5de:	3b01      	subs	r3, #1
 800d5e0:	4650      	mov	r0, sl
 800d5e2:	9301      	str	r3, [sp, #4]
 800d5e4:	f7ff fa69 	bl	800caba <quorem>
 800d5e8:	4641      	mov	r1, r8
 800d5ea:	9002      	str	r0, [sp, #8]
 800d5ec:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d5f0:	4650      	mov	r0, sl
 800d5f2:	f000 fba7 	bl	800dd44 <__mcmp>
 800d5f6:	463a      	mov	r2, r7
 800d5f8:	9005      	str	r0, [sp, #20]
 800d5fa:	4631      	mov	r1, r6
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	f000 fbbd 	bl	800dd7c <__mdiff>
 800d602:	68c2      	ldr	r2, [r0, #12]
 800d604:	4605      	mov	r5, r0
 800d606:	bb02      	cbnz	r2, 800d64a <_dtoa_r+0xa7a>
 800d608:	4601      	mov	r1, r0
 800d60a:	4650      	mov	r0, sl
 800d60c:	f000 fb9a 	bl	800dd44 <__mcmp>
 800d610:	4602      	mov	r2, r0
 800d612:	4629      	mov	r1, r5
 800d614:	4620      	mov	r0, r4
 800d616:	9209      	str	r2, [sp, #36]	; 0x24
 800d618:	f000 f958 	bl	800d8cc <_Bfree>
 800d61c:	9b07      	ldr	r3, [sp, #28]
 800d61e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d620:	9d04      	ldr	r5, [sp, #16]
 800d622:	ea43 0102 	orr.w	r1, r3, r2
 800d626:	9b06      	ldr	r3, [sp, #24]
 800d628:	4319      	orrs	r1, r3
 800d62a:	d110      	bne.n	800d64e <_dtoa_r+0xa7e>
 800d62c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d630:	d029      	beq.n	800d686 <_dtoa_r+0xab6>
 800d632:	9b05      	ldr	r3, [sp, #20]
 800d634:	2b00      	cmp	r3, #0
 800d636:	dd02      	ble.n	800d63e <_dtoa_r+0xa6e>
 800d638:	9b02      	ldr	r3, [sp, #8]
 800d63a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800d63e:	9b01      	ldr	r3, [sp, #4]
 800d640:	f883 9000 	strb.w	r9, [r3]
 800d644:	e774      	b.n	800d530 <_dtoa_r+0x960>
 800d646:	4638      	mov	r0, r7
 800d648:	e7ba      	b.n	800d5c0 <_dtoa_r+0x9f0>
 800d64a:	2201      	movs	r2, #1
 800d64c:	e7e1      	b.n	800d612 <_dtoa_r+0xa42>
 800d64e:	9b05      	ldr	r3, [sp, #20]
 800d650:	2b00      	cmp	r3, #0
 800d652:	db04      	blt.n	800d65e <_dtoa_r+0xa8e>
 800d654:	9907      	ldr	r1, [sp, #28]
 800d656:	430b      	orrs	r3, r1
 800d658:	9906      	ldr	r1, [sp, #24]
 800d65a:	430b      	orrs	r3, r1
 800d65c:	d120      	bne.n	800d6a0 <_dtoa_r+0xad0>
 800d65e:	2a00      	cmp	r2, #0
 800d660:	dded      	ble.n	800d63e <_dtoa_r+0xa6e>
 800d662:	4651      	mov	r1, sl
 800d664:	2201      	movs	r2, #1
 800d666:	4620      	mov	r0, r4
 800d668:	f000 fb00 	bl	800dc6c <__lshift>
 800d66c:	4631      	mov	r1, r6
 800d66e:	4682      	mov	sl, r0
 800d670:	f000 fb68 	bl	800dd44 <__mcmp>
 800d674:	2800      	cmp	r0, #0
 800d676:	dc03      	bgt.n	800d680 <_dtoa_r+0xab0>
 800d678:	d1e1      	bne.n	800d63e <_dtoa_r+0xa6e>
 800d67a:	f019 0f01 	tst.w	r9, #1
 800d67e:	d0de      	beq.n	800d63e <_dtoa_r+0xa6e>
 800d680:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d684:	d1d8      	bne.n	800d638 <_dtoa_r+0xa68>
 800d686:	9a01      	ldr	r2, [sp, #4]
 800d688:	2339      	movs	r3, #57	; 0x39
 800d68a:	7013      	strb	r3, [r2, #0]
 800d68c:	462b      	mov	r3, r5
 800d68e:	461d      	mov	r5, r3
 800d690:	3b01      	subs	r3, #1
 800d692:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d696:	2a39      	cmp	r2, #57	; 0x39
 800d698:	d06c      	beq.n	800d774 <_dtoa_r+0xba4>
 800d69a:	3201      	adds	r2, #1
 800d69c:	701a      	strb	r2, [r3, #0]
 800d69e:	e747      	b.n	800d530 <_dtoa_r+0x960>
 800d6a0:	2a00      	cmp	r2, #0
 800d6a2:	dd07      	ble.n	800d6b4 <_dtoa_r+0xae4>
 800d6a4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800d6a8:	d0ed      	beq.n	800d686 <_dtoa_r+0xab6>
 800d6aa:	9a01      	ldr	r2, [sp, #4]
 800d6ac:	f109 0301 	add.w	r3, r9, #1
 800d6b0:	7013      	strb	r3, [r2, #0]
 800d6b2:	e73d      	b.n	800d530 <_dtoa_r+0x960>
 800d6b4:	9b04      	ldr	r3, [sp, #16]
 800d6b6:	9a08      	ldr	r2, [sp, #32]
 800d6b8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800d6bc:	4293      	cmp	r3, r2
 800d6be:	d043      	beq.n	800d748 <_dtoa_r+0xb78>
 800d6c0:	4651      	mov	r1, sl
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	220a      	movs	r2, #10
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f000 f922 	bl	800d910 <__multadd>
 800d6cc:	45b8      	cmp	r8, r7
 800d6ce:	4682      	mov	sl, r0
 800d6d0:	f04f 0300 	mov.w	r3, #0
 800d6d4:	f04f 020a 	mov.w	r2, #10
 800d6d8:	4641      	mov	r1, r8
 800d6da:	4620      	mov	r0, r4
 800d6dc:	d107      	bne.n	800d6ee <_dtoa_r+0xb1e>
 800d6de:	f000 f917 	bl	800d910 <__multadd>
 800d6e2:	4680      	mov	r8, r0
 800d6e4:	4607      	mov	r7, r0
 800d6e6:	9b04      	ldr	r3, [sp, #16]
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	9304      	str	r3, [sp, #16]
 800d6ec:	e775      	b.n	800d5da <_dtoa_r+0xa0a>
 800d6ee:	f000 f90f 	bl	800d910 <__multadd>
 800d6f2:	4639      	mov	r1, r7
 800d6f4:	4680      	mov	r8, r0
 800d6f6:	2300      	movs	r3, #0
 800d6f8:	220a      	movs	r2, #10
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	f000 f908 	bl	800d910 <__multadd>
 800d700:	4607      	mov	r7, r0
 800d702:	e7f0      	b.n	800d6e6 <_dtoa_r+0xb16>
 800d704:	9b04      	ldr	r3, [sp, #16]
 800d706:	9301      	str	r3, [sp, #4]
 800d708:	9d00      	ldr	r5, [sp, #0]
 800d70a:	4631      	mov	r1, r6
 800d70c:	4650      	mov	r0, sl
 800d70e:	f7ff f9d4 	bl	800caba <quorem>
 800d712:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800d716:	9b00      	ldr	r3, [sp, #0]
 800d718:	f805 9b01 	strb.w	r9, [r5], #1
 800d71c:	1aea      	subs	r2, r5, r3
 800d71e:	9b01      	ldr	r3, [sp, #4]
 800d720:	4293      	cmp	r3, r2
 800d722:	dd07      	ble.n	800d734 <_dtoa_r+0xb64>
 800d724:	4651      	mov	r1, sl
 800d726:	2300      	movs	r3, #0
 800d728:	220a      	movs	r2, #10
 800d72a:	4620      	mov	r0, r4
 800d72c:	f000 f8f0 	bl	800d910 <__multadd>
 800d730:	4682      	mov	sl, r0
 800d732:	e7ea      	b.n	800d70a <_dtoa_r+0xb3a>
 800d734:	9b01      	ldr	r3, [sp, #4]
 800d736:	2b00      	cmp	r3, #0
 800d738:	bfc8      	it	gt
 800d73a:	461d      	movgt	r5, r3
 800d73c:	9b00      	ldr	r3, [sp, #0]
 800d73e:	bfd8      	it	le
 800d740:	2501      	movle	r5, #1
 800d742:	441d      	add	r5, r3
 800d744:	f04f 0800 	mov.w	r8, #0
 800d748:	4651      	mov	r1, sl
 800d74a:	2201      	movs	r2, #1
 800d74c:	4620      	mov	r0, r4
 800d74e:	f000 fa8d 	bl	800dc6c <__lshift>
 800d752:	4631      	mov	r1, r6
 800d754:	4682      	mov	sl, r0
 800d756:	f000 faf5 	bl	800dd44 <__mcmp>
 800d75a:	2800      	cmp	r0, #0
 800d75c:	dc96      	bgt.n	800d68c <_dtoa_r+0xabc>
 800d75e:	d102      	bne.n	800d766 <_dtoa_r+0xb96>
 800d760:	f019 0f01 	tst.w	r9, #1
 800d764:	d192      	bne.n	800d68c <_dtoa_r+0xabc>
 800d766:	462b      	mov	r3, r5
 800d768:	461d      	mov	r5, r3
 800d76a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d76e:	2a30      	cmp	r2, #48	; 0x30
 800d770:	d0fa      	beq.n	800d768 <_dtoa_r+0xb98>
 800d772:	e6dd      	b.n	800d530 <_dtoa_r+0x960>
 800d774:	9a00      	ldr	r2, [sp, #0]
 800d776:	429a      	cmp	r2, r3
 800d778:	d189      	bne.n	800d68e <_dtoa_r+0xabe>
 800d77a:	f10b 0b01 	add.w	fp, fp, #1
 800d77e:	2331      	movs	r3, #49	; 0x31
 800d780:	e796      	b.n	800d6b0 <_dtoa_r+0xae0>
 800d782:	4b0a      	ldr	r3, [pc, #40]	; (800d7ac <_dtoa_r+0xbdc>)
 800d784:	f7ff ba99 	b.w	800ccba <_dtoa_r+0xea>
 800d788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f47f aa6d 	bne.w	800cc6a <_dtoa_r+0x9a>
 800d790:	4b07      	ldr	r3, [pc, #28]	; (800d7b0 <_dtoa_r+0xbe0>)
 800d792:	f7ff ba92 	b.w	800ccba <_dtoa_r+0xea>
 800d796:	9b01      	ldr	r3, [sp, #4]
 800d798:	2b00      	cmp	r3, #0
 800d79a:	dcb5      	bgt.n	800d708 <_dtoa_r+0xb38>
 800d79c:	9b07      	ldr	r3, [sp, #28]
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	f73f aeb1 	bgt.w	800d506 <_dtoa_r+0x936>
 800d7a4:	e7b0      	b.n	800d708 <_dtoa_r+0xb38>
 800d7a6:	bf00      	nop
 800d7a8:	08012a9c 	.word	0x08012a9c
 800d7ac:	080129fc 	.word	0x080129fc
 800d7b0:	08012a20 	.word	0x08012a20

0800d7b4 <_free_r>:
 800d7b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d7b6:	2900      	cmp	r1, #0
 800d7b8:	d044      	beq.n	800d844 <_free_r+0x90>
 800d7ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7be:	9001      	str	r0, [sp, #4]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f1a1 0404 	sub.w	r4, r1, #4
 800d7c6:	bfb8      	it	lt
 800d7c8:	18e4      	addlt	r4, r4, r3
 800d7ca:	f7fe fa4d 	bl	800bc68 <__malloc_lock>
 800d7ce:	4a1e      	ldr	r2, [pc, #120]	; (800d848 <_free_r+0x94>)
 800d7d0:	9801      	ldr	r0, [sp, #4]
 800d7d2:	6813      	ldr	r3, [r2, #0]
 800d7d4:	b933      	cbnz	r3, 800d7e4 <_free_r+0x30>
 800d7d6:	6063      	str	r3, [r4, #4]
 800d7d8:	6014      	str	r4, [r2, #0]
 800d7da:	b003      	add	sp, #12
 800d7dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d7e0:	f7fe ba48 	b.w	800bc74 <__malloc_unlock>
 800d7e4:	42a3      	cmp	r3, r4
 800d7e6:	d908      	bls.n	800d7fa <_free_r+0x46>
 800d7e8:	6825      	ldr	r5, [r4, #0]
 800d7ea:	1961      	adds	r1, r4, r5
 800d7ec:	428b      	cmp	r3, r1
 800d7ee:	bf01      	itttt	eq
 800d7f0:	6819      	ldreq	r1, [r3, #0]
 800d7f2:	685b      	ldreq	r3, [r3, #4]
 800d7f4:	1949      	addeq	r1, r1, r5
 800d7f6:	6021      	streq	r1, [r4, #0]
 800d7f8:	e7ed      	b.n	800d7d6 <_free_r+0x22>
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	685b      	ldr	r3, [r3, #4]
 800d7fe:	b10b      	cbz	r3, 800d804 <_free_r+0x50>
 800d800:	42a3      	cmp	r3, r4
 800d802:	d9fa      	bls.n	800d7fa <_free_r+0x46>
 800d804:	6811      	ldr	r1, [r2, #0]
 800d806:	1855      	adds	r5, r2, r1
 800d808:	42a5      	cmp	r5, r4
 800d80a:	d10b      	bne.n	800d824 <_free_r+0x70>
 800d80c:	6824      	ldr	r4, [r4, #0]
 800d80e:	4421      	add	r1, r4
 800d810:	1854      	adds	r4, r2, r1
 800d812:	42a3      	cmp	r3, r4
 800d814:	6011      	str	r1, [r2, #0]
 800d816:	d1e0      	bne.n	800d7da <_free_r+0x26>
 800d818:	681c      	ldr	r4, [r3, #0]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	6053      	str	r3, [r2, #4]
 800d81e:	440c      	add	r4, r1
 800d820:	6014      	str	r4, [r2, #0]
 800d822:	e7da      	b.n	800d7da <_free_r+0x26>
 800d824:	d902      	bls.n	800d82c <_free_r+0x78>
 800d826:	230c      	movs	r3, #12
 800d828:	6003      	str	r3, [r0, #0]
 800d82a:	e7d6      	b.n	800d7da <_free_r+0x26>
 800d82c:	6825      	ldr	r5, [r4, #0]
 800d82e:	1961      	adds	r1, r4, r5
 800d830:	428b      	cmp	r3, r1
 800d832:	bf04      	itt	eq
 800d834:	6819      	ldreq	r1, [r3, #0]
 800d836:	685b      	ldreq	r3, [r3, #4]
 800d838:	6063      	str	r3, [r4, #4]
 800d83a:	bf04      	itt	eq
 800d83c:	1949      	addeq	r1, r1, r5
 800d83e:	6021      	streq	r1, [r4, #0]
 800d840:	6054      	str	r4, [r2, #4]
 800d842:	e7ca      	b.n	800d7da <_free_r+0x26>
 800d844:	b003      	add	sp, #12
 800d846:	bd30      	pop	{r4, r5, pc}
 800d848:	20000a38 	.word	0x20000a38

0800d84c <_Balloc>:
 800d84c:	b570      	push	{r4, r5, r6, lr}
 800d84e:	69c6      	ldr	r6, [r0, #28]
 800d850:	4604      	mov	r4, r0
 800d852:	460d      	mov	r5, r1
 800d854:	b976      	cbnz	r6, 800d874 <_Balloc+0x28>
 800d856:	2010      	movs	r0, #16
 800d858:	f7fe f95e 	bl	800bb18 <malloc>
 800d85c:	4602      	mov	r2, r0
 800d85e:	61e0      	str	r0, [r4, #28]
 800d860:	b920      	cbnz	r0, 800d86c <_Balloc+0x20>
 800d862:	4b18      	ldr	r3, [pc, #96]	; (800d8c4 <_Balloc+0x78>)
 800d864:	4818      	ldr	r0, [pc, #96]	; (800d8c8 <_Balloc+0x7c>)
 800d866:	216b      	movs	r1, #107	; 0x6b
 800d868:	f000 ff62 	bl	800e730 <__assert_func>
 800d86c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d870:	6006      	str	r6, [r0, #0]
 800d872:	60c6      	str	r6, [r0, #12]
 800d874:	69e6      	ldr	r6, [r4, #28]
 800d876:	68f3      	ldr	r3, [r6, #12]
 800d878:	b183      	cbz	r3, 800d89c <_Balloc+0x50>
 800d87a:	69e3      	ldr	r3, [r4, #28]
 800d87c:	68db      	ldr	r3, [r3, #12]
 800d87e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d882:	b9b8      	cbnz	r0, 800d8b4 <_Balloc+0x68>
 800d884:	2101      	movs	r1, #1
 800d886:	fa01 f605 	lsl.w	r6, r1, r5
 800d88a:	1d72      	adds	r2, r6, #5
 800d88c:	0092      	lsls	r2, r2, #2
 800d88e:	4620      	mov	r0, r4
 800d890:	f000 ff6c 	bl	800e76c <_calloc_r>
 800d894:	b160      	cbz	r0, 800d8b0 <_Balloc+0x64>
 800d896:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d89a:	e00e      	b.n	800d8ba <_Balloc+0x6e>
 800d89c:	2221      	movs	r2, #33	; 0x21
 800d89e:	2104      	movs	r1, #4
 800d8a0:	4620      	mov	r0, r4
 800d8a2:	f000 ff63 	bl	800e76c <_calloc_r>
 800d8a6:	69e3      	ldr	r3, [r4, #28]
 800d8a8:	60f0      	str	r0, [r6, #12]
 800d8aa:	68db      	ldr	r3, [r3, #12]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d1e4      	bne.n	800d87a <_Balloc+0x2e>
 800d8b0:	2000      	movs	r0, #0
 800d8b2:	bd70      	pop	{r4, r5, r6, pc}
 800d8b4:	6802      	ldr	r2, [r0, #0]
 800d8b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d8c0:	e7f7      	b.n	800d8b2 <_Balloc+0x66>
 800d8c2:	bf00      	nop
 800d8c4:	08012a2d 	.word	0x08012a2d
 800d8c8:	08012aad 	.word	0x08012aad

0800d8cc <_Bfree>:
 800d8cc:	b570      	push	{r4, r5, r6, lr}
 800d8ce:	69c6      	ldr	r6, [r0, #28]
 800d8d0:	4605      	mov	r5, r0
 800d8d2:	460c      	mov	r4, r1
 800d8d4:	b976      	cbnz	r6, 800d8f4 <_Bfree+0x28>
 800d8d6:	2010      	movs	r0, #16
 800d8d8:	f7fe f91e 	bl	800bb18 <malloc>
 800d8dc:	4602      	mov	r2, r0
 800d8de:	61e8      	str	r0, [r5, #28]
 800d8e0:	b920      	cbnz	r0, 800d8ec <_Bfree+0x20>
 800d8e2:	4b09      	ldr	r3, [pc, #36]	; (800d908 <_Bfree+0x3c>)
 800d8e4:	4809      	ldr	r0, [pc, #36]	; (800d90c <_Bfree+0x40>)
 800d8e6:	218f      	movs	r1, #143	; 0x8f
 800d8e8:	f000 ff22 	bl	800e730 <__assert_func>
 800d8ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8f0:	6006      	str	r6, [r0, #0]
 800d8f2:	60c6      	str	r6, [r0, #12]
 800d8f4:	b13c      	cbz	r4, 800d906 <_Bfree+0x3a>
 800d8f6:	69eb      	ldr	r3, [r5, #28]
 800d8f8:	6862      	ldr	r2, [r4, #4]
 800d8fa:	68db      	ldr	r3, [r3, #12]
 800d8fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d900:	6021      	str	r1, [r4, #0]
 800d902:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d906:	bd70      	pop	{r4, r5, r6, pc}
 800d908:	08012a2d 	.word	0x08012a2d
 800d90c:	08012aad 	.word	0x08012aad

0800d910 <__multadd>:
 800d910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d914:	690d      	ldr	r5, [r1, #16]
 800d916:	4607      	mov	r7, r0
 800d918:	460c      	mov	r4, r1
 800d91a:	461e      	mov	r6, r3
 800d91c:	f101 0c14 	add.w	ip, r1, #20
 800d920:	2000      	movs	r0, #0
 800d922:	f8dc 3000 	ldr.w	r3, [ip]
 800d926:	b299      	uxth	r1, r3
 800d928:	fb02 6101 	mla	r1, r2, r1, r6
 800d92c:	0c1e      	lsrs	r6, r3, #16
 800d92e:	0c0b      	lsrs	r3, r1, #16
 800d930:	fb02 3306 	mla	r3, r2, r6, r3
 800d934:	b289      	uxth	r1, r1
 800d936:	3001      	adds	r0, #1
 800d938:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d93c:	4285      	cmp	r5, r0
 800d93e:	f84c 1b04 	str.w	r1, [ip], #4
 800d942:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d946:	dcec      	bgt.n	800d922 <__multadd+0x12>
 800d948:	b30e      	cbz	r6, 800d98e <__multadd+0x7e>
 800d94a:	68a3      	ldr	r3, [r4, #8]
 800d94c:	42ab      	cmp	r3, r5
 800d94e:	dc19      	bgt.n	800d984 <__multadd+0x74>
 800d950:	6861      	ldr	r1, [r4, #4]
 800d952:	4638      	mov	r0, r7
 800d954:	3101      	adds	r1, #1
 800d956:	f7ff ff79 	bl	800d84c <_Balloc>
 800d95a:	4680      	mov	r8, r0
 800d95c:	b928      	cbnz	r0, 800d96a <__multadd+0x5a>
 800d95e:	4602      	mov	r2, r0
 800d960:	4b0c      	ldr	r3, [pc, #48]	; (800d994 <__multadd+0x84>)
 800d962:	480d      	ldr	r0, [pc, #52]	; (800d998 <__multadd+0x88>)
 800d964:	21ba      	movs	r1, #186	; 0xba
 800d966:	f000 fee3 	bl	800e730 <__assert_func>
 800d96a:	6922      	ldr	r2, [r4, #16]
 800d96c:	3202      	adds	r2, #2
 800d96e:	f104 010c 	add.w	r1, r4, #12
 800d972:	0092      	lsls	r2, r2, #2
 800d974:	300c      	adds	r0, #12
 800d976:	f000 fecd 	bl	800e714 <memcpy>
 800d97a:	4621      	mov	r1, r4
 800d97c:	4638      	mov	r0, r7
 800d97e:	f7ff ffa5 	bl	800d8cc <_Bfree>
 800d982:	4644      	mov	r4, r8
 800d984:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d988:	3501      	adds	r5, #1
 800d98a:	615e      	str	r6, [r3, #20]
 800d98c:	6125      	str	r5, [r4, #16]
 800d98e:	4620      	mov	r0, r4
 800d990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d994:	08012a9c 	.word	0x08012a9c
 800d998:	08012aad 	.word	0x08012aad

0800d99c <__hi0bits>:
 800d99c:	0c03      	lsrs	r3, r0, #16
 800d99e:	041b      	lsls	r3, r3, #16
 800d9a0:	b9d3      	cbnz	r3, 800d9d8 <__hi0bits+0x3c>
 800d9a2:	0400      	lsls	r0, r0, #16
 800d9a4:	2310      	movs	r3, #16
 800d9a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d9aa:	bf04      	itt	eq
 800d9ac:	0200      	lsleq	r0, r0, #8
 800d9ae:	3308      	addeq	r3, #8
 800d9b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d9b4:	bf04      	itt	eq
 800d9b6:	0100      	lsleq	r0, r0, #4
 800d9b8:	3304      	addeq	r3, #4
 800d9ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d9be:	bf04      	itt	eq
 800d9c0:	0080      	lsleq	r0, r0, #2
 800d9c2:	3302      	addeq	r3, #2
 800d9c4:	2800      	cmp	r0, #0
 800d9c6:	db05      	blt.n	800d9d4 <__hi0bits+0x38>
 800d9c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d9cc:	f103 0301 	add.w	r3, r3, #1
 800d9d0:	bf08      	it	eq
 800d9d2:	2320      	moveq	r3, #32
 800d9d4:	4618      	mov	r0, r3
 800d9d6:	4770      	bx	lr
 800d9d8:	2300      	movs	r3, #0
 800d9da:	e7e4      	b.n	800d9a6 <__hi0bits+0xa>

0800d9dc <__lo0bits>:
 800d9dc:	6803      	ldr	r3, [r0, #0]
 800d9de:	f013 0207 	ands.w	r2, r3, #7
 800d9e2:	d00c      	beq.n	800d9fe <__lo0bits+0x22>
 800d9e4:	07d9      	lsls	r1, r3, #31
 800d9e6:	d422      	bmi.n	800da2e <__lo0bits+0x52>
 800d9e8:	079a      	lsls	r2, r3, #30
 800d9ea:	bf49      	itett	mi
 800d9ec:	085b      	lsrmi	r3, r3, #1
 800d9ee:	089b      	lsrpl	r3, r3, #2
 800d9f0:	6003      	strmi	r3, [r0, #0]
 800d9f2:	2201      	movmi	r2, #1
 800d9f4:	bf5c      	itt	pl
 800d9f6:	6003      	strpl	r3, [r0, #0]
 800d9f8:	2202      	movpl	r2, #2
 800d9fa:	4610      	mov	r0, r2
 800d9fc:	4770      	bx	lr
 800d9fe:	b299      	uxth	r1, r3
 800da00:	b909      	cbnz	r1, 800da06 <__lo0bits+0x2a>
 800da02:	0c1b      	lsrs	r3, r3, #16
 800da04:	2210      	movs	r2, #16
 800da06:	b2d9      	uxtb	r1, r3
 800da08:	b909      	cbnz	r1, 800da0e <__lo0bits+0x32>
 800da0a:	3208      	adds	r2, #8
 800da0c:	0a1b      	lsrs	r3, r3, #8
 800da0e:	0719      	lsls	r1, r3, #28
 800da10:	bf04      	itt	eq
 800da12:	091b      	lsreq	r3, r3, #4
 800da14:	3204      	addeq	r2, #4
 800da16:	0799      	lsls	r1, r3, #30
 800da18:	bf04      	itt	eq
 800da1a:	089b      	lsreq	r3, r3, #2
 800da1c:	3202      	addeq	r2, #2
 800da1e:	07d9      	lsls	r1, r3, #31
 800da20:	d403      	bmi.n	800da2a <__lo0bits+0x4e>
 800da22:	085b      	lsrs	r3, r3, #1
 800da24:	f102 0201 	add.w	r2, r2, #1
 800da28:	d003      	beq.n	800da32 <__lo0bits+0x56>
 800da2a:	6003      	str	r3, [r0, #0]
 800da2c:	e7e5      	b.n	800d9fa <__lo0bits+0x1e>
 800da2e:	2200      	movs	r2, #0
 800da30:	e7e3      	b.n	800d9fa <__lo0bits+0x1e>
 800da32:	2220      	movs	r2, #32
 800da34:	e7e1      	b.n	800d9fa <__lo0bits+0x1e>
	...

0800da38 <__i2b>:
 800da38:	b510      	push	{r4, lr}
 800da3a:	460c      	mov	r4, r1
 800da3c:	2101      	movs	r1, #1
 800da3e:	f7ff ff05 	bl	800d84c <_Balloc>
 800da42:	4602      	mov	r2, r0
 800da44:	b928      	cbnz	r0, 800da52 <__i2b+0x1a>
 800da46:	4b05      	ldr	r3, [pc, #20]	; (800da5c <__i2b+0x24>)
 800da48:	4805      	ldr	r0, [pc, #20]	; (800da60 <__i2b+0x28>)
 800da4a:	f240 1145 	movw	r1, #325	; 0x145
 800da4e:	f000 fe6f 	bl	800e730 <__assert_func>
 800da52:	2301      	movs	r3, #1
 800da54:	6144      	str	r4, [r0, #20]
 800da56:	6103      	str	r3, [r0, #16]
 800da58:	bd10      	pop	{r4, pc}
 800da5a:	bf00      	nop
 800da5c:	08012a9c 	.word	0x08012a9c
 800da60:	08012aad 	.word	0x08012aad

0800da64 <__multiply>:
 800da64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da68:	4691      	mov	r9, r2
 800da6a:	690a      	ldr	r2, [r1, #16]
 800da6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da70:	429a      	cmp	r2, r3
 800da72:	bfb8      	it	lt
 800da74:	460b      	movlt	r3, r1
 800da76:	460c      	mov	r4, r1
 800da78:	bfbc      	itt	lt
 800da7a:	464c      	movlt	r4, r9
 800da7c:	4699      	movlt	r9, r3
 800da7e:	6927      	ldr	r7, [r4, #16]
 800da80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800da84:	68a3      	ldr	r3, [r4, #8]
 800da86:	6861      	ldr	r1, [r4, #4]
 800da88:	eb07 060a 	add.w	r6, r7, sl
 800da8c:	42b3      	cmp	r3, r6
 800da8e:	b085      	sub	sp, #20
 800da90:	bfb8      	it	lt
 800da92:	3101      	addlt	r1, #1
 800da94:	f7ff feda 	bl	800d84c <_Balloc>
 800da98:	b930      	cbnz	r0, 800daa8 <__multiply+0x44>
 800da9a:	4602      	mov	r2, r0
 800da9c:	4b44      	ldr	r3, [pc, #272]	; (800dbb0 <__multiply+0x14c>)
 800da9e:	4845      	ldr	r0, [pc, #276]	; (800dbb4 <__multiply+0x150>)
 800daa0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800daa4:	f000 fe44 	bl	800e730 <__assert_func>
 800daa8:	f100 0514 	add.w	r5, r0, #20
 800daac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dab0:	462b      	mov	r3, r5
 800dab2:	2200      	movs	r2, #0
 800dab4:	4543      	cmp	r3, r8
 800dab6:	d321      	bcc.n	800dafc <__multiply+0x98>
 800dab8:	f104 0314 	add.w	r3, r4, #20
 800dabc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dac0:	f109 0314 	add.w	r3, r9, #20
 800dac4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dac8:	9202      	str	r2, [sp, #8]
 800daca:	1b3a      	subs	r2, r7, r4
 800dacc:	3a15      	subs	r2, #21
 800dace:	f022 0203 	bic.w	r2, r2, #3
 800dad2:	3204      	adds	r2, #4
 800dad4:	f104 0115 	add.w	r1, r4, #21
 800dad8:	428f      	cmp	r7, r1
 800dada:	bf38      	it	cc
 800dadc:	2204      	movcc	r2, #4
 800dade:	9201      	str	r2, [sp, #4]
 800dae0:	9a02      	ldr	r2, [sp, #8]
 800dae2:	9303      	str	r3, [sp, #12]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d80c      	bhi.n	800db02 <__multiply+0x9e>
 800dae8:	2e00      	cmp	r6, #0
 800daea:	dd03      	ble.n	800daf4 <__multiply+0x90>
 800daec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d05b      	beq.n	800dbac <__multiply+0x148>
 800daf4:	6106      	str	r6, [r0, #16]
 800daf6:	b005      	add	sp, #20
 800daf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dafc:	f843 2b04 	str.w	r2, [r3], #4
 800db00:	e7d8      	b.n	800dab4 <__multiply+0x50>
 800db02:	f8b3 a000 	ldrh.w	sl, [r3]
 800db06:	f1ba 0f00 	cmp.w	sl, #0
 800db0a:	d024      	beq.n	800db56 <__multiply+0xf2>
 800db0c:	f104 0e14 	add.w	lr, r4, #20
 800db10:	46a9      	mov	r9, r5
 800db12:	f04f 0c00 	mov.w	ip, #0
 800db16:	f85e 2b04 	ldr.w	r2, [lr], #4
 800db1a:	f8d9 1000 	ldr.w	r1, [r9]
 800db1e:	fa1f fb82 	uxth.w	fp, r2
 800db22:	b289      	uxth	r1, r1
 800db24:	fb0a 110b 	mla	r1, sl, fp, r1
 800db28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800db2c:	f8d9 2000 	ldr.w	r2, [r9]
 800db30:	4461      	add	r1, ip
 800db32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db36:	fb0a c20b 	mla	r2, sl, fp, ip
 800db3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800db3e:	b289      	uxth	r1, r1
 800db40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800db44:	4577      	cmp	r7, lr
 800db46:	f849 1b04 	str.w	r1, [r9], #4
 800db4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db4e:	d8e2      	bhi.n	800db16 <__multiply+0xb2>
 800db50:	9a01      	ldr	r2, [sp, #4]
 800db52:	f845 c002 	str.w	ip, [r5, r2]
 800db56:	9a03      	ldr	r2, [sp, #12]
 800db58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800db5c:	3304      	adds	r3, #4
 800db5e:	f1b9 0f00 	cmp.w	r9, #0
 800db62:	d021      	beq.n	800dba8 <__multiply+0x144>
 800db64:	6829      	ldr	r1, [r5, #0]
 800db66:	f104 0c14 	add.w	ip, r4, #20
 800db6a:	46ae      	mov	lr, r5
 800db6c:	f04f 0a00 	mov.w	sl, #0
 800db70:	f8bc b000 	ldrh.w	fp, [ip]
 800db74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800db78:	fb09 220b 	mla	r2, r9, fp, r2
 800db7c:	4452      	add	r2, sl
 800db7e:	b289      	uxth	r1, r1
 800db80:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800db84:	f84e 1b04 	str.w	r1, [lr], #4
 800db88:	f85c 1b04 	ldr.w	r1, [ip], #4
 800db8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800db90:	f8be 1000 	ldrh.w	r1, [lr]
 800db94:	fb09 110a 	mla	r1, r9, sl, r1
 800db98:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800db9c:	4567      	cmp	r7, ip
 800db9e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dba2:	d8e5      	bhi.n	800db70 <__multiply+0x10c>
 800dba4:	9a01      	ldr	r2, [sp, #4]
 800dba6:	50a9      	str	r1, [r5, r2]
 800dba8:	3504      	adds	r5, #4
 800dbaa:	e799      	b.n	800dae0 <__multiply+0x7c>
 800dbac:	3e01      	subs	r6, #1
 800dbae:	e79b      	b.n	800dae8 <__multiply+0x84>
 800dbb0:	08012a9c 	.word	0x08012a9c
 800dbb4:	08012aad 	.word	0x08012aad

0800dbb8 <__pow5mult>:
 800dbb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbbc:	4615      	mov	r5, r2
 800dbbe:	f012 0203 	ands.w	r2, r2, #3
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	460f      	mov	r7, r1
 800dbc6:	d007      	beq.n	800dbd8 <__pow5mult+0x20>
 800dbc8:	4c25      	ldr	r4, [pc, #148]	; (800dc60 <__pow5mult+0xa8>)
 800dbca:	3a01      	subs	r2, #1
 800dbcc:	2300      	movs	r3, #0
 800dbce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dbd2:	f7ff fe9d 	bl	800d910 <__multadd>
 800dbd6:	4607      	mov	r7, r0
 800dbd8:	10ad      	asrs	r5, r5, #2
 800dbda:	d03d      	beq.n	800dc58 <__pow5mult+0xa0>
 800dbdc:	69f4      	ldr	r4, [r6, #28]
 800dbde:	b97c      	cbnz	r4, 800dc00 <__pow5mult+0x48>
 800dbe0:	2010      	movs	r0, #16
 800dbe2:	f7fd ff99 	bl	800bb18 <malloc>
 800dbe6:	4602      	mov	r2, r0
 800dbe8:	61f0      	str	r0, [r6, #28]
 800dbea:	b928      	cbnz	r0, 800dbf8 <__pow5mult+0x40>
 800dbec:	4b1d      	ldr	r3, [pc, #116]	; (800dc64 <__pow5mult+0xac>)
 800dbee:	481e      	ldr	r0, [pc, #120]	; (800dc68 <__pow5mult+0xb0>)
 800dbf0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800dbf4:	f000 fd9c 	bl	800e730 <__assert_func>
 800dbf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dbfc:	6004      	str	r4, [r0, #0]
 800dbfe:	60c4      	str	r4, [r0, #12]
 800dc00:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800dc04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dc08:	b94c      	cbnz	r4, 800dc1e <__pow5mult+0x66>
 800dc0a:	f240 2171 	movw	r1, #625	; 0x271
 800dc0e:	4630      	mov	r0, r6
 800dc10:	f7ff ff12 	bl	800da38 <__i2b>
 800dc14:	2300      	movs	r3, #0
 800dc16:	f8c8 0008 	str.w	r0, [r8, #8]
 800dc1a:	4604      	mov	r4, r0
 800dc1c:	6003      	str	r3, [r0, #0]
 800dc1e:	f04f 0900 	mov.w	r9, #0
 800dc22:	07eb      	lsls	r3, r5, #31
 800dc24:	d50a      	bpl.n	800dc3c <__pow5mult+0x84>
 800dc26:	4639      	mov	r1, r7
 800dc28:	4622      	mov	r2, r4
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	f7ff ff1a 	bl	800da64 <__multiply>
 800dc30:	4639      	mov	r1, r7
 800dc32:	4680      	mov	r8, r0
 800dc34:	4630      	mov	r0, r6
 800dc36:	f7ff fe49 	bl	800d8cc <_Bfree>
 800dc3a:	4647      	mov	r7, r8
 800dc3c:	106d      	asrs	r5, r5, #1
 800dc3e:	d00b      	beq.n	800dc58 <__pow5mult+0xa0>
 800dc40:	6820      	ldr	r0, [r4, #0]
 800dc42:	b938      	cbnz	r0, 800dc54 <__pow5mult+0x9c>
 800dc44:	4622      	mov	r2, r4
 800dc46:	4621      	mov	r1, r4
 800dc48:	4630      	mov	r0, r6
 800dc4a:	f7ff ff0b 	bl	800da64 <__multiply>
 800dc4e:	6020      	str	r0, [r4, #0]
 800dc50:	f8c0 9000 	str.w	r9, [r0]
 800dc54:	4604      	mov	r4, r0
 800dc56:	e7e4      	b.n	800dc22 <__pow5mult+0x6a>
 800dc58:	4638      	mov	r0, r7
 800dc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc5e:	bf00      	nop
 800dc60:	08012bf8 	.word	0x08012bf8
 800dc64:	08012a2d 	.word	0x08012a2d
 800dc68:	08012aad 	.word	0x08012aad

0800dc6c <__lshift>:
 800dc6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc70:	460c      	mov	r4, r1
 800dc72:	6849      	ldr	r1, [r1, #4]
 800dc74:	6923      	ldr	r3, [r4, #16]
 800dc76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc7a:	68a3      	ldr	r3, [r4, #8]
 800dc7c:	4607      	mov	r7, r0
 800dc7e:	4691      	mov	r9, r2
 800dc80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc84:	f108 0601 	add.w	r6, r8, #1
 800dc88:	42b3      	cmp	r3, r6
 800dc8a:	db0b      	blt.n	800dca4 <__lshift+0x38>
 800dc8c:	4638      	mov	r0, r7
 800dc8e:	f7ff fddd 	bl	800d84c <_Balloc>
 800dc92:	4605      	mov	r5, r0
 800dc94:	b948      	cbnz	r0, 800dcaa <__lshift+0x3e>
 800dc96:	4602      	mov	r2, r0
 800dc98:	4b28      	ldr	r3, [pc, #160]	; (800dd3c <__lshift+0xd0>)
 800dc9a:	4829      	ldr	r0, [pc, #164]	; (800dd40 <__lshift+0xd4>)
 800dc9c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800dca0:	f000 fd46 	bl	800e730 <__assert_func>
 800dca4:	3101      	adds	r1, #1
 800dca6:	005b      	lsls	r3, r3, #1
 800dca8:	e7ee      	b.n	800dc88 <__lshift+0x1c>
 800dcaa:	2300      	movs	r3, #0
 800dcac:	f100 0114 	add.w	r1, r0, #20
 800dcb0:	f100 0210 	add.w	r2, r0, #16
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	4553      	cmp	r3, sl
 800dcb8:	db33      	blt.n	800dd22 <__lshift+0xb6>
 800dcba:	6920      	ldr	r0, [r4, #16]
 800dcbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dcc0:	f104 0314 	add.w	r3, r4, #20
 800dcc4:	f019 091f 	ands.w	r9, r9, #31
 800dcc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dccc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dcd0:	d02b      	beq.n	800dd2a <__lshift+0xbe>
 800dcd2:	f1c9 0e20 	rsb	lr, r9, #32
 800dcd6:	468a      	mov	sl, r1
 800dcd8:	2200      	movs	r2, #0
 800dcda:	6818      	ldr	r0, [r3, #0]
 800dcdc:	fa00 f009 	lsl.w	r0, r0, r9
 800dce0:	4310      	orrs	r0, r2
 800dce2:	f84a 0b04 	str.w	r0, [sl], #4
 800dce6:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcea:	459c      	cmp	ip, r3
 800dcec:	fa22 f20e 	lsr.w	r2, r2, lr
 800dcf0:	d8f3      	bhi.n	800dcda <__lshift+0x6e>
 800dcf2:	ebac 0304 	sub.w	r3, ip, r4
 800dcf6:	3b15      	subs	r3, #21
 800dcf8:	f023 0303 	bic.w	r3, r3, #3
 800dcfc:	3304      	adds	r3, #4
 800dcfe:	f104 0015 	add.w	r0, r4, #21
 800dd02:	4584      	cmp	ip, r0
 800dd04:	bf38      	it	cc
 800dd06:	2304      	movcc	r3, #4
 800dd08:	50ca      	str	r2, [r1, r3]
 800dd0a:	b10a      	cbz	r2, 800dd10 <__lshift+0xa4>
 800dd0c:	f108 0602 	add.w	r6, r8, #2
 800dd10:	3e01      	subs	r6, #1
 800dd12:	4638      	mov	r0, r7
 800dd14:	612e      	str	r6, [r5, #16]
 800dd16:	4621      	mov	r1, r4
 800dd18:	f7ff fdd8 	bl	800d8cc <_Bfree>
 800dd1c:	4628      	mov	r0, r5
 800dd1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd22:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd26:	3301      	adds	r3, #1
 800dd28:	e7c5      	b.n	800dcb6 <__lshift+0x4a>
 800dd2a:	3904      	subs	r1, #4
 800dd2c:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd30:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd34:	459c      	cmp	ip, r3
 800dd36:	d8f9      	bhi.n	800dd2c <__lshift+0xc0>
 800dd38:	e7ea      	b.n	800dd10 <__lshift+0xa4>
 800dd3a:	bf00      	nop
 800dd3c:	08012a9c 	.word	0x08012a9c
 800dd40:	08012aad 	.word	0x08012aad

0800dd44 <__mcmp>:
 800dd44:	b530      	push	{r4, r5, lr}
 800dd46:	6902      	ldr	r2, [r0, #16]
 800dd48:	690c      	ldr	r4, [r1, #16]
 800dd4a:	1b12      	subs	r2, r2, r4
 800dd4c:	d10e      	bne.n	800dd6c <__mcmp+0x28>
 800dd4e:	f100 0314 	add.w	r3, r0, #20
 800dd52:	3114      	adds	r1, #20
 800dd54:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dd58:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dd5c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dd60:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dd64:	42a5      	cmp	r5, r4
 800dd66:	d003      	beq.n	800dd70 <__mcmp+0x2c>
 800dd68:	d305      	bcc.n	800dd76 <__mcmp+0x32>
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	bd30      	pop	{r4, r5, pc}
 800dd70:	4283      	cmp	r3, r0
 800dd72:	d3f3      	bcc.n	800dd5c <__mcmp+0x18>
 800dd74:	e7fa      	b.n	800dd6c <__mcmp+0x28>
 800dd76:	f04f 32ff 	mov.w	r2, #4294967295
 800dd7a:	e7f7      	b.n	800dd6c <__mcmp+0x28>

0800dd7c <__mdiff>:
 800dd7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd80:	460c      	mov	r4, r1
 800dd82:	4606      	mov	r6, r0
 800dd84:	4611      	mov	r1, r2
 800dd86:	4620      	mov	r0, r4
 800dd88:	4690      	mov	r8, r2
 800dd8a:	f7ff ffdb 	bl	800dd44 <__mcmp>
 800dd8e:	1e05      	subs	r5, r0, #0
 800dd90:	d110      	bne.n	800ddb4 <__mdiff+0x38>
 800dd92:	4629      	mov	r1, r5
 800dd94:	4630      	mov	r0, r6
 800dd96:	f7ff fd59 	bl	800d84c <_Balloc>
 800dd9a:	b930      	cbnz	r0, 800ddaa <__mdiff+0x2e>
 800dd9c:	4b3a      	ldr	r3, [pc, #232]	; (800de88 <__mdiff+0x10c>)
 800dd9e:	4602      	mov	r2, r0
 800dda0:	f240 2137 	movw	r1, #567	; 0x237
 800dda4:	4839      	ldr	r0, [pc, #228]	; (800de8c <__mdiff+0x110>)
 800dda6:	f000 fcc3 	bl	800e730 <__assert_func>
 800ddaa:	2301      	movs	r3, #1
 800ddac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ddb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddb4:	bfa4      	itt	ge
 800ddb6:	4643      	movge	r3, r8
 800ddb8:	46a0      	movge	r8, r4
 800ddba:	4630      	mov	r0, r6
 800ddbc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ddc0:	bfa6      	itte	ge
 800ddc2:	461c      	movge	r4, r3
 800ddc4:	2500      	movge	r5, #0
 800ddc6:	2501      	movlt	r5, #1
 800ddc8:	f7ff fd40 	bl	800d84c <_Balloc>
 800ddcc:	b920      	cbnz	r0, 800ddd8 <__mdiff+0x5c>
 800ddce:	4b2e      	ldr	r3, [pc, #184]	; (800de88 <__mdiff+0x10c>)
 800ddd0:	4602      	mov	r2, r0
 800ddd2:	f240 2145 	movw	r1, #581	; 0x245
 800ddd6:	e7e5      	b.n	800dda4 <__mdiff+0x28>
 800ddd8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dddc:	6926      	ldr	r6, [r4, #16]
 800ddde:	60c5      	str	r5, [r0, #12]
 800dde0:	f104 0914 	add.w	r9, r4, #20
 800dde4:	f108 0514 	add.w	r5, r8, #20
 800dde8:	f100 0e14 	add.w	lr, r0, #20
 800ddec:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ddf0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ddf4:	f108 0210 	add.w	r2, r8, #16
 800ddf8:	46f2      	mov	sl, lr
 800ddfa:	2100      	movs	r1, #0
 800ddfc:	f859 3b04 	ldr.w	r3, [r9], #4
 800de00:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800de04:	fa11 f88b 	uxtah	r8, r1, fp
 800de08:	b299      	uxth	r1, r3
 800de0a:	0c1b      	lsrs	r3, r3, #16
 800de0c:	eba8 0801 	sub.w	r8, r8, r1
 800de10:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800de14:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800de18:	fa1f f888 	uxth.w	r8, r8
 800de1c:	1419      	asrs	r1, r3, #16
 800de1e:	454e      	cmp	r6, r9
 800de20:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800de24:	f84a 3b04 	str.w	r3, [sl], #4
 800de28:	d8e8      	bhi.n	800ddfc <__mdiff+0x80>
 800de2a:	1b33      	subs	r3, r6, r4
 800de2c:	3b15      	subs	r3, #21
 800de2e:	f023 0303 	bic.w	r3, r3, #3
 800de32:	3304      	adds	r3, #4
 800de34:	3415      	adds	r4, #21
 800de36:	42a6      	cmp	r6, r4
 800de38:	bf38      	it	cc
 800de3a:	2304      	movcc	r3, #4
 800de3c:	441d      	add	r5, r3
 800de3e:	4473      	add	r3, lr
 800de40:	469e      	mov	lr, r3
 800de42:	462e      	mov	r6, r5
 800de44:	4566      	cmp	r6, ip
 800de46:	d30e      	bcc.n	800de66 <__mdiff+0xea>
 800de48:	f10c 0203 	add.w	r2, ip, #3
 800de4c:	1b52      	subs	r2, r2, r5
 800de4e:	f022 0203 	bic.w	r2, r2, #3
 800de52:	3d03      	subs	r5, #3
 800de54:	45ac      	cmp	ip, r5
 800de56:	bf38      	it	cc
 800de58:	2200      	movcc	r2, #0
 800de5a:	4413      	add	r3, r2
 800de5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800de60:	b17a      	cbz	r2, 800de82 <__mdiff+0x106>
 800de62:	6107      	str	r7, [r0, #16]
 800de64:	e7a4      	b.n	800ddb0 <__mdiff+0x34>
 800de66:	f856 8b04 	ldr.w	r8, [r6], #4
 800de6a:	fa11 f288 	uxtah	r2, r1, r8
 800de6e:	1414      	asrs	r4, r2, #16
 800de70:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800de74:	b292      	uxth	r2, r2
 800de76:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800de7a:	f84e 2b04 	str.w	r2, [lr], #4
 800de7e:	1421      	asrs	r1, r4, #16
 800de80:	e7e0      	b.n	800de44 <__mdiff+0xc8>
 800de82:	3f01      	subs	r7, #1
 800de84:	e7ea      	b.n	800de5c <__mdiff+0xe0>
 800de86:	bf00      	nop
 800de88:	08012a9c 	.word	0x08012a9c
 800de8c:	08012aad 	.word	0x08012aad

0800de90 <__d2b>:
 800de90:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de94:	460f      	mov	r7, r1
 800de96:	2101      	movs	r1, #1
 800de98:	ec59 8b10 	vmov	r8, r9, d0
 800de9c:	4616      	mov	r6, r2
 800de9e:	f7ff fcd5 	bl	800d84c <_Balloc>
 800dea2:	4604      	mov	r4, r0
 800dea4:	b930      	cbnz	r0, 800deb4 <__d2b+0x24>
 800dea6:	4602      	mov	r2, r0
 800dea8:	4b24      	ldr	r3, [pc, #144]	; (800df3c <__d2b+0xac>)
 800deaa:	4825      	ldr	r0, [pc, #148]	; (800df40 <__d2b+0xb0>)
 800deac:	f240 310f 	movw	r1, #783	; 0x30f
 800deb0:	f000 fc3e 	bl	800e730 <__assert_func>
 800deb4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800deb8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800debc:	bb2d      	cbnz	r5, 800df0a <__d2b+0x7a>
 800debe:	9301      	str	r3, [sp, #4]
 800dec0:	f1b8 0300 	subs.w	r3, r8, #0
 800dec4:	d026      	beq.n	800df14 <__d2b+0x84>
 800dec6:	4668      	mov	r0, sp
 800dec8:	9300      	str	r3, [sp, #0]
 800deca:	f7ff fd87 	bl	800d9dc <__lo0bits>
 800dece:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ded2:	b1e8      	cbz	r0, 800df10 <__d2b+0x80>
 800ded4:	f1c0 0320 	rsb	r3, r0, #32
 800ded8:	fa02 f303 	lsl.w	r3, r2, r3
 800dedc:	430b      	orrs	r3, r1
 800dede:	40c2      	lsrs	r2, r0
 800dee0:	6163      	str	r3, [r4, #20]
 800dee2:	9201      	str	r2, [sp, #4]
 800dee4:	9b01      	ldr	r3, [sp, #4]
 800dee6:	61a3      	str	r3, [r4, #24]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	bf14      	ite	ne
 800deec:	2202      	movne	r2, #2
 800deee:	2201      	moveq	r2, #1
 800def0:	6122      	str	r2, [r4, #16]
 800def2:	b1bd      	cbz	r5, 800df24 <__d2b+0x94>
 800def4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800def8:	4405      	add	r5, r0
 800defa:	603d      	str	r5, [r7, #0]
 800defc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800df00:	6030      	str	r0, [r6, #0]
 800df02:	4620      	mov	r0, r4
 800df04:	b003      	add	sp, #12
 800df06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df0e:	e7d6      	b.n	800debe <__d2b+0x2e>
 800df10:	6161      	str	r1, [r4, #20]
 800df12:	e7e7      	b.n	800dee4 <__d2b+0x54>
 800df14:	a801      	add	r0, sp, #4
 800df16:	f7ff fd61 	bl	800d9dc <__lo0bits>
 800df1a:	9b01      	ldr	r3, [sp, #4]
 800df1c:	6163      	str	r3, [r4, #20]
 800df1e:	3020      	adds	r0, #32
 800df20:	2201      	movs	r2, #1
 800df22:	e7e5      	b.n	800def0 <__d2b+0x60>
 800df24:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df28:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df2c:	6038      	str	r0, [r7, #0]
 800df2e:	6918      	ldr	r0, [r3, #16]
 800df30:	f7ff fd34 	bl	800d99c <__hi0bits>
 800df34:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df38:	e7e2      	b.n	800df00 <__d2b+0x70>
 800df3a:	bf00      	nop
 800df3c:	08012a9c 	.word	0x08012a9c
 800df40:	08012aad 	.word	0x08012aad

0800df44 <__ssputs_r>:
 800df44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df48:	688e      	ldr	r6, [r1, #8]
 800df4a:	461f      	mov	r7, r3
 800df4c:	42be      	cmp	r6, r7
 800df4e:	680b      	ldr	r3, [r1, #0]
 800df50:	4682      	mov	sl, r0
 800df52:	460c      	mov	r4, r1
 800df54:	4690      	mov	r8, r2
 800df56:	d82c      	bhi.n	800dfb2 <__ssputs_r+0x6e>
 800df58:	898a      	ldrh	r2, [r1, #12]
 800df5a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df5e:	d026      	beq.n	800dfae <__ssputs_r+0x6a>
 800df60:	6965      	ldr	r5, [r4, #20]
 800df62:	6909      	ldr	r1, [r1, #16]
 800df64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df68:	eba3 0901 	sub.w	r9, r3, r1
 800df6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800df70:	1c7b      	adds	r3, r7, #1
 800df72:	444b      	add	r3, r9
 800df74:	106d      	asrs	r5, r5, #1
 800df76:	429d      	cmp	r5, r3
 800df78:	bf38      	it	cc
 800df7a:	461d      	movcc	r5, r3
 800df7c:	0553      	lsls	r3, r2, #21
 800df7e:	d527      	bpl.n	800dfd0 <__ssputs_r+0x8c>
 800df80:	4629      	mov	r1, r5
 800df82:	f7fd fdf1 	bl	800bb68 <_malloc_r>
 800df86:	4606      	mov	r6, r0
 800df88:	b360      	cbz	r0, 800dfe4 <__ssputs_r+0xa0>
 800df8a:	6921      	ldr	r1, [r4, #16]
 800df8c:	464a      	mov	r2, r9
 800df8e:	f000 fbc1 	bl	800e714 <memcpy>
 800df92:	89a3      	ldrh	r3, [r4, #12]
 800df94:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df9c:	81a3      	strh	r3, [r4, #12]
 800df9e:	6126      	str	r6, [r4, #16]
 800dfa0:	6165      	str	r5, [r4, #20]
 800dfa2:	444e      	add	r6, r9
 800dfa4:	eba5 0509 	sub.w	r5, r5, r9
 800dfa8:	6026      	str	r6, [r4, #0]
 800dfaa:	60a5      	str	r5, [r4, #8]
 800dfac:	463e      	mov	r6, r7
 800dfae:	42be      	cmp	r6, r7
 800dfb0:	d900      	bls.n	800dfb4 <__ssputs_r+0x70>
 800dfb2:	463e      	mov	r6, r7
 800dfb4:	6820      	ldr	r0, [r4, #0]
 800dfb6:	4632      	mov	r2, r6
 800dfb8:	4641      	mov	r1, r8
 800dfba:	f000 fb6f 	bl	800e69c <memmove>
 800dfbe:	68a3      	ldr	r3, [r4, #8]
 800dfc0:	1b9b      	subs	r3, r3, r6
 800dfc2:	60a3      	str	r3, [r4, #8]
 800dfc4:	6823      	ldr	r3, [r4, #0]
 800dfc6:	4433      	add	r3, r6
 800dfc8:	6023      	str	r3, [r4, #0]
 800dfca:	2000      	movs	r0, #0
 800dfcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfd0:	462a      	mov	r2, r5
 800dfd2:	f000 fbf3 	bl	800e7bc <_realloc_r>
 800dfd6:	4606      	mov	r6, r0
 800dfd8:	2800      	cmp	r0, #0
 800dfda:	d1e0      	bne.n	800df9e <__ssputs_r+0x5a>
 800dfdc:	6921      	ldr	r1, [r4, #16]
 800dfde:	4650      	mov	r0, sl
 800dfe0:	f7ff fbe8 	bl	800d7b4 <_free_r>
 800dfe4:	230c      	movs	r3, #12
 800dfe6:	f8ca 3000 	str.w	r3, [sl]
 800dfea:	89a3      	ldrh	r3, [r4, #12]
 800dfec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dff0:	81a3      	strh	r3, [r4, #12]
 800dff2:	f04f 30ff 	mov.w	r0, #4294967295
 800dff6:	e7e9      	b.n	800dfcc <__ssputs_r+0x88>

0800dff8 <_svfiprintf_r>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	4698      	mov	r8, r3
 800dffe:	898b      	ldrh	r3, [r1, #12]
 800e000:	061b      	lsls	r3, r3, #24
 800e002:	b09d      	sub	sp, #116	; 0x74
 800e004:	4607      	mov	r7, r0
 800e006:	460d      	mov	r5, r1
 800e008:	4614      	mov	r4, r2
 800e00a:	d50e      	bpl.n	800e02a <_svfiprintf_r+0x32>
 800e00c:	690b      	ldr	r3, [r1, #16]
 800e00e:	b963      	cbnz	r3, 800e02a <_svfiprintf_r+0x32>
 800e010:	2140      	movs	r1, #64	; 0x40
 800e012:	f7fd fda9 	bl	800bb68 <_malloc_r>
 800e016:	6028      	str	r0, [r5, #0]
 800e018:	6128      	str	r0, [r5, #16]
 800e01a:	b920      	cbnz	r0, 800e026 <_svfiprintf_r+0x2e>
 800e01c:	230c      	movs	r3, #12
 800e01e:	603b      	str	r3, [r7, #0]
 800e020:	f04f 30ff 	mov.w	r0, #4294967295
 800e024:	e0d0      	b.n	800e1c8 <_svfiprintf_r+0x1d0>
 800e026:	2340      	movs	r3, #64	; 0x40
 800e028:	616b      	str	r3, [r5, #20]
 800e02a:	2300      	movs	r3, #0
 800e02c:	9309      	str	r3, [sp, #36]	; 0x24
 800e02e:	2320      	movs	r3, #32
 800e030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e034:	f8cd 800c 	str.w	r8, [sp, #12]
 800e038:	2330      	movs	r3, #48	; 0x30
 800e03a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e1e0 <_svfiprintf_r+0x1e8>
 800e03e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e042:	f04f 0901 	mov.w	r9, #1
 800e046:	4623      	mov	r3, r4
 800e048:	469a      	mov	sl, r3
 800e04a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e04e:	b10a      	cbz	r2, 800e054 <_svfiprintf_r+0x5c>
 800e050:	2a25      	cmp	r2, #37	; 0x25
 800e052:	d1f9      	bne.n	800e048 <_svfiprintf_r+0x50>
 800e054:	ebba 0b04 	subs.w	fp, sl, r4
 800e058:	d00b      	beq.n	800e072 <_svfiprintf_r+0x7a>
 800e05a:	465b      	mov	r3, fp
 800e05c:	4622      	mov	r2, r4
 800e05e:	4629      	mov	r1, r5
 800e060:	4638      	mov	r0, r7
 800e062:	f7ff ff6f 	bl	800df44 <__ssputs_r>
 800e066:	3001      	adds	r0, #1
 800e068:	f000 80a9 	beq.w	800e1be <_svfiprintf_r+0x1c6>
 800e06c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e06e:	445a      	add	r2, fp
 800e070:	9209      	str	r2, [sp, #36]	; 0x24
 800e072:	f89a 3000 	ldrb.w	r3, [sl]
 800e076:	2b00      	cmp	r3, #0
 800e078:	f000 80a1 	beq.w	800e1be <_svfiprintf_r+0x1c6>
 800e07c:	2300      	movs	r3, #0
 800e07e:	f04f 32ff 	mov.w	r2, #4294967295
 800e082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e086:	f10a 0a01 	add.w	sl, sl, #1
 800e08a:	9304      	str	r3, [sp, #16]
 800e08c:	9307      	str	r3, [sp, #28]
 800e08e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e092:	931a      	str	r3, [sp, #104]	; 0x68
 800e094:	4654      	mov	r4, sl
 800e096:	2205      	movs	r2, #5
 800e098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e09c:	4850      	ldr	r0, [pc, #320]	; (800e1e0 <_svfiprintf_r+0x1e8>)
 800e09e:	f7f2 f8bf 	bl	8000220 <memchr>
 800e0a2:	9a04      	ldr	r2, [sp, #16]
 800e0a4:	b9d8      	cbnz	r0, 800e0de <_svfiprintf_r+0xe6>
 800e0a6:	06d0      	lsls	r0, r2, #27
 800e0a8:	bf44      	itt	mi
 800e0aa:	2320      	movmi	r3, #32
 800e0ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0b0:	0711      	lsls	r1, r2, #28
 800e0b2:	bf44      	itt	mi
 800e0b4:	232b      	movmi	r3, #43	; 0x2b
 800e0b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e0ba:	f89a 3000 	ldrb.w	r3, [sl]
 800e0be:	2b2a      	cmp	r3, #42	; 0x2a
 800e0c0:	d015      	beq.n	800e0ee <_svfiprintf_r+0xf6>
 800e0c2:	9a07      	ldr	r2, [sp, #28]
 800e0c4:	4654      	mov	r4, sl
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	f04f 0c0a 	mov.w	ip, #10
 800e0cc:	4621      	mov	r1, r4
 800e0ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e0d2:	3b30      	subs	r3, #48	; 0x30
 800e0d4:	2b09      	cmp	r3, #9
 800e0d6:	d94d      	bls.n	800e174 <_svfiprintf_r+0x17c>
 800e0d8:	b1b0      	cbz	r0, 800e108 <_svfiprintf_r+0x110>
 800e0da:	9207      	str	r2, [sp, #28]
 800e0dc:	e014      	b.n	800e108 <_svfiprintf_r+0x110>
 800e0de:	eba0 0308 	sub.w	r3, r0, r8
 800e0e2:	fa09 f303 	lsl.w	r3, r9, r3
 800e0e6:	4313      	orrs	r3, r2
 800e0e8:	9304      	str	r3, [sp, #16]
 800e0ea:	46a2      	mov	sl, r4
 800e0ec:	e7d2      	b.n	800e094 <_svfiprintf_r+0x9c>
 800e0ee:	9b03      	ldr	r3, [sp, #12]
 800e0f0:	1d19      	adds	r1, r3, #4
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	9103      	str	r1, [sp, #12]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	bfbb      	ittet	lt
 800e0fa:	425b      	neglt	r3, r3
 800e0fc:	f042 0202 	orrlt.w	r2, r2, #2
 800e100:	9307      	strge	r3, [sp, #28]
 800e102:	9307      	strlt	r3, [sp, #28]
 800e104:	bfb8      	it	lt
 800e106:	9204      	strlt	r2, [sp, #16]
 800e108:	7823      	ldrb	r3, [r4, #0]
 800e10a:	2b2e      	cmp	r3, #46	; 0x2e
 800e10c:	d10c      	bne.n	800e128 <_svfiprintf_r+0x130>
 800e10e:	7863      	ldrb	r3, [r4, #1]
 800e110:	2b2a      	cmp	r3, #42	; 0x2a
 800e112:	d134      	bne.n	800e17e <_svfiprintf_r+0x186>
 800e114:	9b03      	ldr	r3, [sp, #12]
 800e116:	1d1a      	adds	r2, r3, #4
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	9203      	str	r2, [sp, #12]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	bfb8      	it	lt
 800e120:	f04f 33ff 	movlt.w	r3, #4294967295
 800e124:	3402      	adds	r4, #2
 800e126:	9305      	str	r3, [sp, #20]
 800e128:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e1f0 <_svfiprintf_r+0x1f8>
 800e12c:	7821      	ldrb	r1, [r4, #0]
 800e12e:	2203      	movs	r2, #3
 800e130:	4650      	mov	r0, sl
 800e132:	f7f2 f875 	bl	8000220 <memchr>
 800e136:	b138      	cbz	r0, 800e148 <_svfiprintf_r+0x150>
 800e138:	9b04      	ldr	r3, [sp, #16]
 800e13a:	eba0 000a 	sub.w	r0, r0, sl
 800e13e:	2240      	movs	r2, #64	; 0x40
 800e140:	4082      	lsls	r2, r0
 800e142:	4313      	orrs	r3, r2
 800e144:	3401      	adds	r4, #1
 800e146:	9304      	str	r3, [sp, #16]
 800e148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e14c:	4825      	ldr	r0, [pc, #148]	; (800e1e4 <_svfiprintf_r+0x1ec>)
 800e14e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e152:	2206      	movs	r2, #6
 800e154:	f7f2 f864 	bl	8000220 <memchr>
 800e158:	2800      	cmp	r0, #0
 800e15a:	d038      	beq.n	800e1ce <_svfiprintf_r+0x1d6>
 800e15c:	4b22      	ldr	r3, [pc, #136]	; (800e1e8 <_svfiprintf_r+0x1f0>)
 800e15e:	bb1b      	cbnz	r3, 800e1a8 <_svfiprintf_r+0x1b0>
 800e160:	9b03      	ldr	r3, [sp, #12]
 800e162:	3307      	adds	r3, #7
 800e164:	f023 0307 	bic.w	r3, r3, #7
 800e168:	3308      	adds	r3, #8
 800e16a:	9303      	str	r3, [sp, #12]
 800e16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e16e:	4433      	add	r3, r6
 800e170:	9309      	str	r3, [sp, #36]	; 0x24
 800e172:	e768      	b.n	800e046 <_svfiprintf_r+0x4e>
 800e174:	fb0c 3202 	mla	r2, ip, r2, r3
 800e178:	460c      	mov	r4, r1
 800e17a:	2001      	movs	r0, #1
 800e17c:	e7a6      	b.n	800e0cc <_svfiprintf_r+0xd4>
 800e17e:	2300      	movs	r3, #0
 800e180:	3401      	adds	r4, #1
 800e182:	9305      	str	r3, [sp, #20]
 800e184:	4619      	mov	r1, r3
 800e186:	f04f 0c0a 	mov.w	ip, #10
 800e18a:	4620      	mov	r0, r4
 800e18c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e190:	3a30      	subs	r2, #48	; 0x30
 800e192:	2a09      	cmp	r2, #9
 800e194:	d903      	bls.n	800e19e <_svfiprintf_r+0x1a6>
 800e196:	2b00      	cmp	r3, #0
 800e198:	d0c6      	beq.n	800e128 <_svfiprintf_r+0x130>
 800e19a:	9105      	str	r1, [sp, #20]
 800e19c:	e7c4      	b.n	800e128 <_svfiprintf_r+0x130>
 800e19e:	fb0c 2101 	mla	r1, ip, r1, r2
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	2301      	movs	r3, #1
 800e1a6:	e7f0      	b.n	800e18a <_svfiprintf_r+0x192>
 800e1a8:	ab03      	add	r3, sp, #12
 800e1aa:	9300      	str	r3, [sp, #0]
 800e1ac:	462a      	mov	r2, r5
 800e1ae:	4b0f      	ldr	r3, [pc, #60]	; (800e1ec <_svfiprintf_r+0x1f4>)
 800e1b0:	a904      	add	r1, sp, #16
 800e1b2:	4638      	mov	r0, r7
 800e1b4:	f7fd fe04 	bl	800bdc0 <_printf_float>
 800e1b8:	1c42      	adds	r2, r0, #1
 800e1ba:	4606      	mov	r6, r0
 800e1bc:	d1d6      	bne.n	800e16c <_svfiprintf_r+0x174>
 800e1be:	89ab      	ldrh	r3, [r5, #12]
 800e1c0:	065b      	lsls	r3, r3, #25
 800e1c2:	f53f af2d 	bmi.w	800e020 <_svfiprintf_r+0x28>
 800e1c6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e1c8:	b01d      	add	sp, #116	; 0x74
 800e1ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ce:	ab03      	add	r3, sp, #12
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	462a      	mov	r2, r5
 800e1d4:	4b05      	ldr	r3, [pc, #20]	; (800e1ec <_svfiprintf_r+0x1f4>)
 800e1d6:	a904      	add	r1, sp, #16
 800e1d8:	4638      	mov	r0, r7
 800e1da:	f7fe f895 	bl	800c308 <_printf_i>
 800e1de:	e7eb      	b.n	800e1b8 <_svfiprintf_r+0x1c0>
 800e1e0:	08012c04 	.word	0x08012c04
 800e1e4:	08012c0e 	.word	0x08012c0e
 800e1e8:	0800bdc1 	.word	0x0800bdc1
 800e1ec:	0800df45 	.word	0x0800df45
 800e1f0:	08012c0a 	.word	0x08012c0a

0800e1f4 <__sfputc_r>:
 800e1f4:	6893      	ldr	r3, [r2, #8]
 800e1f6:	3b01      	subs	r3, #1
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	b410      	push	{r4}
 800e1fc:	6093      	str	r3, [r2, #8]
 800e1fe:	da08      	bge.n	800e212 <__sfputc_r+0x1e>
 800e200:	6994      	ldr	r4, [r2, #24]
 800e202:	42a3      	cmp	r3, r4
 800e204:	db01      	blt.n	800e20a <__sfputc_r+0x16>
 800e206:	290a      	cmp	r1, #10
 800e208:	d103      	bne.n	800e212 <__sfputc_r+0x1e>
 800e20a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e20e:	f7fe bb30 	b.w	800c872 <__swbuf_r>
 800e212:	6813      	ldr	r3, [r2, #0]
 800e214:	1c58      	adds	r0, r3, #1
 800e216:	6010      	str	r0, [r2, #0]
 800e218:	7019      	strb	r1, [r3, #0]
 800e21a:	4608      	mov	r0, r1
 800e21c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e220:	4770      	bx	lr

0800e222 <__sfputs_r>:
 800e222:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e224:	4606      	mov	r6, r0
 800e226:	460f      	mov	r7, r1
 800e228:	4614      	mov	r4, r2
 800e22a:	18d5      	adds	r5, r2, r3
 800e22c:	42ac      	cmp	r4, r5
 800e22e:	d101      	bne.n	800e234 <__sfputs_r+0x12>
 800e230:	2000      	movs	r0, #0
 800e232:	e007      	b.n	800e244 <__sfputs_r+0x22>
 800e234:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e238:	463a      	mov	r2, r7
 800e23a:	4630      	mov	r0, r6
 800e23c:	f7ff ffda 	bl	800e1f4 <__sfputc_r>
 800e240:	1c43      	adds	r3, r0, #1
 800e242:	d1f3      	bne.n	800e22c <__sfputs_r+0xa>
 800e244:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e248 <_vfiprintf_r>:
 800e248:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24c:	460d      	mov	r5, r1
 800e24e:	b09d      	sub	sp, #116	; 0x74
 800e250:	4614      	mov	r4, r2
 800e252:	4698      	mov	r8, r3
 800e254:	4606      	mov	r6, r0
 800e256:	b118      	cbz	r0, 800e260 <_vfiprintf_r+0x18>
 800e258:	6a03      	ldr	r3, [r0, #32]
 800e25a:	b90b      	cbnz	r3, 800e260 <_vfiprintf_r+0x18>
 800e25c:	f7fe fa02 	bl	800c664 <__sinit>
 800e260:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e262:	07d9      	lsls	r1, r3, #31
 800e264:	d405      	bmi.n	800e272 <_vfiprintf_r+0x2a>
 800e266:	89ab      	ldrh	r3, [r5, #12]
 800e268:	059a      	lsls	r2, r3, #22
 800e26a:	d402      	bmi.n	800e272 <_vfiprintf_r+0x2a>
 800e26c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e26e:	f7fe fc22 	bl	800cab6 <__retarget_lock_acquire_recursive>
 800e272:	89ab      	ldrh	r3, [r5, #12]
 800e274:	071b      	lsls	r3, r3, #28
 800e276:	d501      	bpl.n	800e27c <_vfiprintf_r+0x34>
 800e278:	692b      	ldr	r3, [r5, #16]
 800e27a:	b99b      	cbnz	r3, 800e2a4 <_vfiprintf_r+0x5c>
 800e27c:	4629      	mov	r1, r5
 800e27e:	4630      	mov	r0, r6
 800e280:	f7fe fb34 	bl	800c8ec <__swsetup_r>
 800e284:	b170      	cbz	r0, 800e2a4 <_vfiprintf_r+0x5c>
 800e286:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e288:	07dc      	lsls	r4, r3, #31
 800e28a:	d504      	bpl.n	800e296 <_vfiprintf_r+0x4e>
 800e28c:	f04f 30ff 	mov.w	r0, #4294967295
 800e290:	b01d      	add	sp, #116	; 0x74
 800e292:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e296:	89ab      	ldrh	r3, [r5, #12]
 800e298:	0598      	lsls	r0, r3, #22
 800e29a:	d4f7      	bmi.n	800e28c <_vfiprintf_r+0x44>
 800e29c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e29e:	f7fe fc0b 	bl	800cab8 <__retarget_lock_release_recursive>
 800e2a2:	e7f3      	b.n	800e28c <_vfiprintf_r+0x44>
 800e2a4:	2300      	movs	r3, #0
 800e2a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e2a8:	2320      	movs	r3, #32
 800e2aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800e2b2:	2330      	movs	r3, #48	; 0x30
 800e2b4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e468 <_vfiprintf_r+0x220>
 800e2b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2bc:	f04f 0901 	mov.w	r9, #1
 800e2c0:	4623      	mov	r3, r4
 800e2c2:	469a      	mov	sl, r3
 800e2c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e2c8:	b10a      	cbz	r2, 800e2ce <_vfiprintf_r+0x86>
 800e2ca:	2a25      	cmp	r2, #37	; 0x25
 800e2cc:	d1f9      	bne.n	800e2c2 <_vfiprintf_r+0x7a>
 800e2ce:	ebba 0b04 	subs.w	fp, sl, r4
 800e2d2:	d00b      	beq.n	800e2ec <_vfiprintf_r+0xa4>
 800e2d4:	465b      	mov	r3, fp
 800e2d6:	4622      	mov	r2, r4
 800e2d8:	4629      	mov	r1, r5
 800e2da:	4630      	mov	r0, r6
 800e2dc:	f7ff ffa1 	bl	800e222 <__sfputs_r>
 800e2e0:	3001      	adds	r0, #1
 800e2e2:	f000 80a9 	beq.w	800e438 <_vfiprintf_r+0x1f0>
 800e2e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e2e8:	445a      	add	r2, fp
 800e2ea:	9209      	str	r2, [sp, #36]	; 0x24
 800e2ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	f000 80a1 	beq.w	800e438 <_vfiprintf_r+0x1f0>
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e2fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e300:	f10a 0a01 	add.w	sl, sl, #1
 800e304:	9304      	str	r3, [sp, #16]
 800e306:	9307      	str	r3, [sp, #28]
 800e308:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e30c:	931a      	str	r3, [sp, #104]	; 0x68
 800e30e:	4654      	mov	r4, sl
 800e310:	2205      	movs	r2, #5
 800e312:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e316:	4854      	ldr	r0, [pc, #336]	; (800e468 <_vfiprintf_r+0x220>)
 800e318:	f7f1 ff82 	bl	8000220 <memchr>
 800e31c:	9a04      	ldr	r2, [sp, #16]
 800e31e:	b9d8      	cbnz	r0, 800e358 <_vfiprintf_r+0x110>
 800e320:	06d1      	lsls	r1, r2, #27
 800e322:	bf44      	itt	mi
 800e324:	2320      	movmi	r3, #32
 800e326:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e32a:	0713      	lsls	r3, r2, #28
 800e32c:	bf44      	itt	mi
 800e32e:	232b      	movmi	r3, #43	; 0x2b
 800e330:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e334:	f89a 3000 	ldrb.w	r3, [sl]
 800e338:	2b2a      	cmp	r3, #42	; 0x2a
 800e33a:	d015      	beq.n	800e368 <_vfiprintf_r+0x120>
 800e33c:	9a07      	ldr	r2, [sp, #28]
 800e33e:	4654      	mov	r4, sl
 800e340:	2000      	movs	r0, #0
 800e342:	f04f 0c0a 	mov.w	ip, #10
 800e346:	4621      	mov	r1, r4
 800e348:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e34c:	3b30      	subs	r3, #48	; 0x30
 800e34e:	2b09      	cmp	r3, #9
 800e350:	d94d      	bls.n	800e3ee <_vfiprintf_r+0x1a6>
 800e352:	b1b0      	cbz	r0, 800e382 <_vfiprintf_r+0x13a>
 800e354:	9207      	str	r2, [sp, #28]
 800e356:	e014      	b.n	800e382 <_vfiprintf_r+0x13a>
 800e358:	eba0 0308 	sub.w	r3, r0, r8
 800e35c:	fa09 f303 	lsl.w	r3, r9, r3
 800e360:	4313      	orrs	r3, r2
 800e362:	9304      	str	r3, [sp, #16]
 800e364:	46a2      	mov	sl, r4
 800e366:	e7d2      	b.n	800e30e <_vfiprintf_r+0xc6>
 800e368:	9b03      	ldr	r3, [sp, #12]
 800e36a:	1d19      	adds	r1, r3, #4
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	9103      	str	r1, [sp, #12]
 800e370:	2b00      	cmp	r3, #0
 800e372:	bfbb      	ittet	lt
 800e374:	425b      	neglt	r3, r3
 800e376:	f042 0202 	orrlt.w	r2, r2, #2
 800e37a:	9307      	strge	r3, [sp, #28]
 800e37c:	9307      	strlt	r3, [sp, #28]
 800e37e:	bfb8      	it	lt
 800e380:	9204      	strlt	r2, [sp, #16]
 800e382:	7823      	ldrb	r3, [r4, #0]
 800e384:	2b2e      	cmp	r3, #46	; 0x2e
 800e386:	d10c      	bne.n	800e3a2 <_vfiprintf_r+0x15a>
 800e388:	7863      	ldrb	r3, [r4, #1]
 800e38a:	2b2a      	cmp	r3, #42	; 0x2a
 800e38c:	d134      	bne.n	800e3f8 <_vfiprintf_r+0x1b0>
 800e38e:	9b03      	ldr	r3, [sp, #12]
 800e390:	1d1a      	adds	r2, r3, #4
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	9203      	str	r2, [sp, #12]
 800e396:	2b00      	cmp	r3, #0
 800e398:	bfb8      	it	lt
 800e39a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e39e:	3402      	adds	r4, #2
 800e3a0:	9305      	str	r3, [sp, #20]
 800e3a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e478 <_vfiprintf_r+0x230>
 800e3a6:	7821      	ldrb	r1, [r4, #0]
 800e3a8:	2203      	movs	r2, #3
 800e3aa:	4650      	mov	r0, sl
 800e3ac:	f7f1 ff38 	bl	8000220 <memchr>
 800e3b0:	b138      	cbz	r0, 800e3c2 <_vfiprintf_r+0x17a>
 800e3b2:	9b04      	ldr	r3, [sp, #16]
 800e3b4:	eba0 000a 	sub.w	r0, r0, sl
 800e3b8:	2240      	movs	r2, #64	; 0x40
 800e3ba:	4082      	lsls	r2, r0
 800e3bc:	4313      	orrs	r3, r2
 800e3be:	3401      	adds	r4, #1
 800e3c0:	9304      	str	r3, [sp, #16]
 800e3c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3c6:	4829      	ldr	r0, [pc, #164]	; (800e46c <_vfiprintf_r+0x224>)
 800e3c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3cc:	2206      	movs	r2, #6
 800e3ce:	f7f1 ff27 	bl	8000220 <memchr>
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	d03f      	beq.n	800e456 <_vfiprintf_r+0x20e>
 800e3d6:	4b26      	ldr	r3, [pc, #152]	; (800e470 <_vfiprintf_r+0x228>)
 800e3d8:	bb1b      	cbnz	r3, 800e422 <_vfiprintf_r+0x1da>
 800e3da:	9b03      	ldr	r3, [sp, #12]
 800e3dc:	3307      	adds	r3, #7
 800e3de:	f023 0307 	bic.w	r3, r3, #7
 800e3e2:	3308      	adds	r3, #8
 800e3e4:	9303      	str	r3, [sp, #12]
 800e3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3e8:	443b      	add	r3, r7
 800e3ea:	9309      	str	r3, [sp, #36]	; 0x24
 800e3ec:	e768      	b.n	800e2c0 <_vfiprintf_r+0x78>
 800e3ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800e3f2:	460c      	mov	r4, r1
 800e3f4:	2001      	movs	r0, #1
 800e3f6:	e7a6      	b.n	800e346 <_vfiprintf_r+0xfe>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	3401      	adds	r4, #1
 800e3fc:	9305      	str	r3, [sp, #20]
 800e3fe:	4619      	mov	r1, r3
 800e400:	f04f 0c0a 	mov.w	ip, #10
 800e404:	4620      	mov	r0, r4
 800e406:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e40a:	3a30      	subs	r2, #48	; 0x30
 800e40c:	2a09      	cmp	r2, #9
 800e40e:	d903      	bls.n	800e418 <_vfiprintf_r+0x1d0>
 800e410:	2b00      	cmp	r3, #0
 800e412:	d0c6      	beq.n	800e3a2 <_vfiprintf_r+0x15a>
 800e414:	9105      	str	r1, [sp, #20]
 800e416:	e7c4      	b.n	800e3a2 <_vfiprintf_r+0x15a>
 800e418:	fb0c 2101 	mla	r1, ip, r1, r2
 800e41c:	4604      	mov	r4, r0
 800e41e:	2301      	movs	r3, #1
 800e420:	e7f0      	b.n	800e404 <_vfiprintf_r+0x1bc>
 800e422:	ab03      	add	r3, sp, #12
 800e424:	9300      	str	r3, [sp, #0]
 800e426:	462a      	mov	r2, r5
 800e428:	4b12      	ldr	r3, [pc, #72]	; (800e474 <_vfiprintf_r+0x22c>)
 800e42a:	a904      	add	r1, sp, #16
 800e42c:	4630      	mov	r0, r6
 800e42e:	f7fd fcc7 	bl	800bdc0 <_printf_float>
 800e432:	4607      	mov	r7, r0
 800e434:	1c78      	adds	r0, r7, #1
 800e436:	d1d6      	bne.n	800e3e6 <_vfiprintf_r+0x19e>
 800e438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e43a:	07d9      	lsls	r1, r3, #31
 800e43c:	d405      	bmi.n	800e44a <_vfiprintf_r+0x202>
 800e43e:	89ab      	ldrh	r3, [r5, #12]
 800e440:	059a      	lsls	r2, r3, #22
 800e442:	d402      	bmi.n	800e44a <_vfiprintf_r+0x202>
 800e444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e446:	f7fe fb37 	bl	800cab8 <__retarget_lock_release_recursive>
 800e44a:	89ab      	ldrh	r3, [r5, #12]
 800e44c:	065b      	lsls	r3, r3, #25
 800e44e:	f53f af1d 	bmi.w	800e28c <_vfiprintf_r+0x44>
 800e452:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e454:	e71c      	b.n	800e290 <_vfiprintf_r+0x48>
 800e456:	ab03      	add	r3, sp, #12
 800e458:	9300      	str	r3, [sp, #0]
 800e45a:	462a      	mov	r2, r5
 800e45c:	4b05      	ldr	r3, [pc, #20]	; (800e474 <_vfiprintf_r+0x22c>)
 800e45e:	a904      	add	r1, sp, #16
 800e460:	4630      	mov	r0, r6
 800e462:	f7fd ff51 	bl	800c308 <_printf_i>
 800e466:	e7e4      	b.n	800e432 <_vfiprintf_r+0x1ea>
 800e468:	08012c04 	.word	0x08012c04
 800e46c:	08012c0e 	.word	0x08012c0e
 800e470:	0800bdc1 	.word	0x0800bdc1
 800e474:	0800e223 	.word	0x0800e223
 800e478:	08012c0a 	.word	0x08012c0a

0800e47c <__sflush_r>:
 800e47c:	898a      	ldrh	r2, [r1, #12]
 800e47e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e482:	4605      	mov	r5, r0
 800e484:	0710      	lsls	r0, r2, #28
 800e486:	460c      	mov	r4, r1
 800e488:	d458      	bmi.n	800e53c <__sflush_r+0xc0>
 800e48a:	684b      	ldr	r3, [r1, #4]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	dc05      	bgt.n	800e49c <__sflush_r+0x20>
 800e490:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e492:	2b00      	cmp	r3, #0
 800e494:	dc02      	bgt.n	800e49c <__sflush_r+0x20>
 800e496:	2000      	movs	r0, #0
 800e498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e49c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e49e:	2e00      	cmp	r6, #0
 800e4a0:	d0f9      	beq.n	800e496 <__sflush_r+0x1a>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e4a8:	682f      	ldr	r7, [r5, #0]
 800e4aa:	6a21      	ldr	r1, [r4, #32]
 800e4ac:	602b      	str	r3, [r5, #0]
 800e4ae:	d032      	beq.n	800e516 <__sflush_r+0x9a>
 800e4b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e4b2:	89a3      	ldrh	r3, [r4, #12]
 800e4b4:	075a      	lsls	r2, r3, #29
 800e4b6:	d505      	bpl.n	800e4c4 <__sflush_r+0x48>
 800e4b8:	6863      	ldr	r3, [r4, #4]
 800e4ba:	1ac0      	subs	r0, r0, r3
 800e4bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e4be:	b10b      	cbz	r3, 800e4c4 <__sflush_r+0x48>
 800e4c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e4c2:	1ac0      	subs	r0, r0, r3
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	4602      	mov	r2, r0
 800e4c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e4ca:	6a21      	ldr	r1, [r4, #32]
 800e4cc:	4628      	mov	r0, r5
 800e4ce:	47b0      	blx	r6
 800e4d0:	1c43      	adds	r3, r0, #1
 800e4d2:	89a3      	ldrh	r3, [r4, #12]
 800e4d4:	d106      	bne.n	800e4e4 <__sflush_r+0x68>
 800e4d6:	6829      	ldr	r1, [r5, #0]
 800e4d8:	291d      	cmp	r1, #29
 800e4da:	d82b      	bhi.n	800e534 <__sflush_r+0xb8>
 800e4dc:	4a29      	ldr	r2, [pc, #164]	; (800e584 <__sflush_r+0x108>)
 800e4de:	410a      	asrs	r2, r1
 800e4e0:	07d6      	lsls	r6, r2, #31
 800e4e2:	d427      	bmi.n	800e534 <__sflush_r+0xb8>
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	6062      	str	r2, [r4, #4]
 800e4e8:	04d9      	lsls	r1, r3, #19
 800e4ea:	6922      	ldr	r2, [r4, #16]
 800e4ec:	6022      	str	r2, [r4, #0]
 800e4ee:	d504      	bpl.n	800e4fa <__sflush_r+0x7e>
 800e4f0:	1c42      	adds	r2, r0, #1
 800e4f2:	d101      	bne.n	800e4f8 <__sflush_r+0x7c>
 800e4f4:	682b      	ldr	r3, [r5, #0]
 800e4f6:	b903      	cbnz	r3, 800e4fa <__sflush_r+0x7e>
 800e4f8:	6560      	str	r0, [r4, #84]	; 0x54
 800e4fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e4fc:	602f      	str	r7, [r5, #0]
 800e4fe:	2900      	cmp	r1, #0
 800e500:	d0c9      	beq.n	800e496 <__sflush_r+0x1a>
 800e502:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e506:	4299      	cmp	r1, r3
 800e508:	d002      	beq.n	800e510 <__sflush_r+0x94>
 800e50a:	4628      	mov	r0, r5
 800e50c:	f7ff f952 	bl	800d7b4 <_free_r>
 800e510:	2000      	movs	r0, #0
 800e512:	6360      	str	r0, [r4, #52]	; 0x34
 800e514:	e7c0      	b.n	800e498 <__sflush_r+0x1c>
 800e516:	2301      	movs	r3, #1
 800e518:	4628      	mov	r0, r5
 800e51a:	47b0      	blx	r6
 800e51c:	1c41      	adds	r1, r0, #1
 800e51e:	d1c8      	bne.n	800e4b2 <__sflush_r+0x36>
 800e520:	682b      	ldr	r3, [r5, #0]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d0c5      	beq.n	800e4b2 <__sflush_r+0x36>
 800e526:	2b1d      	cmp	r3, #29
 800e528:	d001      	beq.n	800e52e <__sflush_r+0xb2>
 800e52a:	2b16      	cmp	r3, #22
 800e52c:	d101      	bne.n	800e532 <__sflush_r+0xb6>
 800e52e:	602f      	str	r7, [r5, #0]
 800e530:	e7b1      	b.n	800e496 <__sflush_r+0x1a>
 800e532:	89a3      	ldrh	r3, [r4, #12]
 800e534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e538:	81a3      	strh	r3, [r4, #12]
 800e53a:	e7ad      	b.n	800e498 <__sflush_r+0x1c>
 800e53c:	690f      	ldr	r7, [r1, #16]
 800e53e:	2f00      	cmp	r7, #0
 800e540:	d0a9      	beq.n	800e496 <__sflush_r+0x1a>
 800e542:	0793      	lsls	r3, r2, #30
 800e544:	680e      	ldr	r6, [r1, #0]
 800e546:	bf08      	it	eq
 800e548:	694b      	ldreq	r3, [r1, #20]
 800e54a:	600f      	str	r7, [r1, #0]
 800e54c:	bf18      	it	ne
 800e54e:	2300      	movne	r3, #0
 800e550:	eba6 0807 	sub.w	r8, r6, r7
 800e554:	608b      	str	r3, [r1, #8]
 800e556:	f1b8 0f00 	cmp.w	r8, #0
 800e55a:	dd9c      	ble.n	800e496 <__sflush_r+0x1a>
 800e55c:	6a21      	ldr	r1, [r4, #32]
 800e55e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e560:	4643      	mov	r3, r8
 800e562:	463a      	mov	r2, r7
 800e564:	4628      	mov	r0, r5
 800e566:	47b0      	blx	r6
 800e568:	2800      	cmp	r0, #0
 800e56a:	dc06      	bgt.n	800e57a <__sflush_r+0xfe>
 800e56c:	89a3      	ldrh	r3, [r4, #12]
 800e56e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e572:	81a3      	strh	r3, [r4, #12]
 800e574:	f04f 30ff 	mov.w	r0, #4294967295
 800e578:	e78e      	b.n	800e498 <__sflush_r+0x1c>
 800e57a:	4407      	add	r7, r0
 800e57c:	eba8 0800 	sub.w	r8, r8, r0
 800e580:	e7e9      	b.n	800e556 <__sflush_r+0xda>
 800e582:	bf00      	nop
 800e584:	dfbffffe 	.word	0xdfbffffe

0800e588 <_fflush_r>:
 800e588:	b538      	push	{r3, r4, r5, lr}
 800e58a:	690b      	ldr	r3, [r1, #16]
 800e58c:	4605      	mov	r5, r0
 800e58e:	460c      	mov	r4, r1
 800e590:	b913      	cbnz	r3, 800e598 <_fflush_r+0x10>
 800e592:	2500      	movs	r5, #0
 800e594:	4628      	mov	r0, r5
 800e596:	bd38      	pop	{r3, r4, r5, pc}
 800e598:	b118      	cbz	r0, 800e5a2 <_fflush_r+0x1a>
 800e59a:	6a03      	ldr	r3, [r0, #32]
 800e59c:	b90b      	cbnz	r3, 800e5a2 <_fflush_r+0x1a>
 800e59e:	f7fe f861 	bl	800c664 <__sinit>
 800e5a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d0f3      	beq.n	800e592 <_fflush_r+0xa>
 800e5aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e5ac:	07d0      	lsls	r0, r2, #31
 800e5ae:	d404      	bmi.n	800e5ba <_fflush_r+0x32>
 800e5b0:	0599      	lsls	r1, r3, #22
 800e5b2:	d402      	bmi.n	800e5ba <_fflush_r+0x32>
 800e5b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5b6:	f7fe fa7e 	bl	800cab6 <__retarget_lock_acquire_recursive>
 800e5ba:	4628      	mov	r0, r5
 800e5bc:	4621      	mov	r1, r4
 800e5be:	f7ff ff5d 	bl	800e47c <__sflush_r>
 800e5c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e5c4:	07da      	lsls	r2, r3, #31
 800e5c6:	4605      	mov	r5, r0
 800e5c8:	d4e4      	bmi.n	800e594 <_fflush_r+0xc>
 800e5ca:	89a3      	ldrh	r3, [r4, #12]
 800e5cc:	059b      	lsls	r3, r3, #22
 800e5ce:	d4e1      	bmi.n	800e594 <_fflush_r+0xc>
 800e5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e5d2:	f7fe fa71 	bl	800cab8 <__retarget_lock_release_recursive>
 800e5d6:	e7dd      	b.n	800e594 <_fflush_r+0xc>

0800e5d8 <__swhatbuf_r>:
 800e5d8:	b570      	push	{r4, r5, r6, lr}
 800e5da:	460c      	mov	r4, r1
 800e5dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5e0:	2900      	cmp	r1, #0
 800e5e2:	b096      	sub	sp, #88	; 0x58
 800e5e4:	4615      	mov	r5, r2
 800e5e6:	461e      	mov	r6, r3
 800e5e8:	da0d      	bge.n	800e606 <__swhatbuf_r+0x2e>
 800e5ea:	89a3      	ldrh	r3, [r4, #12]
 800e5ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e5f0:	f04f 0100 	mov.w	r1, #0
 800e5f4:	bf0c      	ite	eq
 800e5f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e5fa:	2340      	movne	r3, #64	; 0x40
 800e5fc:	2000      	movs	r0, #0
 800e5fe:	6031      	str	r1, [r6, #0]
 800e600:	602b      	str	r3, [r5, #0]
 800e602:	b016      	add	sp, #88	; 0x58
 800e604:	bd70      	pop	{r4, r5, r6, pc}
 800e606:	466a      	mov	r2, sp
 800e608:	f000 f862 	bl	800e6d0 <_fstat_r>
 800e60c:	2800      	cmp	r0, #0
 800e60e:	dbec      	blt.n	800e5ea <__swhatbuf_r+0x12>
 800e610:	9901      	ldr	r1, [sp, #4]
 800e612:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e616:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e61a:	4259      	negs	r1, r3
 800e61c:	4159      	adcs	r1, r3
 800e61e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e622:	e7eb      	b.n	800e5fc <__swhatbuf_r+0x24>

0800e624 <__smakebuf_r>:
 800e624:	898b      	ldrh	r3, [r1, #12]
 800e626:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e628:	079d      	lsls	r5, r3, #30
 800e62a:	4606      	mov	r6, r0
 800e62c:	460c      	mov	r4, r1
 800e62e:	d507      	bpl.n	800e640 <__smakebuf_r+0x1c>
 800e630:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e634:	6023      	str	r3, [r4, #0]
 800e636:	6123      	str	r3, [r4, #16]
 800e638:	2301      	movs	r3, #1
 800e63a:	6163      	str	r3, [r4, #20]
 800e63c:	b002      	add	sp, #8
 800e63e:	bd70      	pop	{r4, r5, r6, pc}
 800e640:	ab01      	add	r3, sp, #4
 800e642:	466a      	mov	r2, sp
 800e644:	f7ff ffc8 	bl	800e5d8 <__swhatbuf_r>
 800e648:	9900      	ldr	r1, [sp, #0]
 800e64a:	4605      	mov	r5, r0
 800e64c:	4630      	mov	r0, r6
 800e64e:	f7fd fa8b 	bl	800bb68 <_malloc_r>
 800e652:	b948      	cbnz	r0, 800e668 <__smakebuf_r+0x44>
 800e654:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e658:	059a      	lsls	r2, r3, #22
 800e65a:	d4ef      	bmi.n	800e63c <__smakebuf_r+0x18>
 800e65c:	f023 0303 	bic.w	r3, r3, #3
 800e660:	f043 0302 	orr.w	r3, r3, #2
 800e664:	81a3      	strh	r3, [r4, #12]
 800e666:	e7e3      	b.n	800e630 <__smakebuf_r+0xc>
 800e668:	89a3      	ldrh	r3, [r4, #12]
 800e66a:	6020      	str	r0, [r4, #0]
 800e66c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e670:	81a3      	strh	r3, [r4, #12]
 800e672:	9b00      	ldr	r3, [sp, #0]
 800e674:	6163      	str	r3, [r4, #20]
 800e676:	9b01      	ldr	r3, [sp, #4]
 800e678:	6120      	str	r0, [r4, #16]
 800e67a:	b15b      	cbz	r3, 800e694 <__smakebuf_r+0x70>
 800e67c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e680:	4630      	mov	r0, r6
 800e682:	f000 f837 	bl	800e6f4 <_isatty_r>
 800e686:	b128      	cbz	r0, 800e694 <__smakebuf_r+0x70>
 800e688:	89a3      	ldrh	r3, [r4, #12]
 800e68a:	f023 0303 	bic.w	r3, r3, #3
 800e68e:	f043 0301 	orr.w	r3, r3, #1
 800e692:	81a3      	strh	r3, [r4, #12]
 800e694:	89a3      	ldrh	r3, [r4, #12]
 800e696:	431d      	orrs	r5, r3
 800e698:	81a5      	strh	r5, [r4, #12]
 800e69a:	e7cf      	b.n	800e63c <__smakebuf_r+0x18>

0800e69c <memmove>:
 800e69c:	4288      	cmp	r0, r1
 800e69e:	b510      	push	{r4, lr}
 800e6a0:	eb01 0402 	add.w	r4, r1, r2
 800e6a4:	d902      	bls.n	800e6ac <memmove+0x10>
 800e6a6:	4284      	cmp	r4, r0
 800e6a8:	4623      	mov	r3, r4
 800e6aa:	d807      	bhi.n	800e6bc <memmove+0x20>
 800e6ac:	1e43      	subs	r3, r0, #1
 800e6ae:	42a1      	cmp	r1, r4
 800e6b0:	d008      	beq.n	800e6c4 <memmove+0x28>
 800e6b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6ba:	e7f8      	b.n	800e6ae <memmove+0x12>
 800e6bc:	4402      	add	r2, r0
 800e6be:	4601      	mov	r1, r0
 800e6c0:	428a      	cmp	r2, r1
 800e6c2:	d100      	bne.n	800e6c6 <memmove+0x2a>
 800e6c4:	bd10      	pop	{r4, pc}
 800e6c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6ce:	e7f7      	b.n	800e6c0 <memmove+0x24>

0800e6d0 <_fstat_r>:
 800e6d0:	b538      	push	{r3, r4, r5, lr}
 800e6d2:	4d07      	ldr	r5, [pc, #28]	; (800e6f0 <_fstat_r+0x20>)
 800e6d4:	2300      	movs	r3, #0
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	4608      	mov	r0, r1
 800e6da:	4611      	mov	r1, r2
 800e6dc:	602b      	str	r3, [r5, #0]
 800e6de:	f7f4 ff1c 	bl	800351a <_fstat>
 800e6e2:	1c43      	adds	r3, r0, #1
 800e6e4:	d102      	bne.n	800e6ec <_fstat_r+0x1c>
 800e6e6:	682b      	ldr	r3, [r5, #0]
 800e6e8:	b103      	cbz	r3, 800e6ec <_fstat_r+0x1c>
 800e6ea:	6023      	str	r3, [r4, #0]
 800e6ec:	bd38      	pop	{r3, r4, r5, pc}
 800e6ee:	bf00      	nop
 800e6f0:	20000b7c 	.word	0x20000b7c

0800e6f4 <_isatty_r>:
 800e6f4:	b538      	push	{r3, r4, r5, lr}
 800e6f6:	4d06      	ldr	r5, [pc, #24]	; (800e710 <_isatty_r+0x1c>)
 800e6f8:	2300      	movs	r3, #0
 800e6fa:	4604      	mov	r4, r0
 800e6fc:	4608      	mov	r0, r1
 800e6fe:	602b      	str	r3, [r5, #0]
 800e700:	f7f4 ff1b 	bl	800353a <_isatty>
 800e704:	1c43      	adds	r3, r0, #1
 800e706:	d102      	bne.n	800e70e <_isatty_r+0x1a>
 800e708:	682b      	ldr	r3, [r5, #0]
 800e70a:	b103      	cbz	r3, 800e70e <_isatty_r+0x1a>
 800e70c:	6023      	str	r3, [r4, #0]
 800e70e:	bd38      	pop	{r3, r4, r5, pc}
 800e710:	20000b7c 	.word	0x20000b7c

0800e714 <memcpy>:
 800e714:	440a      	add	r2, r1
 800e716:	4291      	cmp	r1, r2
 800e718:	f100 33ff 	add.w	r3, r0, #4294967295
 800e71c:	d100      	bne.n	800e720 <memcpy+0xc>
 800e71e:	4770      	bx	lr
 800e720:	b510      	push	{r4, lr}
 800e722:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e726:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e72a:	4291      	cmp	r1, r2
 800e72c:	d1f9      	bne.n	800e722 <memcpy+0xe>
 800e72e:	bd10      	pop	{r4, pc}

0800e730 <__assert_func>:
 800e730:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e732:	4614      	mov	r4, r2
 800e734:	461a      	mov	r2, r3
 800e736:	4b09      	ldr	r3, [pc, #36]	; (800e75c <__assert_func+0x2c>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4605      	mov	r5, r0
 800e73c:	68d8      	ldr	r0, [r3, #12]
 800e73e:	b14c      	cbz	r4, 800e754 <__assert_func+0x24>
 800e740:	4b07      	ldr	r3, [pc, #28]	; (800e760 <__assert_func+0x30>)
 800e742:	9100      	str	r1, [sp, #0]
 800e744:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e748:	4906      	ldr	r1, [pc, #24]	; (800e764 <__assert_func+0x34>)
 800e74a:	462b      	mov	r3, r5
 800e74c:	f000 f872 	bl	800e834 <fiprintf>
 800e750:	f000 f882 	bl	800e858 <abort>
 800e754:	4b04      	ldr	r3, [pc, #16]	; (800e768 <__assert_func+0x38>)
 800e756:	461c      	mov	r4, r3
 800e758:	e7f3      	b.n	800e742 <__assert_func+0x12>
 800e75a:	bf00      	nop
 800e75c:	200000a8 	.word	0x200000a8
 800e760:	08012c1f 	.word	0x08012c1f
 800e764:	08012c2c 	.word	0x08012c2c
 800e768:	08012c5a 	.word	0x08012c5a

0800e76c <_calloc_r>:
 800e76c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e76e:	fba1 2402 	umull	r2, r4, r1, r2
 800e772:	b94c      	cbnz	r4, 800e788 <_calloc_r+0x1c>
 800e774:	4611      	mov	r1, r2
 800e776:	9201      	str	r2, [sp, #4]
 800e778:	f7fd f9f6 	bl	800bb68 <_malloc_r>
 800e77c:	9a01      	ldr	r2, [sp, #4]
 800e77e:	4605      	mov	r5, r0
 800e780:	b930      	cbnz	r0, 800e790 <_calloc_r+0x24>
 800e782:	4628      	mov	r0, r5
 800e784:	b003      	add	sp, #12
 800e786:	bd30      	pop	{r4, r5, pc}
 800e788:	220c      	movs	r2, #12
 800e78a:	6002      	str	r2, [r0, #0]
 800e78c:	2500      	movs	r5, #0
 800e78e:	e7f8      	b.n	800e782 <_calloc_r+0x16>
 800e790:	4621      	mov	r1, r4
 800e792:	f7fe f903 	bl	800c99c <memset>
 800e796:	e7f4      	b.n	800e782 <_calloc_r+0x16>

0800e798 <__ascii_mbtowc>:
 800e798:	b082      	sub	sp, #8
 800e79a:	b901      	cbnz	r1, 800e79e <__ascii_mbtowc+0x6>
 800e79c:	a901      	add	r1, sp, #4
 800e79e:	b142      	cbz	r2, 800e7b2 <__ascii_mbtowc+0x1a>
 800e7a0:	b14b      	cbz	r3, 800e7b6 <__ascii_mbtowc+0x1e>
 800e7a2:	7813      	ldrb	r3, [r2, #0]
 800e7a4:	600b      	str	r3, [r1, #0]
 800e7a6:	7812      	ldrb	r2, [r2, #0]
 800e7a8:	1e10      	subs	r0, r2, #0
 800e7aa:	bf18      	it	ne
 800e7ac:	2001      	movne	r0, #1
 800e7ae:	b002      	add	sp, #8
 800e7b0:	4770      	bx	lr
 800e7b2:	4610      	mov	r0, r2
 800e7b4:	e7fb      	b.n	800e7ae <__ascii_mbtowc+0x16>
 800e7b6:	f06f 0001 	mvn.w	r0, #1
 800e7ba:	e7f8      	b.n	800e7ae <__ascii_mbtowc+0x16>

0800e7bc <_realloc_r>:
 800e7bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c0:	4680      	mov	r8, r0
 800e7c2:	4614      	mov	r4, r2
 800e7c4:	460e      	mov	r6, r1
 800e7c6:	b921      	cbnz	r1, 800e7d2 <_realloc_r+0x16>
 800e7c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e7cc:	4611      	mov	r1, r2
 800e7ce:	f7fd b9cb 	b.w	800bb68 <_malloc_r>
 800e7d2:	b92a      	cbnz	r2, 800e7e0 <_realloc_r+0x24>
 800e7d4:	f7fe ffee 	bl	800d7b4 <_free_r>
 800e7d8:	4625      	mov	r5, r4
 800e7da:	4628      	mov	r0, r5
 800e7dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7e0:	f000 f841 	bl	800e866 <_malloc_usable_size_r>
 800e7e4:	4284      	cmp	r4, r0
 800e7e6:	4607      	mov	r7, r0
 800e7e8:	d802      	bhi.n	800e7f0 <_realloc_r+0x34>
 800e7ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e7ee:	d812      	bhi.n	800e816 <_realloc_r+0x5a>
 800e7f0:	4621      	mov	r1, r4
 800e7f2:	4640      	mov	r0, r8
 800e7f4:	f7fd f9b8 	bl	800bb68 <_malloc_r>
 800e7f8:	4605      	mov	r5, r0
 800e7fa:	2800      	cmp	r0, #0
 800e7fc:	d0ed      	beq.n	800e7da <_realloc_r+0x1e>
 800e7fe:	42bc      	cmp	r4, r7
 800e800:	4622      	mov	r2, r4
 800e802:	4631      	mov	r1, r6
 800e804:	bf28      	it	cs
 800e806:	463a      	movcs	r2, r7
 800e808:	f7ff ff84 	bl	800e714 <memcpy>
 800e80c:	4631      	mov	r1, r6
 800e80e:	4640      	mov	r0, r8
 800e810:	f7fe ffd0 	bl	800d7b4 <_free_r>
 800e814:	e7e1      	b.n	800e7da <_realloc_r+0x1e>
 800e816:	4635      	mov	r5, r6
 800e818:	e7df      	b.n	800e7da <_realloc_r+0x1e>

0800e81a <__ascii_wctomb>:
 800e81a:	b149      	cbz	r1, 800e830 <__ascii_wctomb+0x16>
 800e81c:	2aff      	cmp	r2, #255	; 0xff
 800e81e:	bf85      	ittet	hi
 800e820:	238a      	movhi	r3, #138	; 0x8a
 800e822:	6003      	strhi	r3, [r0, #0]
 800e824:	700a      	strbls	r2, [r1, #0]
 800e826:	f04f 30ff 	movhi.w	r0, #4294967295
 800e82a:	bf98      	it	ls
 800e82c:	2001      	movls	r0, #1
 800e82e:	4770      	bx	lr
 800e830:	4608      	mov	r0, r1
 800e832:	4770      	bx	lr

0800e834 <fiprintf>:
 800e834:	b40e      	push	{r1, r2, r3}
 800e836:	b503      	push	{r0, r1, lr}
 800e838:	4601      	mov	r1, r0
 800e83a:	ab03      	add	r3, sp, #12
 800e83c:	4805      	ldr	r0, [pc, #20]	; (800e854 <fiprintf+0x20>)
 800e83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e842:	6800      	ldr	r0, [r0, #0]
 800e844:	9301      	str	r3, [sp, #4]
 800e846:	f7ff fcff 	bl	800e248 <_vfiprintf_r>
 800e84a:	b002      	add	sp, #8
 800e84c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e850:	b003      	add	sp, #12
 800e852:	4770      	bx	lr
 800e854:	200000a8 	.word	0x200000a8

0800e858 <abort>:
 800e858:	b508      	push	{r3, lr}
 800e85a:	2006      	movs	r0, #6
 800e85c:	f000 f834 	bl	800e8c8 <raise>
 800e860:	2001      	movs	r0, #1
 800e862:	f7f4 fe0b 	bl	800347c <_exit>

0800e866 <_malloc_usable_size_r>:
 800e866:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e86a:	1f18      	subs	r0, r3, #4
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	bfbc      	itt	lt
 800e870:	580b      	ldrlt	r3, [r1, r0]
 800e872:	18c0      	addlt	r0, r0, r3
 800e874:	4770      	bx	lr

0800e876 <_raise_r>:
 800e876:	291f      	cmp	r1, #31
 800e878:	b538      	push	{r3, r4, r5, lr}
 800e87a:	4604      	mov	r4, r0
 800e87c:	460d      	mov	r5, r1
 800e87e:	d904      	bls.n	800e88a <_raise_r+0x14>
 800e880:	2316      	movs	r3, #22
 800e882:	6003      	str	r3, [r0, #0]
 800e884:	f04f 30ff 	mov.w	r0, #4294967295
 800e888:	bd38      	pop	{r3, r4, r5, pc}
 800e88a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e88c:	b112      	cbz	r2, 800e894 <_raise_r+0x1e>
 800e88e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e892:	b94b      	cbnz	r3, 800e8a8 <_raise_r+0x32>
 800e894:	4620      	mov	r0, r4
 800e896:	f000 f831 	bl	800e8fc <_getpid_r>
 800e89a:	462a      	mov	r2, r5
 800e89c:	4601      	mov	r1, r0
 800e89e:	4620      	mov	r0, r4
 800e8a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e8a4:	f000 b818 	b.w	800e8d8 <_kill_r>
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d00a      	beq.n	800e8c2 <_raise_r+0x4c>
 800e8ac:	1c59      	adds	r1, r3, #1
 800e8ae:	d103      	bne.n	800e8b8 <_raise_r+0x42>
 800e8b0:	2316      	movs	r3, #22
 800e8b2:	6003      	str	r3, [r0, #0]
 800e8b4:	2001      	movs	r0, #1
 800e8b6:	e7e7      	b.n	800e888 <_raise_r+0x12>
 800e8b8:	2400      	movs	r4, #0
 800e8ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e8be:	4628      	mov	r0, r5
 800e8c0:	4798      	blx	r3
 800e8c2:	2000      	movs	r0, #0
 800e8c4:	e7e0      	b.n	800e888 <_raise_r+0x12>
	...

0800e8c8 <raise>:
 800e8c8:	4b02      	ldr	r3, [pc, #8]	; (800e8d4 <raise+0xc>)
 800e8ca:	4601      	mov	r1, r0
 800e8cc:	6818      	ldr	r0, [r3, #0]
 800e8ce:	f7ff bfd2 	b.w	800e876 <_raise_r>
 800e8d2:	bf00      	nop
 800e8d4:	200000a8 	.word	0x200000a8

0800e8d8 <_kill_r>:
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	4d07      	ldr	r5, [pc, #28]	; (800e8f8 <_kill_r+0x20>)
 800e8dc:	2300      	movs	r3, #0
 800e8de:	4604      	mov	r4, r0
 800e8e0:	4608      	mov	r0, r1
 800e8e2:	4611      	mov	r1, r2
 800e8e4:	602b      	str	r3, [r5, #0]
 800e8e6:	f7f4 fdb9 	bl	800345c <_kill>
 800e8ea:	1c43      	adds	r3, r0, #1
 800e8ec:	d102      	bne.n	800e8f4 <_kill_r+0x1c>
 800e8ee:	682b      	ldr	r3, [r5, #0]
 800e8f0:	b103      	cbz	r3, 800e8f4 <_kill_r+0x1c>
 800e8f2:	6023      	str	r3, [r4, #0]
 800e8f4:	bd38      	pop	{r3, r4, r5, pc}
 800e8f6:	bf00      	nop
 800e8f8:	20000b7c 	.word	0x20000b7c

0800e8fc <_getpid_r>:
 800e8fc:	f7f4 bda6 	b.w	800344c <_getpid>

0800e900 <pow>:
 800e900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e902:	ed2d 8b02 	vpush	{d8}
 800e906:	eeb0 8a40 	vmov.f32	s16, s0
 800e90a:	eef0 8a60 	vmov.f32	s17, s1
 800e90e:	ec55 4b11 	vmov	r4, r5, d1
 800e912:	f000 f871 	bl	800e9f8 <__ieee754_pow>
 800e916:	4622      	mov	r2, r4
 800e918:	462b      	mov	r3, r5
 800e91a:	4620      	mov	r0, r4
 800e91c:	4629      	mov	r1, r5
 800e91e:	ec57 6b10 	vmov	r6, r7, d0
 800e922:	f7f2 f92b 	bl	8000b7c <__aeabi_dcmpun>
 800e926:	2800      	cmp	r0, #0
 800e928:	d13b      	bne.n	800e9a2 <pow+0xa2>
 800e92a:	ec51 0b18 	vmov	r0, r1, d8
 800e92e:	2200      	movs	r2, #0
 800e930:	2300      	movs	r3, #0
 800e932:	f7f2 f8f1 	bl	8000b18 <__aeabi_dcmpeq>
 800e936:	b1b8      	cbz	r0, 800e968 <pow+0x68>
 800e938:	2200      	movs	r2, #0
 800e93a:	2300      	movs	r3, #0
 800e93c:	4620      	mov	r0, r4
 800e93e:	4629      	mov	r1, r5
 800e940:	f7f2 f8ea 	bl	8000b18 <__aeabi_dcmpeq>
 800e944:	2800      	cmp	r0, #0
 800e946:	d146      	bne.n	800e9d6 <pow+0xd6>
 800e948:	ec45 4b10 	vmov	d0, r4, r5
 800e94c:	f000 f848 	bl	800e9e0 <finite>
 800e950:	b338      	cbz	r0, 800e9a2 <pow+0xa2>
 800e952:	2200      	movs	r2, #0
 800e954:	2300      	movs	r3, #0
 800e956:	4620      	mov	r0, r4
 800e958:	4629      	mov	r1, r5
 800e95a:	f7f2 f8e7 	bl	8000b2c <__aeabi_dcmplt>
 800e95e:	b300      	cbz	r0, 800e9a2 <pow+0xa2>
 800e960:	f7fe f87e 	bl	800ca60 <__errno>
 800e964:	2322      	movs	r3, #34	; 0x22
 800e966:	e01b      	b.n	800e9a0 <pow+0xa0>
 800e968:	ec47 6b10 	vmov	d0, r6, r7
 800e96c:	f000 f838 	bl	800e9e0 <finite>
 800e970:	b9e0      	cbnz	r0, 800e9ac <pow+0xac>
 800e972:	eeb0 0a48 	vmov.f32	s0, s16
 800e976:	eef0 0a68 	vmov.f32	s1, s17
 800e97a:	f000 f831 	bl	800e9e0 <finite>
 800e97e:	b1a8      	cbz	r0, 800e9ac <pow+0xac>
 800e980:	ec45 4b10 	vmov	d0, r4, r5
 800e984:	f000 f82c 	bl	800e9e0 <finite>
 800e988:	b180      	cbz	r0, 800e9ac <pow+0xac>
 800e98a:	4632      	mov	r2, r6
 800e98c:	463b      	mov	r3, r7
 800e98e:	4630      	mov	r0, r6
 800e990:	4639      	mov	r1, r7
 800e992:	f7f2 f8f3 	bl	8000b7c <__aeabi_dcmpun>
 800e996:	2800      	cmp	r0, #0
 800e998:	d0e2      	beq.n	800e960 <pow+0x60>
 800e99a:	f7fe f861 	bl	800ca60 <__errno>
 800e99e:	2321      	movs	r3, #33	; 0x21
 800e9a0:	6003      	str	r3, [r0, #0]
 800e9a2:	ecbd 8b02 	vpop	{d8}
 800e9a6:	ec47 6b10 	vmov	d0, r6, r7
 800e9aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	4630      	mov	r0, r6
 800e9b2:	4639      	mov	r1, r7
 800e9b4:	f7f2 f8b0 	bl	8000b18 <__aeabi_dcmpeq>
 800e9b8:	2800      	cmp	r0, #0
 800e9ba:	d0f2      	beq.n	800e9a2 <pow+0xa2>
 800e9bc:	eeb0 0a48 	vmov.f32	s0, s16
 800e9c0:	eef0 0a68 	vmov.f32	s1, s17
 800e9c4:	f000 f80c 	bl	800e9e0 <finite>
 800e9c8:	2800      	cmp	r0, #0
 800e9ca:	d0ea      	beq.n	800e9a2 <pow+0xa2>
 800e9cc:	ec45 4b10 	vmov	d0, r4, r5
 800e9d0:	f000 f806 	bl	800e9e0 <finite>
 800e9d4:	e7c3      	b.n	800e95e <pow+0x5e>
 800e9d6:	4f01      	ldr	r7, [pc, #4]	; (800e9dc <pow+0xdc>)
 800e9d8:	2600      	movs	r6, #0
 800e9da:	e7e2      	b.n	800e9a2 <pow+0xa2>
 800e9dc:	3ff00000 	.word	0x3ff00000

0800e9e0 <finite>:
 800e9e0:	b082      	sub	sp, #8
 800e9e2:	ed8d 0b00 	vstr	d0, [sp]
 800e9e6:	9801      	ldr	r0, [sp, #4]
 800e9e8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e9ec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e9f0:	0fc0      	lsrs	r0, r0, #31
 800e9f2:	b002      	add	sp, #8
 800e9f4:	4770      	bx	lr
	...

0800e9f8 <__ieee754_pow>:
 800e9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9fc:	ed2d 8b06 	vpush	{d8-d10}
 800ea00:	b089      	sub	sp, #36	; 0x24
 800ea02:	ed8d 1b00 	vstr	d1, [sp]
 800ea06:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ea0a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ea0e:	ea58 0102 	orrs.w	r1, r8, r2
 800ea12:	ec57 6b10 	vmov	r6, r7, d0
 800ea16:	d115      	bne.n	800ea44 <__ieee754_pow+0x4c>
 800ea18:	19b3      	adds	r3, r6, r6
 800ea1a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ea1e:	4152      	adcs	r2, r2
 800ea20:	4299      	cmp	r1, r3
 800ea22:	4b89      	ldr	r3, [pc, #548]	; (800ec48 <__ieee754_pow+0x250>)
 800ea24:	4193      	sbcs	r3, r2
 800ea26:	f080 84d1 	bcs.w	800f3cc <__ieee754_pow+0x9d4>
 800ea2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea2e:	4630      	mov	r0, r6
 800ea30:	4639      	mov	r1, r7
 800ea32:	f7f1 fc53 	bl	80002dc <__adddf3>
 800ea36:	ec41 0b10 	vmov	d0, r0, r1
 800ea3a:	b009      	add	sp, #36	; 0x24
 800ea3c:	ecbd 8b06 	vpop	{d8-d10}
 800ea40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea44:	4b81      	ldr	r3, [pc, #516]	; (800ec4c <__ieee754_pow+0x254>)
 800ea46:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ea4a:	429c      	cmp	r4, r3
 800ea4c:	ee10 aa10 	vmov	sl, s0
 800ea50:	463d      	mov	r5, r7
 800ea52:	dc06      	bgt.n	800ea62 <__ieee754_pow+0x6a>
 800ea54:	d101      	bne.n	800ea5a <__ieee754_pow+0x62>
 800ea56:	2e00      	cmp	r6, #0
 800ea58:	d1e7      	bne.n	800ea2a <__ieee754_pow+0x32>
 800ea5a:	4598      	cmp	r8, r3
 800ea5c:	dc01      	bgt.n	800ea62 <__ieee754_pow+0x6a>
 800ea5e:	d10f      	bne.n	800ea80 <__ieee754_pow+0x88>
 800ea60:	b172      	cbz	r2, 800ea80 <__ieee754_pow+0x88>
 800ea62:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ea66:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ea6a:	ea55 050a 	orrs.w	r5, r5, sl
 800ea6e:	d1dc      	bne.n	800ea2a <__ieee754_pow+0x32>
 800ea70:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ea74:	18db      	adds	r3, r3, r3
 800ea76:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ea7a:	4152      	adcs	r2, r2
 800ea7c:	429d      	cmp	r5, r3
 800ea7e:	e7d0      	b.n	800ea22 <__ieee754_pow+0x2a>
 800ea80:	2d00      	cmp	r5, #0
 800ea82:	da3b      	bge.n	800eafc <__ieee754_pow+0x104>
 800ea84:	4b72      	ldr	r3, [pc, #456]	; (800ec50 <__ieee754_pow+0x258>)
 800ea86:	4598      	cmp	r8, r3
 800ea88:	dc51      	bgt.n	800eb2e <__ieee754_pow+0x136>
 800ea8a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ea8e:	4598      	cmp	r8, r3
 800ea90:	f340 84ab 	ble.w	800f3ea <__ieee754_pow+0x9f2>
 800ea94:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ea98:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ea9c:	2b14      	cmp	r3, #20
 800ea9e:	dd0f      	ble.n	800eac0 <__ieee754_pow+0xc8>
 800eaa0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800eaa4:	fa22 f103 	lsr.w	r1, r2, r3
 800eaa8:	fa01 f303 	lsl.w	r3, r1, r3
 800eaac:	4293      	cmp	r3, r2
 800eaae:	f040 849c 	bne.w	800f3ea <__ieee754_pow+0x9f2>
 800eab2:	f001 0101 	and.w	r1, r1, #1
 800eab6:	f1c1 0302 	rsb	r3, r1, #2
 800eaba:	9304      	str	r3, [sp, #16]
 800eabc:	b182      	cbz	r2, 800eae0 <__ieee754_pow+0xe8>
 800eabe:	e05f      	b.n	800eb80 <__ieee754_pow+0x188>
 800eac0:	2a00      	cmp	r2, #0
 800eac2:	d15b      	bne.n	800eb7c <__ieee754_pow+0x184>
 800eac4:	f1c3 0314 	rsb	r3, r3, #20
 800eac8:	fa48 f103 	asr.w	r1, r8, r3
 800eacc:	fa01 f303 	lsl.w	r3, r1, r3
 800ead0:	4543      	cmp	r3, r8
 800ead2:	f040 8487 	bne.w	800f3e4 <__ieee754_pow+0x9ec>
 800ead6:	f001 0101 	and.w	r1, r1, #1
 800eada:	f1c1 0302 	rsb	r3, r1, #2
 800eade:	9304      	str	r3, [sp, #16]
 800eae0:	4b5c      	ldr	r3, [pc, #368]	; (800ec54 <__ieee754_pow+0x25c>)
 800eae2:	4598      	cmp	r8, r3
 800eae4:	d132      	bne.n	800eb4c <__ieee754_pow+0x154>
 800eae6:	f1b9 0f00 	cmp.w	r9, #0
 800eaea:	f280 8477 	bge.w	800f3dc <__ieee754_pow+0x9e4>
 800eaee:	4959      	ldr	r1, [pc, #356]	; (800ec54 <__ieee754_pow+0x25c>)
 800eaf0:	4632      	mov	r2, r6
 800eaf2:	463b      	mov	r3, r7
 800eaf4:	2000      	movs	r0, #0
 800eaf6:	f7f1 fed1 	bl	800089c <__aeabi_ddiv>
 800eafa:	e79c      	b.n	800ea36 <__ieee754_pow+0x3e>
 800eafc:	2300      	movs	r3, #0
 800eafe:	9304      	str	r3, [sp, #16]
 800eb00:	2a00      	cmp	r2, #0
 800eb02:	d13d      	bne.n	800eb80 <__ieee754_pow+0x188>
 800eb04:	4b51      	ldr	r3, [pc, #324]	; (800ec4c <__ieee754_pow+0x254>)
 800eb06:	4598      	cmp	r8, r3
 800eb08:	d1ea      	bne.n	800eae0 <__ieee754_pow+0xe8>
 800eb0a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800eb0e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800eb12:	ea53 030a 	orrs.w	r3, r3, sl
 800eb16:	f000 8459 	beq.w	800f3cc <__ieee754_pow+0x9d4>
 800eb1a:	4b4f      	ldr	r3, [pc, #316]	; (800ec58 <__ieee754_pow+0x260>)
 800eb1c:	429c      	cmp	r4, r3
 800eb1e:	dd08      	ble.n	800eb32 <__ieee754_pow+0x13a>
 800eb20:	f1b9 0f00 	cmp.w	r9, #0
 800eb24:	f2c0 8456 	blt.w	800f3d4 <__ieee754_pow+0x9dc>
 800eb28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb2c:	e783      	b.n	800ea36 <__ieee754_pow+0x3e>
 800eb2e:	2302      	movs	r3, #2
 800eb30:	e7e5      	b.n	800eafe <__ieee754_pow+0x106>
 800eb32:	f1b9 0f00 	cmp.w	r9, #0
 800eb36:	f04f 0000 	mov.w	r0, #0
 800eb3a:	f04f 0100 	mov.w	r1, #0
 800eb3e:	f6bf af7a 	bge.w	800ea36 <__ieee754_pow+0x3e>
 800eb42:	e9dd 0300 	ldrd	r0, r3, [sp]
 800eb46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800eb4a:	e774      	b.n	800ea36 <__ieee754_pow+0x3e>
 800eb4c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800eb50:	d106      	bne.n	800eb60 <__ieee754_pow+0x168>
 800eb52:	4632      	mov	r2, r6
 800eb54:	463b      	mov	r3, r7
 800eb56:	4630      	mov	r0, r6
 800eb58:	4639      	mov	r1, r7
 800eb5a:	f7f1 fd75 	bl	8000648 <__aeabi_dmul>
 800eb5e:	e76a      	b.n	800ea36 <__ieee754_pow+0x3e>
 800eb60:	4b3e      	ldr	r3, [pc, #248]	; (800ec5c <__ieee754_pow+0x264>)
 800eb62:	4599      	cmp	r9, r3
 800eb64:	d10c      	bne.n	800eb80 <__ieee754_pow+0x188>
 800eb66:	2d00      	cmp	r5, #0
 800eb68:	db0a      	blt.n	800eb80 <__ieee754_pow+0x188>
 800eb6a:	ec47 6b10 	vmov	d0, r6, r7
 800eb6e:	b009      	add	sp, #36	; 0x24
 800eb70:	ecbd 8b06 	vpop	{d8-d10}
 800eb74:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb78:	f000 bd20 	b.w	800f5bc <__ieee754_sqrt>
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	9304      	str	r3, [sp, #16]
 800eb80:	ec47 6b10 	vmov	d0, r6, r7
 800eb84:	f000 fc62 	bl	800f44c <fabs>
 800eb88:	ec51 0b10 	vmov	r0, r1, d0
 800eb8c:	f1ba 0f00 	cmp.w	sl, #0
 800eb90:	d129      	bne.n	800ebe6 <__ieee754_pow+0x1ee>
 800eb92:	b124      	cbz	r4, 800eb9e <__ieee754_pow+0x1a6>
 800eb94:	4b2f      	ldr	r3, [pc, #188]	; (800ec54 <__ieee754_pow+0x25c>)
 800eb96:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800eb9a:	429a      	cmp	r2, r3
 800eb9c:	d123      	bne.n	800ebe6 <__ieee754_pow+0x1ee>
 800eb9e:	f1b9 0f00 	cmp.w	r9, #0
 800eba2:	da05      	bge.n	800ebb0 <__ieee754_pow+0x1b8>
 800eba4:	4602      	mov	r2, r0
 800eba6:	460b      	mov	r3, r1
 800eba8:	2000      	movs	r0, #0
 800ebaa:	492a      	ldr	r1, [pc, #168]	; (800ec54 <__ieee754_pow+0x25c>)
 800ebac:	f7f1 fe76 	bl	800089c <__aeabi_ddiv>
 800ebb0:	2d00      	cmp	r5, #0
 800ebb2:	f6bf af40 	bge.w	800ea36 <__ieee754_pow+0x3e>
 800ebb6:	9b04      	ldr	r3, [sp, #16]
 800ebb8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ebbc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ebc0:	431c      	orrs	r4, r3
 800ebc2:	d108      	bne.n	800ebd6 <__ieee754_pow+0x1de>
 800ebc4:	4602      	mov	r2, r0
 800ebc6:	460b      	mov	r3, r1
 800ebc8:	4610      	mov	r0, r2
 800ebca:	4619      	mov	r1, r3
 800ebcc:	f7f1 fb84 	bl	80002d8 <__aeabi_dsub>
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	e78f      	b.n	800eaf6 <__ieee754_pow+0xfe>
 800ebd6:	9b04      	ldr	r3, [sp, #16]
 800ebd8:	2b01      	cmp	r3, #1
 800ebda:	f47f af2c 	bne.w	800ea36 <__ieee754_pow+0x3e>
 800ebde:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebe2:	4619      	mov	r1, r3
 800ebe4:	e727      	b.n	800ea36 <__ieee754_pow+0x3e>
 800ebe6:	0feb      	lsrs	r3, r5, #31
 800ebe8:	3b01      	subs	r3, #1
 800ebea:	9306      	str	r3, [sp, #24]
 800ebec:	9a06      	ldr	r2, [sp, #24]
 800ebee:	9b04      	ldr	r3, [sp, #16]
 800ebf0:	4313      	orrs	r3, r2
 800ebf2:	d102      	bne.n	800ebfa <__ieee754_pow+0x202>
 800ebf4:	4632      	mov	r2, r6
 800ebf6:	463b      	mov	r3, r7
 800ebf8:	e7e6      	b.n	800ebc8 <__ieee754_pow+0x1d0>
 800ebfa:	4b19      	ldr	r3, [pc, #100]	; (800ec60 <__ieee754_pow+0x268>)
 800ebfc:	4598      	cmp	r8, r3
 800ebfe:	f340 80fb 	ble.w	800edf8 <__ieee754_pow+0x400>
 800ec02:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ec06:	4598      	cmp	r8, r3
 800ec08:	4b13      	ldr	r3, [pc, #76]	; (800ec58 <__ieee754_pow+0x260>)
 800ec0a:	dd0c      	ble.n	800ec26 <__ieee754_pow+0x22e>
 800ec0c:	429c      	cmp	r4, r3
 800ec0e:	dc0f      	bgt.n	800ec30 <__ieee754_pow+0x238>
 800ec10:	f1b9 0f00 	cmp.w	r9, #0
 800ec14:	da0f      	bge.n	800ec36 <__ieee754_pow+0x23e>
 800ec16:	2000      	movs	r0, #0
 800ec18:	b009      	add	sp, #36	; 0x24
 800ec1a:	ecbd 8b06 	vpop	{d8-d10}
 800ec1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec22:	f000 bcc2 	b.w	800f5aa <__math_oflow>
 800ec26:	429c      	cmp	r4, r3
 800ec28:	dbf2      	blt.n	800ec10 <__ieee754_pow+0x218>
 800ec2a:	4b0a      	ldr	r3, [pc, #40]	; (800ec54 <__ieee754_pow+0x25c>)
 800ec2c:	429c      	cmp	r4, r3
 800ec2e:	dd19      	ble.n	800ec64 <__ieee754_pow+0x26c>
 800ec30:	f1b9 0f00 	cmp.w	r9, #0
 800ec34:	dcef      	bgt.n	800ec16 <__ieee754_pow+0x21e>
 800ec36:	2000      	movs	r0, #0
 800ec38:	b009      	add	sp, #36	; 0x24
 800ec3a:	ecbd 8b06 	vpop	{d8-d10}
 800ec3e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec42:	f000 bca9 	b.w	800f598 <__math_uflow>
 800ec46:	bf00      	nop
 800ec48:	fff00000 	.word	0xfff00000
 800ec4c:	7ff00000 	.word	0x7ff00000
 800ec50:	433fffff 	.word	0x433fffff
 800ec54:	3ff00000 	.word	0x3ff00000
 800ec58:	3fefffff 	.word	0x3fefffff
 800ec5c:	3fe00000 	.word	0x3fe00000
 800ec60:	41e00000 	.word	0x41e00000
 800ec64:	4b60      	ldr	r3, [pc, #384]	; (800ede8 <__ieee754_pow+0x3f0>)
 800ec66:	2200      	movs	r2, #0
 800ec68:	f7f1 fb36 	bl	80002d8 <__aeabi_dsub>
 800ec6c:	a354      	add	r3, pc, #336	; (adr r3, 800edc0 <__ieee754_pow+0x3c8>)
 800ec6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec72:	4604      	mov	r4, r0
 800ec74:	460d      	mov	r5, r1
 800ec76:	f7f1 fce7 	bl	8000648 <__aeabi_dmul>
 800ec7a:	a353      	add	r3, pc, #332	; (adr r3, 800edc8 <__ieee754_pow+0x3d0>)
 800ec7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec80:	4606      	mov	r6, r0
 800ec82:	460f      	mov	r7, r1
 800ec84:	4620      	mov	r0, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	f7f1 fcde 	bl	8000648 <__aeabi_dmul>
 800ec8c:	4b57      	ldr	r3, [pc, #348]	; (800edec <__ieee754_pow+0x3f4>)
 800ec8e:	4682      	mov	sl, r0
 800ec90:	468b      	mov	fp, r1
 800ec92:	2200      	movs	r2, #0
 800ec94:	4620      	mov	r0, r4
 800ec96:	4629      	mov	r1, r5
 800ec98:	f7f1 fcd6 	bl	8000648 <__aeabi_dmul>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	460b      	mov	r3, r1
 800eca0:	a14b      	add	r1, pc, #300	; (adr r1, 800edd0 <__ieee754_pow+0x3d8>)
 800eca2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eca6:	f7f1 fb17 	bl	80002d8 <__aeabi_dsub>
 800ecaa:	4622      	mov	r2, r4
 800ecac:	462b      	mov	r3, r5
 800ecae:	f7f1 fccb 	bl	8000648 <__aeabi_dmul>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	2000      	movs	r0, #0
 800ecb8:	494d      	ldr	r1, [pc, #308]	; (800edf0 <__ieee754_pow+0x3f8>)
 800ecba:	f7f1 fb0d 	bl	80002d8 <__aeabi_dsub>
 800ecbe:	4622      	mov	r2, r4
 800ecc0:	4680      	mov	r8, r0
 800ecc2:	4689      	mov	r9, r1
 800ecc4:	462b      	mov	r3, r5
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	4629      	mov	r1, r5
 800ecca:	f7f1 fcbd 	bl	8000648 <__aeabi_dmul>
 800ecce:	4602      	mov	r2, r0
 800ecd0:	460b      	mov	r3, r1
 800ecd2:	4640      	mov	r0, r8
 800ecd4:	4649      	mov	r1, r9
 800ecd6:	f7f1 fcb7 	bl	8000648 <__aeabi_dmul>
 800ecda:	a33f      	add	r3, pc, #252	; (adr r3, 800edd8 <__ieee754_pow+0x3e0>)
 800ecdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece0:	f7f1 fcb2 	bl	8000648 <__aeabi_dmul>
 800ece4:	4602      	mov	r2, r0
 800ece6:	460b      	mov	r3, r1
 800ece8:	4650      	mov	r0, sl
 800ecea:	4659      	mov	r1, fp
 800ecec:	f7f1 faf4 	bl	80002d8 <__aeabi_dsub>
 800ecf0:	4602      	mov	r2, r0
 800ecf2:	460b      	mov	r3, r1
 800ecf4:	4680      	mov	r8, r0
 800ecf6:	4689      	mov	r9, r1
 800ecf8:	4630      	mov	r0, r6
 800ecfa:	4639      	mov	r1, r7
 800ecfc:	f7f1 faee 	bl	80002dc <__adddf3>
 800ed00:	2000      	movs	r0, #0
 800ed02:	4632      	mov	r2, r6
 800ed04:	463b      	mov	r3, r7
 800ed06:	4604      	mov	r4, r0
 800ed08:	460d      	mov	r5, r1
 800ed0a:	f7f1 fae5 	bl	80002d8 <__aeabi_dsub>
 800ed0e:	4602      	mov	r2, r0
 800ed10:	460b      	mov	r3, r1
 800ed12:	4640      	mov	r0, r8
 800ed14:	4649      	mov	r1, r9
 800ed16:	f7f1 fadf 	bl	80002d8 <__aeabi_dsub>
 800ed1a:	9b04      	ldr	r3, [sp, #16]
 800ed1c:	9a06      	ldr	r2, [sp, #24]
 800ed1e:	3b01      	subs	r3, #1
 800ed20:	4313      	orrs	r3, r2
 800ed22:	4682      	mov	sl, r0
 800ed24:	468b      	mov	fp, r1
 800ed26:	f040 81e7 	bne.w	800f0f8 <__ieee754_pow+0x700>
 800ed2a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ede0 <__ieee754_pow+0x3e8>
 800ed2e:	eeb0 8a47 	vmov.f32	s16, s14
 800ed32:	eef0 8a67 	vmov.f32	s17, s15
 800ed36:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ed3a:	2600      	movs	r6, #0
 800ed3c:	4632      	mov	r2, r6
 800ed3e:	463b      	mov	r3, r7
 800ed40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed44:	f7f1 fac8 	bl	80002d8 <__aeabi_dsub>
 800ed48:	4622      	mov	r2, r4
 800ed4a:	462b      	mov	r3, r5
 800ed4c:	f7f1 fc7c 	bl	8000648 <__aeabi_dmul>
 800ed50:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed54:	4680      	mov	r8, r0
 800ed56:	4689      	mov	r9, r1
 800ed58:	4650      	mov	r0, sl
 800ed5a:	4659      	mov	r1, fp
 800ed5c:	f7f1 fc74 	bl	8000648 <__aeabi_dmul>
 800ed60:	4602      	mov	r2, r0
 800ed62:	460b      	mov	r3, r1
 800ed64:	4640      	mov	r0, r8
 800ed66:	4649      	mov	r1, r9
 800ed68:	f7f1 fab8 	bl	80002dc <__adddf3>
 800ed6c:	4632      	mov	r2, r6
 800ed6e:	463b      	mov	r3, r7
 800ed70:	4680      	mov	r8, r0
 800ed72:	4689      	mov	r9, r1
 800ed74:	4620      	mov	r0, r4
 800ed76:	4629      	mov	r1, r5
 800ed78:	f7f1 fc66 	bl	8000648 <__aeabi_dmul>
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	4604      	mov	r4, r0
 800ed80:	460d      	mov	r5, r1
 800ed82:	4602      	mov	r2, r0
 800ed84:	4649      	mov	r1, r9
 800ed86:	4640      	mov	r0, r8
 800ed88:	f7f1 faa8 	bl	80002dc <__adddf3>
 800ed8c:	4b19      	ldr	r3, [pc, #100]	; (800edf4 <__ieee754_pow+0x3fc>)
 800ed8e:	4299      	cmp	r1, r3
 800ed90:	ec45 4b19 	vmov	d9, r4, r5
 800ed94:	4606      	mov	r6, r0
 800ed96:	460f      	mov	r7, r1
 800ed98:	468b      	mov	fp, r1
 800ed9a:	f340 82f0 	ble.w	800f37e <__ieee754_pow+0x986>
 800ed9e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800eda2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800eda6:	4303      	orrs	r3, r0
 800eda8:	f000 81e4 	beq.w	800f174 <__ieee754_pow+0x77c>
 800edac:	ec51 0b18 	vmov	r0, r1, d8
 800edb0:	2200      	movs	r2, #0
 800edb2:	2300      	movs	r3, #0
 800edb4:	f7f1 feba 	bl	8000b2c <__aeabi_dcmplt>
 800edb8:	3800      	subs	r0, #0
 800edba:	bf18      	it	ne
 800edbc:	2001      	movne	r0, #1
 800edbe:	e72b      	b.n	800ec18 <__ieee754_pow+0x220>
 800edc0:	60000000 	.word	0x60000000
 800edc4:	3ff71547 	.word	0x3ff71547
 800edc8:	f85ddf44 	.word	0xf85ddf44
 800edcc:	3e54ae0b 	.word	0x3e54ae0b
 800edd0:	55555555 	.word	0x55555555
 800edd4:	3fd55555 	.word	0x3fd55555
 800edd8:	652b82fe 	.word	0x652b82fe
 800eddc:	3ff71547 	.word	0x3ff71547
 800ede0:	00000000 	.word	0x00000000
 800ede4:	bff00000 	.word	0xbff00000
 800ede8:	3ff00000 	.word	0x3ff00000
 800edec:	3fd00000 	.word	0x3fd00000
 800edf0:	3fe00000 	.word	0x3fe00000
 800edf4:	408fffff 	.word	0x408fffff
 800edf8:	4bd5      	ldr	r3, [pc, #852]	; (800f150 <__ieee754_pow+0x758>)
 800edfa:	402b      	ands	r3, r5
 800edfc:	2200      	movs	r2, #0
 800edfe:	b92b      	cbnz	r3, 800ee0c <__ieee754_pow+0x414>
 800ee00:	4bd4      	ldr	r3, [pc, #848]	; (800f154 <__ieee754_pow+0x75c>)
 800ee02:	f7f1 fc21 	bl	8000648 <__aeabi_dmul>
 800ee06:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ee0a:	460c      	mov	r4, r1
 800ee0c:	1523      	asrs	r3, r4, #20
 800ee0e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ee12:	4413      	add	r3, r2
 800ee14:	9305      	str	r3, [sp, #20]
 800ee16:	4bd0      	ldr	r3, [pc, #832]	; (800f158 <__ieee754_pow+0x760>)
 800ee18:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ee1c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ee20:	429c      	cmp	r4, r3
 800ee22:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ee26:	dd08      	ble.n	800ee3a <__ieee754_pow+0x442>
 800ee28:	4bcc      	ldr	r3, [pc, #816]	; (800f15c <__ieee754_pow+0x764>)
 800ee2a:	429c      	cmp	r4, r3
 800ee2c:	f340 8162 	ble.w	800f0f4 <__ieee754_pow+0x6fc>
 800ee30:	9b05      	ldr	r3, [sp, #20]
 800ee32:	3301      	adds	r3, #1
 800ee34:	9305      	str	r3, [sp, #20]
 800ee36:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ee3a:	2400      	movs	r4, #0
 800ee3c:	00e3      	lsls	r3, r4, #3
 800ee3e:	9307      	str	r3, [sp, #28]
 800ee40:	4bc7      	ldr	r3, [pc, #796]	; (800f160 <__ieee754_pow+0x768>)
 800ee42:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee46:	ed93 7b00 	vldr	d7, [r3]
 800ee4a:	4629      	mov	r1, r5
 800ee4c:	ec53 2b17 	vmov	r2, r3, d7
 800ee50:	eeb0 9a47 	vmov.f32	s18, s14
 800ee54:	eef0 9a67 	vmov.f32	s19, s15
 800ee58:	4682      	mov	sl, r0
 800ee5a:	f7f1 fa3d 	bl	80002d8 <__aeabi_dsub>
 800ee5e:	4652      	mov	r2, sl
 800ee60:	4606      	mov	r6, r0
 800ee62:	460f      	mov	r7, r1
 800ee64:	462b      	mov	r3, r5
 800ee66:	ec51 0b19 	vmov	r0, r1, d9
 800ee6a:	f7f1 fa37 	bl	80002dc <__adddf3>
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	2000      	movs	r0, #0
 800ee74:	49bb      	ldr	r1, [pc, #748]	; (800f164 <__ieee754_pow+0x76c>)
 800ee76:	f7f1 fd11 	bl	800089c <__aeabi_ddiv>
 800ee7a:	ec41 0b1a 	vmov	d10, r0, r1
 800ee7e:	4602      	mov	r2, r0
 800ee80:	460b      	mov	r3, r1
 800ee82:	4630      	mov	r0, r6
 800ee84:	4639      	mov	r1, r7
 800ee86:	f7f1 fbdf 	bl	8000648 <__aeabi_dmul>
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee90:	9302      	str	r3, [sp, #8]
 800ee92:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ee96:	46ab      	mov	fp, r5
 800ee98:	106d      	asrs	r5, r5, #1
 800ee9a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ee9e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800eea2:	ec41 0b18 	vmov	d8, r0, r1
 800eea6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800eeaa:	2200      	movs	r2, #0
 800eeac:	4640      	mov	r0, r8
 800eeae:	4649      	mov	r1, r9
 800eeb0:	4614      	mov	r4, r2
 800eeb2:	461d      	mov	r5, r3
 800eeb4:	f7f1 fbc8 	bl	8000648 <__aeabi_dmul>
 800eeb8:	4602      	mov	r2, r0
 800eeba:	460b      	mov	r3, r1
 800eebc:	4630      	mov	r0, r6
 800eebe:	4639      	mov	r1, r7
 800eec0:	f7f1 fa0a 	bl	80002d8 <__aeabi_dsub>
 800eec4:	ec53 2b19 	vmov	r2, r3, d9
 800eec8:	4606      	mov	r6, r0
 800eeca:	460f      	mov	r7, r1
 800eecc:	4620      	mov	r0, r4
 800eece:	4629      	mov	r1, r5
 800eed0:	f7f1 fa02 	bl	80002d8 <__aeabi_dsub>
 800eed4:	4602      	mov	r2, r0
 800eed6:	460b      	mov	r3, r1
 800eed8:	4650      	mov	r0, sl
 800eeda:	4659      	mov	r1, fp
 800eedc:	f7f1 f9fc 	bl	80002d8 <__aeabi_dsub>
 800eee0:	4642      	mov	r2, r8
 800eee2:	464b      	mov	r3, r9
 800eee4:	f7f1 fbb0 	bl	8000648 <__aeabi_dmul>
 800eee8:	4602      	mov	r2, r0
 800eeea:	460b      	mov	r3, r1
 800eeec:	4630      	mov	r0, r6
 800eeee:	4639      	mov	r1, r7
 800eef0:	f7f1 f9f2 	bl	80002d8 <__aeabi_dsub>
 800eef4:	ec53 2b1a 	vmov	r2, r3, d10
 800eef8:	f7f1 fba6 	bl	8000648 <__aeabi_dmul>
 800eefc:	ec53 2b18 	vmov	r2, r3, d8
 800ef00:	ec41 0b19 	vmov	d9, r0, r1
 800ef04:	ec51 0b18 	vmov	r0, r1, d8
 800ef08:	f7f1 fb9e 	bl	8000648 <__aeabi_dmul>
 800ef0c:	a37c      	add	r3, pc, #496	; (adr r3, 800f100 <__ieee754_pow+0x708>)
 800ef0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef12:	4604      	mov	r4, r0
 800ef14:	460d      	mov	r5, r1
 800ef16:	f7f1 fb97 	bl	8000648 <__aeabi_dmul>
 800ef1a:	a37b      	add	r3, pc, #492	; (adr r3, 800f108 <__ieee754_pow+0x710>)
 800ef1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef20:	f7f1 f9dc 	bl	80002dc <__adddf3>
 800ef24:	4622      	mov	r2, r4
 800ef26:	462b      	mov	r3, r5
 800ef28:	f7f1 fb8e 	bl	8000648 <__aeabi_dmul>
 800ef2c:	a378      	add	r3, pc, #480	; (adr r3, 800f110 <__ieee754_pow+0x718>)
 800ef2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef32:	f7f1 f9d3 	bl	80002dc <__adddf3>
 800ef36:	4622      	mov	r2, r4
 800ef38:	462b      	mov	r3, r5
 800ef3a:	f7f1 fb85 	bl	8000648 <__aeabi_dmul>
 800ef3e:	a376      	add	r3, pc, #472	; (adr r3, 800f118 <__ieee754_pow+0x720>)
 800ef40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef44:	f7f1 f9ca 	bl	80002dc <__adddf3>
 800ef48:	4622      	mov	r2, r4
 800ef4a:	462b      	mov	r3, r5
 800ef4c:	f7f1 fb7c 	bl	8000648 <__aeabi_dmul>
 800ef50:	a373      	add	r3, pc, #460	; (adr r3, 800f120 <__ieee754_pow+0x728>)
 800ef52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef56:	f7f1 f9c1 	bl	80002dc <__adddf3>
 800ef5a:	4622      	mov	r2, r4
 800ef5c:	462b      	mov	r3, r5
 800ef5e:	f7f1 fb73 	bl	8000648 <__aeabi_dmul>
 800ef62:	a371      	add	r3, pc, #452	; (adr r3, 800f128 <__ieee754_pow+0x730>)
 800ef64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef68:	f7f1 f9b8 	bl	80002dc <__adddf3>
 800ef6c:	4622      	mov	r2, r4
 800ef6e:	4606      	mov	r6, r0
 800ef70:	460f      	mov	r7, r1
 800ef72:	462b      	mov	r3, r5
 800ef74:	4620      	mov	r0, r4
 800ef76:	4629      	mov	r1, r5
 800ef78:	f7f1 fb66 	bl	8000648 <__aeabi_dmul>
 800ef7c:	4602      	mov	r2, r0
 800ef7e:	460b      	mov	r3, r1
 800ef80:	4630      	mov	r0, r6
 800ef82:	4639      	mov	r1, r7
 800ef84:	f7f1 fb60 	bl	8000648 <__aeabi_dmul>
 800ef88:	4642      	mov	r2, r8
 800ef8a:	4604      	mov	r4, r0
 800ef8c:	460d      	mov	r5, r1
 800ef8e:	464b      	mov	r3, r9
 800ef90:	ec51 0b18 	vmov	r0, r1, d8
 800ef94:	f7f1 f9a2 	bl	80002dc <__adddf3>
 800ef98:	ec53 2b19 	vmov	r2, r3, d9
 800ef9c:	f7f1 fb54 	bl	8000648 <__aeabi_dmul>
 800efa0:	4622      	mov	r2, r4
 800efa2:	462b      	mov	r3, r5
 800efa4:	f7f1 f99a 	bl	80002dc <__adddf3>
 800efa8:	4642      	mov	r2, r8
 800efaa:	4682      	mov	sl, r0
 800efac:	468b      	mov	fp, r1
 800efae:	464b      	mov	r3, r9
 800efb0:	4640      	mov	r0, r8
 800efb2:	4649      	mov	r1, r9
 800efb4:	f7f1 fb48 	bl	8000648 <__aeabi_dmul>
 800efb8:	4b6b      	ldr	r3, [pc, #428]	; (800f168 <__ieee754_pow+0x770>)
 800efba:	2200      	movs	r2, #0
 800efbc:	4606      	mov	r6, r0
 800efbe:	460f      	mov	r7, r1
 800efc0:	f7f1 f98c 	bl	80002dc <__adddf3>
 800efc4:	4652      	mov	r2, sl
 800efc6:	465b      	mov	r3, fp
 800efc8:	f7f1 f988 	bl	80002dc <__adddf3>
 800efcc:	2000      	movs	r0, #0
 800efce:	4604      	mov	r4, r0
 800efd0:	460d      	mov	r5, r1
 800efd2:	4602      	mov	r2, r0
 800efd4:	460b      	mov	r3, r1
 800efd6:	4640      	mov	r0, r8
 800efd8:	4649      	mov	r1, r9
 800efda:	f7f1 fb35 	bl	8000648 <__aeabi_dmul>
 800efde:	4b62      	ldr	r3, [pc, #392]	; (800f168 <__ieee754_pow+0x770>)
 800efe0:	4680      	mov	r8, r0
 800efe2:	4689      	mov	r9, r1
 800efe4:	2200      	movs	r2, #0
 800efe6:	4620      	mov	r0, r4
 800efe8:	4629      	mov	r1, r5
 800efea:	f7f1 f975 	bl	80002d8 <__aeabi_dsub>
 800efee:	4632      	mov	r2, r6
 800eff0:	463b      	mov	r3, r7
 800eff2:	f7f1 f971 	bl	80002d8 <__aeabi_dsub>
 800eff6:	4602      	mov	r2, r0
 800eff8:	460b      	mov	r3, r1
 800effa:	4650      	mov	r0, sl
 800effc:	4659      	mov	r1, fp
 800effe:	f7f1 f96b 	bl	80002d8 <__aeabi_dsub>
 800f002:	ec53 2b18 	vmov	r2, r3, d8
 800f006:	f7f1 fb1f 	bl	8000648 <__aeabi_dmul>
 800f00a:	4622      	mov	r2, r4
 800f00c:	4606      	mov	r6, r0
 800f00e:	460f      	mov	r7, r1
 800f010:	462b      	mov	r3, r5
 800f012:	ec51 0b19 	vmov	r0, r1, d9
 800f016:	f7f1 fb17 	bl	8000648 <__aeabi_dmul>
 800f01a:	4602      	mov	r2, r0
 800f01c:	460b      	mov	r3, r1
 800f01e:	4630      	mov	r0, r6
 800f020:	4639      	mov	r1, r7
 800f022:	f7f1 f95b 	bl	80002dc <__adddf3>
 800f026:	4606      	mov	r6, r0
 800f028:	460f      	mov	r7, r1
 800f02a:	4602      	mov	r2, r0
 800f02c:	460b      	mov	r3, r1
 800f02e:	4640      	mov	r0, r8
 800f030:	4649      	mov	r1, r9
 800f032:	f7f1 f953 	bl	80002dc <__adddf3>
 800f036:	a33e      	add	r3, pc, #248	; (adr r3, 800f130 <__ieee754_pow+0x738>)
 800f038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f03c:	2000      	movs	r0, #0
 800f03e:	4604      	mov	r4, r0
 800f040:	460d      	mov	r5, r1
 800f042:	f7f1 fb01 	bl	8000648 <__aeabi_dmul>
 800f046:	4642      	mov	r2, r8
 800f048:	ec41 0b18 	vmov	d8, r0, r1
 800f04c:	464b      	mov	r3, r9
 800f04e:	4620      	mov	r0, r4
 800f050:	4629      	mov	r1, r5
 800f052:	f7f1 f941 	bl	80002d8 <__aeabi_dsub>
 800f056:	4602      	mov	r2, r0
 800f058:	460b      	mov	r3, r1
 800f05a:	4630      	mov	r0, r6
 800f05c:	4639      	mov	r1, r7
 800f05e:	f7f1 f93b 	bl	80002d8 <__aeabi_dsub>
 800f062:	a335      	add	r3, pc, #212	; (adr r3, 800f138 <__ieee754_pow+0x740>)
 800f064:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f068:	f7f1 faee 	bl	8000648 <__aeabi_dmul>
 800f06c:	a334      	add	r3, pc, #208	; (adr r3, 800f140 <__ieee754_pow+0x748>)
 800f06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f072:	4606      	mov	r6, r0
 800f074:	460f      	mov	r7, r1
 800f076:	4620      	mov	r0, r4
 800f078:	4629      	mov	r1, r5
 800f07a:	f7f1 fae5 	bl	8000648 <__aeabi_dmul>
 800f07e:	4602      	mov	r2, r0
 800f080:	460b      	mov	r3, r1
 800f082:	4630      	mov	r0, r6
 800f084:	4639      	mov	r1, r7
 800f086:	f7f1 f929 	bl	80002dc <__adddf3>
 800f08a:	9a07      	ldr	r2, [sp, #28]
 800f08c:	4b37      	ldr	r3, [pc, #220]	; (800f16c <__ieee754_pow+0x774>)
 800f08e:	4413      	add	r3, r2
 800f090:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f094:	f7f1 f922 	bl	80002dc <__adddf3>
 800f098:	4682      	mov	sl, r0
 800f09a:	9805      	ldr	r0, [sp, #20]
 800f09c:	468b      	mov	fp, r1
 800f09e:	f7f1 fa69 	bl	8000574 <__aeabi_i2d>
 800f0a2:	9a07      	ldr	r2, [sp, #28]
 800f0a4:	4b32      	ldr	r3, [pc, #200]	; (800f170 <__ieee754_pow+0x778>)
 800f0a6:	4413      	add	r3, r2
 800f0a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f0ac:	4606      	mov	r6, r0
 800f0ae:	460f      	mov	r7, r1
 800f0b0:	4652      	mov	r2, sl
 800f0b2:	465b      	mov	r3, fp
 800f0b4:	ec51 0b18 	vmov	r0, r1, d8
 800f0b8:	f7f1 f910 	bl	80002dc <__adddf3>
 800f0bc:	4642      	mov	r2, r8
 800f0be:	464b      	mov	r3, r9
 800f0c0:	f7f1 f90c 	bl	80002dc <__adddf3>
 800f0c4:	4632      	mov	r2, r6
 800f0c6:	463b      	mov	r3, r7
 800f0c8:	f7f1 f908 	bl	80002dc <__adddf3>
 800f0cc:	2000      	movs	r0, #0
 800f0ce:	4632      	mov	r2, r6
 800f0d0:	463b      	mov	r3, r7
 800f0d2:	4604      	mov	r4, r0
 800f0d4:	460d      	mov	r5, r1
 800f0d6:	f7f1 f8ff 	bl	80002d8 <__aeabi_dsub>
 800f0da:	4642      	mov	r2, r8
 800f0dc:	464b      	mov	r3, r9
 800f0de:	f7f1 f8fb 	bl	80002d8 <__aeabi_dsub>
 800f0e2:	ec53 2b18 	vmov	r2, r3, d8
 800f0e6:	f7f1 f8f7 	bl	80002d8 <__aeabi_dsub>
 800f0ea:	4602      	mov	r2, r0
 800f0ec:	460b      	mov	r3, r1
 800f0ee:	4650      	mov	r0, sl
 800f0f0:	4659      	mov	r1, fp
 800f0f2:	e610      	b.n	800ed16 <__ieee754_pow+0x31e>
 800f0f4:	2401      	movs	r4, #1
 800f0f6:	e6a1      	b.n	800ee3c <__ieee754_pow+0x444>
 800f0f8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f148 <__ieee754_pow+0x750>
 800f0fc:	e617      	b.n	800ed2e <__ieee754_pow+0x336>
 800f0fe:	bf00      	nop
 800f100:	4a454eef 	.word	0x4a454eef
 800f104:	3fca7e28 	.word	0x3fca7e28
 800f108:	93c9db65 	.word	0x93c9db65
 800f10c:	3fcd864a 	.word	0x3fcd864a
 800f110:	a91d4101 	.word	0xa91d4101
 800f114:	3fd17460 	.word	0x3fd17460
 800f118:	518f264d 	.word	0x518f264d
 800f11c:	3fd55555 	.word	0x3fd55555
 800f120:	db6fabff 	.word	0xdb6fabff
 800f124:	3fdb6db6 	.word	0x3fdb6db6
 800f128:	33333303 	.word	0x33333303
 800f12c:	3fe33333 	.word	0x3fe33333
 800f130:	e0000000 	.word	0xe0000000
 800f134:	3feec709 	.word	0x3feec709
 800f138:	dc3a03fd 	.word	0xdc3a03fd
 800f13c:	3feec709 	.word	0x3feec709
 800f140:	145b01f5 	.word	0x145b01f5
 800f144:	be3e2fe0 	.word	0xbe3e2fe0
 800f148:	00000000 	.word	0x00000000
 800f14c:	3ff00000 	.word	0x3ff00000
 800f150:	7ff00000 	.word	0x7ff00000
 800f154:	43400000 	.word	0x43400000
 800f158:	0003988e 	.word	0x0003988e
 800f15c:	000bb679 	.word	0x000bb679
 800f160:	08012d60 	.word	0x08012d60
 800f164:	3ff00000 	.word	0x3ff00000
 800f168:	40080000 	.word	0x40080000
 800f16c:	08012d80 	.word	0x08012d80
 800f170:	08012d70 	.word	0x08012d70
 800f174:	a3b3      	add	r3, pc, #716	; (adr r3, 800f444 <__ieee754_pow+0xa4c>)
 800f176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f17a:	4640      	mov	r0, r8
 800f17c:	4649      	mov	r1, r9
 800f17e:	f7f1 f8ad 	bl	80002dc <__adddf3>
 800f182:	4622      	mov	r2, r4
 800f184:	ec41 0b1a 	vmov	d10, r0, r1
 800f188:	462b      	mov	r3, r5
 800f18a:	4630      	mov	r0, r6
 800f18c:	4639      	mov	r1, r7
 800f18e:	f7f1 f8a3 	bl	80002d8 <__aeabi_dsub>
 800f192:	4602      	mov	r2, r0
 800f194:	460b      	mov	r3, r1
 800f196:	ec51 0b1a 	vmov	r0, r1, d10
 800f19a:	f7f1 fce5 	bl	8000b68 <__aeabi_dcmpgt>
 800f19e:	2800      	cmp	r0, #0
 800f1a0:	f47f ae04 	bne.w	800edac <__ieee754_pow+0x3b4>
 800f1a4:	4aa2      	ldr	r2, [pc, #648]	; (800f430 <__ieee754_pow+0xa38>)
 800f1a6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	f340 8107 	ble.w	800f3be <__ieee754_pow+0x9c6>
 800f1b0:	151b      	asrs	r3, r3, #20
 800f1b2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f1b6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f1ba:	fa4a fa03 	asr.w	sl, sl, r3
 800f1be:	44da      	add	sl, fp
 800f1c0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f1c4:	489b      	ldr	r0, [pc, #620]	; (800f434 <__ieee754_pow+0xa3c>)
 800f1c6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f1ca:	4108      	asrs	r0, r1
 800f1cc:	ea00 030a 	and.w	r3, r0, sl
 800f1d0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f1d4:	f1c1 0114 	rsb	r1, r1, #20
 800f1d8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f1dc:	fa4a fa01 	asr.w	sl, sl, r1
 800f1e0:	f1bb 0f00 	cmp.w	fp, #0
 800f1e4:	f04f 0200 	mov.w	r2, #0
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	4629      	mov	r1, r5
 800f1ec:	bfb8      	it	lt
 800f1ee:	f1ca 0a00 	rsblt	sl, sl, #0
 800f1f2:	f7f1 f871 	bl	80002d8 <__aeabi_dsub>
 800f1f6:	ec41 0b19 	vmov	d9, r0, r1
 800f1fa:	4642      	mov	r2, r8
 800f1fc:	464b      	mov	r3, r9
 800f1fe:	ec51 0b19 	vmov	r0, r1, d9
 800f202:	f7f1 f86b 	bl	80002dc <__adddf3>
 800f206:	a37a      	add	r3, pc, #488	; (adr r3, 800f3f0 <__ieee754_pow+0x9f8>)
 800f208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f20c:	2000      	movs	r0, #0
 800f20e:	4604      	mov	r4, r0
 800f210:	460d      	mov	r5, r1
 800f212:	f7f1 fa19 	bl	8000648 <__aeabi_dmul>
 800f216:	ec53 2b19 	vmov	r2, r3, d9
 800f21a:	4606      	mov	r6, r0
 800f21c:	460f      	mov	r7, r1
 800f21e:	4620      	mov	r0, r4
 800f220:	4629      	mov	r1, r5
 800f222:	f7f1 f859 	bl	80002d8 <__aeabi_dsub>
 800f226:	4602      	mov	r2, r0
 800f228:	460b      	mov	r3, r1
 800f22a:	4640      	mov	r0, r8
 800f22c:	4649      	mov	r1, r9
 800f22e:	f7f1 f853 	bl	80002d8 <__aeabi_dsub>
 800f232:	a371      	add	r3, pc, #452	; (adr r3, 800f3f8 <__ieee754_pow+0xa00>)
 800f234:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f238:	f7f1 fa06 	bl	8000648 <__aeabi_dmul>
 800f23c:	a370      	add	r3, pc, #448	; (adr r3, 800f400 <__ieee754_pow+0xa08>)
 800f23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f242:	4680      	mov	r8, r0
 800f244:	4689      	mov	r9, r1
 800f246:	4620      	mov	r0, r4
 800f248:	4629      	mov	r1, r5
 800f24a:	f7f1 f9fd 	bl	8000648 <__aeabi_dmul>
 800f24e:	4602      	mov	r2, r0
 800f250:	460b      	mov	r3, r1
 800f252:	4640      	mov	r0, r8
 800f254:	4649      	mov	r1, r9
 800f256:	f7f1 f841 	bl	80002dc <__adddf3>
 800f25a:	4604      	mov	r4, r0
 800f25c:	460d      	mov	r5, r1
 800f25e:	4602      	mov	r2, r0
 800f260:	460b      	mov	r3, r1
 800f262:	4630      	mov	r0, r6
 800f264:	4639      	mov	r1, r7
 800f266:	f7f1 f839 	bl	80002dc <__adddf3>
 800f26a:	4632      	mov	r2, r6
 800f26c:	463b      	mov	r3, r7
 800f26e:	4680      	mov	r8, r0
 800f270:	4689      	mov	r9, r1
 800f272:	f7f1 f831 	bl	80002d8 <__aeabi_dsub>
 800f276:	4602      	mov	r2, r0
 800f278:	460b      	mov	r3, r1
 800f27a:	4620      	mov	r0, r4
 800f27c:	4629      	mov	r1, r5
 800f27e:	f7f1 f82b 	bl	80002d8 <__aeabi_dsub>
 800f282:	4642      	mov	r2, r8
 800f284:	4606      	mov	r6, r0
 800f286:	460f      	mov	r7, r1
 800f288:	464b      	mov	r3, r9
 800f28a:	4640      	mov	r0, r8
 800f28c:	4649      	mov	r1, r9
 800f28e:	f7f1 f9db 	bl	8000648 <__aeabi_dmul>
 800f292:	a35d      	add	r3, pc, #372	; (adr r3, 800f408 <__ieee754_pow+0xa10>)
 800f294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f298:	4604      	mov	r4, r0
 800f29a:	460d      	mov	r5, r1
 800f29c:	f7f1 f9d4 	bl	8000648 <__aeabi_dmul>
 800f2a0:	a35b      	add	r3, pc, #364	; (adr r3, 800f410 <__ieee754_pow+0xa18>)
 800f2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a6:	f7f1 f817 	bl	80002d8 <__aeabi_dsub>
 800f2aa:	4622      	mov	r2, r4
 800f2ac:	462b      	mov	r3, r5
 800f2ae:	f7f1 f9cb 	bl	8000648 <__aeabi_dmul>
 800f2b2:	a359      	add	r3, pc, #356	; (adr r3, 800f418 <__ieee754_pow+0xa20>)
 800f2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b8:	f7f1 f810 	bl	80002dc <__adddf3>
 800f2bc:	4622      	mov	r2, r4
 800f2be:	462b      	mov	r3, r5
 800f2c0:	f7f1 f9c2 	bl	8000648 <__aeabi_dmul>
 800f2c4:	a356      	add	r3, pc, #344	; (adr r3, 800f420 <__ieee754_pow+0xa28>)
 800f2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ca:	f7f1 f805 	bl	80002d8 <__aeabi_dsub>
 800f2ce:	4622      	mov	r2, r4
 800f2d0:	462b      	mov	r3, r5
 800f2d2:	f7f1 f9b9 	bl	8000648 <__aeabi_dmul>
 800f2d6:	a354      	add	r3, pc, #336	; (adr r3, 800f428 <__ieee754_pow+0xa30>)
 800f2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2dc:	f7f0 fffe 	bl	80002dc <__adddf3>
 800f2e0:	4622      	mov	r2, r4
 800f2e2:	462b      	mov	r3, r5
 800f2e4:	f7f1 f9b0 	bl	8000648 <__aeabi_dmul>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	4640      	mov	r0, r8
 800f2ee:	4649      	mov	r1, r9
 800f2f0:	f7f0 fff2 	bl	80002d8 <__aeabi_dsub>
 800f2f4:	4604      	mov	r4, r0
 800f2f6:	460d      	mov	r5, r1
 800f2f8:	4602      	mov	r2, r0
 800f2fa:	460b      	mov	r3, r1
 800f2fc:	4640      	mov	r0, r8
 800f2fe:	4649      	mov	r1, r9
 800f300:	f7f1 f9a2 	bl	8000648 <__aeabi_dmul>
 800f304:	2200      	movs	r2, #0
 800f306:	ec41 0b19 	vmov	d9, r0, r1
 800f30a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f30e:	4620      	mov	r0, r4
 800f310:	4629      	mov	r1, r5
 800f312:	f7f0 ffe1 	bl	80002d8 <__aeabi_dsub>
 800f316:	4602      	mov	r2, r0
 800f318:	460b      	mov	r3, r1
 800f31a:	ec51 0b19 	vmov	r0, r1, d9
 800f31e:	f7f1 fabd 	bl	800089c <__aeabi_ddiv>
 800f322:	4632      	mov	r2, r6
 800f324:	4604      	mov	r4, r0
 800f326:	460d      	mov	r5, r1
 800f328:	463b      	mov	r3, r7
 800f32a:	4640      	mov	r0, r8
 800f32c:	4649      	mov	r1, r9
 800f32e:	f7f1 f98b 	bl	8000648 <__aeabi_dmul>
 800f332:	4632      	mov	r2, r6
 800f334:	463b      	mov	r3, r7
 800f336:	f7f0 ffd1 	bl	80002dc <__adddf3>
 800f33a:	4602      	mov	r2, r0
 800f33c:	460b      	mov	r3, r1
 800f33e:	4620      	mov	r0, r4
 800f340:	4629      	mov	r1, r5
 800f342:	f7f0 ffc9 	bl	80002d8 <__aeabi_dsub>
 800f346:	4642      	mov	r2, r8
 800f348:	464b      	mov	r3, r9
 800f34a:	f7f0 ffc5 	bl	80002d8 <__aeabi_dsub>
 800f34e:	460b      	mov	r3, r1
 800f350:	4602      	mov	r2, r0
 800f352:	4939      	ldr	r1, [pc, #228]	; (800f438 <__ieee754_pow+0xa40>)
 800f354:	2000      	movs	r0, #0
 800f356:	f7f0 ffbf 	bl	80002d8 <__aeabi_dsub>
 800f35a:	ec41 0b10 	vmov	d0, r0, r1
 800f35e:	ee10 3a90 	vmov	r3, s1
 800f362:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f36a:	da2b      	bge.n	800f3c4 <__ieee754_pow+0x9cc>
 800f36c:	4650      	mov	r0, sl
 800f36e:	f000 f877 	bl	800f460 <scalbn>
 800f372:	ec51 0b10 	vmov	r0, r1, d0
 800f376:	ec53 2b18 	vmov	r2, r3, d8
 800f37a:	f7ff bbee 	b.w	800eb5a <__ieee754_pow+0x162>
 800f37e:	4b2f      	ldr	r3, [pc, #188]	; (800f43c <__ieee754_pow+0xa44>)
 800f380:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f384:	429e      	cmp	r6, r3
 800f386:	f77f af0d 	ble.w	800f1a4 <__ieee754_pow+0x7ac>
 800f38a:	4b2d      	ldr	r3, [pc, #180]	; (800f440 <__ieee754_pow+0xa48>)
 800f38c:	440b      	add	r3, r1
 800f38e:	4303      	orrs	r3, r0
 800f390:	d009      	beq.n	800f3a6 <__ieee754_pow+0x9ae>
 800f392:	ec51 0b18 	vmov	r0, r1, d8
 800f396:	2200      	movs	r2, #0
 800f398:	2300      	movs	r3, #0
 800f39a:	f7f1 fbc7 	bl	8000b2c <__aeabi_dcmplt>
 800f39e:	3800      	subs	r0, #0
 800f3a0:	bf18      	it	ne
 800f3a2:	2001      	movne	r0, #1
 800f3a4:	e448      	b.n	800ec38 <__ieee754_pow+0x240>
 800f3a6:	4622      	mov	r2, r4
 800f3a8:	462b      	mov	r3, r5
 800f3aa:	f7f0 ff95 	bl	80002d8 <__aeabi_dsub>
 800f3ae:	4642      	mov	r2, r8
 800f3b0:	464b      	mov	r3, r9
 800f3b2:	f7f1 fbcf 	bl	8000b54 <__aeabi_dcmpge>
 800f3b6:	2800      	cmp	r0, #0
 800f3b8:	f43f aef4 	beq.w	800f1a4 <__ieee754_pow+0x7ac>
 800f3bc:	e7e9      	b.n	800f392 <__ieee754_pow+0x99a>
 800f3be:	f04f 0a00 	mov.w	sl, #0
 800f3c2:	e71a      	b.n	800f1fa <__ieee754_pow+0x802>
 800f3c4:	ec51 0b10 	vmov	r0, r1, d0
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	e7d4      	b.n	800f376 <__ieee754_pow+0x97e>
 800f3cc:	491a      	ldr	r1, [pc, #104]	; (800f438 <__ieee754_pow+0xa40>)
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	f7ff bb31 	b.w	800ea36 <__ieee754_pow+0x3e>
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	2100      	movs	r1, #0
 800f3d8:	f7ff bb2d 	b.w	800ea36 <__ieee754_pow+0x3e>
 800f3dc:	4630      	mov	r0, r6
 800f3de:	4639      	mov	r1, r7
 800f3e0:	f7ff bb29 	b.w	800ea36 <__ieee754_pow+0x3e>
 800f3e4:	9204      	str	r2, [sp, #16]
 800f3e6:	f7ff bb7b 	b.w	800eae0 <__ieee754_pow+0xe8>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	f7ff bb65 	b.w	800eaba <__ieee754_pow+0xc2>
 800f3f0:	00000000 	.word	0x00000000
 800f3f4:	3fe62e43 	.word	0x3fe62e43
 800f3f8:	fefa39ef 	.word	0xfefa39ef
 800f3fc:	3fe62e42 	.word	0x3fe62e42
 800f400:	0ca86c39 	.word	0x0ca86c39
 800f404:	be205c61 	.word	0xbe205c61
 800f408:	72bea4d0 	.word	0x72bea4d0
 800f40c:	3e663769 	.word	0x3e663769
 800f410:	c5d26bf1 	.word	0xc5d26bf1
 800f414:	3ebbbd41 	.word	0x3ebbbd41
 800f418:	af25de2c 	.word	0xaf25de2c
 800f41c:	3f11566a 	.word	0x3f11566a
 800f420:	16bebd93 	.word	0x16bebd93
 800f424:	3f66c16c 	.word	0x3f66c16c
 800f428:	5555553e 	.word	0x5555553e
 800f42c:	3fc55555 	.word	0x3fc55555
 800f430:	3fe00000 	.word	0x3fe00000
 800f434:	fff00000 	.word	0xfff00000
 800f438:	3ff00000 	.word	0x3ff00000
 800f43c:	4090cbff 	.word	0x4090cbff
 800f440:	3f6f3400 	.word	0x3f6f3400
 800f444:	652b82fe 	.word	0x652b82fe
 800f448:	3c971547 	.word	0x3c971547

0800f44c <fabs>:
 800f44c:	ec51 0b10 	vmov	r0, r1, d0
 800f450:	ee10 2a10 	vmov	r2, s0
 800f454:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f458:	ec43 2b10 	vmov	d0, r2, r3
 800f45c:	4770      	bx	lr
	...

0800f460 <scalbn>:
 800f460:	b570      	push	{r4, r5, r6, lr}
 800f462:	ec55 4b10 	vmov	r4, r5, d0
 800f466:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f46a:	4606      	mov	r6, r0
 800f46c:	462b      	mov	r3, r5
 800f46e:	b999      	cbnz	r1, 800f498 <scalbn+0x38>
 800f470:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f474:	4323      	orrs	r3, r4
 800f476:	d03f      	beq.n	800f4f8 <scalbn+0x98>
 800f478:	4b35      	ldr	r3, [pc, #212]	; (800f550 <scalbn+0xf0>)
 800f47a:	4629      	mov	r1, r5
 800f47c:	ee10 0a10 	vmov	r0, s0
 800f480:	2200      	movs	r2, #0
 800f482:	f7f1 f8e1 	bl	8000648 <__aeabi_dmul>
 800f486:	4b33      	ldr	r3, [pc, #204]	; (800f554 <scalbn+0xf4>)
 800f488:	429e      	cmp	r6, r3
 800f48a:	4604      	mov	r4, r0
 800f48c:	460d      	mov	r5, r1
 800f48e:	da10      	bge.n	800f4b2 <scalbn+0x52>
 800f490:	a327      	add	r3, pc, #156	; (adr r3, 800f530 <scalbn+0xd0>)
 800f492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f496:	e01f      	b.n	800f4d8 <scalbn+0x78>
 800f498:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800f49c:	4291      	cmp	r1, r2
 800f49e:	d10c      	bne.n	800f4ba <scalbn+0x5a>
 800f4a0:	ee10 2a10 	vmov	r2, s0
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	f7f0 ff18 	bl	80002dc <__adddf3>
 800f4ac:	4604      	mov	r4, r0
 800f4ae:	460d      	mov	r5, r1
 800f4b0:	e022      	b.n	800f4f8 <scalbn+0x98>
 800f4b2:	460b      	mov	r3, r1
 800f4b4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f4b8:	3936      	subs	r1, #54	; 0x36
 800f4ba:	f24c 3250 	movw	r2, #50000	; 0xc350
 800f4be:	4296      	cmp	r6, r2
 800f4c0:	dd0d      	ble.n	800f4de <scalbn+0x7e>
 800f4c2:	2d00      	cmp	r5, #0
 800f4c4:	a11c      	add	r1, pc, #112	; (adr r1, 800f538 <scalbn+0xd8>)
 800f4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4ca:	da02      	bge.n	800f4d2 <scalbn+0x72>
 800f4cc:	a11c      	add	r1, pc, #112	; (adr r1, 800f540 <scalbn+0xe0>)
 800f4ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4d2:	a319      	add	r3, pc, #100	; (adr r3, 800f538 <scalbn+0xd8>)
 800f4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d8:	f7f1 f8b6 	bl	8000648 <__aeabi_dmul>
 800f4dc:	e7e6      	b.n	800f4ac <scalbn+0x4c>
 800f4de:	1872      	adds	r2, r6, r1
 800f4e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f4e4:	428a      	cmp	r2, r1
 800f4e6:	dcec      	bgt.n	800f4c2 <scalbn+0x62>
 800f4e8:	2a00      	cmp	r2, #0
 800f4ea:	dd08      	ble.n	800f4fe <scalbn+0x9e>
 800f4ec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f4f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f4f4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f4f8:	ec45 4b10 	vmov	d0, r4, r5
 800f4fc:	bd70      	pop	{r4, r5, r6, pc}
 800f4fe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f502:	da08      	bge.n	800f516 <scalbn+0xb6>
 800f504:	2d00      	cmp	r5, #0
 800f506:	a10a      	add	r1, pc, #40	; (adr r1, 800f530 <scalbn+0xd0>)
 800f508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f50c:	dac0      	bge.n	800f490 <scalbn+0x30>
 800f50e:	a10e      	add	r1, pc, #56	; (adr r1, 800f548 <scalbn+0xe8>)
 800f510:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f514:	e7bc      	b.n	800f490 <scalbn+0x30>
 800f516:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f51a:	3236      	adds	r2, #54	; 0x36
 800f51c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f520:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f524:	4620      	mov	r0, r4
 800f526:	4b0c      	ldr	r3, [pc, #48]	; (800f558 <scalbn+0xf8>)
 800f528:	2200      	movs	r2, #0
 800f52a:	e7d5      	b.n	800f4d8 <scalbn+0x78>
 800f52c:	f3af 8000 	nop.w
 800f530:	c2f8f359 	.word	0xc2f8f359
 800f534:	01a56e1f 	.word	0x01a56e1f
 800f538:	8800759c 	.word	0x8800759c
 800f53c:	7e37e43c 	.word	0x7e37e43c
 800f540:	8800759c 	.word	0x8800759c
 800f544:	fe37e43c 	.word	0xfe37e43c
 800f548:	c2f8f359 	.word	0xc2f8f359
 800f54c:	81a56e1f 	.word	0x81a56e1f
 800f550:	43500000 	.word	0x43500000
 800f554:	ffff3cb0 	.word	0xffff3cb0
 800f558:	3c900000 	.word	0x3c900000

0800f55c <with_errno>:
 800f55c:	b570      	push	{r4, r5, r6, lr}
 800f55e:	4604      	mov	r4, r0
 800f560:	460d      	mov	r5, r1
 800f562:	4616      	mov	r6, r2
 800f564:	f7fd fa7c 	bl	800ca60 <__errno>
 800f568:	4629      	mov	r1, r5
 800f56a:	6006      	str	r6, [r0, #0]
 800f56c:	4620      	mov	r0, r4
 800f56e:	bd70      	pop	{r4, r5, r6, pc}

0800f570 <xflow>:
 800f570:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f572:	4614      	mov	r4, r2
 800f574:	461d      	mov	r5, r3
 800f576:	b108      	cbz	r0, 800f57c <xflow+0xc>
 800f578:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f57c:	e9cd 2300 	strd	r2, r3, [sp]
 800f580:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f584:	4620      	mov	r0, r4
 800f586:	4629      	mov	r1, r5
 800f588:	f7f1 f85e 	bl	8000648 <__aeabi_dmul>
 800f58c:	2222      	movs	r2, #34	; 0x22
 800f58e:	b003      	add	sp, #12
 800f590:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f594:	f7ff bfe2 	b.w	800f55c <with_errno>

0800f598 <__math_uflow>:
 800f598:	b508      	push	{r3, lr}
 800f59a:	2200      	movs	r2, #0
 800f59c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f5a0:	f7ff ffe6 	bl	800f570 <xflow>
 800f5a4:	ec41 0b10 	vmov	d0, r0, r1
 800f5a8:	bd08      	pop	{r3, pc}

0800f5aa <__math_oflow>:
 800f5aa:	b508      	push	{r3, lr}
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f5b2:	f7ff ffdd 	bl	800f570 <xflow>
 800f5b6:	ec41 0b10 	vmov	d0, r0, r1
 800f5ba:	bd08      	pop	{r3, pc}

0800f5bc <__ieee754_sqrt>:
 800f5bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c0:	ec55 4b10 	vmov	r4, r5, d0
 800f5c4:	4e67      	ldr	r6, [pc, #412]	; (800f764 <__ieee754_sqrt+0x1a8>)
 800f5c6:	43ae      	bics	r6, r5
 800f5c8:	ee10 0a10 	vmov	r0, s0
 800f5cc:	ee10 2a10 	vmov	r2, s0
 800f5d0:	4629      	mov	r1, r5
 800f5d2:	462b      	mov	r3, r5
 800f5d4:	d10d      	bne.n	800f5f2 <__ieee754_sqrt+0x36>
 800f5d6:	f7f1 f837 	bl	8000648 <__aeabi_dmul>
 800f5da:	4602      	mov	r2, r0
 800f5dc:	460b      	mov	r3, r1
 800f5de:	4620      	mov	r0, r4
 800f5e0:	4629      	mov	r1, r5
 800f5e2:	f7f0 fe7b 	bl	80002dc <__adddf3>
 800f5e6:	4604      	mov	r4, r0
 800f5e8:	460d      	mov	r5, r1
 800f5ea:	ec45 4b10 	vmov	d0, r4, r5
 800f5ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5f2:	2d00      	cmp	r5, #0
 800f5f4:	dc0b      	bgt.n	800f60e <__ieee754_sqrt+0x52>
 800f5f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f5fa:	4326      	orrs	r6, r4
 800f5fc:	d0f5      	beq.n	800f5ea <__ieee754_sqrt+0x2e>
 800f5fe:	b135      	cbz	r5, 800f60e <__ieee754_sqrt+0x52>
 800f600:	f7f0 fe6a 	bl	80002d8 <__aeabi_dsub>
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	f7f1 f948 	bl	800089c <__aeabi_ddiv>
 800f60c:	e7eb      	b.n	800f5e6 <__ieee754_sqrt+0x2a>
 800f60e:	1509      	asrs	r1, r1, #20
 800f610:	f000 808d 	beq.w	800f72e <__ieee754_sqrt+0x172>
 800f614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f618:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f61c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f620:	07c9      	lsls	r1, r1, #31
 800f622:	bf5c      	itt	pl
 800f624:	005b      	lslpl	r3, r3, #1
 800f626:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f62a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f62e:	bf58      	it	pl
 800f630:	0052      	lslpl	r2, r2, #1
 800f632:	2500      	movs	r5, #0
 800f634:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f638:	1076      	asrs	r6, r6, #1
 800f63a:	0052      	lsls	r2, r2, #1
 800f63c:	f04f 0e16 	mov.w	lr, #22
 800f640:	46ac      	mov	ip, r5
 800f642:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f646:	eb0c 0001 	add.w	r0, ip, r1
 800f64a:	4298      	cmp	r0, r3
 800f64c:	bfde      	ittt	le
 800f64e:	1a1b      	suble	r3, r3, r0
 800f650:	eb00 0c01 	addle.w	ip, r0, r1
 800f654:	186d      	addle	r5, r5, r1
 800f656:	005b      	lsls	r3, r3, #1
 800f658:	f1be 0e01 	subs.w	lr, lr, #1
 800f65c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f660:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f664:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f668:	d1ed      	bne.n	800f646 <__ieee754_sqrt+0x8a>
 800f66a:	4674      	mov	r4, lr
 800f66c:	2720      	movs	r7, #32
 800f66e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f672:	4563      	cmp	r3, ip
 800f674:	eb01 000e 	add.w	r0, r1, lr
 800f678:	dc02      	bgt.n	800f680 <__ieee754_sqrt+0xc4>
 800f67a:	d113      	bne.n	800f6a4 <__ieee754_sqrt+0xe8>
 800f67c:	4290      	cmp	r0, r2
 800f67e:	d811      	bhi.n	800f6a4 <__ieee754_sqrt+0xe8>
 800f680:	2800      	cmp	r0, #0
 800f682:	eb00 0e01 	add.w	lr, r0, r1
 800f686:	da57      	bge.n	800f738 <__ieee754_sqrt+0x17c>
 800f688:	f1be 0f00 	cmp.w	lr, #0
 800f68c:	db54      	blt.n	800f738 <__ieee754_sqrt+0x17c>
 800f68e:	f10c 0801 	add.w	r8, ip, #1
 800f692:	eba3 030c 	sub.w	r3, r3, ip
 800f696:	4290      	cmp	r0, r2
 800f698:	bf88      	it	hi
 800f69a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f69e:	1a12      	subs	r2, r2, r0
 800f6a0:	440c      	add	r4, r1
 800f6a2:	46c4      	mov	ip, r8
 800f6a4:	005b      	lsls	r3, r3, #1
 800f6a6:	3f01      	subs	r7, #1
 800f6a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f6ac:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f6b0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f6b4:	d1dd      	bne.n	800f672 <__ieee754_sqrt+0xb6>
 800f6b6:	4313      	orrs	r3, r2
 800f6b8:	d01b      	beq.n	800f6f2 <__ieee754_sqrt+0x136>
 800f6ba:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f768 <__ieee754_sqrt+0x1ac>
 800f6be:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f76c <__ieee754_sqrt+0x1b0>
 800f6c2:	e9da 0100 	ldrd	r0, r1, [sl]
 800f6c6:	e9db 2300 	ldrd	r2, r3, [fp]
 800f6ca:	f7f0 fe05 	bl	80002d8 <__aeabi_dsub>
 800f6ce:	e9da 8900 	ldrd	r8, r9, [sl]
 800f6d2:	4602      	mov	r2, r0
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	4640      	mov	r0, r8
 800f6d8:	4649      	mov	r1, r9
 800f6da:	f7f1 fa31 	bl	8000b40 <__aeabi_dcmple>
 800f6de:	b140      	cbz	r0, 800f6f2 <__ieee754_sqrt+0x136>
 800f6e0:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f6e4:	e9da 0100 	ldrd	r0, r1, [sl]
 800f6e8:	e9db 2300 	ldrd	r2, r3, [fp]
 800f6ec:	d126      	bne.n	800f73c <__ieee754_sqrt+0x180>
 800f6ee:	3501      	adds	r5, #1
 800f6f0:	463c      	mov	r4, r7
 800f6f2:	106a      	asrs	r2, r5, #1
 800f6f4:	0863      	lsrs	r3, r4, #1
 800f6f6:	07e9      	lsls	r1, r5, #31
 800f6f8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f6fc:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f700:	bf48      	it	mi
 800f702:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f706:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f70a:	461c      	mov	r4, r3
 800f70c:	e76d      	b.n	800f5ea <__ieee754_sqrt+0x2e>
 800f70e:	0ad3      	lsrs	r3, r2, #11
 800f710:	3815      	subs	r0, #21
 800f712:	0552      	lsls	r2, r2, #21
 800f714:	2b00      	cmp	r3, #0
 800f716:	d0fa      	beq.n	800f70e <__ieee754_sqrt+0x152>
 800f718:	02dc      	lsls	r4, r3, #11
 800f71a:	d50a      	bpl.n	800f732 <__ieee754_sqrt+0x176>
 800f71c:	f1c1 0420 	rsb	r4, r1, #32
 800f720:	fa22 f404 	lsr.w	r4, r2, r4
 800f724:	1e4d      	subs	r5, r1, #1
 800f726:	408a      	lsls	r2, r1
 800f728:	4323      	orrs	r3, r4
 800f72a:	1b41      	subs	r1, r0, r5
 800f72c:	e772      	b.n	800f614 <__ieee754_sqrt+0x58>
 800f72e:	4608      	mov	r0, r1
 800f730:	e7f0      	b.n	800f714 <__ieee754_sqrt+0x158>
 800f732:	005b      	lsls	r3, r3, #1
 800f734:	3101      	adds	r1, #1
 800f736:	e7ef      	b.n	800f718 <__ieee754_sqrt+0x15c>
 800f738:	46e0      	mov	r8, ip
 800f73a:	e7aa      	b.n	800f692 <__ieee754_sqrt+0xd6>
 800f73c:	f7f0 fdce 	bl	80002dc <__adddf3>
 800f740:	e9da 8900 	ldrd	r8, r9, [sl]
 800f744:	4602      	mov	r2, r0
 800f746:	460b      	mov	r3, r1
 800f748:	4640      	mov	r0, r8
 800f74a:	4649      	mov	r1, r9
 800f74c:	f7f1 f9ee 	bl	8000b2c <__aeabi_dcmplt>
 800f750:	b120      	cbz	r0, 800f75c <__ieee754_sqrt+0x1a0>
 800f752:	1ca0      	adds	r0, r4, #2
 800f754:	bf08      	it	eq
 800f756:	3501      	addeq	r5, #1
 800f758:	3402      	adds	r4, #2
 800f75a:	e7ca      	b.n	800f6f2 <__ieee754_sqrt+0x136>
 800f75c:	3401      	adds	r4, #1
 800f75e:	f024 0401 	bic.w	r4, r4, #1
 800f762:	e7c6      	b.n	800f6f2 <__ieee754_sqrt+0x136>
 800f764:	7ff00000 	.word	0x7ff00000
 800f768:	20000218 	.word	0x20000218
 800f76c:	20000220 	.word	0x20000220

0800f770 <_init>:
 800f770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f772:	bf00      	nop
 800f774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f776:	bc08      	pop	{r3}
 800f778:	469e      	mov	lr, r3
 800f77a:	4770      	bx	lr

0800f77c <_fini>:
 800f77c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77e:	bf00      	nop
 800f780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f782:	bc08      	pop	{r3}
 800f784:	469e      	mov	lr, r3
 800f786:	4770      	bx	lr
