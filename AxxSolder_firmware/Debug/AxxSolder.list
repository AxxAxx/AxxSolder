
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018e58  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002cb0  08019038  08019038  00029038  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801bce8  0801bce8  0003050c  2**0
                  CONTENTS
  4 .ARM          00000008  0801bce8  0801bce8  0002bce8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801bcf0  0801bcf0  0003050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801bcf0  0801bcf0  0002bcf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801bcf4  0801bcf4  0002bcf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000050c  20000000  0801bcf8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002b00  20000510  0801c204  00030510  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20003010  0801c204  00033010  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003050c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003053c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002f5e6  00000000  00000000  0003057f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065b2  00000000  00000000  0005fb65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029a0  00000000  00000000  00066118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001fe7  00000000  00000000  00068ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028959  00000000  00000000  0006aa9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003551b  00000000  00000000  000933f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ee700  00000000  00000000  000c8913  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000c388  00000000  00000000  001b7014  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  001c339c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000510 	.word	0x20000510
 80001fc:	00000000 	.word	0x00000000
 8000200:	08019020 	.word	0x08019020

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000514 	.word	0x20000514
 800021c:	08019020 	.word	0x08019020

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b970 	b.w	8000fd0 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f806 	bl	8000d08 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__udivmoddi4>:
 8000d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d0c:	9e08      	ldr	r6, [sp, #32]
 8000d0e:	460d      	mov	r5, r1
 8000d10:	4604      	mov	r4, r0
 8000d12:	460f      	mov	r7, r1
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d14a      	bne.n	8000dae <__udivmoddi4+0xa6>
 8000d18:	428a      	cmp	r2, r1
 8000d1a:	4694      	mov	ip, r2
 8000d1c:	d965      	bls.n	8000dea <__udivmoddi4+0xe2>
 8000d1e:	fab2 f382 	clz	r3, r2
 8000d22:	b143      	cbz	r3, 8000d36 <__udivmoddi4+0x2e>
 8000d24:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d28:	f1c3 0220 	rsb	r2, r3, #32
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d32:	4317      	orrs	r7, r2
 8000d34:	409c      	lsls	r4, r3
 8000d36:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d3a:	fa1f f58c 	uxth.w	r5, ip
 8000d3e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d42:	0c22      	lsrs	r2, r4, #16
 8000d44:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d48:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d4c:	fb01 f005 	mul.w	r0, r1, r5
 8000d50:	4290      	cmp	r0, r2
 8000d52:	d90a      	bls.n	8000d6a <__udivmoddi4+0x62>
 8000d54:	eb1c 0202 	adds.w	r2, ip, r2
 8000d58:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d5c:	f080 811c 	bcs.w	8000f98 <__udivmoddi4+0x290>
 8000d60:	4290      	cmp	r0, r2
 8000d62:	f240 8119 	bls.w	8000f98 <__udivmoddi4+0x290>
 8000d66:	3902      	subs	r1, #2
 8000d68:	4462      	add	r2, ip
 8000d6a:	1a12      	subs	r2, r2, r0
 8000d6c:	b2a4      	uxth	r4, r4
 8000d6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d76:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7a:	fb00 f505 	mul.w	r5, r0, r5
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x90>
 8000d82:	eb1c 0404 	adds.w	r4, ip, r4
 8000d86:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x294>
 8000d8e:	42a5      	cmp	r5, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x294>
 8000d94:	4464      	add	r4, ip
 8000d96:	3802      	subs	r0, #2
 8000d98:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d9c:	1b64      	subs	r4, r4, r5
 8000d9e:	2100      	movs	r1, #0
 8000da0:	b11e      	cbz	r6, 8000daa <__udivmoddi4+0xa2>
 8000da2:	40dc      	lsrs	r4, r3
 8000da4:	2300      	movs	r3, #0
 8000da6:	e9c6 4300 	strd	r4, r3, [r6]
 8000daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d908      	bls.n	8000dc4 <__udivmoddi4+0xbc>
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	f000 80ed 	beq.w	8000f92 <__udivmoddi4+0x28a>
 8000db8:	2100      	movs	r1, #0
 8000dba:	e9c6 0500 	strd	r0, r5, [r6]
 8000dbe:	4608      	mov	r0, r1
 8000dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc4:	fab3 f183 	clz	r1, r3
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d149      	bne.n	8000e60 <__udivmoddi4+0x158>
 8000dcc:	42ab      	cmp	r3, r5
 8000dce:	d302      	bcc.n	8000dd6 <__udivmoddi4+0xce>
 8000dd0:	4282      	cmp	r2, r0
 8000dd2:	f200 80f8 	bhi.w	8000fc6 <__udivmoddi4+0x2be>
 8000dd6:	1a84      	subs	r4, r0, r2
 8000dd8:	eb65 0203 	sbc.w	r2, r5, r3
 8000ddc:	2001      	movs	r0, #1
 8000dde:	4617      	mov	r7, r2
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d0e2      	beq.n	8000daa <__udivmoddi4+0xa2>
 8000de4:	e9c6 4700 	strd	r4, r7, [r6]
 8000de8:	e7df      	b.n	8000daa <__udivmoddi4+0xa2>
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xe6>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f382 	clz	r3, r2
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	f040 8090 	bne.w	8000f18 <__udivmoddi4+0x210>
 8000df8:	1a8a      	subs	r2, r1, r2
 8000dfa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfe:	fa1f fe8c 	uxth.w	lr, ip
 8000e02:	2101      	movs	r1, #1
 8000e04:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e08:	fb07 2015 	mls	r0, r7, r5, r2
 8000e0c:	0c22      	lsrs	r2, r4, #16
 8000e0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e12:	fb0e f005 	mul.w	r0, lr, r5
 8000e16:	4290      	cmp	r0, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x124>
 8000e1a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e22:	d202      	bcs.n	8000e2a <__udivmoddi4+0x122>
 8000e24:	4290      	cmp	r0, r2
 8000e26:	f200 80cb 	bhi.w	8000fc0 <__udivmoddi4+0x2b8>
 8000e2a:	4645      	mov	r5, r8
 8000e2c:	1a12      	subs	r2, r2, r0
 8000e2e:	b2a4      	uxth	r4, r4
 8000e30:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e34:	fb07 2210 	mls	r2, r7, r0, r2
 8000e38:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e3c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e40:	45a6      	cmp	lr, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x14e>
 8000e44:	eb1c 0404 	adds.w	r4, ip, r4
 8000e48:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e4c:	d202      	bcs.n	8000e54 <__udivmoddi4+0x14c>
 8000e4e:	45a6      	cmp	lr, r4
 8000e50:	f200 80bb 	bhi.w	8000fca <__udivmoddi4+0x2c2>
 8000e54:	4610      	mov	r0, r2
 8000e56:	eba4 040e 	sub.w	r4, r4, lr
 8000e5a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e5e:	e79f      	b.n	8000da0 <__udivmoddi4+0x98>
 8000e60:	f1c1 0720 	rsb	r7, r1, #32
 8000e64:	408b      	lsls	r3, r1
 8000e66:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e6a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e6e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e72:	fa20 f307 	lsr.w	r3, r0, r7
 8000e76:	40fd      	lsrs	r5, r7
 8000e78:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e7c:	4323      	orrs	r3, r4
 8000e7e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e82:	fa1f fe8c 	uxth.w	lr, ip
 8000e86:	fb09 5518 	mls	r5, r9, r8, r5
 8000e8a:	0c1c      	lsrs	r4, r3, #16
 8000e8c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e90:	fb08 f50e 	mul.w	r5, r8, lr
 8000e94:	42a5      	cmp	r5, r4
 8000e96:	fa02 f201 	lsl.w	r2, r2, r1
 8000e9a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e9e:	d90b      	bls.n	8000eb8 <__udivmoddi4+0x1b0>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ea8:	f080 8088 	bcs.w	8000fbc <__udivmoddi4+0x2b4>
 8000eac:	42a5      	cmp	r5, r4
 8000eae:	f240 8085 	bls.w	8000fbc <__udivmoddi4+0x2b4>
 8000eb2:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb6:	4464      	add	r4, ip
 8000eb8:	1b64      	subs	r4, r4, r5
 8000eba:	b29d      	uxth	r5, r3
 8000ebc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ec0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ec4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ec8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ecc:	45a6      	cmp	lr, r4
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x1da>
 8000ed0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ed4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ed8:	d26c      	bcs.n	8000fb4 <__udivmoddi4+0x2ac>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	d96a      	bls.n	8000fb4 <__udivmoddi4+0x2ac>
 8000ede:	3b02      	subs	r3, #2
 8000ee0:	4464      	add	r4, ip
 8000ee2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ee6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eea:	eba4 040e 	sub.w	r4, r4, lr
 8000eee:	42ac      	cmp	r4, r5
 8000ef0:	46c8      	mov	r8, r9
 8000ef2:	46ae      	mov	lr, r5
 8000ef4:	d356      	bcc.n	8000fa4 <__udivmoddi4+0x29c>
 8000ef6:	d053      	beq.n	8000fa0 <__udivmoddi4+0x298>
 8000ef8:	b156      	cbz	r6, 8000f10 <__udivmoddi4+0x208>
 8000efa:	ebb0 0208 	subs.w	r2, r0, r8
 8000efe:	eb64 040e 	sbc.w	r4, r4, lr
 8000f02:	fa04 f707 	lsl.w	r7, r4, r7
 8000f06:	40ca      	lsrs	r2, r1
 8000f08:	40cc      	lsrs	r4, r1
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
 8000f10:	4618      	mov	r0, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f18:	f1c3 0120 	rsb	r1, r3, #32
 8000f1c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f20:	fa20 f201 	lsr.w	r2, r0, r1
 8000f24:	fa25 f101 	lsr.w	r1, r5, r1
 8000f28:	409d      	lsls	r5, r3
 8000f2a:	432a      	orrs	r2, r5
 8000f2c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f30:	fa1f fe8c 	uxth.w	lr, ip
 8000f34:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f38:	fb07 1510 	mls	r5, r7, r0, r1
 8000f3c:	0c11      	lsrs	r1, r2, #16
 8000f3e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f42:	fb00 f50e 	mul.w	r5, r0, lr
 8000f46:	428d      	cmp	r5, r1
 8000f48:	fa04 f403 	lsl.w	r4, r4, r3
 8000f4c:	d908      	bls.n	8000f60 <__udivmoddi4+0x258>
 8000f4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f52:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f56:	d22f      	bcs.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f58:	428d      	cmp	r5, r1
 8000f5a:	d92d      	bls.n	8000fb8 <__udivmoddi4+0x2b0>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	1b49      	subs	r1, r1, r5
 8000f62:	b292      	uxth	r2, r2
 8000f64:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f68:	fb07 1115 	mls	r1, r7, r5, r1
 8000f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f70:	fb05 f10e 	mul.w	r1, r5, lr
 8000f74:	4291      	cmp	r1, r2
 8000f76:	d908      	bls.n	8000f8a <__udivmoddi4+0x282>
 8000f78:	eb1c 0202 	adds.w	r2, ip, r2
 8000f7c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f80:	d216      	bcs.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f82:	4291      	cmp	r1, r2
 8000f84:	d914      	bls.n	8000fb0 <__udivmoddi4+0x2a8>
 8000f86:	3d02      	subs	r5, #2
 8000f88:	4462      	add	r2, ip
 8000f8a:	1a52      	subs	r2, r2, r1
 8000f8c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f90:	e738      	b.n	8000e04 <__udivmoddi4+0xfc>
 8000f92:	4631      	mov	r1, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e708      	b.n	8000daa <__udivmoddi4+0xa2>
 8000f98:	4639      	mov	r1, r7
 8000f9a:	e6e6      	b.n	8000d6a <__udivmoddi4+0x62>
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x90>
 8000fa0:	4548      	cmp	r0, r9
 8000fa2:	d2a9      	bcs.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fa4:	ebb9 0802 	subs.w	r8, r9, r2
 8000fa8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fac:	3b01      	subs	r3, #1
 8000fae:	e7a3      	b.n	8000ef8 <__udivmoddi4+0x1f0>
 8000fb0:	4645      	mov	r5, r8
 8000fb2:	e7ea      	b.n	8000f8a <__udivmoddi4+0x282>
 8000fb4:	462b      	mov	r3, r5
 8000fb6:	e794      	b.n	8000ee2 <__udivmoddi4+0x1da>
 8000fb8:	4640      	mov	r0, r8
 8000fba:	e7d1      	b.n	8000f60 <__udivmoddi4+0x258>
 8000fbc:	46d0      	mov	r8, sl
 8000fbe:	e77b      	b.n	8000eb8 <__udivmoddi4+0x1b0>
 8000fc0:	3d02      	subs	r5, #2
 8000fc2:	4462      	add	r2, ip
 8000fc4:	e732      	b.n	8000e2c <__udivmoddi4+0x124>
 8000fc6:	4608      	mov	r0, r1
 8000fc8:	e70a      	b.n	8000de0 <__udivmoddi4+0xd8>
 8000fca:	4464      	add	r4, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e742      	b.n	8000e56 <__udivmoddi4+0x14e>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000fe2:	0adb      	lsrs	r3, r3, #11
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <FlashCheckCRC>:

bool FlashCheckCRC()
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8000ff6:	f04f 0200 	mov.w	r2, #0
 8000ffa:	f04f 0300 	mov.w	r3, #0
 8000ffe:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 8001002:	4b17      	ldr	r3, [pc, #92]	; (8001060 <FlashCheckCRC+0x70>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f023 0307 	bic.w	r3, r3, #7
 800100a:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <FlashCheckCRC+0x70>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f003 0307 	and.w	r3, r3, #7
 8001014:	2b00      	cmp	r3, #0
 8001016:	d002      	beq.n	800101e <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	3308      	adds	r3, #8
 800101c:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <FlashCheckCRC+0x70>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	461a      	mov	r2, r3
 8001024:	490f      	ldr	r1, [pc, #60]	; (8001064 <FlashCheckCRC+0x74>)
 8001026:	4810      	ldr	r0, [pc, #64]	; (8001068 <FlashCheckCRC+0x78>)
 8001028:	f007 fc6c 	bl	8008904 <HAL_CRC_Calculate>
 800102c:	4603      	mov	r3, r0
 800102e:	2200      	movs	r2, #0
 8001030:	461c      	mov	r4, r3
 8001032:	4615      	mov	r5, r2
 8001034:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800103e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
 8001042:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800104a:	4299      	cmp	r1, r3
 800104c:	bf08      	it	eq
 800104e:	4290      	cmpeq	r0, r2
 8001050:	d101      	bne.n	8001056 <FlashCheckCRC+0x66>
	{
		return true;
 8001052:	2301      	movs	r3, #1
 8001054:	e000      	b.n	8001058 <FlashCheckCRC+0x68>
	}
	return false;
 8001056:	2300      	movs	r3, #0
}
 8001058:	4618      	mov	r0, r3
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bdb0      	pop	{r4, r5, r7, pc}
 8001060:	20000000 	.word	0x20000000
 8001064:	0801f000 	.word	0x0801f000
 8001068:	200017d8 	.word	0x200017d8

0800106c <FlashReadToBuf>:


bool FlashReadToBuf()
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
	int i = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 8001076:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <FlashReadToBuf+0x88>)
 8001078:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 800107a:	f7ff ffb9 	bl	8000ff0 <FlashCheckCRC>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d031      	beq.n	80010e8 <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8001084:	e025      	b.n	80010d2 <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	1d39      	adds	r1, r7, #4
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	e013      	b.n	80010c0 <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8001098:	68fa      	ldr	r2, [r7, #12]
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4413      	add	r3, r2
 800109e:	461a      	mov	r2, r3
 80010a0:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <FlashReadToBuf+0x8c>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d208      	bcs.n	80010ba <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 80010a8:	697a      	ldr	r2, [r7, #20]
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	1d39      	adds	r1, r7, #4
 80010b0:	68fa      	ldr	r2, [r7, #12]
 80010b2:	440a      	add	r2, r1
 80010b4:	7811      	ldrb	r1, [r2, #0]
 80010b6:	4a11      	ldr	r2, [pc, #68]	; (80010fc <FlashReadToBuf+0x90>)
 80010b8:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	3301      	adds	r3, #1
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b07      	cmp	r3, #7
 80010c4:	dde8      	ble.n	8001098 <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	3308      	adds	r3, #8
 80010ca:	613b      	str	r3, [r7, #16]
			i = i + 8;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3308      	adds	r3, #8
 80010d0:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4b08      	ldr	r3, [pc, #32]	; (80010f8 <FlashReadToBuf+0x8c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d203      	bcs.n	80010e4 <FlashReadToBuf+0x78>
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <FlashReadToBuf+0x94>)
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d3d0      	bcc.n	8001086 <FlashReadToBuf+0x1a>
		}
		return true;
 80010e4:	2301      	movs	r3, #1
 80010e6:	e000      	b.n	80010ea <FlashReadToBuf+0x7e>
	}
	return false;
 80010e8:	2300      	movs	r3, #0
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	0801f000 	.word	0x0801f000
 80010f8:	20000000 	.word	0x20000000
 80010fc:	20000530 	.word	0x20000530
 8001100:	0801ffff 	.word	0x0801ffff

08001104 <FlashRead>:


//__attribute__((__section__(".user_data"))) const uint8_t userConfig[64];
bool FlashRead(Flash_values *flash_values)
{
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
	if (FlashReadToBuf())
 800110c:	f7ff ffae 	bl	800106c <FlashReadToBuf>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d013      	beq.n	800113e <FlashRead+0x3a>
	{
		memcpy(flash_values, bufferFlash, sizeof(Flash_values));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <FlashRead+0x44>)
 800111a:	4614      	mov	r4, r2
 800111c:	469c      	mov	ip, r3
 800111e:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 8001122:	4665      	mov	r5, ip
 8001124:	4626      	mov	r6, r4
 8001126:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001128:	6028      	str	r0, [r5, #0]
 800112a:	6069      	str	r1, [r5, #4]
 800112c:	60aa      	str	r2, [r5, #8]
 800112e:	60eb      	str	r3, [r5, #12]
 8001130:	3410      	adds	r4, #16
 8001132:	f10c 0c10 	add.w	ip, ip, #16
 8001136:	4574      	cmp	r4, lr
 8001138:	d1f3      	bne.n	8001122 <FlashRead+0x1e>
		return true;
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <FlashRead+0x3c>
	}
	return false;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	20000530 	.word	0x20000530

0800114c <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 800114c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001150:	b08d      	sub	sp, #52	; 0x34
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 8001156:	4b5f      	ldr	r3, [pc, #380]	; (80012d4 <FlashWrite+0x188>)
 8001158:	2201      	movs	r2, #1
 800115a:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 800116c:	4b5a      	ldr	r3, [pc, #360]	; (80012d8 <FlashWrite+0x18c>)
 800116e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 8001174:	f04f 0200 	mov.w	r2, #0
 8001178:	f04f 0300 	mov.w	r3, #0
 800117c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 8001184:	f7ff ff72 	bl	800106c <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 8001188:	4a54      	ldr	r2, [pc, #336]	; (80012dc <FlashWrite+0x190>)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	461c      	mov	r4, r3
 800118e:	4616      	mov	r6, r2
 8001190:	f104 0c40 	add.w	ip, r4, #64	; 0x40
 8001194:	4635      	mov	r5, r6
 8001196:	4623      	mov	r3, r4
 8001198:	6818      	ldr	r0, [r3, #0]
 800119a:	6859      	ldr	r1, [r3, #4]
 800119c:	689a      	ldr	r2, [r3, #8]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011a2:	3410      	adds	r4, #16
 80011a4:	3610      	adds	r6, #16
 80011a6:	4564      	cmp	r4, ip
 80011a8:	d1f4      	bne.n	8001194 <FlashWrite+0x48>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 80011aa:	4b4d      	ldr	r3, [pc, #308]	; (80012e0 <FlashWrite+0x194>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	461a      	mov	r2, r3
 80011b0:	494a      	ldr	r1, [pc, #296]	; (80012dc <FlashWrite+0x190>)
 80011b2:	484c      	ldr	r0, [pc, #304]	; (80012e4 <FlashWrite+0x198>)
 80011b4:	f007 fba6 	bl	8008904 <HAL_CRC_Calculate>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2200      	movs	r2, #0
 80011bc:	4698      	mov	r8, r3
 80011be:	4691      	mov	r9, r2
 80011c0:	e9c7 8906 	strd	r8, r9, [r7, #24]

	HAL_FLASH_Unlock();
 80011c4:	f008 f82c 	bl	8009220 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80011c8:	4b47      	ldr	r3, [pc, #284]	; (80012e8 <FlashWrite+0x19c>)
 80011ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80011ce:	611a      	str	r2, [r3, #16]

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 80011d0:	4846      	ldr	r0, [pc, #280]	; (80012ec <FlashWrite+0x1a0>)
 80011d2:	f7ff feff 	bl	8000fd4 <GetPage>
 80011d6:	4604      	mov	r4, r0
 80011d8:	483f      	ldr	r0, [pc, #252]	; (80012d8 <FlashWrite+0x18c>)
 80011da:	f7ff fefb 	bl	8000fd4 <GetPage>
 80011de:	4603      	mov	r3, r0
 80011e0:	1ae3      	subs	r3, r4, r3
 80011e2:	3301      	adds	r3, #1
 80011e4:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	EraseInitStruct.Banks = FLASH_BANK_1;
 80011e6:	4b42      	ldr	r3, [pc, #264]	; (80012f0 <FlashWrite+0x1a4>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	605a      	str	r2, [r3, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 80011ec:	4b40      	ldr	r3, [pc, #256]	; (80012f0 <FlashWrite+0x1a4>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
	EraseInitStruct.Page = GetPage(FLASH_USER_START_ADDR);
 80011f2:	4839      	ldr	r0, [pc, #228]	; (80012d8 <FlashWrite+0x18c>)
 80011f4:	f7ff feee 	bl	8000fd4 <GetPage>
 80011f8:	4603      	mov	r3, r0
 80011fa:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <FlashWrite+0x1a4>)
 80011fc:	6093      	str	r3, [r2, #8]
	EraseInitStruct.NbPages = NbOfPages;
 80011fe:	4a3c      	ldr	r2, [pc, #240]	; (80012f0 <FlashWrite+0x1a4>)
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	60d3      	str	r3, [r2, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	4839      	ldr	r0, [pc, #228]	; (80012f0 <FlashWrite+0x1a4>)
 800120c:	f008 f8f4 	bl	80093f8 <HAL_FLASHEx_Erase>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d152      	bne.n	80012bc <FlashWrite+0x170>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 8001216:	e04b      	b.n	80012b0 <FlashWrite+0x164>
		{
			for (int j = 0; j < 8; j++)
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
 800121c:	e01b      	b.n	8001256 <FlashWrite+0x10a>
			{
				if (j + i < bufLength)
 800121e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001222:	4413      	add	r3, r2
 8001224:	461a      	mov	r2, r3
 8001226:	4b2e      	ldr	r3, [pc, #184]	; (80012e0 <FlashWrite+0x194>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	d20a      	bcs.n	8001244 <FlashWrite+0xf8>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 800122e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001232:	441a      	add	r2, r3
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	f107 0108 	add.w	r1, r7, #8
 800123a:	440b      	add	r3, r1
 800123c:	4927      	ldr	r1, [pc, #156]	; (80012dc <FlashWrite+0x190>)
 800123e:	5c8a      	ldrb	r2, [r1, r2]
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e005      	b.n	8001250 <FlashWrite+0x104>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8001244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001246:	f107 0208 	add.w	r2, r7, #8
 800124a:	4413      	add	r3, r2
 800124c:	2200      	movs	r2, #0
 800124e:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8001250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001252:	3301      	adds	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001258:	2b07      	cmp	r3, #7
 800125a:	dde0      	ble.n	800121e <FlashWrite+0xd2>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 800125c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <FlashWrite+0x194>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d20f      	bcs.n	8001286 <FlashWrite+0x13a>
 8001266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800126a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800126c:	2000      	movs	r0, #0
 800126e:	f007 ff6b 	bl	8009148 <HAL_FLASH_Program>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d106      	bne.n	8001286 <FlashWrite+0x13a>
			{
				Address = Address + 8;
 8001278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800127a:	3308      	adds	r3, #8
 800127c:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 800127e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001280:	3308      	adds	r3, #8
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001284:	e014      	b.n	80012b0 <FlashWrite+0x164>
			}
			else if (i >= bufLength)
 8001286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001288:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <FlashWrite+0x194>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d314      	bcc.n	80012ba <FlashWrite+0x16e>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 8001290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001294:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001296:	2000      	movs	r0, #0
 8001298:	f007 ff56 	bl	8009148 <HAL_FLASH_Program>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d106      	bne.n	80012b0 <FlashWrite+0x164>
				{
					HAL_FLASH_Lock();
 80012a2:	f007 ffdf 	bl	8009264 <HAL_FLASH_Lock>
					flashWriting = 0;
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <FlashWrite+0x188>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
					return true;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e00b      	b.n	80012c8 <FlashWrite+0x17c>
		while (Address < FLASH_USER_END_ADDR)
 80012b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b2:	4a0e      	ldr	r2, [pc, #56]	; (80012ec <FlashWrite+0x1a0>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d3af      	bcc.n	8001218 <FlashWrite+0xcc>
 80012b8:	e000      	b.n	80012bc <FlashWrite+0x170>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 80012ba:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 80012bc:	f007 ffd2 	bl	8009264 <HAL_FLASH_Lock>

	flashWriting = 0;
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <FlashWrite+0x188>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
	return false;
 80012c6:	2300      	movs	r3, #0
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	3734      	adds	r7, #52	; 0x34
 80012cc:	46bd      	mov	sp, r7
 80012ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012d2:	bf00      	nop
 80012d4:	2000052c 	.word	0x2000052c
 80012d8:	0801f000 	.word	0x0801f000
 80012dc:	20000530 	.word	0x20000530
 80012e0:	20000000 	.word	0x20000000
 80012e4:	200017d8 	.word	0x200017d8
 80012e8:	40022000 	.word	0x40022000
 80012ec:	0801ffff 	.word	0x0801ffff
 80012f0:	20000570 	.word	0x20000570

080012f4 <clamp>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

/* Function to clamp d between the limits min and max */
double clamp(double d, double min, double max) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b088      	sub	sp, #32
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	ed87 0b04 	vstr	d0, [r7, #16]
 80012fe:	ed87 1b02 	vstr	d1, [r7, #8]
 8001302:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8001306:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800130a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800130e:	f7ff fc0d 	bl	8000b2c <__aeabi_dcmplt>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d002      	beq.n	800131e <clamp+0x2a>
 8001318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800131c:	e001      	b.n	8001322 <clamp+0x2e>
 800131e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001322:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8001326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800132a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800132e:	f7ff fc1b 	bl	8000b68 <__aeabi_dcmpgt>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d002      	beq.n	800133e <clamp+0x4a>
 8001338:	e9d7 2300 	ldrd	r2, r3, [r7]
 800133c:	e001      	b.n	8001342 <clamp+0x4e>
 800133e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001342:	ec43 2b17 	vmov	d7, r2, r3
}
 8001346:	eeb0 0a47 	vmov.f32	s0, s14
 800134a:	eef0 0a67 	vmov.f32	s1, s15
 800134e:	3720      	adds	r7, #32
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	0000      	movs	r0, r0
	...

08001358 <get_mcu_temp>:
        number *= x;

    return(number);
}

void get_mcu_temp(){
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
	sensor_values.mcu_temperature =	Moving_Average_Compute((((mcu_temperature_raw * VSENSE) - V30) / Avg_Slope + 25), &mcu_temperature_filter_struct);
 800135c:	4b28      	ldr	r3, [pc, #160]	; (8001400 <get_mcu_temp+0xa8>)
 800135e:	881b      	ldrh	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f907 	bl	8000574 <__aeabi_i2d>
 8001366:	a320      	add	r3, pc, #128	; (adr r3, 80013e8 <get_mcu_temp+0x90>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7ff f96c 	bl	8000648 <__aeabi_dmul>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4610      	mov	r0, r2
 8001376:	4619      	mov	r1, r3
 8001378:	f04f 0200 	mov.w	r2, #0
 800137c:	4b21      	ldr	r3, [pc, #132]	; (8001404 <get_mcu_temp+0xac>)
 800137e:	f7ff fa8d 	bl	800089c <__aeabi_ddiv>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4610      	mov	r0, r2
 8001388:	4619      	mov	r1, r3
 800138a:	a319      	add	r3, pc, #100	; (adr r3, 80013f0 <get_mcu_temp+0x98>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7fe ffa2 	bl	80002d8 <__aeabi_dsub>
 8001394:	4602      	mov	r2, r0
 8001396:	460b      	mov	r3, r1
 8001398:	4610      	mov	r0, r2
 800139a:	4619      	mov	r1, r3
 800139c:	a316      	add	r3, pc, #88	; (adr r3, 80013f8 <get_mcu_temp+0xa0>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff fa7b 	bl	800089c <__aeabi_ddiv>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <get_mcu_temp+0xb0>)
 80013b4:	f7fe ff92 	bl	80002dc <__adddf3>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fc1a 	bl	8000bf8 <__aeabi_d2uiz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4911      	ldr	r1, [pc, #68]	; (800140c <get_mcu_temp+0xb4>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fd4d 	bl	8003e68 <Moving_Average_Compute>
 80013ce:	ec53 2b10 	vmov	r2, r3, d0
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	f7ff fc2f 	bl	8000c38 <__aeabi_d2f>
 80013da:	4603      	mov	r3, r0
 80013dc:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <get_mcu_temp+0xb8>)
 80013de:	6193      	str	r3, [r2, #24]
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	f3af 8000 	nop.w
 80013e8:	66666666 	.word	0x66666666
 80013ec:	400a6666 	.word	0x400a6666
 80013f0:	851eb852 	.word	0x851eb852
 80013f4:	3fe851eb 	.word	0x3fe851eb
 80013f8:	47ae147b 	.word	0x47ae147b
 80013fc:	3f647ae1 	.word	0x3f647ae1
 8001400:	20000604 	.word	0x20000604
 8001404:	40b00000 	.word	0x40b00000
 8001408:	40390000 	.word	0x40390000
 800140c:	20000990 	.word	0x20000990
 8001410:	20000028 	.word	0x20000028

08001414 <RGB_to_BRG>:

uint16_t RGB_to_BRG(uint16_t color){
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	80fb      	strh	r3, [r7, #6]
	/*if(color ==C_BLACK){
		color = 0b0010100100000101;
	}*/
	//return ((color & 0b0000000000011111)  << 11)    |    ((color & 0b1111100000000000) >> 5)   |    ((color  & 0b0000011111100000) >> 6);
	return ((((color & 0b0000000000011111)  << 11) & 0b1111100000000000) | ((color & 0b1111111111100000) >> 5));
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	02db      	lsls	r3, r3, #11
 8001422:	b21a      	sxth	r2, r3
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	095b      	lsrs	r3, r3, #5
 8001428:	b29b      	uxth	r3, r3
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	b29b      	uxth	r3, r3
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <change_state>:

void change_state(mainstates new_state){
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
	sensor_values.previous_state = active_state;
 800144a:	4b07      	ldr	r3, [pc, #28]	; (8001468 <change_state+0x28>)
 800144c:	781a      	ldrb	r2, [r3, #0]
 800144e:	4b07      	ldr	r3, [pc, #28]	; (800146c <change_state+0x2c>)
 8001450:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	active_state = new_state;
 8001454:	4a04      	ldr	r2, [pc, #16]	; (8001468 <change_state+0x28>)
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	7013      	strb	r3, [r2, #0]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	20000015 	.word	0x20000015
 800146c:	20000028 	.word	0x20000028

08001470 <get_mean_ADC_reading>:

/* Returns the average of the ADC_buffer vector */
float get_mean_ADC_reading(uint16_t *adc_buffer , uint8_t adc_buffer_len){
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	460b      	mov	r3, r1
 800147a:	70fb      	strb	r3, [r7, #3]
	ADC_filter_mean = 0;
 800147c:	4b18      	ldr	r3, [pc, #96]	; (80014e0 <get_mean_ADC_reading+0x70>)
 800147e:	f04f 0200 	mov.w	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
	for(uint8_t n=0; n<adc_buffer_len; n++){
 8001484:	2300      	movs	r3, #0
 8001486:	73fb      	strb	r3, [r7, #15]
 8001488:	e013      	b.n	80014b2 <get_mean_ADC_reading+0x42>
		ADC_filter_mean += adc_buffer[n];
 800148a:	7bfb      	ldrb	r3, [r7, #15]
 800148c:	005b      	lsls	r3, r3, #1
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	881b      	ldrh	r3, [r3, #0]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149c:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <get_mean_ADC_reading+0x70>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a6:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <get_mean_ADC_reading+0x70>)
 80014a8:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t n=0; n<adc_buffer_len; n++){
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	3301      	adds	r3, #1
 80014b0:	73fb      	strb	r3, [r7, #15]
 80014b2:	7bfa      	ldrb	r2, [r7, #15]
 80014b4:	78fb      	ldrb	r3, [r7, #3]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d3e7      	bcc.n	800148a <get_mean_ADC_reading+0x1a>
	}
	return ADC_filter_mean/adc_buffer_len;
 80014ba:	4b09      	ldr	r3, [pc, #36]	; (80014e0 <get_mean_ADC_reading+0x70>)
 80014bc:	ed93 7a00 	vldr	s14, [r3]
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	ee07 3a90 	vmov	s15, r3
 80014c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014ce:	eef0 7a66 	vmov.f32	s15, s13
}
 80014d2:	eeb0 0a67 	vmov.f32	s0, s15
 80014d6:	3714      	adds	r7, #20
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr
 80014e0:	200005e8 	.word	0x200005e8
 80014e4:	00000000 	.word	0x00000000

080014e8 <get_bus_voltage>:

void get_bus_voltage(){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	sensor_values.bus_voltage = Moving_Average_Compute(get_mean_ADC_reading(ADC2_BUF_VIN, ADC2_BUF_VIN_LEN), &input_voltage_filterStruct)*VOLTAGE_COMPENSATION;
 80014ec:	210a      	movs	r1, #10
 80014ee:	4812      	ldr	r0, [pc, #72]	; (8001538 <get_bus_voltage+0x50>)
 80014f0:	f7ff ffbe 	bl	8001470 <get_mean_ADC_reading>
 80014f4:	eef0 7a40 	vmov.f32	s15, s0
 80014f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014fc:	490f      	ldr	r1, [pc, #60]	; (800153c <get_bus_voltage+0x54>)
 80014fe:	ee17 0a90 	vmov	r0, s15
 8001502:	f002 fcb1 	bl	8003e68 <Moving_Average_Compute>
 8001506:	ec51 0b10 	vmov	r0, r1, d0
 800150a:	a309      	add	r3, pc, #36	; (adr r3, 8001530 <get_bus_voltage+0x48>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f89a 	bl	8000648 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	f7ff fb8c 	bl	8000c38 <__aeabi_d2f>
 8001520:	4603      	mov	r3, r0
 8001522:	4a07      	ldr	r2, [pc, #28]	; (8001540 <get_bus_voltage+0x58>)
 8001524:	6113      	str	r3, [r2, #16]
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	ada68bd9 	.word	0xada68bd9
 8001534:	3f813656 	.word	0x3f813656
 8001538:	200005ec 	.word	0x200005ec
 800153c:	20000cbc 	.word	0x20000cbc
 8001540:	20000028 	.word	0x20000028
 8001544:	00000000 	.word	0x00000000

08001548 <get_thermocouple_temperature>:

void get_thermocouple_temperature(){
 8001548:	b5b0      	push	{r4, r5, r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
	double TC_temp = Moving_Average_Compute(thermocouple_temperature_raw, &thermocouple_temperature_filter_struct); /* Moving average filter */
 800154e:	4b70      	ldr	r3, [pc, #448]	; (8001710 <get_thermocouple_temperature+0x1c8>)
 8001550:	881b      	ldrh	r3, [r3, #0]
 8001552:	4970      	ldr	r1, [pc, #448]	; (8001714 <get_thermocouple_temperature+0x1cc>)
 8001554:	4618      	mov	r0, r3
 8001556:	f002 fc87 	bl	8003e68 <Moving_Average_Compute>
 800155a:	ed87 0b00 	vstr	d0, [r7]

	if(handle == T210){
 800155e:	4b6e      	ldr	r3, [pc, #440]	; (8001718 <get_thermocouple_temperature+0x1d0>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d12e      	bne.n	80015c4 <get_thermocouple_temperature+0x7c>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T210 + TC_temp*TC_COMPENSATION_X2_T210 + TC_COMPENSATION_X0_T210;
 8001566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800156a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800156e:	f7ff f86b 	bl	8000648 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4610      	mov	r0, r2
 8001578:	4619      	mov	r1, r3
 800157a:	a357      	add	r3, pc, #348	; (adr r3, 80016d8 <get_thermocouple_temperature+0x190>)
 800157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001580:	f7ff f862 	bl	8000648 <__aeabi_dmul>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4614      	mov	r4, r2
 800158a:	461d      	mov	r5, r3
 800158c:	a352      	add	r3, pc, #328	; (adr r3, 80016d8 <get_thermocouple_temperature+0x190>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001596:	f7ff f857 	bl	8000648 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7fe fe9b 	bl	80002dc <__adddf3>
 80015a6:	4602      	mov	r2, r0
 80015a8:	460b      	mov	r3, r1
 80015aa:	4610      	mov	r0, r2
 80015ac:	4619      	mov	r1, r3
 80015ae:	a34c      	add	r3, pc, #304	; (adr r3, 80016e0 <get_thermocouple_temperature+0x198>)
 80015b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b4:	f7fe fe92 	bl	80002dc <__adddf3>
 80015b8:	4602      	mov	r2, r0
 80015ba:	460b      	mov	r3, r1
 80015bc:	4957      	ldr	r1, [pc, #348]	; (800171c <get_thermocouple_temperature+0x1d4>)
 80015be:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80015c2:	e064      	b.n	800168e <get_thermocouple_temperature+0x146>
	}
	else if(handle == T245){
 80015c4:	4b54      	ldr	r3, [pc, #336]	; (8001718 <get_thermocouple_temperature+0x1d0>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d12e      	bne.n	800162a <get_thermocouple_temperature+0xe2>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T245 + TC_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 80015cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80015d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015d4:	f7ff f838 	bl	8000648 <__aeabi_dmul>
 80015d8:	4602      	mov	r2, r0
 80015da:	460b      	mov	r3, r1
 80015dc:	4610      	mov	r0, r2
 80015de:	4619      	mov	r1, r3
 80015e0:	a341      	add	r3, pc, #260	; (adr r3, 80016e8 <get_thermocouple_temperature+0x1a0>)
 80015e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015e6:	f7ff f82f 	bl	8000648 <__aeabi_dmul>
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4614      	mov	r4, r2
 80015f0:	461d      	mov	r5, r3
 80015f2:	a33f      	add	r3, pc, #252	; (adr r3, 80016f0 <get_thermocouple_temperature+0x1a8>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80015fc:	f7ff f824 	bl	8000648 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7fe fe68 	bl	80002dc <__adddf3>
 800160c:	4602      	mov	r2, r0
 800160e:	460b      	mov	r3, r1
 8001610:	4610      	mov	r0, r2
 8001612:	4619      	mov	r1, r3
 8001614:	a338      	add	r3, pc, #224	; (adr r3, 80016f8 <get_thermocouple_temperature+0x1b0>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7fe fe5f 	bl	80002dc <__adddf3>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	493e      	ldr	r1, [pc, #248]	; (800171c <get_thermocouple_temperature+0x1d4>)
 8001624:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001628:	e031      	b.n	800168e <get_thermocouple_temperature+0x146>
	}
	else if(handle == T115){
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <get_thermocouple_temperature+0x1d0>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d12d      	bne.n	800168e <get_thermocouple_temperature+0x146>
		sensor_values.thermocouple_temperature = TC_temp*TC_temp*TC_COMPENSATION_X2_T115 + TC_temp*TC_COMPENSATION_X2_T115 + TC_COMPENSATION_X0_T115;
 8001632:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001636:	e9d7 0100 	ldrd	r0, r1, [r7]
 800163a:	f7ff f805 	bl	8000648 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	a324      	add	r3, pc, #144	; (adr r3, 80016d8 <get_thermocouple_temperature+0x190>)
 8001648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164c:	f7fe fffc 	bl	8000648 <__aeabi_dmul>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4614      	mov	r4, r2
 8001656:	461d      	mov	r5, r3
 8001658:	a31f      	add	r3, pc, #124	; (adr r3, 80016d8 <get_thermocouple_temperature+0x190>)
 800165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001662:	f7fe fff1 	bl	8000648 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4620      	mov	r0, r4
 800166c:	4629      	mov	r1, r5
 800166e:	f7fe fe35 	bl	80002dc <__adddf3>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4610      	mov	r0, r2
 8001678:	4619      	mov	r1, r3
 800167a:	a319      	add	r3, pc, #100	; (adr r3, 80016e0 <get_thermocouple_temperature+0x198>)
 800167c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001680:	f7fe fe2c 	bl	80002dc <__adddf3>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4924      	ldr	r1, [pc, #144]	; (800171c <get_thermocouple_temperature+0x1d4>)
 800168a:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}

	sensor_values.thermocouple_temperature += flash_values.temperature_offset; // Add temperature offset value
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <get_thermocouple_temperature+0x1d4>)
 8001690:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001694:	4b22      	ldr	r3, [pc, #136]	; (8001720 <get_thermocouple_temperature+0x1d8>)
 8001696:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800169a:	f7fe fe1f 	bl	80002dc <__adddf3>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	491e      	ldr	r1, [pc, #120]	; (800171c <get_thermocouple_temperature+0x1d4>)
 80016a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	sensor_values.thermocouple_temperature = clamp(sensor_values.thermocouple_temperature ,0 ,999); // Clamp
 80016a8:	4b1c      	ldr	r3, [pc, #112]	; (800171c <get_thermocouple_temperature+0x1d4>)
 80016aa:	ed93 7b02 	vldr	d7, [r3, #8]
 80016ae:	ed9f 2b14 	vldr	d2, [pc, #80]	; 8001700 <get_thermocouple_temperature+0x1b8>
 80016b2:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8001708 <get_thermocouple_temperature+0x1c0>
 80016b6:	eeb0 0a47 	vmov.f32	s0, s14
 80016ba:	eef0 0a67 	vmov.f32	s1, s15
 80016be:	f7ff fe19 	bl	80012f4 <clamp>
 80016c2:	eeb0 7a40 	vmov.f32	s14, s0
 80016c6:	eef0 7a60 	vmov.f32	s15, s1
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <get_thermocouple_temperature+0x1d4>)
 80016cc:	ed83 7b02 	vstr	d7, [r3, #8]
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bdb0      	pop	{r4, r5, r7, pc}
 80016d8:	77c4dab0 	.word	0x77c4dab0
 80016dc:	bed98561 	.word	0xbed98561
 80016e0:	d797deed 	.word	0xd797deed
 80016e4:	40396624 	.word	0x40396624
 80016e8:	82fead10 	.word	0x82fead10
 80016ec:	3ea7dc92 	.word	0x3ea7dc92
 80016f0:	c53ce03f 	.word	0xc53ce03f
 80016f4:	3fbd94aa 	.word	0x3fbd94aa
 80016f8:	34da2134 	.word	0x34da2134
 80016fc:	403a2648 	.word	0x403a2648
 8001700:	00000000 	.word	0x00000000
 8001704:	408f3800 	.word	0x408f3800
	...
 8001710:	20000600 	.word	0x20000600
 8001714:	20000664 	.word	0x20000664
 8001718:	20000580 	.word	0x20000580
 800171c:	20000028 	.word	0x20000028
 8001720:	20000608 	.word	0x20000608
 8001724:	00000000 	.word	0x00000000

08001728 <settings_menue>:

void get_current(){
	sensor_values.heater_current = current_raw * CURRENT_COMPENSATION;
}

void settings_menue(){
 8001728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800172c:	b08d      	sub	sp, #52	; 0x34
 800172e:	af02      	add	r7, sp, #8
	/* If SW_1 is pressed during startup - Show SETTINGS and allow to release button. */
	if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8001730:	2120      	movs	r1, #32
 8001732:	48c5      	ldr	r0, [pc, #788]	; (8001a48 <settings_menue+0x320>)
 8001734:	f008 f906 	bl	8009944 <HAL_GPIO_ReadPin>
 8001738:	4603      	mov	r3, r0
 800173a:	2b01      	cmp	r3, #1
 800173c:	f040 82cc 	bne.w	8001cd8 <settings_menue+0x5b0>
		LCD_PutStr(0, 300, "Version:", FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001740:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001744:	f7ff fe66 	bl	8001414 <RGB_to_BRG>
 8001748:	4603      	mov	r3, r0
 800174a:	461c      	mov	r4, r3
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff fe61 	bl	8001414 <RGB_to_BRG>
 8001752:	4603      	mov	r3, r0
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	9400      	str	r4, [sp, #0]
 8001758:	4bbc      	ldr	r3, [pc, #752]	; (8001a4c <settings_menue+0x324>)
 800175a:	4abd      	ldr	r2, [pc, #756]	; (8001a50 <settings_menue+0x328>)
 800175c:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001760:	2000      	movs	r0, #0
 8001762:	f004 f905 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(150, 300, version, FONT_arial_20X23, RGB_to_BRG(C_RED), RGB_to_BRG(C_BLACK));
 8001766:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800176a:	f7ff fe53 	bl	8001414 <RGB_to_BRG>
 800176e:	4603      	mov	r3, r0
 8001770:	461c      	mov	r4, r3
 8001772:	2000      	movs	r0, #0
 8001774:	f7ff fe4e 	bl	8001414 <RGB_to_BRG>
 8001778:	4603      	mov	r3, r0
 800177a:	9301      	str	r3, [sp, #4]
 800177c:	9400      	str	r4, [sp, #0]
 800177e:	4bb3      	ldr	r3, [pc, #716]	; (8001a4c <settings_menue+0x324>)
 8001780:	4ab4      	ldr	r2, [pc, #720]	; (8001a54 <settings_menue+0x32c>)
 8001782:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001786:	2096      	movs	r0, #150	; 0x96
 8001788:	f004 f8f2 	bl	8005970 <LCD_PutStr>

		TIM2->CNT = 1000;
 800178c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001794:	625a      	str	r2, [r3, #36]	; 0x24
		uint16_t menu_cursor_position = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t old_menu_cursor_position = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	84bb      	strh	r3, [r7, #36]	; 0x24
		uint16_t menue_start = 0;
 800179e:	2300      	movs	r3, #0
 80017a0:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t menue_level = 0;
 80017a2:	2300      	movs	r3, #0
 80017a4:	843b      	strh	r3, [r7, #32]
		uint16_t menu_active = 1;
 80017a6:	2301      	movs	r3, #1
 80017a8:	83fb      	strh	r3, [r7, #30]
		float old_value = 0;
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	61bb      	str	r3, [r7, #24]

		LCD_PutStr(60, 12, "SETTINGS", FONT_arial_20X23, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 80017b0:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80017b4:	f7ff fe2e 	bl	8001414 <RGB_to_BRG>
 80017b8:	4603      	mov	r3, r0
 80017ba:	461c      	mov	r4, r3
 80017bc:	2000      	movs	r0, #0
 80017be:	f7ff fe29 	bl	8001414 <RGB_to_BRG>
 80017c2:	4603      	mov	r3, r0
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	9400      	str	r4, [sp, #0]
 80017c8:	4ba0      	ldr	r3, [pc, #640]	; (8001a4c <settings_menue+0x324>)
 80017ca:	4aa3      	ldr	r2, [pc, #652]	; (8001a58 <settings_menue+0x330>)
 80017cc:	210c      	movs	r1, #12
 80017ce:	203c      	movs	r0, #60	; 0x3c
 80017d0:	f004 f8ce 	bl	8005970 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 80017d4:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80017d8:	f7ff fe1c 	bl	8001414 <RGB_to_BRG>
 80017dc:	4603      	mov	r3, r0
 80017de:	9300      	str	r3, [sp, #0]
 80017e0:	2328      	movs	r3, #40	; 0x28
 80017e2:	22f0      	movs	r2, #240	; 0xf0
 80017e4:	2128      	movs	r1, #40	; 0x28
 80017e6:	2000      	movs	r0, #0
 80017e8:	f004 f884 	bl	80058f4 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 80017ec:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80017f0:	f7ff fe10 	bl	8001414 <RGB_to_BRG>
 80017f4:	4603      	mov	r3, r0
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2329      	movs	r3, #41	; 0x29
 80017fa:	22f0      	movs	r2, #240	; 0xf0
 80017fc:	2129      	movs	r1, #41	; 0x29
 80017fe:	2000      	movs	r0, #0
 8001800:	f004 f878 	bl	80058f4 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 8001804:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001808:	f7ff fe04 	bl	8001414 <RGB_to_BRG>
 800180c:	4603      	mov	r3, r0
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	232a      	movs	r3, #42	; 0x2a
 8001812:	22f0      	movs	r2, #240	; 0xf0
 8001814:	212a      	movs	r1, #42	; 0x2a
 8001816:	2000      	movs	r0, #0
 8001818:	f004 f86c 	bl	80058f4 <LCD_DrawLine>

		HAL_Delay(500);
 800181c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001820:	f004 f9c0 	bl	8005ba4 <HAL_Delay>
		while(menu_active == 1){
 8001824:	e254      	b.n	8001cd0 <settings_menue+0x5a8>
			if(menue_level == 0){
 8001826:	8c3b      	ldrh	r3, [r7, #32]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d120      	bne.n	800186e <settings_menue+0x146>
				TIM2->CNT = clamp(TIM2->CNT, 1000, 1000000);
 800182c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001832:	4618      	mov	r0, r3
 8001834:	f7fe fe8e 	bl	8000554 <__aeabi_ui2d>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	ed9f 2b7c 	vldr	d2, [pc, #496]	; 8001a30 <settings_menue+0x308>
 8001840:	ed9f 1b7d 	vldr	d1, [pc, #500]	; 8001a38 <settings_menue+0x310>
 8001844:	ec43 2b10 	vmov	d0, r2, r3
 8001848:	f7ff fd54 	bl	80012f4 <clamp>
 800184c:	ec53 2b10 	vmov	r2, r3, d0
 8001850:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f7ff f9ce 	bl	8000bf8 <__aeabi_d2uiz>
 800185c:	4603      	mov	r3, r0
 800185e:	6263      	str	r3, [r4, #36]	; 0x24
				menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800186a:	085b      	lsrs	r3, r3, #1
 800186c:	84fb      	strh	r3, [r7, #38]	; 0x26
			}
			if (menue_level == 1){
 800186e:	8c3b      	ldrh	r3, [r7, #32]
 8001870:	2b01      	cmp	r3, #1
 8001872:	f040 808e 	bne.w	8001992 <settings_menue+0x26a>
				((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001876:	69b8      	ldr	r0, [r7, #24]
 8001878:	f7fe fe8e 	bl	8000598 <__aeabi_f2d>
 800187c:	4604      	mov	r4, r0
 800187e:	460d      	mov	r5, r1
 8001880:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	4618      	mov	r0, r3
 8001888:	f7fe fe64 	bl	8000554 <__aeabi_ui2d>
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	4b72      	ldr	r3, [pc, #456]	; (8001a5c <settings_menue+0x334>)
 8001892:	f7fe fd21 	bl	80002d8 <__aeabi_dsub>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff f9cb 	bl	8000c38 <__aeabi_d2f>
 80018a2:	4603      	mov	r3, r0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7fe fe77 	bl	8000598 <__aeabi_f2d>
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018b2:	f7fe fff3 	bl	800089c <__aeabi_ddiv>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4620      	mov	r0, r4
 80018bc:	4629      	mov	r1, r5
 80018be:	f7fe fd0d 	bl	80002dc <__adddf3>
 80018c2:	4602      	mov	r2, r0
 80018c4:	460b      	mov	r3, r1
 80018c6:	4690      	mov	r8, r2
 80018c8:	4699      	mov	r9, r3
 80018ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018cc:	ee07 3a90 	vmov	s15, r3
 80018d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d4:	ee17 0a90 	vmov	r0, s15
 80018d8:	f7fe fe5e 	bl	8000598 <__aeabi_f2d>
 80018dc:	4602      	mov	r2, r0
 80018de:	460b      	mov	r3, r1
 80018e0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80018e2:	00c9      	lsls	r1, r1, #3
 80018e4:	485e      	ldr	r0, [pc, #376]	; (8001a60 <settings_menue+0x338>)
 80018e6:	180c      	adds	r4, r1, r0
 80018e8:	4640      	mov	r0, r8
 80018ea:	4649      	mov	r1, r9
 80018ec:	f7fe fcf4 	bl	80002d8 <__aeabi_dsub>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	e9c4 2300 	strd	r2, r3, [r4]
				if (menu_cursor_position == 5){
 80018f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80018fa:	2b05      	cmp	r3, #5
 80018fc:	d12c      	bne.n	8001958 <settings_menue+0x230>
					((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 80018fe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001900:	00db      	lsls	r3, r3, #3
 8001902:	4a57      	ldr	r2, [pc, #348]	; (8001a60 <settings_menue+0x338>)
 8001904:	4413      	add	r3, r2
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	4610      	mov	r0, r2
 800190c:	4619      	mov	r1, r3
 800190e:	f7ff f94b 	bl	8000ba8 <__aeabi_d2iz>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	bfb8      	it	lt
 8001918:	425b      	neglt	r3, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fe2a 	bl	8000574 <__aeabi_i2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8001a40 <settings_menue+0x318>
 8001928:	ec43 2b10 	vmov	d0, r2, r3
 800192c:	f017 f9f4 	bl	8018d18 <fmod>
 8001930:	eeb0 7a40 	vmov.f32	s14, s0
 8001934:	eef0 7a60 	vmov.f32	s15, s1
 8001938:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800193a:	00db      	lsls	r3, r3, #3
 800193c:	4a48      	ldr	r2, [pc, #288]	; (8001a60 <settings_menue+0x338>)
 800193e:	189c      	adds	r4, r3, r2
 8001940:	eeb0 0a47 	vmov.f32	s0, s14
 8001944:	eef0 0a67 	vmov.f32	s1, s15
 8001948:	f017 fa14 	bl	8018d74 <round>
 800194c:	eeb0 7a40 	vmov.f32	s14, s0
 8001950:	eef0 7a60 	vmov.f32	s15, s1
 8001954:	ed84 7b00 	vstr	d7, [r4]
				}
				if(menu_cursor_position != 1){
 8001958:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800195a:	2b01      	cmp	r3, #1
 800195c:	d019      	beq.n	8001992 <settings_menue+0x26a>
					((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 800195e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001960:	00db      	lsls	r3, r3, #3
 8001962:	4a3f      	ldr	r2, [pc, #252]	; (8001a60 <settings_menue+0x338>)
 8001964:	4413      	add	r3, r2
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f91b 	bl	8000ba8 <__aeabi_d2iz>
 8001972:	4603      	mov	r3, r0
 8001974:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001978:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800197c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	4937      	ldr	r1, [pc, #220]	; (8001a60 <settings_menue+0x338>)
 8001982:	185c      	adds	r4, r3, r1
 8001984:	4610      	mov	r0, r2
 8001986:	f7fe fdf5 	bl	8000574 <__aeabi_i2d>
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	e9c4 2300 	strd	r2, r3, [r4]
				}
			}

			if(menu_cursor_position > menu_length-1){
 8001992:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001994:	2b0a      	cmp	r3, #10
 8001996:	d906      	bls.n	80019a6 <settings_menue+0x27e>
							menu_cursor_position = menu_length-1;
 8001998:	230a      	movs	r3, #10
 800199a:	84fb      	strh	r3, [r7, #38]	; 0x26
							TIM2->CNT = 1000 + (menu_length-1)*2;
 800199c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019a0:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
			}

			if(menu_cursor_position >= 7){
 80019a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019a8:	2b06      	cmp	r3, #6
 80019aa:	d903      	bls.n	80019b4 <settings_menue+0x28c>
				menue_start = menu_cursor_position-7;
 80019ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ae:	3b07      	subs	r3, #7
 80019b0:	847b      	strh	r3, [r7, #34]	; 0x22
 80019b2:	e001      	b.n	80019b8 <settings_menue+0x290>
			}
			else{
				menue_start = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	847b      	strh	r3, [r7, #34]	; 0x22
			}

			if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-3)){
 80019b8:	2120      	movs	r1, #32
 80019ba:	4823      	ldr	r0, [pc, #140]	; (8001a48 <settings_menue+0x320>)
 80019bc:	f007 ffc2 	bl	8009944 <HAL_GPIO_ReadPin>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d127      	bne.n	8001a16 <settings_menue+0x2ee>
 80019c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019c8:	2b07      	cmp	r3, #7
 80019ca:	d824      	bhi.n	8001a16 <settings_menue+0x2ee>
				if(menue_level == 0){
 80019cc:	8c3b      	ldrh	r3, [r7, #32]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10d      	bne.n	80019ee <settings_menue+0x2c6>
					old_value = ((double*)&flash_values)[menu_cursor_position];
 80019d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4a22      	ldr	r2, [pc, #136]	; (8001a60 <settings_menue+0x338>)
 80019d8:	4413      	add	r3, r2
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	4610      	mov	r0, r2
 80019e0:	4619      	mov	r1, r3
 80019e2:	f7ff f929 	bl	8000c38 <__aeabi_d2f>
 80019e6:	4603      	mov	r3, r0
 80019e8:	61bb      	str	r3, [r7, #24]
					old_menu_cursor_position = menu_cursor_position;
 80019ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ec:	84bb      	strh	r3, [r7, #36]	; 0x24
				}
				if(menue_level == 1){
 80019ee:	8c3b      	ldrh	r3, [r7, #32]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d106      	bne.n	8001a02 <settings_menue+0x2da>
					TIM2->CNT = old_menu_cursor_position*2 + 1000;
 80019f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019f6:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80019fa:	005a      	lsls	r2, r3, #1
 80019fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
				}

				menue_level = abs(menue_level-1);
 8001a02:	8c3b      	ldrh	r3, [r7, #32]
 8001a04:	3b01      	subs	r3, #1
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bfb8      	it	lt
 8001a0a:	425b      	neglt	r3, r3
 8001a0c:	843b      	strh	r3, [r7, #32]
				HAL_Delay(200);
 8001a0e:	20c8      	movs	r0, #200	; 0xc8
 8001a10:	f004 f8c8 	bl	8005ba4 <HAL_Delay>
 8001a14:	e04e      	b.n	8001ab4 <settings_menue+0x38c>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001a16:	2120      	movs	r1, #32
 8001a18:	480b      	ldr	r0, [pc, #44]	; (8001a48 <settings_menue+0x320>)
 8001a1a:	f007 ff93 	bl	8009944 <HAL_GPIO_ReadPin>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d11f      	bne.n	8001a64 <settings_menue+0x33c>
 8001a24:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a26:	2b0a      	cmp	r3, #10
 8001a28:	d11c      	bne.n	8001a64 <settings_menue+0x33c>
				menu_active = 0;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	83fb      	strh	r3, [r7, #30]
 8001a2e:	e041      	b.n	8001ab4 <settings_menue+0x38c>
 8001a30:	00000000 	.word	0x00000000
 8001a34:	412e8480 	.word	0x412e8480
 8001a38:	00000000 	.word	0x00000000
 8001a3c:	408f4000 	.word	0x408f4000
 8001a40:	00000000 	.word	0x00000000
 8001a44:	40000000 	.word	0x40000000
 8001a48:	48000400 	.word	0x48000400
 8001a4c:	0801a200 	.word	0x0801a200
 8001a50:	08019038 	.word	0x08019038
 8001a54:	08019044 	.word	0x08019044
 8001a58:	0801904c 	.word	0x0801904c
 8001a5c:	408f4000 	.word	0x408f4000
 8001a60:	20000608 	.word	0x20000608
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001a64:	2120      	movs	r1, #32
 8001a66:	48a2      	ldr	r0, [pc, #648]	; (8001cf0 <settings_menue+0x5c8>)
 8001a68:	f007 ff6c 	bl	8009944 <HAL_GPIO_ReadPin>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d108      	bne.n	8001a84 <settings_menue+0x35c>
 8001a72:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a74:	2b09      	cmp	r3, #9
 8001a76:	d105      	bne.n	8001a84 <settings_menue+0x35c>
				menu_active = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	83fb      	strh	r3, [r7, #30]
				FlashWrite(&flash_values);
 8001a7c:	489d      	ldr	r0, [pc, #628]	; (8001cf4 <settings_menue+0x5cc>)
 8001a7e:	f7ff fb65 	bl	800114c <FlashWrite>
 8001a82:	e017      	b.n	8001ab4 <settings_menue+0x38c>
			}
			else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-3)){
 8001a84:	2120      	movs	r1, #32
 8001a86:	489a      	ldr	r0, [pc, #616]	; (8001cf0 <settings_menue+0x5c8>)
 8001a88:	f007 ff5c 	bl	8009944 <HAL_GPIO_ReadPin>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d110      	bne.n	8001ab4 <settings_menue+0x38c>
 8001a92:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d10d      	bne.n	8001ab4 <settings_menue+0x38c>
				flash_values = default_flash_values;
 8001a98:	4a96      	ldr	r2, [pc, #600]	; (8001cf4 <settings_menue+0x5cc>)
 8001a9a:	4b97      	ldr	r3, [pc, #604]	; (8001cf8 <settings_menue+0x5d0>)
 8001a9c:	4614      	mov	r4, r2
 8001a9e:	461d      	mov	r5, r3
 8001aa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ab0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			}

			for(int i = menue_start;i<=menue_start+7;i++){
 8001ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e104      	b.n	8001cc4 <settings_menue+0x59c>

				if((i == menu_cursor_position) && (menue_level == 0)){
 8001aba:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001abc:	697a      	ldr	r2, [r7, #20]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d12b      	bne.n	8001b1a <settings_menue+0x3f2>
 8001ac2:	8c3b      	ldrh	r3, [r7, #32]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d128      	bne.n	8001b1a <settings_menue+0x3f2>
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001ac8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	0092      	lsls	r2, r2, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	0091      	lsls	r1, r2, #2
 8001ada:	461a      	mov	r2, r3
 8001adc:	460b      	mov	r3, r1
 8001ade:	4413      	add	r3, r2
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	332d      	adds	r3, #45	; 0x2d
 8001ae4:	b29c      	uxth	r4, r3
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	4a82      	ldr	r2, [pc, #520]	; (8001cfc <settings_menue+0x5d4>)
 8001af2:	189d      	adds	r5, r3, r2
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fc8d 	bl	8001414 <RGB_to_BRG>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461e      	mov	r6, r3
 8001afe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b02:	f7ff fc87 	bl	8001414 <RGB_to_BRG>
 8001b06:	4603      	mov	r3, r0
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	9600      	str	r6, [sp, #0]
 8001b0c:	4b7c      	ldr	r3, [pc, #496]	; (8001d00 <settings_menue+0x5d8>)
 8001b0e:	462a      	mov	r2, r5
 8001b10:	4621      	mov	r1, r4
 8001b12:	2005      	movs	r0, #5
 8001b14:	f003 ff2c 	bl	8005970 <LCD_PutStr>
 8001b18:	e027      	b.n	8001b6a <settings_menue+0x442>
				}
				else{
					LCD_PutStr(5, 45+(i-menue_start)*25, menu_names[i], FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001b1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	461a      	mov	r2, r3
 8001b24:	0092      	lsls	r2, r2, #2
 8001b26:	4413      	add	r3, r2
 8001b28:	461a      	mov	r2, r3
 8001b2a:	0091      	lsls	r1, r2, #2
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4413      	add	r3, r2
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	332d      	adds	r3, #45	; 0x2d
 8001b36:	b29c      	uxth	r4, r3
 8001b38:	697a      	ldr	r2, [r7, #20]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	4a6e      	ldr	r2, [pc, #440]	; (8001cfc <settings_menue+0x5d4>)
 8001b44:	189d      	adds	r5, r3, r2
 8001b46:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001b4a:	f7ff fc63 	bl	8001414 <RGB_to_BRG>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461e      	mov	r6, r3
 8001b52:	2000      	movs	r0, #0
 8001b54:	f7ff fc5e 	bl	8001414 <RGB_to_BRG>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	9600      	str	r6, [sp, #0]
 8001b5e:	4b68      	ldr	r3, [pc, #416]	; (8001d00 <settings_menue+0x5d8>)
 8001b60:	462a      	mov	r2, r5
 8001b62:	4621      	mov	r1, r4
 8001b64:	2005      	movs	r0, #5
 8001b66:	f003 ff03 	bl	8005970 <LCD_PutStr>
				}

				char str[20];
				memset(&str, '\0', sizeof(str));
 8001b6a:	463b      	mov	r3, r7
 8001b6c:	2214      	movs	r2, #20
 8001b6e:	2100      	movs	r1, #0
 8001b70:	4618      	mov	r0, r3
 8001b72:	f014 ffd6 	bl	8016b22 <memset>
				sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4a5e      	ldr	r2, [pc, #376]	; (8001cf4 <settings_menue+0x5cc>)
 8001b7c:	4413      	add	r3, r2
 8001b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b82:	4638      	mov	r0, r7
 8001b84:	495f      	ldr	r1, [pc, #380]	; (8001d04 <settings_menue+0x5dc>)
 8001b86:	f014 ff69 	bl	8016a5c <siprintf>

				if((((double*)&flash_values)[i]) < 9.5){
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4a59      	ldr	r2, [pc, #356]	; (8001cf4 <settings_menue+0x5cc>)
 8001b90:	4413      	add	r3, r2
 8001b92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b96:	f04f 0200 	mov.w	r2, #0
 8001b9a:	4b5b      	ldr	r3, [pc, #364]	; (8001d08 <settings_menue+0x5e0>)
 8001b9c:	f7fe ffc6 	bl	8000b2c <__aeabi_dcmplt>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d008      	beq.n	8001bb8 <settings_menue+0x490>
					str[1] = 32;
 8001ba6:	2320      	movs	r3, #32
 8001ba8:	707b      	strb	r3, [r7, #1]
					str[2] = 32;
 8001baa:	2320      	movs	r3, #32
 8001bac:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001bae:	2320      	movs	r3, #32
 8001bb0:	70fb      	strb	r3, [r7, #3]
					str[4] = 32;
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	713b      	strb	r3, [r7, #4]
 8001bb6:	e011      	b.n	8001bdc <settings_menue+0x4b4>
				}
				else if((((double*)&flash_values)[i]) < 99.5){
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4a4d      	ldr	r2, [pc, #308]	; (8001cf4 <settings_menue+0x5cc>)
 8001bbe:	4413      	add	r3, r2
 8001bc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bc4:	a348      	add	r3, pc, #288	; (adr r3, 8001ce8 <settings_menue+0x5c0>)
 8001bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bca:	f7fe ffaf 	bl	8000b2c <__aeabi_dcmplt>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <settings_menue+0x4b4>
					str[2] = 32;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	70bb      	strb	r3, [r7, #2]
					str[3] = 32;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	70fb      	strb	r3, [r7, #3]
				}
				if(i < menu_length-3){
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	2b07      	cmp	r3, #7
 8001be0:	dc49      	bgt.n	8001c76 <settings_menue+0x54e>
					if((i == menu_cursor_position) && (menue_level == 1)){
 8001be2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d124      	bne.n	8001c34 <settings_menue+0x50c>
 8001bea:	8c3b      	ldrh	r3, [r7, #32]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d121      	bne.n	8001c34 <settings_menue+0x50c>
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_WHITE));
 8001bf0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	b29b      	uxth	r3, r3
 8001bf8:	461a      	mov	r2, r3
 8001bfa:	0092      	lsls	r2, r2, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	461a      	mov	r2, r3
 8001c00:	0091      	lsls	r1, r2, #2
 8001c02:	461a      	mov	r2, r3
 8001c04:	460b      	mov	r3, r1
 8001c06:	4413      	add	r3, r2
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	332d      	adds	r3, #45	; 0x2d
 8001c0c:	b29c      	uxth	r4, r3
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f7ff fc00 	bl	8001414 <RGB_to_BRG>
 8001c14:	4603      	mov	r3, r0
 8001c16:	461d      	mov	r5, r3
 8001c18:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c1c:	f7ff fbfa 	bl	8001414 <RGB_to_BRG>
 8001c20:	4603      	mov	r3, r0
 8001c22:	463a      	mov	r2, r7
 8001c24:	9301      	str	r3, [sp, #4]
 8001c26:	9500      	str	r5, [sp, #0]
 8001c28:	4b35      	ldr	r3, [pc, #212]	; (8001d00 <settings_menue+0x5d8>)
 8001c2a:	4621      	mov	r1, r4
 8001c2c:	20c8      	movs	r0, #200	; 0xc8
 8001c2e:	f003 fe9f 	bl	8005970 <LCD_PutStr>
 8001c32:	e020      	b.n	8001c76 <settings_menue+0x54e>
					}
					else{
						LCD_PutStr(200, 45+(i-menue_start)*25, str, FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001c34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	0092      	lsls	r2, r2, #2
 8001c40:	4413      	add	r3, r2
 8001c42:	461a      	mov	r2, r3
 8001c44:	0091      	lsls	r1, r2, #2
 8001c46:	461a      	mov	r2, r3
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	332d      	adds	r3, #45	; 0x2d
 8001c50:	b29c      	uxth	r4, r3
 8001c52:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c56:	f7ff fbdd 	bl	8001414 <RGB_to_BRG>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	2000      	movs	r0, #0
 8001c60:	f7ff fbd8 	bl	8001414 <RGB_to_BRG>
 8001c64:	4603      	mov	r3, r0
 8001c66:	463a      	mov	r2, r7
 8001c68:	9301      	str	r3, [sp, #4]
 8001c6a:	9500      	str	r5, [sp, #0]
 8001c6c:	4b24      	ldr	r3, [pc, #144]	; (8001d00 <settings_menue+0x5d8>)
 8001c6e:	4621      	mov	r1, r4
 8001c70:	20c8      	movs	r0, #200	; 0xc8
 8001c72:	f003 fe7d 	bl	8005970 <LCD_PutStr>

					}
				}
				if(i >= menu_length-3){
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	2b07      	cmp	r3, #7
 8001c7a:	dd20      	ble.n	8001cbe <settings_menue+0x596>
					LCD_PutStr(200, 45+(i-menue_start)*25, "      ", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001c7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	0092      	lsls	r2, r2, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	0091      	lsls	r1, r2, #2
 8001c8e:	461a      	mov	r2, r3
 8001c90:	460b      	mov	r3, r1
 8001c92:	4413      	add	r3, r2
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	332d      	adds	r3, #45	; 0x2d
 8001c98:	b29c      	uxth	r4, r3
 8001c9a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001c9e:	f7ff fbb9 	bl	8001414 <RGB_to_BRG>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461d      	mov	r5, r3
 8001ca6:	2000      	movs	r0, #0
 8001ca8:	f7ff fbb4 	bl	8001414 <RGB_to_BRG>
 8001cac:	4603      	mov	r3, r0
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	9500      	str	r5, [sp, #0]
 8001cb2:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <settings_menue+0x5d8>)
 8001cb4:	4a15      	ldr	r2, [pc, #84]	; (8001d0c <settings_menue+0x5e4>)
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	20c8      	movs	r0, #200	; 0xc8
 8001cba:	f003 fe59 	bl	8005970 <LCD_PutStr>
			for(int i = menue_start;i<=menue_start+7;i++){
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001cc6:	3307      	adds	r3, #7
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	f77f aef5 	ble.w	8001aba <settings_menue+0x392>
		while(menu_active == 1){
 8001cd0:	8bfb      	ldrh	r3, [r7, #30]
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	f43f ada7 	beq.w	8001826 <settings_menue+0xfe>
				}

			}
		}
	}
}
 8001cd8:	bf00      	nop
 8001cda:	372c      	adds	r7, #44	; 0x2c
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ce2:	bf00      	nop
 8001ce4:	f3af 8000 	nop.w
 8001ce8:	00000000 	.word	0x00000000
 8001cec:	4058e000 	.word	0x4058e000
 8001cf0:	48000400 	.word	0x48000400
 8001cf4:	20000608 	.word	0x20000608
 8001cf8:	20000070 	.word	0x20000070
 8001cfc:	200000b0 	.word	0x200000b0
 8001d00:	0801a200 	.word	0x0801a200
 8001d04:	08019058 	.word	0x08019058
 8001d08:	40230000 	.word	0x40230000
 8001d0c:	08019060 	.word	0x08019060

08001d10 <update_display>:

void update_display(){
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af02      	add	r7, sp, #8
	memset(&buffer, '\0', sizeof(buffer));
 8001d16:	2228      	movs	r2, #40	; 0x28
 8001d18:	2100      	movs	r1, #0
 8001d1a:	4869      	ldr	r0, [pc, #420]	; (8001ec0 <update_display+0x1b0>)
 8001d1c:	f014 ff01 	bl	8016b22 <memset>
	sprintf(buffer, "%.f", sensor_values.set_temperature);
 8001d20:	4b68      	ldr	r3, [pc, #416]	; (8001ec4 <update_display+0x1b4>)
 8001d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d26:	4968      	ldr	r1, [pc, #416]	; (8001ec8 <update_display+0x1b8>)
 8001d28:	4865      	ldr	r0, [pc, #404]	; (8001ec0 <update_display+0x1b0>)
 8001d2a:	f014 fe97 	bl	8016a5c <siprintf>
	if(sensor_values.set_temperature < 99.5){
 8001d2e:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <update_display+0x1b4>)
 8001d30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d34:	a360      	add	r3, pc, #384	; (adr r3, 8001eb8 <update_display+0x1a8>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fef7 	bl	8000b2c <__aeabi_dcmplt>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d005      	beq.n	8001d50 <update_display+0x40>
		buffer[2] = 32;
 8001d44:	4b5e      	ldr	r3, [pc, #376]	; (8001ec0 <update_display+0x1b0>)
 8001d46:	2220      	movs	r2, #32
 8001d48:	709a      	strb	r2, [r3, #2]
		buffer[3] = 32;
 8001d4a:	4b5d      	ldr	r3, [pc, #372]	; (8001ec0 <update_display+0x1b0>)
 8001d4c:	2220      	movs	r2, #32
 8001d4e:	70da      	strb	r2, [r3, #3]
	}
  	LCD_PutStr(10, 75, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001d50:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d54:	f7ff fb5e 	bl	8001414 <RGB_to_BRG>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	461c      	mov	r4, r3
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f7ff fb59 	bl	8001414 <RGB_to_BRG>
 8001d62:	4603      	mov	r3, r0
 8001d64:	9301      	str	r3, [sp, #4]
 8001d66:	9400      	str	r4, [sp, #0]
 8001d68:	4b58      	ldr	r3, [pc, #352]	; (8001ecc <update_display+0x1bc>)
 8001d6a:	4a55      	ldr	r2, [pc, #340]	; (8001ec0 <update_display+0x1b0>)
 8001d6c:	214b      	movs	r1, #75	; 0x4b
 8001d6e:	200a      	movs	r0, #10
 8001d70:	f003 fdfe 	bl	8005970 <LCD_PutStr>

	if(0){//sensor_values.heater_current < 0.1){
	  	LCD_PutStr(10, 165, "---", FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
	}
	else{
		memset(&buffer, '\0', sizeof(buffer));
 8001d74:	2228      	movs	r2, #40	; 0x28
 8001d76:	2100      	movs	r1, #0
 8001d78:	4851      	ldr	r0, [pc, #324]	; (8001ec0 <update_display+0x1b0>)
 8001d7a:	f014 fed2 	bl	8016b22 <memset>
		sprintf(buffer, "%.f", sensor_values.thermocouple_temperature);
 8001d7e:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <update_display+0x1b4>)
 8001d80:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001d84:	4950      	ldr	r1, [pc, #320]	; (8001ec8 <update_display+0x1b8>)
 8001d86:	484e      	ldr	r0, [pc, #312]	; (8001ec0 <update_display+0x1b0>)
 8001d88:	f014 fe68 	bl	8016a5c <siprintf>
		if(sensor_values.thermocouple_temperature < 99.5){
 8001d8c:	4b4d      	ldr	r3, [pc, #308]	; (8001ec4 <update_display+0x1b4>)
 8001d8e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001d92:	a349      	add	r3, pc, #292	; (adr r3, 8001eb8 <update_display+0x1a8>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe fec8 	bl	8000b2c <__aeabi_dcmplt>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <update_display+0x9e>
			buffer[2] = 32;
 8001da2:	4b47      	ldr	r3, [pc, #284]	; (8001ec0 <update_display+0x1b0>)
 8001da4:	2220      	movs	r2, #32
 8001da6:	709a      	strb	r2, [r3, #2]
			buffer[3] = 32;
 8001da8:	4b45      	ldr	r3, [pc, #276]	; (8001ec0 <update_display+0x1b0>)
 8001daa:	2220      	movs	r2, #32
 8001dac:	70da      	strb	r2, [r3, #3]
		}
	  	LCD_PutStr(10, 165, buffer, FONT_arial_36X44_NUMBERS, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001dae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001db2:	f7ff fb2f 	bl	8001414 <RGB_to_BRG>
 8001db6:	4603      	mov	r3, r0
 8001db8:	461c      	mov	r4, r3
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7ff fb2a 	bl	8001414 <RGB_to_BRG>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	9301      	str	r3, [sp, #4]
 8001dc4:	9400      	str	r4, [sp, #0]
 8001dc6:	4b41      	ldr	r3, [pc, #260]	; (8001ecc <update_display+0x1bc>)
 8001dc8:	4a3d      	ldr	r2, [pc, #244]	; (8001ec0 <update_display+0x1b0>)
 8001dca:	21a5      	movs	r1, #165	; 0xa5
 8001dcc:	200a      	movs	r0, #10
 8001dce:	f003 fdcf 	bl	8005970 <LCD_PutStr>
	}

	memset(&buffer, '\0', sizeof(buffer));
 8001dd2:	2228      	movs	r2, #40	; 0x28
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	483a      	ldr	r0, [pc, #232]	; (8001ec0 <update_display+0x1b0>)
 8001dd8:	f014 fea3 	bl	8016b22 <memset>
	sprintf(buffer, "%.1f", sensor_values.bus_voltage);
 8001ddc:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <update_display+0x1b4>)
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fbd9 	bl	8000598 <__aeabi_f2d>
 8001de6:	4602      	mov	r2, r0
 8001de8:	460b      	mov	r3, r1
 8001dea:	4939      	ldr	r1, [pc, #228]	; (8001ed0 <update_display+0x1c0>)
 8001dec:	4834      	ldr	r0, [pc, #208]	; (8001ec0 <update_display+0x1b0>)
 8001dee:	f014 fe35 	bl	8016a5c <siprintf>
	LCD_PutStr(100, 255, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001df2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001df6:	f7ff fb0d 	bl	8001414 <RGB_to_BRG>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461c      	mov	r4, r3
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff fb08 	bl	8001414 <RGB_to_BRG>
 8001e04:	4603      	mov	r3, r0
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	9400      	str	r4, [sp, #0]
 8001e0a:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <update_display+0x1c4>)
 8001e0c:	4a2c      	ldr	r2, [pc, #176]	; (8001ec0 <update_display+0x1b0>)
 8001e0e:	21ff      	movs	r1, #255	; 0xff
 8001e10:	2064      	movs	r0, #100	; 0x64
 8001e12:	f003 fdad 	bl	8005970 <LCD_PutStr>

	memset(&buffer, '\0', sizeof(buffer));
 8001e16:	2228      	movs	r2, #40	; 0x28
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4829      	ldr	r0, [pc, #164]	; (8001ec0 <update_display+0x1b0>)
 8001e1c:	f014 fe81 	bl	8016b22 <memset>
	sprintf(buffer, "%.1f", sensor_values.mcu_temperature);
 8001e20:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <update_display+0x1b4>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fbb7 	bl	8000598 <__aeabi_f2d>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4928      	ldr	r1, [pc, #160]	; (8001ed0 <update_display+0x1c0>)
 8001e30:	4823      	ldr	r0, [pc, #140]	; (8001ec0 <update_display+0x1b0>)
 8001e32:	f014 fe13 	bl	8016a5c <siprintf>
	LCD_PutStr(100, 275, buffer, FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e36:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e3a:	f7ff faeb 	bl	8001414 <RGB_to_BRG>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	461c      	mov	r4, r3
 8001e42:	2000      	movs	r0, #0
 8001e44:	f7ff fae6 	bl	8001414 <RGB_to_BRG>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	9301      	str	r3, [sp, #4]
 8001e4c:	9400      	str	r4, [sp, #0]
 8001e4e:	4b21      	ldr	r3, [pc, #132]	; (8001ed4 <update_display+0x1c4>)
 8001e50:	4a1b      	ldr	r2, [pc, #108]	; (8001ec0 <update_display+0x1b0>)
 8001e52:	f240 1113 	movw	r1, #275	; 0x113
 8001e56:	2064      	movs	r0, #100	; 0x64
 8001e58:	f003 fd8a 	bl	8005970 <LCD_PutStr>

	if(handle == T210){
 8001e5c:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <update_display+0x1c8>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d112      	bne.n	8001e8a <update_display+0x17a>
		LCD_PutStr(100, 235, "T210", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e64:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e68:	f7ff fad4 	bl	8001414 <RGB_to_BRG>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461c      	mov	r4, r3
 8001e70:	2000      	movs	r0, #0
 8001e72:	f7ff facf 	bl	8001414 <RGB_to_BRG>
 8001e76:	4603      	mov	r3, r0
 8001e78:	9301      	str	r3, [sp, #4]
 8001e7a:	9400      	str	r4, [sp, #0]
 8001e7c:	4b15      	ldr	r3, [pc, #84]	; (8001ed4 <update_display+0x1c4>)
 8001e7e:	4a17      	ldr	r2, [pc, #92]	; (8001edc <update_display+0x1cc>)
 8001e80:	21eb      	movs	r1, #235	; 0xeb
 8001e82:	2064      	movs	r0, #100	; 0x64
 8001e84:	f003 fd74 	bl	8005970 <LCD_PutStr>
 8001e88:	e042      	b.n	8001f10 <update_display+0x200>
	}
	else if(handle == T245){
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <update_display+0x1c8>)
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d128      	bne.n	8001ee4 <update_display+0x1d4>
		LCD_PutStr(100, 235, "T245", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001e92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001e96:	f7ff fabd 	bl	8001414 <RGB_to_BRG>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461c      	mov	r4, r3
 8001e9e:	2000      	movs	r0, #0
 8001ea0:	f7ff fab8 	bl	8001414 <RGB_to_BRG>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	9400      	str	r4, [sp, #0]
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <update_display+0x1c4>)
 8001eac:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <update_display+0x1d0>)
 8001eae:	21eb      	movs	r1, #235	; 0xeb
 8001eb0:	2064      	movs	r0, #100	; 0x64
 8001eb2:	f003 fd5d 	bl	8005970 <LCD_PutStr>
 8001eb6:	e02b      	b.n	8001f10 <update_display+0x200>
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	4058e000 	.word	0x4058e000
 8001ec0:	200005c0 	.word	0x200005c0
 8001ec4:	20000028 	.word	0x20000028
 8001ec8:	08019068 	.word	0x08019068
 8001ecc:	0801b178 	.word	0x0801b178
 8001ed0:	0801906c 	.word	0x0801906c
 8001ed4:	08019230 	.word	0x08019230
 8001ed8:	20000580 	.word	0x20000580
 8001edc:	08019074 	.word	0x08019074
 8001ee0:	0801907c 	.word	0x0801907c
	}
	else if(handle == T115){
 8001ee4:	4bab      	ldr	r3, [pc, #684]	; (8002194 <update_display+0x484>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d111      	bne.n	8001f10 <update_display+0x200>
		LCD_PutStr(100, 235, "T115", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8001eec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001ef0:	f7ff fa90 	bl	8001414 <RGB_to_BRG>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	461c      	mov	r4, r3
 8001ef8:	2000      	movs	r0, #0
 8001efa:	f7ff fa8b 	bl	8001414 <RGB_to_BRG>
 8001efe:	4603      	mov	r3, r0
 8001f00:	9301      	str	r3, [sp, #4]
 8001f02:	9400      	str	r4, [sp, #0]
 8001f04:	4ba4      	ldr	r3, [pc, #656]	; (8002198 <update_display+0x488>)
 8001f06:	4aa5      	ldr	r2, [pc, #660]	; (800219c <update_display+0x48c>)
 8001f08:	21eb      	movs	r1, #235	; 0xeb
 8001f0a:	2064      	movs	r0, #100	; 0x64
 8001f0c:	f003 fd30 	bl	8005970 <LCD_PutStr>
	}

	if((active_state == SLEEP || active_state == EMERGENCY_SLEEP || active_state == HALTED) && !sleep_state_written_to_LCD){
 8001f10:	4ba3      	ldr	r3, [pc, #652]	; (80021a0 <update_display+0x490>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d008      	beq.n	8001f2a <update_display+0x21a>
 8001f18:	4ba1      	ldr	r3, [pc, #644]	; (80021a0 <update_display+0x490>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d004      	beq.n	8001f2a <update_display+0x21a>
 8001f20:	4b9f      	ldr	r3, [pc, #636]	; (80021a0 <update_display+0x490>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	f040 8098 	bne.w	800205a <update_display+0x34a>
 8001f2a:	4b9e      	ldr	r3, [pc, #632]	; (80021a4 <update_display+0x494>)
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f040 8093 	bne.w	800205a <update_display+0x34a>
		UG_FillFrame(210,55,230,286, RGB_to_BRG(C_ORANGE));
 8001f34:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001f38:	f7ff fa6c 	bl	8001414 <RGB_to_BRG>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	9300      	str	r3, [sp, #0]
 8001f40:	f44f 738f 	mov.w	r3, #286	; 0x11e
 8001f44:	22e6      	movs	r2, #230	; 0xe6
 8001f46:	2137      	movs	r1, #55	; 0x37
 8001f48:	20d2      	movs	r0, #210	; 0xd2
 8001f4a:	f010 f903 	bl	8012154 <UG_FillFrame>
		LCD_PutStr(214, 58,  "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff fa60 	bl	8001414 <RGB_to_BRG>
 8001f54:	4603      	mov	r3, r0
 8001f56:	461c      	mov	r4, r3
 8001f58:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001f5c:	f7ff fa5a 	bl	8001414 <RGB_to_BRG>
 8001f60:	4603      	mov	r3, r0
 8001f62:	9301      	str	r3, [sp, #4]
 8001f64:	9400      	str	r4, [sp, #0]
 8001f66:	4b90      	ldr	r3, [pc, #576]	; (80021a8 <update_display+0x498>)
 8001f68:	4a90      	ldr	r2, [pc, #576]	; (80021ac <update_display+0x49c>)
 8001f6a:	213a      	movs	r1, #58	; 0x3a
 8001f6c:	20d6      	movs	r0, #214	; 0xd6
 8001f6e:	f003 fcff 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(216, 92, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7ff fa4e 	bl	8001414 <RGB_to_BRG>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461c      	mov	r4, r3
 8001f7c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001f80:	f7ff fa48 	bl	8001414 <RGB_to_BRG>
 8001f84:	4603      	mov	r3, r0
 8001f86:	9301      	str	r3, [sp, #4]
 8001f88:	9400      	str	r4, [sp, #0]
 8001f8a:	4b87      	ldr	r3, [pc, #540]	; (80021a8 <update_display+0x498>)
 8001f8c:	4a88      	ldr	r2, [pc, #544]	; (80021b0 <update_display+0x4a0>)
 8001f8e:	215c      	movs	r1, #92	; 0x5c
 8001f90:	20d8      	movs	r0, #216	; 0xd8
 8001f92:	f003 fced 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(214, 126, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7ff fa3c 	bl	8001414 <RGB_to_BRG>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	461c      	mov	r4, r3
 8001fa0:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001fa4:	f7ff fa36 	bl	8001414 <RGB_to_BRG>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	9400      	str	r4, [sp, #0]
 8001fae:	4b7e      	ldr	r3, [pc, #504]	; (80021a8 <update_display+0x498>)
 8001fb0:	4a7e      	ldr	r2, [pc, #504]	; (80021ac <update_display+0x49c>)
 8001fb2:	217e      	movs	r1, #126	; 0x7e
 8001fb4:	20d6      	movs	r0, #214	; 0xd6
 8001fb6:	f003 fcdb 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(216, 161, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff fa2a 	bl	8001414 <RGB_to_BRG>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	461c      	mov	r4, r3
 8001fc4:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001fc8:	f7ff fa24 	bl	8001414 <RGB_to_BRG>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	9301      	str	r3, [sp, #4]
 8001fd0:	9400      	str	r4, [sp, #0]
 8001fd2:	4b75      	ldr	r3, [pc, #468]	; (80021a8 <update_display+0x498>)
 8001fd4:	4a76      	ldr	r2, [pc, #472]	; (80021b0 <update_display+0x4a0>)
 8001fd6:	21a1      	movs	r1, #161	; 0xa1
 8001fd8:	20d8      	movs	r0, #216	; 0xd8
 8001fda:	f003 fcc9 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(214, 194, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7ff fa18 	bl	8001414 <RGB_to_BRG>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	461c      	mov	r4, r3
 8001fe8:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8001fec:	f7ff fa12 	bl	8001414 <RGB_to_BRG>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	9400      	str	r4, [sp, #0]
 8001ff6:	4b6c      	ldr	r3, [pc, #432]	; (80021a8 <update_display+0x498>)
 8001ff8:	4a6c      	ldr	r2, [pc, #432]	; (80021ac <update_display+0x49c>)
 8001ffa:	21c2      	movs	r1, #194	; 0xc2
 8001ffc:	20d6      	movs	r0, #214	; 0xd6
 8001ffe:	f003 fcb7 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(216, 228, "z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002002:	2000      	movs	r0, #0
 8002004:	f7ff fa06 	bl	8001414 <RGB_to_BRG>
 8002008:	4603      	mov	r3, r0
 800200a:	461c      	mov	r4, r3
 800200c:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002010:	f7ff fa00 	bl	8001414 <RGB_to_BRG>
 8002014:	4603      	mov	r3, r0
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	9400      	str	r4, [sp, #0]
 800201a:	4b63      	ldr	r3, [pc, #396]	; (80021a8 <update_display+0x498>)
 800201c:	4a64      	ldr	r2, [pc, #400]	; (80021b0 <update_display+0x4a0>)
 800201e:	21e4      	movs	r1, #228	; 0xe4
 8002020:	20d8      	movs	r0, #216	; 0xd8
 8002022:	f003 fca5 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(214, 262, "Z", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff f9f4 	bl	8001414 <RGB_to_BRG>
 800202c:	4603      	mov	r3, r0
 800202e:	461c      	mov	r4, r3
 8002030:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002034:	f7ff f9ee 	bl	8001414 <RGB_to_BRG>
 8002038:	4603      	mov	r3, r0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	9400      	str	r4, [sp, #0]
 800203e:	4b5a      	ldr	r3, [pc, #360]	; (80021a8 <update_display+0x498>)
 8002040:	4a5a      	ldr	r2, [pc, #360]	; (80021ac <update_display+0x49c>)
 8002042:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002046:	20d6      	movs	r0, #214	; 0xd6
 8002048:	f003 fc92 	bl	8005970 <LCD_PutStr>
		sleep_state_written_to_LCD = 1;
 800204c:	4b55      	ldr	r3, [pc, #340]	; (80021a4 <update_display+0x494>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
		standby_state_written_to_LCD = 0;
 8002052:	4b58      	ldr	r3, [pc, #352]	; (80021b4 <update_display+0x4a4>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e128      	b.n	80022ac <update_display+0x59c>
	}
	else if((active_state == STANDBY) && !standby_state_written_to_LCD){
 800205a:	4b51      	ldr	r3, [pc, #324]	; (80021a0 <update_display+0x490>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	f040 80b8 	bne.w	80021d4 <update_display+0x4c4>
 8002064:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <update_display+0x4a4>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	f040 80b3 	bne.w	80021d4 <update_display+0x4c4>
		UG_FillFrame(210, 55, 230,286, RGB_to_BRG(C_ORANGE));
 800206e:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002072:	f7ff f9cf 	bl	8001414 <RGB_to_BRG>
 8002076:	4603      	mov	r3, r0
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	f44f 738f 	mov.w	r3, #286	; 0x11e
 800207e:	22e6      	movs	r2, #230	; 0xe6
 8002080:	2137      	movs	r1, #55	; 0x37
 8002082:	20d2      	movs	r0, #210	; 0xd2
 8002084:	f010 f866 	bl	8012154 <UG_FillFrame>
		LCD_PutStr(214, 58,  "S", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002088:	2000      	movs	r0, #0
 800208a:	f7ff f9c3 	bl	8001414 <RGB_to_BRG>
 800208e:	4603      	mov	r3, r0
 8002090:	461c      	mov	r4, r3
 8002092:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002096:	f7ff f9bd 	bl	8001414 <RGB_to_BRG>
 800209a:	4603      	mov	r3, r0
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	9400      	str	r4, [sp, #0]
 80020a0:	4b41      	ldr	r3, [pc, #260]	; (80021a8 <update_display+0x498>)
 80020a2:	4a45      	ldr	r2, [pc, #276]	; (80021b8 <update_display+0x4a8>)
 80020a4:	213a      	movs	r1, #58	; 0x3a
 80020a6:	20d6      	movs	r0, #214	; 0xd6
 80020a8:	f003 fc62 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(214, 92,  "T", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff f9b1 	bl	8001414 <RGB_to_BRG>
 80020b2:	4603      	mov	r3, r0
 80020b4:	461c      	mov	r4, r3
 80020b6:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80020ba:	f7ff f9ab 	bl	8001414 <RGB_to_BRG>
 80020be:	4603      	mov	r3, r0
 80020c0:	9301      	str	r3, [sp, #4]
 80020c2:	9400      	str	r4, [sp, #0]
 80020c4:	4b38      	ldr	r3, [pc, #224]	; (80021a8 <update_display+0x498>)
 80020c6:	4a3d      	ldr	r2, [pc, #244]	; (80021bc <update_display+0x4ac>)
 80020c8:	215c      	movs	r1, #92	; 0x5c
 80020ca:	20d6      	movs	r0, #214	; 0xd6
 80020cc:	f003 fc50 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(214, 126, "A", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff f99f 	bl	8001414 <RGB_to_BRG>
 80020d6:	4603      	mov	r3, r0
 80020d8:	461c      	mov	r4, r3
 80020da:	f64f 5020 	movw	r0, #64800	; 0xfd20
 80020de:	f7ff f999 	bl	8001414 <RGB_to_BRG>
 80020e2:	4603      	mov	r3, r0
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	9400      	str	r4, [sp, #0]
 80020e8:	4b2f      	ldr	r3, [pc, #188]	; (80021a8 <update_display+0x498>)
 80020ea:	4a35      	ldr	r2, [pc, #212]	; (80021c0 <update_display+0x4b0>)
 80020ec:	217e      	movs	r1, #126	; 0x7e
 80020ee:	20d6      	movs	r0, #214	; 0xd6
 80020f0:	f003 fc3e 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(214, 161, "N", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7ff f98d 	bl	8001414 <RGB_to_BRG>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461c      	mov	r4, r3
 80020fe:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002102:	f7ff f987 	bl	8001414 <RGB_to_BRG>
 8002106:	4603      	mov	r3, r0
 8002108:	9301      	str	r3, [sp, #4]
 800210a:	9400      	str	r4, [sp, #0]
 800210c:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <update_display+0x498>)
 800210e:	4a2d      	ldr	r2, [pc, #180]	; (80021c4 <update_display+0x4b4>)
 8002110:	21a1      	movs	r1, #161	; 0xa1
 8002112:	20d6      	movs	r0, #214	; 0xd6
 8002114:	f003 fc2c 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(214, 194, "D", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002118:	2000      	movs	r0, #0
 800211a:	f7ff f97b 	bl	8001414 <RGB_to_BRG>
 800211e:	4603      	mov	r3, r0
 8002120:	461c      	mov	r4, r3
 8002122:	f64f 5020 	movw	r0, #64800	; 0xfd20
 8002126:	f7ff f975 	bl	8001414 <RGB_to_BRG>
 800212a:	4603      	mov	r3, r0
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	9400      	str	r4, [sp, #0]
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <update_display+0x498>)
 8002132:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <update_display+0x4b8>)
 8002134:	21c2      	movs	r1, #194	; 0xc2
 8002136:	20d6      	movs	r0, #214	; 0xd6
 8002138:	f003 fc1a 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(214, 228, "B", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 800213c:	2000      	movs	r0, #0
 800213e:	f7ff f969 	bl	8001414 <RGB_to_BRG>
 8002142:	4603      	mov	r3, r0
 8002144:	461c      	mov	r4, r3
 8002146:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800214a:	f7ff f963 	bl	8001414 <RGB_to_BRG>
 800214e:	4603      	mov	r3, r0
 8002150:	9301      	str	r3, [sp, #4]
 8002152:	9400      	str	r4, [sp, #0]
 8002154:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <update_display+0x498>)
 8002156:	4a1d      	ldr	r2, [pc, #116]	; (80021cc <update_display+0x4bc>)
 8002158:	21e4      	movs	r1, #228	; 0xe4
 800215a:	20d6      	movs	r0, #214	; 0xd6
 800215c:	f003 fc08 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(214, 262, "Y", FONT_arial_20X23, RGB_to_BRG(C_BLACK), RGB_to_BRG(C_ORANGE));
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff f957 	bl	8001414 <RGB_to_BRG>
 8002166:	4603      	mov	r3, r0
 8002168:	461c      	mov	r4, r3
 800216a:	f64f 5020 	movw	r0, #64800	; 0xfd20
 800216e:	f7ff f951 	bl	8001414 <RGB_to_BRG>
 8002172:	4603      	mov	r3, r0
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	9400      	str	r4, [sp, #0]
 8002178:	4b0b      	ldr	r3, [pc, #44]	; (80021a8 <update_display+0x498>)
 800217a:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <update_display+0x4c0>)
 800217c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8002180:	20d6      	movs	r0, #214	; 0xd6
 8002182:	f003 fbf5 	bl	8005970 <LCD_PutStr>
		standby_state_written_to_LCD = 1;
 8002186:	4b0b      	ldr	r3, [pc, #44]	; (80021b4 <update_display+0x4a4>)
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 800218c:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <update_display+0x494>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
 8002192:	e08b      	b.n	80022ac <update_display+0x59c>
 8002194:	20000580 	.word	0x20000580
 8002198:	08019230 	.word	0x08019230
 800219c:	08019084 	.word	0x08019084
 80021a0:	20000015 	.word	0x20000015
 80021a4:	200005a3 	.word	0x200005a3
 80021a8:	0801a200 	.word	0x0801a200
 80021ac:	0801908c 	.word	0x0801908c
 80021b0:	08019090 	.word	0x08019090
 80021b4:	200005a4 	.word	0x200005a4
 80021b8:	08019094 	.word	0x08019094
 80021bc:	08019098 	.word	0x08019098
 80021c0:	0801909c 	.word	0x0801909c
 80021c4:	080190a0 	.word	0x080190a0
 80021c8:	080190a4 	.word	0x080190a4
 80021cc:	080190a8 	.word	0x080190a8
 80021d0:	080190ac 	.word	0x080190ac
	}
	else if(active_state == RUN){
 80021d4:	4b3c      	ldr	r3, [pc, #240]	; (80022c8 <update_display+0x5b8>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d167      	bne.n	80022ac <update_display+0x59c>
		UG_FillFrame(210, 287-(PID_output/PID_MAX_OUTPUT)*232, 	230, 	287, 									RGB_to_BRG(C_LIGHT_SKY_BLUE));
 80021dc:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <update_display+0x5bc>)
 80021de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	4b3a      	ldr	r3, [pc, #232]	; (80022d0 <update_display+0x5c0>)
 80021e8:	f7fe fb58 	bl	800089c <__aeabi_ddiv>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f04f 0200 	mov.w	r2, #0
 80021f8:	4b36      	ldr	r3, [pc, #216]	; (80022d4 <update_display+0x5c4>)
 80021fa:	f7fe fa25 	bl	8000648 <__aeabi_dmul>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	a12d      	add	r1, pc, #180	; (adr r1, 80022b8 <update_display+0x5a8>)
 8002204:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002208:	f7fe f866 	bl	80002d8 <__aeabi_dsub>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fcc8 	bl	8000ba8 <__aeabi_d2iz>
 8002218:	4603      	mov	r3, r0
 800221a:	b21c      	sxth	r4, r3
 800221c:	f248 607e 	movw	r0, #34430	; 0x867e
 8002220:	f7ff f8f8 	bl	8001414 <RGB_to_BRG>
 8002224:	4603      	mov	r3, r0
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	f240 131f 	movw	r3, #287	; 0x11f
 800222c:	22e6      	movs	r2, #230	; 0xe6
 800222e:	4621      	mov	r1, r4
 8002230:	20d2      	movs	r0, #210	; 0xd2
 8002232:	f00f ff8f 	bl	8012154 <UG_FillFrame>
		UG_FillFrame(210, 55, 									230, 	287-(PID_output/PID_MAX_OUTPUT)*231-1, RGB_to_BRG(C_BLACK));
 8002236:	4b25      	ldr	r3, [pc, #148]	; (80022cc <update_display+0x5bc>)
 8002238:	e9d3 0100 	ldrd	r0, r1, [r3]
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <update_display+0x5c0>)
 8002242:	f7fe fb2b 	bl	800089c <__aeabi_ddiv>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	a31c      	add	r3, pc, #112	; (adr r3, 80022c0 <update_display+0x5b0>)
 8002250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002254:	f7fe f9f8 	bl	8000648 <__aeabi_dmul>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	a116      	add	r1, pc, #88	; (adr r1, 80022b8 <update_display+0x5a8>)
 800225e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002262:	f7fe f839 	bl	80002d8 <__aeabi_dsub>
 8002266:	4602      	mov	r2, r0
 8002268:	460b      	mov	r3, r1
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	f04f 0200 	mov.w	r2, #0
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <update_display+0x5c8>)
 8002274:	f7fe f830 	bl	80002d8 <__aeabi_dsub>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4610      	mov	r0, r2
 800227e:	4619      	mov	r1, r3
 8002280:	f7fe fc92 	bl	8000ba8 <__aeabi_d2iz>
 8002284:	4603      	mov	r3, r0
 8002286:	b21c      	sxth	r4, r3
 8002288:	2000      	movs	r0, #0
 800228a:	f7ff f8c3 	bl	8001414 <RGB_to_BRG>
 800228e:	4603      	mov	r3, r0
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	4623      	mov	r3, r4
 8002294:	22e6      	movs	r2, #230	; 0xe6
 8002296:	2137      	movs	r1, #55	; 0x37
 8002298:	20d2      	movs	r0, #210	; 0xd2
 800229a:	f00f ff5b 	bl	8012154 <UG_FillFrame>
		standby_state_written_to_LCD = 0;
 800229e:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <update_display+0x5cc>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	701a      	strb	r2, [r3, #0]
		sleep_state_written_to_LCD = 0;
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <update_display+0x5d0>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	701a      	strb	r2, [r3, #0]
	}
}
 80022aa:	e7ff      	b.n	80022ac <update_display+0x59c>
 80022ac:	bf00      	nop
 80022ae:	3704      	adds	r7, #4
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd90      	pop	{r4, r7, pc}
 80022b4:	f3af 8000 	nop.w
 80022b8:	00000000 	.word	0x00000000
 80022bc:	4071f000 	.word	0x4071f000
 80022c0:	00000000 	.word	0x00000000
 80022c4:	406ce000 	.word	0x406ce000
 80022c8:	20000015 	.word	0x20000015
 80022cc:	20000648 	.word	0x20000648
 80022d0:	407f4000 	.word	0x407f4000
 80022d4:	406d0000 	.word	0x406d0000
 80022d8:	3ff00000 	.word	0x3ff00000
 80022dc:	200005a4 	.word	0x200005a4
 80022e0:	200005a3 	.word	0x200005a3

080022e4 <LCD_draw_main_screen>:

void LCD_draw_main_screen(){
 80022e4:	b590      	push	{r4, r7, lr}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af02      	add	r7, sp, #8
		UG_FillScreen(RGB_to_BRG(C_BLACK));
 80022ea:	2000      	movs	r0, #0
 80022ec:	f7ff f892 	bl	8001414 <RGB_to_BRG>
 80022f0:	4603      	mov	r3, r0
 80022f2:	4618      	mov	r0, r3
 80022f4:	f00f ff0a 	bl	801210c <UG_FillScreen>

		LCD_PutStr(53, 12, "AxxSolder", FONT_arial_19X22, RGB_to_BRG(C_YELLOW), RGB_to_BRG(C_BLACK));
 80022f8:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 80022fc:	f7ff f88a 	bl	8001414 <RGB_to_BRG>
 8002300:	4603      	mov	r3, r0
 8002302:	461c      	mov	r4, r3
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff f885 	bl	8001414 <RGB_to_BRG>
 800230a:	4603      	mov	r3, r0
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	9400      	str	r4, [sp, #0]
 8002310:	4bc3      	ldr	r3, [pc, #780]	; (8002620 <LCD_draw_main_screen+0x33c>)
 8002312:	4ac4      	ldr	r2, [pc, #784]	; (8002624 <LCD_draw_main_screen+0x340>)
 8002314:	210c      	movs	r1, #12
 8002316:	2035      	movs	r0, #53	; 0x35
 8002318:	f003 fb2a 	bl	8005970 <LCD_PutStr>
		LCD_DrawLine(0,40,240,40,RGB_to_BRG(C_YELLOW));
 800231c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002320:	f7ff f878 	bl	8001414 <RGB_to_BRG>
 8002324:	4603      	mov	r3, r0
 8002326:	9300      	str	r3, [sp, #0]
 8002328:	2328      	movs	r3, #40	; 0x28
 800232a:	22f0      	movs	r2, #240	; 0xf0
 800232c:	2128      	movs	r1, #40	; 0x28
 800232e:	2000      	movs	r0, #0
 8002330:	f003 fae0 	bl	80058f4 <LCD_DrawLine>
		LCD_DrawLine(0,41,240,41,RGB_to_BRG(C_YELLOW));
 8002334:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002338:	f7ff f86c 	bl	8001414 <RGB_to_BRG>
 800233c:	4603      	mov	r3, r0
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2329      	movs	r3, #41	; 0x29
 8002342:	22f0      	movs	r2, #240	; 0xf0
 8002344:	2129      	movs	r1, #41	; 0x29
 8002346:	2000      	movs	r0, #0
 8002348:	f003 fad4 	bl	80058f4 <LCD_DrawLine>
		LCD_DrawLine(0,42,240,42,RGB_to_BRG(C_YELLOW));
 800234c:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8002350:	f7ff f860 	bl	8001414 <RGB_to_BRG>
 8002354:	4603      	mov	r3, r0
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	232a      	movs	r3, #42	; 0x2a
 800235a:	22f0      	movs	r2, #240	; 0xf0
 800235c:	212a      	movs	r1, #42	; 0x2a
 800235e:	2000      	movs	r0, #0
 8002360:	f003 fac8 	bl	80058f4 <LCD_DrawLine>


		LCD_PutStr(10, 50, "Set temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002364:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002368:	f7ff f854 	bl	8001414 <RGB_to_BRG>
 800236c:	4603      	mov	r3, r0
 800236e:	461c      	mov	r4, r3
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff f84f 	bl	8001414 <RGB_to_BRG>
 8002376:	4603      	mov	r3, r0
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	9400      	str	r4, [sp, #0]
 800237c:	4baa      	ldr	r3, [pc, #680]	; (8002628 <LCD_draw_main_screen+0x344>)
 800237e:	4aab      	ldr	r2, [pc, #684]	; (800262c <LCD_draw_main_screen+0x348>)
 8002380:	2132      	movs	r1, #50	; 0x32
 8002382:	200a      	movs	r0, #10
 8002384:	f003 faf4 	bl	8005970 <LCD_PutStr>
		UG_DrawCircle(120, 85, 5, RGB_to_BRG(C_WHITE));
 8002388:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800238c:	f7ff f842 	bl	8001414 <RGB_to_BRG>
 8002390:	4603      	mov	r3, r0
 8002392:	2205      	movs	r2, #5
 8002394:	2155      	movs	r1, #85	; 0x55
 8002396:	2078      	movs	r0, #120	; 0x78
 8002398:	f00f ff96 	bl	80122c8 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 4, RGB_to_BRG(C_WHITE));
 800239c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023a0:	f7ff f838 	bl	8001414 <RGB_to_BRG>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2204      	movs	r2, #4
 80023a8:	2155      	movs	r1, #85	; 0x55
 80023aa:	2078      	movs	r0, #120	; 0x78
 80023ac:	f00f ff8c 	bl	80122c8 <UG_DrawCircle>
		UG_DrawCircle(120, 85, 3, RGB_to_BRG(C_WHITE));
 80023b0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023b4:	f7ff f82e 	bl	8001414 <RGB_to_BRG>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2203      	movs	r2, #3
 80023bc:	2155      	movs	r1, #85	; 0x55
 80023be:	2078      	movs	r0, #120	; 0x78
 80023c0:	f00f ff82 	bl	80122c8 <UG_DrawCircle>
		LCD_PutStr(130, 75, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80023c4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023c8:	f7ff f824 	bl	8001414 <RGB_to_BRG>
 80023cc:	4603      	mov	r3, r0
 80023ce:	461c      	mov	r4, r3
 80023d0:	2000      	movs	r0, #0
 80023d2:	f7ff f81f 	bl	8001414 <RGB_to_BRG>
 80023d6:	4603      	mov	r3, r0
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	9400      	str	r4, [sp, #0]
 80023dc:	4b94      	ldr	r3, [pc, #592]	; (8002630 <LCD_draw_main_screen+0x34c>)
 80023de:	4a95      	ldr	r2, [pc, #596]	; (8002634 <LCD_draw_main_screen+0x350>)
 80023e0:	214b      	movs	r1, #75	; 0x4b
 80023e2:	2082      	movs	r0, #130	; 0x82
 80023e4:	f003 fac4 	bl	8005970 <LCD_PutStr>


		LCD_PutStr(10, 140, "Actual temp", FONT_arial_20X23, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80023e8:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80023ec:	f7ff f812 	bl	8001414 <RGB_to_BRG>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461c      	mov	r4, r3
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff f80d 	bl	8001414 <RGB_to_BRG>
 80023fa:	4603      	mov	r3, r0
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	9400      	str	r4, [sp, #0]
 8002400:	4b89      	ldr	r3, [pc, #548]	; (8002628 <LCD_draw_main_screen+0x344>)
 8002402:	4a8d      	ldr	r2, [pc, #564]	; (8002638 <LCD_draw_main_screen+0x354>)
 8002404:	218c      	movs	r1, #140	; 0x8c
 8002406:	200a      	movs	r0, #10
 8002408:	f003 fab2 	bl	8005970 <LCD_PutStr>
		UG_DrawCircle(120, 175, 5, RGB_to_BRG(C_WHITE));
 800240c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002410:	f7ff f800 	bl	8001414 <RGB_to_BRG>
 8002414:	4603      	mov	r3, r0
 8002416:	2205      	movs	r2, #5
 8002418:	21af      	movs	r1, #175	; 0xaf
 800241a:	2078      	movs	r0, #120	; 0x78
 800241c:	f00f ff54 	bl	80122c8 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 4, RGB_to_BRG(C_WHITE));
 8002420:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002424:	f7fe fff6 	bl	8001414 <RGB_to_BRG>
 8002428:	4603      	mov	r3, r0
 800242a:	2204      	movs	r2, #4
 800242c:	21af      	movs	r1, #175	; 0xaf
 800242e:	2078      	movs	r0, #120	; 0x78
 8002430:	f00f ff4a 	bl	80122c8 <UG_DrawCircle>
		UG_DrawCircle(120, 175, 3, RGB_to_BRG(C_WHITE));
 8002434:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002438:	f7fe ffec 	bl	8001414 <RGB_to_BRG>
 800243c:	4603      	mov	r3, r0
 800243e:	2203      	movs	r2, #3
 8002440:	21af      	movs	r1, #175	; 0xaf
 8002442:	2078      	movs	r0, #120	; 0x78
 8002444:	f00f ff40 	bl	80122c8 <UG_DrawCircle>
		LCD_PutStr(130, 165, "C", FONT_arial_36X44_C, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 8002448:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800244c:	f7fe ffe2 	bl	8001414 <RGB_to_BRG>
 8002450:	4603      	mov	r3, r0
 8002452:	461c      	mov	r4, r3
 8002454:	2000      	movs	r0, #0
 8002456:	f7fe ffdd 	bl	8001414 <RGB_to_BRG>
 800245a:	4603      	mov	r3, r0
 800245c:	9301      	str	r3, [sp, #4]
 800245e:	9400      	str	r4, [sp, #0]
 8002460:	4b73      	ldr	r3, [pc, #460]	; (8002630 <LCD_draw_main_screen+0x34c>)
 8002462:	4a74      	ldr	r2, [pc, #464]	; (8002634 <LCD_draw_main_screen+0x350>)
 8002464:	21a5      	movs	r1, #165	; 0xa5
 8002466:	2082      	movs	r0, #130	; 0x82
 8002468:	f003 fa82 	bl	8005970 <LCD_PutStr>

		UG_DrawFrame(4, 134, 182, 220, RGB_to_BRG(C_WHITE));
 800246c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002470:	f7fe ffd0 	bl	8001414 <RGB_to_BRG>
 8002474:	4603      	mov	r3, r0
 8002476:	9300      	str	r3, [sp, #0]
 8002478:	23dc      	movs	r3, #220	; 0xdc
 800247a:	22b6      	movs	r2, #182	; 0xb6
 800247c:	2186      	movs	r1, #134	; 0x86
 800247e:	2004      	movs	r0, #4
 8002480:	f00f feda 	bl	8012238 <UG_DrawFrame>
		UG_DrawFrame(3, 133, 183, 221, RGB_to_BRG(C_WHITE));
 8002484:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002488:	f7fe ffc4 	bl	8001414 <RGB_to_BRG>
 800248c:	4603      	mov	r3, r0
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	23dd      	movs	r3, #221	; 0xdd
 8002492:	22b7      	movs	r2, #183	; 0xb7
 8002494:	2185      	movs	r1, #133	; 0x85
 8002496:	2003      	movs	r0, #3
 8002498:	f00f fece 	bl	8012238 <UG_DrawFrame>

		LCD_PutStr(2, 235, "Handle type:", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 800249c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024a0:	f7fe ffb8 	bl	8001414 <RGB_to_BRG>
 80024a4:	4603      	mov	r3, r0
 80024a6:	461c      	mov	r4, r3
 80024a8:	2000      	movs	r0, #0
 80024aa:	f7fe ffb3 	bl	8001414 <RGB_to_BRG>
 80024ae:	4603      	mov	r3, r0
 80024b0:	9301      	str	r3, [sp, #4]
 80024b2:	9400      	str	r4, [sp, #0]
 80024b4:	4b61      	ldr	r3, [pc, #388]	; (800263c <LCD_draw_main_screen+0x358>)
 80024b6:	4a62      	ldr	r2, [pc, #392]	; (8002640 <LCD_draw_main_screen+0x35c>)
 80024b8:	21eb      	movs	r1, #235	; 0xeb
 80024ba:	2002      	movs	r0, #2
 80024bc:	f003 fa58 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(2, 255, "Input voltage:         V", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80024c0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024c4:	f7fe ffa6 	bl	8001414 <RGB_to_BRG>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461c      	mov	r4, r3
 80024cc:	2000      	movs	r0, #0
 80024ce:	f7fe ffa1 	bl	8001414 <RGB_to_BRG>
 80024d2:	4603      	mov	r3, r0
 80024d4:	9301      	str	r3, [sp, #4]
 80024d6:	9400      	str	r4, [sp, #0]
 80024d8:	4b58      	ldr	r3, [pc, #352]	; (800263c <LCD_draw_main_screen+0x358>)
 80024da:	4a5a      	ldr	r2, [pc, #360]	; (8002644 <LCD_draw_main_screen+0x360>)
 80024dc:	21ff      	movs	r1, #255	; 0xff
 80024de:	2002      	movs	r0, #2
 80024e0:	f003 fa46 	bl	8005970 <LCD_PutStr>
		LCD_PutStr(2, 275, "MCU temp:             deg C", FONT_arial_16X18, RGB_to_BRG(C_WHITE), RGB_to_BRG(C_BLACK));
 80024e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80024e8:	f7fe ff94 	bl	8001414 <RGB_to_BRG>
 80024ec:	4603      	mov	r3, r0
 80024ee:	461c      	mov	r4, r3
 80024f0:	2000      	movs	r0, #0
 80024f2:	f7fe ff8f 	bl	8001414 <RGB_to_BRG>
 80024f6:	4603      	mov	r3, r0
 80024f8:	9301      	str	r3, [sp, #4]
 80024fa:	9400      	str	r4, [sp, #0]
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <LCD_draw_main_screen+0x358>)
 80024fe:	4a52      	ldr	r2, [pc, #328]	; (8002648 <LCD_draw_main_screen+0x364>)
 8002500:	f240 1113 	movw	r1, #275	; 0x113
 8002504:	2002      	movs	r0, #2
 8002506:	f003 fa33 	bl	8005970 <LCD_PutStr>

		UG_DrawLine(2, 296, 240, 296, RGB_to_BRG(C_DARK_SEA_GREEN));
 800250a:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 800250e:	f7fe ff81 	bl	8001414 <RGB_to_BRG>
 8002512:	4603      	mov	r3, r0
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	f44f 7394 	mov.w	r3, #296	; 0x128
 800251a:	22f0      	movs	r2, #240	; 0xf0
 800251c:	f44f 7194 	mov.w	r1, #296	; 0x128
 8002520:	2002      	movs	r0, #2
 8002522:	f00f ffb7 	bl	8012494 <UG_DrawLine>
		UG_DrawLine(2, 297, 240, 297, RGB_to_BRG(C_DARK_SEA_GREEN));
 8002526:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 800252a:	f7fe ff73 	bl	8001414 <RGB_to_BRG>
 800252e:	4603      	mov	r3, r0
 8002530:	9300      	str	r3, [sp, #0]
 8002532:	f240 1329 	movw	r3, #297	; 0x129
 8002536:	22f0      	movs	r2, #240	; 0xf0
 8002538:	f240 1129 	movw	r1, #297	; 0x129
 800253c:	2002      	movs	r0, #2
 800253e:	f00f ffa9 	bl	8012494 <UG_DrawLine>


		LCD_PutStr(2, 301, "PRESETS", FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002542:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002546:	f7fe ff65 	bl	8001414 <RGB_to_BRG>
 800254a:	4603      	mov	r3, r0
 800254c:	461c      	mov	r4, r3
 800254e:	2000      	movs	r0, #0
 8002550:	f7fe ff60 	bl	8001414 <RGB_to_BRG>
 8002554:	4603      	mov	r3, r0
 8002556:	9301      	str	r3, [sp, #4]
 8002558:	9400      	str	r4, [sp, #0]
 800255a:	4b33      	ldr	r3, [pc, #204]	; (8002628 <LCD_draw_main_screen+0x344>)
 800255c:	4a3b      	ldr	r2, [pc, #236]	; (800264c <LCD_draw_main_screen+0x368>)
 800255e:	f240 112d 	movw	r1, #301	; 0x12d
 8002562:	2002      	movs	r0, #2
 8002564:	f003 fa04 	bl	8005970 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 8002568:	2228      	movs	r2, #40	; 0x28
 800256a:	2100      	movs	r1, #0
 800256c:	4838      	ldr	r0, [pc, #224]	; (8002650 <LCD_draw_main_screen+0x36c>)
 800256e:	f014 fad8 	bl	8016b22 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_1);
 8002572:	4b38      	ldr	r3, [pc, #224]	; (8002654 <LCD_draw_main_screen+0x370>)
 8002574:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002578:	4937      	ldr	r1, [pc, #220]	; (8002658 <LCD_draw_main_screen+0x374>)
 800257a:	4835      	ldr	r0, [pc, #212]	; (8002650 <LCD_draw_main_screen+0x36c>)
 800257c:	f014 fa6e 	bl	8016a5c <siprintf>
		LCD_PutStr(130, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 8002580:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 8002584:	f7fe ff46 	bl	8001414 <RGB_to_BRG>
 8002588:	4603      	mov	r3, r0
 800258a:	461c      	mov	r4, r3
 800258c:	2000      	movs	r0, #0
 800258e:	f7fe ff41 	bl	8001414 <RGB_to_BRG>
 8002592:	4603      	mov	r3, r0
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	9400      	str	r4, [sp, #0]
 8002598:	4b23      	ldr	r3, [pc, #140]	; (8002628 <LCD_draw_main_screen+0x344>)
 800259a:	4a2d      	ldr	r2, [pc, #180]	; (8002650 <LCD_draw_main_screen+0x36c>)
 800259c:	f240 112d 	movw	r1, #301	; 0x12d
 80025a0:	2082      	movs	r0, #130	; 0x82
 80025a2:	f003 f9e5 	bl	8005970 <LCD_PutStr>
		memset(&buffer, '\0', sizeof(buffer));
 80025a6:	2228      	movs	r2, #40	; 0x28
 80025a8:	2100      	movs	r1, #0
 80025aa:	4829      	ldr	r0, [pc, #164]	; (8002650 <LCD_draw_main_screen+0x36c>)
 80025ac:	f014 fab9 	bl	8016b22 <memset>
		sprintf(buffer, "%.0f", flash_values.preset_temp_2);
 80025b0:	4b28      	ldr	r3, [pc, #160]	; (8002654 <LCD_draw_main_screen+0x370>)
 80025b2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80025b6:	4928      	ldr	r1, [pc, #160]	; (8002658 <LCD_draw_main_screen+0x374>)
 80025b8:	4825      	ldr	r0, [pc, #148]	; (8002650 <LCD_draw_main_screen+0x36c>)
 80025ba:	f014 fa4f 	bl	8016a5c <siprintf>
		LCD_PutStr(190, 301, buffer, FONT_arial_20X23, RGB_to_BRG(C_DARK_SEA_GREEN), RGB_to_BRG(C_BLACK));
 80025be:	f648 50d1 	movw	r0, #36305	; 0x8dd1
 80025c2:	f7fe ff27 	bl	8001414 <RGB_to_BRG>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461c      	mov	r4, r3
 80025ca:	2000      	movs	r0, #0
 80025cc:	f7fe ff22 	bl	8001414 <RGB_to_BRG>
 80025d0:	4603      	mov	r3, r0
 80025d2:	9301      	str	r3, [sp, #4]
 80025d4:	9400      	str	r4, [sp, #0]
 80025d6:	4b14      	ldr	r3, [pc, #80]	; (8002628 <LCD_draw_main_screen+0x344>)
 80025d8:	4a1d      	ldr	r2, [pc, #116]	; (8002650 <LCD_draw_main_screen+0x36c>)
 80025da:	f240 112d 	movw	r1, #301	; 0x12d
 80025de:	20be      	movs	r0, #190	; 0xbe
 80025e0:	f003 f9c6 	bl	8005970 <LCD_PutStr>

		UG_DrawFrame(208, 53, 232, 289, RGB_to_BRG(C_WHITE));
 80025e4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80025e8:	f7fe ff14 	bl	8001414 <RGB_to_BRG>
 80025ec:	4603      	mov	r3, r0
 80025ee:	9300      	str	r3, [sp, #0]
 80025f0:	f240 1321 	movw	r3, #289	; 0x121
 80025f4:	22e8      	movs	r2, #232	; 0xe8
 80025f6:	2135      	movs	r1, #53	; 0x35
 80025f8:	20d0      	movs	r0, #208	; 0xd0
 80025fa:	f00f fe1d 	bl	8012238 <UG_DrawFrame>
		UG_DrawFrame(209, 54, 231, 288, RGB_to_BRG(C_WHITE));
 80025fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002602:	f7fe ff07 	bl	8001414 <RGB_to_BRG>
 8002606:	4603      	mov	r3, r0
 8002608:	9300      	str	r3, [sp, #0]
 800260a:	f44f 7390 	mov.w	r3, #288	; 0x120
 800260e:	22e7      	movs	r2, #231	; 0xe7
 8002610:	2136      	movs	r1, #54	; 0x36
 8002612:	20d1      	movs	r0, #209	; 0xd1
 8002614:	f00f fe10 	bl	8012238 <UG_DrawFrame>
}
 8002618:	bf00      	nop
 800261a:	3704      	adds	r7, #4
 800261c:	46bd      	mov	sp, r7
 800261e:	bd90      	pop	{r4, r7, pc}
 8002620:	08019fcc 	.word	0x08019fcc
 8002624:	080190b0 	.word	0x080190b0
 8002628:	0801a200 	.word	0x0801a200
 800262c:	080190bc 	.word	0x080190bc
 8002630:	0801b098 	.word	0x0801b098
 8002634:	080190c8 	.word	0x080190c8
 8002638:	080190cc 	.word	0x080190cc
 800263c:	08019230 	.word	0x08019230
 8002640:	080190d8 	.word	0x080190d8
 8002644:	080190e8 	.word	0x080190e8
 8002648:	08019104 	.word	0x08019104
 800264c:	08019120 	.word	0x08019120
 8002650:	200005c0 	.word	0x200005c0
 8002654:	20000608 	.word	0x20000608
 8002658:	08019058 	.word	0x08019058

0800265c <get_set_temperature>:

/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 800265c:	b598      	push	{r3, r4, r7, lr}
 800265e:	af00      	add	r7, sp, #0
	TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8002660:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff74 	bl	8000554 <__aeabi_ui2d>
 800266c:	4b15      	ldr	r3, [pc, #84]	; (80026c4 <get_set_temperature+0x68>)
 800266e:	ed93 7b00 	vldr	d7, [r3]
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <get_set_temperature+0x6c>)
 8002674:	ed93 6b00 	vldr	d6, [r3]
 8002678:	eeb0 2a46 	vmov.f32	s4, s12
 800267c:	eef0 2a66 	vmov.f32	s5, s13
 8002680:	eeb0 1a47 	vmov.f32	s2, s14
 8002684:	eef0 1a67 	vmov.f32	s3, s15
 8002688:	ec41 0b10 	vmov	d0, r0, r1
 800268c:	f7fe fe32 	bl	80012f4 <clamp>
 8002690:	ec53 2b10 	vmov	r2, r3, d0
 8002694:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002698:	4610      	mov	r0, r2
 800269a:	4619      	mov	r1, r3
 800269c:	f7fe faac 	bl	8000bf8 <__aeabi_d2uiz>
 80026a0:	4603      	mov	r3, r0
 80026a2:	6263      	str	r3, [r4, #36]	; 0x24
	sensor_values.set_temperature = (uint16_t)(TIM2->CNT/2) * 2;
 80026a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	085b      	lsrs	r3, r3, #1
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7fd ff5f 	bl	8000574 <__aeabi_i2d>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4904      	ldr	r1, [pc, #16]	; (80026cc <get_set_temperature+0x70>)
 80026bc:	e9c1 2300 	strd	r2, r3, [r1]
}
 80026c0:	bf00      	nop
 80026c2:	bd98      	pop	{r3, r4, r7, pc}
 80026c4:	20000018 	.word	0x20000018
 80026c8:	20000020 	.word	0x20000020
 80026cc:	20000028 	.word	0x20000028

080026d0 <beep>:

/* Beep the beeper */
void beep(){
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
	if(flash_values.buzzer_enable == 1){
 80026d4:	4b0a      	ldr	r3, [pc, #40]	; (8002700 <beep+0x30>)
 80026d6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	4b09      	ldr	r3, [pc, #36]	; (8002704 <beep+0x34>)
 80026e0:	f7fe fa1a 	bl	8000b18 <__aeabi_dcmpeq>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d100      	bne.n	80026ec <beep+0x1c>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
		HAL_TIM_Base_Start_IT(&htim17);
	}
}
 80026ea:	e006      	b.n	80026fa <beep+0x2a>
		HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 80026ec:	2104      	movs	r1, #4
 80026ee:	4806      	ldr	r0, [pc, #24]	; (8002708 <beep+0x38>)
 80026f0:	f00a fe04 	bl	800d2fc <HAL_TIM_PWM_Start_IT>
		HAL_TIM_Base_Start_IT(&htim17);
 80026f4:	4805      	ldr	r0, [pc, #20]	; (800270c <beep+0x3c>)
 80026f6:	f00a fd11 	bl	800d11c <HAL_TIM_Base_Start_IT>
}
 80026fa:	bf00      	nop
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000608 	.word	0x20000608
 8002704:	3ff00000 	.word	0x3ff00000
 8002708:	200019ac 	.word	0x200019ac
 800270c:	20001adc 	.word	0x20001adc

08002710 <check_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void check_emergency_shutdown(){
 8002710:	b5b0      	push	{r4, r5, r7, lr}
 8002712:	af00      	add	r7, sp, #0
	/* Function to set state to EMERGENCY_SLEEP if iron is in RUN state for longer than EMERGENCY_shutdown_time */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 8002714:	4b2c      	ldr	r3, [pc, #176]	; (80027c8 <check_emergency_shutdown+0xb8>)
 8002716:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <check_emergency_shutdown+0x20>
 800271e:	4b2b      	ldr	r3, [pc, #172]	; (80027cc <check_emergency_shutdown+0xbc>)
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d104      	bne.n	8002730 <check_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 8002726:	f003 fa31 	bl	8005b8c <HAL_GetTick>
 800272a:	4603      	mov	r3, r0
 800272c:	4a28      	ldr	r2, [pc, #160]	; (80027d0 <check_emergency_shutdown+0xc0>)
 800272e:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8002730:	4b25      	ldr	r3, [pc, #148]	; (80027c8 <check_emergency_shutdown+0xb8>)
 8002732:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	f04f 0300 	mov.w	r3, #0
 800273e:	f7fe f9eb 	bl	8000b18 <__aeabi_dcmpeq>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d024      	beq.n	8002792 <check_emergency_shutdown+0x82>
 8002748:	f003 fa20 	bl	8005b8c <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <check_emergency_shutdown+0xc0>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	4618      	mov	r0, r3
 8002756:	f7fd fefd 	bl	8000554 <__aeabi_ui2d>
 800275a:	4604      	mov	r4, r0
 800275c:	460d      	mov	r5, r1
 800275e:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <check_emergency_shutdown+0xc4>)
 8002760:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002764:	a316      	add	r3, pc, #88	; (adr r3, 80027c0 <check_emergency_shutdown+0xb0>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	f7fd ff6d 	bl	8000648 <__aeabi_dmul>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4620      	mov	r0, r4
 8002774:	4629      	mov	r1, r5
 8002776:	f7fe f9ed 	bl	8000b54 <__aeabi_dcmpge>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <check_emergency_shutdown+0x82>
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <check_emergency_shutdown+0xbc>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d104      	bne.n	8002792 <check_emergency_shutdown+0x82>
		change_state(EMERGENCY_SLEEP);
 8002788:	2003      	movs	r0, #3
 800278a:	f7fe fe59 	bl	8001440 <change_state>
		beep();
 800278e:	f7ff ff9f 	bl	80026d0 <beep>
	}

	/* Function to set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <check_emergency_shutdown+0xb8>)
 8002794:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002798:	f04f 0200 	mov.w	r2, #0
 800279c:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <check_emergency_shutdown+0xc8>)
 800279e:	f7fe f9e3 	bl	8000b68 <__aeabi_dcmpgt>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d100      	bne.n	80027aa <check_emergency_shutdown+0x9a>
		change_state(EMERGENCY_SLEEP);
		beep();
	}
}
 80027a8:	e008      	b.n	80027bc <check_emergency_shutdown+0xac>
	if((sensor_values.thermocouple_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 80027aa:	4b08      	ldr	r3, [pc, #32]	; (80027cc <check_emergency_shutdown+0xbc>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d104      	bne.n	80027bc <check_emergency_shutdown+0xac>
		change_state(EMERGENCY_SLEEP);
 80027b2:	2003      	movs	r0, #3
 80027b4:	f7fe fe44 	bl	8001440 <change_state>
		beep();
 80027b8:	f7ff ff8a 	bl	80026d0 <beep>
}
 80027bc:	bf00      	nop
 80027be:	bdb0      	pop	{r4, r5, r7, pc}
 80027c0:	00000000 	.word	0x00000000
 80027c4:	40ed4c00 	.word	0x40ed4c00
 80027c8:	20000028 	.word	0x20000028
 80027cc:	20000015 	.word	0x20000015
 80027d0:	20000594 	.word	0x20000594
 80027d4:	20000608 	.word	0x20000608
 80027d8:	407e0000 	.word	0x407e0000

080027dc <handle_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void handle_button_status(){
 80027dc:	b598      	push	{r3, r4, r7, lr}
 80027de:	af00      	add	r7, sp, #0
	if(SW_1_pressed == 1){
 80027e0:	4b24      	ldr	r3, [pc, #144]	; (8002874 <handle_button_status+0x98>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b01      	cmp	r3, #1
 80027e6:	d11e      	bne.n	8002826 <handle_button_status+0x4a>
		SW_1_pressed = 0;
 80027e8:	4b22      	ldr	r3, [pc, #136]	; (8002874 <handle_button_status+0x98>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
		// toggle between RUN and HALTED
		if ((active_state == RUN) || (active_state == STANDBY)){
 80027ee:	4b22      	ldr	r3, [pc, #136]	; (8002878 <handle_button_status+0x9c>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d003      	beq.n	80027fe <handle_button_status+0x22>
 80027f6:	4b20      	ldr	r3, [pc, #128]	; (8002878 <handle_button_status+0x9c>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b01      	cmp	r3, #1
 80027fc:	d103      	bne.n	8002806 <handle_button_status+0x2a>
			change_state(HALTED);
 80027fe:	2004      	movs	r0, #4
 8002800:	f7fe fe1e 	bl	8001440 <change_state>
 8002804:	e00a      	b.n	800281c <handle_button_status+0x40>
		}
		else if ((active_state == HALTED) || (active_state == EMERGENCY_SLEEP)){
 8002806:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <handle_button_status+0x9c>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b04      	cmp	r3, #4
 800280c:	d003      	beq.n	8002816 <handle_button_status+0x3a>
 800280e:	4b1a      	ldr	r3, [pc, #104]	; (8002878 <handle_button_status+0x9c>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b03      	cmp	r3, #3
 8002814:	d102      	bne.n	800281c <handle_button_status+0x40>
			change_state(RUN);
 8002816:	2000      	movs	r0, #0
 8002818:	f7fe fe12 	bl	8001440 <change_state>
		}
		previous_millis_heating_halted_update = HAL_GetTick();
 800281c:	f003 f9b6 	bl	8005b8c <HAL_GetTick>
 8002820:	4603      	mov	r3, r0
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <handle_button_status+0xa0>)
 8002824:	6013      	str	r3, [r2, #0]

	}
	/* Set "set temp" to preset temp 1 */
	if(SW_2_pressed == 1){
 8002826:	4b16      	ldr	r3, [pc, #88]	; (8002880 <handle_button_status+0xa4>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d10d      	bne.n	800284a <handle_button_status+0x6e>
		SW_2_pressed = 0;
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <handle_button_status+0xa4>)
 8002830:	2200      	movs	r2, #0
 8002832:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_1;
 8002834:	4b13      	ldr	r3, [pc, #76]	; (8002884 <handle_button_status+0xa8>)
 8002836:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800283a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 800283e:	4610      	mov	r0, r2
 8002840:	4619      	mov	r1, r3
 8002842:	f7fe f9d9 	bl	8000bf8 <__aeabi_d2uiz>
 8002846:	4603      	mov	r3, r0
 8002848:	6263      	str	r3, [r4, #36]	; 0x24
	}
	/* Set "set temp" to preset temp 2 */
	if(SW_3_pressed == 1){
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <handle_button_status+0xac>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d10d      	bne.n	800286e <handle_button_status+0x92>
		SW_3_pressed = 0;
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <handle_button_status+0xac>)
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = flash_values.preset_temp_2;
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <handle_button_status+0xa8>)
 800285a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800285e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002862:	4610      	mov	r0, r2
 8002864:	4619      	mov	r1, r3
 8002866:	f7fe f9c7 	bl	8000bf8 <__aeabi_d2uiz>
 800286a:	4603      	mov	r3, r0
 800286c:	6263      	str	r3, [r4, #36]	; 0x24
	}
}
 800286e:	bf00      	nop
 8002870:	bd98      	pop	{r3, r4, r7, pc}
 8002872:	bf00      	nop
 8002874:	200005a0 	.word	0x200005a0
 8002878:	20000015 	.word	0x20000015
 800287c:	20000590 	.word	0x20000590
 8002880:	200005a1 	.word	0x200005a1
 8002884:	20000608 	.word	0x20000608
 8002888:	200005a2 	.word	0x200005a2
 800288c:	00000000 	.word	0x00000000

08002890 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 8002890:	b5b0      	push	{r4, r5, r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 8002896:	2140      	movs	r1, #64	; 0x40
 8002898:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800289c:	f007 f852 	bl	8009944 <HAL_GPIO_ReadPin>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d102      	bne.n	80028ac <get_stand_status+0x1c>
		stand_status = 1;
 80028a6:	2301      	movs	r3, #1
 80028a8:	71fb      	strb	r3, [r7, #7]
 80028aa:	e001      	b.n	80028b0 <get_stand_status+0x20>
	}
	else{
		stand_status = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 80028b0:	79fb      	ldrb	r3, [r7, #7]
 80028b2:	4939      	ldr	r1, [pc, #228]	; (8002998 <get_stand_status+0x108>)
 80028b4:	4618      	mov	r0, r3
 80028b6:	f001 fad7 	bl	8003e68 <Moving_Average_Compute>
 80028ba:	eeb0 7a40 	vmov.f32	s14, s0
 80028be:	eef0 7a60 	vmov.f32	s15, s1
 80028c2:	4b36      	ldr	r3, [pc, #216]	; (800299c <get_stand_status+0x10c>)
 80028c4:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand > 0.9){
 80028c8:	4b34      	ldr	r3, [pc, #208]	; (800299c <get_stand_status+0x10c>)
 80028ca:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 80028ce:	a32e      	add	r3, pc, #184	; (adr r3, 8002988 <get_stand_status+0xf8>)
 80028d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d4:	f7fe f948 	bl	8000b68 <__aeabi_dcmpgt>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d039      	beq.n	8002952 <get_stand_status+0xc2>
		if(active_state == RUN){
 80028de:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <get_stand_status+0x110>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d107      	bne.n	80028f6 <get_stand_status+0x66>
			change_state(STANDBY);
 80028e6:	2001      	movs	r0, #1
 80028e8:	f7fe fdaa 	bl	8001440 <change_state>
			previous_standby_millis = HAL_GetTick();
 80028ec:	f003 f94e 	bl	8005b8c <HAL_GetTick>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4a2c      	ldr	r2, [pc, #176]	; (80029a4 <get_stand_status+0x114>)
 80028f4:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 80028f6:	f003 f949 	bl	8005b8c <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <get_stand_status+0x114>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fe26 	bl	8000554 <__aeabi_ui2d>
 8002908:	4604      	mov	r4, r0
 800290a:	460d      	mov	r5, r1
 800290c:	4b26      	ldr	r3, [pc, #152]	; (80029a8 <get_stand_status+0x118>)
 800290e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002912:	a31f      	add	r3, pc, #124	; (adr r3, 8002990 <get_stand_status+0x100>)
 8002914:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002918:	f7fd fe96 	bl	8000648 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4620      	mov	r0, r4
 8002922:	4629      	mov	r1, r5
 8002924:	f7fe f916 	bl	8000b54 <__aeabi_dcmpge>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d006      	beq.n	800293c <get_stand_status+0xac>
 800292e:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <get_stand_status+0x110>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d102      	bne.n	800293c <get_stand_status+0xac>
			change_state(SLEEP);
 8002936:	2002      	movs	r0, #2
 8002938:	f7fe fd82 	bl	8001440 <change_state>
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 800293c:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <get_stand_status+0x110>)
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d003      	beq.n	800294c <get_stand_status+0xbc>
 8002944:	4b16      	ldr	r3, [pc, #88]	; (80029a0 <get_stand_status+0x110>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b04      	cmp	r3, #4
 800294a:	d102      	bne.n	8002952 <get_stand_status+0xc2>
			change_state(SLEEP);
 800294c:	2002      	movs	r0, #2
 800294e:	f7fe fd77 	bl	8001440 <change_state>
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.5){
 8002952:	4b12      	ldr	r3, [pc, #72]	; (800299c <get_stand_status+0x10c>)
 8002954:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	4b13      	ldr	r3, [pc, #76]	; (80029ac <get_stand_status+0x11c>)
 800295e:	f7fe f8e5 	bl	8000b2c <__aeabi_dcmplt>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d100      	bne.n	800296a <get_stand_status+0xda>
		if((active_state == SLEEP) || (active_state == STANDBY)){
			change_state(RUN);
		}
	}
}
 8002968:	e00a      	b.n	8002980 <get_stand_status+0xf0>
		if((active_state == SLEEP) || (active_state == STANDBY)){
 800296a:	4b0d      	ldr	r3, [pc, #52]	; (80029a0 <get_stand_status+0x110>)
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b02      	cmp	r3, #2
 8002970:	d003      	beq.n	800297a <get_stand_status+0xea>
 8002972:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <get_stand_status+0x110>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d102      	bne.n	8002980 <get_stand_status+0xf0>
			change_state(RUN);
 800297a:	2000      	movs	r0, #0
 800297c:	f7fe fd60 	bl	8001440 <change_state>
}
 8002980:	bf00      	nop
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bdb0      	pop	{r4, r5, r7, pc}
 8002988:	cccccccd 	.word	0xcccccccd
 800298c:	3feccccc 	.word	0x3feccccc
 8002990:	00000000 	.word	0x00000000
 8002994:	40ed4c00 	.word	0x40ed4c00
 8002998:	20000fe8 	.word	0x20000fe8
 800299c:	20000028 	.word	0x20000028
 80029a0:	20000015 	.word	0x20000015
 80029a4:	20000598 	.word	0x20000598
 80029a8:	20000608 	.word	0x20000608
 80029ac:	3fe00000 	.word	0x3fe00000

080029b0 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOB, HANDLE_INP_1_Pin) == 0){
 80029b6:	2110      	movs	r1, #16
 80029b8:	4837      	ldr	r0, [pc, #220]	; (8002a98 <get_handle_type+0xe8>)
 80029ba:	f006 ffc3 	bl	8009944 <HAL_GPIO_ReadPin>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d102      	bne.n	80029ca <get_handle_type+0x1a>
		handle_status = 1;
 80029c4:	2301      	movs	r3, #1
 80029c6:	71fb      	strb	r3, [r7, #7]
 80029c8:	e001      	b.n	80029ce <get_handle_type+0x1e>
	}
	else{
		handle_status = 0;
 80029ca:	2300      	movs	r3, #0
 80029cc:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle_sense = Moving_Average_Compute(handle_status, &handle_sense_filterStruct); /* Moving average filter */
 80029ce:	79fb      	ldrb	r3, [r7, #7]
 80029d0:	4932      	ldr	r1, [pc, #200]	; (8002a9c <get_handle_type+0xec>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f001 fa48 	bl	8003e68 <Moving_Average_Compute>
 80029d8:	eeb0 7a40 	vmov.f32	s14, s0
 80029dc:	eef0 7a60 	vmov.f32	s15, s1
 80029e0:	4b2f      	ldr	r3, [pc, #188]	; (8002aa0 <get_handle_type+0xf0>)
 80029e2:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	/* If the handle_sense is high -> T210 handle is detected */
	if(sensor_values.handle_sense > 0.5){
 80029e6:	4b2e      	ldr	r3, [pc, #184]	; (8002aa0 <get_handle_type+0xf0>)
 80029e8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <get_handle_type+0xf4>)
 80029f2:	f7fe f8b9 	bl	8000b68 <__aeabi_dcmpgt>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d018      	beq.n	8002a2e <get_handle_type+0x7e>
		handle = T210;
 80029fc:	4b2a      	ldr	r3, [pc, #168]	; (8002aa8 <get_handle_type+0xf8>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 60; //60W
 8002a02:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <get_handle_type+0xf0>)
 8002a04:	4a29      	ldr	r2, [pc, #164]	; (8002aac <get_handle_type+0xfc>)
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
		Kp = 10;
 8002a08:	4929      	ldr	r1, [pc, #164]	; (8002ab0 <get_handle_type+0x100>)
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <get_handle_type+0x104>)
 8002a10:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 8002a14:	4928      	ldr	r1, [pc, #160]	; (8002ab8 <get_handle_type+0x108>)
 8002a16:	f04f 0200 	mov.w	r2, #0
 8002a1a:	4b28      	ldr	r3, [pc, #160]	; (8002abc <get_handle_type+0x10c>)
 8002a1c:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8002a20:	4927      	ldr	r1, [pc, #156]	; (8002ac0 <get_handle_type+0x110>)
 8002a22:	f04f 0200 	mov.w	r2, #0
 8002a26:	4b27      	ldr	r3, [pc, #156]	; (8002ac4 <get_handle_type+0x114>)
 8002a28:	e9c1 2300 	strd	r2, r3, [r1]
 8002a2c:	e018      	b.n	8002a60 <get_handle_type+0xb0>
	}
	/* If the handle_sense is low -> T245 Handle */
	else{
		handle = T245;
 8002a2e:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <get_handle_type+0xf8>)
 8002a30:	2202      	movs	r2, #2
 8002a32:	701a      	strb	r2, [r3, #0]
		sensor_values.max_power_watt = 120; //120W
 8002a34:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <get_handle_type+0xf0>)
 8002a36:	4a24      	ldr	r2, [pc, #144]	; (8002ac8 <get_handle_type+0x118>)
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40
		Kp = 8;
 8002a3a:	491d      	ldr	r1, [pc, #116]	; (8002ab0 <get_handle_type+0x100>)
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	4b22      	ldr	r3, [pc, #136]	; (8002acc <get_handle_type+0x11c>)
 8002a42:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 3;
 8002a46:	491c      	ldr	r1, [pc, #112]	; (8002ab8 <get_handle_type+0x108>)
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <get_handle_type+0x120>)
 8002a4e:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 2;
 8002a52:	491b      	ldr	r1, [pc, #108]	; (8002ac0 <get_handle_type+0x110>)
 8002a54:	f04f 0200 	mov.w	r2, #0
 8002a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a5c:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 8002a60:	4b13      	ldr	r3, [pc, #76]	; (8002ab0 <get_handle_type+0x100>)
 8002a62:	ed93 7b00 	vldr	d7, [r3]
 8002a66:	4b14      	ldr	r3, [pc, #80]	; (8002ab8 <get_handle_type+0x108>)
 8002a68:	ed93 6b00 	vldr	d6, [r3]
 8002a6c:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <get_handle_type+0x110>)
 8002a6e:	ed93 5b00 	vldr	d5, [r3]
 8002a72:	eeb0 2a45 	vmov.f32	s4, s10
 8002a76:	eef0 2a65 	vmov.f32	s5, s11
 8002a7a:	eeb0 1a46 	vmov.f32	s2, s12
 8002a7e:	eef0 1a66 	vmov.f32	s3, s13
 8002a82:	eeb0 0a47 	vmov.f32	s0, s14
 8002a86:	eef0 0a67 	vmov.f32	s1, s15
 8002a8a:	4812      	ldr	r0, [pc, #72]	; (8002ad4 <get_handle_type+0x124>)
 8002a8c:	f001 fcc3 	bl	8004416 <PID_SetTunings>
}
 8002a90:	bf00      	nop
 8002a92:	3708      	adds	r7, #8
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	48000400 	.word	0x48000400
 8002a9c:	20001314 	.word	0x20001314
 8002aa0:	20000028 	.word	0x20000028
 8002aa4:	3fe00000 	.word	0x3fe00000
 8002aa8:	20000580 	.word	0x20000580
 8002aac:	42700000 	.word	0x42700000
 8002ab0:	200005a8 	.word	0x200005a8
 8002ab4:	40240000 	.word	0x40240000
 8002ab8:	200005b0 	.word	0x200005b0
 8002abc:	403e0000 	.word	0x403e0000
 8002ac0:	200005b8 	.word	0x200005b8
 8002ac4:	3fd00000 	.word	0x3fd00000
 8002ac8:	42f00000 	.word	0x42f00000
 8002acc:	40200000 	.word	0x40200000
 8002ad0:	40080000 	.word	0x40080000
 8002ad4:	20001bc0 	.word	0x20001bc0

08002ad8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	4603      	mov	r3, r0
 8002ae0:	80fb      	strh	r3, [r7, #6]
    if(((GPIO_Pin == SW_1_Pin) || (GPIO_Pin == SW_2_Pin) || (GPIO_Pin == SW_3_Pin)) && (SW_ready == 1)){ //A button is pressed
 8002ae2:	88fb      	ldrh	r3, [r7, #6]
 8002ae4:	2b20      	cmp	r3, #32
 8002ae6:	d007      	beq.n	8002af8 <HAL_GPIO_EXTI_Callback+0x20>
 8002ae8:	88fb      	ldrh	r3, [r7, #6]
 8002aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aee:	d003      	beq.n	8002af8 <HAL_GPIO_EXTI_Callback+0x20>
 8002af0:	88fb      	ldrh	r3, [r7, #6]
 8002af2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af6:	d109      	bne.n	8002b0c <HAL_GPIO_EXTI_Callback+0x34>
 8002af8:	4b06      	ldr	r3, [pc, #24]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d105      	bne.n	8002b0c <HAL_GPIO_EXTI_Callback+0x34>
		HAL_TIM_Base_Start_IT(&htim7);
 8002b00:	4805      	ldr	r0, [pc, #20]	; (8002b18 <HAL_GPIO_EXTI_Callback+0x40>)
 8002b02:	f00a fb0b 	bl	800d11c <HAL_TIM_Base_Start_IT>
		SW_ready = 0;
 8002b06:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	701a      	strb	r2, [r3, #0]
    }
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	20000014 	.word	0x20000014
 8002b18:	200019f8 	.word	0x200019f8

08002b1c <HAL_TIM_IC_CaptureCallback>:

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	if ((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) || (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) ) {
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	7f1b      	ldrb	r3, [r3, #28]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d003      	beq.n	8002b34 <HAL_TIM_IC_CaptureCallback+0x18>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	7f1b      	ldrb	r3, [r3, #28]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d101      	bne.n	8002b38 <HAL_TIM_IC_CaptureCallback+0x1c>
		beep();
 8002b34:	f7ff fdcc 	bl	80026d0 <beep>
	}
}
 8002b38:	bf00      	nop
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8002b40:	b590      	push	{r4, r7, lr}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, dutycycle);
 8002b4a:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <set_heater_duty+0x48>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	88fa      	ldrh	r2, [r7, #6]
 8002b50:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutycycle*0.2);
 8002b52:	88fb      	ldrh	r3, [r7, #6]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fd0d 	bl	8000574 <__aeabi_i2d>
 8002b5a:	a309      	add	r3, pc, #36	; (adr r3, 8002b80 <set_heater_duty+0x40>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f7fd fd72 	bl	8000648 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4907      	ldr	r1, [pc, #28]	; (8002b88 <set_heater_duty+0x48>)
 8002b6a:	680c      	ldr	r4, [r1, #0]
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4619      	mov	r1, r3
 8002b70:	f7fe f842 	bl	8000bf8 <__aeabi_d2uiz>
 8002b74:	4603      	mov	r3, r0
 8002b76:	6363      	str	r3, [r4, #52]	; 0x34

}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd90      	pop	{r4, r7, pc}
 8002b80:	9999999a 	.word	0x9999999a
 8002b84:	3fc99999 	.word	0x3fc99999
 8002b88:	20001914 	.word	0x20001914
 8002b8c:	00000000 	.word	0x00000000

08002b90 <heater_on>:

/* Disable the duty cycle of timer controlling the heater */
void heater_on(){
 8002b90:	b5b0      	push	{r4, r5, r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	duty_cycle = PID_output*(sensor_values.max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 8002b94:	4b26      	ldr	r3, [pc, #152]	; (8002c30 <heater_on+0xa0>)
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7fd fcfd 	bl	8000598 <__aeabi_f2d>
 8002b9e:	a31e      	add	r3, pc, #120	; (adr r3, 8002c18 <heater_on+0x88>)
 8002ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba4:	f7fd fd50 	bl	8000648 <__aeabi_dmul>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4614      	mov	r4, r2
 8002bae:	461d      	mov	r5, r3
 8002bb0:	4b1f      	ldr	r3, [pc, #124]	; (8002c30 <heater_on+0xa0>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fcef 	bl	8000598 <__aeabi_f2d>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4620      	mov	r0, r4
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	f7fd fe6b 	bl	800089c <__aeabi_ddiv>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	460b      	mov	r3, r1
 8002bca:	4610      	mov	r0, r2
 8002bcc:	4619      	mov	r1, r3
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <heater_on+0xa4>)
 8002bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd4:	f7fd fd38 	bl	8000648 <__aeabi_dmul>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	460b      	mov	r3, r1
 8002bdc:	4916      	ldr	r1, [pc, #88]	; (8002c38 <heater_on+0xa8>)
 8002bde:	e9c1 2300 	strd	r2, r3, [r1]
	set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 8002be2:	4b15      	ldr	r3, [pc, #84]	; (8002c38 <heater_on+0xa8>)
 8002be4:	ed93 7b00 	vldr	d7, [r3]
 8002be8:	ed9f 2b0d 	vldr	d2, [pc, #52]	; 8002c20 <heater_on+0x90>
 8002bec:	ed9f 1b0e 	vldr	d1, [pc, #56]	; 8002c28 <heater_on+0x98>
 8002bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8002bf4:	eef0 0a67 	vmov.f32	s1, s15
 8002bf8:	f7fe fb7c 	bl	80012f4 <clamp>
 8002bfc:	ec53 2b10 	vmov	r2, r3, d0
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7fd fff8 	bl	8000bf8 <__aeabi_d2uiz>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff97 	bl	8002b40 <set_heater_duty>
}
 8002c12:	bf00      	nop
 8002c14:	bdb0      	pop	{r4, r5, r7, pc}
 8002c16:	bf00      	nop
 8002c18:	a5e353f8 	.word	0xa5e353f8
 8002c1c:	3fc0c49b 	.word	0x3fc0c49b
 8002c20:	00000000 	.word	0x00000000
 8002c24:	407f4000 	.word	0x407f4000
	...
 8002c30:	20000028 	.word	0x20000028
 8002c34:	20000648 	.word	0x20000648
 8002c38:	20000658 	.word	0x20000658

08002c3c <heater_off>:

/* Disable the duty cycle of timer controlling the heater */
void heater_off(){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
	set_heater_duty(0);//clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 8002c40:	2000      	movs	r0, #0
 8002c42:	f7ff ff7d 	bl	8002b40 <set_heater_duty>
}
 8002c46:	bf00      	nop
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <HAL_TIM_PWM_PulseFinishedCallback>:


// Callback:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	if((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1) && (current_measurement_requested)){
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a1c      	ldr	r2, [pc, #112]	; (8002cc8 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d115      	bne.n	8002c88 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	7f1b      	ldrb	r3, [r3, #28]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d111      	bne.n	8002c88 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d00d      	beq.n	8002c88 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
		current_measurement_requested = 0;
 8002c6c:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <HAL_TIM_PWM_PulseFinishedCallback+0x80>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	701a      	strb	r2, [r3, #0]
		current_measurement_done = 0;
 8002c72:	4b17      	ldr	r3, [pc, #92]	; (8002cd0 <HAL_TIM_PWM_PulseFinishedCallback+0x84>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, USR_3_Pin, GPIO_PIN_SET);
 8002c78:	2201      	movs	r2, #1
 8002c7a:	2102      	movs	r1, #2
 8002c7c:	4815      	ldr	r0, [pc, #84]	; (8002cd4 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8002c7e:	f006 fe79 	bl	8009974 <HAL_GPIO_WritePin>
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002c82:	4815      	ldr	r0, [pc, #84]	; (8002cd8 <HAL_TIM_PWM_PulseFinishedCallback+0x8c>)
 8002c84:	f004 fe00 	bl	8007888 <HAL_ADCEx_InjectedStart_IT>
	}

  // Check which version of the timer triggered this callback and toggle LED
  if ((htim == &htim1) && (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3) && (thermocouple_measurement_requested)){
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0f      	ldr	r2, [pc, #60]	; (8002cc8 <HAL_TIM_PWM_PulseFinishedCallback+0x7c>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d117      	bne.n	8002cc0 <HAL_TIM_PWM_PulseFinishedCallback+0x74>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	7f1b      	ldrb	r3, [r3, #28]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d113      	bne.n	8002cc0 <HAL_TIM_PWM_PulseFinishedCallback+0x74>
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00f      	beq.n	8002cc0 <HAL_TIM_PWM_PulseFinishedCallback+0x74>
	  thermocouple_measurement_done = 0;
 8002ca0:	4b0f      	ldr	r3, [pc, #60]	; (8002ce0 <HAL_TIM_PWM_PulseFinishedCallback+0x94>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
	  thermocouple_measurement_requested = 0;
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	; (8002cdc <HAL_TIM_PWM_PulseFinishedCallback+0x90>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
	  HAL_GPIO_WritePin(GPIOB, USR_2_Pin, GPIO_PIN_SET);
 8002cac:	2201      	movs	r2, #1
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4808      	ldr	r0, [pc, #32]	; (8002cd4 <HAL_TIM_PWM_PulseFinishedCallback+0x88>)
 8002cb2:	f006 fe5f 	bl	8009974 <HAL_GPIO_WritePin>
	  heater_off();
 8002cb6:	f7ff ffc1 	bl	8002c3c <heater_off>
	  HAL_TIM_Base_Start_IT(&htim16);
 8002cba:	480a      	ldr	r0, [pc, #40]	; (8002ce4 <HAL_TIM_PWM_PulseFinishedCallback+0x98>)
 8002cbc:	f00a fa2e 	bl	800d11c <HAL_TIM_Base_Start_IT>

  }
}
 8002cc0:	bf00      	nop
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	20001914 	.word	0x20001914
 8002ccc:	20000660 	.word	0x20000660
 8002cd0:	2000018c 	.word	0x2000018c
 8002cd4:	48000400 	.word	0x48000400
 8002cd8:	20001640 	.word	0x20001640
 8002cdc:	20000661 	.word	0x20000661
 8002ce0:	2000018d 	.word	0x2000018d
 8002ce4:	20001a90 	.word	0x20001a90

08002ce8 <HAL_TIM_PeriodElapsedCallback>:

// Callback:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
	/* Button Debounce timer (50 ms)*/
	if (htim == &htim16){
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d105      	bne.n	8002d04 <HAL_TIM_PeriodElapsedCallback+0x1c>
		HAL_TIM_Base_Stop_IT(&htim16);
 8002cf8:	482b      	ldr	r0, [pc, #172]	; (8002da8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002cfa:	f00a fa79 	bl	800d1f0 <HAL_TIM_Base_Stop_IT>
		HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002cfe:	482b      	ldr	r0, [pc, #172]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002d00:	f004 fdc2 	bl	8007888 <HAL_ADCEx_InjectedStart_IT>
	}

	/* Beep length timer */
	if (htim == &htim17){
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	4a2a      	ldr	r2, [pc, #168]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d106      	bne.n	8002d1a <HAL_TIM_PeriodElapsedCallback+0x32>
		HAL_TIM_Base_Stop_IT(&htim17);
 8002d0c:	4828      	ldr	r0, [pc, #160]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002d0e:	f00a fa6f 	bl	800d1f0 <HAL_TIM_Base_Stop_IT>
		HAL_TIM_PWM_Stop_IT(&htim4, TIM_CHANNEL_2);
 8002d12:	2104      	movs	r1, #4
 8002d14:	4827      	ldr	r0, [pc, #156]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002d16:	f00a fc3d 	bl	800d594 <HAL_TIM_PWM_Stop_IT>
	}

	/* Button Debounce timer (50 ms) */
	if ((htim == &htim7 && SW_ready == 0)){
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a26      	ldr	r2, [pc, #152]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d13e      	bne.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0xb8>
 8002d22:	4b26      	ldr	r3, [pc, #152]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d13a      	bne.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0xb8>
		if(HAL_GPIO_ReadPin(SW_1_GPIO_Port, SW_1_Pin) == GPIO_PIN_SET){
 8002d2a:	2120      	movs	r1, #32
 8002d2c:	4824      	ldr	r0, [pc, #144]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002d2e:	f006 fe09 	bl	8009944 <HAL_GPIO_ReadPin>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d10b      	bne.n	8002d50 <HAL_TIM_PeriodElapsedCallback+0x68>
			SW_ready = 1;
 8002d38:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	701a      	strb	r2, [r3, #0]
			SW_1_pressed = 1;
 8002d3e:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8002d40:	2201      	movs	r2, #1
 8002d42:	701a      	strb	r2, [r3, #0]
			beep();
 8002d44:	f7ff fcc4 	bl	80026d0 <beep>
			HAL_TIM_Base_Stop_IT(&htim7);
 8002d48:	481b      	ldr	r0, [pc, #108]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002d4a:	f00a fa51 	bl	800d1f0 <HAL_TIM_Base_Stop_IT>
			SW_3_pressed = 1;
			beep();
			HAL_TIM_Base_Stop_IT(&htim7);
		}
	}
}
 8002d4e:	e027      	b.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0xb8>
		else if(HAL_GPIO_ReadPin(SW_2_GPIO_Port, SW_2_Pin) == GPIO_PIN_SET){
 8002d50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d58:	f006 fdf4 	bl	8009944 <HAL_GPIO_ReadPin>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d10b      	bne.n	8002d7a <HAL_TIM_PeriodElapsedCallback+0x92>
			SW_ready = 1;
 8002d62:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
			SW_2_pressed = 1;
 8002d68:	4b17      	ldr	r3, [pc, #92]	; (8002dc8 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
			beep();
 8002d6e:	f7ff fcaf 	bl	80026d0 <beep>
			HAL_TIM_Base_Stop_IT(&htim7);
 8002d72:	4811      	ldr	r0, [pc, #68]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002d74:	f00a fa3c 	bl	800d1f0 <HAL_TIM_Base_Stop_IT>
}
 8002d78:	e012      	b.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0xb8>
		else if(HAL_GPIO_ReadPin(SW_3_GPIO_Port, SW_3_Pin) == GPIO_PIN_SET){
 8002d7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d7e:	4810      	ldr	r0, [pc, #64]	; (8002dc0 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8002d80:	f006 fde0 	bl	8009944 <HAL_GPIO_ReadPin>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d10a      	bne.n	8002da0 <HAL_TIM_PeriodElapsedCallback+0xb8>
			SW_ready = 1;
 8002d8a:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	701a      	strb	r2, [r3, #0]
			SW_3_pressed = 1;
 8002d90:	4b0e      	ldr	r3, [pc, #56]	; (8002dcc <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	701a      	strb	r2, [r3, #0]
			beep();
 8002d96:	f7ff fc9b 	bl	80026d0 <beep>
			HAL_TIM_Base_Stop_IT(&htim7);
 8002d9a:	4807      	ldr	r0, [pc, #28]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002d9c:	f00a fa28 	bl	800d1f0 <HAL_TIM_Base_Stop_IT>
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20001a90 	.word	0x20001a90
 8002dac:	20001640 	.word	0x20001640
 8002db0:	20001adc 	.word	0x20001adc
 8002db4:	200019ac 	.word	0x200019ac
 8002db8:	200019f8 	.word	0x200019f8
 8002dbc:	20000014 	.word	0x20000014
 8002dc0:	48000400 	.word	0x48000400
 8002dc4:	200005a0 	.word	0x200005a0
 8002dc8:	200005a1 	.word	0x200005a1
 8002dcc:	200005a2 	.word	0x200005a2

08002dd0 <HAL_ADCEx_InjectedConvCpltCallback>:




void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	if(thermocouple_measurement_done == 0){
 8002dd8:	4b1c      	ldr	r3, [pc, #112]	; (8002e4c <HAL_ADCEx_InjectedConvCpltCallback+0x7c>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d11b      	bne.n	8002e18 <HAL_ADCEx_InjectedConvCpltCallback+0x48>
		HAL_GPIO_WritePin(GPIOB, USR_2_Pin, GPIO_PIN_RESET);
 8002de0:	2200      	movs	r2, #0
 8002de2:	2101      	movs	r1, #1
 8002de4:	481a      	ldr	r0, [pc, #104]	; (8002e50 <HAL_ADCEx_InjectedConvCpltCallback+0x80>)
 8002de6:	f006 fdc5 	bl	8009974 <HAL_GPIO_WritePin>
		thermocouple_temperature_raw = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_2); // Read The Injected Channel Result
 8002dea:	f240 110f 	movw	r1, #271	; 0x10f
 8002dee:	4819      	ldr	r0, [pc, #100]	; (8002e54 <HAL_ADCEx_InjectedConvCpltCallback+0x84>)
 8002df0:	f004 fe30 	bl	8007a54 <HAL_ADCEx_InjectedGetValue>
 8002df4:	4603      	mov	r3, r0
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	4b17      	ldr	r3, [pc, #92]	; (8002e58 <HAL_ADCEx_InjectedConvCpltCallback+0x88>)
 8002dfa:	801a      	strh	r2, [r3, #0]
		mcu_temperature_raw = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_3); // Read The Injected Channel Result
 8002dfc:	f240 2115 	movw	r1, #533	; 0x215
 8002e00:	4814      	ldr	r0, [pc, #80]	; (8002e54 <HAL_ADCEx_InjectedConvCpltCallback+0x84>)
 8002e02:	f004 fe27 	bl	8007a54 <HAL_ADCEx_InjectedGetValue>
 8002e06:	4603      	mov	r3, r0
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	4b14      	ldr	r3, [pc, #80]	; (8002e5c <HAL_ADCEx_InjectedConvCpltCallback+0x8c>)
 8002e0c:	801a      	strh	r2, [r3, #0]
		heater_on();
 8002e0e:	f7ff febf 	bl	8002b90 <heater_on>
		thermocouple_measurement_done = 1;
 8002e12:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_ADCEx_InjectedConvCpltCallback+0x7c>)
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
	}

	if(current_measurement_done == 0){
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d111      	bne.n	8002e44 <HAL_ADCEx_InjectedConvCpltCallback+0x74>
		current_raw = HAL_ADCEx_InjectedGetValue(&hadc1, ADC_INJECTED_RANK_1); // Read The Injected Channel Result
 8002e20:	2109      	movs	r1, #9
 8002e22:	480c      	ldr	r0, [pc, #48]	; (8002e54 <HAL_ADCEx_InjectedConvCpltCallback+0x84>)
 8002e24:	f004 fe16 	bl	8007a54 <HAL_ADCEx_InjectedGetValue>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <HAL_ADCEx_InjectedConvCpltCallback+0x94>)
 8002e2e:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOB, USR_3_Pin, GPIO_PIN_RESET);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2102      	movs	r1, #2
 8002e34:	4806      	ldr	r0, [pc, #24]	; (8002e50 <HAL_ADCEx_InjectedConvCpltCallback+0x80>)
 8002e36:	f006 fd9d 	bl	8009974 <HAL_GPIO_WritePin>
		heater_on();
 8002e3a:	f7ff fea9 	bl	8002b90 <heater_on>
		current_measurement_done = 1;
 8002e3e:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <HAL_ADCEx_InjectedConvCpltCallback+0x90>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	701a      	strb	r2, [r3, #0]
	}
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	2000018d 	.word	0x2000018d
 8002e50:	48000400 	.word	0x48000400
 8002e54:	20001640 	.word	0x20001640
 8002e58:	20000600 	.word	0x20000600
 8002e5c:	20000604 	.word	0x20000604
 8002e60:	2000018c 	.word	0x2000018c
 8002e64:	20000602 	.word	0x20000602

08002e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e6c:	ed2d 8b06 	vpush	{d8-d10}
 8002e70:	b090      	sub	sp, #64	; 0x40
 8002e72:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e74:	f002 fe26 	bl	8005ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e78:	f000 fa30 	bl	80032dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e7c:	f000 ff08 	bl	8003c90 <MX_GPIO_Init>
  MX_DMA_Init();
 8002e80:	f000 fecc 	bl	8003c1c <MX_DMA_Init>
  MX_ADC1_Init();
 8002e84:	f000 fa78 	bl	8003378 <MX_ADC1_Init>
  MX_ADC2_Init();
 8002e88:	f000 fb50 	bl	800352c <MX_ADC2_Init>
  MX_CRC_Init();
 8002e8c:	f000 fbb4 	bl	80035f8 <MX_CRC_Init>
  MX_TIM1_Init();
 8002e90:	f000 fc52 	bl	8003738 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002e94:	f000 fcf0 	bl	8003878 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002e98:	f000 fd42 	bl	8003920 <MX_TIM4_Init>
  MX_TIM16_Init();
 8002e9c:	f000 fe12 	bl	8003ac4 <MX_TIM16_Init>
  MX_SPI2_Init();
 8002ea0:	f000 fc0c 	bl	80036bc <MX_SPI2_Init>
  MX_I2C1_Init();
 8002ea4:	f000 fbca 	bl	800363c <MX_I2C1_Init>
  MX_USB_Device_Init();
 8002ea8:	f012 fba6 	bl	80155f8 <MX_USB_Device_Init>
  MX_TIM17_Init();
 8002eac:	f000 fe3a 	bl	8003b24 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8002eb0:	f000 fe68 	bl	8003b84 <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8002eb4:	f000 fd8e 	bl	80039d4 <MX_TIM7_Init>
  MX_TIM8_Init();
 8002eb8:	f000 fdc4 	bl	8003a44 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

	 set_heater_duty(0);		//Set heater duty to zero to ensure zero startup current
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	f7ff fe3f 	bl	8002b40 <set_heater_duty>
	 HAL_TIMEx_PWMN_Start_IT(&htim1, TIM_CHANNEL_3);
 8002ec2:	2108      	movs	r1, #8
 8002ec4:	4888      	ldr	r0, [pc, #544]	; (80030e8 <main+0x280>)
 8002ec6:	f00b fc1d 	bl	800e704 <HAL_TIMEx_PWMN_Start_IT>

	 HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8002eca:	213c      	movs	r1, #60	; 0x3c
 8002ecc:	4887      	ldr	r0, [pc, #540]	; (80030ec <main+0x284>)
 8002ece:	f00a fd3b 	bl	800d948 <HAL_TIM_Encoder_Start_IT>
	 HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4884      	ldr	r0, [pc, #528]	; (80030e8 <main+0x280>)
 8002ed6:	f00a fa11 	bl	800d2fc <HAL_TIM_PWM_Start_IT>
	 __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 5); //Set BUZZER duty to 50%
 8002eda:	4b85      	ldr	r3, [pc, #532]	; (80030f0 <main+0x288>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2205      	movs	r2, #5
 8002ee0:	639a      	str	r2, [r3, #56]	; 0x38


	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8002ee2:	217f      	movs	r1, #127	; 0x7f
 8002ee4:	4883      	ldr	r0, [pc, #524]	; (80030f4 <main+0x28c>)
 8002ee6:	f004 fc6d 	bl	80077c4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ADC2_BUF_VIN, (uint32_t)ADC2_BUF_VIN_LEN);	//Start ADC DMA mode
 8002eea:	220a      	movs	r2, #10
 8002eec:	4982      	ldr	r1, [pc, #520]	; (80030f8 <main+0x290>)
 8002eee:	4881      	ldr	r0, [pc, #516]	; (80030f4 <main+0x28c>)
 8002ef0:	f003 fa64 	bl	80063bc <HAL_ADC_Start_DMA>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8002ef4:	217f      	movs	r1, #127	; 0x7f
 8002ef6:	4881      	ldr	r0, [pc, #516]	; (80030fc <main+0x294>)
 8002ef8:	f004 fc64 	bl	80077c4 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_InjectedStart_IT(&hadc1);
 8002efc:	487f      	ldr	r0, [pc, #508]	; (80030fc <main+0x294>)
 8002efe:	f004 fcc3 	bl	8007888 <HAL_ADCEx_InjectedStart_IT>

	/* initialize moving average functions */
	Moving_Average_Init(&thermocouple_temperature_filter_struct,4);
 8002f02:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8002f06:	487e      	ldr	r0, [pc, #504]	; (8003100 <main+0x298>)
 8002f08:	f000 ff7d 	bl	8003e06 <Moving_Average_Init>
	Moving_Average_Init(&mcu_temperature_filter_struct,100);
 8002f0c:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8003104 <main+0x29c>
 8002f10:	487d      	ldr	r0, [pc, #500]	; (8003108 <main+0x2a0>)
 8002f12:	f000 ff78 	bl	8003e06 <Moving_Average_Init>
	Moving_Average_Init(&input_voltage_filterStruct,20);
 8002f16:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002f1a:	487c      	ldr	r0, [pc, #496]	; (800310c <main+0x2a4>)
 8002f1c:	f000 ff73 	bl	8003e06 <Moving_Average_Init>
	Moving_Average_Init(&stand_sense_filterStruct,20);
 8002f20:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002f24:	487a      	ldr	r0, [pc, #488]	; (8003110 <main+0x2a8>)
 8002f26:	f000 ff6e 	bl	8003e06 <Moving_Average_Init>
	Moving_Average_Init(&handle_sense_filterStruct,20);
 8002f2a:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8002f2e:	4879      	ldr	r0, [pc, #484]	; (8003114 <main+0x2ac>)
 8002f30:	f000 ff69 	bl	8003e06 <Moving_Average_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	HAL_Delay(200);
 8002f34:	20c8      	movs	r0, #200	; 0xc8
 8002f36:	f002 fe35 	bl	8005ba4 <HAL_Delay>
	LCD_init();
 8002f3a:	f002 fd57 	bl	80059ec <LCD_init>

  		// Check if user data in flash is valid, if not - write default parameters
  		if(!FlashCheckCRC()){
 8002f3e:	f7fe f857 	bl	8000ff0 <FlashCheckCRC>
 8002f42:	4603      	mov	r3, r0
 8002f44:	f083 0301 	eor.w	r3, r3, #1
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d002      	beq.n	8002f54 <main+0xec>
  	    	FlashWrite(&default_flash_values);
 8002f4e:	4872      	ldr	r0, [pc, #456]	; (8003118 <main+0x2b0>)
 8002f50:	f7fe f8fc 	bl	800114c <FlashWrite>
  		}

  		/* Read flash data */
  	    FlashRead(&flash_values);
 8002f54:	4871      	ldr	r0, [pc, #452]	; (800311c <main+0x2b4>)
 8002f56:	f7fe f8d5 	bl	8001104 <FlashRead>

  		/* Set startup state */
  	    change_state(HALTED);
 8002f5a:	2004      	movs	r0, #4
 8002f5c:	f7fe fa70 	bl	8001440 <change_state>

  		settings_menue();
 8002f60:	f7fe fbe2 	bl	8001728 <settings_menue>

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8002f64:	4b6d      	ldr	r3, [pc, #436]	; (800311c <main+0x2b4>)
 8002f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f6a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8002f6e:	4610      	mov	r0, r2
 8002f70:	4619      	mov	r1, r3
 8002f72:	f7fd fe41 	bl	8000bf8 <__aeabi_d2uiz>
 8002f76:	4603      	mov	r3, r0
 8002f78:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.thermocouple_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8002f7a:	4b69      	ldr	r3, [pc, #420]	; (8003120 <main+0x2b8>)
 8002f7c:	ed93 7b00 	vldr	d7, [r3]
 8002f80:	4b68      	ldr	r3, [pc, #416]	; (8003124 <main+0x2bc>)
 8002f82:	ed93 6b00 	vldr	d6, [r3]
 8002f86:	4b68      	ldr	r3, [pc, #416]	; (8003128 <main+0x2c0>)
 8002f88:	ed93 5b00 	vldr	d5, [r3]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	9301      	str	r3, [sp, #4]
 8002f90:	2301      	movs	r3, #1
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	eeb0 2a45 	vmov.f32	s4, s10
 8002f98:	eef0 2a65 	vmov.f32	s5, s11
 8002f9c:	eeb0 1a46 	vmov.f32	s2, s12
 8002fa0:	eef0 1a66 	vmov.f32	s3, s13
 8002fa4:	eeb0 0a47 	vmov.f32	s0, s14
 8002fa8:	eef0 0a67 	vmov.f32	s1, s15
 8002fac:	4b5f      	ldr	r3, [pc, #380]	; (800312c <main+0x2c4>)
 8002fae:	4a60      	ldr	r2, [pc, #384]	; (8003130 <main+0x2c8>)
 8002fb0:	4960      	ldr	r1, [pc, #384]	; (8003134 <main+0x2cc>)
 8002fb2:	4861      	ldr	r0, [pc, #388]	; (8003138 <main+0x2d0>)
 8002fb4:	f000 fff0 	bl	8003f98 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8002fb8:	2101      	movs	r1, #1
 8002fba:	485f      	ldr	r0, [pc, #380]	; (8003138 <main+0x2d0>)
 8002fbc:	f001 f97f 	bl	80042be <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); 		//Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 8002fc0:	4b5e      	ldr	r3, [pc, #376]	; (800313c <main+0x2d4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	4619      	mov	r1, r3
 8002fc8:	485b      	ldr	r0, [pc, #364]	; (8003138 <main+0x2d0>)
 8002fca:	f001 fb27 	bl	800461c <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 			// Set max and min output limit
 8002fce:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 80030c8 <main+0x260>
 8002fd2:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 80030d0 <main+0x268>
 8002fd6:	4858      	ldr	r0, [pc, #352]	; (8003138 <main+0x2d0>)
 8002fd8:	f001 f98f 	bl	80042fa <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, PID_MIN_LIMIT, PID_MAX_LIMIT); 	// Set max and min I limit
 8002fdc:	ed9f 1b3e 	vldr	d1, [pc, #248]	; 80030d8 <main+0x270>
 8002fe0:	ed9f 0b3f 	vldr	d0, [pc, #252]	; 80030e0 <main+0x278>
 8002fe4:	4854      	ldr	r0, [pc, #336]	; (8003138 <main+0x2d0>)
 8002fe6:	f001 f9f6 	bl	80043d6 <PID_SetILimits>

  		/* Draw the main screen decoration */
  		LCD_draw_main_screen();
 8002fea:	f7ff f97b 	bl	80022e4 <LCD_draw_main_screen>

  		/* Init and fill filter structures with initial values */
  		for (int i = 0; i<100;i++){
 8002fee:	2300      	movs	r3, #0
 8002ff0:	607b      	str	r3, [r7, #4]
 8002ff2:	e011      	b.n	8003018 <main+0x1b0>
			thermocouple_measurement_requested = 1;
 8002ff4:	4b52      	ldr	r3, [pc, #328]	; (8003140 <main+0x2d8>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
  			get_bus_voltage();
 8002ffa:	f7fe fa75 	bl	80014e8 <get_bus_voltage>
  			get_mcu_temp();
 8002ffe:	f7fe f9ab 	bl	8001358 <get_mcu_temp>
  			get_thermocouple_temperature();
 8003002:	f7fe faa1 	bl	8001548 <get_thermocouple_temperature>
  			get_handle_type();
 8003006:	f7ff fcd3 	bl	80029b0 <get_handle_type>
  			get_stand_status();
 800300a:	f7ff fc41 	bl	8002890 <get_stand_status>
  			handle_button_status();
 800300e:	f7ff fbe5 	bl	80027dc <handle_button_status>
  		for (int i = 0; i<100;i++){
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	3301      	adds	r3, #1
 8003016:	607b      	str	r3, [r7, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b63      	cmp	r3, #99	; 0x63
 800301c:	ddea      	ble.n	8002ff4 <main+0x18c>
  		}

  		/* Start-up beep */
  		beep();
 800301e:	f7ff fb57 	bl	80026d0 <beep>
  		HAL_Delay(100);
 8003022:	2064      	movs	r0, #100	; 0x64
 8003024:	f002 fdbe 	bl	8005ba4 <HAL_Delay>
  		beep();
 8003028:	f7ff fb52 	bl	80026d0 <beep>

  		while (1){
  			if(HAL_GetTick() - previous_sensor_update >= interval_sensor_update){
 800302c:	f002 fdae 	bl	8005b8c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	4b44      	ldr	r3, [pc, #272]	; (8003144 <main+0x2dc>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	1ad2      	subs	r2, r2, r3
 8003038:	4b43      	ldr	r3, [pc, #268]	; (8003148 <main+0x2e0>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	429a      	cmp	r2, r3
 800303e:	d312      	bcc.n	8003066 <main+0x1fe>
  	  			check_emergency_shutdown();
 8003040:	f7ff fb66 	bl	8002710 <check_emergency_shutdown>
  				get_stand_status();
 8003044:	f7ff fc24 	bl	8002890 <get_stand_status>
  				get_bus_voltage();
 8003048:	f7fe fa4e 	bl	80014e8 <get_bus_voltage>
  				get_mcu_temp();
 800304c:	f7fe f984 	bl	8001358 <get_mcu_temp>
  				get_handle_type();
 8003050:	f7ff fcae 	bl	80029b0 <get_handle_type>
  				handle_button_status();
 8003054:	f7ff fbc2 	bl	80027dc <handle_button_status>
  				get_set_temperature();
 8003058:	f7ff fb00 	bl	800265c <get_set_temperature>
  				previous_sensor_update = HAL_GetTick();
 800305c:	f002 fd96 	bl	8005b8c <HAL_GetTick>
 8003060:	4603      	mov	r3, r0
 8003062:	4a38      	ldr	r2, [pc, #224]	; (8003144 <main+0x2dc>)
 8003064:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 8003066:	4b39      	ldr	r3, [pc, #228]	; (800314c <main+0x2e4>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b04      	cmp	r3, #4
 800306c:	d87a      	bhi.n	8003164 <main+0x2fc>
 800306e:	a201      	add	r2, pc, #4	; (adr r2, 8003074 <main+0x20c>)
 8003070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003074:	08003099 	.word	0x08003099
 8003078:	080030a7 	.word	0x080030a7
 800307c:	080030b5 	.word	0x080030b5
 8003080:	08003089 	.word	0x08003089
 8003084:	08003155 	.word	0x08003155
  				case EMERGENCY_SLEEP: {
  					PID_setpoint = 0;
 8003088:	4928      	ldr	r1, [pc, #160]	; (800312c <main+0x2c4>)
 800308a:	f04f 0200 	mov.w	r2, #0
 800308e:	f04f 0300 	mov.w	r3, #0
 8003092:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003096:	e065      	b.n	8003164 <main+0x2fc>
  				}
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 8003098:	4b2d      	ldr	r3, [pc, #180]	; (8003150 <main+0x2e8>)
 800309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800309e:	4923      	ldr	r1, [pc, #140]	; (800312c <main+0x2c4>)
 80030a0:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80030a4:	e05e      	b.n	8003164 <main+0x2fc>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 80030a6:	4b1d      	ldr	r3, [pc, #116]	; (800311c <main+0x2b4>)
 80030a8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80030ac:	491f      	ldr	r1, [pc, #124]	; (800312c <main+0x2c4>)
 80030ae:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80030b2:	e057      	b.n	8003164 <main+0x2fc>
  				}
  				case SLEEP: {
  					PID_setpoint = 0;
 80030b4:	491d      	ldr	r1, [pc, #116]	; (800312c <main+0x2c4>)
 80030b6:	f04f 0200 	mov.w	r2, #0
 80030ba:	f04f 0300 	mov.w	r3, #0
 80030be:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80030c2:	e04f      	b.n	8003164 <main+0x2fc>
 80030c4:	f3af 8000 	nop.w
 80030c8:	00000000 	.word	0x00000000
 80030cc:	407f4000 	.word	0x407f4000
	...
 80030dc:	4062c000 	.word	0x4062c000
 80030e0:	00000000 	.word	0x00000000
 80030e4:	c062c000 	.word	0xc062c000
 80030e8:	20001914 	.word	0x20001914
 80030ec:	20001960 	.word	0x20001960
 80030f0:	200019ac 	.word	0x200019ac
 80030f4:	200016ac 	.word	0x200016ac
 80030f8:	200005ec 	.word	0x200005ec
 80030fc:	20001640 	.word	0x20001640
 8003100:	20000664 	.word	0x20000664
 8003104:	42c80000 	.word	0x42c80000
 8003108:	20000990 	.word	0x20000990
 800310c:	20000cbc 	.word	0x20000cbc
 8003110:	20000fe8 	.word	0x20000fe8
 8003114:	20001314 	.word	0x20001314
 8003118:	20000070 	.word	0x20000070
 800311c:	20000608 	.word	0x20000608
 8003120:	200005a8 	.word	0x200005a8
 8003124:	200005b0 	.word	0x200005b0
 8003128:	200005b8 	.word	0x200005b8
 800312c:	20000650 	.word	0x20000650
 8003130:	20000648 	.word	0x20000648
 8003134:	20000030 	.word	0x20000030
 8003138:	20001bc0 	.word	0x20001bc0
 800313c:	2000000c 	.word	0x2000000c
 8003140:	20000661 	.word	0x20000661
 8003144:	2000059c 	.word	0x2000059c
 8003148:	20000010 	.word	0x20000010
 800314c:	20000015 	.word	0x20000015
 8003150:	20000028 	.word	0x20000028
  				}
  				case HALTED: {
  					PID_setpoint = 0;
 8003154:	4952      	ldr	r1, [pc, #328]	; (80032a0 <main+0x438>)
 8003156:	f04f 0200 	mov.w	r2, #0
 800315a:	f04f 0300 	mov.w	r3, #0
 800315e:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8003162:	bf00      	nop
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Calculate PID output */
  			if(HAL_GetTick() - previous_PID_update >= interval_PID_update){
 8003164:	f002 fd12 	bl	8005b8c <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	4b4e      	ldr	r3, [pc, #312]	; (80032a4 <main+0x43c>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	1ad2      	subs	r2, r2, r3
 8003170:	4b4d      	ldr	r3, [pc, #308]	; (80032a8 <main+0x440>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	429a      	cmp	r2, r3
 8003176:	d30c      	bcc.n	8003192 <main+0x32a>
  				thermocouple_measurement_requested = 1;
 8003178:	4b4c      	ldr	r3, [pc, #304]	; (80032ac <main+0x444>)
 800317a:	2201      	movs	r2, #1
 800317c:	701a      	strb	r2, [r3, #0]
  				get_thermocouple_temperature();
 800317e:	f7fe f9e3 	bl	8001548 <get_thermocouple_temperature>
  				/* Compute PID */
  				PID_Compute(&TPID);
 8003182:	484b      	ldr	r0, [pc, #300]	; (80032b0 <main+0x448>)
 8003184:	f000 ff54 	bl	8004030 <PID_Compute>
  				previous_PID_update = HAL_GetTick();
 8003188:	f002 fd00 	bl	8005b8c <HAL_GetTick>
 800318c:	4603      	mov	r3, r0
 800318e:	4a45      	ldr	r2, [pc, #276]	; (80032a4 <main+0x43c>)
 8003190:	6013      	str	r3, [r2, #0]
  			}

  			/* Send debug information over serial */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 8003192:	f002 fcfb 	bl	8005b8c <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	4b46      	ldr	r3, [pc, #280]	; (80032b4 <main+0x44c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	1ad2      	subs	r2, r2, r3
 800319e:	4b46      	ldr	r3, [pc, #280]	; (80032b8 <main+0x450>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d368      	bcc.n	8003278 <main+0x410>
  				memset(&buffer, '\0', sizeof(buffer));
 80031a6:	2228      	movs	r2, #40	; 0x28
 80031a8:	2100      	movs	r1, #0
 80031aa:	4844      	ldr	r0, [pc, #272]	; (80032bc <main+0x454>)
 80031ac:	f013 fcb9 	bl	8016b22 <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 80031b0:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <main+0x458>)
 80031b2:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 80031b6:	4b42      	ldr	r3, [pc, #264]	; (80032c0 <main+0x458>)
 80031b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80031bc:	4b41      	ldr	r3, [pc, #260]	; (80032c4 <main+0x45c>)
 80031be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031c2:	f04f 0200 	mov.w	r2, #0
 80031c6:	4b40      	ldr	r3, [pc, #256]	; (80032c8 <main+0x460>)
 80031c8:	f7fd fb68 	bl	800089c <__aeabi_ddiv>
 80031cc:	4602      	mov	r2, r0
 80031ce:	460b      	mov	r3, r1
 80031d0:	ec43 2b19 	vmov	d9, r2, r3
  						sensor_values.thermocouple_temperature, sensor_values.set_temperature,
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 80031d4:	4836      	ldr	r0, [pc, #216]	; (80032b0 <main+0x448>)
 80031d6:	f001 fa65 	bl	80046a4 <PID_GetPpart>
 80031da:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 80031de:	f04f 0200 	mov.w	r2, #0
 80031e2:	4b39      	ldr	r3, [pc, #228]	; (80032c8 <main+0x460>)
 80031e4:	f7fd fb5a 	bl	800089c <__aeabi_ddiv>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 80031f0:	482f      	ldr	r0, [pc, #188]	; (80032b0 <main+0x448>)
 80031f2:	f001 fa69 	bl	80046c8 <PID_GetIpart>
 80031f6:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 80031fa:	f04f 0200 	mov.w	r2, #0
 80031fe:	4b32      	ldr	r3, [pc, #200]	; (80032c8 <main+0x460>)
 8003200:	f7fd fb4c 	bl	800089c <__aeabi_ddiv>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 800320c:	4828      	ldr	r0, [pc, #160]	; (80032b0 <main+0x448>)
 800320e:	f001 fa6d 	bl	80046ec <PID_GetDpart>
 8003212:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	4b2b      	ldr	r3, [pc, #172]	; (80032c8 <main+0x460>)
 800321c:	f7fd fb3e 	bl	800089c <__aeabi_ddiv>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4690      	mov	r8, r2
 8003226:	4699      	mov	r9, r3
 8003228:	4b25      	ldr	r3, [pc, #148]	; (80032c0 <main+0x458>)
 800322a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800322e:	4b27      	ldr	r3, [pc, #156]	; (80032cc <main+0x464>)
 8003230:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003234:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8003238:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800323c:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8003240:	ed8d 8b06 	vstr	d8, [sp, #24]
 8003244:	ed8d ab04 	vstr	d10, [sp, #16]
 8003248:	ed8d 9b02 	vstr	d9, [sp, #8]
 800324c:	e9cd 4500 	strd	r4, r5, [sp]
 8003250:	4652      	mov	r2, sl
 8003252:	465b      	mov	r3, fp
 8003254:	491e      	ldr	r1, [pc, #120]	; (80032d0 <main+0x468>)
 8003256:	4819      	ldr	r0, [pc, #100]	; (80032bc <main+0x454>)
 8003258:	f013 fc00 	bl	8016a5c <siprintf>
  						sensor_values.in_stand, duty_cycle);
  				CDC_Transmit_FS((uint8_t *) buffer, strlen(buffer)); //Print string over USB virtual COM port
 800325c:	4817      	ldr	r0, [pc, #92]	; (80032bc <main+0x454>)
 800325e:	f7fd f82f 	bl	80002c0 <strlen>
 8003262:	4603      	mov	r3, r0
 8003264:	b29b      	uxth	r3, r3
 8003266:	4619      	mov	r1, r3
 8003268:	4814      	ldr	r0, [pc, #80]	; (80032bc <main+0x454>)
 800326a:	f012 fa83 	bl	8015774 <CDC_Transmit_FS>
  				previous_millis_debug = HAL_GetTick();
 800326e:	f002 fc8d 	bl	8005b8c <HAL_GetTick>
 8003272:	4603      	mov	r3, r0
 8003274:	4a0f      	ldr	r2, [pc, #60]	; (80032b4 <main+0x44c>)
 8003276:	6013      	str	r3, [r2, #0]
  					previous_check_for_valid_heater_update = HAL_GetTick();
  				}
			#endif

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 8003278:	f002 fc88 	bl	8005b8c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	4b15      	ldr	r3, [pc, #84]	; (80032d4 <main+0x46c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	1ad2      	subs	r2, r2, r3
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <main+0x470>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	f4ff aecf 	bcc.w	800302c <main+0x1c4>
  				update_display();
 800328e:	f7fe fd3f 	bl	8001d10 <update_display>
  				previous_millis_display = HAL_GetTick();
 8003292:	f002 fc7b 	bl	8005b8c <HAL_GetTick>
 8003296:	4603      	mov	r3, r0
 8003298:	4a0e      	ldr	r2, [pc, #56]	; (80032d4 <main+0x46c>)
 800329a:	6013      	str	r3, [r2, #0]
  			if(HAL_GetTick() - previous_sensor_update >= interval_sensor_update){
 800329c:	e6c6      	b.n	800302c <main+0x1c4>
 800329e:	bf00      	nop
 80032a0:	20000650 	.word	0x20000650
 80032a4:	2000058c 	.word	0x2000058c
 80032a8:	2000000c 	.word	0x2000000c
 80032ac:	20000661 	.word	0x20000661
 80032b0:	20001bc0 	.word	0x20001bc0
 80032b4:	20000588 	.word	0x20000588
 80032b8:	20000008 	.word	0x20000008
 80032bc:	200005c0 	.word	0x200005c0
 80032c0:	20000028 	.word	0x20000028
 80032c4:	20000648 	.word	0x20000648
 80032c8:	40240000 	.word	0x40240000
 80032cc:	20000658 	.word	0x20000658
 80032d0:	08019128 	.word	0x08019128
 80032d4:	20000584 	.word	0x20000584
 80032d8:	20000004 	.word	0x20000004

080032dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b094      	sub	sp, #80	; 0x50
 80032e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032e2:	f107 0318 	add.w	r3, r7, #24
 80032e6:	2238      	movs	r2, #56	; 0x38
 80032e8:	2100      	movs	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f013 fc19 	bl	8016b22 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032f0:	1d3b      	adds	r3, r7, #4
 80032f2:	2200      	movs	r2, #0
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	605a      	str	r2, [r3, #4]
 80032f8:	609a      	str	r2, [r3, #8]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80032fe:	2000      	movs	r0, #0
 8003300:	f008 f9ce 	bl	800b6a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8003304:	2322      	movs	r3, #34	; 0x22
 8003306:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003308:	f44f 7380 	mov.w	r3, #256	; 0x100
 800330c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800330e:	2340      	movs	r3, #64	; 0x40
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003312:	2301      	movs	r3, #1
 8003314:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003316:	2302      	movs	r3, #2
 8003318:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800331a:	2302      	movs	r3, #2
 800331c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800331e:	2304      	movs	r3, #4
 8003320:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8003322:	2355      	movs	r3, #85	; 0x55
 8003324:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003326:	2302      	movs	r3, #2
 8003328:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800332a:	2302      	movs	r3, #2
 800332c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800332e:	2302      	movs	r3, #2
 8003330:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003332:	f107 0318 	add.w	r3, r7, #24
 8003336:	4618      	mov	r0, r3
 8003338:	f008 fa66 	bl	800b808 <HAL_RCC_OscConfig>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8003342:	f000 fd5b 	bl	8003dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003346:	230f      	movs	r3, #15
 8003348:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800334a:	2303      	movs	r3, #3
 800334c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003352:	2300      	movs	r3, #0
 8003354:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003356:	2300      	movs	r3, #0
 8003358:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800335a:	1d3b      	adds	r3, r7, #4
 800335c:	2104      	movs	r1, #4
 800335e:	4618      	mov	r0, r3
 8003360:	f008 fd64 	bl	800be2c <HAL_RCC_ClockConfig>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <SystemClock_Config+0x92>
  {
    Error_Handler();
 800336a:	f000 fd47 	bl	8003dfc <Error_Handler>
  }
}
 800336e:	bf00      	nop
 8003370:	3750      	adds	r7, #80	; 0x50
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b09a      	sub	sp, #104	; 0x68
 800337c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800337e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003382:	2200      	movs	r2, #0
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	605a      	str	r2, [r3, #4]
 8003388:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800338a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800338e:	2220      	movs	r2, #32
 8003390:	2100      	movs	r1, #0
 8003392:	4618      	mov	r0, r3
 8003394:	f013 fbc5 	bl	8016b22 <memset>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8003398:	463b      	mov	r3, r7
 800339a:	223c      	movs	r2, #60	; 0x3c
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f013 fbbf 	bl	8016b22 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80033a4:	4b5d      	ldr	r3, [pc, #372]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033a6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80033aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80033ac:	4b5b      	ldr	r3, [pc, #364]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033ae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80033b2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80033b4:	4b59      	ldr	r3, [pc, #356]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80033ba:	4b58      	ldr	r3, [pc, #352]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033bc:	2200      	movs	r2, #0
 80033be:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80033c0:	4b56      	ldr	r3, [pc, #344]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033c2:	2200      	movs	r2, #0
 80033c4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80033c6:	4b55      	ldr	r3, [pc, #340]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80033cc:	4b53      	ldr	r3, [pc, #332]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033ce:	2204      	movs	r2, #4
 80033d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80033d2:	4b52      	ldr	r3, [pc, #328]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033d4:	2200      	movs	r2, #0
 80033d6:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80033d8:	4b50      	ldr	r3, [pc, #320]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033da:	2200      	movs	r2, #0
 80033dc:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80033de:	4b4f      	ldr	r3, [pc, #316]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033e0:	2202      	movs	r2, #2
 80033e2:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80033e4:	4b4d      	ldr	r3, [pc, #308]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80033ec:	4b4b      	ldr	r3, [pc, #300]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033ee:	2200      	movs	r2, #0
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80033f2:	4b4a      	ldr	r3, [pc, #296]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033f4:	2200      	movs	r2, #0
 80033f6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80033f8:	4b48      	ldr	r3, [pc, #288]	; (800351c <MX_ADC1_Init+0x1a4>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003400:	4b46      	ldr	r3, [pc, #280]	; (800351c <MX_ADC1_Init+0x1a4>)
 8003402:	2200      	movs	r2, #0
 8003404:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003406:	4b45      	ldr	r3, [pc, #276]	; (800351c <MX_ADC1_Init+0x1a4>)
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800340e:	4843      	ldr	r0, [pc, #268]	; (800351c <MX_ADC1_Init+0x1a4>)
 8003410:	f002 fe50 	bl	80060b4 <HAL_ADC_Init>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800341a:	f000 fcef 	bl	8003dfc <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800341e:	2300      	movs	r3, #0
 8003420:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003422:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003426:	4619      	mov	r1, r3
 8003428:	483c      	ldr	r0, [pc, #240]	; (800351c <MX_ADC1_Init+0x1a4>)
 800342a:	f005 f853 	bl	80084d4 <HAL_ADCEx_MultiModeConfigChannel>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 8003434:	f000 fce2 	bl	8003dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003438:	4b39      	ldr	r3, [pc, #228]	; (8003520 <MX_ADC1_Init+0x1a8>)
 800343a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800343c:	2306      	movs	r3, #6
 800343e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8003440:	2302      	movs	r3, #2
 8003442:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003444:	237f      	movs	r3, #127	; 0x7f
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003448:	2304      	movs	r3, #4
 800344a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.Offset = 0;
 800344c:	2300      	movs	r3, #0
 800344e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003450:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003454:	4619      	mov	r1, r3
 8003456:	4831      	ldr	r0, [pc, #196]	; (800351c <MX_ADC1_Init+0x1a4>)
 8003458:	f003 faa6 	bl	80069a8 <HAL_ADC_ConfigChannel>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <MX_ADC1_Init+0xee>
  {
    Error_Handler();
 8003462:	f000 fccb 	bl	8003dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003466:	4b2f      	ldr	r3, [pc, #188]	; (8003524 <MX_ADC1_Init+0x1ac>)
 8003468:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800346a:	230c      	movs	r3, #12
 800346c:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800346e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003472:	4619      	mov	r1, r3
 8003474:	4829      	ldr	r0, [pc, #164]	; (800351c <MX_ADC1_Init+0x1a4>)
 8003476:	f003 fa97 	bl	80069a8 <HAL_ADC_ConfigChannel>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8003480:	f000 fcbc 	bl	8003dfc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8003484:	4b26      	ldr	r3, [pc, #152]	; (8003520 <MX_ADC1_Init+0x1a8>)
 8003486:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8003488:	2309      	movs	r3, #9
 800348a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800348c:	2307      	movs	r3, #7
 800348e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8003490:	237f      	movs	r3, #127	; 0x7f
 8003492:	60fb      	str	r3, [r7, #12]
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8003494:	2304      	movs	r3, #4
 8003496:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedOffset = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedNbrOfConversion = 3;
 800349c:	2303      	movs	r3, #3
 800349e:	623b      	str	r3, [r7, #32]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80034a0:	2300      	movs	r3, #0
 80034a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sConfigInjected.AutoInjectedConv = DISABLE;
 80034a6:	2300      	movs	r3, #0
 80034a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 80034ac:	2300      	movs	r3, #0
 80034ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  sConfigInjected.ExternalTrigInjecConv = ADC_INJECTED_SOFTWARE_START;
 80034b2:	2300      	movs	r3, #0
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_NONE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80034ba:	2300      	movs	r3, #0
 80034bc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80034c0:	463b      	mov	r3, r7
 80034c2:	4619      	mov	r1, r3
 80034c4:	4815      	ldr	r0, [pc, #84]	; (800351c <MX_ADC1_Init+0x1a4>)
 80034c6:	f004 fb25 	bl	8007b14 <HAL_ADCEx_InjectedConfigChannel>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <MX_ADC1_Init+0x15c>
  {
    Error_Handler();
 80034d0:	f000 fc94 	bl	8003dfc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80034d4:	4b13      	ldr	r3, [pc, #76]	; (8003524 <MX_ADC1_Init+0x1ac>)
 80034d6:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80034d8:	f240 130f 	movw	r3, #271	; 0x10f
 80034dc:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80034de:	463b      	mov	r3, r7
 80034e0:	4619      	mov	r1, r3
 80034e2:	480e      	ldr	r0, [pc, #56]	; (800351c <MX_ADC1_Init+0x1a4>)
 80034e4:	f004 fb16 	bl	8007b14 <HAL_ADCEx_InjectedConfigChannel>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 80034ee:	f000 fc85 	bl	8003dfc <Error_Handler>
  }

  /** Configure Injected Channel
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 80034f2:	4b0d      	ldr	r3, [pc, #52]	; (8003528 <MX_ADC1_Init+0x1b0>)
 80034f4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 80034f6:	f240 2315 	movw	r3, #533	; 0x215
 80034fa:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 80034fc:	2306      	movs	r3, #6
 80034fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8003500:	463b      	mov	r3, r7
 8003502:	4619      	mov	r1, r3
 8003504:	4805      	ldr	r0, [pc, #20]	; (800351c <MX_ADC1_Init+0x1a4>)
 8003506:	f004 fb05 	bl	8007b14 <HAL_ADCEx_InjectedConfigChannel>
 800350a:	4603      	mov	r3, r0
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <MX_ADC1_Init+0x19c>
  {
    Error_Handler();
 8003510:	f000 fc74 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003514:	bf00      	nop
 8003516:	3768      	adds	r7, #104	; 0x68
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}
 800351c:	20001640 	.word	0x20001640
 8003520:	0c900008 	.word	0x0c900008
 8003524:	10c00010 	.word	0x10c00010
 8003528:	c3210000 	.word	0xc3210000

0800352c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003532:	463b      	mov	r3, r7
 8003534:	2220      	movs	r2, #32
 8003536:	2100      	movs	r1, #0
 8003538:	4618      	mov	r0, r3
 800353a:	f013 faf2 	bl	8016b22 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800353e:	4b2b      	ldr	r3, [pc, #172]	; (80035ec <MX_ADC2_Init+0xc0>)
 8003540:	4a2b      	ldr	r2, [pc, #172]	; (80035f0 <MX_ADC2_Init+0xc4>)
 8003542:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003544:	4b29      	ldr	r3, [pc, #164]	; (80035ec <MX_ADC2_Init+0xc0>)
 8003546:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800354a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800354c:	4b27      	ldr	r3, [pc, #156]	; (80035ec <MX_ADC2_Init+0xc0>)
 800354e:	2200      	movs	r2, #0
 8003550:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003552:	4b26      	ldr	r3, [pc, #152]	; (80035ec <MX_ADC2_Init+0xc0>)
 8003554:	2200      	movs	r2, #0
 8003556:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8003558:	4b24      	ldr	r3, [pc, #144]	; (80035ec <MX_ADC2_Init+0xc0>)
 800355a:	2200      	movs	r2, #0
 800355c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800355e:	4b23      	ldr	r3, [pc, #140]	; (80035ec <MX_ADC2_Init+0xc0>)
 8003560:	2200      	movs	r2, #0
 8003562:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003564:	4b21      	ldr	r3, [pc, #132]	; (80035ec <MX_ADC2_Init+0xc0>)
 8003566:	2204      	movs	r2, #4
 8003568:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800356a:	4b20      	ldr	r3, [pc, #128]	; (80035ec <MX_ADC2_Init+0xc0>)
 800356c:	2200      	movs	r2, #0
 800356e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8003570:	4b1e      	ldr	r3, [pc, #120]	; (80035ec <MX_ADC2_Init+0xc0>)
 8003572:	2201      	movs	r2, #1
 8003574:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <MX_ADC2_Init+0xc0>)
 8003578:	2201      	movs	r2, #1
 800357a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800357c:	4b1b      	ldr	r3, [pc, #108]	; (80035ec <MX_ADC2_Init+0xc0>)
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <MX_ADC2_Init+0xc0>)
 8003586:	2200      	movs	r2, #0
 8003588:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800358a:	4b18      	ldr	r3, [pc, #96]	; (80035ec <MX_ADC2_Init+0xc0>)
 800358c:	2200      	movs	r2, #0
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8003590:	4b16      	ldr	r3, [pc, #88]	; (80035ec <MX_ADC2_Init+0xc0>)
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003598:	4b14      	ldr	r3, [pc, #80]	; (80035ec <MX_ADC2_Init+0xc0>)
 800359a:	2200      	movs	r2, #0
 800359c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <MX_ADC2_Init+0xc0>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80035a6:	4811      	ldr	r0, [pc, #68]	; (80035ec <MX_ADC2_Init+0xc0>)
 80035a8:	f002 fd84 	bl	80060b4 <HAL_ADC_Init>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80035b2:	f000 fc23 	bl	8003dfc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80035b6:	4b0f      	ldr	r3, [pc, #60]	; (80035f4 <MX_ADC2_Init+0xc8>)
 80035b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80035ba:	2306      	movs	r3, #6
 80035bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80035be:	2304      	movs	r3, #4
 80035c0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80035c2:	237f      	movs	r3, #127	; 0x7f
 80035c4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80035c6:	2304      	movs	r3, #4
 80035c8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80035ce:	463b      	mov	r3, r7
 80035d0:	4619      	mov	r1, r3
 80035d2:	4806      	ldr	r0, [pc, #24]	; (80035ec <MX_ADC2_Init+0xc0>)
 80035d4:	f003 f9e8 	bl	80069a8 <HAL_ADC_ConfigChannel>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80035de:	f000 fc0d 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80035e2:	bf00      	nop
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	200016ac 	.word	0x200016ac
 80035f0:	50000100 	.word	0x50000100
 80035f4:	2a000400 	.word	0x2a000400

080035f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80035fc:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <MX_CRC_Init+0x3c>)
 80035fe:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <MX_CRC_Init+0x40>)
 8003600:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003602:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <MX_CRC_Init+0x3c>)
 8003604:	2200      	movs	r2, #0
 8003606:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8003608:	4b0a      	ldr	r3, [pc, #40]	; (8003634 <MX_CRC_Init+0x3c>)
 800360a:	2200      	movs	r2, #0
 800360c:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 800360e:	4b09      	ldr	r3, [pc, #36]	; (8003634 <MX_CRC_Init+0x3c>)
 8003610:	2200      	movs	r2, #0
 8003612:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003614:	4b07      	ldr	r3, [pc, #28]	; (8003634 <MX_CRC_Init+0x3c>)
 8003616:	2200      	movs	r2, #0
 8003618:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800361a:	4b06      	ldr	r3, [pc, #24]	; (8003634 <MX_CRC_Init+0x3c>)
 800361c:	2201      	movs	r2, #1
 800361e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003620:	4804      	ldr	r0, [pc, #16]	; (8003634 <MX_CRC_Init+0x3c>)
 8003622:	f005 f90b 	bl	800883c <HAL_CRC_Init>
 8003626:	4603      	mov	r3, r0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d001      	beq.n	8003630 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800362c:	f000 fbe6 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003630:	bf00      	nop
 8003632:	bd80      	pop	{r7, pc}
 8003634:	200017d8 	.word	0x200017d8
 8003638:	40023000 	.word	0x40023000

0800363c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <MX_I2C1_Init+0x74>)
 8003642:	4a1c      	ldr	r2, [pc, #112]	; (80036b4 <MX_I2C1_Init+0x78>)
 8003644:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8003646:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <MX_I2C1_Init+0x74>)
 8003648:	4a1b      	ldr	r2, [pc, #108]	; (80036b8 <MX_I2C1_Init+0x7c>)
 800364a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800364c:	4b18      	ldr	r3, [pc, #96]	; (80036b0 <MX_I2C1_Init+0x74>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003652:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <MX_I2C1_Init+0x74>)
 8003654:	2201      	movs	r2, #1
 8003656:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003658:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <MX_I2C1_Init+0x74>)
 800365a:	2200      	movs	r2, #0
 800365c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800365e:	4b14      	ldr	r3, [pc, #80]	; (80036b0 <MX_I2C1_Init+0x74>)
 8003660:	2200      	movs	r2, #0
 8003662:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003664:	4b12      	ldr	r3, [pc, #72]	; (80036b0 <MX_I2C1_Init+0x74>)
 8003666:	2200      	movs	r2, #0
 8003668:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800366a:	4b11      	ldr	r3, [pc, #68]	; (80036b0 <MX_I2C1_Init+0x74>)
 800366c:	2200      	movs	r2, #0
 800366e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003670:	4b0f      	ldr	r3, [pc, #60]	; (80036b0 <MX_I2C1_Init+0x74>)
 8003672:	2200      	movs	r2, #0
 8003674:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003676:	480e      	ldr	r0, [pc, #56]	; (80036b0 <MX_I2C1_Init+0x74>)
 8003678:	f006 f9ac 	bl	80099d4 <HAL_I2C_Init>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d001      	beq.n	8003686 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003682:	f000 fbbb 	bl	8003dfc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003686:	2100      	movs	r1, #0
 8003688:	4809      	ldr	r0, [pc, #36]	; (80036b0 <MX_I2C1_Init+0x74>)
 800368a:	f006 fa3e 	bl	8009b0a <HAL_I2CEx_ConfigAnalogFilter>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003694:	f000 fbb2 	bl	8003dfc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003698:	2100      	movs	r1, #0
 800369a:	4805      	ldr	r0, [pc, #20]	; (80036b0 <MX_I2C1_Init+0x74>)
 800369c:	f006 fa80 	bl	8009ba0 <HAL_I2CEx_ConfigDigitalFilter>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80036a6:	f000 fba9 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80036aa:	bf00      	nop
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200017fc 	.word	0x200017fc
 80036b4:	40005400 	.word	0x40005400
 80036b8:	30a0a7fb 	.word	0x30a0a7fb

080036bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80036c0:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <MX_SPI2_Init+0x74>)
 80036c2:	4a1c      	ldr	r2, [pc, #112]	; (8003734 <MX_SPI2_Init+0x78>)
 80036c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036c6:	4b1a      	ldr	r3, [pc, #104]	; (8003730 <MX_SPI2_Init+0x74>)
 80036c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80036ce:	4b18      	ldr	r3, [pc, #96]	; (8003730 <MX_SPI2_Init+0x74>)
 80036d0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80036d4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <MX_SPI2_Init+0x74>)
 80036d8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80036dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <MX_SPI2_Init+0x74>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <MX_SPI2_Init+0x74>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <MX_SPI2_Init+0x74>)
 80036ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80036f2:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <MX_SPI2_Init+0x74>)
 80036f4:	2210      	movs	r2, #16
 80036f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036f8:	4b0d      	ldr	r3, [pc, #52]	; (8003730 <MX_SPI2_Init+0x74>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <MX_SPI2_Init+0x74>)
 8003700:	2200      	movs	r2, #0
 8003702:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <MX_SPI2_Init+0x74>)
 8003706:	2200      	movs	r2, #0
 8003708:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <MX_SPI2_Init+0x74>)
 800370c:	2207      	movs	r2, #7
 800370e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <MX_SPI2_Init+0x74>)
 8003712:	2200      	movs	r2, #0
 8003714:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <MX_SPI2_Init+0x74>)
 8003718:	2208      	movs	r2, #8
 800371a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800371c:	4804      	ldr	r0, [pc, #16]	; (8003730 <MX_SPI2_Init+0x74>)
 800371e:	f008 ff91 	bl	800c644 <HAL_SPI_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8003728:	f000 fb68 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20001850 	.word	0x20001850
 8003734:	40003800 	.word	0x40003800

08003738 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b098      	sub	sp, #96	; 0x60
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800373e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800374a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	605a      	str	r2, [r3, #4]
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	60da      	str	r2, [r3, #12]
 8003758:	611a      	str	r2, [r3, #16]
 800375a:	615a      	str	r2, [r3, #20]
 800375c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800375e:	1d3b      	adds	r3, r7, #4
 8003760:	2234      	movs	r2, #52	; 0x34
 8003762:	2100      	movs	r1, #0
 8003764:	4618      	mov	r0, r3
 8003766:	f013 f9dc 	bl	8016b22 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800376a:	4b41      	ldr	r3, [pc, #260]	; (8003870 <MX_TIM1_Init+0x138>)
 800376c:	4a41      	ldr	r2, [pc, #260]	; (8003874 <MX_TIM1_Init+0x13c>)
 800376e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 20-1;
 8003770:	4b3f      	ldr	r3, [pc, #252]	; (8003870 <MX_TIM1_Init+0x138>)
 8003772:	2213      	movs	r2, #19
 8003774:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003776:	4b3e      	ldr	r3, [pc, #248]	; (8003870 <MX_TIM1_Init+0x138>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 800377c:	4b3c      	ldr	r3, [pc, #240]	; (8003870 <MX_TIM1_Init+0x138>)
 800377e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003782:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003784:	4b3a      	ldr	r3, [pc, #232]	; (8003870 <MX_TIM1_Init+0x138>)
 8003786:	2200      	movs	r2, #0
 8003788:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800378a:	4b39      	ldr	r3, [pc, #228]	; (8003870 <MX_TIM1_Init+0x138>)
 800378c:	2200      	movs	r2, #0
 800378e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003790:	4b37      	ldr	r3, [pc, #220]	; (8003870 <MX_TIM1_Init+0x138>)
 8003792:	2280      	movs	r2, #128	; 0x80
 8003794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003796:	4836      	ldr	r0, [pc, #216]	; (8003870 <MX_TIM1_Init+0x138>)
 8003798:	f009 fd59 	bl	800d24e <HAL_TIM_PWM_Init>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80037a2:	f000 fb2b 	bl	8003dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a6:	2300      	movs	r3, #0
 80037a8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80037aa:	2300      	movs	r3, #0
 80037ac:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ae:	2300      	movs	r3, #0
 80037b0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037b2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80037b6:	4619      	mov	r1, r3
 80037b8:	482d      	ldr	r0, [pc, #180]	; (8003870 <MX_TIM1_Init+0x138>)
 80037ba:	f00b f8ab 	bl	800e914 <HAL_TIMEx_MasterConfigSynchronization>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80037c4:	f000 fb1a 	bl	8003dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037c8:	2360      	movs	r3, #96	; 0x60
 80037ca:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80037cc:	2300      	movs	r3, #0
 80037ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037d0:	2300      	movs	r3, #0
 80037d2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80037d4:	2300      	movs	r3, #0
 80037d6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037d8:	2300      	movs	r3, #0
 80037da:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80037dc:	2300      	movs	r3, #0
 80037de:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80037e0:	2300      	movs	r3, #0
 80037e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80037e8:	2200      	movs	r2, #0
 80037ea:	4619      	mov	r1, r3
 80037ec:	4820      	ldr	r0, [pc, #128]	; (8003870 <MX_TIM1_Init+0x138>)
 80037ee:	f00a faa9 	bl	800dd44 <HAL_TIM_PWM_ConfigChannel>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80037f8:	f000 fb00 	bl	8003dfc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037fc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003800:	2208      	movs	r2, #8
 8003802:	4619      	mov	r1, r3
 8003804:	481a      	ldr	r0, [pc, #104]	; (8003870 <MX_TIM1_Init+0x138>)
 8003806:	f00a fa9d 	bl	800dd44 <HAL_TIM_PWM_ConfigChannel>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8003810:	f000 faf4 	bl	8003dfc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003814:	2300      	movs	r3, #0
 8003816:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003818:	2300      	movs	r3, #0
 800381a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800381c:	2300      	movs	r3, #0
 800381e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003824:	2300      	movs	r3, #0
 8003826:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003828:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800382c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800382e:	2300      	movs	r3, #0
 8003830:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8003832:	2300      	movs	r3, #0
 8003834:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8003836:	2300      	movs	r3, #0
 8003838:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800383a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800383e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8003844:	2300      	movs	r3, #0
 8003846:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003848:	2300      	movs	r3, #0
 800384a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800384c:	1d3b      	adds	r3, r7, #4
 800384e:	4619      	mov	r1, r3
 8003850:	4807      	ldr	r0, [pc, #28]	; (8003870 <MX_TIM1_Init+0x138>)
 8003852:	f00b f8e1 	bl	800ea18 <HAL_TIMEx_ConfigBreakDeadTime>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800385c:	f000 face 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003860:	4803      	ldr	r0, [pc, #12]	; (8003870 <MX_TIM1_Init+0x138>)
 8003862:	f001 facd 	bl	8004e00 <HAL_TIM_MspPostInit>

}
 8003866:	bf00      	nop
 8003868:	3760      	adds	r7, #96	; 0x60
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20001914 	.word	0x20001914
 8003874:	40012c00 	.word	0x40012c00

08003878 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b08c      	sub	sp, #48	; 0x30
 800387c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800387e:	f107 030c 	add.w	r3, r7, #12
 8003882:	2224      	movs	r2, #36	; 0x24
 8003884:	2100      	movs	r1, #0
 8003886:	4618      	mov	r0, r3
 8003888:	f013 f94b 	bl	8016b22 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800388c:	463b      	mov	r3, r7
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003896:	4b21      	ldr	r3, [pc, #132]	; (800391c <MX_TIM2_Init+0xa4>)
 8003898:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800389c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800389e:	4b1f      	ldr	r3, [pc, #124]	; (800391c <MX_TIM2_Init+0xa4>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038a4:	4b1d      	ldr	r3, [pc, #116]	; (800391c <MX_TIM2_Init+0xa4>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80038aa:	4b1c      	ldr	r3, [pc, #112]	; (800391c <MX_TIM2_Init+0xa4>)
 80038ac:	f04f 32ff 	mov.w	r2, #4294967295
 80038b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038b2:	4b1a      	ldr	r3, [pc, #104]	; (800391c <MX_TIM2_Init+0xa4>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038b8:	4b18      	ldr	r3, [pc, #96]	; (800391c <MX_TIM2_Init+0xa4>)
 80038ba:	2280      	movs	r2, #128	; 0x80
 80038bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80038be:	2303      	movs	r3, #3
 80038c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80038c2:	2302      	movs	r3, #2
 80038c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80038c6:	2301      	movs	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80038ce:	230a      	movs	r3, #10
 80038d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80038d2:	2300      	movs	r3, #0
 80038d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80038d6:	2301      	movs	r3, #1
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80038da:	2300      	movs	r3, #0
 80038dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80038de:	230a      	movs	r3, #10
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80038e2:	f107 030c 	add.w	r3, r7, #12
 80038e6:	4619      	mov	r1, r3
 80038e8:	480c      	ldr	r0, [pc, #48]	; (800391c <MX_TIM2_Init+0xa4>)
 80038ea:	f009 ff87 	bl	800d7fc <HAL_TIM_Encoder_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80038f4:	f000 fa82 	bl	8003dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038f8:	2300      	movs	r3, #0
 80038fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003900:	463b      	mov	r3, r7
 8003902:	4619      	mov	r1, r3
 8003904:	4805      	ldr	r0, [pc, #20]	; (800391c <MX_TIM2_Init+0xa4>)
 8003906:	f00b f805 	bl	800e914 <HAL_TIMEx_MasterConfigSynchronization>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003910:	f000 fa74 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003914:	bf00      	nop
 8003916:	3730      	adds	r7, #48	; 0x30
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	20001960 	.word	0x20001960

08003920 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08a      	sub	sp, #40	; 0x28
 8003924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003926:	f107 031c 	add.w	r3, r7, #28
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003932:	463b      	mov	r3, r7
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	605a      	str	r2, [r3, #4]
 800393a:	609a      	str	r2, [r3, #8]
 800393c:	60da      	str	r2, [r3, #12]
 800393e:	611a      	str	r2, [r3, #16]
 8003940:	615a      	str	r2, [r3, #20]
 8003942:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003944:	4b21      	ldr	r3, [pc, #132]	; (80039cc <MX_TIM4_Init+0xac>)
 8003946:	4a22      	ldr	r2, [pc, #136]	; (80039d0 <MX_TIM4_Init+0xb0>)
 8003948:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10000-1;
 800394a:	4b20      	ldr	r3, [pc, #128]	; (80039cc <MX_TIM4_Init+0xac>)
 800394c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003950:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003952:	4b1e      	ldr	r3, [pc, #120]	; (80039cc <MX_TIM4_Init+0xac>)
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10;
 8003958:	4b1c      	ldr	r3, [pc, #112]	; (80039cc <MX_TIM4_Init+0xac>)
 800395a:	220a      	movs	r2, #10
 800395c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800395e:	4b1b      	ldr	r3, [pc, #108]	; (80039cc <MX_TIM4_Init+0xac>)
 8003960:	2200      	movs	r2, #0
 8003962:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003964:	4b19      	ldr	r3, [pc, #100]	; (80039cc <MX_TIM4_Init+0xac>)
 8003966:	2280      	movs	r2, #128	; 0x80
 8003968:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800396a:	4818      	ldr	r0, [pc, #96]	; (80039cc <MX_TIM4_Init+0xac>)
 800396c:	f009 fc6f 	bl	800d24e <HAL_TIM_PWM_Init>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8003976:	f000 fa41 	bl	8003dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800397a:	2300      	movs	r3, #0
 800397c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800397e:	2300      	movs	r3, #0
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003982:	f107 031c 	add.w	r3, r7, #28
 8003986:	4619      	mov	r1, r3
 8003988:	4810      	ldr	r0, [pc, #64]	; (80039cc <MX_TIM4_Init+0xac>)
 800398a:	f00a ffc3 	bl	800e914 <HAL_TIMEx_MasterConfigSynchronization>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8003994:	f000 fa32 	bl	8003dfc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003998:	2360      	movs	r3, #96	; 0x60
 800399a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039a0:	2300      	movs	r3, #0
 80039a2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039a4:	2300      	movs	r3, #0
 80039a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80039a8:	463b      	mov	r3, r7
 80039aa:	2204      	movs	r2, #4
 80039ac:	4619      	mov	r1, r3
 80039ae:	4807      	ldr	r0, [pc, #28]	; (80039cc <MX_TIM4_Init+0xac>)
 80039b0:	f00a f9c8 	bl	800dd44 <HAL_TIM_PWM_ConfigChannel>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80039ba:	f000 fa1f 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80039be:	4803      	ldr	r0, [pc, #12]	; (80039cc <MX_TIM4_Init+0xac>)
 80039c0:	f001 fa1e 	bl	8004e00 <HAL_TIM_MspPostInit>

}
 80039c4:	bf00      	nop
 80039c6:	3728      	adds	r7, #40	; 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	200019ac 	.word	0x200019ac
 80039d0:	40000800 	.word	0x40000800

080039d4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039da:	1d3b      	adds	r3, r7, #4
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
 80039e0:	605a      	str	r2, [r3, #4]
 80039e2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80039e4:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <MX_TIM7_Init+0x68>)
 80039e6:	4a16      	ldr	r2, [pc, #88]	; (8003a40 <MX_TIM7_Init+0x6c>)
 80039e8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 17000-1;
 80039ea:	4b14      	ldr	r3, [pc, #80]	; (8003a3c <MX_TIM7_Init+0x68>)
 80039ec:	f244 2267 	movw	r2, #16999	; 0x4267
 80039f0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039f2:	4b12      	ldr	r3, [pc, #72]	; (8003a3c <MX_TIM7_Init+0x68>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 500;
 80039f8:	4b10      	ldr	r3, [pc, #64]	; (8003a3c <MX_TIM7_Init+0x68>)
 80039fa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80039fe:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a00:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <MX_TIM7_Init+0x68>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003a06:	480d      	ldr	r0, [pc, #52]	; (8003a3c <MX_TIM7_Init+0x68>)
 8003a08:	f009 fb30 	bl	800d06c <HAL_TIM_Base_Init>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003a12:	f000 f9f3 	bl	8003dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4806      	ldr	r0, [pc, #24]	; (8003a3c <MX_TIM7_Init+0x68>)
 8003a24:	f00a ff76 	bl	800e914 <HAL_TIMEx_MasterConfigSynchronization>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8003a2e:	f000 f9e5 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200019f8 	.word	0x200019f8
 8003a40:	40001400 	.word	0x40001400

08003a44 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003a54:	4b19      	ldr	r3, [pc, #100]	; (8003abc <MX_TIM8_Init+0x78>)
 8003a56:	4a1a      	ldr	r2, [pc, #104]	; (8003ac0 <MX_TIM8_Init+0x7c>)
 8003a58:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8003a5a:	4b18      	ldr	r3, [pc, #96]	; (8003abc <MX_TIM8_Init+0x78>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a60:	4b16      	ldr	r3, [pc, #88]	; (8003abc <MX_TIM8_Init+0x78>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8003a66:	4b15      	ldr	r3, [pc, #84]	; (8003abc <MX_TIM8_Init+0x78>)
 8003a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a6c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <MX_TIM8_Init+0x78>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003a74:	4b11      	ldr	r3, [pc, #68]	; (8003abc <MX_TIM8_Init+0x78>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a7a:	4b10      	ldr	r3, [pc, #64]	; (8003abc <MX_TIM8_Init+0x78>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim8, TIM_OPMODE_SINGLE) != HAL_OK)
 8003a80:	2108      	movs	r1, #8
 8003a82:	480e      	ldr	r0, [pc, #56]	; (8003abc <MX_TIM8_Init+0x78>)
 8003a84:	f009 fe6a 	bl	800d75c <HAL_TIM_OnePulse_Init>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <MX_TIM8_Init+0x4e>
  {
    Error_Handler();
 8003a8e:	f000 f9b5 	bl	8003dfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a92:	2300      	movs	r3, #0
 8003a94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003a9e:	1d3b      	adds	r3, r7, #4
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4806      	ldr	r0, [pc, #24]	; (8003abc <MX_TIM8_Init+0x78>)
 8003aa4:	f00a ff36 	bl	800e914 <HAL_TIMEx_MasterConfigSynchronization>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8003aae:	f000 f9a5 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8003ab2:	bf00      	nop
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20001a44 	.word	0x20001a44
 8003ac0:	40013400 	.word	0x40013400

08003ac4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003ac8:	4b14      	ldr	r3, [pc, #80]	; (8003b1c <MX_TIM16_Init+0x58>)
 8003aca:	4a15      	ldr	r2, [pc, #84]	; (8003b20 <MX_TIM16_Init+0x5c>)
 8003acc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 17000-1;
 8003ace:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <MX_TIM16_Init+0x58>)
 8003ad0:	f244 2267 	movw	r2, #16999	; 0x4267
 8003ad4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ad6:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <MX_TIM16_Init+0x58>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 49;
 8003adc:	4b0f      	ldr	r3, [pc, #60]	; (8003b1c <MX_TIM16_Init+0x58>)
 8003ade:	2231      	movs	r2, #49	; 0x31
 8003ae0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <MX_TIM16_Init+0x58>)
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003ae8:	4b0c      	ldr	r3, [pc, #48]	; (8003b1c <MX_TIM16_Init+0x58>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003aee:	4b0b      	ldr	r3, [pc, #44]	; (8003b1c <MX_TIM16_Init+0x58>)
 8003af0:	2280      	movs	r2, #128	; 0x80
 8003af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003af4:	4809      	ldr	r0, [pc, #36]	; (8003b1c <MX_TIM16_Init+0x58>)
 8003af6:	f009 fab9 	bl	800d06c <HAL_TIM_Base_Init>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8003b00:	f000 f97c 	bl	8003dfc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8003b04:	2108      	movs	r1, #8
 8003b06:	4805      	ldr	r0, [pc, #20]	; (8003b1c <MX_TIM16_Init+0x58>)
 8003b08:	f009 fe28 	bl	800d75c <HAL_TIM_OnePulse_Init>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8003b12:	f000 f973 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20001a90 	.word	0x20001a90
 8003b20:	40014400 	.word	0x40014400

08003b24 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003b28:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <MX_TIM17_Init+0x58>)
 8003b2a:	4a15      	ldr	r2, [pc, #84]	; (8003b80 <MX_TIM17_Init+0x5c>)
 8003b2c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 17000-1;
 8003b2e:	4b13      	ldr	r3, [pc, #76]	; (8003b7c <MX_TIM17_Init+0x58>)
 8003b30:	f244 2267 	movw	r2, #16999	; 0x4267
 8003b34:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <MX_TIM17_Init+0x58>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 49;
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <MX_TIM17_Init+0x58>)
 8003b3e:	2231      	movs	r2, #49	; 0x31
 8003b40:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b42:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <MX_TIM17_Init+0x58>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <MX_TIM17_Init+0x58>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <MX_TIM17_Init+0x58>)
 8003b50:	2280      	movs	r2, #128	; 0x80
 8003b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003b54:	4809      	ldr	r0, [pc, #36]	; (8003b7c <MX_TIM17_Init+0x58>)
 8003b56:	f009 fa89 	bl	800d06c <HAL_TIM_Base_Init>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8003b60:	f000 f94c 	bl	8003dfc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim17, TIM_OPMODE_SINGLE) != HAL_OK)
 8003b64:	2108      	movs	r1, #8
 8003b66:	4805      	ldr	r0, [pc, #20]	; (8003b7c <MX_TIM17_Init+0x58>)
 8003b68:	f009 fdf8 	bl	800d75c <HAL_TIM_OnePulse_Init>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <MX_TIM17_Init+0x52>
  {
    Error_Handler();
 8003b72:	f000 f943 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20001adc 	.word	0x20001adc
 8003b80:	40014800 	.word	0x40014800

08003b84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b88:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003b8a:	4a23      	ldr	r2, [pc, #140]	; (8003c18 <MX_USART1_UART_Init+0x94>)
 8003b8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003b8e:	4b21      	ldr	r3, [pc, #132]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b96:	4b1f      	ldr	r3, [pc, #124]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003b98:	2200      	movs	r2, #0
 8003b9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003b9c:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ba2:	4b1c      	ldr	r3, [pc, #112]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003baa:	220c      	movs	r2, #12
 8003bac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bae:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bb4:	4b17      	ldr	r3, [pc, #92]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003bc0:	4b14      	ldr	r3, [pc, #80]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8003bcc:	4811      	ldr	r0, [pc, #68]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003bce:	f00b f81a 	bl	800ec06 <HAL_HalfDuplex_Init>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003bd8:	f000 f910 	bl	8003dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bdc:	2100      	movs	r1, #0
 8003bde:	480d      	ldr	r0, [pc, #52]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003be0:	f00b fd8e 	bl	800f700 <HAL_UARTEx_SetTxFifoThreshold>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003bea:	f000 f907 	bl	8003dfc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4808      	ldr	r0, [pc, #32]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003bf2:	f00b fdc3 	bl	800f77c <HAL_UARTEx_SetRxFifoThreshold>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003bfc:	f000 f8fe 	bl	8003dfc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003c00:	4804      	ldr	r0, [pc, #16]	; (8003c14 <MX_USART1_UART_Init+0x90>)
 8003c02:	f00b fd44 	bl	800f68e <HAL_UARTEx_DisableFifoMode>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003c0c:	f000 f8f6 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c10:	bf00      	nop
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	20001b28 	.word	0x20001b28
 8003c18:	40013800 	.word	0x40013800

08003c1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003c22:	4b1a      	ldr	r3, [pc, #104]	; (8003c8c <MX_DMA_Init+0x70>)
 8003c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c26:	4a19      	ldr	r2, [pc, #100]	; (8003c8c <MX_DMA_Init+0x70>)
 8003c28:	f043 0304 	orr.w	r3, r3, #4
 8003c2c:	6493      	str	r3, [r2, #72]	; 0x48
 8003c2e:	4b17      	ldr	r3, [pc, #92]	; (8003c8c <MX_DMA_Init+0x70>)
 8003c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c32:	f003 0304 	and.w	r3, r3, #4
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <MX_DMA_Init+0x70>)
 8003c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3e:	4a13      	ldr	r2, [pc, #76]	; (8003c8c <MX_DMA_Init+0x70>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6493      	str	r3, [r2, #72]	; 0x48
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <MX_DMA_Init+0x70>)
 8003c48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	603b      	str	r3, [r7, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003c52:	2200      	movs	r2, #0
 8003c54:	2100      	movs	r1, #0
 8003c56:	200b      	movs	r0, #11
 8003c58:	f004 fdbb 	bl	80087d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003c5c:	200b      	movs	r0, #11
 8003c5e:	f004 fdd2 	bl	8008806 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2105      	movs	r1, #5
 8003c66:	200c      	movs	r0, #12
 8003c68:	f004 fdb3 	bl	80087d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003c6c:	200c      	movs	r0, #12
 8003c6e:	f004 fdca 	bl	8008806 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003c72:	2200      	movs	r2, #0
 8003c74:	2105      	movs	r1, #5
 8003c76:	200d      	movs	r0, #13
 8003c78:	f004 fdab 	bl	80087d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003c7c:	200d      	movs	r0, #13
 8003c7e:	f004 fdc2 	bl	8008806 <HAL_NVIC_EnableIRQ>

}
 8003c82:	bf00      	nop
 8003c84:	3708      	adds	r7, #8
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40021000 	.word	0x40021000

08003c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c96:	f107 0314 	add.w	r3, r7, #20
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	605a      	str	r2, [r3, #4]
 8003ca0:	609a      	str	r2, [r3, #8]
 8003ca2:	60da      	str	r2, [r3, #12]
 8003ca4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003ca6:	4b52      	ldr	r3, [pc, #328]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003caa:	4a51      	ldr	r2, [pc, #324]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003cac:	f043 0304 	orr.w	r3, r3, #4
 8003cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cb2:	4b4f      	ldr	r3, [pc, #316]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	613b      	str	r3, [r7, #16]
 8003cbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cbe:	4b4c      	ldr	r3, [pc, #304]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	4a4b      	ldr	r2, [pc, #300]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003cc4:	f043 0320 	orr.w	r3, r3, #32
 8003cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cca:	4b49      	ldr	r3, [pc, #292]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	f003 0320 	and.w	r3, r3, #32
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd6:	4b46      	ldr	r3, [pc, #280]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cda:	4a45      	ldr	r2, [pc, #276]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003cdc:	f043 0301 	orr.w	r3, r3, #1
 8003ce0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ce2:	4b43      	ldr	r3, [pc, #268]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	f003 0301 	and.w	r3, r3, #1
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cee:	4b40      	ldr	r3, [pc, #256]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf2:	4a3f      	ldr	r2, [pc, #252]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003cf4:	f043 0302 	orr.w	r3, r3, #2
 8003cf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cfa:	4b3d      	ldr	r3, [pc, #244]	; (8003df0 <MX_GPIO_Init+0x160>)
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	607b      	str	r3, [r7, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_1_GPIO_Port, USR_1_Pin, GPIO_PIN_RESET);
 8003d06:	2200      	movs	r2, #0
 8003d08:	2102      	movs	r1, #2
 8003d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d0e:	f005 fe31 	bl	8009974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8003d12:	2200      	movs	r2, #0
 8003d14:	f645 4107 	movw	r1, #23559	; 0x5c07
 8003d18:	4836      	ldr	r0, [pc, #216]	; (8003df4 <MX_GPIO_Init+0x164>)
 8003d1a:	f005 fe2b 	bl	8009974 <HAL_GPIO_WritePin>
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : VERSION_BIT_1_Pin VERSION_BIT_2_Pin VERSION_BIT_3_Pin */
  GPIO_InitStruct.Pin = VERSION_BIT_1_Pin|VERSION_BIT_2_Pin|VERSION_BIT_3_Pin;
 8003d1e:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d24:	2300      	movs	r3, #0
 8003d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d2c:	f107 0314 	add.w	r3, r7, #20
 8003d30:	4619      	mov	r1, r3
 8003d32:	4831      	ldr	r0, [pc, #196]	; (8003df8 <MX_GPIO_Init+0x168>)
 8003d34:	f005 fc84 	bl	8009640 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_1_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d44:	2300      	movs	r3, #0
 8003d46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_1_GPIO_Port, &GPIO_InitStruct);
 8003d48:	f107 0314 	add.w	r3, r7, #20
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d52:	f005 fc75 	bl	8009640 <HAL_GPIO_Init>

  /*Configure GPIO pins : HANDLE_INP_1_Pin HANDLE_INP_2_Pin STAND_INP_Pin */
  GPIO_InitStruct.Pin = HANDLE_INP_1_Pin|HANDLE_INP_2_Pin|STAND_INP_Pin;
 8003d56:	2370      	movs	r3, #112	; 0x70
 8003d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d62:	f107 0314 	add.w	r3, r7, #20
 8003d66:	4619      	mov	r1, r3
 8003d68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d6c:	f005 fc68 	bl	8009640 <HAL_GPIO_Init>

  /*Configure GPIO pins : USR_2_Pin USR_3_Pin USR_4_Pin SPI2_SD_CS_Pin
                           SPI2_DC_Pin SPI2_RST_Pin SPI2_CS_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin|USR_3_Pin|USR_4_Pin|SPI2_SD_CS_Pin
 8003d70:	f645 4307 	movw	r3, #23559	; 0x5c07
 8003d74:	617b      	str	r3, [r7, #20]
                          |SPI2_DC_Pin|SPI2_RST_Pin|SPI2_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d76:	2301      	movs	r3, #1
 8003d78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d82:	f107 0314 	add.w	r3, r7, #20
 8003d86:	4619      	mov	r1, r3
 8003d88:	481a      	ldr	r0, [pc, #104]	; (8003df4 <MX_GPIO_Init+0x164>)
 8003d8a:	f005 fc59 	bl	8009640 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_2_Pin */
  GPIO_InitStruct.Pin = SW_2_Pin;
 8003d8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW_2_GPIO_Port, &GPIO_InitStruct);
 8003d9e:	f107 0314 	add.w	r3, r7, #20
 8003da2:	4619      	mov	r1, r3
 8003da4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003da8:	f005 fc4a 	bl	8009640 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_3_Pin;
 8003dac:	f44f 7390 	mov.w	r3, #288	; 0x120
 8003db0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003db2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003db6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dbc:	f107 0314 	add.w	r3, r7, #20
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	480c      	ldr	r0, [pc, #48]	; (8003df4 <MX_GPIO_Init+0x164>)
 8003dc4:	f005 fc3c 	bl	8009640 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003dc8:	2200      	movs	r2, #0
 8003dca:	2100      	movs	r1, #0
 8003dcc:	2017      	movs	r0, #23
 8003dce:	f004 fd00 	bl	80087d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003dd2:	2017      	movs	r0, #23
 8003dd4:	f004 fd17 	bl	8008806 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003dd8:	2200      	movs	r2, #0
 8003dda:	2100      	movs	r1, #0
 8003ddc:	2028      	movs	r0, #40	; 0x28
 8003dde:	f004 fcf8 	bl	80087d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003de2:	2028      	movs	r0, #40	; 0x28
 8003de4:	f004 fd0f 	bl	8008806 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003de8:	bf00      	nop
 8003dea:	3728      	adds	r7, #40	; 0x28
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	48000400 	.word	0x48000400
 8003df8:	48000800 	.word	0x48000800

08003dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e00:	b672      	cpsid	i
}
 8003e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e04:	e7fe      	b.n	8003e04 <Error_Handler+0x8>

08003e06 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b085      	sub	sp, #20
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	e008      	b.n	8003e40 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	2200      	movs	r2, #0
 8003e38:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	3301      	adds	r3, #1
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	ee07 3a90 	vmov	s15, r3
 8003e46:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	edd3 7a00 	vldr	s15, [r3]
 8003e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e58:	d4e9      	bmi.n	8003e2e <Moving_Average_Init+0x28>
	}
}
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	441a      	add	r2, r3
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003e8e:	6839      	ldr	r1, [r7, #0]
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	1ad2      	subs	r2, r2, r3
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4413      	add	r3, r2
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003eb4:	ee07 3a90 	vmov	s15, r3
 8003eb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	edd3 7a00 	vldr	s15, [r3]
 8003ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ec6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003eca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ed2:	d507      	bpl.n	8003ee4 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8003ee2:	e003      	b.n	8003eec <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	edd3 7a00 	vldr	s15, [r3]
 8003f00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003f04:	ee16 0a90 	vmov	r0, s13
 8003f08:	f7fc fb46 	bl	8000598 <__aeabi_f2d>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	ec43 2b17 	vmov	d7, r2, r3
}
 8003f14:	eeb0 0a47 	vmov.f32	s0, s14
 8003f18:	eef0 0a67 	vmov.f32	s1, s15
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	6879      	ldr	r1, [r7, #4]
 8003f34:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003f52:	f7fc fe09 	bl	8000b68 <__aeabi_dcmpgt>
 8003f56:	4603      	mov	r3, r0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d006      	beq.n	8003f6a <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8003f68:	e011      	b.n	8003f8e <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003f76:	f7fc fdd9 	bl	8000b2c <__aeabi_dcmplt>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d100      	bne.n	8003f82 <PID_Init+0x60>
}
 8003f80:	e005      	b.n	8003f8e <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
	...

08003f98 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08a      	sub	sp, #40	; 0x28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6278      	str	r0, [r7, #36]	; 0x24
 8003fa0:	6239      	str	r1, [r7, #32]
 8003fa2:	61fa      	str	r2, [r7, #28]
 8003fa4:	61bb      	str	r3, [r7, #24]
 8003fa6:	ed87 0b04 	vstr	d0, [r7, #16]
 8003faa:	ed87 1b02 	vstr	d1, [r7, #8]
 8003fae:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	69fa      	ldr	r2, [r7, #28]
 8003fb6:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	6a3a      	ldr	r2, [r7, #32]
 8003fbc:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8003fca:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8004020 <PID+0x88>
 8003fce:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8004028 <PID+0x90>
 8003fd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fd4:	f000 f991 	bl	80042fa <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fda:	2264      	movs	r2, #100	; 0x64
 8003fdc:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8003fde:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003fe2:	4619      	mov	r1, r3
 8003fe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003fe6:	f000 fad9 	bl	800459c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8003fea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fee:	4619      	mov	r1, r3
 8003ff0:	ed97 2b00 	vldr	d2, [r7]
 8003ff4:	ed97 1b02 	vldr	d1, [r7, #8]
 8003ff8:	ed97 0b04 	vldr	d0, [r7, #16]
 8003ffc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ffe:	f000 fa25 	bl	800444c <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8004002:	f001 fdc3 	bl	8005b8c <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	1ad2      	subs	r2, r2, r3
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	605a      	str	r2, [r3, #4]

}
 8004012:	bf00      	nop
 8004014:	3728      	adds	r7, #40	; 0x28
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
 800401a:	bf00      	nop
 800401c:	f3af 8000 	nop.w
 8004020:	00000000 	.word	0x00000000
 8004024:	406fe000 	.word	0x406fe000
	...

08004030 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8004030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004034:	b08c      	sub	sp, #48	; 0x30
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	785b      	ldrb	r3, [r3, #1]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <PID_Compute+0x16>
	{
		return _FALSE;
 8004042:	2300      	movs	r3, #0
 8004044:	e136      	b.n	80042b4 <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8004046:	f001 fda1 	bl	8005b8c <HAL_GetTick>
 800404a:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	6a3a      	ldr	r2, [r7, #32]
 800405c:	429a      	cmp	r2, r3
 800405e:	d204      	bcs.n	800406a <PID_Compute+0x3a>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8124 	beq.w	80042b2 <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800406e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004072:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800407a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800407e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004082:	f7fc f929 	bl	80002d8 <__aeabi_dsub>
 8004086:	4602      	mov	r2, r0
 8004088:	460b      	mov	r3, r1
 800408a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8004094:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8004098:	f7fc f91e 	bl	80002d8 <__aeabi_dsub>
 800409c:	4602      	mov	r2, r0
 800409e:	460b      	mov	r3, r1
 80040a0:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80040b0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80040b4:	f7fc fac8 	bl	8000648 <__aeabi_dmul>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4650      	mov	r0, sl
 80040be:	4659      	mov	r1, fp
 80040c0:	f7fc f90c 	bl	80002dc <__adddf3>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	6879      	ldr	r1, [r7, #4]
 80040ca:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80040da:	f7fc fd45 	bl	8000b68 <__aeabi_dcmpgt>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d006      	beq.n	80040f2 <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80040ea:	6879      	ldr	r1, [r7, #4]
 80040ec:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80040f0:	e010      	b.n	8004114 <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 80040fe:	f7fc fd15 	bl	8000b2c <__aeabi_dcmplt>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 800410e:	6879      	ldr	r1, [r7, #4]
 8004110:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d114      	bne.n	8004152 <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8004134:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004138:	f7fc fa86 	bl	8000648 <__aeabi_dmul>
 800413c:	4602      	mov	r2, r0
 800413e:	460b      	mov	r3, r1
 8004140:	4650      	mov	r0, sl
 8004142:	4659      	mov	r1, fp
 8004144:	f7fc f8c8 	bl	80002d8 <__aeabi_dsub>
 8004148:	4602      	mov	r2, r0
 800414a:	460b      	mov	r3, r1
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800415e:	f7fc fd03 	bl	8000b68 <__aeabi_dcmpgt>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800416e:	6879      	ldr	r1, [r7, #4]
 8004170:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8004174:	e010      	b.n	8004198 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004182:	f7fc fcd3 	bl	8000b2c <__aeabi_dcmplt>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d005      	beq.n	8004198 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800419e:	4690      	mov	r8, r2
 80041a0:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 80041a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041a8:	4640      	mov	r0, r8
 80041aa:	4649      	mov	r1, r9
 80041ac:	f7fc fa4c 	bl	8000648 <__aeabi_dmul>
 80041b0:	4602      	mov	r2, r0
 80041b2:	460b      	mov	r3, r1
 80041b4:	6879      	ldr	r1, [r7, #4]
 80041b6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	781b      	ldrb	r3, [r3, #0]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d017      	beq.n	80041f2 <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80041c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80041cc:	f7fc fa3c 	bl	8000648 <__aeabi_dmul>
 80041d0:	4602      	mov	r2, r0
 80041d2:	460b      	mov	r3, r1
 80041d4:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80041de:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80041e2:	f7fc fa31 	bl	8000648 <__aeabi_dmul>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	6879      	ldr	r1, [r7, #4]
 80041ec:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 80041f0:	e005      	b.n	80041fe <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 80041f2:	f04f 0200 	mov.w	r2, #0
 80041f6:	f04f 0300 	mov.w	r3, #0
 80041fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800420a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800420e:	f7fc fa1b 	bl	8000648 <__aeabi_dmul>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	4640      	mov	r0, r8
 8004218:	4649      	mov	r1, r9
 800421a:	f7fc f85d 	bl	80002d8 <__aeabi_dsub>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004226:	f7fc f859 	bl	80002dc <__adddf3>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004238:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800423c:	f7fc fc94 	bl	8000b68 <__aeabi_dcmpgt>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800424c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8004250:	e00e      	b.n	8004270 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004258:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800425c:	f7fc fc66 	bl	8000b2c <__aeabi_dcmplt>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d004      	beq.n	8004270 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800426c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004276:	4614      	mov	r4, r2
 8004278:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800427c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004280:	4620      	mov	r0, r4
 8004282:	4629      	mov	r1, r5
 8004284:	f7fc f9e0 	bl	8000648 <__aeabi_dmul>
 8004288:	4602      	mov	r2, r0
 800428a:	460b      	mov	r3, r1
 800428c:	6879      	ldr	r1, [r7, #4]
 800428e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800429a:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042a4:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042ac:	605a      	str	r2, [r3, #4]

		return _TRUE;
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 80042b2:	2300      	movs	r3, #0
	}

}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3730      	adds	r7, #48	; 0x30
 80042b8:	46bd      	mov	sp, r7
 80042ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080042be <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
 80042c6:	460b      	mov	r3, r1
 80042c8:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d006      	beq.n	80042ec <PID_SetMode+0x2e>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	785b      	ldrb	r3, [r3, #1]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d102      	bne.n	80042ec <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fe1b 	bl	8003f22 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	7bfa      	ldrb	r2, [r7, #15]
 80042f0:	705a      	strb	r2, [r3, #1]

}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b086      	sub	sp, #24
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6178      	str	r0, [r7, #20]
 8004302:	ed87 0b02 	vstr	d0, [r7, #8]
 8004306:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800430a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800430e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004312:	f7fc fc1f 	bl	8000b54 <__aeabi_dcmpge>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d158      	bne.n	80043ce <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 800431c:	6979      	ldr	r1, [r7, #20]
 800431e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004322:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 8004326:	6979      	ldr	r1, [r7, #20]
 8004328:	e9d7 2300 	ldrd	r2, r3, [r7]
 800432c:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d04b      	beq.n	80043d0 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004346:	f7fc fc0f 	bl	8000b68 <__aeabi_dcmpgt>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d007      	beq.n	8004360 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800435a:	e9c1 2300 	strd	r2, r3, [r1]
 800435e:	e012      	b.n	8004386 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004364:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 800436e:	f7fc fbdd 	bl	8000b2c <__aeabi_dcmplt>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d006      	beq.n	8004386 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8004382:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8004392:	f7fc fbe9 	bl	8000b68 <__aeabi_dcmpgt>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d006      	beq.n	80043aa <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80043a2:	6979      	ldr	r1, [r7, #20]
 80043a4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80043a8:	e012      	b.n	80043d0 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80043b6:	f7fc fbb9 	bl	8000b2c <__aeabi_dcmplt>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d007      	beq.n	80043d0 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80043c6:	6979      	ldr	r1, [r7, #20]
 80043c8:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 80043cc:	e000      	b.n	80043d0 <PID_SetOutputLimits+0xd6>
		return;
 80043ce:	bf00      	nop
		}
		else { }

	}

}
 80043d0:	3718      	adds	r7, #24
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}

080043d6 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	b086      	sub	sp, #24
 80043da:	af00      	add	r7, sp, #0
 80043dc:	6178      	str	r0, [r7, #20]
 80043de:	ed87 0b02 	vstr	d0, [r7, #8]
 80043e2:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80043e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80043ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80043ee:	f7fc fbb1 	bl	8000b54 <__aeabi_dcmpge>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 80043f8:	6979      	ldr	r1, [r7, #20]
 80043fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043fe:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8004402:	6979      	ldr	r1, [r7, #20]
 8004404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004408:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800440c:	e000      	b.n	8004410 <PID_SetILimits+0x3a>
		return;
 800440e:	bf00      	nop
}
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b088      	sub	sp, #32
 800441a:	af00      	add	r7, sp, #0
 800441c:	61f8      	str	r0, [r7, #28]
 800441e:	ed87 0b04 	vstr	d0, [r7, #16]
 8004422:	ed87 1b02 	vstr	d1, [r7, #8]
 8004426:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	789b      	ldrb	r3, [r3, #2]
 800442e:	4619      	mov	r1, r3
 8004430:	ed97 2b00 	vldr	d2, [r7]
 8004434:	ed97 1b02 	vldr	d1, [r7, #8]
 8004438:	ed97 0b04 	vldr	d0, [r7, #16]
 800443c:	69f8      	ldr	r0, [r7, #28]
 800443e:	f000 f805 	bl	800444c <PID_SetTunings2>
}
 8004442:	bf00      	nop
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
	...

0800444c <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af00      	add	r7, sp, #0
 8004452:	61f8      	str	r0, [r7, #28]
 8004454:	ed87 0b04 	vstr	d0, [r7, #16]
 8004458:	ed87 1b02 	vstr	d1, [r7, #8]
 800445c:	ed87 2b00 	vstr	d2, [r7]
 8004460:	460b      	mov	r3, r1
 8004462:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 8004464:	f04f 0200 	mov.w	r2, #0
 8004468:	f04f 0300 	mov.w	r3, #0
 800446c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8004470:	f7fc fb5c 	bl	8000b2c <__aeabi_dcmplt>
 8004474:	4603      	mov	r3, r0
 8004476:	2b00      	cmp	r3, #0
 8004478:	f040 8089 	bne.w	800458e <PID_SetTunings2+0x142>
 800447c:	f04f 0200 	mov.w	r2, #0
 8004480:	f04f 0300 	mov.w	r3, #0
 8004484:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004488:	f7fc fb50 	bl	8000b2c <__aeabi_dcmplt>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d17d      	bne.n	800458e <PID_SetTunings2+0x142>
 8004492:	f04f 0200 	mov.w	r2, #0
 8004496:	f04f 0300 	mov.w	r3, #0
 800449a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800449e:	f7fc fb45 	bl	8000b2c <__aeabi_dcmplt>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d172      	bne.n	800458e <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	7efa      	ldrb	r2, [r7, #27]
 80044ac:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80044ae:	7efb      	ldrb	r3, [r7, #27]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	bf0c      	ite	eq
 80044b4:	2301      	moveq	r3, #1
 80044b6:	2300      	movne	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80044c0:	69f9      	ldr	r1, [r7, #28]
 80044c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044c6:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80044ca:	69f9      	ldr	r1, [r7, #28]
 80044cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044d0:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80044d4:	69f9      	ldr	r1, [r7, #28]
 80044d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80044da:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fc f836 	bl	8000554 <__aeabi_ui2d>
 80044e8:	f04f 0200 	mov.w	r2, #0
 80044ec:	4b2a      	ldr	r3, [pc, #168]	; (8004598 <PID_SetTunings2+0x14c>)
 80044ee:	f7fc f9d5 	bl	800089c <__aeabi_ddiv>
 80044f2:	4602      	mov	r2, r0
 80044f4:	460b      	mov	r3, r1
 80044f6:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 80044fa:	69f9      	ldr	r1, [r7, #28]
 80044fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004500:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8004504:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004508:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800450c:	f7fc f89c 	bl	8000648 <__aeabi_dmul>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	69f9      	ldr	r1, [r7, #28]
 8004516:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 800451a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800451e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004522:	f7fc f9bb 	bl	800089c <__aeabi_ddiv>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	69f9      	ldr	r1, [r7, #28]
 800452c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	78db      	ldrb	r3, [r3, #3]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d12b      	bne.n	8004590 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	f7fb fec7 	bl	80002d8 <__aeabi_dsub>
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	69f9      	ldr	r1, [r7, #28]
 8004550:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800455a:	f04f 0000 	mov.w	r0, #0
 800455e:	f04f 0100 	mov.w	r1, #0
 8004562:	f7fb feb9 	bl	80002d8 <__aeabi_dsub>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	69f9      	ldr	r1, [r7, #28]
 800456c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8004576:	f04f 0000 	mov.w	r0, #0
 800457a:	f04f 0100 	mov.w	r1, #0
 800457e:	f7fb feab 	bl	80002d8 <__aeabi_dsub>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	69f9      	ldr	r1, [r7, #28]
 8004588:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800458c:	e000      	b.n	8004590 <PID_SetTunings2+0x144>
		return;
 800458e:	bf00      	nop

	}

}
 8004590:	3728      	adds	r7, #40	; 0x28
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	408f4000 	.word	0x408f4000

0800459c <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	785b      	ldrb	r3, [r3, #1]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d02e      	beq.n	800460e <PID_SetControllerDirection+0x72>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	78db      	ldrb	r3, [r3, #3]
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d029      	beq.n	800460e <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80045c0:	f04f 0000 	mov.w	r0, #0
 80045c4:	f04f 0100 	mov.w	r1, #0
 80045c8:	f7fb fe86 	bl	80002d8 <__aeabi_dsub>
 80045cc:	4602      	mov	r2, r0
 80045ce:	460b      	mov	r3, r1
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80045dc:	f04f 0000 	mov.w	r0, #0
 80045e0:	f04f 0100 	mov.w	r1, #0
 80045e4:	f7fb fe78 	bl	80002d8 <__aeabi_dsub>
 80045e8:	4602      	mov	r2, r0
 80045ea:	460b      	mov	r3, r1
 80045ec:	6879      	ldr	r1, [r7, #4]
 80045ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80045f8:	f04f 0000 	mov.w	r0, #0
 80045fc:	f04f 0100 	mov.w	r1, #0
 8004600:	f7fb fe6a 	bl	80002d8 <__aeabi_dsub>
 8004604:	4602      	mov	r2, r0
 8004606:	460b      	mov	r3, r1
 8004608:	6879      	ldr	r1, [r7, #4]
 800460a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	78fa      	ldrb	r2, [r7, #3]
 8004612:	70da      	strb	r2, [r3, #3]

}
 8004614:	bf00      	nop
 8004616:	3708      	adds	r7, #8
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 800461c:	b5b0      	push	{r4, r5, r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	dd01      	ble.n	8004632 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 800462e:	2301      	movs	r3, #1
 8004630:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	dd2e      	ble.n	800469c <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 800463e:	68b8      	ldr	r0, [r7, #8]
 8004640:	f7fb ff98 	bl	8000574 <__aeabi_i2d>
 8004644:	4604      	mov	r4, r0
 8004646:	460d      	mov	r5, r1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	4618      	mov	r0, r3
 800464e:	f7fb ff81 	bl	8000554 <__aeabi_ui2d>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4620      	mov	r0, r4
 8004658:	4629      	mov	r1, r5
 800465a:	f7fc f91f 	bl	800089c <__aeabi_ddiv>
 800465e:	4602      	mov	r2, r0
 8004660:	460b      	mov	r3, r1
 8004662:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800466c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004670:	f7fb ffea 	bl	8000648 <__aeabi_dmul>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8004684:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004688:	f7fc f908 	bl	800089c <__aeabi_ddiv>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8004696:	68ba      	ldr	r2, [r7, #8]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	609a      	str	r2, [r3, #8]

	}

}
 800469c:	bf00      	nop
 800469e:	3718      	adds	r7, #24
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bdb0      	pop	{r4, r5, r7, pc}

080046a4 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80046b2:	ec43 2b17 	vmov	d7, r2, r3
}
 80046b6:	eeb0 0a47 	vmov.f32	s0, s14
 80046ba:	eef0 0a67 	vmov.f32	s1, s15
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80046d6:	ec43 2b17 	vmov	d7, r2, r3
}
 80046da:	eeb0 0a47 	vmov.f32	s0, s14
 80046de:	eef0 0a67 	vmov.f32	s1, s15
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80046fa:	ec43 2b17 	vmov	d7, r2, r3
}
 80046fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004702:	eef0 0a67 	vmov.f32	s1, s15
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004716:	4b0f      	ldr	r3, [pc, #60]	; (8004754 <HAL_MspInit+0x44>)
 8004718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471a:	4a0e      	ldr	r2, [pc, #56]	; (8004754 <HAL_MspInit+0x44>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	6613      	str	r3, [r2, #96]	; 0x60
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <HAL_MspInit+0x44>)
 8004724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800472e:	4b09      	ldr	r3, [pc, #36]	; (8004754 <HAL_MspInit+0x44>)
 8004730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004732:	4a08      	ldr	r2, [pc, #32]	; (8004754 <HAL_MspInit+0x44>)
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004738:	6593      	str	r3, [r2, #88]	; 0x58
 800473a:	4b06      	ldr	r3, [pc, #24]	; (8004754 <HAL_MspInit+0x44>)
 800473c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004746:	f007 f84f 	bl	800b7e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800474a:	bf00      	nop
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
 8004752:	bf00      	nop
 8004754:	40021000 	.word	0x40021000

08004758 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b09c      	sub	sp, #112	; 0x70
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004760:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004770:	f107 0318 	add.w	r3, r7, #24
 8004774:	2244      	movs	r2, #68	; 0x44
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f012 f9d2 	bl	8016b22 <memset>
  if(hadc->Instance==ADC1)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004786:	d171      	bne.n	800486c <HAL_ADC_MspInit+0x114>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004788:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800478e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004792:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004794:	f107 0318 	add.w	r3, r7, #24
 8004798:	4618      	mov	r0, r3
 800479a:	f007 fd63 	bl	800c264 <HAL_RCCEx_PeriphCLKConfig>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80047a4:	f7ff fb2a 	bl	8003dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80047a8:	4b6d      	ldr	r3, [pc, #436]	; (8004960 <HAL_ADC_MspInit+0x208>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	3301      	adds	r3, #1
 80047ae:	4a6c      	ldr	r2, [pc, #432]	; (8004960 <HAL_ADC_MspInit+0x208>)
 80047b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80047b2:	4b6b      	ldr	r3, [pc, #428]	; (8004960 <HAL_ADC_MspInit+0x208>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d10b      	bne.n	80047d2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80047ba:	4b6a      	ldr	r3, [pc, #424]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80047bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047be:	4a69      	ldr	r2, [pc, #420]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80047c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047c6:	4b67      	ldr	r3, [pc, #412]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047ce:	617b      	str	r3, [r7, #20]
 80047d0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d2:	4b64      	ldr	r3, [pc, #400]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80047d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047d6:	4a63      	ldr	r2, [pc, #396]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80047de:	4b61      	ldr	r3, [pc, #388]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80047e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	613b      	str	r3, [r7, #16]
 80047e8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN3
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = CURRENT_Pin|THERMOCOUPLE_Pin;
 80047ea:	230c      	movs	r3, #12
 80047ec:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80047ee:	2303      	movs	r3, #3
 80047f0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80047fa:	4619      	mov	r1, r3
 80047fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004800:	f004 ff1e 	bl	8009640 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8004804:	4b58      	ldr	r3, [pc, #352]	; (8004968 <HAL_ADC_MspInit+0x210>)
 8004806:	4a59      	ldr	r2, [pc, #356]	; (800496c <HAL_ADC_MspInit+0x214>)
 8004808:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800480a:	4b57      	ldr	r3, [pc, #348]	; (8004968 <HAL_ADC_MspInit+0x210>)
 800480c:	2205      	movs	r2, #5
 800480e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004810:	4b55      	ldr	r3, [pc, #340]	; (8004968 <HAL_ADC_MspInit+0x210>)
 8004812:	2200      	movs	r2, #0
 8004814:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004816:	4b54      	ldr	r3, [pc, #336]	; (8004968 <HAL_ADC_MspInit+0x210>)
 8004818:	2200      	movs	r2, #0
 800481a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800481c:	4b52      	ldr	r3, [pc, #328]	; (8004968 <HAL_ADC_MspInit+0x210>)
 800481e:	2280      	movs	r2, #128	; 0x80
 8004820:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004822:	4b51      	ldr	r3, [pc, #324]	; (8004968 <HAL_ADC_MspInit+0x210>)
 8004824:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004828:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800482a:	4b4f      	ldr	r3, [pc, #316]	; (8004968 <HAL_ADC_MspInit+0x210>)
 800482c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004830:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004832:	4b4d      	ldr	r3, [pc, #308]	; (8004968 <HAL_ADC_MspInit+0x210>)
 8004834:	2220      	movs	r2, #32
 8004836:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004838:	4b4b      	ldr	r3, [pc, #300]	; (8004968 <HAL_ADC_MspInit+0x210>)
 800483a:	2200      	movs	r2, #0
 800483c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800483e:	484a      	ldr	r0, [pc, #296]	; (8004968 <HAL_ADC_MspInit+0x210>)
 8004840:	f004 fa02 	bl	8008c48 <HAL_DMA_Init>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800484a:	f7ff fad7 	bl	8003dfc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a45      	ldr	r2, [pc, #276]	; (8004968 <HAL_ADC_MspInit+0x210>)
 8004852:	655a      	str	r2, [r3, #84]	; 0x54
 8004854:	4a44      	ldr	r2, [pc, #272]	; (8004968 <HAL_ADC_MspInit+0x210>)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 800485a:	2200      	movs	r2, #0
 800485c:	210a      	movs	r1, #10
 800485e:	2012      	movs	r0, #18
 8004860:	f003 ffb7 	bl	80087d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004864:	2012      	movs	r0, #18
 8004866:	f003 ffce 	bl	8008806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800486a:	e074      	b.n	8004956 <HAL_ADC_MspInit+0x1fe>
  else if(hadc->Instance==ADC2)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a3f      	ldr	r2, [pc, #252]	; (8004970 <HAL_ADC_MspInit+0x218>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d16f      	bne.n	8004956 <HAL_ADC_MspInit+0x1fe>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800487c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004880:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004882:	f107 0318 	add.w	r3, r7, #24
 8004886:	4618      	mov	r0, r3
 8004888:	f007 fcec 	bl	800c264 <HAL_RCCEx_PeriphCLKConfig>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d001      	beq.n	8004896 <HAL_ADC_MspInit+0x13e>
      Error_Handler();
 8004892:	f7ff fab3 	bl	8003dfc <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004896:	4b32      	ldr	r3, [pc, #200]	; (8004960 <HAL_ADC_MspInit+0x208>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	3301      	adds	r3, #1
 800489c:	4a30      	ldr	r2, [pc, #192]	; (8004960 <HAL_ADC_MspInit+0x208>)
 800489e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80048a0:	4b2f      	ldr	r3, [pc, #188]	; (8004960 <HAL_ADC_MspInit+0x208>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d10b      	bne.n	80048c0 <HAL_ADC_MspInit+0x168>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80048a8:	4b2e      	ldr	r3, [pc, #184]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80048aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ac:	4a2d      	ldr	r2, [pc, #180]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80048ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80048b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048b4:	4b2b      	ldr	r3, [pc, #172]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80048b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80048c0:	4b28      	ldr	r3, [pc, #160]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80048c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048c4:	4a27      	ldr	r2, [pc, #156]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80048c6:	f043 0320 	orr.w	r3, r3, #32
 80048ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80048cc:	4b25      	ldr	r3, [pc, #148]	; (8004964 <HAL_ADC_MspInit+0x20c>)
 80048ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d0:	f003 0320 	and.w	r3, r3, #32
 80048d4:	60bb      	str	r3, [r7, #8]
 80048d6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VBUS_Pin;
 80048d8:	2302      	movs	r3, #2
 80048da:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048dc:	2303      	movs	r3, #3
 80048de:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e0:	2300      	movs	r3, #0
 80048e2:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(VBUS_GPIO_Port, &GPIO_InitStruct);
 80048e4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80048e8:	4619      	mov	r1, r3
 80048ea:	4822      	ldr	r0, [pc, #136]	; (8004974 <HAL_ADC_MspInit+0x21c>)
 80048ec:	f004 fea8 	bl	8009640 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 80048f0:	4b21      	ldr	r3, [pc, #132]	; (8004978 <HAL_ADC_MspInit+0x220>)
 80048f2:	4a22      	ldr	r2, [pc, #136]	; (800497c <HAL_ADC_MspInit+0x224>)
 80048f4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80048f6:	4b20      	ldr	r3, [pc, #128]	; (8004978 <HAL_ADC_MspInit+0x220>)
 80048f8:	2224      	movs	r2, #36	; 0x24
 80048fa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048fc:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <HAL_ADC_MspInit+0x220>)
 80048fe:	2200      	movs	r2, #0
 8004900:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004902:	4b1d      	ldr	r3, [pc, #116]	; (8004978 <HAL_ADC_MspInit+0x220>)
 8004904:	2200      	movs	r2, #0
 8004906:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <HAL_ADC_MspInit+0x220>)
 800490a:	2280      	movs	r2, #128	; 0x80
 800490c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800490e:	4b1a      	ldr	r3, [pc, #104]	; (8004978 <HAL_ADC_MspInit+0x220>)
 8004910:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004914:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004916:	4b18      	ldr	r3, [pc, #96]	; (8004978 <HAL_ADC_MspInit+0x220>)
 8004918:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800491c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_ADC_MspInit+0x220>)
 8004920:	2220      	movs	r2, #32
 8004922:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004924:	4b14      	ldr	r3, [pc, #80]	; (8004978 <HAL_ADC_MspInit+0x220>)
 8004926:	2200      	movs	r2, #0
 8004928:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800492a:	4813      	ldr	r0, [pc, #76]	; (8004978 <HAL_ADC_MspInit+0x220>)
 800492c:	f004 f98c 	bl	8008c48 <HAL_DMA_Init>
 8004930:	4603      	mov	r3, r0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d001      	beq.n	800493a <HAL_ADC_MspInit+0x1e2>
      Error_Handler();
 8004936:	f7ff fa61 	bl	8003dfc <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a0e      	ldr	r2, [pc, #56]	; (8004978 <HAL_ADC_MspInit+0x220>)
 800493e:	655a      	str	r2, [r3, #84]	; 0x54
 8004940:	4a0d      	ldr	r2, [pc, #52]	; (8004978 <HAL_ADC_MspInit+0x220>)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 10, 0);
 8004946:	2200      	movs	r2, #0
 8004948:	210a      	movs	r1, #10
 800494a:	2012      	movs	r0, #18
 800494c:	f003 ff41 	bl	80087d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004950:	2012      	movs	r0, #18
 8004952:	f003 ff58 	bl	8008806 <HAL_NVIC_EnableIRQ>
}
 8004956:	bf00      	nop
 8004958:	3770      	adds	r7, #112	; 0x70
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	20001c58 	.word	0x20001c58
 8004964:	40021000 	.word	0x40021000
 8004968:	20001718 	.word	0x20001718
 800496c:	40020030 	.word	0x40020030
 8004970:	50000100 	.word	0x50000100
 8004974:	48001400 	.word	0x48001400
 8004978:	20001778 	.word	0x20001778
 800497c:	4002001c 	.word	0x4002001c

08004980 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <HAL_CRC_MspInit+0x38>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d10b      	bne.n	80049aa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004992:	4b0a      	ldr	r3, [pc, #40]	; (80049bc <HAL_CRC_MspInit+0x3c>)
 8004994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004996:	4a09      	ldr	r2, [pc, #36]	; (80049bc <HAL_CRC_MspInit+0x3c>)
 8004998:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800499c:	6493      	str	r3, [r2, #72]	; 0x48
 800499e:	4b07      	ldr	r3, [pc, #28]	; (80049bc <HAL_CRC_MspInit+0x3c>)
 80049a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40023000 	.word	0x40023000
 80049bc:	40021000 	.word	0x40021000

080049c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b09c      	sub	sp, #112	; 0x70
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80049cc:	2200      	movs	r2, #0
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	605a      	str	r2, [r3, #4]
 80049d2:	609a      	str	r2, [r3, #8]
 80049d4:	60da      	str	r2, [r3, #12]
 80049d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049d8:	f107 0318 	add.w	r3, r7, #24
 80049dc:	2244      	movs	r2, #68	; 0x44
 80049de:	2100      	movs	r1, #0
 80049e0:	4618      	mov	r0, r3
 80049e2:	f012 f89e 	bl	8016b22 <memset>
  if(hi2c->Instance==I2C1)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a2e      	ldr	r2, [pc, #184]	; (8004aa4 <HAL_I2C_MspInit+0xe4>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d154      	bne.n	8004a9a <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80049f0:	2340      	movs	r3, #64	; 0x40
 80049f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80049f4:	2300      	movs	r3, #0
 80049f6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049f8:	f107 0318 	add.w	r3, r7, #24
 80049fc:	4618      	mov	r0, r3
 80049fe:	f007 fc31 	bl	800c264 <HAL_RCCEx_PeriphCLKConfig>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004a08:	f7ff f9f8 	bl	8003dfc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a0c:	4b26      	ldr	r3, [pc, #152]	; (8004aa8 <HAL_I2C_MspInit+0xe8>)
 8004a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a10:	4a25      	ldr	r2, [pc, #148]	; (8004aa8 <HAL_I2C_MspInit+0xe8>)
 8004a12:	f043 0301 	orr.w	r3, r3, #1
 8004a16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a18:	4b23      	ldr	r3, [pc, #140]	; (8004aa8 <HAL_I2C_MspInit+0xe8>)
 8004a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	617b      	str	r3, [r7, #20]
 8004a22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a24:	4b20      	ldr	r3, [pc, #128]	; (8004aa8 <HAL_I2C_MspInit+0xe8>)
 8004a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a28:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <HAL_I2C_MspInit+0xe8>)
 8004a2a:	f043 0302 	orr.w	r3, r3, #2
 8004a2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a30:	4b1d      	ldr	r3, [pc, #116]	; (8004aa8 <HAL_I2C_MspInit+0xe8>)
 8004a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a40:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a42:	2312      	movs	r3, #18
 8004a44:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a46:	2300      	movs	r3, #0
 8004a48:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a4e:	2304      	movs	r3, #4
 8004a50:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a52:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a56:	4619      	mov	r1, r3
 8004a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a5c:	f004 fdf0 	bl	8009640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a64:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a66:	2312      	movs	r3, #18
 8004a68:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a72:	2304      	movs	r3, #4
 8004a74:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a76:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	480b      	ldr	r0, [pc, #44]	; (8004aac <HAL_I2C_MspInit+0xec>)
 8004a7e:	f004 fddf 	bl	8009640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a82:	4b09      	ldr	r3, [pc, #36]	; (8004aa8 <HAL_I2C_MspInit+0xe8>)
 8004a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a86:	4a08      	ldr	r2, [pc, #32]	; (8004aa8 <HAL_I2C_MspInit+0xe8>)
 8004a88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a8c:	6593      	str	r3, [r2, #88]	; 0x58
 8004a8e:	4b06      	ldr	r3, [pc, #24]	; (8004aa8 <HAL_I2C_MspInit+0xe8>)
 8004a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004a9a:	bf00      	nop
 8004a9c:	3770      	adds	r7, #112	; 0x70
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40005400 	.word	0x40005400
 8004aa8:	40021000 	.word	0x40021000
 8004aac:	48000400 	.word	0x48000400

08004ab0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08a      	sub	sp, #40	; 0x28
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab8:	f107 0314 	add.w	r3, r7, #20
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a2c      	ldr	r2, [pc, #176]	; (8004b80 <HAL_SPI_MspInit+0xd0>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d151      	bne.n	8004b76 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004ad2:	4b2c      	ldr	r3, [pc, #176]	; (8004b84 <HAL_SPI_MspInit+0xd4>)
 8004ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ad6:	4a2b      	ldr	r2, [pc, #172]	; (8004b84 <HAL_SPI_MspInit+0xd4>)
 8004ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004adc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ade:	4b29      	ldr	r3, [pc, #164]	; (8004b84 <HAL_SPI_MspInit+0xd4>)
 8004ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ae6:	613b      	str	r3, [r7, #16]
 8004ae8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aea:	4b26      	ldr	r3, [pc, #152]	; (8004b84 <HAL_SPI_MspInit+0xd4>)
 8004aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aee:	4a25      	ldr	r2, [pc, #148]	; (8004b84 <HAL_SPI_MspInit+0xd4>)
 8004af0:	f043 0302 	orr.w	r3, r3, #2
 8004af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004af6:	4b23      	ldr	r3, [pc, #140]	; (8004b84 <HAL_SPI_MspInit+0xd4>)
 8004af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004b02:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004b06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b08:	2302      	movs	r3, #2
 8004b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b10:	2300      	movs	r3, #0
 8004b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004b14:	2305      	movs	r3, #5
 8004b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b18:	f107 0314 	add.w	r3, r7, #20
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	481a      	ldr	r0, [pc, #104]	; (8004b88 <HAL_SPI_MspInit+0xd8>)
 8004b20:	f004 fd8e 	bl	8009640 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel1;
 8004b24:	4b19      	ldr	r3, [pc, #100]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b26:	4a1a      	ldr	r2, [pc, #104]	; (8004b90 <HAL_SPI_MspInit+0xe0>)
 8004b28:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8004b2a:	4b18      	ldr	r3, [pc, #96]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b2c:	220d      	movs	r2, #13
 8004b2e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b30:	4b16      	ldr	r3, [pc, #88]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b32:	2210      	movs	r2, #16
 8004b34:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b3c:	4b13      	ldr	r3, [pc, #76]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b3e:	2280      	movs	r2, #128	; 0x80
 8004b40:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b42:	4b12      	ldr	r3, [pc, #72]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b48:	4b10      	ldr	r3, [pc, #64]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8004b4e:	4b0f      	ldr	r3, [pc, #60]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b50:	2200      	movs	r2, #0
 8004b52:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004b54:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004b5a:	480c      	ldr	r0, [pc, #48]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b5c:	f004 f874 	bl	8008c48 <HAL_DMA_Init>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 8004b66:	f7ff f949 	bl	8003dfc <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a07      	ldr	r2, [pc, #28]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b6e:	655a      	str	r2, [r3, #84]	; 0x54
 8004b70:	4a06      	ldr	r2, [pc, #24]	; (8004b8c <HAL_SPI_MspInit+0xdc>)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004b76:	bf00      	nop
 8004b78:	3728      	adds	r7, #40	; 0x28
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40003800 	.word	0x40003800
 8004b84:	40021000 	.word	0x40021000
 8004b88:	48000400 	.word	0x48000400
 8004b8c:	200018b4 	.word	0x200018b4
 8004b90:	40020008 	.word	0x40020008

08004b94 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a22      	ldr	r2, [pc, #136]	; (8004c2c <HAL_TIM_PWM_MspInit+0x98>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d12c      	bne.n	8004c00 <HAL_TIM_PWM_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004ba6:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <HAL_TIM_PWM_MspInit+0x9c>)
 8004ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004baa:	4a21      	ldr	r2, [pc, #132]	; (8004c30 <HAL_TIM_PWM_MspInit+0x9c>)
 8004bac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bb0:	6613      	str	r3, [r2, #96]	; 0x60
 8004bb2:	4b1f      	ldr	r3, [pc, #124]	; (8004c30 <HAL_TIM_PWM_MspInit+0x9c>)
 8004bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bb6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	2100      	movs	r1, #0
 8004bc2:	2018      	movs	r0, #24
 8004bc4:	f003 fe05 	bl	80087d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8004bc8:	2018      	movs	r0, #24
 8004bca:	f003 fe1c 	bl	8008806 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2100      	movs	r1, #0
 8004bd2:	2019      	movs	r0, #25
 8004bd4:	f003 fdfd 	bl	80087d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004bd8:	2019      	movs	r0, #25
 8004bda:	f003 fe14 	bl	8008806 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004bde:	2200      	movs	r2, #0
 8004be0:	2100      	movs	r1, #0
 8004be2:	201a      	movs	r0, #26
 8004be4:	f003 fdf5 	bl	80087d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004be8:	201a      	movs	r0, #26
 8004bea:	f003 fe0c 	bl	8008806 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004bee:	2200      	movs	r2, #0
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	201b      	movs	r0, #27
 8004bf4:	f003 fded 	bl	80087d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8004bf8:	201b      	movs	r0, #27
 8004bfa:	f003 fe04 	bl	8008806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004bfe:	e010      	b.n	8004c22 <HAL_TIM_PWM_MspInit+0x8e>
  else if(htim_pwm->Instance==TIM4)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a0b      	ldr	r2, [pc, #44]	; (8004c34 <HAL_TIM_PWM_MspInit+0xa0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d10b      	bne.n	8004c22 <HAL_TIM_PWM_MspInit+0x8e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c0a:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_TIM_PWM_MspInit+0x9c>)
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	4a08      	ldr	r2, [pc, #32]	; (8004c30 <HAL_TIM_PWM_MspInit+0x9c>)
 8004c10:	f043 0304 	orr.w	r3, r3, #4
 8004c14:	6593      	str	r3, [r2, #88]	; 0x58
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <HAL_TIM_PWM_MspInit+0x9c>)
 8004c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1a:	f003 0304 	and.w	r3, r3, #4
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40021000 	.word	0x40021000
 8004c34:	40000800 	.word	0x40000800

08004c38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b08a      	sub	sp, #40	; 0x28
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c40:	f107 0314 	add.w	r3, r7, #20
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
 8004c48:	605a      	str	r2, [r3, #4]
 8004c4a:	609a      	str	r2, [r3, #8]
 8004c4c:	60da      	str	r2, [r3, #12]
 8004c4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c58:	d14c      	bne.n	8004cf4 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c5a:	4b28      	ldr	r3, [pc, #160]	; (8004cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8004c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c5e:	4a27      	ldr	r2, [pc, #156]	; (8004cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8004c60:	f043 0301 	orr.w	r3, r3, #1
 8004c64:	6593      	str	r3, [r2, #88]	; 0x58
 8004c66:	4b25      	ldr	r3, [pc, #148]	; (8004cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8004c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	613b      	str	r3, [r7, #16]
 8004c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c72:	4b22      	ldr	r3, [pc, #136]	; (8004cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8004c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c76:	4a21      	ldr	r2, [pc, #132]	; (8004cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c7e:	4b1f      	ldr	r3, [pc, #124]	; (8004cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]
 8004c88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c8a:	4b1c      	ldr	r3, [pc, #112]	; (8004cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	4a1b      	ldr	r2, [pc, #108]	; (8004cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8004c90:	f043 0302 	orr.w	r3, r3, #2
 8004c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c96:	4b19      	ldr	r3, [pc, #100]	; (8004cfc <HAL_TIM_Encoder_MspInit+0xc4>)
 8004c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_A_Pin;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ca6:	2302      	movs	r3, #2
 8004ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004caa:	2300      	movs	r3, #0
 8004cac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 8004cb6:	f107 0314 	add.w	r3, r7, #20
 8004cba:	4619      	mov	r1, r3
 8004cbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004cc0:	f004 fcbe 	bl	8009640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_B_Pin;
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cc8:	2302      	movs	r3, #2
 8004cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	4619      	mov	r1, r3
 8004cde:	4808      	ldr	r0, [pc, #32]	; (8004d00 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004ce0:	f004 fcae 	bl	8009640 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	201c      	movs	r0, #28
 8004cea:	f003 fd72 	bl	80087d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004cee:	201c      	movs	r0, #28
 8004cf0:	f003 fd89 	bl	8008806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004cf4:	bf00      	nop
 8004cf6:	3728      	adds	r7, #40	; 0x28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	48000400 	.word	0x48000400

08004d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a27      	ldr	r2, [pc, #156]	; (8004db0 <HAL_TIM_Base_MspInit+0xac>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d114      	bne.n	8004d40 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004d16:	4b27      	ldr	r3, [pc, #156]	; (8004db4 <HAL_TIM_Base_MspInit+0xb0>)
 8004d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1a:	4a26      	ldr	r2, [pc, #152]	; (8004db4 <HAL_TIM_Base_MspInit+0xb0>)
 8004d1c:	f043 0320 	orr.w	r3, r3, #32
 8004d20:	6593      	str	r3, [r2, #88]	; 0x58
 8004d22:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <HAL_TIM_Base_MspInit+0xb0>)
 8004d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d26:	f003 0320 	and.w	r3, r3, #32
 8004d2a:	617b      	str	r3, [r7, #20]
 8004d2c:	697b      	ldr	r3, [r7, #20]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2100      	movs	r1, #0
 8004d32:	2037      	movs	r0, #55	; 0x37
 8004d34:	f003 fd4d 	bl	80087d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004d38:	2037      	movs	r0, #55	; 0x37
 8004d3a:	f003 fd64 	bl	8008806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8004d3e:	e032      	b.n	8004da6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM16)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1c      	ldr	r2, [pc, #112]	; (8004db8 <HAL_TIM_Base_MspInit+0xb4>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d114      	bne.n	8004d74 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004d4a:	4b1a      	ldr	r3, [pc, #104]	; (8004db4 <HAL_TIM_Base_MspInit+0xb0>)
 8004d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d4e:	4a19      	ldr	r2, [pc, #100]	; (8004db4 <HAL_TIM_Base_MspInit+0xb0>)
 8004d50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d54:	6613      	str	r3, [r2, #96]	; 0x60
 8004d56:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <HAL_TIM_Base_MspInit+0xb0>)
 8004d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5e:	613b      	str	r3, [r7, #16]
 8004d60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004d62:	2200      	movs	r2, #0
 8004d64:	2100      	movs	r1, #0
 8004d66:	2019      	movs	r0, #25
 8004d68:	f003 fd33 	bl	80087d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004d6c:	2019      	movs	r0, #25
 8004d6e:	f003 fd4a 	bl	8008806 <HAL_NVIC_EnableIRQ>
}
 8004d72:	e018      	b.n	8004da6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM17)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a10      	ldr	r2, [pc, #64]	; (8004dbc <HAL_TIM_Base_MspInit+0xb8>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d113      	bne.n	8004da6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8004d7e:	4b0d      	ldr	r3, [pc, #52]	; (8004db4 <HAL_TIM_Base_MspInit+0xb0>)
 8004d80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d82:	4a0c      	ldr	r2, [pc, #48]	; (8004db4 <HAL_TIM_Base_MspInit+0xb0>)
 8004d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d88:	6613      	str	r3, [r2, #96]	; 0x60
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <HAL_TIM_Base_MspInit+0xb0>)
 8004d8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 8004d96:	2200      	movs	r2, #0
 8004d98:	2100      	movs	r1, #0
 8004d9a:	201a      	movs	r0, #26
 8004d9c:	f003 fd19 	bl	80087d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8004da0:	201a      	movs	r0, #26
 8004da2:	f003 fd30 	bl	8008806 <HAL_NVIC_EnableIRQ>
}
 8004da6:	bf00      	nop
 8004da8:	3718      	adds	r7, #24
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40001400 	.word	0x40001400
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800

08004dc0 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM8)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <HAL_TIM_OnePulse_MspInit+0x38>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d10b      	bne.n	8004dea <HAL_TIM_OnePulse_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004dd2:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd6:	4a09      	ldr	r2, [pc, #36]	; (8004dfc <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004dd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8004dde:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <HAL_TIM_OnePulse_MspInit+0x3c>)
 8004de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004de6:	60fb      	str	r3, [r7, #12]
 8004de8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	40013400 	.word	0x40013400
 8004dfc:	40021000 	.word	0x40021000

08004e00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	; 0x28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e08:	f107 0314 	add.w	r3, r7, #20
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	605a      	str	r2, [r3, #4]
 8004e12:	609a      	str	r2, [r3, #8]
 8004e14:	60da      	str	r2, [r3, #12]
 8004e16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a22      	ldr	r2, [pc, #136]	; (8004ea8 <HAL_TIM_MspPostInit+0xa8>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d11c      	bne.n	8004e5c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e22:	4b22      	ldr	r3, [pc, #136]	; (8004eac <HAL_TIM_MspPostInit+0xac>)
 8004e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e26:	4a21      	ldr	r2, [pc, #132]	; (8004eac <HAL_TIM_MspPostInit+0xac>)
 8004e28:	f043 0320 	orr.w	r3, r3, #32
 8004e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e2e:	4b1f      	ldr	r3, [pc, #124]	; (8004eac <HAL_TIM_MspPostInit+0xac>)
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PF0-OSC_IN     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = HEATER_Pin;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e3e:	2302      	movs	r3, #2
 8004e40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e46:	2300      	movs	r3, #0
 8004e48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004e4a:	2306      	movs	r3, #6
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8004e4e:	f107 0314 	add.w	r3, r7, #20
 8004e52:	4619      	mov	r1, r3
 8004e54:	4816      	ldr	r0, [pc, #88]	; (8004eb0 <HAL_TIM_MspPostInit+0xb0>)
 8004e56:	f004 fbf3 	bl	8009640 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004e5a:	e020      	b.n	8004e9e <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM4)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a14      	ldr	r2, [pc, #80]	; (8004eb4 <HAL_TIM_MspPostInit+0xb4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d11b      	bne.n	8004e9e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e66:	4b11      	ldr	r3, [pc, #68]	; (8004eac <HAL_TIM_MspPostInit+0xac>)
 8004e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6a:	4a10      	ldr	r2, [pc, #64]	; (8004eac <HAL_TIM_MspPostInit+0xac>)
 8004e6c:	f043 0302 	orr.w	r3, r3, #2
 8004e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e72:	4b0e      	ldr	r3, [pc, #56]	; (8004eac <HAL_TIM_MspPostInit+0xac>)
 8004e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e76:	f003 0302 	and.w	r3, r3, #2
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8004e7e:	2380      	movs	r3, #128	; 0x80
 8004e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e82:	2302      	movs	r3, #2
 8004e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e86:	2300      	movs	r3, #0
 8004e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004e8e:	2302      	movs	r3, #2
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8004e92:	f107 0314 	add.w	r3, r7, #20
 8004e96:	4619      	mov	r1, r3
 8004e98:	4807      	ldr	r0, [pc, #28]	; (8004eb8 <HAL_TIM_MspPostInit+0xb8>)
 8004e9a:	f004 fbd1 	bl	8009640 <HAL_GPIO_Init>
}
 8004e9e:	bf00      	nop
 8004ea0:	3728      	adds	r7, #40	; 0x28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	48001400 	.word	0x48001400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	48000400 	.word	0x48000400

08004ebc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b09a      	sub	sp, #104	; 0x68
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ec4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004ec8:	2200      	movs	r2, #0
 8004eca:	601a      	str	r2, [r3, #0]
 8004ecc:	605a      	str	r2, [r3, #4]
 8004ece:	609a      	str	r2, [r3, #8]
 8004ed0:	60da      	str	r2, [r3, #12]
 8004ed2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ed4:	f107 0310 	add.w	r3, r7, #16
 8004ed8:	2244      	movs	r2, #68	; 0x44
 8004eda:	2100      	movs	r1, #0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f011 fe20 	bl	8016b22 <memset>
  if(huart->Instance==USART1)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a1f      	ldr	r2, [pc, #124]	; (8004f64 <HAL_UART_MspInit+0xa8>)
 8004ee8:	4293      	cmp	r3, r2
 8004eea:	d137      	bne.n	8004f5c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004eec:	2301      	movs	r3, #1
 8004eee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ef4:	f107 0310 	add.w	r3, r7, #16
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f007 f9b3 	bl	800c264 <HAL_RCCEx_PeriphCLKConfig>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d001      	beq.n	8004f08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004f04:	f7fe ff7a 	bl	8003dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f08:	4b17      	ldr	r3, [pc, #92]	; (8004f68 <HAL_UART_MspInit+0xac>)
 8004f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f0c:	4a16      	ldr	r2, [pc, #88]	; (8004f68 <HAL_UART_MspInit+0xac>)
 8004f0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f12:	6613      	str	r3, [r2, #96]	; 0x60
 8004f14:	4b14      	ldr	r3, [pc, #80]	; (8004f68 <HAL_UART_MspInit+0xac>)
 8004f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f20:	4b11      	ldr	r3, [pc, #68]	; (8004f68 <HAL_UART_MspInit+0xac>)
 8004f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f24:	4a10      	ldr	r2, [pc, #64]	; (8004f68 <HAL_UART_MspInit+0xac>)
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f2c:	4b0e      	ldr	r3, [pc, #56]	; (8004f68 <HAL_UART_MspInit+0xac>)
 8004f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	60bb      	str	r3, [r7, #8]
 8004f36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f3c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f3e:	2312      	movs	r3, #18
 8004f40:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f42:	2300      	movs	r3, #0
 8004f44:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f46:	2300      	movs	r3, #0
 8004f48:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f4a:	2307      	movs	r3, #7
 8004f4c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004f52:	4619      	mov	r1, r3
 8004f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f58:	f004 fb72 	bl	8009640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004f5c:	bf00      	nop
 8004f5e:	3768      	adds	r7, #104	; 0x68
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	40013800 	.word	0x40013800
 8004f68:	40021000 	.word	0x40021000

08004f6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004f70:	e7fe      	b.n	8004f70 <NMI_Handler+0x4>

08004f72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f72:	b480      	push	{r7}
 8004f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f76:	e7fe      	b.n	8004f76 <HardFault_Handler+0x4>

08004f78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f7c:	e7fe      	b.n	8004f7c <MemManage_Handler+0x4>

08004f7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f82:	e7fe      	b.n	8004f82 <BusFault_Handler+0x4>

08004f84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f88:	e7fe      	b.n	8004f88 <UsageFault_Handler+0x4>

08004f8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004f8a:	b480      	push	{r7}
 8004f8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f9c:	bf00      	nop
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004faa:	bf00      	nop
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004fb8:	f000 fdd6 	bl	8005b68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004fbc:	bf00      	nop
 8004fbe:	bd80      	pop	{r7, pc}

08004fc0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8004fc4:	4802      	ldr	r0, [pc, #8]	; (8004fd0 <DMA1_Channel1_IRQHandler+0x10>)
 8004fc6:	f003 ff62 	bl	8008e8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004fca:	bf00      	nop
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	200018b4 	.word	0x200018b4

08004fd4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004fd8:	4802      	ldr	r0, [pc, #8]	; (8004fe4 <DMA1_Channel2_IRQHandler+0x10>)
 8004fda:	f003 ff58 	bl	8008e8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004fde:	bf00      	nop
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20001778 	.word	0x20001778

08004fe8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004fec:	4802      	ldr	r0, [pc, #8]	; (8004ff8 <DMA1_Channel3_IRQHandler+0x10>)
 8004fee:	f003 ff4e 	bl	8008e8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004ff2:	bf00      	nop
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20001718 	.word	0x20001718

08004ffc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005000:	4803      	ldr	r0, [pc, #12]	; (8005010 <ADC1_2_IRQHandler+0x14>)
 8005002:	f001 fa8f 	bl	8006524 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005006:	4803      	ldr	r0, [pc, #12]	; (8005014 <ADC1_2_IRQHandler+0x18>)
 8005008:	f001 fa8c 	bl	8006524 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800500c:	bf00      	nop
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20001640 	.word	0x20001640
 8005014:	200016ac 	.word	0x200016ac

08005018 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800501c:	4802      	ldr	r0, [pc, #8]	; (8005028 <USB_LP_IRQHandler+0x10>)
 800501e:	f004 fefb 	bl	8009e18 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	200029c8 	.word	0x200029c8

0800502c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_1_Pin);
 8005030:	2020      	movs	r0, #32
 8005032:	f004 fcb7 	bl	80099a4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_3_Pin);
 8005036:	f44f 7080 	mov.w	r0, #256	; 0x100
 800503a:	f004 fcb3 	bl	80099a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800503e:	bf00      	nop
 8005040:	bd80      	pop	{r7, pc}
	...

08005044 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005048:	4802      	ldr	r0, [pc, #8]	; (8005054 <TIM1_BRK_TIM15_IRQHandler+0x10>)
 800504a:	f008 fd2b 	bl	800daa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800504e:	bf00      	nop
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	20001914 	.word	0x20001914

08005058 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800505c:	4803      	ldr	r0, [pc, #12]	; (800506c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800505e:	f008 fd21 	bl	800daa4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8005062:	4803      	ldr	r0, [pc, #12]	; (8005070 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8005064:	f008 fd1e 	bl	800daa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005068:	bf00      	nop
 800506a:	bd80      	pop	{r7, pc}
 800506c:	20001914 	.word	0x20001914
 8005070:	20001a90 	.word	0x20001a90

08005074 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005078:	4803      	ldr	r0, [pc, #12]	; (8005088 <TIM1_TRG_COM_TIM17_IRQHandler+0x14>)
 800507a:	f008 fd13 	bl	800daa4 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 800507e:	4803      	ldr	r0, [pc, #12]	; (800508c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8005080:	f008 fd10 	bl	800daa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8005084:	bf00      	nop
 8005086:	bd80      	pop	{r7, pc}
 8005088:	20001914 	.word	0x20001914
 800508c:	20001adc 	.word	0x20001adc

08005090 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005094:	4802      	ldr	r0, [pc, #8]	; (80050a0 <TIM1_CC_IRQHandler+0x10>)
 8005096:	f008 fd05 	bl	800daa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800509a:	bf00      	nop
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20001914 	.word	0x20001914

080050a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80050a8:	4802      	ldr	r0, [pc, #8]	; (80050b4 <TIM2_IRQHandler+0x10>)
 80050aa:	f008 fcfb 	bl	800daa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80050ae:	bf00      	nop
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20001960 	.word	0x20001960

080050b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_2_Pin);
 80050bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80050c0:	f004 fc70 	bl	80099a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80050c4:	bf00      	nop
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80050cc:	4802      	ldr	r0, [pc, #8]	; (80050d8 <TIM7_IRQHandler+0x10>)
 80050ce:	f008 fce9 	bl	800daa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80050d2:	bf00      	nop
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	200019f8 	.word	0x200019f8

080050dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return 1;
 80050e0:	2301      	movs	r3, #1
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <_kill>:

int _kill(int pid, int sig)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80050f6:	f011 fd67 	bl	8016bc8 <__errno>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2216      	movs	r2, #22
 80050fe:	601a      	str	r2, [r3, #0]
  return -1;
 8005100:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005104:	4618      	mov	r0, r3
 8005106:	3708      	adds	r7, #8
 8005108:	46bd      	mov	sp, r7
 800510a:	bd80      	pop	{r7, pc}

0800510c <_exit>:

void _exit (int status)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005114:	f04f 31ff 	mov.w	r1, #4294967295
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f7ff ffe7 	bl	80050ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800511e:	e7fe      	b.n	800511e <_exit+0x12>

08005120 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800512c:	2300      	movs	r3, #0
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	e00a      	b.n	8005148 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005132:	f3af 8000 	nop.w
 8005136:	4601      	mov	r1, r0
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	60ba      	str	r2, [r7, #8]
 800513e:	b2ca      	uxtb	r2, r1
 8005140:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	3301      	adds	r3, #1
 8005146:	617b      	str	r3, [r7, #20]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	429a      	cmp	r2, r3
 800514e:	dbf0      	blt.n	8005132 <_read+0x12>
  }

  return len;
 8005150:	687b      	ldr	r3, [r7, #4]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}

0800515a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800515a:	b580      	push	{r7, lr}
 800515c:	b086      	sub	sp, #24
 800515e:	af00      	add	r7, sp, #0
 8005160:	60f8      	str	r0, [r7, #12]
 8005162:	60b9      	str	r1, [r7, #8]
 8005164:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005166:	2300      	movs	r3, #0
 8005168:	617b      	str	r3, [r7, #20]
 800516a:	e009      	b.n	8005180 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	1c5a      	adds	r2, r3, #1
 8005170:	60ba      	str	r2, [r7, #8]
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	3301      	adds	r3, #1
 800517e:	617b      	str	r3, [r7, #20]
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	429a      	cmp	r2, r3
 8005186:	dbf1      	blt.n	800516c <_write+0x12>
  }
  return len;
 8005188:	687b      	ldr	r3, [r7, #4]
}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <_close>:

int _close(int file)
{
 8005192:	b480      	push	{r7}
 8005194:	b083      	sub	sp, #12
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800519a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800519e:	4618      	mov	r0, r3
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr

080051aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80051aa:	b480      	push	{r7}
 80051ac:	b083      	sub	sp, #12
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
 80051b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80051ba:	605a      	str	r2, [r3, #4]
  return 0;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <_isatty>:

int _isatty(int file)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80051d2:	2301      	movs	r3, #1
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	370c      	adds	r7, #12
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	60b9      	str	r1, [r7, #8]
 80051ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
	...

080051fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005204:	4a14      	ldr	r2, [pc, #80]	; (8005258 <_sbrk+0x5c>)
 8005206:	4b15      	ldr	r3, [pc, #84]	; (800525c <_sbrk+0x60>)
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005210:	4b13      	ldr	r3, [pc, #76]	; (8005260 <_sbrk+0x64>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d102      	bne.n	800521e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005218:	4b11      	ldr	r3, [pc, #68]	; (8005260 <_sbrk+0x64>)
 800521a:	4a12      	ldr	r2, [pc, #72]	; (8005264 <_sbrk+0x68>)
 800521c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800521e:	4b10      	ldr	r3, [pc, #64]	; (8005260 <_sbrk+0x64>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4413      	add	r3, r2
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	429a      	cmp	r2, r3
 800522a:	d207      	bcs.n	800523c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800522c:	f011 fccc 	bl	8016bc8 <__errno>
 8005230:	4603      	mov	r3, r0
 8005232:	220c      	movs	r2, #12
 8005234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005236:	f04f 33ff 	mov.w	r3, #4294967295
 800523a:	e009      	b.n	8005250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800523c:	4b08      	ldr	r3, [pc, #32]	; (8005260 <_sbrk+0x64>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005242:	4b07      	ldr	r3, [pc, #28]	; (8005260 <_sbrk+0x64>)
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4413      	add	r3, r2
 800524a:	4a05      	ldr	r2, [pc, #20]	; (8005260 <_sbrk+0x64>)
 800524c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800524e:	68fb      	ldr	r3, [r7, #12]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}
 8005258:	20008000 	.word	0x20008000
 800525c:	00000400 	.word	0x00000400
 8005260:	20001c5c 	.word	0x20001c5c
 8005264:	20003010 	.word	0x20003010

08005268 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800526c:	4b06      	ldr	r3, [pc, #24]	; (8005288 <SystemInit+0x20>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	4a05      	ldr	r2, [pc, #20]	; (8005288 <SystemInit+0x20>)
 8005274:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005278:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800527c:	bf00      	nop
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	e000ed00 	.word	0xe000ed00

0800528c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800528c:	480d      	ldr	r0, [pc, #52]	; (80052c4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800528e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005290:	f7ff ffea 	bl	8005268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005294:	480c      	ldr	r0, [pc, #48]	; (80052c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8005296:	490d      	ldr	r1, [pc, #52]	; (80052cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8005298:	4a0d      	ldr	r2, [pc, #52]	; (80052d0 <LoopForever+0xe>)
  movs r3, #0
 800529a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800529c:	e002      	b.n	80052a4 <LoopCopyDataInit>

0800529e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800529e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80052a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80052a2:	3304      	adds	r3, #4

080052a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80052a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80052a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80052a8:	d3f9      	bcc.n	800529e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80052aa:	4a0a      	ldr	r2, [pc, #40]	; (80052d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80052ac:	4c0a      	ldr	r4, [pc, #40]	; (80052d8 <LoopForever+0x16>)
  movs r3, #0
 80052ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80052b0:	e001      	b.n	80052b6 <LoopFillZerobss>

080052b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80052b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80052b4:	3204      	adds	r2, #4

080052b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80052b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80052b8:	d3fb      	bcc.n	80052b2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80052ba:	f011 fc8b 	bl	8016bd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80052be:	f7fd fdd3 	bl	8002e68 <main>

080052c2 <LoopForever>:

LoopForever:
    b LoopForever
 80052c2:	e7fe      	b.n	80052c2 <LoopForever>
  ldr   r0, =_estack
 80052c4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80052c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80052cc:	2000050c 	.word	0x2000050c
  ldr r2, =_sidata
 80052d0:	0801bcf8 	.word	0x0801bcf8
  ldr r2, =_sbss
 80052d4:	20000510 	.word	0x20000510
  ldr r4, =_ebss
 80052d8:	20003010 	.word	0x20003010

080052dc <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80052dc:	e7fe      	b.n	80052dc <COMP1_2_3_IRQHandler>
	...

080052e0 <setSPI_Size>:
 * @brief Sets SPI interface word size (0=8bit, 1=16 bit)
 * @param none
 * @return none
 */

static void setSPI_Size(int8_t size){
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	4603      	mov	r3, r0
 80052e8:	71fb      	strb	r3, [r7, #7]
  if(config.spi_sz!=size){
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <setSPI_Size+0x54>)
 80052ec:	f993 3000 	ldrsb.w	r3, [r3]
 80052f0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d017      	beq.n	8005328 <setSPI_Size+0x48>
    __HAL_SPI_DISABLE(&LCD_HANDLE);
 80052f8:	4b0f      	ldr	r3, [pc, #60]	; (8005338 <setSPI_Size+0x58>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	4b0e      	ldr	r3, [pc, #56]	; (8005338 <setSPI_Size+0x58>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005306:	601a      	str	r2, [r3, #0]
    config.spi_sz=size;
 8005308:	4a0a      	ldr	r2, [pc, #40]	; (8005334 <setSPI_Size+0x54>)
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	7013      	strb	r3, [r2, #0]
    if(size==mode_16bit){
 800530e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d104      	bne.n	8005320 <setSPI_Size+0x40>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_16BIT;
 8005316:	4b08      	ldr	r3, [pc, #32]	; (8005338 <setSPI_Size+0x58>)
 8005318:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800531c:	60da      	str	r2, [r3, #12]
    else{
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
      //LCD_HANDLE.Instance->CR1 &= ~(SPI_CR1_DFF);
    }
  }
}
 800531e:	e003      	b.n	8005328 <setSPI_Size+0x48>
      LCD_HANDLE.Init.DataSize = SPI_DATASIZE_8BIT;
 8005320:	4b05      	ldr	r3, [pc, #20]	; (8005338 <setSPI_Size+0x58>)
 8005322:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005326:	60da      	str	r2, [r3, #12]
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	20000194 	.word	0x20000194
 8005338:	20001850 	.word	0x20001850

0800533c <setDMAMemMode>:
 * @param memInc Enable/disable memory address increase
 * @param mode16 Enable/disable 16 bit mode (disabled = 8 bit)
 * @return none
 */
static void setDMAMemMode(uint8_t memInc, uint8_t size)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	460a      	mov	r2, r1
 8005346:	71fb      	strb	r3, [r7, #7]
 8005348:	4613      	mov	r3, r2
 800534a:	71bb      	strb	r3, [r7, #6]
  setSPI_Size(size);
 800534c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8005350:	4618      	mov	r0, r3
 8005352:	f7ff ffc5 	bl	80052e0 <setSPI_Size>
  if(config.dma_sz!=size || config.dma_mem_inc!=memInc){
 8005356:	4b3c      	ldr	r3, [pc, #240]	; (8005448 <setDMAMemMode+0x10c>)
 8005358:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800535c:	461a      	mov	r2, r3
 800535e:	79bb      	ldrb	r3, [r7, #6]
 8005360:	429a      	cmp	r2, r3
 8005362:	d106      	bne.n	8005372 <setDMAMemMode+0x36>
 8005364:	4b38      	ldr	r3, [pc, #224]	; (8005448 <setDMAMemMode+0x10c>)
 8005366:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800536a:	461a      	mov	r2, r3
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	429a      	cmp	r2, r3
 8005370:	d066      	beq.n	8005440 <setDMAMemMode+0x104>
    config.dma_sz =size;
 8005372:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8005376:	4b34      	ldr	r3, [pc, #208]	; (8005448 <setDMAMemMode+0x10c>)
 8005378:	705a      	strb	r2, [r3, #1]
    config.dma_mem_inc = memInc;
 800537a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800537e:	4b32      	ldr	r3, [pc, #200]	; (8005448 <setDMAMemMode+0x10c>)
 8005380:	709a      	strb	r2, [r3, #2]
    __HAL_DMA_DISABLE(LCD_HANDLE.hdmatx);;
 8005382:	4b32      	ldr	r3, [pc, #200]	; (800544c <setDMAMemMode+0x110>)
 8005384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	4b30      	ldr	r3, [pc, #192]	; (800544c <setDMAMemMode+0x110>)
 800538c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]
#ifdef DMA_SxCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CR & DMA_SxCR_EN) != RESET);
#elif defined DMA_CCR_EN
    while((LCD_HANDLE.hdmatx->Instance->CCR & DMA_CCR_EN) != RESET);
 8005396:	bf00      	nop
 8005398:	4b2c      	ldr	r3, [pc, #176]	; (800544c <setDMAMemMode+0x110>)
 800539a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d1f7      	bne.n	8005398 <setDMAMemMode+0x5c>
#endif
    if(memInc==mem_increase){
 80053a8:	79fb      	ldrb	r3, [r7, #7]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d10e      	bne.n	80053cc <setDMAMemMode+0x90>
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_ENABLE;
 80053ae:	4b27      	ldr	r3, [pc, #156]	; (800544c <setDMAMemMode+0x110>)
 80053b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b2:	2280      	movs	r2, #128	; 0x80
 80053b4:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR |= DMA_SxCR_MINC;
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR |= DMA_CCR_MINC;
 80053b6:	4b25      	ldr	r3, [pc, #148]	; (800544c <setDMAMemMode+0x110>)
 80053b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4b23      	ldr	r3, [pc, #140]	; (800544c <setDMAMemMode+0x110>)
 80053c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80053c8:	601a      	str	r2, [r3, #0]
 80053ca:	e00d      	b.n	80053e8 <setDMAMemMode+0xac>
#endif
    }
    else{
      LCD_HANDLE.hdmatx->Init.MemInc = DMA_MINC_DISABLE;
 80053cc:	4b1f      	ldr	r3, [pc, #124]	; (800544c <setDMAMemMode+0x110>)
 80053ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d0:	2200      	movs	r2, #0
 80053d2:	611a      	str	r2, [r3, #16]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR &= ~(DMA_SxCR_MINC);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR &= ~(DMA_CCR_MINC);
 80053d4:	4b1d      	ldr	r3, [pc, #116]	; (800544c <setDMAMemMode+0x110>)
 80053d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681a      	ldr	r2, [r3, #0]
 80053dc:	4b1b      	ldr	r3, [pc, #108]	; (800544c <setDMAMemMode+0x110>)
 80053de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053e6:	601a      	str	r2, [r3, #0]
#endif
    }

    if(size==mode_16bit){
 80053e8:	79bb      	ldrb	r3, [r7, #6]
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d116      	bne.n	800541c <setDMAMemMode+0xe0>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80053ee:	4b17      	ldr	r3, [pc, #92]	; (800544c <setDMAMemMode+0x110>)
 80053f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053f6:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80053f8:	4b14      	ldr	r3, [pc, #80]	; (800544c <setDMAMemMode+0x110>)
 80053fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005400:	619a      	str	r2, [r3, #24]
#ifdef DMA_SxCR_EN
      LCD_HANDLE.hdmatx->Instance->CR = (LCD_HANDLE.hdmatx->Instance->CR & ~(DMA_SxCR_PSIZE_Msk | DMA_SxCR_MSIZE_Msk)) |
                                                   (1<<DMA_SxCR_PSIZE_Pos | 1<<DMA_SxCR_MSIZE_Pos);
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk)) |
 8005402:	4b12      	ldr	r3, [pc, #72]	; (800544c <setDMAMemMode+0x110>)
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800540e:	4b0f      	ldr	r3, [pc, #60]	; (800544c <setDMAMemMode+0x110>)
 8005410:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f442 62a0 	orr.w	r2, r2, #1280	; 0x500
 8005418:	601a      	str	r2, [r3, #0]
#elif defined DMA_CCR_EN
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
#endif
    }
  }
}
 800541a:	e011      	b.n	8005440 <setDMAMemMode+0x104>
      LCD_HANDLE.hdmatx->Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800541c:	4b0b      	ldr	r3, [pc, #44]	; (800544c <setDMAMemMode+0x110>)
 800541e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005420:	2200      	movs	r2, #0
 8005422:	615a      	str	r2, [r3, #20]
      LCD_HANDLE.hdmatx->Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005424:	4b09      	ldr	r3, [pc, #36]	; (800544c <setDMAMemMode+0x110>)
 8005426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005428:	2200      	movs	r2, #0
 800542a:	619a      	str	r2, [r3, #24]
      LCD_HANDLE.hdmatx->Instance->CCR = (LCD_HANDLE.hdmatx->Instance->CCR & ~(DMA_CCR_PSIZE_Msk | DMA_CCR_MSIZE_Msk));
 800542c:	4b07      	ldr	r3, [pc, #28]	; (800544c <setDMAMemMode+0x110>)
 800542e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	4b05      	ldr	r3, [pc, #20]	; (800544c <setDMAMemMode+0x110>)
 8005436:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800543e:	601a      	str	r2, [r3, #0]
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}
 8005448:	20000194 	.word	0x20000194
 800544c:	20001850 	.word	0x20001850

08005450 <LCD_WriteCommand>:
 * @brief Write command to ST7735 controller
 * @param cmd -> command to write
 * @return none
 */
static void LCD_WriteCommand(uint8_t *cmd, uint8_t argc)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
 8005458:	460b      	mov	r3, r1
 800545a:	70fb      	strb	r3, [r7, #3]
  setSPI_Size(mode_8bit);
 800545c:	2000      	movs	r0, #0
 800545e:	f7ff ff3f 	bl	80052e0 <setSPI_Size>
  //LCD_PIN(LCD_DC,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_RESET);
 8005462:	2200      	movs	r2, #0
 8005464:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005468:	4815      	ldr	r0, [pc, #84]	; (80054c0 <LCD_WriteCommand+0x70>)
 800546a:	f004 fa83 	bl	8009974 <HAL_GPIO_WritePin>

#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 800546e:	2200      	movs	r2, #0
 8005470:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005474:	4812      	ldr	r0, [pc, #72]	; (80054c0 <LCD_WriteCommand+0x70>)
 8005476:	f004 fa7d 	bl	8009974 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, cmd, 1, HAL_MAX_DELAY);
 800547a:	f04f 33ff 	mov.w	r3, #4294967295
 800547e:	2201      	movs	r2, #1
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4810      	ldr	r0, [pc, #64]	; (80054c4 <LCD_WriteCommand+0x74>)
 8005484:	f007 f989 	bl	800c79a <HAL_SPI_Transmit>
  if(argc){
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00e      	beq.n	80054ac <LCD_WriteCommand+0x5c>
    //LCD_PIN(LCD_DC,SET);
    HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 800548e:	2201      	movs	r2, #1
 8005490:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005494:	480a      	ldr	r0, [pc, #40]	; (80054c0 <LCD_WriteCommand+0x70>)
 8005496:	f004 fa6d 	bl	8009974 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&LCD_HANDLE, (cmd+1), argc, HAL_MAX_DELAY);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	1c59      	adds	r1, r3, #1
 800549e:	78fb      	ldrb	r3, [r7, #3]
 80054a0:	b29a      	uxth	r2, r3
 80054a2:	f04f 33ff 	mov.w	r3, #4294967295
 80054a6:	4807      	ldr	r0, [pc, #28]	; (80054c4 <LCD_WriteCommand+0x74>)
 80054a8:	f007 f977 	bl	800c79a <HAL_SPI_Transmit>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80054ac:	2201      	movs	r2, #1
 80054ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054b2:	4803      	ldr	r0, [pc, #12]	; (80054c0 <LCD_WriteCommand+0x70>)
 80054b4:	f004 fa5e 	bl	8009974 <HAL_GPIO_WritePin>
#endif
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	48000400 	.word	0x48000400
 80054c4:	20001850 	.word	0x20001850

080054c8 <LCD_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void LCD_WriteData(uint8_t *buff, size_t buff_size)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80054d2:	2201      	movs	r2, #1
 80054d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80054d8:	4830      	ldr	r0, [pc, #192]	; (800559c <LCD_WriteData+0xd4>)
 80054da:	f004 fa4b 	bl	8009974 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80054de:	2200      	movs	r2, #0
 80054e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054e4:	482d      	ldr	r0, [pc, #180]	; (800559c <LCD_WriteData+0xd4>)
 80054e6:	f004 fa45 	bl	8009974 <HAL_GPIO_WritePin>
#endif

  // split data in small chunks because HAL can't send more than 64K at once

  while (buff_size > 0) {
 80054ea:	e049      	b.n	8005580 <LCD_WriteData+0xb8>
    uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054f2:	4293      	cmp	r3, r2
 80054f4:	bf28      	it	cs
 80054f6:	4613      	movcs	r3, r2
 80054f8:	81fb      	strh	r3, [r7, #14]
#ifdef USE_DMA
    if(buff_size>DMA_Min_Pixels){
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	2b20      	cmp	r3, #32
 80054fe:	d924      	bls.n	800554a <LCD_WriteData+0x82>
      HAL_SPI_Transmit_DMA(&LCD_HANDLE, buff, chunk_size);
 8005500:	89fb      	ldrh	r3, [r7, #14]
 8005502:	461a      	mov	r2, r3
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	4826      	ldr	r0, [pc, #152]	; (80055a0 <LCD_WriteData+0xd8>)
 8005508:	f007 fabc 	bl	800ca84 <HAL_SPI_Transmit_DMA>
      while(HAL_DMA_GetState(LCD_HANDLE.hdmatx)!=HAL_DMA_STATE_READY);
 800550c:	bf00      	nop
 800550e:	4b24      	ldr	r3, [pc, #144]	; (80055a0 <LCD_WriteData+0xd8>)
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	4618      	mov	r0, r3
 8005514:	f003 fd6a 	bl	8008fec <HAL_DMA_GetState>
 8005518:	4603      	mov	r3, r0
 800551a:	2b01      	cmp	r3, #1
 800551c:	d1f7      	bne.n	800550e <LCD_WriteData+0x46>
      if(config.dma_mem_inc==mem_increase){
 800551e:	4b21      	ldr	r3, [pc, #132]	; (80055a4 <LCD_WriteData+0xdc>)
 8005520:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8005524:	2b01      	cmp	r3, #1
 8005526:	d127      	bne.n	8005578 <LCD_WriteData+0xb0>
        if(config.dma_sz==mode_16bit)
 8005528:	4b1e      	ldr	r3, [pc, #120]	; (80055a4 <LCD_WriteData+0xdc>)
 800552a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d104      	bne.n	800553c <LCD_WriteData+0x74>
          buff += chunk_size;
 8005532:	89fb      	ldrh	r3, [r7, #14]
 8005534:	687a      	ldr	r2, [r7, #4]
 8005536:	4413      	add	r3, r2
 8005538:	607b      	str	r3, [r7, #4]
 800553a:	e01d      	b.n	8005578 <LCD_WriteData+0xb0>
        else
          buff += chunk_size*2;
 800553c:	89fb      	ldrh	r3, [r7, #14]
 800553e:	005b      	lsls	r3, r3, #1
 8005540:	461a      	mov	r2, r3
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	607b      	str	r3, [r7, #4]
 8005548:	e016      	b.n	8005578 <LCD_WriteData+0xb0>
      }
    }
    else{
      HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
 800554a:	89fa      	ldrh	r2, [r7, #14]
 800554c:	f04f 33ff 	mov.w	r3, #4294967295
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4813      	ldr	r0, [pc, #76]	; (80055a0 <LCD_WriteData+0xd8>)
 8005554:	f007 f921 	bl	800c79a <HAL_SPI_Transmit>
      if(config.spi_sz==mode_16bit)
 8005558:	4b12      	ldr	r3, [pc, #72]	; (80055a4 <LCD_WriteData+0xdc>)
 800555a:	f993 3000 	ldrsb.w	r3, [r3]
 800555e:	2b01      	cmp	r3, #1
 8005560:	d104      	bne.n	800556c <LCD_WriteData+0xa4>
        buff += chunk_size;
 8005562:	89fb      	ldrh	r3, [r7, #14]
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4413      	add	r3, r2
 8005568:	607b      	str	r3, [r7, #4]
 800556a:	e005      	b.n	8005578 <LCD_WriteData+0xb0>
      else
        buff += chunk_size*2;
 800556c:	89fb      	ldrh	r3, [r7, #14]
 800556e:	005b      	lsls	r3, r3, #1
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	607b      	str	r3, [r7, #4]
    }
#else
    HAL_SPI_Transmit(&LCD_HANDLE, buff, chunk_size, HAL_MAX_DELAY);
#endif
    buff_size -= chunk_size;
 8005578:	89fb      	ldrh	r3, [r7, #14]
 800557a:	683a      	ldr	r2, [r7, #0]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	603b      	str	r3, [r7, #0]
  while (buff_size > 0) {
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1b2      	bne.n	80054ec <LCD_WriteData+0x24>
  }
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 8005586:	2201      	movs	r2, #1
 8005588:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800558c:	4803      	ldr	r0, [pc, #12]	; (800559c <LCD_WriteData+0xd4>)
 800558e:	f004 f9f1 	bl	8009974 <HAL_GPIO_WritePin>
#endif
}
 8005592:	bf00      	nop
 8005594:	3710      	adds	r7, #16
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	48000400 	.word	0x48000400
 80055a0:	20001850 	.word	0x20001850
 80055a4:	20000194 	.word	0x20000194

080055a8 <LCD_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void LCD_SetAddressWindow(int16_t x0, int16_t y0, int16_t x1, int16_t y1)
{
 80055a8:	b590      	push	{r4, r7, lr}
 80055aa:	b08b      	sub	sp, #44	; 0x2c
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4604      	mov	r4, r0
 80055b0:	4608      	mov	r0, r1
 80055b2:	4611      	mov	r1, r2
 80055b4:	461a      	mov	r2, r3
 80055b6:	4623      	mov	r3, r4
 80055b8:	80fb      	strh	r3, [r7, #6]
 80055ba:	4603      	mov	r3, r0
 80055bc:	80bb      	strh	r3, [r7, #4]
 80055be:	460b      	mov	r3, r1
 80055c0:	807b      	strh	r3, [r7, #2]
 80055c2:	4613      	mov	r3, r2
 80055c4:	803b      	strh	r3, [r7, #0]
  int16_t x_start = x0 + LCD_X_SHIFT, x_end = x1 + LCD_X_SHIFT;
 80055c6:	88fb      	ldrh	r3, [r7, #6]
 80055c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055ca:	887b      	ldrh	r3, [r7, #2]
 80055cc:	84bb      	strh	r3, [r7, #36]	; 0x24
  int16_t y_start = y0 + LCD_Y_SHIFT, y_end = y1 + LCD_Y_SHIFT;
 80055ce:	88bb      	ldrh	r3, [r7, #4]
 80055d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80055d2:	883b      	ldrh	r3, [r7, #0]
 80055d4:	843b      	strh	r3, [r7, #32]

  /* Column Address set */
  {
    uint8_t cmd[] = { CMD_CASET, x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF };
 80055d6:	232a      	movs	r3, #42	; 0x2a
 80055d8:	763b      	strb	r3, [r7, #24]
 80055da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80055de:	121b      	asrs	r3, r3, #8
 80055e0:	b21b      	sxth	r3, r3
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	767b      	strb	r3, [r7, #25]
 80055e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	76bb      	strb	r3, [r7, #26]
 80055ec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80055f0:	121b      	asrs	r3, r3, #8
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	76fb      	strb	r3, [r7, #27]
 80055f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	773b      	strb	r3, [r7, #28]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80055fe:	f107 0318 	add.w	r3, r7, #24
 8005602:	2104      	movs	r1, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff ff23 	bl	8005450 <LCD_WriteCommand>
  }
  /* Row Address set */
  {
    uint8_t cmd[] = { CMD_RASET, y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF };
 800560a:	232b      	movs	r3, #43	; 0x2b
 800560c:	743b      	strb	r3, [r7, #16]
 800560e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8005612:	121b      	asrs	r3, r3, #8
 8005614:	b21b      	sxth	r3, r3
 8005616:	b2db      	uxtb	r3, r3
 8005618:	747b      	strb	r3, [r7, #17]
 800561a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800561c:	b2db      	uxtb	r3, r3
 800561e:	74bb      	strb	r3, [r7, #18]
 8005620:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8005624:	121b      	asrs	r3, r3, #8
 8005626:	b21b      	sxth	r3, r3
 8005628:	b2db      	uxtb	r3, r3
 800562a:	74fb      	strb	r3, [r7, #19]
 800562c:	8c3b      	ldrh	r3, [r7, #32]
 800562e:	b2db      	uxtb	r3, r3
 8005630:	753b      	strb	r3, [r7, #20]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005632:	f107 0310 	add.w	r3, r7, #16
 8005636:	2104      	movs	r1, #4
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff ff09 	bl	8005450 <LCD_WriteCommand>
  }
  {
  /* Write to RAM */
    uint8_t cmd[] = { CMD_RAMWR };
 800563e:	232c      	movs	r3, #44	; 0x2c
 8005640:	733b      	strb	r3, [r7, #12]
    LCD_WriteCommand(cmd, sizeof(cmd)-1);
 8005642:	f107 030c 	add.w	r3, r7, #12
 8005646:	2100      	movs	r1, #0
 8005648:	4618      	mov	r0, r3
 800564a:	f7ff ff01 	bl	8005450 <LCD_WriteCommand>
  }
}
 800564e:	bf00      	nop
 8005650:	372c      	adds	r7, #44	; 0x2c
 8005652:	46bd      	mov	sp, r7
 8005654:	bd90      	pop	{r4, r7, pc}
	...

08005658 <LCD_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void LCD_DrawPixel(int16_t x, int16_t y, uint16_t color)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	4603      	mov	r3, r0
 8005660:	80fb      	strh	r3, [r7, #6]
 8005662:	460b      	mov	r3, r1
 8005664:	80bb      	strh	r3, [r7, #4]
 8005666:	4613      	mov	r3, r2
 8005668:	807b      	strh	r3, [r7, #2]
  if ((x < 0) || (x > LCD_WIDTH-1) ||
 800566a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800566e:	2b00      	cmp	r3, #0
 8005670:	db39      	blt.n	80056e6 <LCD_DrawPixel+0x8e>
 8005672:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005676:	2bef      	cmp	r3, #239	; 0xef
 8005678:	dc35      	bgt.n	80056e6 <LCD_DrawPixel+0x8e>
 800567a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	db31      	blt.n	80056e6 <LCD_DrawPixel+0x8e>
     (y < 0) || (y > LCD_HEIGHT-1))
 8005682:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8005686:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800568a:	da2c      	bge.n	80056e6 <LCD_DrawPixel+0x8e>
    return;

  uint8_t data[2] = {color >> 8, color & 0xFF};
 800568c:	887b      	ldrh	r3, [r7, #2]
 800568e:	0a1b      	lsrs	r3, r3, #8
 8005690:	b29b      	uxth	r3, r3
 8005692:	b2db      	uxtb	r3, r3
 8005694:	733b      	strb	r3, [r7, #12]
 8005696:	887b      	ldrh	r3, [r7, #2]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	737b      	strb	r3, [r7, #13]

  LCD_SetAddressWindow(x, y, x, y);
 800569c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80056a0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056a4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80056a8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80056ac:	f7ff ff7c 	bl	80055a8 <LCD_SetAddressWindow>

  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80056b0:	2201      	movs	r2, #1
 80056b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80056b6:	480e      	ldr	r0, [pc, #56]	; (80056f0 <LCD_DrawPixel+0x98>)
 80056b8:	f004 f95c 	bl	8009974 <HAL_GPIO_WritePin>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_RESET);
 80056bc:	2200      	movs	r2, #0
 80056be:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056c2:	480b      	ldr	r0, [pc, #44]	; (80056f0 <LCD_DrawPixel+0x98>)
 80056c4:	f004 f956 	bl	8009974 <HAL_GPIO_WritePin>
#endif
  HAL_SPI_Transmit(&LCD_HANDLE, data, sizeof(data), HAL_MAX_DELAY);
 80056c8:	f107 010c 	add.w	r1, r7, #12
 80056cc:	f04f 33ff 	mov.w	r3, #4294967295
 80056d0:	2202      	movs	r2, #2
 80056d2:	4808      	ldr	r0, [pc, #32]	; (80056f4 <LCD_DrawPixel+0x9c>)
 80056d4:	f007 f861 	bl	800c79a <HAL_SPI_Transmit>
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80056d8:	2201      	movs	r2, #1
 80056da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80056de:	4804      	ldr	r0, [pc, #16]	; (80056f0 <LCD_DrawPixel+0x98>)
 80056e0:	f004 f948 	bl	8009974 <HAL_GPIO_WritePin>
 80056e4:	e000      	b.n	80056e8 <LCD_DrawPixel+0x90>
    return;
 80056e6:	bf00      	nop
#endif
}
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	48000400 	.word	0x48000400
 80056f4:	20001850 	.word	0x20001850

080056f8 <LCD_FillPixels>:

  fb[x+(y*LCD_WIDTH)] = color;
}
#endif

void LCD_FillPixels(uint32_t pixels, uint16_t color){
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b094      	sub	sp, #80	; 0x50
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	460b      	mov	r3, r1
 8005702:	807b      	strh	r3, [r7, #2]
#ifdef USE_DMA
  if(pixels>DMA_Min_Pixels)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b20      	cmp	r3, #32
 8005708:	d905      	bls.n	8005716 <LCD_FillPixels+0x1e>
    LCD_WriteData((uint8_t*)&color, pixels);
 800570a:	1cbb      	adds	r3, r7, #2
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4618      	mov	r0, r3
 8005710:	f7ff feda 	bl	80054c8 <LCD_WriteData>
      pixels-=sz;
    }
#ifdef USE_DMA
  }
#endif
}
 8005714:	e026      	b.n	8005764 <LCD_FillPixels+0x6c>
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 8005716:	2300      	movs	r3, #0
 8005718:	64fb      	str	r3, [r7, #76]	; 0x4c
 800571a:	e009      	b.n	8005730 <LCD_FillPixels+0x38>
      fill[t]=color;
 800571c:	887a      	ldrh	r2, [r7, #2]
 800571e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	3350      	adds	r3, #80	; 0x50
 8005724:	443b      	add	r3, r7
 8005726:	f823 2c48 	strh.w	r2, [r3, #-72]
    for(uint32_t t=0;t<(pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);t++){                     // Fill the buffer with the color
 800572a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572c:	3301      	adds	r3, #1
 800572e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b20      	cmp	r3, #32
 8005734:	bf28      	it	cs
 8005736:	2320      	movcs	r3, #32
 8005738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800573a:	429a      	cmp	r2, r3
 800573c:	d3ee      	bcc.n	800571c <LCD_FillPixels+0x24>
    while(pixels){                                                                                // Send 64 pixel blocks
 800573e:	e00e      	b.n	800575e <LCD_FillPixels+0x66>
      uint32_t sz = (pixels<DMA_Min_Pixels ? pixels : DMA_Min_Pixels);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2b20      	cmp	r3, #32
 8005744:	bf28      	it	cs
 8005746:	2320      	movcs	r3, #32
 8005748:	64bb      	str	r3, [r7, #72]	; 0x48
      LCD_WriteData((uint8_t*)fill, sz);
 800574a:	f107 0308 	add.w	r3, r7, #8
 800574e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005750:	4618      	mov	r0, r3
 8005752:	f7ff feb9 	bl	80054c8 <LCD_WriteData>
      pixels-=sz;
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800575a:	1ad3      	subs	r3, r2, r3
 800575c:	607b      	str	r3, [r7, #4]
    while(pixels){                                                                                // Send 64 pixel blocks
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1ed      	bne.n	8005740 <LCD_FillPixels+0x48>
}
 8005764:	bf00      	nop
 8005766:	3750      	adds	r7, #80	; 0x50
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <LCD_FillArea>:
/**
 * @brief Set address of DisplayWindow and returns raw pixel draw for uGUI driver acceleration
 * @param xi&yi -> coordinates of window
 * @return none
 */
void(*LCD_FillArea(int16_t x0, int16_t y0, int16_t x1, int16_t y1))(uint32_t, uint16_t){
 800576c:	b590      	push	{r4, r7, lr}
 800576e:	b083      	sub	sp, #12
 8005770:	af00      	add	r7, sp, #0
 8005772:	4604      	mov	r4, r0
 8005774:	4608      	mov	r0, r1
 8005776:	4611      	mov	r1, r2
 8005778:	461a      	mov	r2, r3
 800577a:	4623      	mov	r3, r4
 800577c:	80fb      	strh	r3, [r7, #6]
 800577e:	4603      	mov	r3, r0
 8005780:	80bb      	strh	r3, [r7, #4]
 8005782:	460b      	mov	r3, r1
 8005784:	807b      	strh	r3, [r7, #2]
 8005786:	4613      	mov	r3, r2
 8005788:	803b      	strh	r3, [r7, #0]
  if(x0==-1){
 800578a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800578e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005792:	d105      	bne.n	80057a0 <LCD_FillArea+0x34>
#ifdef USE_DMA
    setDMAMemMode(mem_increase, mode_8bit);
 8005794:	2100      	movs	r1, #0
 8005796:	2001      	movs	r0, #1
 8005798:	f7ff fdd0 	bl	800533c <setDMAMemMode>
#else
    setSPI_Size(mode_8bit);                                                          // Set SPI to 8 bit
#endif
    return NULL;
 800579c:	2300      	movs	r3, #0
 800579e:	e014      	b.n	80057ca <LCD_FillArea+0x5e>
  }
  LCD_SetAddressWindow(x0,y0,x1,y1);
 80057a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80057a4:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80057a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80057ac:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80057b0:	f7ff fefa 	bl	80055a8 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 80057b4:	2101      	movs	r1, #1
 80057b6:	2000      	movs	r0, #0
 80057b8:	f7ff fdc0 	bl	800533c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);                                                          // Set SPI to 16 bit
#endif
  //LCD_PIN(LCD_DC,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_DC_Pin, GPIO_PIN_SET);
 80057bc:	2201      	movs	r2, #1
 80057be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80057c2:	4804      	ldr	r0, [pc, #16]	; (80057d4 <LCD_FillArea+0x68>)
 80057c4:	f004 f8d6 	bl	8009974 <HAL_GPIO_WritePin>
  return LCD_FillPixels;
 80057c8:	4b03      	ldr	r3, [pc, #12]	; (80057d8 <LCD_FillArea+0x6c>)
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd90      	pop	{r4, r7, pc}
 80057d2:	bf00      	nop
 80057d4:	48000400 	.word	0x48000400
 80057d8:	080056f9 	.word	0x080056f9

080057dc <LCD_Fill>:
 * @param xEnd&yEnd -> coordinate of the end point
 * @param color -> color to Fill with
 * @return none
 */
int8_t LCD_Fill(uint16_t xSta, uint16_t ySta, uint16_t xEnd, uint16_t yEnd, uint16_t color)
{
 80057dc:	b590      	push	{r4, r7, lr}
 80057de:	b085      	sub	sp, #20
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4604      	mov	r4, r0
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4623      	mov	r3, r4
 80057ec:	80fb      	strh	r3, [r7, #6]
 80057ee:	4603      	mov	r3, r0
 80057f0:	80bb      	strh	r3, [r7, #4]
 80057f2:	460b      	mov	r3, r1
 80057f4:	807b      	strh	r3, [r7, #2]
 80057f6:	4613      	mov	r3, r2
 80057f8:	803b      	strh	r3, [r7, #0]
  uint32_t pixels = (uint32_t)(xEnd-xSta+1)*(yEnd-ySta+1);
 80057fa:	887a      	ldrh	r2, [r7, #2]
 80057fc:	88fb      	ldrh	r3, [r7, #6]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	3301      	adds	r3, #1
 8005802:	4619      	mov	r1, r3
 8005804:	883a      	ldrh	r2, [r7, #0]
 8005806:	88bb      	ldrh	r3, [r7, #4]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	3301      	adds	r3, #1
 800580c:	fb01 f303 	mul.w	r3, r1, r3
 8005810:	60fb      	str	r3, [r7, #12]
  LCD_SetAddressWindow(xSta, ySta, xEnd, yEnd);
 8005812:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005816:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800581a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800581e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8005822:	f7ff fec1 	bl	80055a8 <LCD_SetAddressWindow>
#ifdef USE_DMA
    setDMAMemMode(mem_fixed, mode_16bit);
 8005826:	2101      	movs	r1, #1
 8005828:	2000      	movs	r0, #0
 800582a:	f7ff fd87 	bl	800533c <setDMAMemMode>
#else
    setSPI_Size(mode_16bit);
#endif
  LCD_FillPixels(pixels, color);
 800582e:	8c3b      	ldrh	r3, [r7, #32]
 8005830:	4619      	mov	r1, r3
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7ff ff60 	bl	80056f8 <LCD_FillPixels>
#ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);
 8005838:	2100      	movs	r1, #0
 800583a:	2001      	movs	r0, #1
 800583c:	f7ff fd7e 	bl	800533c <setDMAMemMode>
#else
  setSPI_Size(mode_8bit);
#endif
  return UG_RESULT_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	bd90      	pop	{r4, r7, pc}

0800584a <LCD_DrawImage>:
 * @param w&h -> width & height of the Image to Draw
 * @param data -> pointer of the Image array
 * @return none
 */
void LCD_DrawImage(uint16_t x, uint16_t y, UG_BMP* bmp)
{
 800584a:	b590      	push	{r4, r7, lr}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	4603      	mov	r3, r0
 8005852:	603a      	str	r2, [r7, #0]
 8005854:	80fb      	strh	r3, [r7, #6]
 8005856:	460b      	mov	r3, r1
 8005858:	80bb      	strh	r3, [r7, #4]
  uint16_t w = bmp->width;
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	889b      	ldrh	r3, [r3, #4]
 800585e:	81fb      	strh	r3, [r7, #14]
  uint16_t h = bmp->height;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	88db      	ldrh	r3, [r3, #6]
 8005864:	81bb      	strh	r3, [r7, #12]
  if ((x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8005866:	88fb      	ldrh	r3, [r7, #6]
 8005868:	2bef      	cmp	r3, #239	; 0xef
 800586a:	d839      	bhi.n	80058e0 <LCD_DrawImage+0x96>
 800586c:	88bb      	ldrh	r3, [r7, #4]
 800586e:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005872:	d235      	bcs.n	80058e0 <LCD_DrawImage+0x96>
    return;
  if ((x + w - 1) > LCD_WIDTH-1)
 8005874:	88fa      	ldrh	r2, [r7, #6]
 8005876:	89fb      	ldrh	r3, [r7, #14]
 8005878:	4413      	add	r3, r2
 800587a:	2bf0      	cmp	r3, #240	; 0xf0
 800587c:	dc32      	bgt.n	80058e4 <LCD_DrawImage+0x9a>
    return;
  if ((y + h - 1) > LCD_HEIGHT-1)
 800587e:	88ba      	ldrh	r2, [r7, #4]
 8005880:	89bb      	ldrh	r3, [r7, #12]
 8005882:	4413      	add	r3, r2
 8005884:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8005888:	dc2e      	bgt.n	80058e8 <LCD_DrawImage+0x9e>
    return;
  if(bmp->bpp!=BMP_BPP_16)
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	7a1b      	ldrb	r3, [r3, #8]
 800588e:	2b10      	cmp	r3, #16
 8005890:	d12c      	bne.n	80058ec <LCD_DrawImage+0xa2>
    return;
  LCD_SetAddressWindow(x, y, x + w - 1, y + h - 1);
 8005892:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8005896:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800589a:	88fa      	ldrh	r2, [r7, #6]
 800589c:	89fb      	ldrh	r3, [r7, #14]
 800589e:	4413      	add	r3, r2
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	b21c      	sxth	r4, r3
 80058a8:	88ba      	ldrh	r2, [r7, #4]
 80058aa:	89bb      	ldrh	r3, [r7, #12]
 80058ac:	4413      	add	r3, r2
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	3b01      	subs	r3, #1
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	b21b      	sxth	r3, r3
 80058b6:	4622      	mov	r2, r4
 80058b8:	f7ff fe76 	bl	80055a8 <LCD_SetAddressWindow>

  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_16bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80058bc:	2101      	movs	r1, #1
 80058be:	2001      	movs	r0, #1
 80058c0:	f7ff fd3c 	bl	800533c <setDMAMemMode>
  #else
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)bmp->p, w*h);
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	6818      	ldr	r0, [r3, #0]
 80058c8:	89fb      	ldrh	r3, [r7, #14]
 80058ca:	89ba      	ldrh	r2, [r7, #12]
 80058cc:	fb02 f303 	mul.w	r3, r2, r3
 80058d0:	4619      	mov	r1, r3
 80058d2:	f7ff fdf9 	bl	80054c8 <LCD_WriteData>
#ifdef USE_DMA
setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80058d6:	2100      	movs	r1, #0
 80058d8:	2001      	movs	r0, #1
 80058da:	f7ff fd2f 	bl	800533c <setDMAMemMode>
 80058de:	e006      	b.n	80058ee <LCD_DrawImage+0xa4>
    return;
 80058e0:	bf00      	nop
 80058e2:	e004      	b.n	80058ee <LCD_DrawImage+0xa4>
    return;
 80058e4:	bf00      	nop
 80058e6:	e002      	b.n	80058ee <LCD_DrawImage+0xa4>
    return;
 80058e8:	bf00      	nop
 80058ea:	e000      	b.n	80058ee <LCD_DrawImage+0xa4>
    return;
 80058ec:	bf00      	nop
#else
setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
#endif
  }
 80058ee:	3714      	adds	r7, #20
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd90      	pop	{r4, r7, pc}

080058f4 <LCD_DrawLine>:
 * @param x1&y1 -> coordinate of the start point
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
int8_t LCD_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b087      	sub	sp, #28
 80058f8:	af02      	add	r7, sp, #8
 80058fa:	4604      	mov	r4, r0
 80058fc:	4608      	mov	r0, r1
 80058fe:	4611      	mov	r1, r2
 8005900:	461a      	mov	r2, r3
 8005902:	4623      	mov	r3, r4
 8005904:	80fb      	strh	r3, [r7, #6]
 8005906:	4603      	mov	r3, r0
 8005908:	80bb      	strh	r3, [r7, #4]
 800590a:	460b      	mov	r3, r1
 800590c:	807b      	strh	r3, [r7, #2]
 800590e:	4613      	mov	r3, r2
 8005910:	803b      	strh	r3, [r7, #0]

  if(x0==x1){                                   // If horizontal
 8005912:	88fa      	ldrh	r2, [r7, #6]
 8005914:	887b      	ldrh	r3, [r7, #2]
 8005916:	429a      	cmp	r2, r3
 8005918:	d10a      	bne.n	8005930 <LCD_DrawLine+0x3c>
    if(y0>y1) swap(y0,y1);
 800591a:	88ba      	ldrh	r2, [r7, #4]
 800591c:	883b      	ldrh	r3, [r7, #0]
 800591e:	429a      	cmp	r2, r3
 8005920:	d918      	bls.n	8005954 <LCD_DrawLine+0x60>
 8005922:	88bb      	ldrh	r3, [r7, #4]
 8005924:	81bb      	strh	r3, [r7, #12]
 8005926:	883b      	ldrh	r3, [r7, #0]
 8005928:	80bb      	strh	r3, [r7, #4]
 800592a:	89bb      	ldrh	r3, [r7, #12]
 800592c:	803b      	strh	r3, [r7, #0]
 800592e:	e011      	b.n	8005954 <LCD_DrawLine+0x60>
  }
  else if(y0==y1){                              // If vertical
 8005930:	88ba      	ldrh	r2, [r7, #4]
 8005932:	883b      	ldrh	r3, [r7, #0]
 8005934:	429a      	cmp	r2, r3
 8005936:	d10a      	bne.n	800594e <LCD_DrawLine+0x5a>
    if(x0>x1) swap(x0,x1);
 8005938:	88fa      	ldrh	r2, [r7, #6]
 800593a:	887b      	ldrh	r3, [r7, #2]
 800593c:	429a      	cmp	r2, r3
 800593e:	d909      	bls.n	8005954 <LCD_DrawLine+0x60>
 8005940:	88fb      	ldrh	r3, [r7, #6]
 8005942:	81fb      	strh	r3, [r7, #14]
 8005944:	887b      	ldrh	r3, [r7, #2]
 8005946:	80fb      	strh	r3, [r7, #6]
 8005948:	89fb      	ldrh	r3, [r7, #14]
 800594a:	807b      	strh	r3, [r7, #2]
 800594c:	e002      	b.n	8005954 <LCD_DrawLine+0x60>
  }
  else{                                         // Else, return fail, draw using software
    return UG_RESULT_FAIL;
 800594e:	f04f 33ff 	mov.w	r3, #4294967295
 8005952:	e009      	b.n	8005968 <LCD_DrawLine+0x74>
  }

  LCD_Fill(x0,y0,x1,y1,color);               // Draw using acceleration
 8005954:	883c      	ldrh	r4, [r7, #0]
 8005956:	887a      	ldrh	r2, [r7, #2]
 8005958:	88b9      	ldrh	r1, [r7, #4]
 800595a:	88f8      	ldrh	r0, [r7, #6]
 800595c:	8c3b      	ldrh	r3, [r7, #32]
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	4623      	mov	r3, r4
 8005962:	f7ff ff3b 	bl	80057dc <LCD_Fill>
  return UG_RESULT_OK;
 8005966:	2300      	movs	r3, #0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3714      	adds	r7, #20
 800596c:	46bd      	mov	sp, r7
 800596e:	bd90      	pop	{r4, r7, pc}

08005970 <LCD_PutStr>:
void LCD_PutChar(uint16_t x, uint16_t y, char ch, UG_FONT* font, uint16_t color, uint16_t bgcolor){
  UG_FontSelect(font);
  UG_PutChar(ch, x, y, color, bgcolor);
}

void LCD_PutStr(uint16_t x, uint16_t y,  char *str, UG_FONT* font, uint16_t color, uint16_t bgcolor){
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60ba      	str	r2, [r7, #8]
 8005978:	607b      	str	r3, [r7, #4]
 800597a:	4603      	mov	r3, r0
 800597c:	81fb      	strh	r3, [r7, #14]
 800597e:	460b      	mov	r3, r1
 8005980:	81bb      	strh	r3, [r7, #12]
  UG_FontSelect(font);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f00c fbb2 	bl	80120ec <UG_FontSelect>
  UG_SetForecolor(color);
 8005988:	8b3b      	ldrh	r3, [r7, #24]
 800598a:	4618      	mov	r0, r3
 800598c:	f00c fefa 	bl	8012784 <UG_SetForecolor>
  UG_SetBackcolor(bgcolor);
 8005990:	8bbb      	ldrh	r3, [r7, #28]
 8005992:	4618      	mov	r0, r3
 8005994:	f00c ff08 	bl	80127a8 <UG_SetBackcolor>
  UG_PutString(x, y, str);
 8005998:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800599c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f00c fe56 	bl	8012654 <UG_PutString>
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <LCD_setPower>:
  uint8_t cmd[] = { (tear ? 0x35 /* TEON */ : 0x34 /* TEOFF */) };
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
}

void LCD_setPower(uint8_t power)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b084      	sub	sp, #16
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	71fb      	strb	r3, [r7, #7]
  uint8_t cmd[] = { (power ? CMD_DISPON /* TEON */ : CMD_DISPOFF /* TEOFF */) };
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <LCD_setPower+0x14>
 80059c0:	2329      	movs	r3, #41	; 0x29
 80059c2:	e000      	b.n	80059c6 <LCD_setPower+0x16>
 80059c4:	2328      	movs	r3, #40	; 0x28
 80059c6:	733b      	strb	r3, [r7, #12]
  LCD_WriteCommand(cmd, sizeof(cmd)-1);
 80059c8:	f107 030c 	add.w	r3, r7, #12
 80059cc:	2100      	movs	r1, #0
 80059ce:	4618      	mov	r0, r3
 80059d0:	f7ff fd3e 	bl	8005450 <LCD_WriteCommand>
}
 80059d4:	bf00      	nop
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <LCD_Update>:

static void LCD_Update(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	af00      	add	r7, sp, #0
  setSPI_Size(mode_16bit);                                                                            // Set SPI to 16 bit
  #endif
  LCD_WriteData((uint8_t*)fb, LCD_WIDTH*LCD_HEIGHT);
#endif
  #ifdef USE_DMA
  setDMAMemMode(mem_increase, mode_8bit);                                                            // Set SPI and DMA to 16 bit, enable memory increase
 80059e0:	2100      	movs	r1, #0
 80059e2:	2001      	movs	r0, #1
 80059e4:	f7ff fcaa 	bl	800533c <setDMAMemMode>
  #else
  setSPI_Size(mode_8bit);                                                                            // Set SPI to 16 bit
  #endif
}
 80059e8:	bf00      	nop
 80059ea:	bd80      	pop	{r7, pc}

080059ec <LCD_init>:
 * @param none
 * @return none
 */

void LCD_init(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
#ifdef LCD_CS
  //LCD_PIN(LCD_CS,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_CS_Pin, GPIO_PIN_SET);
 80059f2:	2201      	movs	r2, #1
 80059f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80059f8:	482a      	ldr	r0, [pc, #168]	; (8005aa4 <LCD_init+0xb8>)
 80059fa:	f003 ffbb 	bl	8009974 <HAL_GPIO_WritePin>
#endif
#ifdef LCD_RST
  //LCD_PIN(LCD_RST,RESET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_RESET);
 80059fe:	2200      	movs	r2, #0
 8005a00:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a04:	4827      	ldr	r0, [pc, #156]	; (8005aa4 <LCD_init+0xb8>)
 8005a06:	f003 ffb5 	bl	8009974 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	f000 f8ca 	bl	8005ba4 <HAL_Delay>
  //LCD_PIN(LCD_RST,SET);
  HAL_GPIO_WritePin(GPIOB, SPI2_RST_Pin, GPIO_PIN_SET);
 8005a10:	2201      	movs	r2, #1
 8005a12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a16:	4823      	ldr	r0, [pc, #140]	; (8005aa4 <LCD_init+0xb8>)
 8005a18:	f003 ffac 	bl	8009974 <HAL_GPIO_WritePin>
  HAL_Delay(200);
 8005a1c:	20c8      	movs	r0, #200	; 0xc8
 8005a1e:	f000 f8c1 	bl	8005ba4 <HAL_Delay>
#endif
  UG_Init(&gui, &device);
 8005a22:	4921      	ldr	r1, [pc, #132]	; (8005aa8 <LCD_init+0xbc>)
 8005a24:	4821      	ldr	r0, [pc, #132]	; (8005aac <LCD_init+0xc0>)
 8005a26:	f00c fac7 	bl	8011fb8 <UG_Init>
#ifndef LCD_LOCAL_FB
  UG_DriverRegister(DRIVER_DRAW_LINE, LCD_DrawLine);
 8005a2a:	4921      	ldr	r1, [pc, #132]	; (8005ab0 <LCD_init+0xc4>)
 8005a2c:	2000      	movs	r0, #0
 8005a2e:	f00d ff51 	bl	80138d4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_FRAME, LCD_Fill);
 8005a32:	4920      	ldr	r1, [pc, #128]	; (8005ab4 <LCD_init+0xc8>)
 8005a34:	2001      	movs	r0, #1
 8005a36:	f00d ff4d 	bl	80138d4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_FILL_AREA, LCD_FillArea);
 8005a3a:	491f      	ldr	r1, [pc, #124]	; (8005ab8 <LCD_init+0xcc>)
 8005a3c:	2002      	movs	r0, #2
 8005a3e:	f00d ff49 	bl	80138d4 <UG_DriverRegister>
  UG_DriverRegister(DRIVER_DRAW_BMP, LCD_DrawImage);
 8005a42:	491e      	ldr	r1, [pc, #120]	; (8005abc <LCD_init+0xd0>)
 8005a44:	2003      	movs	r0, #3
 8005a46:	f00d ff45 	bl	80138d4 <UG_DriverRegister>
#endif
  UG_FontSetHSpace(0);
 8005a4a:	2000      	movs	r0, #0
 8005a4c:	f00c febe 	bl	80127cc <UG_FontSetHSpace>
  UG_FontSetVSpace(0);
 8005a50:	2000      	movs	r0, #0
 8005a52:	f00c fecf 	bl	80127f4 <UG_FontSetVSpace>
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005a56:	2300      	movs	r3, #0
 8005a58:	80fb      	strh	r3, [r7, #6]
 8005a5a:	e013      	b.n	8005a84 <LCD_init+0x98>
    LCD_WriteCommand((uint8_t*)&init_cmd[i+1], init_cmd[i]);
 8005a5c:	88fb      	ldrh	r3, [r7, #6]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	4a17      	ldr	r2, [pc, #92]	; (8005ac0 <LCD_init+0xd4>)
 8005a62:	441a      	add	r2, r3
 8005a64:	88fb      	ldrh	r3, [r7, #6]
 8005a66:	4916      	ldr	r1, [pc, #88]	; (8005ac0 <LCD_init+0xd4>)
 8005a68:	5ccb      	ldrb	r3, [r1, r3]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f7ff fcef 	bl	8005450 <LCD_WriteCommand>
    i += init_cmd[i]+2;
 8005a72:	88fb      	ldrh	r3, [r7, #6]
 8005a74:	4a12      	ldr	r2, [pc, #72]	; (8005ac0 <LCD_init+0xd4>)
 8005a76:	5cd3      	ldrb	r3, [r2, r3]
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	3302      	adds	r3, #2
 8005a82:	80fb      	strh	r3, [r7, #6]
  for(uint16_t i=0; i<sizeof(init_cmd); ){
 8005a84:	88fb      	ldrh	r3, [r7, #6]
 8005a86:	2b4b      	cmp	r3, #75	; 0x4b
 8005a88:	d9e8      	bls.n	8005a5c <LCD_init+0x70>
  }
  UG_FillScreen(C_BLACK);               //  Clear screen
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	f00c fb3e 	bl	801210c <UG_FillScreen>
  LCD_setPower(ENABLE);
 8005a90:	2001      	movs	r0, #1
 8005a92:	f7ff ff8d 	bl	80059b0 <LCD_setPower>
  UG_Update();
 8005a96:	f00d ff3f 	bl	8013918 <UG_Update>
}
 8005a9a:	bf00      	nop
 8005a9c:	3708      	adds	r7, #8
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	48000400 	.word	0x48000400
 8005aa8:	20000198 	.word	0x20000198
 8005aac:	20001c60 	.word	0x20001c60
 8005ab0:	080058f5 	.word	0x080058f5
 8005ab4:	080057dd 	.word	0x080057dd
 8005ab8:	0800576d 	.word	0x0800576d
 8005abc:	0800584b 	.word	0x0800584b
 8005ac0:	080191bc 	.word	0x080191bc

08005ac4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b082      	sub	sp, #8
 8005ac8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005aca:	2300      	movs	r3, #0
 8005acc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ace:	2003      	movs	r0, #3
 8005ad0:	f002 fe74 	bl	80087bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ad4:	200f      	movs	r0, #15
 8005ad6:	f000 f80d 	bl	8005af4 <HAL_InitTick>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	71fb      	strb	r3, [r7, #7]
 8005ae4:	e001      	b.n	8005aea <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005ae6:	f7fe fe13 	bl	8004710 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005aea:	79fb      	ldrb	r3, [r7, #7]

}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005b00:	4b16      	ldr	r3, [pc, #88]	; (8005b5c <HAL_InitTick+0x68>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d022      	beq.n	8005b4e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005b08:	4b15      	ldr	r3, [pc, #84]	; (8005b60 <HAL_InitTick+0x6c>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <HAL_InitTick+0x68>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005b14:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	f002 fe80 	bl	8008822 <HAL_SYSTICK_Config>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d10f      	bne.n	8005b48 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2b0f      	cmp	r3, #15
 8005b2c:	d809      	bhi.n	8005b42 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b2e:	2200      	movs	r2, #0
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	f04f 30ff 	mov.w	r0, #4294967295
 8005b36:	f002 fe4c 	bl	80087d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b3a:	4a0a      	ldr	r2, [pc, #40]	; (8005b64 <HAL_InitTick+0x70>)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6013      	str	r3, [r2, #0]
 8005b40:	e007      	b.n	8005b52 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	73fb      	strb	r3, [r7, #15]
 8005b46:	e004      	b.n	8005b52 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
 8005b4c:	e001      	b.n	8005b52 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005b4e:	2301      	movs	r3, #1
 8005b50:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	200001a8 	.word	0x200001a8
 8005b60:	20000190 	.word	0x20000190
 8005b64:	200001a4 	.word	0x200001a4

08005b68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <HAL_IncTick+0x1c>)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	4b05      	ldr	r3, [pc, #20]	; (8005b88 <HAL_IncTick+0x20>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4413      	add	r3, r2
 8005b76:	4a03      	ldr	r2, [pc, #12]	; (8005b84 <HAL_IncTick+0x1c>)
 8005b78:	6013      	str	r3, [r2, #0]
}
 8005b7a:	bf00      	nop
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	20001cd4 	.word	0x20001cd4
 8005b88:	200001a8 	.word	0x200001a8

08005b8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b90:	4b03      	ldr	r3, [pc, #12]	; (8005ba0 <HAL_GetTick+0x14>)
 8005b92:	681b      	ldr	r3, [r3, #0]
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	20001cd4 	.word	0x20001cd4

08005ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bac:	f7ff ffee 	bl	8005b8c <HAL_GetTick>
 8005bb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bbc:	d004      	beq.n	8005bc8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005bbe:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <HAL_Delay+0x40>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	68fa      	ldr	r2, [r7, #12]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bc8:	bf00      	nop
 8005bca:	f7ff ffdf 	bl	8005b8c <HAL_GetTick>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d8f7      	bhi.n	8005bca <HAL_Delay+0x26>
  {
  }
}
 8005bda:	bf00      	nop
 8005bdc:	bf00      	nop
 8005bde:	3710      	adds	r7, #16
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	200001a8 	.word	0x200001a8

08005be8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	609a      	str	r2, [r3, #8]
}
 8005c02:	bf00      	nop
 8005c04:	370c      	adds	r7, #12
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr

08005c0e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	431a      	orrs	r2, r3
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	609a      	str	r2, [r3, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b087      	sub	sp, #28
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	60f8      	str	r0, [r7, #12]
 8005c58:	60b9      	str	r1, [r7, #8]
 8005c5a:	607a      	str	r2, [r7, #4]
 8005c5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3360      	adds	r3, #96	; 0x60
 8005c62:	461a      	mov	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	4413      	add	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	4b08      	ldr	r3, [pc, #32]	; (8005c94 <LL_ADC_SetOffset+0x44>)
 8005c72:	4013      	ands	r3, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	4313      	orrs	r3, r2
 8005c80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005c88:	bf00      	nop
 8005c8a:	371c      	adds	r7, #28
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr
 8005c94:	03fff000 	.word	0x03fff000

08005c98 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b085      	sub	sp, #20
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	3360      	adds	r3, #96	; 0x60
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3714      	adds	r7, #20
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b087      	sub	sp, #28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	3360      	adds	r3, #96	; 0x60
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	431a      	orrs	r2, r3
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005cee:	bf00      	nop
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr

08005cfa <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005cfa:	b480      	push	{r7}
 8005cfc:	b087      	sub	sp, #28
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	60f8      	str	r0, [r7, #12]
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3360      	adds	r3, #96	; 0x60
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005d24:	bf00      	nop
 8005d26:	371c      	adds	r7, #28
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3360      	adds	r3, #96	; 0x60
 8005d40:	461a      	mov	r2, r3
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	431a      	orrs	r2, r3
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005d5a:	bf00      	nop
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr

08005d66 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005d66:	b480      	push	{r7}
 8005d68:	b083      	sub	sp, #12
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
 8005d6e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
 8005d74:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	615a      	str	r2, [r3, #20]
}
 8005d80:	bf00      	nop
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b083      	sub	sp, #12
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d101      	bne.n	8005da4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005da0:	2301      	movs	r3, #1
 8005da2:	e000      	b.n	8005da6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b087      	sub	sp, #28
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	60f8      	str	r0, [r7, #12]
 8005dba:	60b9      	str	r1, [r7, #8]
 8005dbc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	3330      	adds	r3, #48	; 0x30
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	4413      	add	r3, r2
 8005dd0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	211f      	movs	r1, #31
 8005dde:	fa01 f303 	lsl.w	r3, r1, r3
 8005de2:	43db      	mvns	r3, r3
 8005de4:	401a      	ands	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	0e9b      	lsrs	r3, r3, #26
 8005dea:	f003 011f 	and.w	r1, r3, #31
 8005dee:	68bb      	ldr	r3, [r7, #8]
 8005df0:	f003 031f 	and.w	r3, r3, #31
 8005df4:	fa01 f303 	lsl.w	r3, r1, r3
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005dfe:	bf00      	nop
 8005e00:	371c      	adds	r7, #28
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr

08005e0a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e16:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d101      	bne.n	8005e22 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8005e1e:	2301      	movs	r3, #1
 8005e20:	e000      	b.n	8005e24 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8005e22:	2300      	movs	r3, #0
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b087      	sub	sp, #28
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	3314      	adds	r3, #20
 8005e40:	461a      	mov	r2, r3
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	0e5b      	lsrs	r3, r3, #25
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	f003 0304 	and.w	r3, r3, #4
 8005e4c:	4413      	add	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	0d1b      	lsrs	r3, r3, #20
 8005e58:	f003 031f 	and.w	r3, r3, #31
 8005e5c:	2107      	movs	r1, #7
 8005e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e62:	43db      	mvns	r3, r3
 8005e64:	401a      	ands	r2, r3
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	0d1b      	lsrs	r3, r3, #20
 8005e6a:	f003 031f 	and.w	r3, r3, #31
 8005e6e:	6879      	ldr	r1, [r7, #4]
 8005e70:	fa01 f303 	lsl.w	r3, r1, r3
 8005e74:	431a      	orrs	r2, r3
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005e7a:	bf00      	nop
 8005e7c:	371c      	adds	r7, #28
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	60f8      	str	r0, [r7, #12]
 8005e90:	60b9      	str	r1, [r7, #8]
 8005e92:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005e9a:	68bb      	ldr	r3, [r7, #8]
 8005e9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ea0:	43db      	mvns	r3, r3
 8005ea2:	401a      	ands	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f003 0318 	and.w	r3, r3, #24
 8005eaa:	4908      	ldr	r1, [pc, #32]	; (8005ecc <LL_ADC_SetChannelSingleDiff+0x44>)
 8005eac:	40d9      	lsrs	r1, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	400b      	ands	r3, r1
 8005eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eb6:	431a      	orrs	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005ebe:	bf00      	nop
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	0007ffff 	.word	0x0007ffff

08005ed0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 031f 	and.w	r3, r3, #31
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005f18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f1c:	687a      	ldr	r2, [r7, #4]
 8005f1e:	6093      	str	r3, [r2, #8]
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f40:	d101      	bne.n	8005f46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005f42:	2301      	movs	r3, #1
 8005f44:	e000      	b.n	8005f48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005f64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f68:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f90:	d101      	bne.n	8005f96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005f92:	2301      	movs	r3, #1
 8005f94:	e000      	b.n	8005f98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fb8:	f043 0201 	orr.w	r2, r3, #1
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fdc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005fe0:	f043 0202 	orr.w	r2, r3, #2
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	689b      	ldr	r3, [r3, #8]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <LL_ADC_IsEnabled+0x18>
 8006008:	2301      	movs	r3, #1
 800600a:	e000      	b.n	800600e <LL_ADC_IsEnabled+0x1a>
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 0302 	and.w	r3, r3, #2
 800602a:	2b02      	cmp	r3, #2
 800602c:	d101      	bne.n	8006032 <LL_ADC_IsDisableOngoing+0x18>
 800602e:	2301      	movs	r3, #1
 8006030:	e000      	b.n	8006034 <LL_ADC_IsDisableOngoing+0x1a>
 8006032:	2300      	movs	r3, #0
}
 8006034:	4618      	mov	r0, r3
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006054:	f043 0204 	orr.w	r2, r3, #4
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800605c:	bf00      	nop
 800605e:	370c      	adds	r7, #12
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b04      	cmp	r3, #4
 800607a:	d101      	bne.n	8006080 <LL_ADC_REG_IsConversionOngoing+0x18>
 800607c:	2301      	movs	r3, #1
 800607e:	e000      	b.n	8006082 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	370c      	adds	r7, #12
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800608e:	b480      	push	{r7}
 8006090:	b083      	sub	sp, #12
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f003 0308 	and.w	r3, r3, #8
 800609e:	2b08      	cmp	r3, #8
 80060a0:	d101      	bne.n	80060a6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e000      	b.n	80060a8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80060b4:	b590      	push	{r4, r7, lr}
 80060b6:	b089      	sub	sp, #36	; 0x24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060bc:	2300      	movs	r3, #0
 80060be:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d101      	bne.n	80060ce <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e167      	b.n	800639e <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d109      	bne.n	80060f0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f7fe fb3b 	bl	8004758 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2200      	movs	r2, #0
 80060e6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7ff ff19 	bl	8005f2c <LL_ADC_IsDeepPowerDownEnabled>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d004      	beq.n	800610a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4618      	mov	r0, r3
 8006106:	f7ff feff 	bl	8005f08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4618      	mov	r0, r3
 8006110:	f7ff ff34 	bl	8005f7c <LL_ADC_IsInternalRegulatorEnabled>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d115      	bne.n	8006146 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4618      	mov	r0, r3
 8006120:	f7ff ff18 	bl	8005f54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006124:	4ba0      	ldr	r3, [pc, #640]	; (80063a8 <HAL_ADC_Init+0x2f4>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	099b      	lsrs	r3, r3, #6
 800612a:	4aa0      	ldr	r2, [pc, #640]	; (80063ac <HAL_ADC_Init+0x2f8>)
 800612c:	fba2 2303 	umull	r2, r3, r2, r3
 8006130:	099b      	lsrs	r3, r3, #6
 8006132:	3301      	adds	r3, #1
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006138:	e002      	b.n	8006140 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3b01      	subs	r3, #1
 800613e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d1f9      	bne.n	800613a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4618      	mov	r0, r3
 800614c:	f7ff ff16 	bl	8005f7c <LL_ADC_IsInternalRegulatorEnabled>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10d      	bne.n	8006172 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615a:	f043 0210 	orr.w	r2, r3, #16
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006166:	f043 0201 	orr.w	r2, r3, #1
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f7ff ff76 	bl	8006068 <LL_ADC_REG_IsConversionOngoing>
 800617c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006182:	f003 0310 	and.w	r3, r3, #16
 8006186:	2b00      	cmp	r3, #0
 8006188:	f040 8100 	bne.w	800638c <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	2b00      	cmp	r3, #0
 8006190:	f040 80fc 	bne.w	800638c <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006198:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800619c:	f043 0202 	orr.w	r2, r3, #2
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff ff23 	bl	8005ff4 <LL_ADC_IsEnabled>
 80061ae:	4603      	mov	r3, r0
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d111      	bne.n	80061d8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80061b4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80061b8:	f7ff ff1c 	bl	8005ff4 <LL_ADC_IsEnabled>
 80061bc:	4604      	mov	r4, r0
 80061be:	487c      	ldr	r0, [pc, #496]	; (80063b0 <HAL_ADC_Init+0x2fc>)
 80061c0:	f7ff ff18 	bl	8005ff4 <LL_ADC_IsEnabled>
 80061c4:	4603      	mov	r3, r0
 80061c6:	4323      	orrs	r3, r4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	4619      	mov	r1, r3
 80061d2:	4878      	ldr	r0, [pc, #480]	; (80063b4 <HAL_ADC_Init+0x300>)
 80061d4:	f7ff fd08 	bl	8005be8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	7f5b      	ldrb	r3, [r3, #29]
 80061dc:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061e2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80061e8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80061ee:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80061f6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80061f8:	4313      	orrs	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006202:	2b01      	cmp	r3, #1
 8006204:	d106      	bne.n	8006214 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	3b01      	subs	r3, #1
 800620c:	045b      	lsls	r3, r3, #17
 800620e:	69ba      	ldr	r2, [r7, #24]
 8006210:	4313      	orrs	r3, r2
 8006212:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006218:	2b00      	cmp	r3, #0
 800621a:	d009      	beq.n	8006230 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006228:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	4313      	orrs	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	68da      	ldr	r2, [r3, #12]
 8006236:	4b60      	ldr	r3, [pc, #384]	; (80063b8 <HAL_ADC_Init+0x304>)
 8006238:	4013      	ands	r3, r2
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6812      	ldr	r2, [r2, #0]
 800623e:	69b9      	ldr	r1, [r7, #24]
 8006240:	430b      	orrs	r3, r1
 8006242:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	4618      	mov	r0, r3
 8006260:	f7ff ff15 	bl	800608e <LL_ADC_INJ_IsConversionOngoing>
 8006264:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d16d      	bne.n	8006348 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d16a      	bne.n	8006348 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006276:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800627e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8006280:	4313      	orrs	r3, r2
 8006282:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800628e:	f023 0302 	bic.w	r3, r3, #2
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	69b9      	ldr	r1, [r7, #24]
 8006298:	430b      	orrs	r3, r1
 800629a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	691b      	ldr	r3, [r3, #16]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d017      	beq.n	80062d4 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	691a      	ldr	r2, [r3, #16]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80062b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062bc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80062c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	6911      	ldr	r1, [r2, #16]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	6812      	ldr	r2, [r2, #0]
 80062cc:	430b      	orrs	r3, r1
 80062ce:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80062d2:	e013      	b.n	80062fc <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	691a      	ldr	r2, [r3, #16]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80062e2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	6812      	ldr	r2, [r2, #0]
 80062f0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80062f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80062f8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006302:	2b01      	cmp	r3, #1
 8006304:	d118      	bne.n	8006338 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006310:	f023 0304 	bic.w	r3, r3, #4
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800631c:	4311      	orrs	r1, r2
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006322:	4311      	orrs	r1, r2
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006328:	430a      	orrs	r2, r1
 800632a:	431a      	orrs	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	611a      	str	r2, [r3, #16]
 8006336:	e007      	b.n	8006348 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	691a      	ldr	r2, [r3, #16]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f022 0201 	bic.w	r2, r2, #1
 8006346:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	695b      	ldr	r3, [r3, #20]
 800634c:	2b01      	cmp	r3, #1
 800634e:	d10c      	bne.n	800636a <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	f023 010f 	bic.w	r1, r3, #15
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6a1b      	ldr	r3, [r3, #32]
 800635e:	1e5a      	subs	r2, r3, #1
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	430a      	orrs	r2, r1
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
 8006368:	e007      	b.n	800637a <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f022 020f 	bic.w	r2, r2, #15
 8006378:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800637e:	f023 0303 	bic.w	r3, r3, #3
 8006382:	f043 0201 	orr.w	r2, r3, #1
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	65da      	str	r2, [r3, #92]	; 0x5c
 800638a:	e007      	b.n	800639c <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006390:	f043 0210 	orr.w	r2, r3, #16
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800639c:	7ffb      	ldrb	r3, [r7, #31]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3724      	adds	r7, #36	; 0x24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd90      	pop	{r4, r7, pc}
 80063a6:	bf00      	nop
 80063a8:	20000190 	.word	0x20000190
 80063ac:	053e2d63 	.word	0x053e2d63
 80063b0:	50000100 	.word	0x50000100
 80063b4:	50000300 	.word	0x50000300
 80063b8:	fff04007 	.word	0xfff04007

080063bc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80063c8:	4851      	ldr	r0, [pc, #324]	; (8006510 <HAL_ADC_Start_DMA+0x154>)
 80063ca:	f7ff fd81 	bl	8005ed0 <LL_ADC_GetMultimode>
 80063ce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fe47 	bl	8006068 <LL_ADC_REG_IsConversionOngoing>
 80063da:	4603      	mov	r3, r0
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f040 808f 	bne.w	8006500 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_ADC_Start_DMA+0x34>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e08a      	b.n	8006506 <HAL_ADC_Start_DMA+0x14a>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80063f8:	693b      	ldr	r3, [r7, #16]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d005      	beq.n	800640a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b05      	cmp	r3, #5
 8006402:	d002      	beq.n	800640a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	2b09      	cmp	r3, #9
 8006408:	d173      	bne.n	80064f2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f000 febc 	bl	8007188 <ADC_Enable>
 8006410:	4603      	mov	r3, r0
 8006412:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006414:	7dfb      	ldrb	r3, [r7, #23]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d166      	bne.n	80064e8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800641e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006422:	f023 0301 	bic.w	r3, r3, #1
 8006426:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4a38      	ldr	r2, [pc, #224]	; (8006514 <HAL_ADC_Start_DMA+0x158>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d002      	beq.n	800643e <HAL_ADC_Start_DMA+0x82>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	e001      	b.n	8006442 <HAL_ADC_Start_DMA+0x86>
 800643e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006442:	68fa      	ldr	r2, [r7, #12]
 8006444:	6812      	ldr	r2, [r2, #0]
 8006446:	4293      	cmp	r3, r2
 8006448:	d002      	beq.n	8006450 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d105      	bne.n	800645c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006454:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006460:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d006      	beq.n	8006476 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800646c:	f023 0206 	bic.w	r2, r3, #6
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	661a      	str	r2, [r3, #96]	; 0x60
 8006474:	e002      	b.n	800647c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2200      	movs	r2, #0
 800647a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006480:	4a25      	ldr	r2, [pc, #148]	; (8006518 <HAL_ADC_Start_DMA+0x15c>)
 8006482:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006488:	4a24      	ldr	r2, [pc, #144]	; (800651c <HAL_ADC_Start_DMA+0x160>)
 800648a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006490:	4a23      	ldr	r2, [pc, #140]	; (8006520 <HAL_ADC_Start_DMA+0x164>)
 8006492:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	221c      	movs	r2, #28
 800649a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f042 0210 	orr.w	r2, r2, #16
 80064b2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	68da      	ldr	r2, [r3, #12]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f042 0201 	orr.w	r2, r2, #1
 80064c2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3340      	adds	r3, #64	; 0x40
 80064ce:	4619      	mov	r1, r3
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f002 fc60 	bl	8008d98 <HAL_DMA_Start_IT>
 80064d8:	4603      	mov	r3, r0
 80064da:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff fdad 	bl	8006040 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80064e6:	e00d      	b.n	8006504 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80064f0:	e008      	b.n	8006504 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80064fe:	e001      	b.n	8006504 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006500:	2302      	movs	r3, #2
 8006502:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006504:	7dfb      	ldrb	r3, [r7, #23]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	50000300 	.word	0x50000300
 8006514:	50000100 	.word	0x50000100
 8006518:	08007353 	.word	0x08007353
 800651c:	0800742b 	.word	0x0800742b
 8006520:	08007447 	.word	0x08007447

08006524 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b08a      	sub	sp, #40	; 0x28
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800652c:	2300      	movs	r3, #0
 800652e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006540:	4883      	ldr	r0, [pc, #524]	; (8006750 <HAL_ADC_IRQHandler+0x22c>)
 8006542:	f7ff fcc5 	bl	8005ed0 <LL_ADC_GetMultimode>
 8006546:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d017      	beq.n	8006582 <HAL_ADC_IRQHandler+0x5e>
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	f003 0302 	and.w	r3, r3, #2
 8006558:	2b00      	cmp	r3, #0
 800655a:	d012      	beq.n	8006582 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006560:	f003 0310 	and.w	r3, r3, #16
 8006564:	2b00      	cmp	r3, #0
 8006566:	d105      	bne.n	8006574 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656c:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 fac3 	bl	8007b00 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2202      	movs	r2, #2
 8006580:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d004      	beq.n	8006596 <HAL_ADC_IRQHandler+0x72>
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f003 0304 	and.w	r3, r3, #4
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10a      	bne.n	80065ac <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800659c:	2b00      	cmp	r3, #0
 800659e:	f000 8085 	beq.w	80066ac <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f003 0308 	and.w	r3, r3, #8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d07f      	beq.n	80066ac <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b0:	f003 0310 	and.w	r3, r3, #16
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d105      	bne.n	80065c4 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065bc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff fbdf 	bl	8005d8c <LL_ADC_REG_IsTriggerSourceSWStart>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d064      	beq.n	800669e <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a5e      	ldr	r2, [pc, #376]	; (8006754 <HAL_ADC_IRQHandler+0x230>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d002      	beq.n	80065e4 <HAL_ADC_IRQHandler+0xc0>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	e001      	b.n	80065e8 <HAL_ADC_IRQHandler+0xc4>
 80065e4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d008      	beq.n	8006602 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d005      	beq.n	8006602 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	2b05      	cmp	r3, #5
 80065fa:	d002      	beq.n	8006602 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	2b09      	cmp	r3, #9
 8006600:	d104      	bne.n	800660c <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	623b      	str	r3, [r7, #32]
 800660a:	e00d      	b.n	8006628 <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a50      	ldr	r2, [pc, #320]	; (8006754 <HAL_ADC_IRQHandler+0x230>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d002      	beq.n	800661c <HAL_ADC_IRQHandler+0xf8>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	e001      	b.n	8006620 <HAL_ADC_IRQHandler+0xfc>
 800661c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8006620:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	68db      	ldr	r3, [r3, #12]
 8006626:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8006628:	6a3b      	ldr	r3, [r7, #32]
 800662a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d135      	bne.n	800669e <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f003 0308 	and.w	r3, r3, #8
 800663c:	2b08      	cmp	r3, #8
 800663e:	d12e      	bne.n	800669e <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f7ff fd0f 	bl	8006068 <LL_ADC_REG_IsConversionOngoing>
 800664a:	4603      	mov	r3, r0
 800664c:	2b00      	cmp	r3, #0
 800664e:	d11a      	bne.n	8006686 <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	685a      	ldr	r2, [r3, #4]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f022 020c 	bic.w	r2, r2, #12
 800665e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006664:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006674:	2b00      	cmp	r3, #0
 8006676:	d112      	bne.n	800669e <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667c:	f043 0201 	orr.w	r2, r3, #1
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	65da      	str	r2, [r3, #92]	; 0x5c
 8006684:	e00b      	b.n	800669e <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668a:	f043 0210 	orr.w	r2, r3, #16
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006696:	f043 0201 	orr.w	r2, r3, #1
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f95a 	bl	8006958 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	220c      	movs	r2, #12
 80066aa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	f003 0320 	and.w	r3, r3, #32
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d004      	beq.n	80066c0 <HAL_ADC_IRQHandler+0x19c>
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	f003 0320 	and.w	r3, r3, #32
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10b      	bne.n	80066d8 <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 809e 	beq.w	8006808 <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8098 	beq.w	8006808 <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066dc:	f003 0310 	and.w	r3, r3, #16
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d105      	bne.n	80066f0 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066e8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7ff fb88 	bl	8005e0a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80066fa:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4618      	mov	r0, r3
 8006702:	f7ff fb43 	bl	8005d8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8006706:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a11      	ldr	r2, [pc, #68]	; (8006754 <HAL_ADC_IRQHandler+0x230>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d002      	beq.n	8006718 <HAL_ADC_IRQHandler+0x1f4>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	e001      	b.n	800671c <HAL_ADC_IRQHandler+0x1f8>
 8006718:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800671c:	687a      	ldr	r2, [r7, #4]
 800671e:	6812      	ldr	r2, [r2, #0]
 8006720:	4293      	cmp	r3, r2
 8006722:	d008      	beq.n	8006736 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8006724:	697b      	ldr	r3, [r7, #20]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	2b06      	cmp	r3, #6
 800672e:	d002      	beq.n	8006736 <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2b07      	cmp	r3, #7
 8006734:	d104      	bne.n	8006740 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	68db      	ldr	r3, [r3, #12]
 800673c:	623b      	str	r3, [r7, #32]
 800673e:	e011      	b.n	8006764 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4a03      	ldr	r2, [pc, #12]	; (8006754 <HAL_ADC_IRQHandler+0x230>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d006      	beq.n	8006758 <HAL_ADC_IRQHandler+0x234>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	e005      	b.n	800675c <HAL_ADC_IRQHandler+0x238>
 8006750:	50000300 	.word	0x50000300
 8006754:	50000100 	.word	0x50000100
 8006758:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800675c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d047      	beq.n	80067fa <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800676a:	6a3b      	ldr	r3, [r7, #32]
 800676c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006770:	2b00      	cmp	r3, #0
 8006772:	d007      	beq.n	8006784 <HAL_ADC_IRQHandler+0x260>
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d03f      	beq.n	80067fa <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8006780:	2b00      	cmp	r3, #0
 8006782:	d13a      	bne.n	80067fa <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800678e:	2b40      	cmp	r3, #64	; 0x40
 8006790:	d133      	bne.n	80067fa <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d12e      	bne.n	80067fa <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fc74 	bl	800608e <LL_ADC_INJ_IsConversionOngoing>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d11a      	bne.n	80067e2 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80067ba:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d112      	bne.n	80067fa <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067d8:	f043 0201 	orr.w	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	65da      	str	r2, [r3, #92]	; 0x5c
 80067e0:	e00b      	b.n	80067fa <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e6:	f043 0210 	orr.w	r2, r3, #16
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f2:	f043 0201 	orr.w	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f7fc fae8 	bl	8002dd0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2260      	movs	r2, #96	; 0x60
 8006806:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800680e:	2b00      	cmp	r3, #0
 8006810:	d011      	beq.n	8006836 <HAL_ADC_IRQHandler+0x312>
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006818:	2b00      	cmp	r3, #0
 800681a:	d00c      	beq.n	8006836 <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006820:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f8a9 	bl	8006980 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2280      	movs	r2, #128	; 0x80
 8006834:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800683c:	2b00      	cmp	r3, #0
 800683e:	d012      	beq.n	8006866 <HAL_ADC_IRQHandler+0x342>
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00d      	beq.n	8006866 <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f001 f93e 	bl	8007ad8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006864:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800686c:	2b00      	cmp	r3, #0
 800686e:	d012      	beq.n	8006896 <HAL_ADC_IRQHandler+0x372>
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00d      	beq.n	8006896 <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800687e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 f930 	bl	8007aec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006894:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	f003 0310 	and.w	r3, r3, #16
 800689c:	2b00      	cmp	r3, #0
 800689e:	d036      	beq.n	800690e <HAL_ADC_IRQHandler+0x3ea>
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	f003 0310 	and.w	r3, r3, #16
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d031      	beq.n	800690e <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d102      	bne.n	80068b8 <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 80068b2:	2301      	movs	r3, #1
 80068b4:	627b      	str	r3, [r7, #36]	; 0x24
 80068b6:	e014      	b.n	80068e2 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d008      	beq.n	80068d0 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80068be:	4825      	ldr	r0, [pc, #148]	; (8006954 <HAL_ADC_IRQHandler+0x430>)
 80068c0:	f7ff fb14 	bl	8005eec <LL_ADC_GetMultiDMATransfer>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00b      	beq.n	80068e2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80068ca:	2301      	movs	r3, #1
 80068cc:	627b      	str	r3, [r7, #36]	; 0x24
 80068ce:	e008      	b.n	80068e2 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d001      	beq.n	80068e2 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80068de:	2301      	movs	r3, #1
 80068e0:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d10e      	bne.n	8006906 <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068f8:	f043 0202 	orr.w	r2, r3, #2
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 f847 	bl	8006994 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	2210      	movs	r2, #16
 800690c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006914:	2b00      	cmp	r3, #0
 8006916:	d018      	beq.n	800694a <HAL_ADC_IRQHandler+0x426>
 8006918:	69bb      	ldr	r3, [r7, #24]
 800691a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800691e:	2b00      	cmp	r3, #0
 8006920:	d013      	beq.n	800694a <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006926:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006932:	f043 0208 	orr.w	r2, r3, #8
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006942:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8006944:	6878      	ldr	r0, [r7, #4]
 8006946:	f001 f8bd 	bl	8007ac4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800694a:	bf00      	nop
 800694c:	3728      	adds	r7, #40	; 0x28
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	50000300 	.word	0x50000300

08006958 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006958:	b480      	push	{r7}
 800695a:	b083      	sub	sp, #12
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006960:	bf00      	nop
 8006962:	370c      	adds	r7, #12
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8006980:	b480      	push	{r7}
 8006982:	b083      	sub	sp, #12
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8006988:	bf00      	nop
 800698a:	370c      	adds	r7, #12
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b0b6      	sub	sp, #216	; 0xd8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80069b2:	2300      	movs	r3, #0
 80069b4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80069b8:	2300      	movs	r3, #0
 80069ba:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d101      	bne.n	80069ca <HAL_ADC_ConfigChannel+0x22>
 80069c6:	2302      	movs	r3, #2
 80069c8:	e3c8      	b.n	800715c <HAL_ADC_ConfigChannel+0x7b4>
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2201      	movs	r2, #1
 80069ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff fb46 	bl	8006068 <LL_ADC_REG_IsConversionOngoing>
 80069dc:	4603      	mov	r3, r0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	f040 83ad 	bne.w	800713e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	6859      	ldr	r1, [r3, #4]
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	461a      	mov	r2, r3
 80069f2:	f7ff f9de 	bl	8005db2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7ff fb34 	bl	8006068 <LL_ADC_REG_IsConversionOngoing>
 8006a00:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f7ff fb40 	bl	800608e <LL_ADC_INJ_IsConversionOngoing>
 8006a0e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006a12:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	f040 81d9 	bne.w	8006dce <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006a1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f040 81d4 	bne.w	8006dce <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a2e:	d10f      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6818      	ldr	r0, [r3, #0]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	f7ff f9f8 	bl	8005e30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7ff f98c 	bl	8005d66 <LL_ADC_SetSamplingTimeCommonConfig>
 8006a4e:	e00e      	b.n	8006a6e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6818      	ldr	r0, [r3, #0]
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	6819      	ldr	r1, [r3, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	f7ff f9e7 	bl	8005e30 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	2100      	movs	r1, #0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7ff f97c 	bl	8005d66 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	695a      	ldr	r2, [r3, #20]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	08db      	lsrs	r3, r3, #3
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	005b      	lsls	r3, r3, #1
 8006a80:	fa02 f303 	lsl.w	r3, r2, r3
 8006a84:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b04      	cmp	r3, #4
 8006a8e:	d022      	beq.n	8006ad6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6818      	ldr	r0, [r3, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	6919      	ldr	r1, [r3, #16]
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006aa0:	f7ff f8d6 	bl	8005c50 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	6919      	ldr	r1, [r3, #16]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	f7ff f922 	bl	8005cfa <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d102      	bne.n	8006acc <HAL_ADC_ConfigChannel+0x124>
 8006ac6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aca:	e000      	b.n	8006ace <HAL_ADC_ConfigChannel+0x126>
 8006acc:	2300      	movs	r3, #0
 8006ace:	461a      	mov	r2, r3
 8006ad0:	f7ff f92e 	bl	8005d30 <LL_ADC_SetOffsetSaturation>
 8006ad4:	e17b      	b.n	8006dce <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2100      	movs	r1, #0
 8006adc:	4618      	mov	r0, r3
 8006ade:	f7ff f8db 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d10a      	bne.n	8006b02 <HAL_ADC_ConfigChannel+0x15a>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2100      	movs	r1, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff f8d0 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006af8:	4603      	mov	r3, r0
 8006afa:	0e9b      	lsrs	r3, r3, #26
 8006afc:	f003 021f 	and.w	r2, r3, #31
 8006b00:	e01e      	b.n	8006b40 <HAL_ADC_ConfigChannel+0x198>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2100      	movs	r1, #0
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f7ff f8c5 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006b18:	fa93 f3a3 	rbit	r3, r3
 8006b1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006b20:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b24:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006b28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d101      	bne.n	8006b34 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8006b30:	2320      	movs	r3, #32
 8006b32:	e004      	b.n	8006b3e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006b34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b38:	fab3 f383 	clz	r3, r3
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d105      	bne.n	8006b58 <HAL_ADC_ConfigChannel+0x1b0>
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	0e9b      	lsrs	r3, r3, #26
 8006b52:	f003 031f 	and.w	r3, r3, #31
 8006b56:	e018      	b.n	8006b8a <HAL_ADC_ConfigChannel+0x1e2>
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006b64:	fa93 f3a3 	rbit	r3, r3
 8006b68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006b6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006b70:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006b74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d101      	bne.n	8006b80 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006b7c:	2320      	movs	r3, #32
 8006b7e:	e004      	b.n	8006b8a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8006b80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006b84:	fab3 f383 	clz	r3, r3
 8006b88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006b8a:	429a      	cmp	r2, r3
 8006b8c:	d106      	bne.n	8006b9c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2200      	movs	r2, #0
 8006b94:	2100      	movs	r1, #0
 8006b96:	4618      	mov	r0, r3
 8006b98:	f7ff f894 	bl	8005cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff f878 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006ba8:	4603      	mov	r3, r0
 8006baa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <HAL_ADC_ConfigChannel+0x220>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2101      	movs	r1, #1
 8006bb8:	4618      	mov	r0, r3
 8006bba:	f7ff f86d 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	0e9b      	lsrs	r3, r3, #26
 8006bc2:	f003 021f 	and.w	r2, r3, #31
 8006bc6:	e01e      	b.n	8006c06 <HAL_ADC_ConfigChannel+0x25e>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2101      	movs	r1, #1
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7ff f862 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006bde:	fa93 f3a3 	rbit	r3, r3
 8006be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006bea:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006bf6:	2320      	movs	r3, #32
 8006bf8:	e004      	b.n	8006c04 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8006bfa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006bfe:	fab3 f383 	clz	r3, r3
 8006c02:	b2db      	uxtb	r3, r3
 8006c04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d105      	bne.n	8006c1e <HAL_ADC_ConfigChannel+0x276>
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	0e9b      	lsrs	r3, r3, #26
 8006c18:	f003 031f 	and.w	r3, r3, #31
 8006c1c:	e018      	b.n	8006c50 <HAL_ADC_ConfigChannel+0x2a8>
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c2a:	fa93 f3a3 	rbit	r3, r3
 8006c2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006c32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d101      	bne.n	8006c46 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8006c42:	2320      	movs	r3, #32
 8006c44:	e004      	b.n	8006c50 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006c46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c4a:	fab3 f383 	clz	r3, r3
 8006c4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d106      	bne.n	8006c62 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff f831 	bl	8005cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2102      	movs	r1, #2
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff f815 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006c6e:	4603      	mov	r3, r0
 8006c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <HAL_ADC_ConfigChannel+0x2e6>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	2102      	movs	r1, #2
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff f80a 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006c84:	4603      	mov	r3, r0
 8006c86:	0e9b      	lsrs	r3, r3, #26
 8006c88:	f003 021f 	and.w	r2, r3, #31
 8006c8c:	e01e      	b.n	8006ccc <HAL_ADC_ConfigChannel+0x324>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	2102      	movs	r1, #2
 8006c94:	4618      	mov	r0, r3
 8006c96:	f7fe ffff 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ca0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ca4:	fa93 f3a3 	rbit	r3, r3
 8006ca8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006cb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006cb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d101      	bne.n	8006cc0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006cbc:	2320      	movs	r3, #32
 8006cbe:	e004      	b.n	8006cca <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8006cc0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006cc4:	fab3 f383 	clz	r3, r3
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d105      	bne.n	8006ce4 <HAL_ADC_ConfigChannel+0x33c>
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	0e9b      	lsrs	r3, r3, #26
 8006cde:	f003 031f 	and.w	r3, r3, #31
 8006ce2:	e016      	b.n	8006d12 <HAL_ADC_ConfigChannel+0x36a>
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006cf0:	fa93 f3a3 	rbit	r3, r3
 8006cf4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006cf6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006cf8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006d04:	2320      	movs	r3, #32
 8006d06:	e004      	b.n	8006d12 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006d08:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d0c:	fab3 f383 	clz	r3, r3
 8006d10:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d106      	bne.n	8006d24 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fe ffd0 	bl	8005cc4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2103      	movs	r1, #3
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe ffb4 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <HAL_ADC_ConfigChannel+0x3a8>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	2103      	movs	r1, #3
 8006d40:	4618      	mov	r0, r3
 8006d42:	f7fe ffa9 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006d46:	4603      	mov	r3, r0
 8006d48:	0e9b      	lsrs	r3, r3, #26
 8006d4a:	f003 021f 	and.w	r2, r3, #31
 8006d4e:	e017      	b.n	8006d80 <HAL_ADC_ConfigChannel+0x3d8>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2103      	movs	r1, #3
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe ff9e 	bl	8005c98 <LL_ADC_GetOffsetChannel>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d62:	fa93 f3a3 	rbit	r3, r3
 8006d66:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006d68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d6a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8006d72:	2320      	movs	r3, #32
 8006d74:	e003      	b.n	8006d7e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8006d76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d78:	fab3 f383 	clz	r3, r3
 8006d7c:	b2db      	uxtb	r3, r3
 8006d7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <HAL_ADC_ConfigChannel+0x3f0>
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	0e9b      	lsrs	r3, r3, #26
 8006d92:	f003 031f 	and.w	r3, r3, #31
 8006d96:	e011      	b.n	8006dbc <HAL_ADC_ConfigChannel+0x414>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006da0:	fa93 f3a3 	rbit	r3, r3
 8006da4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006da6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006da8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d101      	bne.n	8006db4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8006db0:	2320      	movs	r3, #32
 8006db2:	e003      	b.n	8006dbc <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006db4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db6:	fab3 f383 	clz	r3, r3
 8006dba:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d106      	bne.n	8006dce <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2103      	movs	r1, #3
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f7fe ff7b 	bl	8005cc4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff f90e 	bl	8005ff4 <LL_ADC_IsEnabled>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	f040 8140 	bne.w	8007060 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6819      	ldr	r1, [r3, #0]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	461a      	mov	r2, r3
 8006dee:	f7ff f84b 	bl	8005e88 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	4a8f      	ldr	r2, [pc, #572]	; (8007034 <HAL_ADC_ConfigChannel+0x68c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	f040 8131 	bne.w	8007060 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d10b      	bne.n	8006e26 <HAL_ADC_ConfigChannel+0x47e>
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	0e9b      	lsrs	r3, r3, #26
 8006e14:	3301      	adds	r3, #1
 8006e16:	f003 031f 	and.w	r3, r3, #31
 8006e1a:	2b09      	cmp	r3, #9
 8006e1c:	bf94      	ite	ls
 8006e1e:	2301      	movls	r3, #1
 8006e20:	2300      	movhi	r3, #0
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	e019      	b.n	8006e5a <HAL_ADC_ConfigChannel+0x4b2>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e2e:	fa93 f3a3 	rbit	r3, r3
 8006e32:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006e34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e36:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d101      	bne.n	8006e42 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8006e3e:	2320      	movs	r3, #32
 8006e40:	e003      	b.n	8006e4a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8006e42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e44:	fab3 f383 	clz	r3, r3
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	2b09      	cmp	r3, #9
 8006e52:	bf94      	ite	ls
 8006e54:	2301      	movls	r3, #1
 8006e56:	2300      	movhi	r3, #0
 8006e58:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d079      	beq.n	8006f52 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d107      	bne.n	8006e7a <HAL_ADC_ConfigChannel+0x4d2>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	0e9b      	lsrs	r3, r3, #26
 8006e70:	3301      	adds	r3, #1
 8006e72:	069b      	lsls	r3, r3, #26
 8006e74:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006e78:	e015      	b.n	8006ea6 <HAL_ADC_ConfigChannel+0x4fe>
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e82:	fa93 f3a3 	rbit	r3, r3
 8006e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8a:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d101      	bne.n	8006e96 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8006e92:	2320      	movs	r3, #32
 8006e94:	e003      	b.n	8006e9e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8006e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e98:	fab3 f383 	clz	r3, r3
 8006e9c:	b2db      	uxtb	r3, r3
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	069b      	lsls	r3, r3, #26
 8006ea2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d109      	bne.n	8006ec6 <HAL_ADC_ConfigChannel+0x51e>
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	0e9b      	lsrs	r3, r3, #26
 8006eb8:	3301      	adds	r3, #1
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	2101      	movs	r1, #1
 8006ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec4:	e017      	b.n	8006ef6 <HAL_ADC_ConfigChannel+0x54e>
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ecc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ece:	fa93 f3a3 	rbit	r3, r3
 8006ed2:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006ed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8006ede:	2320      	movs	r3, #32
 8006ee0:	e003      	b.n	8006eea <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8006ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee4:	fab3 f383 	clz	r3, r3
 8006ee8:	b2db      	uxtb	r3, r3
 8006eea:	3301      	adds	r3, #1
 8006eec:	f003 031f 	and.w	r3, r3, #31
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	ea42 0103 	orr.w	r1, r2, r3
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <HAL_ADC_ConfigChannel+0x574>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	0e9b      	lsrs	r3, r3, #26
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	f003 021f 	and.w	r2, r3, #31
 8006f12:	4613      	mov	r3, r2
 8006f14:	005b      	lsls	r3, r3, #1
 8006f16:	4413      	add	r3, r2
 8006f18:	051b      	lsls	r3, r3, #20
 8006f1a:	e018      	b.n	8006f4e <HAL_ADC_ConfigChannel+0x5a6>
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f24:	fa93 f3a3 	rbit	r3, r3
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006f2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d101      	bne.n	8006f38 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006f34:	2320      	movs	r3, #32
 8006f36:	e003      	b.n	8006f40 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3a:	fab3 f383 	clz	r3, r3
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	3301      	adds	r3, #1
 8006f42:	f003 021f 	and.w	r2, r3, #31
 8006f46:	4613      	mov	r3, r2
 8006f48:	005b      	lsls	r3, r3, #1
 8006f4a:	4413      	add	r3, r2
 8006f4c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f4e:	430b      	orrs	r3, r1
 8006f50:	e081      	b.n	8007056 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d107      	bne.n	8006f6e <HAL_ADC_ConfigChannel+0x5c6>
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	0e9b      	lsrs	r3, r3, #26
 8006f64:	3301      	adds	r3, #1
 8006f66:	069b      	lsls	r3, r3, #26
 8006f68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f6c:	e015      	b.n	8006f9a <HAL_ADC_ConfigChannel+0x5f2>
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	fa93 f3a3 	rbit	r3, r3
 8006f7a:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006f86:	2320      	movs	r3, #32
 8006f88:	e003      	b.n	8006f92 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	fab3 f383 	clz	r3, r3
 8006f90:	b2db      	uxtb	r3, r3
 8006f92:	3301      	adds	r3, #1
 8006f94:	069b      	lsls	r3, r3, #26
 8006f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d109      	bne.n	8006fba <HAL_ADC_ConfigChannel+0x612>
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	0e9b      	lsrs	r3, r3, #26
 8006fac:	3301      	adds	r3, #1
 8006fae:	f003 031f 	and.w	r3, r3, #31
 8006fb2:	2101      	movs	r1, #1
 8006fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb8:	e017      	b.n	8006fea <HAL_ADC_ConfigChannel+0x642>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fc0:	6a3b      	ldr	r3, [r7, #32]
 8006fc2:	fa93 f3a3 	rbit	r3, r3
 8006fc6:	61fb      	str	r3, [r7, #28]
  return result;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d101      	bne.n	8006fd6 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006fd2:	2320      	movs	r3, #32
 8006fd4:	e003      	b.n	8006fde <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd8:	fab3 f383 	clz	r3, r3
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	3301      	adds	r3, #1
 8006fe0:	f003 031f 	and.w	r3, r3, #31
 8006fe4:	2101      	movs	r1, #1
 8006fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fea:	ea42 0103 	orr.w	r1, r2, r3
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d10d      	bne.n	8007016 <HAL_ADC_ConfigChannel+0x66e>
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	0e9b      	lsrs	r3, r3, #26
 8007000:	3301      	adds	r3, #1
 8007002:	f003 021f 	and.w	r2, r3, #31
 8007006:	4613      	mov	r3, r2
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	4413      	add	r3, r2
 800700c:	3b1e      	subs	r3, #30
 800700e:	051b      	lsls	r3, r3, #20
 8007010:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007014:	e01e      	b.n	8007054 <HAL_ADC_ConfigChannel+0x6ac>
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	fa93 f3a3 	rbit	r3, r3
 8007022:	613b      	str	r3, [r7, #16]
  return result;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007028:	69bb      	ldr	r3, [r7, #24]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d104      	bne.n	8007038 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800702e:	2320      	movs	r3, #32
 8007030:	e006      	b.n	8007040 <HAL_ADC_ConfigChannel+0x698>
 8007032:	bf00      	nop
 8007034:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	fab3 f383 	clz	r3, r3
 800703e:	b2db      	uxtb	r3, r3
 8007040:	3301      	adds	r3, #1
 8007042:	f003 021f 	and.w	r2, r3, #31
 8007046:	4613      	mov	r3, r2
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	4413      	add	r3, r2
 800704c:	3b1e      	subs	r3, #30
 800704e:	051b      	lsls	r3, r3, #20
 8007050:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007054:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800705a:	4619      	mov	r1, r3
 800705c:	f7fe fee8 	bl	8005e30 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	4b3f      	ldr	r3, [pc, #252]	; (8007164 <HAL_ADC_ConfigChannel+0x7bc>)
 8007066:	4013      	ands	r3, r2
 8007068:	2b00      	cmp	r3, #0
 800706a:	d071      	beq.n	8007150 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800706c:	483e      	ldr	r0, [pc, #248]	; (8007168 <HAL_ADC_ConfigChannel+0x7c0>)
 800706e:	f7fe fde1 	bl	8005c34 <LL_ADC_GetCommonPathInternalCh>
 8007072:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a3c      	ldr	r2, [pc, #240]	; (800716c <HAL_ADC_ConfigChannel+0x7c4>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d004      	beq.n	800708a <HAL_ADC_ConfigChannel+0x6e2>
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a3a      	ldr	r2, [pc, #232]	; (8007170 <HAL_ADC_ConfigChannel+0x7c8>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d127      	bne.n	80070da <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800708a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800708e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d121      	bne.n	80070da <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800709e:	d157      	bne.n	8007150 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070a0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070a8:	4619      	mov	r1, r3
 80070aa:	482f      	ldr	r0, [pc, #188]	; (8007168 <HAL_ADC_ConfigChannel+0x7c0>)
 80070ac:	f7fe fdaf 	bl	8005c0e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80070b0:	4b30      	ldr	r3, [pc, #192]	; (8007174 <HAL_ADC_ConfigChannel+0x7cc>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	099b      	lsrs	r3, r3, #6
 80070b6:	4a30      	ldr	r2, [pc, #192]	; (8007178 <HAL_ADC_ConfigChannel+0x7d0>)
 80070b8:	fba2 2303 	umull	r2, r3, r2, r3
 80070bc:	099b      	lsrs	r3, r3, #6
 80070be:	1c5a      	adds	r2, r3, #1
 80070c0:	4613      	mov	r3, r2
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	4413      	add	r3, r2
 80070c6:	009b      	lsls	r3, r3, #2
 80070c8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80070ca:	e002      	b.n	80070d2 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1f9      	bne.n	80070cc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80070d8:	e03a      	b.n	8007150 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	4a27      	ldr	r2, [pc, #156]	; (800717c <HAL_ADC_ConfigChannel+0x7d4>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d113      	bne.n	800710c <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80070e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10d      	bne.n	800710c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a22      	ldr	r2, [pc, #136]	; (8007180 <HAL_ADC_ConfigChannel+0x7d8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d02a      	beq.n	8007150 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80070fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007102:	4619      	mov	r1, r3
 8007104:	4818      	ldr	r0, [pc, #96]	; (8007168 <HAL_ADC_ConfigChannel+0x7c0>)
 8007106:	f7fe fd82 	bl	8005c0e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800710a:	e021      	b.n	8007150 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	4a1c      	ldr	r2, [pc, #112]	; (8007184 <HAL_ADC_ConfigChannel+0x7dc>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d11c      	bne.n	8007150 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800711a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d116      	bne.n	8007150 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a16      	ldr	r2, [pc, #88]	; (8007180 <HAL_ADC_ConfigChannel+0x7d8>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d011      	beq.n	8007150 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800712c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007130:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007134:	4619      	mov	r1, r3
 8007136:	480c      	ldr	r0, [pc, #48]	; (8007168 <HAL_ADC_ConfigChannel+0x7c0>)
 8007138:	f7fe fd69 	bl	8005c0e <LL_ADC_SetCommonPathInternalCh>
 800713c:	e008      	b.n	8007150 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007142:	f043 0220 	orr.w	r2, r3, #32
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800714a:	2301      	movs	r3, #1
 800714c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007158:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800715c:	4618      	mov	r0, r3
 800715e:	37d8      	adds	r7, #216	; 0xd8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	80080000 	.word	0x80080000
 8007168:	50000300 	.word	0x50000300
 800716c:	c3210000 	.word	0xc3210000
 8007170:	90c00010 	.word	0x90c00010
 8007174:	20000190 	.word	0x20000190
 8007178:	053e2d63 	.word	0x053e2d63
 800717c:	c7520000 	.word	0xc7520000
 8007180:	50000100 	.word	0x50000100
 8007184:	cb840000 	.word	0xcb840000

08007188 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8007190:	2300      	movs	r3, #0
 8007192:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4618      	mov	r0, r3
 800719a:	f7fe ff2b 	bl	8005ff4 <LL_ADC_IsEnabled>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d169      	bne.n	8007278 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	4b36      	ldr	r3, [pc, #216]	; (8007284 <ADC_Enable+0xfc>)
 80071ac:	4013      	ands	r3, r2
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00d      	beq.n	80071ce <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b6:	f043 0210 	orr.w	r2, r3, #16
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80071c2:	f043 0201 	orr.w	r2, r3, #1
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e055      	b.n	800727a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fee6 	bl	8005fa4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80071d8:	482b      	ldr	r0, [pc, #172]	; (8007288 <ADC_Enable+0x100>)
 80071da:	f7fe fd2b 	bl	8005c34 <LL_ADC_GetCommonPathInternalCh>
 80071de:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80071e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d013      	beq.n	8007210 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80071e8:	4b28      	ldr	r3, [pc, #160]	; (800728c <ADC_Enable+0x104>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	099b      	lsrs	r3, r3, #6
 80071ee:	4a28      	ldr	r2, [pc, #160]	; (8007290 <ADC_Enable+0x108>)
 80071f0:	fba2 2303 	umull	r2, r3, r2, r3
 80071f4:	099b      	lsrs	r3, r3, #6
 80071f6:	1c5a      	adds	r2, r3, #1
 80071f8:	4613      	mov	r3, r2
 80071fa:	005b      	lsls	r3, r3, #1
 80071fc:	4413      	add	r3, r2
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8007202:	e002      	b.n	800720a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	3b01      	subs	r3, #1
 8007208:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1f9      	bne.n	8007204 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007210:	f7fe fcbc 	bl	8005b8c <HAL_GetTick>
 8007214:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007216:	e028      	b.n	800726a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4618      	mov	r0, r3
 800721e:	f7fe fee9 	bl	8005ff4 <LL_ADC_IsEnabled>
 8007222:	4603      	mov	r3, r0
 8007224:	2b00      	cmp	r3, #0
 8007226:	d104      	bne.n	8007232 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe feb9 	bl	8005fa4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007232:	f7fe fcab 	bl	8005b8c <HAL_GetTick>
 8007236:	4602      	mov	r2, r0
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	1ad3      	subs	r3, r2, r3
 800723c:	2b02      	cmp	r3, #2
 800723e:	d914      	bls.n	800726a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	2b01      	cmp	r3, #1
 800724c:	d00d      	beq.n	800726a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007252:	f043 0210 	orr.w	r2, r3, #16
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800725e:	f043 0201 	orr.w	r2, r3, #1
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e007      	b.n	800727a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b01      	cmp	r3, #1
 8007276:	d1cf      	bne.n	8007218 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007278:	2300      	movs	r3, #0
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	8000003f 	.word	0x8000003f
 8007288:	50000300 	.word	0x50000300
 800728c:	20000190 	.word	0x20000190
 8007290:	053e2d63 	.word	0x053e2d63

08007294 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe feba 	bl	800601a <LL_ADC_IsDisableOngoing>
 80072a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe fea1 	bl	8005ff4 <LL_ADC_IsEnabled>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d047      	beq.n	8007348 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d144      	bne.n	8007348 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 030d 	and.w	r3, r3, #13
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d10c      	bne.n	80072e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7fe fe7b 	bl	8005fcc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	2203      	movs	r2, #3
 80072dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80072de:	f7fe fc55 	bl	8005b8c <HAL_GetTick>
 80072e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80072e4:	e029      	b.n	800733a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072ea:	f043 0210 	orr.w	r2, r3, #16
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072f6:	f043 0201 	orr.w	r2, r3, #1
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80072fe:	2301      	movs	r3, #1
 8007300:	e023      	b.n	800734a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007302:	f7fe fc43 	bl	8005b8c <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	2b02      	cmp	r3, #2
 800730e:	d914      	bls.n	800733a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	f003 0301 	and.w	r3, r3, #1
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00d      	beq.n	800733a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007322:	f043 0210 	orr.w	r2, r3, #16
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800732e:	f043 0201 	orr.w	r2, r3, #1
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e007      	b.n	800734a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1dc      	bne.n	8007302 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3710      	adds	r7, #16
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}

08007352 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b084      	sub	sp, #16
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007368:	2b00      	cmp	r3, #0
 800736a:	d14b      	bne.n	8007404 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007370:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f003 0308 	and.w	r3, r3, #8
 8007382:	2b00      	cmp	r3, #0
 8007384:	d021      	beq.n	80073ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fcfe 	bl	8005d8c <LL_ADC_REG_IsTriggerSourceSWStart>
 8007390:	4603      	mov	r3, r0
 8007392:	2b00      	cmp	r3, #0
 8007394:	d032      	beq.n	80073fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	68db      	ldr	r3, [r3, #12]
 800739c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d12b      	bne.n	80073fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d11f      	bne.n	80073fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073c0:	f043 0201 	orr.w	r2, r3, #1
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80073c8:	e018      	b.n	80073fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d111      	bne.n	80073fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d105      	bne.n	80073fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f4:	f043 0201 	orr.w	r2, r3, #1
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80073fc:	68f8      	ldr	r0, [r7, #12]
 80073fe:	f7ff faab 	bl	8006958 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007402:	e00e      	b.n	8007422 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007408:	f003 0310 	and.w	r3, r3, #16
 800740c:	2b00      	cmp	r3, #0
 800740e:	d003      	beq.n	8007418 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f7ff fabf 	bl	8006994 <HAL_ADC_ErrorCallback>
}
 8007416:	e004      	b.n	8007422 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	4798      	blx	r3
}
 8007422:	bf00      	nop
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007438:	68f8      	ldr	r0, [r7, #12]
 800743a:	f7ff fa97 	bl	800696c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}

08007446 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007446:	b580      	push	{r7, lr}
 8007448:	b084      	sub	sp, #16
 800744a:	af00      	add	r7, sp, #0
 800744c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007452:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007458:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007464:	f043 0204 	orr.w	r2, r3, #4
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800746c:	68f8      	ldr	r0, [r7, #12]
 800746e:	f7ff fa91 	bl	8006994 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007472:	bf00      	nop
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <LL_ADC_SetCommonPathInternalCh>:
{
 800747a:	b480      	push	{r7}
 800747c:	b083      	sub	sp, #12
 800747e:	af00      	add	r7, sp, #0
 8007480:	6078      	str	r0, [r7, #4]
 8007482:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	609a      	str	r2, [r3, #8]
}
 8007494:	bf00      	nop
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <LL_ADC_GetCommonPathInternalCh>:
{
 80074a0:	b480      	push	{r7}
 80074a2:	b083      	sub	sp, #12
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <LL_ADC_SetOffset>:
{
 80074bc:	b480      	push	{r7}
 80074be:	b087      	sub	sp, #28
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
 80074c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	3360      	adds	r3, #96	; 0x60
 80074ce:	461a      	mov	r2, r3
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	4413      	add	r3, r2
 80074d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	4b08      	ldr	r3, [pc, #32]	; (8007500 <LL_ADC_SetOffset+0x44>)
 80074de:	4013      	ands	r3, r2
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80074e6:	683a      	ldr	r2, [r7, #0]
 80074e8:	430a      	orrs	r2, r1
 80074ea:	4313      	orrs	r3, r2
 80074ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	601a      	str	r2, [r3, #0]
}
 80074f4:	bf00      	nop
 80074f6:	371c      	adds	r7, #28
 80074f8:	46bd      	mov	sp, r7
 80074fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fe:	4770      	bx	lr
 8007500:	03fff000 	.word	0x03fff000

08007504 <LL_ADC_GetOffsetChannel>:
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3360      	adds	r3, #96	; 0x60
 8007512:	461a      	mov	r2, r3
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	60fb      	str	r3, [r7, #12]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007524:	4618      	mov	r0, r3
 8007526:	3714      	adds	r7, #20
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr

08007530 <LL_ADC_SetOffsetState>:
{
 8007530:	b480      	push	{r7}
 8007532:	b087      	sub	sp, #28
 8007534:	af00      	add	r7, sp, #0
 8007536:	60f8      	str	r0, [r7, #12]
 8007538:	60b9      	str	r1, [r7, #8]
 800753a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	3360      	adds	r3, #96	; 0x60
 8007540:	461a      	mov	r2, r3
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	4413      	add	r3, r2
 8007548:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	431a      	orrs	r2, r3
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	601a      	str	r2, [r3, #0]
}
 800755a:	bf00      	nop
 800755c:	371c      	adds	r7, #28
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <LL_ADC_SetOffsetSign>:
{
 8007566:	b480      	push	{r7}
 8007568:	b087      	sub	sp, #28
 800756a:	af00      	add	r7, sp, #0
 800756c:	60f8      	str	r0, [r7, #12]
 800756e:	60b9      	str	r1, [r7, #8]
 8007570:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3360      	adds	r3, #96	; 0x60
 8007576:	461a      	mov	r2, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	009b      	lsls	r3, r3, #2
 800757c:	4413      	add	r3, r2
 800757e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	431a      	orrs	r2, r3
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	601a      	str	r2, [r3, #0]
}
 8007590:	bf00      	nop
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr

0800759c <LL_ADC_SetOffsetSaturation>:
{
 800759c:	b480      	push	{r7}
 800759e:	b087      	sub	sp, #28
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	3360      	adds	r3, #96	; 0x60
 80075ac:	461a      	mov	r2, r3
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	009b      	lsls	r3, r3, #2
 80075b2:	4413      	add	r3, r2
 80075b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	431a      	orrs	r2, r3
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	601a      	str	r2, [r3, #0]
}
 80075c6:	bf00      	nop
 80075c8:	371c      	adds	r7, #28
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr

080075d2 <LL_ADC_SetSamplingTimeCommonConfig>:
{
 80075d2:	b480      	push	{r7}
 80075d4:	b083      	sub	sp, #12
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	431a      	orrs	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	615a      	str	r2, [r3, #20]
}
 80075ec:	bf00      	nop
 80075ee:	370c      	adds	r7, #12
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <LL_ADC_INJ_GetTrigAuto>:
{
 80075f8:	b480      	push	{r7}
 80075fa:	b083      	sub	sp, #12
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
}
 8007608:	4618      	mov	r0, r3
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <LL_ADC_SetChannelSamplingTime>:
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	3314      	adds	r3, #20
 8007624:	461a      	mov	r2, r3
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	0e5b      	lsrs	r3, r3, #25
 800762a:	009b      	lsls	r3, r3, #2
 800762c:	f003 0304 	and.w	r3, r3, #4
 8007630:	4413      	add	r3, r2
 8007632:	617b      	str	r3, [r7, #20]
  MODIFY_REG(*preg,
 8007634:	697b      	ldr	r3, [r7, #20]
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	0d1b      	lsrs	r3, r3, #20
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	2107      	movs	r1, #7
 8007642:	fa01 f303 	lsl.w	r3, r1, r3
 8007646:	43db      	mvns	r3, r3
 8007648:	401a      	ands	r2, r3
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	0d1b      	lsrs	r3, r3, #20
 800764e:	f003 031f 	and.w	r3, r3, #31
 8007652:	6879      	ldr	r1, [r7, #4]
 8007654:	fa01 f303 	lsl.w	r3, r1, r3
 8007658:	431a      	orrs	r2, r3
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	601a      	str	r2, [r3, #0]
}
 800765e:	bf00      	nop
 8007660:	371c      	adds	r7, #28
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
	...

0800766c <LL_ADC_SetChannelSingleDiff>:
{
 800766c:	b480      	push	{r7}
 800766e:	b085      	sub	sp, #20
 8007670:	af00      	add	r7, sp, #0
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->DIFSEL,
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007684:	43db      	mvns	r3, r3
 8007686:	401a      	ands	r2, r3
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f003 0318 	and.w	r3, r3, #24
 800768e:	4908      	ldr	r1, [pc, #32]	; (80076b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8007690:	40d9      	lsrs	r1, r3
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	400b      	ands	r3, r1
 8007696:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800769a:	431a      	orrs	r2, r3
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80076a2:	bf00      	nop
 80076a4:	3714      	adds	r7, #20
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	0007ffff 	.word	0x0007ffff

080076b4 <LL_ADC_GetMultimode>:
{
 80076b4:	b480      	push	{r7}
 80076b6:	b083      	sub	sp, #12
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f003 031f 	and.w	r3, r3, #31
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <LL_ADC_IsEnabled>:
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	689b      	ldr	r3, [r3, #8]
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d101      	bne.n	80076e8 <LL_ADC_IsEnabled+0x18>
 80076e4:	2301      	movs	r3, #1
 80076e6:	e000      	b.n	80076ea <LL_ADC_IsEnabled+0x1a>
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	370c      	adds	r7, #12
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <LL_ADC_StartCalibration>:
{
 80076f6:	b480      	push	{r7}
 80076f8:	b083      	sub	sp, #12
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007708:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007712:	4313      	orrs	r3, r2
 8007714:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	609a      	str	r2, [r3, #8]
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <LL_ADC_IsCalibrationOnGoing>:
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800773c:	d101      	bne.n	8007742 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800773e:	2301      	movs	r3, #1
 8007740:	e000      	b.n	8007744 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007742:	2300      	movs	r3, #0
}
 8007744:	4618      	mov	r0, r3
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <LL_ADC_REG_IsConversionOngoing>:
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b04      	cmp	r3, #4
 8007762:	d101      	bne.n	8007768 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007764:	2301      	movs	r3, #1
 8007766:	e000      	b.n	800776a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007768:	2300      	movs	r3, #0
}
 800776a:	4618      	mov	r0, r3
 800776c:	370c      	adds	r7, #12
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr

08007776 <LL_ADC_INJ_StartConversion>:
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007786:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800778a:	f043 0208 	orr.w	r2, r3, #8
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	609a      	str	r2, [r3, #8]
}
 8007792:	bf00      	nop
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <LL_ADC_INJ_IsConversionOngoing>:
{
 800779e:	b480      	push	{r7}
 80077a0:	b083      	sub	sp, #12
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f003 0308 	and.w	r3, r3, #8
 80077ae:	2b08      	cmp	r3, #8
 80077b0:	d101      	bne.n	80077b6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80077b2:	2301      	movs	r3, #1
 80077b4:	e000      	b.n	80077b8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80077b6:	2300      	movs	r3, #0
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d101      	bne.n	80077e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80077dc:	2302      	movs	r3, #2
 80077de:	e04d      	b.n	800787c <HAL_ADCEx_Calibration_Start+0xb8>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fd53 	bl	8007294 <ADC_Disable>
 80077ee:	4603      	mov	r3, r0
 80077f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80077f2:	7bfb      	ldrb	r3, [r7, #15]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d136      	bne.n	8007866 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8007800:	f023 0302 	bic.w	r3, r3, #2
 8007804:	f043 0202 	orr.w	r2, r3, #2
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	6839      	ldr	r1, [r7, #0]
 8007812:	4618      	mov	r0, r3
 8007814:	f7ff ff6f 	bl	80076f6 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007818:	e014      	b.n	8007844 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	3301      	adds	r3, #1
 800781e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	4a18      	ldr	r2, [pc, #96]	; (8007884 <HAL_ADCEx_Calibration_Start+0xc0>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d90d      	bls.n	8007844 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800782c:	f023 0312 	bic.w	r3, r3, #18
 8007830:	f043 0210 	orr.w	r2, r3, #16
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	e01b      	b.n	800787c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff ff6d 	bl	8007728 <LL_ADC_IsCalibrationOnGoing>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e2      	bne.n	800781a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007858:	f023 0303 	bic.w	r3, r3, #3
 800785c:	f043 0201 	orr.w	r2, r3, #1
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	65da      	str	r2, [r3, #92]	; 0x5c
 8007864:	e005      	b.n	8007872 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800786a:	f043 0210 	orr.w	r2, r3, #16
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	0004de01 	.word	0x0004de01

08007888 <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_config_injected_queue;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007890:	486e      	ldr	r0, [pc, #440]	; (8007a4c <HAL_ADCEx_InjectedStart_IT+0x1c4>)
 8007892:	f7ff ff0f 	bl	80076b4 <LL_ADC_GetMultimode>
 8007896:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff ff7e 	bl	800779e <LL_ADC_INJ_IsConversionOngoing>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <HAL_ADCEx_InjectedStart_IT+0x24>
  {
    return HAL_BUSY;
 80078a8:	2302      	movs	r3, #2
 80078aa:	e0ca      	b.n	8007a42 <HAL_ADCEx_InjectedStart_IT+0x1ba>
       If JQDIS is not set at that point, returns an error
       - since software trigger detection is disabled. User needs to
       resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
       - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
         the queue is empty */
    tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68db      	ldr	r3, [r3, #12]
 80078b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078b6:	613b      	str	r3, [r7, #16]

    if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078be:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d10a      	bne.n	80078dc <HAL_ADCEx_InjectedStart_IT+0x54>
        && (tmp_config_injected_queue == 0UL)
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d107      	bne.n	80078dc <HAL_ADCEx_InjectedStart_IT+0x54>
       )
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078d0:	f043 0220 	orr.w	r2, r3, #32
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e0b2      	b.n	8007a42 <HAL_ADCEx_InjectedStart_IT+0x1ba>
    }

    /* Process locked */
    __HAL_LOCK(hadc);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d101      	bne.n	80078ea <HAL_ADCEx_InjectedStart_IT+0x62>
 80078e6:	2302      	movs	r3, #2
 80078e8:	e0ab      	b.n	8007a42 <HAL_ADCEx_InjectedStart_IT+0x1ba>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80078f2:	6878      	ldr	r0, [r7, #4]
 80078f4:	f7ff fc48 	bl	8007188 <ADC_Enable>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	f040 809a 	bne.w	8007a38 <HAL_ADCEx_InjectedStart_IT+0x1b0>
    {
      /* Check if a regular conversion is ongoing */
      if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800790c:	2b00      	cmp	r3, #0
 800790e:	d006      	beq.n	800791e <HAL_ADCEx_InjectedStart_IT+0x96>
      {
        /* Reset ADC error code field related to injected conversions only */
        CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007914:	f023 0208 	bic.w	r2, r3, #8
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	661a      	str	r2, [r3, #96]	; 0x60
 800791c:	e002      	b.n	8007924 <HAL_ADCEx_InjectedStart_IT+0x9c>
      }
      else
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007928:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800792c:	f023 0301 	bic.w	r3, r3, #1
 8007930:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	4a44      	ldr	r2, [pc, #272]	; (8007a50 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 800793e:	4293      	cmp	r3, r2
 8007940:	d002      	beq.n	8007948 <HAL_ADCEx_InjectedStart_IT+0xc0>
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	e001      	b.n	800794c <HAL_ADCEx_InjectedStart_IT+0xc4>
 8007948:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	4293      	cmp	r3, r2
 8007952:	d002      	beq.n	800795a <HAL_ADCEx_InjectedStart_IT+0xd2>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d105      	bne.n	8007966 <HAL_ADCEx_InjectedStart_IT+0xde>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800795e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Clear ADC group injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	2260      	movs	r2, #96	; 0x60
 800796c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

      /* Enable ADC Injected context queue overflow interrupt if this feature   */
      /* is enabled.                                                            */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d007      	beq.n	8007994 <HAL_ADCEx_InjectedStart_IT+0x10c>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007992:	605a      	str	r2, [r3, #4]
      }

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	699b      	ldr	r3, [r3, #24]
 8007998:	2b08      	cmp	r3, #8
 800799a:	d110      	bne.n	80079be <HAL_ADCEx_InjectedStart_IT+0x136>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0220 	bic.w	r2, r2, #32
 80079aa:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079ba:	605a      	str	r2, [r3, #4]
          break;
 80079bc:	e010      	b.n	80079e0 <HAL_ADCEx_InjectedStart_IT+0x158>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	685a      	ldr	r2, [r3, #4]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079cc:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	f042 0220 	orr.w	r2, r2, #32
 80079dc:	605a      	str	r2, [r3, #4]
          break;
 80079de:	bf00      	nop
      /*    - if multimode only concerns regular conversion, ADC is enabled     */
      /*     and conversion is started.                                         */
      /* If ADC is master or independent,                                       */
      /*    - ADC is enabled and conversion is started.                         */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a1a      	ldr	r2, [pc, #104]	; (8007a50 <HAL_ADCEx_InjectedStart_IT+0x1c8>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d002      	beq.n	80079f0 <HAL_ADCEx_InjectedStart_IT+0x168>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	e001      	b.n	80079f4 <HAL_ADCEx_InjectedStart_IT+0x16c>
 80079f0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	6812      	ldr	r2, [r2, #0]
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d008      	beq.n	8007a0e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d005      	beq.n	8007a0e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2b06      	cmp	r3, #6
 8007a06:	d002      	beq.n	8007a0e <HAL_ADCEx_InjectedStart_IT+0x186>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	2b07      	cmp	r3, #7
 8007a0c:	d10d      	bne.n	8007a2a <HAL_ADCEx_InjectedStart_IT+0x1a2>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7ff fdf0 	bl	80075f8 <LL_ADC_INJ_GetTrigAuto>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d110      	bne.n	8007a40 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        {
          LL_ADC_INJ_StartConversion(hadc->Instance);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4618      	mov	r0, r3
 8007a24:	f7ff fea7 	bl	8007776 <LL_ADC_INJ_StartConversion>
        if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 8007a28:	e00a      	b.n	8007a40 <HAL_ADCEx_InjectedStart_IT+0x1b8>
        }
      }
      else
      {
        /* ADC instance is not a multimode slave instance with multimode injected conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	65da      	str	r2, [r3, #92]	; 0x5c
 8007a36:	e003      	b.n	8007a40 <HAL_ADCEx_InjectedStart_IT+0x1b8>

    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return tmp_hal_status;
 8007a40:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3718      	adds	r7, #24
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	50000300 	.word	0x50000300
 8007a50:	50000100 	.word	0x50000100

08007a54 <HAL_ADCEx_InjectedGetValue>:
  *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
  *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(const ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));

  /* Get ADC converted value */
  switch (InjectedRank)
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f240 321b 	movw	r2, #795	; 0x31b
 8007a64:	4293      	cmp	r3, r2
 8007a66:	d00e      	beq.n	8007a86 <HAL_ADCEx_InjectedGetValue+0x32>
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	f5b3 7f47 	cmp.w	r3, #796	; 0x31c
 8007a6e:	d21c      	bcs.n	8007aaa <HAL_ADCEx_InjectedGetValue+0x56>
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	f240 120f 	movw	r2, #271	; 0x10f
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d011      	beq.n	8007a9e <HAL_ADCEx_InjectedGetValue+0x4a>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	f240 2215 	movw	r2, #533	; 0x215
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d006      	beq.n	8007a92 <HAL_ADCEx_InjectedGetValue+0x3e>
 8007a84:	e011      	b.n	8007aaa <HAL_ADCEx_InjectedGetValue+0x56>
  {
    case ADC_INJECTED_RANK_4:
      tmp_jdr = hadc->Instance->JDR4;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a8e:	60fb      	str	r3, [r7, #12]
      break;
 8007a90:	e011      	b.n	8007ab6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3:
      tmp_jdr = hadc->Instance->JDR3;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a9a:	60fb      	str	r3, [r7, #12]
      break;
 8007a9c:	e00b      	b.n	8007ab6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2:
      tmp_jdr = hadc->Instance->JDR2;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aa6:	60fb      	str	r3, [r7, #12]
      break;
 8007aa8:	e005      	b.n	8007ab6 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ab2:	60fb      	str	r3, [r7, #12]
      break;
 8007ab4:	bf00      	nop
  }

  /* Return ADC converted value */
  return tmp_jdr;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3714      	adds	r7, #20
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b083      	sub	sp, #12
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8007af4:	bf00      	nop
 8007af6:	370c      	adds	r7, #12
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr

08007b00 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8007b08:	bf00      	nop
 8007b0a:	370c      	adds	r7, #12
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b0b6      	sub	sp, #216	; 0xd8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmp_offset_shifted;
  uint32_t tmp_config_internal_channel;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0;
 8007b24:	2300      	movs	r3, #0
 8007b26:	60bb      	str	r3, [r7, #8]

  uint32_t tmp_jsqr_context_queue_being_built = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d102      	bne.n	8007b3e <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	f000 bcb5 	b.w	80084a8 <HAL_ADCEx_InjectedConfigChannel+0x994>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2201      	movs	r2, #1
 8007b42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	695b      	ldr	r3, [r3, #20]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d003      	beq.n	8007b56 <HAL_ADCEx_InjectedConfigChannel+0x42>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d130      	bne.n	8007bb8 <HAL_ADCEx_InjectedConfigChannel+0xa4>
    /*    (scan mode disabled, only rank 1 used)                              */
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8007b56:	683b      	ldr	r3, [r7, #0]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	2b09      	cmp	r3, #9
 8007b5c:	d179      	bne.n	8007c52 <HAL_ADCEx_InjectedConfigChannel+0x13e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d010      	beq.n	8007b88 <HAL_ADCEx_InjectedConfigChannel+0x74>
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	0e9b      	lsrs	r3, r3, #26
 8007b6c:	025b      	lsls	r3, r3, #9
 8007b6e:	f403 5278 	and.w	r2, r3, #15872	; 0x3e00
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b76:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007b7a:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8007b80:	4313      	orrs	r3, r2
 8007b82:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b86:	e007      	b.n	8007b98 <HAL_ADCEx_InjectedConfigChannel+0x84>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	0e9b      	lsrs	r3, r3, #26
 8007b8e:	025b      	lsls	r3, r3, #9
 8007b90:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8007b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      }

      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007b9e:	4b84      	ldr	r3, [pc, #528]	; (8007db0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8007ba0:	4013      	ands	r3, r2
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	6812      	ldr	r2, [r2, #0]
 8007ba6:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007baa:	430b      	orrs	r3, r1
 8007bac:	64d3      	str	r3, [r2, #76]	; 0x4c
      /* For debug and informative reasons, hadc handle saves JSQR setting */
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bb4:	665a      	str	r2, [r3, #100]	; 0x64
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8007bb6:	e04c      	b.n	8007c52 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d11d      	bne.n	8007bfc <HAL_ADCEx_InjectedConfigChannel+0xe8>
    {
      /* Initialize number of channels that will be configured on the context */
      /*  being built                                                         */
      hadc->InjectionConfig.ChannelCount = pConfigInjected->InjectedNbrOfConversion;
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	6a1a      	ldr	r2, [r3, #32]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	669a      	str	r2, [r3, #104]	; 0x68
      /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
         call, this context will be written in JSQR register at the last call.
         At this point, the context is merely reset  */
      hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d00d      	beq.n	8007bf2 <HAL_ADCEx_InjectedConfigChannel+0xde>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	6a1b      	ldr	r3, [r3, #32]
 8007bda:	1e5a      	subs	r2, r3, #1
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007be0:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8007be4:	431a      	orrs	r2, r3
                                              | pConfigInjected->ExternalTrigInjecConvEdge
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bf0:	e004      	b.n	8007bfc <HAL_ADCEx_InjectedConfigChannel+0xe8>
                                             );
      }
      else
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	6a1b      	ldr	r3, [r3, #32]
 8007bf6:	3b01      	subs	r3, #1
 8007bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	0e9b      	lsrs	r3, r3, #26
 8007c02:	f003 021f 	and.w	r2, r3, #31
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f003 031f 	and.w	r3, r3, #31
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c20:	1e5a      	subs	r2, r3, #1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	669a      	str	r2, [r3, #104]	; 0x68

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007c2a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	665a      	str	r2, [r3, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d10a      	bne.n	8007c52 <HAL_ADCEx_InjectedConfigChannel+0x13e>
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c42:	4b5b      	ldr	r3, [pc, #364]	; (8007db0 <HAL_ADCEx_InjectedConfigChannel+0x29c>)
 8007c44:	4013      	ands	r3, r2
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	6e51      	ldr	r1, [r2, #100]	; 0x64
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	6812      	ldr	r2, [r2, #0]
 8007c4e:	430b      	orrs	r3, r1
 8007c50:	64d3      	str	r3, [r2, #76]	; 0x4c
  /* conversion on going on injected group:                                   */
  /*  - Injected context queue: Queue disable (active context is kept) or     */
  /*    enable (context decremented, up to 2 contexts queued)                 */
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff fda1 	bl	800779e <LL_ADC_INJ_IsConversionOngoing>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d124      	bne.n	8007cac <HAL_ADCEx_InjectedConfigChannel+0x198>
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8007c62:	683b      	ldr	r3, [r7, #0]
 8007c64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d112      	bne.n	8007c92 <HAL_ADCEx_InjectedConfigChannel+0x17e>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007c7c:	055a      	lsls	r2, r3, #21
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c84:	051b      	lsls	r3, r3, #20
 8007c86:	431a      	orrs	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	60da      	str	r2, [r3, #12]
 8007c90:	e00c      	b.n	8007cac <HAL_ADCEx_InjectedConfigChannel+0x198>
    }
    /* If auto-injected mode is enabled: Injected discontinuous setting is    */
    /* discarded.                                                             */
    else
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007ca2:	055a      	lsls	r2, r3, #21
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	60da      	str	r2, [r3, #12]
  /* conversion on going on regular and injected groups:                      */
  /*  - Automatic injected conversion: can be enabled if injected group       */
  /*    external triggers are disabled.                                       */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7ff fd4d 	bl	8007750 <LL_ADC_REG_IsConversionOngoing>
 8007cb6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7ff fd6d 	bl	800779e <LL_ADC_INJ_IsConversionOngoing>
 8007cc4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8

  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007cc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	f040 822e 	bne.w	800812e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007cd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	f040 8229 	bne.w	800812e <HAL_ADCEx_InjectedConfigChannel+0x61a>
     )
  {
    /* If injected group external triggers are disabled (set to injected      */
    /* software start): no constraint                                         */
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d003      	beq.n	8007cec <HAL_ADCEx_InjectedConfigChannel+0x1d8>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d116      	bne.n	8007d1a <HAL_ADCEx_InjectedConfigChannel+0x206>
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d108      	bne.n	8007d08 <HAL_ADCEx_InjectedConfigChannel+0x1f4>
      {
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68da      	ldr	r2, [r3, #12]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8007d04:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007d06:	e01f      	b.n	8007d48 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	68da      	ldr	r2, [r3, #12]
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007d16:	60da      	str	r2, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007d18:	e016      	b.n	8007d48 <HAL_ADCEx_InjectedConfigChannel+0x234>
    }
    /* If Automatic injected conversion was intended to be set and could not  */
    /* due to injected group external triggers enabled, error is reported.    */
    else
    {
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d109      	bne.n	8007d38 <HAL_ADCEx_InjectedConfigChannel+0x224>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d28:	f043 0220 	orr.w	r2, r3, #32
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	65da      	str	r2, [r3, #92]	; 0x5c

        tmp_hal_status = HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8007d36:	e007      	b.n	8007d48 <HAL_ADCEx_InjectedConfigChannel+0x234>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68da      	ldr	r2, [r3, #12]
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007d46:	60da      	str	r2, [r3, #12]
      }
    }

    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d110      	bne.n	8007d74 <HAL_ADCEx_InjectedConfigChannel+0x260>
      /* Configuration of Injected Oversampler:                                 */
      /*  - Oversampling Ratio                                                  */
      /*  - Right bit shift                                                     */

      /* Enable OverSampling mode */
      MODIFY_REG(hadc->Instance->CFGR2,
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	430b      	orrs	r3, r1
 8007d66:	431a      	orrs	r2, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f042 0202 	orr.w	r2, r2, #2
 8007d70:	611a      	str	r2, [r3, #16]
 8007d72:	e007      	b.n	8007d84 <HAL_ADCEx_InjectedConfigChannel+0x270>
                );
    }
    else
    {
      /* Disable Regular OverSampling */
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	691a      	ldr	r2, [r3, #16]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f022 0202 	bic.w	r2, r2, #2
 8007d82:	611a      	str	r2, [r3, #16]
    }

    /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d8c:	d112      	bne.n	8007db4 <HAL_ADCEx_InjectedConfigChannel+0x2a0>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	6818      	ldr	r0, [r3, #0]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	2200      	movs	r2, #0
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f7ff fc3b 	bl	8007614 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff fc13 	bl	80075d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8007dac:	e011      	b.n	8007dd2 <HAL_ADCEx_InjectedConfigChannel+0x2be>
 8007dae:	bf00      	nop
 8007db0:	04104000 	.word	0x04104000
    }
    else
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6818      	ldr	r0, [r3, #0]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	6819      	ldr	r1, [r3, #0]
                                    pConfigInjected->InjectedSamplingTime);
 8007dbc:	683b      	ldr	r3, [r7, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfigInjected->InjectedChannel,
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	f7ff fc27 	bl	8007614 <LL_ADC_SetChannelSamplingTime>

      /* Set ADC sampling time common configuration */
      LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2100      	movs	r1, #0
 8007dcc:	4618      	mov	r0, r3
 8007dce:	f7ff fc00 	bl	80075d2 <LL_ADC_SetSamplingTimeCommonConfig>

    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset with respect to the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	695a      	ldr	r2, [r3, #20]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	08db      	lsrs	r3, r3, #3
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	005b      	lsls	r3, r3, #1
 8007de4:	fa02 f303 	lsl.w	r3, r2, r3
 8007de8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	691b      	ldr	r3, [r3, #16]
 8007df0:	2b04      	cmp	r3, #4
 8007df2:	d022      	beq.n	8007e3a <HAL_ADCEx_InjectedConfigChannel+0x326>
    {
      /* Set ADC selected offset number */
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6818      	ldr	r0, [r3, #0]
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	6919      	ldr	r1, [r3, #16]
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681a      	ldr	r2, [r3, #0]
 8007e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007e04:	f7ff fb5a 	bl	80074bc <LL_ADC_SetOffset>
                       tmp_offset_shifted);

      /* Set ADC selected offset sign & saturation */
      LL_ADC_SetOffsetSign(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedOffsetSign);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6818      	ldr	r0, [r3, #0]
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	6919      	ldr	r1, [r3, #16]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	461a      	mov	r2, r3
 8007e16:	f7ff fba6 	bl	8007566 <LL_ADC_SetOffsetSign>
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6818      	ldr	r0, [r3, #0]
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	6919      	ldr	r1, [r3, #16]
                                 (pConfigInjected->InjectedOffsetSaturation == ENABLE) ?
 8007e22:	683b      	ldr	r3, [r7, #0]
 8007e24:	7f1b      	ldrb	r3, [r3, #28]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d102      	bne.n	8007e30 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 8007e2a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007e2e:	e000      	b.n	8007e32 <HAL_ADCEx_InjectedConfigChannel+0x31e>
 8007e30:	2300      	movs	r3, #0
 8007e32:	461a      	mov	r2, r3
 8007e34:	f7ff fbb2 	bl	800759c <LL_ADC_SetOffsetSaturation>
 8007e38:	e179      	b.n	800812e <HAL_ADCEx_InjectedConfigChannel+0x61a>
    }
    else
    {
      /* Scan each offset register to check if the selected channel is targeted. */
      /* If this is the case, the corresponding offset number is disabled.       */
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2100      	movs	r1, #0
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7ff fb5f 	bl	8007504 <LL_ADC_GetOffsetChannel>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10a      	bne.n	8007e66 <HAL_ADCEx_InjectedConfigChannel+0x352>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2100      	movs	r1, #0
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7ff fb54 	bl	8007504 <LL_ADC_GetOffsetChannel>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	0e9b      	lsrs	r3, r3, #26
 8007e60:	f003 021f 	and.w	r2, r3, #31
 8007e64:	e01e      	b.n	8007ea4 <HAL_ADCEx_InjectedConfigChannel+0x390>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7ff fb49 	bl	8007504 <LL_ADC_GetOffsetChannel>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e78:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e7c:	fa93 f3a3 	rbit	r3, r3
 8007e80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  return result;
 8007e84:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007e88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (value == 0U)
 8007e8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_ADCEx_InjectedConfigChannel+0x384>
    return 32U;
 8007e94:	2320      	movs	r3, #32
 8007e96:	e004      	b.n	8007ea2 <HAL_ADCEx_InjectedConfigChannel+0x38e>
  return __builtin_clz(value);
 8007e98:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007e9c:	fab3 f383 	clz	r3, r3
 8007ea0:	b2db      	uxtb	r3, r3
 8007ea2:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d105      	bne.n	8007ebc <HAL_ADCEx_InjectedConfigChannel+0x3a8>
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	0e9b      	lsrs	r3, r3, #26
 8007eb6:	f003 031f 	and.w	r3, r3, #31
 8007eba:	e018      	b.n	8007eee <HAL_ADCEx_InjectedConfigChannel+0x3da>
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ec4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ec8:	fa93 f3a3 	rbit	r3, r3
 8007ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8007ed0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007ed4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8007ed8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d101      	bne.n	8007ee4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
    return 32U;
 8007ee0:	2320      	movs	r3, #32
 8007ee2:	e004      	b.n	8007eee <HAL_ADCEx_InjectedConfigChannel+0x3da>
  return __builtin_clz(value);
 8007ee4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007ee8:	fab3 f383 	clz	r3, r3
 8007eec:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d106      	bne.n	8007f00 <HAL_ADCEx_InjectedConfigChannel+0x3ec>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	2100      	movs	r1, #0
 8007efa:	4618      	mov	r0, r3
 8007efc:	f7ff fb18 	bl	8007530 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2101      	movs	r1, #1
 8007f06:	4618      	mov	r0, r3
 8007f08:	f7ff fafc 	bl	8007504 <LL_ADC_GetOffsetChannel>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d10a      	bne.n	8007f2c <HAL_ADCEx_InjectedConfigChannel+0x418>
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7ff faf1 	bl	8007504 <LL_ADC_GetOffsetChannel>
 8007f22:	4603      	mov	r3, r0
 8007f24:	0e9b      	lsrs	r3, r3, #26
 8007f26:	f003 021f 	and.w	r2, r3, #31
 8007f2a:	e01e      	b.n	8007f6a <HAL_ADCEx_InjectedConfigChannel+0x456>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2101      	movs	r1, #1
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7ff fae6 	bl	8007504 <LL_ADC_GetOffsetChannel>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007f42:	fa93 f3a3 	rbit	r3, r3
 8007f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8007f4a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8007f52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d101      	bne.n	8007f5e <HAL_ADCEx_InjectedConfigChannel+0x44a>
    return 32U;
 8007f5a:	2320      	movs	r3, #32
 8007f5c:	e004      	b.n	8007f68 <HAL_ADCEx_InjectedConfigChannel+0x454>
  return __builtin_clz(value);
 8007f5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007f62:	fab3 f383 	clz	r3, r3
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d105      	bne.n	8007f82 <HAL_ADCEx_InjectedConfigChannel+0x46e>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	0e9b      	lsrs	r3, r3, #26
 8007f7c:	f003 031f 	and.w	r3, r3, #31
 8007f80:	e018      	b.n	8007fb4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f8e:	fa93 f3a3 	rbit	r3, r3
 8007f92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8007f96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8007f9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_ADCEx_InjectedConfigChannel+0x496>
    return 32U;
 8007fa6:	2320      	movs	r3, #32
 8007fa8:	e004      	b.n	8007fb4 <HAL_ADCEx_InjectedConfigChannel+0x4a0>
  return __builtin_clz(value);
 8007faa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fae:	fab3 f383 	clz	r3, r3
 8007fb2:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d106      	bne.n	8007fc6 <HAL_ADCEx_InjectedConfigChannel+0x4b2>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	f7ff fab5 	bl	8007530 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2102      	movs	r1, #2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7ff fa99 	bl	8007504 <LL_ADC_GetOffsetChannel>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d10a      	bne.n	8007ff2 <HAL_ADCEx_InjectedConfigChannel+0x4de>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2102      	movs	r1, #2
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f7ff fa8e 	bl	8007504 <LL_ADC_GetOffsetChannel>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	0e9b      	lsrs	r3, r3, #26
 8007fec:	f003 021f 	and.w	r2, r3, #31
 8007ff0:	e01e      	b.n	8008030 <HAL_ADCEx_InjectedConfigChannel+0x51c>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	2102      	movs	r1, #2
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f7ff fa83 	bl	8007504 <LL_ADC_GetOffsetChannel>
 8007ffe:	4603      	mov	r3, r0
 8008000:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008004:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008008:	fa93 f3a3 	rbit	r3, r3
 800800c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8008010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008014:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8008018:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_ADCEx_InjectedConfigChannel+0x510>
    return 32U;
 8008020:	2320      	movs	r3, #32
 8008022:	e004      	b.n	800802e <HAL_ADCEx_InjectedConfigChannel+0x51a>
  return __builtin_clz(value);
 8008024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008028:	fab3 f383 	clz	r3, r3
 800802c:	b2db      	uxtb	r3, r3
 800802e:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008038:	2b00      	cmp	r3, #0
 800803a:	d105      	bne.n	8008048 <HAL_ADCEx_InjectedConfigChannel+0x534>
 800803c:	683b      	ldr	r3, [r7, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	0e9b      	lsrs	r3, r3, #26
 8008042:	f003 031f 	and.w	r3, r3, #31
 8008046:	e014      	b.n	8008072 <HAL_ADCEx_InjectedConfigChannel+0x55e>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800804e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008050:	fa93 f3a3 	rbit	r3, r3
 8008054:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8008056:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008058:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800805c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008060:	2b00      	cmp	r3, #0
 8008062:	d101      	bne.n	8008068 <HAL_ADCEx_InjectedConfigChannel+0x554>
    return 32U;
 8008064:	2320      	movs	r3, #32
 8008066:	e004      	b.n	8008072 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return __builtin_clz(value);
 8008068:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800806c:	fab3 f383 	clz	r3, r3
 8008070:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8008072:	429a      	cmp	r2, r3
 8008074:	d106      	bne.n	8008084 <HAL_ADCEx_InjectedConfigChannel+0x570>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2200      	movs	r2, #0
 800807c:	2102      	movs	r1, #2
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff fa56 	bl	8007530 <LL_ADC_SetOffsetState>
      }
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2103      	movs	r1, #3
 800808a:	4618      	mov	r0, r3
 800808c:	f7ff fa3a 	bl	8007504 <LL_ADC_GetOffsetChannel>
 8008090:	4603      	mov	r3, r0
 8008092:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008096:	2b00      	cmp	r3, #0
 8008098:	d10a      	bne.n	80080b0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2103      	movs	r1, #3
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7ff fa2f 	bl	8007504 <LL_ADC_GetOffsetChannel>
 80080a6:	4603      	mov	r3, r0
 80080a8:	0e9b      	lsrs	r3, r3, #26
 80080aa:	f003 021f 	and.w	r2, r3, #31
 80080ae:	e017      	b.n	80080e0 <HAL_ADCEx_InjectedConfigChannel+0x5cc>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2103      	movs	r1, #3
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7ff fa24 	bl	8007504 <LL_ADC_GetOffsetChannel>
 80080bc:	4603      	mov	r3, r0
 80080be:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080c2:	fa93 f3a3 	rbit	r3, r3
 80080c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80080c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ca:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80080cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
    return 32U;
 80080d2:	2320      	movs	r3, #32
 80080d4:	e003      	b.n	80080de <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80080d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080d8:	fab3 f383 	clz	r3, r3
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	461a      	mov	r2, r3
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d105      	bne.n	80080f8 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	0e9b      	lsrs	r3, r3, #26
 80080f2:	f003 031f 	and.w	r3, r3, #31
 80080f6:	e011      	b.n	800811c <HAL_ADCEx_InjectedConfigChannel+0x608>
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008100:	fa93 f3a3 	rbit	r3, r3
 8008104:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8008106:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008108:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800810a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <HAL_ADCEx_InjectedConfigChannel+0x600>
    return 32U;
 8008110:	2320      	movs	r3, #32
 8008112:	e003      	b.n	800811c <HAL_ADCEx_InjectedConfigChannel+0x608>
  return __builtin_clz(value);
 8008114:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008116:	fab3 f383 	clz	r3, r3
 800811a:	b2db      	uxtb	r3, r3
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800811c:	429a      	cmp	r2, r3
 800811e:	d106      	bne.n	800812e <HAL_ADCEx_InjectedConfigChannel+0x61a>
      {
        LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2200      	movs	r2, #0
 8008126:	2103      	movs	r1, #3
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff fa01 	bl	8007530 <LL_ADC_SetOffsetState>
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff facc 	bl	80076d0 <LL_ADC_IsEnabled>
 8008138:	4603      	mov	r3, r0
 800813a:	2b00      	cmp	r3, #0
 800813c:	f040 8140 	bne.w	80083c0 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6818      	ldr	r0, [r3, #0]
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	6819      	ldr	r1, [r3, #0]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	461a      	mov	r2, r3
 800814e:	f7ff fa8d 	bl	800766c <LL_ADC_SetChannelSingleDiff>

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	4a8f      	ldr	r2, [pc, #572]	; (8008394 <HAL_ADCEx_InjectedConfigChannel+0x880>)
 8008158:	4293      	cmp	r3, r2
 800815a:	f040 8131 	bne.w	80083c0 <HAL_ADCEx_InjectedConfigChannel+0x8ac>
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6818      	ldr	r0, [r3, #0]
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10b      	bne.n	8008186 <HAL_ADCEx_InjectedConfigChannel+0x672>
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	0e9b      	lsrs	r3, r3, #26
 8008174:	3301      	adds	r3, #1
 8008176:	f003 031f 	and.w	r3, r3, #31
 800817a:	2b09      	cmp	r3, #9
 800817c:	bf94      	ite	ls
 800817e:	2301      	movls	r3, #1
 8008180:	2300      	movhi	r3, #0
 8008182:	b2db      	uxtb	r3, r3
 8008184:	e019      	b.n	80081ba <HAL_ADCEx_InjectedConfigChannel+0x6a6>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800818c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800818e:	fa93 f3a3 	rbit	r3, r3
 8008192:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008194:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008196:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8008198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800819a:	2b00      	cmp	r3, #0
 800819c:	d101      	bne.n	80081a2 <HAL_ADCEx_InjectedConfigChannel+0x68e>
    return 32U;
 800819e:	2320      	movs	r3, #32
 80081a0:	e003      	b.n	80081aa <HAL_ADCEx_InjectedConfigChannel+0x696>
  return __builtin_clz(value);
 80081a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80081a4:	fab3 f383 	clz	r3, r3
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	3301      	adds	r3, #1
 80081ac:	f003 031f 	and.w	r3, r3, #31
 80081b0:	2b09      	cmp	r3, #9
 80081b2:	bf94      	ite	ls
 80081b4:	2301      	movls	r3, #1
 80081b6:	2300      	movhi	r3, #0
 80081b8:	b2db      	uxtb	r3, r3
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d079      	beq.n	80082b2 <HAL_ADCEx_InjectedConfigChannel+0x79e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d107      	bne.n	80081da <HAL_ADCEx_InjectedConfigChannel+0x6c6>
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	0e9b      	lsrs	r3, r3, #26
 80081d0:	3301      	adds	r3, #1
 80081d2:	069b      	lsls	r3, r3, #26
 80081d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80081d8:	e015      	b.n	8008206 <HAL_ADCEx_InjectedConfigChannel+0x6f2>
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081e2:	fa93 f3a3 	rbit	r3, r3
 80081e6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80081e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081ea:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80081ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_ADCEx_InjectedConfigChannel+0x6e2>
    return 32U;
 80081f2:	2320      	movs	r3, #32
 80081f4:	e003      	b.n	80081fe <HAL_ADCEx_InjectedConfigChannel+0x6ea>
  return __builtin_clz(value);
 80081f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081f8:	fab3 f383 	clz	r3, r3
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	3301      	adds	r3, #1
 8008200:	069b      	lsls	r3, r3, #26
 8008202:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800820e:	2b00      	cmp	r3, #0
 8008210:	d109      	bne.n	8008226 <HAL_ADCEx_InjectedConfigChannel+0x712>
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	0e9b      	lsrs	r3, r3, #26
 8008218:	3301      	adds	r3, #1
 800821a:	f003 031f 	and.w	r3, r3, #31
 800821e:	2101      	movs	r1, #1
 8008220:	fa01 f303 	lsl.w	r3, r1, r3
 8008224:	e017      	b.n	8008256 <HAL_ADCEx_InjectedConfigChannel+0x742>
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800822c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800822e:	fa93 f3a3 	rbit	r3, r3
 8008232:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008234:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008236:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8008238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800823a:	2b00      	cmp	r3, #0
 800823c:	d101      	bne.n	8008242 <HAL_ADCEx_InjectedConfigChannel+0x72e>
    return 32U;
 800823e:	2320      	movs	r3, #32
 8008240:	e003      	b.n	800824a <HAL_ADCEx_InjectedConfigChannel+0x736>
  return __builtin_clz(value);
 8008242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008244:	fab3 f383 	clz	r3, r3
 8008248:	b2db      	uxtb	r3, r3
 800824a:	3301      	adds	r3, #1
 800824c:	f003 031f 	and.w	r3, r3, #31
 8008250:	2101      	movs	r1, #1
 8008252:	fa01 f303 	lsl.w	r3, r1, r3
 8008256:	ea42 0103 	orr.w	r1, r2, r3
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008262:	2b00      	cmp	r3, #0
 8008264:	d10a      	bne.n	800827c <HAL_ADCEx_InjectedConfigChannel+0x768>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	0e9b      	lsrs	r3, r3, #26
 800826c:	3301      	adds	r3, #1
 800826e:	f003 021f 	and.w	r2, r3, #31
 8008272:	4613      	mov	r3, r2
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	4413      	add	r3, r2
 8008278:	051b      	lsls	r3, r3, #20
 800827a:	e018      	b.n	80082ae <HAL_ADCEx_InjectedConfigChannel+0x79a>
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008284:	fa93 f3a3 	rbit	r3, r3
 8008288:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800828a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008290:	2b00      	cmp	r3, #0
 8008292:	d101      	bne.n	8008298 <HAL_ADCEx_InjectedConfigChannel+0x784>
    return 32U;
 8008294:	2320      	movs	r3, #32
 8008296:	e003      	b.n	80082a0 <HAL_ADCEx_InjectedConfigChannel+0x78c>
  return __builtin_clz(value);
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	fab3 f383 	clz	r3, r3
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	3301      	adds	r3, #1
 80082a2:	f003 021f 	and.w	r2, r3, #31
 80082a6:	4613      	mov	r3, r2
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	4413      	add	r3, r2
 80082ac:	051b      	lsls	r3, r3, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80082ae:	430b      	orrs	r3, r1
 80082b0:	e081      	b.n	80083b6 <HAL_ADCEx_InjectedConfigChannel+0x8a2>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d107      	bne.n	80082ce <HAL_ADCEx_InjectedConfigChannel+0x7ba>
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	0e9b      	lsrs	r3, r3, #26
 80082c4:	3301      	adds	r3, #1
 80082c6:	069b      	lsls	r3, r3, #26
 80082c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80082cc:	e015      	b.n	80082fa <HAL_ADCEx_InjectedConfigChannel+0x7e6>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d6:	fa93 f3a3 	rbit	r3, r3
 80082da:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80082dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80082e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <HAL_ADCEx_InjectedConfigChannel+0x7d6>
    return 32U;
 80082e6:	2320      	movs	r3, #32
 80082e8:	e003      	b.n	80082f2 <HAL_ADCEx_InjectedConfigChannel+0x7de>
  return __builtin_clz(value);
 80082ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ec:	fab3 f383 	clz	r3, r3
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	3301      	adds	r3, #1
 80082f4:	069b      	lsls	r3, r3, #26
 80082f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80082fa:	683b      	ldr	r3, [r7, #0]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008302:	2b00      	cmp	r3, #0
 8008304:	d109      	bne.n	800831a <HAL_ADCEx_InjectedConfigChannel+0x806>
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	0e9b      	lsrs	r3, r3, #26
 800830c:	3301      	adds	r3, #1
 800830e:	f003 031f 	and.w	r3, r3, #31
 8008312:	2101      	movs	r1, #1
 8008314:	fa01 f303 	lsl.w	r3, r1, r3
 8008318:	e017      	b.n	800834a <HAL_ADCEx_InjectedConfigChannel+0x836>
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	fa93 f3a3 	rbit	r3, r3
 8008326:	61bb      	str	r3, [r7, #24]
  return result;
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800832c:	6a3b      	ldr	r3, [r7, #32]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d101      	bne.n	8008336 <HAL_ADCEx_InjectedConfigChannel+0x822>
    return 32U;
 8008332:	2320      	movs	r3, #32
 8008334:	e003      	b.n	800833e <HAL_ADCEx_InjectedConfigChannel+0x82a>
  return __builtin_clz(value);
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	fab3 f383 	clz	r3, r3
 800833c:	b2db      	uxtb	r3, r3
 800833e:	3301      	adds	r3, #1
 8008340:	f003 031f 	and.w	r3, r3, #31
 8008344:	2101      	movs	r1, #1
 8008346:	fa01 f303 	lsl.w	r3, r1, r3
 800834a:	ea42 0103 	orr.w	r1, r2, r3
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008356:	2b00      	cmp	r3, #0
 8008358:	d10d      	bne.n	8008376 <HAL_ADCEx_InjectedConfigChannel+0x862>
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	0e9b      	lsrs	r3, r3, #26
 8008360:	3301      	adds	r3, #1
 8008362:	f003 021f 	and.w	r2, r3, #31
 8008366:	4613      	mov	r3, r2
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	4413      	add	r3, r2
 800836c:	3b1e      	subs	r3, #30
 800836e:	051b      	lsls	r3, r3, #20
 8008370:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008374:	e01e      	b.n	80083b4 <HAL_ADCEx_InjectedConfigChannel+0x8a0>
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800837c:	693b      	ldr	r3, [r7, #16]
 800837e:	fa93 f3a3 	rbit	r3, r3
 8008382:	60fb      	str	r3, [r7, #12]
  return result;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d104      	bne.n	8008398 <HAL_ADCEx_InjectedConfigChannel+0x884>
    return 32U;
 800838e:	2320      	movs	r3, #32
 8008390:	e006      	b.n	80083a0 <HAL_ADCEx_InjectedConfigChannel+0x88c>
 8008392:	bf00      	nop
 8008394:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8008398:	697b      	ldr	r3, [r7, #20]
 800839a:	fab3 f383 	clz	r3, r3
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	3301      	adds	r3, #1
 80083a2:	f003 021f 	and.w	r2, r3, #31
 80083a6:	4613      	mov	r3, r2
 80083a8:	005b      	lsls	r3, r3, #1
 80083aa:	4413      	add	r3, r2
 80083ac:	3b1e      	subs	r3, #30
 80083ae:	051b      	lsls	r3, r3, #20
 80083b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083b4:	430b      	orrs	r3, r1
                                                 (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
                                                    (uint32_t)pConfigInjected->InjectedChannel)
                                                  + 1UL) & 0x1FUL)),
                                    pConfigInjected->InjectedSamplingTime);
 80083b6:	683a      	ldr	r2, [r7, #0]
 80083b8:	6892      	ldr	r2, [r2, #8]
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083ba:	4619      	mov	r1, r3
 80083bc:	f7ff f92a 	bl	8007614 <LL_ADC_SetChannelSamplingTime>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	4b3a      	ldr	r3, [pc, #232]	; (80084b0 <HAL_ADCEx_InjectedConfigChannel+0x99c>)
 80083c6:	4013      	ands	r3, r2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d067      	beq.n	800849c <HAL_ADCEx_InjectedConfigChannel+0x988>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80083cc:	4839      	ldr	r0, [pc, #228]	; (80084b4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 80083ce:	f7ff f867 	bl	80074a0 <LL_ADC_GetCommonPathInternalCh>
 80083d2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a37      	ldr	r2, [pc, #220]	; (80084b8 <HAL_ADCEx_InjectedConfigChannel+0x9a4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d004      	beq.n	80083ea <HAL_ADCEx_InjectedConfigChannel+0x8d6>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a35      	ldr	r2, [pc, #212]	; (80084bc <HAL_ADCEx_InjectedConfigChannel+0x9a8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d127      	bne.n	800843a <HAL_ADCEx_InjectedConfigChannel+0x926>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80083ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d121      	bne.n	800843a <HAL_ADCEx_InjectedConfigChannel+0x926>
    {
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80083fe:	d14d      	bne.n	800849c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8008400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008404:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008408:	4619      	mov	r1, r3
 800840a:	482a      	ldr	r0, [pc, #168]	; (80084b4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 800840c:	f7ff f835 	bl	800747a <LL_ADC_SetCommonPathInternalCh>
        /* Wait loop initialization and execution */
        /* Note: Variable divided by 2 to compensate partially              */
        /*       CPU processing cycles, scaling in us split to not          */
        /*       exceed 32 bits register capacity and handle low frequency. */
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8008410:	4b2b      	ldr	r3, [pc, #172]	; (80084c0 <HAL_ADCEx_InjectedConfigChannel+0x9ac>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	099b      	lsrs	r3, r3, #6
 8008416:	4a2b      	ldr	r2, [pc, #172]	; (80084c4 <HAL_ADCEx_InjectedConfigChannel+0x9b0>)
 8008418:	fba2 2303 	umull	r2, r3, r2, r3
 800841c:	099a      	lsrs	r2, r3, #6
 800841e:	4613      	mov	r3, r2
 8008420:	005b      	lsls	r3, r3, #1
 8008422:	4413      	add	r3, r2
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8008428:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 800842a:	e002      	b.n	8008432 <HAL_ADCEx_InjectedConfigChannel+0x91e>
        {
          wait_loop_index--;
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	3b01      	subs	r3, #1
 8008430:	60bb      	str	r3, [r7, #8]
        while (wait_loop_index != 0UL)
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b00      	cmp	r3, #0
 8008436:	d1f9      	bne.n	800842c <HAL_ADCEx_InjectedConfigChannel+0x918>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008438:	e030      	b.n	800849c <HAL_ADCEx_InjectedConfigChannel+0x988>
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a22      	ldr	r2, [pc, #136]	; (80084c8 <HAL_ADCEx_InjectedConfigChannel+0x9b4>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d113      	bne.n	800846c <HAL_ADCEx_InjectedConfigChannel+0x958>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8008444:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d10d      	bne.n	800846c <HAL_ADCEx_InjectedConfigChannel+0x958>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a1d      	ldr	r2, [pc, #116]	; (80084cc <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d020      	beq.n	800849c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800845a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800845e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008462:	4619      	mov	r1, r3
 8008464:	4813      	ldr	r0, [pc, #76]	; (80084b4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8008466:	f7ff f808 	bl	800747a <LL_ADC_SetCommonPathInternalCh>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800846a:	e017      	b.n	800849c <HAL_ADCEx_InjectedConfigChannel+0x988>
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a17      	ldr	r2, [pc, #92]	; (80084d0 <HAL_ADCEx_InjectedConfigChannel+0x9bc>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d112      	bne.n	800849c <HAL_ADCEx_InjectedConfigChannel+0x988>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008476:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800847a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800847e:	2b00      	cmp	r3, #0
 8008480:	d10c      	bne.n	800849c <HAL_ADCEx_InjectedConfigChannel+0x988>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a11      	ldr	r2, [pc, #68]	; (80084cc <HAL_ADCEx_InjectedConfigChannel+0x9b8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d007      	beq.n	800849c <HAL_ADCEx_InjectedConfigChannel+0x988>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800848c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008490:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008494:	4619      	mov	r1, r3
 8008496:	4807      	ldr	r0, [pc, #28]	; (80084b4 <HAL_ADCEx_InjectedConfigChannel+0x9a0>)
 8008498:	f7fe ffef 	bl	800747a <LL_ADC_SetCommonPathInternalCh>
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80084a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80084a8:	4618      	mov	r0, r3
 80084aa:	37d8      	adds	r7, #216	; 0xd8
 80084ac:	46bd      	mov	sp, r7
 80084ae:	bd80      	pop	{r7, pc}
 80084b0:	80080000 	.word	0x80080000
 80084b4:	50000300 	.word	0x50000300
 80084b8:	c3210000 	.word	0xc3210000
 80084bc:	90c00010 	.word	0x90c00010
 80084c0:	20000190 	.word	0x20000190
 80084c4:	053e2d63 	.word	0x053e2d63
 80084c8:	c7520000 	.word	0xc7520000
 80084cc:	50000100 	.word	0x50000100
 80084d0:	cb840000 	.word	0xcb840000

080084d4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80084d4:	b590      	push	{r4, r7, lr}
 80084d6:	b0a1      	sub	sp, #132	; 0x84
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80084de:	2300      	movs	r3, #0
 80084e0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d101      	bne.n	80084f2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80084ee:	2302      	movs	r3, #2
 80084f0:	e08b      	b.n	800860a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80084fa:	2300      	movs	r3, #0
 80084fc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80084fe:	2300      	movs	r3, #0
 8008500:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800850a:	d102      	bne.n	8008512 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800850c:	4b41      	ldr	r3, [pc, #260]	; (8008614 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800850e:	60bb      	str	r3, [r7, #8]
 8008510:	e001      	b.n	8008516 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8008512:	2300      	movs	r3, #0
 8008514:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008520:	f043 0220 	orr.w	r2, r3, #32
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008530:	2301      	movs	r3, #1
 8008532:	e06a      	b.n	800860a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	4618      	mov	r0, r3
 8008538:	f7ff f90a 	bl	8007750 <LL_ADC_REG_IsConversionOngoing>
 800853c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	4618      	mov	r0, r3
 8008544:	f7ff f904 	bl	8007750 <LL_ADC_REG_IsConversionOngoing>
 8008548:	4603      	mov	r3, r0
 800854a:	2b00      	cmp	r3, #0
 800854c:	d14c      	bne.n	80085e8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800854e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008550:	2b00      	cmp	r3, #0
 8008552:	d149      	bne.n	80085e8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008554:	4b30      	ldr	r3, [pc, #192]	; (8008618 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8008556:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d028      	beq.n	80085b2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8008560:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008562:	689b      	ldr	r3, [r3, #8]
 8008564:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	6859      	ldr	r1, [r3, #4]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008572:	035b      	lsls	r3, r3, #13
 8008574:	430b      	orrs	r3, r1
 8008576:	431a      	orrs	r2, r3
 8008578:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800857a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800857c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008580:	f7ff f8a6 	bl	80076d0 <LL_ADC_IsEnabled>
 8008584:	4604      	mov	r4, r0
 8008586:	4823      	ldr	r0, [pc, #140]	; (8008614 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8008588:	f7ff f8a2 	bl	80076d0 <LL_ADC_IsEnabled>
 800858c:	4603      	mov	r3, r0
 800858e:	4323      	orrs	r3, r4
 8008590:	2b00      	cmp	r3, #0
 8008592:	d133      	bne.n	80085fc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800859c:	f023 030f 	bic.w	r3, r3, #15
 80085a0:	683a      	ldr	r2, [r7, #0]
 80085a2:	6811      	ldr	r1, [r2, #0]
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	6892      	ldr	r2, [r2, #8]
 80085a8:	430a      	orrs	r2, r1
 80085aa:	431a      	orrs	r2, r3
 80085ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085ae:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80085b0:	e024      	b.n	80085fc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80085b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085b4:	689b      	ldr	r3, [r3, #8]
 80085b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80085ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085bc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80085be:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80085c2:	f7ff f885 	bl	80076d0 <LL_ADC_IsEnabled>
 80085c6:	4604      	mov	r4, r0
 80085c8:	4812      	ldr	r0, [pc, #72]	; (8008614 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80085ca:	f7ff f881 	bl	80076d0 <LL_ADC_IsEnabled>
 80085ce:	4603      	mov	r3, r0
 80085d0:	4323      	orrs	r3, r4
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d112      	bne.n	80085fc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80085d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80085de:	f023 030f 	bic.w	r3, r3, #15
 80085e2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80085e4:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80085e6:	e009      	b.n	80085fc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085ec:	f043 0220 	orr.w	r2, r3, #32
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80085fa:	e000      	b.n	80085fe <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80085fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8008606:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800860a:	4618      	mov	r0, r3
 800860c:	3784      	adds	r7, #132	; 0x84
 800860e:	46bd      	mov	sp, r7
 8008610:	bd90      	pop	{r4, r7, pc}
 8008612:	bf00      	nop
 8008614:	50000100 	.word	0x50000100
 8008618:	50000300 	.word	0x50000300

0800861c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800861c:	b480      	push	{r7}
 800861e:	b085      	sub	sp, #20
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800862c:	4b0c      	ldr	r3, [pc, #48]	; (8008660 <__NVIC_SetPriorityGrouping+0x44>)
 800862e:	68db      	ldr	r3, [r3, #12]
 8008630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008638:	4013      	ands	r3, r2
 800863a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800864c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800864e:	4a04      	ldr	r2, [pc, #16]	; (8008660 <__NVIC_SetPriorityGrouping+0x44>)
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	60d3      	str	r3, [r2, #12]
}
 8008654:	bf00      	nop
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	e000ed00 	.word	0xe000ed00

08008664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008668:	4b04      	ldr	r3, [pc, #16]	; (800867c <__NVIC_GetPriorityGrouping+0x18>)
 800866a:	68db      	ldr	r3, [r3, #12]
 800866c:	0a1b      	lsrs	r3, r3, #8
 800866e:	f003 0307 	and.w	r3, r3, #7
}
 8008672:	4618      	mov	r0, r3
 8008674:	46bd      	mov	sp, r7
 8008676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867a:	4770      	bx	lr
 800867c:	e000ed00 	.word	0xe000ed00

08008680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	4603      	mov	r3, r0
 8008688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800868a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800868e:	2b00      	cmp	r3, #0
 8008690:	db0b      	blt.n	80086aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008692:	79fb      	ldrb	r3, [r7, #7]
 8008694:	f003 021f 	and.w	r2, r3, #31
 8008698:	4907      	ldr	r1, [pc, #28]	; (80086b8 <__NVIC_EnableIRQ+0x38>)
 800869a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800869e:	095b      	lsrs	r3, r3, #5
 80086a0:	2001      	movs	r0, #1
 80086a2:	fa00 f202 	lsl.w	r2, r0, r2
 80086a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80086aa:	bf00      	nop
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	e000e100 	.word	0xe000e100

080086bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	4603      	mov	r3, r0
 80086c4:	6039      	str	r1, [r7, #0]
 80086c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80086c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	db0a      	blt.n	80086e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	b2da      	uxtb	r2, r3
 80086d4:	490c      	ldr	r1, [pc, #48]	; (8008708 <__NVIC_SetPriority+0x4c>)
 80086d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80086da:	0112      	lsls	r2, r2, #4
 80086dc:	b2d2      	uxtb	r2, r2
 80086de:	440b      	add	r3, r1
 80086e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80086e4:	e00a      	b.n	80086fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80086e6:	683b      	ldr	r3, [r7, #0]
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	4908      	ldr	r1, [pc, #32]	; (800870c <__NVIC_SetPriority+0x50>)
 80086ec:	79fb      	ldrb	r3, [r7, #7]
 80086ee:	f003 030f 	and.w	r3, r3, #15
 80086f2:	3b04      	subs	r3, #4
 80086f4:	0112      	lsls	r2, r2, #4
 80086f6:	b2d2      	uxtb	r2, r2
 80086f8:	440b      	add	r3, r1
 80086fa:	761a      	strb	r2, [r3, #24]
}
 80086fc:	bf00      	nop
 80086fe:	370c      	adds	r7, #12
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	e000e100 	.word	0xe000e100
 800870c:	e000ed00 	.word	0xe000ed00

08008710 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008710:	b480      	push	{r7}
 8008712:	b089      	sub	sp, #36	; 0x24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f003 0307 	and.w	r3, r3, #7
 8008722:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008724:	69fb      	ldr	r3, [r7, #28]
 8008726:	f1c3 0307 	rsb	r3, r3, #7
 800872a:	2b04      	cmp	r3, #4
 800872c:	bf28      	it	cs
 800872e:	2304      	movcs	r3, #4
 8008730:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	3304      	adds	r3, #4
 8008736:	2b06      	cmp	r3, #6
 8008738:	d902      	bls.n	8008740 <NVIC_EncodePriority+0x30>
 800873a:	69fb      	ldr	r3, [r7, #28]
 800873c:	3b03      	subs	r3, #3
 800873e:	e000      	b.n	8008742 <NVIC_EncodePriority+0x32>
 8008740:	2300      	movs	r3, #0
 8008742:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008744:	f04f 32ff 	mov.w	r2, #4294967295
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	fa02 f303 	lsl.w	r3, r2, r3
 800874e:	43da      	mvns	r2, r3
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	401a      	ands	r2, r3
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008758:	f04f 31ff 	mov.w	r1, #4294967295
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	fa01 f303 	lsl.w	r3, r1, r3
 8008762:	43d9      	mvns	r1, r3
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008768:	4313      	orrs	r3, r2
         );
}
 800876a:	4618      	mov	r0, r3
 800876c:	3724      	adds	r7, #36	; 0x24
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
	...

08008778 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3b01      	subs	r3, #1
 8008784:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008788:	d301      	bcc.n	800878e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800878a:	2301      	movs	r3, #1
 800878c:	e00f      	b.n	80087ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800878e:	4a0a      	ldr	r2, [pc, #40]	; (80087b8 <SysTick_Config+0x40>)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	3b01      	subs	r3, #1
 8008794:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008796:	210f      	movs	r1, #15
 8008798:	f04f 30ff 	mov.w	r0, #4294967295
 800879c:	f7ff ff8e 	bl	80086bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80087a0:	4b05      	ldr	r3, [pc, #20]	; (80087b8 <SysTick_Config+0x40>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80087a6:	4b04      	ldr	r3, [pc, #16]	; (80087b8 <SysTick_Config+0x40>)
 80087a8:	2207      	movs	r2, #7
 80087aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	e000e010 	.word	0xe000e010

080087bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	f7ff ff29 	bl	800861c <__NVIC_SetPriorityGrouping>
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b086      	sub	sp, #24
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	4603      	mov	r3, r0
 80087da:	60b9      	str	r1, [r7, #8]
 80087dc:	607a      	str	r2, [r7, #4]
 80087de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80087e0:	f7ff ff40 	bl	8008664 <__NVIC_GetPriorityGrouping>
 80087e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	68b9      	ldr	r1, [r7, #8]
 80087ea:	6978      	ldr	r0, [r7, #20]
 80087ec:	f7ff ff90 	bl	8008710 <NVIC_EncodePriority>
 80087f0:	4602      	mov	r2, r0
 80087f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80087f6:	4611      	mov	r1, r2
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7ff ff5f 	bl	80086bc <__NVIC_SetPriority>
}
 80087fe:	bf00      	nop
 8008800:	3718      	adds	r7, #24
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	4603      	mov	r3, r0
 800880e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008814:	4618      	mov	r0, r3
 8008816:	f7ff ff33 	bl	8008680 <__NVIC_EnableIRQ>
}
 800881a:	bf00      	nop
 800881c:	3708      	adds	r7, #8
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7ff ffa4 	bl	8008778 <SysTick_Config>
 8008830:	4603      	mov	r3, r0
}
 8008832:	4618      	mov	r0, r3
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
	...

0800883c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d101      	bne.n	800884e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800884a:	2301      	movs	r3, #1
 800884c:	e054      	b.n	80088f8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	7f5b      	ldrb	r3, [r3, #29]
 8008852:	b2db      	uxtb	r3, r3
 8008854:	2b00      	cmp	r3, #0
 8008856:	d105      	bne.n	8008864 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f7fc f88e 	bl	8004980 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2202      	movs	r2, #2
 8008868:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	791b      	ldrb	r3, [r3, #4]
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10c      	bne.n	800888c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a22      	ldr	r2, [pc, #136]	; (8008900 <HAL_CRC_Init+0xc4>)
 8008878:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	689a      	ldr	r2, [r3, #8]
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f022 0218 	bic.w	r2, r2, #24
 8008888:	609a      	str	r2, [r3, #8]
 800888a:	e00c      	b.n	80088a6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6899      	ldr	r1, [r3, #8]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	461a      	mov	r2, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f000 f948 	bl	8008b2c <HAL_CRCEx_Polynomial_Set>
 800889c:	4603      	mov	r3, r0
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80088a2:	2301      	movs	r3, #1
 80088a4:	e028      	b.n	80088f8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	795b      	ldrb	r3, [r3, #5]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d105      	bne.n	80088ba <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f04f 32ff 	mov.w	r2, #4294967295
 80088b6:	611a      	str	r2, [r3, #16]
 80088b8:	e004      	b.n	80088c4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	6912      	ldr	r2, [r2, #16]
 80088c2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	695a      	ldr	r2, [r3, #20]
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	699a      	ldr	r2, [r3, #24]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	430a      	orrs	r2, r1
 80088ee:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80088f6:	2300      	movs	r3, #0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}
 8008900:	04c11db7 	.word	0x04c11db7

08008904 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b086      	sub	sp, #24
 8008908:	af00      	add	r7, sp, #0
 800890a:	60f8      	str	r0, [r7, #12]
 800890c:	60b9      	str	r1, [r7, #8]
 800890e:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8008910:	2300      	movs	r3, #0
 8008912:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2202      	movs	r2, #2
 8008918:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	689a      	ldr	r2, [r3, #8]
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f042 0201 	orr.w	r2, r2, #1
 8008928:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6a1b      	ldr	r3, [r3, #32]
 800892e:	2b03      	cmp	r3, #3
 8008930:	d006      	beq.n	8008940 <HAL_CRC_Calculate+0x3c>
 8008932:	2b03      	cmp	r3, #3
 8008934:	d829      	bhi.n	800898a <HAL_CRC_Calculate+0x86>
 8008936:	2b01      	cmp	r3, #1
 8008938:	d019      	beq.n	800896e <HAL_CRC_Calculate+0x6a>
 800893a:	2b02      	cmp	r3, #2
 800893c:	d01e      	beq.n	800897c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 800893e:	e024      	b.n	800898a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8008940:	2300      	movs	r3, #0
 8008942:	617b      	str	r3, [r7, #20]
 8008944:	e00a      	b.n	800895c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	68ba      	ldr	r2, [r7, #8]
 800894c:	441a      	add	r2, r3
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	6812      	ldr	r2, [r2, #0]
 8008954:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	3301      	adds	r3, #1
 800895a:	617b      	str	r3, [r7, #20]
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	429a      	cmp	r2, r3
 8008962:	d3f0      	bcc.n	8008946 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	613b      	str	r3, [r7, #16]
      break;
 800896c:	e00e      	b.n	800898c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	68b9      	ldr	r1, [r7, #8]
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 f812 	bl	800899c <CRC_Handle_8>
 8008978:	6138      	str	r0, [r7, #16]
      break;
 800897a:	e007      	b.n	800898c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800897c:	687a      	ldr	r2, [r7, #4]
 800897e:	68b9      	ldr	r1, [r7, #8]
 8008980:	68f8      	ldr	r0, [r7, #12]
 8008982:	f000 f899 	bl	8008ab8 <CRC_Handle_16>
 8008986:	6138      	str	r0, [r7, #16]
      break;
 8008988:	e000      	b.n	800898c <HAL_CRC_Calculate+0x88>
      break;
 800898a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	2201      	movs	r2, #1
 8008990:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8008992:	693b      	ldr	r3, [r7, #16]
}
 8008994:	4618      	mov	r0, r3
 8008996:	3718      	adds	r7, #24
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800899c:	b480      	push	{r7}
 800899e:	b089      	sub	sp, #36	; 0x24
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80089a8:	2300      	movs	r3, #0
 80089aa:	61fb      	str	r3, [r7, #28]
 80089ac:	e023      	b.n	80089f6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	4413      	add	r3, r2
 80089b6:	781b      	ldrb	r3, [r3, #0]
 80089b8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	3301      	adds	r3, #1
 80089c0:	68b9      	ldr	r1, [r7, #8]
 80089c2:	440b      	add	r3, r1
 80089c4:	781b      	ldrb	r3, [r3, #0]
 80089c6:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80089c8:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	3302      	adds	r3, #2
 80089d0:	68b9      	ldr	r1, [r7, #8]
 80089d2:	440b      	add	r3, r1
 80089d4:	781b      	ldrb	r3, [r3, #0]
 80089d6:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80089d8:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	009b      	lsls	r3, r3, #2
 80089de:	3303      	adds	r3, #3
 80089e0:	68b9      	ldr	r1, [r7, #8]
 80089e2:	440b      	add	r3, r1
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80089ec:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80089ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	3301      	adds	r3, #1
 80089f4:	61fb      	str	r3, [r7, #28]
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	089b      	lsrs	r3, r3, #2
 80089fa:	69fa      	ldr	r2, [r7, #28]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d3d6      	bcc.n	80089ae <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f003 0303 	and.w	r3, r3, #3
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d04d      	beq.n	8008aa6 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f003 0303 	and.w	r3, r3, #3
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d107      	bne.n	8008a24 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	009b      	lsls	r3, r3, #2
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	4413      	add	r3, r2
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	6812      	ldr	r2, [r2, #0]
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f003 0303 	and.w	r3, r3, #3
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d116      	bne.n	8008a5c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008a2e:	69fb      	ldr	r3, [r7, #28]
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	68ba      	ldr	r2, [r7, #8]
 8008a34:	4413      	add	r3, r2
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	021b      	lsls	r3, r3, #8
 8008a3a:	b21a      	sxth	r2, r3
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	009b      	lsls	r3, r3, #2
 8008a40:	3301      	adds	r3, #1
 8008a42:	68b9      	ldr	r1, [r7, #8]
 8008a44:	440b      	add	r3, r1
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	b21b      	sxth	r3, r3
 8008a4a:	4313      	orrs	r3, r2
 8008a4c:	b21b      	sxth	r3, r3
 8008a4e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	8b7a      	ldrh	r2, [r7, #26]
 8008a5a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f003 0303 	and.w	r3, r3, #3
 8008a62:	2b03      	cmp	r3, #3
 8008a64:	d11f      	bne.n	8008aa6 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	009b      	lsls	r3, r3, #2
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	b21a      	sxth	r2, r3
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	009b      	lsls	r3, r3, #2
 8008a78:	3301      	adds	r3, #1
 8008a7a:	68b9      	ldr	r1, [r7, #8]
 8008a7c:	440b      	add	r3, r1
 8008a7e:	781b      	ldrb	r3, [r3, #0]
 8008a80:	b21b      	sxth	r3, r3
 8008a82:	4313      	orrs	r3, r2
 8008a84:	b21b      	sxth	r3, r3
 8008a86:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	8b7a      	ldrh	r2, [r7, #26]
 8008a92:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8008a94:	69fb      	ldr	r3, [r7, #28]
 8008a96:	009b      	lsls	r3, r3, #2
 8008a98:	3302      	adds	r3, #2
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	68fa      	ldr	r2, [r7, #12]
 8008aa0:	6812      	ldr	r2, [r2, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	681b      	ldr	r3, [r3, #0]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3724      	adds	r7, #36	; 0x24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b087      	sub	sp, #28
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60f8      	str	r0, [r7, #12]
 8008ac0:	60b9      	str	r1, [r7, #8]
 8008ac2:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	617b      	str	r3, [r7, #20]
 8008ac8:	e013      	b.n	8008af2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8008aca:	697b      	ldr	r3, [r7, #20]
 8008acc:	009b      	lsls	r3, r3, #2
 8008ace:	68ba      	ldr	r2, [r7, #8]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	881b      	ldrh	r3, [r3, #0]
 8008ad4:	041a      	lsls	r2, r3, #16
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	3302      	adds	r3, #2
 8008adc:	68b9      	ldr	r1, [r7, #8]
 8008ade:	440b      	add	r3, r1
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	4619      	mov	r1, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	430a      	orrs	r2, r1
 8008aea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	3301      	adds	r3, #1
 8008af0:	617b      	str	r3, [r7, #20]
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	085b      	lsrs	r3, r3, #1
 8008af6:	697a      	ldr	r2, [r7, #20]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d3e6      	bcc.n	8008aca <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f003 0301 	and.w	r3, r3, #1
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d009      	beq.n	8008b1a <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8008b0c:	697b      	ldr	r3, [r7, #20]
 8008b0e:	009b      	lsls	r3, r3, #2
 8008b10:	68ba      	ldr	r2, [r7, #8]
 8008b12:	4413      	add	r3, r2
 8008b14:	881a      	ldrh	r2, [r3, #0]
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	681b      	ldr	r3, [r3, #0]
}
 8008b20:	4618      	mov	r0, r3
 8008b22:	371c      	adds	r7, #28
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr

08008b2c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b087      	sub	sp, #28
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	60f8      	str	r0, [r7, #12]
 8008b34:	60b9      	str	r1, [r7, #8]
 8008b36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008b3c:	231f      	movs	r3, #31
 8008b3e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	f003 0301 	and.w	r3, r3, #1
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d102      	bne.n	8008b50 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	75fb      	strb	r3, [r7, #23]
 8008b4e:	e063      	b.n	8008c18 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008b50:	bf00      	nop
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	1e5a      	subs	r2, r3, #1
 8008b56:	613a      	str	r2, [r7, #16]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d009      	beq.n	8008b70 <HAL_CRCEx_Polynomial_Set+0x44>
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	f003 031f 	and.w	r3, r3, #31
 8008b62:	68ba      	ldr	r2, [r7, #8]
 8008b64:	fa22 f303 	lsr.w	r3, r2, r3
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0f0      	beq.n	8008b52 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b18      	cmp	r3, #24
 8008b74:	d846      	bhi.n	8008c04 <HAL_CRCEx_Polynomial_Set+0xd8>
 8008b76:	a201      	add	r2, pc, #4	; (adr r2, 8008b7c <HAL_CRCEx_Polynomial_Set+0x50>)
 8008b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b7c:	08008c0b 	.word	0x08008c0b
 8008b80:	08008c05 	.word	0x08008c05
 8008b84:	08008c05 	.word	0x08008c05
 8008b88:	08008c05 	.word	0x08008c05
 8008b8c:	08008c05 	.word	0x08008c05
 8008b90:	08008c05 	.word	0x08008c05
 8008b94:	08008c05 	.word	0x08008c05
 8008b98:	08008c05 	.word	0x08008c05
 8008b9c:	08008bf9 	.word	0x08008bf9
 8008ba0:	08008c05 	.word	0x08008c05
 8008ba4:	08008c05 	.word	0x08008c05
 8008ba8:	08008c05 	.word	0x08008c05
 8008bac:	08008c05 	.word	0x08008c05
 8008bb0:	08008c05 	.word	0x08008c05
 8008bb4:	08008c05 	.word	0x08008c05
 8008bb8:	08008c05 	.word	0x08008c05
 8008bbc:	08008bed 	.word	0x08008bed
 8008bc0:	08008c05 	.word	0x08008c05
 8008bc4:	08008c05 	.word	0x08008c05
 8008bc8:	08008c05 	.word	0x08008c05
 8008bcc:	08008c05 	.word	0x08008c05
 8008bd0:	08008c05 	.word	0x08008c05
 8008bd4:	08008c05 	.word	0x08008c05
 8008bd8:	08008c05 	.word	0x08008c05
 8008bdc:	08008be1 	.word	0x08008be1
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	2b06      	cmp	r3, #6
 8008be4:	d913      	bls.n	8008c0e <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8008be6:	2301      	movs	r3, #1
 8008be8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008bea:	e010      	b.n	8008c0e <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	2b07      	cmp	r3, #7
 8008bf0:	d90f      	bls.n	8008c12 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008bf6:	e00c      	b.n	8008c12 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	2b0f      	cmp	r3, #15
 8008bfc:	d90b      	bls.n	8008c16 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8008c02:	e008      	b.n	8008c16 <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8008c04:	2301      	movs	r3, #1
 8008c06:	75fb      	strb	r3, [r7, #23]
        break;
 8008c08:	e006      	b.n	8008c18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008c0a:	bf00      	nop
 8008c0c:	e004      	b.n	8008c18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008c0e:	bf00      	nop
 8008c10:	e002      	b.n	8008c18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008c12:	bf00      	nop
 8008c14:	e000      	b.n	8008c18 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8008c16:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8008c18:	7dfb      	ldrb	r3, [r7, #23]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10d      	bne.n	8008c3a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68ba      	ldr	r2, [r7, #8]
 8008c24:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	689b      	ldr	r3, [r3, #8]
 8008c2c:	f023 0118 	bic.w	r1, r3, #24
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	687a      	ldr	r2, [r7, #4]
 8008c36:	430a      	orrs	r2, r1
 8008c38:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8008c3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	371c      	adds	r7, #28
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008c56:	2301      	movs	r3, #1
 8008c58:	e08d      	b.n	8008d76 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	4b47      	ldr	r3, [pc, #284]	; (8008d80 <HAL_DMA_Init+0x138>)
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d80f      	bhi.n	8008c86 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	4b45      	ldr	r3, [pc, #276]	; (8008d84 <HAL_DMA_Init+0x13c>)
 8008c6e:	4413      	add	r3, r2
 8008c70:	4a45      	ldr	r2, [pc, #276]	; (8008d88 <HAL_DMA_Init+0x140>)
 8008c72:	fba2 2303 	umull	r2, r3, r2, r3
 8008c76:	091b      	lsrs	r3, r3, #4
 8008c78:	009a      	lsls	r2, r3, #2
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a42      	ldr	r2, [pc, #264]	; (8008d8c <HAL_DMA_Init+0x144>)
 8008c82:	641a      	str	r2, [r3, #64]	; 0x40
 8008c84:	e00e      	b.n	8008ca4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	461a      	mov	r2, r3
 8008c8c:	4b40      	ldr	r3, [pc, #256]	; (8008d90 <HAL_DMA_Init+0x148>)
 8008c8e:	4413      	add	r3, r2
 8008c90:	4a3d      	ldr	r2, [pc, #244]	; (8008d88 <HAL_DMA_Init+0x140>)
 8008c92:	fba2 2303 	umull	r2, r3, r2, r3
 8008c96:	091b      	lsrs	r3, r3, #4
 8008c98:	009a      	lsls	r2, r3, #2
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a3c      	ldr	r2, [pc, #240]	; (8008d94 <HAL_DMA_Init+0x14c>)
 8008ca2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2202      	movs	r2, #2
 8008ca8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cbe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	699b      	ldr	r3, [r3, #24]
 8008cda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	6a1b      	ldr	r3, [r3, #32]
 8008ce6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	68fa      	ldr	r2, [r7, #12]
 8008cf4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f9c4 	bl	8009084 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008d04:	d102      	bne.n	8008d0c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	685a      	ldr	r2, [r3, #4]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d14:	b2d2      	uxtb	r2, r2
 8008d16:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008d20:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d010      	beq.n	8008d4c <HAL_DMA_Init+0x104>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	2b04      	cmp	r3, #4
 8008d30:	d80c      	bhi.n	8008d4c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f9e4 	bl	8009100 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008d48:	605a      	str	r2, [r3, #4]
 8008d4a:	e008      	b.n	8008d5e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2200      	movs	r2, #0
 8008d62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008d74:	2300      	movs	r3, #0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3710      	adds	r7, #16
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	40020407 	.word	0x40020407
 8008d84:	bffdfff8 	.word	0xbffdfff8
 8008d88:	cccccccd 	.word	0xcccccccd
 8008d8c:	40020000 	.word	0x40020000
 8008d90:	bffdfbf8 	.word	0xbffdfbf8
 8008d94:	40020400 	.word	0x40020400

08008d98 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b086      	sub	sp, #24
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]
 8008da4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008db0:	2b01      	cmp	r3, #1
 8008db2:	d101      	bne.n	8008db8 <HAL_DMA_Start_IT+0x20>
 8008db4:	2302      	movs	r3, #2
 8008db6:	e066      	b.n	8008e86 <HAL_DMA_Start_IT+0xee>
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b01      	cmp	r3, #1
 8008dca:	d155      	bne.n	8008e78 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681a      	ldr	r2, [r3, #0]
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f022 0201 	bic.w	r2, r2, #1
 8008de8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	68b9      	ldr	r1, [r7, #8]
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f000 f909 	bl	8009008 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d008      	beq.n	8008e10 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	681a      	ldr	r2, [r3, #0]
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f042 020e 	orr.w	r2, r2, #14
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	e00f      	b.n	8008e30 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0204 	bic.w	r2, r2, #4
 8008e1e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 020a 	orr.w	r2, r2, #10
 8008e2e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d007      	beq.n	8008e4e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e4c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d007      	beq.n	8008e66 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e5a:	681a      	ldr	r2, [r3, #0]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e64:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f042 0201 	orr.w	r2, r2, #1
 8008e74:	601a      	str	r2, [r3, #0]
 8008e76:	e005      	b.n	8008e84 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008e80:	2302      	movs	r3, #2
 8008e82:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008e84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3718      	adds	r7, #24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}

08008e8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008e8e:	b580      	push	{r7, lr}
 8008e90:	b084      	sub	sp, #16
 8008e92:	af00      	add	r7, sp, #0
 8008e94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eaa:	f003 031f 	and.w	r3, r3, #31
 8008eae:	2204      	movs	r2, #4
 8008eb0:	409a      	lsls	r2, r3
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d026      	beq.n	8008f08 <HAL_DMA_IRQHandler+0x7a>
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f003 0304 	and.w	r3, r3, #4
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d021      	beq.n	8008f08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f003 0320 	and.w	r3, r3, #32
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d107      	bne.n	8008ee2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f022 0204 	bic.w	r2, r2, #4
 8008ee0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ee6:	f003 021f 	and.w	r2, r3, #31
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eee:	2104      	movs	r1, #4
 8008ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8008ef4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d071      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008f06:	e06c      	b.n	8008fe2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f0c:	f003 031f 	and.w	r3, r3, #31
 8008f10:	2202      	movs	r2, #2
 8008f12:	409a      	lsls	r2, r3
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4013      	ands	r3, r2
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d02e      	beq.n	8008f7a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	f003 0302 	and.w	r3, r3, #2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d029      	beq.n	8008f7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f003 0320 	and.w	r3, r3, #32
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10b      	bne.n	8008f4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 020a 	bic.w	r2, r2, #10
 8008f42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f50:	f003 021f 	and.w	r2, r3, #31
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f58:	2102      	movs	r1, #2
 8008f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8008f5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2200      	movs	r2, #0
 8008f64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d038      	beq.n	8008fe2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8008f78:	e033      	b.n	8008fe2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7e:	f003 031f 	and.w	r3, r3, #31
 8008f82:	2208      	movs	r2, #8
 8008f84:	409a      	lsls	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	4013      	ands	r3, r2
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d02a      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	f003 0308 	and.w	r3, r3, #8
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d025      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f022 020e 	bic.w	r2, r2, #14
 8008fa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fac:	f003 021f 	and.w	r2, r3, #31
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8008fba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d004      	beq.n	8008fe4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008fe2:	bf00      	nop
 8008fe4:	bf00      	nop
}
 8008fe6:	3710      	adds	r7, #16
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008ffa:	b2db      	uxtb	r3, r3
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800901e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009024:	2b00      	cmp	r3, #0
 8009026:	d004      	beq.n	8009032 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902c:	68fa      	ldr	r2, [r7, #12]
 800902e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009030:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009036:	f003 021f 	and.w	r2, r3, #31
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903e:	2101      	movs	r1, #1
 8009040:	fa01 f202 	lsl.w	r2, r1, r2
 8009044:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	683a      	ldr	r2, [r7, #0]
 800904c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	689b      	ldr	r3, [r3, #8]
 8009052:	2b10      	cmp	r3, #16
 8009054:	d108      	bne.n	8009068 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009066:	e007      	b.n	8009078 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	687a      	ldr	r2, [r7, #4]
 8009076:	60da      	str	r2, [r3, #12]
}
 8009078:	bf00      	nop
 800907a:	3714      	adds	r7, #20
 800907c:	46bd      	mov	sp, r7
 800907e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009082:	4770      	bx	lr

08009084 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009084:	b480      	push	{r7}
 8009086:	b087      	sub	sp, #28
 8009088:	af00      	add	r7, sp, #0
 800908a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	461a      	mov	r2, r3
 8009092:	4b16      	ldr	r3, [pc, #88]	; (80090ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009094:	429a      	cmp	r2, r3
 8009096:	d802      	bhi.n	800909e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009098:	4b15      	ldr	r3, [pc, #84]	; (80090f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800909a:	617b      	str	r3, [r7, #20]
 800909c:	e001      	b.n	80090a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800909e:	4b15      	ldr	r3, [pc, #84]	; (80090f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80090a0:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	3b08      	subs	r3, #8
 80090ae:	4a12      	ldr	r2, [pc, #72]	; (80090f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80090b0:	fba2 2303 	umull	r2, r3, r2, r3
 80090b4:	091b      	lsrs	r3, r3, #4
 80090b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090bc:	089b      	lsrs	r3, r3, #2
 80090be:	009a      	lsls	r2, r3, #2
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	4413      	add	r3, r2
 80090c4:	461a      	mov	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a0b      	ldr	r2, [pc, #44]	; (80090fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80090ce:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f003 031f 	and.w	r3, r3, #31
 80090d6:	2201      	movs	r2, #1
 80090d8:	409a      	lsls	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	651a      	str	r2, [r3, #80]	; 0x50
}
 80090de:	bf00      	nop
 80090e0:	371c      	adds	r7, #28
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr
 80090ea:	bf00      	nop
 80090ec:	40020407 	.word	0x40020407
 80090f0:	40020800 	.word	0x40020800
 80090f4:	40020820 	.word	0x40020820
 80090f8:	cccccccd 	.word	0xcccccccd
 80090fc:	40020880 	.word	0x40020880

08009100 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	685b      	ldr	r3, [r3, #4]
 800910c:	b2db      	uxtb	r3, r3
 800910e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	4b0b      	ldr	r3, [pc, #44]	; (8009140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009114:	4413      	add	r3, r2
 8009116:	009b      	lsls	r3, r3, #2
 8009118:	461a      	mov	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a08      	ldr	r2, [pc, #32]	; (8009144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009122:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	3b01      	subs	r3, #1
 8009128:	f003 031f 	and.w	r3, r3, #31
 800912c:	2201      	movs	r2, #1
 800912e:	409a      	lsls	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009134:	bf00      	nop
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr
 8009140:	1000823f 	.word	0x1000823f
 8009144:	40020940 	.word	0x40020940

08009148 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8009156:	2300      	movs	r3, #0
 8009158:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800915a:	4b2f      	ldr	r3, [pc, #188]	; (8009218 <HAL_FLASH_Program+0xd0>)
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_FLASH_Program+0x1e>
 8009162:	2302      	movs	r3, #2
 8009164:	e053      	b.n	800920e <HAL_FLASH_Program+0xc6>
 8009166:	4b2c      	ldr	r3, [pc, #176]	; (8009218 <HAL_FLASH_Program+0xd0>)
 8009168:	2201      	movs	r2, #1
 800916a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800916c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009170:	f000 f892 	bl	8009298 <FLASH_WaitForLastOperation>
 8009174:	4603      	mov	r3, r0
 8009176:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009178:	7dfb      	ldrb	r3, [r7, #23]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d143      	bne.n	8009206 <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800917e:	4b26      	ldr	r3, [pc, #152]	; (8009218 <HAL_FLASH_Program+0xd0>)
 8009180:	2200      	movs	r2, #0
 8009182:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009184:	4b25      	ldr	r3, [pc, #148]	; (800921c <HAL_FLASH_Program+0xd4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800918c:	2b00      	cmp	r3, #0
 800918e:	d009      	beq.n	80091a4 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009190:	4b22      	ldr	r3, [pc, #136]	; (800921c <HAL_FLASH_Program+0xd4>)
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	4a21      	ldr	r2, [pc, #132]	; (800921c <HAL_FLASH_Program+0xd4>)
 8009196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800919a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800919c:	4b1e      	ldr	r3, [pc, #120]	; (8009218 <HAL_FLASH_Program+0xd0>)
 800919e:	2202      	movs	r2, #2
 80091a0:	771a      	strb	r2, [r3, #28]
 80091a2:	e002      	b.n	80091aa <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80091a4:	4b1c      	ldr	r3, [pc, #112]	; (8009218 <HAL_FLASH_Program+0xd0>)
 80091a6:	2200      	movs	r2, #0
 80091a8:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d107      	bne.n	80091c0 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80091b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091b4:	68b8      	ldr	r0, [r7, #8]
 80091b6:	f000 f8c3 	bl	8009340 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80091ba:	2301      	movs	r3, #1
 80091bc:	613b      	str	r3, [r7, #16]
 80091be:	e010      	b.n	80091e2 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d002      	beq.n	80091cc <HAL_FLASH_Program+0x84>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d10a      	bne.n	80091e2 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	4619      	mov	r1, r3
 80091d0:	68b8      	ldr	r0, [r7, #8]
 80091d2:	f000 f8db 	bl	800938c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b02      	cmp	r3, #2
 80091da:	d102      	bne.n	80091e2 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 80091dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80091e0:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80091e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80091e6:	f000 f857 	bl	8009298 <FLASH_WaitForLastOperation>
 80091ea:	4603      	mov	r3, r0
 80091ec:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d006      	beq.n	8009202 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80091f4:	4b09      	ldr	r3, [pc, #36]	; (800921c <HAL_FLASH_Program+0xd4>)
 80091f6:	695a      	ldr	r2, [r3, #20]
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	43db      	mvns	r3, r3
 80091fc:	4907      	ldr	r1, [pc, #28]	; (800921c <HAL_FLASH_Program+0xd4>)
 80091fe:	4013      	ands	r3, r2
 8009200:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009202:	f000 f9d3 	bl	80095ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009206:	4b04      	ldr	r3, [pc, #16]	; (8009218 <HAL_FLASH_Program+0xd0>)
 8009208:	2200      	movs	r2, #0
 800920a:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800920c:	7dfb      	ldrb	r3, [r7, #23]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3718      	adds	r7, #24
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
 8009216:	bf00      	nop
 8009218:	200001ac 	.word	0x200001ac
 800921c:	40022000 	.word	0x40022000

08009220 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800922a:	4b0b      	ldr	r3, [pc, #44]	; (8009258 <HAL_FLASH_Unlock+0x38>)
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	2b00      	cmp	r3, #0
 8009230:	da0b      	bge.n	800924a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009232:	4b09      	ldr	r3, [pc, #36]	; (8009258 <HAL_FLASH_Unlock+0x38>)
 8009234:	4a09      	ldr	r2, [pc, #36]	; (800925c <HAL_FLASH_Unlock+0x3c>)
 8009236:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009238:	4b07      	ldr	r3, [pc, #28]	; (8009258 <HAL_FLASH_Unlock+0x38>)
 800923a:	4a09      	ldr	r2, [pc, #36]	; (8009260 <HAL_FLASH_Unlock+0x40>)
 800923c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800923e:	4b06      	ldr	r3, [pc, #24]	; (8009258 <HAL_FLASH_Unlock+0x38>)
 8009240:	695b      	ldr	r3, [r3, #20]
 8009242:	2b00      	cmp	r3, #0
 8009244:	da01      	bge.n	800924a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009246:	2301      	movs	r3, #1
 8009248:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800924a:	79fb      	ldrb	r3, [r7, #7]
}
 800924c:	4618      	mov	r0, r3
 800924e:	370c      	adds	r7, #12
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr
 8009258:	40022000 	.word	0x40022000
 800925c:	45670123 	.word	0x45670123
 8009260:	cdef89ab 	.word	0xcdef89ab

08009264 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009264:	b480      	push	{r7}
 8009266:	b083      	sub	sp, #12
 8009268:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800926a:	2301      	movs	r3, #1
 800926c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800926e:	4b09      	ldr	r3, [pc, #36]	; (8009294 <HAL_FLASH_Lock+0x30>)
 8009270:	695b      	ldr	r3, [r3, #20]
 8009272:	4a08      	ldr	r2, [pc, #32]	; (8009294 <HAL_FLASH_Lock+0x30>)
 8009274:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009278:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800927a:	4b06      	ldr	r3, [pc, #24]	; (8009294 <HAL_FLASH_Lock+0x30>)
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	2b00      	cmp	r3, #0
 8009280:	da01      	bge.n	8009286 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8009282:	2300      	movs	r3, #0
 8009284:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009286:	79fb      	ldrb	r3, [r7, #7]
}
 8009288:	4618      	mov	r0, r3
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr
 8009294:	40022000 	.word	0x40022000

08009298 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80092a0:	f7fc fc74 	bl	8005b8c <HAL_GetTick>
 80092a4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80092a6:	e009      	b.n	80092bc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80092a8:	f7fc fc70 	bl	8005b8c <HAL_GetTick>
 80092ac:	4602      	mov	r2, r0
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	1ad3      	subs	r3, r2, r3
 80092b2:	687a      	ldr	r2, [r7, #4]
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d201      	bcs.n	80092bc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e038      	b.n	800932e <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80092bc:	4b1e      	ldr	r3, [pc, #120]	; (8009338 <FLASH_WaitForLastOperation+0xa0>)
 80092be:	691b      	ldr	r3, [r3, #16]
 80092c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80092c8:	d0ee      	beq.n	80092a8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80092ca:	4b1b      	ldr	r3, [pc, #108]	; (8009338 <FLASH_WaitForLastOperation+0xa0>)
 80092cc:	691a      	ldr	r2, [r3, #16]
 80092ce:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80092d2:	4013      	ands	r3, r2
 80092d4:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d01e      	beq.n	800931a <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 80092dc:	4b17      	ldr	r3, [pc, #92]	; (800933c <FLASH_WaitForLastOperation+0xa4>)
 80092de:	685a      	ldr	r2, [r3, #4]
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	4a15      	ldr	r2, [pc, #84]	; (800933c <FLASH_WaitForLastOperation+0xa4>)
 80092e6:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d007      	beq.n	8009302 <FLASH_WaitForLastOperation+0x6a>
 80092f2:	4b11      	ldr	r3, [pc, #68]	; (8009338 <FLASH_WaitForLastOperation+0xa0>)
 80092f4:	699a      	ldr	r2, [r3, #24]
 80092f6:	68bb      	ldr	r3, [r7, #8]
 80092f8:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80092fc:	490e      	ldr	r1, [pc, #56]	; (8009338 <FLASH_WaitForLastOperation+0xa0>)
 80092fe:	4313      	orrs	r3, r2
 8009300:	618b      	str	r3, [r1, #24]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009308:	2b00      	cmp	r3, #0
 800930a:	d004      	beq.n	8009316 <FLASH_WaitForLastOperation+0x7e>
 800930c:	4a0a      	ldr	r2, [pc, #40]	; (8009338 <FLASH_WaitForLastOperation+0xa0>)
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8009314:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8009316:	2301      	movs	r3, #1
 8009318:	e009      	b.n	800932e <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800931a:	4b07      	ldr	r3, [pc, #28]	; (8009338 <FLASH_WaitForLastOperation+0xa0>)
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b01      	cmp	r3, #1
 8009324:	d102      	bne.n	800932c <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009326:	4b04      	ldr	r3, [pc, #16]	; (8009338 <FLASH_WaitForLastOperation+0xa0>)
 8009328:	2201      	movs	r2, #1
 800932a:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 800932c:	2300      	movs	r3, #0
}
 800932e:	4618      	mov	r0, r3
 8009330:	3710      	adds	r7, #16
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	40022000 	.word	0x40022000
 800933c:	200001ac 	.word	0x200001ac

08009340 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009340:	b480      	push	{r7}
 8009342:	b085      	sub	sp, #20
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800934c:	4b0e      	ldr	r3, [pc, #56]	; (8009388 <FLASH_Program_DoubleWord+0x48>)
 800934e:	695b      	ldr	r3, [r3, #20]
 8009350:	4a0d      	ldr	r2, [pc, #52]	; (8009388 <FLASH_Program_DoubleWord+0x48>)
 8009352:	f043 0301 	orr.w	r3, r3, #1
 8009356:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800935e:	f3bf 8f6f 	isb	sy
}
 8009362:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009364:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009368:	f04f 0200 	mov.w	r2, #0
 800936c:	f04f 0300 	mov.w	r3, #0
 8009370:	000a      	movs	r2, r1
 8009372:	2300      	movs	r3, #0
 8009374:	68f9      	ldr	r1, [r7, #12]
 8009376:	3104      	adds	r1, #4
 8009378:	4613      	mov	r3, r2
 800937a:	600b      	str	r3, [r1, #0]
}
 800937c:	bf00      	nop
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	40022000 	.word	0x40022000

0800938c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 800938c:	b480      	push	{r7}
 800938e:	b089      	sub	sp, #36	; 0x24
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8009396:	2340      	movs	r3, #64	; 0x40
 8009398:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80093a2:	4b14      	ldr	r3, [pc, #80]	; (80093f4 <FLASH_Program_Fast+0x68>)
 80093a4:	695b      	ldr	r3, [r3, #20]
 80093a6:	4a13      	ldr	r2, [pc, #76]	; (80093f4 <FLASH_Program_Fast+0x68>)
 80093a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80093ac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093ae:	f3ef 8310 	mrs	r3, PRIMASK
 80093b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80093b4:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80093b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80093b8:	b672      	cpsid	i
}
 80093ba:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	69bb      	ldr	r3, [r7, #24]
 80093c2:	601a      	str	r2, [r3, #0]
    dest_addr++;
 80093c4:	69bb      	ldr	r3, [r7, #24]
 80093c6:	3304      	adds	r3, #4
 80093c8:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	3304      	adds	r3, #4
 80093ce:	617b      	str	r3, [r7, #20]
    row_index--;
 80093d0:	7ffb      	ldrb	r3, [r7, #31]
 80093d2:	3b01      	subs	r3, #1
 80093d4:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80093d6:	7ffb      	ldrb	r3, [r7, #31]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d1ef      	bne.n	80093bc <FLASH_Program_Fast+0x30>
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	f383 8810 	msr	PRIMASK, r3
}
 80093e6:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80093e8:	bf00      	nop
 80093ea:	3724      	adds	r7, #36	; 0x24
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	40022000 	.word	0x40022000

080093f8 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009402:	4b47      	ldr	r3, [pc, #284]	; (8009520 <HAL_FLASHEx_Erase+0x128>)
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d101      	bne.n	800940e <HAL_FLASHEx_Erase+0x16>
 800940a:	2302      	movs	r3, #2
 800940c:	e083      	b.n	8009516 <HAL_FLASHEx_Erase+0x11e>
 800940e:	4b44      	ldr	r3, [pc, #272]	; (8009520 <HAL_FLASHEx_Erase+0x128>)
 8009410:	2201      	movs	r2, #1
 8009412:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009414:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8009418:	f7ff ff3e 	bl	8009298 <FLASH_WaitForLastOperation>
 800941c:	4603      	mov	r3, r0
 800941e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009420:	7bfb      	ldrb	r3, [r7, #15]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d173      	bne.n	800950e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009426:	4b3e      	ldr	r3, [pc, #248]	; (8009520 <HAL_FLASHEx_Erase+0x128>)
 8009428:	2200      	movs	r2, #0
 800942a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800942c:	4b3d      	ldr	r3, [pc, #244]	; (8009524 <HAL_FLASHEx_Erase+0x12c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009434:	2b00      	cmp	r3, #0
 8009436:	d013      	beq.n	8009460 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009438:	4b3a      	ldr	r3, [pc, #232]	; (8009524 <HAL_FLASHEx_Erase+0x12c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009440:	2b00      	cmp	r3, #0
 8009442:	d009      	beq.n	8009458 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8009444:	4b37      	ldr	r3, [pc, #220]	; (8009524 <HAL_FLASHEx_Erase+0x12c>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a36      	ldr	r2, [pc, #216]	; (8009524 <HAL_FLASHEx_Erase+0x12c>)
 800944a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800944e:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8009450:	4b33      	ldr	r3, [pc, #204]	; (8009520 <HAL_FLASHEx_Erase+0x128>)
 8009452:	2203      	movs	r2, #3
 8009454:	771a      	strb	r2, [r3, #28]
 8009456:	e016      	b.n	8009486 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8009458:	4b31      	ldr	r3, [pc, #196]	; (8009520 <HAL_FLASHEx_Erase+0x128>)
 800945a:	2201      	movs	r2, #1
 800945c:	771a      	strb	r2, [r3, #28]
 800945e:	e012      	b.n	8009486 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009460:	4b30      	ldr	r3, [pc, #192]	; (8009524 <HAL_FLASHEx_Erase+0x12c>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009468:	2b00      	cmp	r3, #0
 800946a:	d009      	beq.n	8009480 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800946c:	4b2d      	ldr	r3, [pc, #180]	; (8009524 <HAL_FLASHEx_Erase+0x12c>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a2c      	ldr	r2, [pc, #176]	; (8009524 <HAL_FLASHEx_Erase+0x12c>)
 8009472:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009476:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009478:	4b29      	ldr	r3, [pc, #164]	; (8009520 <HAL_FLASHEx_Erase+0x128>)
 800947a:	2202      	movs	r2, #2
 800947c:	771a      	strb	r2, [r3, #28]
 800947e:	e002      	b.n	8009486 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009480:	4b27      	ldr	r3, [pc, #156]	; (8009520 <HAL_FLASHEx_Erase+0x128>)
 8009482:	2200      	movs	r2, #0
 8009484:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b01      	cmp	r3, #1
 800948c:	d111      	bne.n	80094b2 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	685b      	ldr	r3, [r3, #4]
 8009492:	4618      	mov	r0, r3
 8009494:	f000 f848 	bl	8009528 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009498:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800949c:	f7ff fefc 	bl	8009298 <FLASH_WaitForLastOperation>
 80094a0:	4603      	mov	r3, r0
 80094a2:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80094a4:	4b1f      	ldr	r3, [pc, #124]	; (8009524 <HAL_FLASHEx_Erase+0x12c>)
 80094a6:	695b      	ldr	r3, [r3, #20]
 80094a8:	4a1e      	ldr	r2, [pc, #120]	; (8009524 <HAL_FLASHEx_Erase+0x12c>)
 80094aa:	f023 0304 	bic.w	r3, r3, #4
 80094ae:	6153      	str	r3, [r2, #20]
 80094b0:	e02b      	b.n	800950a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	f04f 32ff 	mov.w	r2, #4294967295
 80094b8:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	689b      	ldr	r3, [r3, #8]
 80094be:	60bb      	str	r3, [r7, #8]
 80094c0:	e01b      	b.n	80094fa <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	4619      	mov	r1, r3
 80094c8:	68b8      	ldr	r0, [r7, #8]
 80094ca:	f000 f84b 	bl	8009564 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80094ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80094d2:	f7ff fee1 	bl	8009298 <FLASH_WaitForLastOperation>
 80094d6:	4603      	mov	r3, r0
 80094d8:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80094da:	4b12      	ldr	r3, [pc, #72]	; (8009524 <HAL_FLASHEx_Erase+0x12c>)
 80094dc:	695b      	ldr	r3, [r3, #20]
 80094de:	4a11      	ldr	r2, [pc, #68]	; (8009524 <HAL_FLASHEx_Erase+0x12c>)
 80094e0:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 80094e4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	601a      	str	r2, [r3, #0]
          break;
 80094f2:	e00a      	b.n	800950a <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	3301      	adds	r3, #1
 80094f8:	60bb      	str	r3, [r7, #8]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689a      	ldr	r2, [r3, #8]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	4413      	add	r3, r2
 8009504:	68ba      	ldr	r2, [r7, #8]
 8009506:	429a      	cmp	r2, r3
 8009508:	d3db      	bcc.n	80094c2 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800950a:	f000 f84f 	bl	80095ac <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800950e:	4b04      	ldr	r3, [pc, #16]	; (8009520 <HAL_FLASHEx_Erase+0x128>)
 8009510:	2200      	movs	r2, #0
 8009512:	701a      	strb	r2, [r3, #0]

  return status;
 8009514:	7bfb      	ldrb	r3, [r7, #15]
}
 8009516:	4618      	mov	r0, r3
 8009518:	3710      	adds	r7, #16
 800951a:	46bd      	mov	sp, r7
 800951c:	bd80      	pop	{r7, pc}
 800951e:	bf00      	nop
 8009520:	200001ac 	.word	0x200001ac
 8009524:	40022000 	.word	0x40022000

08009528 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f003 0301 	and.w	r3, r3, #1
 8009536:	2b00      	cmp	r3, #0
 8009538:	d005      	beq.n	8009546 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800953a:	4b09      	ldr	r3, [pc, #36]	; (8009560 <FLASH_MassErase+0x38>)
 800953c:	695b      	ldr	r3, [r3, #20]
 800953e:	4a08      	ldr	r2, [pc, #32]	; (8009560 <FLASH_MassErase+0x38>)
 8009540:	f043 0304 	orr.w	r3, r3, #4
 8009544:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009546:	4b06      	ldr	r3, [pc, #24]	; (8009560 <FLASH_MassErase+0x38>)
 8009548:	695b      	ldr	r3, [r3, #20]
 800954a:	4a05      	ldr	r2, [pc, #20]	; (8009560 <FLASH_MassErase+0x38>)
 800954c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009550:	6153      	str	r3, [r2, #20]
}
 8009552:	bf00      	nop
 8009554:	370c      	adds	r7, #12
 8009556:	46bd      	mov	sp, r7
 8009558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955c:	4770      	bx	lr
 800955e:	bf00      	nop
 8009560:	40022000 	.word	0x40022000

08009564 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8009564:	b480      	push	{r7}
 8009566:	b083      	sub	sp, #12
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800956e:	4b0e      	ldr	r3, [pc, #56]	; (80095a8 <FLASH_PageErase+0x44>)
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	00db      	lsls	r3, r3, #3
 800957a:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800957e:	490a      	ldr	r1, [pc, #40]	; (80095a8 <FLASH_PageErase+0x44>)
 8009580:	4313      	orrs	r3, r2
 8009582:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8009584:	4b08      	ldr	r3, [pc, #32]	; (80095a8 <FLASH_PageErase+0x44>)
 8009586:	695b      	ldr	r3, [r3, #20]
 8009588:	4a07      	ldr	r2, [pc, #28]	; (80095a8 <FLASH_PageErase+0x44>)
 800958a:	f043 0302 	orr.w	r3, r3, #2
 800958e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8009590:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <FLASH_PageErase+0x44>)
 8009592:	695b      	ldr	r3, [r3, #20]
 8009594:	4a04      	ldr	r2, [pc, #16]	; (80095a8 <FLASH_PageErase+0x44>)
 8009596:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800959a:	6153      	str	r3, [r2, #20]
}
 800959c:	bf00      	nop
 800959e:	370c      	adds	r7, #12
 80095a0:	46bd      	mov	sp, r7
 80095a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a6:	4770      	bx	lr
 80095a8:	40022000 	.word	0x40022000

080095ac <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80095b2:	4b21      	ldr	r3, [pc, #132]	; (8009638 <FLASH_FlushCaches+0x8c>)
 80095b4:	7f1b      	ldrb	r3, [r3, #28]
 80095b6:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80095b8:	79fb      	ldrb	r3, [r7, #7]
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d002      	beq.n	80095c4 <FLASH_FlushCaches+0x18>
 80095be:	79fb      	ldrb	r3, [r7, #7]
 80095c0:	2b03      	cmp	r3, #3
 80095c2:	d117      	bne.n	80095f4 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80095c4:	4b1d      	ldr	r3, [pc, #116]	; (800963c <FLASH_FlushCaches+0x90>)
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	4a1c      	ldr	r2, [pc, #112]	; (800963c <FLASH_FlushCaches+0x90>)
 80095ca:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095ce:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80095d0:	4b1a      	ldr	r3, [pc, #104]	; (800963c <FLASH_FlushCaches+0x90>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a19      	ldr	r2, [pc, #100]	; (800963c <FLASH_FlushCaches+0x90>)
 80095d6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80095da:	6013      	str	r3, [r2, #0]
 80095dc:	4b17      	ldr	r3, [pc, #92]	; (800963c <FLASH_FlushCaches+0x90>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a16      	ldr	r2, [pc, #88]	; (800963c <FLASH_FlushCaches+0x90>)
 80095e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095e6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80095e8:	4b14      	ldr	r3, [pc, #80]	; (800963c <FLASH_FlushCaches+0x90>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a13      	ldr	r2, [pc, #76]	; (800963c <FLASH_FlushCaches+0x90>)
 80095ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095f2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d002      	beq.n	8009600 <FLASH_FlushCaches+0x54>
 80095fa:	79fb      	ldrb	r3, [r7, #7]
 80095fc:	2b03      	cmp	r3, #3
 80095fe:	d111      	bne.n	8009624 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8009600:	4b0e      	ldr	r3, [pc, #56]	; (800963c <FLASH_FlushCaches+0x90>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a0d      	ldr	r2, [pc, #52]	; (800963c <FLASH_FlushCaches+0x90>)
 8009606:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800960a:	6013      	str	r3, [r2, #0]
 800960c:	4b0b      	ldr	r3, [pc, #44]	; (800963c <FLASH_FlushCaches+0x90>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a0a      	ldr	r2, [pc, #40]	; (800963c <FLASH_FlushCaches+0x90>)
 8009612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009616:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8009618:	4b08      	ldr	r3, [pc, #32]	; (800963c <FLASH_FlushCaches+0x90>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	4a07      	ldr	r2, [pc, #28]	; (800963c <FLASH_FlushCaches+0x90>)
 800961e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009622:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009624:	4b04      	ldr	r3, [pc, #16]	; (8009638 <FLASH_FlushCaches+0x8c>)
 8009626:	2200      	movs	r2, #0
 8009628:	771a      	strb	r2, [r3, #28]
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr
 8009636:	bf00      	nop
 8009638:	200001ac 	.word	0x200001ac
 800963c:	40022000 	.word	0x40022000

08009640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009640:	b480      	push	{r7}
 8009642:	b087      	sub	sp, #28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800964a:	2300      	movs	r3, #0
 800964c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800964e:	e15a      	b.n	8009906 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	681a      	ldr	r2, [r3, #0]
 8009654:	2101      	movs	r1, #1
 8009656:	697b      	ldr	r3, [r7, #20]
 8009658:	fa01 f303 	lsl.w	r3, r1, r3
 800965c:	4013      	ands	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b00      	cmp	r3, #0
 8009664:	f000 814c 	beq.w	8009900 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	f003 0303 	and.w	r3, r3, #3
 8009670:	2b01      	cmp	r3, #1
 8009672:	d005      	beq.n	8009680 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800967c:	2b02      	cmp	r3, #2
 800967e:	d130      	bne.n	80096e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	689b      	ldr	r3, [r3, #8]
 8009684:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	2203      	movs	r2, #3
 800968c:	fa02 f303 	lsl.w	r3, r2, r3
 8009690:	43db      	mvns	r3, r3
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4013      	ands	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	68da      	ldr	r2, [r3, #12]
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	005b      	lsls	r3, r3, #1
 80096a0:	fa02 f303 	lsl.w	r3, r2, r3
 80096a4:	693a      	ldr	r2, [r7, #16]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	693a      	ldr	r2, [r7, #16]
 80096ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	685b      	ldr	r3, [r3, #4]
 80096b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80096b6:	2201      	movs	r2, #1
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	fa02 f303 	lsl.w	r3, r2, r3
 80096be:	43db      	mvns	r3, r3
 80096c0:	693a      	ldr	r2, [r7, #16]
 80096c2:	4013      	ands	r3, r2
 80096c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80096c6:	683b      	ldr	r3, [r7, #0]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	091b      	lsrs	r3, r3, #4
 80096cc:	f003 0201 	and.w	r2, r3, #1
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	fa02 f303 	lsl.w	r3, r2, r3
 80096d6:	693a      	ldr	r2, [r7, #16]
 80096d8:	4313      	orrs	r3, r2
 80096da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	685b      	ldr	r3, [r3, #4]
 80096e6:	f003 0303 	and.w	r3, r3, #3
 80096ea:	2b03      	cmp	r3, #3
 80096ec:	d017      	beq.n	800971e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	68db      	ldr	r3, [r3, #12]
 80096f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	005b      	lsls	r3, r3, #1
 80096f8:	2203      	movs	r2, #3
 80096fa:	fa02 f303 	lsl.w	r3, r2, r3
 80096fe:	43db      	mvns	r3, r3
 8009700:	693a      	ldr	r2, [r7, #16]
 8009702:	4013      	ands	r3, r2
 8009704:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	689a      	ldr	r2, [r3, #8]
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	005b      	lsls	r3, r3, #1
 800970e:	fa02 f303 	lsl.w	r3, r2, r3
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	4313      	orrs	r3, r2
 8009716:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	f003 0303 	and.w	r3, r3, #3
 8009726:	2b02      	cmp	r3, #2
 8009728:	d123      	bne.n	8009772 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	08da      	lsrs	r2, r3, #3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	3208      	adds	r2, #8
 8009732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009736:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	f003 0307 	and.w	r3, r3, #7
 800973e:	009b      	lsls	r3, r3, #2
 8009740:	220f      	movs	r2, #15
 8009742:	fa02 f303 	lsl.w	r3, r2, r3
 8009746:	43db      	mvns	r3, r3
 8009748:	693a      	ldr	r2, [r7, #16]
 800974a:	4013      	ands	r3, r2
 800974c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	691a      	ldr	r2, [r3, #16]
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	f003 0307 	and.w	r3, r3, #7
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	fa02 f303 	lsl.w	r3, r2, r3
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	4313      	orrs	r3, r2
 8009762:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	08da      	lsrs	r2, r3, #3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3208      	adds	r2, #8
 800976c:	6939      	ldr	r1, [r7, #16]
 800976e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	005b      	lsls	r3, r3, #1
 800977c:	2203      	movs	r2, #3
 800977e:	fa02 f303 	lsl.w	r3, r2, r3
 8009782:	43db      	mvns	r3, r3
 8009784:	693a      	ldr	r2, [r7, #16]
 8009786:	4013      	ands	r3, r2
 8009788:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685b      	ldr	r3, [r3, #4]
 800978e:	f003 0203 	and.w	r2, r3, #3
 8009792:	697b      	ldr	r3, [r7, #20]
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	fa02 f303 	lsl.w	r3, r2, r3
 800979a:	693a      	ldr	r2, [r7, #16]
 800979c:	4313      	orrs	r3, r2
 800979e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	685b      	ldr	r3, [r3, #4]
 80097aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	f000 80a6 	beq.w	8009900 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097b4:	4b5b      	ldr	r3, [pc, #364]	; (8009924 <HAL_GPIO_Init+0x2e4>)
 80097b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097b8:	4a5a      	ldr	r2, [pc, #360]	; (8009924 <HAL_GPIO_Init+0x2e4>)
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	6613      	str	r3, [r2, #96]	; 0x60
 80097c0:	4b58      	ldr	r3, [pc, #352]	; (8009924 <HAL_GPIO_Init+0x2e4>)
 80097c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097c4:	f003 0301 	and.w	r3, r3, #1
 80097c8:	60bb      	str	r3, [r7, #8]
 80097ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80097cc:	4a56      	ldr	r2, [pc, #344]	; (8009928 <HAL_GPIO_Init+0x2e8>)
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	089b      	lsrs	r3, r3, #2
 80097d2:	3302      	adds	r3, #2
 80097d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80097d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	009b      	lsls	r3, r3, #2
 80097e2:	220f      	movs	r2, #15
 80097e4:	fa02 f303 	lsl.w	r3, r2, r3
 80097e8:	43db      	mvns	r3, r3
 80097ea:	693a      	ldr	r2, [r7, #16]
 80097ec:	4013      	ands	r3, r2
 80097ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80097f6:	d01f      	beq.n	8009838 <HAL_GPIO_Init+0x1f8>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a4c      	ldr	r2, [pc, #304]	; (800992c <HAL_GPIO_Init+0x2ec>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d019      	beq.n	8009834 <HAL_GPIO_Init+0x1f4>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a4b      	ldr	r2, [pc, #300]	; (8009930 <HAL_GPIO_Init+0x2f0>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d013      	beq.n	8009830 <HAL_GPIO_Init+0x1f0>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	4a4a      	ldr	r2, [pc, #296]	; (8009934 <HAL_GPIO_Init+0x2f4>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d00d      	beq.n	800982c <HAL_GPIO_Init+0x1ec>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a49      	ldr	r2, [pc, #292]	; (8009938 <HAL_GPIO_Init+0x2f8>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d007      	beq.n	8009828 <HAL_GPIO_Init+0x1e8>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a48      	ldr	r2, [pc, #288]	; (800993c <HAL_GPIO_Init+0x2fc>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d101      	bne.n	8009824 <HAL_GPIO_Init+0x1e4>
 8009820:	2305      	movs	r3, #5
 8009822:	e00a      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 8009824:	2306      	movs	r3, #6
 8009826:	e008      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 8009828:	2304      	movs	r3, #4
 800982a:	e006      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 800982c:	2303      	movs	r3, #3
 800982e:	e004      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 8009830:	2302      	movs	r3, #2
 8009832:	e002      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 8009834:	2301      	movs	r3, #1
 8009836:	e000      	b.n	800983a <HAL_GPIO_Init+0x1fa>
 8009838:	2300      	movs	r3, #0
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	f002 0203 	and.w	r2, r2, #3
 8009840:	0092      	lsls	r2, r2, #2
 8009842:	4093      	lsls	r3, r2
 8009844:	693a      	ldr	r2, [r7, #16]
 8009846:	4313      	orrs	r3, r2
 8009848:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800984a:	4937      	ldr	r1, [pc, #220]	; (8009928 <HAL_GPIO_Init+0x2e8>)
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	089b      	lsrs	r3, r3, #2
 8009850:	3302      	adds	r3, #2
 8009852:	693a      	ldr	r2, [r7, #16]
 8009854:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009858:	4b39      	ldr	r3, [pc, #228]	; (8009940 <HAL_GPIO_Init+0x300>)
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	43db      	mvns	r3, r3
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	4013      	ands	r3, r2
 8009866:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009868:	683b      	ldr	r3, [r7, #0]
 800986a:	685b      	ldr	r3, [r3, #4]
 800986c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009870:	2b00      	cmp	r3, #0
 8009872:	d003      	beq.n	800987c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8009874:	693a      	ldr	r2, [r7, #16]
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4313      	orrs	r3, r2
 800987a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800987c:	4a30      	ldr	r2, [pc, #192]	; (8009940 <HAL_GPIO_Init+0x300>)
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8009882:	4b2f      	ldr	r3, [pc, #188]	; (8009940 <HAL_GPIO_Init+0x300>)
 8009884:	68db      	ldr	r3, [r3, #12]
 8009886:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	43db      	mvns	r3, r3
 800988c:	693a      	ldr	r2, [r7, #16]
 800988e:	4013      	ands	r3, r2
 8009890:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800989a:	2b00      	cmp	r3, #0
 800989c:	d003      	beq.n	80098a6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800989e:	693a      	ldr	r2, [r7, #16]
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	4313      	orrs	r3, r2
 80098a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80098a6:	4a26      	ldr	r2, [pc, #152]	; (8009940 <HAL_GPIO_Init+0x300>)
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80098ac:	4b24      	ldr	r3, [pc, #144]	; (8009940 <HAL_GPIO_Init+0x300>)
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	43db      	mvns	r3, r3
 80098b6:	693a      	ldr	r2, [r7, #16]
 80098b8:	4013      	ands	r3, r2
 80098ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d003      	beq.n	80098d0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	4313      	orrs	r3, r2
 80098ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80098d0:	4a1b      	ldr	r2, [pc, #108]	; (8009940 <HAL_GPIO_Init+0x300>)
 80098d2:	693b      	ldr	r3, [r7, #16]
 80098d4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80098d6:	4b1a      	ldr	r3, [pc, #104]	; (8009940 <HAL_GPIO_Init+0x300>)
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	43db      	mvns	r3, r3
 80098e0:	693a      	ldr	r2, [r7, #16]
 80098e2:	4013      	ands	r3, r2
 80098e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80098e6:	683b      	ldr	r3, [r7, #0]
 80098e8:	685b      	ldr	r3, [r3, #4]
 80098ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d003      	beq.n	80098fa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	4313      	orrs	r3, r2
 80098f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80098fa:	4a11      	ldr	r2, [pc, #68]	; (8009940 <HAL_GPIO_Init+0x300>)
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	3301      	adds	r3, #1
 8009904:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	fa22 f303 	lsr.w	r3, r2, r3
 8009910:	2b00      	cmp	r3, #0
 8009912:	f47f ae9d 	bne.w	8009650 <HAL_GPIO_Init+0x10>
  }
}
 8009916:	bf00      	nop
 8009918:	bf00      	nop
 800991a:	371c      	adds	r7, #28
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr
 8009924:	40021000 	.word	0x40021000
 8009928:	40010000 	.word	0x40010000
 800992c:	48000400 	.word	0x48000400
 8009930:	48000800 	.word	0x48000800
 8009934:	48000c00 	.word	0x48000c00
 8009938:	48001000 	.word	0x48001000
 800993c:	48001400 	.word	0x48001400
 8009940:	40010400 	.word	0x40010400

08009944 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009944:	b480      	push	{r7}
 8009946:	b085      	sub	sp, #20
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	460b      	mov	r3, r1
 800994e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	887b      	ldrh	r3, [r7, #2]
 8009956:	4013      	ands	r3, r2
 8009958:	2b00      	cmp	r3, #0
 800995a:	d002      	beq.n	8009962 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800995c:	2301      	movs	r3, #1
 800995e:	73fb      	strb	r3, [r7, #15]
 8009960:	e001      	b.n	8009966 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009962:	2300      	movs	r3, #0
 8009964:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009966:	7bfb      	ldrb	r3, [r7, #15]
}
 8009968:	4618      	mov	r0, r3
 800996a:	3714      	adds	r7, #20
 800996c:	46bd      	mov	sp, r7
 800996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009972:	4770      	bx	lr

08009974 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009974:	b480      	push	{r7}
 8009976:	b083      	sub	sp, #12
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	460b      	mov	r3, r1
 800997e:	807b      	strh	r3, [r7, #2]
 8009980:	4613      	mov	r3, r2
 8009982:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009984:	787b      	ldrb	r3, [r7, #1]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800998a:	887a      	ldrh	r2, [r7, #2]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009990:	e002      	b.n	8009998 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009992:	887a      	ldrh	r2, [r7, #2]
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b082      	sub	sp, #8
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	4603      	mov	r3, r0
 80099ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80099ae:	4b08      	ldr	r3, [pc, #32]	; (80099d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099b0:	695a      	ldr	r2, [r3, #20]
 80099b2:	88fb      	ldrh	r3, [r7, #6]
 80099b4:	4013      	ands	r3, r2
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d006      	beq.n	80099c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80099ba:	4a05      	ldr	r2, [pc, #20]	; (80099d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80099bc:	88fb      	ldrh	r3, [r7, #6]
 80099be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80099c0:	88fb      	ldrh	r3, [r7, #6]
 80099c2:	4618      	mov	r0, r3
 80099c4:	f7f9 f888 	bl	8002ad8 <HAL_GPIO_EXTI_Callback>
  }
}
 80099c8:	bf00      	nop
 80099ca:	3708      	adds	r7, #8
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	40010400 	.word	0x40010400

080099d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b082      	sub	sp, #8
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80099e2:	2301      	movs	r3, #1
 80099e4:	e08d      	b.n	8009b02 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80099ec:	b2db      	uxtb	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d106      	bne.n	8009a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7fa ffe0 	bl	80049c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2224      	movs	r2, #36	; 0x24
 8009a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	681a      	ldr	r2, [r3, #0]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	f022 0201 	bic.w	r2, r2, #1
 8009a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009a24:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	689a      	ldr	r2, [r3, #8]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009a34:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	d107      	bne.n	8009a4e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689a      	ldr	r2, [r3, #8]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009a4a:	609a      	str	r2, [r3, #8]
 8009a4c:	e006      	b.n	8009a5c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689a      	ldr	r2, [r3, #8]
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009a5a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	2b02      	cmp	r3, #2
 8009a62:	d108      	bne.n	8009a76 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	685a      	ldr	r2, [r3, #4]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a72:	605a      	str	r2, [r3, #4]
 8009a74:	e007      	b.n	8009a86 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009a84:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	685b      	ldr	r3, [r3, #4]
 8009a8c:	687a      	ldr	r2, [r7, #4]
 8009a8e:	6812      	ldr	r2, [r2, #0]
 8009a90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009a94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a98:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68da      	ldr	r2, [r3, #12]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009aa8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	691a      	ldr	r2, [r3, #16]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	695b      	ldr	r3, [r3, #20]
 8009ab2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	430a      	orrs	r2, r1
 8009ac2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	69d9      	ldr	r1, [r3, #28]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a1a      	ldr	r2, [r3, #32]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f042 0201 	orr.w	r2, r2, #1
 8009ae2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2220      	movs	r2, #32
 8009aee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009b0a:	b480      	push	{r7}
 8009b0c:	b083      	sub	sp, #12
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009b1a:	b2db      	uxtb	r3, r3
 8009b1c:	2b20      	cmp	r3, #32
 8009b1e:	d138      	bne.n	8009b92 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e032      	b.n	8009b94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2201      	movs	r2, #1
 8009b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2224      	movs	r2, #36	; 0x24
 8009b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	f022 0201 	bic.w	r2, r2, #1
 8009b4c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009b5c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	6819      	ldr	r1, [r3, #0]
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	f042 0201 	orr.w	r2, r2, #1
 8009b7c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	2220      	movs	r2, #32
 8009b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e000      	b.n	8009b94 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009b92:	2302      	movs	r3, #2
  }
}
 8009b94:	4618      	mov	r0, r3
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9e:	4770      	bx	lr

08009ba0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009ba0:	b480      	push	{r7}
 8009ba2:	b085      	sub	sp, #20
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	2b20      	cmp	r3, #32
 8009bb4:	d139      	bne.n	8009c2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bbc:	2b01      	cmp	r3, #1
 8009bbe:	d101      	bne.n	8009bc4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	e033      	b.n	8009c2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2224      	movs	r2, #36	; 0x24
 8009bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	681a      	ldr	r2, [r3, #0]
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f022 0201 	bic.w	r2, r2, #1
 8009be2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009bf2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	021b      	lsls	r3, r3, #8
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68fa      	ldr	r2, [r7, #12]
 8009c04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f042 0201 	orr.w	r2, r2, #1
 8009c14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2220      	movs	r2, #32
 8009c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2200      	movs	r2, #0
 8009c22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009c26:	2300      	movs	r3, #0
 8009c28:	e000      	b.n	8009c2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009c2a:	2302      	movs	r3, #2
  }
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3714      	adds	r7, #20
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr

08009c38 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d101      	bne.n	8009c4a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8009c46:	2301      	movs	r3, #1
 8009c48:	e0c0      	b.n	8009dcc <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d106      	bne.n	8009c64 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2200      	movs	r2, #0
 8009c5a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f00b fed0 	bl	8015a04 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2203      	movs	r2, #3
 8009c68:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	4618      	mov	r0, r3
 8009c72:	f005 fe26 	bl	800f8c2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009c76:	2300      	movs	r3, #0
 8009c78:	73fb      	strb	r3, [r7, #15]
 8009c7a:	e03e      	b.n	8009cfa <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8009c7c:	7bfa      	ldrb	r2, [r7, #15]
 8009c7e:	6879      	ldr	r1, [r7, #4]
 8009c80:	4613      	mov	r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	440b      	add	r3, r1
 8009c8a:	3311      	adds	r3, #17
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009c90:	7bfa      	ldrb	r2, [r7, #15]
 8009c92:	6879      	ldr	r1, [r7, #4]
 8009c94:	4613      	mov	r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	4413      	add	r3, r2
 8009c9a:	00db      	lsls	r3, r3, #3
 8009c9c:	440b      	add	r3, r1
 8009c9e:	3310      	adds	r3, #16
 8009ca0:	7bfa      	ldrb	r2, [r7, #15]
 8009ca2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009ca4:	7bfa      	ldrb	r2, [r7, #15]
 8009ca6:	6879      	ldr	r1, [r7, #4]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	4413      	add	r3, r2
 8009cae:	00db      	lsls	r3, r3, #3
 8009cb0:	440b      	add	r3, r1
 8009cb2:	3313      	adds	r3, #19
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009cb8:	7bfa      	ldrb	r2, [r7, #15]
 8009cba:	6879      	ldr	r1, [r7, #4]
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	440b      	add	r3, r1
 8009cc6:	3320      	adds	r3, #32
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8009ccc:	7bfa      	ldrb	r2, [r7, #15]
 8009cce:	6879      	ldr	r1, [r7, #4]
 8009cd0:	4613      	mov	r3, r2
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	440b      	add	r3, r1
 8009cda:	3324      	adds	r3, #36	; 0x24
 8009cdc:	2200      	movs	r2, #0
 8009cde:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8009ce0:	7bfb      	ldrb	r3, [r7, #15]
 8009ce2:	6879      	ldr	r1, [r7, #4]
 8009ce4:	1c5a      	adds	r2, r3, #1
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	009b      	lsls	r3, r3, #2
 8009cea:	4413      	add	r3, r2
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	440b      	add	r3, r1
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009cf4:	7bfb      	ldrb	r3, [r7, #15]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	73fb      	strb	r3, [r7, #15]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	791b      	ldrb	r3, [r3, #4]
 8009cfe:	7bfa      	ldrb	r2, [r7, #15]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d3bb      	bcc.n	8009c7c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d04:	2300      	movs	r3, #0
 8009d06:	73fb      	strb	r3, [r7, #15]
 8009d08:	e044      	b.n	8009d94 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009d0a:	7bfa      	ldrb	r2, [r7, #15]
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	009b      	lsls	r3, r3, #2
 8009d12:	4413      	add	r3, r2
 8009d14:	00db      	lsls	r3, r3, #3
 8009d16:	440b      	add	r3, r1
 8009d18:	f203 1351 	addw	r3, r3, #337	; 0x151
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8009d20:	7bfa      	ldrb	r2, [r7, #15]
 8009d22:	6879      	ldr	r1, [r7, #4]
 8009d24:	4613      	mov	r3, r2
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	4413      	add	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	440b      	add	r3, r1
 8009d2e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009d32:	7bfa      	ldrb	r2, [r7, #15]
 8009d34:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8009d36:	7bfa      	ldrb	r2, [r7, #15]
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	4413      	add	r3, r2
 8009d40:	00db      	lsls	r3, r3, #3
 8009d42:	440b      	add	r3, r1
 8009d44:	f203 1353 	addw	r3, r3, #339	; 0x153
 8009d48:	2200      	movs	r2, #0
 8009d4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8009d4c:	7bfa      	ldrb	r2, [r7, #15]
 8009d4e:	6879      	ldr	r1, [r7, #4]
 8009d50:	4613      	mov	r3, r2
 8009d52:	009b      	lsls	r3, r3, #2
 8009d54:	4413      	add	r3, r2
 8009d56:	00db      	lsls	r3, r3, #3
 8009d58:	440b      	add	r3, r1
 8009d5a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8009d5e:	2200      	movs	r2, #0
 8009d60:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8009d62:	7bfa      	ldrb	r2, [r7, #15]
 8009d64:	6879      	ldr	r1, [r7, #4]
 8009d66:	4613      	mov	r3, r2
 8009d68:	009b      	lsls	r3, r3, #2
 8009d6a:	4413      	add	r3, r2
 8009d6c:	00db      	lsls	r3, r3, #3
 8009d6e:	440b      	add	r3, r1
 8009d70:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009d74:	2200      	movs	r2, #0
 8009d76:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009d78:	7bfa      	ldrb	r2, [r7, #15]
 8009d7a:	6879      	ldr	r1, [r7, #4]
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4413      	add	r3, r2
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	440b      	add	r3, r1
 8009d86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009d8e:	7bfb      	ldrb	r3, [r7, #15]
 8009d90:	3301      	adds	r3, #1
 8009d92:	73fb      	strb	r3, [r7, #15]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	791b      	ldrb	r3, [r3, #4]
 8009d98:	7bfa      	ldrb	r2, [r7, #15]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d3b5      	bcc.n	8009d0a <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	6818      	ldr	r0, [r3, #0]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	3304      	adds	r3, #4
 8009da6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8009daa:	f005 fda5 	bl	800f8f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2200      	movs	r2, #0
 8009db2:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2201      	movs	r2, #1
 8009db8:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	7a9b      	ldrb	r3, [r3, #10]
 8009dc0:	2b01      	cmp	r3, #1
 8009dc2:	d102      	bne.n	8009dca <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f001 fc41 	bl	800b64c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8009dca:	2300      	movs	r3, #0
}
 8009dcc:	4618      	mov	r0, r3
 8009dce:	3710      	adds	r7, #16
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}

08009dd4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b082      	sub	sp, #8
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8009de2:	2b01      	cmp	r3, #1
 8009de4:	d101      	bne.n	8009dea <HAL_PCD_Start+0x16>
 8009de6:	2302      	movs	r3, #2
 8009de8:	e012      	b.n	8009e10 <HAL_PCD_Start+0x3c>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2201      	movs	r2, #1
 8009dee:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4618      	mov	r0, r3
 8009df8:	f005 fd4c 	bl	800f894 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4618      	mov	r0, r3
 8009e02:	f008 f80c 	bl	8011e1e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8009e0e:	2300      	movs	r3, #0
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b084      	sub	sp, #16
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f008 f811 	bl	8011e4c <USB_ReadInterrupts>
 8009e2a:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d003      	beq.n	8009e3e <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fb04 	bl	800a444 <PCD_EP_ISR_Handler>

    return;
 8009e3c:	e110      	b.n	800a060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d013      	beq.n	8009e70 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009e5a:	b292      	uxth	r2, r2
 8009e5c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f00b fe60 	bl	8015b26 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8009e66:	2100      	movs	r1, #0
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f8fc 	bl	800a066 <HAL_PCD_SetAddress>

    return;
 8009e6e:	e0f7      	b.n	800a060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d00c      	beq.n	8009e94 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009e8c:	b292      	uxth	r2, r2
 8009e8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009e92:	e0e5      	b.n	800a060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00c      	beq.n	8009eb8 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009ea6:	b29a      	uxth	r2, r3
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009eb0:	b292      	uxth	r2, r2
 8009eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009eb6:	e0d3      	b.n	800a060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d034      	beq.n	8009f2c <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009eca:	b29a      	uxth	r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f022 0204 	bic.w	r2, r2, #4
 8009ed4:	b292      	uxth	r2, r2
 8009ed6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009ee2:	b29a      	uxth	r2, r3
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f022 0208 	bic.w	r2, r2, #8
 8009eec:	b292      	uxth	r2, r2
 8009eee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d107      	bne.n	8009f0c <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009f04:	2100      	movs	r1, #0
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f00c f800 	bl	8015f0c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f00b fe43 	bl	8015b98 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f24:	b292      	uxth	r2, r2
 8009f26:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8009f2a:	e099      	b.n	800a060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d027      	beq.n	8009f86 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f042 0208 	orr.w	r2, r2, #8
 8009f48:	b292      	uxth	r2, r2
 8009f4a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f56:	b29a      	uxth	r2, r3
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f60:	b292      	uxth	r2, r2
 8009f62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009f6e:	b29a      	uxth	r2, r3
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f042 0204 	orr.w	r2, r2, #4
 8009f78:	b292      	uxth	r2, r2
 8009f7a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f00b fdf0 	bl	8015b64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8009f84:	e06c      	b.n	800a060 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d040      	beq.n	800a012 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009f98:	b29a      	uxth	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009fa2:	b292      	uxth	r2, r2
 8009fa4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d12b      	bne.n	800a00a <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009fba:	b29a      	uxth	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f042 0204 	orr.w	r2, r2, #4
 8009fc4:	b292      	uxth	r2, r2
 8009fc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f042 0208 	orr.w	r2, r2, #8
 8009fdc:	b292      	uxth	r2, r2
 8009fde:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2201      	movs	r2, #1
 8009fe6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	089b      	lsrs	r3, r3, #2
 8009ff6:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800a000:	2101      	movs	r1, #1
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f00b ff82 	bl	8015f0c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800a008:	e02a      	b.n	800a060 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800a00a:	6878      	ldr	r0, [r7, #4]
 800a00c:	f00b fdaa 	bl	8015b64 <HAL_PCD_SuspendCallback>
    return;
 800a010:	e026      	b.n	800a060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d00f      	beq.n	800a03c <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a024:	b29a      	uxth	r2, r3
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a02e:	b292      	uxth	r2, r2
 800a030:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f00b fd68 	bl	8015b0a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800a03a:	e011      	b.n	800a060 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00c      	beq.n	800a060 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a04e:	b29a      	uxth	r2, r3
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a058:	b292      	uxth	r2, r2
 800a05a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800a05e:	bf00      	nop
  }
}
 800a060:	3710      	adds	r7, #16
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}

0800a066 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800a066:	b580      	push	{r7, lr}
 800a068:	b082      	sub	sp, #8
 800a06a:	af00      	add	r7, sp, #0
 800a06c:	6078      	str	r0, [r7, #4]
 800a06e:	460b      	mov	r3, r1
 800a070:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d101      	bne.n	800a080 <HAL_PCD_SetAddress+0x1a>
 800a07c:	2302      	movs	r3, #2
 800a07e:	e012      	b.n	800a0a6 <HAL_PCD_SetAddress+0x40>
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2201      	movs	r2, #1
 800a084:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	78fa      	ldrb	r2, [r7, #3]
 800a08c:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	78fa      	ldrb	r2, [r7, #3]
 800a094:	4611      	mov	r1, r2
 800a096:	4618      	mov	r0, r3
 800a098:	f007 fead 	bl	8011df6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	3708      	adds	r7, #8
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}

0800a0ae <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800a0ae:	b580      	push	{r7, lr}
 800a0b0:	b084      	sub	sp, #16
 800a0b2:	af00      	add	r7, sp, #0
 800a0b4:	6078      	str	r0, [r7, #4]
 800a0b6:	4608      	mov	r0, r1
 800a0b8:	4611      	mov	r1, r2
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	4603      	mov	r3, r0
 800a0be:	70fb      	strb	r3, [r7, #3]
 800a0c0:	460b      	mov	r3, r1
 800a0c2:	803b      	strh	r3, [r7, #0]
 800a0c4:	4613      	mov	r3, r2
 800a0c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a0cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	da0e      	bge.n	800a0f2 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a0d4:	78fb      	ldrb	r3, [r7, #3]
 800a0d6:	f003 0207 	and.w	r2, r3, #7
 800a0da:	4613      	mov	r3, r2
 800a0dc:	009b      	lsls	r3, r3, #2
 800a0de:	4413      	add	r3, r2
 800a0e0:	00db      	lsls	r3, r3, #3
 800a0e2:	3310      	adds	r3, #16
 800a0e4:	687a      	ldr	r2, [r7, #4]
 800a0e6:	4413      	add	r3, r2
 800a0e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2201      	movs	r2, #1
 800a0ee:	705a      	strb	r2, [r3, #1]
 800a0f0:	e00e      	b.n	800a110 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a0f2:	78fb      	ldrb	r3, [r7, #3]
 800a0f4:	f003 0207 	and.w	r2, r3, #7
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	00db      	lsls	r3, r3, #3
 800a100:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	4413      	add	r3, r2
 800a108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	f003 0307 	and.w	r3, r3, #7
 800a116:	b2da      	uxtb	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800a11c:	883a      	ldrh	r2, [r7, #0]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	78ba      	ldrb	r2, [r7, #2]
 800a126:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800a128:	78bb      	ldrb	r3, [r7, #2]
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d102      	bne.n	800a134 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	2200      	movs	r2, #0
 800a132:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d101      	bne.n	800a142 <HAL_PCD_EP_Open+0x94>
 800a13e:	2302      	movs	r3, #2
 800a140:	e00e      	b.n	800a160 <HAL_PCD_EP_Open+0xb2>
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	2201      	movs	r2, #1
 800a146:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68f9      	ldr	r1, [r7, #12]
 800a150:	4618      	mov	r0, r3
 800a152:	f005 fbef 	bl	800f934 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800a15e:	7afb      	ldrb	r3, [r7, #11]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3710      	adds	r7, #16
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	460b      	mov	r3, r1
 800a172:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800a174:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	da0e      	bge.n	800a19a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a17c:	78fb      	ldrb	r3, [r7, #3]
 800a17e:	f003 0207 	and.w	r2, r3, #7
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	00db      	lsls	r3, r3, #3
 800a18a:	3310      	adds	r3, #16
 800a18c:	687a      	ldr	r2, [r7, #4]
 800a18e:	4413      	add	r3, r2
 800a190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2201      	movs	r2, #1
 800a196:	705a      	strb	r2, [r3, #1]
 800a198:	e00e      	b.n	800a1b8 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a19a:	78fb      	ldrb	r3, [r7, #3]
 800a19c:	f003 0207 	and.w	r2, r3, #7
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	4413      	add	r3, r2
 800a1a6:	00db      	lsls	r3, r3, #3
 800a1a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	4413      	add	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800a1b8:	78fb      	ldrb	r3, [r7, #3]
 800a1ba:	f003 0307 	and.w	r3, r3, #7
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d101      	bne.n	800a1d2 <HAL_PCD_EP_Close+0x6a>
 800a1ce:	2302      	movs	r3, #2
 800a1d0:	e00e      	b.n	800a1f0 <HAL_PCD_EP_Close+0x88>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	68f9      	ldr	r1, [r7, #12]
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	f005 ff6b 	bl	80100bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800a1ee:	2300      	movs	r3, #0
}
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	3710      	adds	r7, #16
 800a1f4:	46bd      	mov	sp, r7
 800a1f6:	bd80      	pop	{r7, pc}

0800a1f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	607a      	str	r2, [r7, #4]
 800a202:	603b      	str	r3, [r7, #0]
 800a204:	460b      	mov	r3, r1
 800a206:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a208:	7afb      	ldrb	r3, [r7, #11]
 800a20a:	f003 0207 	and.w	r2, r3, #7
 800a20e:	4613      	mov	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	4413      	add	r3, r2
 800a214:	00db      	lsls	r3, r3, #3
 800a216:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a21a:	68fa      	ldr	r2, [r7, #12]
 800a21c:	4413      	add	r3, r2
 800a21e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	2200      	movs	r2, #0
 800a230:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	2200      	movs	r2, #0
 800a236:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a238:	7afb      	ldrb	r3, [r7, #11]
 800a23a:	f003 0307 	and.w	r3, r3, #7
 800a23e:	b2da      	uxtb	r2, r3
 800a240:	697b      	ldr	r3, [r7, #20]
 800a242:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	6979      	ldr	r1, [r7, #20]
 800a24a:	4618      	mov	r0, r3
 800a24c:	f006 f923 	bl	8010496 <USB_EPStartXfer>

  return HAL_OK;
 800a250:	2300      	movs	r3, #0
}
 800a252:	4618      	mov	r0, r3
 800a254:	3718      	adds	r7, #24
 800a256:	46bd      	mov	sp, r7
 800a258:	bd80      	pop	{r7, pc}

0800a25a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800a25a:	b480      	push	{r7}
 800a25c:	b083      	sub	sp, #12
 800a25e:	af00      	add	r7, sp, #0
 800a260:	6078      	str	r0, [r7, #4]
 800a262:	460b      	mov	r3, r1
 800a264:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800a266:	78fb      	ldrb	r3, [r7, #3]
 800a268:	f003 0207 	and.w	r2, r3, #7
 800a26c:	6879      	ldr	r1, [r7, #4]
 800a26e:	4613      	mov	r3, r2
 800a270:	009b      	lsls	r3, r3, #2
 800a272:	4413      	add	r3, r2
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	440b      	add	r3, r1
 800a278:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800a27c:	681b      	ldr	r3, [r3, #0]
}
 800a27e:	4618      	mov	r0, r3
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b086      	sub	sp, #24
 800a28e:	af00      	add	r7, sp, #0
 800a290:	60f8      	str	r0, [r7, #12]
 800a292:	607a      	str	r2, [r7, #4]
 800a294:	603b      	str	r3, [r7, #0]
 800a296:	460b      	mov	r3, r1
 800a298:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a29a:	7afb      	ldrb	r3, [r7, #11]
 800a29c:	f003 0207 	and.w	r2, r3, #7
 800a2a0:	4613      	mov	r3, r2
 800a2a2:	009b      	lsls	r3, r3, #2
 800a2a4:	4413      	add	r3, r2
 800a2a6:	00db      	lsls	r3, r3, #3
 800a2a8:	3310      	adds	r3, #16
 800a2aa:	68fa      	ldr	r2, [r7, #12]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	683a      	ldr	r2, [r7, #0]
 800a2ba:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800a2bc:	697b      	ldr	r3, [r7, #20]
 800a2be:	2201      	movs	r2, #1
 800a2c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	683a      	ldr	r2, [r7, #0]
 800a2c8:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	2201      	movs	r2, #1
 800a2d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a2d6:	7afb      	ldrb	r3, [r7, #11]
 800a2d8:	f003 0307 	and.w	r3, r3, #7
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	697b      	ldr	r3, [r7, #20]
 800a2e0:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	6979      	ldr	r1, [r7, #20]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f006 f8d4 	bl	8010496 <USB_EPStartXfer>

  return HAL_OK;
 800a2ee:	2300      	movs	r3, #0
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b084      	sub	sp, #16
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800a304:	78fb      	ldrb	r3, [r7, #3]
 800a306:	f003 0307 	and.w	r3, r3, #7
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	7912      	ldrb	r2, [r2, #4]
 800a30e:	4293      	cmp	r3, r2
 800a310:	d901      	bls.n	800a316 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e03e      	b.n	800a394 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a316:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	da0e      	bge.n	800a33c <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a31e:	78fb      	ldrb	r3, [r7, #3]
 800a320:	f003 0207 	and.w	r2, r3, #7
 800a324:	4613      	mov	r3, r2
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	4413      	add	r3, r2
 800a32a:	00db      	lsls	r3, r3, #3
 800a32c:	3310      	adds	r3, #16
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	4413      	add	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2201      	movs	r2, #1
 800a338:	705a      	strb	r2, [r3, #1]
 800a33a:	e00c      	b.n	800a356 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800a33c:	78fa      	ldrb	r2, [r7, #3]
 800a33e:	4613      	mov	r3, r2
 800a340:	009b      	lsls	r3, r3, #2
 800a342:	4413      	add	r3, r2
 800a344:	00db      	lsls	r3, r3, #3
 800a346:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	4413      	add	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2201      	movs	r2, #1
 800a35a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a35c:	78fb      	ldrb	r3, [r7, #3]
 800a35e:	f003 0307 	and.w	r3, r3, #7
 800a362:	b2da      	uxtb	r2, r3
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a36e:	2b01      	cmp	r3, #1
 800a370:	d101      	bne.n	800a376 <HAL_PCD_EP_SetStall+0x7e>
 800a372:	2302      	movs	r3, #2
 800a374:	e00e      	b.n	800a394 <HAL_PCD_EP_SetStall+0x9c>
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	68f9      	ldr	r1, [r7, #12]
 800a384:	4618      	mov	r0, r3
 800a386:	f007 fc37 	bl	8011bf8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800a3a8:	78fb      	ldrb	r3, [r7, #3]
 800a3aa:	f003 030f 	and.w	r3, r3, #15
 800a3ae:	687a      	ldr	r2, [r7, #4]
 800a3b0:	7912      	ldrb	r2, [r2, #4]
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d901      	bls.n	800a3ba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	e040      	b.n	800a43c <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800a3ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	da0e      	bge.n	800a3e0 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800a3c2:	78fb      	ldrb	r3, [r7, #3]
 800a3c4:	f003 0207 	and.w	r2, r3, #7
 800a3c8:	4613      	mov	r3, r2
 800a3ca:	009b      	lsls	r3, r3, #2
 800a3cc:	4413      	add	r3, r2
 800a3ce:	00db      	lsls	r3, r3, #3
 800a3d0:	3310      	adds	r3, #16
 800a3d2:	687a      	ldr	r2, [r7, #4]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2201      	movs	r2, #1
 800a3dc:	705a      	strb	r2, [r3, #1]
 800a3de:	e00e      	b.n	800a3fe <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800a3e0:	78fb      	ldrb	r3, [r7, #3]
 800a3e2:	f003 0207 	and.w	r2, r3, #7
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	009b      	lsls	r3, r3, #2
 800a3ea:	4413      	add	r3, r2
 800a3ec:	00db      	lsls	r3, r3, #3
 800a3ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	4413      	add	r3, r2
 800a3f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	2200      	movs	r2, #0
 800a402:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	f003 0307 	and.w	r3, r3, #7
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800a416:	2b01      	cmp	r3, #1
 800a418:	d101      	bne.n	800a41e <HAL_PCD_EP_ClrStall+0x82>
 800a41a:	2302      	movs	r3, #2
 800a41c:	e00e      	b.n	800a43c <HAL_PCD_EP_ClrStall+0xa0>
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68f9      	ldr	r1, [r7, #12]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f007 fc34 	bl	8011c9a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2200      	movs	r2, #0
 800a436:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800a43a:	2300      	movs	r3, #0
}
 800a43c:	4618      	mov	r0, r3
 800a43e:	3710      	adds	r7, #16
 800a440:	46bd      	mov	sp, r7
 800a442:	bd80      	pop	{r7, pc}

0800a444 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b096      	sub	sp, #88	; 0x58
 800a448:	af00      	add	r7, sp, #0
 800a44a:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800a44c:	e3ae      	b.n	800abac <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a456:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800a45a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	f003 030f 	and.w	r3, r3, #15
 800a464:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 800a468:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f040 8170 	bne.w	800a752 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800a472:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800a476:	f003 0310 	and.w	r3, r3, #16
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d14d      	bne.n	800a51a <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	881b      	ldrh	r3, [r3, #0]
 800a484:	b29b      	uxth	r3, r3
 800a486:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a48a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a48e:	81fb      	strh	r3, [r7, #14]
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681a      	ldr	r2, [r3, #0]
 800a494:	89fb      	ldrh	r3, [r7, #14]
 800a496:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a49a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a49e:	b29b      	uxth	r3, r3
 800a4a0:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	3310      	adds	r3, #16
 800a4a6:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	461a      	mov	r2, r3
 800a4b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	00db      	lsls	r3, r3, #3
 800a4ba:	4413      	add	r3, r2
 800a4bc:	687a      	ldr	r2, [r7, #4]
 800a4be:	6812      	ldr	r2, [r2, #0]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a4c6:	881b      	ldrh	r3, [r3, #0]
 800a4c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a4cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800a4d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4d2:	695a      	ldr	r2, [r3, #20]
 800a4d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4d6:	69db      	ldr	r3, [r3, #28]
 800a4d8:	441a      	add	r2, r3
 800a4da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4dc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800a4de:	2100      	movs	r1, #0
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f00b faf8 	bl	8015ad6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	7b1b      	ldrb	r3, [r3, #12]
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	f000 835d 	beq.w	800abac <PCD_EP_ISR_Handler+0x768>
 800a4f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a4f4:	699b      	ldr	r3, [r3, #24]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	f040 8358 	bne.w	800abac <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	7b1b      	ldrb	r3, [r3, #12]
 800a500:	b2db      	uxtb	r3, r3
 800a502:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a506:	b2da      	uxtb	r2, r3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	b292      	uxth	r2, r2
 800a50e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2200      	movs	r2, #0
 800a516:	731a      	strb	r2, [r3, #12]
 800a518:	e348      	b.n	800abac <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a520:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	881b      	ldrh	r3, [r3, #0]
 800a528:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800a52c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a534:	2b00      	cmp	r3, #0
 800a536:	d032      	beq.n	800a59e <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a540:	b29b      	uxth	r3, r3
 800a542:	461a      	mov	r2, r3
 800a544:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	00db      	lsls	r3, r3, #3
 800a54a:	4413      	add	r3, r2
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	6812      	ldr	r2, [r2, #0]
 800a550:	4413      	add	r3, r2
 800a552:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a556:	881b      	ldrh	r3, [r3, #0]
 800a558:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a55c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a55e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6818      	ldr	r0, [r3, #0]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f503 7126 	add.w	r1, r3, #664	; 0x298
 800a56a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a56c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800a56e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a570:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800a572:	b29b      	uxth	r3, r3
 800a574:	f007 fcbc 	bl	8011ef0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	681b      	ldr	r3, [r3, #0]
 800a57c:	881b      	ldrh	r3, [r3, #0]
 800a57e:	b29a      	uxth	r2, r3
 800a580:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a584:	4013      	ands	r3, r2
 800a586:	823b      	strh	r3, [r7, #16]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	8a3a      	ldrh	r2, [r7, #16]
 800a58e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a592:	b292      	uxth	r2, r2
 800a594:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f00b fa70 	bl	8015a7c <HAL_PCD_SetupStageCallback>
 800a59c:	e306      	b.n	800abac <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a59e:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	f280 8302 	bge.w	800abac <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	881b      	ldrh	r3, [r3, #0]
 800a5ae:	b29a      	uxth	r2, r3
 800a5b0:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a5b4:	4013      	ands	r3, r2
 800a5b6:	83fb      	strh	r3, [r7, #30]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	8bfa      	ldrh	r2, [r7, #30]
 800a5be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5c2:	b292      	uxth	r2, r2
 800a5c4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5d4:	781b      	ldrb	r3, [r3, #0]
 800a5d6:	00db      	lsls	r3, r3, #3
 800a5d8:	4413      	add	r3, r2
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	6812      	ldr	r2, [r2, #0]
 800a5de:	4413      	add	r3, r2
 800a5e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a5e4:	881b      	ldrh	r3, [r3, #0]
 800a5e6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800a5ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5ec:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800a5ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d019      	beq.n	800a62a <PCD_EP_ISR_Handler+0x1e6>
 800a5f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5f8:	695b      	ldr	r3, [r3, #20]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d015      	beq.n	800a62a <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6818      	ldr	r0, [r3, #0]
 800a602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a604:	6959      	ldr	r1, [r3, #20]
 800a606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a608:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800a60a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a60c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800a60e:	b29b      	uxth	r3, r3
 800a610:	f007 fc6e 	bl	8011ef0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800a614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a616:	695a      	ldr	r2, [r3, #20]
 800a618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a61a:	69db      	ldr	r3, [r3, #28]
 800a61c:	441a      	add	r2, r3
 800a61e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a620:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800a622:	2100      	movs	r1, #0
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f00b fa3b 	bl	8015aa0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	881b      	ldrh	r3, [r3, #0]
 800a630:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800a634:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f040 82b5 	bne.w	800abac <PCD_EP_ISR_Handler+0x768>
 800a642:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a646:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a64a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a64e:	f000 82ad 	beq.w	800abac <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	61bb      	str	r3, [r7, #24]
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a660:	b29b      	uxth	r3, r3
 800a662:	461a      	mov	r2, r3
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	4413      	add	r3, r2
 800a668:	61bb      	str	r3, [r7, #24]
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a670:	617b      	str	r3, [r7, #20]
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	881b      	ldrh	r3, [r3, #0]
 800a676:	b29b      	uxth	r3, r3
 800a678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	801a      	strh	r2, [r3, #0]
 800a682:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a684:	691b      	ldr	r3, [r3, #16]
 800a686:	2b3e      	cmp	r3, #62	; 0x3e
 800a688:	d91d      	bls.n	800a6c6 <PCD_EP_ISR_Handler+0x282>
 800a68a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a68c:	691b      	ldr	r3, [r3, #16]
 800a68e:	095b      	lsrs	r3, r3, #5
 800a690:	647b      	str	r3, [r7, #68]	; 0x44
 800a692:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	f003 031f 	and.w	r3, r3, #31
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d102      	bne.n	800a6a4 <PCD_EP_ISR_Handler+0x260>
 800a69e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	647b      	str	r3, [r7, #68]	; 0x44
 800a6a4:	697b      	ldr	r3, [r7, #20]
 800a6a6:	881b      	ldrh	r3, [r3, #0]
 800a6a8:	b29a      	uxth	r2, r3
 800a6aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6ac:	b29b      	uxth	r3, r3
 800a6ae:	029b      	lsls	r3, r3, #10
 800a6b0:	b29b      	uxth	r3, r3
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6be:	b29a      	uxth	r2, r3
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	801a      	strh	r2, [r3, #0]
 800a6c4:	e026      	b.n	800a714 <PCD_EP_ISR_Handler+0x2d0>
 800a6c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6c8:	691b      	ldr	r3, [r3, #16]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10a      	bne.n	800a6e4 <PCD_EP_ISR_Handler+0x2a0>
 800a6ce:	697b      	ldr	r3, [r7, #20]
 800a6d0:	881b      	ldrh	r3, [r3, #0]
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6dc:	b29a      	uxth	r2, r3
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	801a      	strh	r2, [r3, #0]
 800a6e2:	e017      	b.n	800a714 <PCD_EP_ISR_Handler+0x2d0>
 800a6e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6e6:	691b      	ldr	r3, [r3, #16]
 800a6e8:	085b      	lsrs	r3, r3, #1
 800a6ea:	647b      	str	r3, [r7, #68]	; 0x44
 800a6ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6ee:	691b      	ldr	r3, [r3, #16]
 800a6f0:	f003 0301 	and.w	r3, r3, #1
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d002      	beq.n	800a6fe <PCD_EP_ISR_Handler+0x2ba>
 800a6f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a6fa:	3301      	adds	r3, #1
 800a6fc:	647b      	str	r3, [r7, #68]	; 0x44
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	b29a      	uxth	r2, r3
 800a704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a706:	b29b      	uxth	r3, r3
 800a708:	029b      	lsls	r3, r3, #10
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	4313      	orrs	r3, r2
 800a70e:	b29a      	uxth	r2, r3
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	881b      	ldrh	r3, [r3, #0]
 800a71a:	b29b      	uxth	r3, r3
 800a71c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a724:	827b      	strh	r3, [r7, #18]
 800a726:	8a7b      	ldrh	r3, [r7, #18]
 800a728:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a72c:	827b      	strh	r3, [r7, #18]
 800a72e:	8a7b      	ldrh	r3, [r7, #18]
 800a730:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a734:	827b      	strh	r3, [r7, #18]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	8a7b      	ldrh	r3, [r7, #18]
 800a73c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a740:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a744:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a74c:	b29b      	uxth	r3, r3
 800a74e:	8013      	strh	r3, [r2, #0]
 800a750:	e22c      	b.n	800abac <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	461a      	mov	r2, r3
 800a758:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	4413      	add	r3, r2
 800a760:	881b      	ldrh	r3, [r3, #0]
 800a762:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800a766:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	f280 80f6 	bge.w	800a95c <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	461a      	mov	r2, r3
 800a776:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	4413      	add	r3, r2
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	b29a      	uxth	r2, r3
 800a782:	f640 738f 	movw	r3, #3983	; 0xf8f
 800a786:	4013      	ands	r3, r2
 800a788:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	461a      	mov	r2, r3
 800a792:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	4413      	add	r3, r2
 800a79a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800a79e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a7a2:	b292      	uxth	r2, r2
 800a7a4:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800a7a6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a7aa:	4613      	mov	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	4413      	add	r3, r2
 800a7b0:	00db      	lsls	r3, r3, #3
 800a7b2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a7b6:	687a      	ldr	r2, [r7, #4]
 800a7b8:	4413      	add	r3, r2
 800a7ba:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800a7bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7be:	7b1b      	ldrb	r3, [r3, #12]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d123      	bne.n	800a80c <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	00db      	lsls	r3, r3, #3
 800a7d6:	4413      	add	r3, r2
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	6812      	ldr	r2, [r2, #0]
 800a7dc:	4413      	add	r3, r2
 800a7de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7e8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 800a7ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	f000 808e 	beq.w	800a912 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6818      	ldr	r0, [r3, #0]
 800a7fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7fc:	6959      	ldr	r1, [r3, #20]
 800a7fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a800:	88da      	ldrh	r2, [r3, #6]
 800a802:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a806:	f007 fb73 	bl	8011ef0 <USB_ReadPMA>
 800a80a:	e082      	b.n	800a912 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800a80c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a80e:	78db      	ldrb	r3, [r3, #3]
 800a810:	2b02      	cmp	r3, #2
 800a812:	d10a      	bne.n	800a82a <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800a814:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a818:	461a      	mov	r2, r3
 800a81a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a81c:	6878      	ldr	r0, [r7, #4]
 800a81e:	f000 f9d3 	bl	800abc8 <HAL_PCD_EP_DB_Receive>
 800a822:	4603      	mov	r3, r0
 800a824:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800a828:	e073      	b.n	800a912 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	461a      	mov	r2, r3
 800a830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a832:	781b      	ldrb	r3, [r3, #0]
 800a834:	009b      	lsls	r3, r3, #2
 800a836:	4413      	add	r3, r2
 800a838:	881b      	ldrh	r3, [r3, #0]
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a844:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	461a      	mov	r2, r3
 800a84e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	441a      	add	r2, r3
 800a856:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800a85a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a85e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a862:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a866:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a876:	781b      	ldrb	r3, [r3, #0]
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	881b      	ldrh	r3, [r3, #0]
 800a87e:	b29b      	uxth	r3, r3
 800a880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a884:	2b00      	cmp	r3, #0
 800a886:	d022      	beq.n	800a8ce <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a890:	b29b      	uxth	r3, r3
 800a892:	461a      	mov	r2, r3
 800a894:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	00db      	lsls	r3, r3, #3
 800a89a:	4413      	add	r3, r2
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	6812      	ldr	r2, [r2, #0]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8a6:	881b      	ldrh	r3, [r3, #0]
 800a8a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8ac:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a8b0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d02c      	beq.n	800a912 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6818      	ldr	r0, [r3, #0]
 800a8bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8be:	6959      	ldr	r1, [r3, #20]
 800a8c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8c2:	891a      	ldrh	r2, [r3, #8]
 800a8c4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a8c8:	f007 fb12 	bl	8011ef0 <USB_ReadPMA>
 800a8cc:	e021      	b.n	800a912 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	461a      	mov	r2, r3
 800a8da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a8dc:	781b      	ldrb	r3, [r3, #0]
 800a8de:	00db      	lsls	r3, r3, #3
 800a8e0:	4413      	add	r3, r2
 800a8e2:	687a      	ldr	r2, [r7, #4]
 800a8e4:	6812      	ldr	r2, [r2, #0]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8ec:	881b      	ldrh	r3, [r3, #0]
 800a8ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 800a8f6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d009      	beq.n	800a912 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6818      	ldr	r0, [r3, #0]
 800a902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a904:	6959      	ldr	r1, [r3, #20]
 800a906:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a908:	895a      	ldrh	r2, [r3, #10]
 800a90a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a90e:	f007 faef 	bl	8011ef0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800a912:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a914:	69da      	ldr	r2, [r3, #28]
 800a916:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a91a:	441a      	add	r2, r3
 800a91c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a91e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800a920:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a922:	695a      	ldr	r2, [r3, #20]
 800a924:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800a928:	441a      	add	r2, r3
 800a92a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a92c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800a92e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a930:	699b      	ldr	r3, [r3, #24]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d005      	beq.n	800a942 <PCD_EP_ISR_Handler+0x4fe>
 800a936:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800a93a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a93c:	691b      	ldr	r3, [r3, #16]
 800a93e:	429a      	cmp	r2, r3
 800a940:	d206      	bcs.n	800a950 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800a942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a944:	781b      	ldrb	r3, [r3, #0]
 800a946:	4619      	mov	r1, r3
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f00b f8a9 	bl	8015aa0 <HAL_PCD_DataOutStageCallback>
 800a94e:	e005      	b.n	800a95c <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a956:	4618      	mov	r0, r3
 800a958:	f005 fd9d 	bl	8010496 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800a95c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a964:	2b00      	cmp	r3, #0
 800a966:	f000 8121 	beq.w	800abac <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 800a96a:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800a96e:	4613      	mov	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	00db      	lsls	r3, r3, #3
 800a976:	3310      	adds	r3, #16
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	4413      	add	r3, r2
 800a97c:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	461a      	mov	r2, r3
 800a984:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a988:	009b      	lsls	r3, r3, #2
 800a98a:	4413      	add	r3, r2
 800a98c:	881b      	ldrh	r3, [r3, #0]
 800a98e:	b29b      	uxth	r3, r3
 800a990:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800a994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a998:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	441a      	add	r2, r3
 800a9aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a9ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9b6:	b29b      	uxth	r3, r3
 800a9b8:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800a9ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9bc:	78db      	ldrb	r3, [r3, #3]
 800a9be:	2b01      	cmp	r3, #1
 800a9c0:	f040 80a2 	bne.w	800ab08 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800a9c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800a9ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9cc:	7b1b      	ldrb	r3, [r3, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 8093 	beq.w	800aafa <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800a9d4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800a9d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d046      	beq.n	800aa6e <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800a9e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9e2:	785b      	ldrb	r3, [r3, #1]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d126      	bne.n	800aa36 <PCD_EP_ISR_Handler+0x5f2>
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	627b      	str	r3, [r7, #36]	; 0x24
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9f6:	b29b      	uxth	r3, r3
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9fc:	4413      	add	r3, r2
 800a9fe:	627b      	str	r3, [r7, #36]	; 0x24
 800aa00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	00da      	lsls	r2, r3, #3
 800aa06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa08:	4413      	add	r3, r2
 800aa0a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa0e:	623b      	str	r3, [r7, #32]
 800aa10:	6a3b      	ldr	r3, [r7, #32]
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa1a:	b29a      	uxth	r2, r3
 800aa1c:	6a3b      	ldr	r3, [r7, #32]
 800aa1e:	801a      	strh	r2, [r3, #0]
 800aa20:	6a3b      	ldr	r3, [r7, #32]
 800aa22:	881b      	ldrh	r3, [r3, #0]
 800aa24:	b29b      	uxth	r3, r3
 800aa26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa2e:	b29a      	uxth	r2, r3
 800aa30:	6a3b      	ldr	r3, [r7, #32]
 800aa32:	801a      	strh	r2, [r3, #0]
 800aa34:	e061      	b.n	800aafa <PCD_EP_ISR_Handler+0x6b6>
 800aa36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa38:	785b      	ldrb	r3, [r3, #1]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d15d      	bne.n	800aafa <PCD_EP_ISR_Handler+0x6b6>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa4c:	b29b      	uxth	r3, r3
 800aa4e:	461a      	mov	r2, r3
 800aa50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa52:	4413      	add	r3, r2
 800aa54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	00da      	lsls	r2, r3, #3
 800aa5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa5e:	4413      	add	r3, r2
 800aa60:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa64:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa68:	2200      	movs	r2, #0
 800aa6a:	801a      	strh	r2, [r3, #0]
 800aa6c:	e045      	b.n	800aafa <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa76:	785b      	ldrb	r3, [r3, #1]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d126      	bne.n	800aaca <PCD_EP_ISR_Handler+0x686>
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	637b      	str	r3, [r7, #52]	; 0x34
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa90:	4413      	add	r3, r2
 800aa92:	637b      	str	r3, [r7, #52]	; 0x34
 800aa94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa96:	781b      	ldrb	r3, [r3, #0]
 800aa98:	00da      	lsls	r2, r3, #3
 800aa9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa9c:	4413      	add	r3, r2
 800aa9e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aaa2:	633b      	str	r3, [r7, #48]	; 0x30
 800aaa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaa6:	881b      	ldrh	r3, [r3, #0]
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aaae:	b29a      	uxth	r2, r3
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	801a      	strh	r2, [r3, #0]
 800aab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab6:	881b      	ldrh	r3, [r3, #0]
 800aab8:	b29b      	uxth	r3, r3
 800aaba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aabe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aac6:	801a      	strh	r2, [r3, #0]
 800aac8:	e017      	b.n	800aafa <PCD_EP_ISR_Handler+0x6b6>
 800aaca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aacc:	785b      	ldrb	r3, [r3, #1]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d113      	bne.n	800aafa <PCD_EP_ISR_Handler+0x6b6>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aada:	b29b      	uxth	r3, r3
 800aadc:	461a      	mov	r2, r3
 800aade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aae0:	4413      	add	r3, r2
 800aae2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aae4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aae6:	781b      	ldrb	r3, [r3, #0]
 800aae8:	00da      	lsls	r2, r3, #3
 800aaea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aaec:	4413      	add	r3, r2
 800aaee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aaf2:	63bb      	str	r3, [r7, #56]	; 0x38
 800aaf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800aafa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f00a ffe8 	bl	8015ad6 <HAL_PCD_DataInStageCallback>
 800ab06:	e051      	b.n	800abac <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800ab08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ab0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d144      	bne.n	800ab9e <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab1c:	b29b      	uxth	r3, r3
 800ab1e:	461a      	mov	r2, r3
 800ab20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	00db      	lsls	r3, r3, #3
 800ab26:	4413      	add	r3, r2
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	6812      	ldr	r2, [r2, #0]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab32:	881b      	ldrh	r3, [r3, #0]
 800ab34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ab38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800ab3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab3e:	699a      	ldr	r2, [r3, #24]
 800ab40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d907      	bls.n	800ab58 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800ab48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab4a:	699a      	ldr	r2, [r3, #24]
 800ab4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab50:	1ad2      	subs	r2, r2, r3
 800ab52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab54:	619a      	str	r2, [r3, #24]
 800ab56:	e002      	b.n	800ab5e <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800ab58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800ab5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab60:	699b      	ldr	r3, [r3, #24]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d106      	bne.n	800ab74 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800ab66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab68:	781b      	ldrb	r3, [r3, #0]
 800ab6a:	4619      	mov	r1, r3
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f00a ffb2 	bl	8015ad6 <HAL_PCD_DataInStageCallback>
 800ab72:	e01b      	b.n	800abac <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800ab74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab76:	695a      	ldr	r2, [r3, #20]
 800ab78:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab7c:	441a      	add	r2, r3
 800ab7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab80:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800ab82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab84:	69da      	ldr	r2, [r3, #28]
 800ab86:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800ab8a:	441a      	add	r2, r3
 800ab8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab8e:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab96:	4618      	mov	r0, r3
 800ab98:	f005 fc7d 	bl	8010496 <USB_EPStartXfer>
 800ab9c:	e006      	b.n	800abac <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800ab9e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800aba2:	461a      	mov	r2, r3
 800aba4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f917 	bl	800adda <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800abb4:	b29b      	uxth	r3, r3
 800abb6:	b21b      	sxth	r3, r3
 800abb8:	2b00      	cmp	r3, #0
 800abba:	f6ff ac48 	blt.w	800a44e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3758      	adds	r7, #88	; 0x58
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}

0800abc8 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b088      	sub	sp, #32
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	4613      	mov	r3, r2
 800abd4:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800abd6:	88fb      	ldrh	r3, [r7, #6]
 800abd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d07c      	beq.n	800acda <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abe8:	b29b      	uxth	r3, r3
 800abea:	461a      	mov	r2, r3
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	00db      	lsls	r3, r3, #3
 800abf2:	4413      	add	r3, r2
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	6812      	ldr	r2, [r2, #0]
 800abf8:	4413      	add	r3, r2
 800abfa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800abfe:	881b      	ldrh	r3, [r3, #0]
 800ac00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac04:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	699a      	ldr	r2, [r3, #24]
 800ac0a:	8b7b      	ldrh	r3, [r7, #26]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d306      	bcc.n	800ac1e <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	699a      	ldr	r2, [r3, #24]
 800ac14:	8b7b      	ldrh	r3, [r7, #26]
 800ac16:	1ad2      	subs	r2, r2, r3
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	619a      	str	r2, [r3, #24]
 800ac1c:	e002      	b.n	800ac24 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2200      	movs	r2, #0
 800ac22:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d123      	bne.n	800ac74 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	461a      	mov	r2, r3
 800ac32:	68bb      	ldr	r3, [r7, #8]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	4413      	add	r3, r2
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	b29b      	uxth	r3, r3
 800ac3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ac42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac46:	833b      	strh	r3, [r7, #24]
 800ac48:	8b3b      	ldrh	r3, [r7, #24]
 800ac4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ac4e:	833b      	strh	r3, [r7, #24]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	441a      	add	r2, r3
 800ac5e:	8b3b      	ldrh	r3, [r7, #24]
 800ac60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ac6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ac74:	88fb      	ldrh	r3, [r7, #6]
 800ac76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	d01f      	beq.n	800acbe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	461a      	mov	r2, r3
 800ac84:	68bb      	ldr	r3, [r7, #8]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	009b      	lsls	r3, r3, #2
 800ac8a:	4413      	add	r3, r2
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	b29b      	uxth	r3, r3
 800ac90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac98:	82fb      	strh	r3, [r7, #22]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	461a      	mov	r2, r3
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	781b      	ldrb	r3, [r3, #0]
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	441a      	add	r2, r3
 800aca8:	8afb      	ldrh	r3, [r7, #22]
 800acaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800acae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800acb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800acb6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800acba:	b29b      	uxth	r3, r3
 800acbc:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800acbe:	8b7b      	ldrh	r3, [r7, #26]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f000 8085 	beq.w	800add0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6818      	ldr	r0, [r3, #0]
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	6959      	ldr	r1, [r3, #20]
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	891a      	ldrh	r2, [r3, #8]
 800acd2:	8b7b      	ldrh	r3, [r7, #26]
 800acd4:	f007 f90c 	bl	8011ef0 <USB_ReadPMA>
 800acd8:	e07a      	b.n	800add0 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	461a      	mov	r2, r3
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	00db      	lsls	r3, r3, #3
 800acec:	4413      	add	r3, r2
 800acee:	68fa      	ldr	r2, [r7, #12]
 800acf0:	6812      	ldr	r2, [r2, #0]
 800acf2:	4413      	add	r3, r2
 800acf4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800acf8:	881b      	ldrh	r3, [r3, #0]
 800acfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800acfe:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	699a      	ldr	r2, [r3, #24]
 800ad04:	8b7b      	ldrh	r3, [r7, #26]
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d306      	bcc.n	800ad18 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	699a      	ldr	r2, [r3, #24]
 800ad0e:	8b7b      	ldrh	r3, [r7, #26]
 800ad10:	1ad2      	subs	r2, r2, r3
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	619a      	str	r2, [r3, #24]
 800ad16:	e002      	b.n	800ad1e <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	699b      	ldr	r3, [r3, #24]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d123      	bne.n	800ad6e <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	461a      	mov	r2, r3
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	781b      	ldrb	r3, [r3, #0]
 800ad30:	009b      	lsls	r3, r3, #2
 800ad32:	4413      	add	r3, r2
 800ad34:	881b      	ldrh	r3, [r3, #0]
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ad3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad40:	83fb      	strh	r3, [r7, #30]
 800ad42:	8bfb      	ldrh	r3, [r7, #30]
 800ad44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ad48:	83fb      	strh	r3, [r7, #30]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	68bb      	ldr	r3, [r7, #8]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	441a      	add	r2, r3
 800ad58:	8bfb      	ldrh	r3, [r7, #30]
 800ad5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad6a:	b29b      	uxth	r3, r3
 800ad6c:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800ad6e:	88fb      	ldrh	r3, [r7, #6]
 800ad70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d11f      	bne.n	800adb8 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	881b      	ldrh	r3, [r3, #0]
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad92:	83bb      	strh	r3, [r7, #28]
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	461a      	mov	r2, r3
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	009b      	lsls	r3, r3, #2
 800ada0:	441a      	add	r2, r3
 800ada2:	8bbb      	ldrh	r3, [r7, #28]
 800ada4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ada8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800adac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800adb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800adb8:	8b7b      	ldrh	r3, [r7, #26]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d008      	beq.n	800add0 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6818      	ldr	r0, [r3, #0]
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	6959      	ldr	r1, [r3, #20]
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	895a      	ldrh	r2, [r3, #10]
 800adca:	8b7b      	ldrh	r3, [r7, #26]
 800adcc:	f007 f890 	bl	8011ef0 <USB_ReadPMA>
    }
  }

  return count;
 800add0:	8b7b      	ldrh	r3, [r7, #26]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3720      	adds	r7, #32
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b0a4      	sub	sp, #144	; 0x90
 800adde:	af00      	add	r7, sp, #0
 800ade0:	60f8      	str	r0, [r7, #12]
 800ade2:	60b9      	str	r1, [r7, #8]
 800ade4:	4613      	mov	r3, r2
 800ade6:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800ade8:	88fb      	ldrh	r3, [r7, #6]
 800adea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 81db 	beq.w	800b1aa <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	461a      	mov	r2, r3
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	781b      	ldrb	r3, [r3, #0]
 800ae04:	00db      	lsls	r3, r3, #3
 800ae06:	4413      	add	r3, r2
 800ae08:	68fa      	ldr	r2, [r7, #12]
 800ae0a:	6812      	ldr	r2, [r2, #0]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae18:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	699a      	ldr	r2, [r3, #24]
 800ae20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ae24:	429a      	cmp	r2, r3
 800ae26:	d907      	bls.n	800ae38 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	699a      	ldr	r2, [r3, #24]
 800ae2c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800ae30:	1ad2      	subs	r2, r2, r3
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	619a      	str	r2, [r3, #24]
 800ae36:	e002      	b.n	800ae3e <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800ae38:	68bb      	ldr	r3, [r7, #8]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	699b      	ldr	r3, [r3, #24]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	f040 80b9 	bne.w	800afba <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800ae48:	68bb      	ldr	r3, [r7, #8]
 800ae4a:	785b      	ldrb	r3, [r3, #1]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d126      	bne.n	800ae9e <HAL_PCD_EP_DB_Transmit+0xc4>
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae5e:	b29b      	uxth	r3, r3
 800ae60:	461a      	mov	r2, r3
 800ae62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae64:	4413      	add	r3, r2
 800ae66:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	00da      	lsls	r2, r3, #3
 800ae6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae70:	4413      	add	r3, r2
 800ae72:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae76:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae7a:	881b      	ldrh	r3, [r3, #0]
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ae82:	b29a      	uxth	r2, r3
 800ae84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae86:	801a      	strh	r2, [r3, #0]
 800ae88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae8a:	881b      	ldrh	r3, [r3, #0]
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae96:	b29a      	uxth	r2, r3
 800ae98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae9a:	801a      	strh	r2, [r3, #0]
 800ae9c:	e01a      	b.n	800aed4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800ae9e:	68bb      	ldr	r3, [r7, #8]
 800aea0:	785b      	ldrb	r3, [r3, #1]
 800aea2:	2b01      	cmp	r3, #1
 800aea4:	d116      	bne.n	800aed4 <HAL_PCD_EP_DB_Transmit+0xfa>
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	637b      	str	r3, [r7, #52]	; 0x34
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeb4:	b29b      	uxth	r3, r3
 800aeb6:	461a      	mov	r2, r3
 800aeb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aeba:	4413      	add	r3, r2
 800aebc:	637b      	str	r3, [r7, #52]	; 0x34
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	00da      	lsls	r2, r3, #3
 800aec4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aec6:	4413      	add	r3, r2
 800aec8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aecc:	633b      	str	r3, [r7, #48]	; 0x30
 800aece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed0:	2200      	movs	r2, #0
 800aed2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	627b      	str	r3, [r7, #36]	; 0x24
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	785b      	ldrb	r3, [r3, #1]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d126      	bne.n	800af30 <HAL_PCD_EP_DB_Transmit+0x156>
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	61fb      	str	r3, [r7, #28]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	461a      	mov	r2, r3
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	4413      	add	r3, r2
 800aef8:	61fb      	str	r3, [r7, #28]
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	781b      	ldrb	r3, [r3, #0]
 800aefe:	00da      	lsls	r2, r3, #3
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	4413      	add	r3, r2
 800af04:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af08:	61bb      	str	r3, [r7, #24]
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	881b      	ldrh	r3, [r3, #0]
 800af0e:	b29b      	uxth	r3, r3
 800af10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af14:	b29a      	uxth	r2, r3
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	801a      	strh	r2, [r3, #0]
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	881b      	ldrh	r3, [r3, #0]
 800af1e:	b29b      	uxth	r3, r3
 800af20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af28:	b29a      	uxth	r2, r3
 800af2a:	69bb      	ldr	r3, [r7, #24]
 800af2c:	801a      	strh	r2, [r3, #0]
 800af2e:	e017      	b.n	800af60 <HAL_PCD_EP_DB_Transmit+0x186>
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	785b      	ldrb	r3, [r3, #1]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d113      	bne.n	800af60 <HAL_PCD_EP_DB_Transmit+0x186>
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af40:	b29b      	uxth	r3, r3
 800af42:	461a      	mov	r2, r3
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	4413      	add	r3, r2
 800af48:	627b      	str	r3, [r7, #36]	; 0x24
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	781b      	ldrb	r3, [r3, #0]
 800af4e:	00da      	lsls	r2, r3, #3
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	4413      	add	r3, r2
 800af54:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af58:	623b      	str	r3, [r7, #32]
 800af5a:	6a3b      	ldr	r3, [r7, #32]
 800af5c:	2200      	movs	r2, #0
 800af5e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	781b      	ldrb	r3, [r3, #0]
 800af64:	4619      	mov	r1, r3
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f00a fdb5 	bl	8015ad6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800af6c:	88fb      	ldrh	r3, [r7, #6]
 800af6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af72:	2b00      	cmp	r3, #0
 800af74:	f000 82fa 	beq.w	800b56c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	461a      	mov	r2, r3
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	009b      	lsls	r3, r3, #2
 800af84:	4413      	add	r3, r2
 800af86:	881b      	ldrh	r3, [r3, #0]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af92:	82fb      	strh	r3, [r7, #22]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	461a      	mov	r2, r3
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	781b      	ldrb	r3, [r3, #0]
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	441a      	add	r2, r3
 800afa2:	8afb      	ldrh	r3, [r7, #22]
 800afa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800afa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800afac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800afb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	8013      	strh	r3, [r2, #0]
 800afb8:	e2d8      	b.n	800b56c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800afba:	88fb      	ldrh	r3, [r7, #6]
 800afbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d021      	beq.n	800b008 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	461a      	mov	r2, r3
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	781b      	ldrb	r3, [r3, #0]
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	881b      	ldrh	r3, [r3, #0]
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800afda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afde:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	461a      	mov	r2, r3
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	009b      	lsls	r3, r3, #2
 800afee:	441a      	add	r2, r3
 800aff0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800aff4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aff8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800affc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b004:	b29b      	uxth	r3, r3
 800b006:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b00e:	2b01      	cmp	r3, #1
 800b010:	f040 82ac 	bne.w	800b56c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	695a      	ldr	r2, [r3, #20]
 800b018:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b01c:	441a      	add	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	69da      	ldr	r2, [r3, #28]
 800b026:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b02a:	441a      	add	r2, r3
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	6a1a      	ldr	r2, [r3, #32]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d30b      	bcc.n	800b054 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	691b      	ldr	r3, [r3, #16]
 800b040:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	6a1a      	ldr	r2, [r3, #32]
 800b048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b04c:	1ad2      	subs	r2, r2, r3
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	621a      	str	r2, [r3, #32]
 800b052:	e017      	b.n	800b084 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800b054:	68bb      	ldr	r3, [r7, #8]
 800b056:	6a1b      	ldr	r3, [r3, #32]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d108      	bne.n	800b06e <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800b05c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b060:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	2200      	movs	r2, #0
 800b068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b06c:	e00a      	b.n	800b084 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2200      	movs	r2, #0
 800b072:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	6a1b      	ldr	r3, [r3, #32]
 800b07a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	2200      	movs	r2, #0
 800b082:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	785b      	ldrb	r3, [r3, #1]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d165      	bne.n	800b158 <HAL_PCD_EP_DB_Transmit+0x37e>
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b09a:	b29b      	uxth	r3, r3
 800b09c:	461a      	mov	r2, r3
 800b09e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0a0:	4413      	add	r3, r2
 800b0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	781b      	ldrb	r3, [r3, #0]
 800b0a8:	00da      	lsls	r2, r3, #3
 800b0aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0ac:	4413      	add	r3, r2
 800b0ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b0b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800b0b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0b6:	881b      	ldrh	r3, [r3, #0]
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0c2:	801a      	strh	r2, [r3, #0]
 800b0c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0c8:	2b3e      	cmp	r3, #62	; 0x3e
 800b0ca:	d91d      	bls.n	800b108 <HAL_PCD_EP_DB_Transmit+0x32e>
 800b0cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0d0:	095b      	lsrs	r3, r3, #5
 800b0d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0d8:	f003 031f 	and.w	r3, r3, #31
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d102      	bne.n	800b0e6 <HAL_PCD_EP_DB_Transmit+0x30c>
 800b0e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0e2:	3b01      	subs	r3, #1
 800b0e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800b0e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0e8:	881b      	ldrh	r3, [r3, #0]
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	029b      	lsls	r3, r3, #10
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	b29b      	uxth	r3, r3
 800b0f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b100:	b29a      	uxth	r2, r3
 800b102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b104:	801a      	strh	r2, [r3, #0]
 800b106:	e044      	b.n	800b192 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b108:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d10a      	bne.n	800b126 <HAL_PCD_EP_DB_Transmit+0x34c>
 800b110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b112:	881b      	ldrh	r3, [r3, #0]
 800b114:	b29b      	uxth	r3, r3
 800b116:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b11a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b11e:	b29a      	uxth	r2, r3
 800b120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b122:	801a      	strh	r2, [r3, #0]
 800b124:	e035      	b.n	800b192 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b12a:	085b      	lsrs	r3, r3, #1
 800b12c:	64bb      	str	r3, [r7, #72]	; 0x48
 800b12e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b132:	f003 0301 	and.w	r3, r3, #1
 800b136:	2b00      	cmp	r3, #0
 800b138:	d002      	beq.n	800b140 <HAL_PCD_EP_DB_Transmit+0x366>
 800b13a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b13c:	3301      	adds	r3, #1
 800b13e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	b29a      	uxth	r2, r3
 800b146:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b148:	b29b      	uxth	r3, r3
 800b14a:	029b      	lsls	r3, r3, #10
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	4313      	orrs	r3, r2
 800b150:	b29a      	uxth	r2, r3
 800b152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b154:	801a      	strh	r2, [r3, #0]
 800b156:	e01c      	b.n	800b192 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	785b      	ldrb	r3, [r3, #1]
 800b15c:	2b01      	cmp	r3, #1
 800b15e:	d118      	bne.n	800b192 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	647b      	str	r3, [r7, #68]	; 0x44
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b16e:	b29b      	uxth	r3, r3
 800b170:	461a      	mov	r2, r3
 800b172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b174:	4413      	add	r3, r2
 800b176:	647b      	str	r3, [r7, #68]	; 0x44
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	781b      	ldrb	r3, [r3, #0]
 800b17c:	00da      	lsls	r2, r3, #3
 800b17e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b180:	4413      	add	r3, r2
 800b182:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b186:	643b      	str	r3, [r7, #64]	; 0x40
 800b188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b18c:	b29a      	uxth	r2, r3
 800b18e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b190:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	6818      	ldr	r0, [r3, #0]
 800b196:	68bb      	ldr	r3, [r7, #8]
 800b198:	6959      	ldr	r1, [r3, #20]
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	891a      	ldrh	r2, [r3, #8]
 800b19e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	f006 fe62 	bl	8011e6c <USB_WritePMA>
 800b1a8:	e1e0      	b.n	800b56c <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b1b2:	b29b      	uxth	r3, r3
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	00db      	lsls	r3, r3, #3
 800b1bc:	4413      	add	r3, r2
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	6812      	ldr	r2, [r2, #0]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b1c8:	881b      	ldrh	r3, [r3, #0]
 800b1ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b1ce:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	699a      	ldr	r2, [r3, #24]
 800b1d6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d307      	bcc.n	800b1ee <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	699a      	ldr	r2, [r3, #24]
 800b1e2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b1e6:	1ad2      	subs	r2, r2, r3
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	619a      	str	r2, [r3, #24]
 800b1ec:	e002      	b.n	800b1f4 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	2200      	movs	r2, #0
 800b1f2:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	699b      	ldr	r3, [r3, #24]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f040 80c0 	bne.w	800b37e <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	785b      	ldrb	r3, [r3, #1]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d126      	bne.n	800b254 <HAL_PCD_EP_DB_Transmit+0x47a>
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b214:	b29b      	uxth	r3, r3
 800b216:	461a      	mov	r2, r3
 800b218:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b21a:	4413      	add	r3, r2
 800b21c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	781b      	ldrb	r3, [r3, #0]
 800b222:	00da      	lsls	r2, r3, #3
 800b224:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b226:	4413      	add	r3, r2
 800b228:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b22c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b22e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b230:	881b      	ldrh	r3, [r3, #0]
 800b232:	b29b      	uxth	r3, r3
 800b234:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b238:	b29a      	uxth	r2, r3
 800b23a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b23c:	801a      	strh	r2, [r3, #0]
 800b23e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b240:	881b      	ldrh	r3, [r3, #0]
 800b242:	b29b      	uxth	r3, r3
 800b244:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b248:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b24c:	b29a      	uxth	r2, r3
 800b24e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b250:	801a      	strh	r2, [r3, #0]
 800b252:	e01a      	b.n	800b28a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	785b      	ldrb	r3, [r3, #1]
 800b258:	2b01      	cmp	r3, #1
 800b25a:	d116      	bne.n	800b28a <HAL_PCD_EP_DB_Transmit+0x4b0>
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	667b      	str	r3, [r7, #100]	; 0x64
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	461a      	mov	r2, r3
 800b26e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b270:	4413      	add	r3, r2
 800b272:	667b      	str	r3, [r7, #100]	; 0x64
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	00da      	lsls	r2, r3, #3
 800b27a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b27c:	4413      	add	r3, r2
 800b27e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b282:	663b      	str	r3, [r7, #96]	; 0x60
 800b284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b286:	2200      	movs	r2, #0
 800b288:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	677b      	str	r3, [r7, #116]	; 0x74
 800b290:	68bb      	ldr	r3, [r7, #8]
 800b292:	785b      	ldrb	r3, [r3, #1]
 800b294:	2b00      	cmp	r3, #0
 800b296:	d12b      	bne.n	800b2f0 <HAL_PCD_EP_DB_Transmit+0x516>
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2a6:	b29b      	uxth	r3, r3
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2ac:	4413      	add	r3, r2
 800b2ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	781b      	ldrb	r3, [r3, #0]
 800b2b4:	00da      	lsls	r2, r3, #3
 800b2b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b2b8:	4413      	add	r3, r2
 800b2ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b2c2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2c6:	881b      	ldrh	r3, [r3, #0]
 800b2c8:	b29b      	uxth	r3, r3
 800b2ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2d4:	801a      	strh	r2, [r3, #0]
 800b2d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2da:	881b      	ldrh	r3, [r3, #0]
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b2ec:	801a      	strh	r2, [r3, #0]
 800b2ee:	e017      	b.n	800b320 <HAL_PCD_EP_DB_Transmit+0x546>
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	785b      	ldrb	r3, [r3, #1]
 800b2f4:	2b01      	cmp	r3, #1
 800b2f6:	d113      	bne.n	800b320 <HAL_PCD_EP_DB_Transmit+0x546>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b300:	b29b      	uxth	r3, r3
 800b302:	461a      	mov	r2, r3
 800b304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b306:	4413      	add	r3, r2
 800b308:	677b      	str	r3, [r7, #116]	; 0x74
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	00da      	lsls	r2, r3, #3
 800b310:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b312:	4413      	add	r3, r2
 800b314:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b318:	673b      	str	r3, [r7, #112]	; 0x70
 800b31a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b31c:	2200      	movs	r2, #0
 800b31e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	4619      	mov	r1, r3
 800b326:	68f8      	ldr	r0, [r7, #12]
 800b328:	f00a fbd5 	bl	8015ad6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b32c:	88fb      	ldrh	r3, [r7, #6]
 800b32e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b332:	2b00      	cmp	r3, #0
 800b334:	f040 811a 	bne.w	800b56c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	461a      	mov	r2, r3
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	781b      	ldrb	r3, [r3, #0]
 800b342:	009b      	lsls	r3, r3, #2
 800b344:	4413      	add	r3, r2
 800b346:	881b      	ldrh	r3, [r3, #0]
 800b348:	b29b      	uxth	r3, r3
 800b34a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b34e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b352:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	461a      	mov	r2, r3
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	009b      	lsls	r3, r3, #2
 800b362:	441a      	add	r2, r3
 800b364:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800b368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b36c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b370:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b378:	b29b      	uxth	r3, r3
 800b37a:	8013      	strh	r3, [r2, #0]
 800b37c:	e0f6      	b.n	800b56c <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800b37e:	88fb      	ldrh	r3, [r7, #6]
 800b380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b384:	2b00      	cmp	r3, #0
 800b386:	d121      	bne.n	800b3cc <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	461a      	mov	r2, r3
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	781b      	ldrb	r3, [r3, #0]
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	4413      	add	r3, r2
 800b396:	881b      	ldrh	r3, [r3, #0]
 800b398:	b29b      	uxth	r3, r3
 800b39a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b39e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b3a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	009b      	lsls	r3, r3, #2
 800b3b2:	441a      	add	r2, r3
 800b3b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800b3b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b3bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b3c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800b3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	f040 80ca 	bne.w	800b56c <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	695a      	ldr	r2, [r3, #20]
 800b3dc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b3e0:	441a      	add	r2, r3
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	69da      	ldr	r2, [r3, #28]
 800b3ea:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b3ee:	441a      	add	r2, r3
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	6a1a      	ldr	r2, [r3, #32]
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	691b      	ldr	r3, [r3, #16]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d30b      	bcc.n	800b418 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	691b      	ldr	r3, [r3, #16]
 800b404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	6a1a      	ldr	r2, [r3, #32]
 800b40c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b410:	1ad2      	subs	r2, r2, r3
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	621a      	str	r2, [r3, #32]
 800b416:	e017      	b.n	800b448 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	6a1b      	ldr	r3, [r3, #32]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d108      	bne.n	800b432 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800b420:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800b424:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800b430:	e00a      	b.n	800b448 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	2200      	movs	r2, #0
 800b43e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	2200      	movs	r2, #0
 800b444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	657b      	str	r3, [r7, #84]	; 0x54
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	785b      	ldrb	r3, [r3, #1]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d165      	bne.n	800b522 <HAL_PCD_EP_DB_Transmit+0x748>
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b464:	b29b      	uxth	r3, r3
 800b466:	461a      	mov	r2, r3
 800b468:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b46a:	4413      	add	r3, r2
 800b46c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	00da      	lsls	r2, r3, #3
 800b474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b476:	4413      	add	r3, r2
 800b478:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b47c:	65bb      	str	r3, [r7, #88]	; 0x58
 800b47e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b480:	881b      	ldrh	r3, [r3, #0]
 800b482:	b29b      	uxth	r3, r3
 800b484:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b488:	b29a      	uxth	r2, r3
 800b48a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b48c:	801a      	strh	r2, [r3, #0]
 800b48e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b492:	2b3e      	cmp	r3, #62	; 0x3e
 800b494:	d91d      	bls.n	800b4d2 <HAL_PCD_EP_DB_Transmit+0x6f8>
 800b496:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b49a:	095b      	lsrs	r3, r3, #5
 800b49c:	66bb      	str	r3, [r7, #104]	; 0x68
 800b49e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4a2:	f003 031f 	and.w	r3, r3, #31
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d102      	bne.n	800b4b0 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800b4aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4b2:	881b      	ldrh	r3, [r3, #0]
 800b4b4:	b29a      	uxth	r2, r3
 800b4b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	029b      	lsls	r3, r3, #10
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	b29b      	uxth	r3, r3
 800b4c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4ce:	801a      	strh	r2, [r3, #0]
 800b4d0:	e041      	b.n	800b556 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b4d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10a      	bne.n	800b4f0 <HAL_PCD_EP_DB_Transmit+0x716>
 800b4da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4dc:	881b      	ldrh	r3, [r3, #0]
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4e8:	b29a      	uxth	r2, r3
 800b4ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b4ec:	801a      	strh	r2, [r3, #0]
 800b4ee:	e032      	b.n	800b556 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b4f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4f4:	085b      	lsrs	r3, r3, #1
 800b4f6:	66bb      	str	r3, [r7, #104]	; 0x68
 800b4f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b4fc:	f003 0301 	and.w	r3, r3, #1
 800b500:	2b00      	cmp	r3, #0
 800b502:	d002      	beq.n	800b50a <HAL_PCD_EP_DB_Transmit+0x730>
 800b504:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b506:	3301      	adds	r3, #1
 800b508:	66bb      	str	r3, [r7, #104]	; 0x68
 800b50a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b50c:	881b      	ldrh	r3, [r3, #0]
 800b50e:	b29a      	uxth	r2, r3
 800b510:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b512:	b29b      	uxth	r3, r3
 800b514:	029b      	lsls	r3, r3, #10
 800b516:	b29b      	uxth	r3, r3
 800b518:	4313      	orrs	r3, r2
 800b51a:	b29a      	uxth	r2, r3
 800b51c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b51e:	801a      	strh	r2, [r3, #0]
 800b520:	e019      	b.n	800b556 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	785b      	ldrb	r3, [r3, #1]
 800b526:	2b01      	cmp	r3, #1
 800b528:	d115      	bne.n	800b556 <HAL_PCD_EP_DB_Transmit+0x77c>
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b532:	b29b      	uxth	r3, r3
 800b534:	461a      	mov	r2, r3
 800b536:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b538:	4413      	add	r3, r2
 800b53a:	657b      	str	r3, [r7, #84]	; 0x54
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	781b      	ldrb	r3, [r3, #0]
 800b540:	00da      	lsls	r2, r3, #3
 800b542:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b544:	4413      	add	r3, r2
 800b546:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b54a:	653b      	str	r3, [r7, #80]	; 0x50
 800b54c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b550:	b29a      	uxth	r2, r3
 800b552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b554:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	6818      	ldr	r0, [r3, #0]
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	6959      	ldr	r1, [r3, #20]
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	895a      	ldrh	r2, [r3, #10]
 800b562:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b566:	b29b      	uxth	r3, r3
 800b568:	f006 fc80 	bl	8011e6c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	461a      	mov	r2, r3
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	781b      	ldrb	r3, [r3, #0]
 800b576:	009b      	lsls	r3, r3, #2
 800b578:	4413      	add	r3, r2
 800b57a:	881b      	ldrh	r3, [r3, #0]
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b586:	82bb      	strh	r3, [r7, #20]
 800b588:	8abb      	ldrh	r3, [r7, #20]
 800b58a:	f083 0310 	eor.w	r3, r3, #16
 800b58e:	82bb      	strh	r3, [r7, #20]
 800b590:	8abb      	ldrh	r3, [r7, #20]
 800b592:	f083 0320 	eor.w	r3, r3, #32
 800b596:	82bb      	strh	r3, [r7, #20]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	461a      	mov	r2, r3
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	781b      	ldrb	r3, [r3, #0]
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	441a      	add	r2, r3
 800b5a6:	8abb      	ldrh	r3, [r7, #20]
 800b5a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b5ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b5b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b5b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5b8:	b29b      	uxth	r3, r3
 800b5ba:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3790      	adds	r7, #144	; 0x90
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800b5c6:	b480      	push	{r7}
 800b5c8:	b087      	sub	sp, #28
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	60f8      	str	r0, [r7, #12]
 800b5ce:	607b      	str	r3, [r7, #4]
 800b5d0:	460b      	mov	r3, r1
 800b5d2:	817b      	strh	r3, [r7, #10]
 800b5d4:	4613      	mov	r3, r2
 800b5d6:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800b5d8:	897b      	ldrh	r3, [r7, #10]
 800b5da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5de:	b29b      	uxth	r3, r3
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00b      	beq.n	800b5fc <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5e4:	897b      	ldrh	r3, [r7, #10]
 800b5e6:	f003 0207 	and.w	r2, r3, #7
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4413      	add	r3, r2
 800b5f0:	00db      	lsls	r3, r3, #3
 800b5f2:	3310      	adds	r3, #16
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	617b      	str	r3, [r7, #20]
 800b5fa:	e009      	b.n	800b610 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800b5fc:	897a      	ldrh	r2, [r7, #10]
 800b5fe:	4613      	mov	r3, r2
 800b600:	009b      	lsls	r3, r3, #2
 800b602:	4413      	add	r3, r2
 800b604:	00db      	lsls	r3, r3, #3
 800b606:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	4413      	add	r3, r2
 800b60e:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800b610:	893b      	ldrh	r3, [r7, #8]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d107      	bne.n	800b626 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2200      	movs	r2, #0
 800b61a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	b29a      	uxth	r2, r3
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	80da      	strh	r2, [r3, #6]
 800b624:	e00b      	b.n	800b63e <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	2201      	movs	r2, #1
 800b62a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	b29a      	uxth	r2, r3
 800b630:	697b      	ldr	r3, [r7, #20]
 800b632:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	0c1b      	lsrs	r3, r3, #16
 800b638:	b29a      	uxth	r2, r3
 800b63a:	697b      	ldr	r3, [r7, #20]
 800b63c:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	371c      	adds	r7, #28
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2201      	movs	r2, #1
 800b65e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2200      	movs	r2, #0
 800b666:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b670:	b29b      	uxth	r3, r3
 800b672:	f043 0301 	orr.w	r3, r3, #1
 800b676:	b29a      	uxth	r2, r3
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800b684:	b29b      	uxth	r3, r3
 800b686:	f043 0302 	orr.w	r3, r3, #2
 800b68a:	b29a      	uxth	r2, r3
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800b692:	2300      	movs	r3, #0
}
 800b694:	4618      	mov	r0, r3
 800b696:	3714      	adds	r7, #20
 800b698:	46bd      	mov	sp, r7
 800b69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69e:	4770      	bx	lr

0800b6a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b6a0:	b480      	push	{r7}
 800b6a2:	b085      	sub	sp, #20
 800b6a4:	af00      	add	r7, sp, #0
 800b6a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d141      	bne.n	800b732 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b6ae:	4b4b      	ldr	r3, [pc, #300]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b6b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6ba:	d131      	bne.n	800b720 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b6bc:	4b47      	ldr	r3, [pc, #284]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6c2:	4a46      	ldr	r2, [pc, #280]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b6cc:	4b43      	ldr	r3, [pc, #268]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b6d4:	4a41      	ldr	r2, [pc, #260]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b6da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b6dc:	4b40      	ldr	r3, [pc, #256]	; (800b7e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2232      	movs	r2, #50	; 0x32
 800b6e2:	fb02 f303 	mul.w	r3, r2, r3
 800b6e6:	4a3f      	ldr	r2, [pc, #252]	; (800b7e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b6e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b6ec:	0c9b      	lsrs	r3, r3, #18
 800b6ee:	3301      	adds	r3, #1
 800b6f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b6f2:	e002      	b.n	800b6fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	3b01      	subs	r3, #1
 800b6f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b6fa:	4b38      	ldr	r3, [pc, #224]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b6fc:	695b      	ldr	r3, [r3, #20]
 800b6fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b706:	d102      	bne.n	800b70e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d1f2      	bne.n	800b6f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b70e:	4b33      	ldr	r3, [pc, #204]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b710:	695b      	ldr	r3, [r3, #20]
 800b712:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b716:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b71a:	d158      	bne.n	800b7ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b71c:	2303      	movs	r3, #3
 800b71e:	e057      	b.n	800b7d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b720:	4b2e      	ldr	r3, [pc, #184]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b722:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b726:	4a2d      	ldr	r2, [pc, #180]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b72c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b730:	e04d      	b.n	800b7ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b738:	d141      	bne.n	800b7be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b73a:	4b28      	ldr	r3, [pc, #160]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b746:	d131      	bne.n	800b7ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b748:	4b24      	ldr	r3, [pc, #144]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b74e:	4a23      	ldr	r2, [pc, #140]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b758:	4b20      	ldr	r3, [pc, #128]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b760:	4a1e      	ldr	r2, [pc, #120]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b762:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b766:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b768:	4b1d      	ldr	r3, [pc, #116]	; (800b7e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	2232      	movs	r2, #50	; 0x32
 800b76e:	fb02 f303 	mul.w	r3, r2, r3
 800b772:	4a1c      	ldr	r2, [pc, #112]	; (800b7e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b774:	fba2 2303 	umull	r2, r3, r2, r3
 800b778:	0c9b      	lsrs	r3, r3, #18
 800b77a:	3301      	adds	r3, #1
 800b77c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b77e:	e002      	b.n	800b786 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	3b01      	subs	r3, #1
 800b784:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b786:	4b15      	ldr	r3, [pc, #84]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b78e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b792:	d102      	bne.n	800b79a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d1f2      	bne.n	800b780 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b79a:	4b10      	ldr	r3, [pc, #64]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b79c:	695b      	ldr	r3, [r3, #20]
 800b79e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b7a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7a6:	d112      	bne.n	800b7ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b7a8:	2303      	movs	r3, #3
 800b7aa:	e011      	b.n	800b7d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b7ac:	4b0b      	ldr	r3, [pc, #44]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7b2:	4a0a      	ldr	r2, [pc, #40]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800b7bc:	e007      	b.n	800b7ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b7be:	4b07      	ldr	r3, [pc, #28]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800b7c6:	4a05      	ldr	r2, [pc, #20]	; (800b7dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b7c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b7cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	40007000 	.word	0x40007000
 800b7e0:	20000190 	.word	0x20000190
 800b7e4:	431bde83 	.word	0x431bde83

0800b7e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b7ec:	4b05      	ldr	r3, [pc, #20]	; (800b804 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b7ee:	689b      	ldr	r3, [r3, #8]
 800b7f0:	4a04      	ldr	r2, [pc, #16]	; (800b804 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b7f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b7f6:	6093      	str	r3, [r2, #8]
}
 800b7f8:	bf00      	nop
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	40007000 	.word	0x40007000

0800b808 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b088      	sub	sp, #32
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b816:	2301      	movs	r3, #1
 800b818:	e2fe      	b.n	800be18 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f003 0301 	and.w	r3, r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	d075      	beq.n	800b912 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b826:	4b97      	ldr	r3, [pc, #604]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	f003 030c 	and.w	r3, r3, #12
 800b82e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b830:	4b94      	ldr	r3, [pc, #592]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	f003 0303 	and.w	r3, r3, #3
 800b838:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	2b0c      	cmp	r3, #12
 800b83e:	d102      	bne.n	800b846 <HAL_RCC_OscConfig+0x3e>
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2b03      	cmp	r3, #3
 800b844:	d002      	beq.n	800b84c <HAL_RCC_OscConfig+0x44>
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b08      	cmp	r3, #8
 800b84a:	d10b      	bne.n	800b864 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b84c:	4b8d      	ldr	r3, [pc, #564]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b854:	2b00      	cmp	r3, #0
 800b856:	d05b      	beq.n	800b910 <HAL_RCC_OscConfig+0x108>
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d157      	bne.n	800b910 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b860:	2301      	movs	r3, #1
 800b862:	e2d9      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	685b      	ldr	r3, [r3, #4]
 800b868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b86c:	d106      	bne.n	800b87c <HAL_RCC_OscConfig+0x74>
 800b86e:	4b85      	ldr	r3, [pc, #532]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	4a84      	ldr	r2, [pc, #528]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b874:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b878:	6013      	str	r3, [r2, #0]
 800b87a:	e01d      	b.n	800b8b8 <HAL_RCC_OscConfig+0xb0>
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	685b      	ldr	r3, [r3, #4]
 800b880:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b884:	d10c      	bne.n	800b8a0 <HAL_RCC_OscConfig+0x98>
 800b886:	4b7f      	ldr	r3, [pc, #508]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	4a7e      	ldr	r2, [pc, #504]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b88c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b890:	6013      	str	r3, [r2, #0]
 800b892:	4b7c      	ldr	r3, [pc, #496]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a7b      	ldr	r2, [pc, #492]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b89c:	6013      	str	r3, [r2, #0]
 800b89e:	e00b      	b.n	800b8b8 <HAL_RCC_OscConfig+0xb0>
 800b8a0:	4b78      	ldr	r3, [pc, #480]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a77      	ldr	r2, [pc, #476]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b8a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b8aa:	6013      	str	r3, [r2, #0]
 800b8ac:	4b75      	ldr	r3, [pc, #468]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a74      	ldr	r2, [pc, #464]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b8b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b8b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	685b      	ldr	r3, [r3, #4]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d013      	beq.n	800b8e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8c0:	f7fa f964 	bl	8005b8c <HAL_GetTick>
 800b8c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b8c6:	e008      	b.n	800b8da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b8c8:	f7fa f960 	bl	8005b8c <HAL_GetTick>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	1ad3      	subs	r3, r2, r3
 800b8d2:	2b64      	cmp	r3, #100	; 0x64
 800b8d4:	d901      	bls.n	800b8da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b8d6:	2303      	movs	r3, #3
 800b8d8:	e29e      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b8da:	4b6a      	ldr	r3, [pc, #424]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d0f0      	beq.n	800b8c8 <HAL_RCC_OscConfig+0xc0>
 800b8e6:	e014      	b.n	800b912 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b8e8:	f7fa f950 	bl	8005b8c <HAL_GetTick>
 800b8ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b8ee:	e008      	b.n	800b902 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b8f0:	f7fa f94c 	bl	8005b8c <HAL_GetTick>
 800b8f4:	4602      	mov	r2, r0
 800b8f6:	693b      	ldr	r3, [r7, #16]
 800b8f8:	1ad3      	subs	r3, r2, r3
 800b8fa:	2b64      	cmp	r3, #100	; 0x64
 800b8fc:	d901      	bls.n	800b902 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e28a      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b902:	4b60      	ldr	r3, [pc, #384]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1f0      	bne.n	800b8f0 <HAL_RCC_OscConfig+0xe8>
 800b90e:	e000      	b.n	800b912 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b910:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	f003 0302 	and.w	r3, r3, #2
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d075      	beq.n	800ba0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b91e:	4b59      	ldr	r3, [pc, #356]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	f003 030c 	and.w	r3, r3, #12
 800b926:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b928:	4b56      	ldr	r3, [pc, #344]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b92a:	68db      	ldr	r3, [r3, #12]
 800b92c:	f003 0303 	and.w	r3, r3, #3
 800b930:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	2b0c      	cmp	r3, #12
 800b936:	d102      	bne.n	800b93e <HAL_RCC_OscConfig+0x136>
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	2b02      	cmp	r3, #2
 800b93c:	d002      	beq.n	800b944 <HAL_RCC_OscConfig+0x13c>
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	2b04      	cmp	r3, #4
 800b942:	d11f      	bne.n	800b984 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b944:	4b4f      	ldr	r3, [pc, #316]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d005      	beq.n	800b95c <HAL_RCC_OscConfig+0x154>
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	68db      	ldr	r3, [r3, #12]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d101      	bne.n	800b95c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b958:	2301      	movs	r3, #1
 800b95a:	e25d      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b95c:	4b49      	ldr	r3, [pc, #292]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	691b      	ldr	r3, [r3, #16]
 800b968:	061b      	lsls	r3, r3, #24
 800b96a:	4946      	ldr	r1, [pc, #280]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b96c:	4313      	orrs	r3, r2
 800b96e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b970:	4b45      	ldr	r3, [pc, #276]	; (800ba88 <HAL_RCC_OscConfig+0x280>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	4618      	mov	r0, r3
 800b976:	f7fa f8bd 	bl	8005af4 <HAL_InitTick>
 800b97a:	4603      	mov	r3, r0
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d043      	beq.n	800ba08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b980:	2301      	movs	r3, #1
 800b982:	e249      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	68db      	ldr	r3, [r3, #12]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d023      	beq.n	800b9d4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b98c:	4b3d      	ldr	r3, [pc, #244]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a3c      	ldr	r2, [pc, #240]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b998:	f7fa f8f8 	bl	8005b8c <HAL_GetTick>
 800b99c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b99e:	e008      	b.n	800b9b2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9a0:	f7fa f8f4 	bl	8005b8c <HAL_GetTick>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	2b02      	cmp	r3, #2
 800b9ac:	d901      	bls.n	800b9b2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	e232      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b9b2:	4b34      	ldr	r3, [pc, #208]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d0f0      	beq.n	800b9a0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b9be:	4b31      	ldr	r3, [pc, #196]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b9c0:	685b      	ldr	r3, [r3, #4]
 800b9c2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	061b      	lsls	r3, r3, #24
 800b9cc:	492d      	ldr	r1, [pc, #180]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b9ce:	4313      	orrs	r3, r2
 800b9d0:	604b      	str	r3, [r1, #4]
 800b9d2:	e01a      	b.n	800ba0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b9d4:	4b2b      	ldr	r3, [pc, #172]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	4a2a      	ldr	r2, [pc, #168]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b9da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b9de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b9e0:	f7fa f8d4 	bl	8005b8c <HAL_GetTick>
 800b9e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b9e6:	e008      	b.n	800b9fa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b9e8:	f7fa f8d0 	bl	8005b8c <HAL_GetTick>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	1ad3      	subs	r3, r2, r3
 800b9f2:	2b02      	cmp	r3, #2
 800b9f4:	d901      	bls.n	800b9fa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	e20e      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b9fa:	4b22      	ldr	r3, [pc, #136]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d1f0      	bne.n	800b9e8 <HAL_RCC_OscConfig+0x1e0>
 800ba06:	e000      	b.n	800ba0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800ba08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	f003 0308 	and.w	r3, r3, #8
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d041      	beq.n	800ba9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	695b      	ldr	r3, [r3, #20]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d01c      	beq.n	800ba58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ba1e:	4b19      	ldr	r3, [pc, #100]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800ba20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba24:	4a17      	ldr	r2, [pc, #92]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800ba26:	f043 0301 	orr.w	r3, r3, #1
 800ba2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba2e:	f7fa f8ad 	bl	8005b8c <HAL_GetTick>
 800ba32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ba34:	e008      	b.n	800ba48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba36:	f7fa f8a9 	bl	8005b8c <HAL_GetTick>
 800ba3a:	4602      	mov	r2, r0
 800ba3c:	693b      	ldr	r3, [r7, #16]
 800ba3e:	1ad3      	subs	r3, r2, r3
 800ba40:	2b02      	cmp	r3, #2
 800ba42:	d901      	bls.n	800ba48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800ba44:	2303      	movs	r3, #3
 800ba46:	e1e7      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800ba48:	4b0e      	ldr	r3, [pc, #56]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800ba4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba4e:	f003 0302 	and.w	r3, r3, #2
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d0ef      	beq.n	800ba36 <HAL_RCC_OscConfig+0x22e>
 800ba56:	e020      	b.n	800ba9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800ba58:	4b0a      	ldr	r3, [pc, #40]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800ba5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba5e:	4a09      	ldr	r2, [pc, #36]	; (800ba84 <HAL_RCC_OscConfig+0x27c>)
 800ba60:	f023 0301 	bic.w	r3, r3, #1
 800ba64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba68:	f7fa f890 	bl	8005b8c <HAL_GetTick>
 800ba6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ba6e:	e00d      	b.n	800ba8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ba70:	f7fa f88c 	bl	8005b8c <HAL_GetTick>
 800ba74:	4602      	mov	r2, r0
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	1ad3      	subs	r3, r2, r3
 800ba7a:	2b02      	cmp	r3, #2
 800ba7c:	d906      	bls.n	800ba8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800ba7e:	2303      	movs	r3, #3
 800ba80:	e1ca      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
 800ba82:	bf00      	nop
 800ba84:	40021000 	.word	0x40021000
 800ba88:	200001a4 	.word	0x200001a4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800ba8c:	4b8c      	ldr	r3, [pc, #560]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800ba8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba92:	f003 0302 	and.w	r3, r3, #2
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d1ea      	bne.n	800ba70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 0304 	and.w	r3, r3, #4
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 80a6 	beq.w	800bbf4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800baa8:	2300      	movs	r3, #0
 800baaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800baac:	4b84      	ldr	r3, [pc, #528]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800baae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d101      	bne.n	800babc <HAL_RCC_OscConfig+0x2b4>
 800bab8:	2301      	movs	r3, #1
 800baba:	e000      	b.n	800babe <HAL_RCC_OscConfig+0x2b6>
 800babc:	2300      	movs	r3, #0
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00d      	beq.n	800bade <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bac2:	4b7f      	ldr	r3, [pc, #508]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bac6:	4a7e      	ldr	r2, [pc, #504]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bacc:	6593      	str	r3, [r2, #88]	; 0x58
 800bace:	4b7c      	ldr	r3, [pc, #496]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bad6:	60fb      	str	r3, [r7, #12]
 800bad8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800bada:	2301      	movs	r3, #1
 800badc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bade:	4b79      	ldr	r3, [pc, #484]	; (800bcc4 <HAL_RCC_OscConfig+0x4bc>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d118      	bne.n	800bb1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800baea:	4b76      	ldr	r3, [pc, #472]	; (800bcc4 <HAL_RCC_OscConfig+0x4bc>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a75      	ldr	r2, [pc, #468]	; (800bcc4 <HAL_RCC_OscConfig+0x4bc>)
 800baf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800baf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800baf6:	f7fa f849 	bl	8005b8c <HAL_GetTick>
 800bafa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bafc:	e008      	b.n	800bb10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bafe:	f7fa f845 	bl	8005b8c <HAL_GetTick>
 800bb02:	4602      	mov	r2, r0
 800bb04:	693b      	ldr	r3, [r7, #16]
 800bb06:	1ad3      	subs	r3, r2, r3
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d901      	bls.n	800bb10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	e183      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bb10:	4b6c      	ldr	r3, [pc, #432]	; (800bcc4 <HAL_RCC_OscConfig+0x4bc>)
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d0f0      	beq.n	800bafe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	2b01      	cmp	r3, #1
 800bb22:	d108      	bne.n	800bb36 <HAL_RCC_OscConfig+0x32e>
 800bb24:	4b66      	ldr	r3, [pc, #408]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bb26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb2a:	4a65      	ldr	r2, [pc, #404]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bb2c:	f043 0301 	orr.w	r3, r3, #1
 800bb30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bb34:	e024      	b.n	800bb80 <HAL_RCC_OscConfig+0x378>
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	2b05      	cmp	r3, #5
 800bb3c:	d110      	bne.n	800bb60 <HAL_RCC_OscConfig+0x358>
 800bb3e:	4b60      	ldr	r3, [pc, #384]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bb40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb44:	4a5e      	ldr	r2, [pc, #376]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bb46:	f043 0304 	orr.w	r3, r3, #4
 800bb4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bb4e:	4b5c      	ldr	r3, [pc, #368]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bb50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb54:	4a5a      	ldr	r2, [pc, #360]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bb56:	f043 0301 	orr.w	r3, r3, #1
 800bb5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bb5e:	e00f      	b.n	800bb80 <HAL_RCC_OscConfig+0x378>
 800bb60:	4b57      	ldr	r3, [pc, #348]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bb62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb66:	4a56      	ldr	r2, [pc, #344]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bb68:	f023 0301 	bic.w	r3, r3, #1
 800bb6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800bb70:	4b53      	ldr	r3, [pc, #332]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bb72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb76:	4a52      	ldr	r2, [pc, #328]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bb78:	f023 0304 	bic.w	r3, r3, #4
 800bb7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	689b      	ldr	r3, [r3, #8]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d016      	beq.n	800bbb6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb88:	f7fa f800 	bl	8005b8c <HAL_GetTick>
 800bb8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bb8e:	e00a      	b.n	800bba6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bb90:	f7f9 fffc 	bl	8005b8c <HAL_GetTick>
 800bb94:	4602      	mov	r2, r0
 800bb96:	693b      	ldr	r3, [r7, #16]
 800bb98:	1ad3      	subs	r3, r2, r3
 800bb9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb9e:	4293      	cmp	r3, r2
 800bba0:	d901      	bls.n	800bba6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800bba2:	2303      	movs	r3, #3
 800bba4:	e138      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bba6:	4b46      	ldr	r3, [pc, #280]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbac:	f003 0302 	and.w	r3, r3, #2
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d0ed      	beq.n	800bb90 <HAL_RCC_OscConfig+0x388>
 800bbb4:	e015      	b.n	800bbe2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbb6:	f7f9 ffe9 	bl	8005b8c <HAL_GetTick>
 800bbba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bbbc:	e00a      	b.n	800bbd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bbbe:	f7f9 ffe5 	bl	8005b8c <HAL_GetTick>
 800bbc2:	4602      	mov	r2, r0
 800bbc4:	693b      	ldr	r3, [r7, #16]
 800bbc6:	1ad3      	subs	r3, r2, r3
 800bbc8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	d901      	bls.n	800bbd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800bbd0:	2303      	movs	r3, #3
 800bbd2:	e121      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bbd4:	4b3a      	ldr	r3, [pc, #232]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bbd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbda:	f003 0302 	and.w	r3, r3, #2
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d1ed      	bne.n	800bbbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800bbe2:	7ffb      	ldrb	r3, [r7, #31]
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	d105      	bne.n	800bbf4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bbe8:	4b35      	ldr	r3, [pc, #212]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bbea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbec:	4a34      	ldr	r2, [pc, #208]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bbee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bbf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 0320 	and.w	r3, r3, #32
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d03c      	beq.n	800bc7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	699b      	ldr	r3, [r3, #24]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d01c      	beq.n	800bc42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bc08:	4b2d      	ldr	r3, [pc, #180]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bc0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc0e:	4a2c      	ldr	r2, [pc, #176]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bc10:	f043 0301 	orr.w	r3, r3, #1
 800bc14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc18:	f7f9 ffb8 	bl	8005b8c <HAL_GetTick>
 800bc1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bc1e:	e008      	b.n	800bc32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc20:	f7f9 ffb4 	bl	8005b8c <HAL_GetTick>
 800bc24:	4602      	mov	r2, r0
 800bc26:	693b      	ldr	r3, [r7, #16]
 800bc28:	1ad3      	subs	r3, r2, r3
 800bc2a:	2b02      	cmp	r3, #2
 800bc2c:	d901      	bls.n	800bc32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800bc2e:	2303      	movs	r3, #3
 800bc30:	e0f2      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bc32:	4b23      	ldr	r3, [pc, #140]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bc34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc38:	f003 0302 	and.w	r3, r3, #2
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d0ef      	beq.n	800bc20 <HAL_RCC_OscConfig+0x418>
 800bc40:	e01b      	b.n	800bc7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bc42:	4b1f      	ldr	r3, [pc, #124]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bc44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc48:	4a1d      	ldr	r2, [pc, #116]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bc4a:	f023 0301 	bic.w	r3, r3, #1
 800bc4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bc52:	f7f9 ff9b 	bl	8005b8c <HAL_GetTick>
 800bc56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bc58:	e008      	b.n	800bc6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bc5a:	f7f9 ff97 	bl	8005b8c <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d901      	bls.n	800bc6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	e0d5      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bc6c:	4b14      	ldr	r3, [pc, #80]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bc6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bc72:	f003 0302 	and.w	r3, r3, #2
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1ef      	bne.n	800bc5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	69db      	ldr	r3, [r3, #28]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 80c9 	beq.w	800be16 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800bc84:	4b0e      	ldr	r3, [pc, #56]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bc86:	689b      	ldr	r3, [r3, #8]
 800bc88:	f003 030c 	and.w	r3, r3, #12
 800bc8c:	2b0c      	cmp	r3, #12
 800bc8e:	f000 8083 	beq.w	800bd98 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	69db      	ldr	r3, [r3, #28]
 800bc96:	2b02      	cmp	r3, #2
 800bc98:	d15e      	bne.n	800bd58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bc9a:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	4a08      	ldr	r2, [pc, #32]	; (800bcc0 <HAL_RCC_OscConfig+0x4b8>)
 800bca0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bca4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bca6:	f7f9 ff71 	bl	8005b8c <HAL_GetTick>
 800bcaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bcac:	e00c      	b.n	800bcc8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bcae:	f7f9 ff6d 	bl	8005b8c <HAL_GetTick>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	1ad3      	subs	r3, r2, r3
 800bcb8:	2b02      	cmp	r3, #2
 800bcba:	d905      	bls.n	800bcc8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800bcbc:	2303      	movs	r3, #3
 800bcbe:	e0ab      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
 800bcc0:	40021000 	.word	0x40021000
 800bcc4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bcc8:	4b55      	ldr	r3, [pc, #340]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d1ec      	bne.n	800bcae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bcd4:	4b52      	ldr	r3, [pc, #328]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bcd6:	68da      	ldr	r2, [r3, #12]
 800bcd8:	4b52      	ldr	r3, [pc, #328]	; (800be24 <HAL_RCC_OscConfig+0x61c>)
 800bcda:	4013      	ands	r3, r2
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	6a11      	ldr	r1, [r2, #32]
 800bce0:	687a      	ldr	r2, [r7, #4]
 800bce2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bce4:	3a01      	subs	r2, #1
 800bce6:	0112      	lsls	r2, r2, #4
 800bce8:	4311      	orrs	r1, r2
 800bcea:	687a      	ldr	r2, [r7, #4]
 800bcec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800bcee:	0212      	lsls	r2, r2, #8
 800bcf0:	4311      	orrs	r1, r2
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800bcf6:	0852      	lsrs	r2, r2, #1
 800bcf8:	3a01      	subs	r2, #1
 800bcfa:	0552      	lsls	r2, r2, #21
 800bcfc:	4311      	orrs	r1, r2
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800bd02:	0852      	lsrs	r2, r2, #1
 800bd04:	3a01      	subs	r2, #1
 800bd06:	0652      	lsls	r2, r2, #25
 800bd08:	4311      	orrs	r1, r2
 800bd0a:	687a      	ldr	r2, [r7, #4]
 800bd0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800bd0e:	06d2      	lsls	r2, r2, #27
 800bd10:	430a      	orrs	r2, r1
 800bd12:	4943      	ldr	r1, [pc, #268]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bd14:	4313      	orrs	r3, r2
 800bd16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bd18:	4b41      	ldr	r3, [pc, #260]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	4a40      	ldr	r2, [pc, #256]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bd1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bd24:	4b3e      	ldr	r3, [pc, #248]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	4a3d      	ldr	r2, [pc, #244]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bd2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd30:	f7f9 ff2c 	bl	8005b8c <HAL_GetTick>
 800bd34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bd36:	e008      	b.n	800bd4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd38:	f7f9 ff28 	bl	8005b8c <HAL_GetTick>
 800bd3c:	4602      	mov	r2, r0
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	2b02      	cmp	r3, #2
 800bd44:	d901      	bls.n	800bd4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800bd46:	2303      	movs	r3, #3
 800bd48:	e066      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bd4a:	4b35      	ldr	r3, [pc, #212]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d0f0      	beq.n	800bd38 <HAL_RCC_OscConfig+0x530>
 800bd56:	e05e      	b.n	800be16 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bd58:	4b31      	ldr	r3, [pc, #196]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a30      	ldr	r2, [pc, #192]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bd5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bd62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd64:	f7f9 ff12 	bl	8005b8c <HAL_GetTick>
 800bd68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd6a:	e008      	b.n	800bd7e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bd6c:	f7f9 ff0e 	bl	8005b8c <HAL_GetTick>
 800bd70:	4602      	mov	r2, r0
 800bd72:	693b      	ldr	r3, [r7, #16]
 800bd74:	1ad3      	subs	r3, r2, r3
 800bd76:	2b02      	cmp	r3, #2
 800bd78:	d901      	bls.n	800bd7e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800bd7a:	2303      	movs	r3, #3
 800bd7c:	e04c      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bd7e:	4b28      	ldr	r3, [pc, #160]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d1f0      	bne.n	800bd6c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800bd8a:	4b25      	ldr	r3, [pc, #148]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bd8c:	68da      	ldr	r2, [r3, #12]
 800bd8e:	4924      	ldr	r1, [pc, #144]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bd90:	4b25      	ldr	r3, [pc, #148]	; (800be28 <HAL_RCC_OscConfig+0x620>)
 800bd92:	4013      	ands	r3, r2
 800bd94:	60cb      	str	r3, [r1, #12]
 800bd96:	e03e      	b.n	800be16 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	69db      	ldr	r3, [r3, #28]
 800bd9c:	2b01      	cmp	r3, #1
 800bd9e:	d101      	bne.n	800bda4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800bda0:	2301      	movs	r3, #1
 800bda2:	e039      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800bda4:	4b1e      	ldr	r3, [pc, #120]	; (800be20 <HAL_RCC_OscConfig+0x618>)
 800bda6:	68db      	ldr	r3, [r3, #12]
 800bda8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f003 0203 	and.w	r2, r3, #3
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	6a1b      	ldr	r3, [r3, #32]
 800bdb4:	429a      	cmp	r2, r3
 800bdb6:	d12c      	bne.n	800be12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdc2:	3b01      	subs	r3, #1
 800bdc4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bdc6:	429a      	cmp	r2, r3
 800bdc8:	d123      	bne.n	800be12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdd4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bdd6:	429a      	cmp	r2, r3
 800bdd8:	d11b      	bne.n	800be12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bde4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d113      	bne.n	800be12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf4:	085b      	lsrs	r3, r3, #1
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bdfa:	429a      	cmp	r2, r3
 800bdfc:	d109      	bne.n	800be12 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be08:	085b      	lsrs	r3, r3, #1
 800be0a:	3b01      	subs	r3, #1
 800be0c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be0e:	429a      	cmp	r2, r3
 800be10:	d001      	beq.n	800be16 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800be12:	2301      	movs	r3, #1
 800be14:	e000      	b.n	800be18 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800be16:	2300      	movs	r3, #0
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3720      	adds	r7, #32
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	40021000 	.word	0x40021000
 800be24:	019f800c 	.word	0x019f800c
 800be28:	feeefffc 	.word	0xfeeefffc

0800be2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800be36:	2300      	movs	r3, #0
 800be38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d101      	bne.n	800be44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800be40:	2301      	movs	r3, #1
 800be42:	e11e      	b.n	800c082 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800be44:	4b91      	ldr	r3, [pc, #580]	; (800c08c <HAL_RCC_ClockConfig+0x260>)
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f003 030f 	and.w	r3, r3, #15
 800be4c:	683a      	ldr	r2, [r7, #0]
 800be4e:	429a      	cmp	r2, r3
 800be50:	d910      	bls.n	800be74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800be52:	4b8e      	ldr	r3, [pc, #568]	; (800c08c <HAL_RCC_ClockConfig+0x260>)
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f023 020f 	bic.w	r2, r3, #15
 800be5a:	498c      	ldr	r1, [pc, #560]	; (800c08c <HAL_RCC_ClockConfig+0x260>)
 800be5c:	683b      	ldr	r3, [r7, #0]
 800be5e:	4313      	orrs	r3, r2
 800be60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800be62:	4b8a      	ldr	r3, [pc, #552]	; (800c08c <HAL_RCC_ClockConfig+0x260>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	f003 030f 	and.w	r3, r3, #15
 800be6a:	683a      	ldr	r2, [r7, #0]
 800be6c:	429a      	cmp	r2, r3
 800be6e:	d001      	beq.n	800be74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800be70:	2301      	movs	r3, #1
 800be72:	e106      	b.n	800c082 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f003 0301 	and.w	r3, r3, #1
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d073      	beq.n	800bf68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	2b03      	cmp	r3, #3
 800be86:	d129      	bne.n	800bedc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800be88:	4b81      	ldr	r3, [pc, #516]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be90:	2b00      	cmp	r3, #0
 800be92:	d101      	bne.n	800be98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800be94:	2301      	movs	r3, #1
 800be96:	e0f4      	b.n	800c082 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800be98:	f000 f99e 	bl	800c1d8 <RCC_GetSysClockFreqFromPLLSource>
 800be9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800be9e:	693b      	ldr	r3, [r7, #16]
 800bea0:	4a7c      	ldr	r2, [pc, #496]	; (800c094 <HAL_RCC_ClockConfig+0x268>)
 800bea2:	4293      	cmp	r3, r2
 800bea4:	d93f      	bls.n	800bf26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bea6:	4b7a      	ldr	r3, [pc, #488]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bea8:	689b      	ldr	r3, [r3, #8]
 800beaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d009      	beq.n	800bec6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d033      	beq.n	800bf26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d12f      	bne.n	800bf26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bec6:	4b72      	ldr	r3, [pc, #456]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bece:	4a70      	ldr	r2, [pc, #448]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bed0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bed4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800bed6:	2380      	movs	r3, #128	; 0x80
 800bed8:	617b      	str	r3, [r7, #20]
 800beda:	e024      	b.n	800bf26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	685b      	ldr	r3, [r3, #4]
 800bee0:	2b02      	cmp	r3, #2
 800bee2:	d107      	bne.n	800bef4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bee4:	4b6a      	ldr	r3, [pc, #424]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beec:	2b00      	cmp	r3, #0
 800beee:	d109      	bne.n	800bf04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bef0:	2301      	movs	r3, #1
 800bef2:	e0c6      	b.n	800c082 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bef4:	4b66      	ldr	r3, [pc, #408]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800befc:	2b00      	cmp	r3, #0
 800befe:	d101      	bne.n	800bf04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	e0be      	b.n	800c082 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800bf04:	f000 f8ce 	bl	800c0a4 <HAL_RCC_GetSysClockFreq>
 800bf08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800bf0a:	693b      	ldr	r3, [r7, #16]
 800bf0c:	4a61      	ldr	r2, [pc, #388]	; (800c094 <HAL_RCC_ClockConfig+0x268>)
 800bf0e:	4293      	cmp	r3, r2
 800bf10:	d909      	bls.n	800bf26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bf12:	4b5f      	ldr	r3, [pc, #380]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bf14:	689b      	ldr	r3, [r3, #8]
 800bf16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf1a:	4a5d      	ldr	r2, [pc, #372]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bf1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800bf22:	2380      	movs	r3, #128	; 0x80
 800bf24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bf26:	4b5a      	ldr	r3, [pc, #360]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	f023 0203 	bic.w	r2, r3, #3
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	685b      	ldr	r3, [r3, #4]
 800bf32:	4957      	ldr	r1, [pc, #348]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bf34:	4313      	orrs	r3, r2
 800bf36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bf38:	f7f9 fe28 	bl	8005b8c <HAL_GetTick>
 800bf3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf3e:	e00a      	b.n	800bf56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bf40:	f7f9 fe24 	bl	8005b8c <HAL_GetTick>
 800bf44:	4602      	mov	r2, r0
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	1ad3      	subs	r3, r2, r3
 800bf4a:	f241 3288 	movw	r2, #5000	; 0x1388
 800bf4e:	4293      	cmp	r3, r2
 800bf50:	d901      	bls.n	800bf56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800bf52:	2303      	movs	r3, #3
 800bf54:	e095      	b.n	800c082 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bf56:	4b4e      	ldr	r3, [pc, #312]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	f003 020c 	and.w	r2, r3, #12
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	685b      	ldr	r3, [r3, #4]
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	429a      	cmp	r2, r3
 800bf66:	d1eb      	bne.n	800bf40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	f003 0302 	and.w	r3, r3, #2
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d023      	beq.n	800bfbc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	f003 0304 	and.w	r3, r3, #4
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d005      	beq.n	800bf8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bf80:	4b43      	ldr	r3, [pc, #268]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	4a42      	ldr	r2, [pc, #264]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bf86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bf8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 0308 	and.w	r3, r3, #8
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d007      	beq.n	800bfa8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bf98:	4b3d      	ldr	r3, [pc, #244]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800bfa0:	4a3b      	ldr	r2, [pc, #236]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bfa2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800bfa6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bfa8:	4b39      	ldr	r3, [pc, #228]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bfaa:	689b      	ldr	r3, [r3, #8]
 800bfac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	4936      	ldr	r1, [pc, #216]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bfb6:	4313      	orrs	r3, r2
 800bfb8:	608b      	str	r3, [r1, #8]
 800bfba:	e008      	b.n	800bfce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bfbc:	697b      	ldr	r3, [r7, #20]
 800bfbe:	2b80      	cmp	r3, #128	; 0x80
 800bfc0:	d105      	bne.n	800bfce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bfc2:	4b33      	ldr	r3, [pc, #204]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bfc4:	689b      	ldr	r3, [r3, #8]
 800bfc6:	4a32      	ldr	r2, [pc, #200]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800bfc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfcc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bfce:	4b2f      	ldr	r3, [pc, #188]	; (800c08c <HAL_RCC_ClockConfig+0x260>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f003 030f 	and.w	r3, r3, #15
 800bfd6:	683a      	ldr	r2, [r7, #0]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d21d      	bcs.n	800c018 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bfdc:	4b2b      	ldr	r3, [pc, #172]	; (800c08c <HAL_RCC_ClockConfig+0x260>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	f023 020f 	bic.w	r2, r3, #15
 800bfe4:	4929      	ldr	r1, [pc, #164]	; (800c08c <HAL_RCC_ClockConfig+0x260>)
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	4313      	orrs	r3, r2
 800bfea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bfec:	f7f9 fdce 	bl	8005b8c <HAL_GetTick>
 800bff0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bff2:	e00a      	b.n	800c00a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bff4:	f7f9 fdca 	bl	8005b8c <HAL_GetTick>
 800bff8:	4602      	mov	r2, r0
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	f241 3288 	movw	r2, #5000	; 0x1388
 800c002:	4293      	cmp	r3, r2
 800c004:	d901      	bls.n	800c00a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800c006:	2303      	movs	r3, #3
 800c008:	e03b      	b.n	800c082 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c00a:	4b20      	ldr	r3, [pc, #128]	; (800c08c <HAL_RCC_ClockConfig+0x260>)
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	f003 030f 	and.w	r3, r3, #15
 800c012:	683a      	ldr	r2, [r7, #0]
 800c014:	429a      	cmp	r2, r3
 800c016:	d1ed      	bne.n	800bff4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	f003 0304 	and.w	r3, r3, #4
 800c020:	2b00      	cmp	r3, #0
 800c022:	d008      	beq.n	800c036 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c024:	4b1a      	ldr	r3, [pc, #104]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	4917      	ldr	r1, [pc, #92]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800c032:	4313      	orrs	r3, r2
 800c034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	f003 0308 	and.w	r3, r3, #8
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d009      	beq.n	800c056 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c042:	4b13      	ldr	r3, [pc, #76]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	691b      	ldr	r3, [r3, #16]
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	490f      	ldr	r1, [pc, #60]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800c052:	4313      	orrs	r3, r2
 800c054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c056:	f000 f825 	bl	800c0a4 <HAL_RCC_GetSysClockFreq>
 800c05a:	4602      	mov	r2, r0
 800c05c:	4b0c      	ldr	r3, [pc, #48]	; (800c090 <HAL_RCC_ClockConfig+0x264>)
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	091b      	lsrs	r3, r3, #4
 800c062:	f003 030f 	and.w	r3, r3, #15
 800c066:	490c      	ldr	r1, [pc, #48]	; (800c098 <HAL_RCC_ClockConfig+0x26c>)
 800c068:	5ccb      	ldrb	r3, [r1, r3]
 800c06a:	f003 031f 	and.w	r3, r3, #31
 800c06e:	fa22 f303 	lsr.w	r3, r2, r3
 800c072:	4a0a      	ldr	r2, [pc, #40]	; (800c09c <HAL_RCC_ClockConfig+0x270>)
 800c074:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800c076:	4b0a      	ldr	r3, [pc, #40]	; (800c0a0 <HAL_RCC_ClockConfig+0x274>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4618      	mov	r0, r3
 800c07c:	f7f9 fd3a 	bl	8005af4 <HAL_InitTick>
 800c080:	4603      	mov	r3, r0
}
 800c082:	4618      	mov	r0, r3
 800c084:	3718      	adds	r7, #24
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
 800c08a:	bf00      	nop
 800c08c:	40022000 	.word	0x40022000
 800c090:	40021000 	.word	0x40021000
 800c094:	04c4b400 	.word	0x04c4b400
 800c098:	080191a4 	.word	0x080191a4
 800c09c:	20000190 	.word	0x20000190
 800c0a0:	200001a4 	.word	0x200001a4

0800c0a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b087      	sub	sp, #28
 800c0a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800c0aa:	4b2c      	ldr	r3, [pc, #176]	; (800c15c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	f003 030c 	and.w	r3, r3, #12
 800c0b2:	2b04      	cmp	r3, #4
 800c0b4:	d102      	bne.n	800c0bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c0b6:	4b2a      	ldr	r3, [pc, #168]	; (800c160 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c0b8:	613b      	str	r3, [r7, #16]
 800c0ba:	e047      	b.n	800c14c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800c0bc:	4b27      	ldr	r3, [pc, #156]	; (800c15c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	f003 030c 	and.w	r3, r3, #12
 800c0c4:	2b08      	cmp	r3, #8
 800c0c6:	d102      	bne.n	800c0ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c0c8:	4b26      	ldr	r3, [pc, #152]	; (800c164 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c0ca:	613b      	str	r3, [r7, #16]
 800c0cc:	e03e      	b.n	800c14c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800c0ce:	4b23      	ldr	r3, [pc, #140]	; (800c15c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f003 030c 	and.w	r3, r3, #12
 800c0d6:	2b0c      	cmp	r3, #12
 800c0d8:	d136      	bne.n	800c148 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c0da:	4b20      	ldr	r3, [pc, #128]	; (800c15c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c0dc:	68db      	ldr	r3, [r3, #12]
 800c0de:	f003 0303 	and.w	r3, r3, #3
 800c0e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c0e4:	4b1d      	ldr	r3, [pc, #116]	; (800c15c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c0e6:	68db      	ldr	r3, [r3, #12]
 800c0e8:	091b      	lsrs	r3, r3, #4
 800c0ea:	f003 030f 	and.w	r3, r3, #15
 800c0ee:	3301      	adds	r3, #1
 800c0f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	d10c      	bne.n	800c112 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c0f8:	4a1a      	ldr	r2, [pc, #104]	; (800c164 <HAL_RCC_GetSysClockFreq+0xc0>)
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c100:	4a16      	ldr	r2, [pc, #88]	; (800c15c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c102:	68d2      	ldr	r2, [r2, #12]
 800c104:	0a12      	lsrs	r2, r2, #8
 800c106:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c10a:	fb02 f303 	mul.w	r3, r2, r3
 800c10e:	617b      	str	r3, [r7, #20]
      break;
 800c110:	e00c      	b.n	800c12c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c112:	4a13      	ldr	r2, [pc, #76]	; (800c160 <HAL_RCC_GetSysClockFreq+0xbc>)
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	fbb2 f3f3 	udiv	r3, r2, r3
 800c11a:	4a10      	ldr	r2, [pc, #64]	; (800c15c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c11c:	68d2      	ldr	r2, [r2, #12]
 800c11e:	0a12      	lsrs	r2, r2, #8
 800c120:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c124:	fb02 f303 	mul.w	r3, r2, r3
 800c128:	617b      	str	r3, [r7, #20]
      break;
 800c12a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c12c:	4b0b      	ldr	r3, [pc, #44]	; (800c15c <HAL_RCC_GetSysClockFreq+0xb8>)
 800c12e:	68db      	ldr	r3, [r3, #12]
 800c130:	0e5b      	lsrs	r3, r3, #25
 800c132:	f003 0303 	and.w	r3, r3, #3
 800c136:	3301      	adds	r3, #1
 800c138:	005b      	lsls	r3, r3, #1
 800c13a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800c13c:	697a      	ldr	r2, [r7, #20]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	fbb2 f3f3 	udiv	r3, r2, r3
 800c144:	613b      	str	r3, [r7, #16]
 800c146:	e001      	b.n	800c14c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800c148:	2300      	movs	r3, #0
 800c14a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800c14c:	693b      	ldr	r3, [r7, #16]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	371c      	adds	r7, #28
 800c152:	46bd      	mov	sp, r7
 800c154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c158:	4770      	bx	lr
 800c15a:	bf00      	nop
 800c15c:	40021000 	.word	0x40021000
 800c160:	00f42400 	.word	0x00f42400
 800c164:	007a1200 	.word	0x007a1200

0800c168 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c168:	b480      	push	{r7}
 800c16a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c16c:	4b03      	ldr	r3, [pc, #12]	; (800c17c <HAL_RCC_GetHCLKFreq+0x14>)
 800c16e:	681b      	ldr	r3, [r3, #0]
}
 800c170:	4618      	mov	r0, r3
 800c172:	46bd      	mov	sp, r7
 800c174:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c178:	4770      	bx	lr
 800c17a:	bf00      	nop
 800c17c:	20000190 	.word	0x20000190

0800c180 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c184:	f7ff fff0 	bl	800c168 <HAL_RCC_GetHCLKFreq>
 800c188:	4602      	mov	r2, r0
 800c18a:	4b06      	ldr	r3, [pc, #24]	; (800c1a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c18c:	689b      	ldr	r3, [r3, #8]
 800c18e:	0a1b      	lsrs	r3, r3, #8
 800c190:	f003 0307 	and.w	r3, r3, #7
 800c194:	4904      	ldr	r1, [pc, #16]	; (800c1a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c196:	5ccb      	ldrb	r3, [r1, r3]
 800c198:	f003 031f 	and.w	r3, r3, #31
 800c19c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	40021000 	.word	0x40021000
 800c1a8:	080191b4 	.word	0x080191b4

0800c1ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c1b0:	f7ff ffda 	bl	800c168 <HAL_RCC_GetHCLKFreq>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	4b06      	ldr	r3, [pc, #24]	; (800c1d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c1b8:	689b      	ldr	r3, [r3, #8]
 800c1ba:	0adb      	lsrs	r3, r3, #11
 800c1bc:	f003 0307 	and.w	r3, r3, #7
 800c1c0:	4904      	ldr	r1, [pc, #16]	; (800c1d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 800c1c2:	5ccb      	ldrb	r3, [r1, r3]
 800c1c4:	f003 031f 	and.w	r3, r3, #31
 800c1c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	40021000 	.word	0x40021000
 800c1d4:	080191b4 	.word	0x080191b4

0800c1d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b087      	sub	sp, #28
 800c1dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c1de:	4b1e      	ldr	r3, [pc, #120]	; (800c258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c1e0:	68db      	ldr	r3, [r3, #12]
 800c1e2:	f003 0303 	and.w	r3, r3, #3
 800c1e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c1e8:	4b1b      	ldr	r3, [pc, #108]	; (800c258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c1ea:	68db      	ldr	r3, [r3, #12]
 800c1ec:	091b      	lsrs	r3, r3, #4
 800c1ee:	f003 030f 	and.w	r3, r3, #15
 800c1f2:	3301      	adds	r3, #1
 800c1f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800c1f6:	693b      	ldr	r3, [r7, #16]
 800c1f8:	2b03      	cmp	r3, #3
 800c1fa:	d10c      	bne.n	800c216 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c1fc:	4a17      	ldr	r2, [pc, #92]	; (800c25c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	fbb2 f3f3 	udiv	r3, r2, r3
 800c204:	4a14      	ldr	r2, [pc, #80]	; (800c258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c206:	68d2      	ldr	r2, [r2, #12]
 800c208:	0a12      	lsrs	r2, r2, #8
 800c20a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c20e:	fb02 f303 	mul.w	r3, r2, r3
 800c212:	617b      	str	r3, [r7, #20]
    break;
 800c214:	e00c      	b.n	800c230 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800c216:	4a12      	ldr	r2, [pc, #72]	; (800c260 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c21e:	4a0e      	ldr	r2, [pc, #56]	; (800c258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c220:	68d2      	ldr	r2, [r2, #12]
 800c222:	0a12      	lsrs	r2, r2, #8
 800c224:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c228:	fb02 f303 	mul.w	r3, r2, r3
 800c22c:	617b      	str	r3, [r7, #20]
    break;
 800c22e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c230:	4b09      	ldr	r3, [pc, #36]	; (800c258 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800c232:	68db      	ldr	r3, [r3, #12]
 800c234:	0e5b      	lsrs	r3, r3, #25
 800c236:	f003 0303 	and.w	r3, r3, #3
 800c23a:	3301      	adds	r3, #1
 800c23c:	005b      	lsls	r3, r3, #1
 800c23e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800c240:	697a      	ldr	r2, [r7, #20]
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	fbb2 f3f3 	udiv	r3, r2, r3
 800c248:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800c24a:	687b      	ldr	r3, [r7, #4]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	371c      	adds	r7, #28
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr
 800c258:	40021000 	.word	0x40021000
 800c25c:	007a1200 	.word	0x007a1200
 800c260:	00f42400 	.word	0x00f42400

0800c264 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b086      	sub	sp, #24
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c26c:	2300      	movs	r3, #0
 800c26e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c270:	2300      	movs	r3, #0
 800c272:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	f000 8098 	beq.w	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c282:	2300      	movs	r3, #0
 800c284:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c286:	4b43      	ldr	r3, [pc, #268]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c28a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d10d      	bne.n	800c2ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c292:	4b40      	ldr	r3, [pc, #256]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c296:	4a3f      	ldr	r2, [pc, #252]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c29c:	6593      	str	r3, [r2, #88]	; 0x58
 800c29e:	4b3d      	ldr	r3, [pc, #244]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c2a6:	60bb      	str	r3, [r7, #8]
 800c2a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c2aa:	2301      	movs	r3, #1
 800c2ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c2ae:	4b3a      	ldr	r3, [pc, #232]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	4a39      	ldr	r2, [pc, #228]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c2b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c2ba:	f7f9 fc67 	bl	8005b8c <HAL_GetTick>
 800c2be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2c0:	e009      	b.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c2c2:	f7f9 fc63 	bl	8005b8c <HAL_GetTick>
 800c2c6:	4602      	mov	r2, r0
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d902      	bls.n	800c2d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c2d0:	2303      	movs	r3, #3
 800c2d2:	74fb      	strb	r3, [r7, #19]
        break;
 800c2d4:	e005      	b.n	800c2e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c2d6:	4b30      	ldr	r3, [pc, #192]	; (800c398 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d0ef      	beq.n	800c2c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c2e2:	7cfb      	ldrb	r3, [r7, #19]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d159      	bne.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c2e8:	4b2a      	ldr	r3, [pc, #168]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c2ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c2ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c2f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d01e      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	429a      	cmp	r2, r3
 800c302:	d019      	beq.n	800c338 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c304:	4b23      	ldr	r3, [pc, #140]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c30a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c30e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c310:	4b20      	ldr	r3, [pc, #128]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c316:	4a1f      	ldr	r2, [pc, #124]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c31c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c320:	4b1c      	ldr	r3, [pc, #112]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c326:	4a1b      	ldr	r2, [pc, #108]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c328:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c32c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c330:	4a18      	ldr	r2, [pc, #96]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c338:	697b      	ldr	r3, [r7, #20]
 800c33a:	f003 0301 	and.w	r3, r3, #1
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d016      	beq.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c342:	f7f9 fc23 	bl	8005b8c <HAL_GetTick>
 800c346:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c348:	e00b      	b.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c34a:	f7f9 fc1f 	bl	8005b8c <HAL_GetTick>
 800c34e:	4602      	mov	r2, r0
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	1ad3      	subs	r3, r2, r3
 800c354:	f241 3288 	movw	r2, #5000	; 0x1388
 800c358:	4293      	cmp	r3, r2
 800c35a:	d902      	bls.n	800c362 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c35c:	2303      	movs	r3, #3
 800c35e:	74fb      	strb	r3, [r7, #19]
            break;
 800c360:	e006      	b.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c362:	4b0c      	ldr	r3, [pc, #48]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c368:	f003 0302 	and.w	r3, r3, #2
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d0ec      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c370:	7cfb      	ldrb	r3, [r7, #19]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10b      	bne.n	800c38e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c376:	4b07      	ldr	r3, [pc, #28]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c37c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c384:	4903      	ldr	r1, [pc, #12]	; (800c394 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c386:	4313      	orrs	r3, r2
 800c388:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800c38c:	e008      	b.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c38e:	7cfb      	ldrb	r3, [r7, #19]
 800c390:	74bb      	strb	r3, [r7, #18]
 800c392:	e005      	b.n	800c3a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c394:	40021000 	.word	0x40021000
 800c398:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c39c:	7cfb      	ldrb	r3, [r7, #19]
 800c39e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c3a0:	7c7b      	ldrb	r3, [r7, #17]
 800c3a2:	2b01      	cmp	r3, #1
 800c3a4:	d105      	bne.n	800c3b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c3a6:	4ba6      	ldr	r3, [pc, #664]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3aa:	4aa5      	ldr	r2, [pc, #660]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c3b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	f003 0301 	and.w	r3, r3, #1
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00a      	beq.n	800c3d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c3be:	4ba0      	ldr	r3, [pc, #640]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3c4:	f023 0203 	bic.w	r2, r3, #3
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	499c      	ldr	r1, [pc, #624]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 0302 	and.w	r3, r3, #2
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d00a      	beq.n	800c3f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c3e0:	4b97      	ldr	r3, [pc, #604]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c3e6:	f023 020c 	bic.w	r2, r3, #12
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	689b      	ldr	r3, [r3, #8]
 800c3ee:	4994      	ldr	r1, [pc, #592]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	f003 0304 	and.w	r3, r3, #4
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d00a      	beq.n	800c418 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c402:	4b8f      	ldr	r3, [pc, #572]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c408:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	68db      	ldr	r3, [r3, #12]
 800c410:	498b      	ldr	r1, [pc, #556]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c412:	4313      	orrs	r3, r2
 800c414:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f003 0308 	and.w	r3, r3, #8
 800c420:	2b00      	cmp	r3, #0
 800c422:	d00a      	beq.n	800c43a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c424:	4b86      	ldr	r3, [pc, #536]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c42a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	4983      	ldr	r1, [pc, #524]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c434:	4313      	orrs	r3, r2
 800c436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f003 0320 	and.w	r3, r3, #32
 800c442:	2b00      	cmp	r3, #0
 800c444:	d00a      	beq.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c446:	4b7e      	ldr	r3, [pc, #504]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c448:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c44c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	695b      	ldr	r3, [r3, #20]
 800c454:	497a      	ldr	r1, [pc, #488]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c456:	4313      	orrs	r3, r2
 800c458:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c464:	2b00      	cmp	r3, #0
 800c466:	d00a      	beq.n	800c47e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c468:	4b75      	ldr	r3, [pc, #468]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c46a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c46e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	699b      	ldr	r3, [r3, #24]
 800c476:	4972      	ldr	r1, [pc, #456]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c478:	4313      	orrs	r3, r2
 800c47a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00a      	beq.n	800c4a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c48a:	4b6d      	ldr	r3, [pc, #436]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c48c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c490:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	69db      	ldr	r3, [r3, #28]
 800c498:	4969      	ldr	r1, [pc, #420]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c49a:	4313      	orrs	r3, r2
 800c49c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d00a      	beq.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c4ac:	4b64      	ldr	r3, [pc, #400]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6a1b      	ldr	r3, [r3, #32]
 800c4ba:	4961      	ldr	r1, [pc, #388]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4bc:	4313      	orrs	r3, r2
 800c4be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d00a      	beq.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c4ce:	4b5c      	ldr	r3, [pc, #368]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4dc:	4958      	ldr	r1, [pc, #352]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4de:	4313      	orrs	r3, r2
 800c4e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d015      	beq.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c4f0:	4b53      	ldr	r3, [pc, #332]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c4f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c4f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4fe:	4950      	ldr	r1, [pc, #320]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c500:	4313      	orrs	r3, r2
 800c502:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c50a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c50e:	d105      	bne.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c510:	4b4b      	ldr	r3, [pc, #300]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c512:	68db      	ldr	r3, [r3, #12]
 800c514:	4a4a      	ldr	r2, [pc, #296]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c516:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c51a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c524:	2b00      	cmp	r3, #0
 800c526:	d015      	beq.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c528:	4b45      	ldr	r3, [pc, #276]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c52e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c536:	4942      	ldr	r1, [pc, #264]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c538:	4313      	orrs	r3, r2
 800c53a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c542:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c546:	d105      	bne.n	800c554 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c548:	4b3d      	ldr	r3, [pc, #244]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c54a:	68db      	ldr	r3, [r3, #12]
 800c54c:	4a3c      	ldr	r2, [pc, #240]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c54e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c552:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d015      	beq.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c560:	4b37      	ldr	r3, [pc, #220]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c566:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c56e:	4934      	ldr	r1, [pc, #208]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c570:	4313      	orrs	r3, r2
 800c572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c57a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c57e:	d105      	bne.n	800c58c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c580:	4b2f      	ldr	r3, [pc, #188]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	4a2e      	ldr	r2, [pc, #184]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c586:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c58a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c594:	2b00      	cmp	r3, #0
 800c596:	d015      	beq.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c598:	4b29      	ldr	r3, [pc, #164]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c59a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c59e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5a6:	4926      	ldr	r1, [pc, #152]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c5b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5b6:	d105      	bne.n	800c5c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c5b8:	4b21      	ldr	r3, [pc, #132]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5ba:	68db      	ldr	r3, [r3, #12]
 800c5bc:	4a20      	ldr	r2, [pc, #128]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d015      	beq.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c5d0:	4b1b      	ldr	r3, [pc, #108]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c5d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5de:	4918      	ldr	r1, [pc, #96]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5ee:	d105      	bne.n	800c5fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c5f0:	4b13      	ldr	r3, [pc, #76]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5f2:	68db      	ldr	r3, [r3, #12]
 800c5f4:	4a12      	ldr	r2, [pc, #72]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c5f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c604:	2b00      	cmp	r3, #0
 800c606:	d015      	beq.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c608:	4b0d      	ldr	r3, [pc, #52]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c60a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c60e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c616:	490a      	ldr	r1, [pc, #40]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c618:	4313      	orrs	r3, r2
 800c61a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c626:	d105      	bne.n	800c634 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c628:	4b05      	ldr	r3, [pc, #20]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	4a04      	ldr	r2, [pc, #16]	; (800c640 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c62e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c632:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c634:	7cbb      	ldrb	r3, [r7, #18]
}
 800c636:	4618      	mov	r0, r3
 800c638:	3718      	adds	r7, #24
 800c63a:	46bd      	mov	sp, r7
 800c63c:	bd80      	pop	{r7, pc}
 800c63e:	bf00      	nop
 800c640:	40021000 	.word	0x40021000

0800c644 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d101      	bne.n	800c656 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c652:	2301      	movs	r3, #1
 800c654:	e09d      	b.n	800c792 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d108      	bne.n	800c670 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685b      	ldr	r3, [r3, #4]
 800c662:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c666:	d009      	beq.n	800c67c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	61da      	str	r2, [r3, #28]
 800c66e:	e005      	b.n	800c67c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2200      	movs	r2, #0
 800c674:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2200      	movs	r2, #0
 800c67a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	2200      	movs	r2, #0
 800c680:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c688:	b2db      	uxtb	r3, r3
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d106      	bne.n	800c69c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c696:	6878      	ldr	r0, [r7, #4]
 800c698:	f7f8 fa0a 	bl	8004ab0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	2202      	movs	r2, #2
 800c6a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c6bc:	d902      	bls.n	800c6c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c6be:	2300      	movs	r3, #0
 800c6c0:	60fb      	str	r3, [r7, #12]
 800c6c2:	e002      	b.n	800c6ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c6c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c6d2:	d007      	beq.n	800c6e4 <HAL_SPI_Init+0xa0>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c6dc:	d002      	beq.n	800c6e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	689b      	ldr	r3, [r3, #8]
 800c6f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800c6f4:	431a      	orrs	r2, r3
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	691b      	ldr	r3, [r3, #16]
 800c6fa:	f003 0302 	and.w	r3, r3, #2
 800c6fe:	431a      	orrs	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	695b      	ldr	r3, [r3, #20]
 800c704:	f003 0301 	and.w	r3, r3, #1
 800c708:	431a      	orrs	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	699b      	ldr	r3, [r3, #24]
 800c70e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c712:	431a      	orrs	r2, r3
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	69db      	ldr	r3, [r3, #28]
 800c718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c71c:	431a      	orrs	r2, r3
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6a1b      	ldr	r3, [r3, #32]
 800c722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c726:	ea42 0103 	orr.w	r1, r2, r3
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c72e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	430a      	orrs	r2, r1
 800c738:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	699b      	ldr	r3, [r3, #24]
 800c73e:	0c1b      	lsrs	r3, r3, #16
 800c740:	f003 0204 	and.w	r2, r3, #4
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c748:	f003 0310 	and.w	r3, r3, #16
 800c74c:	431a      	orrs	r2, r3
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c752:	f003 0308 	and.w	r3, r3, #8
 800c756:	431a      	orrs	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68db      	ldr	r3, [r3, #12]
 800c75c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800c760:	ea42 0103 	orr.w	r1, r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	430a      	orrs	r2, r1
 800c770:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	69da      	ldr	r2, [r3, #28]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c780:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2201      	movs	r2, #1
 800c78c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	3710      	adds	r7, #16
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}

0800c79a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c79a:	b580      	push	{r7, lr}
 800c79c:	b088      	sub	sp, #32
 800c79e:	af00      	add	r7, sp, #0
 800c7a0:	60f8      	str	r0, [r7, #12]
 800c7a2:	60b9      	str	r1, [r7, #8]
 800c7a4:	603b      	str	r3, [r7, #0]
 800c7a6:	4613      	mov	r3, r2
 800c7a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d101      	bne.n	800c7bc <HAL_SPI_Transmit+0x22>
 800c7b8:	2302      	movs	r3, #2
 800c7ba:	e15f      	b.n	800ca7c <HAL_SPI_Transmit+0x2e2>
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2201      	movs	r2, #1
 800c7c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c7c4:	f7f9 f9e2 	bl	8005b8c <HAL_GetTick>
 800c7c8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800c7ca:	88fb      	ldrh	r3, [r7, #6]
 800c7cc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d002      	beq.n	800c7e0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800c7da:	2302      	movs	r3, #2
 800c7dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c7de:	e148      	b.n	800ca72 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d002      	beq.n	800c7ec <HAL_SPI_Transmit+0x52>
 800c7e6:	88fb      	ldrh	r3, [r7, #6]
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d102      	bne.n	800c7f2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800c7ec:	2301      	movs	r3, #1
 800c7ee:	77fb      	strb	r3, [r7, #31]
    goto error;
 800c7f0:	e13f      	b.n	800ca72 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2203      	movs	r2, #3
 800c7f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	68ba      	ldr	r2, [r7, #8]
 800c804:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	88fa      	ldrh	r2, [r7, #6]
 800c80a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	88fa      	ldrh	r2, [r7, #6]
 800c810:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	2200      	movs	r2, #0
 800c816:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	2200      	movs	r2, #0
 800c81c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2200      	movs	r2, #0
 800c82c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2200      	movs	r2, #0
 800c832:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c83c:	d10f      	bne.n	800c85e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c84c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c85c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c868:	2b40      	cmp	r3, #64	; 0x40
 800c86a:	d007      	beq.n	800c87c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c87a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	68db      	ldr	r3, [r3, #12]
 800c880:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c884:	d94f      	bls.n	800c926 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d002      	beq.n	800c894 <HAL_SPI_Transmit+0xfa>
 800c88e:	8afb      	ldrh	r3, [r7, #22]
 800c890:	2b01      	cmp	r3, #1
 800c892:	d142      	bne.n	800c91a <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c898:	881a      	ldrh	r2, [r3, #0]
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8a0:	68fb      	ldr	r3, [r7, #12]
 800c8a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a4:	1c9a      	adds	r2, r3, #2
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	b29a      	uxth	r2, r3
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800c8b8:	e02f      	b.n	800c91a <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	f003 0302 	and.w	r3, r3, #2
 800c8c4:	2b02      	cmp	r3, #2
 800c8c6:	d112      	bne.n	800c8ee <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8cc:	881a      	ldrh	r2, [r3, #0]
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8d8:	1c9a      	adds	r2, r3, #2
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	3b01      	subs	r3, #1
 800c8e6:	b29a      	uxth	r2, r3
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c8ec:	e015      	b.n	800c91a <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c8ee:	f7f9 f94d 	bl	8005b8c <HAL_GetTick>
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	1ad3      	subs	r3, r2, r3
 800c8f8:	683a      	ldr	r2, [r7, #0]
 800c8fa:	429a      	cmp	r2, r3
 800c8fc:	d803      	bhi.n	800c906 <HAL_SPI_Transmit+0x16c>
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c904:	d102      	bne.n	800c90c <HAL_SPI_Transmit+0x172>
 800c906:	683b      	ldr	r3, [r7, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d106      	bne.n	800c91a <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800c90c:	2303      	movs	r3, #3
 800c90e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2201      	movs	r2, #1
 800c914:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800c918:	e0ab      	b.n	800ca72 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c91e:	b29b      	uxth	r3, r3
 800c920:	2b00      	cmp	r3, #0
 800c922:	d1ca      	bne.n	800c8ba <HAL_SPI_Transmit+0x120>
 800c924:	e080      	b.n	800ca28 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	685b      	ldr	r3, [r3, #4]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d002      	beq.n	800c934 <HAL_SPI_Transmit+0x19a>
 800c92e:	8afb      	ldrh	r3, [r7, #22]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d174      	bne.n	800ca1e <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c938:	b29b      	uxth	r3, r3
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d912      	bls.n	800c964 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c942:	881a      	ldrh	r2, [r3, #0]
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c94e:	1c9a      	adds	r2, r3, #2
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c958:	b29b      	uxth	r3, r3
 800c95a:	3b02      	subs	r3, #2
 800c95c:	b29a      	uxth	r2, r3
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c962:	e05c      	b.n	800ca1e <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	330c      	adds	r3, #12
 800c96e:	7812      	ldrb	r2, [r2, #0]
 800c970:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c976:	1c5a      	adds	r2, r3, #1
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c980:	b29b      	uxth	r3, r3
 800c982:	3b01      	subs	r3, #1
 800c984:	b29a      	uxth	r2, r3
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800c98a:	e048      	b.n	800ca1e <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	689b      	ldr	r3, [r3, #8]
 800c992:	f003 0302 	and.w	r3, r3, #2
 800c996:	2b02      	cmp	r3, #2
 800c998:	d12b      	bne.n	800c9f2 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c99e:	b29b      	uxth	r3, r3
 800c9a0:	2b01      	cmp	r3, #1
 800c9a2:	d912      	bls.n	800c9ca <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9a8:	881a      	ldrh	r2, [r3, #0]
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9b4:	1c9a      	adds	r2, r3, #2
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9be:	b29b      	uxth	r3, r3
 800c9c0:	3b02      	subs	r3, #2
 800c9c2:	b29a      	uxth	r2, r3
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c9c8:	e029      	b.n	800ca1e <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	330c      	adds	r3, #12
 800c9d4:	7812      	ldrb	r2, [r2, #0]
 800c9d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9dc:	1c5a      	adds	r2, r3, #1
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800c9e6:	b29b      	uxth	r3, r3
 800c9e8:	3b01      	subs	r3, #1
 800c9ea:	b29a      	uxth	r2, r3
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	87da      	strh	r2, [r3, #62]	; 0x3e
 800c9f0:	e015      	b.n	800ca1e <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c9f2:	f7f9 f8cb 	bl	8005b8c <HAL_GetTick>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	69bb      	ldr	r3, [r7, #24]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	683a      	ldr	r2, [r7, #0]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d803      	bhi.n	800ca0a <HAL_SPI_Transmit+0x270>
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca08:	d102      	bne.n	800ca10 <HAL_SPI_Transmit+0x276>
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d106      	bne.n	800ca1e <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800ca10:	2303      	movs	r3, #3
 800ca12:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2201      	movs	r2, #1
 800ca18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800ca1c:	e029      	b.n	800ca72 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ca22:	b29b      	uxth	r3, r3
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d1b1      	bne.n	800c98c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ca28:	69ba      	ldr	r2, [r7, #24]
 800ca2a:	6839      	ldr	r1, [r7, #0]
 800ca2c:	68f8      	ldr	r0, [r7, #12]
 800ca2e:	f000 fad7 	bl	800cfe0 <SPI_EndRxTxTransaction>
 800ca32:	4603      	mov	r3, r0
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d002      	beq.n	800ca3e <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2220      	movs	r2, #32
 800ca3c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	689b      	ldr	r3, [r3, #8]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10a      	bne.n	800ca5c <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ca46:	2300      	movs	r3, #0
 800ca48:	613b      	str	r3, [r7, #16]
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	68db      	ldr	r3, [r3, #12]
 800ca50:	613b      	str	r3, [r7, #16]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	613b      	str	r3, [r7, #16]
 800ca5a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d002      	beq.n	800ca6a <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 800ca64:	2301      	movs	r3, #1
 800ca66:	77fb      	strb	r3, [r7, #31]
 800ca68:	e003      	b.n	800ca72 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2201      	movs	r2, #1
 800ca6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ca7a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3720      	adds	r7, #32
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b086      	sub	sp, #24
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	4613      	mov	r3, r2
 800ca90:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca92:	2300      	movs	r3, #0
 800ca94:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ca9c:	2b01      	cmp	r3, #1
 800ca9e:	d101      	bne.n	800caa4 <HAL_SPI_Transmit_DMA+0x20>
 800caa0:	2302      	movs	r3, #2
 800caa2:	e0d4      	b.n	800cc4e <HAL_SPI_Transmit_DMA+0x1ca>
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2201      	movs	r2, #1
 800caa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	2b01      	cmp	r3, #1
 800cab6:	d002      	beq.n	800cabe <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800cab8:	2302      	movs	r3, #2
 800caba:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cabc:	e0c2      	b.n	800cc44 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d002      	beq.n	800caca <HAL_SPI_Transmit_DMA+0x46>
 800cac4:	88fb      	ldrh	r3, [r7, #6]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d102      	bne.n	800cad0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800caca:	2301      	movs	r3, #1
 800cacc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cace:	e0b9      	b.n	800cc44 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	2203      	movs	r2, #3
 800cad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	88fa      	ldrh	r2, [r7, #6]
 800cae8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	88fa      	ldrh	r2, [r7, #6]
 800caee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	2200      	movs	r2, #0
 800caf4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2200      	movs	r2, #0
 800cafa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2200      	movs	r2, #0
 800cb06:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	689b      	ldr	r3, [r3, #8]
 800cb16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb1a:	d10f      	bne.n	800cb3c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cb2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	681a      	ldr	r2, [r3, #0]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb40:	4a45      	ldr	r2, [pc, #276]	; (800cc58 <HAL_SPI_Transmit_DMA+0x1d4>)
 800cb42:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb48:	4a44      	ldr	r2, [pc, #272]	; (800cc5c <HAL_SPI_Transmit_DMA+0x1d8>)
 800cb4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb50:	4a43      	ldr	r2, [pc, #268]	; (800cc60 <HAL_SPI_Transmit_DMA+0x1dc>)
 800cb52:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb58:	2200      	movs	r2, #0
 800cb5a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	685a      	ldr	r2, [r3, #4]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cb6a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	68db      	ldr	r3, [r3, #12]
 800cb70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cb74:	d82d      	bhi.n	800cbd2 <HAL_SPI_Transmit_DMA+0x14e>
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb7a:	699b      	ldr	r3, [r3, #24]
 800cb7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb80:	d127      	bne.n	800cbd2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb86:	b29b      	uxth	r3, r3
 800cb88:	f003 0301 	and.w	r3, r3, #1
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d10f      	bne.n	800cbb0 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	685a      	ldr	r2, [r3, #4]
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cb9e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cba4:	b29b      	uxth	r3, r3
 800cba6:	085b      	lsrs	r3, r3, #1
 800cba8:	b29a      	uxth	r2, r3
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cbae:	e010      	b.n	800cbd2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	685a      	ldr	r2, [r3, #4]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cbbe:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	085b      	lsrs	r3, r3, #1
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	3301      	adds	r3, #1
 800cbcc:	b29a      	uxth	r2, r3
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbda:	4619      	mov	r1, r3
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	330c      	adds	r3, #12
 800cbe2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cbe8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800cbea:	f7fc f8d5 	bl	8008d98 <HAL_DMA_Start_IT>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d008      	beq.n	800cc06 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbf8:	f043 0210 	orr.w	r2, r3, #16
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cc00:	2301      	movs	r3, #1
 800cc02:	75fb      	strb	r3, [r7, #23]

    goto error;
 800cc04:	e01e      	b.n	800cc44 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc10:	2b40      	cmp	r3, #64	; 0x40
 800cc12:	d007      	beq.n	800cc24 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc22:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	685a      	ldr	r2, [r3, #4]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f042 0220 	orr.w	r2, r2, #32
 800cc32:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	685a      	ldr	r2, [r3, #4]
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f042 0202 	orr.w	r2, r2, #2
 800cc42:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cc4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3718      	adds	r7, #24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	0800cd47 	.word	0x0800cd47
 800cc5c:	0800cca1 	.word	0x0800cca1
 800cc60:	0800cd63 	.word	0x0800cd63

0800cc64 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cc64:	b480      	push	{r7}
 800cc66:	b083      	sub	sp, #12
 800cc68:	af00      	add	r7, sp, #0
 800cc6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800cc6c:	bf00      	nop
 800cc6e:	370c      	adds	r7, #12
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b083      	sub	sp, #12
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800cc80:	bf00      	nop
 800cc82:	370c      	adds	r7, #12
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr

0800cc8c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cc8c:	b480      	push	{r7}
 800cc8e:	b083      	sub	sp, #12
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cc94:	bf00      	nop
 800cc96:	370c      	adds	r7, #12
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr

0800cca0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b086      	sub	sp, #24
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccac:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ccae:	f7f8 ff6d 	bl	8005b8c <HAL_GetTick>
 800ccb2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	f003 0320 	and.w	r3, r3, #32
 800ccbe:	2b20      	cmp	r3, #32
 800ccc0:	d03b      	beq.n	800cd3a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f022 0220 	bic.w	r2, r2, #32
 800ccd0:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	f022 0202 	bic.w	r2, r2, #2
 800cce0:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	2164      	movs	r1, #100	; 0x64
 800cce6:	6978      	ldr	r0, [r7, #20]
 800cce8:	f000 f97a 	bl	800cfe0 <SPI_EndRxTxTransaction>
 800ccec:	4603      	mov	r3, r0
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d005      	beq.n	800ccfe <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccf6:	f043 0220 	orr.w	r2, r3, #32
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d10a      	bne.n	800cd1c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd06:	2300      	movs	r3, #0
 800cd08:	60fb      	str	r3, [r7, #12]
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	60fb      	str	r3, [r7, #12]
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	689b      	ldr	r3, [r3, #8]
 800cd18:	60fb      	str	r3, [r7, #12]
 800cd1a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800cd22:	697b      	ldr	r3, [r7, #20]
 800cd24:	2201      	movs	r2, #1
 800cd26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cd2a:	697b      	ldr	r3, [r7, #20]
 800cd2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d003      	beq.n	800cd3a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cd32:	6978      	ldr	r0, [r7, #20]
 800cd34:	f7ff ffaa 	bl	800cc8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cd38:	e002      	b.n	800cd40 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800cd3a:	6978      	ldr	r0, [r7, #20]
 800cd3c:	f7ff ff92 	bl	800cc64 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cd40:	3718      	adds	r7, #24
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}

0800cd46 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b084      	sub	sp, #16
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd52:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800cd54:	68f8      	ldr	r0, [r7, #12]
 800cd56:	f7ff ff8f 	bl	800cc78 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cd5a:	bf00      	nop
 800cd5c:	3710      	adds	r7, #16
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}

0800cd62 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800cd62:	b580      	push	{r7, lr}
 800cd64:	b084      	sub	sp, #16
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd6e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	685a      	ldr	r2, [r3, #4]
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f022 0203 	bic.w	r2, r2, #3
 800cd7e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd84:	f043 0210 	orr.w	r2, r3, #16
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	2201      	movs	r2, #1
 800cd90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800cd94:	68f8      	ldr	r0, [r7, #12]
 800cd96:	f7ff ff79 	bl	800cc8c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cd9a:	bf00      	nop
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
	...

0800cda4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b088      	sub	sp, #32
 800cda8:	af00      	add	r7, sp, #0
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	603b      	str	r3, [r7, #0]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cdb4:	f7f8 feea 	bl	8005b8c <HAL_GetTick>
 800cdb8:	4602      	mov	r2, r0
 800cdba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdbc:	1a9b      	subs	r3, r3, r2
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	4413      	add	r3, r2
 800cdc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cdc4:	f7f8 fee2 	bl	8005b8c <HAL_GetTick>
 800cdc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cdca:	4b39      	ldr	r3, [pc, #228]	; (800ceb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	015b      	lsls	r3, r3, #5
 800cdd0:	0d1b      	lsrs	r3, r3, #20
 800cdd2:	69fa      	ldr	r2, [r7, #28]
 800cdd4:	fb02 f303 	mul.w	r3, r2, r3
 800cdd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cdda:	e054      	b.n	800ce86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde2:	d050      	beq.n	800ce86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cde4:	f7f8 fed2 	bl	8005b8c <HAL_GetTick>
 800cde8:	4602      	mov	r2, r0
 800cdea:	69bb      	ldr	r3, [r7, #24]
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	69fa      	ldr	r2, [r7, #28]
 800cdf0:	429a      	cmp	r2, r3
 800cdf2:	d902      	bls.n	800cdfa <SPI_WaitFlagStateUntilTimeout+0x56>
 800cdf4:	69fb      	ldr	r3, [r7, #28]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d13d      	bne.n	800ce76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	685a      	ldr	r2, [r3, #4]
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	681b      	ldr	r3, [r3, #0]
 800ce04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ce08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce12:	d111      	bne.n	800ce38 <SPI_WaitFlagStateUntilTimeout+0x94>
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce1c:	d004      	beq.n	800ce28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ce26:	d107      	bne.n	800ce38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	681a      	ldr	r2, [r3, #0]
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ce40:	d10f      	bne.n	800ce62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ce50:	601a      	str	r2, [r3, #0]
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ce60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2201      	movs	r2, #1
 800ce66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800ce72:	2303      	movs	r3, #3
 800ce74:	e017      	b.n	800cea6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	3b01      	subs	r3, #1
 800ce84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	689a      	ldr	r2, [r3, #8]
 800ce8c:	68bb      	ldr	r3, [r7, #8]
 800ce8e:	4013      	ands	r3, r2
 800ce90:	68ba      	ldr	r2, [r7, #8]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	bf0c      	ite	eq
 800ce96:	2301      	moveq	r3, #1
 800ce98:	2300      	movne	r3, #0
 800ce9a:	b2db      	uxtb	r3, r3
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	79fb      	ldrb	r3, [r7, #7]
 800cea0:	429a      	cmp	r2, r3
 800cea2:	d19b      	bne.n	800cddc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800cea4:	2300      	movs	r3, #0
}
 800cea6:	4618      	mov	r0, r3
 800cea8:	3720      	adds	r7, #32
 800ceaa:	46bd      	mov	sp, r7
 800ceac:	bd80      	pop	{r7, pc}
 800ceae:	bf00      	nop
 800ceb0:	20000190 	.word	0x20000190

0800ceb4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b08a      	sub	sp, #40	; 0x28
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	60f8      	str	r0, [r7, #12]
 800cebc:	60b9      	str	r1, [r7, #8]
 800cebe:	607a      	str	r2, [r7, #4]
 800cec0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800cec2:	2300      	movs	r3, #0
 800cec4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800cec6:	f7f8 fe61 	bl	8005b8c <HAL_GetTick>
 800ceca:	4602      	mov	r2, r0
 800cecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cece:	1a9b      	subs	r3, r3, r2
 800ced0:	683a      	ldr	r2, [r7, #0]
 800ced2:	4413      	add	r3, r2
 800ced4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800ced6:	f7f8 fe59 	bl	8005b8c <HAL_GetTick>
 800ceda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	330c      	adds	r3, #12
 800cee2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800cee4:	4b3d      	ldr	r3, [pc, #244]	; (800cfdc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800cee6:	681a      	ldr	r2, [r3, #0]
 800cee8:	4613      	mov	r3, r2
 800ceea:	009b      	lsls	r3, r3, #2
 800ceec:	4413      	add	r3, r2
 800ceee:	00da      	lsls	r2, r3, #3
 800cef0:	1ad3      	subs	r3, r2, r3
 800cef2:	0d1b      	lsrs	r3, r3, #20
 800cef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cef6:	fb02 f303 	mul.w	r3, r2, r3
 800cefa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800cefc:	e060      	b.n	800cfc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800cf04:	d107      	bne.n	800cf16 <SPI_WaitFifoStateUntilTimeout+0x62>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d104      	bne.n	800cf16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800cf0c:	69fb      	ldr	r3, [r7, #28]
 800cf0e:	781b      	ldrb	r3, [r3, #0]
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800cf14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf1c:	d050      	beq.n	800cfc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cf1e:	f7f8 fe35 	bl	8005b8c <HAL_GetTick>
 800cf22:	4602      	mov	r2, r0
 800cf24:	6a3b      	ldr	r3, [r7, #32]
 800cf26:	1ad3      	subs	r3, r2, r3
 800cf28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d902      	bls.n	800cf34 <SPI_WaitFifoStateUntilTimeout+0x80>
 800cf2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d13d      	bne.n	800cfb0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	685a      	ldr	r2, [r3, #4]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cf42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	685b      	ldr	r3, [r3, #4]
 800cf48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf4c:	d111      	bne.n	800cf72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	689b      	ldr	r3, [r3, #8]
 800cf52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cf56:	d004      	beq.n	800cf62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cf60:	d107      	bne.n	800cf72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	681a      	ldr	r2, [r3, #0]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cf70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cf7a:	d10f      	bne.n	800cf9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	681a      	ldr	r2, [r3, #0]
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cf8a:	601a      	str	r2, [r3, #0]
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	68fb      	ldr	r3, [r7, #12]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cf9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	2201      	movs	r2, #1
 800cfa0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800cfac:	2303      	movs	r3, #3
 800cfae:	e010      	b.n	800cfd2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800cfb0:	69bb      	ldr	r3, [r7, #24]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d101      	bne.n	800cfba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800cfba:	69bb      	ldr	r3, [r7, #24]
 800cfbc:	3b01      	subs	r3, #1
 800cfbe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	689a      	ldr	r2, [r3, #8]
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	4013      	ands	r3, r2
 800cfca:	687a      	ldr	r2, [r7, #4]
 800cfcc:	429a      	cmp	r2, r3
 800cfce:	d196      	bne.n	800cefe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800cfd0:	2300      	movs	r3, #0
}
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	3728      	adds	r7, #40	; 0x28
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	20000190 	.word	0x20000190

0800cfe0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	b086      	sub	sp, #24
 800cfe4:	af02      	add	r7, sp, #8
 800cfe6:	60f8      	str	r0, [r7, #12]
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	9300      	str	r3, [sp, #0]
 800cff0:	68bb      	ldr	r3, [r7, #8]
 800cff2:	2200      	movs	r2, #0
 800cff4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f7ff ff5b 	bl	800ceb4 <SPI_WaitFifoStateUntilTimeout>
 800cffe:	4603      	mov	r3, r0
 800d000:	2b00      	cmp	r3, #0
 800d002:	d007      	beq.n	800d014 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d008:	f043 0220 	orr.w	r2, r3, #32
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d010:	2303      	movs	r3, #3
 800d012:	e027      	b.n	800d064 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	2200      	movs	r2, #0
 800d01c:	2180      	movs	r1, #128	; 0x80
 800d01e:	68f8      	ldr	r0, [r7, #12]
 800d020:	f7ff fec0 	bl	800cda4 <SPI_WaitFlagStateUntilTimeout>
 800d024:	4603      	mov	r3, r0
 800d026:	2b00      	cmp	r3, #0
 800d028:	d007      	beq.n	800d03a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d02a:	68fb      	ldr	r3, [r7, #12]
 800d02c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d02e:	f043 0220 	orr.w	r2, r3, #32
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d036:	2303      	movs	r3, #3
 800d038:	e014      	b.n	800d064 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	9300      	str	r3, [sp, #0]
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	2200      	movs	r2, #0
 800d042:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d046:	68f8      	ldr	r0, [r7, #12]
 800d048:	f7ff ff34 	bl	800ceb4 <SPI_WaitFifoStateUntilTimeout>
 800d04c:	4603      	mov	r3, r0
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d007      	beq.n	800d062 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d056:	f043 0220 	orr.w	r2, r3, #32
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d05e:	2303      	movs	r3, #3
 800d060:	e000      	b.n	800d064 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d062:	2300      	movs	r3, #0
}
 800d064:	4618      	mov	r0, r3
 800d066:	3710      	adds	r7, #16
 800d068:	46bd      	mov	sp, r7
 800d06a:	bd80      	pop	{r7, pc}

0800d06c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d101      	bne.n	800d07e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d07a:	2301      	movs	r3, #1
 800d07c:	e049      	b.n	800d112 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d084:	b2db      	uxtb	r3, r3
 800d086:	2b00      	cmp	r3, #0
 800d088:	d106      	bne.n	800d098 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	2200      	movs	r2, #0
 800d08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d092:	6878      	ldr	r0, [r7, #4]
 800d094:	f7f7 fe36 	bl	8004d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2202      	movs	r2, #2
 800d09c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	3304      	adds	r3, #4
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	4610      	mov	r0, r2
 800d0ac:	f000 ff72 	bl	800df94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	2201      	movs	r2, #1
 800d0b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	2201      	movs	r2, #1
 800d0c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	2201      	movs	r2, #1
 800d0dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2201      	movs	r2, #1
 800d0e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2201      	movs	r2, #1
 800d0ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	2201      	movs	r2, #1
 800d0fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2201      	movs	r2, #1
 800d104:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	2201      	movs	r2, #1
 800d10c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
	...

0800d11c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d12a:	b2db      	uxtb	r3, r3
 800d12c:	2b01      	cmp	r3, #1
 800d12e:	d001      	beq.n	800d134 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d130:	2301      	movs	r3, #1
 800d132:	e04a      	b.n	800d1ca <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2202      	movs	r2, #2
 800d138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	68da      	ldr	r2, [r3, #12]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f042 0201 	orr.w	r2, r2, #1
 800d14a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4a21      	ldr	r2, [pc, #132]	; (800d1d8 <HAL_TIM_Base_Start_IT+0xbc>)
 800d152:	4293      	cmp	r3, r2
 800d154:	d018      	beq.n	800d188 <HAL_TIM_Base_Start_IT+0x6c>
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d15e:	d013      	beq.n	800d188 <HAL_TIM_Base_Start_IT+0x6c>
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a1d      	ldr	r2, [pc, #116]	; (800d1dc <HAL_TIM_Base_Start_IT+0xc0>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d00e      	beq.n	800d188 <HAL_TIM_Base_Start_IT+0x6c>
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	4a1c      	ldr	r2, [pc, #112]	; (800d1e0 <HAL_TIM_Base_Start_IT+0xc4>)
 800d170:	4293      	cmp	r3, r2
 800d172:	d009      	beq.n	800d188 <HAL_TIM_Base_Start_IT+0x6c>
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	4a1a      	ldr	r2, [pc, #104]	; (800d1e4 <HAL_TIM_Base_Start_IT+0xc8>)
 800d17a:	4293      	cmp	r3, r2
 800d17c:	d004      	beq.n	800d188 <HAL_TIM_Base_Start_IT+0x6c>
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	4a19      	ldr	r2, [pc, #100]	; (800d1e8 <HAL_TIM_Base_Start_IT+0xcc>)
 800d184:	4293      	cmp	r3, r2
 800d186:	d115      	bne.n	800d1b4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	689a      	ldr	r2, [r3, #8]
 800d18e:	4b17      	ldr	r3, [pc, #92]	; (800d1ec <HAL_TIM_Base_Start_IT+0xd0>)
 800d190:	4013      	ands	r3, r2
 800d192:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b06      	cmp	r3, #6
 800d198:	d015      	beq.n	800d1c6 <HAL_TIM_Base_Start_IT+0xaa>
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d1a0:	d011      	beq.n	800d1c6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	681a      	ldr	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	f042 0201 	orr.w	r2, r2, #1
 800d1b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1b2:	e008      	b.n	800d1c6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	681a      	ldr	r2, [r3, #0]
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	f042 0201 	orr.w	r2, r2, #1
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	e000      	b.n	800d1c8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d1c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d1c8:	2300      	movs	r3, #0
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3714      	adds	r7, #20
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d4:	4770      	bx	lr
 800d1d6:	bf00      	nop
 800d1d8:	40012c00 	.word	0x40012c00
 800d1dc:	40000400 	.word	0x40000400
 800d1e0:	40000800 	.word	0x40000800
 800d1e4:	40013400 	.word	0x40013400
 800d1e8:	40014000 	.word	0x40014000
 800d1ec:	00010007 	.word	0x00010007

0800d1f0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b083      	sub	sp, #12
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	68da      	ldr	r2, [r3, #12]
 800d1fe:	687b      	ldr	r3, [r7, #4]
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	f022 0201 	bic.w	r2, r2, #1
 800d206:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	6a1a      	ldr	r2, [r3, #32]
 800d20e:	f241 1311 	movw	r3, #4369	; 0x1111
 800d212:	4013      	ands	r3, r2
 800d214:	2b00      	cmp	r3, #0
 800d216:	d10f      	bne.n	800d238 <HAL_TIM_Base_Stop_IT+0x48>
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	6a1a      	ldr	r2, [r3, #32]
 800d21e:	f244 4344 	movw	r3, #17476	; 0x4444
 800d222:	4013      	ands	r3, r2
 800d224:	2b00      	cmp	r3, #0
 800d226:	d107      	bne.n	800d238 <HAL_TIM_Base_Stop_IT+0x48>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f022 0201 	bic.w	r2, r2, #1
 800d236:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2201      	movs	r2, #1
 800d23c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d240:	2300      	movs	r3, #0
}
 800d242:	4618      	mov	r0, r3
 800d244:	370c      	adds	r7, #12
 800d246:	46bd      	mov	sp, r7
 800d248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d24c:	4770      	bx	lr

0800d24e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b082      	sub	sp, #8
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d101      	bne.n	800d260 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d25c:	2301      	movs	r3, #1
 800d25e:	e049      	b.n	800d2f4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d266:	b2db      	uxtb	r3, r3
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d106      	bne.n	800d27a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2200      	movs	r2, #0
 800d270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f7f7 fc8d 	bl	8004b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2202      	movs	r2, #2
 800d27e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681a      	ldr	r2, [r3, #0]
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	3304      	adds	r3, #4
 800d28a:	4619      	mov	r1, r3
 800d28c:	4610      	mov	r0, r2
 800d28e:	f000 fe81 	bl	800df94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2201      	movs	r2, #1
 800d296:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2201      	movs	r2, #1
 800d2ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2201      	movs	r2, #1
 800d2c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	2201      	movs	r2, #1
 800d2d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2201      	movs	r2, #1
 800d2de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2201      	movs	r2, #1
 800d2e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	2201      	movs	r2, #1
 800d2ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d2f2:	2300      	movs	r3, #0
}
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	3708      	adds	r7, #8
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}

0800d2fc <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d306:	2300      	movs	r3, #0
 800d308:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d30a:	683b      	ldr	r3, [r7, #0]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d109      	bne.n	800d324 <HAL_TIM_PWM_Start_IT+0x28>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b01      	cmp	r3, #1
 800d31a:	bf14      	ite	ne
 800d31c:	2301      	movne	r3, #1
 800d31e:	2300      	moveq	r3, #0
 800d320:	b2db      	uxtb	r3, r3
 800d322:	e03c      	b.n	800d39e <HAL_TIM_PWM_Start_IT+0xa2>
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	2b04      	cmp	r3, #4
 800d328:	d109      	bne.n	800d33e <HAL_TIM_PWM_Start_IT+0x42>
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d330:	b2db      	uxtb	r3, r3
 800d332:	2b01      	cmp	r3, #1
 800d334:	bf14      	ite	ne
 800d336:	2301      	movne	r3, #1
 800d338:	2300      	moveq	r3, #0
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	e02f      	b.n	800d39e <HAL_TIM_PWM_Start_IT+0xa2>
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	2b08      	cmp	r3, #8
 800d342:	d109      	bne.n	800d358 <HAL_TIM_PWM_Start_IT+0x5c>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	2b01      	cmp	r3, #1
 800d34e:	bf14      	ite	ne
 800d350:	2301      	movne	r3, #1
 800d352:	2300      	moveq	r3, #0
 800d354:	b2db      	uxtb	r3, r3
 800d356:	e022      	b.n	800d39e <HAL_TIM_PWM_Start_IT+0xa2>
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	2b0c      	cmp	r3, #12
 800d35c:	d109      	bne.n	800d372 <HAL_TIM_PWM_Start_IT+0x76>
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d364:	b2db      	uxtb	r3, r3
 800d366:	2b01      	cmp	r3, #1
 800d368:	bf14      	ite	ne
 800d36a:	2301      	movne	r3, #1
 800d36c:	2300      	moveq	r3, #0
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	e015      	b.n	800d39e <HAL_TIM_PWM_Start_IT+0xa2>
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b10      	cmp	r3, #16
 800d376:	d109      	bne.n	800d38c <HAL_TIM_PWM_Start_IT+0x90>
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d37e:	b2db      	uxtb	r3, r3
 800d380:	2b01      	cmp	r3, #1
 800d382:	bf14      	ite	ne
 800d384:	2301      	movne	r3, #1
 800d386:	2300      	moveq	r3, #0
 800d388:	b2db      	uxtb	r3, r3
 800d38a:	e008      	b.n	800d39e <HAL_TIM_PWM_Start_IT+0xa2>
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d392:	b2db      	uxtb	r3, r3
 800d394:	2b01      	cmp	r3, #1
 800d396:	bf14      	ite	ne
 800d398:	2301      	movne	r3, #1
 800d39a:	2300      	moveq	r3, #0
 800d39c:	b2db      	uxtb	r3, r3
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d001      	beq.n	800d3a6 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800d3a2:	2301      	movs	r3, #1
 800d3a4:	e0e2      	b.n	800d56c <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d104      	bne.n	800d3b6 <HAL_TIM_PWM_Start_IT+0xba>
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	2202      	movs	r2, #2
 800d3b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d3b4:	e023      	b.n	800d3fe <HAL_TIM_PWM_Start_IT+0x102>
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b04      	cmp	r3, #4
 800d3ba:	d104      	bne.n	800d3c6 <HAL_TIM_PWM_Start_IT+0xca>
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2202      	movs	r2, #2
 800d3c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d3c4:	e01b      	b.n	800d3fe <HAL_TIM_PWM_Start_IT+0x102>
 800d3c6:	683b      	ldr	r3, [r7, #0]
 800d3c8:	2b08      	cmp	r3, #8
 800d3ca:	d104      	bne.n	800d3d6 <HAL_TIM_PWM_Start_IT+0xda>
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2202      	movs	r2, #2
 800d3d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d3d4:	e013      	b.n	800d3fe <HAL_TIM_PWM_Start_IT+0x102>
 800d3d6:	683b      	ldr	r3, [r7, #0]
 800d3d8:	2b0c      	cmp	r3, #12
 800d3da:	d104      	bne.n	800d3e6 <HAL_TIM_PWM_Start_IT+0xea>
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2202      	movs	r2, #2
 800d3e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d3e4:	e00b      	b.n	800d3fe <HAL_TIM_PWM_Start_IT+0x102>
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	2b10      	cmp	r3, #16
 800d3ea:	d104      	bne.n	800d3f6 <HAL_TIM_PWM_Start_IT+0xfa>
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d3f4:	e003      	b.n	800d3fe <HAL_TIM_PWM_Start_IT+0x102>
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	2202      	movs	r2, #2
 800d3fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	2b0c      	cmp	r3, #12
 800d402:	d841      	bhi.n	800d488 <HAL_TIM_PWM_Start_IT+0x18c>
 800d404:	a201      	add	r2, pc, #4	; (adr r2, 800d40c <HAL_TIM_PWM_Start_IT+0x110>)
 800d406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d40a:	bf00      	nop
 800d40c:	0800d441 	.word	0x0800d441
 800d410:	0800d489 	.word	0x0800d489
 800d414:	0800d489 	.word	0x0800d489
 800d418:	0800d489 	.word	0x0800d489
 800d41c:	0800d453 	.word	0x0800d453
 800d420:	0800d489 	.word	0x0800d489
 800d424:	0800d489 	.word	0x0800d489
 800d428:	0800d489 	.word	0x0800d489
 800d42c:	0800d465 	.word	0x0800d465
 800d430:	0800d489 	.word	0x0800d489
 800d434:	0800d489 	.word	0x0800d489
 800d438:	0800d489 	.word	0x0800d489
 800d43c:	0800d477 	.word	0x0800d477
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	68da      	ldr	r2, [r3, #12]
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	f042 0202 	orr.w	r2, r2, #2
 800d44e:	60da      	str	r2, [r3, #12]
      break;
 800d450:	e01d      	b.n	800d48e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	68da      	ldr	r2, [r3, #12]
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f042 0204 	orr.w	r2, r2, #4
 800d460:	60da      	str	r2, [r3, #12]
      break;
 800d462:	e014      	b.n	800d48e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	68da      	ldr	r2, [r3, #12]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	f042 0208 	orr.w	r2, r2, #8
 800d472:	60da      	str	r2, [r3, #12]
      break;
 800d474:	e00b      	b.n	800d48e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	68da      	ldr	r2, [r3, #12]
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	f042 0210 	orr.w	r2, r2, #16
 800d484:	60da      	str	r2, [r3, #12]
      break;
 800d486:	e002      	b.n	800d48e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800d488:	2301      	movs	r3, #1
 800d48a:	73fb      	strb	r3, [r7, #15]
      break;
 800d48c:	bf00      	nop
  }

  if (status == HAL_OK)
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d16a      	bne.n	800d56a <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	681b      	ldr	r3, [r3, #0]
 800d498:	2201      	movs	r2, #1
 800d49a:	6839      	ldr	r1, [r7, #0]
 800d49c:	4618      	mov	r0, r3
 800d49e:	f001 f90b 	bl	800e6b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	4a33      	ldr	r2, [pc, #204]	; (800d574 <HAL_TIM_PWM_Start_IT+0x278>)
 800d4a8:	4293      	cmp	r3, r2
 800d4aa:	d013      	beq.n	800d4d4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	4a31      	ldr	r2, [pc, #196]	; (800d578 <HAL_TIM_PWM_Start_IT+0x27c>)
 800d4b2:	4293      	cmp	r3, r2
 800d4b4:	d00e      	beq.n	800d4d4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	4a30      	ldr	r2, [pc, #192]	; (800d57c <HAL_TIM_PWM_Start_IT+0x280>)
 800d4bc:	4293      	cmp	r3, r2
 800d4be:	d009      	beq.n	800d4d4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	4a2e      	ldr	r2, [pc, #184]	; (800d580 <HAL_TIM_PWM_Start_IT+0x284>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d004      	beq.n	800d4d4 <HAL_TIM_PWM_Start_IT+0x1d8>
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	4a2d      	ldr	r2, [pc, #180]	; (800d584 <HAL_TIM_PWM_Start_IT+0x288>)
 800d4d0:	4293      	cmp	r3, r2
 800d4d2:	d101      	bne.n	800d4d8 <HAL_TIM_PWM_Start_IT+0x1dc>
 800d4d4:	2301      	movs	r3, #1
 800d4d6:	e000      	b.n	800d4da <HAL_TIM_PWM_Start_IT+0x1de>
 800d4d8:	2300      	movs	r3, #0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d007      	beq.n	800d4ee <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d4ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a20      	ldr	r2, [pc, #128]	; (800d574 <HAL_TIM_PWM_Start_IT+0x278>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d018      	beq.n	800d52a <HAL_TIM_PWM_Start_IT+0x22e>
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d500:	d013      	beq.n	800d52a <HAL_TIM_PWM_Start_IT+0x22e>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	4a20      	ldr	r2, [pc, #128]	; (800d588 <HAL_TIM_PWM_Start_IT+0x28c>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d00e      	beq.n	800d52a <HAL_TIM_PWM_Start_IT+0x22e>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	4a1e      	ldr	r2, [pc, #120]	; (800d58c <HAL_TIM_PWM_Start_IT+0x290>)
 800d512:	4293      	cmp	r3, r2
 800d514:	d009      	beq.n	800d52a <HAL_TIM_PWM_Start_IT+0x22e>
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	4a17      	ldr	r2, [pc, #92]	; (800d578 <HAL_TIM_PWM_Start_IT+0x27c>)
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d004      	beq.n	800d52a <HAL_TIM_PWM_Start_IT+0x22e>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	4a15      	ldr	r2, [pc, #84]	; (800d57c <HAL_TIM_PWM_Start_IT+0x280>)
 800d526:	4293      	cmp	r3, r2
 800d528:	d115      	bne.n	800d556 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	689a      	ldr	r2, [r3, #8]
 800d530:	4b17      	ldr	r3, [pc, #92]	; (800d590 <HAL_TIM_PWM_Start_IT+0x294>)
 800d532:	4013      	ands	r3, r2
 800d534:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2b06      	cmp	r3, #6
 800d53a:	d015      	beq.n	800d568 <HAL_TIM_PWM_Start_IT+0x26c>
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d542:	d011      	beq.n	800d568 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	681a      	ldr	r2, [r3, #0]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f042 0201 	orr.w	r2, r2, #1
 800d552:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d554:	e008      	b.n	800d568 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	681a      	ldr	r2, [r3, #0]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f042 0201 	orr.w	r2, r2, #1
 800d564:	601a      	str	r2, [r3, #0]
 800d566:	e000      	b.n	800d56a <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d568:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800d56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	40012c00 	.word	0x40012c00
 800d578:	40013400 	.word	0x40013400
 800d57c:	40014000 	.word	0x40014000
 800d580:	40014400 	.word	0x40014400
 800d584:	40014800 	.word	0x40014800
 800d588:	40000400 	.word	0x40000400
 800d58c:	40000800 	.word	0x40000800
 800d590:	00010007 	.word	0x00010007

0800d594 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d594:	b580      	push	{r7, lr}
 800d596:	b084      	sub	sp, #16
 800d598:	af00      	add	r7, sp, #0
 800d59a:	6078      	str	r0, [r7, #4]
 800d59c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800d5a2:	683b      	ldr	r3, [r7, #0]
 800d5a4:	2b0c      	cmp	r3, #12
 800d5a6:	d841      	bhi.n	800d62c <HAL_TIM_PWM_Stop_IT+0x98>
 800d5a8:	a201      	add	r2, pc, #4	; (adr r2, 800d5b0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 800d5aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ae:	bf00      	nop
 800d5b0:	0800d5e5 	.word	0x0800d5e5
 800d5b4:	0800d62d 	.word	0x0800d62d
 800d5b8:	0800d62d 	.word	0x0800d62d
 800d5bc:	0800d62d 	.word	0x0800d62d
 800d5c0:	0800d5f7 	.word	0x0800d5f7
 800d5c4:	0800d62d 	.word	0x0800d62d
 800d5c8:	0800d62d 	.word	0x0800d62d
 800d5cc:	0800d62d 	.word	0x0800d62d
 800d5d0:	0800d609 	.word	0x0800d609
 800d5d4:	0800d62d 	.word	0x0800d62d
 800d5d8:	0800d62d 	.word	0x0800d62d
 800d5dc:	0800d62d 	.word	0x0800d62d
 800d5e0:	0800d61b 	.word	0x0800d61b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	68da      	ldr	r2, [r3, #12]
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	f022 0202 	bic.w	r2, r2, #2
 800d5f2:	60da      	str	r2, [r3, #12]
      break;
 800d5f4:	e01d      	b.n	800d632 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	68da      	ldr	r2, [r3, #12]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f022 0204 	bic.w	r2, r2, #4
 800d604:	60da      	str	r2, [r3, #12]
      break;
 800d606:	e014      	b.n	800d632 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	68da      	ldr	r2, [r3, #12]
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	f022 0208 	bic.w	r2, r2, #8
 800d616:	60da      	str	r2, [r3, #12]
      break;
 800d618:	e00b      	b.n	800d632 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	681b      	ldr	r3, [r3, #0]
 800d61e:	68da      	ldr	r2, [r3, #12]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	f022 0210 	bic.w	r2, r2, #16
 800d628:	60da      	str	r2, [r3, #12]
      break;
 800d62a:	e002      	b.n	800d632 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800d62c:	2301      	movs	r3, #1
 800d62e:	73fb      	strb	r3, [r7, #15]
      break;
 800d630:	bf00      	nop
  }

  if (status == HAL_OK)
 800d632:	7bfb      	ldrb	r3, [r7, #15]
 800d634:	2b00      	cmp	r3, #0
 800d636:	f040 8081 	bne.w	800d73c <HAL_TIM_PWM_Stop_IT+0x1a8>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	2200      	movs	r2, #0
 800d640:	6839      	ldr	r1, [r7, #0]
 800d642:	4618      	mov	r0, r3
 800d644:	f001 f838 	bl	800e6b8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	4a3e      	ldr	r2, [pc, #248]	; (800d748 <HAL_TIM_PWM_Stop_IT+0x1b4>)
 800d64e:	4293      	cmp	r3, r2
 800d650:	d013      	beq.n	800d67a <HAL_TIM_PWM_Stop_IT+0xe6>
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	4a3d      	ldr	r2, [pc, #244]	; (800d74c <HAL_TIM_PWM_Stop_IT+0x1b8>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d00e      	beq.n	800d67a <HAL_TIM_PWM_Stop_IT+0xe6>
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	4a3b      	ldr	r2, [pc, #236]	; (800d750 <HAL_TIM_PWM_Stop_IT+0x1bc>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d009      	beq.n	800d67a <HAL_TIM_PWM_Stop_IT+0xe6>
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	681b      	ldr	r3, [r3, #0]
 800d66a:	4a3a      	ldr	r2, [pc, #232]	; (800d754 <HAL_TIM_PWM_Stop_IT+0x1c0>)
 800d66c:	4293      	cmp	r3, r2
 800d66e:	d004      	beq.n	800d67a <HAL_TIM_PWM_Stop_IT+0xe6>
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	4a38      	ldr	r2, [pc, #224]	; (800d758 <HAL_TIM_PWM_Stop_IT+0x1c4>)
 800d676:	4293      	cmp	r3, r2
 800d678:	d101      	bne.n	800d67e <HAL_TIM_PWM_Stop_IT+0xea>
 800d67a:	2301      	movs	r3, #1
 800d67c:	e000      	b.n	800d680 <HAL_TIM_PWM_Stop_IT+0xec>
 800d67e:	2300      	movs	r3, #0
 800d680:	2b00      	cmp	r3, #0
 800d682:	d017      	beq.n	800d6b4 <HAL_TIM_PWM_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	6a1a      	ldr	r2, [r3, #32]
 800d68a:	f241 1311 	movw	r3, #4369	; 0x1111
 800d68e:	4013      	ands	r3, r2
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10f      	bne.n	800d6b4 <HAL_TIM_PWM_Stop_IT+0x120>
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	6a1a      	ldr	r2, [r3, #32]
 800d69a:	f244 4344 	movw	r3, #17476	; 0x4444
 800d69e:	4013      	ands	r3, r2
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d107      	bne.n	800d6b4 <HAL_TIM_PWM_Stop_IT+0x120>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	681b      	ldr	r3, [r3, #0]
 800d6ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800d6b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	6a1a      	ldr	r2, [r3, #32]
 800d6ba:	f241 1311 	movw	r3, #4369	; 0x1111
 800d6be:	4013      	ands	r3, r2
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d10f      	bne.n	800d6e4 <HAL_TIM_PWM_Stop_IT+0x150>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	6a1a      	ldr	r2, [r3, #32]
 800d6ca:	f244 4344 	movw	r3, #17476	; 0x4444
 800d6ce:	4013      	ands	r3, r2
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d107      	bne.n	800d6e4 <HAL_TIM_PWM_Stop_IT+0x150>
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	681a      	ldr	r2, [r3, #0]
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f022 0201 	bic.w	r2, r2, #1
 800d6e2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800d6e4:	683b      	ldr	r3, [r7, #0]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d104      	bne.n	800d6f4 <HAL_TIM_PWM_Stop_IT+0x160>
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	2201      	movs	r2, #1
 800d6ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d6f2:	e023      	b.n	800d73c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	2b04      	cmp	r3, #4
 800d6f8:	d104      	bne.n	800d704 <HAL_TIM_PWM_Stop_IT+0x170>
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d702:	e01b      	b.n	800d73c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d704:	683b      	ldr	r3, [r7, #0]
 800d706:	2b08      	cmp	r3, #8
 800d708:	d104      	bne.n	800d714 <HAL_TIM_PWM_Stop_IT+0x180>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2201      	movs	r2, #1
 800d70e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d712:	e013      	b.n	800d73c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	2b0c      	cmp	r3, #12
 800d718:	d104      	bne.n	800d724 <HAL_TIM_PWM_Stop_IT+0x190>
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2201      	movs	r2, #1
 800d71e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d722:	e00b      	b.n	800d73c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d724:	683b      	ldr	r3, [r7, #0]
 800d726:	2b10      	cmp	r3, #16
 800d728:	d104      	bne.n	800d734 <HAL_TIM_PWM_Stop_IT+0x1a0>
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2201      	movs	r2, #1
 800d72e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d732:	e003      	b.n	800d73c <HAL_TIM_PWM_Stop_IT+0x1a8>
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	2201      	movs	r2, #1
 800d738:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800d73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d73e:	4618      	mov	r0, r3
 800d740:	3710      	adds	r7, #16
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	40012c00 	.word	0x40012c00
 800d74c:	40013400 	.word	0x40013400
 800d750:	40014000 	.word	0x40014000
 800d754:	40014400 	.word	0x40014400
 800d758:	40014800 	.word	0x40014800

0800d75c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b082      	sub	sp, #8
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
 800d764:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d101      	bne.n	800d770 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	e041      	b.n	800d7f4 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d776:	b2db      	uxtb	r3, r3
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d106      	bne.n	800d78a <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	2200      	movs	r2, #0
 800d780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f7f7 fb1b 	bl	8004dc0 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	2202      	movs	r2, #2
 800d78e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681a      	ldr	r2, [r3, #0]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	3304      	adds	r3, #4
 800d79a:	4619      	mov	r1, r3
 800d79c:	4610      	mov	r0, r2
 800d79e:	f000 fbf9 	bl	800df94 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	681a      	ldr	r2, [r3, #0]
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	f022 0208 	bic.w	r2, r2, #8
 800d7b0:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	681b      	ldr	r3, [r3, #0]
 800d7b6:	6819      	ldr	r1, [r3, #0]
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	683a      	ldr	r2, [r7, #0]
 800d7be:	430a      	orrs	r2, r1
 800d7c0:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	2201      	movs	r2, #1
 800d7c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2201      	movs	r2, #1
 800d7ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2201      	movs	r2, #1
 800d7de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2201      	movs	r2, #1
 800d7e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2201      	movs	r2, #1
 800d7ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d7f2:	2300      	movs	r3, #0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b086      	sub	sp, #24
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d101      	bne.n	800d810 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800d80c:	2301      	movs	r3, #1
 800d80e:	e097      	b.n	800d940 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d816:	b2db      	uxtb	r3, r3
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d106      	bne.n	800d82a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f7f7 fa07 	bl	8004c38 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2202      	movs	r2, #2
 800d82e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	689b      	ldr	r3, [r3, #8]
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	6812      	ldr	r2, [r2, #0]
 800d83c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800d840:	f023 0307 	bic.w	r3, r3, #7
 800d844:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	3304      	adds	r3, #4
 800d84e:	4619      	mov	r1, r3
 800d850:	4610      	mov	r0, r2
 800d852:	f000 fb9f 	bl	800df94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	699b      	ldr	r3, [r3, #24]
 800d864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	6a1b      	ldr	r3, [r3, #32]
 800d86c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	697a      	ldr	r2, [r7, #20]
 800d874:	4313      	orrs	r3, r2
 800d876:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800d878:	693b      	ldr	r3, [r7, #16]
 800d87a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d87e:	f023 0303 	bic.w	r3, r3, #3
 800d882:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	689a      	ldr	r2, [r3, #8]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	699b      	ldr	r3, [r3, #24]
 800d88c:	021b      	lsls	r3, r3, #8
 800d88e:	4313      	orrs	r3, r2
 800d890:	693a      	ldr	r2, [r7, #16]
 800d892:	4313      	orrs	r3, r2
 800d894:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800d89c:	f023 030c 	bic.w	r3, r3, #12
 800d8a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800d8a2:	693b      	ldr	r3, [r7, #16]
 800d8a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800d8a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d8ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800d8ae:	683b      	ldr	r3, [r7, #0]
 800d8b0:	68da      	ldr	r2, [r3, #12]
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	69db      	ldr	r3, [r3, #28]
 800d8b6:	021b      	lsls	r3, r3, #8
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	693a      	ldr	r2, [r7, #16]
 800d8bc:	4313      	orrs	r3, r2
 800d8be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	691b      	ldr	r3, [r3, #16]
 800d8c4:	011a      	lsls	r2, r3, #4
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	6a1b      	ldr	r3, [r3, #32]
 800d8ca:	031b      	lsls	r3, r3, #12
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	693a      	ldr	r2, [r7, #16]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800d8da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800d8e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800d8e4:	683b      	ldr	r3, [r7, #0]
 800d8e6:	685a      	ldr	r2, [r3, #4]
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	695b      	ldr	r3, [r3, #20]
 800d8ec:	011b      	lsls	r3, r3, #4
 800d8ee:	4313      	orrs	r3, r2
 800d8f0:	68fa      	ldr	r2, [r7, #12]
 800d8f2:	4313      	orrs	r3, r2
 800d8f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	697a      	ldr	r2, [r7, #20]
 800d8fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	693a      	ldr	r2, [r7, #16]
 800d904:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	68fa      	ldr	r2, [r7, #12]
 800d90c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2201      	movs	r2, #1
 800d912:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2201      	movs	r2, #1
 800d91a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	2201      	movs	r2, #1
 800d922:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2201      	movs	r2, #1
 800d92a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2201      	movs	r2, #1
 800d932:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	2201      	movs	r2, #1
 800d93a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d93e:	2300      	movs	r3, #0
}
 800d940:	4618      	mov	r0, r3
 800d942:	3718      	adds	r7, #24
 800d944:	46bd      	mov	sp, r7
 800d946:	bd80      	pop	{r7, pc}

0800d948 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d958:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d960:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d968:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d970:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d110      	bne.n	800d99a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d978:	7bfb      	ldrb	r3, [r7, #15]
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	d102      	bne.n	800d984 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800d97e:	7b7b      	ldrb	r3, [r7, #13]
 800d980:	2b01      	cmp	r3, #1
 800d982:	d001      	beq.n	800d988 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800d984:	2301      	movs	r3, #1
 800d986:	e089      	b.n	800da9c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	2202      	movs	r2, #2
 800d98c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2202      	movs	r2, #2
 800d994:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d998:	e031      	b.n	800d9fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	2b04      	cmp	r3, #4
 800d99e:	d110      	bne.n	800d9c2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9a0:	7bbb      	ldrb	r3, [r7, #14]
 800d9a2:	2b01      	cmp	r3, #1
 800d9a4:	d102      	bne.n	800d9ac <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d9a6:	7b3b      	ldrb	r3, [r7, #12]
 800d9a8:	2b01      	cmp	r3, #1
 800d9aa:	d001      	beq.n	800d9b0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e075      	b.n	800da9c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	2202      	movs	r2, #2
 800d9b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	2202      	movs	r2, #2
 800d9bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d9c0:	e01d      	b.n	800d9fe <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d108      	bne.n	800d9da <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9c8:	7bbb      	ldrb	r3, [r7, #14]
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d105      	bne.n	800d9da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800d9ce:	7b7b      	ldrb	r3, [r7, #13]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d102      	bne.n	800d9da <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800d9d4:	7b3b      	ldrb	r3, [r7, #12]
 800d9d6:	2b01      	cmp	r3, #1
 800d9d8:	d001      	beq.n	800d9de <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800d9da:	2301      	movs	r3, #1
 800d9dc:	e05e      	b.n	800da9c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	2202      	movs	r2, #2
 800d9e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2202      	movs	r2, #2
 800d9ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	2202      	movs	r2, #2
 800d9f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	2202      	movs	r2, #2
 800d9fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d003      	beq.n	800da0c <HAL_TIM_Encoder_Start_IT+0xc4>
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	2b04      	cmp	r3, #4
 800da08:	d010      	beq.n	800da2c <HAL_TIM_Encoder_Start_IT+0xe4>
 800da0a:	e01f      	b.n	800da4c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2201      	movs	r2, #1
 800da12:	2100      	movs	r1, #0
 800da14:	4618      	mov	r0, r3
 800da16:	f000 fe4f 	bl	800e6b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	68da      	ldr	r2, [r3, #12]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	f042 0202 	orr.w	r2, r2, #2
 800da28:	60da      	str	r2, [r3, #12]
      break;
 800da2a:	e02e      	b.n	800da8a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	2201      	movs	r2, #1
 800da32:	2104      	movs	r1, #4
 800da34:	4618      	mov	r0, r3
 800da36:	f000 fe3f 	bl	800e6b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	68da      	ldr	r2, [r3, #12]
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	f042 0204 	orr.w	r2, r2, #4
 800da48:	60da      	str	r2, [r3, #12]
      break;
 800da4a:	e01e      	b.n	800da8a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	2201      	movs	r2, #1
 800da52:	2100      	movs	r1, #0
 800da54:	4618      	mov	r0, r3
 800da56:	f000 fe2f 	bl	800e6b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	2201      	movs	r2, #1
 800da60:	2104      	movs	r1, #4
 800da62:	4618      	mov	r0, r3
 800da64:	f000 fe28 	bl	800e6b8 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	68da      	ldr	r2, [r3, #12]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f042 0202 	orr.w	r2, r2, #2
 800da76:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	68da      	ldr	r2, [r3, #12]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	f042 0204 	orr.w	r2, r2, #4
 800da86:	60da      	str	r2, [r3, #12]
      break;
 800da88:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f042 0201 	orr.w	r2, r2, #1
 800da98:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	68db      	ldr	r3, [r3, #12]
 800dab2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	691b      	ldr	r3, [r3, #16]
 800daba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800dabc:	68bb      	ldr	r3, [r7, #8]
 800dabe:	f003 0302 	and.w	r3, r3, #2
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d020      	beq.n	800db08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	f003 0302 	and.w	r3, r3, #2
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d01b      	beq.n	800db08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	f06f 0202 	mvn.w	r2, #2
 800dad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2201      	movs	r2, #1
 800dade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	699b      	ldr	r3, [r3, #24]
 800dae6:	f003 0303 	and.w	r3, r3, #3
 800daea:	2b00      	cmp	r3, #0
 800daec:	d003      	beq.n	800daf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f7f5 f814 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 800daf4:	e005      	b.n	800db02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 fa38 	bl	800df6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7f5 f8a5 	bl	8002c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	f003 0304 	and.w	r3, r3, #4
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d020      	beq.n	800db54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	f003 0304 	and.w	r3, r3, #4
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d01b      	beq.n	800db54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	f06f 0204 	mvn.w	r2, #4
 800db24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	2202      	movs	r2, #2
 800db2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	699b      	ldr	r3, [r3, #24]
 800db32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800db36:	2b00      	cmp	r3, #0
 800db38:	d003      	beq.n	800db42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f7f4 ffee 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 800db40:	e005      	b.n	800db4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 fa12 	bl	800df6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db48:	6878      	ldr	r0, [r7, #4]
 800db4a:	f7f5 f87f 	bl	8002c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2200      	movs	r2, #0
 800db52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800db54:	68bb      	ldr	r3, [r7, #8]
 800db56:	f003 0308 	and.w	r3, r3, #8
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d020      	beq.n	800dba0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	f003 0308 	and.w	r3, r3, #8
 800db64:	2b00      	cmp	r3, #0
 800db66:	d01b      	beq.n	800dba0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f06f 0208 	mvn.w	r2, #8
 800db70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2204      	movs	r2, #4
 800db76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	69db      	ldr	r3, [r3, #28]
 800db7e:	f003 0303 	and.w	r3, r3, #3
 800db82:	2b00      	cmp	r3, #0
 800db84:	d003      	beq.n	800db8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f7f4 ffc8 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 800db8c:	e005      	b.n	800db9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800db8e:	6878      	ldr	r0, [r7, #4]
 800db90:	f000 f9ec 	bl	800df6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800db94:	6878      	ldr	r0, [r7, #4]
 800db96:	f7f5 f859 	bl	8002c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800dba0:	68bb      	ldr	r3, [r7, #8]
 800dba2:	f003 0310 	and.w	r3, r3, #16
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d020      	beq.n	800dbec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	f003 0310 	and.w	r3, r3, #16
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d01b      	beq.n	800dbec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f06f 0210 	mvn.w	r2, #16
 800dbbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	2208      	movs	r2, #8
 800dbc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	681b      	ldr	r3, [r3, #0]
 800dbc8:	69db      	ldr	r3, [r3, #28]
 800dbca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d003      	beq.n	800dbda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f7f4 ffa2 	bl	8002b1c <HAL_TIM_IC_CaptureCallback>
 800dbd8:	e005      	b.n	800dbe6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	f000 f9c6 	bl	800df6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f7f5 f833 	bl	8002c4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	2200      	movs	r2, #0
 800dbea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	f003 0301 	and.w	r3, r3, #1
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d00c      	beq.n	800dc10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	f003 0301 	and.w	r3, r3, #1
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d007      	beq.n	800dc10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	f06f 0201 	mvn.w	r2, #1
 800dc08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f7f5 f86c 	bl	8002ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d104      	bne.n	800dc24 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d00c      	beq.n	800dc3e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d007      	beq.n	800dc3e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800dc36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f000 ff83 	bl	800eb44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d00c      	beq.n	800dc62 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d007      	beq.n	800dc62 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800dc5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f000 ff7b 	bl	800eb58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d00c      	beq.n	800dc86 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	d007      	beq.n	800dc86 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800dc7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 f97d 	bl	800df80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800dc86:	68bb      	ldr	r3, [r7, #8]
 800dc88:	f003 0320 	and.w	r3, r3, #32
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d00c      	beq.n	800dcaa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	f003 0320 	and.w	r3, r3, #32
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d007      	beq.n	800dcaa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	f06f 0220 	mvn.w	r2, #32
 800dca2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 ff43 	bl	800eb30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800dcaa:	68bb      	ldr	r3, [r7, #8]
 800dcac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d00c      	beq.n	800dcce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d007      	beq.n	800dcce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800dcc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 ff4f 	bl	800eb6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800dcce:	68bb      	ldr	r3, [r7, #8]
 800dcd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d00c      	beq.n	800dcf2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d007      	beq.n	800dcf2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800dcea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800dcec:	6878      	ldr	r0, [r7, #4]
 800dcee:	f000 ff47 	bl	800eb80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00c      	beq.n	800dd16 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d007      	beq.n	800dd16 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800dd0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 ff3f 	bl	800eb94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d00c      	beq.n	800dd3a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d007      	beq.n	800dd3a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800dd32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800dd34:	6878      	ldr	r0, [r7, #4]
 800dd36:	f000 ff37 	bl	800eba8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800dd3a:	bf00      	nop
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
	...

0800dd44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b086      	sub	sp, #24
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	60f8      	str	r0, [r7, #12]
 800dd4c:	60b9      	str	r1, [r7, #8]
 800dd4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d101      	bne.n	800dd62 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800dd5e:	2302      	movs	r3, #2
 800dd60:	e0ff      	b.n	800df62 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	2201      	movs	r2, #1
 800dd66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2b14      	cmp	r3, #20
 800dd6e:	f200 80f0 	bhi.w	800df52 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800dd72:	a201      	add	r2, pc, #4	; (adr r2, 800dd78 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800dd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd78:	0800ddcd 	.word	0x0800ddcd
 800dd7c:	0800df53 	.word	0x0800df53
 800dd80:	0800df53 	.word	0x0800df53
 800dd84:	0800df53 	.word	0x0800df53
 800dd88:	0800de0d 	.word	0x0800de0d
 800dd8c:	0800df53 	.word	0x0800df53
 800dd90:	0800df53 	.word	0x0800df53
 800dd94:	0800df53 	.word	0x0800df53
 800dd98:	0800de4f 	.word	0x0800de4f
 800dd9c:	0800df53 	.word	0x0800df53
 800dda0:	0800df53 	.word	0x0800df53
 800dda4:	0800df53 	.word	0x0800df53
 800dda8:	0800de8f 	.word	0x0800de8f
 800ddac:	0800df53 	.word	0x0800df53
 800ddb0:	0800df53 	.word	0x0800df53
 800ddb4:	0800df53 	.word	0x0800df53
 800ddb8:	0800ded1 	.word	0x0800ded1
 800ddbc:	0800df53 	.word	0x0800df53
 800ddc0:	0800df53 	.word	0x0800df53
 800ddc4:	0800df53 	.word	0x0800df53
 800ddc8:	0800df11 	.word	0x0800df11
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	68b9      	ldr	r1, [r7, #8]
 800ddd2:	4618      	mov	r0, r3
 800ddd4:	f000 f97a 	bl	800e0cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	699a      	ldr	r2, [r3, #24]
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	f042 0208 	orr.w	r2, r2, #8
 800dde6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	699a      	ldr	r2, [r3, #24]
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f022 0204 	bic.w	r2, r2, #4
 800ddf6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	681b      	ldr	r3, [r3, #0]
 800ddfc:	6999      	ldr	r1, [r3, #24]
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	691a      	ldr	r2, [r3, #16]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	430a      	orrs	r2, r1
 800de08:	619a      	str	r2, [r3, #24]
      break;
 800de0a:	e0a5      	b.n	800df58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	68b9      	ldr	r1, [r7, #8]
 800de12:	4618      	mov	r0, r3
 800de14:	f000 f9ea 	bl	800e1ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	699a      	ldr	r2, [r3, #24]
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800de26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	699a      	ldr	r2, [r3, #24]
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800de36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800de38:	68fb      	ldr	r3, [r7, #12]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	6999      	ldr	r1, [r3, #24]
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	691b      	ldr	r3, [r3, #16]
 800de42:	021a      	lsls	r2, r3, #8
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	430a      	orrs	r2, r1
 800de4a:	619a      	str	r2, [r3, #24]
      break;
 800de4c:	e084      	b.n	800df58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	68b9      	ldr	r1, [r7, #8]
 800de54:	4618      	mov	r0, r3
 800de56:	f000 fa53 	bl	800e300 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	69da      	ldr	r2, [r3, #28]
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f042 0208 	orr.w	r2, r2, #8
 800de68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800de6a:	68fb      	ldr	r3, [r7, #12]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	69da      	ldr	r2, [r3, #28]
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	f022 0204 	bic.w	r2, r2, #4
 800de78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	69d9      	ldr	r1, [r3, #28]
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	691a      	ldr	r2, [r3, #16]
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	430a      	orrs	r2, r1
 800de8a:	61da      	str	r2, [r3, #28]
      break;
 800de8c:	e064      	b.n	800df58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	68b9      	ldr	r1, [r7, #8]
 800de94:	4618      	mov	r0, r3
 800de96:	f000 fabb 	bl	800e410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	69da      	ldr	r2, [r3, #28]
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	69da      	ldr	r2, [r3, #28]
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800deb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	69d9      	ldr	r1, [r3, #28]
 800dec0:	68bb      	ldr	r3, [r7, #8]
 800dec2:	691b      	ldr	r3, [r3, #16]
 800dec4:	021a      	lsls	r2, r3, #8
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	430a      	orrs	r2, r1
 800decc:	61da      	str	r2, [r3, #28]
      break;
 800dece:	e043      	b.n	800df58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	68b9      	ldr	r1, [r7, #8]
 800ded6:	4618      	mov	r0, r3
 800ded8:	f000 fb24 	bl	800e524 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	f042 0208 	orr.w	r2, r2, #8
 800deea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	f022 0204 	bic.w	r2, r2, #4
 800defa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	691a      	ldr	r2, [r3, #16]
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	430a      	orrs	r2, r1
 800df0c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800df0e:	e023      	b.n	800df58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	68b9      	ldr	r1, [r7, #8]
 800df16:	4618      	mov	r0, r3
 800df18:	f000 fb68 	bl	800e5ec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800df2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800df3a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800df42:	68bb      	ldr	r3, [r7, #8]
 800df44:	691b      	ldr	r3, [r3, #16]
 800df46:	021a      	lsls	r2, r3, #8
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	430a      	orrs	r2, r1
 800df4e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800df50:	e002      	b.n	800df58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800df52:	2301      	movs	r3, #1
 800df54:	75fb      	strb	r3, [r7, #23]
      break;
 800df56:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2200      	movs	r2, #0
 800df5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800df60:	7dfb      	ldrb	r3, [r7, #23]
}
 800df62:	4618      	mov	r0, r3
 800df64:	3718      	adds	r7, #24
 800df66:	46bd      	mov	sp, r7
 800df68:	bd80      	pop	{r7, pc}
 800df6a:	bf00      	nop

0800df6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800df6c:	b480      	push	{r7}
 800df6e:	b083      	sub	sp, #12
 800df70:	af00      	add	r7, sp, #0
 800df72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800df74:	bf00      	nop
 800df76:	370c      	adds	r7, #12
 800df78:	46bd      	mov	sp, r7
 800df7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df7e:	4770      	bx	lr

0800df80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800df88:	bf00      	nop
 800df8a:	370c      	adds	r7, #12
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800df94:	b480      	push	{r7}
 800df96:	b085      	sub	sp, #20
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	4a42      	ldr	r2, [pc, #264]	; (800e0b0 <TIM_Base_SetConfig+0x11c>)
 800dfa8:	4293      	cmp	r3, r2
 800dfaa:	d00f      	beq.n	800dfcc <TIM_Base_SetConfig+0x38>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfb2:	d00b      	beq.n	800dfcc <TIM_Base_SetConfig+0x38>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	4a3f      	ldr	r2, [pc, #252]	; (800e0b4 <TIM_Base_SetConfig+0x120>)
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d007      	beq.n	800dfcc <TIM_Base_SetConfig+0x38>
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	4a3e      	ldr	r2, [pc, #248]	; (800e0b8 <TIM_Base_SetConfig+0x124>)
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d003      	beq.n	800dfcc <TIM_Base_SetConfig+0x38>
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	4a3d      	ldr	r2, [pc, #244]	; (800e0bc <TIM_Base_SetConfig+0x128>)
 800dfc8:	4293      	cmp	r3, r2
 800dfca:	d108      	bne.n	800dfde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	68fa      	ldr	r2, [r7, #12]
 800dfda:	4313      	orrs	r3, r2
 800dfdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	4a33      	ldr	r2, [pc, #204]	; (800e0b0 <TIM_Base_SetConfig+0x11c>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d01b      	beq.n	800e01e <TIM_Base_SetConfig+0x8a>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfec:	d017      	beq.n	800e01e <TIM_Base_SetConfig+0x8a>
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4a30      	ldr	r2, [pc, #192]	; (800e0b4 <TIM_Base_SetConfig+0x120>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d013      	beq.n	800e01e <TIM_Base_SetConfig+0x8a>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	4a2f      	ldr	r2, [pc, #188]	; (800e0b8 <TIM_Base_SetConfig+0x124>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d00f      	beq.n	800e01e <TIM_Base_SetConfig+0x8a>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	4a2e      	ldr	r2, [pc, #184]	; (800e0bc <TIM_Base_SetConfig+0x128>)
 800e002:	4293      	cmp	r3, r2
 800e004:	d00b      	beq.n	800e01e <TIM_Base_SetConfig+0x8a>
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	4a2d      	ldr	r2, [pc, #180]	; (800e0c0 <TIM_Base_SetConfig+0x12c>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d007      	beq.n	800e01e <TIM_Base_SetConfig+0x8a>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	4a2c      	ldr	r2, [pc, #176]	; (800e0c4 <TIM_Base_SetConfig+0x130>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d003      	beq.n	800e01e <TIM_Base_SetConfig+0x8a>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4a2b      	ldr	r2, [pc, #172]	; (800e0c8 <TIM_Base_SetConfig+0x134>)
 800e01a:	4293      	cmp	r3, r2
 800e01c:	d108      	bne.n	800e030 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	68fa      	ldr	r2, [r7, #12]
 800e02c:	4313      	orrs	r3, r2
 800e02e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	695b      	ldr	r3, [r3, #20]
 800e03a:	4313      	orrs	r3, r2
 800e03c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	68fa      	ldr	r2, [r7, #12]
 800e042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	689a      	ldr	r2, [r3, #8]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	4a16      	ldr	r2, [pc, #88]	; (800e0b0 <TIM_Base_SetConfig+0x11c>)
 800e058:	4293      	cmp	r3, r2
 800e05a:	d00f      	beq.n	800e07c <TIM_Base_SetConfig+0xe8>
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	4a17      	ldr	r2, [pc, #92]	; (800e0bc <TIM_Base_SetConfig+0x128>)
 800e060:	4293      	cmp	r3, r2
 800e062:	d00b      	beq.n	800e07c <TIM_Base_SetConfig+0xe8>
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	4a16      	ldr	r2, [pc, #88]	; (800e0c0 <TIM_Base_SetConfig+0x12c>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	d007      	beq.n	800e07c <TIM_Base_SetConfig+0xe8>
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	4a15      	ldr	r2, [pc, #84]	; (800e0c4 <TIM_Base_SetConfig+0x130>)
 800e070:	4293      	cmp	r3, r2
 800e072:	d003      	beq.n	800e07c <TIM_Base_SetConfig+0xe8>
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	4a14      	ldr	r2, [pc, #80]	; (800e0c8 <TIM_Base_SetConfig+0x134>)
 800e078:	4293      	cmp	r3, r2
 800e07a:	d103      	bne.n	800e084 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	691a      	ldr	r2, [r3, #16]
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2201      	movs	r2, #1
 800e088:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	691b      	ldr	r3, [r3, #16]
 800e08e:	f003 0301 	and.w	r3, r3, #1
 800e092:	2b01      	cmp	r3, #1
 800e094:	d105      	bne.n	800e0a2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	691b      	ldr	r3, [r3, #16]
 800e09a:	f023 0201 	bic.w	r2, r3, #1
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	611a      	str	r2, [r3, #16]
  }
}
 800e0a2:	bf00      	nop
 800e0a4:	3714      	adds	r7, #20
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop
 800e0b0:	40012c00 	.word	0x40012c00
 800e0b4:	40000400 	.word	0x40000400
 800e0b8:	40000800 	.word	0x40000800
 800e0bc:	40013400 	.word	0x40013400
 800e0c0:	40014000 	.word	0x40014000
 800e0c4:	40014400 	.word	0x40014400
 800e0c8:	40014800 	.word	0x40014800

0800e0cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b087      	sub	sp, #28
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
 800e0d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	6a1b      	ldr	r3, [r3, #32]
 800e0da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	6a1b      	ldr	r3, [r3, #32]
 800e0e0:	f023 0201 	bic.w	r2, r3, #1
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	699b      	ldr	r3, [r3, #24]
 800e0f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e0fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e0fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	f023 0303 	bic.w	r3, r3, #3
 800e106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	68fa      	ldr	r2, [r7, #12]
 800e10e:	4313      	orrs	r3, r2
 800e110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800e112:	697b      	ldr	r3, [r7, #20]
 800e114:	f023 0302 	bic.w	r3, r3, #2
 800e118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	689b      	ldr	r3, [r3, #8]
 800e11e:	697a      	ldr	r2, [r7, #20]
 800e120:	4313      	orrs	r3, r2
 800e122:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	4a2c      	ldr	r2, [pc, #176]	; (800e1d8 <TIM_OC1_SetConfig+0x10c>)
 800e128:	4293      	cmp	r3, r2
 800e12a:	d00f      	beq.n	800e14c <TIM_OC1_SetConfig+0x80>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a2b      	ldr	r2, [pc, #172]	; (800e1dc <TIM_OC1_SetConfig+0x110>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d00b      	beq.n	800e14c <TIM_OC1_SetConfig+0x80>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	4a2a      	ldr	r2, [pc, #168]	; (800e1e0 <TIM_OC1_SetConfig+0x114>)
 800e138:	4293      	cmp	r3, r2
 800e13a:	d007      	beq.n	800e14c <TIM_OC1_SetConfig+0x80>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4a29      	ldr	r2, [pc, #164]	; (800e1e4 <TIM_OC1_SetConfig+0x118>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d003      	beq.n	800e14c <TIM_OC1_SetConfig+0x80>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	4a28      	ldr	r2, [pc, #160]	; (800e1e8 <TIM_OC1_SetConfig+0x11c>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d10c      	bne.n	800e166 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	f023 0308 	bic.w	r3, r3, #8
 800e152:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	68db      	ldr	r3, [r3, #12]
 800e158:	697a      	ldr	r2, [r7, #20]
 800e15a:	4313      	orrs	r3, r2
 800e15c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800e15e:	697b      	ldr	r3, [r7, #20]
 800e160:	f023 0304 	bic.w	r3, r3, #4
 800e164:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4a1b      	ldr	r2, [pc, #108]	; (800e1d8 <TIM_OC1_SetConfig+0x10c>)
 800e16a:	4293      	cmp	r3, r2
 800e16c:	d00f      	beq.n	800e18e <TIM_OC1_SetConfig+0xc2>
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4a1a      	ldr	r2, [pc, #104]	; (800e1dc <TIM_OC1_SetConfig+0x110>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d00b      	beq.n	800e18e <TIM_OC1_SetConfig+0xc2>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	4a19      	ldr	r2, [pc, #100]	; (800e1e0 <TIM_OC1_SetConfig+0x114>)
 800e17a:	4293      	cmp	r3, r2
 800e17c:	d007      	beq.n	800e18e <TIM_OC1_SetConfig+0xc2>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	4a18      	ldr	r2, [pc, #96]	; (800e1e4 <TIM_OC1_SetConfig+0x118>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d003      	beq.n	800e18e <TIM_OC1_SetConfig+0xc2>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	4a17      	ldr	r2, [pc, #92]	; (800e1e8 <TIM_OC1_SetConfig+0x11c>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d111      	bne.n	800e1b2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e19c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	695b      	ldr	r3, [r3, #20]
 800e1a2:	693a      	ldr	r2, [r7, #16]
 800e1a4:	4313      	orrs	r3, r2
 800e1a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	699b      	ldr	r3, [r3, #24]
 800e1ac:	693a      	ldr	r2, [r7, #16]
 800e1ae:	4313      	orrs	r3, r2
 800e1b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	693a      	ldr	r2, [r7, #16]
 800e1b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	68fa      	ldr	r2, [r7, #12]
 800e1bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	685a      	ldr	r2, [r3, #4]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	621a      	str	r2, [r3, #32]
}
 800e1cc:	bf00      	nop
 800e1ce:	371c      	adds	r7, #28
 800e1d0:	46bd      	mov	sp, r7
 800e1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d6:	4770      	bx	lr
 800e1d8:	40012c00 	.word	0x40012c00
 800e1dc:	40013400 	.word	0x40013400
 800e1e0:	40014000 	.word	0x40014000
 800e1e4:	40014400 	.word	0x40014400
 800e1e8:	40014800 	.word	0x40014800

0800e1ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	b087      	sub	sp, #28
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
 800e1f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	6a1b      	ldr	r3, [r3, #32]
 800e1fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6a1b      	ldr	r3, [r3, #32]
 800e200:	f023 0210 	bic.w	r2, r3, #16
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	699b      	ldr	r3, [r3, #24]
 800e212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e21a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e21e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e226:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e228:	683b      	ldr	r3, [r7, #0]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	021b      	lsls	r3, r3, #8
 800e22e:	68fa      	ldr	r2, [r7, #12]
 800e230:	4313      	orrs	r3, r2
 800e232:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	f023 0320 	bic.w	r3, r3, #32
 800e23a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	689b      	ldr	r3, [r3, #8]
 800e240:	011b      	lsls	r3, r3, #4
 800e242:	697a      	ldr	r2, [r7, #20]
 800e244:	4313      	orrs	r3, r2
 800e246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	4a28      	ldr	r2, [pc, #160]	; (800e2ec <TIM_OC2_SetConfig+0x100>)
 800e24c:	4293      	cmp	r3, r2
 800e24e:	d003      	beq.n	800e258 <TIM_OC2_SetConfig+0x6c>
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	4a27      	ldr	r2, [pc, #156]	; (800e2f0 <TIM_OC2_SetConfig+0x104>)
 800e254:	4293      	cmp	r3, r2
 800e256:	d10d      	bne.n	800e274 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800e258:	697b      	ldr	r3, [r7, #20]
 800e25a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e25e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800e260:	683b      	ldr	r3, [r7, #0]
 800e262:	68db      	ldr	r3, [r3, #12]
 800e264:	011b      	lsls	r3, r3, #4
 800e266:	697a      	ldr	r2, [r7, #20]
 800e268:	4313      	orrs	r3, r2
 800e26a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e272:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	4a1d      	ldr	r2, [pc, #116]	; (800e2ec <TIM_OC2_SetConfig+0x100>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d00f      	beq.n	800e29c <TIM_OC2_SetConfig+0xb0>
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	4a1c      	ldr	r2, [pc, #112]	; (800e2f0 <TIM_OC2_SetConfig+0x104>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d00b      	beq.n	800e29c <TIM_OC2_SetConfig+0xb0>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	4a1b      	ldr	r2, [pc, #108]	; (800e2f4 <TIM_OC2_SetConfig+0x108>)
 800e288:	4293      	cmp	r3, r2
 800e28a:	d007      	beq.n	800e29c <TIM_OC2_SetConfig+0xb0>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	4a1a      	ldr	r2, [pc, #104]	; (800e2f8 <TIM_OC2_SetConfig+0x10c>)
 800e290:	4293      	cmp	r3, r2
 800e292:	d003      	beq.n	800e29c <TIM_OC2_SetConfig+0xb0>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	4a19      	ldr	r2, [pc, #100]	; (800e2fc <TIM_OC2_SetConfig+0x110>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d113      	bne.n	800e2c4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800e29c:	693b      	ldr	r3, [r7, #16]
 800e29e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e2a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e2aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800e2ac:	683b      	ldr	r3, [r7, #0]
 800e2ae:	695b      	ldr	r3, [r3, #20]
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	693a      	ldr	r2, [r7, #16]
 800e2b4:	4313      	orrs	r3, r2
 800e2b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	699b      	ldr	r3, [r3, #24]
 800e2bc:	009b      	lsls	r3, r3, #2
 800e2be:	693a      	ldr	r2, [r7, #16]
 800e2c0:	4313      	orrs	r3, r2
 800e2c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	693a      	ldr	r2, [r7, #16]
 800e2c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	68fa      	ldr	r2, [r7, #12]
 800e2ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	685a      	ldr	r2, [r3, #4]
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	697a      	ldr	r2, [r7, #20]
 800e2dc:	621a      	str	r2, [r3, #32]
}
 800e2de:	bf00      	nop
 800e2e0:	371c      	adds	r7, #28
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e8:	4770      	bx	lr
 800e2ea:	bf00      	nop
 800e2ec:	40012c00 	.word	0x40012c00
 800e2f0:	40013400 	.word	0x40013400
 800e2f4:	40014000 	.word	0x40014000
 800e2f8:	40014400 	.word	0x40014400
 800e2fc:	40014800 	.word	0x40014800

0800e300 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e300:	b480      	push	{r7}
 800e302:	b087      	sub	sp, #28
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
 800e308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6a1b      	ldr	r3, [r3, #32]
 800e30e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6a1b      	ldr	r3, [r3, #32]
 800e314:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	685b      	ldr	r3, [r3, #4]
 800e320:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	69db      	ldr	r3, [r3, #28]
 800e326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e32e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	f023 0303 	bic.w	r3, r3, #3
 800e33a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	68fa      	ldr	r2, [r7, #12]
 800e342:	4313      	orrs	r3, r2
 800e344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e34c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800e34e:	683b      	ldr	r3, [r7, #0]
 800e350:	689b      	ldr	r3, [r3, #8]
 800e352:	021b      	lsls	r3, r3, #8
 800e354:	697a      	ldr	r2, [r7, #20]
 800e356:	4313      	orrs	r3, r2
 800e358:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	4a27      	ldr	r2, [pc, #156]	; (800e3fc <TIM_OC3_SetConfig+0xfc>)
 800e35e:	4293      	cmp	r3, r2
 800e360:	d003      	beq.n	800e36a <TIM_OC3_SetConfig+0x6a>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	4a26      	ldr	r2, [pc, #152]	; (800e400 <TIM_OC3_SetConfig+0x100>)
 800e366:	4293      	cmp	r3, r2
 800e368:	d10d      	bne.n	800e386 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e370:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800e372:	683b      	ldr	r3, [r7, #0]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	021b      	lsls	r3, r3, #8
 800e378:	697a      	ldr	r2, [r7, #20]
 800e37a:	4313      	orrs	r3, r2
 800e37c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800e37e:	697b      	ldr	r3, [r7, #20]
 800e380:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e384:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	4a1c      	ldr	r2, [pc, #112]	; (800e3fc <TIM_OC3_SetConfig+0xfc>)
 800e38a:	4293      	cmp	r3, r2
 800e38c:	d00f      	beq.n	800e3ae <TIM_OC3_SetConfig+0xae>
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	4a1b      	ldr	r2, [pc, #108]	; (800e400 <TIM_OC3_SetConfig+0x100>)
 800e392:	4293      	cmp	r3, r2
 800e394:	d00b      	beq.n	800e3ae <TIM_OC3_SetConfig+0xae>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	4a1a      	ldr	r2, [pc, #104]	; (800e404 <TIM_OC3_SetConfig+0x104>)
 800e39a:	4293      	cmp	r3, r2
 800e39c:	d007      	beq.n	800e3ae <TIM_OC3_SetConfig+0xae>
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	4a19      	ldr	r2, [pc, #100]	; (800e408 <TIM_OC3_SetConfig+0x108>)
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	d003      	beq.n	800e3ae <TIM_OC3_SetConfig+0xae>
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	4a18      	ldr	r2, [pc, #96]	; (800e40c <TIM_OC3_SetConfig+0x10c>)
 800e3aa:	4293      	cmp	r3, r2
 800e3ac:	d113      	bne.n	800e3d6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800e3ae:	693b      	ldr	r3, [r7, #16]
 800e3b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e3b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800e3b6:	693b      	ldr	r3, [r7, #16]
 800e3b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e3bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800e3be:	683b      	ldr	r3, [r7, #0]
 800e3c0:	695b      	ldr	r3, [r3, #20]
 800e3c2:	011b      	lsls	r3, r3, #4
 800e3c4:	693a      	ldr	r2, [r7, #16]
 800e3c6:	4313      	orrs	r3, r2
 800e3c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	011b      	lsls	r3, r3, #4
 800e3d0:	693a      	ldr	r2, [r7, #16]
 800e3d2:	4313      	orrs	r3, r2
 800e3d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	693a      	ldr	r2, [r7, #16]
 800e3da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	68fa      	ldr	r2, [r7, #12]
 800e3e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	685a      	ldr	r2, [r3, #4]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	697a      	ldr	r2, [r7, #20]
 800e3ee:	621a      	str	r2, [r3, #32]
}
 800e3f0:	bf00      	nop
 800e3f2:	371c      	adds	r7, #28
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	40012c00 	.word	0x40012c00
 800e400:	40013400 	.word	0x40013400
 800e404:	40014000 	.word	0x40014000
 800e408:	40014400 	.word	0x40014400
 800e40c:	40014800 	.word	0x40014800

0800e410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800e410:	b480      	push	{r7}
 800e412:	b087      	sub	sp, #28
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	6a1b      	ldr	r3, [r3, #32]
 800e41e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6a1b      	ldr	r3, [r3, #32]
 800e424:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	685b      	ldr	r3, [r3, #4]
 800e430:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	69db      	ldr	r3, [r3, #28]
 800e436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e43e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e44a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e44c:	683b      	ldr	r3, [r7, #0]
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	021b      	lsls	r3, r3, #8
 800e452:	68fa      	ldr	r2, [r7, #12]
 800e454:	4313      	orrs	r3, r2
 800e456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800e458:	697b      	ldr	r3, [r7, #20]
 800e45a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800e45e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	689b      	ldr	r3, [r3, #8]
 800e464:	031b      	lsls	r3, r3, #12
 800e466:	697a      	ldr	r2, [r7, #20]
 800e468:	4313      	orrs	r3, r2
 800e46a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	4a28      	ldr	r2, [pc, #160]	; (800e510 <TIM_OC4_SetConfig+0x100>)
 800e470:	4293      	cmp	r3, r2
 800e472:	d003      	beq.n	800e47c <TIM_OC4_SetConfig+0x6c>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	4a27      	ldr	r2, [pc, #156]	; (800e514 <TIM_OC4_SetConfig+0x104>)
 800e478:	4293      	cmp	r3, r2
 800e47a:	d10d      	bne.n	800e498 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800e47c:	697b      	ldr	r3, [r7, #20]
 800e47e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800e484:	683b      	ldr	r3, [r7, #0]
 800e486:	68db      	ldr	r3, [r3, #12]
 800e488:	031b      	lsls	r3, r3, #12
 800e48a:	697a      	ldr	r2, [r7, #20]
 800e48c:	4313      	orrs	r3, r2
 800e48e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e496:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	4a1d      	ldr	r2, [pc, #116]	; (800e510 <TIM_OC4_SetConfig+0x100>)
 800e49c:	4293      	cmp	r3, r2
 800e49e:	d00f      	beq.n	800e4c0 <TIM_OC4_SetConfig+0xb0>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	4a1c      	ldr	r2, [pc, #112]	; (800e514 <TIM_OC4_SetConfig+0x104>)
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d00b      	beq.n	800e4c0 <TIM_OC4_SetConfig+0xb0>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	4a1b      	ldr	r2, [pc, #108]	; (800e518 <TIM_OC4_SetConfig+0x108>)
 800e4ac:	4293      	cmp	r3, r2
 800e4ae:	d007      	beq.n	800e4c0 <TIM_OC4_SetConfig+0xb0>
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	4a1a      	ldr	r2, [pc, #104]	; (800e51c <TIM_OC4_SetConfig+0x10c>)
 800e4b4:	4293      	cmp	r3, r2
 800e4b6:	d003      	beq.n	800e4c0 <TIM_OC4_SetConfig+0xb0>
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4a19      	ldr	r2, [pc, #100]	; (800e520 <TIM_OC4_SetConfig+0x110>)
 800e4bc:	4293      	cmp	r3, r2
 800e4be:	d113      	bne.n	800e4e8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800e4c0:	693b      	ldr	r3, [r7, #16]
 800e4c2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800e4c6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800e4c8:	693b      	ldr	r3, [r7, #16]
 800e4ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e4ce:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	695b      	ldr	r3, [r3, #20]
 800e4d4:	019b      	lsls	r3, r3, #6
 800e4d6:	693a      	ldr	r2, [r7, #16]
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	699b      	ldr	r3, [r3, #24]
 800e4e0:	019b      	lsls	r3, r3, #6
 800e4e2:	693a      	ldr	r2, [r7, #16]
 800e4e4:	4313      	orrs	r3, r2
 800e4e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	693a      	ldr	r2, [r7, #16]
 800e4ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800e4f4:	683b      	ldr	r3, [r7, #0]
 800e4f6:	685a      	ldr	r2, [r3, #4]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	697a      	ldr	r2, [r7, #20]
 800e500:	621a      	str	r2, [r3, #32]
}
 800e502:	bf00      	nop
 800e504:	371c      	adds	r7, #28
 800e506:	46bd      	mov	sp, r7
 800e508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e50c:	4770      	bx	lr
 800e50e:	bf00      	nop
 800e510:	40012c00 	.word	0x40012c00
 800e514:	40013400 	.word	0x40013400
 800e518:	40014000 	.word	0x40014000
 800e51c:	40014400 	.word	0x40014400
 800e520:	40014800 	.word	0x40014800

0800e524 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e524:	b480      	push	{r7}
 800e526:	b087      	sub	sp, #28
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	6a1b      	ldr	r3, [r3, #32]
 800e532:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	6a1b      	ldr	r3, [r3, #32]
 800e538:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e54a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e556:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800e558:	683b      	ldr	r3, [r7, #0]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68fa      	ldr	r2, [r7, #12]
 800e55e:	4313      	orrs	r3, r2
 800e560:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e562:	693b      	ldr	r3, [r7, #16]
 800e564:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e568:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	041b      	lsls	r3, r3, #16
 800e570:	693a      	ldr	r2, [r7, #16]
 800e572:	4313      	orrs	r3, r2
 800e574:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	4a17      	ldr	r2, [pc, #92]	; (800e5d8 <TIM_OC5_SetConfig+0xb4>)
 800e57a:	4293      	cmp	r3, r2
 800e57c:	d00f      	beq.n	800e59e <TIM_OC5_SetConfig+0x7a>
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	4a16      	ldr	r2, [pc, #88]	; (800e5dc <TIM_OC5_SetConfig+0xb8>)
 800e582:	4293      	cmp	r3, r2
 800e584:	d00b      	beq.n	800e59e <TIM_OC5_SetConfig+0x7a>
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	4a15      	ldr	r2, [pc, #84]	; (800e5e0 <TIM_OC5_SetConfig+0xbc>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d007      	beq.n	800e59e <TIM_OC5_SetConfig+0x7a>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	4a14      	ldr	r2, [pc, #80]	; (800e5e4 <TIM_OC5_SetConfig+0xc0>)
 800e592:	4293      	cmp	r3, r2
 800e594:	d003      	beq.n	800e59e <TIM_OC5_SetConfig+0x7a>
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a13      	ldr	r2, [pc, #76]	; (800e5e8 <TIM_OC5_SetConfig+0xc4>)
 800e59a:	4293      	cmp	r3, r2
 800e59c:	d109      	bne.n	800e5b2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e5a4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	695b      	ldr	r3, [r3, #20]
 800e5aa:	021b      	lsls	r3, r3, #8
 800e5ac:	697a      	ldr	r2, [r7, #20]
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	697a      	ldr	r2, [r7, #20]
 800e5b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	68fa      	ldr	r2, [r7, #12]
 800e5bc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e5be:	683b      	ldr	r3, [r7, #0]
 800e5c0:	685a      	ldr	r2, [r3, #4]
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	693a      	ldr	r2, [r7, #16]
 800e5ca:	621a      	str	r2, [r3, #32]
}
 800e5cc:	bf00      	nop
 800e5ce:	371c      	adds	r7, #28
 800e5d0:	46bd      	mov	sp, r7
 800e5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d6:	4770      	bx	lr
 800e5d8:	40012c00 	.word	0x40012c00
 800e5dc:	40013400 	.word	0x40013400
 800e5e0:	40014000 	.word	0x40014000
 800e5e4:	40014400 	.word	0x40014400
 800e5e8:	40014800 	.word	0x40014800

0800e5ec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800e5ec:	b480      	push	{r7}
 800e5ee:	b087      	sub	sp, #28
 800e5f0:	af00      	add	r7, sp, #0
 800e5f2:	6078      	str	r0, [r7, #4]
 800e5f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	6a1b      	ldr	r3, [r3, #32]
 800e5fa:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6a1b      	ldr	r3, [r3, #32]
 800e600:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	685b      	ldr	r3, [r3, #4]
 800e60c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e61a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800e61e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	021b      	lsls	r3, r3, #8
 800e626:	68fa      	ldr	r2, [r7, #12]
 800e628:	4313      	orrs	r3, r2
 800e62a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e62c:	693b      	ldr	r3, [r7, #16]
 800e62e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800e632:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	689b      	ldr	r3, [r3, #8]
 800e638:	051b      	lsls	r3, r3, #20
 800e63a:	693a      	ldr	r2, [r7, #16]
 800e63c:	4313      	orrs	r3, r2
 800e63e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	4a18      	ldr	r2, [pc, #96]	; (800e6a4 <TIM_OC6_SetConfig+0xb8>)
 800e644:	4293      	cmp	r3, r2
 800e646:	d00f      	beq.n	800e668 <TIM_OC6_SetConfig+0x7c>
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	4a17      	ldr	r2, [pc, #92]	; (800e6a8 <TIM_OC6_SetConfig+0xbc>)
 800e64c:	4293      	cmp	r3, r2
 800e64e:	d00b      	beq.n	800e668 <TIM_OC6_SetConfig+0x7c>
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	4a16      	ldr	r2, [pc, #88]	; (800e6ac <TIM_OC6_SetConfig+0xc0>)
 800e654:	4293      	cmp	r3, r2
 800e656:	d007      	beq.n	800e668 <TIM_OC6_SetConfig+0x7c>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	4a15      	ldr	r2, [pc, #84]	; (800e6b0 <TIM_OC6_SetConfig+0xc4>)
 800e65c:	4293      	cmp	r3, r2
 800e65e:	d003      	beq.n	800e668 <TIM_OC6_SetConfig+0x7c>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	4a14      	ldr	r2, [pc, #80]	; (800e6b4 <TIM_OC6_SetConfig+0xc8>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d109      	bne.n	800e67c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e668:	697b      	ldr	r3, [r7, #20]
 800e66a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800e66e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	695b      	ldr	r3, [r3, #20]
 800e674:	029b      	lsls	r3, r3, #10
 800e676:	697a      	ldr	r2, [r7, #20]
 800e678:	4313      	orrs	r3, r2
 800e67a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	685a      	ldr	r2, [r3, #4]
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	693a      	ldr	r2, [r7, #16]
 800e694:	621a      	str	r2, [r3, #32]
}
 800e696:	bf00      	nop
 800e698:	371c      	adds	r7, #28
 800e69a:	46bd      	mov	sp, r7
 800e69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a0:	4770      	bx	lr
 800e6a2:	bf00      	nop
 800e6a4:	40012c00 	.word	0x40012c00
 800e6a8:	40013400 	.word	0x40013400
 800e6ac:	40014000 	.word	0x40014000
 800e6b0:	40014400 	.word	0x40014400
 800e6b4:	40014800 	.word	0x40014800

0800e6b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b087      	sub	sp, #28
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	60f8      	str	r0, [r7, #12]
 800e6c0:	60b9      	str	r1, [r7, #8]
 800e6c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800e6c4:	68bb      	ldr	r3, [r7, #8]
 800e6c6:	f003 031f 	and.w	r3, r3, #31
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800e6d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	6a1a      	ldr	r2, [r3, #32]
 800e6d6:	697b      	ldr	r3, [r7, #20]
 800e6d8:	43db      	mvns	r3, r3
 800e6da:	401a      	ands	r2, r3
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	6a1a      	ldr	r2, [r3, #32]
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	f003 031f 	and.w	r3, r3, #31
 800e6ea:	6879      	ldr	r1, [r7, #4]
 800e6ec:	fa01 f303 	lsl.w	r3, r1, r3
 800e6f0:	431a      	orrs	r2, r3
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	621a      	str	r2, [r3, #32]
}
 800e6f6:	bf00      	nop
 800e6f8:	371c      	adds	r7, #28
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e700:	4770      	bx	lr
	...

0800e704 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b084      	sub	sp, #16
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e70e:	2300      	movs	r3, #0
 800e710:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d109      	bne.n	800e72c <HAL_TIMEx_PWMN_Start_IT+0x28>
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e71e:	b2db      	uxtb	r3, r3
 800e720:	2b01      	cmp	r3, #1
 800e722:	bf14      	ite	ne
 800e724:	2301      	movne	r3, #1
 800e726:	2300      	moveq	r3, #0
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	e022      	b.n	800e772 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	2b04      	cmp	r3, #4
 800e730:	d109      	bne.n	800e746 <HAL_TIMEx_PWMN_Start_IT+0x42>
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	2b01      	cmp	r3, #1
 800e73c:	bf14      	ite	ne
 800e73e:	2301      	movne	r3, #1
 800e740:	2300      	moveq	r3, #0
 800e742:	b2db      	uxtb	r3, r3
 800e744:	e015      	b.n	800e772 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	2b08      	cmp	r3, #8
 800e74a:	d109      	bne.n	800e760 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800e752:	b2db      	uxtb	r3, r3
 800e754:	2b01      	cmp	r3, #1
 800e756:	bf14      	ite	ne
 800e758:	2301      	movne	r3, #1
 800e75a:	2300      	moveq	r3, #0
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	e008      	b.n	800e772 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800e766:	b2db      	uxtb	r3, r3
 800e768:	2b01      	cmp	r3, #1
 800e76a:	bf14      	ite	ne
 800e76c:	2301      	movne	r3, #1
 800e76e:	2300      	moveq	r3, #0
 800e770:	b2db      	uxtb	r3, r3
 800e772:	2b00      	cmp	r3, #0
 800e774:	d001      	beq.n	800e77a <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800e776:	2301      	movs	r3, #1
 800e778:	e0bc      	b.n	800e8f4 <HAL_TIMEx_PWMN_Start_IT+0x1f0>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d104      	bne.n	800e78a <HAL_TIMEx_PWMN_Start_IT+0x86>
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	2202      	movs	r2, #2
 800e784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e788:	e013      	b.n	800e7b2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e78a:	683b      	ldr	r3, [r7, #0]
 800e78c:	2b04      	cmp	r3, #4
 800e78e:	d104      	bne.n	800e79a <HAL_TIMEx_PWMN_Start_IT+0x96>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	2202      	movs	r2, #2
 800e794:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e798:	e00b      	b.n	800e7b2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	2b08      	cmp	r3, #8
 800e79e:	d104      	bne.n	800e7aa <HAL_TIMEx_PWMN_Start_IT+0xa6>
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	2202      	movs	r2, #2
 800e7a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e7a8:	e003      	b.n	800e7b2 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2202      	movs	r2, #2
 800e7ae:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 800e7b2:	683b      	ldr	r3, [r7, #0]
 800e7b4:	2b0c      	cmp	r3, #12
 800e7b6:	d841      	bhi.n	800e83c <HAL_TIMEx_PWMN_Start_IT+0x138>
 800e7b8:	a201      	add	r2, pc, #4	; (adr r2, 800e7c0 <HAL_TIMEx_PWMN_Start_IT+0xbc>)
 800e7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7be:	bf00      	nop
 800e7c0:	0800e7f5 	.word	0x0800e7f5
 800e7c4:	0800e83d 	.word	0x0800e83d
 800e7c8:	0800e83d 	.word	0x0800e83d
 800e7cc:	0800e83d 	.word	0x0800e83d
 800e7d0:	0800e807 	.word	0x0800e807
 800e7d4:	0800e83d 	.word	0x0800e83d
 800e7d8:	0800e83d 	.word	0x0800e83d
 800e7dc:	0800e83d 	.word	0x0800e83d
 800e7e0:	0800e819 	.word	0x0800e819
 800e7e4:	0800e83d 	.word	0x0800e83d
 800e7e8:	0800e83d 	.word	0x0800e83d
 800e7ec:	0800e83d 	.word	0x0800e83d
 800e7f0:	0800e82b 	.word	0x0800e82b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	68da      	ldr	r2, [r3, #12]
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f042 0202 	orr.w	r2, r2, #2
 800e802:	60da      	str	r2, [r3, #12]
      break;
 800e804:	e01d      	b.n	800e842 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	68da      	ldr	r2, [r3, #12]
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	f042 0204 	orr.w	r2, r2, #4
 800e814:	60da      	str	r2, [r3, #12]
      break;
 800e816:	e014      	b.n	800e842 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	68da      	ldr	r2, [r3, #12]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	f042 0208 	orr.w	r2, r2, #8
 800e826:	60da      	str	r2, [r3, #12]
      break;
 800e828:	e00b      	b.n	800e842 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	68da      	ldr	r2, [r3, #12]
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	f042 0210 	orr.w	r2, r2, #16
 800e838:	60da      	str	r2, [r3, #12]
      break;
 800e83a:	e002      	b.n	800e842 <HAL_TIMEx_PWMN_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 800e83c:	2301      	movs	r3, #1
 800e83e:	73fb      	strb	r3, [r7, #15]
      break;
 800e840:	bf00      	nop
  }

  if (status == HAL_OK)
 800e842:	7bfb      	ldrb	r3, [r7, #15]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d154      	bne.n	800e8f2 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	68da      	ldr	r2, [r3, #12]
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e856:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2204      	movs	r2, #4
 800e85e:	6839      	ldr	r1, [r7, #0]
 800e860:	4618      	mov	r0, r3
 800e862:	f000 f9ab 	bl	800ebbc <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e874:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	4a20      	ldr	r2, [pc, #128]	; (800e8fc <HAL_TIMEx_PWMN_Start_IT+0x1f8>)
 800e87c:	4293      	cmp	r3, r2
 800e87e:	d018      	beq.n	800e8b2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e888:	d013      	beq.n	800e8b2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	4a1c      	ldr	r2, [pc, #112]	; (800e900 <HAL_TIMEx_PWMN_Start_IT+0x1fc>)
 800e890:	4293      	cmp	r3, r2
 800e892:	d00e      	beq.n	800e8b2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a1a      	ldr	r2, [pc, #104]	; (800e904 <HAL_TIMEx_PWMN_Start_IT+0x200>)
 800e89a:	4293      	cmp	r3, r2
 800e89c:	d009      	beq.n	800e8b2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	4a19      	ldr	r2, [pc, #100]	; (800e908 <HAL_TIMEx_PWMN_Start_IT+0x204>)
 800e8a4:	4293      	cmp	r3, r2
 800e8a6:	d004      	beq.n	800e8b2 <HAL_TIMEx_PWMN_Start_IT+0x1ae>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a17      	ldr	r2, [pc, #92]	; (800e90c <HAL_TIMEx_PWMN_Start_IT+0x208>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d115      	bne.n	800e8de <HAL_TIMEx_PWMN_Start_IT+0x1da>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	689a      	ldr	r2, [r3, #8]
 800e8b8:	4b15      	ldr	r3, [pc, #84]	; (800e910 <HAL_TIMEx_PWMN_Start_IT+0x20c>)
 800e8ba:	4013      	ands	r3, r2
 800e8bc:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8be:	68bb      	ldr	r3, [r7, #8]
 800e8c0:	2b06      	cmp	r3, #6
 800e8c2:	d015      	beq.n	800e8f0 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8ca:	d011      	beq.n	800e8f0 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	f042 0201 	orr.w	r2, r2, #1
 800e8da:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8dc:	e008      	b.n	800e8f0 <HAL_TIMEx_PWMN_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	681a      	ldr	r2, [r3, #0]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	f042 0201 	orr.w	r2, r2, #1
 800e8ec:	601a      	str	r2, [r3, #0]
 800e8ee:	e000      	b.n	800e8f2 <HAL_TIMEx_PWMN_Start_IT+0x1ee>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8f0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e8f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8f4:	4618      	mov	r0, r3
 800e8f6:	3710      	adds	r7, #16
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	40012c00 	.word	0x40012c00
 800e900:	40000400 	.word	0x40000400
 800e904:	40000800 	.word	0x40000800
 800e908:	40013400 	.word	0x40013400
 800e90c:	40014000 	.word	0x40014000
 800e910:	00010007 	.word	0x00010007

0800e914 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e914:	b480      	push	{r7}
 800e916:	b085      	sub	sp, #20
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e924:	2b01      	cmp	r3, #1
 800e926:	d101      	bne.n	800e92c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e928:	2302      	movs	r3, #2
 800e92a:	e065      	b.n	800e9f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2202      	movs	r2, #2
 800e938:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	685b      	ldr	r3, [r3, #4]
 800e942:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	689b      	ldr	r3, [r3, #8]
 800e94a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a2c      	ldr	r2, [pc, #176]	; (800ea04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d004      	beq.n	800e960 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a2b      	ldr	r2, [pc, #172]	; (800ea08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d108      	bne.n	800e972 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e966:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	68fa      	ldr	r2, [r7, #12]
 800e96e:	4313      	orrs	r3, r2
 800e970:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800e978:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e97c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	68fa      	ldr	r2, [r7, #12]
 800e984:	4313      	orrs	r3, r2
 800e986:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	68fa      	ldr	r2, [r7, #12]
 800e98e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	4a1b      	ldr	r2, [pc, #108]	; (800ea04 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800e996:	4293      	cmp	r3, r2
 800e998:	d018      	beq.n	800e9cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e9a2:	d013      	beq.n	800e9cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	4a18      	ldr	r2, [pc, #96]	; (800ea0c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800e9aa:	4293      	cmp	r3, r2
 800e9ac:	d00e      	beq.n	800e9cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	4a17      	ldr	r2, [pc, #92]	; (800ea10 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d009      	beq.n	800e9cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4a12      	ldr	r2, [pc, #72]	; (800ea08 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800e9be:	4293      	cmp	r3, r2
 800e9c0:	d004      	beq.n	800e9cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	4a13      	ldr	r2, [pc, #76]	; (800ea14 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e9c8:	4293      	cmp	r3, r2
 800e9ca:	d10c      	bne.n	800e9e6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e9cc:	68bb      	ldr	r3, [r7, #8]
 800e9ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e9d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	689b      	ldr	r3, [r3, #8]
 800e9d8:	68ba      	ldr	r2, [r7, #8]
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	681b      	ldr	r3, [r3, #0]
 800e9e2:	68ba      	ldr	r2, [r7, #8]
 800e9e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e9f6:	2300      	movs	r3, #0
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3714      	adds	r7, #20
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr
 800ea04:	40012c00 	.word	0x40012c00
 800ea08:	40013400 	.word	0x40013400
 800ea0c:	40000400 	.word	0x40000400
 800ea10:	40000800 	.word	0x40000800
 800ea14:	40014000 	.word	0x40014000

0800ea18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ea18:	b480      	push	{r7}
 800ea1a:	b085      	sub	sp, #20
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
 800ea20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ea22:	2300      	movs	r3, #0
 800ea24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea2c:	2b01      	cmp	r3, #1
 800ea2e:	d101      	bne.n	800ea34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ea30:	2302      	movs	r3, #2
 800ea32:	e073      	b.n	800eb1c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2201      	movs	r2, #1
 800ea38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	68db      	ldr	r3, [r3, #12]
 800ea46:	4313      	orrs	r3, r2
 800ea48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	689b      	ldr	r3, [r3, #8]
 800ea54:	4313      	orrs	r3, r2
 800ea56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	685b      	ldr	r3, [r3, #4]
 800ea62:	4313      	orrs	r3, r2
 800ea64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800ea66:	68fb      	ldr	r3, [r7, #12]
 800ea68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800ea6c:	683b      	ldr	r3, [r7, #0]
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	4313      	orrs	r3, r2
 800ea72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ea7a:	683b      	ldr	r3, [r7, #0]
 800ea7c:	691b      	ldr	r3, [r3, #16]
 800ea7e:	4313      	orrs	r3, r2
 800ea80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	695b      	ldr	r3, [r3, #20]
 800ea8c:	4313      	orrs	r3, r2
 800ea8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ea96:	683b      	ldr	r3, [r7, #0]
 800ea98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	699b      	ldr	r3, [r3, #24]
 800eaa8:	041b      	lsls	r3, r3, #16
 800eaaa:	4313      	orrs	r3, r2
 800eaac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	69db      	ldr	r3, [r3, #28]
 800eab8:	4313      	orrs	r3, r2
 800eaba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a19      	ldr	r2, [pc, #100]	; (800eb28 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800eac2:	4293      	cmp	r3, r2
 800eac4:	d004      	beq.n	800ead0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	4a18      	ldr	r2, [pc, #96]	; (800eb2c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800eacc:	4293      	cmp	r3, r2
 800eace:	d11c      	bne.n	800eb0a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ead6:	683b      	ldr	r3, [r7, #0]
 800ead8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eada:	051b      	lsls	r3, r3, #20
 800eadc:	4313      	orrs	r3, r2
 800eade:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	6a1b      	ldr	r3, [r3, #32]
 800eaea:	4313      	orrs	r3, r2
 800eaec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf8:	4313      	orrs	r3, r2
 800eafa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb06:	4313      	orrs	r3, r2
 800eb08:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	681b      	ldr	r3, [r3, #0]
 800eb0e:	68fa      	ldr	r2, [r7, #12]
 800eb10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eb1a:	2300      	movs	r3, #0
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr
 800eb28:	40012c00 	.word	0x40012c00
 800eb2c:	40013400 	.word	0x40013400

0800eb30 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eb30:	b480      	push	{r7}
 800eb32:	b083      	sub	sp, #12
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eb38:	bf00      	nop
 800eb3a:	370c      	adds	r7, #12
 800eb3c:	46bd      	mov	sp, r7
 800eb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb42:	4770      	bx	lr

0800eb44 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b083      	sub	sp, #12
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800eb4c:	bf00      	nop
 800eb4e:	370c      	adds	r7, #12
 800eb50:	46bd      	mov	sp, r7
 800eb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb56:	4770      	bx	lr

0800eb58 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eb58:	b480      	push	{r7}
 800eb5a:	b083      	sub	sp, #12
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eb60:	bf00      	nop
 800eb62:	370c      	adds	r7, #12
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr

0800eb6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b083      	sub	sp, #12
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800eb74:	bf00      	nop
 800eb76:	370c      	adds	r7, #12
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b083      	sub	sp, #12
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800eb88:	bf00      	nop
 800eb8a:	370c      	adds	r7, #12
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb92:	4770      	bx	lr

0800eb94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800eb94:	b480      	push	{r7}
 800eb96:	b083      	sub	sp, #12
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800eb9c:	bf00      	nop
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800eba8:	b480      	push	{r7}
 800ebaa:	b083      	sub	sp, #12
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ebb0:	bf00      	nop
 800ebb2:	370c      	adds	r7, #12
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b087      	sub	sp, #28
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	60f8      	str	r0, [r7, #12]
 800ebc4:	60b9      	str	r1, [r7, #8]
 800ebc6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	f003 030f 	and.w	r3, r3, #15
 800ebce:	2204      	movs	r2, #4
 800ebd0:	fa02 f303 	lsl.w	r3, r2, r3
 800ebd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	6a1a      	ldr	r2, [r3, #32]
 800ebda:	697b      	ldr	r3, [r7, #20]
 800ebdc:	43db      	mvns	r3, r3
 800ebde:	401a      	ands	r2, r3
 800ebe0:	68fb      	ldr	r3, [r7, #12]
 800ebe2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	6a1a      	ldr	r2, [r3, #32]
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	f003 030f 	and.w	r3, r3, #15
 800ebee:	6879      	ldr	r1, [r7, #4]
 800ebf0:	fa01 f303 	lsl.w	r3, r1, r3
 800ebf4:	431a      	orrs	r2, r3
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	621a      	str	r2, [r3, #32]
}
 800ebfa:	bf00      	nop
 800ebfc:	371c      	adds	r7, #28
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr

0800ec06 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 800ec06:	b580      	push	{r7, lr}
 800ec08:	b082      	sub	sp, #8
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d101      	bne.n	800ec18 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 800ec14:	2301      	movs	r3, #1
 800ec16:	e04a      	b.n	800ecae <HAL_HalfDuplex_Init+0xa8>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d106      	bne.n	800ec30 <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2200      	movs	r2, #0
 800ec26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f7f6 f946 	bl	8004ebc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2224      	movs	r2, #36	; 0x24
 800ec34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f022 0201 	bic.w	r2, r2, #1
 800ec46:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d002      	beq.n	800ec56 <HAL_HalfDuplex_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800ec50:	6878      	ldr	r0, [r7, #4]
 800ec52:	f000 fafd 	bl	800f250 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f000 f82e 	bl	800ecb8 <UART_SetConfig>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d101      	bne.n	800ec66 <HAL_HalfDuplex_Init+0x60>
  {
    return HAL_ERROR;
 800ec62:	2301      	movs	r3, #1
 800ec64:	e023      	b.n	800ecae <HAL_HalfDuplex_Init+0xa8>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	685a      	ldr	r2, [r3, #4]
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ec74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	689a      	ldr	r2, [r3, #8]
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f022 0222 	bic.w	r2, r2, #34	; 0x22
 800ec84:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	689a      	ldr	r2, [r3, #8]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f042 0208 	orr.w	r2, r2, #8
 800ec94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	681a      	ldr	r2, [r3, #0]
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	f042 0201 	orr.w	r2, r2, #1
 800eca4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eca6:	6878      	ldr	r0, [r7, #4]
 800eca8:	f000 fb74 	bl	800f394 <UART_CheckIdleState>
 800ecac:	4603      	mov	r3, r0
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	3708      	adds	r7, #8
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}
	...

0800ecb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ecb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ecbc:	b08c      	sub	sp, #48	; 0x30
 800ecbe:	af00      	add	r7, sp, #0
 800ecc0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ecc2:	2300      	movs	r3, #0
 800ecc4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	689a      	ldr	r2, [r3, #8]
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	691b      	ldr	r3, [r3, #16]
 800ecd0:	431a      	orrs	r2, r3
 800ecd2:	697b      	ldr	r3, [r7, #20]
 800ecd4:	695b      	ldr	r3, [r3, #20]
 800ecd6:	431a      	orrs	r2, r3
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	69db      	ldr	r3, [r3, #28]
 800ecdc:	4313      	orrs	r3, r2
 800ecde:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	4bab      	ldr	r3, [pc, #684]	; (800ef94 <UART_SetConfig+0x2dc>)
 800ece8:	4013      	ands	r3, r2
 800ecea:	697a      	ldr	r2, [r7, #20]
 800ecec:	6812      	ldr	r2, [r2, #0]
 800ecee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ecf0:	430b      	orrs	r3, r1
 800ecf2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ecf4:	697b      	ldr	r3, [r7, #20]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	685b      	ldr	r3, [r3, #4]
 800ecfa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	68da      	ldr	r2, [r3, #12]
 800ed02:	697b      	ldr	r3, [r7, #20]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	430a      	orrs	r2, r1
 800ed08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ed0a:	697b      	ldr	r3, [r7, #20]
 800ed0c:	699b      	ldr	r3, [r3, #24]
 800ed0e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ed10:	697b      	ldr	r3, [r7, #20]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	4aa0      	ldr	r2, [pc, #640]	; (800ef98 <UART_SetConfig+0x2e0>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d004      	beq.n	800ed24 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	6a1b      	ldr	r3, [r3, #32]
 800ed1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ed20:	4313      	orrs	r3, r2
 800ed22:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ed24:	697b      	ldr	r3, [r7, #20]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ed2e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ed32:	697a      	ldr	r2, [r7, #20]
 800ed34:	6812      	ldr	r2, [r2, #0]
 800ed36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ed38:	430b      	orrs	r3, r1
 800ed3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ed3c:	697b      	ldr	r3, [r7, #20]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed42:	f023 010f 	bic.w	r1, r3, #15
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	430a      	orrs	r2, r1
 800ed50:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	4a91      	ldr	r2, [pc, #580]	; (800ef9c <UART_SetConfig+0x2e4>)
 800ed58:	4293      	cmp	r3, r2
 800ed5a:	d125      	bne.n	800eda8 <UART_SetConfig+0xf0>
 800ed5c:	4b90      	ldr	r3, [pc, #576]	; (800efa0 <UART_SetConfig+0x2e8>)
 800ed5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ed62:	f003 0303 	and.w	r3, r3, #3
 800ed66:	2b03      	cmp	r3, #3
 800ed68:	d81a      	bhi.n	800eda0 <UART_SetConfig+0xe8>
 800ed6a:	a201      	add	r2, pc, #4	; (adr r2, 800ed70 <UART_SetConfig+0xb8>)
 800ed6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed70:	0800ed81 	.word	0x0800ed81
 800ed74:	0800ed91 	.word	0x0800ed91
 800ed78:	0800ed89 	.word	0x0800ed89
 800ed7c:	0800ed99 	.word	0x0800ed99
 800ed80:	2301      	movs	r3, #1
 800ed82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed86:	e0d6      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ed88:	2302      	movs	r3, #2
 800ed8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed8e:	e0d2      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ed90:	2304      	movs	r3, #4
 800ed92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed96:	e0ce      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ed98:	2308      	movs	r3, #8
 800ed9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ed9e:	e0ca      	b.n	800ef36 <UART_SetConfig+0x27e>
 800eda0:	2310      	movs	r3, #16
 800eda2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eda6:	e0c6      	b.n	800ef36 <UART_SetConfig+0x27e>
 800eda8:	697b      	ldr	r3, [r7, #20]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	4a7d      	ldr	r2, [pc, #500]	; (800efa4 <UART_SetConfig+0x2ec>)
 800edae:	4293      	cmp	r3, r2
 800edb0:	d138      	bne.n	800ee24 <UART_SetConfig+0x16c>
 800edb2:	4b7b      	ldr	r3, [pc, #492]	; (800efa0 <UART_SetConfig+0x2e8>)
 800edb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800edb8:	f003 030c 	and.w	r3, r3, #12
 800edbc:	2b0c      	cmp	r3, #12
 800edbe:	d82d      	bhi.n	800ee1c <UART_SetConfig+0x164>
 800edc0:	a201      	add	r2, pc, #4	; (adr r2, 800edc8 <UART_SetConfig+0x110>)
 800edc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc6:	bf00      	nop
 800edc8:	0800edfd 	.word	0x0800edfd
 800edcc:	0800ee1d 	.word	0x0800ee1d
 800edd0:	0800ee1d 	.word	0x0800ee1d
 800edd4:	0800ee1d 	.word	0x0800ee1d
 800edd8:	0800ee0d 	.word	0x0800ee0d
 800eddc:	0800ee1d 	.word	0x0800ee1d
 800ede0:	0800ee1d 	.word	0x0800ee1d
 800ede4:	0800ee1d 	.word	0x0800ee1d
 800ede8:	0800ee05 	.word	0x0800ee05
 800edec:	0800ee1d 	.word	0x0800ee1d
 800edf0:	0800ee1d 	.word	0x0800ee1d
 800edf4:	0800ee1d 	.word	0x0800ee1d
 800edf8:	0800ee15 	.word	0x0800ee15
 800edfc:	2300      	movs	r3, #0
 800edfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee02:	e098      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ee04:	2302      	movs	r3, #2
 800ee06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee0a:	e094      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ee0c:	2304      	movs	r3, #4
 800ee0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee12:	e090      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ee14:	2308      	movs	r3, #8
 800ee16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee1a:	e08c      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ee1c:	2310      	movs	r3, #16
 800ee1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee22:	e088      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ee24:	697b      	ldr	r3, [r7, #20]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	4a5f      	ldr	r2, [pc, #380]	; (800efa8 <UART_SetConfig+0x2f0>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d125      	bne.n	800ee7a <UART_SetConfig+0x1c2>
 800ee2e:	4b5c      	ldr	r3, [pc, #368]	; (800efa0 <UART_SetConfig+0x2e8>)
 800ee30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee34:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ee38:	2b30      	cmp	r3, #48	; 0x30
 800ee3a:	d016      	beq.n	800ee6a <UART_SetConfig+0x1b2>
 800ee3c:	2b30      	cmp	r3, #48	; 0x30
 800ee3e:	d818      	bhi.n	800ee72 <UART_SetConfig+0x1ba>
 800ee40:	2b20      	cmp	r3, #32
 800ee42:	d00a      	beq.n	800ee5a <UART_SetConfig+0x1a2>
 800ee44:	2b20      	cmp	r3, #32
 800ee46:	d814      	bhi.n	800ee72 <UART_SetConfig+0x1ba>
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d002      	beq.n	800ee52 <UART_SetConfig+0x19a>
 800ee4c:	2b10      	cmp	r3, #16
 800ee4e:	d008      	beq.n	800ee62 <UART_SetConfig+0x1aa>
 800ee50:	e00f      	b.n	800ee72 <UART_SetConfig+0x1ba>
 800ee52:	2300      	movs	r3, #0
 800ee54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee58:	e06d      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ee5a:	2302      	movs	r3, #2
 800ee5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee60:	e069      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ee62:	2304      	movs	r3, #4
 800ee64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee68:	e065      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ee6a:	2308      	movs	r3, #8
 800ee6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee70:	e061      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ee72:	2310      	movs	r3, #16
 800ee74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ee78:	e05d      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	4a4b      	ldr	r2, [pc, #300]	; (800efac <UART_SetConfig+0x2f4>)
 800ee80:	4293      	cmp	r3, r2
 800ee82:	d125      	bne.n	800eed0 <UART_SetConfig+0x218>
 800ee84:	4b46      	ldr	r3, [pc, #280]	; (800efa0 <UART_SetConfig+0x2e8>)
 800ee86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ee8a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ee8e:	2bc0      	cmp	r3, #192	; 0xc0
 800ee90:	d016      	beq.n	800eec0 <UART_SetConfig+0x208>
 800ee92:	2bc0      	cmp	r3, #192	; 0xc0
 800ee94:	d818      	bhi.n	800eec8 <UART_SetConfig+0x210>
 800ee96:	2b80      	cmp	r3, #128	; 0x80
 800ee98:	d00a      	beq.n	800eeb0 <UART_SetConfig+0x1f8>
 800ee9a:	2b80      	cmp	r3, #128	; 0x80
 800ee9c:	d814      	bhi.n	800eec8 <UART_SetConfig+0x210>
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d002      	beq.n	800eea8 <UART_SetConfig+0x1f0>
 800eea2:	2b40      	cmp	r3, #64	; 0x40
 800eea4:	d008      	beq.n	800eeb8 <UART_SetConfig+0x200>
 800eea6:	e00f      	b.n	800eec8 <UART_SetConfig+0x210>
 800eea8:	2300      	movs	r3, #0
 800eeaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eeae:	e042      	b.n	800ef36 <UART_SetConfig+0x27e>
 800eeb0:	2302      	movs	r3, #2
 800eeb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eeb6:	e03e      	b.n	800ef36 <UART_SetConfig+0x27e>
 800eeb8:	2304      	movs	r3, #4
 800eeba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eebe:	e03a      	b.n	800ef36 <UART_SetConfig+0x27e>
 800eec0:	2308      	movs	r3, #8
 800eec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eec6:	e036      	b.n	800ef36 <UART_SetConfig+0x27e>
 800eec8:	2310      	movs	r3, #16
 800eeca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800eece:	e032      	b.n	800ef36 <UART_SetConfig+0x27e>
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	4a30      	ldr	r2, [pc, #192]	; (800ef98 <UART_SetConfig+0x2e0>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d12a      	bne.n	800ef30 <UART_SetConfig+0x278>
 800eeda:	4b31      	ldr	r3, [pc, #196]	; (800efa0 <UART_SetConfig+0x2e8>)
 800eedc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eee0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800eee4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eee8:	d01a      	beq.n	800ef20 <UART_SetConfig+0x268>
 800eeea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800eeee:	d81b      	bhi.n	800ef28 <UART_SetConfig+0x270>
 800eef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eef4:	d00c      	beq.n	800ef10 <UART_SetConfig+0x258>
 800eef6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eefa:	d815      	bhi.n	800ef28 <UART_SetConfig+0x270>
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d003      	beq.n	800ef08 <UART_SetConfig+0x250>
 800ef00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ef04:	d008      	beq.n	800ef18 <UART_SetConfig+0x260>
 800ef06:	e00f      	b.n	800ef28 <UART_SetConfig+0x270>
 800ef08:	2300      	movs	r3, #0
 800ef0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef0e:	e012      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ef10:	2302      	movs	r3, #2
 800ef12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef16:	e00e      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ef18:	2304      	movs	r3, #4
 800ef1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef1e:	e00a      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ef20:	2308      	movs	r3, #8
 800ef22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef26:	e006      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ef28:	2310      	movs	r3, #16
 800ef2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ef2e:	e002      	b.n	800ef36 <UART_SetConfig+0x27e>
 800ef30:	2310      	movs	r3, #16
 800ef32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ef36:	697b      	ldr	r3, [r7, #20]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4a17      	ldr	r2, [pc, #92]	; (800ef98 <UART_SetConfig+0x2e0>)
 800ef3c:	4293      	cmp	r3, r2
 800ef3e:	f040 80a8 	bne.w	800f092 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ef42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ef46:	2b08      	cmp	r3, #8
 800ef48:	d834      	bhi.n	800efb4 <UART_SetConfig+0x2fc>
 800ef4a:	a201      	add	r2, pc, #4	; (adr r2, 800ef50 <UART_SetConfig+0x298>)
 800ef4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef50:	0800ef75 	.word	0x0800ef75
 800ef54:	0800efb5 	.word	0x0800efb5
 800ef58:	0800ef7d 	.word	0x0800ef7d
 800ef5c:	0800efb5 	.word	0x0800efb5
 800ef60:	0800ef83 	.word	0x0800ef83
 800ef64:	0800efb5 	.word	0x0800efb5
 800ef68:	0800efb5 	.word	0x0800efb5
 800ef6c:	0800efb5 	.word	0x0800efb5
 800ef70:	0800ef8b 	.word	0x0800ef8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ef74:	f7fd f904 	bl	800c180 <HAL_RCC_GetPCLK1Freq>
 800ef78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ef7a:	e021      	b.n	800efc0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ef7c:	4b0c      	ldr	r3, [pc, #48]	; (800efb0 <UART_SetConfig+0x2f8>)
 800ef7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ef80:	e01e      	b.n	800efc0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ef82:	f7fd f88f 	bl	800c0a4 <HAL_RCC_GetSysClockFreq>
 800ef86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ef88:	e01a      	b.n	800efc0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ef8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ef90:	e016      	b.n	800efc0 <UART_SetConfig+0x308>
 800ef92:	bf00      	nop
 800ef94:	cfff69f3 	.word	0xcfff69f3
 800ef98:	40008000 	.word	0x40008000
 800ef9c:	40013800 	.word	0x40013800
 800efa0:	40021000 	.word	0x40021000
 800efa4:	40004400 	.word	0x40004400
 800efa8:	40004800 	.word	0x40004800
 800efac:	40004c00 	.word	0x40004c00
 800efb0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800efb4:	2300      	movs	r3, #0
 800efb6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800efb8:	2301      	movs	r3, #1
 800efba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800efbe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800efc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f000 812a 	beq.w	800f21c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800efc8:	697b      	ldr	r3, [r7, #20]
 800efca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800efcc:	4a9e      	ldr	r2, [pc, #632]	; (800f248 <UART_SetConfig+0x590>)
 800efce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800efd2:	461a      	mov	r2, r3
 800efd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd6:	fbb3 f3f2 	udiv	r3, r3, r2
 800efda:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800efdc:	697b      	ldr	r3, [r7, #20]
 800efde:	685a      	ldr	r2, [r3, #4]
 800efe0:	4613      	mov	r3, r2
 800efe2:	005b      	lsls	r3, r3, #1
 800efe4:	4413      	add	r3, r2
 800efe6:	69ba      	ldr	r2, [r7, #24]
 800efe8:	429a      	cmp	r2, r3
 800efea:	d305      	bcc.n	800eff8 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800efec:	697b      	ldr	r3, [r7, #20]
 800efee:	685b      	ldr	r3, [r3, #4]
 800eff0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800eff2:	69ba      	ldr	r2, [r7, #24]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d903      	bls.n	800f000 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800eff8:	2301      	movs	r3, #1
 800effa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800effe:	e10d      	b.n	800f21c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f002:	2200      	movs	r2, #0
 800f004:	60bb      	str	r3, [r7, #8]
 800f006:	60fa      	str	r2, [r7, #12]
 800f008:	697b      	ldr	r3, [r7, #20]
 800f00a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f00c:	4a8e      	ldr	r2, [pc, #568]	; (800f248 <UART_SetConfig+0x590>)
 800f00e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f012:	b29b      	uxth	r3, r3
 800f014:	2200      	movs	r2, #0
 800f016:	603b      	str	r3, [r7, #0]
 800f018:	607a      	str	r2, [r7, #4]
 800f01a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f01e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f022:	f7f1 fe59 	bl	8000cd8 <__aeabi_uldivmod>
 800f026:	4602      	mov	r2, r0
 800f028:	460b      	mov	r3, r1
 800f02a:	4610      	mov	r0, r2
 800f02c:	4619      	mov	r1, r3
 800f02e:	f04f 0200 	mov.w	r2, #0
 800f032:	f04f 0300 	mov.w	r3, #0
 800f036:	020b      	lsls	r3, r1, #8
 800f038:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f03c:	0202      	lsls	r2, r0, #8
 800f03e:	6979      	ldr	r1, [r7, #20]
 800f040:	6849      	ldr	r1, [r1, #4]
 800f042:	0849      	lsrs	r1, r1, #1
 800f044:	2000      	movs	r0, #0
 800f046:	460c      	mov	r4, r1
 800f048:	4605      	mov	r5, r0
 800f04a:	eb12 0804 	adds.w	r8, r2, r4
 800f04e:	eb43 0905 	adc.w	r9, r3, r5
 800f052:	697b      	ldr	r3, [r7, #20]
 800f054:	685b      	ldr	r3, [r3, #4]
 800f056:	2200      	movs	r2, #0
 800f058:	469a      	mov	sl, r3
 800f05a:	4693      	mov	fp, r2
 800f05c:	4652      	mov	r2, sl
 800f05e:	465b      	mov	r3, fp
 800f060:	4640      	mov	r0, r8
 800f062:	4649      	mov	r1, r9
 800f064:	f7f1 fe38 	bl	8000cd8 <__aeabi_uldivmod>
 800f068:	4602      	mov	r2, r0
 800f06a:	460b      	mov	r3, r1
 800f06c:	4613      	mov	r3, r2
 800f06e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f070:	6a3b      	ldr	r3, [r7, #32]
 800f072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f076:	d308      	bcc.n	800f08a <UART_SetConfig+0x3d2>
 800f078:	6a3b      	ldr	r3, [r7, #32]
 800f07a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f07e:	d204      	bcs.n	800f08a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800f080:	697b      	ldr	r3, [r7, #20]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	6a3a      	ldr	r2, [r7, #32]
 800f086:	60da      	str	r2, [r3, #12]
 800f088:	e0c8      	b.n	800f21c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800f08a:	2301      	movs	r3, #1
 800f08c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f090:	e0c4      	b.n	800f21c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	69db      	ldr	r3, [r3, #28]
 800f096:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f09a:	d167      	bne.n	800f16c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 800f09c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f0a0:	2b08      	cmp	r3, #8
 800f0a2:	d828      	bhi.n	800f0f6 <UART_SetConfig+0x43e>
 800f0a4:	a201      	add	r2, pc, #4	; (adr r2, 800f0ac <UART_SetConfig+0x3f4>)
 800f0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0aa:	bf00      	nop
 800f0ac:	0800f0d1 	.word	0x0800f0d1
 800f0b0:	0800f0d9 	.word	0x0800f0d9
 800f0b4:	0800f0e1 	.word	0x0800f0e1
 800f0b8:	0800f0f7 	.word	0x0800f0f7
 800f0bc:	0800f0e7 	.word	0x0800f0e7
 800f0c0:	0800f0f7 	.word	0x0800f0f7
 800f0c4:	0800f0f7 	.word	0x0800f0f7
 800f0c8:	0800f0f7 	.word	0x0800f0f7
 800f0cc:	0800f0ef 	.word	0x0800f0ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f0d0:	f7fd f856 	bl	800c180 <HAL_RCC_GetPCLK1Freq>
 800f0d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f0d6:	e014      	b.n	800f102 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f0d8:	f7fd f868 	bl	800c1ac <HAL_RCC_GetPCLK2Freq>
 800f0dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f0de:	e010      	b.n	800f102 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f0e0:	4b5a      	ldr	r3, [pc, #360]	; (800f24c <UART_SetConfig+0x594>)
 800f0e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f0e4:	e00d      	b.n	800f102 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f0e6:	f7fc ffdd 	bl	800c0a4 <HAL_RCC_GetSysClockFreq>
 800f0ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f0ec:	e009      	b.n	800f102 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f0ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f0f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f0f4:	e005      	b.n	800f102 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f104:	2b00      	cmp	r3, #0
 800f106:	f000 8089 	beq.w	800f21c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f10e:	4a4e      	ldr	r2, [pc, #312]	; (800f248 <UART_SetConfig+0x590>)
 800f110:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f114:	461a      	mov	r2, r3
 800f116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f118:	fbb3 f3f2 	udiv	r3, r3, r2
 800f11c:	005a      	lsls	r2, r3, #1
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	685b      	ldr	r3, [r3, #4]
 800f122:	085b      	lsrs	r3, r3, #1
 800f124:	441a      	add	r2, r3
 800f126:	697b      	ldr	r3, [r7, #20]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800f12e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f130:	6a3b      	ldr	r3, [r7, #32]
 800f132:	2b0f      	cmp	r3, #15
 800f134:	d916      	bls.n	800f164 <UART_SetConfig+0x4ac>
 800f136:	6a3b      	ldr	r3, [r7, #32]
 800f138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f13c:	d212      	bcs.n	800f164 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f13e:	6a3b      	ldr	r3, [r7, #32]
 800f140:	b29b      	uxth	r3, r3
 800f142:	f023 030f 	bic.w	r3, r3, #15
 800f146:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f148:	6a3b      	ldr	r3, [r7, #32]
 800f14a:	085b      	lsrs	r3, r3, #1
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	f003 0307 	and.w	r3, r3, #7
 800f152:	b29a      	uxth	r2, r3
 800f154:	8bfb      	ldrh	r3, [r7, #30]
 800f156:	4313      	orrs	r3, r2
 800f158:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800f15a:	697b      	ldr	r3, [r7, #20]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	8bfa      	ldrh	r2, [r7, #30]
 800f160:	60da      	str	r2, [r3, #12]
 800f162:	e05b      	b.n	800f21c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800f164:	2301      	movs	r3, #1
 800f166:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800f16a:	e057      	b.n	800f21c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800f16c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f170:	2b08      	cmp	r3, #8
 800f172:	d828      	bhi.n	800f1c6 <UART_SetConfig+0x50e>
 800f174:	a201      	add	r2, pc, #4	; (adr r2, 800f17c <UART_SetConfig+0x4c4>)
 800f176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f17a:	bf00      	nop
 800f17c:	0800f1a1 	.word	0x0800f1a1
 800f180:	0800f1a9 	.word	0x0800f1a9
 800f184:	0800f1b1 	.word	0x0800f1b1
 800f188:	0800f1c7 	.word	0x0800f1c7
 800f18c:	0800f1b7 	.word	0x0800f1b7
 800f190:	0800f1c7 	.word	0x0800f1c7
 800f194:	0800f1c7 	.word	0x0800f1c7
 800f198:	0800f1c7 	.word	0x0800f1c7
 800f19c:	0800f1bf 	.word	0x0800f1bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f1a0:	f7fc ffee 	bl	800c180 <HAL_RCC_GetPCLK1Freq>
 800f1a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f1a6:	e014      	b.n	800f1d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f1a8:	f7fd f800 	bl	800c1ac <HAL_RCC_GetPCLK2Freq>
 800f1ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f1ae:	e010      	b.n	800f1d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800f1b0:	4b26      	ldr	r3, [pc, #152]	; (800f24c <UART_SetConfig+0x594>)
 800f1b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f1b4:	e00d      	b.n	800f1d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800f1b6:	f7fc ff75 	bl	800c0a4 <HAL_RCC_GetSysClockFreq>
 800f1ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800f1bc:	e009      	b.n	800f1d2 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f1be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f1c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800f1c4:	e005      	b.n	800f1d2 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800f1c6:	2300      	movs	r3, #0
 800f1c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800f1d0:	bf00      	nop
    }

    if (pclk != 0U)
 800f1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d021      	beq.n	800f21c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1dc:	4a1a      	ldr	r2, [pc, #104]	; (800f248 <UART_SetConfig+0x590>)
 800f1de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1e2:	461a      	mov	r2, r3
 800f1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e6:	fbb3 f2f2 	udiv	r2, r3, r2
 800f1ea:	697b      	ldr	r3, [r7, #20]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	085b      	lsrs	r3, r3, #1
 800f1f0:	441a      	add	r2, r3
 800f1f2:	697b      	ldr	r3, [r7, #20]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	fbb2 f3f3 	udiv	r3, r2, r3
 800f1fa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f1fc:	6a3b      	ldr	r3, [r7, #32]
 800f1fe:	2b0f      	cmp	r3, #15
 800f200:	d909      	bls.n	800f216 <UART_SetConfig+0x55e>
 800f202:	6a3b      	ldr	r3, [r7, #32]
 800f204:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f208:	d205      	bcs.n	800f216 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f20a:	6a3b      	ldr	r3, [r7, #32]
 800f20c:	b29a      	uxth	r2, r3
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	60da      	str	r2, [r3, #12]
 800f214:	e002      	b.n	800f21c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800f216:	2301      	movs	r3, #1
 800f218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	2201      	movs	r2, #1
 800f220:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	2201      	movs	r2, #1
 800f228:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2200      	movs	r2, #0
 800f230:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	2200      	movs	r2, #0
 800f236:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800f238:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800f23c:	4618      	mov	r0, r3
 800f23e:	3730      	adds	r7, #48	; 0x30
 800f240:	46bd      	mov	sp, r7
 800f242:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f246:	bf00      	nop
 800f248:	08019208 	.word	0x08019208
 800f24c:	00f42400 	.word	0x00f42400

0800f250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f25c:	f003 0308 	and.w	r3, r3, #8
 800f260:	2b00      	cmp	r3, #0
 800f262:	d00a      	beq.n	800f27a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	685b      	ldr	r3, [r3, #4]
 800f26a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	430a      	orrs	r2, r1
 800f278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f27e:	f003 0301 	and.w	r3, r3, #1
 800f282:	2b00      	cmp	r3, #0
 800f284:	d00a      	beq.n	800f29c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	685b      	ldr	r3, [r3, #4]
 800f28c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f294:	687b      	ldr	r3, [r7, #4]
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	430a      	orrs	r2, r1
 800f29a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2a0:	f003 0302 	and.w	r3, r3, #2
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d00a      	beq.n	800f2be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	681b      	ldr	r3, [r3, #0]
 800f2ac:	685b      	ldr	r3, [r3, #4]
 800f2ae:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	430a      	orrs	r2, r1
 800f2bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c2:	f003 0304 	and.w	r3, r3, #4
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00a      	beq.n	800f2e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	685b      	ldr	r3, [r3, #4]
 800f2d0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	430a      	orrs	r2, r1
 800f2de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2e4:	f003 0310 	and.w	r3, r3, #16
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d00a      	beq.n	800f302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	689b      	ldr	r3, [r3, #8]
 800f2f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	430a      	orrs	r2, r1
 800f300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f306:	f003 0320 	and.w	r3, r3, #32
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d00a      	beq.n	800f324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	689b      	ldr	r3, [r3, #8]
 800f314:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	430a      	orrs	r2, r1
 800f322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d01a      	beq.n	800f366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	430a      	orrs	r2, r1
 800f344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f34a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f34e:	d10a      	bne.n	800f366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	430a      	orrs	r2, r1
 800f364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f36a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d00a      	beq.n	800f388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	685b      	ldr	r3, [r3, #4]
 800f378:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	430a      	orrs	r2, r1
 800f386:	605a      	str	r2, [r3, #4]
  }
}
 800f388:	bf00      	nop
 800f38a:	370c      	adds	r7, #12
 800f38c:	46bd      	mov	sp, r7
 800f38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f392:	4770      	bx	lr

0800f394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f394:	b580      	push	{r7, lr}
 800f396:	b098      	sub	sp, #96	; 0x60
 800f398:	af02      	add	r7, sp, #8
 800f39a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f3a4:	f7f6 fbf2 	bl	8005b8c <HAL_GetTick>
 800f3a8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	f003 0308 	and.w	r3, r3, #8
 800f3b4:	2b08      	cmp	r3, #8
 800f3b6:	d12f      	bne.n	800f418 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f3b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f3bc:	9300      	str	r3, [sp, #0]
 800f3be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f000 f88e 	bl	800f4e8 <UART_WaitOnFlagUntilTimeout>
 800f3cc:	4603      	mov	r3, r0
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d022      	beq.n	800f418 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	681b      	ldr	r3, [r3, #0]
 800f3d6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3da:	e853 3f00 	ldrex	r3, [r3]
 800f3de:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f3e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f3e6:	653b      	str	r3, [r7, #80]	; 0x50
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	461a      	mov	r2, r3
 800f3ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f3f0:	647b      	str	r3, [r7, #68]	; 0x44
 800f3f2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f3f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f3f8:	e841 2300 	strex	r3, r2, [r1]
 800f3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f3fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f400:	2b00      	cmp	r3, #0
 800f402:	d1e6      	bne.n	800f3d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2220      	movs	r2, #32
 800f408:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2200      	movs	r2, #0
 800f410:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f414:	2303      	movs	r3, #3
 800f416:	e063      	b.n	800f4e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	f003 0304 	and.w	r3, r3, #4
 800f422:	2b04      	cmp	r3, #4
 800f424:	d149      	bne.n	800f4ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f426:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f42a:	9300      	str	r3, [sp, #0]
 800f42c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f42e:	2200      	movs	r2, #0
 800f430:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 f857 	bl	800f4e8 <UART_WaitOnFlagUntilTimeout>
 800f43a:	4603      	mov	r3, r0
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d03c      	beq.n	800f4ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f448:	e853 3f00 	ldrex	r3, [r3]
 800f44c:	623b      	str	r3, [r7, #32]
   return(result);
 800f44e:	6a3b      	ldr	r3, [r7, #32]
 800f450:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f454:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	461a      	mov	r2, r3
 800f45c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f45e:	633b      	str	r3, [r7, #48]	; 0x30
 800f460:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f466:	e841 2300 	strex	r3, r2, [r1]
 800f46a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f46c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d1e6      	bne.n	800f440 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	3308      	adds	r3, #8
 800f478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	e853 3f00 	ldrex	r3, [r3]
 800f480:	60fb      	str	r3, [r7, #12]
   return(result);
 800f482:	68fb      	ldr	r3, [r7, #12]
 800f484:	f023 0301 	bic.w	r3, r3, #1
 800f488:	64bb      	str	r3, [r7, #72]	; 0x48
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	3308      	adds	r3, #8
 800f490:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f492:	61fa      	str	r2, [r7, #28]
 800f494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f496:	69b9      	ldr	r1, [r7, #24]
 800f498:	69fa      	ldr	r2, [r7, #28]
 800f49a:	e841 2300 	strex	r3, r2, [r1]
 800f49e:	617b      	str	r3, [r7, #20]
   return(result);
 800f4a0:	697b      	ldr	r3, [r7, #20]
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d1e5      	bne.n	800f472 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	2220      	movs	r2, #32
 800f4aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f4b6:	2303      	movs	r3, #3
 800f4b8:	e012      	b.n	800f4e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2220      	movs	r2, #32
 800f4be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	2220      	movs	r2, #32
 800f4c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	2200      	movs	r2, #0
 800f4ce:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2200      	movs	r2, #0
 800f4d4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f4de:	2300      	movs	r3, #0
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3758      	adds	r7, #88	; 0x58
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}

0800f4e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b084      	sub	sp, #16
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	60b9      	str	r1, [r7, #8]
 800f4f2:	603b      	str	r3, [r7, #0]
 800f4f4:	4613      	mov	r3, r2
 800f4f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f4f8:	e04f      	b.n	800f59a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f4fa:	69bb      	ldr	r3, [r7, #24]
 800f4fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f500:	d04b      	beq.n	800f59a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f502:	f7f6 fb43 	bl	8005b8c <HAL_GetTick>
 800f506:	4602      	mov	r2, r0
 800f508:	683b      	ldr	r3, [r7, #0]
 800f50a:	1ad3      	subs	r3, r2, r3
 800f50c:	69ba      	ldr	r2, [r7, #24]
 800f50e:	429a      	cmp	r2, r3
 800f510:	d302      	bcc.n	800f518 <UART_WaitOnFlagUntilTimeout+0x30>
 800f512:	69bb      	ldr	r3, [r7, #24]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d101      	bne.n	800f51c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800f518:	2303      	movs	r3, #3
 800f51a:	e04e      	b.n	800f5ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	681b      	ldr	r3, [r3, #0]
 800f522:	f003 0304 	and.w	r3, r3, #4
 800f526:	2b00      	cmp	r3, #0
 800f528:	d037      	beq.n	800f59a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f52a:	68bb      	ldr	r3, [r7, #8]
 800f52c:	2b80      	cmp	r3, #128	; 0x80
 800f52e:	d034      	beq.n	800f59a <UART_WaitOnFlagUntilTimeout+0xb2>
 800f530:	68bb      	ldr	r3, [r7, #8]
 800f532:	2b40      	cmp	r3, #64	; 0x40
 800f534:	d031      	beq.n	800f59a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	69db      	ldr	r3, [r3, #28]
 800f53c:	f003 0308 	and.w	r3, r3, #8
 800f540:	2b08      	cmp	r3, #8
 800f542:	d110      	bne.n	800f566 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	2208      	movs	r2, #8
 800f54a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f54c:	68f8      	ldr	r0, [r7, #12]
 800f54e:	f000 f838 	bl	800f5c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	2208      	movs	r2, #8
 800f556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	2200      	movs	r2, #0
 800f55e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800f562:	2301      	movs	r3, #1
 800f564:	e029      	b.n	800f5ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	681b      	ldr	r3, [r3, #0]
 800f56a:	69db      	ldr	r3, [r3, #28]
 800f56c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f570:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f574:	d111      	bne.n	800f59a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f57e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	f000 f81e 	bl	800f5c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f586:	68fb      	ldr	r3, [r7, #12]
 800f588:	2220      	movs	r2, #32
 800f58a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	2200      	movs	r2, #0
 800f592:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f596:	2303      	movs	r3, #3
 800f598:	e00f      	b.n	800f5ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	69da      	ldr	r2, [r3, #28]
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	4013      	ands	r3, r2
 800f5a4:	68ba      	ldr	r2, [r7, #8]
 800f5a6:	429a      	cmp	r2, r3
 800f5a8:	bf0c      	ite	eq
 800f5aa:	2301      	moveq	r3, #1
 800f5ac:	2300      	movne	r3, #0
 800f5ae:	b2db      	uxtb	r3, r3
 800f5b0:	461a      	mov	r2, r3
 800f5b2:	79fb      	ldrb	r3, [r7, #7]
 800f5b4:	429a      	cmp	r2, r3
 800f5b6:	d0a0      	beq.n	800f4fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f5b8:	2300      	movs	r3, #0
}
 800f5ba:	4618      	mov	r0, r3
 800f5bc:	3710      	adds	r7, #16
 800f5be:	46bd      	mov	sp, r7
 800f5c0:	bd80      	pop	{r7, pc}

0800f5c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f5c2:	b480      	push	{r7}
 800f5c4:	b095      	sub	sp, #84	; 0x54
 800f5c6:	af00      	add	r7, sp, #0
 800f5c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5d2:	e853 3f00 	ldrex	r3, [r3]
 800f5d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f5de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f5e8:	643b      	str	r3, [r7, #64]	; 0x40
 800f5ea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f5ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f5f0:	e841 2300 	strex	r3, r2, [r1]
 800f5f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f5f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1e6      	bne.n	800f5ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	681b      	ldr	r3, [r3, #0]
 800f600:	3308      	adds	r3, #8
 800f602:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f604:	6a3b      	ldr	r3, [r7, #32]
 800f606:	e853 3f00 	ldrex	r3, [r3]
 800f60a:	61fb      	str	r3, [r7, #28]
   return(result);
 800f60c:	69fb      	ldr	r3, [r7, #28]
 800f60e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f612:	f023 0301 	bic.w	r3, r3, #1
 800f616:	64bb      	str	r3, [r7, #72]	; 0x48
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	3308      	adds	r3, #8
 800f61e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f620:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f628:	e841 2300 	strex	r3, r2, [r1]
 800f62c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f62e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f630:	2b00      	cmp	r3, #0
 800f632:	d1e3      	bne.n	800f5fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f638:	2b01      	cmp	r3, #1
 800f63a:	d118      	bne.n	800f66e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	e853 3f00 	ldrex	r3, [r3]
 800f648:	60bb      	str	r3, [r7, #8]
   return(result);
 800f64a:	68bb      	ldr	r3, [r7, #8]
 800f64c:	f023 0310 	bic.w	r3, r3, #16
 800f650:	647b      	str	r3, [r7, #68]	; 0x44
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	461a      	mov	r2, r3
 800f658:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f65a:	61bb      	str	r3, [r7, #24]
 800f65c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f65e:	6979      	ldr	r1, [r7, #20]
 800f660:	69ba      	ldr	r2, [r7, #24]
 800f662:	e841 2300 	strex	r3, r2, [r1]
 800f666:	613b      	str	r3, [r7, #16]
   return(result);
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d1e6      	bne.n	800f63c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	2220      	movs	r2, #32
 800f672:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	2200      	movs	r2, #0
 800f67a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f682:	bf00      	nop
 800f684:	3754      	adds	r7, #84	; 0x54
 800f686:	46bd      	mov	sp, r7
 800f688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68c:	4770      	bx	lr

0800f68e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f68e:	b480      	push	{r7}
 800f690:	b085      	sub	sp, #20
 800f692:	af00      	add	r7, sp, #0
 800f694:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f69c:	2b01      	cmp	r3, #1
 800f69e:	d101      	bne.n	800f6a4 <HAL_UARTEx_DisableFifoMode+0x16>
 800f6a0:	2302      	movs	r3, #2
 800f6a2:	e027      	b.n	800f6f4 <HAL_UARTEx_DisableFifoMode+0x66>
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	2201      	movs	r2, #1
 800f6a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	2224      	movs	r2, #36	; 0x24
 800f6b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	681b      	ldr	r3, [r3, #0]
 800f6c0:	681a      	ldr	r2, [r3, #0]
 800f6c2:	687b      	ldr	r3, [r7, #4]
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	f022 0201 	bic.w	r2, r2, #1
 800f6ca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f6d2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	681b      	ldr	r3, [r3, #0]
 800f6de:	68fa      	ldr	r2, [r7, #12]
 800f6e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	2220      	movs	r2, #32
 800f6e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f6f2:	2300      	movs	r3, #0
}
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	3714      	adds	r7, #20
 800f6f8:	46bd      	mov	sp, r7
 800f6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fe:	4770      	bx	lr

0800f700 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b084      	sub	sp, #16
 800f704:	af00      	add	r7, sp, #0
 800f706:	6078      	str	r0, [r7, #4]
 800f708:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f710:	2b01      	cmp	r3, #1
 800f712:	d101      	bne.n	800f718 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f714:	2302      	movs	r3, #2
 800f716:	e02d      	b.n	800f774 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2201      	movs	r2, #1
 800f71c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	2224      	movs	r2, #36	; 0x24
 800f724:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	681a      	ldr	r2, [r3, #0]
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	f022 0201 	bic.w	r2, r2, #1
 800f73e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	681b      	ldr	r3, [r3, #0]
 800f744:	689b      	ldr	r3, [r3, #8]
 800f746:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	683a      	ldr	r2, [r7, #0]
 800f750:	430a      	orrs	r2, r1
 800f752:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f754:	6878      	ldr	r0, [r7, #4]
 800f756:	f000 f84f 	bl	800f7f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	68fa      	ldr	r2, [r7, #12]
 800f760:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	2220      	movs	r2, #32
 800f766:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f772:	2300      	movs	r3, #0
}
 800f774:	4618      	mov	r0, r3
 800f776:	3710      	adds	r7, #16
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b084      	sub	sp, #16
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
 800f784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f78c:	2b01      	cmp	r3, #1
 800f78e:	d101      	bne.n	800f794 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f790:	2302      	movs	r3, #2
 800f792:	e02d      	b.n	800f7f0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2201      	movs	r2, #1
 800f798:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2224      	movs	r2, #36	; 0x24
 800f7a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	681a      	ldr	r2, [r3, #0]
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	f022 0201 	bic.w	r2, r2, #1
 800f7ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	683a      	ldr	r2, [r7, #0]
 800f7cc:	430a      	orrs	r2, r1
 800f7ce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f000 f811 	bl	800f7f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	681b      	ldr	r3, [r3, #0]
 800f7da:	68fa      	ldr	r2, [r7, #12]
 800f7dc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	2220      	movs	r2, #32
 800f7e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f7ee:	2300      	movs	r3, #0
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3710      	adds	r7, #16
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f7f8:	b480      	push	{r7}
 800f7fa:	b085      	sub	sp, #20
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f804:	2b00      	cmp	r3, #0
 800f806:	d108      	bne.n	800f81a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	2201      	movs	r2, #1
 800f80c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	2201      	movs	r2, #1
 800f814:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f818:	e031      	b.n	800f87e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f81a:	2308      	movs	r3, #8
 800f81c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f81e:	2308      	movs	r3, #8
 800f820:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	689b      	ldr	r3, [r3, #8]
 800f828:	0e5b      	lsrs	r3, r3, #25
 800f82a:	b2db      	uxtb	r3, r3
 800f82c:	f003 0307 	and.w	r3, r3, #7
 800f830:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	681b      	ldr	r3, [r3, #0]
 800f836:	689b      	ldr	r3, [r3, #8]
 800f838:	0f5b      	lsrs	r3, r3, #29
 800f83a:	b2db      	uxtb	r3, r3
 800f83c:	f003 0307 	and.w	r3, r3, #7
 800f840:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f842:	7bbb      	ldrb	r3, [r7, #14]
 800f844:	7b3a      	ldrb	r2, [r7, #12]
 800f846:	4911      	ldr	r1, [pc, #68]	; (800f88c <UARTEx_SetNbDataToProcess+0x94>)
 800f848:	5c8a      	ldrb	r2, [r1, r2]
 800f84a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f84e:	7b3a      	ldrb	r2, [r7, #12]
 800f850:	490f      	ldr	r1, [pc, #60]	; (800f890 <UARTEx_SetNbDataToProcess+0x98>)
 800f852:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f854:	fb93 f3f2 	sdiv	r3, r3, r2
 800f858:	b29a      	uxth	r2, r3
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f860:	7bfb      	ldrb	r3, [r7, #15]
 800f862:	7b7a      	ldrb	r2, [r7, #13]
 800f864:	4909      	ldr	r1, [pc, #36]	; (800f88c <UARTEx_SetNbDataToProcess+0x94>)
 800f866:	5c8a      	ldrb	r2, [r1, r2]
 800f868:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f86c:	7b7a      	ldrb	r2, [r7, #13]
 800f86e:	4908      	ldr	r1, [pc, #32]	; (800f890 <UARTEx_SetNbDataToProcess+0x98>)
 800f870:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f872:	fb93 f3f2 	sdiv	r3, r3, r2
 800f876:	b29a      	uxth	r2, r3
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f87e:	bf00      	nop
 800f880:	3714      	adds	r7, #20
 800f882:	46bd      	mov	sp, r7
 800f884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f888:	4770      	bx	lr
 800f88a:	bf00      	nop
 800f88c:	08019220 	.word	0x08019220
 800f890:	08019228 	.word	0x08019228

0800f894 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800f894:	b480      	push	{r7}
 800f896:	b085      	sub	sp, #20
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f8a4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f8a8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	b29a      	uxth	r2, r3
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f8b4:	2300      	movs	r3, #0
}
 800f8b6:	4618      	mov	r0, r3
 800f8b8:	3714      	adds	r7, #20
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr

0800f8c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f8c2:	b480      	push	{r7}
 800f8c4:	b085      	sub	sp, #20
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f8ca:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800f8ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800f8d6:	b29a      	uxth	r2, r3
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	b29b      	uxth	r3, r3
 800f8dc:	43db      	mvns	r3, r3
 800f8de:	b29b      	uxth	r3, r3
 800f8e0:	4013      	ands	r3, r2
 800f8e2:	b29a      	uxth	r2, r3
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800f8ea:	2300      	movs	r3, #0
}
 800f8ec:	4618      	mov	r0, r3
 800f8ee:	3714      	adds	r7, #20
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr

0800f8f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f8f8:	b480      	push	{r7}
 800f8fa:	b085      	sub	sp, #20
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	60f8      	str	r0, [r7, #12]
 800f900:	1d3b      	adds	r3, r7, #4
 800f902:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2201      	movs	r2, #1
 800f90a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2200      	movs	r2, #0
 800f912:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800f926:	2300      	movs	r3, #0
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3714      	adds	r7, #20
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr

0800f934 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800f934:	b480      	push	{r7}
 800f936:	b09d      	sub	sp, #116	; 0x74
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800f93e:	2300      	movs	r3, #0
 800f940:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800f944:	687a      	ldr	r2, [r7, #4]
 800f946:	683b      	ldr	r3, [r7, #0]
 800f948:	781b      	ldrb	r3, [r3, #0]
 800f94a:	009b      	lsls	r3, r3, #2
 800f94c:	4413      	add	r3, r2
 800f94e:	881b      	ldrh	r3, [r3, #0]
 800f950:	b29b      	uxth	r3, r3
 800f952:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800f956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f95a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800f95e:	683b      	ldr	r3, [r7, #0]
 800f960:	78db      	ldrb	r3, [r3, #3]
 800f962:	2b03      	cmp	r3, #3
 800f964:	d81f      	bhi.n	800f9a6 <USB_ActivateEndpoint+0x72>
 800f966:	a201      	add	r2, pc, #4	; (adr r2, 800f96c <USB_ActivateEndpoint+0x38>)
 800f968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f96c:	0800f97d 	.word	0x0800f97d
 800f970:	0800f999 	.word	0x0800f999
 800f974:	0800f9af 	.word	0x0800f9af
 800f978:	0800f98b 	.word	0x0800f98b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800f97c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f980:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f984:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f988:	e012      	b.n	800f9b0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800f98a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f98e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800f992:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f996:	e00b      	b.n	800f9b0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800f998:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f99c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f9a0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800f9a4:	e004      	b.n	800f9b0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800f9a6:	2301      	movs	r3, #1
 800f9a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 800f9ac:	e000      	b.n	800f9b0 <USB_ActivateEndpoint+0x7c>
      break;
 800f9ae:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800f9b0:	687a      	ldr	r2, [r7, #4]
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	781b      	ldrb	r3, [r3, #0]
 800f9b6:	009b      	lsls	r3, r3, #2
 800f9b8:	441a      	add	r2, r3
 800f9ba:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800f9be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800f9c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800f9c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f9ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800f9d2:	687a      	ldr	r2, [r7, #4]
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	009b      	lsls	r3, r3, #2
 800f9da:	4413      	add	r3, r2
 800f9dc:	881b      	ldrh	r3, [r3, #0]
 800f9de:	b29b      	uxth	r3, r3
 800f9e0:	b21b      	sxth	r3, r3
 800f9e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f9e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f9ea:	b21a      	sxth	r2, r3
 800f9ec:	683b      	ldr	r3, [r7, #0]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	b21b      	sxth	r3, r3
 800f9f2:	4313      	orrs	r3, r2
 800f9f4:	b21b      	sxth	r3, r3
 800f9f6:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800f9fa:	687a      	ldr	r2, [r7, #4]
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	781b      	ldrb	r3, [r3, #0]
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	441a      	add	r2, r3
 800fa04:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800fa08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fa0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fa10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fa14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fa18:	b29b      	uxth	r3, r3
 800fa1a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800fa1c:	683b      	ldr	r3, [r7, #0]
 800fa1e:	7b1b      	ldrb	r3, [r3, #12]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	f040 8178 	bne.w	800fd16 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	785b      	ldrb	r3, [r3, #1]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	f000 8084 	beq.w	800fb38 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	61bb      	str	r3, [r7, #24]
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fa3a:	b29b      	uxth	r3, r3
 800fa3c:	461a      	mov	r2, r3
 800fa3e:	69bb      	ldr	r3, [r7, #24]
 800fa40:	4413      	add	r3, r2
 800fa42:	61bb      	str	r3, [r7, #24]
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	00da      	lsls	r2, r3, #3
 800fa4a:	69bb      	ldr	r3, [r7, #24]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fa52:	617b      	str	r3, [r7, #20]
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	88db      	ldrh	r3, [r3, #6]
 800fa58:	085b      	lsrs	r3, r3, #1
 800fa5a:	b29b      	uxth	r3, r3
 800fa5c:	005b      	lsls	r3, r3, #1
 800fa5e:	b29a      	uxth	r2, r3
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	781b      	ldrb	r3, [r3, #0]
 800fa6a:	009b      	lsls	r3, r3, #2
 800fa6c:	4413      	add	r3, r2
 800fa6e:	881b      	ldrh	r3, [r3, #0]
 800fa70:	827b      	strh	r3, [r7, #18]
 800fa72:	8a7b      	ldrh	r3, [r7, #18]
 800fa74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d01b      	beq.n	800fab4 <USB_ActivateEndpoint+0x180>
 800fa7c:	687a      	ldr	r2, [r7, #4]
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	781b      	ldrb	r3, [r3, #0]
 800fa82:	009b      	lsls	r3, r3, #2
 800fa84:	4413      	add	r3, r2
 800fa86:	881b      	ldrh	r3, [r3, #0]
 800fa88:	b29b      	uxth	r3, r3
 800fa8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fa8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa92:	823b      	strh	r3, [r7, #16]
 800fa94:	687a      	ldr	r2, [r7, #4]
 800fa96:	683b      	ldr	r3, [r7, #0]
 800fa98:	781b      	ldrb	r3, [r3, #0]
 800fa9a:	009b      	lsls	r3, r3, #2
 800fa9c:	441a      	add	r2, r3
 800fa9e:	8a3b      	ldrh	r3, [r7, #16]
 800faa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800faa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800faa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800faac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fab4:	683b      	ldr	r3, [r7, #0]
 800fab6:	78db      	ldrb	r3, [r3, #3]
 800fab8:	2b01      	cmp	r3, #1
 800faba:	d020      	beq.n	800fafe <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	781b      	ldrb	r3, [r3, #0]
 800fac2:	009b      	lsls	r3, r3, #2
 800fac4:	4413      	add	r3, r2
 800fac6:	881b      	ldrh	r3, [r3, #0]
 800fac8:	b29b      	uxth	r3, r3
 800faca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800face:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fad2:	81bb      	strh	r3, [r7, #12]
 800fad4:	89bb      	ldrh	r3, [r7, #12]
 800fad6:	f083 0320 	eor.w	r3, r3, #32
 800fada:	81bb      	strh	r3, [r7, #12]
 800fadc:	687a      	ldr	r2, [r7, #4]
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	009b      	lsls	r3, r3, #2
 800fae4:	441a      	add	r2, r3
 800fae6:	89bb      	ldrh	r3, [r7, #12]
 800fae8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800faec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800faf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800faf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faf8:	b29b      	uxth	r3, r3
 800fafa:	8013      	strh	r3, [r2, #0]
 800fafc:	e2d5      	b.n	80100aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fafe:	687a      	ldr	r2, [r7, #4]
 800fb00:	683b      	ldr	r3, [r7, #0]
 800fb02:	781b      	ldrb	r3, [r3, #0]
 800fb04:	009b      	lsls	r3, r3, #2
 800fb06:	4413      	add	r3, r2
 800fb08:	881b      	ldrh	r3, [r3, #0]
 800fb0a:	b29b      	uxth	r3, r3
 800fb0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fb10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb14:	81fb      	strh	r3, [r7, #14]
 800fb16:	687a      	ldr	r2, [r7, #4]
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	781b      	ldrb	r3, [r3, #0]
 800fb1c:	009b      	lsls	r3, r3, #2
 800fb1e:	441a      	add	r2, r3
 800fb20:	89fb      	ldrh	r3, [r7, #14]
 800fb22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fb26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fb2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fb2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fb32:	b29b      	uxth	r3, r3
 800fb34:	8013      	strh	r3, [r2, #0]
 800fb36:	e2b8      	b.n	80100aa <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	633b      	str	r3, [r7, #48]	; 0x30
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb42:	b29b      	uxth	r3, r3
 800fb44:	461a      	mov	r2, r3
 800fb46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb48:	4413      	add	r3, r2
 800fb4a:	633b      	str	r3, [r7, #48]	; 0x30
 800fb4c:	683b      	ldr	r3, [r7, #0]
 800fb4e:	781b      	ldrb	r3, [r3, #0]
 800fb50:	00da      	lsls	r2, r3, #3
 800fb52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fb54:	4413      	add	r3, r2
 800fb56:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fb5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	88db      	ldrh	r3, [r3, #6]
 800fb60:	085b      	lsrs	r3, r3, #1
 800fb62:	b29b      	uxth	r3, r3
 800fb64:	005b      	lsls	r3, r3, #1
 800fb66:	b29a      	uxth	r2, r3
 800fb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb6a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fb76:	b29b      	uxth	r3, r3
 800fb78:	461a      	mov	r2, r3
 800fb7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb7c:	4413      	add	r3, r2
 800fb7e:	62bb      	str	r3, [r7, #40]	; 0x28
 800fb80:	683b      	ldr	r3, [r7, #0]
 800fb82:	781b      	ldrb	r3, [r3, #0]
 800fb84:	00da      	lsls	r2, r3, #3
 800fb86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb88:	4413      	add	r3, r2
 800fb8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800fb8e:	627b      	str	r3, [r7, #36]	; 0x24
 800fb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb92:	881b      	ldrh	r3, [r3, #0]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800fb9a:	b29a      	uxth	r2, r3
 800fb9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb9e:	801a      	strh	r2, [r3, #0]
 800fba0:	683b      	ldr	r3, [r7, #0]
 800fba2:	691b      	ldr	r3, [r3, #16]
 800fba4:	2b3e      	cmp	r3, #62	; 0x3e
 800fba6:	d91d      	bls.n	800fbe4 <USB_ActivateEndpoint+0x2b0>
 800fba8:	683b      	ldr	r3, [r7, #0]
 800fbaa:	691b      	ldr	r3, [r3, #16]
 800fbac:	095b      	lsrs	r3, r3, #5
 800fbae:	66bb      	str	r3, [r7, #104]	; 0x68
 800fbb0:	683b      	ldr	r3, [r7, #0]
 800fbb2:	691b      	ldr	r3, [r3, #16]
 800fbb4:	f003 031f 	and.w	r3, r3, #31
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d102      	bne.n	800fbc2 <USB_ActivateEndpoint+0x28e>
 800fbbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbbe:	3b01      	subs	r3, #1
 800fbc0:	66bb      	str	r3, [r7, #104]	; 0x68
 800fbc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbc4:	881b      	ldrh	r3, [r3, #0]
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fbca:	b29b      	uxth	r3, r3
 800fbcc:	029b      	lsls	r3, r3, #10
 800fbce:	b29b      	uxth	r3, r3
 800fbd0:	4313      	orrs	r3, r2
 800fbd2:	b29b      	uxth	r3, r3
 800fbd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbe0:	801a      	strh	r2, [r3, #0]
 800fbe2:	e026      	b.n	800fc32 <USB_ActivateEndpoint+0x2fe>
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	691b      	ldr	r3, [r3, #16]
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	d10a      	bne.n	800fc02 <USB_ActivateEndpoint+0x2ce>
 800fbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbee:	881b      	ldrh	r3, [r3, #0]
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800fbf6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbfe:	801a      	strh	r2, [r3, #0]
 800fc00:	e017      	b.n	800fc32 <USB_ActivateEndpoint+0x2fe>
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	691b      	ldr	r3, [r3, #16]
 800fc06:	085b      	lsrs	r3, r3, #1
 800fc08:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc0a:	683b      	ldr	r3, [r7, #0]
 800fc0c:	691b      	ldr	r3, [r3, #16]
 800fc0e:	f003 0301 	and.w	r3, r3, #1
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d002      	beq.n	800fc1c <USB_ActivateEndpoint+0x2e8>
 800fc16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc18:	3301      	adds	r3, #1
 800fc1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1e:	881b      	ldrh	r3, [r3, #0]
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fc24:	b29b      	uxth	r3, r3
 800fc26:	029b      	lsls	r3, r3, #10
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	4313      	orrs	r3, r2
 800fc2c:	b29a      	uxth	r2, r3
 800fc2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	683b      	ldr	r3, [r7, #0]
 800fc36:	781b      	ldrb	r3, [r3, #0]
 800fc38:	009b      	lsls	r3, r3, #2
 800fc3a:	4413      	add	r3, r2
 800fc3c:	881b      	ldrh	r3, [r3, #0]
 800fc3e:	847b      	strh	r3, [r7, #34]	; 0x22
 800fc40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d01b      	beq.n	800fc82 <USB_ActivateEndpoint+0x34e>
 800fc4a:	687a      	ldr	r2, [r7, #4]
 800fc4c:	683b      	ldr	r3, [r7, #0]
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	009b      	lsls	r3, r3, #2
 800fc52:	4413      	add	r3, r2
 800fc54:	881b      	ldrh	r3, [r3, #0]
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fc5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fc60:	843b      	strh	r3, [r7, #32]
 800fc62:	687a      	ldr	r2, [r7, #4]
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	009b      	lsls	r3, r3, #2
 800fc6a:	441a      	add	r2, r3
 800fc6c:	8c3b      	ldrh	r3, [r7, #32]
 800fc6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fc72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fc76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fc7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fc7e:	b29b      	uxth	r3, r3
 800fc80:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800fc82:	683b      	ldr	r3, [r7, #0]
 800fc84:	781b      	ldrb	r3, [r3, #0]
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d124      	bne.n	800fcd4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800fc8a:	687a      	ldr	r2, [r7, #4]
 800fc8c:	683b      	ldr	r3, [r7, #0]
 800fc8e:	781b      	ldrb	r3, [r3, #0]
 800fc90:	009b      	lsls	r3, r3, #2
 800fc92:	4413      	add	r3, r2
 800fc94:	881b      	ldrh	r3, [r3, #0]
 800fc96:	b29b      	uxth	r3, r3
 800fc98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fc9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fca0:	83bb      	strh	r3, [r7, #28]
 800fca2:	8bbb      	ldrh	r3, [r7, #28]
 800fca4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fca8:	83bb      	strh	r3, [r7, #28]
 800fcaa:	8bbb      	ldrh	r3, [r7, #28]
 800fcac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fcb0:	83bb      	strh	r3, [r7, #28]
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	683b      	ldr	r3, [r7, #0]
 800fcb6:	781b      	ldrb	r3, [r3, #0]
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	441a      	add	r2, r3
 800fcbc:	8bbb      	ldrh	r3, [r7, #28]
 800fcbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fcc2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fcc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fcca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	8013      	strh	r3, [r2, #0]
 800fcd2:	e1ea      	b.n	80100aa <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800fcd4:	687a      	ldr	r2, [r7, #4]
 800fcd6:	683b      	ldr	r3, [r7, #0]
 800fcd8:	781b      	ldrb	r3, [r3, #0]
 800fcda:	009b      	lsls	r3, r3, #2
 800fcdc:	4413      	add	r3, r2
 800fcde:	881b      	ldrh	r3, [r3, #0]
 800fce0:	b29b      	uxth	r3, r3
 800fce2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fcea:	83fb      	strh	r3, [r7, #30]
 800fcec:	8bfb      	ldrh	r3, [r7, #30]
 800fcee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fcf2:	83fb      	strh	r3, [r7, #30]
 800fcf4:	687a      	ldr	r2, [r7, #4]
 800fcf6:	683b      	ldr	r3, [r7, #0]
 800fcf8:	781b      	ldrb	r3, [r3, #0]
 800fcfa:	009b      	lsls	r3, r3, #2
 800fcfc:	441a      	add	r2, r3
 800fcfe:	8bfb      	ldrh	r3, [r7, #30]
 800fd00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd10:	b29b      	uxth	r3, r3
 800fd12:	8013      	strh	r3, [r2, #0]
 800fd14:	e1c9      	b.n	80100aa <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800fd16:	683b      	ldr	r3, [r7, #0]
 800fd18:	78db      	ldrb	r3, [r3, #3]
 800fd1a:	2b02      	cmp	r3, #2
 800fd1c:	d11e      	bne.n	800fd5c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	781b      	ldrb	r3, [r3, #0]
 800fd24:	009b      	lsls	r3, r3, #2
 800fd26:	4413      	add	r3, r2
 800fd28:	881b      	ldrh	r3, [r3, #0]
 800fd2a:	b29b      	uxth	r3, r3
 800fd2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fd30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd34:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800fd38:	687a      	ldr	r2, [r7, #4]
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	781b      	ldrb	r3, [r3, #0]
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	441a      	add	r2, r3
 800fd42:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800fd46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd4e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800fd52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd56:	b29b      	uxth	r3, r3
 800fd58:	8013      	strh	r3, [r2, #0]
 800fd5a:	e01d      	b.n	800fd98 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800fd5c:	687a      	ldr	r2, [r7, #4]
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	009b      	lsls	r3, r3, #2
 800fd64:	4413      	add	r3, r2
 800fd66:	881b      	ldrh	r3, [r3, #0]
 800fd68:	b29b      	uxth	r3, r3
 800fd6a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800fd6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fd72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800fd76:	687a      	ldr	r2, [r7, #4]
 800fd78:	683b      	ldr	r3, [r7, #0]
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	441a      	add	r2, r3
 800fd80:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800fd84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fd88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fd8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fd90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fda2:	b29b      	uxth	r3, r3
 800fda4:	461a      	mov	r2, r3
 800fda6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fda8:	4413      	add	r3, r2
 800fdaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fdac:	683b      	ldr	r3, [r7, #0]
 800fdae:	781b      	ldrb	r3, [r3, #0]
 800fdb0:	00da      	lsls	r2, r3, #3
 800fdb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fdb4:	4413      	add	r3, r2
 800fdb6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fdba:	65bb      	str	r3, [r7, #88]	; 0x58
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	891b      	ldrh	r3, [r3, #8]
 800fdc0:	085b      	lsrs	r3, r3, #1
 800fdc2:	b29b      	uxth	r3, r3
 800fdc4:	005b      	lsls	r3, r3, #1
 800fdc6:	b29a      	uxth	r2, r3
 800fdc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fdca:	801a      	strh	r2, [r3, #0]
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	657b      	str	r3, [r7, #84]	; 0x54
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800fdd6:	b29b      	uxth	r3, r3
 800fdd8:	461a      	mov	r2, r3
 800fdda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fddc:	4413      	add	r3, r2
 800fdde:	657b      	str	r3, [r7, #84]	; 0x54
 800fde0:	683b      	ldr	r3, [r7, #0]
 800fde2:	781b      	ldrb	r3, [r3, #0]
 800fde4:	00da      	lsls	r2, r3, #3
 800fde6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800fde8:	4413      	add	r3, r2
 800fdea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800fdee:	653b      	str	r3, [r7, #80]	; 0x50
 800fdf0:	683b      	ldr	r3, [r7, #0]
 800fdf2:	895b      	ldrh	r3, [r3, #10]
 800fdf4:	085b      	lsrs	r3, r3, #1
 800fdf6:	b29b      	uxth	r3, r3
 800fdf8:	005b      	lsls	r3, r3, #1
 800fdfa:	b29a      	uxth	r2, r3
 800fdfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdfe:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	785b      	ldrb	r3, [r3, #1]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f040 8093 	bne.w	800ff30 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800fe0a:	687a      	ldr	r2, [r7, #4]
 800fe0c:	683b      	ldr	r3, [r7, #0]
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	009b      	lsls	r3, r3, #2
 800fe12:	4413      	add	r3, r2
 800fe14:	881b      	ldrh	r3, [r3, #0]
 800fe16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800fe1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800fe1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d01b      	beq.n	800fe5e <USB_ActivateEndpoint+0x52a>
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	009b      	lsls	r3, r3, #2
 800fe2e:	4413      	add	r3, r2
 800fe30:	881b      	ldrh	r3, [r3, #0]
 800fe32:	b29b      	uxth	r3, r3
 800fe34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe3c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800fe3e:	687a      	ldr	r2, [r7, #4]
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	781b      	ldrb	r3, [r3, #0]
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	441a      	add	r2, r3
 800fe48:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800fe4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fe52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800fe56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe5a:	b29b      	uxth	r3, r3
 800fe5c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800fe5e:	687a      	ldr	r2, [r7, #4]
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	009b      	lsls	r3, r3, #2
 800fe66:	4413      	add	r3, r2
 800fe68:	881b      	ldrh	r3, [r3, #0]
 800fe6a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800fe6c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800fe6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d01b      	beq.n	800feae <USB_ActivateEndpoint+0x57a>
 800fe76:	687a      	ldr	r2, [r7, #4]
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	009b      	lsls	r3, r3, #2
 800fe7e:	4413      	add	r3, r2
 800fe80:	881b      	ldrh	r3, [r3, #0]
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fe88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fe8c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800fe8e:	687a      	ldr	r2, [r7, #4]
 800fe90:	683b      	ldr	r3, [r7, #0]
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	009b      	lsls	r3, r3, #2
 800fe96:	441a      	add	r2, r3
 800fe98:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800fe9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fe9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800fea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800fea6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800feaa:	b29b      	uxth	r3, r3
 800feac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	781b      	ldrb	r3, [r3, #0]
 800feb4:	009b      	lsls	r3, r3, #2
 800feb6:	4413      	add	r3, r2
 800feb8:	881b      	ldrh	r3, [r3, #0]
 800feba:	b29b      	uxth	r3, r3
 800febc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800fec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fec4:	873b      	strh	r3, [r7, #56]	; 0x38
 800fec6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fec8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800fecc:	873b      	strh	r3, [r7, #56]	; 0x38
 800fece:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fed0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800fed4:	873b      	strh	r3, [r7, #56]	; 0x38
 800fed6:	687a      	ldr	r2, [r7, #4]
 800fed8:	683b      	ldr	r3, [r7, #0]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	009b      	lsls	r3, r3, #2
 800fede:	441a      	add	r2, r3
 800fee0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800fee2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800fee6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800feea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800feee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fef2:	b29b      	uxth	r3, r3
 800fef4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800fef6:	687a      	ldr	r2, [r7, #4]
 800fef8:	683b      	ldr	r3, [r7, #0]
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	009b      	lsls	r3, r3, #2
 800fefe:	4413      	add	r3, r2
 800ff00:	881b      	ldrh	r3, [r3, #0]
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ff0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800ff0e:	687a      	ldr	r2, [r7, #4]
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	009b      	lsls	r3, r3, #2
 800ff16:	441a      	add	r2, r3
 800ff18:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff1a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff1e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ff26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff2a:	b29b      	uxth	r3, r3
 800ff2c:	8013      	strh	r3, [r2, #0]
 800ff2e:	e0bc      	b.n	80100aa <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ff30:	687a      	ldr	r2, [r7, #4]
 800ff32:	683b      	ldr	r3, [r7, #0]
 800ff34:	781b      	ldrb	r3, [r3, #0]
 800ff36:	009b      	lsls	r3, r3, #2
 800ff38:	4413      	add	r3, r2
 800ff3a:	881b      	ldrh	r3, [r3, #0]
 800ff3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800ff40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ff44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d01d      	beq.n	800ff88 <USB_ActivateEndpoint+0x654>
 800ff4c:	687a      	ldr	r2, [r7, #4]
 800ff4e:	683b      	ldr	r3, [r7, #0]
 800ff50:	781b      	ldrb	r3, [r3, #0]
 800ff52:	009b      	lsls	r3, r3, #2
 800ff54:	4413      	add	r3, r2
 800ff56:	881b      	ldrh	r3, [r3, #0]
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ff5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ff62:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800ff66:	687a      	ldr	r2, [r7, #4]
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	009b      	lsls	r3, r3, #2
 800ff6e:	441a      	add	r2, r3
 800ff70:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800ff74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ff78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ff7c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ff80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff84:	b29b      	uxth	r3, r3
 800ff86:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ff88:	687a      	ldr	r2, [r7, #4]
 800ff8a:	683b      	ldr	r3, [r7, #0]
 800ff8c:	781b      	ldrb	r3, [r3, #0]
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	4413      	add	r3, r2
 800ff92:	881b      	ldrh	r3, [r3, #0]
 800ff94:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800ff98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800ff9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ffa0:	2b00      	cmp	r3, #0
 800ffa2:	d01d      	beq.n	800ffe0 <USB_ActivateEndpoint+0x6ac>
 800ffa4:	687a      	ldr	r2, [r7, #4]
 800ffa6:	683b      	ldr	r3, [r7, #0]
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	009b      	lsls	r3, r3, #2
 800ffac:	4413      	add	r3, r2
 800ffae:	881b      	ldrh	r3, [r3, #0]
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ffb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ffba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800ffbe:	687a      	ldr	r2, [r7, #4]
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	781b      	ldrb	r3, [r3, #0]
 800ffc4:	009b      	lsls	r3, r3, #2
 800ffc6:	441a      	add	r2, r3
 800ffc8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800ffcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ffd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ffd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ffd8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ffe0:	683b      	ldr	r3, [r7, #0]
 800ffe2:	78db      	ldrb	r3, [r3, #3]
 800ffe4:	2b01      	cmp	r3, #1
 800ffe6:	d024      	beq.n	8010032 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800ffe8:	687a      	ldr	r2, [r7, #4]
 800ffea:	683b      	ldr	r3, [r7, #0]
 800ffec:	781b      	ldrb	r3, [r3, #0]
 800ffee:	009b      	lsls	r3, r3, #2
 800fff0:	4413      	add	r3, r2
 800fff2:	881b      	ldrh	r3, [r3, #0]
 800fff4:	b29b      	uxth	r3, r3
 800fff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800fffa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fffe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8010002:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010006:	f083 0320 	eor.w	r3, r3, #32
 801000a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	781b      	ldrb	r3, [r3, #0]
 8010014:	009b      	lsls	r3, r3, #2
 8010016:	441a      	add	r2, r3
 8010018:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801001c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010020:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010024:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801002c:	b29b      	uxth	r3, r3
 801002e:	8013      	strh	r3, [r2, #0]
 8010030:	e01d      	b.n	801006e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010032:	687a      	ldr	r2, [r7, #4]
 8010034:	683b      	ldr	r3, [r7, #0]
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	009b      	lsls	r3, r3, #2
 801003a:	4413      	add	r3, r2
 801003c:	881b      	ldrh	r3, [r3, #0]
 801003e:	b29b      	uxth	r3, r3
 8010040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010048:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	009b      	lsls	r3, r3, #2
 8010054:	441a      	add	r2, r3
 8010056:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801005a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801005e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801006a:	b29b      	uxth	r3, r3
 801006c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 801006e:	687a      	ldr	r2, [r7, #4]
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	781b      	ldrb	r3, [r3, #0]
 8010074:	009b      	lsls	r3, r3, #2
 8010076:	4413      	add	r3, r2
 8010078:	881b      	ldrh	r3, [r3, #0]
 801007a:	b29b      	uxth	r3, r3
 801007c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010084:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010088:	687a      	ldr	r2, [r7, #4]
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	781b      	ldrb	r3, [r3, #0]
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	441a      	add	r2, r3
 8010092:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801009a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801009e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80100a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100a6:	b29b      	uxth	r3, r3
 80100a8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80100aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80100ae:	4618      	mov	r0, r3
 80100b0:	3774      	adds	r7, #116	; 0x74
 80100b2:	46bd      	mov	sp, r7
 80100b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100b8:	4770      	bx	lr
 80100ba:	bf00      	nop

080100bc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80100bc:	b480      	push	{r7}
 80100be:	b08d      	sub	sp, #52	; 0x34
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80100c6:	683b      	ldr	r3, [r7, #0]
 80100c8:	7b1b      	ldrb	r3, [r3, #12]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	f040 808e 	bne.w	80101ec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80100d0:	683b      	ldr	r3, [r7, #0]
 80100d2:	785b      	ldrb	r3, [r3, #1]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d044      	beq.n	8010162 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	4413      	add	r3, r2
 80100e2:	881b      	ldrh	r3, [r3, #0]
 80100e4:	81bb      	strh	r3, [r7, #12]
 80100e6:	89bb      	ldrh	r3, [r7, #12]
 80100e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d01b      	beq.n	8010128 <USB_DeactivateEndpoint+0x6c>
 80100f0:	687a      	ldr	r2, [r7, #4]
 80100f2:	683b      	ldr	r3, [r7, #0]
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	009b      	lsls	r3, r3, #2
 80100f8:	4413      	add	r3, r2
 80100fa:	881b      	ldrh	r3, [r3, #0]
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010106:	817b      	strh	r3, [r7, #10]
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	009b      	lsls	r3, r3, #2
 8010110:	441a      	add	r2, r3
 8010112:	897b      	ldrh	r3, [r7, #10]
 8010114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801011c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010120:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010124:	b29b      	uxth	r3, r3
 8010126:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010128:	687a      	ldr	r2, [r7, #4]
 801012a:	683b      	ldr	r3, [r7, #0]
 801012c:	781b      	ldrb	r3, [r3, #0]
 801012e:	009b      	lsls	r3, r3, #2
 8010130:	4413      	add	r3, r2
 8010132:	881b      	ldrh	r3, [r3, #0]
 8010134:	b29b      	uxth	r3, r3
 8010136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801013a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801013e:	813b      	strh	r3, [r7, #8]
 8010140:	687a      	ldr	r2, [r7, #4]
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	781b      	ldrb	r3, [r3, #0]
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	441a      	add	r2, r3
 801014a:	893b      	ldrh	r3, [r7, #8]
 801014c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010150:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010154:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801015c:	b29b      	uxth	r3, r3
 801015e:	8013      	strh	r3, [r2, #0]
 8010160:	e192      	b.n	8010488 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010162:	687a      	ldr	r2, [r7, #4]
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	4413      	add	r3, r2
 801016c:	881b      	ldrh	r3, [r3, #0]
 801016e:	827b      	strh	r3, [r7, #18]
 8010170:	8a7b      	ldrh	r3, [r7, #18]
 8010172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010176:	2b00      	cmp	r3, #0
 8010178:	d01b      	beq.n	80101b2 <USB_DeactivateEndpoint+0xf6>
 801017a:	687a      	ldr	r2, [r7, #4]
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	781b      	ldrb	r3, [r3, #0]
 8010180:	009b      	lsls	r3, r3, #2
 8010182:	4413      	add	r3, r2
 8010184:	881b      	ldrh	r3, [r3, #0]
 8010186:	b29b      	uxth	r3, r3
 8010188:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801018c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010190:	823b      	strh	r3, [r7, #16]
 8010192:	687a      	ldr	r2, [r7, #4]
 8010194:	683b      	ldr	r3, [r7, #0]
 8010196:	781b      	ldrb	r3, [r3, #0]
 8010198:	009b      	lsls	r3, r3, #2
 801019a:	441a      	add	r2, r3
 801019c:	8a3b      	ldrh	r3, [r7, #16]
 801019e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80101aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80101b2:	687a      	ldr	r2, [r7, #4]
 80101b4:	683b      	ldr	r3, [r7, #0]
 80101b6:	781b      	ldrb	r3, [r3, #0]
 80101b8:	009b      	lsls	r3, r3, #2
 80101ba:	4413      	add	r3, r2
 80101bc:	881b      	ldrh	r3, [r3, #0]
 80101be:	b29b      	uxth	r3, r3
 80101c0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80101c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80101c8:	81fb      	strh	r3, [r7, #14]
 80101ca:	687a      	ldr	r2, [r7, #4]
 80101cc:	683b      	ldr	r3, [r7, #0]
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	009b      	lsls	r3, r3, #2
 80101d2:	441a      	add	r2, r3
 80101d4:	89fb      	ldrh	r3, [r7, #14]
 80101d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80101da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80101de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80101e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	8013      	strh	r3, [r2, #0]
 80101ea:	e14d      	b.n	8010488 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	785b      	ldrb	r3, [r3, #1]
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	f040 80a5 	bne.w	8010340 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	683b      	ldr	r3, [r7, #0]
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	009b      	lsls	r3, r3, #2
 80101fe:	4413      	add	r3, r2
 8010200:	881b      	ldrh	r3, [r3, #0]
 8010202:	843b      	strh	r3, [r7, #32]
 8010204:	8c3b      	ldrh	r3, [r7, #32]
 8010206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801020a:	2b00      	cmp	r3, #0
 801020c:	d01b      	beq.n	8010246 <USB_DeactivateEndpoint+0x18a>
 801020e:	687a      	ldr	r2, [r7, #4]
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	781b      	ldrb	r3, [r3, #0]
 8010214:	009b      	lsls	r3, r3, #2
 8010216:	4413      	add	r3, r2
 8010218:	881b      	ldrh	r3, [r3, #0]
 801021a:	b29b      	uxth	r3, r3
 801021c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010224:	83fb      	strh	r3, [r7, #30]
 8010226:	687a      	ldr	r2, [r7, #4]
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	781b      	ldrb	r3, [r3, #0]
 801022c:	009b      	lsls	r3, r3, #2
 801022e:	441a      	add	r2, r3
 8010230:	8bfb      	ldrh	r3, [r7, #30]
 8010232:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010236:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801023a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 801023e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010242:	b29b      	uxth	r3, r3
 8010244:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010246:	687a      	ldr	r2, [r7, #4]
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	781b      	ldrb	r3, [r3, #0]
 801024c:	009b      	lsls	r3, r3, #2
 801024e:	4413      	add	r3, r2
 8010250:	881b      	ldrh	r3, [r3, #0]
 8010252:	83bb      	strh	r3, [r7, #28]
 8010254:	8bbb      	ldrh	r3, [r7, #28]
 8010256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801025a:	2b00      	cmp	r3, #0
 801025c:	d01b      	beq.n	8010296 <USB_DeactivateEndpoint+0x1da>
 801025e:	687a      	ldr	r2, [r7, #4]
 8010260:	683b      	ldr	r3, [r7, #0]
 8010262:	781b      	ldrb	r3, [r3, #0]
 8010264:	009b      	lsls	r3, r3, #2
 8010266:	4413      	add	r3, r2
 8010268:	881b      	ldrh	r3, [r3, #0]
 801026a:	b29b      	uxth	r3, r3
 801026c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010274:	837b      	strh	r3, [r7, #26]
 8010276:	687a      	ldr	r2, [r7, #4]
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	781b      	ldrb	r3, [r3, #0]
 801027c:	009b      	lsls	r3, r3, #2
 801027e:	441a      	add	r2, r3
 8010280:	8b7b      	ldrh	r3, [r7, #26]
 8010282:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010286:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801028a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801028e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8010292:	b29b      	uxth	r3, r3
 8010294:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8010296:	687a      	ldr	r2, [r7, #4]
 8010298:	683b      	ldr	r3, [r7, #0]
 801029a:	781b      	ldrb	r3, [r3, #0]
 801029c:	009b      	lsls	r3, r3, #2
 801029e:	4413      	add	r3, r2
 80102a0:	881b      	ldrh	r3, [r3, #0]
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80102a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102ac:	833b      	strh	r3, [r7, #24]
 80102ae:	687a      	ldr	r2, [r7, #4]
 80102b0:	683b      	ldr	r3, [r7, #0]
 80102b2:	781b      	ldrb	r3, [r3, #0]
 80102b4:	009b      	lsls	r3, r3, #2
 80102b6:	441a      	add	r2, r3
 80102b8:	8b3b      	ldrh	r3, [r7, #24]
 80102ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102c6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80102ce:	687a      	ldr	r2, [r7, #4]
 80102d0:	683b      	ldr	r3, [r7, #0]
 80102d2:	781b      	ldrb	r3, [r3, #0]
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	4413      	add	r3, r2
 80102d8:	881b      	ldrh	r3, [r3, #0]
 80102da:	b29b      	uxth	r3, r3
 80102dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80102e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80102e4:	82fb      	strh	r3, [r7, #22]
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	683b      	ldr	r3, [r7, #0]
 80102ea:	781b      	ldrb	r3, [r3, #0]
 80102ec:	009b      	lsls	r3, r3, #2
 80102ee:	441a      	add	r2, r3
 80102f0:	8afb      	ldrh	r3, [r7, #22]
 80102f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80102f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80102fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80102fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010302:	b29b      	uxth	r3, r3
 8010304:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010306:	687a      	ldr	r2, [r7, #4]
 8010308:	683b      	ldr	r3, [r7, #0]
 801030a:	781b      	ldrb	r3, [r3, #0]
 801030c:	009b      	lsls	r3, r3, #2
 801030e:	4413      	add	r3, r2
 8010310:	881b      	ldrh	r3, [r3, #0]
 8010312:	b29b      	uxth	r3, r3
 8010314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8010318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801031c:	82bb      	strh	r3, [r7, #20]
 801031e:	687a      	ldr	r2, [r7, #4]
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	781b      	ldrb	r3, [r3, #0]
 8010324:	009b      	lsls	r3, r3, #2
 8010326:	441a      	add	r2, r3
 8010328:	8abb      	ldrh	r3, [r7, #20]
 801032a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801032e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801033a:	b29b      	uxth	r3, r3
 801033c:	8013      	strh	r3, [r2, #0]
 801033e:	e0a3      	b.n	8010488 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	683b      	ldr	r3, [r7, #0]
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	009b      	lsls	r3, r3, #2
 8010348:	4413      	add	r3, r2
 801034a:	881b      	ldrh	r3, [r3, #0]
 801034c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 801034e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010350:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010354:	2b00      	cmp	r3, #0
 8010356:	d01b      	beq.n	8010390 <USB_DeactivateEndpoint+0x2d4>
 8010358:	687a      	ldr	r2, [r7, #4]
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	4413      	add	r3, r2
 8010362:	881b      	ldrh	r3, [r3, #0]
 8010364:	b29b      	uxth	r3, r3
 8010366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801036a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801036e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8010370:	687a      	ldr	r2, [r7, #4]
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	781b      	ldrb	r3, [r3, #0]
 8010376:	009b      	lsls	r3, r3, #2
 8010378:	441a      	add	r2, r3
 801037a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801037c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010380:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010384:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010388:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801038c:	b29b      	uxth	r3, r3
 801038e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8010390:	687a      	ldr	r2, [r7, #4]
 8010392:	683b      	ldr	r3, [r7, #0]
 8010394:	781b      	ldrb	r3, [r3, #0]
 8010396:	009b      	lsls	r3, r3, #2
 8010398:	4413      	add	r3, r2
 801039a:	881b      	ldrh	r3, [r3, #0]
 801039c:	857b      	strh	r3, [r7, #42]	; 0x2a
 801039e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80103a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103a4:	2b00      	cmp	r3, #0
 80103a6:	d01b      	beq.n	80103e0 <USB_DeactivateEndpoint+0x324>
 80103a8:	687a      	ldr	r2, [r7, #4]
 80103aa:	683b      	ldr	r3, [r7, #0]
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	009b      	lsls	r3, r3, #2
 80103b0:	4413      	add	r3, r2
 80103b2:	881b      	ldrh	r3, [r3, #0]
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103be:	853b      	strh	r3, [r7, #40]	; 0x28
 80103c0:	687a      	ldr	r2, [r7, #4]
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	781b      	ldrb	r3, [r3, #0]
 80103c6:	009b      	lsls	r3, r3, #2
 80103c8:	441a      	add	r2, r3
 80103ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80103cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80103d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80103d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80103d8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80103dc:	b29b      	uxth	r3, r3
 80103de:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80103e0:	687a      	ldr	r2, [r7, #4]
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	781b      	ldrb	r3, [r3, #0]
 80103e6:	009b      	lsls	r3, r3, #2
 80103e8:	4413      	add	r3, r2
 80103ea:	881b      	ldrh	r3, [r3, #0]
 80103ec:	b29b      	uxth	r3, r3
 80103ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80103f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80103f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80103f8:	687a      	ldr	r2, [r7, #4]
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	781b      	ldrb	r3, [r3, #0]
 80103fe:	009b      	lsls	r3, r3, #2
 8010400:	441a      	add	r2, r3
 8010402:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010404:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010408:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801040c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8010410:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010414:	b29b      	uxth	r3, r3
 8010416:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8010418:	687a      	ldr	r2, [r7, #4]
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	009b      	lsls	r3, r3, #2
 8010420:	4413      	add	r3, r2
 8010422:	881b      	ldrh	r3, [r3, #0]
 8010424:	b29b      	uxth	r3, r3
 8010426:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 801042a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801042e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010430:	687a      	ldr	r2, [r7, #4]
 8010432:	683b      	ldr	r3, [r7, #0]
 8010434:	781b      	ldrb	r3, [r3, #0]
 8010436:	009b      	lsls	r3, r3, #2
 8010438:	441a      	add	r2, r3
 801043a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801043c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010440:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010444:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010448:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801044c:	b29b      	uxth	r3, r3
 801044e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8010450:	687a      	ldr	r2, [r7, #4]
 8010452:	683b      	ldr	r3, [r7, #0]
 8010454:	781b      	ldrb	r3, [r3, #0]
 8010456:	009b      	lsls	r3, r3, #2
 8010458:	4413      	add	r3, r2
 801045a:	881b      	ldrh	r3, [r3, #0]
 801045c:	b29b      	uxth	r3, r3
 801045e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8010462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010466:	847b      	strh	r3, [r7, #34]	; 0x22
 8010468:	687a      	ldr	r2, [r7, #4]
 801046a:	683b      	ldr	r3, [r7, #0]
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	441a      	add	r2, r3
 8010472:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010474:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010478:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 801047c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010480:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010484:	b29b      	uxth	r3, r3
 8010486:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8010488:	2300      	movs	r3, #0
}
 801048a:	4618      	mov	r0, r3
 801048c:	3734      	adds	r7, #52	; 0x34
 801048e:	46bd      	mov	sp, r7
 8010490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010494:	4770      	bx	lr

08010496 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8010496:	b580      	push	{r7, lr}
 8010498:	b0c2      	sub	sp, #264	; 0x108
 801049a:	af00      	add	r7, sp, #0
 801049c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80104a4:	6018      	str	r0, [r3, #0]
 80104a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104ae:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80104b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	785b      	ldrb	r3, [r3, #1]
 80104bc:	2b01      	cmp	r3, #1
 80104be:	f040 86b7 	bne.w	8011230 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80104c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	699a      	ldr	r2, [r3, #24]
 80104ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	691b      	ldr	r3, [r3, #16]
 80104da:	429a      	cmp	r2, r3
 80104dc:	d908      	bls.n	80104f0 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80104de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104e6:	681b      	ldr	r3, [r3, #0]
 80104e8:	691b      	ldr	r3, [r3, #16]
 80104ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80104ee:	e007      	b.n	8010500 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80104f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80104f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	699b      	ldr	r3, [r3, #24]
 80104fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8010500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010508:	681b      	ldr	r3, [r3, #0]
 801050a:	7b1b      	ldrb	r3, [r3, #12]
 801050c:	2b00      	cmp	r3, #0
 801050e:	d13a      	bne.n	8010586 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8010510:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010514:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	6959      	ldr	r1, [r3, #20]
 801051c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	88da      	ldrh	r2, [r3, #6]
 8010528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801052c:	b29b      	uxth	r3, r3
 801052e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010532:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010536:	6800      	ldr	r0, [r0, #0]
 8010538:	f001 fc98 	bl	8011e6c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801053c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	613b      	str	r3, [r7, #16]
 8010548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801054c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010556:	b29b      	uxth	r3, r3
 8010558:	461a      	mov	r2, r3
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	4413      	add	r3, r2
 801055e:	613b      	str	r3, [r7, #16]
 8010560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010564:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	781b      	ldrb	r3, [r3, #0]
 801056c:	00da      	lsls	r2, r3, #3
 801056e:	693b      	ldr	r3, [r7, #16]
 8010570:	4413      	add	r3, r2
 8010572:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010576:	60fb      	str	r3, [r7, #12]
 8010578:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801057c:	b29a      	uxth	r2, r3
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	801a      	strh	r2, [r3, #0]
 8010582:	f000 be1f 	b.w	80111c4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8010586:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801058a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	78db      	ldrb	r3, [r3, #3]
 8010592:	2b02      	cmp	r3, #2
 8010594:	f040 8462 	bne.w	8010e5c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8010598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801059c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	6a1a      	ldr	r2, [r3, #32]
 80105a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105ac:	681b      	ldr	r3, [r3, #0]
 80105ae:	691b      	ldr	r3, [r3, #16]
 80105b0:	429a      	cmp	r2, r3
 80105b2:	f240 83df 	bls.w	8010d74 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80105b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	009b      	lsls	r3, r3, #2
 80105ce:	4413      	add	r3, r2
 80105d0:	881b      	ldrh	r3, [r3, #0]
 80105d2:	b29b      	uxth	r3, r3
 80105d4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80105d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80105dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80105e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105e4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80105e8:	681a      	ldr	r2, [r3, #0]
 80105ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80105ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	781b      	ldrb	r3, [r3, #0]
 80105f6:	009b      	lsls	r3, r3, #2
 80105f8:	441a      	add	r2, r3
 80105fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80105fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010606:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 801060a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801060e:	b29b      	uxth	r3, r3
 8010610:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8010612:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010616:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801061a:	681b      	ldr	r3, [r3, #0]
 801061c:	6a1a      	ldr	r2, [r3, #32]
 801061e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010622:	1ad2      	subs	r2, r2, r3
 8010624:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010628:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801062c:	681b      	ldr	r3, [r3, #0]
 801062e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010638:	681a      	ldr	r2, [r3, #0]
 801063a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801063e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	781b      	ldrb	r3, [r3, #0]
 8010646:	009b      	lsls	r3, r3, #2
 8010648:	4413      	add	r3, r2
 801064a:	881b      	ldrh	r3, [r3, #0]
 801064c:	b29b      	uxth	r3, r3
 801064e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010652:	2b00      	cmp	r3, #0
 8010654:	f000 81c7 	beq.w	80109e6 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801065c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	633b      	str	r3, [r7, #48]	; 0x30
 8010664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801066c:	681b      	ldr	r3, [r3, #0]
 801066e:	785b      	ldrb	r3, [r3, #1]
 8010670:	2b00      	cmp	r3, #0
 8010672:	d177      	bne.n	8010764 <USB_EPStartXfer+0x2ce>
 8010674:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010678:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010680:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010684:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801068e:	b29b      	uxth	r3, r3
 8010690:	461a      	mov	r2, r3
 8010692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010694:	4413      	add	r3, r2
 8010696:	62bb      	str	r3, [r7, #40]	; 0x28
 8010698:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801069c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	00da      	lsls	r2, r3, #3
 80106a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a8:	4413      	add	r3, r2
 80106aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80106ae:	627b      	str	r3, [r7, #36]	; 0x24
 80106b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106b2:	881b      	ldrh	r3, [r3, #0]
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80106ba:	b29a      	uxth	r2, r3
 80106bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106be:	801a      	strh	r2, [r3, #0]
 80106c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106c4:	2b3e      	cmp	r3, #62	; 0x3e
 80106c6:	d921      	bls.n	801070c <USB_EPStartXfer+0x276>
 80106c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106cc:	095b      	lsrs	r3, r3, #5
 80106ce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80106d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80106d6:	f003 031f 	and.w	r3, r3, #31
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d104      	bne.n	80106e8 <USB_EPStartXfer+0x252>
 80106de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80106e2:	3b01      	subs	r3, #1
 80106e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80106e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ea:	881b      	ldrh	r3, [r3, #0]
 80106ec:	b29a      	uxth	r2, r3
 80106ee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	029b      	lsls	r3, r3, #10
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	4313      	orrs	r3, r2
 80106fa:	b29b      	uxth	r3, r3
 80106fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010700:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010704:	b29a      	uxth	r2, r3
 8010706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010708:	801a      	strh	r2, [r3, #0]
 801070a:	e050      	b.n	80107ae <USB_EPStartXfer+0x318>
 801070c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010710:	2b00      	cmp	r3, #0
 8010712:	d10a      	bne.n	801072a <USB_EPStartXfer+0x294>
 8010714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010716:	881b      	ldrh	r3, [r3, #0]
 8010718:	b29b      	uxth	r3, r3
 801071a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801071e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010722:	b29a      	uxth	r2, r3
 8010724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010726:	801a      	strh	r2, [r3, #0]
 8010728:	e041      	b.n	80107ae <USB_EPStartXfer+0x318>
 801072a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801072e:	085b      	lsrs	r3, r3, #1
 8010730:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010734:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010738:	f003 0301 	and.w	r3, r3, #1
 801073c:	2b00      	cmp	r3, #0
 801073e:	d004      	beq.n	801074a <USB_EPStartXfer+0x2b4>
 8010740:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010744:	3301      	adds	r3, #1
 8010746:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 801074a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074c:	881b      	ldrh	r3, [r3, #0]
 801074e:	b29a      	uxth	r2, r3
 8010750:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010754:	b29b      	uxth	r3, r3
 8010756:	029b      	lsls	r3, r3, #10
 8010758:	b29b      	uxth	r3, r3
 801075a:	4313      	orrs	r3, r2
 801075c:	b29a      	uxth	r2, r3
 801075e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010760:	801a      	strh	r2, [r3, #0]
 8010762:	e024      	b.n	80107ae <USB_EPStartXfer+0x318>
 8010764:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010768:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	785b      	ldrb	r3, [r3, #1]
 8010770:	2b01      	cmp	r3, #1
 8010772:	d11c      	bne.n	80107ae <USB_EPStartXfer+0x318>
 8010774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801077c:	681b      	ldr	r3, [r3, #0]
 801077e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010782:	b29b      	uxth	r3, r3
 8010784:	461a      	mov	r2, r3
 8010786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010788:	4413      	add	r3, r2
 801078a:	633b      	str	r3, [r7, #48]	; 0x30
 801078c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010790:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010794:	681b      	ldr	r3, [r3, #0]
 8010796:	781b      	ldrb	r3, [r3, #0]
 8010798:	00da      	lsls	r2, r3, #3
 801079a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801079c:	4413      	add	r3, r2
 801079e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80107a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80107a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107a8:	b29a      	uxth	r2, r3
 80107aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107ac:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80107ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107b6:	681b      	ldr	r3, [r3, #0]
 80107b8:	895b      	ldrh	r3, [r3, #10]
 80107ba:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80107be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107c6:	681b      	ldr	r3, [r3, #0]
 80107c8:	6959      	ldr	r1, [r3, #20]
 80107ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107ce:	b29b      	uxth	r3, r3
 80107d0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80107d4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80107d8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80107dc:	6800      	ldr	r0, [r0, #0]
 80107de:	f001 fb45 	bl	8011e6c <USB_WritePMA>
            ep->xfer_buff += len;
 80107e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	695a      	ldr	r2, [r3, #20]
 80107ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80107f2:	441a      	add	r2, r3
 80107f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80107f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	6a1a      	ldr	r2, [r3, #32]
 801080c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010814:	681b      	ldr	r3, [r3, #0]
 8010816:	691b      	ldr	r3, [r3, #16]
 8010818:	429a      	cmp	r2, r3
 801081a:	d90f      	bls.n	801083c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 801081c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	6a1a      	ldr	r2, [r3, #32]
 8010828:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801082c:	1ad2      	subs	r2, r2, r3
 801082e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010832:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	621a      	str	r2, [r3, #32]
 801083a:	e00e      	b.n	801085a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 801083c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010844:	681b      	ldr	r3, [r3, #0]
 8010846:	6a1b      	ldr	r3, [r3, #32]
 8010848:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 801084c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010854:	681b      	ldr	r3, [r3, #0]
 8010856:	2200      	movs	r2, #0
 8010858:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801085a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801085e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	785b      	ldrb	r3, [r3, #1]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d177      	bne.n	801095a <USB_EPStartXfer+0x4c4>
 801086a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801086e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010872:	681b      	ldr	r3, [r3, #0]
 8010874:	61bb      	str	r3, [r7, #24]
 8010876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801087a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801087e:	681b      	ldr	r3, [r3, #0]
 8010880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010884:	b29b      	uxth	r3, r3
 8010886:	461a      	mov	r2, r3
 8010888:	69bb      	ldr	r3, [r7, #24]
 801088a:	4413      	add	r3, r2
 801088c:	61bb      	str	r3, [r7, #24]
 801088e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010892:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	00da      	lsls	r2, r3, #3
 801089c:	69bb      	ldr	r3, [r7, #24]
 801089e:	4413      	add	r3, r2
 80108a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80108a4:	617b      	str	r3, [r7, #20]
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	881b      	ldrh	r3, [r3, #0]
 80108aa:	b29b      	uxth	r3, r3
 80108ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	801a      	strh	r2, [r3, #0]
 80108b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108ba:	2b3e      	cmp	r3, #62	; 0x3e
 80108bc:	d921      	bls.n	8010902 <USB_EPStartXfer+0x46c>
 80108be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108c2:	095b      	lsrs	r3, r3, #5
 80108c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80108c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80108cc:	f003 031f 	and.w	r3, r3, #31
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d104      	bne.n	80108de <USB_EPStartXfer+0x448>
 80108d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80108d8:	3b01      	subs	r3, #1
 80108da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80108de:	697b      	ldr	r3, [r7, #20]
 80108e0:	881b      	ldrh	r3, [r3, #0]
 80108e2:	b29a      	uxth	r2, r3
 80108e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80108e8:	b29b      	uxth	r3, r3
 80108ea:	029b      	lsls	r3, r3, #10
 80108ec:	b29b      	uxth	r3, r3
 80108ee:	4313      	orrs	r3, r2
 80108f0:	b29b      	uxth	r3, r3
 80108f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80108f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80108fa:	b29a      	uxth	r2, r3
 80108fc:	697b      	ldr	r3, [r7, #20]
 80108fe:	801a      	strh	r2, [r3, #0]
 8010900:	e056      	b.n	80109b0 <USB_EPStartXfer+0x51a>
 8010902:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010906:	2b00      	cmp	r3, #0
 8010908:	d10a      	bne.n	8010920 <USB_EPStartXfer+0x48a>
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	881b      	ldrh	r3, [r3, #0]
 801090e:	b29b      	uxth	r3, r3
 8010910:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010914:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010918:	b29a      	uxth	r2, r3
 801091a:	697b      	ldr	r3, [r7, #20]
 801091c:	801a      	strh	r2, [r3, #0]
 801091e:	e047      	b.n	80109b0 <USB_EPStartXfer+0x51a>
 8010920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010924:	085b      	lsrs	r3, r3, #1
 8010926:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 801092a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801092e:	f003 0301 	and.w	r3, r3, #1
 8010932:	2b00      	cmp	r3, #0
 8010934:	d004      	beq.n	8010940 <USB_EPStartXfer+0x4aa>
 8010936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801093a:	3301      	adds	r3, #1
 801093c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010940:	697b      	ldr	r3, [r7, #20]
 8010942:	881b      	ldrh	r3, [r3, #0]
 8010944:	b29a      	uxth	r2, r3
 8010946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801094a:	b29b      	uxth	r3, r3
 801094c:	029b      	lsls	r3, r3, #10
 801094e:	b29b      	uxth	r3, r3
 8010950:	4313      	orrs	r3, r2
 8010952:	b29a      	uxth	r2, r3
 8010954:	697b      	ldr	r3, [r7, #20]
 8010956:	801a      	strh	r2, [r3, #0]
 8010958:	e02a      	b.n	80109b0 <USB_EPStartXfer+0x51a>
 801095a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801095e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	785b      	ldrb	r3, [r3, #1]
 8010966:	2b01      	cmp	r3, #1
 8010968:	d122      	bne.n	80109b0 <USB_EPStartXfer+0x51a>
 801096a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801096e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010972:	681b      	ldr	r3, [r3, #0]
 8010974:	623b      	str	r3, [r7, #32]
 8010976:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801097a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010984:	b29b      	uxth	r3, r3
 8010986:	461a      	mov	r2, r3
 8010988:	6a3b      	ldr	r3, [r7, #32]
 801098a:	4413      	add	r3, r2
 801098c:	623b      	str	r3, [r7, #32]
 801098e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010992:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	781b      	ldrb	r3, [r3, #0]
 801099a:	00da      	lsls	r2, r3, #3
 801099c:	6a3b      	ldr	r3, [r7, #32]
 801099e:	4413      	add	r3, r2
 80109a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80109a4:	61fb      	str	r3, [r7, #28]
 80109a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109aa:	b29a      	uxth	r2, r3
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80109b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	891b      	ldrh	r3, [r3, #8]
 80109bc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80109c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	6959      	ldr	r1, [r3, #20]
 80109cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80109d0:	b29b      	uxth	r3, r3
 80109d2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80109d6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80109da:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80109de:	6800      	ldr	r0, [r0, #0]
 80109e0:	f001 fa44 	bl	8011e6c <USB_WritePMA>
 80109e4:	e3ee      	b.n	80111c4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80109e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80109ee:	681b      	ldr	r3, [r3, #0]
 80109f0:	785b      	ldrb	r3, [r3, #1]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d177      	bne.n	8010ae6 <USB_EPStartXfer+0x650>
 80109f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80109fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	461a      	mov	r2, r3
 8010a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a16:	4413      	add	r3, r2
 8010a18:	64bb      	str	r3, [r7, #72]	; 0x48
 8010a1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010a1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	781b      	ldrb	r3, [r3, #0]
 8010a26:	00da      	lsls	r2, r3, #3
 8010a28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010a2a:	4413      	add	r3, r2
 8010a2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010a30:	647b      	str	r3, [r7, #68]	; 0x44
 8010a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a34:	881b      	ldrh	r3, [r3, #0]
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010a3c:	b29a      	uxth	r2, r3
 8010a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a40:	801a      	strh	r2, [r3, #0]
 8010a42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a46:	2b3e      	cmp	r3, #62	; 0x3e
 8010a48:	d921      	bls.n	8010a8e <USB_EPStartXfer+0x5f8>
 8010a4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a4e:	095b      	lsrs	r3, r3, #5
 8010a50:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a58:	f003 031f 	and.w	r3, r3, #31
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d104      	bne.n	8010a6a <USB_EPStartXfer+0x5d4>
 8010a60:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010a64:	3b01      	subs	r3, #1
 8010a66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010a6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a6c:	881b      	ldrh	r3, [r3, #0]
 8010a6e:	b29a      	uxth	r2, r3
 8010a70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010a74:	b29b      	uxth	r3, r3
 8010a76:	029b      	lsls	r3, r3, #10
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010a82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010a86:	b29a      	uxth	r2, r3
 8010a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a8a:	801a      	strh	r2, [r3, #0]
 8010a8c:	e056      	b.n	8010b3c <USB_EPStartXfer+0x6a6>
 8010a8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d10a      	bne.n	8010aac <USB_EPStartXfer+0x616>
 8010a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	b29b      	uxth	r3, r3
 8010a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010aa4:	b29a      	uxth	r2, r3
 8010aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010aa8:	801a      	strh	r2, [r3, #0]
 8010aaa:	e047      	b.n	8010b3c <USB_EPStartXfer+0x6a6>
 8010aac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ab0:	085b      	lsrs	r3, r3, #1
 8010ab2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010ab6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010aba:	f003 0301 	and.w	r3, r3, #1
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d004      	beq.n	8010acc <USB_EPStartXfer+0x636>
 8010ac2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010ac6:	3301      	adds	r3, #1
 8010ac8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ace:	881b      	ldrh	r3, [r3, #0]
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010ad6:	b29b      	uxth	r3, r3
 8010ad8:	029b      	lsls	r3, r3, #10
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	4313      	orrs	r3, r2
 8010ade:	b29a      	uxth	r2, r3
 8010ae0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010ae2:	801a      	strh	r2, [r3, #0]
 8010ae4:	e02a      	b.n	8010b3c <USB_EPStartXfer+0x6a6>
 8010ae6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010aea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	785b      	ldrb	r3, [r3, #1]
 8010af2:	2b01      	cmp	r3, #1
 8010af4:	d122      	bne.n	8010b3c <USB_EPStartXfer+0x6a6>
 8010af6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010afa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	653b      	str	r3, [r7, #80]	; 0x50
 8010b02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b06:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010b10:	b29b      	uxth	r3, r3
 8010b12:	461a      	mov	r2, r3
 8010b14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b16:	4413      	add	r3, r2
 8010b18:	653b      	str	r3, [r7, #80]	; 0x50
 8010b1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	781b      	ldrb	r3, [r3, #0]
 8010b26:	00da      	lsls	r2, r3, #3
 8010b28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b2a:	4413      	add	r3, r2
 8010b2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010b30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010b32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b36:	b29a      	uxth	r2, r3
 8010b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b3a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8010b3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	891b      	ldrh	r3, [r3, #8]
 8010b48:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	6959      	ldr	r1, [r3, #20]
 8010b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b5c:	b29b      	uxth	r3, r3
 8010b5e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010b62:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010b66:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010b6a:	6800      	ldr	r0, [r0, #0]
 8010b6c:	f001 f97e 	bl	8011e6c <USB_WritePMA>
            ep->xfer_buff += len;
 8010b70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	695a      	ldr	r2, [r3, #20]
 8010b7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b80:	441a      	add	r2, r3
 8010b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b8a:	681b      	ldr	r3, [r3, #0]
 8010b8c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8010b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	6a1a      	ldr	r2, [r3, #32]
 8010b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010b9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	691b      	ldr	r3, [r3, #16]
 8010ba6:	429a      	cmp	r2, r3
 8010ba8:	d90f      	bls.n	8010bca <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8010baa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	6a1a      	ldr	r2, [r3, #32]
 8010bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bba:	1ad2      	subs	r2, r2, r3
 8010bbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	621a      	str	r2, [r3, #32]
 8010bc8:	e00e      	b.n	8010be8 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8010bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	6a1b      	ldr	r3, [r3, #32]
 8010bd6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8010bda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	2200      	movs	r2, #0
 8010be6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	643b      	str	r3, [r7, #64]	; 0x40
 8010bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	785b      	ldrb	r3, [r3, #1]
 8010c00:	2b00      	cmp	r3, #0
 8010c02:	d177      	bne.n	8010cf4 <USB_EPStartXfer+0x85e>
 8010c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c0c:	681b      	ldr	r3, [r3, #0]
 8010c0e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010c1e:	b29b      	uxth	r3, r3
 8010c20:	461a      	mov	r2, r3
 8010c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c24:	4413      	add	r3, r2
 8010c26:	63bb      	str	r3, [r7, #56]	; 0x38
 8010c28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010c2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	781b      	ldrb	r3, [r3, #0]
 8010c34:	00da      	lsls	r2, r3, #3
 8010c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010c38:	4413      	add	r3, r2
 8010c3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8010c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c42:	881b      	ldrh	r3, [r3, #0]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010c4a:	b29a      	uxth	r2, r3
 8010c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c4e:	801a      	strh	r2, [r3, #0]
 8010c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c54:	2b3e      	cmp	r3, #62	; 0x3e
 8010c56:	d921      	bls.n	8010c9c <USB_EPStartXfer+0x806>
 8010c58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c5c:	095b      	lsrs	r3, r3, #5
 8010c5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010c62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c66:	f003 031f 	and.w	r3, r3, #31
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d104      	bne.n	8010c78 <USB_EPStartXfer+0x7e2>
 8010c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c72:	3b01      	subs	r3, #1
 8010c74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c7a:	881b      	ldrh	r3, [r3, #0]
 8010c7c:	b29a      	uxth	r2, r3
 8010c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c82:	b29b      	uxth	r3, r3
 8010c84:	029b      	lsls	r3, r3, #10
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	4313      	orrs	r3, r2
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010c90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010c94:	b29a      	uxth	r2, r3
 8010c96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010c98:	801a      	strh	r2, [r3, #0]
 8010c9a:	e050      	b.n	8010d3e <USB_EPStartXfer+0x8a8>
 8010c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10a      	bne.n	8010cba <USB_EPStartXfer+0x824>
 8010ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ca6:	881b      	ldrh	r3, [r3, #0]
 8010ca8:	b29b      	uxth	r3, r3
 8010caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010cb2:	b29a      	uxth	r2, r3
 8010cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cb6:	801a      	strh	r2, [r3, #0]
 8010cb8:	e041      	b.n	8010d3e <USB_EPStartXfer+0x8a8>
 8010cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cbe:	085b      	lsrs	r3, r3, #1
 8010cc0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010cc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cc8:	f003 0301 	and.w	r3, r3, #1
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d004      	beq.n	8010cda <USB_EPStartXfer+0x844>
 8010cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cdc:	881b      	ldrh	r3, [r3, #0]
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010ce4:	b29b      	uxth	r3, r3
 8010ce6:	029b      	lsls	r3, r3, #10
 8010ce8:	b29b      	uxth	r3, r3
 8010cea:	4313      	orrs	r3, r2
 8010cec:	b29a      	uxth	r2, r3
 8010cee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010cf0:	801a      	strh	r2, [r3, #0]
 8010cf2:	e024      	b.n	8010d3e <USB_EPStartXfer+0x8a8>
 8010cf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010cf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	785b      	ldrb	r3, [r3, #1]
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d11c      	bne.n	8010d3e <USB_EPStartXfer+0x8a8>
 8010d04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010d12:	b29b      	uxth	r3, r3
 8010d14:	461a      	mov	r2, r3
 8010d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d18:	4413      	add	r3, r2
 8010d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8010d1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d24:	681b      	ldr	r3, [r3, #0]
 8010d26:	781b      	ldrb	r3, [r3, #0]
 8010d28:	00da      	lsls	r2, r3, #3
 8010d2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d2c:	4413      	add	r3, r2
 8010d2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d38:	b29a      	uxth	r2, r3
 8010d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010d3c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8010d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	895b      	ldrh	r3, [r3, #10]
 8010d4a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	6959      	ldr	r1, [r3, #20]
 8010d5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010d64:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010d68:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010d6c:	6800      	ldr	r0, [r0, #0]
 8010d6e:	f001 f87d 	bl	8011e6c <USB_WritePMA>
 8010d72:	e227      	b.n	80111c4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8010d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	6a1b      	ldr	r3, [r3, #32]
 8010d80:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8010d84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010d8c:	681a      	ldr	r2, [r3, #0]
 8010d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	009b      	lsls	r3, r3, #2
 8010d9c:	4413      	add	r3, r2
 8010d9e:	881b      	ldrh	r3, [r3, #0]
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8010da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8010daa:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8010dae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010db2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010db6:	681a      	ldr	r2, [r3, #0]
 8010db8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010dbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010dc0:	681b      	ldr	r3, [r3, #0]
 8010dc2:	781b      	ldrb	r3, [r3, #0]
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	441a      	add	r2, r3
 8010dc8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8010dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8010dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8010dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8010dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8010de0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010de4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010dec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010df0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010df4:	681b      	ldr	r3, [r3, #0]
 8010df6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010dfa:	b29b      	uxth	r3, r3
 8010dfc:	461a      	mov	r2, r3
 8010dfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e00:	4413      	add	r3, r2
 8010e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010e04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	00da      	lsls	r2, r3, #3
 8010e12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010e14:	4413      	add	r3, r2
 8010e16:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010e1a:	65bb      	str	r3, [r7, #88]	; 0x58
 8010e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e20:	b29a      	uxth	r2, r3
 8010e22:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010e24:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8010e26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	891b      	ldrh	r3, [r3, #8]
 8010e32:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8010e36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	6959      	ldr	r1, [r3, #20]
 8010e42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8010e4c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8010e50:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8010e54:	6800      	ldr	r0, [r0, #0]
 8010e56:	f001 f809 	bl	8011e6c <USB_WritePMA>
 8010e5a:	e1b3      	b.n	80111c4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8010e5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	6a1a      	ldr	r2, [r3, #32]
 8010e68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e6c:	1ad2      	subs	r2, r2, r3
 8010e6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8010e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010e82:	681a      	ldr	r2, [r3, #0]
 8010e84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	781b      	ldrb	r3, [r3, #0]
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	4413      	add	r3, r2
 8010e94:	881b      	ldrh	r3, [r3, #0]
 8010e96:	b29b      	uxth	r3, r3
 8010e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	f000 80c6 	beq.w	801102e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8010ea2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ea6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010eaa:	681b      	ldr	r3, [r3, #0]
 8010eac:	673b      	str	r3, [r7, #112]	; 0x70
 8010eae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010eb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	785b      	ldrb	r3, [r3, #1]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d177      	bne.n	8010fae <USB_EPStartXfer+0xb18>
 8010ebe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ec2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	66bb      	str	r3, [r7, #104]	; 0x68
 8010eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010ed8:	b29b      	uxth	r3, r3
 8010eda:	461a      	mov	r2, r3
 8010edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ede:	4413      	add	r3, r2
 8010ee0:	66bb      	str	r3, [r7, #104]	; 0x68
 8010ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	00da      	lsls	r2, r3, #3
 8010ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010ef2:	4413      	add	r3, r2
 8010ef4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010ef8:	667b      	str	r3, [r7, #100]	; 0x64
 8010efa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010efc:	881b      	ldrh	r3, [r3, #0]
 8010efe:	b29b      	uxth	r3, r3
 8010f00:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8010f04:	b29a      	uxth	r2, r3
 8010f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f08:	801a      	strh	r2, [r3, #0]
 8010f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f0e:	2b3e      	cmp	r3, #62	; 0x3e
 8010f10:	d921      	bls.n	8010f56 <USB_EPStartXfer+0xac0>
 8010f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f16:	095b      	lsrs	r3, r3, #5
 8010f18:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f20:	f003 031f 	and.w	r3, r3, #31
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d104      	bne.n	8010f32 <USB_EPStartXfer+0xa9c>
 8010f28:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010f2c:	3b01      	subs	r3, #1
 8010f2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010f32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f34:	881b      	ldrh	r3, [r3, #0]
 8010f36:	b29a      	uxth	r2, r3
 8010f38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010f3c:	b29b      	uxth	r3, r3
 8010f3e:	029b      	lsls	r3, r3, #10
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	4313      	orrs	r3, r2
 8010f44:	b29b      	uxth	r3, r3
 8010f46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f4e:	b29a      	uxth	r2, r3
 8010f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f52:	801a      	strh	r2, [r3, #0]
 8010f54:	e050      	b.n	8010ff8 <USB_EPStartXfer+0xb62>
 8010f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d10a      	bne.n	8010f74 <USB_EPStartXfer+0xade>
 8010f5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f60:	881b      	ldrh	r3, [r3, #0]
 8010f62:	b29b      	uxth	r3, r3
 8010f64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8010f68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8010f6c:	b29a      	uxth	r2, r3
 8010f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f70:	801a      	strh	r2, [r3, #0]
 8010f72:	e041      	b.n	8010ff8 <USB_EPStartXfer+0xb62>
 8010f74:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f78:	085b      	lsrs	r3, r3, #1
 8010f7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f82:	f003 0301 	and.w	r3, r3, #1
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d004      	beq.n	8010f94 <USB_EPStartXfer+0xafe>
 8010f8a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010f8e:	3301      	adds	r3, #1
 8010f90:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010f94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010f96:	881b      	ldrh	r3, [r3, #0]
 8010f98:	b29a      	uxth	r2, r3
 8010f9a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	029b      	lsls	r3, r3, #10
 8010fa2:	b29b      	uxth	r3, r3
 8010fa4:	4313      	orrs	r3, r2
 8010fa6:	b29a      	uxth	r2, r3
 8010fa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010faa:	801a      	strh	r2, [r3, #0]
 8010fac:	e024      	b.n	8010ff8 <USB_EPStartXfer+0xb62>
 8010fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	785b      	ldrb	r3, [r3, #1]
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d11c      	bne.n	8010ff8 <USB_EPStartXfer+0xb62>
 8010fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8010fcc:	b29b      	uxth	r3, r3
 8010fce:	461a      	mov	r2, r3
 8010fd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010fd2:	4413      	add	r3, r2
 8010fd4:	673b      	str	r3, [r7, #112]	; 0x70
 8010fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	781b      	ldrb	r3, [r3, #0]
 8010fe2:	00da      	lsls	r2, r3, #3
 8010fe4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010fe6:	4413      	add	r3, r2
 8010fe8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010fec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ff2:	b29a      	uxth	r2, r3
 8010ff4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010ff6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8010ff8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8010ffc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	895b      	ldrh	r3, [r3, #10]
 8011004:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8011008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801100c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	6959      	ldr	r1, [r3, #20]
 8011014:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011018:	b29b      	uxth	r3, r3
 801101a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 801101e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8011022:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8011026:	6800      	ldr	r0, [r0, #0]
 8011028:	f000 ff20 	bl	8011e6c <USB_WritePMA>
 801102c:	e0ca      	b.n	80111c4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 801102e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011032:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	785b      	ldrb	r3, [r3, #1]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d177      	bne.n	801112e <USB_EPStartXfer+0xc98>
 801103e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011042:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	67fb      	str	r3, [r7, #124]	; 0x7c
 801104a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801104e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011058:	b29b      	uxth	r3, r3
 801105a:	461a      	mov	r2, r3
 801105c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801105e:	4413      	add	r3, r2
 8011060:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801106a:	681b      	ldr	r3, [r3, #0]
 801106c:	781b      	ldrb	r3, [r3, #0]
 801106e:	00da      	lsls	r2, r3, #3
 8011070:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011072:	4413      	add	r3, r2
 8011074:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011078:	67bb      	str	r3, [r7, #120]	; 0x78
 801107a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801107c:	881b      	ldrh	r3, [r3, #0]
 801107e:	b29b      	uxth	r3, r3
 8011080:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011084:	b29a      	uxth	r2, r3
 8011086:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011088:	801a      	strh	r2, [r3, #0]
 801108a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801108e:	2b3e      	cmp	r3, #62	; 0x3e
 8011090:	d921      	bls.n	80110d6 <USB_EPStartXfer+0xc40>
 8011092:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011096:	095b      	lsrs	r3, r3, #5
 8011098:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 801109c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110a0:	f003 031f 	and.w	r3, r3, #31
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d104      	bne.n	80110b2 <USB_EPStartXfer+0xc1c>
 80110a8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80110ac:	3b01      	subs	r3, #1
 80110ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80110b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110b4:	881b      	ldrh	r3, [r3, #0]
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80110bc:	b29b      	uxth	r3, r3
 80110be:	029b      	lsls	r3, r3, #10
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	4313      	orrs	r3, r2
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110ce:	b29a      	uxth	r2, r3
 80110d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110d2:	801a      	strh	r2, [r3, #0]
 80110d4:	e05c      	b.n	8011190 <USB_EPStartXfer+0xcfa>
 80110d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d10a      	bne.n	80110f4 <USB_EPStartXfer+0xc5e>
 80110de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110e0:	881b      	ldrh	r3, [r3, #0]
 80110e2:	b29b      	uxth	r3, r3
 80110e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80110e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80110ec:	b29a      	uxth	r2, r3
 80110ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80110f0:	801a      	strh	r2, [r3, #0]
 80110f2:	e04d      	b.n	8011190 <USB_EPStartXfer+0xcfa>
 80110f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110f8:	085b      	lsrs	r3, r3, #1
 80110fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80110fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011102:	f003 0301 	and.w	r3, r3, #1
 8011106:	2b00      	cmp	r3, #0
 8011108:	d004      	beq.n	8011114 <USB_EPStartXfer+0xc7e>
 801110a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801110e:	3301      	adds	r3, #1
 8011110:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8011114:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011116:	881b      	ldrh	r3, [r3, #0]
 8011118:	b29a      	uxth	r2, r3
 801111a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 801111e:	b29b      	uxth	r3, r3
 8011120:	029b      	lsls	r3, r3, #10
 8011122:	b29b      	uxth	r3, r3
 8011124:	4313      	orrs	r3, r2
 8011126:	b29a      	uxth	r2, r3
 8011128:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801112a:	801a      	strh	r2, [r3, #0]
 801112c:	e030      	b.n	8011190 <USB_EPStartXfer+0xcfa>
 801112e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011132:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	785b      	ldrb	r3, [r3, #1]
 801113a:	2b01      	cmp	r3, #1
 801113c:	d128      	bne.n	8011190 <USB_EPStartXfer+0xcfa>
 801113e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011142:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011146:	681b      	ldr	r3, [r3, #0]
 8011148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801114c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011150:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011154:	681b      	ldr	r3, [r3, #0]
 8011156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 801115a:	b29b      	uxth	r3, r3
 801115c:	461a      	mov	r2, r3
 801115e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011162:	4413      	add	r3, r2
 8011164:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801116c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	781b      	ldrb	r3, [r3, #0]
 8011174:	00da      	lsls	r2, r3, #3
 8011176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801117a:	4413      	add	r3, r2
 801117c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011184:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011188:	b29a      	uxth	r2, r3
 801118a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801118e:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8011190:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011194:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011198:	681b      	ldr	r3, [r3, #0]
 801119a:	891b      	ldrh	r3, [r3, #8]
 801119c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80111a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	6959      	ldr	r1, [r3, #20]
 80111ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111b0:	b29b      	uxth	r3, r3
 80111b2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80111b6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80111ba:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80111be:	6800      	ldr	r0, [r0, #0]
 80111c0:	f000 fe54 	bl	8011e6c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80111c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80111cc:	681a      	ldr	r2, [r3, #0]
 80111ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80111d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	781b      	ldrb	r3, [r3, #0]
 80111da:	009b      	lsls	r3, r3, #2
 80111dc:	4413      	add	r3, r2
 80111de:	881b      	ldrh	r3, [r3, #0]
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80111e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80111ea:	817b      	strh	r3, [r7, #10]
 80111ec:	897b      	ldrh	r3, [r7, #10]
 80111ee:	f083 0310 	eor.w	r3, r3, #16
 80111f2:	817b      	strh	r3, [r7, #10]
 80111f4:	897b      	ldrh	r3, [r7, #10]
 80111f6:	f083 0320 	eor.w	r3, r3, #32
 80111fa:	817b      	strh	r3, [r7, #10]
 80111fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011204:	681a      	ldr	r2, [r3, #0]
 8011206:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801120a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801120e:	681b      	ldr	r3, [r3, #0]
 8011210:	781b      	ldrb	r3, [r3, #0]
 8011212:	009b      	lsls	r3, r3, #2
 8011214:	441a      	add	r2, r3
 8011216:	897b      	ldrh	r3, [r7, #10]
 8011218:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 801121c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011228:	b29b      	uxth	r3, r3
 801122a:	8013      	strh	r3, [r2, #0]
 801122c:	f000 bcde 	b.w	8011bec <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8011230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	7b1b      	ldrb	r3, [r3, #12]
 801123c:	2b00      	cmp	r3, #0
 801123e:	f040 80bb 	bne.w	80113b8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8011242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	699a      	ldr	r2, [r3, #24]
 801124e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011252:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	691b      	ldr	r3, [r3, #16]
 801125a:	429a      	cmp	r2, r3
 801125c:	d917      	bls.n	801128e <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 801125e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011262:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	691b      	ldr	r3, [r3, #16]
 801126a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 801126e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	699a      	ldr	r2, [r3, #24]
 801127a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801127e:	1ad2      	subs	r2, r2, r3
 8011280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	619a      	str	r2, [r3, #24]
 801128c:	e00e      	b.n	80112ac <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 801128e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011292:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	699b      	ldr	r3, [r3, #24]
 801129a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 801129e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	2200      	movs	r2, #0
 80112aa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80112ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80112ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80112c2:	681b      	ldr	r3, [r3, #0]
 80112c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80112c8:	b29b      	uxth	r3, r3
 80112ca:	461a      	mov	r2, r3
 80112cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80112d0:	4413      	add	r3, r2
 80112d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80112d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80112da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	781b      	ldrb	r3, [r3, #0]
 80112e2:	00da      	lsls	r2, r3, #3
 80112e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80112e8:	4413      	add	r3, r2
 80112ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80112ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80112f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80112f6:	881b      	ldrh	r3, [r3, #0]
 80112f8:	b29b      	uxth	r3, r3
 80112fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80112fe:	b29a      	uxth	r2, r3
 8011300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011304:	801a      	strh	r2, [r3, #0]
 8011306:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801130a:	2b3e      	cmp	r3, #62	; 0x3e
 801130c:	d924      	bls.n	8011358 <USB_EPStartXfer+0xec2>
 801130e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011312:	095b      	lsrs	r3, r3, #5
 8011314:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011318:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801131c:	f003 031f 	and.w	r3, r3, #31
 8011320:	2b00      	cmp	r3, #0
 8011322:	d104      	bne.n	801132e <USB_EPStartXfer+0xe98>
 8011324:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011328:	3b01      	subs	r3, #1
 801132a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801132e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011332:	881b      	ldrh	r3, [r3, #0]
 8011334:	b29a      	uxth	r2, r3
 8011336:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801133a:	b29b      	uxth	r3, r3
 801133c:	029b      	lsls	r3, r3, #10
 801133e:	b29b      	uxth	r3, r3
 8011340:	4313      	orrs	r3, r2
 8011342:	b29b      	uxth	r3, r3
 8011344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801134c:	b29a      	uxth	r2, r3
 801134e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011352:	801a      	strh	r2, [r3, #0]
 8011354:	f000 bc10 	b.w	8011b78 <USB_EPStartXfer+0x16e2>
 8011358:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801135c:	2b00      	cmp	r3, #0
 801135e:	d10c      	bne.n	801137a <USB_EPStartXfer+0xee4>
 8011360:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011364:	881b      	ldrh	r3, [r3, #0]
 8011366:	b29b      	uxth	r3, r3
 8011368:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801136c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011370:	b29a      	uxth	r2, r3
 8011372:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011376:	801a      	strh	r2, [r3, #0]
 8011378:	e3fe      	b.n	8011b78 <USB_EPStartXfer+0x16e2>
 801137a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801137e:	085b      	lsrs	r3, r3, #1
 8011380:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8011384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011388:	f003 0301 	and.w	r3, r3, #1
 801138c:	2b00      	cmp	r3, #0
 801138e:	d004      	beq.n	801139a <USB_EPStartXfer+0xf04>
 8011390:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8011394:	3301      	adds	r3, #1
 8011396:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801139a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801139e:	881b      	ldrh	r3, [r3, #0]
 80113a0:	b29a      	uxth	r2, r3
 80113a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	029b      	lsls	r3, r3, #10
 80113aa:	b29b      	uxth	r3, r3
 80113ac:	4313      	orrs	r3, r2
 80113ae:	b29a      	uxth	r2, r3
 80113b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80113b4:	801a      	strh	r2, [r3, #0]
 80113b6:	e3df      	b.n	8011b78 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80113b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	78db      	ldrb	r3, [r3, #3]
 80113c4:	2b02      	cmp	r3, #2
 80113c6:	f040 8218 	bne.w	80117fa <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80113ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	785b      	ldrb	r3, [r3, #1]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	f040 809d 	bne.w	8011516 <USB_EPStartXfer+0x1080>
 80113dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80113ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80113ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80113f8:	b29b      	uxth	r3, r3
 80113fa:	461a      	mov	r2, r3
 80113fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011400:	4413      	add	r3, r2
 8011402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011406:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801140a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	00da      	lsls	r2, r3, #3
 8011414:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011418:	4413      	add	r3, r2
 801141a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 801141e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8011422:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011426:	881b      	ldrh	r3, [r3, #0]
 8011428:	b29b      	uxth	r3, r3
 801142a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801142e:	b29a      	uxth	r2, r3
 8011430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011434:	801a      	strh	r2, [r3, #0]
 8011436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801143a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801143e:	681b      	ldr	r3, [r3, #0]
 8011440:	691b      	ldr	r3, [r3, #16]
 8011442:	2b3e      	cmp	r3, #62	; 0x3e
 8011444:	d92b      	bls.n	801149e <USB_EPStartXfer+0x1008>
 8011446:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801144a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801144e:	681b      	ldr	r3, [r3, #0]
 8011450:	691b      	ldr	r3, [r3, #16]
 8011452:	095b      	lsrs	r3, r3, #5
 8011454:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011458:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801145c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011460:	681b      	ldr	r3, [r3, #0]
 8011462:	691b      	ldr	r3, [r3, #16]
 8011464:	f003 031f 	and.w	r3, r3, #31
 8011468:	2b00      	cmp	r3, #0
 801146a:	d104      	bne.n	8011476 <USB_EPStartXfer+0xfe0>
 801146c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011470:	3b01      	subs	r3, #1
 8011472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8011476:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801147a:	881b      	ldrh	r3, [r3, #0]
 801147c:	b29a      	uxth	r2, r3
 801147e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011482:	b29b      	uxth	r3, r3
 8011484:	029b      	lsls	r3, r3, #10
 8011486:	b29b      	uxth	r3, r3
 8011488:	4313      	orrs	r3, r2
 801148a:	b29b      	uxth	r3, r3
 801148c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011490:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011494:	b29a      	uxth	r2, r3
 8011496:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801149a:	801a      	strh	r2, [r3, #0]
 801149c:	e070      	b.n	8011580 <USB_EPStartXfer+0x10ea>
 801149e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	691b      	ldr	r3, [r3, #16]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d10c      	bne.n	80114c8 <USB_EPStartXfer+0x1032>
 80114ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80114b2:	881b      	ldrh	r3, [r3, #0]
 80114b4:	b29b      	uxth	r3, r3
 80114b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80114ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80114be:	b29a      	uxth	r2, r3
 80114c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80114c4:	801a      	strh	r2, [r3, #0]
 80114c6:	e05b      	b.n	8011580 <USB_EPStartXfer+0x10ea>
 80114c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114d0:	681b      	ldr	r3, [r3, #0]
 80114d2:	691b      	ldr	r3, [r3, #16]
 80114d4:	085b      	lsrs	r3, r3, #1
 80114d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80114da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80114de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	691b      	ldr	r3, [r3, #16]
 80114e6:	f003 0301 	and.w	r3, r3, #1
 80114ea:	2b00      	cmp	r3, #0
 80114ec:	d004      	beq.n	80114f8 <USB_EPStartXfer+0x1062>
 80114ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80114f2:	3301      	adds	r3, #1
 80114f4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80114f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80114fc:	881b      	ldrh	r3, [r3, #0]
 80114fe:	b29a      	uxth	r2, r3
 8011500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011504:	b29b      	uxth	r3, r3
 8011506:	029b      	lsls	r3, r3, #10
 8011508:	b29b      	uxth	r3, r3
 801150a:	4313      	orrs	r3, r2
 801150c:	b29a      	uxth	r2, r3
 801150e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011512:	801a      	strh	r2, [r3, #0]
 8011514:	e034      	b.n	8011580 <USB_EPStartXfer+0x10ea>
 8011516:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801151a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	785b      	ldrb	r3, [r3, #1]
 8011522:	2b01      	cmp	r3, #1
 8011524:	d12c      	bne.n	8011580 <USB_EPStartXfer+0x10ea>
 8011526:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801152a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801152e:	681b      	ldr	r3, [r3, #0]
 8011530:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011542:	b29b      	uxth	r3, r3
 8011544:	461a      	mov	r2, r3
 8011546:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801154a:	4413      	add	r3, r2
 801154c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8011550:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	781b      	ldrb	r3, [r3, #0]
 801155c:	00da      	lsls	r2, r3, #3
 801155e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8011562:	4413      	add	r3, r2
 8011564:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801156c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011574:	681b      	ldr	r3, [r3, #0]
 8011576:	691b      	ldr	r3, [r3, #16]
 8011578:	b29a      	uxth	r2, r3
 801157a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801157e:	801a      	strh	r2, [r3, #0]
 8011580:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011584:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801158e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	785b      	ldrb	r3, [r3, #1]
 801159a:	2b00      	cmp	r3, #0
 801159c:	f040 809d 	bne.w	80116da <USB_EPStartXfer+0x1244>
 80115a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115a8:	681b      	ldr	r3, [r3, #0]
 80115aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80115ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80115bc:	b29b      	uxth	r3, r3
 80115be:	461a      	mov	r2, r3
 80115c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80115c4:	4413      	add	r3, r2
 80115c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80115ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	781b      	ldrb	r3, [r3, #0]
 80115d6:	00da      	lsls	r2, r3, #3
 80115d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80115dc:	4413      	add	r3, r2
 80115de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80115e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80115e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80115ea:	881b      	ldrh	r3, [r3, #0]
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80115f2:	b29a      	uxth	r2, r3
 80115f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80115f8:	801a      	strh	r2, [r3, #0]
 80115fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80115fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	691b      	ldr	r3, [r3, #16]
 8011606:	2b3e      	cmp	r3, #62	; 0x3e
 8011608:	d92b      	bls.n	8011662 <USB_EPStartXfer+0x11cc>
 801160a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801160e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	691b      	ldr	r3, [r3, #16]
 8011616:	095b      	lsrs	r3, r3, #5
 8011618:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801161c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	691b      	ldr	r3, [r3, #16]
 8011628:	f003 031f 	and.w	r3, r3, #31
 801162c:	2b00      	cmp	r3, #0
 801162e:	d104      	bne.n	801163a <USB_EPStartXfer+0x11a4>
 8011630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011634:	3b01      	subs	r3, #1
 8011636:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801163a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801163e:	881b      	ldrh	r3, [r3, #0]
 8011640:	b29a      	uxth	r2, r3
 8011642:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011646:	b29b      	uxth	r3, r3
 8011648:	029b      	lsls	r3, r3, #10
 801164a:	b29b      	uxth	r3, r3
 801164c:	4313      	orrs	r3, r2
 801164e:	b29b      	uxth	r3, r3
 8011650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011658:	b29a      	uxth	r2, r3
 801165a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801165e:	801a      	strh	r2, [r3, #0]
 8011660:	e069      	b.n	8011736 <USB_EPStartXfer+0x12a0>
 8011662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	691b      	ldr	r3, [r3, #16]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d10c      	bne.n	801168c <USB_EPStartXfer+0x11f6>
 8011672:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011676:	881b      	ldrh	r3, [r3, #0]
 8011678:	b29b      	uxth	r3, r3
 801167a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801167e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011682:	b29a      	uxth	r2, r3
 8011684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011688:	801a      	strh	r2, [r3, #0]
 801168a:	e054      	b.n	8011736 <USB_EPStartXfer+0x12a0>
 801168c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011694:	681b      	ldr	r3, [r3, #0]
 8011696:	691b      	ldr	r3, [r3, #16]
 8011698:	085b      	lsrs	r3, r3, #1
 801169a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 801169e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116a6:	681b      	ldr	r3, [r3, #0]
 80116a8:	691b      	ldr	r3, [r3, #16]
 80116aa:	f003 0301 	and.w	r3, r3, #1
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d004      	beq.n	80116bc <USB_EPStartXfer+0x1226>
 80116b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116b6:	3301      	adds	r3, #1
 80116b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80116bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80116c0:	881b      	ldrh	r3, [r3, #0]
 80116c2:	b29a      	uxth	r2, r3
 80116c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116c8:	b29b      	uxth	r3, r3
 80116ca:	029b      	lsls	r3, r3, #10
 80116cc:	b29b      	uxth	r3, r3
 80116ce:	4313      	orrs	r3, r2
 80116d0:	b29a      	uxth	r2, r3
 80116d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80116d6:	801a      	strh	r2, [r3, #0]
 80116d8:	e02d      	b.n	8011736 <USB_EPStartXfer+0x12a0>
 80116da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80116e2:	681b      	ldr	r3, [r3, #0]
 80116e4:	785b      	ldrb	r3, [r3, #1]
 80116e6:	2b01      	cmp	r3, #1
 80116e8:	d125      	bne.n	8011736 <USB_EPStartXfer+0x12a0>
 80116ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80116ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80116f8:	b29b      	uxth	r3, r3
 80116fa:	461a      	mov	r2, r3
 80116fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011700:	4413      	add	r3, r2
 8011702:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8011706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801170a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	781b      	ldrb	r3, [r3, #0]
 8011712:	00da      	lsls	r2, r3, #3
 8011714:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011718:	4413      	add	r3, r2
 801171a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 801171e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	691b      	ldr	r3, [r3, #16]
 801172e:	b29a      	uxth	r2, r3
 8011730:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011734:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8011736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801173a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801173e:	681b      	ldr	r3, [r3, #0]
 8011740:	69db      	ldr	r3, [r3, #28]
 8011742:	2b00      	cmp	r3, #0
 8011744:	f000 8218 	beq.w	8011b78 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8011748:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801174c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011750:	681a      	ldr	r2, [r3, #0]
 8011752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011756:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801175a:	681b      	ldr	r3, [r3, #0]
 801175c:	781b      	ldrb	r3, [r3, #0]
 801175e:	009b      	lsls	r3, r3, #2
 8011760:	4413      	add	r3, r2
 8011762:	881b      	ldrh	r3, [r3, #0]
 8011764:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011768:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 801176c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011770:	2b00      	cmp	r3, #0
 8011772:	d005      	beq.n	8011780 <USB_EPStartXfer+0x12ea>
 8011774:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801177c:	2b00      	cmp	r3, #0
 801177e:	d10d      	bne.n	801179c <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8011780:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8011788:	2b00      	cmp	r3, #0
 801178a:	f040 81f5 	bne.w	8011b78 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 801178e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8011792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011796:	2b00      	cmp	r3, #0
 8011798:	f040 81ee 	bne.w	8011b78 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 801179c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117a4:	681a      	ldr	r2, [r3, #0]
 80117a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	781b      	ldrb	r3, [r3, #0]
 80117b2:	009b      	lsls	r3, r3, #2
 80117b4:	4413      	add	r3, r2
 80117b6:	881b      	ldrh	r3, [r3, #0]
 80117b8:	b29b      	uxth	r3, r3
 80117ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80117be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80117c2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80117c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80117ce:	681a      	ldr	r2, [r3, #0]
 80117d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	781b      	ldrb	r3, [r3, #0]
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	441a      	add	r2, r3
 80117e0:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80117e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80117e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80117ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80117f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	8013      	strh	r3, [r2, #0]
 80117f8:	e1be      	b.n	8011b78 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80117fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80117fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	78db      	ldrb	r3, [r3, #3]
 8011806:	2b01      	cmp	r3, #1
 8011808:	f040 81b4 	bne.w	8011b74 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 801180c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	699a      	ldr	r2, [r3, #24]
 8011818:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801181c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	691b      	ldr	r3, [r3, #16]
 8011824:	429a      	cmp	r2, r3
 8011826:	d917      	bls.n	8011858 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8011828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801182c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	691b      	ldr	r3, [r3, #16]
 8011834:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8011838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801183c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	699a      	ldr	r2, [r3, #24]
 8011844:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011848:	1ad2      	subs	r2, r2, r3
 801184a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801184e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011852:	681b      	ldr	r3, [r3, #0]
 8011854:	619a      	str	r2, [r3, #24]
 8011856:	e00e      	b.n	8011876 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8011858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801185c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	699b      	ldr	r3, [r3, #24]
 8011864:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8011868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801186c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	2200      	movs	r2, #0
 8011874:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8011876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801187a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	785b      	ldrb	r3, [r3, #1]
 8011882:	2b00      	cmp	r3, #0
 8011884:	f040 8085 	bne.w	8011992 <USB_EPStartXfer+0x14fc>
 8011888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801188c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8011896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801189a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80118a4:	b29b      	uxth	r3, r3
 80118a6:	461a      	mov	r2, r3
 80118a8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80118ac:	4413      	add	r3, r2
 80118ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80118b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80118b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	781b      	ldrb	r3, [r3, #0]
 80118be:	00da      	lsls	r2, r3, #3
 80118c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80118c4:	4413      	add	r3, r2
 80118c6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80118ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80118ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80118d2:	881b      	ldrh	r3, [r3, #0]
 80118d4:	b29b      	uxth	r3, r3
 80118d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80118da:	b29a      	uxth	r2, r3
 80118dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80118e0:	801a      	strh	r2, [r3, #0]
 80118e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118e6:	2b3e      	cmp	r3, #62	; 0x3e
 80118e8:	d923      	bls.n	8011932 <USB_EPStartXfer+0x149c>
 80118ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118ee:	095b      	lsrs	r3, r3, #5
 80118f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80118f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118f8:	f003 031f 	and.w	r3, r3, #31
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d104      	bne.n	801190a <USB_EPStartXfer+0x1474>
 8011900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011904:	3b01      	subs	r3, #1
 8011906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801190a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801190e:	881b      	ldrh	r3, [r3, #0]
 8011910:	b29a      	uxth	r2, r3
 8011912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011916:	b29b      	uxth	r3, r3
 8011918:	029b      	lsls	r3, r3, #10
 801191a:	b29b      	uxth	r3, r3
 801191c:	4313      	orrs	r3, r2
 801191e:	b29b      	uxth	r3, r3
 8011920:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011924:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011928:	b29a      	uxth	r2, r3
 801192a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801192e:	801a      	strh	r2, [r3, #0]
 8011930:	e060      	b.n	80119f4 <USB_EPStartXfer+0x155e>
 8011932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011936:	2b00      	cmp	r3, #0
 8011938:	d10c      	bne.n	8011954 <USB_EPStartXfer+0x14be>
 801193a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801193e:	881b      	ldrh	r3, [r3, #0]
 8011940:	b29b      	uxth	r3, r3
 8011942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801194a:	b29a      	uxth	r2, r3
 801194c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011950:	801a      	strh	r2, [r3, #0]
 8011952:	e04f      	b.n	80119f4 <USB_EPStartXfer+0x155e>
 8011954:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011958:	085b      	lsrs	r3, r3, #1
 801195a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 801195e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011962:	f003 0301 	and.w	r3, r3, #1
 8011966:	2b00      	cmp	r3, #0
 8011968:	d004      	beq.n	8011974 <USB_EPStartXfer+0x14de>
 801196a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801196e:	3301      	adds	r3, #1
 8011970:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011974:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011978:	881b      	ldrh	r3, [r3, #0]
 801197a:	b29a      	uxth	r2, r3
 801197c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011980:	b29b      	uxth	r3, r3
 8011982:	029b      	lsls	r3, r3, #10
 8011984:	b29b      	uxth	r3, r3
 8011986:	4313      	orrs	r3, r2
 8011988:	b29a      	uxth	r2, r3
 801198a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801198e:	801a      	strh	r2, [r3, #0]
 8011990:	e030      	b.n	80119f4 <USB_EPStartXfer+0x155e>
 8011992:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011996:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801199a:	681b      	ldr	r3, [r3, #0]
 801199c:	785b      	ldrb	r3, [r3, #1]
 801199e:	2b01      	cmp	r3, #1
 80119a0:	d128      	bne.n	80119f4 <USB_EPStartXfer+0x155e>
 80119a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119aa:	681b      	ldr	r3, [r3, #0]
 80119ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80119b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119b8:	681b      	ldr	r3, [r3, #0]
 80119ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80119be:	b29b      	uxth	r3, r3
 80119c0:	461a      	mov	r2, r3
 80119c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80119c6:	4413      	add	r3, r2
 80119c8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80119cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	781b      	ldrb	r3, [r3, #0]
 80119d8:	00da      	lsls	r2, r3, #3
 80119da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80119de:	4413      	add	r3, r2
 80119e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80119e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80119e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119ec:	b29a      	uxth	r2, r3
 80119ee:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80119f2:	801a      	strh	r2, [r3, #0]
 80119f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80119f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011a02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	785b      	ldrb	r3, [r3, #1]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	f040 8085 	bne.w	8011b1e <USB_EPStartXfer+0x1688>
 8011a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a1c:	681b      	ldr	r3, [r3, #0]
 8011a1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011a22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011a2a:	681b      	ldr	r3, [r3, #0]
 8011a2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011a30:	b29b      	uxth	r3, r3
 8011a32:	461a      	mov	r2, r3
 8011a34:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011a38:	4413      	add	r3, r2
 8011a3a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8011a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	781b      	ldrb	r3, [r3, #0]
 8011a4a:	00da      	lsls	r2, r3, #3
 8011a4c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011a50:	4413      	add	r3, r2
 8011a52:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011a56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011a5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a5e:	881b      	ldrh	r3, [r3, #0]
 8011a60:	b29b      	uxth	r3, r3
 8011a62:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a66:	b29a      	uxth	r2, r3
 8011a68:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a6c:	801a      	strh	r2, [r3, #0]
 8011a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a72:	2b3e      	cmp	r3, #62	; 0x3e
 8011a74:	d923      	bls.n	8011abe <USB_EPStartXfer+0x1628>
 8011a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a7a:	095b      	lsrs	r3, r3, #5
 8011a7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011a80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a84:	f003 031f 	and.w	r3, r3, #31
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d104      	bne.n	8011a96 <USB_EPStartXfer+0x1600>
 8011a8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011a90:	3b01      	subs	r3, #1
 8011a92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011a96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a9a:	881b      	ldrh	r3, [r3, #0]
 8011a9c:	b29a      	uxth	r2, r3
 8011a9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011aa2:	b29b      	uxth	r3, r3
 8011aa4:	029b      	lsls	r3, r3, #10
 8011aa6:	b29b      	uxth	r3, r3
 8011aa8:	4313      	orrs	r3, r2
 8011aaa:	b29b      	uxth	r3, r3
 8011aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ab4:	b29a      	uxth	r2, r3
 8011ab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011aba:	801a      	strh	r2, [r3, #0]
 8011abc:	e05c      	b.n	8011b78 <USB_EPStartXfer+0x16e2>
 8011abe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d10c      	bne.n	8011ae0 <USB_EPStartXfer+0x164a>
 8011ac6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011aca:	881b      	ldrh	r3, [r3, #0]
 8011acc:	b29b      	uxth	r3, r3
 8011ace:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011ad2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011adc:	801a      	strh	r2, [r3, #0]
 8011ade:	e04b      	b.n	8011b78 <USB_EPStartXfer+0x16e2>
 8011ae0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ae4:	085b      	lsrs	r3, r3, #1
 8011ae6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011aea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aee:	f003 0301 	and.w	r3, r3, #1
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d004      	beq.n	8011b00 <USB_EPStartXfer+0x166a>
 8011af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011afa:	3301      	adds	r3, #1
 8011afc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8011b00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011b04:	881b      	ldrh	r3, [r3, #0]
 8011b06:	b29a      	uxth	r2, r3
 8011b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	029b      	lsls	r3, r3, #10
 8011b10:	b29b      	uxth	r3, r3
 8011b12:	4313      	orrs	r3, r2
 8011b14:	b29a      	uxth	r2, r3
 8011b16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011b1a:	801a      	strh	r2, [r3, #0]
 8011b1c:	e02c      	b.n	8011b78 <USB_EPStartXfer+0x16e2>
 8011b1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	785b      	ldrb	r3, [r3, #1]
 8011b2a:	2b01      	cmp	r3, #1
 8011b2c:	d124      	bne.n	8011b78 <USB_EPStartXfer+0x16e2>
 8011b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8011b3c:	b29b      	uxth	r3, r3
 8011b3e:	461a      	mov	r2, r3
 8011b40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011b44:	4413      	add	r3, r2
 8011b46:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	781b      	ldrb	r3, [r3, #0]
 8011b56:	00da      	lsls	r2, r3, #3
 8011b58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011b5c:	4413      	add	r3, r2
 8011b5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8011b62:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b6a:	b29a      	uxth	r2, r3
 8011b6c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011b70:	801a      	strh	r2, [r3, #0]
 8011b72:	e001      	b.n	8011b78 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8011b74:	2301      	movs	r3, #1
 8011b76:	e03a      	b.n	8011bee <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011b78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b7c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011b80:	681a      	ldr	r2, [r3, #0]
 8011b82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011b86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	781b      	ldrb	r3, [r3, #0]
 8011b8e:	009b      	lsls	r3, r3, #2
 8011b90:	4413      	add	r3, r2
 8011b92:	881b      	ldrh	r3, [r3, #0]
 8011b94:	b29b      	uxth	r3, r3
 8011b96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011b9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011b9e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011ba2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011ba6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011baa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011bae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011bb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011bb6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8011bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bbe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8011bc2:	681a      	ldr	r2, [r3, #0]
 8011bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8011bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	781b      	ldrb	r3, [r3, #0]
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	441a      	add	r2, r3
 8011bd4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8011bd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011bdc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011be0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011be4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011be8:	b29b      	uxth	r3, r3
 8011bea:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011bec:	2300      	movs	r3, #0
}
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8011bf4:	46bd      	mov	sp, r7
 8011bf6:	bd80      	pop	{r7, pc}

08011bf8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011bf8:	b480      	push	{r7}
 8011bfa:	b085      	sub	sp, #20
 8011bfc:	af00      	add	r7, sp, #0
 8011bfe:	6078      	str	r0, [r7, #4]
 8011c00:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8011c02:	683b      	ldr	r3, [r7, #0]
 8011c04:	785b      	ldrb	r3, [r3, #1]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d020      	beq.n	8011c4c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8011c0a:	687a      	ldr	r2, [r7, #4]
 8011c0c:	683b      	ldr	r3, [r7, #0]
 8011c0e:	781b      	ldrb	r3, [r3, #0]
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	4413      	add	r3, r2
 8011c14:	881b      	ldrh	r3, [r3, #0]
 8011c16:	b29b      	uxth	r3, r3
 8011c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011c1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011c20:	81bb      	strh	r3, [r7, #12]
 8011c22:	89bb      	ldrh	r3, [r7, #12]
 8011c24:	f083 0310 	eor.w	r3, r3, #16
 8011c28:	81bb      	strh	r3, [r7, #12]
 8011c2a:	687a      	ldr	r2, [r7, #4]
 8011c2c:	683b      	ldr	r3, [r7, #0]
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	009b      	lsls	r3, r3, #2
 8011c32:	441a      	add	r2, r3
 8011c34:	89bb      	ldrh	r3, [r7, #12]
 8011c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c46:	b29b      	uxth	r3, r3
 8011c48:	8013      	strh	r3, [r2, #0]
 8011c4a:	e01f      	b.n	8011c8c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8011c4c:	687a      	ldr	r2, [r7, #4]
 8011c4e:	683b      	ldr	r3, [r7, #0]
 8011c50:	781b      	ldrb	r3, [r3, #0]
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	4413      	add	r3, r2
 8011c56:	881b      	ldrh	r3, [r3, #0]
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011c5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011c62:	81fb      	strh	r3, [r7, #14]
 8011c64:	89fb      	ldrh	r3, [r7, #14]
 8011c66:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011c6a:	81fb      	strh	r3, [r7, #14]
 8011c6c:	687a      	ldr	r2, [r7, #4]
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	009b      	lsls	r3, r3, #2
 8011c74:	441a      	add	r2, r3
 8011c76:	89fb      	ldrh	r3, [r7, #14]
 8011c78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011c7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011c80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8011c8c:	2300      	movs	r3, #0
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3714      	adds	r7, #20
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr

08011c9a <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011c9a:	b480      	push	{r7}
 8011c9c:	b087      	sub	sp, #28
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	6078      	str	r0, [r7, #4]
 8011ca2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011ca4:	683b      	ldr	r3, [r7, #0]
 8011ca6:	7b1b      	ldrb	r3, [r3, #12]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	f040 809d 	bne.w	8011de8 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8011cae:	683b      	ldr	r3, [r7, #0]
 8011cb0:	785b      	ldrb	r3, [r3, #1]
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d04c      	beq.n	8011d50 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011cb6:	687a      	ldr	r2, [r7, #4]
 8011cb8:	683b      	ldr	r3, [r7, #0]
 8011cba:	781b      	ldrb	r3, [r3, #0]
 8011cbc:	009b      	lsls	r3, r3, #2
 8011cbe:	4413      	add	r3, r2
 8011cc0:	881b      	ldrh	r3, [r3, #0]
 8011cc2:	823b      	strh	r3, [r7, #16]
 8011cc4:	8a3b      	ldrh	r3, [r7, #16]
 8011cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d01b      	beq.n	8011d06 <USB_EPClearStall+0x6c>
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	683b      	ldr	r3, [r7, #0]
 8011cd2:	781b      	ldrb	r3, [r3, #0]
 8011cd4:	009b      	lsls	r3, r3, #2
 8011cd6:	4413      	add	r3, r2
 8011cd8:	881b      	ldrh	r3, [r3, #0]
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011ce0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011ce4:	81fb      	strh	r3, [r7, #14]
 8011ce6:	687a      	ldr	r2, [r7, #4]
 8011ce8:	683b      	ldr	r3, [r7, #0]
 8011cea:	781b      	ldrb	r3, [r3, #0]
 8011cec:	009b      	lsls	r3, r3, #2
 8011cee:	441a      	add	r2, r3
 8011cf0:	89fb      	ldrh	r3, [r7, #14]
 8011cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011cfe:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8011d02:	b29b      	uxth	r3, r3
 8011d04:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011d06:	683b      	ldr	r3, [r7, #0]
 8011d08:	78db      	ldrb	r3, [r3, #3]
 8011d0a:	2b01      	cmp	r3, #1
 8011d0c:	d06c      	beq.n	8011de8 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011d0e:	687a      	ldr	r2, [r7, #4]
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	009b      	lsls	r3, r3, #2
 8011d16:	4413      	add	r3, r2
 8011d18:	881b      	ldrh	r3, [r3, #0]
 8011d1a:	b29b      	uxth	r3, r3
 8011d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011d24:	81bb      	strh	r3, [r7, #12]
 8011d26:	89bb      	ldrh	r3, [r7, #12]
 8011d28:	f083 0320 	eor.w	r3, r3, #32
 8011d2c:	81bb      	strh	r3, [r7, #12]
 8011d2e:	687a      	ldr	r2, [r7, #4]
 8011d30:	683b      	ldr	r3, [r7, #0]
 8011d32:	781b      	ldrb	r3, [r3, #0]
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	441a      	add	r2, r3
 8011d38:	89bb      	ldrh	r3, [r7, #12]
 8011d3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011d46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d4a:	b29b      	uxth	r3, r3
 8011d4c:	8013      	strh	r3, [r2, #0]
 8011d4e:	e04b      	b.n	8011de8 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011d50:	687a      	ldr	r2, [r7, #4]
 8011d52:	683b      	ldr	r3, [r7, #0]
 8011d54:	781b      	ldrb	r3, [r3, #0]
 8011d56:	009b      	lsls	r3, r3, #2
 8011d58:	4413      	add	r3, r2
 8011d5a:	881b      	ldrh	r3, [r3, #0]
 8011d5c:	82fb      	strh	r3, [r7, #22]
 8011d5e:	8afb      	ldrh	r3, [r7, #22]
 8011d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011d64:	2b00      	cmp	r3, #0
 8011d66:	d01b      	beq.n	8011da0 <USB_EPClearStall+0x106>
 8011d68:	687a      	ldr	r2, [r7, #4]
 8011d6a:	683b      	ldr	r3, [r7, #0]
 8011d6c:	781b      	ldrb	r3, [r3, #0]
 8011d6e:	009b      	lsls	r3, r3, #2
 8011d70:	4413      	add	r3, r2
 8011d72:	881b      	ldrh	r3, [r3, #0]
 8011d74:	b29b      	uxth	r3, r3
 8011d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8011d7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011d7e:	82bb      	strh	r3, [r7, #20]
 8011d80:	687a      	ldr	r2, [r7, #4]
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	781b      	ldrb	r3, [r3, #0]
 8011d86:	009b      	lsls	r3, r3, #2
 8011d88:	441a      	add	r2, r3
 8011d8a:	8abb      	ldrh	r3, [r7, #20]
 8011d8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011d90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011d94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8011d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d9c:	b29b      	uxth	r3, r3
 8011d9e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011da0:	687a      	ldr	r2, [r7, #4]
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	781b      	ldrb	r3, [r3, #0]
 8011da6:	009b      	lsls	r3, r3, #2
 8011da8:	4413      	add	r3, r2
 8011daa:	881b      	ldrh	r3, [r3, #0]
 8011dac:	b29b      	uxth	r3, r3
 8011dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8011db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8011db6:	827b      	strh	r3, [r7, #18]
 8011db8:	8a7b      	ldrh	r3, [r7, #18]
 8011dba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8011dbe:	827b      	strh	r3, [r7, #18]
 8011dc0:	8a7b      	ldrh	r3, [r7, #18]
 8011dc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8011dc6:	827b      	strh	r3, [r7, #18]
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	683b      	ldr	r3, [r7, #0]
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	009b      	lsls	r3, r3, #2
 8011dd0:	441a      	add	r2, r3
 8011dd2:	8a7b      	ldrh	r3, [r7, #18]
 8011dd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8011dd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8011ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8011de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011de4:	b29b      	uxth	r3, r3
 8011de6:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8011de8:	2300      	movs	r3, #0
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	371c      	adds	r7, #28
 8011dee:	46bd      	mov	sp, r7
 8011df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011df4:	4770      	bx	lr

08011df6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8011df6:	b480      	push	{r7}
 8011df8:	b083      	sub	sp, #12
 8011dfa:	af00      	add	r7, sp, #0
 8011dfc:	6078      	str	r0, [r7, #4]
 8011dfe:	460b      	mov	r3, r1
 8011e00:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8011e02:	78fb      	ldrb	r3, [r7, #3]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d103      	bne.n	8011e10 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2280      	movs	r2, #128	; 0x80
 8011e0c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8011e10:	2300      	movs	r3, #0
}
 8011e12:	4618      	mov	r0, r3
 8011e14:	370c      	adds	r7, #12
 8011e16:	46bd      	mov	sp, r7
 8011e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e1c:	4770      	bx	lr

08011e1e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8011e1e:	b480      	push	{r7}
 8011e20:	b083      	sub	sp, #12
 8011e22:	af00      	add	r7, sp, #0
 8011e24:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8011e2c:	b29b      	uxth	r3, r3
 8011e2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8011e32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8011e36:	b29a      	uxth	r2, r3
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8011e3e:	2300      	movs	r3, #0
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	370c      	adds	r7, #12
 8011e44:	46bd      	mov	sp, r7
 8011e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e4a:	4770      	bx	lr

08011e4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8011e4c:	b480      	push	{r7}
 8011e4e:	b085      	sub	sp, #20
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8011e54:	687b      	ldr	r3, [r7, #4]
 8011e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8011e5a:	b29b      	uxth	r3, r3
 8011e5c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8011e5e:	68fb      	ldr	r3, [r7, #12]
}
 8011e60:	4618      	mov	r0, r3
 8011e62:	3714      	adds	r7, #20
 8011e64:	46bd      	mov	sp, r7
 8011e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6a:	4770      	bx	lr

08011e6c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011e6c:	b480      	push	{r7}
 8011e6e:	b08b      	sub	sp, #44	; 0x2c
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	60f8      	str	r0, [r7, #12]
 8011e74:	60b9      	str	r1, [r7, #8]
 8011e76:	4611      	mov	r1, r2
 8011e78:	461a      	mov	r2, r3
 8011e7a:	460b      	mov	r3, r1
 8011e7c:	80fb      	strh	r3, [r7, #6]
 8011e7e:	4613      	mov	r3, r2
 8011e80:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8011e82:	88bb      	ldrh	r3, [r7, #4]
 8011e84:	3301      	adds	r3, #1
 8011e86:	085b      	lsrs	r3, r3, #1
 8011e88:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011e92:	88fa      	ldrh	r2, [r7, #6]
 8011e94:	697b      	ldr	r3, [r7, #20]
 8011e96:	4413      	add	r3, r2
 8011e98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011e9c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011e9e:	69bb      	ldr	r3, [r7, #24]
 8011ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8011ea2:	e01b      	b.n	8011edc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8011ea4:	69fb      	ldr	r3, [r7, #28]
 8011ea6:	781b      	ldrb	r3, [r3, #0]
 8011ea8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	3301      	adds	r3, #1
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	021b      	lsls	r3, r3, #8
 8011eb2:	b21a      	sxth	r2, r3
 8011eb4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011eb8:	4313      	orrs	r3, r2
 8011eba:	b21b      	sxth	r3, r3
 8011ebc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8011ebe:	6a3b      	ldr	r3, [r7, #32]
 8011ec0:	8a7a      	ldrh	r2, [r7, #18]
 8011ec2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8011ec4:	6a3b      	ldr	r3, [r7, #32]
 8011ec6:	3302      	adds	r3, #2
 8011ec8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	3301      	adds	r3, #1
 8011ece:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8011ed0:	69fb      	ldr	r3, [r7, #28]
 8011ed2:	3301      	adds	r3, #1
 8011ed4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed8:	3b01      	subs	r3, #1
 8011eda:	627b      	str	r3, [r7, #36]	; 0x24
 8011edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d1e0      	bne.n	8011ea4 <USB_WritePMA+0x38>
  }
}
 8011ee2:	bf00      	nop
 8011ee4:	bf00      	nop
 8011ee6:	372c      	adds	r7, #44	; 0x2c
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eee:	4770      	bx	lr

08011ef0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8011ef0:	b480      	push	{r7}
 8011ef2:	b08b      	sub	sp, #44	; 0x2c
 8011ef4:	af00      	add	r7, sp, #0
 8011ef6:	60f8      	str	r0, [r7, #12]
 8011ef8:	60b9      	str	r1, [r7, #8]
 8011efa:	4611      	mov	r1, r2
 8011efc:	461a      	mov	r2, r3
 8011efe:	460b      	mov	r3, r1
 8011f00:	80fb      	strh	r3, [r7, #6]
 8011f02:	4613      	mov	r3, r2
 8011f04:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8011f06:	88bb      	ldrh	r3, [r7, #4]
 8011f08:	085b      	lsrs	r3, r3, #1
 8011f0a:	b29b      	uxth	r3, r3
 8011f0c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8011f0e:	68fb      	ldr	r3, [r7, #12]
 8011f10:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8011f12:	68bb      	ldr	r3, [r7, #8]
 8011f14:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8011f16:	88fa      	ldrh	r2, [r7, #6]
 8011f18:	697b      	ldr	r3, [r7, #20]
 8011f1a:	4413      	add	r3, r2
 8011f1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011f20:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8011f22:	69bb      	ldr	r3, [r7, #24]
 8011f24:	627b      	str	r3, [r7, #36]	; 0x24
 8011f26:	e018      	b.n	8011f5a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8011f28:	6a3b      	ldr	r3, [r7, #32]
 8011f2a:	881b      	ldrh	r3, [r3, #0]
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8011f30:	6a3b      	ldr	r3, [r7, #32]
 8011f32:	3302      	adds	r3, #2
 8011f34:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	b2da      	uxtb	r2, r3
 8011f3a:	69fb      	ldr	r3, [r7, #28]
 8011f3c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011f3e:	69fb      	ldr	r3, [r7, #28]
 8011f40:	3301      	adds	r3, #1
 8011f42:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8011f44:	693b      	ldr	r3, [r7, #16]
 8011f46:	0a1b      	lsrs	r3, r3, #8
 8011f48:	b2da      	uxtb	r2, r3
 8011f4a:	69fb      	ldr	r3, [r7, #28]
 8011f4c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8011f4e:	69fb      	ldr	r3, [r7, #28]
 8011f50:	3301      	adds	r3, #1
 8011f52:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8011f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f56:	3b01      	subs	r3, #1
 8011f58:	627b      	str	r3, [r7, #36]	; 0x24
 8011f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d1e3      	bne.n	8011f28 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8011f60:	88bb      	ldrh	r3, [r7, #4]
 8011f62:	f003 0301 	and.w	r3, r3, #1
 8011f66:	b29b      	uxth	r3, r3
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d007      	beq.n	8011f7c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8011f6c:	6a3b      	ldr	r3, [r7, #32]
 8011f6e:	881b      	ldrh	r3, [r3, #0]
 8011f70:	b29b      	uxth	r3, r3
 8011f72:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	b2da      	uxtb	r2, r3
 8011f78:	69fb      	ldr	r3, [r7, #28]
 8011f7a:	701a      	strb	r2, [r3, #0]
  }
}
 8011f7c:	bf00      	nop
 8011f7e:	372c      	adds	r7, #44	; 0x2c
 8011f80:	46bd      	mov	sp, r7
 8011f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f86:	4770      	bx	lr

08011f88 <ptr_8to16>:
static UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p);
#ifdef UGUI_USE_UTF8
static UG_U16 _UG_DecodeUTF8(char **str);
#endif

static UG_U16 ptr_8to16(const UG_U8* p){
 8011f88:	b480      	push	{r7}
 8011f8a:	b085      	sub	sp, #20
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  UG_U16 d = *p++;
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	1c5a      	adds	r2, r3, #1
 8011f94:	607a      	str	r2, [r7, #4]
 8011f96:	781b      	ldrb	r3, [r3, #0]
 8011f98:	81fb      	strh	r3, [r7, #14]
  return ((d<<8) | *p);
 8011f9a:	89fb      	ldrh	r3, [r7, #14]
 8011f9c:	021b      	lsls	r3, r3, #8
 8011f9e:	b21a      	sxth	r2, r3
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	781b      	ldrb	r3, [r3, #0]
 8011fa4:	b21b      	sxth	r3, r3
 8011fa6:	4313      	orrs	r3, r2
 8011fa8:	b21b      	sxth	r3, r3
 8011faa:	b29b      	uxth	r3, r3
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3714      	adds	r7, #20
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fb6:	4770      	bx	lr

08011fb8 <UG_Init>:

/* Pointer to the gui */
static UG_GUI* gui;

UG_S16 UG_Init( UG_GUI* g, UG_DEVICE *device )
{
 8011fb8:	b480      	push	{r7}
 8011fba:	b085      	sub	sp, #20
 8011fbc:	af00      	add	r7, sp, #0
 8011fbe:	6078      	str	r0, [r7, #4]
 8011fc0:	6039      	str	r1, [r7, #0]
   UG_U8 i;

   g->device = device;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	683a      	ldr	r2, [r7, #0]
 8011fc6:	601a      	str	r2, [r3, #0]
#if defined(UGUI_USE_CONSOLE)
   g->console.x_start = 4;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2204      	movs	r2, #4
 8011fcc:	839a      	strh	r2, [r3, #28]
   g->console.y_start = 4;
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2204      	movs	r2, #4
 8011fd2:	83da      	strh	r2, [r3, #30]
   g->console.x_end = g->device->x_dim - g->console.x_start-1;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011fdc:	b29a      	uxth	r2, r3
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	1ad3      	subs	r3, r2, r3
 8011fe8:	b29b      	uxth	r3, r3
 8011fea:	3b01      	subs	r3, #1
 8011fec:	b29b      	uxth	r3, r3
 8011fee:	b21a      	sxth	r2, r3
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	841a      	strh	r2, [r3, #32]
   g->console.y_end = g->device->y_dim - g->console.x_start-1;
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011ffc:	b29a      	uxth	r2, r3
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8012004:	b29b      	uxth	r3, r3
 8012006:	1ad3      	subs	r3, r2, r3
 8012008:	b29b      	uxth	r3, r3
 801200a:	3b01      	subs	r3, #1
 801200c:	b29b      	uxth	r3, r3
 801200e:	b21a      	sxth	r2, r3
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_pos = g->console.x_end;
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	f9b3 2020 	ldrsh.w	r2, [r3, #32]
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	831a      	strh	r2, [r3, #24]
   g->console.y_pos = g->console.y_end;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	f9b3 2022 	ldrsh.w	r2, [r3, #34]	; 0x22
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	835a      	strh	r2, [r3, #26]
#endif
   g->char_h_space = 1;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2201      	movs	r2, #1
 801202c:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
   g->char_v_space = 1;
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	2201      	movs	r2, #1
 8012034:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
   g->font=NULL;
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	2200      	movs	r2, #0
 801203c:	629a      	str	r2, [r3, #40]	; 0x28
   g->currentFont.bytes_per_char = 0;
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	2200      	movs	r2, #0
 8012042:	861a      	strh	r2, [r3, #48]	; 0x30
   g->currentFont.char_height = 0;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2200      	movs	r2, #0
 8012048:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   g->currentFont.char_width = 0;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
   g->currentFont.number_of_chars = 0;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	2200      	movs	r2, #0
 8012058:	865a      	strh	r2, [r3, #50]	; 0x32
   g->currentFont.number_of_offsets = 0;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	869a      	strh	r2, [r3, #52]	; 0x34
   g->currentFont.widths = NULL;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	2200      	movs	r2, #0
 8012064:	639a      	str	r2, [r3, #56]	; 0x38
   g->currentFont.offsets = NULL;
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	2200      	movs	r2, #0
 801206a:	63da      	str	r2, [r3, #60]	; 0x3c
   g->currentFont.data = NULL;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	2200      	movs	r2, #0
 8012070:	641a      	str	r2, [r3, #64]	; 0x40
   g->currentFont.font = NULL;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2200      	movs	r2, #0
 8012076:	645a      	str	r2, [r3, #68]	; 0x44
   g->desktop_color = C_DESKTOP_COLOR;
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	f645 425d 	movw	r2, #23645	; 0x5c5d
 801207e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
   g->fore_color = C_WHITE;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012088:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
   g->back_color = C_BLACK;
 801208c:	687b      	ldr	r3, [r7, #4]
 801208e:	2200      	movs	r2, #0
 8012090:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
   g->next_window = NULL;
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	2200      	movs	r2, #0
 8012098:	60da      	str	r2, [r3, #12]
   g->active_window = NULL;
 801209a:	687b      	ldr	r3, [r7, #4]
 801209c:	2200      	movs	r2, #0
 801209e:	611a      	str	r2, [r3, #16]
   g->last_window = NULL;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	2200      	movs	r2, #0
 80120a4:	615a      	str	r2, [r3, #20]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80120a6:	2300      	movs	r3, #0
 80120a8:	73fb      	strb	r3, [r7, #15]
 80120aa:	e010      	b.n	80120ce <UG_Init+0x116>
   {
      g->driver[i].driver = NULL;
 80120ac:	7bfb      	ldrb	r3, [r7, #15]
 80120ae:	687a      	ldr	r2, [r7, #4]
 80120b0:	330a      	adds	r3, #10
 80120b2:	00db      	lsls	r3, r3, #3
 80120b4:	4413      	add	r3, r2
 80120b6:	2200      	movs	r2, #0
 80120b8:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80120ba:	7bfb      	ldrb	r3, [r7, #15]
 80120bc:	687a      	ldr	r2, [r7, #4]
 80120be:	330a      	adds	r3, #10
 80120c0:	00db      	lsls	r3, r3, #3
 80120c2:	4413      	add	r3, r2
 80120c4:	2200      	movs	r2, #0
 80120c6:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80120c8:	7bfb      	ldrb	r3, [r7, #15]
 80120ca:	3301      	adds	r3, #1
 80120cc:	73fb      	strb	r3, [r7, #15]
 80120ce:	7bfb      	ldrb	r3, [r7, #15]
 80120d0:	2b03      	cmp	r3, #3
 80120d2:	d9eb      	bls.n	80120ac <UG_Init+0xf4>
   }

   gui = g;
 80120d4:	4a04      	ldr	r2, [pc, #16]	; (80120e8 <UG_Init+0x130>)
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6013      	str	r3, [r2, #0]
   return 1;
 80120da:	2301      	movs	r3, #1
}
 80120dc:	4618      	mov	r0, r3
 80120de:	3714      	adds	r7, #20
 80120e0:	46bd      	mov	sp, r7
 80120e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120e6:	4770      	bx	lr
 80120e8:	20001cd8 	.word	0x20001cd8

080120ec <UG_FontSelect>:

/*
 * Sets the GUI font
 */
void UG_FontSelect( UG_FONT* font )
{
 80120ec:	b480      	push	{r7}
 80120ee:	b083      	sub	sp, #12
 80120f0:	af00      	add	r7, sp, #0
 80120f2:	6078      	str	r0, [r7, #4]
  gui->font = font;
 80120f4:	4b04      	ldr	r3, [pc, #16]	; (8012108 <UG_FontSelect+0x1c>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	687a      	ldr	r2, [r7, #4]
 80120fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80120fc:	bf00      	nop
 80120fe:	370c      	adds	r7, #12
 8012100:	46bd      	mov	sp, r7
 8012102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012106:	4770      	bx	lr
 8012108:	20001cd8 	.word	0x20001cd8

0801210c <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b084      	sub	sp, #16
 8012110:	af02      	add	r7, sp, #8
 8012112:	4603      	mov	r3, r0
 8012114:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->device->x_dim-1,gui->device->y_dim-1,c);
 8012116:	4b0e      	ldr	r3, [pc, #56]	; (8012150 <UG_FillScreen+0x44>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012120:	b29b      	uxth	r3, r3
 8012122:	3b01      	subs	r3, #1
 8012124:	b29b      	uxth	r3, r3
 8012126:	b21a      	sxth	r2, r3
 8012128:	4b09      	ldr	r3, [pc, #36]	; (8012150 <UG_FillScreen+0x44>)
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012132:	b29b      	uxth	r3, r3
 8012134:	3b01      	subs	r3, #1
 8012136:	b29b      	uxth	r3, r3
 8012138:	b219      	sxth	r1, r3
 801213a:	88fb      	ldrh	r3, [r7, #6]
 801213c:	9300      	str	r3, [sp, #0]
 801213e:	460b      	mov	r3, r1
 8012140:	2100      	movs	r1, #0
 8012142:	2000      	movs	r0, #0
 8012144:	f000 f806 	bl	8012154 <UG_FillFrame>
}
 8012148:	bf00      	nop
 801214a:	3708      	adds	r7, #8
 801214c:	46bd      	mov	sp, r7
 801214e:	bd80      	pop	{r7, pc}
 8012150:	20001cd8 	.word	0x20001cd8

08012154 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012154:	b5b0      	push	{r4, r5, r7, lr}
 8012156:	b086      	sub	sp, #24
 8012158:	af02      	add	r7, sp, #8
 801215a:	4604      	mov	r4, r0
 801215c:	4608      	mov	r0, r1
 801215e:	4611      	mov	r1, r2
 8012160:	461a      	mov	r2, r3
 8012162:	4623      	mov	r3, r4
 8012164:	80fb      	strh	r3, [r7, #6]
 8012166:	4603      	mov	r3, r0
 8012168:	80bb      	strh	r3, [r7, #4]
 801216a:	460b      	mov	r3, r1
 801216c:	807b      	strh	r3, [r7, #2]
 801216e:	4613      	mov	r3, r2
 8012170:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8012172:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012176:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801217a:	429a      	cmp	r2, r3
 801217c:	da05      	bge.n	801218a <UG_FillFrame+0x36>
     swap(x1,x2);
 801217e:	88fb      	ldrh	r3, [r7, #6]
 8012180:	817b      	strh	r3, [r7, #10]
 8012182:	887b      	ldrh	r3, [r7, #2]
 8012184:	80fb      	strh	r3, [r7, #6]
 8012186:	897b      	ldrh	r3, [r7, #10]
 8012188:	807b      	strh	r3, [r7, #2]
   if ( y2 < y1 )
 801218a:	f9b7 2000 	ldrsh.w	r2, [r7]
 801218e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012192:	429a      	cmp	r2, r3
 8012194:	da05      	bge.n	80121a2 <UG_FillFrame+0x4e>
     swap(y1,y2);
 8012196:	88bb      	ldrh	r3, [r7, #4]
 8012198:	813b      	strh	r3, [r7, #8]
 801219a:	883b      	ldrh	r3, [r7, #0]
 801219c:	80bb      	strh	r3, [r7, #4]
 801219e:	893b      	ldrh	r3, [r7, #8]
 80121a0:	803b      	strh	r3, [r7, #0]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80121a2:	4b24      	ldr	r3, [pc, #144]	; (8012234 <UG_FillFrame+0xe0>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80121aa:	f003 0302 	and.w	r3, r3, #2
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d012      	beq.n	80121d8 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80121b2:	4b20      	ldr	r3, [pc, #128]	; (8012234 <UG_FillFrame+0xe0>)
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80121b8:	461d      	mov	r5, r3
 80121ba:	f9b7 4000 	ldrsh.w	r4, [r7]
 80121be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80121c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80121c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80121ca:	8c3b      	ldrh	r3, [r7, #32]
 80121cc:	9300      	str	r3, [sp, #0]
 80121ce:	4623      	mov	r3, r4
 80121d0:	47a8      	blx	r5
 80121d2:	4603      	mov	r3, r0
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d028      	beq.n	801222a <UG_FillFrame+0xd6>
   }

   for( m=y1; m<=y2; m++ )
 80121d8:	88bb      	ldrh	r3, [r7, #4]
 80121da:	81bb      	strh	r3, [r7, #12]
 80121dc:	e01e      	b.n	801221c <UG_FillFrame+0xc8>
   {
      for( n=x1; n<=x2; n++ )
 80121de:	88fb      	ldrh	r3, [r7, #6]
 80121e0:	81fb      	strh	r3, [r7, #14]
 80121e2:	e00f      	b.n	8012204 <UG_FillFrame+0xb0>
      {
         gui->device->pset(n,m,c);
 80121e4:	4b13      	ldr	r3, [pc, #76]	; (8012234 <UG_FillFrame+0xe0>)
 80121e6:	681b      	ldr	r3, [r3, #0]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	8c3a      	ldrh	r2, [r7, #32]
 80121ee:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80121f2:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80121f6:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80121f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80121fc:	b29b      	uxth	r3, r3
 80121fe:	3301      	adds	r3, #1
 8012200:	b29b      	uxth	r3, r3
 8012202:	81fb      	strh	r3, [r7, #14]
 8012204:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012208:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801220c:	429a      	cmp	r2, r3
 801220e:	dde9      	ble.n	80121e4 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8012210:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8012214:	b29b      	uxth	r3, r3
 8012216:	3301      	adds	r3, #1
 8012218:	b29b      	uxth	r3, r3
 801221a:	81bb      	strh	r3, [r7, #12]
 801221c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8012220:	f9b7 3000 	ldrsh.w	r3, [r7]
 8012224:	429a      	cmp	r2, r3
 8012226:	ddda      	ble.n	80121de <UG_FillFrame+0x8a>
 8012228:	e000      	b.n	801222c <UG_FillFrame+0xd8>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 801222a:	bf00      	nop
      }
   }
}
 801222c:	3710      	adds	r7, #16
 801222e:	46bd      	mov	sp, r7
 8012230:	bdb0      	pop	{r4, r5, r7, pc}
 8012232:	bf00      	nop
 8012234:	20001cd8 	.word	0x20001cd8

08012238 <UG_DrawFrame>:
   }
   UG_DrawLine(x2, y1, x2, y2, c);
}

void UG_DrawFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012238:	b590      	push	{r4, r7, lr}
 801223a:	b085      	sub	sp, #20
 801223c:	af02      	add	r7, sp, #8
 801223e:	4604      	mov	r4, r0
 8012240:	4608      	mov	r0, r1
 8012242:	4611      	mov	r1, r2
 8012244:	461a      	mov	r2, r3
 8012246:	4623      	mov	r3, r4
 8012248:	80fb      	strh	r3, [r7, #6]
 801224a:	4603      	mov	r3, r0
 801224c:	80bb      	strh	r3, [r7, #4]
 801224e:	460b      	mov	r3, r1
 8012250:	807b      	strh	r3, [r7, #2]
 8012252:	4613      	mov	r3, r2
 8012254:	803b      	strh	r3, [r7, #0]
   UG_DrawLine(x1,y1,x2,y1,c);
 8012256:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 801225a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801225e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012262:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012266:	8b3b      	ldrh	r3, [r7, #24]
 8012268:	9300      	str	r3, [sp, #0]
 801226a:	4623      	mov	r3, r4
 801226c:	f000 f912 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(x1,y2,x2,y2,c);
 8012270:	f9b7 4000 	ldrsh.w	r4, [r7]
 8012274:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012278:	f9b7 1000 	ldrsh.w	r1, [r7]
 801227c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8012280:	8b3b      	ldrh	r3, [r7, #24]
 8012282:	9300      	str	r3, [sp, #0]
 8012284:	4623      	mov	r3, r4
 8012286:	f000 f905 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(x1,y1,x1,y2,c);
 801228a:	f9b7 4000 	ldrsh.w	r4, [r7]
 801228e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8012292:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8012296:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 801229a:	8b3b      	ldrh	r3, [r7, #24]
 801229c:	9300      	str	r3, [sp, #0]
 801229e:	4623      	mov	r3, r4
 80122a0:	f000 f8f8 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(x2,y1,x2,y2,c);
 80122a4:	f9b7 4000 	ldrsh.w	r4, [r7]
 80122a8:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80122ac:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80122b0:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 80122b4:	8b3b      	ldrh	r3, [r7, #24]
 80122b6:	9300      	str	r3, [sp, #0]
 80122b8:	4623      	mov	r3, r4
 80122ba:	f000 f8eb 	bl	8012494 <UG_DrawLine>
}
 80122be:	bf00      	nop
 80122c0:	370c      	adds	r7, #12
 80122c2:	46bd      	mov	sp, r7
 80122c4:	bd90      	pop	{r4, r7, pc}
	...

080122c8 <UG_DrawCircle>:
{
   gui->device->pset(x0,y0,c);
}

void UG_DrawCircle( UG_S16 x0, UG_S16 y0, UG_S16 r, UG_COLOR c )
{
 80122c8:	b590      	push	{r4, r7, lr}
 80122ca:	b087      	sub	sp, #28
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	4604      	mov	r4, r0
 80122d0:	4608      	mov	r0, r1
 80122d2:	4611      	mov	r1, r2
 80122d4:	461a      	mov	r2, r3
 80122d6:	4623      	mov	r3, r4
 80122d8:	80fb      	strh	r3, [r7, #6]
 80122da:	4603      	mov	r3, r0
 80122dc:	80bb      	strh	r3, [r7, #4]
 80122de:	460b      	mov	r3, r1
 80122e0:	807b      	strh	r3, [r7, #2]
 80122e2:	4613      	mov	r3, r2
 80122e4:	803b      	strh	r3, [r7, #0]
   UG_S16 x,y,xd,yd,e;

   if ( x0<0 ) return;
 80122e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	f2c0 80c8 	blt.w	8012480 <UG_DrawCircle+0x1b8>
   if ( y0<0 ) return;
 80122f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	f2c0 80c5 	blt.w	8012484 <UG_DrawCircle+0x1bc>
   if ( r<=0 ) return;
 80122fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80122fe:	2b00      	cmp	r3, #0
 8012300:	f340 80c2 	ble.w	8012488 <UG_DrawCircle+0x1c0>

   xd = 1 - (r << 1);
 8012304:	887b      	ldrh	r3, [r7, #2]
 8012306:	005b      	lsls	r3, r3, #1
 8012308:	b29b      	uxth	r3, r3
 801230a:	f1c3 0301 	rsb	r3, r3, #1
 801230e:	b29b      	uxth	r3, r3
 8012310:	827b      	strh	r3, [r7, #18]
   yd = 0;
 8012312:	2300      	movs	r3, #0
 8012314:	823b      	strh	r3, [r7, #16]
   e = 0;
 8012316:	2300      	movs	r3, #0
 8012318:	81fb      	strh	r3, [r7, #14]
   x = r;
 801231a:	887b      	ldrh	r3, [r7, #2]
 801231c:	82fb      	strh	r3, [r7, #22]
   y = 0;
 801231e:	2300      	movs	r3, #0
 8012320:	82bb      	strh	r3, [r7, #20]

   while ( x >= y )
 8012322:	e0a5      	b.n	8012470 <UG_DrawCircle+0x1a8>
   {
      gui->device->pset(x0 - x, y0 + y, c);
 8012324:	4b5a      	ldr	r3, [pc, #360]	; (8012490 <UG_DrawCircle+0x1c8>)
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	685b      	ldr	r3, [r3, #4]
 801232c:	88f9      	ldrh	r1, [r7, #6]
 801232e:	8afa      	ldrh	r2, [r7, #22]
 8012330:	1a8a      	subs	r2, r1, r2
 8012332:	b292      	uxth	r2, r2
 8012334:	b210      	sxth	r0, r2
 8012336:	88b9      	ldrh	r1, [r7, #4]
 8012338:	8aba      	ldrh	r2, [r7, #20]
 801233a:	440a      	add	r2, r1
 801233c:	b292      	uxth	r2, r2
 801233e:	b211      	sxth	r1, r2
 8012340:	883a      	ldrh	r2, [r7, #0]
 8012342:	4798      	blx	r3
      gui->device->pset(x0 - x, y0 - y, c);
 8012344:	4b52      	ldr	r3, [pc, #328]	; (8012490 <UG_DrawCircle+0x1c8>)
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	681b      	ldr	r3, [r3, #0]
 801234a:	685b      	ldr	r3, [r3, #4]
 801234c:	88f9      	ldrh	r1, [r7, #6]
 801234e:	8afa      	ldrh	r2, [r7, #22]
 8012350:	1a8a      	subs	r2, r1, r2
 8012352:	b292      	uxth	r2, r2
 8012354:	b210      	sxth	r0, r2
 8012356:	88b9      	ldrh	r1, [r7, #4]
 8012358:	8aba      	ldrh	r2, [r7, #20]
 801235a:	1a8a      	subs	r2, r1, r2
 801235c:	b292      	uxth	r2, r2
 801235e:	b211      	sxth	r1, r2
 8012360:	883a      	ldrh	r2, [r7, #0]
 8012362:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 + y, c);
 8012364:	4b4a      	ldr	r3, [pc, #296]	; (8012490 <UG_DrawCircle+0x1c8>)
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	685b      	ldr	r3, [r3, #4]
 801236c:	88f9      	ldrh	r1, [r7, #6]
 801236e:	8afa      	ldrh	r2, [r7, #22]
 8012370:	440a      	add	r2, r1
 8012372:	b292      	uxth	r2, r2
 8012374:	b210      	sxth	r0, r2
 8012376:	88b9      	ldrh	r1, [r7, #4]
 8012378:	8aba      	ldrh	r2, [r7, #20]
 801237a:	440a      	add	r2, r1
 801237c:	b292      	uxth	r2, r2
 801237e:	b211      	sxth	r1, r2
 8012380:	883a      	ldrh	r2, [r7, #0]
 8012382:	4798      	blx	r3
      gui->device->pset(x0 + x, y0 - y, c);
 8012384:	4b42      	ldr	r3, [pc, #264]	; (8012490 <UG_DrawCircle+0x1c8>)
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	685b      	ldr	r3, [r3, #4]
 801238c:	88f9      	ldrh	r1, [r7, #6]
 801238e:	8afa      	ldrh	r2, [r7, #22]
 8012390:	440a      	add	r2, r1
 8012392:	b292      	uxth	r2, r2
 8012394:	b210      	sxth	r0, r2
 8012396:	88b9      	ldrh	r1, [r7, #4]
 8012398:	8aba      	ldrh	r2, [r7, #20]
 801239a:	1a8a      	subs	r2, r1, r2
 801239c:	b292      	uxth	r2, r2
 801239e:	b211      	sxth	r1, r2
 80123a0:	883a      	ldrh	r2, [r7, #0]
 80123a2:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 + x, c);
 80123a4:	4b3a      	ldr	r3, [pc, #232]	; (8012490 <UG_DrawCircle+0x1c8>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	685b      	ldr	r3, [r3, #4]
 80123ac:	88f9      	ldrh	r1, [r7, #6]
 80123ae:	8aba      	ldrh	r2, [r7, #20]
 80123b0:	1a8a      	subs	r2, r1, r2
 80123b2:	b292      	uxth	r2, r2
 80123b4:	b210      	sxth	r0, r2
 80123b6:	88b9      	ldrh	r1, [r7, #4]
 80123b8:	8afa      	ldrh	r2, [r7, #22]
 80123ba:	440a      	add	r2, r1
 80123bc:	b292      	uxth	r2, r2
 80123be:	b211      	sxth	r1, r2
 80123c0:	883a      	ldrh	r2, [r7, #0]
 80123c2:	4798      	blx	r3
      gui->device->pset(x0 - y, y0 - x, c);
 80123c4:	4b32      	ldr	r3, [pc, #200]	; (8012490 <UG_DrawCircle+0x1c8>)
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	685b      	ldr	r3, [r3, #4]
 80123cc:	88f9      	ldrh	r1, [r7, #6]
 80123ce:	8aba      	ldrh	r2, [r7, #20]
 80123d0:	1a8a      	subs	r2, r1, r2
 80123d2:	b292      	uxth	r2, r2
 80123d4:	b210      	sxth	r0, r2
 80123d6:	88b9      	ldrh	r1, [r7, #4]
 80123d8:	8afa      	ldrh	r2, [r7, #22]
 80123da:	1a8a      	subs	r2, r1, r2
 80123dc:	b292      	uxth	r2, r2
 80123de:	b211      	sxth	r1, r2
 80123e0:	883a      	ldrh	r2, [r7, #0]
 80123e2:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 + x, c);
 80123e4:	4b2a      	ldr	r3, [pc, #168]	; (8012490 <UG_DrawCircle+0x1c8>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	681b      	ldr	r3, [r3, #0]
 80123ea:	685b      	ldr	r3, [r3, #4]
 80123ec:	88f9      	ldrh	r1, [r7, #6]
 80123ee:	8aba      	ldrh	r2, [r7, #20]
 80123f0:	440a      	add	r2, r1
 80123f2:	b292      	uxth	r2, r2
 80123f4:	b210      	sxth	r0, r2
 80123f6:	88b9      	ldrh	r1, [r7, #4]
 80123f8:	8afa      	ldrh	r2, [r7, #22]
 80123fa:	440a      	add	r2, r1
 80123fc:	b292      	uxth	r2, r2
 80123fe:	b211      	sxth	r1, r2
 8012400:	883a      	ldrh	r2, [r7, #0]
 8012402:	4798      	blx	r3
      gui->device->pset(x0 + y, y0 - x, c);
 8012404:	4b22      	ldr	r3, [pc, #136]	; (8012490 <UG_DrawCircle+0x1c8>)
 8012406:	681b      	ldr	r3, [r3, #0]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	88f9      	ldrh	r1, [r7, #6]
 801240e:	8aba      	ldrh	r2, [r7, #20]
 8012410:	440a      	add	r2, r1
 8012412:	b292      	uxth	r2, r2
 8012414:	b210      	sxth	r0, r2
 8012416:	88b9      	ldrh	r1, [r7, #4]
 8012418:	8afa      	ldrh	r2, [r7, #22]
 801241a:	1a8a      	subs	r2, r1, r2
 801241c:	b292      	uxth	r2, r2
 801241e:	b211      	sxth	r1, r2
 8012420:	883a      	ldrh	r2, [r7, #0]
 8012422:	4798      	blx	r3

      y++;
 8012424:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012428:	b29b      	uxth	r3, r3
 801242a:	3301      	adds	r3, #1
 801242c:	b29b      	uxth	r3, r3
 801242e:	82bb      	strh	r3, [r7, #20]
      e += yd;
 8012430:	89fa      	ldrh	r2, [r7, #14]
 8012432:	8a3b      	ldrh	r3, [r7, #16]
 8012434:	4413      	add	r3, r2
 8012436:	b29b      	uxth	r3, r3
 8012438:	81fb      	strh	r3, [r7, #14]
      yd += 2;
 801243a:	8a3b      	ldrh	r3, [r7, #16]
 801243c:	3302      	adds	r3, #2
 801243e:	b29b      	uxth	r3, r3
 8012440:	823b      	strh	r3, [r7, #16]
      if ( ((e << 1) + xd) > 0 )
 8012442:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012446:	005a      	lsls	r2, r3, #1
 8012448:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801244c:	4413      	add	r3, r2
 801244e:	2b00      	cmp	r3, #0
 8012450:	dd0e      	ble.n	8012470 <UG_DrawCircle+0x1a8>
      {
         x--;
 8012452:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012456:	b29b      	uxth	r3, r3
 8012458:	3b01      	subs	r3, #1
 801245a:	b29b      	uxth	r3, r3
 801245c:	82fb      	strh	r3, [r7, #22]
         e += xd;
 801245e:	89fa      	ldrh	r2, [r7, #14]
 8012460:	8a7b      	ldrh	r3, [r7, #18]
 8012462:	4413      	add	r3, r2
 8012464:	b29b      	uxth	r3, r3
 8012466:	81fb      	strh	r3, [r7, #14]
         xd += 2;
 8012468:	8a7b      	ldrh	r3, [r7, #18]
 801246a:	3302      	adds	r3, #2
 801246c:	b29b      	uxth	r3, r3
 801246e:	827b      	strh	r3, [r7, #18]
   while ( x >= y )
 8012470:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012474:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012478:	429a      	cmp	r2, r3
 801247a:	f6bf af53 	bge.w	8012324 <UG_DrawCircle+0x5c>
 801247e:	e004      	b.n	801248a <UG_DrawCircle+0x1c2>
   if ( x0<0 ) return;
 8012480:	bf00      	nop
 8012482:	e002      	b.n	801248a <UG_DrawCircle+0x1c2>
   if ( y0<0 ) return;
 8012484:	bf00      	nop
 8012486:	e000      	b.n	801248a <UG_DrawCircle+0x1c2>
   if ( r<=0 ) return;
 8012488:	bf00      	nop
      }
   }
}
 801248a:	371c      	adds	r7, #28
 801248c:	46bd      	mov	sp, r7
 801248e:	bd90      	pop	{r4, r7, pc}
 8012490:	20001cd8 	.word	0x20001cd8

08012494 <UG_DrawLine>:
      }
   }
}

void UG_DrawLine( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8012494:	b5b0      	push	{r4, r5, r7, lr}
 8012496:	b08a      	sub	sp, #40	; 0x28
 8012498:	af02      	add	r7, sp, #8
 801249a:	4604      	mov	r4, r0
 801249c:	4608      	mov	r0, r1
 801249e:	4611      	mov	r1, r2
 80124a0:	461a      	mov	r2, r3
 80124a2:	4623      	mov	r3, r4
 80124a4:	80fb      	strh	r3, [r7, #6]
 80124a6:	4603      	mov	r3, r0
 80124a8:	80bb      	strh	r3, [r7, #4]
 80124aa:	460b      	mov	r3, r1
 80124ac:	807b      	strh	r3, [r7, #2]
 80124ae:	4613      	mov	r3, r2
 80124b0:	803b      	strh	r3, [r7, #0]
   UG_S16 n, dx, dy, sgndx, sgndy, dxabs, dyabs, x, y, drawx, drawy;

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_DRAW_LINE].state & DRIVER_ENABLED )
 80124b2:	4b67      	ldr	r3, [pc, #412]	; (8012650 <UG_DrawLine+0x1bc>)
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80124ba:	f003 0302 	and.w	r3, r3, #2
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d013      	beq.n	80124ea <UG_DrawLine+0x56>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80124c2:	4b63      	ldr	r3, [pc, #396]	; (8012650 <UG_DrawLine+0x1bc>)
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124c8:	461d      	mov	r5, r3
 80124ca:	f9b7 4000 	ldrsh.w	r4, [r7]
 80124ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80124d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80124d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80124da:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80124dc:	9300      	str	r3, [sp, #0]
 80124de:	4623      	mov	r3, r4
 80124e0:	47a8      	blx	r5
 80124e2:	4603      	mov	r3, r0
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	f000 80ae 	beq.w	8012646 <UG_DrawLine+0x1b2>
   }

   dx = x2 - x1;
 80124ea:	887a      	ldrh	r2, [r7, #2]
 80124ec:	88fb      	ldrh	r3, [r7, #6]
 80124ee:	1ad3      	subs	r3, r2, r3
 80124f0:	b29b      	uxth	r3, r3
 80124f2:	82bb      	strh	r3, [r7, #20]
   dy = y2 - y1;
 80124f4:	883a      	ldrh	r2, [r7, #0]
 80124f6:	88bb      	ldrh	r3, [r7, #4]
 80124f8:	1ad3      	subs	r3, r2, r3
 80124fa:	b29b      	uxth	r3, r3
 80124fc:	827b      	strh	r3, [r7, #18]
   dxabs = (dx>0)?dx:-dx;
 80124fe:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012502:	2b00      	cmp	r3, #0
 8012504:	bfb8      	it	lt
 8012506:	425b      	neglt	r3, r3
 8012508:	b29b      	uxth	r3, r3
 801250a:	823b      	strh	r3, [r7, #16]
   dyabs = (dy>0)?dy:-dy;
 801250c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012510:	2b00      	cmp	r3, #0
 8012512:	bfb8      	it	lt
 8012514:	425b      	neglt	r3, r3
 8012516:	b29b      	uxth	r3, r3
 8012518:	81fb      	strh	r3, [r7, #14]
   sgndx = (dx>0)?1:-1;
 801251a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801251e:	2b00      	cmp	r3, #0
 8012520:	dd01      	ble.n	8012526 <UG_DrawLine+0x92>
 8012522:	2301      	movs	r3, #1
 8012524:	e001      	b.n	801252a <UG_DrawLine+0x96>
 8012526:	f04f 33ff 	mov.w	r3, #4294967295
 801252a:	81bb      	strh	r3, [r7, #12]
   sgndy = (dy>0)?1:-1;
 801252c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012530:	2b00      	cmp	r3, #0
 8012532:	dd01      	ble.n	8012538 <UG_DrawLine+0xa4>
 8012534:	2301      	movs	r3, #1
 8012536:	e001      	b.n	801253c <UG_DrawLine+0xa8>
 8012538:	f04f 33ff 	mov.w	r3, #4294967295
 801253c:	817b      	strh	r3, [r7, #10]
   x = dyabs >> 1;
 801253e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012542:	105b      	asrs	r3, r3, #1
 8012544:	83bb      	strh	r3, [r7, #28]
   y = dxabs >> 1;
 8012546:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801254a:	105b      	asrs	r3, r3, #1
 801254c:	837b      	strh	r3, [r7, #26]
   drawx = x1;
 801254e:	88fb      	ldrh	r3, [r7, #6]
 8012550:	833b      	strh	r3, [r7, #24]
   drawy = y1;
 8012552:	88bb      	ldrh	r3, [r7, #4]
 8012554:	82fb      	strh	r3, [r7, #22]

   gui->device->pset(drawx, drawy,c);
 8012556:	4b3e      	ldr	r3, [pc, #248]	; (8012650 <UG_DrawLine+0x1bc>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	685b      	ldr	r3, [r3, #4]
 801255e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8012560:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8012564:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 8012568:	4798      	blx	r3

   if( dxabs >= dyabs )
 801256a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 801256e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012572:	429a      	cmp	r2, r3
 8012574:	db33      	blt.n	80125de <UG_DrawLine+0x14a>
   {
      for( n=0; n<dxabs; n++ )
 8012576:	2300      	movs	r3, #0
 8012578:	83fb      	strh	r3, [r7, #30]
 801257a:	e029      	b.n	80125d0 <UG_DrawLine+0x13c>
      {
         y += dyabs;
 801257c:	8b7a      	ldrh	r2, [r7, #26]
 801257e:	89fb      	ldrh	r3, [r7, #14]
 8012580:	4413      	add	r3, r2
 8012582:	b29b      	uxth	r3, r3
 8012584:	837b      	strh	r3, [r7, #26]
         if( y >= dxabs )
 8012586:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 801258a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801258e:	429a      	cmp	r2, r3
 8012590:	db09      	blt.n	80125a6 <UG_DrawLine+0x112>
         {
            y -= dxabs;
 8012592:	8b7a      	ldrh	r2, [r7, #26]
 8012594:	8a3b      	ldrh	r3, [r7, #16]
 8012596:	1ad3      	subs	r3, r2, r3
 8012598:	b29b      	uxth	r3, r3
 801259a:	837b      	strh	r3, [r7, #26]
            drawy += sgndy;
 801259c:	8afa      	ldrh	r2, [r7, #22]
 801259e:	897b      	ldrh	r3, [r7, #10]
 80125a0:	4413      	add	r3, r2
 80125a2:	b29b      	uxth	r3, r3
 80125a4:	82fb      	strh	r3, [r7, #22]
         }
         drawx += sgndx;
 80125a6:	8b3a      	ldrh	r2, [r7, #24]
 80125a8:	89bb      	ldrh	r3, [r7, #12]
 80125aa:	4413      	add	r3, r2
 80125ac:	b29b      	uxth	r3, r3
 80125ae:	833b      	strh	r3, [r7, #24]
         gui->device->pset(drawx, drawy,c);
 80125b0:	4b27      	ldr	r3, [pc, #156]	; (8012650 <UG_DrawLine+0x1bc>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	685b      	ldr	r3, [r3, #4]
 80125b8:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80125ba:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80125be:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 80125c2:	4798      	blx	r3
      for( n=0; n<dxabs; n++ )
 80125c4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80125c8:	b29b      	uxth	r3, r3
 80125ca:	3301      	adds	r3, #1
 80125cc:	b29b      	uxth	r3, r3
 80125ce:	83fb      	strh	r3, [r7, #30]
 80125d0:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80125d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80125d8:	429a      	cmp	r2, r3
 80125da:	dbcf      	blt.n	801257c <UG_DrawLine+0xe8>
 80125dc:	e034      	b.n	8012648 <UG_DrawLine+0x1b4>
      }
   }
   else
   {
      for( n=0; n<dyabs; n++ )
 80125de:	2300      	movs	r3, #0
 80125e0:	83fb      	strh	r3, [r7, #30]
 80125e2:	e029      	b.n	8012638 <UG_DrawLine+0x1a4>
      {
         x += dxabs;
 80125e4:	8bba      	ldrh	r2, [r7, #28]
 80125e6:	8a3b      	ldrh	r3, [r7, #16]
 80125e8:	4413      	add	r3, r2
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	83bb      	strh	r3, [r7, #28]
         if( x >= dyabs )
 80125ee:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 80125f2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	db09      	blt.n	801260e <UG_DrawLine+0x17a>
         {
            x -= dyabs;
 80125fa:	8bba      	ldrh	r2, [r7, #28]
 80125fc:	89fb      	ldrh	r3, [r7, #14]
 80125fe:	1ad3      	subs	r3, r2, r3
 8012600:	b29b      	uxth	r3, r3
 8012602:	83bb      	strh	r3, [r7, #28]
            drawx += sgndx;
 8012604:	8b3a      	ldrh	r2, [r7, #24]
 8012606:	89bb      	ldrh	r3, [r7, #12]
 8012608:	4413      	add	r3, r2
 801260a:	b29b      	uxth	r3, r3
 801260c:	833b      	strh	r3, [r7, #24]
         }
         drawy += sgndy;
 801260e:	8afa      	ldrh	r2, [r7, #22]
 8012610:	897b      	ldrh	r3, [r7, #10]
 8012612:	4413      	add	r3, r2
 8012614:	b29b      	uxth	r3, r3
 8012616:	82fb      	strh	r3, [r7, #22]
         gui->device->pset(drawx, drawy,c);
 8012618:	4b0d      	ldr	r3, [pc, #52]	; (8012650 <UG_DrawLine+0x1bc>)
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	685b      	ldr	r3, [r3, #4]
 8012620:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8012622:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8012626:	f9b7 0018 	ldrsh.w	r0, [r7, #24]
 801262a:	4798      	blx	r3
      for( n=0; n<dyabs; n++ )
 801262c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012630:	b29b      	uxth	r3, r3
 8012632:	3301      	adds	r3, #1
 8012634:	b29b      	uxth	r3, r3
 8012636:	83fb      	strh	r3, [r7, #30]
 8012638:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801263c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012640:	429a      	cmp	r2, r3
 8012642:	dbcf      	blt.n	80125e4 <UG_DrawLine+0x150>
 8012644:	e000      	b.n	8012648 <UG_DrawLine+0x1b4>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_DRAW_LINE].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8012646:	bf00      	nop
      }
   }  
}
 8012648:	3720      	adds	r7, #32
 801264a:	46bd      	mov	sp, r7
 801264c:	bdb0      	pop	{r4, r5, r7, pc}
 801264e:	bf00      	nop
 8012650:	20001cd8 	.word	0x20001cd8

08012654 <UG_PutString>:
    UG_DrawLine(a, y, b + 1, y, c);
  }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8012654:	b590      	push	{r4, r7, lr}
 8012656:	b087      	sub	sp, #28
 8012658:	af02      	add	r7, sp, #8
 801265a:	4603      	mov	r3, r0
 801265c:	603a      	str	r2, [r7, #0]
 801265e:	80fb      	strh	r3, [r7, #6]
 8012660:	460b      	mov	r3, r1
 8012662:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp,cw;
   UG_CHAR chr;

   xp=x;
 8012664:	88fb      	ldrh	r3, [r7, #6]
 8012666:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8012668:	88bb      	ldrh	r3, [r7, #4]
 801266a:	81bb      	strh	r3, [r7, #12]

   _UG_FontSelect(gui->font);
 801266c:	4b44      	ldr	r3, [pc, #272]	; (8012780 <UG_PutString+0x12c>)
 801266e:	681b      	ldr	r3, [r3, #0]
 8012670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012672:	4618      	mov	r0, r3
 8012674:	f000 fa96 	bl	8012ba4 <_UG_FontSelect>
   while ( *str != 0 )
 8012678:	e064      	b.n	8012744 <UG_PutString+0xf0>
   {
      #ifdef UGUI_USE_UTF8
      if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801267a:	4b41      	ldr	r3, [pc, #260]	; (8012780 <UG_PutString+0x12c>)
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012682:	2b00      	cmp	r3, #0
 8012684:	d106      	bne.n	8012694 <UG_PutString+0x40>
         chr = _UG_DecodeUTF8(&str);
 8012686:	463b      	mov	r3, r7
 8012688:	4618      	mov	r0, r3
 801268a:	f000 f8c7 	bl	801281c <_UG_DecodeUTF8>
 801268e:	4603      	mov	r3, r0
 8012690:	817b      	strh	r3, [r7, #10]
 8012692:	e004      	b.n	801269e <UG_PutString+0x4a>
      }
      else{
         chr = *str++;
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	1c5a      	adds	r2, r3, #1
 8012698:	603a      	str	r2, [r7, #0]
 801269a:	781b      	ldrb	r3, [r3, #0]
 801269c:	817b      	strh	r3, [r7, #10]
      }
      #else
      chr = *str++;
      #endif

      if ( chr == '\n' )
 801269e:	897b      	ldrh	r3, [r7, #10]
 80126a0:	2b0a      	cmp	r3, #10
 80126a2:	d105      	bne.n	80126b0 <UG_PutString+0x5c>
      {
         xp = gui->device->x_dim;
 80126a4:	4b36      	ldr	r3, [pc, #216]	; (8012780 <UG_PutString+0x12c>)
 80126a6:	681b      	ldr	r3, [r3, #0]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	881b      	ldrh	r3, [r3, #0]
 80126ac:	81fb      	strh	r3, [r7, #14]
         continue;
 80126ae:	e049      	b.n	8012744 <UG_PutString+0xf0>
      }
      cw = _UG_GetCharData(chr,NULL);
 80126b0:	897b      	ldrh	r3, [r7, #10]
 80126b2:	2100      	movs	r1, #0
 80126b4:	4618      	mov	r0, r3
 80126b6:	f000 f929 	bl	801290c <_UG_GetCharData>
 80126ba:	4603      	mov	r3, r0
 80126bc:	813b      	strh	r3, [r7, #8]
      if(cw==-1) continue;
 80126be:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80126c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126c6:	d100      	bne.n	80126ca <UG_PutString+0x76>
 80126c8:	e03c      	b.n	8012744 <UG_PutString+0xf0>
      if ( xp + cw > gui->device->x_dim - 1 )
 80126ca:	4b2d      	ldr	r3, [pc, #180]	; (8012780 <UG_PutString+0x12c>)
 80126cc:	681b      	ldr	r3, [r3, #0]
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80126d4:	4619      	mov	r1, r3
 80126d6:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80126da:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80126de:	4413      	add	r3, r2
 80126e0:	4299      	cmp	r1, r3
 80126e2:	dc12      	bgt.n	801270a <UG_PutString+0xb6>
      {
         xp = x;
 80126e4:	88fb      	ldrh	r3, [r7, #6]
 80126e6:	81fb      	strh	r3, [r7, #14]
         yp +=  gui->currentFont.char_height+gui->char_v_space;
 80126e8:	4b25      	ldr	r3, [pc, #148]	; (8012780 <UG_PutString+0x12c>)
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80126f0:	b21a      	sxth	r2, r3
 80126f2:	4b23      	ldr	r3, [pc, #140]	; (8012780 <UG_PutString+0x12c>)
 80126f4:	681b      	ldr	r3, [r3, #0]
 80126f6:	f993 304a 	ldrsb.w	r3, [r3, #74]	; 0x4a
 80126fa:	b21b      	sxth	r3, r3
 80126fc:	4413      	add	r3, r2
 80126fe:	b21b      	sxth	r3, r3
 8012700:	b29a      	uxth	r2, r3
 8012702:	89bb      	ldrh	r3, [r7, #12]
 8012704:	4413      	add	r3, r2
 8012706:	b29b      	uxth	r3, r3
 8012708:	81bb      	strh	r3, [r7, #12]
      }

      _UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 801270a:	4b1d      	ldr	r3, [pc, #116]	; (8012780 <UG_PutString+0x12c>)
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	f8b3 404c 	ldrh.w	r4, [r3, #76]	; 0x4c
 8012712:	4b1b      	ldr	r3, [pc, #108]	; (8012780 <UG_PutString+0x12c>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 801271a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801271e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8012722:	8978      	ldrh	r0, [r7, #10]
 8012724:	9300      	str	r3, [sp, #0]
 8012726:	4623      	mov	r3, r4
 8012728:	f000 fabe 	bl	8012ca8 <_UG_PutChar>

      xp += cw + gui->char_h_space;
 801272c:	4b14      	ldr	r3, [pc, #80]	; (8012780 <UG_PutString+0x12c>)
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	f993 3049 	ldrsb.w	r3, [r3, #73]	; 0x49
 8012734:	b29a      	uxth	r2, r3
 8012736:	893b      	ldrh	r3, [r7, #8]
 8012738:	4413      	add	r3, r2
 801273a:	b29a      	uxth	r2, r3
 801273c:	89fb      	ldrh	r3, [r7, #14]
 801273e:	4413      	add	r3, r2
 8012740:	b29b      	uxth	r3, r3
 8012742:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8012744:	683b      	ldr	r3, [r7, #0]
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d196      	bne.n	801267a <UG_PutString+0x26>
   }
   if((gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED))
 801274c:	4b0c      	ldr	r3, [pc, #48]	; (8012780 <UG_PutString+0x12c>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012754:	f003 0302 	and.w	r3, r3, #2
 8012758:	2b00      	cmp	r3, #0
 801275a:	d00c      	beq.n	8012776 <UG_PutString+0x122>
     ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(-1,-1,-1,-1);   // -1 to indicate finish
 801275c:	4b08      	ldr	r3, [pc, #32]	; (8012780 <UG_PutString+0x12c>)
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012762:	461c      	mov	r4, r3
 8012764:	f04f 33ff 	mov.w	r3, #4294967295
 8012768:	f04f 32ff 	mov.w	r2, #4294967295
 801276c:	f04f 31ff 	mov.w	r1, #4294967295
 8012770:	f04f 30ff 	mov.w	r0, #4294967295
 8012774:	47a0      	blx	r4
}
 8012776:	bf00      	nop
 8012778:	3714      	adds	r7, #20
 801277a:	46bd      	mov	sp, r7
 801277c:	bd90      	pop	{r4, r7, pc}
 801277e:	bf00      	nop
 8012780:	20001cd8 	.word	0x20001cd8

08012784 <UG_SetForecolor>:
   gui->console.back_color = c;
}
#endif

void UG_SetForecolor( UG_COLOR c )
{
 8012784:	b480      	push	{r7}
 8012786:	b083      	sub	sp, #12
 8012788:	af00      	add	r7, sp, #0
 801278a:	4603      	mov	r3, r0
 801278c:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 801278e:	4b05      	ldr	r3, [pc, #20]	; (80127a4 <UG_SetForecolor+0x20>)
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	88fa      	ldrh	r2, [r7, #6]
 8012794:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
}
 8012798:	bf00      	nop
 801279a:	370c      	adds	r7, #12
 801279c:	46bd      	mov	sp, r7
 801279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127a2:	4770      	bx	lr
 80127a4:	20001cd8 	.word	0x20001cd8

080127a8 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80127a8:	b480      	push	{r7}
 80127aa:	b083      	sub	sp, #12
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	4603      	mov	r3, r0
 80127b0:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80127b2:	4b05      	ldr	r3, [pc, #20]	; (80127c8 <UG_SetBackcolor+0x20>)
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	88fa      	ldrh	r2, [r7, #6]
 80127b8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80127bc:	bf00      	nop
 80127be:	370c      	adds	r7, #12
 80127c0:	46bd      	mov	sp, r7
 80127c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c6:	4770      	bx	lr
 80127c8:	20001cd8 	.word	0x20001cd8

080127cc <UG_FontSetHSpace>:
{
   return gui->device->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 80127cc:	b480      	push	{r7}
 80127ce:	b083      	sub	sp, #12
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	4603      	mov	r3, r0
 80127d4:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80127d6:	4b06      	ldr	r3, [pc, #24]	; (80127f0 <UG_FontSetHSpace+0x24>)
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	88fa      	ldrh	r2, [r7, #6]
 80127dc:	b252      	sxtb	r2, r2
 80127de:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
}
 80127e2:	bf00      	nop
 80127e4:	370c      	adds	r7, #12
 80127e6:	46bd      	mov	sp, r7
 80127e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127ec:	4770      	bx	lr
 80127ee:	bf00      	nop
 80127f0:	20001cd8 	.word	0x20001cd8

080127f4 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80127f4:	b480      	push	{r7}
 80127f6:	b083      	sub	sp, #12
 80127f8:	af00      	add	r7, sp, #0
 80127fa:	4603      	mov	r3, r0
 80127fc:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80127fe:	4b06      	ldr	r3, [pc, #24]	; (8012818 <UG_FontSetVSpace+0x24>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	88fa      	ldrh	r2, [r7, #6]
 8012804:	b252      	sxtb	r2, r2
 8012806:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
}
 801280a:	bf00      	nop
 801280c:	370c      	adds	r7, #12
 801280e:	46bd      	mov	sp, r7
 8012810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop
 8012818:	20001cd8 	.word	0x20001cd8

0801281c <_UG_DecodeUTF8>:
 *
 * Based on https://github.com/olikraus/u8g2/blob/master/csrc/u8x8_8x8.c
 *
 */
 #ifdef UGUI_USE_UTF8
UG_CHAR _UG_DecodeUTF8(char **str) {
 801281c:	b480      	push	{r7}
 801281e:	b085      	sub	sp, #20
 8012820:	af00      	add	r7, sp, #0
 8012822:	6078      	str	r0, [r7, #4]

  char c=**str;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	781b      	ldrb	r3, [r3, #0]
 801282a:	73fb      	strb	r3, [r7, #15]

  if ( c < 0x80 )                 // Fast detection for simple ASCII
 801282c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012830:	2b00      	cmp	r3, #0
 8012832:	db07      	blt.n	8012844 <_UG_DecodeUTF8+0x28>
  {
    *str = *str+1;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	1c5a      	adds	r2, r3, #1
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	601a      	str	r2, [r3, #0]
    return c;
 801283e:	7bfb      	ldrb	r3, [r7, #15]
 8012840:	b29b      	uxth	r3, r3
 8012842:	e05c      	b.n	80128fe <_UG_DecodeUTF8+0xe2>
  }

  UG_U8 bytes_left=0;
 8012844:	2300      	movs	r3, #0
 8012846:	73bb      	strb	r3, [r7, #14]
  UG_CHAR encoding=0;
 8012848:	2300      	movs	r3, #0
 801284a:	81bb      	strh	r3, [r7, #12]

  while(**str)
 801284c:	e04f      	b.n	80128ee <_UG_DecodeUTF8+0xd2>
  {
    c=**str;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	781b      	ldrb	r3, [r3, #0]
 8012854:	73fb      	strb	r3, [r7, #15]
    *str = *str+1;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	1c5a      	adds	r2, r3, #1
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	601a      	str	r2, [r3, #0]
    if ( bytes_left == 0 )
 8012860:	7bbb      	ldrb	r3, [r7, #14]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d130      	bne.n	80128c8 <_UG_DecodeUTF8+0xac>
    {
      if ( c < 0xe0 )             // 2 byte sequence
 8012866:	7bfb      	ldrb	r3, [r7, #15]
 8012868:	2bdf      	cmp	r3, #223	; 0xdf
 801286a:	d806      	bhi.n	801287a <_UG_DecodeUTF8+0x5e>
      {
        bytes_left = 1;
 801286c:	2301      	movs	r3, #1
 801286e:	73bb      	strb	r3, [r7, #14]
        c &= 0x01f;
 8012870:	7bfb      	ldrb	r3, [r7, #15]
 8012872:	f003 031f 	and.w	r3, r3, #31
 8012876:	73fb      	strb	r3, [r7, #15]
 8012878:	e023      	b.n	80128c2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf0 )        // 3 byte sequence
 801287a:	7bfb      	ldrb	r3, [r7, #15]
 801287c:	2bef      	cmp	r3, #239	; 0xef
 801287e:	d806      	bhi.n	801288e <_UG_DecodeUTF8+0x72>
      {
        bytes_left = 2;
 8012880:	2302      	movs	r3, #2
 8012882:	73bb      	strb	r3, [r7, #14]
        c &= 15;
 8012884:	7bfb      	ldrb	r3, [r7, #15]
 8012886:	f003 030f 	and.w	r3, r3, #15
 801288a:	73fb      	strb	r3, [r7, #15]
 801288c:	e019      	b.n	80128c2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xf8 )        // 4 byte sequence
 801288e:	7bfb      	ldrb	r3, [r7, #15]
 8012890:	2bf7      	cmp	r3, #247	; 0xf7
 8012892:	d806      	bhi.n	80128a2 <_UG_DecodeUTF8+0x86>
      {
        bytes_left = 3;
 8012894:	2303      	movs	r3, #3
 8012896:	73bb      	strb	r3, [r7, #14]
        c &= 7;
 8012898:	7bfb      	ldrb	r3, [r7, #15]
 801289a:	f003 0307 	and.w	r3, r3, #7
 801289e:	73fb      	strb	r3, [r7, #15]
 80128a0:	e00f      	b.n	80128c2 <_UG_DecodeUTF8+0xa6>
      }
      else if ( c < 0xfc )        // 5 byte sequence
 80128a2:	7bfb      	ldrb	r3, [r7, #15]
 80128a4:	2bfb      	cmp	r3, #251	; 0xfb
 80128a6:	d806      	bhi.n	80128b6 <_UG_DecodeUTF8+0x9a>
      {
        bytes_left = 4;
 80128a8:	2304      	movs	r3, #4
 80128aa:	73bb      	strb	r3, [r7, #14]
        c &= 3;
 80128ac:	7bfb      	ldrb	r3, [r7, #15]
 80128ae:	f003 0303 	and.w	r3, r3, #3
 80128b2:	73fb      	strb	r3, [r7, #15]
 80128b4:	e005      	b.n	80128c2 <_UG_DecodeUTF8+0xa6>
      }
      else                        // 6 byte sequence
      {
        bytes_left = 5;
 80128b6:	2305      	movs	r3, #5
 80128b8:	73bb      	strb	r3, [r7, #14]
        c &= 1;
 80128ba:	7bfb      	ldrb	r3, [r7, #15]
 80128bc:	f003 0301 	and.w	r3, r3, #1
 80128c0:	73fb      	strb	r3, [r7, #15]
      }
      encoding = c;
 80128c2:	7bfb      	ldrb	r3, [r7, #15]
 80128c4:	81bb      	strh	r3, [r7, #12]
 80128c6:	e012      	b.n	80128ee <_UG_DecodeUTF8+0xd2>
    }
    else
    {
      encoding<<=6;
 80128c8:	89bb      	ldrh	r3, [r7, #12]
 80128ca:	019b      	lsls	r3, r3, #6
 80128cc:	81bb      	strh	r3, [r7, #12]
      encoding |= (c & 0x3F);
 80128ce:	7bfb      	ldrb	r3, [r7, #15]
 80128d0:	b21b      	sxth	r3, r3
 80128d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80128d6:	b21a      	sxth	r2, r3
 80128d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80128dc:	4313      	orrs	r3, r2
 80128de:	b21b      	sxth	r3, r3
 80128e0:	81bb      	strh	r3, [r7, #12]
      if ( --bytes_left == 0 )
 80128e2:	7bbb      	ldrb	r3, [r7, #14]
 80128e4:	3b01      	subs	r3, #1
 80128e6:	73bb      	strb	r3, [r7, #14]
 80128e8:	7bbb      	ldrb	r3, [r7, #14]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d005      	beq.n	80128fa <_UG_DecodeUTF8+0xde>
  while(**str)
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	681b      	ldr	r3, [r3, #0]
 80128f2:	781b      	ldrb	r3, [r3, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d1aa      	bne.n	801284e <_UG_DecodeUTF8+0x32>
 80128f8:	e000      	b.n	80128fc <_UG_DecodeUTF8+0xe0>
        break;
 80128fa:	bf00      	nop
    }
  }
  return encoding;
 80128fc:	89bb      	ldrh	r3, [r7, #12]
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3714      	adds	r7, #20
 8012902:	46bd      	mov	sp, r7
 8012904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012908:	4770      	bx	lr
	...

0801290c <_UG_GetCharData>:
#endif

/*
 *  Load char bitmap address into p, return the font width
 */
UG_S16 _UG_GetCharData(UG_CHAR encoding,  const UG_U8 **p){
 801290c:	b580      	push	{r7, lr}
 801290e:	b086      	sub	sp, #24
 8012910:	af00      	add	r7, sp, #0
 8012912:	4603      	mov	r3, r0
 8012914:	6039      	str	r1, [r7, #0]
 8012916:	80fb      	strh	r3, [r7, #6]
  static UG_CHAR last_encoding;
  static UG_S16 last_width;
  static const UG_U8 * last_p;
  static UG_FONT * last_font;
  UG_U16 start=0;
 8012918:	2300      	movs	r3, #0
 801291a:	82fb      	strh	r3, [r7, #22]
  UG_U16 skip=0;
 801291c:	2300      	movs	r3, #0
 801291e:	82bb      	strh	r3, [r7, #20]
  UG_U16 t=0;
 8012920:	2300      	movs	r3, #0
 8012922:	827b      	strh	r3, [r7, #18]
  UG_U8 range=0;
 8012924:	2300      	movs	r3, #0
 8012926:	747b      	strb	r3, [r7, #17]
  UG_U8 found=0;
 8012928:	2300      	movs	r3, #0
 801292a:	743b      	strb	r3, [r7, #16]

  if( gui->currentFont.font==last_font && encoding==last_encoding){       // If called with the same arguments, return cached data
 801292c:	4b98      	ldr	r3, [pc, #608]	; (8012b90 <_UG_GetCharData+0x284>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012932:	4b98      	ldr	r3, [pc, #608]	; (8012b94 <_UG_GetCharData+0x288>)
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	429a      	cmp	r2, r3
 8012938:	d10f      	bne.n	801295a <_UG_GetCharData+0x4e>
 801293a:	4b97      	ldr	r3, [pc, #604]	; (8012b98 <_UG_GetCharData+0x28c>)
 801293c:	881b      	ldrh	r3, [r3, #0]
 801293e:	88fa      	ldrh	r2, [r7, #6]
 8012940:	429a      	cmp	r2, r3
 8012942:	d10a      	bne.n	801295a <_UG_GetCharData+0x4e>
    if(p){
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d003      	beq.n	8012952 <_UG_GetCharData+0x46>
      *p=last_p;                                                    // Load char bitmap address
 801294a:	4b94      	ldr	r3, [pc, #592]	; (8012b9c <_UG_GetCharData+0x290>)
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	601a      	str	r2, [r3, #0]
    }
    return last_width;
 8012952:	4b93      	ldr	r3, [pc, #588]	; (8012ba0 <_UG_GetCharData+0x294>)
 8012954:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012958:	e116      	b.n	8012b88 <_UG_GetCharData+0x27c>
  }

  if( gui->currentFont.is_old_font){                                      // Compatibility with old fonts charset
 801295a:	4b8d      	ldr	r3, [pc, #564]	; (8012b90 <_UG_GetCharData+0x284>)
 801295c:	681b      	ldr	r3, [r3, #0]
 801295e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012962:	2b00      	cmp	r3, #0
 8012964:	f000 80cc 	beq.w	8012b00 <_UG_GetCharData+0x1f4>
    switch ( encoding )
 8012968:	88fb      	ldrh	r3, [r7, #6]
 801296a:	2bfc      	cmp	r3, #252	; 0xfc
 801296c:	f300 80c8 	bgt.w	8012b00 <_UG_GetCharData+0x1f4>
 8012970:	2bd6      	cmp	r3, #214	; 0xd6
 8012972:	da09      	bge.n	8012988 <_UG_GetCharData+0x7c>
 8012974:	2bc4      	cmp	r3, #196	; 0xc4
 8012976:	d06c      	beq.n	8012a52 <_UG_GetCharData+0x146>
 8012978:	2bc4      	cmp	r3, #196	; 0xc4
 801297a:	f300 80c1 	bgt.w	8012b00 <_UG_GetCharData+0x1f4>
 801297e:	2bb0      	cmp	r3, #176	; 0xb0
 8012980:	d06d      	beq.n	8012a5e <_UG_GetCharData+0x152>
 8012982:	2bb5      	cmp	r3, #181	; 0xb5
 8012984:	d068      	beq.n	8012a58 <_UG_GetCharData+0x14c>
 8012986:	e06e      	b.n	8012a66 <_UG_GetCharData+0x15a>
 8012988:	3bd6      	subs	r3, #214	; 0xd6
 801298a:	2b26      	cmp	r3, #38	; 0x26
 801298c:	f200 80b8 	bhi.w	8012b00 <_UG_GetCharData+0x1f4>
 8012990:	a201      	add	r2, pc, #4	; (adr r2, 8012998 <_UG_GetCharData+0x8c>)
 8012992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012996:	bf00      	nop
 8012998:	08012a3b 	.word	0x08012a3b
 801299c:	08012b01 	.word	0x08012b01
 80129a0:	08012b01 	.word	0x08012b01
 80129a4:	08012b01 	.word	0x08012b01
 80129a8:	08012b01 	.word	0x08012b01
 80129ac:	08012b01 	.word	0x08012b01
 80129b0:	08012a47 	.word	0x08012a47
 80129b4:	08012b01 	.word	0x08012b01
 80129b8:	08012b01 	.word	0x08012b01
 80129bc:	08012b01 	.word	0x08012b01
 80129c0:	08012b01 	.word	0x08012b01
 80129c4:	08012b01 	.word	0x08012b01
 80129c8:	08012b01 	.word	0x08012b01
 80129cc:	08012b01 	.word	0x08012b01
 80129d0:	08012a4d 	.word	0x08012a4d
 80129d4:	08012b01 	.word	0x08012b01
 80129d8:	08012b01 	.word	0x08012b01
 80129dc:	08012b01 	.word	0x08012b01
 80129e0:	08012b01 	.word	0x08012b01
 80129e4:	08012b01 	.word	0x08012b01
 80129e8:	08012b01 	.word	0x08012b01
 80129ec:	08012b01 	.word	0x08012b01
 80129f0:	08012b01 	.word	0x08012b01
 80129f4:	08012b01 	.word	0x08012b01
 80129f8:	08012b01 	.word	0x08012b01
 80129fc:	08012b01 	.word	0x08012b01
 8012a00:	08012b01 	.word	0x08012b01
 8012a04:	08012b01 	.word	0x08012b01
 8012a08:	08012b01 	.word	0x08012b01
 8012a0c:	08012b01 	.word	0x08012b01
 8012a10:	08012b01 	.word	0x08012b01
 8012a14:	08012b01 	.word	0x08012b01
 8012a18:	08012a35 	.word	0x08012a35
 8012a1c:	08012b01 	.word	0x08012b01
 8012a20:	08012b01 	.word	0x08012b01
 8012a24:	08012b01 	.word	0x08012b01
 8012a28:	08012b01 	.word	0x08012b01
 8012a2c:	08012b01 	.word	0x08012b01
 8012a30:	08012a41 	.word	0x08012a41
    {
       case 0xF6: encoding = 0x94; break; // ö
 8012a34:	2394      	movs	r3, #148	; 0x94
 8012a36:	80fb      	strh	r3, [r7, #6]
 8012a38:	e015      	b.n	8012a66 <_UG_GetCharData+0x15a>
       case 0xD6: encoding = 0x99; break; // Ö
 8012a3a:	2399      	movs	r3, #153	; 0x99
 8012a3c:	80fb      	strh	r3, [r7, #6]
 8012a3e:	e012      	b.n	8012a66 <_UG_GetCharData+0x15a>
       case 0xFC: encoding = 0x81; break; // ü
 8012a40:	2381      	movs	r3, #129	; 0x81
 8012a42:	80fb      	strh	r3, [r7, #6]
 8012a44:	e00f      	b.n	8012a66 <_UG_GetCharData+0x15a>
       case 0xDC: encoding = 0x9A; break; // Ü
 8012a46:	239a      	movs	r3, #154	; 0x9a
 8012a48:	80fb      	strh	r3, [r7, #6]
 8012a4a:	e00c      	b.n	8012a66 <_UG_GetCharData+0x15a>
       case 0xE4: encoding = 0x84; break; // ä
 8012a4c:	2384      	movs	r3, #132	; 0x84
 8012a4e:	80fb      	strh	r3, [r7, #6]
 8012a50:	e009      	b.n	8012a66 <_UG_GetCharData+0x15a>
       case 0xC4: encoding = 0x8E; break; // Ä
 8012a52:	238e      	movs	r3, #142	; 0x8e
 8012a54:	80fb      	strh	r3, [r7, #6]
 8012a56:	e006      	b.n	8012a66 <_UG_GetCharData+0x15a>
       case 0xB5: encoding = 0xE6; break; // µ
 8012a58:	23e6      	movs	r3, #230	; 0xe6
 8012a5a:	80fb      	strh	r3, [r7, #6]
 8012a5c:	e003      	b.n	8012a66 <_UG_GetCharData+0x15a>
       case 0xB0: encoding = 0xF8; break; // °
 8012a5e:	23f8      	movs	r3, #248	; 0xf8
 8012a60:	80fb      	strh	r3, [r7, #6]
 8012a62:	bf00      	nop
 8012a64:	e04c      	b.n	8012b00 <_UG_GetCharData+0x1f4>
    }
  }

  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8012a66:	e04b      	b.n	8012b00 <_UG_GetCharData+0x1f4>
  {
    UG_U16 curr_offset = ptr_8to16( gui->currentFont.offsets+(t*2));    // Offsets are 16-bit, splitted in 2 byte values
 8012a68:	4b49      	ldr	r3, [pc, #292]	; (8012b90 <_UG_GetCharData+0x284>)
 8012a6a:	681b      	ldr	r3, [r3, #0]
 8012a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a6e:	8a7a      	ldrh	r2, [r7, #18]
 8012a70:	0052      	lsls	r2, r2, #1
 8012a72:	4413      	add	r3, r2
 8012a74:	4618      	mov	r0, r3
 8012a76:	f7ff fa87 	bl	8011f88 <ptr_8to16>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	81fb      	strh	r3, [r7, #14]

    if(curr_offset&0x8000)                                          // If the offset has the MSB bit set, it means it's the a range start
 8012a7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	da06      	bge.n	8012a94 <_UG_GetCharData+0x188>
    {
      start=curr_offset&0x7FFF;                                     // Store range start
 8012a86:	89fb      	ldrh	r3, [r7, #14]
 8012a88:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8012a8c:	82fb      	strh	r3, [r7, #22]
      range=1;                                                      // Set flag
 8012a8e:	2301      	movs	r3, #1
 8012a90:	747b      	strb	r3, [r7, #17]
 8012a92:	e032      	b.n	8012afa <_UG_GetCharData+0x1ee>
    }
    else if(range)                                                  // If range previously set, this is the range end
 8012a94:	7c7b      	ldrb	r3, [r7, #17]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d021      	beq.n	8012ade <_UG_GetCharData+0x1d2>
    {
      if(encoding>=start && encoding<=curr_offset)            // If the encoding is between the range
 8012a9a:	88fa      	ldrh	r2, [r7, #6]
 8012a9c:	8afb      	ldrh	r3, [r7, #22]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d30d      	bcc.n	8012abe <_UG_GetCharData+0x1b2>
 8012aa2:	88fa      	ldrh	r2, [r7, #6]
 8012aa4:	89fb      	ldrh	r3, [r7, #14]
 8012aa6:	429a      	cmp	r2, r3
 8012aa8:	d809      	bhi.n	8012abe <_UG_GetCharData+0x1b2>
      {
        skip += (encoding-start);                             // Calculate the skip value
 8012aaa:	88fa      	ldrh	r2, [r7, #6]
 8012aac:	8afb      	ldrh	r3, [r7, #22]
 8012aae:	1ad3      	subs	r3, r2, r3
 8012ab0:	b29a      	uxth	r2, r3
 8012ab2:	8abb      	ldrh	r3, [r7, #20]
 8012ab4:	4413      	add	r3, r2
 8012ab6:	82bb      	strh	r3, [r7, #20]
        found=1;
 8012ab8:	2301      	movs	r3, #1
 8012aba:	743b      	strb	r3, [r7, #16]
        break;
 8012abc:	e02a      	b.n	8012b14 <_UG_GetCharData+0x208>
      }
      else if(encoding<start)                                 // If the encoding is lower than current range start, the char is not in the font
 8012abe:	88fa      	ldrh	r2, [r7, #6]
 8012ac0:	8afb      	ldrh	r3, [r7, #22]
 8012ac2:	429a      	cmp	r2, r3
 8012ac4:	d323      	bcc.n	8012b0e <_UG_GetCharData+0x202>
        break;

      skip += ((curr_offset-start)+1);                        // Encoding not found in the current range, increase skip size and clear range flasg
 8012ac6:	89fa      	ldrh	r2, [r7, #14]
 8012ac8:	8afb      	ldrh	r3, [r7, #22]
 8012aca:	1ad3      	subs	r3, r2, r3
 8012acc:	b29a      	uxth	r2, r3
 8012ace:	8abb      	ldrh	r3, [r7, #20]
 8012ad0:	4413      	add	r3, r2
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	3301      	adds	r3, #1
 8012ad6:	82bb      	strh	r3, [r7, #20]
      range=0;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	747b      	strb	r3, [r7, #17]
 8012adc:	e00d      	b.n	8012afa <_UG_GetCharData+0x1ee>
    }
    else                                                            // Range not set, this is a single char offset
    {
      if(encoding==curr_offset)                                     // If matching the current offset char
 8012ade:	88fa      	ldrh	r2, [r7, #6]
 8012ae0:	89fb      	ldrh	r3, [r7, #14]
 8012ae2:	429a      	cmp	r2, r3
 8012ae4:	d102      	bne.n	8012aec <_UG_GetCharData+0x1e0>
      {
        found=1;
 8012ae6:	2301      	movs	r3, #1
 8012ae8:	743b      	strb	r3, [r7, #16]
        break;
 8012aea:	e013      	b.n	8012b14 <_UG_GetCharData+0x208>
      }
      else if (encoding<curr_offset)                                // If the encoding is lower than current range, the char is not in the font
 8012aec:	88fa      	ldrh	r2, [r7, #6]
 8012aee:	89fb      	ldrh	r3, [r7, #14]
 8012af0:	429a      	cmp	r2, r3
 8012af2:	d30e      	bcc.n	8012b12 <_UG_GetCharData+0x206>
      {
        break;
      }
      skip++;                                                       // Else, increase skip and keep searching
 8012af4:	8abb      	ldrh	r3, [r7, #20]
 8012af6:	3301      	adds	r3, #1
 8012af8:	82bb      	strh	r3, [r7, #20]
  for(;t< gui->currentFont.number_of_offsets;t++)                         // Seek through the offsets
 8012afa:	8a7b      	ldrh	r3, [r7, #18]
 8012afc:	3301      	adds	r3, #1
 8012afe:	827b      	strh	r3, [r7, #18]
 8012b00:	4b23      	ldr	r3, [pc, #140]	; (8012b90 <_UG_GetCharData+0x284>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8012b06:	8a7a      	ldrh	r2, [r7, #18]
 8012b08:	429a      	cmp	r2, r3
 8012b0a:	d3ad      	bcc.n	8012a68 <_UG_GetCharData+0x15c>
 8012b0c:	e002      	b.n	8012b14 <_UG_GetCharData+0x208>
        break;
 8012b0e:	bf00      	nop
 8012b10:	e000      	b.n	8012b14 <_UG_GetCharData+0x208>
        break;
 8012b12:	bf00      	nop
    }
  }

  if(found)                                                         // If char found
 8012b14:	7c3b      	ldrb	r3, [r7, #16]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d034      	beq.n	8012b84 <_UG_GetCharData+0x278>
  {
    last_font =  gui->currentFont.font;                                     // Update cached data
 8012b1a:	4b1d      	ldr	r3, [pc, #116]	; (8012b90 <_UG_GetCharData+0x284>)
 8012b1c:	681b      	ldr	r3, [r3, #0]
 8012b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b20:	4a1c      	ldr	r2, [pc, #112]	; (8012b94 <_UG_GetCharData+0x288>)
 8012b22:	6013      	str	r3, [r2, #0]
    last_encoding = encoding;
 8012b24:	4a1c      	ldr	r2, [pc, #112]	; (8012b98 <_UG_GetCharData+0x28c>)
 8012b26:	88fb      	ldrh	r3, [r7, #6]
 8012b28:	8013      	strh	r3, [r2, #0]
    last_p = ( gui->currentFont.data+(skip* gui->currentFont.bytes_per_char));
 8012b2a:	4b19      	ldr	r3, [pc, #100]	; (8012b90 <_UG_GetCharData+0x284>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b30:	8aba      	ldrh	r2, [r7, #20]
 8012b32:	4917      	ldr	r1, [pc, #92]	; (8012b90 <_UG_GetCharData+0x284>)
 8012b34:	6809      	ldr	r1, [r1, #0]
 8012b36:	8e09      	ldrh	r1, [r1, #48]	; 0x30
 8012b38:	fb01 f202 	mul.w	r2, r1, r2
 8012b3c:	4413      	add	r3, r2
 8012b3e:	4a17      	ldr	r2, [pc, #92]	; (8012b9c <_UG_GetCharData+0x290>)
 8012b40:	6013      	str	r3, [r2, #0]
    if( gui->currentFont.widths){                                                // If width table available
 8012b42:	4b13      	ldr	r3, [pc, #76]	; (8012b90 <_UG_GetCharData+0x284>)
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d009      	beq.n	8012b60 <_UG_GetCharData+0x254>
      last_width = *( gui->currentFont.widths+skip);                        // Use width from table
 8012b4c:	4b10      	ldr	r3, [pc, #64]	; (8012b90 <_UG_GetCharData+0x284>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012b52:	8abb      	ldrh	r3, [r7, #20]
 8012b54:	4413      	add	r3, r2
 8012b56:	781b      	ldrb	r3, [r3, #0]
 8012b58:	b21a      	sxth	r2, r3
 8012b5a:	4b11      	ldr	r3, [pc, #68]	; (8012ba0 <_UG_GetCharData+0x294>)
 8012b5c:	801a      	strh	r2, [r3, #0]
 8012b5e:	e006      	b.n	8012b6e <_UG_GetCharData+0x262>
    }
    else{
      last_width =  gui->currentFont.char_width;                            // Else use width from char width
 8012b60:	4b0b      	ldr	r3, [pc, #44]	; (8012b90 <_UG_GetCharData+0x284>)
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012b68:	b21a      	sxth	r2, r3
 8012b6a:	4b0d      	ldr	r3, [pc, #52]	; (8012ba0 <_UG_GetCharData+0x294>)
 8012b6c:	801a      	strh	r2, [r3, #0]
    }


    if(p){
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d003      	beq.n	8012b7c <_UG_GetCharData+0x270>
      *p=last_p;                                                    // Load char bitmap address
 8012b74:	4b09      	ldr	r3, [pc, #36]	; (8012b9c <_UG_GetCharData+0x290>)
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	683b      	ldr	r3, [r7, #0]
 8012b7a:	601a      	str	r2, [r3, #0]
    }
    return(last_width);                                             // Return char width
 8012b7c:	4b08      	ldr	r3, [pc, #32]	; (8012ba0 <_UG_GetCharData+0x294>)
 8012b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012b82:	e001      	b.n	8012b88 <_UG_GetCharData+0x27c>
  }
  return -1;                                                        // -1 = char not found
 8012b84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012b88:	4618      	mov	r0, r3
 8012b8a:	3718      	adds	r7, #24
 8012b8c:	46bd      	mov	sp, r7
 8012b8e:	bd80      	pop	{r7, pc}
 8012b90:	20001cd8 	.word	0x20001cd8
 8012b94:	20001cdc 	.word	0x20001cdc
 8012b98:	20001ce0 	.word	0x20001ce0
 8012b9c:	20001ce4 	.word	0x20001ce4
 8012ba0:	20001ce8 	.word	0x20001ce8

08012ba4 <_UG_FontSelect>:

/*
 * Updates the current font data
 */
void _UG_FontSelect( UG_FONT *font){
 8012ba4:	b590      	push	{r4, r7, lr}
 8012ba6:	b083      	sub	sp, #12
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	6078      	str	r0, [r7, #4]
  if( gui->currentFont.font==font)
 8012bac:	4b3d      	ldr	r3, [pc, #244]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012bae:	681b      	ldr	r3, [r3, #0]
 8012bb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012bb2:	687a      	ldr	r2, [r7, #4]
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d070      	beq.n	8012c9a <_UG_FontSelect+0xf6>
    return;
   gui->currentFont.font = font;                          // Save Font pointer
 8012bb8:	4b3a      	ldr	r3, [pc, #232]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	687a      	ldr	r2, [r7, #4]
 8012bbe:	645a      	str	r2, [r3, #68]	; 0x44
   gui->currentFont.font_type = 0x7F & *font;             // Byte    0: Font_type
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	781a      	ldrb	r2, [r3, #0]
 8012bc4:	4b37      	ldr	r3, [pc, #220]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8012bcc:	b2d2      	uxtb	r2, r2
 8012bce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
   gui->currentFont.is_old_font = (0x80 & *font++)&&1;    // Byte    0: Bit 7 indicates old or new font type. 1=old font, 0=new font
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	1c5a      	adds	r2, r3, #1
 8012bd6:	607a      	str	r2, [r7, #4]
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	b25b      	sxtb	r3, r3
 8012bdc:	2b00      	cmp	r3, #0
 8012bde:	da01      	bge.n	8012be4 <_UG_FontSelect+0x40>
 8012be0:	2201      	movs	r2, #1
 8012be2:	e000      	b.n	8012be6 <_UG_FontSelect+0x42>
 8012be4:	2200      	movs	r2, #0
 8012be6:	4b2f      	ldr	r3, [pc, #188]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	b2d2      	uxtb	r2, r2
 8012bec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   gui->currentFont.char_width = *font++;                 // Byte    1: Char width
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	1c5a      	adds	r2, r3, #1
 8012bf4:	607a      	str	r2, [r7, #4]
 8012bf6:	4a2b      	ldr	r2, [pc, #172]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012bf8:	6812      	ldr	r2, [r2, #0]
 8012bfa:	781b      	ldrb	r3, [r3, #0]
 8012bfc:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
   gui->currentFont.char_height = *font++;                // Byte    2: Char height
 8012c00:	687b      	ldr	r3, [r7, #4]
 8012c02:	1c5a      	adds	r2, r3, #1
 8012c04:	607a      	str	r2, [r7, #4]
 8012c06:	4a27      	ldr	r2, [pc, #156]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012c08:	6812      	ldr	r2, [r2, #0]
 8012c0a:	781b      	ldrb	r3, [r3, #0]
 8012c0c:	f882 302f 	strb.w	r3, [r2, #47]	; 0x2f
   gui->currentFont.number_of_chars = ptr_8to16(font);    // Bytes 3+4: Number of chars
 8012c10:	4b24      	ldr	r3, [pc, #144]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012c12:	681c      	ldr	r4, [r3, #0]
 8012c14:	6878      	ldr	r0, [r7, #4]
 8012c16:	f7ff f9b7 	bl	8011f88 <ptr_8to16>
 8012c1a:	4603      	mov	r3, r0
 8012c1c:	8663      	strh	r3, [r4, #50]	; 0x32
  font+=2;
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	3302      	adds	r3, #2
 8012c22:	607b      	str	r3, [r7, #4]
   gui->currentFont.number_of_offsets = ptr_8to16(font);  // Bytes 5+6: Number of offsets
 8012c24:	4b1f      	ldr	r3, [pc, #124]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012c26:	681c      	ldr	r4, [r3, #0]
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f7ff f9ad 	bl	8011f88 <ptr_8to16>
 8012c2e:	4603      	mov	r3, r0
 8012c30:	86a3      	strh	r3, [r4, #52]	; 0x34
  font+=2;
 8012c32:	687b      	ldr	r3, [r7, #4]
 8012c34:	3302      	adds	r3, #2
 8012c36:	607b      	str	r3, [r7, #4]
   gui->currentFont.bytes_per_char = ptr_8to16(font);     // Bytes 7+8: Bytes per char
 8012c38:	4b1a      	ldr	r3, [pc, #104]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012c3a:	681c      	ldr	r4, [r3, #0]
 8012c3c:	6878      	ldr	r0, [r7, #4]
 8012c3e:	f7ff f9a3 	bl	8011f88 <ptr_8to16>
 8012c42:	4603      	mov	r3, r0
 8012c44:	8623      	strh	r3, [r4, #48]	; 0x30
  font+=2;
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	3302      	adds	r3, #2
 8012c4a:	607b      	str	r3, [r7, #4]
  if(*font++){                                    // Byte 9: 1=Width table present, 0=not present
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	1c5a      	adds	r2, r3, #1
 8012c50:	607a      	str	r2, [r7, #4]
 8012c52:	781b      	ldrb	r3, [r3, #0]
 8012c54:	2b00      	cmp	r3, #0
 8012c56:	d00b      	beq.n	8012c70 <_UG_FontSelect+0xcc>
     gui->currentFont.widths = font;                      // Save pointer to width table
 8012c58:	4b12      	ldr	r3, [pc, #72]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012c5a:	681b      	ldr	r3, [r3, #0]
 8012c5c:	687a      	ldr	r2, [r7, #4]
 8012c5e:	639a      	str	r2, [r3, #56]	; 0x38
    font+= gui->currentFont.number_of_chars;              // Increase number of chars
 8012c60:	4b10      	ldr	r3, [pc, #64]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c66:	461a      	mov	r2, r3
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	4413      	add	r3, r2
 8012c6c:	607b      	str	r3, [r7, #4]
 8012c6e:	e003      	b.n	8012c78 <_UG_FontSelect+0xd4>
  }
  else{
     gui->currentFont.widths = NULL;                      // No width table
 8012c70:	4b0c      	ldr	r3, [pc, #48]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	2200      	movs	r2, #0
 8012c76:	639a      	str	r2, [r3, #56]	; 0x38
  }
   gui->currentFont.offsets = font;                       // Save pointer to offset table
 8012c78:	4b0a      	ldr	r3, [pc, #40]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	687a      	ldr	r2, [r7, #4]
 8012c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  font += ( gui->currentFont.number_of_offsets*2);        // Increase pointer by number of offsets*2 (2-byte values)
 8012c80:	4b08      	ldr	r3, [pc, #32]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8012c86:	005b      	lsls	r3, r3, #1
 8012c88:	461a      	mov	r2, r3
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	4413      	add	r3, r2
 8012c8e:	607b      	str	r3, [r7, #4]
   gui->currentFont.data = font;                          // Save pointer to bitmap data
 8012c90:	4b04      	ldr	r3, [pc, #16]	; (8012ca4 <_UG_FontSelect+0x100>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	687a      	ldr	r2, [r7, #4]
 8012c96:	641a      	str	r2, [r3, #64]	; 0x40
 8012c98:	e000      	b.n	8012c9c <_UG_FontSelect+0xf8>
    return;
 8012c9a:	bf00      	nop
}
 8012c9c:	370c      	adds	r7, #12
 8012c9e:	46bd      	mov	sp, r7
 8012ca0:	bd90      	pop	{r4, r7, pc}
 8012ca2:	bf00      	nop
 8012ca4:	20001cd8 	.word	0x20001cd8

08012ca8 <_UG_PutChar>:

UG_S16 _UG_PutChar( UG_CHAR chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc)
{
 8012ca8:	b5b0      	push	{r4, r5, r7, lr}
 8012caa:	b08c      	sub	sp, #48	; 0x30
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	4604      	mov	r4, r0
 8012cb0:	4608      	mov	r0, r1
 8012cb2:	4611      	mov	r1, r2
 8012cb4:	461a      	mov	r2, r3
 8012cb6:	4623      	mov	r3, r4
 8012cb8:	80fb      	strh	r3, [r7, #6]
 8012cba:	4603      	mov	r3, r0
 8012cbc:	80bb      	strh	r3, [r7, #4]
 8012cbe:	460b      	mov	r3, r1
 8012cc0:	807b      	strh	r3, [r7, #2]
 8012cc2:	4613      	mov	r3, r2
 8012cc4:	803b      	strh	r3, [r7, #0]
   UG_U16 x0=0,y0=0,i,j,k,bn,fpixels=0,bpixels=0;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8012cca:	2300      	movs	r3, #0
 8012ccc:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8012cce:	2300      	movs	r3, #0
 8012cd0:	847b      	strh	r3, [r7, #34]	; 0x22
 8012cd2:	2300      	movs	r3, #0
 8012cd4:	843b      	strh	r3, [r7, #32]
   UG_S16 c;
   UG_U8 b,trans=gui->transparent_font,driver=(gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED);
 8012cd6:	4b8c      	ldr	r3, [pc, #560]	; (8012f08 <_UG_PutChar+0x260>)
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8012cde:	75fb      	strb	r3, [r7, #23]
 8012ce0:	4b89      	ldr	r3, [pc, #548]	; (8012f08 <_UG_PutChar+0x260>)
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8012ce8:	f003 0302 	and.w	r3, r3, #2
 8012cec:	75bb      	strb	r3, [r7, #22]
   const UG_U8 * data;                              // Pointer to current char bitmap
   UG_COLOR color;
   void(*push_pixels)(UG_SIZE, UG_COLOR) = NULL;
 8012cee:	2300      	movs	r3, #0
 8012cf0:	61bb      	str	r3, [r7, #24]

   UG_S16 actual_char_width = _UG_GetCharData(chr, &data);
 8012cf2:	f107 0208 	add.w	r2, r7, #8
 8012cf6:	88fb      	ldrh	r3, [r7, #6]
 8012cf8:	4611      	mov	r1, r2
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	f7ff fe06 	bl	801290c <_UG_GetCharData>
 8012d00:	4603      	mov	r3, r0
 8012d02:	82bb      	strh	r3, [r7, #20]
   if(actual_char_width==-1)
 8012d04:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d0c:	d102      	bne.n	8012d14 <_UG_PutChar+0x6c>
        return -1;                                     // Char not presnt in the font
 8012d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8012d12:	e226      	b.n	8013162 <_UG_PutChar+0x4ba>

   bn =  gui->currentFont.char_width;
 8012d14:	4b7c      	ldr	r3, [pc, #496]	; (8012f08 <_UG_PutChar+0x260>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012d1c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if ( !bn ){
 8012d1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d20:	2b00      	cmp	r3, #0
 8012d22:	d101      	bne.n	8012d28 <_UG_PutChar+0x80>
     return 0;
 8012d24:	2300      	movs	r3, #0
 8012d26:	e21c      	b.n	8013162 <_UG_PutChar+0x4ba>
   }
   bn >>= 3;
 8012d28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d2a:	08db      	lsrs	r3, r3, #3
 8012d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
   if (  gui->currentFont.char_width % 8 ) bn++;
 8012d2e:	4b76      	ldr	r3, [pc, #472]	; (8012f08 <_UG_PutChar+0x260>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8012d36:	f003 0307 	and.w	r3, r3, #7
 8012d3a:	b2db      	uxtb	r3, r3
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d002      	beq.n	8012d46 <_UG_PutChar+0x9e>
 8012d40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012d42:	3301      	adds	r3, #1
 8012d44:	84bb      	strh	r3, [r7, #36]	; 0x24

   /* Is hardware acceleration available? */
   if (driver)
 8012d46:	7dbb      	ldrb	r3, [r7, #22]
 8012d48:	2b00      	cmp	r3, #0
 8012d4a:	d01d      	beq.n	8012d88 <_UG_PutChar+0xe0>
   {
     push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+ gui->currentFont.char_height-1);
 8012d4c:	4b6e      	ldr	r3, [pc, #440]	; (8012f08 <_UG_PutChar+0x260>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012d52:	461d      	mov	r5, r3
 8012d54:	88ba      	ldrh	r2, [r7, #4]
 8012d56:	8abb      	ldrh	r3, [r7, #20]
 8012d58:	4413      	add	r3, r2
 8012d5a:	b29b      	uxth	r3, r3
 8012d5c:	3b01      	subs	r3, #1
 8012d5e:	b29b      	uxth	r3, r3
 8012d60:	b21c      	sxth	r4, r3
 8012d62:	4b69      	ldr	r3, [pc, #420]	; (8012f08 <_UG_PutChar+0x260>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012d6a:	b29a      	uxth	r2, r3
 8012d6c:	887b      	ldrh	r3, [r7, #2]
 8012d6e:	4413      	add	r3, r2
 8012d70:	b29b      	uxth	r3, r3
 8012d72:	3b01      	subs	r3, #1
 8012d74:	b29b      	uxth	r3, r3
 8012d76:	b21b      	sxth	r3, r3
 8012d78:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8012d7c:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8012d80:	4622      	mov	r2, r4
 8012d82:	47a8      	blx	r5
 8012d84:	4603      	mov	r3, r0
 8012d86:	61bb      	str	r3, [r7, #24]
   }

   if ( gui->currentFont.font_type == FONT_TYPE_1BPP)
 8012d88:	4b5f      	ldr	r3, [pc, #380]	; (8012f08 <_UG_PutChar+0x260>)
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f040 8172 	bne.w	801307a <_UG_PutChar+0x3d2>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8012d96:	2300      	movs	r3, #0
 8012d98:	853b      	strh	r3, [r7, #40]	; 0x28
 8012d9a:	e0ec      	b.n	8012f76 <_UG_PutChar+0x2ce>
     {
       c=0;
 8012d9c:	2300      	movs	r3, #0
 8012d9e:	83fb      	strh	r3, [r7, #30]
       for( i=0;i<bn;i++ )
 8012da0:	2300      	movs	r3, #0
 8012da2:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012da4:	e0df      	b.n	8012f66 <_UG_PutChar+0x2be>
       {
         b = *data++;
 8012da6:	68bb      	ldr	r3, [r7, #8]
 8012da8:	1c5a      	adds	r2, r3, #1
 8012daa:	60ba      	str	r2, [r7, #8]
 8012dac:	781b      	ldrb	r3, [r3, #0]
 8012dae:	777b      	strb	r3, [r7, #29]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8012db0:	2300      	movs	r3, #0
 8012db2:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012db4:	e0ca      	b.n	8012f4c <_UG_PutChar+0x2a4>
         {
           if(b & 0x01 )                    // Foreground pixel detected
 8012db6:	7f7b      	ldrb	r3, [r7, #29]
 8012db8:	f003 0301 	and.w	r3, r3, #1
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d033      	beq.n	8012e28 <_UG_PutChar+0x180>
           {
             if(driver)
 8012dc0:	7dbb      	ldrb	r3, [r7, #22]
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d01f      	beq.n	8012e06 <_UG_PutChar+0x15e>
             {                              // Accelerated output
               if(bpixels && !trans)        // Draw accumulated background pixels, only if transparent mode disabled
 8012dc6:	8c3b      	ldrh	r3, [r7, #32]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d00a      	beq.n	8012de2 <_UG_PutChar+0x13a>
 8012dcc:	7dfb      	ldrb	r3, [r7, #23]
 8012dce:	2b00      	cmp	r3, #0
 8012dd0:	d107      	bne.n	8012de2 <_UG_PutChar+0x13a>
               {
                 push_pixels(bpixels,bc);   // Drawing accumulated pixels removes a lot of overhead, drawing speed is at least 3x faster
 8012dd2:	8c3a      	ldrh	r2, [r7, #32]
 8012dd4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8012dd8:	69bb      	ldr	r3, [r7, #24]
 8012dda:	4610      	mov	r0, r2
 8012ddc:	4798      	blx	r3
                 bpixels=0;
 8012dde:	2300      	movs	r3, #0
 8012de0:	843b      	strh	r3, [r7, #32]
               }
               if(!fpixels && trans)        // Store first foreground pixel position for transparent drawing
 8012de2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d10a      	bne.n	8012dfe <_UG_PutChar+0x156>
 8012de8:	7dfb      	ldrb	r3, [r7, #23]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d007      	beq.n	8012dfe <_UG_PutChar+0x156>
               {
                 x0=x+c;
 8012dee:	88ba      	ldrh	r2, [r7, #4]
 8012df0:	8bfb      	ldrh	r3, [r7, #30]
 8012df2:	4413      	add	r3, r2
 8012df4:	85fb      	strh	r3, [r7, #46]	; 0x2e
                 y0=y+j;
 8012df6:	887a      	ldrh	r2, [r7, #2]
 8012df8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012dfa:	4413      	add	r3, r2
 8012dfc:	85bb      	strh	r3, [r7, #44]	; 0x2c
               }
               fpixels++;                   // Instead writing every pixel, count consecutive pixels, then send accumulated pixels in a single transaction
 8012dfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e00:	3301      	adds	r3, #1
 8012e02:	847b      	strh	r3, [r7, #34]	; 0x22
 8012e04:	e096      	b.n	8012f34 <_UG_PutChar+0x28c>
             }
             else
             {                              // Not accelerated output
               gui->device->pset(x+c,y+j,fc);
 8012e06:	4b40      	ldr	r3, [pc, #256]	; (8012f08 <_UG_PutChar+0x260>)
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	681b      	ldr	r3, [r3, #0]
 8012e0c:	685b      	ldr	r3, [r3, #4]
 8012e0e:	88b9      	ldrh	r1, [r7, #4]
 8012e10:	8bfa      	ldrh	r2, [r7, #30]
 8012e12:	440a      	add	r2, r1
 8012e14:	b292      	uxth	r2, r2
 8012e16:	b210      	sxth	r0, r2
 8012e18:	8879      	ldrh	r1, [r7, #2]
 8012e1a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012e1c:	440a      	add	r2, r1
 8012e1e:	b292      	uxth	r2, r2
 8012e20:	b211      	sxth	r1, r2
 8012e22:	883a      	ldrh	r2, [r7, #0]
 8012e24:	4798      	blx	r3
 8012e26:	e085      	b.n	8012f34 <_UG_PutChar+0x28c>
             }
           }
           else                             // Background pixel detected
           {
             if(driver)
 8012e28:	7dbb      	ldrb	r3, [r7, #22]
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d06e      	beq.n	8012f0c <_UG_PutChar+0x264>
             {                              // Accelerated output
               if(fpixels)                  // Draw accumulated foreground pixels
 8012e2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d064      	beq.n	8012efe <_UG_PutChar+0x256>
               {
                 if(!trans)                 // In transparent mode, we don't need to address pixel areas, so just keep pushing pixels
 8012e34:	7dfb      	ldrb	r3, [r7, #23]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d15e      	bne.n	8012ef8 <_UG_PutChar+0x250>
                 {
                   push_pixels(fpixels,fc);
 8012e3a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e3c:	8839      	ldrh	r1, [r7, #0]
 8012e3e:	69bb      	ldr	r3, [r7, #24]
 8012e40:	4610      	mov	r0, r2
 8012e42:	4798      	blx	r3
                   fpixels=0;
 8012e44:	2300      	movs	r3, #0
 8012e46:	847b      	strh	r3, [r7, #34]	; 0x22
 8012e48:	e059      	b.n	8012efe <_UG_PutChar+0x256>
                 }
                 else{                                // In transparent mode, drawing needs to be broken in smaller parts, avoiding the background areas
                   while(fpixels)
                   {
                     UG_U16 width = (x+actual_char_width)-x0;         // Detect available pixels in the current row from current x position
 8012e4a:	88ba      	ldrh	r2, [r7, #4]
 8012e4c:	8abb      	ldrh	r3, [r7, #20]
 8012e4e:	4413      	add	r3, r2
 8012e50:	b29a      	uxth	r2, r3
 8012e52:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012e54:	1ad3      	subs	r3, r2, r3
 8012e56:	81fb      	strh	r3, [r7, #14]
                     if(x0==x || fpixels<width)                       // If pixel draw count is lower than available pixels, or drawing at start of the row, drawn as-is
 8012e58:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012e5a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	d003      	beq.n	8012e6a <_UG_PutChar+0x1c2>
 8012e62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e64:	89fb      	ldrh	r3, [r7, #14]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d224      	bcs.n	8012eb4 <_UG_PutChar+0x20c>
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8012e6a:	4b27      	ldr	r3, [pc, #156]	; (8012f08 <_UG_PutChar+0x260>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012e70:	461d      	mov	r5, r3
 8012e72:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012e76:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012e7a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012e7c:	89fb      	ldrh	r3, [r7, #14]
 8012e7e:	4413      	add	r3, r2
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	3b01      	subs	r3, #1
 8012e84:	b29b      	uxth	r3, r3
 8012e86:	b21c      	sxth	r4, r3
 8012e88:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012e8a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012e8e:	fb92 f3f3 	sdiv	r3, r2, r3
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012e96:	4413      	add	r3, r2
 8012e98:	b29b      	uxth	r3, r3
 8012e9a:	b21b      	sxth	r3, r3
 8012e9c:	4622      	mov	r2, r4
 8012e9e:	47a8      	blx	r5
 8012ea0:	4603      	mov	r3, r0
 8012ea2:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012ea4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012ea6:	8839      	ldrh	r1, [r7, #0]
 8012ea8:	69bb      	ldr	r3, [r7, #24]
 8012eaa:	4610      	mov	r0, r2
 8012eac:	4798      	blx	r3
                       fpixels=0;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	847b      	strh	r3, [r7, #34]	; 0x22
 8012eb2:	e021      	b.n	8012ef8 <_UG_PutChar+0x250>
                     }
                     else                                             // If  pixel draw count is higher than available pixels, there's at least second line, drawn this row first
                     {
                       push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 8012eb4:	4b14      	ldr	r3, [pc, #80]	; (8012f08 <_UG_PutChar+0x260>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012eba:	461c      	mov	r4, r3
 8012ebc:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012ec0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012ec4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012ec6:	89fb      	ldrh	r3, [r7, #14]
 8012ec8:	4413      	add	r3, r2
 8012eca:	b29b      	uxth	r3, r3
 8012ecc:	3b01      	subs	r3, #1
 8012ece:	b29b      	uxth	r3, r3
 8012ed0:	b21a      	sxth	r2, r3
 8012ed2:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8012ed6:	47a0      	blx	r4
 8012ed8:	4603      	mov	r3, r0
 8012eda:	61bb      	str	r3, [r7, #24]
                       push_pixels(fpixels,fc);
 8012edc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012ede:	8839      	ldrh	r1, [r7, #0]
 8012ee0:	69bb      	ldr	r3, [r7, #24]
 8012ee2:	4610      	mov	r0, r2
 8012ee4:	4798      	blx	r3
                       fpixels -= width;
 8012ee6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012ee8:	89fb      	ldrh	r3, [r7, #14]
 8012eea:	1ad3      	subs	r3, r2, r3
 8012eec:	847b      	strh	r3, [r7, #34]	; 0x22
                       x0=x;
 8012eee:	88bb      	ldrh	r3, [r7, #4]
 8012ef0:	85fb      	strh	r3, [r7, #46]	; 0x2e
                       y0++;
 8012ef2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8012ef4:	3301      	adds	r3, #1
 8012ef6:	85bb      	strh	r3, [r7, #44]	; 0x2c
                   while(fpixels)
 8012ef8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d1a5      	bne.n	8012e4a <_UG_PutChar+0x1a2>
                     }
                   }
                 }
               }
               bpixels++;
 8012efe:	8c3b      	ldrh	r3, [r7, #32]
 8012f00:	3301      	adds	r3, #1
 8012f02:	843b      	strh	r3, [r7, #32]
 8012f04:	e016      	b.n	8012f34 <_UG_PutChar+0x28c>
 8012f06:	bf00      	nop
 8012f08:	20001cd8 	.word	0x20001cd8
             }
             else if(!trans)                           // Not accelerated output
 8012f0c:	7dfb      	ldrb	r3, [r7, #23]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d110      	bne.n	8012f34 <_UG_PutChar+0x28c>
             {
               gui->device->pset(x+c,y+j,bc);
 8012f12:	4b96      	ldr	r3, [pc, #600]	; (801316c <_UG_PutChar+0x4c4>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	685b      	ldr	r3, [r3, #4]
 8012f1a:	88b9      	ldrh	r1, [r7, #4]
 8012f1c:	8bfa      	ldrh	r2, [r7, #30]
 8012f1e:	440a      	add	r2, r1
 8012f20:	b292      	uxth	r2, r2
 8012f22:	b210      	sxth	r0, r2
 8012f24:	8879      	ldrh	r1, [r7, #2]
 8012f26:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012f28:	440a      	add	r2, r1
 8012f2a:	b292      	uxth	r2, r2
 8012f2c:	b211      	sxth	r1, r2
 8012f2e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012f32:	4798      	blx	r3
             }
           }
           b >>= 1;
 8012f34:	7f7b      	ldrb	r3, [r7, #29]
 8012f36:	085b      	lsrs	r3, r3, #1
 8012f38:	777b      	strb	r3, [r7, #29]
           c++;
 8012f3a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012f3e:	b29b      	uxth	r3, r3
 8012f40:	3301      	adds	r3, #1
 8012f42:	b29b      	uxth	r3, r3
 8012f44:	83fb      	strh	r3, [r7, #30]
         for( k=0;(k<8) && c<actual_char_width; k++ )
 8012f46:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012f48:	3301      	adds	r3, #1
 8012f4a:	84fb      	strh	r3, [r7, #38]	; 0x26
 8012f4c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012f4e:	2b07      	cmp	r3, #7
 8012f50:	d806      	bhi.n	8012f60 <_UG_PutChar+0x2b8>
 8012f52:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8012f56:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8012f5a:	429a      	cmp	r2, r3
 8012f5c:	f6ff af2b 	blt.w	8012db6 <_UG_PutChar+0x10e>
       for( i=0;i<bn;i++ )
 8012f60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8012f62:	3301      	adds	r3, #1
 8012f64:	857b      	strh	r3, [r7, #42]	; 0x2a
 8012f66:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8012f68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	f4ff af1b 	bcc.w	8012da6 <_UG_PutChar+0xfe>
     for( j=0;j< gui->currentFont.char_height;j++ )
 8012f70:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012f72:	3301      	adds	r3, #1
 8012f74:	853b      	strh	r3, [r7, #40]	; 0x28
 8012f76:	4b7d      	ldr	r3, [pc, #500]	; (801316c <_UG_PutChar+0x4c4>)
 8012f78:	681b      	ldr	r3, [r3, #0]
 8012f7a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f7e:	b29b      	uxth	r3, r3
 8012f80:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8012f82:	429a      	cmp	r2, r3
 8012f84:	f4ff af0a 	bcc.w	8012d9c <_UG_PutChar+0xf4>
        }
       }
     }
     if(driver){                                            // After finishing, ensure there're no remaining pixels left, make another pass
 8012f88:	7dbb      	ldrb	r3, [r7, #22]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	f000 80e7 	beq.w	801315e <_UG_PutChar+0x4b6>
       if(bpixels && !trans)
 8012f90:	8c3b      	ldrh	r3, [r7, #32]
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d009      	beq.n	8012faa <_UG_PutChar+0x302>
 8012f96:	7dfb      	ldrb	r3, [r7, #23]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d106      	bne.n	8012faa <_UG_PutChar+0x302>
       {
         push_pixels(bpixels,bc);
 8012f9c:	8c3a      	ldrh	r2, [r7, #32]
 8012f9e:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8012fa2:	69bb      	ldr	r3, [r7, #24]
 8012fa4:	4610      	mov	r0, r2
 8012fa6:	4798      	blx	r3
 8012fa8:	e0d9      	b.n	801315e <_UG_PutChar+0x4b6>
       }
       else if(fpixels)
 8012faa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	f000 80d6 	beq.w	801315e <_UG_PutChar+0x4b6>
       {
         if(!trans)
 8012fb2:	7dfb      	ldrb	r3, [r7, #23]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d15c      	bne.n	8013072 <_UG_PutChar+0x3ca>
         {
           push_pixels(fpixels,fc);
 8012fb8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fba:	8839      	ldrh	r1, [r7, #0]
 8012fbc:	69bb      	ldr	r3, [r7, #24]
 8012fbe:	4610      	mov	r0, r2
 8012fc0:	4798      	blx	r3
 8012fc2:	e0cc      	b.n	801315e <_UG_PutChar+0x4b6>
         }
         else
         {
           while(fpixels)
           {
             UG_U16 width = (x+actual_char_width)-x0;
 8012fc4:	88ba      	ldrh	r2, [r7, #4]
 8012fc6:	8abb      	ldrh	r3, [r7, #20]
 8012fc8:	4413      	add	r3, r2
 8012fca:	b29a      	uxth	r2, r3
 8012fcc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8012fce:	1ad3      	subs	r3, r2, r3
 8012fd0:	823b      	strh	r3, [r7, #16]
             if(x0==x || fpixels<width)
 8012fd2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012fd4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d003      	beq.n	8012fe4 <_UG_PutChar+0x33c>
 8012fdc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012fde:	8a3b      	ldrh	r3, [r7, #16]
 8012fe0:	429a      	cmp	r2, r3
 8012fe2:	d224      	bcs.n	801302e <_UG_PutChar+0x386>
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0+(fpixels/actual_char_width));
 8012fe4:	4b61      	ldr	r3, [pc, #388]	; (801316c <_UG_PutChar+0x4c4>)
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012fea:	461d      	mov	r5, r3
 8012fec:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8012ff0:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8012ff4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8012ff6:	8a3b      	ldrh	r3, [r7, #16]
 8012ff8:	4413      	add	r3, r2
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	3b01      	subs	r3, #1
 8012ffe:	b29b      	uxth	r3, r3
 8013000:	b21c      	sxth	r4, r3
 8013002:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013004:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8013008:	fb92 f3f3 	sdiv	r3, r2, r3
 801300c:	b29a      	uxth	r2, r3
 801300e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013010:	4413      	add	r3, r2
 8013012:	b29b      	uxth	r3, r3
 8013014:	b21b      	sxth	r3, r3
 8013016:	4622      	mov	r2, r4
 8013018:	47a8      	blx	r5
 801301a:	4603      	mov	r3, r0
 801301c:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 801301e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013020:	8839      	ldrh	r1, [r7, #0]
 8013022:	69bb      	ldr	r3, [r7, #24]
 8013024:	4610      	mov	r0, r2
 8013026:	4798      	blx	r3
               fpixels=0;
 8013028:	2300      	movs	r3, #0
 801302a:	847b      	strh	r3, [r7, #34]	; 0x22
 801302c:	e021      	b.n	8013072 <_UG_PutChar+0x3ca>
             }
             else
             {
               push_pixels = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x0,y0,x0+width-1,y0);
 801302e:	4b4f      	ldr	r3, [pc, #316]	; (801316c <_UG_PutChar+0x4c4>)
 8013030:	681b      	ldr	r3, [r3, #0]
 8013032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013034:	461c      	mov	r4, r3
 8013036:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 801303a:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 801303e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013040:	8a3b      	ldrh	r3, [r7, #16]
 8013042:	4413      	add	r3, r2
 8013044:	b29b      	uxth	r3, r3
 8013046:	3b01      	subs	r3, #1
 8013048:	b29b      	uxth	r3, r3
 801304a:	b21a      	sxth	r2, r3
 801304c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8013050:	47a0      	blx	r4
 8013052:	4603      	mov	r3, r0
 8013054:	61bb      	str	r3, [r7, #24]
               push_pixels(fpixels,fc);
 8013056:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013058:	8839      	ldrh	r1, [r7, #0]
 801305a:	69bb      	ldr	r3, [r7, #24]
 801305c:	4610      	mov	r0, r2
 801305e:	4798      	blx	r3
               fpixels -= width;
 8013060:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013062:	8a3b      	ldrh	r3, [r7, #16]
 8013064:	1ad3      	subs	r3, r2, r3
 8013066:	847b      	strh	r3, [r7, #34]	; 0x22
               x0=x;
 8013068:	88bb      	ldrh	r3, [r7, #4]
 801306a:	85fb      	strh	r3, [r7, #46]	; 0x2e
               y0++;
 801306c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801306e:	3301      	adds	r3, #1
 8013070:	85bb      	strh	r3, [r7, #44]	; 0x2c
           while(fpixels)
 8013072:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013074:	2b00      	cmp	r3, #0
 8013076:	d1a5      	bne.n	8012fc4 <_UG_PutChar+0x31c>
 8013078:	e071      	b.n	801315e <_UG_PutChar+0x4b6>
         }
       }
     }
   }
   #if defined(UGUI_USE_COLOR_RGB888) || defined(UGUI_USE_COLOR_RGB565)
   else if ( gui->currentFont.font_type == FONT_TYPE_8BPP)
 801307a:	4b3c      	ldr	r3, [pc, #240]	; (801316c <_UG_PutChar+0x4c4>)
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013082:	2b01      	cmp	r3, #1
 8013084:	d16b      	bne.n	801315e <_UG_PutChar+0x4b6>
   {
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013086:	2300      	movs	r3, #0
 8013088:	853b      	strh	r3, [r7, #40]	; 0x28
 801308a:	e060      	b.n	801314e <_UG_PutChar+0x4a6>
     {
       for( i=0;i<actual_char_width;i++ )
 801308c:	2300      	movs	r3, #0
 801308e:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013090:	e04a      	b.n	8013128 <_UG_PutChar+0x480>
       {
         b = *data++;
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	1c5a      	adds	r2, r3, #1
 8013096:	60ba      	str	r2, [r7, #8]
 8013098:	781b      	ldrb	r3, [r3, #0]
 801309a:	777b      	strb	r3, [r7, #29]
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 801309c:	883b      	ldrh	r3, [r7, #0]
 801309e:	b2db      	uxtb	r3, r3
 80130a0:	7f7a      	ldrb	r2, [r7, #29]
 80130a2:	fb03 f202 	mul.w	r2, r3, r2
 80130a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80130aa:	b2db      	uxtb	r3, r3
 80130ac:	7f79      	ldrb	r1, [r7, #29]
 80130ae:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80130b2:	fb01 f303 	mul.w	r3, r1, r3
 80130b6:	4413      	add	r3, r2
 80130b8:	121b      	asrs	r3, r3, #8
 80130ba:	b21b      	sxth	r3, r3
 80130bc:	b2db      	uxtb	r3, r3
 80130be:	b21a      	sxth	r2, r3
                 ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) |     //Green component
 80130c0:	883b      	ldrh	r3, [r7, #0]
 80130c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80130c6:	7f79      	ldrb	r1, [r7, #29]
 80130c8:	fb03 f101 	mul.w	r1, r3, r1
 80130cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80130d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80130d4:	7f78      	ldrb	r0, [r7, #29]
 80130d6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80130da:	fb00 f303 	mul.w	r3, r0, r3
 80130de:	440b      	add	r3, r1
 80130e0:	121b      	asrs	r3, r3, #8
 80130e2:	b21b      	sxth	r3, r3
 80130e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80130e8:	b21b      	sxth	r3, r3
         color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) |            //Blue component
 80130ea:	4313      	orrs	r3, r2
 80130ec:	b21b      	sxth	r3, r3
 80130ee:	827b      	strh	r3, [r7, #18]
                 ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000); //Red component
         if(driver)
 80130f0:	7dbb      	ldrb	r3, [r7, #22]
 80130f2:	2b00      	cmp	r3, #0
 80130f4:	d005      	beq.n	8013102 <_UG_PutChar+0x45a>
         {
           push_pixels(1,color);                                                          // Accelerated output
 80130f6:	8a7a      	ldrh	r2, [r7, #18]
 80130f8:	69bb      	ldr	r3, [r7, #24]
 80130fa:	4611      	mov	r1, r2
 80130fc:	2001      	movs	r0, #1
 80130fe:	4798      	blx	r3
 8013100:	e00f      	b.n	8013122 <_UG_PutChar+0x47a>
         }
         else
         {
           gui->device->pset(x+i,y+j,color);                                                // Not accelerated output
 8013102:	4b1a      	ldr	r3, [pc, #104]	; (801316c <_UG_PutChar+0x4c4>)
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	681b      	ldr	r3, [r3, #0]
 8013108:	685b      	ldr	r3, [r3, #4]
 801310a:	88b9      	ldrh	r1, [r7, #4]
 801310c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801310e:	440a      	add	r2, r1
 8013110:	b292      	uxth	r2, r2
 8013112:	b210      	sxth	r0, r2
 8013114:	8879      	ldrh	r1, [r7, #2]
 8013116:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8013118:	440a      	add	r2, r1
 801311a:	b292      	uxth	r2, r2
 801311c:	b211      	sxth	r1, r2
 801311e:	8a7a      	ldrh	r2, [r7, #18]
 8013120:	4798      	blx	r3
       for( i=0;i<actual_char_width;i++ )
 8013122:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013124:	3301      	adds	r3, #1
 8013126:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013128:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 801312a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801312e:	429a      	cmp	r2, r3
 8013130:	dbaf      	blt.n	8013092 <_UG_PutChar+0x3ea>
         }
       }
       data +=  gui->currentFont.char_width - actual_char_width;
 8013132:	68bb      	ldr	r3, [r7, #8]
 8013134:	4a0d      	ldr	r2, [pc, #52]	; (801316c <_UG_PutChar+0x4c4>)
 8013136:	6812      	ldr	r2, [r2, #0]
 8013138:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 801313c:	4611      	mov	r1, r2
 801313e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8013142:	1a8a      	subs	r2, r1, r2
 8013144:	4413      	add	r3, r2
 8013146:	60bb      	str	r3, [r7, #8]
     for( j=0;j< gui->currentFont.char_height;j++ )
 8013148:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801314a:	3301      	adds	r3, #1
 801314c:	853b      	strh	r3, [r7, #40]	; 0x28
 801314e:	4b07      	ldr	r3, [pc, #28]	; (801316c <_UG_PutChar+0x4c4>)
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013156:	b29b      	uxth	r3, r3
 8013158:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801315a:	429a      	cmp	r2, r3
 801315c:	d396      	bcc.n	801308c <_UG_PutChar+0x3e4>
     }
   }
   #endif
   return (actual_char_width);
 801315e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 8013162:	4618      	mov	r0, r3
 8013164:	3730      	adds	r7, #48	; 0x30
 8013166:	46bd      	mov	sp, r7
 8013168:	bdb0      	pop	{r4, r5, r7, pc}
 801316a:	bf00      	nop
 801316c:	20001cd8 	.word	0x20001cd8

08013170 <_UG_ProcessTouchData>:

#ifdef UGUI_USE_TOUCH
static void _UG_ProcessTouchData( UG_WINDOW* wnd )
{
 8013170:	b480      	push	{r7}
 8013172:	b089      	sub	sp, #36	; 0x24
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
   UG_OBJECT* obj;
   UG_U8 objstate;
   UG_U8 objtouch;
   UG_U8 tchstate;

   xp = gui->touch.xp;
 8013178:	4b57      	ldr	r3, [pc, #348]	; (80132d8 <_UG_ProcessTouchData+0x168>)
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	88db      	ldrh	r3, [r3, #6]
 801317e:	837b      	strh	r3, [r7, #26]
   yp = gui->touch.yp;
 8013180:	4b55      	ldr	r3, [pc, #340]	; (80132d8 <_UG_ProcessTouchData+0x168>)
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	891b      	ldrh	r3, [r3, #8]
 8013186:	833b      	strh	r3, [r7, #24]
   tchstate = gui->touch.state;
 8013188:	4b53      	ldr	r3, [pc, #332]	; (80132d8 <_UG_ProcessTouchData+0x168>)
 801318a:	681b      	ldr	r3, [r3, #0]
 801318c:	791b      	ldrb	r3, [r3, #4]
 801318e:	75fb      	strb	r3, [r7, #23]

   objcnt = wnd->objcnt;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	781b      	ldrb	r3, [r3, #0]
 8013194:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 8013196:	2300      	movs	r3, #0
 8013198:	83fb      	strh	r3, [r7, #30]
 801319a:	e090      	b.n	80132be <_UG_ProcessTouchData+0x14e>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	685a      	ldr	r2, [r3, #4]
 80131a0:	8bfb      	ldrh	r3, [r7, #30]
 80131a2:	015b      	lsls	r3, r3, #5
 80131a4:	4413      	add	r3, r2
 80131a6:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	781b      	ldrb	r3, [r3, #0]
 80131ac:	73fb      	strb	r3, [r7, #15]
      objtouch = obj->touch_state;
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	785b      	ldrb	r3, [r3, #1]
 80131b2:	777b      	strb	r3, [r7, #29]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) && (objstate & OBJ_STATE_VISIBLE) && !(objstate & OBJ_STATE_REDRAW))
 80131b4:	7bfb      	ldrb	r3, [r7, #15]
 80131b6:	f003 0301 	and.w	r3, r3, #1
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d179      	bne.n	80132b2 <_UG_ProcessTouchData+0x142>
 80131be:	7bfb      	ldrb	r3, [r7, #15]
 80131c0:	f003 0302 	and.w	r3, r3, #2
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d074      	beq.n	80132b2 <_UG_ProcessTouchData+0x142>
 80131c8:	7bfb      	ldrb	r3, [r7, #15]
 80131ca:	f003 0308 	and.w	r3, r3, #8
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d06f      	beq.n	80132b2 <_UG_ProcessTouchData+0x142>
 80131d2:	7bfb      	ldrb	r3, [r7, #15]
 80131d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131d8:	2b00      	cmp	r3, #0
 80131da:	d16a      	bne.n	80132b2 <_UG_ProcessTouchData+0x142>
      {
         /* Process touch data */
         if ( (tchstate) && xp != -1 )
 80131dc:	7dfb      	ldrb	r3, [r7, #23]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d047      	beq.n	8013272 <_UG_ProcessTouchData+0x102>
 80131e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80131e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80131ea:	d042      	beq.n	8013272 <_UG_ProcessTouchData+0x102>
         {
            if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 80131ec:	7f7b      	ldrb	r3, [r7, #29]
 80131ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80131f2:	2b00      	cmp	r3, #0
 80131f4:	d107      	bne.n	8013206 <_UG_ProcessTouchData+0x96>
            {
               objtouch |= OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_CHANGED;
 80131f6:	7f7b      	ldrb	r3, [r7, #29]
 80131f8:	f043 0305 	orr.w	r3, r3, #5
 80131fc:	777b      	strb	r3, [r7, #29]
               objtouch &= ~(OBJ_TOUCH_STATE_RELEASED_ON_OBJECT | OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT);
 80131fe:	7f7b      	ldrb	r3, [r7, #29]
 8013200:	f023 0318 	bic.w	r3, r3, #24
 8013204:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8013206:	7f7b      	ldrb	r3, [r7, #29]
 8013208:	f023 0320 	bic.w	r3, r3, #32
 801320c:	777b      	strb	r3, [r7, #29]
            if ( xp >= obj->a_abs.xs )
 801320e:	693b      	ldr	r3, [r7, #16]
 8013210:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8013214:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013218:	429a      	cmp	r2, r3
 801321a:	db25      	blt.n	8013268 <_UG_ProcessTouchData+0xf8>
            {
               if ( xp <= obj->a_abs.xe )
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8013222:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8013226:	429a      	cmp	r2, r3
 8013228:	dc1e      	bgt.n	8013268 <_UG_ProcessTouchData+0xf8>
               {
                  if ( yp >= obj->a_abs.ys )
 801322a:	693b      	ldr	r3, [r7, #16]
 801322c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8013230:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8013234:	429a      	cmp	r2, r3
 8013236:	db17      	blt.n	8013268 <_UG_ProcessTouchData+0xf8>
                  {
                     if ( yp <= obj->a_abs.ye )
 8013238:	693b      	ldr	r3, [r7, #16]
 801323a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801323e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8013242:	429a      	cmp	r2, r3
 8013244:	dc10      	bgt.n	8013268 <_UG_ProcessTouchData+0xf8>
                     {
                        objtouch |= OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT;
 8013246:	7f7b      	ldrb	r3, [r7, #29]
 8013248:	f043 0320 	orr.w	r3, r3, #32
 801324c:	777b      	strb	r3, [r7, #29]
                        if ( !(objtouch & OBJ_TOUCH_STATE_IS_PRESSED) )
 801324e:	7f7b      	ldrb	r3, [r7, #29]
 8013250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013254:	2b00      	cmp	r3, #0
 8013256:	d107      	bne.n	8013268 <_UG_ProcessTouchData+0xf8>
                        {
                           objtouch &= ~OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT;
 8013258:	7f7b      	ldrb	r3, [r7, #29]
 801325a:	f023 0304 	bic.w	r3, r3, #4
 801325e:	777b      	strb	r3, [r7, #29]
                           objtouch |= OBJ_TOUCH_STATE_PRESSED_ON_OBJECT;
 8013260:	7f7b      	ldrb	r3, [r7, #29]
 8013262:	f043 0302 	orr.w	r3, r3, #2
 8013266:	777b      	strb	r3, [r7, #29]
                        }
                     }
                  }
               }
            }
            objtouch |= OBJ_TOUCH_STATE_IS_PRESSED;
 8013268:	7f7b      	ldrb	r3, [r7, #29]
 801326a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801326e:	777b      	strb	r3, [r7, #29]
 8013270:	e01f      	b.n	80132b2 <_UG_ProcessTouchData+0x142>
         }
         else if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8013272:	7f7b      	ldrb	r3, [r7, #29]
 8013274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013278:	2b00      	cmp	r3, #0
 801327a:	d01a      	beq.n	80132b2 <_UG_ProcessTouchData+0x142>
         {
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED_ON_OBJECT )
 801327c:	7f7b      	ldrb	r3, [r7, #29]
 801327e:	f003 0320 	and.w	r3, r3, #32
 8013282:	2b00      	cmp	r3, #0
 8013284:	d004      	beq.n	8013290 <_UG_ProcessTouchData+0x120>
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_ON_OBJECT;
 8013286:	7f7b      	ldrb	r3, [r7, #29]
 8013288:	f043 0308 	orr.w	r3, r3, #8
 801328c:	777b      	strb	r3, [r7, #29]
 801328e:	e003      	b.n	8013298 <_UG_ProcessTouchData+0x128>
            }
            else
            {
               objtouch |= OBJ_TOUCH_STATE_RELEASED_OUTSIDE_OBJECT;
 8013290:	7f7b      	ldrb	r3, [r7, #29]
 8013292:	f043 0310 	orr.w	r3, r3, #16
 8013296:	777b      	strb	r3, [r7, #29]
            }
            if ( objtouch & OBJ_TOUCH_STATE_IS_PRESSED )
 8013298:	7f7b      	ldrb	r3, [r7, #29]
 801329a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d003      	beq.n	80132aa <_UG_ProcessTouchData+0x13a>
            {
               objtouch |= OBJ_TOUCH_STATE_CHANGED;
 80132a2:	7f7b      	ldrb	r3, [r7, #29]
 80132a4:	f043 0301 	orr.w	r3, r3, #1
 80132a8:	777b      	strb	r3, [r7, #29]
            }
            objtouch &= ~(OBJ_TOUCH_STATE_PRESSED_OUTSIDE_OBJECT | OBJ_TOUCH_STATE_PRESSED_ON_OBJECT | OBJ_TOUCH_STATE_IS_PRESSED);
 80132aa:	7f7b      	ldrb	r3, [r7, #29]
 80132ac:	f023 0346 	bic.w	r3, r3, #70	; 0x46
 80132b0:	777b      	strb	r3, [r7, #29]
         }
      }
      obj->touch_state = objtouch;
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	7f7a      	ldrb	r2, [r7, #29]
 80132b6:	705a      	strb	r2, [r3, #1]
   for(i=0; i<objcnt; i++)
 80132b8:	8bfb      	ldrh	r3, [r7, #30]
 80132ba:	3301      	adds	r3, #1
 80132bc:	83fb      	strh	r3, [r7, #30]
 80132be:	8bfa      	ldrh	r2, [r7, #30]
 80132c0:	8abb      	ldrh	r3, [r7, #20]
 80132c2:	429a      	cmp	r2, r3
 80132c4:	f4ff af6a 	bcc.w	801319c <_UG_ProcessTouchData+0x2c>
   }
}
 80132c8:	bf00      	nop
 80132ca:	bf00      	nop
 80132cc:	3724      	adds	r7, #36	; 0x24
 80132ce:	46bd      	mov	sp, r7
 80132d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d4:	4770      	bx	lr
 80132d6:	bf00      	nop
 80132d8:	20001cd8 	.word	0x20001cd8

080132dc <_UG_UpdateObjects>:
#endif

static void _UG_UpdateObjects( UG_WINDOW* wnd )
{
 80132dc:	b580      	push	{r7, lr}
 80132de:	b086      	sub	sp, #24
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
   #ifdef UGUI_USE_TOUCH
   UG_U8 objtouch;
   #endif

   /* Check each object, if it needs to be updated? */
   objcnt = wnd->objcnt;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	781b      	ldrb	r3, [r3, #0]
 80132e8:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 80132ea:	2300      	movs	r3, #0
 80132ec:	82fb      	strh	r3, [r7, #22]
 80132ee:	e035      	b.n	801335c <_UG_UpdateObjects+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	685a      	ldr	r2, [r3, #4]
 80132f4:	8afb      	ldrh	r3, [r7, #22]
 80132f6:	015b      	lsls	r3, r3, #5
 80132f8:	4413      	add	r3, r2
 80132fa:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	73fb      	strb	r3, [r7, #15]
      #ifdef UGUI_USE_TOUCH
      objtouch = obj->touch_state;
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	785b      	ldrb	r3, [r3, #1]
 8013306:	73bb      	strb	r3, [r7, #14]
      #endif
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 8013308:	7bfb      	ldrb	r3, [r7, #15]
 801330a:	f003 0301 	and.w	r3, r3, #1
 801330e:	2b00      	cmp	r3, #0
 8013310:	d121      	bne.n	8013356 <_UG_UpdateObjects+0x7a>
 8013312:	7bfb      	ldrb	r3, [r7, #15]
 8013314:	f003 0302 	and.w	r3, r3, #2
 8013318:	2b00      	cmp	r3, #0
 801331a:	d01c      	beq.n	8013356 <_UG_UpdateObjects+0x7a>
      {
         if ( objstate & OBJ_STATE_UPDATE )
 801331c:	7bfb      	ldrb	r3, [r7, #15]
 801331e:	f003 0320 	and.w	r3, r3, #32
 8013322:	2b00      	cmp	r3, #0
 8013324:	d004      	beq.n	8013330 <_UG_UpdateObjects+0x54>
         {
            obj->update(wnd,obj);
 8013326:	693b      	ldr	r3, [r7, #16]
 8013328:	685b      	ldr	r3, [r3, #4]
 801332a:	6939      	ldr	r1, [r7, #16]
 801332c:	6878      	ldr	r0, [r7, #4]
 801332e:	4798      	blx	r3
         }
         #ifdef UGUI_USE_TOUCH
         if ( (objstate & OBJ_STATE_VISIBLE) && (objstate & OBJ_STATE_TOUCH_ENABLE) )
 8013330:	7bfb      	ldrb	r3, [r7, #15]
 8013332:	f003 0308 	and.w	r3, r3, #8
 8013336:	2b00      	cmp	r3, #0
 8013338:	d00d      	beq.n	8013356 <_UG_UpdateObjects+0x7a>
 801333a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801333e:	2b00      	cmp	r3, #0
 8013340:	da09      	bge.n	8013356 <_UG_UpdateObjects+0x7a>
         {
            if ( (objtouch & (OBJ_TOUCH_STATE_CHANGED | OBJ_TOUCH_STATE_IS_PRESSED)) )
 8013342:	7bbb      	ldrb	r3, [r7, #14]
 8013344:	f003 0341 	and.w	r3, r3, #65	; 0x41
 8013348:	2b00      	cmp	r3, #0
 801334a:	d004      	beq.n	8013356 <_UG_UpdateObjects+0x7a>
            {
               obj->update(wnd,obj);
 801334c:	693b      	ldr	r3, [r7, #16]
 801334e:	685b      	ldr	r3, [r3, #4]
 8013350:	6939      	ldr	r1, [r7, #16]
 8013352:	6878      	ldr	r0, [r7, #4]
 8013354:	4798      	blx	r3
   for(i=0; i<objcnt; i++)
 8013356:	8afb      	ldrh	r3, [r7, #22]
 8013358:	3301      	adds	r3, #1
 801335a:	82fb      	strh	r3, [r7, #22]
 801335c:	8afa      	ldrh	r2, [r7, #22]
 801335e:	8abb      	ldrh	r3, [r7, #20]
 8013360:	429a      	cmp	r2, r3
 8013362:	d3c5      	bcc.n	80132f0 <_UG_UpdateObjects+0x14>
            }
         }
         #endif
      }
   }
}
 8013364:	bf00      	nop
 8013366:	bf00      	nop
 8013368:	3718      	adds	r7, #24
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}
	...

08013370 <_UG_HandleEvents>:

static void _UG_HandleEvents( UG_WINDOW* wnd )
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b086      	sub	sp, #24
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_U8 objstate;
   static UG_MESSAGE msg;
   msg.src = NULL;
 8013378:	4b22      	ldr	r3, [pc, #136]	; (8013404 <_UG_HandleEvents+0x94>)
 801337a:	2200      	movs	r2, #0
 801337c:	605a      	str	r2, [r3, #4]

   /* Handle window-related events */
   //ToDo

   /* Handle object-related events */
   msg.type = MSG_TYPE_OBJECT;
 801337e:	4b21      	ldr	r3, [pc, #132]	; (8013404 <_UG_HandleEvents+0x94>)
 8013380:	2202      	movs	r2, #2
 8013382:	701a      	strb	r2, [r3, #0]
   objcnt = wnd->objcnt;
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	781b      	ldrb	r3, [r3, #0]
 8013388:	82bb      	strh	r3, [r7, #20]
   for(i=0; i<objcnt; i++)
 801338a:	2300      	movs	r3, #0
 801338c:	82fb      	strh	r3, [r7, #22]
 801338e:	e02f      	b.n	80133f0 <_UG_HandleEvents+0x80>
   {
      obj = (UG_OBJECT*)&wnd->objlst[i];
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	685a      	ldr	r2, [r3, #4]
 8013394:	8afb      	ldrh	r3, [r7, #22]
 8013396:	015b      	lsls	r3, r3, #5
 8013398:	4413      	add	r3, r2
 801339a:	613b      	str	r3, [r7, #16]
      objstate = obj->state;
 801339c:	693b      	ldr	r3, [r7, #16]
 801339e:	781b      	ldrb	r3, [r3, #0]
 80133a0:	73fb      	strb	r3, [r7, #15]
      if ( !(objstate & OBJ_STATE_FREE) && (objstate & OBJ_STATE_VALID) )
 80133a2:	7bfb      	ldrb	r3, [r7, #15]
 80133a4:	f003 0301 	and.w	r3, r3, #1
 80133a8:	2b00      	cmp	r3, #0
 80133aa:	d11e      	bne.n	80133ea <_UG_HandleEvents+0x7a>
 80133ac:	7bfb      	ldrb	r3, [r7, #15]
 80133ae:	f003 0302 	and.w	r3, r3, #2
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d019      	beq.n	80133ea <_UG_HandleEvents+0x7a>
      {
         if ( obj->event != OBJ_EVENT_NONE )
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	7e9b      	ldrb	r3, [r3, #26]
 80133ba:	2b00      	cmp	r3, #0
 80133bc:	d015      	beq.n	80133ea <_UG_HandleEvents+0x7a>
         {
            msg.src = obj;
 80133be:	4a11      	ldr	r2, [pc, #68]	; (8013404 <_UG_HandleEvents+0x94>)
 80133c0:	693b      	ldr	r3, [r7, #16]
 80133c2:	6053      	str	r3, [r2, #4]
            msg.id = obj->type;
 80133c4:	693b      	ldr	r3, [r7, #16]
 80133c6:	7e1a      	ldrb	r2, [r3, #24]
 80133c8:	4b0e      	ldr	r3, [pc, #56]	; (8013404 <_UG_HandleEvents+0x94>)
 80133ca:	705a      	strb	r2, [r3, #1]
            msg.sub_id = obj->id;
 80133cc:	693b      	ldr	r3, [r7, #16]
 80133ce:	7e5a      	ldrb	r2, [r3, #25]
 80133d0:	4b0c      	ldr	r3, [pc, #48]	; (8013404 <_UG_HandleEvents+0x94>)
 80133d2:	709a      	strb	r2, [r3, #2]
            msg.event = obj->event;
 80133d4:	693b      	ldr	r3, [r7, #16]
 80133d6:	7e9a      	ldrb	r2, [r3, #26]
 80133d8:	4b0a      	ldr	r3, [pc, #40]	; (8013404 <_UG_HandleEvents+0x94>)
 80133da:	70da      	strb	r2, [r3, #3]

            wnd->cb( &msg );
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133e0:	4808      	ldr	r0, [pc, #32]	; (8013404 <_UG_HandleEvents+0x94>)
 80133e2:	4798      	blx	r3

            obj->event = OBJ_EVENT_NONE;
 80133e4:	693b      	ldr	r3, [r7, #16]
 80133e6:	2200      	movs	r2, #0
 80133e8:	769a      	strb	r2, [r3, #26]
   for(i=0; i<objcnt; i++)
 80133ea:	8afb      	ldrh	r3, [r7, #22]
 80133ec:	3301      	adds	r3, #1
 80133ee:	82fb      	strh	r3, [r7, #22]
 80133f0:	8afa      	ldrh	r2, [r7, #22]
 80133f2:	8abb      	ldrh	r3, [r7, #20]
 80133f4:	429a      	cmp	r2, r3
 80133f6:	d3cb      	bcc.n	8013390 <_UG_HandleEvents+0x20>
         }
      }
   }
}
 80133f8:	bf00      	nop
 80133fa:	bf00      	nop
 80133fc:	3718      	adds	r7, #24
 80133fe:	46bd      	mov	sp, r7
 8013400:	bd80      	pop	{r7, pc}
 8013402:	bf00      	nop
 8013404:	20001cec 	.word	0x20001cec

08013408 <_UG_PutText>:
/* -------------------------------------------------------------------------------- */
/* -- INTERNAL API FUNCTIONS                                                         -- */
/* -------------------------------------------------------------------------------- */

void _UG_PutText(UG_TEXT* txt)
{
 8013408:	b590      	push	{r4, r7, lr}
 801340a:	b08f      	sub	sp, #60	; 0x3c
 801340c:	af02      	add	r7, sp, #8
 801340e:	6078      	str	r0, [r7, #4]
   if(!txt->font || !txt->str){
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	685b      	ldr	r3, [r3, #4]
 8013414:	2b00      	cmp	r3, #0
 8013416:	f000 812c 	beq.w	8013672 <_UG_PutText+0x26a>
 801341a:	687b      	ldr	r3, [r7, #4]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	2b00      	cmp	r3, #0
 8013420:	f000 8127 	beq.w	8013672 <_UG_PutText+0x26a>
     return;
   }

   UG_S16 ye=txt->a.ye;
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	89db      	ldrh	r3, [r3, #14]
 8013428:	847b      	strh	r3, [r7, #34]	; 0x22
   UG_S16 ys=txt->a.ys;
 801342a:	687b      	ldr	r3, [r7, #4]
 801342c:	895b      	ldrh	r3, [r3, #10]
 801342e:	843b      	strh	r3, [r7, #32]
   UG_S16 char_height=UG_GetFontHeight(txt->font);
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	685b      	ldr	r3, [r3, #4]
 8013434:	3302      	adds	r3, #2
 8013436:	781b      	ldrb	r3, [r3, #0]
 8013438:	83fb      	strh	r3, [r7, #30]

   if ( (ye - ys) < char_height ){
 801343a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 801343e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013442:	1ad2      	subs	r2, r2, r3
 8013444:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013448:	429a      	cmp	r2, r3
 801344a:	f2c0 8114 	blt.w	8013676 <_UG_PutText+0x26e>
     return;
   }

   UG_U16 sl,rc,wl;
   UG_S16 xp,yp;
   UG_S16 xs=txt->a.xs;
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	891b      	ldrh	r3, [r3, #8]
 8013452:	83bb      	strh	r3, [r7, #28]
   UG_S16 xe=txt->a.xe;
 8013454:	687b      	ldr	r3, [r7, #4]
 8013456:	899b      	ldrh	r3, [r3, #12]
 8013458:	837b      	strh	r3, [r7, #26]
   UG_U8  align=txt->align;
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	7d1b      	ldrb	r3, [r3, #20]
 801345e:	767b      	strb	r3, [r7, #25]
   UG_S16 char_h_space=txt->h_space;
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	8adb      	ldrh	r3, [r3, #22]
 8013464:	82fb      	strh	r3, [r7, #22]
   UG_S16 char_v_space=txt->v_space;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	8b1b      	ldrh	r3, [r3, #24]
 801346a:	82bb      	strh	r3, [r7, #20]
   UG_S16 w;
   UG_CHAR chr;
   char* str = txt->str;
 801346c:	687b      	ldr	r3, [r7, #4]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	60fb      	str	r3, [r7, #12]
   char* c = str;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	60bb      	str	r3, [r7, #8]

   _UG_FontSelect(txt->font);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	4618      	mov	r0, r3
 801347c:	f7ff fb92 	bl	8012ba4 <_UG_FontSelect>

   rc=1;
 8013480:	2301      	movs	r3, #1
 8013482:	85bb      	strh	r3, [r7, #44]	; 0x2c
   c=str;
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	60bb      	str	r3, [r7, #8]

   while (1)
   {
     #ifdef UGUI_USE_UTF8
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 8013488:	4b80      	ldr	r3, [pc, #512]	; (801368c <_UG_PutText+0x284>)
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013490:	2b00      	cmp	r3, #0
 8013492:	d107      	bne.n	80134a4 <_UG_PutText+0x9c>
       chr = _UG_DecodeUTF8(&c);
 8013494:	f107 0308 	add.w	r3, r7, #8
 8013498:	4618      	mov	r0, r3
 801349a:	f7ff f9bf 	bl	801281c <_UG_DecodeUTF8>
 801349e:	4603      	mov	r3, r0
 80134a0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80134a2:	e004      	b.n	80134ae <_UG_PutText+0xa6>
     }
     else{
       chr = *c++;
 80134a4:	68bb      	ldr	r3, [r7, #8]
 80134a6:	1c5a      	adds	r2, r3, #1
 80134a8:	60ba      	str	r2, [r7, #8]
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	84bb      	strh	r3, [r7, #36]	; 0x24
     }
     #else
     chr = *c++;
     #endif
     if(!chr) break;
 80134ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d006      	beq.n	80134c2 <_UG_PutText+0xba>
     if ( chr == '\n' ) rc++;
 80134b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80134b6:	2b0a      	cmp	r3, #10
 80134b8:	d1e6      	bne.n	8013488 <_UG_PutText+0x80>
 80134ba:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80134bc:	3301      	adds	r3, #1
 80134be:	85bb      	strh	r3, [r7, #44]	; 0x2c
     if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80134c0:	e7e2      	b.n	8013488 <_UG_PutText+0x80>
     if(!chr) break;
 80134c2:	bf00      	nop
   }

   yp = 0;
 80134c4:	2300      	movs	r3, #0
 80134c6:	84fb      	strh	r3, [r7, #38]	; 0x26
   if ( align & (ALIGN_V_CENTER | ALIGN_V_BOTTOM) )
 80134c8:	7e7b      	ldrb	r3, [r7, #25]
 80134ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d01f      	beq.n	8013512 <_UG_PutText+0x10a>
   {
      yp = ye - ys + 1;
 80134d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80134d4:	8c3b      	ldrh	r3, [r7, #32]
 80134d6:	1ad3      	subs	r3, r2, r3
 80134d8:	b29b      	uxth	r3, r3
 80134da:	3301      	adds	r3, #1
 80134dc:	b29b      	uxth	r3, r3
 80134de:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_height*rc;
 80134e0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80134e2:	8bfb      	ldrh	r3, [r7, #30]
 80134e4:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 80134e6:	fb11 f303 	smulbb	r3, r1, r3
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	1ad3      	subs	r3, r2, r3
 80134ee:	b29b      	uxth	r3, r3
 80134f0:	84fb      	strh	r3, [r7, #38]	; 0x26
      yp -= char_v_space*(rc-1);
 80134f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80134f4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80134f6:	3b01      	subs	r3, #1
 80134f8:	b299      	uxth	r1, r3
 80134fa:	8abb      	ldrh	r3, [r7, #20]
 80134fc:	fb11 f303 	smulbb	r3, r1, r3
 8013500:	b29b      	uxth	r3, r3
 8013502:	1ad3      	subs	r3, r2, r3
 8013504:	b29b      	uxth	r3, r3
 8013506:	84fb      	strh	r3, [r7, #38]	; 0x26
      if ( yp < 0 ){
 8013508:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801350c:	2b00      	cmp	r3, #0
 801350e:	f2c0 80b4 	blt.w	801367a <_UG_PutText+0x272>
        return;
      }
   }
   if ( align & ALIGN_V_CENTER ) yp >>= 1;
 8013512:	7e7b      	ldrb	r3, [r7, #25]
 8013514:	f003 0310 	and.w	r3, r3, #16
 8013518:	2b00      	cmp	r3, #0
 801351a:	d003      	beq.n	8013524 <_UG_PutText+0x11c>
 801351c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013520:	105b      	asrs	r3, r3, #1
 8013522:	84fb      	strh	r3, [r7, #38]	; 0x26
   yp += ys;
 8013524:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013526:	8c3b      	ldrh	r3, [r7, #32]
 8013528:	4413      	add	r3, r2
 801352a:	b29b      	uxth	r3, r3
 801352c:	84fb      	strh	r3, [r7, #38]	; 0x26

   while( 1 )
   {
      sl=0;
 801352e:	2300      	movs	r3, #0
 8013530:	85fb      	strh	r3, [r7, #46]	; 0x2e
      c=str;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	60bb      	str	r3, [r7, #8]
      wl = 0;
 8013536:	2300      	movs	r3, #0
 8013538:	857b      	strh	r3, [r7, #42]	; 0x2a
      while(1)
      {
        #ifdef UGUI_USE_UTF8
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801353a:	4b54      	ldr	r3, [pc, #336]	; (801368c <_UG_PutText+0x284>)
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013542:	2b00      	cmp	r3, #0
 8013544:	d107      	bne.n	8013556 <_UG_PutText+0x14e>
          chr = _UG_DecodeUTF8(&c);
 8013546:	f107 0308 	add.w	r3, r7, #8
 801354a:	4618      	mov	r0, r3
 801354c:	f7ff f966 	bl	801281c <_UG_DecodeUTF8>
 8013550:	4603      	mov	r3, r0
 8013552:	84bb      	strh	r3, [r7, #36]	; 0x24
 8013554:	e004      	b.n	8013560 <_UG_PutText+0x158>
        }
        else{
          chr = *c++;
 8013556:	68bb      	ldr	r3, [r7, #8]
 8013558:	1c5a      	adds	r2, r3, #1
 801355a:	60ba      	str	r2, [r7, #8]
 801355c:	781b      	ldrb	r3, [r3, #0]
 801355e:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        #else
        chr = *c++;
        #endif
        if( chr == 0 || chr == '\n'){
 8013560:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013562:	2b00      	cmp	r3, #0
 8013564:	d01b      	beq.n	801359e <_UG_PutText+0x196>
 8013566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013568:	2b0a      	cmp	r3, #10
 801356a:	d018      	beq.n	801359e <_UG_PutText+0x196>
          break;
        }
         w = _UG_GetCharData(chr, NULL);
 801356c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801356e:	2100      	movs	r1, #0
 8013570:	4618      	mov	r0, r3
 8013572:	f7ff f9cb 	bl	801290c <_UG_GetCharData>
 8013576:	4603      	mov	r3, r0
 8013578:	827b      	strh	r3, [r7, #18]
         if (w == -1){continue;}
 801357a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013582:	d00a      	beq.n	801359a <_UG_PutText+0x192>
         sl++;
 8013584:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013586:	3301      	adds	r3, #1
 8013588:	85fb      	strh	r3, [r7, #46]	; 0x2e
         wl += w + char_h_space;
 801358a:	8a7a      	ldrh	r2, [r7, #18]
 801358c:	8afb      	ldrh	r3, [r7, #22]
 801358e:	4413      	add	r3, r2
 8013590:	b29a      	uxth	r2, r3
 8013592:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013594:	4413      	add	r3, r2
 8013596:	857b      	strh	r3, [r7, #42]	; 0x2a
 8013598:	e7cf      	b.n	801353a <_UG_PutText+0x132>
         if (w == -1){continue;}
 801359a:	bf00      	nop
        if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801359c:	e7cd      	b.n	801353a <_UG_PutText+0x132>
      }
      wl -= char_h_space;
 801359e:	8afb      	ldrh	r3, [r7, #22]
 80135a0:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80135a2:	1ad3      	subs	r3, r2, r3
 80135a4:	857b      	strh	r3, [r7, #42]	; 0x2a

      xp = xe - xs + 1;
 80135a6:	8b7a      	ldrh	r2, [r7, #26]
 80135a8:	8bbb      	ldrh	r3, [r7, #28]
 80135aa:	1ad3      	subs	r3, r2, r3
 80135ac:	b29b      	uxth	r3, r3
 80135ae:	3301      	adds	r3, #1
 80135b0:	b29b      	uxth	r3, r3
 80135b2:	853b      	strh	r3, [r7, #40]	; 0x28
      xp -= wl;
 80135b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80135b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80135b8:	1ad3      	subs	r3, r2, r3
 80135ba:	b29b      	uxth	r3, r3
 80135bc:	853b      	strh	r3, [r7, #40]	; 0x28
      if ( xp < 0 ) break;
 80135be:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	db5b      	blt.n	801367e <_UG_PutText+0x276>

      if ( align & ALIGN_H_LEFT ) xp = 0;
 80135c6:	7e7b      	ldrb	r3, [r7, #25]
 80135c8:	f003 0301 	and.w	r3, r3, #1
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d002      	beq.n	80135d6 <_UG_PutText+0x1ce>
 80135d0:	2300      	movs	r3, #0
 80135d2:	853b      	strh	r3, [r7, #40]	; 0x28
 80135d4:	e008      	b.n	80135e8 <_UG_PutText+0x1e0>
      else if ( align & ALIGN_H_CENTER ) xp >>= 1;
 80135d6:	7e7b      	ldrb	r3, [r7, #25]
 80135d8:	f003 0302 	and.w	r3, r3, #2
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d003      	beq.n	80135e8 <_UG_PutText+0x1e0>
 80135e0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80135e4:	105b      	asrs	r3, r3, #1
 80135e6:	853b      	strh	r3, [r7, #40]	; 0x28
      xp += xs;
 80135e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80135ea:	8bbb      	ldrh	r3, [r7, #28]
 80135ec:	4413      	add	r3, r2
 80135ee:	b29b      	uxth	r3, r3
 80135f0:	853b      	strh	r3, [r7, #40]	; 0x28


      while(1){
         #ifdef UGUI_USE_UTF8
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 80135f2:	4b26      	ldr	r3, [pc, #152]	; (801368c <_UG_PutText+0x284>)
 80135f4:	681b      	ldr	r3, [r3, #0]
 80135f6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d107      	bne.n	801360e <_UG_PutText+0x206>
           chr = _UG_DecodeUTF8(&str);
 80135fe:	f107 030c 	add.w	r3, r7, #12
 8013602:	4618      	mov	r0, r3
 8013604:	f7ff f90a 	bl	801281c <_UG_DecodeUTF8>
 8013608:	4603      	mov	r3, r0
 801360a:	84bb      	strh	r3, [r7, #36]	; 0x24
 801360c:	e004      	b.n	8013618 <_UG_PutText+0x210>
         }
         else{
           chr = *str++;
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	1c5a      	adds	r2, r3, #1
 8013612:	60fa      	str	r2, [r7, #12]
 8013614:	781b      	ldrb	r3, [r3, #0]
 8013616:	84bb      	strh	r3, [r7, #36]	; 0x24
         }
         #else
         chr = *str++;
         #endif
         if ( chr == 0 ){
 8013618:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801361a:	2b00      	cmp	r3, #0
 801361c:	d031      	beq.n	8013682 <_UG_PutText+0x27a>
           return;
         }
         else if(chr=='\n'){
 801361e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013620:	2b0a      	cmp	r3, #10
 8013622:	d01c      	beq.n	801365e <_UG_PutText+0x256>
           break;
         }
         w = _UG_PutChar(chr,xp,yp,txt->fc,txt->bc);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	8a1c      	ldrh	r4, [r3, #16]
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	8a5b      	ldrh	r3, [r3, #18]
 801362c:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8013630:	f9b7 1028 	ldrsh.w	r1, [r7, #40]	; 0x28
 8013634:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8013636:	9300      	str	r3, [sp, #0]
 8013638:	4623      	mov	r3, r4
 801363a:	f7ff fb35 	bl	8012ca8 <_UG_PutChar>
 801363e:	4603      	mov	r3, r0
 8013640:	827b      	strh	r3, [r7, #18]
         if(w!=-1)
 8013642:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013646:	f1b3 3fff 	cmp.w	r3, #4294967295
 801364a:	d0d2      	beq.n	80135f2 <_UG_PutText+0x1ea>
           xp += w + char_h_space;
 801364c:	8a7a      	ldrh	r2, [r7, #18]
 801364e:	8afb      	ldrh	r3, [r7, #22]
 8013650:	4413      	add	r3, r2
 8013652:	b29a      	uxth	r2, r3
 8013654:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013656:	4413      	add	r3, r2
 8013658:	b29b      	uxth	r3, r3
 801365a:	853b      	strh	r3, [r7, #40]	; 0x28
         if(! gui->currentFont.is_old_font){                // Old font charset compatibility
 801365c:	e7c9      	b.n	80135f2 <_UG_PutText+0x1ea>
           break;
 801365e:	bf00      	nop
      }
      yp += char_height + char_v_space;
 8013660:	8bfa      	ldrh	r2, [r7, #30]
 8013662:	8abb      	ldrh	r3, [r7, #20]
 8013664:	4413      	add	r3, r2
 8013666:	b29a      	uxth	r2, r3
 8013668:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801366a:	4413      	add	r3, r2
 801366c:	b29b      	uxth	r3, r3
 801366e:	84fb      	strh	r3, [r7, #38]	; 0x26
      sl=0;
 8013670:	e75d      	b.n	801352e <_UG_PutText+0x126>
     return;
 8013672:	bf00      	nop
 8013674:	e006      	b.n	8013684 <_UG_PutText+0x27c>
     return;
 8013676:	bf00      	nop
 8013678:	e004      	b.n	8013684 <_UG_PutText+0x27c>
        return;
 801367a:	bf00      	nop
 801367c:	e002      	b.n	8013684 <_UG_PutText+0x27c>
      if ( xp < 0 ) break;
 801367e:	bf00      	nop
 8013680:	e000      	b.n	8013684 <_UG_PutText+0x27c>
           return;
 8013682:	bf00      	nop
   }
}
 8013684:	3734      	adds	r7, #52	; 0x34
 8013686:	46bd      	mov	sp, r7
 8013688:	bd90      	pop	{r4, r7, pc}
 801368a:	bf00      	nop
 801368c:	20001cd8 	.word	0x20001cd8

08013690 <_UG_DrawObjectFrame>:
   }
   return NULL;
}

void _UG_DrawObjectFrame( UG_S16 xs, UG_S16 ys, UG_S16 xe, UG_S16 ye, UG_COLOR* p )
{
 8013690:	b5b0      	push	{r4, r5, r7, lr}
 8013692:	b084      	sub	sp, #16
 8013694:	af02      	add	r7, sp, #8
 8013696:	4604      	mov	r4, r0
 8013698:	4608      	mov	r0, r1
 801369a:	4611      	mov	r1, r2
 801369c:	461a      	mov	r2, r3
 801369e:	4623      	mov	r3, r4
 80136a0:	80fb      	strh	r3, [r7, #6]
 80136a2:	4603      	mov	r3, r0
 80136a4:	80bb      	strh	r3, [r7, #4]
 80136a6:	460b      	mov	r3, r1
 80136a8:	807b      	strh	r3, [r7, #2]
 80136aa:	4613      	mov	r3, r2
 80136ac:	803b      	strh	r3, [r7, #0]
   // Frame 0
   UG_DrawLine(xs, ys  , xe-1, ys  , *p++);
 80136ae:	887b      	ldrh	r3, [r7, #2]
 80136b0:	3b01      	subs	r3, #1
 80136b2:	b29b      	uxth	r3, r3
 80136b4:	b21c      	sxth	r4, r3
 80136b6:	69bb      	ldr	r3, [r7, #24]
 80136b8:	1c9a      	adds	r2, r3, #2
 80136ba:	61ba      	str	r2, [r7, #24]
 80136bc:	881b      	ldrh	r3, [r3, #0]
 80136be:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80136c2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80136c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	4613      	mov	r3, r2
 80136ce:	4622      	mov	r2, r4
 80136d0:	f7fe fee0 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(xs, ys+1, xs  , ye-1, *p++);
 80136d4:	88bb      	ldrh	r3, [r7, #4]
 80136d6:	3301      	adds	r3, #1
 80136d8:	b29b      	uxth	r3, r3
 80136da:	b219      	sxth	r1, r3
 80136dc:	883b      	ldrh	r3, [r7, #0]
 80136de:	3b01      	subs	r3, #1
 80136e0:	b29b      	uxth	r3, r3
 80136e2:	b21c      	sxth	r4, r3
 80136e4:	69bb      	ldr	r3, [r7, #24]
 80136e6:	1c9a      	adds	r2, r3, #2
 80136e8:	61ba      	str	r2, [r7, #24]
 80136ea:	881b      	ldrh	r3, [r3, #0]
 80136ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80136f0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80136f4:	9300      	str	r3, [sp, #0]
 80136f6:	4623      	mov	r3, r4
 80136f8:	f7fe fecc 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(xs, ye  , xe  , ye  , *p++);
 80136fc:	69bb      	ldr	r3, [r7, #24]
 80136fe:	1c9a      	adds	r2, r3, #2
 8013700:	61ba      	str	r2, [r7, #24]
 8013702:	881b      	ldrh	r3, [r3, #0]
 8013704:	f9b7 4000 	ldrsh.w	r4, [r7]
 8013708:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801370c:	f9b7 1000 	ldrsh.w	r1, [r7]
 8013710:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8013714:	9300      	str	r3, [sp, #0]
 8013716:	4623      	mov	r3, r4
 8013718:	f7fe febc 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(xe, ys  , xe  , ye-1, *p++);
 801371c:	883b      	ldrh	r3, [r7, #0]
 801371e:	3b01      	subs	r3, #1
 8013720:	b29b      	uxth	r3, r3
 8013722:	b21c      	sxth	r4, r3
 8013724:	69bb      	ldr	r3, [r7, #24]
 8013726:	1c9a      	adds	r2, r3, #2
 8013728:	61ba      	str	r2, [r7, #24]
 801372a:	881b      	ldrh	r3, [r3, #0]
 801372c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013730:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8013734:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
 8013738:	9300      	str	r3, [sp, #0]
 801373a:	4623      	mov	r3, r4
 801373c:	f7fe feaa 	bl	8012494 <UG_DrawLine>
   // Frame 1
   UG_DrawLine(xs+1, ys+1, xe-2, ys+1, *p++);
 8013740:	88fb      	ldrh	r3, [r7, #6]
 8013742:	3301      	adds	r3, #1
 8013744:	b29b      	uxth	r3, r3
 8013746:	b218      	sxth	r0, r3
 8013748:	88bb      	ldrh	r3, [r7, #4]
 801374a:	3301      	adds	r3, #1
 801374c:	b29b      	uxth	r3, r3
 801374e:	b219      	sxth	r1, r3
 8013750:	887b      	ldrh	r3, [r7, #2]
 8013752:	3b02      	subs	r3, #2
 8013754:	b29b      	uxth	r3, r3
 8013756:	b21c      	sxth	r4, r3
 8013758:	88bb      	ldrh	r3, [r7, #4]
 801375a:	3301      	adds	r3, #1
 801375c:	b29b      	uxth	r3, r3
 801375e:	b21d      	sxth	r5, r3
 8013760:	69bb      	ldr	r3, [r7, #24]
 8013762:	1c9a      	adds	r2, r3, #2
 8013764:	61ba      	str	r2, [r7, #24]
 8013766:	881b      	ldrh	r3, [r3, #0]
 8013768:	9300      	str	r3, [sp, #0]
 801376a:	462b      	mov	r3, r5
 801376c:	4622      	mov	r2, r4
 801376e:	f7fe fe91 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(xs+1, ys+2, xs+1, ye-2, *p++);
 8013772:	88fb      	ldrh	r3, [r7, #6]
 8013774:	3301      	adds	r3, #1
 8013776:	b29b      	uxth	r3, r3
 8013778:	b218      	sxth	r0, r3
 801377a:	88bb      	ldrh	r3, [r7, #4]
 801377c:	3302      	adds	r3, #2
 801377e:	b29b      	uxth	r3, r3
 8013780:	b219      	sxth	r1, r3
 8013782:	88fb      	ldrh	r3, [r7, #6]
 8013784:	3301      	adds	r3, #1
 8013786:	b29b      	uxth	r3, r3
 8013788:	b21c      	sxth	r4, r3
 801378a:	883b      	ldrh	r3, [r7, #0]
 801378c:	3b02      	subs	r3, #2
 801378e:	b29b      	uxth	r3, r3
 8013790:	b21d      	sxth	r5, r3
 8013792:	69bb      	ldr	r3, [r7, #24]
 8013794:	1c9a      	adds	r2, r3, #2
 8013796:	61ba      	str	r2, [r7, #24]
 8013798:	881b      	ldrh	r3, [r3, #0]
 801379a:	9300      	str	r3, [sp, #0]
 801379c:	462b      	mov	r3, r5
 801379e:	4622      	mov	r2, r4
 80137a0:	f7fe fe78 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(xs+1, ye-1, xe-1, ye-1, *p++);
 80137a4:	88fb      	ldrh	r3, [r7, #6]
 80137a6:	3301      	adds	r3, #1
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	b218      	sxth	r0, r3
 80137ac:	883b      	ldrh	r3, [r7, #0]
 80137ae:	3b01      	subs	r3, #1
 80137b0:	b29b      	uxth	r3, r3
 80137b2:	b219      	sxth	r1, r3
 80137b4:	887b      	ldrh	r3, [r7, #2]
 80137b6:	3b01      	subs	r3, #1
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	b21c      	sxth	r4, r3
 80137bc:	883b      	ldrh	r3, [r7, #0]
 80137be:	3b01      	subs	r3, #1
 80137c0:	b29b      	uxth	r3, r3
 80137c2:	b21d      	sxth	r5, r3
 80137c4:	69bb      	ldr	r3, [r7, #24]
 80137c6:	1c9a      	adds	r2, r3, #2
 80137c8:	61ba      	str	r2, [r7, #24]
 80137ca:	881b      	ldrh	r3, [r3, #0]
 80137cc:	9300      	str	r3, [sp, #0]
 80137ce:	462b      	mov	r3, r5
 80137d0:	4622      	mov	r2, r4
 80137d2:	f7fe fe5f 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(xe-1, ys+1, xe-1, ye-2, *p++);
 80137d6:	887b      	ldrh	r3, [r7, #2]
 80137d8:	3b01      	subs	r3, #1
 80137da:	b29b      	uxth	r3, r3
 80137dc:	b218      	sxth	r0, r3
 80137de:	88bb      	ldrh	r3, [r7, #4]
 80137e0:	3301      	adds	r3, #1
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	b219      	sxth	r1, r3
 80137e6:	887b      	ldrh	r3, [r7, #2]
 80137e8:	3b01      	subs	r3, #1
 80137ea:	b29b      	uxth	r3, r3
 80137ec:	b21c      	sxth	r4, r3
 80137ee:	883b      	ldrh	r3, [r7, #0]
 80137f0:	3b02      	subs	r3, #2
 80137f2:	b29b      	uxth	r3, r3
 80137f4:	b21d      	sxth	r5, r3
 80137f6:	69bb      	ldr	r3, [r7, #24]
 80137f8:	1c9a      	adds	r2, r3, #2
 80137fa:	61ba      	str	r2, [r7, #24]
 80137fc:	881b      	ldrh	r3, [r3, #0]
 80137fe:	9300      	str	r3, [sp, #0]
 8013800:	462b      	mov	r3, r5
 8013802:	4622      	mov	r2, r4
 8013804:	f7fe fe46 	bl	8012494 <UG_DrawLine>
   // Frame 2
   UG_DrawLine(xs+2, ys+2, xe-3, ys+2, *p++);
 8013808:	88fb      	ldrh	r3, [r7, #6]
 801380a:	3302      	adds	r3, #2
 801380c:	b29b      	uxth	r3, r3
 801380e:	b218      	sxth	r0, r3
 8013810:	88bb      	ldrh	r3, [r7, #4]
 8013812:	3302      	adds	r3, #2
 8013814:	b29b      	uxth	r3, r3
 8013816:	b219      	sxth	r1, r3
 8013818:	887b      	ldrh	r3, [r7, #2]
 801381a:	3b03      	subs	r3, #3
 801381c:	b29b      	uxth	r3, r3
 801381e:	b21c      	sxth	r4, r3
 8013820:	88bb      	ldrh	r3, [r7, #4]
 8013822:	3302      	adds	r3, #2
 8013824:	b29b      	uxth	r3, r3
 8013826:	b21d      	sxth	r5, r3
 8013828:	69bb      	ldr	r3, [r7, #24]
 801382a:	1c9a      	adds	r2, r3, #2
 801382c:	61ba      	str	r2, [r7, #24]
 801382e:	881b      	ldrh	r3, [r3, #0]
 8013830:	9300      	str	r3, [sp, #0]
 8013832:	462b      	mov	r3, r5
 8013834:	4622      	mov	r2, r4
 8013836:	f7fe fe2d 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(xs+2, ys+3, xs+2, ye-3, *p++);
 801383a:	88fb      	ldrh	r3, [r7, #6]
 801383c:	3302      	adds	r3, #2
 801383e:	b29b      	uxth	r3, r3
 8013840:	b218      	sxth	r0, r3
 8013842:	88bb      	ldrh	r3, [r7, #4]
 8013844:	3303      	adds	r3, #3
 8013846:	b29b      	uxth	r3, r3
 8013848:	b219      	sxth	r1, r3
 801384a:	88fb      	ldrh	r3, [r7, #6]
 801384c:	3302      	adds	r3, #2
 801384e:	b29b      	uxth	r3, r3
 8013850:	b21c      	sxth	r4, r3
 8013852:	883b      	ldrh	r3, [r7, #0]
 8013854:	3b03      	subs	r3, #3
 8013856:	b29b      	uxth	r3, r3
 8013858:	b21d      	sxth	r5, r3
 801385a:	69bb      	ldr	r3, [r7, #24]
 801385c:	1c9a      	adds	r2, r3, #2
 801385e:	61ba      	str	r2, [r7, #24]
 8013860:	881b      	ldrh	r3, [r3, #0]
 8013862:	9300      	str	r3, [sp, #0]
 8013864:	462b      	mov	r3, r5
 8013866:	4622      	mov	r2, r4
 8013868:	f7fe fe14 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(xs+2, ye-2, xe-2, ye-2, *p++);
 801386c:	88fb      	ldrh	r3, [r7, #6]
 801386e:	3302      	adds	r3, #2
 8013870:	b29b      	uxth	r3, r3
 8013872:	b218      	sxth	r0, r3
 8013874:	883b      	ldrh	r3, [r7, #0]
 8013876:	3b02      	subs	r3, #2
 8013878:	b29b      	uxth	r3, r3
 801387a:	b219      	sxth	r1, r3
 801387c:	887b      	ldrh	r3, [r7, #2]
 801387e:	3b02      	subs	r3, #2
 8013880:	b29b      	uxth	r3, r3
 8013882:	b21c      	sxth	r4, r3
 8013884:	883b      	ldrh	r3, [r7, #0]
 8013886:	3b02      	subs	r3, #2
 8013888:	b29b      	uxth	r3, r3
 801388a:	b21d      	sxth	r5, r3
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	1c9a      	adds	r2, r3, #2
 8013890:	61ba      	str	r2, [r7, #24]
 8013892:	881b      	ldrh	r3, [r3, #0]
 8013894:	9300      	str	r3, [sp, #0]
 8013896:	462b      	mov	r3, r5
 8013898:	4622      	mov	r2, r4
 801389a:	f7fe fdfb 	bl	8012494 <UG_DrawLine>
   UG_DrawLine(xe-2, ys+2, xe-2, ye-3, *p);
 801389e:	887b      	ldrh	r3, [r7, #2]
 80138a0:	3b02      	subs	r3, #2
 80138a2:	b29b      	uxth	r3, r3
 80138a4:	b218      	sxth	r0, r3
 80138a6:	88bb      	ldrh	r3, [r7, #4]
 80138a8:	3302      	adds	r3, #2
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	b219      	sxth	r1, r3
 80138ae:	887b      	ldrh	r3, [r7, #2]
 80138b0:	3b02      	subs	r3, #2
 80138b2:	b29b      	uxth	r3, r3
 80138b4:	b21a      	sxth	r2, r3
 80138b6:	883b      	ldrh	r3, [r7, #0]
 80138b8:	3b03      	subs	r3, #3
 80138ba:	b29b      	uxth	r3, r3
 80138bc:	b21c      	sxth	r4, r3
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	881b      	ldrh	r3, [r3, #0]
 80138c2:	9300      	str	r3, [sp, #0]
 80138c4:	4623      	mov	r3, r4
 80138c6:	f7fe fde5 	bl	8012494 <UG_DrawLine>
}
 80138ca:	bf00      	nop
 80138cc:	3708      	adds	r7, #8
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080138d4 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80138d4:	b480      	push	{r7}
 80138d6:	b083      	sub	sp, #12
 80138d8:	af00      	add	r7, sp, #0
 80138da:	4603      	mov	r3, r0
 80138dc:	6039      	str	r1, [r7, #0]
 80138de:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80138e0:	79fb      	ldrb	r3, [r7, #7]
 80138e2:	2b03      	cmp	r3, #3
 80138e4:	d810      	bhi.n	8013908 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80138e6:	4b0b      	ldr	r3, [pc, #44]	; (8013914 <UG_DriverRegister+0x40>)
 80138e8:	681a      	ldr	r2, [r3, #0]
 80138ea:	79fb      	ldrb	r3, [r7, #7]
 80138ec:	330a      	adds	r3, #10
 80138ee:	00db      	lsls	r3, r3, #3
 80138f0:	4413      	add	r3, r2
 80138f2:	683a      	ldr	r2, [r7, #0]
 80138f4:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80138f6:	4b07      	ldr	r3, [pc, #28]	; (8013914 <UG_DriverRegister+0x40>)
 80138f8:	681a      	ldr	r2, [r3, #0]
 80138fa:	79fb      	ldrb	r3, [r7, #7]
 80138fc:	330a      	adds	r3, #10
 80138fe:	00db      	lsls	r3, r3, #3
 8013900:	4413      	add	r3, r2
 8013902:	2203      	movs	r2, #3
 8013904:	721a      	strb	r2, [r3, #8]
 8013906:	e000      	b.n	801390a <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8013908:	bf00      	nop
}
 801390a:	370c      	adds	r7, #12
 801390c:	46bd      	mov	sp, r7
 801390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013912:	4770      	bx	lr
 8013914:	20001cd8 	.word	0x20001cd8

08013918 <UG_Update>:

/* -------------------------------------------------------------------------------- */
/* -- MISCELLANEOUS FUNCTIONS                                                    -- */
/* -------------------------------------------------------------------------------- */
void UG_Update( void )
{
 8013918:	b580      	push	{r7, lr}
 801391a:	b082      	sub	sp, #8
 801391c:	af00      	add	r7, sp, #0
   UG_WINDOW* wnd;

   /* Is somebody waiting for this update? */
   if ( gui->state & UG_STATUS_WAIT_FOR_UPDATE ) gui->state &= ~UG_STATUS_WAIT_FOR_UPDATE;
 801391e:	4b5e      	ldr	r3, [pc, #376]	; (8013a98 <UG_Update+0x180>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8013926:	f003 0301 	and.w	r3, r3, #1
 801392a:	2b00      	cmp	r3, #0
 801392c:	d00a      	beq.n	8013944 <UG_Update+0x2c>
 801392e:	4b5a      	ldr	r3, [pc, #360]	; (8013a98 <UG_Update+0x180>)
 8013930:	681b      	ldr	r3, [r3, #0]
 8013932:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 8013936:	4b58      	ldr	r3, [pc, #352]	; (8013a98 <UG_Update+0x180>)
 8013938:	681b      	ldr	r3, [r3, #0]
 801393a:	f022 0201 	bic.w	r2, r2, #1
 801393e:	b2d2      	uxtb	r2, r2
 8013940:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

   /* Keep track of the windows */
   if ( gui->next_window != gui->active_window )
 8013944:	4b54      	ldr	r3, [pc, #336]	; (8013a98 <UG_Update+0x180>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	68da      	ldr	r2, [r3, #12]
 801394a:	4b53      	ldr	r3, [pc, #332]	; (8013a98 <UG_Update+0x180>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	691b      	ldr	r3, [r3, #16]
 8013950:	429a      	cmp	r2, r3
 8013952:	d071      	beq.n	8013a38 <UG_Update+0x120>
   {
      if ( gui->next_window != NULL )
 8013954:	4b50      	ldr	r3, [pc, #320]	; (8013a98 <UG_Update+0x180>)
 8013956:	681b      	ldr	r3, [r3, #0]
 8013958:	68db      	ldr	r3, [r3, #12]
 801395a:	2b00      	cmp	r3, #0
 801395c:	d06c      	beq.n	8013a38 <UG_Update+0x120>
      {
         gui->last_window = gui->active_window;
 801395e:	4b4e      	ldr	r3, [pc, #312]	; (8013a98 <UG_Update+0x180>)
 8013960:	681a      	ldr	r2, [r3, #0]
 8013962:	4b4d      	ldr	r3, [pc, #308]	; (8013a98 <UG_Update+0x180>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	6912      	ldr	r2, [r2, #16]
 8013968:	615a      	str	r2, [r3, #20]
         gui->active_window = gui->next_window;
 801396a:	4b4b      	ldr	r3, [pc, #300]	; (8013a98 <UG_Update+0x180>)
 801396c:	681a      	ldr	r2, [r3, #0]
 801396e:	4b4a      	ldr	r3, [pc, #296]	; (8013a98 <UG_Update+0x180>)
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	68d2      	ldr	r2, [r2, #12]
 8013974:	611a      	str	r2, [r3, #16]

         /* Do we need to draw an inactive title? */
         if ((gui->last_window != NULL) && (gui->last_window->style & WND_STYLE_SHOW_TITLE) && (gui->last_window->state & WND_STATE_VISIBLE) )
 8013976:	4b48      	ldr	r3, [pc, #288]	; (8013a98 <UG_Update+0x180>)
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	695b      	ldr	r3, [r3, #20]
 801397c:	2b00      	cmp	r3, #0
 801397e:	d045      	beq.n	8013a0c <UG_Update+0xf4>
 8013980:	4b45      	ldr	r3, [pc, #276]	; (8013a98 <UG_Update+0x180>)
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	695b      	ldr	r3, [r3, #20]
 8013986:	7d9b      	ldrb	r3, [r3, #22]
 8013988:	f003 0302 	and.w	r3, r3, #2
 801398c:	2b00      	cmp	r3, #0
 801398e:	d03d      	beq.n	8013a0c <UG_Update+0xf4>
 8013990:	4b41      	ldr	r3, [pc, #260]	; (8013a98 <UG_Update+0x180>)
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	695b      	ldr	r3, [r3, #20]
 8013996:	7a1b      	ldrb	r3, [r3, #8]
 8013998:	f003 0308 	and.w	r3, r3, #8
 801399c:	2b00      	cmp	r3, #0
 801399e:	d035      	beq.n	8013a0c <UG_Update+0xf4>
         {
            /* Do both windows differ in size */
            if ( (gui->last_window->xs != gui->active_window->xs) || (gui->last_window->xe != gui->active_window->xe) || (gui->last_window->ys != gui->active_window->ys) || (gui->last_window->ye != gui->active_window->ye) )
 80139a0:	4b3d      	ldr	r3, [pc, #244]	; (8013a98 <UG_Update+0x180>)
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	695b      	ldr	r3, [r3, #20]
 80139a6:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80139aa:	4b3b      	ldr	r3, [pc, #236]	; (8013a98 <UG_Update+0x180>)
 80139ac:	681b      	ldr	r3, [r3, #0]
 80139ae:	691b      	ldr	r3, [r3, #16]
 80139b0:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80139b4:	429a      	cmp	r2, r3
 80139b6:	d123      	bne.n	8013a00 <UG_Update+0xe8>
 80139b8:	4b37      	ldr	r3, [pc, #220]	; (8013a98 <UG_Update+0x180>)
 80139ba:	681b      	ldr	r3, [r3, #0]
 80139bc:	695b      	ldr	r3, [r3, #20]
 80139be:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 80139c2:	4b35      	ldr	r3, [pc, #212]	; (8013a98 <UG_Update+0x180>)
 80139c4:	681b      	ldr	r3, [r3, #0]
 80139c6:	691b      	ldr	r3, [r3, #16]
 80139c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d117      	bne.n	8013a00 <UG_Update+0xe8>
 80139d0:	4b31      	ldr	r3, [pc, #196]	; (8013a98 <UG_Update+0x180>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	695b      	ldr	r3, [r3, #20]
 80139d6:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 80139da:	4b2f      	ldr	r3, [pc, #188]	; (8013a98 <UG_Update+0x180>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	691b      	ldr	r3, [r3, #16]
 80139e0:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80139e4:	429a      	cmp	r2, r3
 80139e6:	d10b      	bne.n	8013a00 <UG_Update+0xe8>
 80139e8:	4b2b      	ldr	r3, [pc, #172]	; (8013a98 <UG_Update+0x180>)
 80139ea:	681b      	ldr	r3, [r3, #0]
 80139ec:	695b      	ldr	r3, [r3, #20]
 80139ee:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 80139f2:	4b29      	ldr	r3, [pc, #164]	; (8013a98 <UG_Update+0x180>)
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	691b      	ldr	r3, [r3, #16]
 80139f8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d005      	beq.n	8013a0c <UG_Update+0xf4>
            {
               /* Redraw title of the last window */
               _UG_WindowDrawTitle( gui->last_window );
 8013a00:	4b25      	ldr	r3, [pc, #148]	; (8013a98 <UG_Update+0x180>)
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	695b      	ldr	r3, [r3, #20]
 8013a06:	4618      	mov	r0, r3
 8013a08:	f000 f848 	bl	8013a9c <_UG_WindowDrawTitle>
            }
         }
         gui->active_window->state &= ~WND_STATE_REDRAW_TITLE;
 8013a0c:	4b22      	ldr	r3, [pc, #136]	; (8013a98 <UG_Update+0x180>)
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	691b      	ldr	r3, [r3, #16]
 8013a12:	7a1a      	ldrb	r2, [r3, #8]
 8013a14:	4b20      	ldr	r3, [pc, #128]	; (8013a98 <UG_Update+0x180>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	691b      	ldr	r3, [r3, #16]
 8013a1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8013a1e:	b2d2      	uxtb	r2, r2
 8013a20:	721a      	strb	r2, [r3, #8]
         gui->active_window->state |= WND_STATE_UPDATE | WND_STATE_VISIBLE;
 8013a22:	4b1d      	ldr	r3, [pc, #116]	; (8013a98 <UG_Update+0x180>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	691b      	ldr	r3, [r3, #16]
 8013a28:	7a1a      	ldrb	r2, [r3, #8]
 8013a2a:	4b1b      	ldr	r3, [pc, #108]	; (8013a98 <UG_Update+0x180>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	691b      	ldr	r3, [r3, #16]
 8013a30:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8013a34:	b2d2      	uxtb	r2, r2
 8013a36:	721a      	strb	r2, [r3, #8]
      }
   }

   /* Is there an active window */
   if ( gui->active_window != NULL )
 8013a38:	4b17      	ldr	r3, [pc, #92]	; (8013a98 <UG_Update+0x180>)
 8013a3a:	681b      	ldr	r3, [r3, #0]
 8013a3c:	691b      	ldr	r3, [r3, #16]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d01b      	beq.n	8013a7a <UG_Update+0x162>
   {
      wnd = gui->active_window;
 8013a42:	4b15      	ldr	r3, [pc, #84]	; (8013a98 <UG_Update+0x180>)
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	691b      	ldr	r3, [r3, #16]
 8013a48:	607b      	str	r3, [r7, #4]

      /* Does the window need to be updated? */
      if ( wnd->state & WND_STATE_UPDATE )
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	7a1b      	ldrb	r3, [r3, #8]
 8013a4e:	f003 0320 	and.w	r3, r3, #32
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d002      	beq.n	8013a5c <UG_Update+0x144>
      {
         /* Do it! */
         _UG_WindowUpdate( wnd );
 8013a56:	6878      	ldr	r0, [r7, #4]
 8013a58:	f000 f8ca 	bl	8013bf0 <_UG_WindowUpdate>
      }

      /* Is the window visible? */
      if ( wnd->state & WND_STATE_VISIBLE )
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	7a1b      	ldrb	r3, [r3, #8]
 8013a60:	f003 0308 	and.w	r3, r3, #8
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d008      	beq.n	8013a7a <UG_Update+0x162>
      {
         #ifdef UGUI_USE_TOUCH
         _UG_ProcessTouchData( wnd );
 8013a68:	6878      	ldr	r0, [r7, #4]
 8013a6a:	f7ff fb81 	bl	8013170 <_UG_ProcessTouchData>
         #endif
         _UG_UpdateObjects( wnd );
 8013a6e:	6878      	ldr	r0, [r7, #4]
 8013a70:	f7ff fc34 	bl	80132dc <_UG_UpdateObjects>
         _UG_HandleEvents( wnd );
 8013a74:	6878      	ldr	r0, [r7, #4]
 8013a76:	f7ff fc7b 	bl	8013370 <_UG_HandleEvents>
      }
   }
   if(gui->device->flush){
 8013a7a:	4b07      	ldr	r3, [pc, #28]	; (8013a98 <UG_Update+0x180>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	689b      	ldr	r3, [r3, #8]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d004      	beq.n	8013a90 <UG_Update+0x178>
     gui->device->flush();
 8013a86:	4b04      	ldr	r3, [pc, #16]	; (8013a98 <UG_Update+0x180>)
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	689b      	ldr	r3, [r3, #8]
 8013a8e:	4798      	blx	r3
   }
}
 8013a90:	bf00      	nop
 8013a92:	3708      	adds	r7, #8
 8013a94:	46bd      	mov	sp, r7
 8013a96:	bd80      	pop	{r7, pc}
 8013a98:	20001cd8 	.word	0x20001cd8

08013a9c <_UG_WindowDrawTitle>:
   }
   return h;
}

static UG_RESULT _UG_WindowDrawTitle( UG_WINDOW* wnd )
{
 8013a9c:	b590      	push	{r4, r7, lr}
 8013a9e:	b08f      	sub	sp, #60	; 0x3c
 8013aa0:	af02      	add	r7, sp, #8
 8013aa2:	6078      	str	r0, [r7, #4]
   UG_TEXT txt;
   UG_S16 xs,ys,xe,ye;

   if ( (wnd != NULL) && (wnd->state & WND_STATE_VALID) )
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	f000 809a 	beq.w	8013be0 <_UG_WindowDrawTitle+0x144>
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	7a1b      	ldrb	r3, [r3, #8]
 8013ab0:	f003 0302 	and.w	r3, r3, #2
 8013ab4:	2b00      	cmp	r3, #0
 8013ab6:	f000 8093 	beq.w	8013be0 <_UG_WindowDrawTitle+0x144>
   {
      xs = wnd->xs;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	89db      	ldrh	r3, [r3, #14]
 8013abe:	85fb      	strh	r3, [r7, #46]	; 0x2e
      ys = wnd->ys;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	8a1b      	ldrh	r3, [r3, #16]
 8013ac4:	85bb      	strh	r3, [r7, #44]	; 0x2c
      xe = wnd->xe;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	8a5b      	ldrh	r3, [r3, #18]
 8013aca:	857b      	strh	r3, [r7, #42]	; 0x2a
      ye = wnd->ye;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	8a9b      	ldrh	r3, [r3, #20]
 8013ad0:	853b      	strh	r3, [r7, #40]	; 0x28

      /* 3D style? */
      if ( wnd->style & WND_STYLE_3D )
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	7d9b      	ldrb	r3, [r3, #22]
 8013ad6:	f003 0301 	and.w	r3, r3, #1
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d00f      	beq.n	8013afe <_UG_WindowDrawTitle+0x62>
      {
         xs+=3;
 8013ade:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013ae0:	3303      	adds	r3, #3
 8013ae2:	b29b      	uxth	r3, r3
 8013ae4:	85fb      	strh	r3, [r7, #46]	; 0x2e
         ys+=3;
 8013ae6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013ae8:	3303      	adds	r3, #3
 8013aea:	b29b      	uxth	r3, r3
 8013aec:	85bb      	strh	r3, [r7, #44]	; 0x2c
         xe-=3;
 8013aee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013af0:	3b03      	subs	r3, #3
 8013af2:	b29b      	uxth	r3, r3
 8013af4:	857b      	strh	r3, [r7, #42]	; 0x2a
         ye-=3;
 8013af6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8013af8:	3b03      	subs	r3, #3
 8013afa:	b29b      	uxth	r3, r3
 8013afc:	853b      	strh	r3, [r7, #40]	; 0x28
      }

      /* Is the window active or inactive? */
      if ( wnd == gui->active_window )
 8013afe:	4b3b      	ldr	r3, [pc, #236]	; (8013bec <_UG_WindowDrawTitle+0x150>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	691b      	ldr	r3, [r3, #16]
 8013b04:	687a      	ldr	r2, [r7, #4]
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d106      	bne.n	8013b18 <_UG_WindowDrawTitle+0x7c>
      {
         txt.bc = wnd->title.bc;
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013b0e:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.fc;
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013b14:	83bb      	strh	r3, [r7, #28]
 8013b16:	e005      	b.n	8013b24 <_UG_WindowDrawTitle+0x88>
      }
      else
      {
         txt.bc = wnd->title.ibc;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013b1c:	83fb      	strh	r3, [r7, #30]
         txt.fc = wnd->title.ifc;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013b22:	83bb      	strh	r3, [r7, #28]
      }

      /* Draw title */
      UG_FillFrame(xs,ys,xe,ys+wnd->title.height-1,txt.bc);
 8013b24:	687b      	ldr	r3, [r7, #4]
 8013b26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013b2a:	b29a      	uxth	r2, r3
 8013b2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b2e:	4413      	add	r3, r2
 8013b30:	b29b      	uxth	r3, r3
 8013b32:	3b01      	subs	r3, #1
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	b21c      	sxth	r4, r3
 8013b38:	8bfb      	ldrh	r3, [r7, #30]
 8013b3a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013b3e:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	; 0x2c
 8013b42:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013b46:	9300      	str	r3, [sp, #0]
 8013b48:	4623      	mov	r3, r4
 8013b4a:	f7fe fb03 	bl	8012154 <UG_FillFrame>

      /* Draw title text */
      txt.str = wnd->title.str;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	699b      	ldr	r3, [r3, #24]
 8013b52:	60fb      	str	r3, [r7, #12]
      txt.font = wnd->title.font;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	69db      	ldr	r3, [r3, #28]
 8013b58:	613b      	str	r3, [r7, #16]
      txt.a.xs = xs+3;
 8013b5a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013b5c:	3303      	adds	r3, #3
 8013b5e:	b29b      	uxth	r3, r3
 8013b60:	b21b      	sxth	r3, r3
 8013b62:	82bb      	strh	r3, [r7, #20]
      txt.a.ys = ys;
 8013b64:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b66:	82fb      	strh	r3, [r7, #22]
      txt.a.xe = xe;
 8013b68:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b6a:	833b      	strh	r3, [r7, #24]
      txt.a.ye = ys+wnd->title.height-1;
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013b72:	b29a      	uxth	r2, r3
 8013b74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013b76:	4413      	add	r3, r2
 8013b78:	b29b      	uxth	r3, r3
 8013b7a:	3b01      	subs	r3, #1
 8013b7c:	b29b      	uxth	r3, r3
 8013b7e:	b21b      	sxth	r3, r3
 8013b80:	837b      	strh	r3, [r7, #26]
      txt.align = wnd->title.align;
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013b88:	f887 3020 	strb.w	r3, [r7, #32]
      txt.h_space = wnd->title.h_space;
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8013b92:	b21b      	sxth	r3, r3
 8013b94:	847b      	strh	r3, [r7, #34]	; 0x22
      txt.v_space = wnd->title.v_space;
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 8013b9c:	b21b      	sxth	r3, r3
 8013b9e:	84bb      	strh	r3, [r7, #36]	; 0x24
      _UG_PutText( &txt );
 8013ba0:	f107 030c 	add.w	r3, r7, #12
 8013ba4:	4618      	mov	r0, r3
 8013ba6:	f7ff fc2f 	bl	8013408 <_UG_PutText>

      /* Draw line */
      UG_DrawLine(xs,ys+wnd->title.height,xe,ys+wnd->title.height,pal_window[11]);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013bb0:	b29a      	uxth	r2, r3
 8013bb2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013bb4:	4413      	add	r3, r2
 8013bb6:	b29b      	uxth	r3, r3
 8013bb8:	b219      	sxth	r1, r3
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013bc0:	b29a      	uxth	r2, r3
 8013bc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013bc4:	4413      	add	r3, r2
 8013bc6:	b29b      	uxth	r3, r3
 8013bc8:	b21b      	sxth	r3, r3
 8013bca:	f649 5413 	movw	r4, #40211	; 0x9d13
 8013bce:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8013bd2:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	; 0x2e
 8013bd6:	9400      	str	r4, [sp, #0]
 8013bd8:	f7fe fc5c 	bl	8012494 <UG_DrawLine>
      return UG_RESULT_OK;
 8013bdc:	2300      	movs	r3, #0
 8013bde:	e001      	b.n	8013be4 <_UG_WindowDrawTitle+0x148>
   }
   return UG_RESULT_FAIL;
 8013be0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3734      	adds	r7, #52	; 0x34
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd90      	pop	{r4, r7, pc}
 8013bec:	20001cd8 	.word	0x20001cd8

08013bf0 <_UG_WindowUpdate>:

static void _UG_WindowUpdate( UG_WINDOW* wnd )
{
 8013bf0:	b590      	push	{r4, r7, lr}
 8013bf2:	b089      	sub	sp, #36	; 0x24
 8013bf4:	af02      	add	r7, sp, #8
 8013bf6:	6078      	str	r0, [r7, #4]
   UG_U16 i,objcnt;
   UG_OBJECT* obj;
   UG_S16 xs,ys,xe,ye;

   xs = wnd->xs;
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	89db      	ldrh	r3, [r3, #14]
 8013bfc:	82bb      	strh	r3, [r7, #20]
   ys = wnd->ys;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	8a1b      	ldrh	r3, [r3, #16]
 8013c02:	827b      	strh	r3, [r7, #18]
   xe = wnd->xe;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	8a5b      	ldrh	r3, [r3, #18]
 8013c08:	823b      	strh	r3, [r7, #16]
   ye = wnd->ye;
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	8a9b      	ldrh	r3, [r3, #20]
 8013c0e:	81fb      	strh	r3, [r7, #14]

   wnd->state &= ~WND_STATE_UPDATE;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	7a1b      	ldrb	r3, [r3, #8]
 8013c14:	f023 0320 	bic.w	r3, r3, #32
 8013c18:	b2da      	uxtb	r2, r3
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	721a      	strb	r2, [r3, #8]
   /* Is the window visible? */
   if ( wnd->state & WND_STATE_VISIBLE )
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	7a1b      	ldrb	r3, [r3, #8]
 8013c22:	f003 0308 	and.w	r3, r3, #8
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	f000 8084 	beq.w	8013d34 <_UG_WindowUpdate+0x144>
   {
      /* 3D style? */
      if ( (wnd->style & WND_STYLE_3D) && !(wnd->state & WND_STATE_REDRAW_TITLE) )
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	7d9b      	ldrb	r3, [r3, #22]
 8013c30:	f003 0301 	and.w	r3, r3, #1
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d021      	beq.n	8013c7c <_UG_WindowUpdate+0x8c>
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	7a1b      	ldrb	r3, [r3, #8]
 8013c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d11b      	bne.n	8013c7c <_UG_WindowUpdate+0x8c>
      {
         _UG_DrawObjectFrame(xs,ys,xe,ye,(UG_COLOR*)pal_window);
 8013c44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013c48:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013c4c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013c50:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8013c54:	4c43      	ldr	r4, [pc, #268]	; (8013d64 <_UG_WindowUpdate+0x174>)
 8013c56:	9400      	str	r4, [sp, #0]
 8013c58:	f7ff fd1a 	bl	8013690 <_UG_DrawObjectFrame>
         xs+=3;
 8013c5c:	8abb      	ldrh	r3, [r7, #20]
 8013c5e:	3303      	adds	r3, #3
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	82bb      	strh	r3, [r7, #20]
         ys+=3;
 8013c64:	8a7b      	ldrh	r3, [r7, #18]
 8013c66:	3303      	adds	r3, #3
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	827b      	strh	r3, [r7, #18]
         xe-=3;
 8013c6c:	8a3b      	ldrh	r3, [r7, #16]
 8013c6e:	3b03      	subs	r3, #3
 8013c70:	b29b      	uxth	r3, r3
 8013c72:	823b      	strh	r3, [r7, #16]
         ye-=3;
 8013c74:	89fb      	ldrh	r3, [r7, #14]
 8013c76:	3b03      	subs	r3, #3
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	81fb      	strh	r3, [r7, #14]
      }
      /* Show title bar? */
      if ( wnd->style & WND_STYLE_SHOW_TITLE )
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	7d9b      	ldrb	r3, [r3, #22]
 8013c80:	f003 0302 	and.w	r3, r3, #2
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d01a      	beq.n	8013cbe <_UG_WindowUpdate+0xce>
      {
         _UG_WindowDrawTitle( wnd );
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f7ff ff07 	bl	8013a9c <_UG_WindowDrawTitle>
         ys += wnd->title.height+1;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013c94:	b29a      	uxth	r2, r3
 8013c96:	8a7b      	ldrh	r3, [r7, #18]
 8013c98:	4413      	add	r3, r2
 8013c9a:	b29b      	uxth	r3, r3
 8013c9c:	3301      	adds	r3, #1
 8013c9e:	b29b      	uxth	r3, r3
 8013ca0:	827b      	strh	r3, [r7, #18]
         if ( wnd->state & WND_STATE_REDRAW_TITLE )
 8013ca2:	687b      	ldr	r3, [r7, #4]
 8013ca4:	7a1b      	ldrb	r3, [r3, #8]
 8013ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d007      	beq.n	8013cbe <_UG_WindowUpdate+0xce>
         {
            wnd->state &= ~WND_STATE_REDRAW_TITLE;
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	7a1b      	ldrb	r3, [r3, #8]
 8013cb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013cb6:	b2da      	uxtb	r2, r3
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	721a      	strb	r2, [r3, #8]
            return;
 8013cbc:	e04e      	b.n	8013d5c <_UG_WindowUpdate+0x16c>
         }
      }
      /* Draw window area? */
      UG_FillFrame(xs,ys,xe,ye,wnd->bc);
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	899b      	ldrh	r3, [r3, #12]
 8013cc2:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 8013cc6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8013cca:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8013cce:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8013cd2:	9300      	str	r3, [sp, #0]
 8013cd4:	4623      	mov	r3, r4
 8013cd6:	f7fe fa3d 	bl	8012154 <UG_FillFrame>

      /* Force each object to be updated! */
      objcnt = wnd->objcnt;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	781b      	ldrb	r3, [r3, #0]
 8013cde:	81bb      	strh	r3, [r7, #12]
      for(i=0; i<objcnt; i++)
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	82fb      	strh	r3, [r7, #22]
 8013ce4:	e021      	b.n	8013d2a <_UG_WindowUpdate+0x13a>
      {
         obj = (UG_OBJECT*)&wnd->objlst[i];
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	685a      	ldr	r2, [r3, #4]
 8013cea:	8afb      	ldrh	r3, [r7, #22]
 8013cec:	015b      	lsls	r3, r3, #5
 8013cee:	4413      	add	r3, r2
 8013cf0:	60bb      	str	r3, [r7, #8]
         if ( !(obj->state & OBJ_STATE_FREE) && (obj->state & OBJ_STATE_VALID) && (obj->state & OBJ_STATE_VISIBLE) ) obj->state |= (OBJ_STATE_UPDATE | OBJ_STATE_REDRAW);
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	781b      	ldrb	r3, [r3, #0]
 8013cf6:	f003 0301 	and.w	r3, r3, #1
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d112      	bne.n	8013d24 <_UG_WindowUpdate+0x134>
 8013cfe:	68bb      	ldr	r3, [r7, #8]
 8013d00:	781b      	ldrb	r3, [r3, #0]
 8013d02:	f003 0302 	and.w	r3, r3, #2
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d00c      	beq.n	8013d24 <_UG_WindowUpdate+0x134>
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	781b      	ldrb	r3, [r3, #0]
 8013d0e:	f003 0308 	and.w	r3, r3, #8
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d006      	beq.n	8013d24 <_UG_WindowUpdate+0x134>
 8013d16:	68bb      	ldr	r3, [r7, #8]
 8013d18:	781b      	ldrb	r3, [r3, #0]
 8013d1a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8013d1e:	b2da      	uxtb	r2, r3
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	701a      	strb	r2, [r3, #0]
      for(i=0; i<objcnt; i++)
 8013d24:	8afb      	ldrh	r3, [r7, #22]
 8013d26:	3301      	adds	r3, #1
 8013d28:	82fb      	strh	r3, [r7, #22]
 8013d2a:	8afa      	ldrh	r2, [r7, #22]
 8013d2c:	89bb      	ldrh	r3, [r7, #12]
 8013d2e:	429a      	cmp	r2, r3
 8013d30:	d3d9      	bcc.n	8013ce6 <_UG_WindowUpdate+0xf6>
 8013d32:	e013      	b.n	8013d5c <_UG_WindowUpdate+0x16c>
      }
   }
   else
   {
      UG_FillFrame(wnd->xs,wnd->xs,wnd->xe,wnd->ye,gui->desktop_color);
 8013d34:	687b      	ldr	r3, [r7, #4]
 8013d36:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	f9b3 2012 	ldrsh.w	r2, [r3, #18]
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	f9b3 4014 	ldrsh.w	r4, [r3, #20]
 8013d4c:	4b06      	ldr	r3, [pc, #24]	; (8013d68 <_UG_WindowUpdate+0x178>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8013d54:	9300      	str	r3, [sp, #0]
 8013d56:	4623      	mov	r3, r4
 8013d58:	f7fe f9fc 	bl	8012154 <UG_FillFrame>
   }
}
 8013d5c:	371c      	adds	r7, #28
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	bd90      	pop	{r4, r7, pc}
 8013d62:	bf00      	nop
 8013d64:	0801b948 	.word	0x0801b948
 8013d68:	20001cd8 	.word	0x20001cd8

08013d6c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013d6c:	b580      	push	{r7, lr}
 8013d6e:	b084      	sub	sp, #16
 8013d70:	af00      	add	r7, sp, #0
 8013d72:	6078      	str	r0, [r7, #4]
 8013d74:	460b      	mov	r3, r1
 8013d76:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013d78:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8013d7c:	f002 f8fc 	bl	8015f78 <USBD_static_malloc>
 8013d80:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8013d82:	68fb      	ldr	r3, [r7, #12]
 8013d84:	2b00      	cmp	r3, #0
 8013d86:	d105      	bne.n	8013d94 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013d90:	2302      	movs	r3, #2
 8013d92:	e066      	b.n	8013e62 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	68fa      	ldr	r2, [r7, #12]
 8013d98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	7c1b      	ldrb	r3, [r3, #16]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d119      	bne.n	8013dd8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013da8:	2202      	movs	r2, #2
 8013daa:	2181      	movs	r1, #129	; 0x81
 8013dac:	6878      	ldr	r0, [r7, #4]
 8013dae:	f001 ff8a 	bl	8015cc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	2201      	movs	r2, #1
 8013db6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013db8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013dbc:	2202      	movs	r2, #2
 8013dbe:	2101      	movs	r1, #1
 8013dc0:	6878      	ldr	r0, [r7, #4]
 8013dc2:	f001 ff80 	bl	8015cc6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2201      	movs	r2, #1
 8013dca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	2210      	movs	r2, #16
 8013dd2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8013dd6:	e016      	b.n	8013e06 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013dd8:	2340      	movs	r3, #64	; 0x40
 8013dda:	2202      	movs	r2, #2
 8013ddc:	2181      	movs	r1, #129	; 0x81
 8013dde:	6878      	ldr	r0, [r7, #4]
 8013de0:	f001 ff71 	bl	8015cc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	2201      	movs	r2, #1
 8013de8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8013dea:	2340      	movs	r3, #64	; 0x40
 8013dec:	2202      	movs	r2, #2
 8013dee:	2101      	movs	r1, #1
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f001 ff68 	bl	8015cc6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	2201      	movs	r2, #1
 8013dfa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	2210      	movs	r2, #16
 8013e02:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013e06:	2308      	movs	r3, #8
 8013e08:	2203      	movs	r2, #3
 8013e0a:	2182      	movs	r1, #130	; 0x82
 8013e0c:	6878      	ldr	r0, [r7, #4]
 8013e0e:	f001 ff5a 	bl	8015cc6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	2201      	movs	r2, #1
 8013e16:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	2200      	movs	r2, #0
 8013e28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8013e2c:	68fb      	ldr	r3, [r7, #12]
 8013e2e:	2200      	movs	r2, #0
 8013e30:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	7c1b      	ldrb	r3, [r3, #16]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d109      	bne.n	8013e50 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013e3c:	68fb      	ldr	r3, [r7, #12]
 8013e3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e46:	2101      	movs	r1, #1
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	f002 f82b 	bl	8015ea4 <USBD_LL_PrepareReceive>
 8013e4e:	e007      	b.n	8013e60 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8013e50:	68fb      	ldr	r3, [r7, #12]
 8013e52:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8013e56:	2340      	movs	r3, #64	; 0x40
 8013e58:	2101      	movs	r1, #1
 8013e5a:	6878      	ldr	r0, [r7, #4]
 8013e5c:	f002 f822 	bl	8015ea4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8013e60:	2300      	movs	r3, #0
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	3710      	adds	r7, #16
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}

08013e6a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013e6a:	b580      	push	{r7, lr}
 8013e6c:	b082      	sub	sp, #8
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
 8013e72:	460b      	mov	r3, r1
 8013e74:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8013e76:	2181      	movs	r1, #129	; 0x81
 8013e78:	6878      	ldr	r0, [r7, #4]
 8013e7a:	f001 ff4a 	bl	8015d12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2200      	movs	r2, #0
 8013e82:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8013e84:	2101      	movs	r1, #1
 8013e86:	6878      	ldr	r0, [r7, #4]
 8013e88:	f001 ff43 	bl	8015d12 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	2200      	movs	r2, #0
 8013e90:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8013e94:	2182      	movs	r1, #130	; 0x82
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f001 ff3b 	bl	8015d12 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2200      	movs	r2, #0
 8013ea0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8013ea4:	687b      	ldr	r3, [r7, #4]
 8013ea6:	2200      	movs	r2, #0
 8013ea8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d00e      	beq.n	8013ed4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013ebc:	685b      	ldr	r3, [r3, #4]
 8013ebe:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ec6:	4618      	mov	r0, r3
 8013ec8:	f002 f864 	bl	8015f94 <USBD_static_free>
    pdev->pClassData = NULL;
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	2200      	movs	r2, #0
 8013ed0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013ed4:	2300      	movs	r3, #0
}
 8013ed6:	4618      	mov	r0, r3
 8013ed8:	3708      	adds	r7, #8
 8013eda:	46bd      	mov	sp, r7
 8013edc:	bd80      	pop	{r7, pc}
	...

08013ee0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8013ee0:	b580      	push	{r7, lr}
 8013ee2:	b086      	sub	sp, #24
 8013ee4:	af00      	add	r7, sp, #0
 8013ee6:	6078      	str	r0, [r7, #4]
 8013ee8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ef0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8013ef2:	2300      	movs	r3, #0
 8013ef4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8013efa:	2300      	movs	r3, #0
 8013efc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8013efe:	693b      	ldr	r3, [r7, #16]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d101      	bne.n	8013f08 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8013f04:	2303      	movs	r3, #3
 8013f06:	e0af      	b.n	8014068 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	781b      	ldrb	r3, [r3, #0]
 8013f0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d03f      	beq.n	8013f94 <USBD_CDC_Setup+0xb4>
 8013f14:	2b20      	cmp	r3, #32
 8013f16:	f040 809f 	bne.w	8014058 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	88db      	ldrh	r3, [r3, #6]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d02e      	beq.n	8013f80 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8013f22:	683b      	ldr	r3, [r7, #0]
 8013f24:	781b      	ldrb	r3, [r3, #0]
 8013f26:	b25b      	sxtb	r3, r3
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	da16      	bge.n	8013f5a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f32:	689b      	ldr	r3, [r3, #8]
 8013f34:	683a      	ldr	r2, [r7, #0]
 8013f36:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8013f38:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013f3a:	683a      	ldr	r2, [r7, #0]
 8013f3c:	88d2      	ldrh	r2, [r2, #6]
 8013f3e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8013f40:	683b      	ldr	r3, [r7, #0]
 8013f42:	88db      	ldrh	r3, [r3, #6]
 8013f44:	2b07      	cmp	r3, #7
 8013f46:	bf28      	it	cs
 8013f48:	2307      	movcs	r3, #7
 8013f4a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8013f4c:	693b      	ldr	r3, [r7, #16]
 8013f4e:	89fa      	ldrh	r2, [r7, #14]
 8013f50:	4619      	mov	r1, r3
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f001 facf 	bl	80154f6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8013f58:	e085      	b.n	8014066 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	785a      	ldrb	r2, [r3, #1]
 8013f5e:	693b      	ldr	r3, [r7, #16]
 8013f60:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8013f64:	683b      	ldr	r3, [r7, #0]
 8013f66:	88db      	ldrh	r3, [r3, #6]
 8013f68:	b2da      	uxtb	r2, r3
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8013f70:	6939      	ldr	r1, [r7, #16]
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	88db      	ldrh	r3, [r3, #6]
 8013f76:	461a      	mov	r2, r3
 8013f78:	6878      	ldr	r0, [r7, #4]
 8013f7a:	f001 fae8 	bl	801554e <USBD_CtlPrepareRx>
      break;
 8013f7e:	e072      	b.n	8014066 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013f86:	689b      	ldr	r3, [r3, #8]
 8013f88:	683a      	ldr	r2, [r7, #0]
 8013f8a:	7850      	ldrb	r0, [r2, #1]
 8013f8c:	2200      	movs	r2, #0
 8013f8e:	6839      	ldr	r1, [r7, #0]
 8013f90:	4798      	blx	r3
      break;
 8013f92:	e068      	b.n	8014066 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013f94:	683b      	ldr	r3, [r7, #0]
 8013f96:	785b      	ldrb	r3, [r3, #1]
 8013f98:	2b0b      	cmp	r3, #11
 8013f9a:	d852      	bhi.n	8014042 <USBD_CDC_Setup+0x162>
 8013f9c:	a201      	add	r2, pc, #4	; (adr r2, 8013fa4 <USBD_CDC_Setup+0xc4>)
 8013f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fa2:	bf00      	nop
 8013fa4:	08013fd5 	.word	0x08013fd5
 8013fa8:	08014051 	.word	0x08014051
 8013fac:	08014043 	.word	0x08014043
 8013fb0:	08014043 	.word	0x08014043
 8013fb4:	08014043 	.word	0x08014043
 8013fb8:	08014043 	.word	0x08014043
 8013fbc:	08014043 	.word	0x08014043
 8013fc0:	08014043 	.word	0x08014043
 8013fc4:	08014043 	.word	0x08014043
 8013fc8:	08014043 	.word	0x08014043
 8013fcc:	08013fff 	.word	0x08013fff
 8013fd0:	08014029 	.word	0x08014029
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	2b03      	cmp	r3, #3
 8013fde:	d107      	bne.n	8013ff0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8013fe0:	f107 030a 	add.w	r3, r7, #10
 8013fe4:	2202      	movs	r2, #2
 8013fe6:	4619      	mov	r1, r3
 8013fe8:	6878      	ldr	r0, [r7, #4]
 8013fea:	f001 fa84 	bl	80154f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013fee:	e032      	b.n	8014056 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8013ff0:	6839      	ldr	r1, [r7, #0]
 8013ff2:	6878      	ldr	r0, [r7, #4]
 8013ff4:	f001 fa0e 	bl	8015414 <USBD_CtlError>
            ret = USBD_FAIL;
 8013ff8:	2303      	movs	r3, #3
 8013ffa:	75fb      	strb	r3, [r7, #23]
          break;
 8013ffc:	e02b      	b.n	8014056 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014004:	b2db      	uxtb	r3, r3
 8014006:	2b03      	cmp	r3, #3
 8014008:	d107      	bne.n	801401a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 801400a:	f107 030d 	add.w	r3, r7, #13
 801400e:	2201      	movs	r2, #1
 8014010:	4619      	mov	r1, r3
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f001 fa6f 	bl	80154f6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8014018:	e01d      	b.n	8014056 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 801401a:	6839      	ldr	r1, [r7, #0]
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f001 f9f9 	bl	8015414 <USBD_CtlError>
            ret = USBD_FAIL;
 8014022:	2303      	movs	r3, #3
 8014024:	75fb      	strb	r3, [r7, #23]
          break;
 8014026:	e016      	b.n	8014056 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8014028:	687b      	ldr	r3, [r7, #4]
 801402a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801402e:	b2db      	uxtb	r3, r3
 8014030:	2b03      	cmp	r3, #3
 8014032:	d00f      	beq.n	8014054 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8014034:	6839      	ldr	r1, [r7, #0]
 8014036:	6878      	ldr	r0, [r7, #4]
 8014038:	f001 f9ec 	bl	8015414 <USBD_CtlError>
            ret = USBD_FAIL;
 801403c:	2303      	movs	r3, #3
 801403e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8014040:	e008      	b.n	8014054 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8014042:	6839      	ldr	r1, [r7, #0]
 8014044:	6878      	ldr	r0, [r7, #4]
 8014046:	f001 f9e5 	bl	8015414 <USBD_CtlError>
          ret = USBD_FAIL;
 801404a:	2303      	movs	r3, #3
 801404c:	75fb      	strb	r3, [r7, #23]
          break;
 801404e:	e002      	b.n	8014056 <USBD_CDC_Setup+0x176>
          break;
 8014050:	bf00      	nop
 8014052:	e008      	b.n	8014066 <USBD_CDC_Setup+0x186>
          break;
 8014054:	bf00      	nop
      }
      break;
 8014056:	e006      	b.n	8014066 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8014058:	6839      	ldr	r1, [r7, #0]
 801405a:	6878      	ldr	r0, [r7, #4]
 801405c:	f001 f9da 	bl	8015414 <USBD_CtlError>
      ret = USBD_FAIL;
 8014060:	2303      	movs	r3, #3
 8014062:	75fb      	strb	r3, [r7, #23]
      break;
 8014064:	bf00      	nop
  }

  return (uint8_t)ret;
 8014066:	7dfb      	ldrb	r3, [r7, #23]
}
 8014068:	4618      	mov	r0, r3
 801406a:	3718      	adds	r7, #24
 801406c:	46bd      	mov	sp, r7
 801406e:	bd80      	pop	{r7, pc}

08014070 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	460b      	mov	r3, r1
 801407a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8014082:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801408a:	2b00      	cmp	r3, #0
 801408c:	d101      	bne.n	8014092 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801408e:	2303      	movs	r3, #3
 8014090:	e04f      	b.n	8014132 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014098:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801409a:	78fa      	ldrb	r2, [r7, #3]
 801409c:	6879      	ldr	r1, [r7, #4]
 801409e:	4613      	mov	r3, r2
 80140a0:	009b      	lsls	r3, r3, #2
 80140a2:	4413      	add	r3, r2
 80140a4:	009b      	lsls	r3, r3, #2
 80140a6:	440b      	add	r3, r1
 80140a8:	3318      	adds	r3, #24
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	2b00      	cmp	r3, #0
 80140ae:	d029      	beq.n	8014104 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80140b0:	78fa      	ldrb	r2, [r7, #3]
 80140b2:	6879      	ldr	r1, [r7, #4]
 80140b4:	4613      	mov	r3, r2
 80140b6:	009b      	lsls	r3, r3, #2
 80140b8:	4413      	add	r3, r2
 80140ba:	009b      	lsls	r3, r3, #2
 80140bc:	440b      	add	r3, r1
 80140be:	3318      	adds	r3, #24
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	78f9      	ldrb	r1, [r7, #3]
 80140c4:	68f8      	ldr	r0, [r7, #12]
 80140c6:	460b      	mov	r3, r1
 80140c8:	009b      	lsls	r3, r3, #2
 80140ca:	440b      	add	r3, r1
 80140cc:	00db      	lsls	r3, r3, #3
 80140ce:	4403      	add	r3, r0
 80140d0:	3320      	adds	r3, #32
 80140d2:	681b      	ldr	r3, [r3, #0]
 80140d4:	fbb2 f1f3 	udiv	r1, r2, r3
 80140d8:	fb01 f303 	mul.w	r3, r1, r3
 80140dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80140de:	2b00      	cmp	r3, #0
 80140e0:	d110      	bne.n	8014104 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80140e2:	78fa      	ldrb	r2, [r7, #3]
 80140e4:	6879      	ldr	r1, [r7, #4]
 80140e6:	4613      	mov	r3, r2
 80140e8:	009b      	lsls	r3, r3, #2
 80140ea:	4413      	add	r3, r2
 80140ec:	009b      	lsls	r3, r3, #2
 80140ee:	440b      	add	r3, r1
 80140f0:	3318      	adds	r3, #24
 80140f2:	2200      	movs	r2, #0
 80140f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80140f6:	78f9      	ldrb	r1, [r7, #3]
 80140f8:	2300      	movs	r3, #0
 80140fa:	2200      	movs	r2, #0
 80140fc:	6878      	ldr	r0, [r7, #4]
 80140fe:	f001 feb0 	bl	8015e62 <USBD_LL_Transmit>
 8014102:	e015      	b.n	8014130 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8014104:	68bb      	ldr	r3, [r7, #8]
 8014106:	2200      	movs	r2, #0
 8014108:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014112:	691b      	ldr	r3, [r3, #16]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d00b      	beq.n	8014130 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801411e:	691b      	ldr	r3, [r3, #16]
 8014120:	68ba      	ldr	r2, [r7, #8]
 8014122:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8014126:	68ba      	ldr	r2, [r7, #8]
 8014128:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801412c:	78fa      	ldrb	r2, [r7, #3]
 801412e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8014130:	2300      	movs	r3, #0
}
 8014132:	4618      	mov	r0, r3
 8014134:	3710      	adds	r7, #16
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}

0801413a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801413a:	b580      	push	{r7, lr}
 801413c:	b084      	sub	sp, #16
 801413e:	af00      	add	r7, sp, #0
 8014140:	6078      	str	r0, [r7, #4]
 8014142:	460b      	mov	r3, r1
 8014144:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801414c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014154:	2b00      	cmp	r3, #0
 8014156:	d101      	bne.n	801415c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014158:	2303      	movs	r3, #3
 801415a:	e015      	b.n	8014188 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801415c:	78fb      	ldrb	r3, [r7, #3]
 801415e:	4619      	mov	r1, r3
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f001 fec0 	bl	8015ee6 <USBD_LL_GetRxDataSize>
 8014166:	4602      	mov	r2, r0
 8014168:	68fb      	ldr	r3, [r7, #12]
 801416a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014174:	68db      	ldr	r3, [r3, #12]
 8014176:	68fa      	ldr	r2, [r7, #12]
 8014178:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801417c:	68fa      	ldr	r2, [r7, #12]
 801417e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8014182:	4611      	mov	r1, r2
 8014184:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8014186:	2300      	movs	r3, #0
}
 8014188:	4618      	mov	r0, r3
 801418a:	3710      	adds	r7, #16
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}

08014190 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	b084      	sub	sp, #16
 8014194:	af00      	add	r7, sp, #0
 8014196:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801419e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80141a0:	68fb      	ldr	r3, [r7, #12]
 80141a2:	2b00      	cmp	r3, #0
 80141a4:	d101      	bne.n	80141aa <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80141a6:	2303      	movs	r3, #3
 80141a8:	e01b      	b.n	80141e2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d015      	beq.n	80141e0 <USBD_CDC_EP0_RxReady+0x50>
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80141ba:	2bff      	cmp	r3, #255	; 0xff
 80141bc:	d010      	beq.n	80141e0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80141c4:	689b      	ldr	r3, [r3, #8]
 80141c6:	68fa      	ldr	r2, [r7, #12]
 80141c8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80141cc:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80141ce:	68fa      	ldr	r2, [r7, #12]
 80141d0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80141d4:	b292      	uxth	r2, r2
 80141d6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	22ff      	movs	r2, #255	; 0xff
 80141dc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80141e0:	2300      	movs	r3, #0
}
 80141e2:	4618      	mov	r0, r3
 80141e4:	3710      	adds	r7, #16
 80141e6:	46bd      	mov	sp, r7
 80141e8:	bd80      	pop	{r7, pc}
	...

080141ec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80141ec:	b480      	push	{r7}
 80141ee:	b083      	sub	sp, #12
 80141f0:	af00      	add	r7, sp, #0
 80141f2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	2243      	movs	r2, #67	; 0x43
 80141f8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80141fa:	4b03      	ldr	r3, [pc, #12]	; (8014208 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80141fc:	4618      	mov	r0, r3
 80141fe:	370c      	adds	r7, #12
 8014200:	46bd      	mov	sp, r7
 8014202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014206:	4770      	bx	lr
 8014208:	20000254 	.word	0x20000254

0801420c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801420c:	b480      	push	{r7}
 801420e:	b083      	sub	sp, #12
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	2243      	movs	r2, #67	; 0x43
 8014218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801421a:	4b03      	ldr	r3, [pc, #12]	; (8014228 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801421c:	4618      	mov	r0, r3
 801421e:	370c      	adds	r7, #12
 8014220:	46bd      	mov	sp, r7
 8014222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014226:	4770      	bx	lr
 8014228:	20000210 	.word	0x20000210

0801422c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801422c:	b480      	push	{r7}
 801422e:	b083      	sub	sp, #12
 8014230:	af00      	add	r7, sp, #0
 8014232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2243      	movs	r2, #67	; 0x43
 8014238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801423a:	4b03      	ldr	r3, [pc, #12]	; (8014248 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 801423c:	4618      	mov	r0, r3
 801423e:	370c      	adds	r7, #12
 8014240:	46bd      	mov	sp, r7
 8014242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014246:	4770      	bx	lr
 8014248:	20000298 	.word	0x20000298

0801424c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 801424c:	b480      	push	{r7}
 801424e:	b083      	sub	sp, #12
 8014250:	af00      	add	r7, sp, #0
 8014252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	220a      	movs	r2, #10
 8014258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801425a:	4b03      	ldr	r3, [pc, #12]	; (8014268 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 801425c:	4618      	mov	r0, r3
 801425e:	370c      	adds	r7, #12
 8014260:	46bd      	mov	sp, r7
 8014262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014266:	4770      	bx	lr
 8014268:	200001cc 	.word	0x200001cc

0801426c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801426c:	b480      	push	{r7}
 801426e:	b083      	sub	sp, #12
 8014270:	af00      	add	r7, sp, #0
 8014272:	6078      	str	r0, [r7, #4]
 8014274:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8014276:	683b      	ldr	r3, [r7, #0]
 8014278:	2b00      	cmp	r3, #0
 801427a:	d101      	bne.n	8014280 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 801427c:	2303      	movs	r3, #3
 801427e:	e004      	b.n	801428a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	683a      	ldr	r2, [r7, #0]
 8014284:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8014288:	2300      	movs	r3, #0
}
 801428a:	4618      	mov	r0, r3
 801428c:	370c      	adds	r7, #12
 801428e:	46bd      	mov	sp, r7
 8014290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014294:	4770      	bx	lr

08014296 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8014296:	b480      	push	{r7}
 8014298:	b087      	sub	sp, #28
 801429a:	af00      	add	r7, sp, #0
 801429c:	60f8      	str	r0, [r7, #12]
 801429e:	60b9      	str	r1, [r7, #8]
 80142a0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142a8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d101      	bne.n	80142b4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80142b0:	2303      	movs	r3, #3
 80142b2:	e008      	b.n	80142c6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80142b4:	697b      	ldr	r3, [r7, #20]
 80142b6:	68ba      	ldr	r2, [r7, #8]
 80142b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80142bc:	697b      	ldr	r3, [r7, #20]
 80142be:	687a      	ldr	r2, [r7, #4]
 80142c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80142c4:	2300      	movs	r3, #0
}
 80142c6:	4618      	mov	r0, r3
 80142c8:	371c      	adds	r7, #28
 80142ca:	46bd      	mov	sp, r7
 80142cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142d0:	4770      	bx	lr

080142d2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80142d2:	b480      	push	{r7}
 80142d4:	b085      	sub	sp, #20
 80142d6:	af00      	add	r7, sp, #0
 80142d8:	6078      	str	r0, [r7, #4]
 80142da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142e2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80142e4:	68fb      	ldr	r3, [r7, #12]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d101      	bne.n	80142ee <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80142ea:	2303      	movs	r3, #3
 80142ec:	e004      	b.n	80142f8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80142ee:	68fb      	ldr	r3, [r7, #12]
 80142f0:	683a      	ldr	r2, [r7, #0]
 80142f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80142f6:	2300      	movs	r3, #0
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3714      	adds	r7, #20
 80142fc:	46bd      	mov	sp, r7
 80142fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014302:	4770      	bx	lr

08014304 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b084      	sub	sp, #16
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014312:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8014314:	2301      	movs	r3, #1
 8014316:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801431e:	2b00      	cmp	r3, #0
 8014320:	d101      	bne.n	8014326 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8014322:	2303      	movs	r3, #3
 8014324:	e01a      	b.n	801435c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8014326:	68bb      	ldr	r3, [r7, #8]
 8014328:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801432c:	2b00      	cmp	r3, #0
 801432e:	d114      	bne.n	801435a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8014330:	68bb      	ldr	r3, [r7, #8]
 8014332:	2201      	movs	r2, #1
 8014334:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8014342:	68bb      	ldr	r3, [r7, #8]
 8014344:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8014348:	68bb      	ldr	r3, [r7, #8]
 801434a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801434e:	2181      	movs	r1, #129	; 0x81
 8014350:	6878      	ldr	r0, [r7, #4]
 8014352:	f001 fd86 	bl	8015e62 <USBD_LL_Transmit>

    ret = USBD_OK;
 8014356:	2300      	movs	r3, #0
 8014358:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 801435a:	7bfb      	ldrb	r3, [r7, #15]
}
 801435c:	4618      	mov	r0, r3
 801435e:	3710      	adds	r7, #16
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}

08014364 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8014364:	b580      	push	{r7, lr}
 8014366:	b084      	sub	sp, #16
 8014368:	af00      	add	r7, sp, #0
 801436a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801437a:	2b00      	cmp	r3, #0
 801437c:	d101      	bne.n	8014382 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 801437e:	2303      	movs	r3, #3
 8014380:	e016      	b.n	80143b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	7c1b      	ldrb	r3, [r3, #16]
 8014386:	2b00      	cmp	r3, #0
 8014388:	d109      	bne.n	801439e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014390:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014394:	2101      	movs	r1, #1
 8014396:	6878      	ldr	r0, [r7, #4]
 8014398:	f001 fd84 	bl	8015ea4 <USBD_LL_PrepareReceive>
 801439c:	e007      	b.n	80143ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80143a4:	2340      	movs	r3, #64	; 0x40
 80143a6:	2101      	movs	r1, #1
 80143a8:	6878      	ldr	r0, [r7, #4]
 80143aa:	f001 fd7b 	bl	8015ea4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80143ae:	2300      	movs	r3, #0
}
 80143b0:	4618      	mov	r0, r3
 80143b2:	3710      	adds	r7, #16
 80143b4:	46bd      	mov	sp, r7
 80143b6:	bd80      	pop	{r7, pc}

080143b8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	b086      	sub	sp, #24
 80143bc:	af00      	add	r7, sp, #0
 80143be:	60f8      	str	r0, [r7, #12]
 80143c0:	60b9      	str	r1, [r7, #8]
 80143c2:	4613      	mov	r3, r2
 80143c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d101      	bne.n	80143d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80143cc:	2303      	movs	r3, #3
 80143ce:	e01f      	b.n	8014410 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	2200      	movs	r2, #0
 80143d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	2200      	movs	r2, #0
 80143dc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	2200      	movs	r2, #0
 80143e4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80143e8:	68bb      	ldr	r3, [r7, #8]
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d003      	beq.n	80143f6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	68ba      	ldr	r2, [r7, #8]
 80143f2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	2201      	movs	r2, #1
 80143fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	79fa      	ldrb	r2, [r7, #7]
 8014402:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8014404:	68f8      	ldr	r0, [r7, #12]
 8014406:	f001 fbe3 	bl	8015bd0 <USBD_LL_Init>
 801440a:	4603      	mov	r3, r0
 801440c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801440e:	7dfb      	ldrb	r3, [r7, #23]
}
 8014410:	4618      	mov	r0, r3
 8014412:	3718      	adds	r7, #24
 8014414:	46bd      	mov	sp, r7
 8014416:	bd80      	pop	{r7, pc}

08014418 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8014418:	b580      	push	{r7, lr}
 801441a:	b084      	sub	sp, #16
 801441c:	af00      	add	r7, sp, #0
 801441e:	6078      	str	r0, [r7, #4]
 8014420:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014422:	2300      	movs	r3, #0
 8014424:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8014426:	683b      	ldr	r3, [r7, #0]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d101      	bne.n	8014430 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801442c:	2303      	movs	r3, #3
 801442e:	e016      	b.n	801445e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8014430:	687b      	ldr	r3, [r7, #4]
 8014432:	683a      	ldr	r2, [r7, #0]
 8014434:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801443e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014440:	2b00      	cmp	r3, #0
 8014442:	d00b      	beq.n	801445c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801444a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801444c:	f107 020e 	add.w	r2, r7, #14
 8014450:	4610      	mov	r0, r2
 8014452:	4798      	blx	r3
 8014454:	4602      	mov	r2, r0
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 801445c:	2300      	movs	r3, #0
}
 801445e:	4618      	mov	r0, r3
 8014460:	3710      	adds	r7, #16
 8014462:	46bd      	mov	sp, r7
 8014464:	bd80      	pop	{r7, pc}

08014466 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8014466:	b580      	push	{r7, lr}
 8014468:	b082      	sub	sp, #8
 801446a:	af00      	add	r7, sp, #0
 801446c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801446e:	6878      	ldr	r0, [r7, #4]
 8014470:	f001 fc0e 	bl	8015c90 <USBD_LL_Start>
 8014474:	4603      	mov	r3, r0
}
 8014476:	4618      	mov	r0, r3
 8014478:	3708      	adds	r7, #8
 801447a:	46bd      	mov	sp, r7
 801447c:	bd80      	pop	{r7, pc}

0801447e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 801447e:	b480      	push	{r7}
 8014480:	b083      	sub	sp, #12
 8014482:	af00      	add	r7, sp, #0
 8014484:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8014486:	2300      	movs	r3, #0
}
 8014488:	4618      	mov	r0, r3
 801448a:	370c      	adds	r7, #12
 801448c:	46bd      	mov	sp, r7
 801448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014492:	4770      	bx	lr

08014494 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014494:	b580      	push	{r7, lr}
 8014496:	b084      	sub	sp, #16
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	460b      	mov	r3, r1
 801449e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80144a0:	2303      	movs	r3, #3
 80144a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d009      	beq.n	80144c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	78fa      	ldrb	r2, [r7, #3]
 80144b8:	4611      	mov	r1, r2
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	4798      	blx	r3
 80144be:	4603      	mov	r3, r0
 80144c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80144c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80144c4:	4618      	mov	r0, r3
 80144c6:	3710      	adds	r7, #16
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}

080144cc <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80144cc:	b580      	push	{r7, lr}
 80144ce:	b082      	sub	sp, #8
 80144d0:	af00      	add	r7, sp, #0
 80144d2:	6078      	str	r0, [r7, #4]
 80144d4:	460b      	mov	r3, r1
 80144d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d007      	beq.n	80144f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80144e2:	687b      	ldr	r3, [r7, #4]
 80144e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80144e8:	685b      	ldr	r3, [r3, #4]
 80144ea:	78fa      	ldrb	r2, [r7, #3]
 80144ec:	4611      	mov	r1, r2
 80144ee:	6878      	ldr	r0, [r7, #4]
 80144f0:	4798      	blx	r3
  }

  return USBD_OK;
 80144f2:	2300      	movs	r3, #0
}
 80144f4:	4618      	mov	r0, r3
 80144f6:	3708      	adds	r7, #8
 80144f8:	46bd      	mov	sp, r7
 80144fa:	bd80      	pop	{r7, pc}

080144fc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80144fc:	b580      	push	{r7, lr}
 80144fe:	b084      	sub	sp, #16
 8014500:	af00      	add	r7, sp, #0
 8014502:	6078      	str	r0, [r7, #4]
 8014504:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801450c:	6839      	ldr	r1, [r7, #0]
 801450e:	4618      	mov	r0, r3
 8014510:	f000 ff46 	bl	80153a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014514:	687b      	ldr	r3, [r7, #4]
 8014516:	2201      	movs	r2, #1
 8014518:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8014522:	461a      	mov	r2, r3
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014530:	f003 031f 	and.w	r3, r3, #31
 8014534:	2b02      	cmp	r3, #2
 8014536:	d01a      	beq.n	801456e <USBD_LL_SetupStage+0x72>
 8014538:	2b02      	cmp	r3, #2
 801453a:	d822      	bhi.n	8014582 <USBD_LL_SetupStage+0x86>
 801453c:	2b00      	cmp	r3, #0
 801453e:	d002      	beq.n	8014546 <USBD_LL_SetupStage+0x4a>
 8014540:	2b01      	cmp	r3, #1
 8014542:	d00a      	beq.n	801455a <USBD_LL_SetupStage+0x5e>
 8014544:	e01d      	b.n	8014582 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801454c:	4619      	mov	r1, r3
 801454e:	6878      	ldr	r0, [r7, #4]
 8014550:	f000 f9ee 	bl	8014930 <USBD_StdDevReq>
 8014554:	4603      	mov	r3, r0
 8014556:	73fb      	strb	r3, [r7, #15]
      break;
 8014558:	e020      	b.n	801459c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014560:	4619      	mov	r1, r3
 8014562:	6878      	ldr	r0, [r7, #4]
 8014564:	f000 fa52 	bl	8014a0c <USBD_StdItfReq>
 8014568:	4603      	mov	r3, r0
 801456a:	73fb      	strb	r3, [r7, #15]
      break;
 801456c:	e016      	b.n	801459c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8014574:	4619      	mov	r1, r3
 8014576:	6878      	ldr	r0, [r7, #4]
 8014578:	f000 fa91 	bl	8014a9e <USBD_StdEPReq>
 801457c:	4603      	mov	r3, r0
 801457e:	73fb      	strb	r3, [r7, #15]
      break;
 8014580:	e00c      	b.n	801459c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8014588:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 801458c:	b2db      	uxtb	r3, r3
 801458e:	4619      	mov	r1, r3
 8014590:	6878      	ldr	r0, [r7, #4]
 8014592:	f001 fbdd 	bl	8015d50 <USBD_LL_StallEP>
 8014596:	4603      	mov	r3, r0
 8014598:	73fb      	strb	r3, [r7, #15]
      break;
 801459a:	bf00      	nop
  }

  return ret;
 801459c:	7bfb      	ldrb	r3, [r7, #15]
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3710      	adds	r7, #16
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}

080145a6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80145a6:	b580      	push	{r7, lr}
 80145a8:	b086      	sub	sp, #24
 80145aa:	af00      	add	r7, sp, #0
 80145ac:	60f8      	str	r0, [r7, #12]
 80145ae:	460b      	mov	r3, r1
 80145b0:	607a      	str	r2, [r7, #4]
 80145b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80145b4:	7afb      	ldrb	r3, [r7, #11]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d138      	bne.n	801462c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80145c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80145c2:	68fb      	ldr	r3, [r7, #12]
 80145c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80145c8:	2b03      	cmp	r3, #3
 80145ca:	d14a      	bne.n	8014662 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80145cc:	693b      	ldr	r3, [r7, #16]
 80145ce:	689a      	ldr	r2, [r3, #8]
 80145d0:	693b      	ldr	r3, [r7, #16]
 80145d2:	68db      	ldr	r3, [r3, #12]
 80145d4:	429a      	cmp	r2, r3
 80145d6:	d913      	bls.n	8014600 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	689a      	ldr	r2, [r3, #8]
 80145dc:	693b      	ldr	r3, [r7, #16]
 80145de:	68db      	ldr	r3, [r3, #12]
 80145e0:	1ad2      	subs	r2, r2, r3
 80145e2:	693b      	ldr	r3, [r7, #16]
 80145e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80145e6:	693b      	ldr	r3, [r7, #16]
 80145e8:	68da      	ldr	r2, [r3, #12]
 80145ea:	693b      	ldr	r3, [r7, #16]
 80145ec:	689b      	ldr	r3, [r3, #8]
 80145ee:	4293      	cmp	r3, r2
 80145f0:	bf28      	it	cs
 80145f2:	4613      	movcs	r3, r2
 80145f4:	461a      	mov	r2, r3
 80145f6:	6879      	ldr	r1, [r7, #4]
 80145f8:	68f8      	ldr	r0, [r7, #12]
 80145fa:	f000 ffc5 	bl	8015588 <USBD_CtlContinueRx>
 80145fe:	e030      	b.n	8014662 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014600:	68fb      	ldr	r3, [r7, #12]
 8014602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014606:	b2db      	uxtb	r3, r3
 8014608:	2b03      	cmp	r3, #3
 801460a:	d10b      	bne.n	8014624 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014612:	691b      	ldr	r3, [r3, #16]
 8014614:	2b00      	cmp	r3, #0
 8014616:	d005      	beq.n	8014624 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8014618:	68fb      	ldr	r3, [r7, #12]
 801461a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801461e:	691b      	ldr	r3, [r3, #16]
 8014620:	68f8      	ldr	r0, [r7, #12]
 8014622:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8014624:	68f8      	ldr	r0, [r7, #12]
 8014626:	f000 ffc0 	bl	80155aa <USBD_CtlSendStatus>
 801462a:	e01a      	b.n	8014662 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801462c:	68fb      	ldr	r3, [r7, #12]
 801462e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014632:	b2db      	uxtb	r3, r3
 8014634:	2b03      	cmp	r3, #3
 8014636:	d114      	bne.n	8014662 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801463e:	699b      	ldr	r3, [r3, #24]
 8014640:	2b00      	cmp	r3, #0
 8014642:	d00e      	beq.n	8014662 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801464a:	699b      	ldr	r3, [r3, #24]
 801464c:	7afa      	ldrb	r2, [r7, #11]
 801464e:	4611      	mov	r1, r2
 8014650:	68f8      	ldr	r0, [r7, #12]
 8014652:	4798      	blx	r3
 8014654:	4603      	mov	r3, r0
 8014656:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014658:	7dfb      	ldrb	r3, [r7, #23]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d001      	beq.n	8014662 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 801465e:	7dfb      	ldrb	r3, [r7, #23]
 8014660:	e000      	b.n	8014664 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 8014662:	2300      	movs	r3, #0
}
 8014664:	4618      	mov	r0, r3
 8014666:	3718      	adds	r7, #24
 8014668:	46bd      	mov	sp, r7
 801466a:	bd80      	pop	{r7, pc}

0801466c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801466c:	b580      	push	{r7, lr}
 801466e:	b086      	sub	sp, #24
 8014670:	af00      	add	r7, sp, #0
 8014672:	60f8      	str	r0, [r7, #12]
 8014674:	460b      	mov	r3, r1
 8014676:	607a      	str	r2, [r7, #4]
 8014678:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 801467a:	7afb      	ldrb	r3, [r7, #11]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d16b      	bne.n	8014758 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	3314      	adds	r3, #20
 8014684:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 801468c:	2b02      	cmp	r3, #2
 801468e:	d156      	bne.n	801473e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8014690:	693b      	ldr	r3, [r7, #16]
 8014692:	689a      	ldr	r2, [r3, #8]
 8014694:	693b      	ldr	r3, [r7, #16]
 8014696:	68db      	ldr	r3, [r3, #12]
 8014698:	429a      	cmp	r2, r3
 801469a:	d914      	bls.n	80146c6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801469c:	693b      	ldr	r3, [r7, #16]
 801469e:	689a      	ldr	r2, [r3, #8]
 80146a0:	693b      	ldr	r3, [r7, #16]
 80146a2:	68db      	ldr	r3, [r3, #12]
 80146a4:	1ad2      	subs	r2, r2, r3
 80146a6:	693b      	ldr	r3, [r7, #16]
 80146a8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80146aa:	693b      	ldr	r3, [r7, #16]
 80146ac:	689b      	ldr	r3, [r3, #8]
 80146ae:	461a      	mov	r2, r3
 80146b0:	6879      	ldr	r1, [r7, #4]
 80146b2:	68f8      	ldr	r0, [r7, #12]
 80146b4:	f000 ff3a 	bl	801552c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80146b8:	2300      	movs	r3, #0
 80146ba:	2200      	movs	r2, #0
 80146bc:	2100      	movs	r1, #0
 80146be:	68f8      	ldr	r0, [r7, #12]
 80146c0:	f001 fbf0 	bl	8015ea4 <USBD_LL_PrepareReceive>
 80146c4:	e03b      	b.n	801473e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80146c6:	693b      	ldr	r3, [r7, #16]
 80146c8:	68da      	ldr	r2, [r3, #12]
 80146ca:	693b      	ldr	r3, [r7, #16]
 80146cc:	689b      	ldr	r3, [r3, #8]
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d11c      	bne.n	801470c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80146d2:	693b      	ldr	r3, [r7, #16]
 80146d4:	685a      	ldr	r2, [r3, #4]
 80146d6:	693b      	ldr	r3, [r7, #16]
 80146d8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80146da:	429a      	cmp	r2, r3
 80146dc:	d316      	bcc.n	801470c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80146de:	693b      	ldr	r3, [r7, #16]
 80146e0:	685a      	ldr	r2, [r3, #4]
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80146e8:	429a      	cmp	r2, r3
 80146ea:	d20f      	bcs.n	801470c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80146ec:	2200      	movs	r2, #0
 80146ee:	2100      	movs	r1, #0
 80146f0:	68f8      	ldr	r0, [r7, #12]
 80146f2:	f000 ff1b 	bl	801552c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	2200      	movs	r2, #0
 80146fa:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80146fe:	2300      	movs	r3, #0
 8014700:	2200      	movs	r2, #0
 8014702:	2100      	movs	r1, #0
 8014704:	68f8      	ldr	r0, [r7, #12]
 8014706:	f001 fbcd 	bl	8015ea4 <USBD_LL_PrepareReceive>
 801470a:	e018      	b.n	801473e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801470c:	68fb      	ldr	r3, [r7, #12]
 801470e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014712:	b2db      	uxtb	r3, r3
 8014714:	2b03      	cmp	r3, #3
 8014716:	d10b      	bne.n	8014730 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801471e:	68db      	ldr	r3, [r3, #12]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d005      	beq.n	8014730 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8014724:	68fb      	ldr	r3, [r7, #12]
 8014726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801472a:	68db      	ldr	r3, [r3, #12]
 801472c:	68f8      	ldr	r0, [r7, #12]
 801472e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014730:	2180      	movs	r1, #128	; 0x80
 8014732:	68f8      	ldr	r0, [r7, #12]
 8014734:	f001 fb0c 	bl	8015d50 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014738:	68f8      	ldr	r0, [r7, #12]
 801473a:	f000 ff49 	bl	80155d0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801473e:	68fb      	ldr	r3, [r7, #12]
 8014740:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8014744:	2b01      	cmp	r3, #1
 8014746:	d122      	bne.n	801478e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8014748:	68f8      	ldr	r0, [r7, #12]
 801474a:	f7ff fe98 	bl	801447e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	2200      	movs	r2, #0
 8014752:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8014756:	e01a      	b.n	801478e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014758:	68fb      	ldr	r3, [r7, #12]
 801475a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801475e:	b2db      	uxtb	r3, r3
 8014760:	2b03      	cmp	r3, #3
 8014762:	d114      	bne.n	801478e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801476a:	695b      	ldr	r3, [r3, #20]
 801476c:	2b00      	cmp	r3, #0
 801476e:	d00e      	beq.n	801478e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014776:	695b      	ldr	r3, [r3, #20]
 8014778:	7afa      	ldrb	r2, [r7, #11]
 801477a:	4611      	mov	r1, r2
 801477c:	68f8      	ldr	r0, [r7, #12]
 801477e:	4798      	blx	r3
 8014780:	4603      	mov	r3, r0
 8014782:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8014784:	7dfb      	ldrb	r3, [r7, #23]
 8014786:	2b00      	cmp	r3, #0
 8014788:	d001      	beq.n	801478e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 801478a:	7dfb      	ldrb	r3, [r7, #23]
 801478c:	e000      	b.n	8014790 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 801478e:	2300      	movs	r3, #0
}
 8014790:	4618      	mov	r0, r3
 8014792:	3718      	adds	r7, #24
 8014794:	46bd      	mov	sp, r7
 8014796:	bd80      	pop	{r7, pc}

08014798 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014798:	b580      	push	{r7, lr}
 801479a:	b082      	sub	sp, #8
 801479c:	af00      	add	r7, sp, #0
 801479e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2201      	movs	r2, #1
 80147a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	2200      	movs	r2, #0
 80147ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	2200      	movs	r2, #0
 80147b4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2200      	movs	r2, #0
 80147ba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d101      	bne.n	80147cc <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80147c8:	2303      	movs	r3, #3
 80147ca:	e02f      	b.n	801482c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d00f      	beq.n	80147f6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80147d6:	687b      	ldr	r3, [r7, #4]
 80147d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147dc:	685b      	ldr	r3, [r3, #4]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d009      	beq.n	80147f6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80147e8:	685b      	ldr	r3, [r3, #4]
 80147ea:	687a      	ldr	r2, [r7, #4]
 80147ec:	6852      	ldr	r2, [r2, #4]
 80147ee:	b2d2      	uxtb	r2, r2
 80147f0:	4611      	mov	r1, r2
 80147f2:	6878      	ldr	r0, [r7, #4]
 80147f4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80147f6:	2340      	movs	r3, #64	; 0x40
 80147f8:	2200      	movs	r2, #0
 80147fa:	2100      	movs	r1, #0
 80147fc:	6878      	ldr	r0, [r7, #4]
 80147fe:	f001 fa62 	bl	8015cc6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	2201      	movs	r2, #1
 8014806:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2240      	movs	r2, #64	; 0x40
 801480e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8014812:	2340      	movs	r3, #64	; 0x40
 8014814:	2200      	movs	r2, #0
 8014816:	2180      	movs	r1, #128	; 0x80
 8014818:	6878      	ldr	r0, [r7, #4]
 801481a:	f001 fa54 	bl	8015cc6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	2201      	movs	r2, #1
 8014822:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	2240      	movs	r2, #64	; 0x40
 8014828:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 801482a:	2300      	movs	r3, #0
}
 801482c:	4618      	mov	r0, r3
 801482e:	3708      	adds	r7, #8
 8014830:	46bd      	mov	sp, r7
 8014832:	bd80      	pop	{r7, pc}

08014834 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8014834:	b480      	push	{r7}
 8014836:	b083      	sub	sp, #12
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	460b      	mov	r3, r1
 801483e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	78fa      	ldrb	r2, [r7, #3]
 8014844:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014846:	2300      	movs	r3, #0
}
 8014848:	4618      	mov	r0, r3
 801484a:	370c      	adds	r7, #12
 801484c:	46bd      	mov	sp, r7
 801484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014852:	4770      	bx	lr

08014854 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014854:	b480      	push	{r7}
 8014856:	b083      	sub	sp, #12
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014862:	b2da      	uxtb	r2, r3
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	2204      	movs	r2, #4
 801486e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8014872:	2300      	movs	r3, #0
}
 8014874:	4618      	mov	r0, r3
 8014876:	370c      	adds	r7, #12
 8014878:	46bd      	mov	sp, r7
 801487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801487e:	4770      	bx	lr

08014880 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014880:	b480      	push	{r7}
 8014882:	b083      	sub	sp, #12
 8014884:	af00      	add	r7, sp, #0
 8014886:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801488e:	b2db      	uxtb	r3, r3
 8014890:	2b04      	cmp	r3, #4
 8014892:	d106      	bne.n	80148a2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801489a:	b2da      	uxtb	r2, r3
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80148a2:	2300      	movs	r3, #0
}
 80148a4:	4618      	mov	r0, r3
 80148a6:	370c      	adds	r7, #12
 80148a8:	46bd      	mov	sp, r7
 80148aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ae:	4770      	bx	lr

080148b0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b082      	sub	sp, #8
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80148b8:	687b      	ldr	r3, [r7, #4]
 80148ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d101      	bne.n	80148c6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80148c2:	2303      	movs	r3, #3
 80148c4:	e012      	b.n	80148ec <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80148cc:	b2db      	uxtb	r3, r3
 80148ce:	2b03      	cmp	r3, #3
 80148d0:	d10b      	bne.n	80148ea <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80148d2:	687b      	ldr	r3, [r7, #4]
 80148d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148d8:	69db      	ldr	r3, [r3, #28]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d005      	beq.n	80148ea <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80148e4:	69db      	ldr	r3, [r3, #28]
 80148e6:	6878      	ldr	r0, [r7, #4]
 80148e8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80148ea:	2300      	movs	r3, #0
}
 80148ec:	4618      	mov	r0, r3
 80148ee:	3708      	adds	r7, #8
 80148f0:	46bd      	mov	sp, r7
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80148f4:	b480      	push	{r7}
 80148f6:	b087      	sub	sp, #28
 80148f8:	af00      	add	r7, sp, #0
 80148fa:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80148fc:	687b      	ldr	r3, [r7, #4]
 80148fe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8014900:	697b      	ldr	r3, [r7, #20]
 8014902:	781b      	ldrb	r3, [r3, #0]
 8014904:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8014906:	697b      	ldr	r3, [r7, #20]
 8014908:	3301      	adds	r3, #1
 801490a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801490c:	697b      	ldr	r3, [r7, #20]
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8014912:	8a3b      	ldrh	r3, [r7, #16]
 8014914:	021b      	lsls	r3, r3, #8
 8014916:	b21a      	sxth	r2, r3
 8014918:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801491c:	4313      	orrs	r3, r2
 801491e:	b21b      	sxth	r3, r3
 8014920:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8014922:	89fb      	ldrh	r3, [r7, #14]
}
 8014924:	4618      	mov	r0, r3
 8014926:	371c      	adds	r7, #28
 8014928:	46bd      	mov	sp, r7
 801492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801492e:	4770      	bx	lr

08014930 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	b084      	sub	sp, #16
 8014934:	af00      	add	r7, sp, #0
 8014936:	6078      	str	r0, [r7, #4]
 8014938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801493a:	2300      	movs	r3, #0
 801493c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801493e:	683b      	ldr	r3, [r7, #0]
 8014940:	781b      	ldrb	r3, [r3, #0]
 8014942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014946:	2b40      	cmp	r3, #64	; 0x40
 8014948:	d005      	beq.n	8014956 <USBD_StdDevReq+0x26>
 801494a:	2b40      	cmp	r3, #64	; 0x40
 801494c:	d853      	bhi.n	80149f6 <USBD_StdDevReq+0xc6>
 801494e:	2b00      	cmp	r3, #0
 8014950:	d00b      	beq.n	801496a <USBD_StdDevReq+0x3a>
 8014952:	2b20      	cmp	r3, #32
 8014954:	d14f      	bne.n	80149f6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014956:	687b      	ldr	r3, [r7, #4]
 8014958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801495c:	689b      	ldr	r3, [r3, #8]
 801495e:	6839      	ldr	r1, [r7, #0]
 8014960:	6878      	ldr	r0, [r7, #4]
 8014962:	4798      	blx	r3
 8014964:	4603      	mov	r3, r0
 8014966:	73fb      	strb	r3, [r7, #15]
      break;
 8014968:	e04a      	b.n	8014a00 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801496a:	683b      	ldr	r3, [r7, #0]
 801496c:	785b      	ldrb	r3, [r3, #1]
 801496e:	2b09      	cmp	r3, #9
 8014970:	d83b      	bhi.n	80149ea <USBD_StdDevReq+0xba>
 8014972:	a201      	add	r2, pc, #4	; (adr r2, 8014978 <USBD_StdDevReq+0x48>)
 8014974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014978:	080149cd 	.word	0x080149cd
 801497c:	080149e1 	.word	0x080149e1
 8014980:	080149eb 	.word	0x080149eb
 8014984:	080149d7 	.word	0x080149d7
 8014988:	080149eb 	.word	0x080149eb
 801498c:	080149ab 	.word	0x080149ab
 8014990:	080149a1 	.word	0x080149a1
 8014994:	080149eb 	.word	0x080149eb
 8014998:	080149c3 	.word	0x080149c3
 801499c:	080149b5 	.word	0x080149b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80149a0:	6839      	ldr	r1, [r7, #0]
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f000 f9de 	bl	8014d64 <USBD_GetDescriptor>
          break;
 80149a8:	e024      	b.n	80149f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80149aa:	6839      	ldr	r1, [r7, #0]
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f000 fb6d 	bl	801508c <USBD_SetAddress>
          break;
 80149b2:	e01f      	b.n	80149f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80149b4:	6839      	ldr	r1, [r7, #0]
 80149b6:	6878      	ldr	r0, [r7, #4]
 80149b8:	f000 fbac 	bl	8015114 <USBD_SetConfig>
 80149bc:	4603      	mov	r3, r0
 80149be:	73fb      	strb	r3, [r7, #15]
          break;
 80149c0:	e018      	b.n	80149f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80149c2:	6839      	ldr	r1, [r7, #0]
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f000 fc4b 	bl	8015260 <USBD_GetConfig>
          break;
 80149ca:	e013      	b.n	80149f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80149cc:	6839      	ldr	r1, [r7, #0]
 80149ce:	6878      	ldr	r0, [r7, #4]
 80149d0:	f000 fc7c 	bl	80152cc <USBD_GetStatus>
          break;
 80149d4:	e00e      	b.n	80149f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80149d6:	6839      	ldr	r1, [r7, #0]
 80149d8:	6878      	ldr	r0, [r7, #4]
 80149da:	f000 fcab 	bl	8015334 <USBD_SetFeature>
          break;
 80149de:	e009      	b.n	80149f4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80149e0:	6839      	ldr	r1, [r7, #0]
 80149e2:	6878      	ldr	r0, [r7, #4]
 80149e4:	f000 fcba 	bl	801535c <USBD_ClrFeature>
          break;
 80149e8:	e004      	b.n	80149f4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80149ea:	6839      	ldr	r1, [r7, #0]
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f000 fd11 	bl	8015414 <USBD_CtlError>
          break;
 80149f2:	bf00      	nop
      }
      break;
 80149f4:	e004      	b.n	8014a00 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80149f6:	6839      	ldr	r1, [r7, #0]
 80149f8:	6878      	ldr	r0, [r7, #4]
 80149fa:	f000 fd0b 	bl	8015414 <USBD_CtlError>
      break;
 80149fe:	bf00      	nop
  }

  return ret;
 8014a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a02:	4618      	mov	r0, r3
 8014a04:	3710      	adds	r7, #16
 8014a06:	46bd      	mov	sp, r7
 8014a08:	bd80      	pop	{r7, pc}
 8014a0a:	bf00      	nop

08014a0c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a0c:	b580      	push	{r7, lr}
 8014a0e:	b084      	sub	sp, #16
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8014a16:	2300      	movs	r3, #0
 8014a18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014a22:	2b40      	cmp	r3, #64	; 0x40
 8014a24:	d005      	beq.n	8014a32 <USBD_StdItfReq+0x26>
 8014a26:	2b40      	cmp	r3, #64	; 0x40
 8014a28:	d82f      	bhi.n	8014a8a <USBD_StdItfReq+0x7e>
 8014a2a:	2b00      	cmp	r3, #0
 8014a2c:	d001      	beq.n	8014a32 <USBD_StdItfReq+0x26>
 8014a2e:	2b20      	cmp	r3, #32
 8014a30:	d12b      	bne.n	8014a8a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8014a32:	687b      	ldr	r3, [r7, #4]
 8014a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014a38:	b2db      	uxtb	r3, r3
 8014a3a:	3b01      	subs	r3, #1
 8014a3c:	2b02      	cmp	r3, #2
 8014a3e:	d81d      	bhi.n	8014a7c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014a40:	683b      	ldr	r3, [r7, #0]
 8014a42:	889b      	ldrh	r3, [r3, #4]
 8014a44:	b2db      	uxtb	r3, r3
 8014a46:	2b01      	cmp	r3, #1
 8014a48:	d813      	bhi.n	8014a72 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014a50:	689b      	ldr	r3, [r3, #8]
 8014a52:	6839      	ldr	r1, [r7, #0]
 8014a54:	6878      	ldr	r0, [r7, #4]
 8014a56:	4798      	blx	r3
 8014a58:	4603      	mov	r3, r0
 8014a5a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	88db      	ldrh	r3, [r3, #6]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	d110      	bne.n	8014a86 <USBD_StdItfReq+0x7a>
 8014a64:	7bfb      	ldrb	r3, [r7, #15]
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d10d      	bne.n	8014a86 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8014a6a:	6878      	ldr	r0, [r7, #4]
 8014a6c:	f000 fd9d 	bl	80155aa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014a70:	e009      	b.n	8014a86 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8014a72:	6839      	ldr	r1, [r7, #0]
 8014a74:	6878      	ldr	r0, [r7, #4]
 8014a76:	f000 fccd 	bl	8015414 <USBD_CtlError>
          break;
 8014a7a:	e004      	b.n	8014a86 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8014a7c:	6839      	ldr	r1, [r7, #0]
 8014a7e:	6878      	ldr	r0, [r7, #4]
 8014a80:	f000 fcc8 	bl	8015414 <USBD_CtlError>
          break;
 8014a84:	e000      	b.n	8014a88 <USBD_StdItfReq+0x7c>
          break;
 8014a86:	bf00      	nop
      }
      break;
 8014a88:	e004      	b.n	8014a94 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8014a8a:	6839      	ldr	r1, [r7, #0]
 8014a8c:	6878      	ldr	r0, [r7, #4]
 8014a8e:	f000 fcc1 	bl	8015414 <USBD_CtlError>
      break;
 8014a92:	bf00      	nop
  }

  return ret;
 8014a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a96:	4618      	mov	r0, r3
 8014a98:	3710      	adds	r7, #16
 8014a9a:	46bd      	mov	sp, r7
 8014a9c:	bd80      	pop	{r7, pc}

08014a9e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014a9e:	b580      	push	{r7, lr}
 8014aa0:	b084      	sub	sp, #16
 8014aa2:	af00      	add	r7, sp, #0
 8014aa4:	6078      	str	r0, [r7, #4]
 8014aa6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	889b      	ldrh	r3, [r3, #4]
 8014ab0:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	781b      	ldrb	r3, [r3, #0]
 8014ab6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014aba:	2b40      	cmp	r3, #64	; 0x40
 8014abc:	d007      	beq.n	8014ace <USBD_StdEPReq+0x30>
 8014abe:	2b40      	cmp	r3, #64	; 0x40
 8014ac0:	f200 8145 	bhi.w	8014d4e <USBD_StdEPReq+0x2b0>
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	d00c      	beq.n	8014ae2 <USBD_StdEPReq+0x44>
 8014ac8:	2b20      	cmp	r3, #32
 8014aca:	f040 8140 	bne.w	8014d4e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014ad4:	689b      	ldr	r3, [r3, #8]
 8014ad6:	6839      	ldr	r1, [r7, #0]
 8014ad8:	6878      	ldr	r0, [r7, #4]
 8014ada:	4798      	blx	r3
 8014adc:	4603      	mov	r3, r0
 8014ade:	73fb      	strb	r3, [r7, #15]
      break;
 8014ae0:	e13a      	b.n	8014d58 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8014ae2:	683b      	ldr	r3, [r7, #0]
 8014ae4:	785b      	ldrb	r3, [r3, #1]
 8014ae6:	2b03      	cmp	r3, #3
 8014ae8:	d007      	beq.n	8014afa <USBD_StdEPReq+0x5c>
 8014aea:	2b03      	cmp	r3, #3
 8014aec:	f300 8129 	bgt.w	8014d42 <USBD_StdEPReq+0x2a4>
 8014af0:	2b00      	cmp	r3, #0
 8014af2:	d07f      	beq.n	8014bf4 <USBD_StdEPReq+0x156>
 8014af4:	2b01      	cmp	r3, #1
 8014af6:	d03c      	beq.n	8014b72 <USBD_StdEPReq+0xd4>
 8014af8:	e123      	b.n	8014d42 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b00:	b2db      	uxtb	r3, r3
 8014b02:	2b02      	cmp	r3, #2
 8014b04:	d002      	beq.n	8014b0c <USBD_StdEPReq+0x6e>
 8014b06:	2b03      	cmp	r3, #3
 8014b08:	d016      	beq.n	8014b38 <USBD_StdEPReq+0x9a>
 8014b0a:	e02c      	b.n	8014b66 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b0c:	7bbb      	ldrb	r3, [r7, #14]
 8014b0e:	2b00      	cmp	r3, #0
 8014b10:	d00d      	beq.n	8014b2e <USBD_StdEPReq+0x90>
 8014b12:	7bbb      	ldrb	r3, [r7, #14]
 8014b14:	2b80      	cmp	r3, #128	; 0x80
 8014b16:	d00a      	beq.n	8014b2e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b18:	7bbb      	ldrb	r3, [r7, #14]
 8014b1a:	4619      	mov	r1, r3
 8014b1c:	6878      	ldr	r0, [r7, #4]
 8014b1e:	f001 f917 	bl	8015d50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b22:	2180      	movs	r1, #128	; 0x80
 8014b24:	6878      	ldr	r0, [r7, #4]
 8014b26:	f001 f913 	bl	8015d50 <USBD_LL_StallEP>
 8014b2a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014b2c:	e020      	b.n	8014b70 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8014b2e:	6839      	ldr	r1, [r7, #0]
 8014b30:	6878      	ldr	r0, [r7, #4]
 8014b32:	f000 fc6f 	bl	8015414 <USBD_CtlError>
              break;
 8014b36:	e01b      	b.n	8014b70 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014b38:	683b      	ldr	r3, [r7, #0]
 8014b3a:	885b      	ldrh	r3, [r3, #2]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d10e      	bne.n	8014b5e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014b40:	7bbb      	ldrb	r3, [r7, #14]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d00b      	beq.n	8014b5e <USBD_StdEPReq+0xc0>
 8014b46:	7bbb      	ldrb	r3, [r7, #14]
 8014b48:	2b80      	cmp	r3, #128	; 0x80
 8014b4a:	d008      	beq.n	8014b5e <USBD_StdEPReq+0xc0>
 8014b4c:	683b      	ldr	r3, [r7, #0]
 8014b4e:	88db      	ldrh	r3, [r3, #6]
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	d104      	bne.n	8014b5e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b54:	7bbb      	ldrb	r3, [r7, #14]
 8014b56:	4619      	mov	r1, r3
 8014b58:	6878      	ldr	r0, [r7, #4]
 8014b5a:	f001 f8f9 	bl	8015d50 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8014b5e:	6878      	ldr	r0, [r7, #4]
 8014b60:	f000 fd23 	bl	80155aa <USBD_CtlSendStatus>

              break;
 8014b64:	e004      	b.n	8014b70 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8014b66:	6839      	ldr	r1, [r7, #0]
 8014b68:	6878      	ldr	r0, [r7, #4]
 8014b6a:	f000 fc53 	bl	8015414 <USBD_CtlError>
              break;
 8014b6e:	bf00      	nop
          }
          break;
 8014b70:	e0ec      	b.n	8014d4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014b78:	b2db      	uxtb	r3, r3
 8014b7a:	2b02      	cmp	r3, #2
 8014b7c:	d002      	beq.n	8014b84 <USBD_StdEPReq+0xe6>
 8014b7e:	2b03      	cmp	r3, #3
 8014b80:	d016      	beq.n	8014bb0 <USBD_StdEPReq+0x112>
 8014b82:	e030      	b.n	8014be6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014b84:	7bbb      	ldrb	r3, [r7, #14]
 8014b86:	2b00      	cmp	r3, #0
 8014b88:	d00d      	beq.n	8014ba6 <USBD_StdEPReq+0x108>
 8014b8a:	7bbb      	ldrb	r3, [r7, #14]
 8014b8c:	2b80      	cmp	r3, #128	; 0x80
 8014b8e:	d00a      	beq.n	8014ba6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8014b90:	7bbb      	ldrb	r3, [r7, #14]
 8014b92:	4619      	mov	r1, r3
 8014b94:	6878      	ldr	r0, [r7, #4]
 8014b96:	f001 f8db 	bl	8015d50 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b9a:	2180      	movs	r1, #128	; 0x80
 8014b9c:	6878      	ldr	r0, [r7, #4]
 8014b9e:	f001 f8d7 	bl	8015d50 <USBD_LL_StallEP>
 8014ba2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014ba4:	e025      	b.n	8014bf2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8014ba6:	6839      	ldr	r1, [r7, #0]
 8014ba8:	6878      	ldr	r0, [r7, #4]
 8014baa:	f000 fc33 	bl	8015414 <USBD_CtlError>
              break;
 8014bae:	e020      	b.n	8014bf2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014bb0:	683b      	ldr	r3, [r7, #0]
 8014bb2:	885b      	ldrh	r3, [r3, #2]
 8014bb4:	2b00      	cmp	r3, #0
 8014bb6:	d11b      	bne.n	8014bf0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8014bb8:	7bbb      	ldrb	r3, [r7, #14]
 8014bba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d004      	beq.n	8014bcc <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014bc2:	7bbb      	ldrb	r3, [r7, #14]
 8014bc4:	4619      	mov	r1, r3
 8014bc6:	6878      	ldr	r0, [r7, #4]
 8014bc8:	f001 f8e1 	bl	8015d8e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8014bcc:	6878      	ldr	r0, [r7, #4]
 8014bce:	f000 fcec 	bl	80155aa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014bd8:	689b      	ldr	r3, [r3, #8]
 8014bda:	6839      	ldr	r1, [r7, #0]
 8014bdc:	6878      	ldr	r0, [r7, #4]
 8014bde:	4798      	blx	r3
 8014be0:	4603      	mov	r3, r0
 8014be2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8014be4:	e004      	b.n	8014bf0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8014be6:	6839      	ldr	r1, [r7, #0]
 8014be8:	6878      	ldr	r0, [r7, #4]
 8014bea:	f000 fc13 	bl	8015414 <USBD_CtlError>
              break;
 8014bee:	e000      	b.n	8014bf2 <USBD_StdEPReq+0x154>
              break;
 8014bf0:	bf00      	nop
          }
          break;
 8014bf2:	e0ab      	b.n	8014d4c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014bfa:	b2db      	uxtb	r3, r3
 8014bfc:	2b02      	cmp	r3, #2
 8014bfe:	d002      	beq.n	8014c06 <USBD_StdEPReq+0x168>
 8014c00:	2b03      	cmp	r3, #3
 8014c02:	d032      	beq.n	8014c6a <USBD_StdEPReq+0x1cc>
 8014c04:	e097      	b.n	8014d36 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014c06:	7bbb      	ldrb	r3, [r7, #14]
 8014c08:	2b00      	cmp	r3, #0
 8014c0a:	d007      	beq.n	8014c1c <USBD_StdEPReq+0x17e>
 8014c0c:	7bbb      	ldrb	r3, [r7, #14]
 8014c0e:	2b80      	cmp	r3, #128	; 0x80
 8014c10:	d004      	beq.n	8014c1c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8014c12:	6839      	ldr	r1, [r7, #0]
 8014c14:	6878      	ldr	r0, [r7, #4]
 8014c16:	f000 fbfd 	bl	8015414 <USBD_CtlError>
                break;
 8014c1a:	e091      	b.n	8014d40 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	da0b      	bge.n	8014c3c <USBD_StdEPReq+0x19e>
 8014c24:	7bbb      	ldrb	r3, [r7, #14]
 8014c26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	009b      	lsls	r3, r3, #2
 8014c2e:	4413      	add	r3, r2
 8014c30:	009b      	lsls	r3, r3, #2
 8014c32:	3310      	adds	r3, #16
 8014c34:	687a      	ldr	r2, [r7, #4]
 8014c36:	4413      	add	r3, r2
 8014c38:	3304      	adds	r3, #4
 8014c3a:	e00b      	b.n	8014c54 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014c3c:	7bbb      	ldrb	r3, [r7, #14]
 8014c3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c42:	4613      	mov	r3, r2
 8014c44:	009b      	lsls	r3, r3, #2
 8014c46:	4413      	add	r3, r2
 8014c48:	009b      	lsls	r3, r3, #2
 8014c4a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014c4e:	687a      	ldr	r2, [r7, #4]
 8014c50:	4413      	add	r3, r2
 8014c52:	3304      	adds	r3, #4
 8014c54:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8014c56:	68bb      	ldr	r3, [r7, #8]
 8014c58:	2200      	movs	r2, #0
 8014c5a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014c5c:	68bb      	ldr	r3, [r7, #8]
 8014c5e:	2202      	movs	r2, #2
 8014c60:	4619      	mov	r1, r3
 8014c62:	6878      	ldr	r0, [r7, #4]
 8014c64:	f000 fc47 	bl	80154f6 <USBD_CtlSendData>
              break;
 8014c68:	e06a      	b.n	8014d40 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8014c6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014c6e:	2b00      	cmp	r3, #0
 8014c70:	da11      	bge.n	8014c96 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014c72:	7bbb      	ldrb	r3, [r7, #14]
 8014c74:	f003 020f 	and.w	r2, r3, #15
 8014c78:	6879      	ldr	r1, [r7, #4]
 8014c7a:	4613      	mov	r3, r2
 8014c7c:	009b      	lsls	r3, r3, #2
 8014c7e:	4413      	add	r3, r2
 8014c80:	009b      	lsls	r3, r3, #2
 8014c82:	440b      	add	r3, r1
 8014c84:	3324      	adds	r3, #36	; 0x24
 8014c86:	881b      	ldrh	r3, [r3, #0]
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d117      	bne.n	8014cbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014c8c:	6839      	ldr	r1, [r7, #0]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f000 fbc0 	bl	8015414 <USBD_CtlError>
                  break;
 8014c94:	e054      	b.n	8014d40 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014c96:	7bbb      	ldrb	r3, [r7, #14]
 8014c98:	f003 020f 	and.w	r2, r3, #15
 8014c9c:	6879      	ldr	r1, [r7, #4]
 8014c9e:	4613      	mov	r3, r2
 8014ca0:	009b      	lsls	r3, r3, #2
 8014ca2:	4413      	add	r3, r2
 8014ca4:	009b      	lsls	r3, r3, #2
 8014ca6:	440b      	add	r3, r1
 8014ca8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014cac:	881b      	ldrh	r3, [r3, #0]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d104      	bne.n	8014cbc <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8014cb2:	6839      	ldr	r1, [r7, #0]
 8014cb4:	6878      	ldr	r0, [r7, #4]
 8014cb6:	f000 fbad 	bl	8015414 <USBD_CtlError>
                  break;
 8014cba:	e041      	b.n	8014d40 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	da0b      	bge.n	8014cdc <USBD_StdEPReq+0x23e>
 8014cc4:	7bbb      	ldrb	r3, [r7, #14]
 8014cc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8014cca:	4613      	mov	r3, r2
 8014ccc:	009b      	lsls	r3, r3, #2
 8014cce:	4413      	add	r3, r2
 8014cd0:	009b      	lsls	r3, r3, #2
 8014cd2:	3310      	adds	r3, #16
 8014cd4:	687a      	ldr	r2, [r7, #4]
 8014cd6:	4413      	add	r3, r2
 8014cd8:	3304      	adds	r3, #4
 8014cda:	e00b      	b.n	8014cf4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8014cdc:	7bbb      	ldrb	r3, [r7, #14]
 8014cde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014ce2:	4613      	mov	r3, r2
 8014ce4:	009b      	lsls	r3, r3, #2
 8014ce6:	4413      	add	r3, r2
 8014ce8:	009b      	lsls	r3, r3, #2
 8014cea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8014cee:	687a      	ldr	r2, [r7, #4]
 8014cf0:	4413      	add	r3, r2
 8014cf2:	3304      	adds	r3, #4
 8014cf4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014cf6:	7bbb      	ldrb	r3, [r7, #14]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d002      	beq.n	8014d02 <USBD_StdEPReq+0x264>
 8014cfc:	7bbb      	ldrb	r3, [r7, #14]
 8014cfe:	2b80      	cmp	r3, #128	; 0x80
 8014d00:	d103      	bne.n	8014d0a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8014d02:	68bb      	ldr	r3, [r7, #8]
 8014d04:	2200      	movs	r2, #0
 8014d06:	601a      	str	r2, [r3, #0]
 8014d08:	e00e      	b.n	8014d28 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014d0a:	7bbb      	ldrb	r3, [r7, #14]
 8014d0c:	4619      	mov	r1, r3
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f001 f85c 	bl	8015dcc <USBD_LL_IsStallEP>
 8014d14:	4603      	mov	r3, r0
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d003      	beq.n	8014d22 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	2201      	movs	r2, #1
 8014d1e:	601a      	str	r2, [r3, #0]
 8014d20:	e002      	b.n	8014d28 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8014d22:	68bb      	ldr	r3, [r7, #8]
 8014d24:	2200      	movs	r2, #0
 8014d26:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014d28:	68bb      	ldr	r3, [r7, #8]
 8014d2a:	2202      	movs	r2, #2
 8014d2c:	4619      	mov	r1, r3
 8014d2e:	6878      	ldr	r0, [r7, #4]
 8014d30:	f000 fbe1 	bl	80154f6 <USBD_CtlSendData>
              break;
 8014d34:	e004      	b.n	8014d40 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8014d36:	6839      	ldr	r1, [r7, #0]
 8014d38:	6878      	ldr	r0, [r7, #4]
 8014d3a:	f000 fb6b 	bl	8015414 <USBD_CtlError>
              break;
 8014d3e:	bf00      	nop
          }
          break;
 8014d40:	e004      	b.n	8014d4c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8014d42:	6839      	ldr	r1, [r7, #0]
 8014d44:	6878      	ldr	r0, [r7, #4]
 8014d46:	f000 fb65 	bl	8015414 <USBD_CtlError>
          break;
 8014d4a:	bf00      	nop
      }
      break;
 8014d4c:	e004      	b.n	8014d58 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8014d4e:	6839      	ldr	r1, [r7, #0]
 8014d50:	6878      	ldr	r0, [r7, #4]
 8014d52:	f000 fb5f 	bl	8015414 <USBD_CtlError>
      break;
 8014d56:	bf00      	nop
  }

  return ret;
 8014d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3710      	adds	r7, #16
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
	...

08014d64 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b084      	sub	sp, #16
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8014d6e:	2300      	movs	r3, #0
 8014d70:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8014d72:	2300      	movs	r3, #0
 8014d74:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8014d76:	2300      	movs	r3, #0
 8014d78:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8014d7a:	683b      	ldr	r3, [r7, #0]
 8014d7c:	885b      	ldrh	r3, [r3, #2]
 8014d7e:	0a1b      	lsrs	r3, r3, #8
 8014d80:	b29b      	uxth	r3, r3
 8014d82:	3b01      	subs	r3, #1
 8014d84:	2b0e      	cmp	r3, #14
 8014d86:	f200 8152 	bhi.w	801502e <USBD_GetDescriptor+0x2ca>
 8014d8a:	a201      	add	r2, pc, #4	; (adr r2, 8014d90 <USBD_GetDescriptor+0x2c>)
 8014d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d90:	08014e01 	.word	0x08014e01
 8014d94:	08014e19 	.word	0x08014e19
 8014d98:	08014e59 	.word	0x08014e59
 8014d9c:	0801502f 	.word	0x0801502f
 8014da0:	0801502f 	.word	0x0801502f
 8014da4:	08014fcf 	.word	0x08014fcf
 8014da8:	08014ffb 	.word	0x08014ffb
 8014dac:	0801502f 	.word	0x0801502f
 8014db0:	0801502f 	.word	0x0801502f
 8014db4:	0801502f 	.word	0x0801502f
 8014db8:	0801502f 	.word	0x0801502f
 8014dbc:	0801502f 	.word	0x0801502f
 8014dc0:	0801502f 	.word	0x0801502f
 8014dc4:	0801502f 	.word	0x0801502f
 8014dc8:	08014dcd 	.word	0x08014dcd
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dd2:	69db      	ldr	r3, [r3, #28]
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d00b      	beq.n	8014df0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8014dd8:	687b      	ldr	r3, [r7, #4]
 8014dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014dde:	69db      	ldr	r3, [r3, #28]
 8014de0:	687a      	ldr	r2, [r7, #4]
 8014de2:	7c12      	ldrb	r2, [r2, #16]
 8014de4:	f107 0108 	add.w	r1, r7, #8
 8014de8:	4610      	mov	r0, r2
 8014dea:	4798      	blx	r3
 8014dec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014dee:	e126      	b.n	801503e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014df0:	6839      	ldr	r1, [r7, #0]
 8014df2:	6878      	ldr	r0, [r7, #4]
 8014df4:	f000 fb0e 	bl	8015414 <USBD_CtlError>
        err++;
 8014df8:	7afb      	ldrb	r3, [r7, #11]
 8014dfa:	3301      	adds	r3, #1
 8014dfc:	72fb      	strb	r3, [r7, #11]
      break;
 8014dfe:	e11e      	b.n	801503e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e06:	681b      	ldr	r3, [r3, #0]
 8014e08:	687a      	ldr	r2, [r7, #4]
 8014e0a:	7c12      	ldrb	r2, [r2, #16]
 8014e0c:	f107 0108 	add.w	r1, r7, #8
 8014e10:	4610      	mov	r0, r2
 8014e12:	4798      	blx	r3
 8014e14:	60f8      	str	r0, [r7, #12]
      break;
 8014e16:	e112      	b.n	801503e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	7c1b      	ldrb	r3, [r3, #16]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	d10d      	bne.n	8014e3c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014e28:	f107 0208 	add.w	r2, r7, #8
 8014e2c:	4610      	mov	r0, r2
 8014e2e:	4798      	blx	r3
 8014e30:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	3301      	adds	r3, #1
 8014e36:	2202      	movs	r2, #2
 8014e38:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014e3a:	e100      	b.n	801503e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e44:	f107 0208 	add.w	r2, r7, #8
 8014e48:	4610      	mov	r0, r2
 8014e4a:	4798      	blx	r3
 8014e4c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	3301      	adds	r3, #1
 8014e52:	2202      	movs	r2, #2
 8014e54:	701a      	strb	r2, [r3, #0]
      break;
 8014e56:	e0f2      	b.n	801503e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8014e58:	683b      	ldr	r3, [r7, #0]
 8014e5a:	885b      	ldrh	r3, [r3, #2]
 8014e5c:	b2db      	uxtb	r3, r3
 8014e5e:	2b05      	cmp	r3, #5
 8014e60:	f200 80ac 	bhi.w	8014fbc <USBD_GetDescriptor+0x258>
 8014e64:	a201      	add	r2, pc, #4	; (adr r2, 8014e6c <USBD_GetDescriptor+0x108>)
 8014e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014e6a:	bf00      	nop
 8014e6c:	08014e85 	.word	0x08014e85
 8014e70:	08014eb9 	.word	0x08014eb9
 8014e74:	08014eed 	.word	0x08014eed
 8014e78:	08014f21 	.word	0x08014f21
 8014e7c:	08014f55 	.word	0x08014f55
 8014e80:	08014f89 	.word	0x08014f89
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e8a:	685b      	ldr	r3, [r3, #4]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d00b      	beq.n	8014ea8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014e96:	685b      	ldr	r3, [r3, #4]
 8014e98:	687a      	ldr	r2, [r7, #4]
 8014e9a:	7c12      	ldrb	r2, [r2, #16]
 8014e9c:	f107 0108 	add.w	r1, r7, #8
 8014ea0:	4610      	mov	r0, r2
 8014ea2:	4798      	blx	r3
 8014ea4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014ea6:	e091      	b.n	8014fcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014ea8:	6839      	ldr	r1, [r7, #0]
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f000 fab2 	bl	8015414 <USBD_CtlError>
            err++;
 8014eb0:	7afb      	ldrb	r3, [r7, #11]
 8014eb2:	3301      	adds	r3, #1
 8014eb4:	72fb      	strb	r3, [r7, #11]
          break;
 8014eb6:	e089      	b.n	8014fcc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ebe:	689b      	ldr	r3, [r3, #8]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d00b      	beq.n	8014edc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014eca:	689b      	ldr	r3, [r3, #8]
 8014ecc:	687a      	ldr	r2, [r7, #4]
 8014ece:	7c12      	ldrb	r2, [r2, #16]
 8014ed0:	f107 0108 	add.w	r1, r7, #8
 8014ed4:	4610      	mov	r0, r2
 8014ed6:	4798      	blx	r3
 8014ed8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014eda:	e077      	b.n	8014fcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014edc:	6839      	ldr	r1, [r7, #0]
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f000 fa98 	bl	8015414 <USBD_CtlError>
            err++;
 8014ee4:	7afb      	ldrb	r3, [r7, #11]
 8014ee6:	3301      	adds	r3, #1
 8014ee8:	72fb      	strb	r3, [r7, #11]
          break;
 8014eea:	e06f      	b.n	8014fcc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014ef2:	68db      	ldr	r3, [r3, #12]
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d00b      	beq.n	8014f10 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014efe:	68db      	ldr	r3, [r3, #12]
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	7c12      	ldrb	r2, [r2, #16]
 8014f04:	f107 0108 	add.w	r1, r7, #8
 8014f08:	4610      	mov	r0, r2
 8014f0a:	4798      	blx	r3
 8014f0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f0e:	e05d      	b.n	8014fcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014f10:	6839      	ldr	r1, [r7, #0]
 8014f12:	6878      	ldr	r0, [r7, #4]
 8014f14:	f000 fa7e 	bl	8015414 <USBD_CtlError>
            err++;
 8014f18:	7afb      	ldrb	r3, [r7, #11]
 8014f1a:	3301      	adds	r3, #1
 8014f1c:	72fb      	strb	r3, [r7, #11]
          break;
 8014f1e:	e055      	b.n	8014fcc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f26:	691b      	ldr	r3, [r3, #16]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	d00b      	beq.n	8014f44 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f32:	691b      	ldr	r3, [r3, #16]
 8014f34:	687a      	ldr	r2, [r7, #4]
 8014f36:	7c12      	ldrb	r2, [r2, #16]
 8014f38:	f107 0108 	add.w	r1, r7, #8
 8014f3c:	4610      	mov	r0, r2
 8014f3e:	4798      	blx	r3
 8014f40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f42:	e043      	b.n	8014fcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014f44:	6839      	ldr	r1, [r7, #0]
 8014f46:	6878      	ldr	r0, [r7, #4]
 8014f48:	f000 fa64 	bl	8015414 <USBD_CtlError>
            err++;
 8014f4c:	7afb      	ldrb	r3, [r7, #11]
 8014f4e:	3301      	adds	r3, #1
 8014f50:	72fb      	strb	r3, [r7, #11]
          break;
 8014f52:	e03b      	b.n	8014fcc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f5a:	695b      	ldr	r3, [r3, #20]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d00b      	beq.n	8014f78 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f66:	695b      	ldr	r3, [r3, #20]
 8014f68:	687a      	ldr	r2, [r7, #4]
 8014f6a:	7c12      	ldrb	r2, [r2, #16]
 8014f6c:	f107 0108 	add.w	r1, r7, #8
 8014f70:	4610      	mov	r0, r2
 8014f72:	4798      	blx	r3
 8014f74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014f76:	e029      	b.n	8014fcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014f78:	6839      	ldr	r1, [r7, #0]
 8014f7a:	6878      	ldr	r0, [r7, #4]
 8014f7c:	f000 fa4a 	bl	8015414 <USBD_CtlError>
            err++;
 8014f80:	7afb      	ldrb	r3, [r7, #11]
 8014f82:	3301      	adds	r3, #1
 8014f84:	72fb      	strb	r3, [r7, #11]
          break;
 8014f86:	e021      	b.n	8014fcc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f8e:	699b      	ldr	r3, [r3, #24]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d00b      	beq.n	8014fac <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8014f9a:	699b      	ldr	r3, [r3, #24]
 8014f9c:	687a      	ldr	r2, [r7, #4]
 8014f9e:	7c12      	ldrb	r2, [r2, #16]
 8014fa0:	f107 0108 	add.w	r1, r7, #8
 8014fa4:	4610      	mov	r0, r2
 8014fa6:	4798      	blx	r3
 8014fa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014faa:	e00f      	b.n	8014fcc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8014fac:	6839      	ldr	r1, [r7, #0]
 8014fae:	6878      	ldr	r0, [r7, #4]
 8014fb0:	f000 fa30 	bl	8015414 <USBD_CtlError>
            err++;
 8014fb4:	7afb      	ldrb	r3, [r7, #11]
 8014fb6:	3301      	adds	r3, #1
 8014fb8:	72fb      	strb	r3, [r7, #11]
          break;
 8014fba:	e007      	b.n	8014fcc <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8014fbc:	6839      	ldr	r1, [r7, #0]
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f000 fa28 	bl	8015414 <USBD_CtlError>
          err++;
 8014fc4:	7afb      	ldrb	r3, [r7, #11]
 8014fc6:	3301      	adds	r3, #1
 8014fc8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8014fca:	bf00      	nop
      }
      break;
 8014fcc:	e037      	b.n	801503e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	7c1b      	ldrb	r3, [r3, #16]
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d109      	bne.n	8014fea <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8014fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014fde:	f107 0208 	add.w	r2, r7, #8
 8014fe2:	4610      	mov	r0, r2
 8014fe4:	4798      	blx	r3
 8014fe6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014fe8:	e029      	b.n	801503e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8014fea:	6839      	ldr	r1, [r7, #0]
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f000 fa11 	bl	8015414 <USBD_CtlError>
        err++;
 8014ff2:	7afb      	ldrb	r3, [r7, #11]
 8014ff4:	3301      	adds	r3, #1
 8014ff6:	72fb      	strb	r3, [r7, #11]
      break;
 8014ff8:	e021      	b.n	801503e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	7c1b      	ldrb	r3, [r3, #16]
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d10d      	bne.n	801501e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801500a:	f107 0208 	add.w	r2, r7, #8
 801500e:	4610      	mov	r0, r2
 8015010:	4798      	blx	r3
 8015012:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	3301      	adds	r3, #1
 8015018:	2207      	movs	r2, #7
 801501a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801501c:	e00f      	b.n	801503e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801501e:	6839      	ldr	r1, [r7, #0]
 8015020:	6878      	ldr	r0, [r7, #4]
 8015022:	f000 f9f7 	bl	8015414 <USBD_CtlError>
        err++;
 8015026:	7afb      	ldrb	r3, [r7, #11]
 8015028:	3301      	adds	r3, #1
 801502a:	72fb      	strb	r3, [r7, #11]
      break;
 801502c:	e007      	b.n	801503e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 801502e:	6839      	ldr	r1, [r7, #0]
 8015030:	6878      	ldr	r0, [r7, #4]
 8015032:	f000 f9ef 	bl	8015414 <USBD_CtlError>
      err++;
 8015036:	7afb      	ldrb	r3, [r7, #11]
 8015038:	3301      	adds	r3, #1
 801503a:	72fb      	strb	r3, [r7, #11]
      break;
 801503c:	bf00      	nop
  }

  if (err != 0U)
 801503e:	7afb      	ldrb	r3, [r7, #11]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d11e      	bne.n	8015082 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8015044:	683b      	ldr	r3, [r7, #0]
 8015046:	88db      	ldrh	r3, [r3, #6]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d016      	beq.n	801507a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 801504c:	893b      	ldrh	r3, [r7, #8]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d00e      	beq.n	8015070 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	88da      	ldrh	r2, [r3, #6]
 8015056:	893b      	ldrh	r3, [r7, #8]
 8015058:	4293      	cmp	r3, r2
 801505a:	bf28      	it	cs
 801505c:	4613      	movcs	r3, r2
 801505e:	b29b      	uxth	r3, r3
 8015060:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8015062:	893b      	ldrh	r3, [r7, #8]
 8015064:	461a      	mov	r2, r3
 8015066:	68f9      	ldr	r1, [r7, #12]
 8015068:	6878      	ldr	r0, [r7, #4]
 801506a:	f000 fa44 	bl	80154f6 <USBD_CtlSendData>
 801506e:	e009      	b.n	8015084 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8015070:	6839      	ldr	r1, [r7, #0]
 8015072:	6878      	ldr	r0, [r7, #4]
 8015074:	f000 f9ce 	bl	8015414 <USBD_CtlError>
 8015078:	e004      	b.n	8015084 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801507a:	6878      	ldr	r0, [r7, #4]
 801507c:	f000 fa95 	bl	80155aa <USBD_CtlSendStatus>
 8015080:	e000      	b.n	8015084 <USBD_GetDescriptor+0x320>
    return;
 8015082:	bf00      	nop
  }
}
 8015084:	3710      	adds	r7, #16
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
 801508a:	bf00      	nop

0801508c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b084      	sub	sp, #16
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
 8015094:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	889b      	ldrh	r3, [r3, #4]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d131      	bne.n	8015102 <USBD_SetAddress+0x76>
 801509e:	683b      	ldr	r3, [r7, #0]
 80150a0:	88db      	ldrh	r3, [r3, #6]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d12d      	bne.n	8015102 <USBD_SetAddress+0x76>
 80150a6:	683b      	ldr	r3, [r7, #0]
 80150a8:	885b      	ldrh	r3, [r3, #2]
 80150aa:	2b7f      	cmp	r3, #127	; 0x7f
 80150ac:	d829      	bhi.n	8015102 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80150ae:	683b      	ldr	r3, [r7, #0]
 80150b0:	885b      	ldrh	r3, [r3, #2]
 80150b2:	b2db      	uxtb	r3, r3
 80150b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80150c0:	b2db      	uxtb	r3, r3
 80150c2:	2b03      	cmp	r3, #3
 80150c4:	d104      	bne.n	80150d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80150c6:	6839      	ldr	r1, [r7, #0]
 80150c8:	6878      	ldr	r0, [r7, #4]
 80150ca:	f000 f9a3 	bl	8015414 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150ce:	e01d      	b.n	801510c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	7bfa      	ldrb	r2, [r7, #15]
 80150d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80150d8:	7bfb      	ldrb	r3, [r7, #15]
 80150da:	4619      	mov	r1, r3
 80150dc:	6878      	ldr	r0, [r7, #4]
 80150de:	f000 fea1 	bl	8015e24 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80150e2:	6878      	ldr	r0, [r7, #4]
 80150e4:	f000 fa61 	bl	80155aa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80150e8:	7bfb      	ldrb	r3, [r7, #15]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d004      	beq.n	80150f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	2202      	movs	r2, #2
 80150f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80150f6:	e009      	b.n	801510c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	2201      	movs	r2, #1
 80150fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015100:	e004      	b.n	801510c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015102:	6839      	ldr	r1, [r7, #0]
 8015104:	6878      	ldr	r0, [r7, #4]
 8015106:	f000 f985 	bl	8015414 <USBD_CtlError>
  }
}
 801510a:	bf00      	nop
 801510c:	bf00      	nop
 801510e:	3710      	adds	r7, #16
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}

08015114 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	b084      	sub	sp, #16
 8015118:	af00      	add	r7, sp, #0
 801511a:	6078      	str	r0, [r7, #4]
 801511c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801511e:	2300      	movs	r3, #0
 8015120:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015122:	683b      	ldr	r3, [r7, #0]
 8015124:	885b      	ldrh	r3, [r3, #2]
 8015126:	b2da      	uxtb	r2, r3
 8015128:	4b4c      	ldr	r3, [pc, #304]	; (801525c <USBD_SetConfig+0x148>)
 801512a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801512c:	4b4b      	ldr	r3, [pc, #300]	; (801525c <USBD_SetConfig+0x148>)
 801512e:	781b      	ldrb	r3, [r3, #0]
 8015130:	2b01      	cmp	r3, #1
 8015132:	d905      	bls.n	8015140 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015134:	6839      	ldr	r1, [r7, #0]
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f000 f96c 	bl	8015414 <USBD_CtlError>
    return USBD_FAIL;
 801513c:	2303      	movs	r3, #3
 801513e:	e088      	b.n	8015252 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015146:	b2db      	uxtb	r3, r3
 8015148:	2b02      	cmp	r3, #2
 801514a:	d002      	beq.n	8015152 <USBD_SetConfig+0x3e>
 801514c:	2b03      	cmp	r3, #3
 801514e:	d025      	beq.n	801519c <USBD_SetConfig+0x88>
 8015150:	e071      	b.n	8015236 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8015152:	4b42      	ldr	r3, [pc, #264]	; (801525c <USBD_SetConfig+0x148>)
 8015154:	781b      	ldrb	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d01c      	beq.n	8015194 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 801515a:	4b40      	ldr	r3, [pc, #256]	; (801525c <USBD_SetConfig+0x148>)
 801515c:	781b      	ldrb	r3, [r3, #0]
 801515e:	461a      	mov	r2, r3
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8015164:	4b3d      	ldr	r3, [pc, #244]	; (801525c <USBD_SetConfig+0x148>)
 8015166:	781b      	ldrb	r3, [r3, #0]
 8015168:	4619      	mov	r1, r3
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f7ff f992 	bl	8014494 <USBD_SetClassConfig>
 8015170:	4603      	mov	r3, r0
 8015172:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8015174:	7bfb      	ldrb	r3, [r7, #15]
 8015176:	2b00      	cmp	r3, #0
 8015178:	d004      	beq.n	8015184 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 801517a:	6839      	ldr	r1, [r7, #0]
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	f000 f949 	bl	8015414 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8015182:	e065      	b.n	8015250 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f000 fa10 	bl	80155aa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	2203      	movs	r2, #3
 801518e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015192:	e05d      	b.n	8015250 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8015194:	6878      	ldr	r0, [r7, #4]
 8015196:	f000 fa08 	bl	80155aa <USBD_CtlSendStatus>
      break;
 801519a:	e059      	b.n	8015250 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801519c:	4b2f      	ldr	r3, [pc, #188]	; (801525c <USBD_SetConfig+0x148>)
 801519e:	781b      	ldrb	r3, [r3, #0]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d112      	bne.n	80151ca <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80151a4:	687b      	ldr	r3, [r7, #4]
 80151a6:	2202      	movs	r2, #2
 80151a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80151ac:	4b2b      	ldr	r3, [pc, #172]	; (801525c <USBD_SetConfig+0x148>)
 80151ae:	781b      	ldrb	r3, [r3, #0]
 80151b0:	461a      	mov	r2, r3
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80151b6:	4b29      	ldr	r3, [pc, #164]	; (801525c <USBD_SetConfig+0x148>)
 80151b8:	781b      	ldrb	r3, [r3, #0]
 80151ba:	4619      	mov	r1, r3
 80151bc:	6878      	ldr	r0, [r7, #4]
 80151be:	f7ff f985 	bl	80144cc <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f000 f9f1 	bl	80155aa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80151c8:	e042      	b.n	8015250 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80151ca:	4b24      	ldr	r3, [pc, #144]	; (801525c <USBD_SetConfig+0x148>)
 80151cc:	781b      	ldrb	r3, [r3, #0]
 80151ce:	461a      	mov	r2, r3
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	685b      	ldr	r3, [r3, #4]
 80151d4:	429a      	cmp	r2, r3
 80151d6:	d02a      	beq.n	801522e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80151d8:	687b      	ldr	r3, [r7, #4]
 80151da:	685b      	ldr	r3, [r3, #4]
 80151dc:	b2db      	uxtb	r3, r3
 80151de:	4619      	mov	r1, r3
 80151e0:	6878      	ldr	r0, [r7, #4]
 80151e2:	f7ff f973 	bl	80144cc <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80151e6:	4b1d      	ldr	r3, [pc, #116]	; (801525c <USBD_SetConfig+0x148>)
 80151e8:	781b      	ldrb	r3, [r3, #0]
 80151ea:	461a      	mov	r2, r3
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80151f0:	4b1a      	ldr	r3, [pc, #104]	; (801525c <USBD_SetConfig+0x148>)
 80151f2:	781b      	ldrb	r3, [r3, #0]
 80151f4:	4619      	mov	r1, r3
 80151f6:	6878      	ldr	r0, [r7, #4]
 80151f8:	f7ff f94c 	bl	8014494 <USBD_SetClassConfig>
 80151fc:	4603      	mov	r3, r0
 80151fe:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8015200:	7bfb      	ldrb	r3, [r7, #15]
 8015202:	2b00      	cmp	r3, #0
 8015204:	d00f      	beq.n	8015226 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8015206:	6839      	ldr	r1, [r7, #0]
 8015208:	6878      	ldr	r0, [r7, #4]
 801520a:	f000 f903 	bl	8015414 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	685b      	ldr	r3, [r3, #4]
 8015212:	b2db      	uxtb	r3, r3
 8015214:	4619      	mov	r1, r3
 8015216:	6878      	ldr	r0, [r7, #4]
 8015218:	f7ff f958 	bl	80144cc <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	2202      	movs	r2, #2
 8015220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8015224:	e014      	b.n	8015250 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8015226:	6878      	ldr	r0, [r7, #4]
 8015228:	f000 f9bf 	bl	80155aa <USBD_CtlSendStatus>
      break;
 801522c:	e010      	b.n	8015250 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 801522e:	6878      	ldr	r0, [r7, #4]
 8015230:	f000 f9bb 	bl	80155aa <USBD_CtlSendStatus>
      break;
 8015234:	e00c      	b.n	8015250 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8015236:	6839      	ldr	r1, [r7, #0]
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f000 f8eb 	bl	8015414 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801523e:	4b07      	ldr	r3, [pc, #28]	; (801525c <USBD_SetConfig+0x148>)
 8015240:	781b      	ldrb	r3, [r3, #0]
 8015242:	4619      	mov	r1, r3
 8015244:	6878      	ldr	r0, [r7, #4]
 8015246:	f7ff f941 	bl	80144cc <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801524a:	2303      	movs	r3, #3
 801524c:	73fb      	strb	r3, [r7, #15]
      break;
 801524e:	bf00      	nop
  }

  return ret;
 8015250:	7bfb      	ldrb	r3, [r7, #15]
}
 8015252:	4618      	mov	r0, r3
 8015254:	3710      	adds	r7, #16
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}
 801525a:	bf00      	nop
 801525c:	20001cf4 	.word	0x20001cf4

08015260 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b082      	sub	sp, #8
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
 8015268:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801526a:	683b      	ldr	r3, [r7, #0]
 801526c:	88db      	ldrh	r3, [r3, #6]
 801526e:	2b01      	cmp	r3, #1
 8015270:	d004      	beq.n	801527c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8015272:	6839      	ldr	r1, [r7, #0]
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	f000 f8cd 	bl	8015414 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801527a:	e023      	b.n	80152c4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015282:	b2db      	uxtb	r3, r3
 8015284:	2b02      	cmp	r3, #2
 8015286:	dc02      	bgt.n	801528e <USBD_GetConfig+0x2e>
 8015288:	2b00      	cmp	r3, #0
 801528a:	dc03      	bgt.n	8015294 <USBD_GetConfig+0x34>
 801528c:	e015      	b.n	80152ba <USBD_GetConfig+0x5a>
 801528e:	2b03      	cmp	r3, #3
 8015290:	d00b      	beq.n	80152aa <USBD_GetConfig+0x4a>
 8015292:	e012      	b.n	80152ba <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	2200      	movs	r2, #0
 8015298:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	3308      	adds	r3, #8
 801529e:	2201      	movs	r2, #1
 80152a0:	4619      	mov	r1, r3
 80152a2:	6878      	ldr	r0, [r7, #4]
 80152a4:	f000 f927 	bl	80154f6 <USBD_CtlSendData>
        break;
 80152a8:	e00c      	b.n	80152c4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	3304      	adds	r3, #4
 80152ae:	2201      	movs	r2, #1
 80152b0:	4619      	mov	r1, r3
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	f000 f91f 	bl	80154f6 <USBD_CtlSendData>
        break;
 80152b8:	e004      	b.n	80152c4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80152ba:	6839      	ldr	r1, [r7, #0]
 80152bc:	6878      	ldr	r0, [r7, #4]
 80152be:	f000 f8a9 	bl	8015414 <USBD_CtlError>
        break;
 80152c2:	bf00      	nop
}
 80152c4:	bf00      	nop
 80152c6:	3708      	adds	r7, #8
 80152c8:	46bd      	mov	sp, r7
 80152ca:	bd80      	pop	{r7, pc}

080152cc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80152cc:	b580      	push	{r7, lr}
 80152ce:	b082      	sub	sp, #8
 80152d0:	af00      	add	r7, sp, #0
 80152d2:	6078      	str	r0, [r7, #4]
 80152d4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80152dc:	b2db      	uxtb	r3, r3
 80152de:	3b01      	subs	r3, #1
 80152e0:	2b02      	cmp	r3, #2
 80152e2:	d81e      	bhi.n	8015322 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80152e4:	683b      	ldr	r3, [r7, #0]
 80152e6:	88db      	ldrh	r3, [r3, #6]
 80152e8:	2b02      	cmp	r3, #2
 80152ea:	d004      	beq.n	80152f6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80152ec:	6839      	ldr	r1, [r7, #0]
 80152ee:	6878      	ldr	r0, [r7, #4]
 80152f0:	f000 f890 	bl	8015414 <USBD_CtlError>
        break;
 80152f4:	e01a      	b.n	801532c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	2201      	movs	r2, #1
 80152fa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8015302:	2b00      	cmp	r3, #0
 8015304:	d005      	beq.n	8015312 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	68db      	ldr	r3, [r3, #12]
 801530a:	f043 0202 	orr.w	r2, r3, #2
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	330c      	adds	r3, #12
 8015316:	2202      	movs	r2, #2
 8015318:	4619      	mov	r1, r3
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f000 f8eb 	bl	80154f6 <USBD_CtlSendData>
      break;
 8015320:	e004      	b.n	801532c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8015322:	6839      	ldr	r1, [r7, #0]
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	f000 f875 	bl	8015414 <USBD_CtlError>
      break;
 801532a:	bf00      	nop
  }
}
 801532c:	bf00      	nop
 801532e:	3708      	adds	r7, #8
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}

08015334 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015334:	b580      	push	{r7, lr}
 8015336:	b082      	sub	sp, #8
 8015338:	af00      	add	r7, sp, #0
 801533a:	6078      	str	r0, [r7, #4]
 801533c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801533e:	683b      	ldr	r3, [r7, #0]
 8015340:	885b      	ldrh	r3, [r3, #2]
 8015342:	2b01      	cmp	r3, #1
 8015344:	d106      	bne.n	8015354 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	2201      	movs	r2, #1
 801534a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801534e:	6878      	ldr	r0, [r7, #4]
 8015350:	f000 f92b 	bl	80155aa <USBD_CtlSendStatus>
  }
}
 8015354:	bf00      	nop
 8015356:	3708      	adds	r7, #8
 8015358:	46bd      	mov	sp, r7
 801535a:	bd80      	pop	{r7, pc}

0801535c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801535c:	b580      	push	{r7, lr}
 801535e:	b082      	sub	sp, #8
 8015360:	af00      	add	r7, sp, #0
 8015362:	6078      	str	r0, [r7, #4]
 8015364:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801536c:	b2db      	uxtb	r3, r3
 801536e:	3b01      	subs	r3, #1
 8015370:	2b02      	cmp	r3, #2
 8015372:	d80b      	bhi.n	801538c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	885b      	ldrh	r3, [r3, #2]
 8015378:	2b01      	cmp	r3, #1
 801537a:	d10c      	bne.n	8015396 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	2200      	movs	r2, #0
 8015380:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8015384:	6878      	ldr	r0, [r7, #4]
 8015386:	f000 f910 	bl	80155aa <USBD_CtlSendStatus>
      }
      break;
 801538a:	e004      	b.n	8015396 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801538c:	6839      	ldr	r1, [r7, #0]
 801538e:	6878      	ldr	r0, [r7, #4]
 8015390:	f000 f840 	bl	8015414 <USBD_CtlError>
      break;
 8015394:	e000      	b.n	8015398 <USBD_ClrFeature+0x3c>
      break;
 8015396:	bf00      	nop
  }
}
 8015398:	bf00      	nop
 801539a:	3708      	adds	r7, #8
 801539c:	46bd      	mov	sp, r7
 801539e:	bd80      	pop	{r7, pc}

080153a0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b084      	sub	sp, #16
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
 80153a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80153aa:	683b      	ldr	r3, [r7, #0]
 80153ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80153ae:	68fb      	ldr	r3, [r7, #12]
 80153b0:	781a      	ldrb	r2, [r3, #0]
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	3301      	adds	r3, #1
 80153ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	781a      	ldrb	r2, [r3, #0]
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	3301      	adds	r3, #1
 80153c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80153ca:	68f8      	ldr	r0, [r7, #12]
 80153cc:	f7ff fa92 	bl	80148f4 <SWAPBYTE>
 80153d0:	4603      	mov	r3, r0
 80153d2:	461a      	mov	r2, r3
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80153d8:	68fb      	ldr	r3, [r7, #12]
 80153da:	3301      	adds	r3, #1
 80153dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80153de:	68fb      	ldr	r3, [r7, #12]
 80153e0:	3301      	adds	r3, #1
 80153e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80153e4:	68f8      	ldr	r0, [r7, #12]
 80153e6:	f7ff fa85 	bl	80148f4 <SWAPBYTE>
 80153ea:	4603      	mov	r3, r0
 80153ec:	461a      	mov	r2, r3
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80153f2:	68fb      	ldr	r3, [r7, #12]
 80153f4:	3301      	adds	r3, #1
 80153f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	3301      	adds	r3, #1
 80153fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80153fe:	68f8      	ldr	r0, [r7, #12]
 8015400:	f7ff fa78 	bl	80148f4 <SWAPBYTE>
 8015404:	4603      	mov	r3, r0
 8015406:	461a      	mov	r2, r3
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	80da      	strh	r2, [r3, #6]
}
 801540c:	bf00      	nop
 801540e:	3710      	adds	r7, #16
 8015410:	46bd      	mov	sp, r7
 8015412:	bd80      	pop	{r7, pc}

08015414 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	b082      	sub	sp, #8
 8015418:	af00      	add	r7, sp, #0
 801541a:	6078      	str	r0, [r7, #4]
 801541c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801541e:	2180      	movs	r1, #128	; 0x80
 8015420:	6878      	ldr	r0, [r7, #4]
 8015422:	f000 fc95 	bl	8015d50 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8015426:	2100      	movs	r1, #0
 8015428:	6878      	ldr	r0, [r7, #4]
 801542a:	f000 fc91 	bl	8015d50 <USBD_LL_StallEP>
}
 801542e:	bf00      	nop
 8015430:	3708      	adds	r7, #8
 8015432:	46bd      	mov	sp, r7
 8015434:	bd80      	pop	{r7, pc}

08015436 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8015436:	b580      	push	{r7, lr}
 8015438:	b086      	sub	sp, #24
 801543a:	af00      	add	r7, sp, #0
 801543c:	60f8      	str	r0, [r7, #12]
 801543e:	60b9      	str	r1, [r7, #8]
 8015440:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015442:	2300      	movs	r3, #0
 8015444:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d036      	beq.n	80154ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8015450:	6938      	ldr	r0, [r7, #16]
 8015452:	f000 f836 	bl	80154c2 <USBD_GetLen>
 8015456:	4603      	mov	r3, r0
 8015458:	3301      	adds	r3, #1
 801545a:	b29b      	uxth	r3, r3
 801545c:	005b      	lsls	r3, r3, #1
 801545e:	b29a      	uxth	r2, r3
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8015464:	7dfb      	ldrb	r3, [r7, #23]
 8015466:	68ba      	ldr	r2, [r7, #8]
 8015468:	4413      	add	r3, r2
 801546a:	687a      	ldr	r2, [r7, #4]
 801546c:	7812      	ldrb	r2, [r2, #0]
 801546e:	701a      	strb	r2, [r3, #0]
  idx++;
 8015470:	7dfb      	ldrb	r3, [r7, #23]
 8015472:	3301      	adds	r3, #1
 8015474:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8015476:	7dfb      	ldrb	r3, [r7, #23]
 8015478:	68ba      	ldr	r2, [r7, #8]
 801547a:	4413      	add	r3, r2
 801547c:	2203      	movs	r2, #3
 801547e:	701a      	strb	r2, [r3, #0]
  idx++;
 8015480:	7dfb      	ldrb	r3, [r7, #23]
 8015482:	3301      	adds	r3, #1
 8015484:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8015486:	e013      	b.n	80154b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8015488:	7dfb      	ldrb	r3, [r7, #23]
 801548a:	68ba      	ldr	r2, [r7, #8]
 801548c:	4413      	add	r3, r2
 801548e:	693a      	ldr	r2, [r7, #16]
 8015490:	7812      	ldrb	r2, [r2, #0]
 8015492:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8015494:	693b      	ldr	r3, [r7, #16]
 8015496:	3301      	adds	r3, #1
 8015498:	613b      	str	r3, [r7, #16]
    idx++;
 801549a:	7dfb      	ldrb	r3, [r7, #23]
 801549c:	3301      	adds	r3, #1
 801549e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80154a0:	7dfb      	ldrb	r3, [r7, #23]
 80154a2:	68ba      	ldr	r2, [r7, #8]
 80154a4:	4413      	add	r3, r2
 80154a6:	2200      	movs	r2, #0
 80154a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80154aa:	7dfb      	ldrb	r3, [r7, #23]
 80154ac:	3301      	adds	r3, #1
 80154ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	781b      	ldrb	r3, [r3, #0]
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	d1e7      	bne.n	8015488 <USBD_GetString+0x52>
 80154b8:	e000      	b.n	80154bc <USBD_GetString+0x86>
    return;
 80154ba:	bf00      	nop
  }
}
 80154bc:	3718      	adds	r7, #24
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd80      	pop	{r7, pc}

080154c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80154c2:	b480      	push	{r7}
 80154c4:	b085      	sub	sp, #20
 80154c6:	af00      	add	r7, sp, #0
 80154c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80154ca:	2300      	movs	r3, #0
 80154cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80154d2:	e005      	b.n	80154e0 <USBD_GetLen+0x1e>
  {
    len++;
 80154d4:	7bfb      	ldrb	r3, [r7, #15]
 80154d6:	3301      	adds	r3, #1
 80154d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80154da:	68bb      	ldr	r3, [r7, #8]
 80154dc:	3301      	adds	r3, #1
 80154de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	781b      	ldrb	r3, [r3, #0]
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d1f5      	bne.n	80154d4 <USBD_GetLen+0x12>
  }

  return len;
 80154e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80154ea:	4618      	mov	r0, r3
 80154ec:	3714      	adds	r7, #20
 80154ee:	46bd      	mov	sp, r7
 80154f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f4:	4770      	bx	lr

080154f6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80154f6:	b580      	push	{r7, lr}
 80154f8:	b084      	sub	sp, #16
 80154fa:	af00      	add	r7, sp, #0
 80154fc:	60f8      	str	r0, [r7, #12]
 80154fe:	60b9      	str	r1, [r7, #8]
 8015500:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	2202      	movs	r2, #2
 8015506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	687a      	ldr	r2, [r7, #4]
 801550e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	687a      	ldr	r2, [r7, #4]
 8015514:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	68ba      	ldr	r2, [r7, #8]
 801551a:	2100      	movs	r1, #0
 801551c:	68f8      	ldr	r0, [r7, #12]
 801551e:	f000 fca0 	bl	8015e62 <USBD_LL_Transmit>

  return USBD_OK;
 8015522:	2300      	movs	r3, #0
}
 8015524:	4618      	mov	r0, r3
 8015526:	3710      	adds	r7, #16
 8015528:	46bd      	mov	sp, r7
 801552a:	bd80      	pop	{r7, pc}

0801552c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b084      	sub	sp, #16
 8015530:	af00      	add	r7, sp, #0
 8015532:	60f8      	str	r0, [r7, #12]
 8015534:	60b9      	str	r1, [r7, #8]
 8015536:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	68ba      	ldr	r2, [r7, #8]
 801553c:	2100      	movs	r1, #0
 801553e:	68f8      	ldr	r0, [r7, #12]
 8015540:	f000 fc8f 	bl	8015e62 <USBD_LL_Transmit>

  return USBD_OK;
 8015544:	2300      	movs	r3, #0
}
 8015546:	4618      	mov	r0, r3
 8015548:	3710      	adds	r7, #16
 801554a:	46bd      	mov	sp, r7
 801554c:	bd80      	pop	{r7, pc}

0801554e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 801554e:	b580      	push	{r7, lr}
 8015550:	b084      	sub	sp, #16
 8015552:	af00      	add	r7, sp, #0
 8015554:	60f8      	str	r0, [r7, #12]
 8015556:	60b9      	str	r1, [r7, #8]
 8015558:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	2203      	movs	r2, #3
 801555e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	687a      	ldr	r2, [r7, #4]
 8015566:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	687a      	ldr	r2, [r7, #4]
 801556e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	68ba      	ldr	r2, [r7, #8]
 8015576:	2100      	movs	r1, #0
 8015578:	68f8      	ldr	r0, [r7, #12]
 801557a:	f000 fc93 	bl	8015ea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801557e:	2300      	movs	r3, #0
}
 8015580:	4618      	mov	r0, r3
 8015582:	3710      	adds	r7, #16
 8015584:	46bd      	mov	sp, r7
 8015586:	bd80      	pop	{r7, pc}

08015588 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8015588:	b580      	push	{r7, lr}
 801558a:	b084      	sub	sp, #16
 801558c:	af00      	add	r7, sp, #0
 801558e:	60f8      	str	r0, [r7, #12]
 8015590:	60b9      	str	r1, [r7, #8]
 8015592:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	68ba      	ldr	r2, [r7, #8]
 8015598:	2100      	movs	r1, #0
 801559a:	68f8      	ldr	r0, [r7, #12]
 801559c:	f000 fc82 	bl	8015ea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80155a0:	2300      	movs	r3, #0
}
 80155a2:	4618      	mov	r0, r3
 80155a4:	3710      	adds	r7, #16
 80155a6:	46bd      	mov	sp, r7
 80155a8:	bd80      	pop	{r7, pc}

080155aa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80155aa:	b580      	push	{r7, lr}
 80155ac:	b082      	sub	sp, #8
 80155ae:	af00      	add	r7, sp, #0
 80155b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	2204      	movs	r2, #4
 80155b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80155ba:	2300      	movs	r3, #0
 80155bc:	2200      	movs	r2, #0
 80155be:	2100      	movs	r1, #0
 80155c0:	6878      	ldr	r0, [r7, #4]
 80155c2:	f000 fc4e 	bl	8015e62 <USBD_LL_Transmit>

  return USBD_OK;
 80155c6:	2300      	movs	r3, #0
}
 80155c8:	4618      	mov	r0, r3
 80155ca:	3708      	adds	r7, #8
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2205      	movs	r2, #5
 80155dc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80155e0:	2300      	movs	r3, #0
 80155e2:	2200      	movs	r2, #0
 80155e4:	2100      	movs	r1, #0
 80155e6:	6878      	ldr	r0, [r7, #4]
 80155e8:	f000 fc5c 	bl	8015ea4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80155ec:	2300      	movs	r3, #0
}
 80155ee:	4618      	mov	r0, r3
 80155f0:	3708      	adds	r7, #8
 80155f2:	46bd      	mov	sp, r7
 80155f4:	bd80      	pop	{r7, pc}
	...

080155f8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80155fc:	2200      	movs	r2, #0
 80155fe:	4912      	ldr	r1, [pc, #72]	; (8015648 <MX_USB_Device_Init+0x50>)
 8015600:	4812      	ldr	r0, [pc, #72]	; (801564c <MX_USB_Device_Init+0x54>)
 8015602:	f7fe fed9 	bl	80143b8 <USBD_Init>
 8015606:	4603      	mov	r3, r0
 8015608:	2b00      	cmp	r3, #0
 801560a:	d001      	beq.n	8015610 <MX_USB_Device_Init+0x18>
    Error_Handler();
 801560c:	f7ee fbf6 	bl	8003dfc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8015610:	490f      	ldr	r1, [pc, #60]	; (8015650 <MX_USB_Device_Init+0x58>)
 8015612:	480e      	ldr	r0, [pc, #56]	; (801564c <MX_USB_Device_Init+0x54>)
 8015614:	f7fe ff00 	bl	8014418 <USBD_RegisterClass>
 8015618:	4603      	mov	r3, r0
 801561a:	2b00      	cmp	r3, #0
 801561c:	d001      	beq.n	8015622 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 801561e:	f7ee fbed 	bl	8003dfc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8015622:	490c      	ldr	r1, [pc, #48]	; (8015654 <MX_USB_Device_Init+0x5c>)
 8015624:	4809      	ldr	r0, [pc, #36]	; (801564c <MX_USB_Device_Init+0x54>)
 8015626:	f7fe fe21 	bl	801426c <USBD_CDC_RegisterInterface>
 801562a:	4603      	mov	r3, r0
 801562c:	2b00      	cmp	r3, #0
 801562e:	d001      	beq.n	8015634 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8015630:	f7ee fbe4 	bl	8003dfc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8015634:	4805      	ldr	r0, [pc, #20]	; (801564c <MX_USB_Device_Init+0x54>)
 8015636:	f7fe ff16 	bl	8014466 <USBD_Start>
 801563a:	4603      	mov	r3, r0
 801563c:	2b00      	cmp	r3, #0
 801563e:	d001      	beq.n	8015644 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8015640:	f7ee fbdc 	bl	8003dfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8015644:	bf00      	nop
 8015646:	bd80      	pop	{r7, pc}
 8015648:	200002f0 	.word	0x200002f0
 801564c:	20001cf8 	.word	0x20001cf8
 8015650:	200001d8 	.word	0x200001d8
 8015654:	200002dc 	.word	0x200002dc

08015658 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015658:	b580      	push	{r7, lr}
 801565a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801565c:	2200      	movs	r2, #0
 801565e:	4905      	ldr	r1, [pc, #20]	; (8015674 <CDC_Init_FS+0x1c>)
 8015660:	4805      	ldr	r0, [pc, #20]	; (8015678 <CDC_Init_FS+0x20>)
 8015662:	f7fe fe18 	bl	8014296 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015666:	4905      	ldr	r1, [pc, #20]	; (801567c <CDC_Init_FS+0x24>)
 8015668:	4803      	ldr	r0, [pc, #12]	; (8015678 <CDC_Init_FS+0x20>)
 801566a:	f7fe fe32 	bl	80142d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801566e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015670:	4618      	mov	r0, r3
 8015672:	bd80      	pop	{r7, pc}
 8015674:	200023c8 	.word	0x200023c8
 8015678:	20001cf8 	.word	0x20001cf8
 801567c:	20001fc8 	.word	0x20001fc8

08015680 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015680:	b480      	push	{r7}
 8015682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015684:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015686:	4618      	mov	r0, r3
 8015688:	46bd      	mov	sp, r7
 801568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801568e:	4770      	bx	lr

08015690 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015690:	b480      	push	{r7}
 8015692:	b083      	sub	sp, #12
 8015694:	af00      	add	r7, sp, #0
 8015696:	4603      	mov	r3, r0
 8015698:	6039      	str	r1, [r7, #0]
 801569a:	71fb      	strb	r3, [r7, #7]
 801569c:	4613      	mov	r3, r2
 801569e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80156a0:	79fb      	ldrb	r3, [r7, #7]
 80156a2:	2b23      	cmp	r3, #35	; 0x23
 80156a4:	d84a      	bhi.n	801573c <CDC_Control_FS+0xac>
 80156a6:	a201      	add	r2, pc, #4	; (adr r2, 80156ac <CDC_Control_FS+0x1c>)
 80156a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80156ac:	0801573d 	.word	0x0801573d
 80156b0:	0801573d 	.word	0x0801573d
 80156b4:	0801573d 	.word	0x0801573d
 80156b8:	0801573d 	.word	0x0801573d
 80156bc:	0801573d 	.word	0x0801573d
 80156c0:	0801573d 	.word	0x0801573d
 80156c4:	0801573d 	.word	0x0801573d
 80156c8:	0801573d 	.word	0x0801573d
 80156cc:	0801573d 	.word	0x0801573d
 80156d0:	0801573d 	.word	0x0801573d
 80156d4:	0801573d 	.word	0x0801573d
 80156d8:	0801573d 	.word	0x0801573d
 80156dc:	0801573d 	.word	0x0801573d
 80156e0:	0801573d 	.word	0x0801573d
 80156e4:	0801573d 	.word	0x0801573d
 80156e8:	0801573d 	.word	0x0801573d
 80156ec:	0801573d 	.word	0x0801573d
 80156f0:	0801573d 	.word	0x0801573d
 80156f4:	0801573d 	.word	0x0801573d
 80156f8:	0801573d 	.word	0x0801573d
 80156fc:	0801573d 	.word	0x0801573d
 8015700:	0801573d 	.word	0x0801573d
 8015704:	0801573d 	.word	0x0801573d
 8015708:	0801573d 	.word	0x0801573d
 801570c:	0801573d 	.word	0x0801573d
 8015710:	0801573d 	.word	0x0801573d
 8015714:	0801573d 	.word	0x0801573d
 8015718:	0801573d 	.word	0x0801573d
 801571c:	0801573d 	.word	0x0801573d
 8015720:	0801573d 	.word	0x0801573d
 8015724:	0801573d 	.word	0x0801573d
 8015728:	0801573d 	.word	0x0801573d
 801572c:	0801573d 	.word	0x0801573d
 8015730:	0801573d 	.word	0x0801573d
 8015734:	0801573d 	.word	0x0801573d
 8015738:	0801573d 	.word	0x0801573d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801573c:	bf00      	nop
  }

  return (USBD_OK);
 801573e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015740:	4618      	mov	r0, r3
 8015742:	370c      	adds	r7, #12
 8015744:	46bd      	mov	sp, r7
 8015746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574a:	4770      	bx	lr

0801574c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801574c:	b580      	push	{r7, lr}
 801574e:	b082      	sub	sp, #8
 8015750:	af00      	add	r7, sp, #0
 8015752:	6078      	str	r0, [r7, #4]
 8015754:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015756:	6879      	ldr	r1, [r7, #4]
 8015758:	4805      	ldr	r0, [pc, #20]	; (8015770 <CDC_Receive_FS+0x24>)
 801575a:	f7fe fdba 	bl	80142d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801575e:	4804      	ldr	r0, [pc, #16]	; (8015770 <CDC_Receive_FS+0x24>)
 8015760:	f7fe fe00 	bl	8014364 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015764:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015766:	4618      	mov	r0, r3
 8015768:	3708      	adds	r7, #8
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	20001cf8 	.word	0x20001cf8

08015774 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b084      	sub	sp, #16
 8015778:	af00      	add	r7, sp, #0
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	460b      	mov	r3, r1
 801577e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015780:	2300      	movs	r3, #0
 8015782:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015784:	4b0d      	ldr	r3, [pc, #52]	; (80157bc <CDC_Transmit_FS+0x48>)
 8015786:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801578a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015792:	2b00      	cmp	r3, #0
 8015794:	d001      	beq.n	801579a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015796:	2301      	movs	r3, #1
 8015798:	e00b      	b.n	80157b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801579a:	887b      	ldrh	r3, [r7, #2]
 801579c:	461a      	mov	r2, r3
 801579e:	6879      	ldr	r1, [r7, #4]
 80157a0:	4806      	ldr	r0, [pc, #24]	; (80157bc <CDC_Transmit_FS+0x48>)
 80157a2:	f7fe fd78 	bl	8014296 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80157a6:	4805      	ldr	r0, [pc, #20]	; (80157bc <CDC_Transmit_FS+0x48>)
 80157a8:	f7fe fdac 	bl	8014304 <USBD_CDC_TransmitPacket>
 80157ac:	4603      	mov	r3, r0
 80157ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80157b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80157b2:	4618      	mov	r0, r3
 80157b4:	3710      	adds	r7, #16
 80157b6:	46bd      	mov	sp, r7
 80157b8:	bd80      	pop	{r7, pc}
 80157ba:	bf00      	nop
 80157bc:	20001cf8 	.word	0x20001cf8

080157c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80157c0:	b480      	push	{r7}
 80157c2:	b087      	sub	sp, #28
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	60f8      	str	r0, [r7, #12]
 80157c8:	60b9      	str	r1, [r7, #8]
 80157ca:	4613      	mov	r3, r2
 80157cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80157ce:	2300      	movs	r3, #0
 80157d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80157d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80157d6:	4618      	mov	r0, r3
 80157d8:	371c      	adds	r7, #28
 80157da:	46bd      	mov	sp, r7
 80157dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157e0:	4770      	bx	lr
	...

080157e4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80157e4:	b480      	push	{r7}
 80157e6:	b083      	sub	sp, #12
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	4603      	mov	r3, r0
 80157ec:	6039      	str	r1, [r7, #0]
 80157ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 80157f0:	683b      	ldr	r3, [r7, #0]
 80157f2:	2212      	movs	r2, #18
 80157f4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 80157f6:	4b03      	ldr	r3, [pc, #12]	; (8015804 <USBD_CDC_DeviceDescriptor+0x20>)
}
 80157f8:	4618      	mov	r0, r3
 80157fa:	370c      	adds	r7, #12
 80157fc:	46bd      	mov	sp, r7
 80157fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015802:	4770      	bx	lr
 8015804:	20000310 	.word	0x20000310

08015808 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015808:	b480      	push	{r7}
 801580a:	b083      	sub	sp, #12
 801580c:	af00      	add	r7, sp, #0
 801580e:	4603      	mov	r3, r0
 8015810:	6039      	str	r1, [r7, #0]
 8015812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015814:	683b      	ldr	r3, [r7, #0]
 8015816:	2204      	movs	r2, #4
 8015818:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801581a:	4b03      	ldr	r3, [pc, #12]	; (8015828 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 801581c:	4618      	mov	r0, r3
 801581e:	370c      	adds	r7, #12
 8015820:	46bd      	mov	sp, r7
 8015822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015826:	4770      	bx	lr
 8015828:	20000324 	.word	0x20000324

0801582c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801582c:	b580      	push	{r7, lr}
 801582e:	b082      	sub	sp, #8
 8015830:	af00      	add	r7, sp, #0
 8015832:	4603      	mov	r3, r0
 8015834:	6039      	str	r1, [r7, #0]
 8015836:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015838:	79fb      	ldrb	r3, [r7, #7]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d105      	bne.n	801584a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801583e:	683a      	ldr	r2, [r7, #0]
 8015840:	4907      	ldr	r1, [pc, #28]	; (8015860 <USBD_CDC_ProductStrDescriptor+0x34>)
 8015842:	4808      	ldr	r0, [pc, #32]	; (8015864 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015844:	f7ff fdf7 	bl	8015436 <USBD_GetString>
 8015848:	e004      	b.n	8015854 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 801584a:	683a      	ldr	r2, [r7, #0]
 801584c:	4904      	ldr	r1, [pc, #16]	; (8015860 <USBD_CDC_ProductStrDescriptor+0x34>)
 801584e:	4805      	ldr	r0, [pc, #20]	; (8015864 <USBD_CDC_ProductStrDescriptor+0x38>)
 8015850:	f7ff fdf1 	bl	8015436 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015854:	4b02      	ldr	r3, [pc, #8]	; (8015860 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8015856:	4618      	mov	r0, r3
 8015858:	3708      	adds	r7, #8
 801585a:	46bd      	mov	sp, r7
 801585c:	bd80      	pop	{r7, pc}
 801585e:	bf00      	nop
 8015860:	200027c8 	.word	0x200027c8
 8015864:	0801915c 	.word	0x0801915c

08015868 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b082      	sub	sp, #8
 801586c:	af00      	add	r7, sp, #0
 801586e:	4603      	mov	r3, r0
 8015870:	6039      	str	r1, [r7, #0]
 8015872:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015874:	683a      	ldr	r2, [r7, #0]
 8015876:	4904      	ldr	r1, [pc, #16]	; (8015888 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8015878:	4804      	ldr	r0, [pc, #16]	; (801588c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 801587a:	f7ff fddc 	bl	8015436 <USBD_GetString>
  return USBD_StrDesc;
 801587e:	4b02      	ldr	r3, [pc, #8]	; (8015888 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8015880:	4618      	mov	r0, r3
 8015882:	3708      	adds	r7, #8
 8015884:	46bd      	mov	sp, r7
 8015886:	bd80      	pop	{r7, pc}
 8015888:	200027c8 	.word	0x200027c8
 801588c:	08019174 	.word	0x08019174

08015890 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b082      	sub	sp, #8
 8015894:	af00      	add	r7, sp, #0
 8015896:	4603      	mov	r3, r0
 8015898:	6039      	str	r1, [r7, #0]
 801589a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801589c:	683b      	ldr	r3, [r7, #0]
 801589e:	221a      	movs	r2, #26
 80158a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80158a2:	f000 f843 	bl	801592c <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80158a6:	4b02      	ldr	r3, [pc, #8]	; (80158b0 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 80158a8:	4618      	mov	r0, r3
 80158aa:	3708      	adds	r7, #8
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	20000328 	.word	0x20000328

080158b4 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158b4:	b580      	push	{r7, lr}
 80158b6:	b082      	sub	sp, #8
 80158b8:	af00      	add	r7, sp, #0
 80158ba:	4603      	mov	r3, r0
 80158bc:	6039      	str	r1, [r7, #0]
 80158be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80158c0:	79fb      	ldrb	r3, [r7, #7]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d105      	bne.n	80158d2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80158c6:	683a      	ldr	r2, [r7, #0]
 80158c8:	4907      	ldr	r1, [pc, #28]	; (80158e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80158ca:	4808      	ldr	r0, [pc, #32]	; (80158ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 80158cc:	f7ff fdb3 	bl	8015436 <USBD_GetString>
 80158d0:	e004      	b.n	80158dc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80158d2:	683a      	ldr	r2, [r7, #0]
 80158d4:	4904      	ldr	r1, [pc, #16]	; (80158e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80158d6:	4805      	ldr	r0, [pc, #20]	; (80158ec <USBD_CDC_ConfigStrDescriptor+0x38>)
 80158d8:	f7ff fdad 	bl	8015436 <USBD_GetString>
  }
  return USBD_StrDesc;
 80158dc:	4b02      	ldr	r3, [pc, #8]	; (80158e8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80158de:	4618      	mov	r0, r3
 80158e0:	3708      	adds	r7, #8
 80158e2:	46bd      	mov	sp, r7
 80158e4:	bd80      	pop	{r7, pc}
 80158e6:	bf00      	nop
 80158e8:	200027c8 	.word	0x200027c8
 80158ec:	08019188 	.word	0x08019188

080158f0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80158f0:	b580      	push	{r7, lr}
 80158f2:	b082      	sub	sp, #8
 80158f4:	af00      	add	r7, sp, #0
 80158f6:	4603      	mov	r3, r0
 80158f8:	6039      	str	r1, [r7, #0]
 80158fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80158fc:	79fb      	ldrb	r3, [r7, #7]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d105      	bne.n	801590e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8015902:	683a      	ldr	r2, [r7, #0]
 8015904:	4907      	ldr	r1, [pc, #28]	; (8015924 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015906:	4808      	ldr	r0, [pc, #32]	; (8015928 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015908:	f7ff fd95 	bl	8015436 <USBD_GetString>
 801590c:	e004      	b.n	8015918 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 801590e:	683a      	ldr	r2, [r7, #0]
 8015910:	4904      	ldr	r1, [pc, #16]	; (8015924 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8015912:	4805      	ldr	r0, [pc, #20]	; (8015928 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8015914:	f7ff fd8f 	bl	8015436 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015918:	4b02      	ldr	r3, [pc, #8]	; (8015924 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 801591a:	4618      	mov	r0, r3
 801591c:	3708      	adds	r7, #8
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}
 8015922:	bf00      	nop
 8015924:	200027c8 	.word	0x200027c8
 8015928:	08019194 	.word	0x08019194

0801592c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b084      	sub	sp, #16
 8015930:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015932:	4b0f      	ldr	r3, [pc, #60]	; (8015970 <Get_SerialNum+0x44>)
 8015934:	681b      	ldr	r3, [r3, #0]
 8015936:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015938:	4b0e      	ldr	r3, [pc, #56]	; (8015974 <Get_SerialNum+0x48>)
 801593a:	681b      	ldr	r3, [r3, #0]
 801593c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801593e:	4b0e      	ldr	r3, [pc, #56]	; (8015978 <Get_SerialNum+0x4c>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015944:	68fa      	ldr	r2, [r7, #12]
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	4413      	add	r3, r2
 801594a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d009      	beq.n	8015966 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015952:	2208      	movs	r2, #8
 8015954:	4909      	ldr	r1, [pc, #36]	; (801597c <Get_SerialNum+0x50>)
 8015956:	68f8      	ldr	r0, [r7, #12]
 8015958:	f000 f814 	bl	8015984 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801595c:	2204      	movs	r2, #4
 801595e:	4908      	ldr	r1, [pc, #32]	; (8015980 <Get_SerialNum+0x54>)
 8015960:	68b8      	ldr	r0, [r7, #8]
 8015962:	f000 f80f 	bl	8015984 <IntToUnicode>
  }
}
 8015966:	bf00      	nop
 8015968:	3710      	adds	r7, #16
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	1fff7590 	.word	0x1fff7590
 8015974:	1fff7594 	.word	0x1fff7594
 8015978:	1fff7598 	.word	0x1fff7598
 801597c:	2000032a 	.word	0x2000032a
 8015980:	2000033a 	.word	0x2000033a

08015984 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015984:	b480      	push	{r7}
 8015986:	b087      	sub	sp, #28
 8015988:	af00      	add	r7, sp, #0
 801598a:	60f8      	str	r0, [r7, #12]
 801598c:	60b9      	str	r1, [r7, #8]
 801598e:	4613      	mov	r3, r2
 8015990:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015992:	2300      	movs	r3, #0
 8015994:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015996:	2300      	movs	r3, #0
 8015998:	75fb      	strb	r3, [r7, #23]
 801599a:	e027      	b.n	80159ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	0f1b      	lsrs	r3, r3, #28
 80159a0:	2b09      	cmp	r3, #9
 80159a2:	d80b      	bhi.n	80159bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	0f1b      	lsrs	r3, r3, #28
 80159a8:	b2da      	uxtb	r2, r3
 80159aa:	7dfb      	ldrb	r3, [r7, #23]
 80159ac:	005b      	lsls	r3, r3, #1
 80159ae:	4619      	mov	r1, r3
 80159b0:	68bb      	ldr	r3, [r7, #8]
 80159b2:	440b      	add	r3, r1
 80159b4:	3230      	adds	r2, #48	; 0x30
 80159b6:	b2d2      	uxtb	r2, r2
 80159b8:	701a      	strb	r2, [r3, #0]
 80159ba:	e00a      	b.n	80159d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	0f1b      	lsrs	r3, r3, #28
 80159c0:	b2da      	uxtb	r2, r3
 80159c2:	7dfb      	ldrb	r3, [r7, #23]
 80159c4:	005b      	lsls	r3, r3, #1
 80159c6:	4619      	mov	r1, r3
 80159c8:	68bb      	ldr	r3, [r7, #8]
 80159ca:	440b      	add	r3, r1
 80159cc:	3237      	adds	r2, #55	; 0x37
 80159ce:	b2d2      	uxtb	r2, r2
 80159d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	011b      	lsls	r3, r3, #4
 80159d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80159d8:	7dfb      	ldrb	r3, [r7, #23]
 80159da:	005b      	lsls	r3, r3, #1
 80159dc:	3301      	adds	r3, #1
 80159de:	68ba      	ldr	r2, [r7, #8]
 80159e0:	4413      	add	r3, r2
 80159e2:	2200      	movs	r2, #0
 80159e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80159e6:	7dfb      	ldrb	r3, [r7, #23]
 80159e8:	3301      	adds	r3, #1
 80159ea:	75fb      	strb	r3, [r7, #23]
 80159ec:	7dfa      	ldrb	r2, [r7, #23]
 80159ee:	79fb      	ldrb	r3, [r7, #7]
 80159f0:	429a      	cmp	r2, r3
 80159f2:	d3d3      	bcc.n	801599c <IntToUnicode+0x18>
  }
}
 80159f4:	bf00      	nop
 80159f6:	bf00      	nop
 80159f8:	371c      	adds	r7, #28
 80159fa:	46bd      	mov	sp, r7
 80159fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a00:	4770      	bx	lr
	...

08015a04 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b094      	sub	sp, #80	; 0x50
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8015a0c:	f107 030c 	add.w	r3, r7, #12
 8015a10:	2244      	movs	r2, #68	; 0x44
 8015a12:	2100      	movs	r1, #0
 8015a14:	4618      	mov	r0, r3
 8015a16:	f001 f884 	bl	8016b22 <memset>
  if(pcdHandle->Instance==USB)
 8015a1a:	687b      	ldr	r3, [r7, #4]
 8015a1c:	681b      	ldr	r3, [r3, #0]
 8015a1e:	4a15      	ldr	r2, [pc, #84]	; (8015a74 <HAL_PCD_MspInit+0x70>)
 8015a20:	4293      	cmp	r3, r2
 8015a22:	d122      	bne.n	8015a6a <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8015a24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8015a28:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8015a2e:	f107 030c 	add.w	r3, r7, #12
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7f6 fc16 	bl	800c264 <HAL_RCCEx_PeriphCLKConfig>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	2b00      	cmp	r3, #0
 8015a3c:	d001      	beq.n	8015a42 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8015a3e:	f7ee f9dd 	bl	8003dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8015a42:	4b0d      	ldr	r3, [pc, #52]	; (8015a78 <HAL_PCD_MspInit+0x74>)
 8015a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a46:	4a0c      	ldr	r2, [pc, #48]	; (8015a78 <HAL_PCD_MspInit+0x74>)
 8015a48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8015a4e:	4b0a      	ldr	r3, [pc, #40]	; (8015a78 <HAL_PCD_MspInit+0x74>)
 8015a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015a52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015a56:	60bb      	str	r3, [r7, #8]
 8015a58:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	2100      	movs	r1, #0
 8015a5e:	2014      	movs	r0, #20
 8015a60:	f7f2 feb7 	bl	80087d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8015a64:	2014      	movs	r0, #20
 8015a66:	f7f2 fece 	bl	8008806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8015a6a:	bf00      	nop
 8015a6c:	3750      	adds	r7, #80	; 0x50
 8015a6e:	46bd      	mov	sp, r7
 8015a70:	bd80      	pop	{r7, pc}
 8015a72:	bf00      	nop
 8015a74:	40005c00 	.word	0x40005c00
 8015a78:	40021000 	.word	0x40021000

08015a7c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b082      	sub	sp, #8
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 8015a90:	4619      	mov	r1, r3
 8015a92:	4610      	mov	r0, r2
 8015a94:	f7fe fd32 	bl	80144fc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8015a98:	bf00      	nop
 8015a9a:	3708      	adds	r7, #8
 8015a9c:	46bd      	mov	sp, r7
 8015a9e:	bd80      	pop	{r7, pc}

08015aa0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015aa0:	b580      	push	{r7, lr}
 8015aa2:	b082      	sub	sp, #8
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
 8015aa8:	460b      	mov	r3, r1
 8015aaa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8015ab2:	78fa      	ldrb	r2, [r7, #3]
 8015ab4:	6879      	ldr	r1, [r7, #4]
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	009b      	lsls	r3, r3, #2
 8015aba:	4413      	add	r3, r2
 8015abc:	00db      	lsls	r3, r3, #3
 8015abe:	440b      	add	r3, r1
 8015ac0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015ac4:	681a      	ldr	r2, [r3, #0]
 8015ac6:	78fb      	ldrb	r3, [r7, #3]
 8015ac8:	4619      	mov	r1, r3
 8015aca:	f7fe fd6c 	bl	80145a6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8015ace:	bf00      	nop
 8015ad0:	3708      	adds	r7, #8
 8015ad2:	46bd      	mov	sp, r7
 8015ad4:	bd80      	pop	{r7, pc}

08015ad6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ad6:	b580      	push	{r7, lr}
 8015ad8:	b082      	sub	sp, #8
 8015ada:	af00      	add	r7, sp, #0
 8015adc:	6078      	str	r0, [r7, #4]
 8015ade:	460b      	mov	r3, r1
 8015ae0:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 8015ae8:	78fa      	ldrb	r2, [r7, #3]
 8015aea:	6879      	ldr	r1, [r7, #4]
 8015aec:	4613      	mov	r3, r2
 8015aee:	009b      	lsls	r3, r3, #2
 8015af0:	4413      	add	r3, r2
 8015af2:	00db      	lsls	r3, r3, #3
 8015af4:	440b      	add	r3, r1
 8015af6:	3324      	adds	r3, #36	; 0x24
 8015af8:	681a      	ldr	r2, [r3, #0]
 8015afa:	78fb      	ldrb	r3, [r7, #3]
 8015afc:	4619      	mov	r1, r3
 8015afe:	f7fe fdb5 	bl	801466c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8015b02:	bf00      	nop
 8015b04:	3708      	adds	r7, #8
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}

08015b0a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b0a:	b580      	push	{r7, lr}
 8015b0c:	b082      	sub	sp, #8
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f7fe fec9 	bl	80148b0 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8015b1e:	bf00      	nop
 8015b20:	3708      	adds	r7, #8
 8015b22:	46bd      	mov	sp, r7
 8015b24:	bd80      	pop	{r7, pc}

08015b26 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b26:	b580      	push	{r7, lr}
 8015b28:	b084      	sub	sp, #16
 8015b2a:	af00      	add	r7, sp, #0
 8015b2c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015b2e:	2301      	movs	r3, #1
 8015b30:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	795b      	ldrb	r3, [r3, #5]
 8015b36:	2b02      	cmp	r3, #2
 8015b38:	d001      	beq.n	8015b3e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8015b3a:	f7ee f95f 	bl	8003dfc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015b3e:	687b      	ldr	r3, [r7, #4]
 8015b40:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015b44:	7bfa      	ldrb	r2, [r7, #15]
 8015b46:	4611      	mov	r1, r2
 8015b48:	4618      	mov	r0, r3
 8015b4a:	f7fe fe73 	bl	8014834 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015b54:	4618      	mov	r0, r3
 8015b56:	f7fe fe1f 	bl	8014798 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8015b5a:	bf00      	nop
 8015b5c:	3710      	adds	r7, #16
 8015b5e:	46bd      	mov	sp, r7
 8015b60:	bd80      	pop	{r7, pc}
	...

08015b64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015b72:	4618      	mov	r0, r3
 8015b74:	f7fe fe6e 	bl	8014854 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	7a5b      	ldrb	r3, [r3, #9]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d005      	beq.n	8015b8c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015b80:	4b04      	ldr	r3, [pc, #16]	; (8015b94 <HAL_PCD_SuspendCallback+0x30>)
 8015b82:	691b      	ldr	r3, [r3, #16]
 8015b84:	4a03      	ldr	r2, [pc, #12]	; (8015b94 <HAL_PCD_SuspendCallback+0x30>)
 8015b86:	f043 0306 	orr.w	r3, r3, #6
 8015b8a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8015b8c:	bf00      	nop
 8015b8e:	3708      	adds	r7, #8
 8015b90:	46bd      	mov	sp, r7
 8015b92:	bd80      	pop	{r7, pc}
 8015b94:	e000ed00 	.word	0xe000ed00

08015b98 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b082      	sub	sp, #8
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	7a5b      	ldrb	r3, [r3, #9]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d007      	beq.n	8015bb8 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ba8:	4b08      	ldr	r3, [pc, #32]	; (8015bcc <HAL_PCD_ResumeCallback+0x34>)
 8015baa:	691b      	ldr	r3, [r3, #16]
 8015bac:	4a07      	ldr	r2, [pc, #28]	; (8015bcc <HAL_PCD_ResumeCallback+0x34>)
 8015bae:	f023 0306 	bic.w	r3, r3, #6
 8015bb2:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8015bb4:	f000 f9f8 	bl	8015fa8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015bb8:	687b      	ldr	r3, [r7, #4]
 8015bba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	f7fe fe5e 	bl	8014880 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8015bc4:	bf00      	nop
 8015bc6:	3708      	adds	r7, #8
 8015bc8:	46bd      	mov	sp, r7
 8015bca:	bd80      	pop	{r7, pc}
 8015bcc:	e000ed00 	.word	0xe000ed00

08015bd0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015bd0:	b580      	push	{r7, lr}
 8015bd2:	b082      	sub	sp, #8
 8015bd4:	af00      	add	r7, sp, #0
 8015bd6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8015bd8:	4a2b      	ldr	r2, [pc, #172]	; (8015c88 <USBD_LL_Init+0xb8>)
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	4a29      	ldr	r2, [pc, #164]	; (8015c88 <USBD_LL_Init+0xb8>)
 8015be4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8015be8:	4b27      	ldr	r3, [pc, #156]	; (8015c88 <USBD_LL_Init+0xb8>)
 8015bea:	4a28      	ldr	r2, [pc, #160]	; (8015c8c <USBD_LL_Init+0xbc>)
 8015bec:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015bee:	4b26      	ldr	r3, [pc, #152]	; (8015c88 <USBD_LL_Init+0xb8>)
 8015bf0:	2208      	movs	r2, #8
 8015bf2:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015bf4:	4b24      	ldr	r3, [pc, #144]	; (8015c88 <USBD_LL_Init+0xb8>)
 8015bf6:	2202      	movs	r2, #2
 8015bf8:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015bfa:	4b23      	ldr	r3, [pc, #140]	; (8015c88 <USBD_LL_Init+0xb8>)
 8015bfc:	2202      	movs	r2, #2
 8015bfe:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8015c00:	4b21      	ldr	r3, [pc, #132]	; (8015c88 <USBD_LL_Init+0xb8>)
 8015c02:	2200      	movs	r2, #0
 8015c04:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015c06:	4b20      	ldr	r3, [pc, #128]	; (8015c88 <USBD_LL_Init+0xb8>)
 8015c08:	2200      	movs	r2, #0
 8015c0a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8015c0c:	4b1e      	ldr	r3, [pc, #120]	; (8015c88 <USBD_LL_Init+0xb8>)
 8015c0e:	2200      	movs	r2, #0
 8015c10:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015c12:	4b1d      	ldr	r3, [pc, #116]	; (8015c88 <USBD_LL_Init+0xb8>)
 8015c14:	2200      	movs	r2, #0
 8015c16:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015c18:	481b      	ldr	r0, [pc, #108]	; (8015c88 <USBD_LL_Init+0xb8>)
 8015c1a:	f7f4 f80d 	bl	8009c38 <HAL_PCD_Init>
 8015c1e:	4603      	mov	r3, r0
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d001      	beq.n	8015c28 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8015c24:	f7ee f8ea 	bl	8003dfc <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c2e:	2318      	movs	r3, #24
 8015c30:	2200      	movs	r2, #0
 8015c32:	2100      	movs	r1, #0
 8015c34:	f7f5 fcc7 	bl	800b5c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c3e:	2358      	movs	r3, #88	; 0x58
 8015c40:	2200      	movs	r2, #0
 8015c42:	2180      	movs	r1, #128	; 0x80
 8015c44:	f7f5 fcbf 	bl	800b5c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c4e:	23c0      	movs	r3, #192	; 0xc0
 8015c50:	2200      	movs	r2, #0
 8015c52:	2181      	movs	r1, #129	; 0x81
 8015c54:	f7f5 fcb7 	bl	800b5c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c5e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015c62:	2200      	movs	r2, #0
 8015c64:	2101      	movs	r1, #1
 8015c66:	f7f5 fcae 	bl	800b5c6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015c70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8015c74:	2200      	movs	r2, #0
 8015c76:	2182      	movs	r1, #130	; 0x82
 8015c78:	f7f5 fca5 	bl	800b5c6 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8015c7c:	2300      	movs	r3, #0
}
 8015c7e:	4618      	mov	r0, r3
 8015c80:	3708      	adds	r7, #8
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}
 8015c86:	bf00      	nop
 8015c88:	200029c8 	.word	0x200029c8
 8015c8c:	40005c00 	.word	0x40005c00

08015c90 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015c90:	b580      	push	{r7, lr}
 8015c92:	b084      	sub	sp, #16
 8015c94:	af00      	add	r7, sp, #0
 8015c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c98:	2300      	movs	r3, #0
 8015c9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7f4 f894 	bl	8009dd4 <HAL_PCD_Start>
 8015cac:	4603      	mov	r3, r0
 8015cae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cb0:	7bfb      	ldrb	r3, [r7, #15]
 8015cb2:	4618      	mov	r0, r3
 8015cb4:	f000 f97e 	bl	8015fb4 <USBD_Get_USB_Status>
 8015cb8:	4603      	mov	r3, r0
 8015cba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	3710      	adds	r7, #16
 8015cc2:	46bd      	mov	sp, r7
 8015cc4:	bd80      	pop	{r7, pc}

08015cc6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015cc6:	b580      	push	{r7, lr}
 8015cc8:	b084      	sub	sp, #16
 8015cca:	af00      	add	r7, sp, #0
 8015ccc:	6078      	str	r0, [r7, #4]
 8015cce:	4608      	mov	r0, r1
 8015cd0:	4611      	mov	r1, r2
 8015cd2:	461a      	mov	r2, r3
 8015cd4:	4603      	mov	r3, r0
 8015cd6:	70fb      	strb	r3, [r7, #3]
 8015cd8:	460b      	mov	r3, r1
 8015cda:	70bb      	strb	r3, [r7, #2]
 8015cdc:	4613      	mov	r3, r2
 8015cde:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015cee:	78bb      	ldrb	r3, [r7, #2]
 8015cf0:	883a      	ldrh	r2, [r7, #0]
 8015cf2:	78f9      	ldrb	r1, [r7, #3]
 8015cf4:	f7f4 f9db 	bl	800a0ae <HAL_PCD_EP_Open>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015cfc:	7bfb      	ldrb	r3, [r7, #15]
 8015cfe:	4618      	mov	r0, r3
 8015d00:	f000 f958 	bl	8015fb4 <USBD_Get_USB_Status>
 8015d04:	4603      	mov	r3, r0
 8015d06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d08:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d0a:	4618      	mov	r0, r3
 8015d0c:	3710      	adds	r7, #16
 8015d0e:	46bd      	mov	sp, r7
 8015d10:	bd80      	pop	{r7, pc}

08015d12 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d12:	b580      	push	{r7, lr}
 8015d14:	b084      	sub	sp, #16
 8015d16:	af00      	add	r7, sp, #0
 8015d18:	6078      	str	r0, [r7, #4]
 8015d1a:	460b      	mov	r3, r1
 8015d1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d1e:	2300      	movs	r3, #0
 8015d20:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d22:	2300      	movs	r3, #0
 8015d24:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d2c:	78fa      	ldrb	r2, [r7, #3]
 8015d2e:	4611      	mov	r1, r2
 8015d30:	4618      	mov	r0, r3
 8015d32:	f7f4 fa19 	bl	800a168 <HAL_PCD_EP_Close>
 8015d36:	4603      	mov	r3, r0
 8015d38:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d3a:	7bfb      	ldrb	r3, [r7, #15]
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f000 f939 	bl	8015fb4 <USBD_Get_USB_Status>
 8015d42:	4603      	mov	r3, r0
 8015d44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d46:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d48:	4618      	mov	r0, r3
 8015d4a:	3710      	adds	r7, #16
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}

08015d50 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d50:	b580      	push	{r7, lr}
 8015d52:	b084      	sub	sp, #16
 8015d54:	af00      	add	r7, sp, #0
 8015d56:	6078      	str	r0, [r7, #4]
 8015d58:	460b      	mov	r3, r1
 8015d5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d5c:	2300      	movs	r3, #0
 8015d5e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d60:	2300      	movs	r3, #0
 8015d62:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015d6a:	78fa      	ldrb	r2, [r7, #3]
 8015d6c:	4611      	mov	r1, r2
 8015d6e:	4618      	mov	r0, r3
 8015d70:	f7f4 fac2 	bl	800a2f8 <HAL_PCD_EP_SetStall>
 8015d74:	4603      	mov	r3, r0
 8015d76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015d78:	7bfb      	ldrb	r3, [r7, #15]
 8015d7a:	4618      	mov	r0, r3
 8015d7c:	f000 f91a 	bl	8015fb4 <USBD_Get_USB_Status>
 8015d80:	4603      	mov	r3, r0
 8015d82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d84:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d86:	4618      	mov	r0, r3
 8015d88:	3710      	adds	r7, #16
 8015d8a:	46bd      	mov	sp, r7
 8015d8c:	bd80      	pop	{r7, pc}

08015d8e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015d8e:	b580      	push	{r7, lr}
 8015d90:	b084      	sub	sp, #16
 8015d92:	af00      	add	r7, sp, #0
 8015d94:	6078      	str	r0, [r7, #4]
 8015d96:	460b      	mov	r3, r1
 8015d98:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d9a:	2300      	movs	r3, #0
 8015d9c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015da8:	78fa      	ldrb	r2, [r7, #3]
 8015daa:	4611      	mov	r1, r2
 8015dac:	4618      	mov	r0, r3
 8015dae:	f7f4 faf5 	bl	800a39c <HAL_PCD_EP_ClrStall>
 8015db2:	4603      	mov	r3, r0
 8015db4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015db6:	7bfb      	ldrb	r3, [r7, #15]
 8015db8:	4618      	mov	r0, r3
 8015dba:	f000 f8fb 	bl	8015fb4 <USBD_Get_USB_Status>
 8015dbe:	4603      	mov	r3, r0
 8015dc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dc2:	7bbb      	ldrb	r3, [r7, #14]
}
 8015dc4:	4618      	mov	r0, r3
 8015dc6:	3710      	adds	r7, #16
 8015dc8:	46bd      	mov	sp, r7
 8015dca:	bd80      	pop	{r7, pc}

08015dcc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015dcc:	b480      	push	{r7}
 8015dce:	b085      	sub	sp, #20
 8015dd0:	af00      	add	r7, sp, #0
 8015dd2:	6078      	str	r0, [r7, #4]
 8015dd4:	460b      	mov	r3, r1
 8015dd6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015dde:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8015de0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	da0b      	bge.n	8015e00 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015de8:	78fb      	ldrb	r3, [r7, #3]
 8015dea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015dee:	68f9      	ldr	r1, [r7, #12]
 8015df0:	4613      	mov	r3, r2
 8015df2:	009b      	lsls	r3, r3, #2
 8015df4:	4413      	add	r3, r2
 8015df6:	00db      	lsls	r3, r3, #3
 8015df8:	440b      	add	r3, r1
 8015dfa:	3312      	adds	r3, #18
 8015dfc:	781b      	ldrb	r3, [r3, #0]
 8015dfe:	e00b      	b.n	8015e18 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015e00:	78fb      	ldrb	r3, [r7, #3]
 8015e02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015e06:	68f9      	ldr	r1, [r7, #12]
 8015e08:	4613      	mov	r3, r2
 8015e0a:	009b      	lsls	r3, r3, #2
 8015e0c:	4413      	add	r3, r2
 8015e0e:	00db      	lsls	r3, r3, #3
 8015e10:	440b      	add	r3, r1
 8015e12:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 8015e16:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015e18:	4618      	mov	r0, r3
 8015e1a:	3714      	adds	r7, #20
 8015e1c:	46bd      	mov	sp, r7
 8015e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e22:	4770      	bx	lr

08015e24 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b084      	sub	sp, #16
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
 8015e2c:	460b      	mov	r3, r1
 8015e2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e30:	2300      	movs	r3, #0
 8015e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e34:	2300      	movs	r3, #0
 8015e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015e3e:	78fa      	ldrb	r2, [r7, #3]
 8015e40:	4611      	mov	r1, r2
 8015e42:	4618      	mov	r0, r3
 8015e44:	f7f4 f90f 	bl	800a066 <HAL_PCD_SetAddress>
 8015e48:	4603      	mov	r3, r0
 8015e4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e4c:	7bfb      	ldrb	r3, [r7, #15]
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f000 f8b0 	bl	8015fb4 <USBD_Get_USB_Status>
 8015e54:	4603      	mov	r3, r0
 8015e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3710      	adds	r7, #16
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}

08015e62 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015e62:	b580      	push	{r7, lr}
 8015e64:	b086      	sub	sp, #24
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	60f8      	str	r0, [r7, #12]
 8015e6a:	607a      	str	r2, [r7, #4]
 8015e6c:	603b      	str	r3, [r7, #0]
 8015e6e:	460b      	mov	r3, r1
 8015e70:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015e72:	2300      	movs	r3, #0
 8015e74:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015e76:	2300      	movs	r3, #0
 8015e78:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015e7a:	68fb      	ldr	r3, [r7, #12]
 8015e7c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015e80:	7af9      	ldrb	r1, [r7, #11]
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	687a      	ldr	r2, [r7, #4]
 8015e86:	f7f4 fa00 	bl	800a28a <HAL_PCD_EP_Transmit>
 8015e8a:	4603      	mov	r3, r0
 8015e8c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015e8e:	7dfb      	ldrb	r3, [r7, #23]
 8015e90:	4618      	mov	r0, r3
 8015e92:	f000 f88f 	bl	8015fb4 <USBD_Get_USB_Status>
 8015e96:	4603      	mov	r3, r0
 8015e98:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015e9a:	7dbb      	ldrb	r3, [r7, #22]
}
 8015e9c:	4618      	mov	r0, r3
 8015e9e:	3718      	adds	r7, #24
 8015ea0:	46bd      	mov	sp, r7
 8015ea2:	bd80      	pop	{r7, pc}

08015ea4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b086      	sub	sp, #24
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	60f8      	str	r0, [r7, #12]
 8015eac:	607a      	str	r2, [r7, #4]
 8015eae:	603b      	str	r3, [r7, #0]
 8015eb0:	460b      	mov	r3, r1
 8015eb2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015eb8:	2300      	movs	r3, #0
 8015eba:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015ec2:	7af9      	ldrb	r1, [r7, #11]
 8015ec4:	683b      	ldr	r3, [r7, #0]
 8015ec6:	687a      	ldr	r2, [r7, #4]
 8015ec8:	f7f4 f996 	bl	800a1f8 <HAL_PCD_EP_Receive>
 8015ecc:	4603      	mov	r3, r0
 8015ece:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015ed0:	7dfb      	ldrb	r3, [r7, #23]
 8015ed2:	4618      	mov	r0, r3
 8015ed4:	f000 f86e 	bl	8015fb4 <USBD_Get_USB_Status>
 8015ed8:	4603      	mov	r3, r0
 8015eda:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8015edc:	7dbb      	ldrb	r3, [r7, #22]
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3718      	adds	r7, #24
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}

08015ee6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015ee6:	b580      	push	{r7, lr}
 8015ee8:	b082      	sub	sp, #8
 8015eea:	af00      	add	r7, sp, #0
 8015eec:	6078      	str	r0, [r7, #4]
 8015eee:	460b      	mov	r3, r1
 8015ef0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015ef2:	687b      	ldr	r3, [r7, #4]
 8015ef4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015ef8:	78fa      	ldrb	r2, [r7, #3]
 8015efa:	4611      	mov	r1, r2
 8015efc:	4618      	mov	r0, r3
 8015efe:	f7f4 f9ac 	bl	800a25a <HAL_PCD_EP_GetRxCount>
 8015f02:	4603      	mov	r3, r0
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	3708      	adds	r7, #8
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	bd80      	pop	{r7, pc}

08015f0c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f0c:	b580      	push	{r7, lr}
 8015f0e:	b082      	sub	sp, #8
 8015f10:	af00      	add	r7, sp, #0
 8015f12:	6078      	str	r0, [r7, #4]
 8015f14:	460b      	mov	r3, r1
 8015f16:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8015f18:	78fb      	ldrb	r3, [r7, #3]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d002      	beq.n	8015f24 <HAL_PCDEx_LPM_Callback+0x18>
 8015f1e:	2b01      	cmp	r3, #1
 8015f20:	d013      	beq.n	8015f4a <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 8015f22:	e023      	b.n	8015f6c <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	7a5b      	ldrb	r3, [r3, #9]
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	d007      	beq.n	8015f3c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015f2c:	f000 f83c 	bl	8015fa8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015f30:	4b10      	ldr	r3, [pc, #64]	; (8015f74 <HAL_PCDEx_LPM_Callback+0x68>)
 8015f32:	691b      	ldr	r3, [r3, #16]
 8015f34:	4a0f      	ldr	r2, [pc, #60]	; (8015f74 <HAL_PCDEx_LPM_Callback+0x68>)
 8015f36:	f023 0306 	bic.w	r3, r3, #6
 8015f3a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015f42:	4618      	mov	r0, r3
 8015f44:	f7fe fc9c 	bl	8014880 <USBD_LL_Resume>
    break;
 8015f48:	e010      	b.n	8015f6c <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8015f50:	4618      	mov	r0, r3
 8015f52:	f7fe fc7f 	bl	8014854 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	7a5b      	ldrb	r3, [r3, #9]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d005      	beq.n	8015f6a <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015f5e:	4b05      	ldr	r3, [pc, #20]	; (8015f74 <HAL_PCDEx_LPM_Callback+0x68>)
 8015f60:	691b      	ldr	r3, [r3, #16]
 8015f62:	4a04      	ldr	r2, [pc, #16]	; (8015f74 <HAL_PCDEx_LPM_Callback+0x68>)
 8015f64:	f043 0306 	orr.w	r3, r3, #6
 8015f68:	6113      	str	r3, [r2, #16]
    break;
 8015f6a:	bf00      	nop
}
 8015f6c:	bf00      	nop
 8015f6e:	3708      	adds	r7, #8
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}
 8015f74:	e000ed00 	.word	0xe000ed00

08015f78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015f78:	b480      	push	{r7}
 8015f7a:	b083      	sub	sp, #12
 8015f7c:	af00      	add	r7, sp, #0
 8015f7e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015f80:	4b03      	ldr	r3, [pc, #12]	; (8015f90 <USBD_static_malloc+0x18>)
}
 8015f82:	4618      	mov	r0, r3
 8015f84:	370c      	adds	r7, #12
 8015f86:	46bd      	mov	sp, r7
 8015f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8c:	4770      	bx	lr
 8015f8e:	bf00      	nop
 8015f90:	20002ca4 	.word	0x20002ca4

08015f94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015f94:	b480      	push	{r7}
 8015f96:	b083      	sub	sp, #12
 8015f98:	af00      	add	r7, sp, #0
 8015f9a:	6078      	str	r0, [r7, #4]

}
 8015f9c:	bf00      	nop
 8015f9e:	370c      	adds	r7, #12
 8015fa0:	46bd      	mov	sp, r7
 8015fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa6:	4770      	bx	lr

08015fa8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015fac:	f7ed f996 	bl	80032dc <SystemClock_Config>
}
 8015fb0:	bf00      	nop
 8015fb2:	bd80      	pop	{r7, pc}

08015fb4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015fb4:	b480      	push	{r7}
 8015fb6:	b085      	sub	sp, #20
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	4603      	mov	r3, r0
 8015fbc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015fc2:	79fb      	ldrb	r3, [r7, #7]
 8015fc4:	2b03      	cmp	r3, #3
 8015fc6:	d817      	bhi.n	8015ff8 <USBD_Get_USB_Status+0x44>
 8015fc8:	a201      	add	r2, pc, #4	; (adr r2, 8015fd0 <USBD_Get_USB_Status+0x1c>)
 8015fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015fce:	bf00      	nop
 8015fd0:	08015fe1 	.word	0x08015fe1
 8015fd4:	08015fe7 	.word	0x08015fe7
 8015fd8:	08015fed 	.word	0x08015fed
 8015fdc:	08015ff3 	.word	0x08015ff3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015fe0:	2300      	movs	r3, #0
 8015fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8015fe4:	e00b      	b.n	8015ffe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015fe6:	2303      	movs	r3, #3
 8015fe8:	73fb      	strb	r3, [r7, #15]
    break;
 8015fea:	e008      	b.n	8015ffe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015fec:	2301      	movs	r3, #1
 8015fee:	73fb      	strb	r3, [r7, #15]
    break;
 8015ff0:	e005      	b.n	8015ffe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015ff2:	2303      	movs	r3, #3
 8015ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8015ff6:	e002      	b.n	8015ffe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015ff8:	2303      	movs	r3, #3
 8015ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8015ffc:	bf00      	nop
  }
  return usb_status;
 8015ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8016000:	4618      	mov	r0, r3
 8016002:	3714      	adds	r7, #20
 8016004:	46bd      	mov	sp, r7
 8016006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801600a:	4770      	bx	lr

0801600c <__cvt>:
 801600c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016010:	ec55 4b10 	vmov	r4, r5, d0
 8016014:	2d00      	cmp	r5, #0
 8016016:	460e      	mov	r6, r1
 8016018:	4619      	mov	r1, r3
 801601a:	462b      	mov	r3, r5
 801601c:	bfbb      	ittet	lt
 801601e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016022:	461d      	movlt	r5, r3
 8016024:	2300      	movge	r3, #0
 8016026:	232d      	movlt	r3, #45	; 0x2d
 8016028:	700b      	strb	r3, [r1, #0]
 801602a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801602c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016030:	4691      	mov	r9, r2
 8016032:	f023 0820 	bic.w	r8, r3, #32
 8016036:	bfbc      	itt	lt
 8016038:	4622      	movlt	r2, r4
 801603a:	4614      	movlt	r4, r2
 801603c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016040:	d005      	beq.n	801604e <__cvt+0x42>
 8016042:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8016046:	d100      	bne.n	801604a <__cvt+0x3e>
 8016048:	3601      	adds	r6, #1
 801604a:	2102      	movs	r1, #2
 801604c:	e000      	b.n	8016050 <__cvt+0x44>
 801604e:	2103      	movs	r1, #3
 8016050:	ab03      	add	r3, sp, #12
 8016052:	9301      	str	r3, [sp, #4]
 8016054:	ab02      	add	r3, sp, #8
 8016056:	9300      	str	r3, [sp, #0]
 8016058:	ec45 4b10 	vmov	d0, r4, r5
 801605c:	4653      	mov	r3, sl
 801605e:	4632      	mov	r2, r6
 8016060:	f000 fe6a 	bl	8016d38 <_dtoa_r>
 8016064:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016068:	4607      	mov	r7, r0
 801606a:	d102      	bne.n	8016072 <__cvt+0x66>
 801606c:	f019 0f01 	tst.w	r9, #1
 8016070:	d022      	beq.n	80160b8 <__cvt+0xac>
 8016072:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016076:	eb07 0906 	add.w	r9, r7, r6
 801607a:	d110      	bne.n	801609e <__cvt+0x92>
 801607c:	783b      	ldrb	r3, [r7, #0]
 801607e:	2b30      	cmp	r3, #48	; 0x30
 8016080:	d10a      	bne.n	8016098 <__cvt+0x8c>
 8016082:	2200      	movs	r2, #0
 8016084:	2300      	movs	r3, #0
 8016086:	4620      	mov	r0, r4
 8016088:	4629      	mov	r1, r5
 801608a:	f7ea fd45 	bl	8000b18 <__aeabi_dcmpeq>
 801608e:	b918      	cbnz	r0, 8016098 <__cvt+0x8c>
 8016090:	f1c6 0601 	rsb	r6, r6, #1
 8016094:	f8ca 6000 	str.w	r6, [sl]
 8016098:	f8da 3000 	ldr.w	r3, [sl]
 801609c:	4499      	add	r9, r3
 801609e:	2200      	movs	r2, #0
 80160a0:	2300      	movs	r3, #0
 80160a2:	4620      	mov	r0, r4
 80160a4:	4629      	mov	r1, r5
 80160a6:	f7ea fd37 	bl	8000b18 <__aeabi_dcmpeq>
 80160aa:	b108      	cbz	r0, 80160b0 <__cvt+0xa4>
 80160ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80160b0:	2230      	movs	r2, #48	; 0x30
 80160b2:	9b03      	ldr	r3, [sp, #12]
 80160b4:	454b      	cmp	r3, r9
 80160b6:	d307      	bcc.n	80160c8 <__cvt+0xbc>
 80160b8:	9b03      	ldr	r3, [sp, #12]
 80160ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80160bc:	1bdb      	subs	r3, r3, r7
 80160be:	4638      	mov	r0, r7
 80160c0:	6013      	str	r3, [r2, #0]
 80160c2:	b004      	add	sp, #16
 80160c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80160c8:	1c59      	adds	r1, r3, #1
 80160ca:	9103      	str	r1, [sp, #12]
 80160cc:	701a      	strb	r2, [r3, #0]
 80160ce:	e7f0      	b.n	80160b2 <__cvt+0xa6>

080160d0 <__exponent>:
 80160d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80160d2:	4603      	mov	r3, r0
 80160d4:	2900      	cmp	r1, #0
 80160d6:	bfb8      	it	lt
 80160d8:	4249      	neglt	r1, r1
 80160da:	f803 2b02 	strb.w	r2, [r3], #2
 80160de:	bfb4      	ite	lt
 80160e0:	222d      	movlt	r2, #45	; 0x2d
 80160e2:	222b      	movge	r2, #43	; 0x2b
 80160e4:	2909      	cmp	r1, #9
 80160e6:	7042      	strb	r2, [r0, #1]
 80160e8:	dd2a      	ble.n	8016140 <__exponent+0x70>
 80160ea:	f10d 0207 	add.w	r2, sp, #7
 80160ee:	4617      	mov	r7, r2
 80160f0:	260a      	movs	r6, #10
 80160f2:	4694      	mov	ip, r2
 80160f4:	fb91 f5f6 	sdiv	r5, r1, r6
 80160f8:	fb06 1415 	mls	r4, r6, r5, r1
 80160fc:	3430      	adds	r4, #48	; 0x30
 80160fe:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8016102:	460c      	mov	r4, r1
 8016104:	2c63      	cmp	r4, #99	; 0x63
 8016106:	f102 32ff 	add.w	r2, r2, #4294967295
 801610a:	4629      	mov	r1, r5
 801610c:	dcf1      	bgt.n	80160f2 <__exponent+0x22>
 801610e:	3130      	adds	r1, #48	; 0x30
 8016110:	f1ac 0402 	sub.w	r4, ip, #2
 8016114:	f802 1c01 	strb.w	r1, [r2, #-1]
 8016118:	1c41      	adds	r1, r0, #1
 801611a:	4622      	mov	r2, r4
 801611c:	42ba      	cmp	r2, r7
 801611e:	d30a      	bcc.n	8016136 <__exponent+0x66>
 8016120:	f10d 0209 	add.w	r2, sp, #9
 8016124:	eba2 020c 	sub.w	r2, r2, ip
 8016128:	42bc      	cmp	r4, r7
 801612a:	bf88      	it	hi
 801612c:	2200      	movhi	r2, #0
 801612e:	4413      	add	r3, r2
 8016130:	1a18      	subs	r0, r3, r0
 8016132:	b003      	add	sp, #12
 8016134:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016136:	f812 5b01 	ldrb.w	r5, [r2], #1
 801613a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801613e:	e7ed      	b.n	801611c <__exponent+0x4c>
 8016140:	2330      	movs	r3, #48	; 0x30
 8016142:	3130      	adds	r1, #48	; 0x30
 8016144:	7083      	strb	r3, [r0, #2]
 8016146:	70c1      	strb	r1, [r0, #3]
 8016148:	1d03      	adds	r3, r0, #4
 801614a:	e7f1      	b.n	8016130 <__exponent+0x60>

0801614c <_printf_float>:
 801614c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016150:	ed2d 8b02 	vpush	{d8}
 8016154:	b08d      	sub	sp, #52	; 0x34
 8016156:	460c      	mov	r4, r1
 8016158:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801615c:	4616      	mov	r6, r2
 801615e:	461f      	mov	r7, r3
 8016160:	4605      	mov	r5, r0
 8016162:	f000 fce7 	bl	8016b34 <_localeconv_r>
 8016166:	f8d0 a000 	ldr.w	sl, [r0]
 801616a:	4650      	mov	r0, sl
 801616c:	f7ea f8a8 	bl	80002c0 <strlen>
 8016170:	2300      	movs	r3, #0
 8016172:	930a      	str	r3, [sp, #40]	; 0x28
 8016174:	6823      	ldr	r3, [r4, #0]
 8016176:	9305      	str	r3, [sp, #20]
 8016178:	f8d8 3000 	ldr.w	r3, [r8]
 801617c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016180:	3307      	adds	r3, #7
 8016182:	f023 0307 	bic.w	r3, r3, #7
 8016186:	f103 0208 	add.w	r2, r3, #8
 801618a:	f8c8 2000 	str.w	r2, [r8]
 801618e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016192:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8016196:	9307      	str	r3, [sp, #28]
 8016198:	f8cd 8018 	str.w	r8, [sp, #24]
 801619c:	ee08 0a10 	vmov	s16, r0
 80161a0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80161a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80161a8:	4b9e      	ldr	r3, [pc, #632]	; (8016424 <_printf_float+0x2d8>)
 80161aa:	f04f 32ff 	mov.w	r2, #4294967295
 80161ae:	f7ea fce5 	bl	8000b7c <__aeabi_dcmpun>
 80161b2:	bb88      	cbnz	r0, 8016218 <_printf_float+0xcc>
 80161b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80161b8:	4b9a      	ldr	r3, [pc, #616]	; (8016424 <_printf_float+0x2d8>)
 80161ba:	f04f 32ff 	mov.w	r2, #4294967295
 80161be:	f7ea fcbf 	bl	8000b40 <__aeabi_dcmple>
 80161c2:	bb48      	cbnz	r0, 8016218 <_printf_float+0xcc>
 80161c4:	2200      	movs	r2, #0
 80161c6:	2300      	movs	r3, #0
 80161c8:	4640      	mov	r0, r8
 80161ca:	4649      	mov	r1, r9
 80161cc:	f7ea fcae 	bl	8000b2c <__aeabi_dcmplt>
 80161d0:	b110      	cbz	r0, 80161d8 <_printf_float+0x8c>
 80161d2:	232d      	movs	r3, #45	; 0x2d
 80161d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80161d8:	4a93      	ldr	r2, [pc, #588]	; (8016428 <_printf_float+0x2dc>)
 80161da:	4b94      	ldr	r3, [pc, #592]	; (801642c <_printf_float+0x2e0>)
 80161dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80161e0:	bf94      	ite	ls
 80161e2:	4690      	movls	r8, r2
 80161e4:	4698      	movhi	r8, r3
 80161e6:	2303      	movs	r3, #3
 80161e8:	6123      	str	r3, [r4, #16]
 80161ea:	9b05      	ldr	r3, [sp, #20]
 80161ec:	f023 0304 	bic.w	r3, r3, #4
 80161f0:	6023      	str	r3, [r4, #0]
 80161f2:	f04f 0900 	mov.w	r9, #0
 80161f6:	9700      	str	r7, [sp, #0]
 80161f8:	4633      	mov	r3, r6
 80161fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80161fc:	4621      	mov	r1, r4
 80161fe:	4628      	mov	r0, r5
 8016200:	f000 f9da 	bl	80165b8 <_printf_common>
 8016204:	3001      	adds	r0, #1
 8016206:	f040 8090 	bne.w	801632a <_printf_float+0x1de>
 801620a:	f04f 30ff 	mov.w	r0, #4294967295
 801620e:	b00d      	add	sp, #52	; 0x34
 8016210:	ecbd 8b02 	vpop	{d8}
 8016214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016218:	4642      	mov	r2, r8
 801621a:	464b      	mov	r3, r9
 801621c:	4640      	mov	r0, r8
 801621e:	4649      	mov	r1, r9
 8016220:	f7ea fcac 	bl	8000b7c <__aeabi_dcmpun>
 8016224:	b140      	cbz	r0, 8016238 <_printf_float+0xec>
 8016226:	464b      	mov	r3, r9
 8016228:	2b00      	cmp	r3, #0
 801622a:	bfbc      	itt	lt
 801622c:	232d      	movlt	r3, #45	; 0x2d
 801622e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016232:	4a7f      	ldr	r2, [pc, #508]	; (8016430 <_printf_float+0x2e4>)
 8016234:	4b7f      	ldr	r3, [pc, #508]	; (8016434 <_printf_float+0x2e8>)
 8016236:	e7d1      	b.n	80161dc <_printf_float+0x90>
 8016238:	6863      	ldr	r3, [r4, #4]
 801623a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801623e:	9206      	str	r2, [sp, #24]
 8016240:	1c5a      	adds	r2, r3, #1
 8016242:	d13f      	bne.n	80162c4 <_printf_float+0x178>
 8016244:	2306      	movs	r3, #6
 8016246:	6063      	str	r3, [r4, #4]
 8016248:	9b05      	ldr	r3, [sp, #20]
 801624a:	6861      	ldr	r1, [r4, #4]
 801624c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016250:	2300      	movs	r3, #0
 8016252:	9303      	str	r3, [sp, #12]
 8016254:	ab0a      	add	r3, sp, #40	; 0x28
 8016256:	e9cd b301 	strd	fp, r3, [sp, #4]
 801625a:	ab09      	add	r3, sp, #36	; 0x24
 801625c:	ec49 8b10 	vmov	d0, r8, r9
 8016260:	9300      	str	r3, [sp, #0]
 8016262:	6022      	str	r2, [r4, #0]
 8016264:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016268:	4628      	mov	r0, r5
 801626a:	f7ff fecf 	bl	801600c <__cvt>
 801626e:	9b06      	ldr	r3, [sp, #24]
 8016270:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016272:	2b47      	cmp	r3, #71	; 0x47
 8016274:	4680      	mov	r8, r0
 8016276:	d108      	bne.n	801628a <_printf_float+0x13e>
 8016278:	1cc8      	adds	r0, r1, #3
 801627a:	db02      	blt.n	8016282 <_printf_float+0x136>
 801627c:	6863      	ldr	r3, [r4, #4]
 801627e:	4299      	cmp	r1, r3
 8016280:	dd41      	ble.n	8016306 <_printf_float+0x1ba>
 8016282:	f1ab 0302 	sub.w	r3, fp, #2
 8016286:	fa5f fb83 	uxtb.w	fp, r3
 801628a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801628e:	d820      	bhi.n	80162d2 <_printf_float+0x186>
 8016290:	3901      	subs	r1, #1
 8016292:	465a      	mov	r2, fp
 8016294:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016298:	9109      	str	r1, [sp, #36]	; 0x24
 801629a:	f7ff ff19 	bl	80160d0 <__exponent>
 801629e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80162a0:	1813      	adds	r3, r2, r0
 80162a2:	2a01      	cmp	r2, #1
 80162a4:	4681      	mov	r9, r0
 80162a6:	6123      	str	r3, [r4, #16]
 80162a8:	dc02      	bgt.n	80162b0 <_printf_float+0x164>
 80162aa:	6822      	ldr	r2, [r4, #0]
 80162ac:	07d2      	lsls	r2, r2, #31
 80162ae:	d501      	bpl.n	80162b4 <_printf_float+0x168>
 80162b0:	3301      	adds	r3, #1
 80162b2:	6123      	str	r3, [r4, #16]
 80162b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d09c      	beq.n	80161f6 <_printf_float+0xaa>
 80162bc:	232d      	movs	r3, #45	; 0x2d
 80162be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80162c2:	e798      	b.n	80161f6 <_printf_float+0xaa>
 80162c4:	9a06      	ldr	r2, [sp, #24]
 80162c6:	2a47      	cmp	r2, #71	; 0x47
 80162c8:	d1be      	bne.n	8016248 <_printf_float+0xfc>
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d1bc      	bne.n	8016248 <_printf_float+0xfc>
 80162ce:	2301      	movs	r3, #1
 80162d0:	e7b9      	b.n	8016246 <_printf_float+0xfa>
 80162d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80162d6:	d118      	bne.n	801630a <_printf_float+0x1be>
 80162d8:	2900      	cmp	r1, #0
 80162da:	6863      	ldr	r3, [r4, #4]
 80162dc:	dd0b      	ble.n	80162f6 <_printf_float+0x1aa>
 80162de:	6121      	str	r1, [r4, #16]
 80162e0:	b913      	cbnz	r3, 80162e8 <_printf_float+0x19c>
 80162e2:	6822      	ldr	r2, [r4, #0]
 80162e4:	07d0      	lsls	r0, r2, #31
 80162e6:	d502      	bpl.n	80162ee <_printf_float+0x1a2>
 80162e8:	3301      	adds	r3, #1
 80162ea:	440b      	add	r3, r1
 80162ec:	6123      	str	r3, [r4, #16]
 80162ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80162f0:	f04f 0900 	mov.w	r9, #0
 80162f4:	e7de      	b.n	80162b4 <_printf_float+0x168>
 80162f6:	b913      	cbnz	r3, 80162fe <_printf_float+0x1b2>
 80162f8:	6822      	ldr	r2, [r4, #0]
 80162fa:	07d2      	lsls	r2, r2, #31
 80162fc:	d501      	bpl.n	8016302 <_printf_float+0x1b6>
 80162fe:	3302      	adds	r3, #2
 8016300:	e7f4      	b.n	80162ec <_printf_float+0x1a0>
 8016302:	2301      	movs	r3, #1
 8016304:	e7f2      	b.n	80162ec <_printf_float+0x1a0>
 8016306:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801630a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801630c:	4299      	cmp	r1, r3
 801630e:	db05      	blt.n	801631c <_printf_float+0x1d0>
 8016310:	6823      	ldr	r3, [r4, #0]
 8016312:	6121      	str	r1, [r4, #16]
 8016314:	07d8      	lsls	r0, r3, #31
 8016316:	d5ea      	bpl.n	80162ee <_printf_float+0x1a2>
 8016318:	1c4b      	adds	r3, r1, #1
 801631a:	e7e7      	b.n	80162ec <_printf_float+0x1a0>
 801631c:	2900      	cmp	r1, #0
 801631e:	bfd4      	ite	le
 8016320:	f1c1 0202 	rsble	r2, r1, #2
 8016324:	2201      	movgt	r2, #1
 8016326:	4413      	add	r3, r2
 8016328:	e7e0      	b.n	80162ec <_printf_float+0x1a0>
 801632a:	6823      	ldr	r3, [r4, #0]
 801632c:	055a      	lsls	r2, r3, #21
 801632e:	d407      	bmi.n	8016340 <_printf_float+0x1f4>
 8016330:	6923      	ldr	r3, [r4, #16]
 8016332:	4642      	mov	r2, r8
 8016334:	4631      	mov	r1, r6
 8016336:	4628      	mov	r0, r5
 8016338:	47b8      	blx	r7
 801633a:	3001      	adds	r0, #1
 801633c:	d12c      	bne.n	8016398 <_printf_float+0x24c>
 801633e:	e764      	b.n	801620a <_printf_float+0xbe>
 8016340:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016344:	f240 80e0 	bls.w	8016508 <_printf_float+0x3bc>
 8016348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801634c:	2200      	movs	r2, #0
 801634e:	2300      	movs	r3, #0
 8016350:	f7ea fbe2 	bl	8000b18 <__aeabi_dcmpeq>
 8016354:	2800      	cmp	r0, #0
 8016356:	d034      	beq.n	80163c2 <_printf_float+0x276>
 8016358:	4a37      	ldr	r2, [pc, #220]	; (8016438 <_printf_float+0x2ec>)
 801635a:	2301      	movs	r3, #1
 801635c:	4631      	mov	r1, r6
 801635e:	4628      	mov	r0, r5
 8016360:	47b8      	blx	r7
 8016362:	3001      	adds	r0, #1
 8016364:	f43f af51 	beq.w	801620a <_printf_float+0xbe>
 8016368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801636c:	429a      	cmp	r2, r3
 801636e:	db02      	blt.n	8016376 <_printf_float+0x22a>
 8016370:	6823      	ldr	r3, [r4, #0]
 8016372:	07d8      	lsls	r0, r3, #31
 8016374:	d510      	bpl.n	8016398 <_printf_float+0x24c>
 8016376:	ee18 3a10 	vmov	r3, s16
 801637a:	4652      	mov	r2, sl
 801637c:	4631      	mov	r1, r6
 801637e:	4628      	mov	r0, r5
 8016380:	47b8      	blx	r7
 8016382:	3001      	adds	r0, #1
 8016384:	f43f af41 	beq.w	801620a <_printf_float+0xbe>
 8016388:	f04f 0800 	mov.w	r8, #0
 801638c:	f104 091a 	add.w	r9, r4, #26
 8016390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016392:	3b01      	subs	r3, #1
 8016394:	4543      	cmp	r3, r8
 8016396:	dc09      	bgt.n	80163ac <_printf_float+0x260>
 8016398:	6823      	ldr	r3, [r4, #0]
 801639a:	079b      	lsls	r3, r3, #30
 801639c:	f100 8107 	bmi.w	80165ae <_printf_float+0x462>
 80163a0:	68e0      	ldr	r0, [r4, #12]
 80163a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80163a4:	4298      	cmp	r0, r3
 80163a6:	bfb8      	it	lt
 80163a8:	4618      	movlt	r0, r3
 80163aa:	e730      	b.n	801620e <_printf_float+0xc2>
 80163ac:	2301      	movs	r3, #1
 80163ae:	464a      	mov	r2, r9
 80163b0:	4631      	mov	r1, r6
 80163b2:	4628      	mov	r0, r5
 80163b4:	47b8      	blx	r7
 80163b6:	3001      	adds	r0, #1
 80163b8:	f43f af27 	beq.w	801620a <_printf_float+0xbe>
 80163bc:	f108 0801 	add.w	r8, r8, #1
 80163c0:	e7e6      	b.n	8016390 <_printf_float+0x244>
 80163c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	dc39      	bgt.n	801643c <_printf_float+0x2f0>
 80163c8:	4a1b      	ldr	r2, [pc, #108]	; (8016438 <_printf_float+0x2ec>)
 80163ca:	2301      	movs	r3, #1
 80163cc:	4631      	mov	r1, r6
 80163ce:	4628      	mov	r0, r5
 80163d0:	47b8      	blx	r7
 80163d2:	3001      	adds	r0, #1
 80163d4:	f43f af19 	beq.w	801620a <_printf_float+0xbe>
 80163d8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80163dc:	4313      	orrs	r3, r2
 80163de:	d102      	bne.n	80163e6 <_printf_float+0x29a>
 80163e0:	6823      	ldr	r3, [r4, #0]
 80163e2:	07d9      	lsls	r1, r3, #31
 80163e4:	d5d8      	bpl.n	8016398 <_printf_float+0x24c>
 80163e6:	ee18 3a10 	vmov	r3, s16
 80163ea:	4652      	mov	r2, sl
 80163ec:	4631      	mov	r1, r6
 80163ee:	4628      	mov	r0, r5
 80163f0:	47b8      	blx	r7
 80163f2:	3001      	adds	r0, #1
 80163f4:	f43f af09 	beq.w	801620a <_printf_float+0xbe>
 80163f8:	f04f 0900 	mov.w	r9, #0
 80163fc:	f104 0a1a 	add.w	sl, r4, #26
 8016400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016402:	425b      	negs	r3, r3
 8016404:	454b      	cmp	r3, r9
 8016406:	dc01      	bgt.n	801640c <_printf_float+0x2c0>
 8016408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801640a:	e792      	b.n	8016332 <_printf_float+0x1e6>
 801640c:	2301      	movs	r3, #1
 801640e:	4652      	mov	r2, sl
 8016410:	4631      	mov	r1, r6
 8016412:	4628      	mov	r0, r5
 8016414:	47b8      	blx	r7
 8016416:	3001      	adds	r0, #1
 8016418:	f43f aef7 	beq.w	801620a <_printf_float+0xbe>
 801641c:	f109 0901 	add.w	r9, r9, #1
 8016420:	e7ee      	b.n	8016400 <_printf_float+0x2b4>
 8016422:	bf00      	nop
 8016424:	7fefffff 	.word	0x7fefffff
 8016428:	0801b960 	.word	0x0801b960
 801642c:	0801b964 	.word	0x0801b964
 8016430:	0801b968 	.word	0x0801b968
 8016434:	0801b96c 	.word	0x0801b96c
 8016438:	0801b970 	.word	0x0801b970
 801643c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801643e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016440:	429a      	cmp	r2, r3
 8016442:	bfa8      	it	ge
 8016444:	461a      	movge	r2, r3
 8016446:	2a00      	cmp	r2, #0
 8016448:	4691      	mov	r9, r2
 801644a:	dc37      	bgt.n	80164bc <_printf_float+0x370>
 801644c:	f04f 0b00 	mov.w	fp, #0
 8016450:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016454:	f104 021a 	add.w	r2, r4, #26
 8016458:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801645a:	9305      	str	r3, [sp, #20]
 801645c:	eba3 0309 	sub.w	r3, r3, r9
 8016460:	455b      	cmp	r3, fp
 8016462:	dc33      	bgt.n	80164cc <_printf_float+0x380>
 8016464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016468:	429a      	cmp	r2, r3
 801646a:	db3b      	blt.n	80164e4 <_printf_float+0x398>
 801646c:	6823      	ldr	r3, [r4, #0]
 801646e:	07da      	lsls	r2, r3, #31
 8016470:	d438      	bmi.n	80164e4 <_printf_float+0x398>
 8016472:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8016476:	eba2 0903 	sub.w	r9, r2, r3
 801647a:	9b05      	ldr	r3, [sp, #20]
 801647c:	1ad2      	subs	r2, r2, r3
 801647e:	4591      	cmp	r9, r2
 8016480:	bfa8      	it	ge
 8016482:	4691      	movge	r9, r2
 8016484:	f1b9 0f00 	cmp.w	r9, #0
 8016488:	dc35      	bgt.n	80164f6 <_printf_float+0x3aa>
 801648a:	f04f 0800 	mov.w	r8, #0
 801648e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016492:	f104 0a1a 	add.w	sl, r4, #26
 8016496:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801649a:	1a9b      	subs	r3, r3, r2
 801649c:	eba3 0309 	sub.w	r3, r3, r9
 80164a0:	4543      	cmp	r3, r8
 80164a2:	f77f af79 	ble.w	8016398 <_printf_float+0x24c>
 80164a6:	2301      	movs	r3, #1
 80164a8:	4652      	mov	r2, sl
 80164aa:	4631      	mov	r1, r6
 80164ac:	4628      	mov	r0, r5
 80164ae:	47b8      	blx	r7
 80164b0:	3001      	adds	r0, #1
 80164b2:	f43f aeaa 	beq.w	801620a <_printf_float+0xbe>
 80164b6:	f108 0801 	add.w	r8, r8, #1
 80164ba:	e7ec      	b.n	8016496 <_printf_float+0x34a>
 80164bc:	4613      	mov	r3, r2
 80164be:	4631      	mov	r1, r6
 80164c0:	4642      	mov	r2, r8
 80164c2:	4628      	mov	r0, r5
 80164c4:	47b8      	blx	r7
 80164c6:	3001      	adds	r0, #1
 80164c8:	d1c0      	bne.n	801644c <_printf_float+0x300>
 80164ca:	e69e      	b.n	801620a <_printf_float+0xbe>
 80164cc:	2301      	movs	r3, #1
 80164ce:	4631      	mov	r1, r6
 80164d0:	4628      	mov	r0, r5
 80164d2:	9205      	str	r2, [sp, #20]
 80164d4:	47b8      	blx	r7
 80164d6:	3001      	adds	r0, #1
 80164d8:	f43f ae97 	beq.w	801620a <_printf_float+0xbe>
 80164dc:	9a05      	ldr	r2, [sp, #20]
 80164de:	f10b 0b01 	add.w	fp, fp, #1
 80164e2:	e7b9      	b.n	8016458 <_printf_float+0x30c>
 80164e4:	ee18 3a10 	vmov	r3, s16
 80164e8:	4652      	mov	r2, sl
 80164ea:	4631      	mov	r1, r6
 80164ec:	4628      	mov	r0, r5
 80164ee:	47b8      	blx	r7
 80164f0:	3001      	adds	r0, #1
 80164f2:	d1be      	bne.n	8016472 <_printf_float+0x326>
 80164f4:	e689      	b.n	801620a <_printf_float+0xbe>
 80164f6:	9a05      	ldr	r2, [sp, #20]
 80164f8:	464b      	mov	r3, r9
 80164fa:	4442      	add	r2, r8
 80164fc:	4631      	mov	r1, r6
 80164fe:	4628      	mov	r0, r5
 8016500:	47b8      	blx	r7
 8016502:	3001      	adds	r0, #1
 8016504:	d1c1      	bne.n	801648a <_printf_float+0x33e>
 8016506:	e680      	b.n	801620a <_printf_float+0xbe>
 8016508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801650a:	2a01      	cmp	r2, #1
 801650c:	dc01      	bgt.n	8016512 <_printf_float+0x3c6>
 801650e:	07db      	lsls	r3, r3, #31
 8016510:	d53a      	bpl.n	8016588 <_printf_float+0x43c>
 8016512:	2301      	movs	r3, #1
 8016514:	4642      	mov	r2, r8
 8016516:	4631      	mov	r1, r6
 8016518:	4628      	mov	r0, r5
 801651a:	47b8      	blx	r7
 801651c:	3001      	adds	r0, #1
 801651e:	f43f ae74 	beq.w	801620a <_printf_float+0xbe>
 8016522:	ee18 3a10 	vmov	r3, s16
 8016526:	4652      	mov	r2, sl
 8016528:	4631      	mov	r1, r6
 801652a:	4628      	mov	r0, r5
 801652c:	47b8      	blx	r7
 801652e:	3001      	adds	r0, #1
 8016530:	f43f ae6b 	beq.w	801620a <_printf_float+0xbe>
 8016534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016538:	2200      	movs	r2, #0
 801653a:	2300      	movs	r3, #0
 801653c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8016540:	f7ea faea 	bl	8000b18 <__aeabi_dcmpeq>
 8016544:	b9d8      	cbnz	r0, 801657e <_printf_float+0x432>
 8016546:	f10a 33ff 	add.w	r3, sl, #4294967295
 801654a:	f108 0201 	add.w	r2, r8, #1
 801654e:	4631      	mov	r1, r6
 8016550:	4628      	mov	r0, r5
 8016552:	47b8      	blx	r7
 8016554:	3001      	adds	r0, #1
 8016556:	d10e      	bne.n	8016576 <_printf_float+0x42a>
 8016558:	e657      	b.n	801620a <_printf_float+0xbe>
 801655a:	2301      	movs	r3, #1
 801655c:	4652      	mov	r2, sl
 801655e:	4631      	mov	r1, r6
 8016560:	4628      	mov	r0, r5
 8016562:	47b8      	blx	r7
 8016564:	3001      	adds	r0, #1
 8016566:	f43f ae50 	beq.w	801620a <_printf_float+0xbe>
 801656a:	f108 0801 	add.w	r8, r8, #1
 801656e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016570:	3b01      	subs	r3, #1
 8016572:	4543      	cmp	r3, r8
 8016574:	dcf1      	bgt.n	801655a <_printf_float+0x40e>
 8016576:	464b      	mov	r3, r9
 8016578:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801657c:	e6da      	b.n	8016334 <_printf_float+0x1e8>
 801657e:	f04f 0800 	mov.w	r8, #0
 8016582:	f104 0a1a 	add.w	sl, r4, #26
 8016586:	e7f2      	b.n	801656e <_printf_float+0x422>
 8016588:	2301      	movs	r3, #1
 801658a:	4642      	mov	r2, r8
 801658c:	e7df      	b.n	801654e <_printf_float+0x402>
 801658e:	2301      	movs	r3, #1
 8016590:	464a      	mov	r2, r9
 8016592:	4631      	mov	r1, r6
 8016594:	4628      	mov	r0, r5
 8016596:	47b8      	blx	r7
 8016598:	3001      	adds	r0, #1
 801659a:	f43f ae36 	beq.w	801620a <_printf_float+0xbe>
 801659e:	f108 0801 	add.w	r8, r8, #1
 80165a2:	68e3      	ldr	r3, [r4, #12]
 80165a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80165a6:	1a5b      	subs	r3, r3, r1
 80165a8:	4543      	cmp	r3, r8
 80165aa:	dcf0      	bgt.n	801658e <_printf_float+0x442>
 80165ac:	e6f8      	b.n	80163a0 <_printf_float+0x254>
 80165ae:	f04f 0800 	mov.w	r8, #0
 80165b2:	f104 0919 	add.w	r9, r4, #25
 80165b6:	e7f4      	b.n	80165a2 <_printf_float+0x456>

080165b8 <_printf_common>:
 80165b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80165bc:	4616      	mov	r6, r2
 80165be:	4699      	mov	r9, r3
 80165c0:	688a      	ldr	r2, [r1, #8]
 80165c2:	690b      	ldr	r3, [r1, #16]
 80165c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80165c8:	4293      	cmp	r3, r2
 80165ca:	bfb8      	it	lt
 80165cc:	4613      	movlt	r3, r2
 80165ce:	6033      	str	r3, [r6, #0]
 80165d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80165d4:	4607      	mov	r7, r0
 80165d6:	460c      	mov	r4, r1
 80165d8:	b10a      	cbz	r2, 80165de <_printf_common+0x26>
 80165da:	3301      	adds	r3, #1
 80165dc:	6033      	str	r3, [r6, #0]
 80165de:	6823      	ldr	r3, [r4, #0]
 80165e0:	0699      	lsls	r1, r3, #26
 80165e2:	bf42      	ittt	mi
 80165e4:	6833      	ldrmi	r3, [r6, #0]
 80165e6:	3302      	addmi	r3, #2
 80165e8:	6033      	strmi	r3, [r6, #0]
 80165ea:	6825      	ldr	r5, [r4, #0]
 80165ec:	f015 0506 	ands.w	r5, r5, #6
 80165f0:	d106      	bne.n	8016600 <_printf_common+0x48>
 80165f2:	f104 0a19 	add.w	sl, r4, #25
 80165f6:	68e3      	ldr	r3, [r4, #12]
 80165f8:	6832      	ldr	r2, [r6, #0]
 80165fa:	1a9b      	subs	r3, r3, r2
 80165fc:	42ab      	cmp	r3, r5
 80165fe:	dc26      	bgt.n	801664e <_printf_common+0x96>
 8016600:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016604:	1e13      	subs	r3, r2, #0
 8016606:	6822      	ldr	r2, [r4, #0]
 8016608:	bf18      	it	ne
 801660a:	2301      	movne	r3, #1
 801660c:	0692      	lsls	r2, r2, #26
 801660e:	d42b      	bmi.n	8016668 <_printf_common+0xb0>
 8016610:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016614:	4649      	mov	r1, r9
 8016616:	4638      	mov	r0, r7
 8016618:	47c0      	blx	r8
 801661a:	3001      	adds	r0, #1
 801661c:	d01e      	beq.n	801665c <_printf_common+0xa4>
 801661e:	6823      	ldr	r3, [r4, #0]
 8016620:	6922      	ldr	r2, [r4, #16]
 8016622:	f003 0306 	and.w	r3, r3, #6
 8016626:	2b04      	cmp	r3, #4
 8016628:	bf02      	ittt	eq
 801662a:	68e5      	ldreq	r5, [r4, #12]
 801662c:	6833      	ldreq	r3, [r6, #0]
 801662e:	1aed      	subeq	r5, r5, r3
 8016630:	68a3      	ldr	r3, [r4, #8]
 8016632:	bf0c      	ite	eq
 8016634:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016638:	2500      	movne	r5, #0
 801663a:	4293      	cmp	r3, r2
 801663c:	bfc4      	itt	gt
 801663e:	1a9b      	subgt	r3, r3, r2
 8016640:	18ed      	addgt	r5, r5, r3
 8016642:	2600      	movs	r6, #0
 8016644:	341a      	adds	r4, #26
 8016646:	42b5      	cmp	r5, r6
 8016648:	d11a      	bne.n	8016680 <_printf_common+0xc8>
 801664a:	2000      	movs	r0, #0
 801664c:	e008      	b.n	8016660 <_printf_common+0xa8>
 801664e:	2301      	movs	r3, #1
 8016650:	4652      	mov	r2, sl
 8016652:	4649      	mov	r1, r9
 8016654:	4638      	mov	r0, r7
 8016656:	47c0      	blx	r8
 8016658:	3001      	adds	r0, #1
 801665a:	d103      	bne.n	8016664 <_printf_common+0xac>
 801665c:	f04f 30ff 	mov.w	r0, #4294967295
 8016660:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016664:	3501      	adds	r5, #1
 8016666:	e7c6      	b.n	80165f6 <_printf_common+0x3e>
 8016668:	18e1      	adds	r1, r4, r3
 801666a:	1c5a      	adds	r2, r3, #1
 801666c:	2030      	movs	r0, #48	; 0x30
 801666e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016672:	4422      	add	r2, r4
 8016674:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016678:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801667c:	3302      	adds	r3, #2
 801667e:	e7c7      	b.n	8016610 <_printf_common+0x58>
 8016680:	2301      	movs	r3, #1
 8016682:	4622      	mov	r2, r4
 8016684:	4649      	mov	r1, r9
 8016686:	4638      	mov	r0, r7
 8016688:	47c0      	blx	r8
 801668a:	3001      	adds	r0, #1
 801668c:	d0e6      	beq.n	801665c <_printf_common+0xa4>
 801668e:	3601      	adds	r6, #1
 8016690:	e7d9      	b.n	8016646 <_printf_common+0x8e>
	...

08016694 <_printf_i>:
 8016694:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016698:	7e0f      	ldrb	r7, [r1, #24]
 801669a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801669c:	2f78      	cmp	r7, #120	; 0x78
 801669e:	4691      	mov	r9, r2
 80166a0:	4680      	mov	r8, r0
 80166a2:	460c      	mov	r4, r1
 80166a4:	469a      	mov	sl, r3
 80166a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80166aa:	d807      	bhi.n	80166bc <_printf_i+0x28>
 80166ac:	2f62      	cmp	r7, #98	; 0x62
 80166ae:	d80a      	bhi.n	80166c6 <_printf_i+0x32>
 80166b0:	2f00      	cmp	r7, #0
 80166b2:	f000 80d4 	beq.w	801685e <_printf_i+0x1ca>
 80166b6:	2f58      	cmp	r7, #88	; 0x58
 80166b8:	f000 80c0 	beq.w	801683c <_printf_i+0x1a8>
 80166bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80166c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80166c4:	e03a      	b.n	801673c <_printf_i+0xa8>
 80166c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80166ca:	2b15      	cmp	r3, #21
 80166cc:	d8f6      	bhi.n	80166bc <_printf_i+0x28>
 80166ce:	a101      	add	r1, pc, #4	; (adr r1, 80166d4 <_printf_i+0x40>)
 80166d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80166d4:	0801672d 	.word	0x0801672d
 80166d8:	08016741 	.word	0x08016741
 80166dc:	080166bd 	.word	0x080166bd
 80166e0:	080166bd 	.word	0x080166bd
 80166e4:	080166bd 	.word	0x080166bd
 80166e8:	080166bd 	.word	0x080166bd
 80166ec:	08016741 	.word	0x08016741
 80166f0:	080166bd 	.word	0x080166bd
 80166f4:	080166bd 	.word	0x080166bd
 80166f8:	080166bd 	.word	0x080166bd
 80166fc:	080166bd 	.word	0x080166bd
 8016700:	08016845 	.word	0x08016845
 8016704:	0801676d 	.word	0x0801676d
 8016708:	080167ff 	.word	0x080167ff
 801670c:	080166bd 	.word	0x080166bd
 8016710:	080166bd 	.word	0x080166bd
 8016714:	08016867 	.word	0x08016867
 8016718:	080166bd 	.word	0x080166bd
 801671c:	0801676d 	.word	0x0801676d
 8016720:	080166bd 	.word	0x080166bd
 8016724:	080166bd 	.word	0x080166bd
 8016728:	08016807 	.word	0x08016807
 801672c:	682b      	ldr	r3, [r5, #0]
 801672e:	1d1a      	adds	r2, r3, #4
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	602a      	str	r2, [r5, #0]
 8016734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016738:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801673c:	2301      	movs	r3, #1
 801673e:	e09f      	b.n	8016880 <_printf_i+0x1ec>
 8016740:	6820      	ldr	r0, [r4, #0]
 8016742:	682b      	ldr	r3, [r5, #0]
 8016744:	0607      	lsls	r7, r0, #24
 8016746:	f103 0104 	add.w	r1, r3, #4
 801674a:	6029      	str	r1, [r5, #0]
 801674c:	d501      	bpl.n	8016752 <_printf_i+0xbe>
 801674e:	681e      	ldr	r6, [r3, #0]
 8016750:	e003      	b.n	801675a <_printf_i+0xc6>
 8016752:	0646      	lsls	r6, r0, #25
 8016754:	d5fb      	bpl.n	801674e <_printf_i+0xba>
 8016756:	f9b3 6000 	ldrsh.w	r6, [r3]
 801675a:	2e00      	cmp	r6, #0
 801675c:	da03      	bge.n	8016766 <_printf_i+0xd2>
 801675e:	232d      	movs	r3, #45	; 0x2d
 8016760:	4276      	negs	r6, r6
 8016762:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016766:	485a      	ldr	r0, [pc, #360]	; (80168d0 <_printf_i+0x23c>)
 8016768:	230a      	movs	r3, #10
 801676a:	e012      	b.n	8016792 <_printf_i+0xfe>
 801676c:	682b      	ldr	r3, [r5, #0]
 801676e:	6820      	ldr	r0, [r4, #0]
 8016770:	1d19      	adds	r1, r3, #4
 8016772:	6029      	str	r1, [r5, #0]
 8016774:	0605      	lsls	r5, r0, #24
 8016776:	d501      	bpl.n	801677c <_printf_i+0xe8>
 8016778:	681e      	ldr	r6, [r3, #0]
 801677a:	e002      	b.n	8016782 <_printf_i+0xee>
 801677c:	0641      	lsls	r1, r0, #25
 801677e:	d5fb      	bpl.n	8016778 <_printf_i+0xe4>
 8016780:	881e      	ldrh	r6, [r3, #0]
 8016782:	4853      	ldr	r0, [pc, #332]	; (80168d0 <_printf_i+0x23c>)
 8016784:	2f6f      	cmp	r7, #111	; 0x6f
 8016786:	bf0c      	ite	eq
 8016788:	2308      	moveq	r3, #8
 801678a:	230a      	movne	r3, #10
 801678c:	2100      	movs	r1, #0
 801678e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016792:	6865      	ldr	r5, [r4, #4]
 8016794:	60a5      	str	r5, [r4, #8]
 8016796:	2d00      	cmp	r5, #0
 8016798:	bfa2      	ittt	ge
 801679a:	6821      	ldrge	r1, [r4, #0]
 801679c:	f021 0104 	bicge.w	r1, r1, #4
 80167a0:	6021      	strge	r1, [r4, #0]
 80167a2:	b90e      	cbnz	r6, 80167a8 <_printf_i+0x114>
 80167a4:	2d00      	cmp	r5, #0
 80167a6:	d04b      	beq.n	8016840 <_printf_i+0x1ac>
 80167a8:	4615      	mov	r5, r2
 80167aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80167ae:	fb03 6711 	mls	r7, r3, r1, r6
 80167b2:	5dc7      	ldrb	r7, [r0, r7]
 80167b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80167b8:	4637      	mov	r7, r6
 80167ba:	42bb      	cmp	r3, r7
 80167bc:	460e      	mov	r6, r1
 80167be:	d9f4      	bls.n	80167aa <_printf_i+0x116>
 80167c0:	2b08      	cmp	r3, #8
 80167c2:	d10b      	bne.n	80167dc <_printf_i+0x148>
 80167c4:	6823      	ldr	r3, [r4, #0]
 80167c6:	07de      	lsls	r6, r3, #31
 80167c8:	d508      	bpl.n	80167dc <_printf_i+0x148>
 80167ca:	6923      	ldr	r3, [r4, #16]
 80167cc:	6861      	ldr	r1, [r4, #4]
 80167ce:	4299      	cmp	r1, r3
 80167d0:	bfde      	ittt	le
 80167d2:	2330      	movle	r3, #48	; 0x30
 80167d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80167d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80167dc:	1b52      	subs	r2, r2, r5
 80167de:	6122      	str	r2, [r4, #16]
 80167e0:	f8cd a000 	str.w	sl, [sp]
 80167e4:	464b      	mov	r3, r9
 80167e6:	aa03      	add	r2, sp, #12
 80167e8:	4621      	mov	r1, r4
 80167ea:	4640      	mov	r0, r8
 80167ec:	f7ff fee4 	bl	80165b8 <_printf_common>
 80167f0:	3001      	adds	r0, #1
 80167f2:	d14a      	bne.n	801688a <_printf_i+0x1f6>
 80167f4:	f04f 30ff 	mov.w	r0, #4294967295
 80167f8:	b004      	add	sp, #16
 80167fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80167fe:	6823      	ldr	r3, [r4, #0]
 8016800:	f043 0320 	orr.w	r3, r3, #32
 8016804:	6023      	str	r3, [r4, #0]
 8016806:	4833      	ldr	r0, [pc, #204]	; (80168d4 <_printf_i+0x240>)
 8016808:	2778      	movs	r7, #120	; 0x78
 801680a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801680e:	6823      	ldr	r3, [r4, #0]
 8016810:	6829      	ldr	r1, [r5, #0]
 8016812:	061f      	lsls	r7, r3, #24
 8016814:	f851 6b04 	ldr.w	r6, [r1], #4
 8016818:	d402      	bmi.n	8016820 <_printf_i+0x18c>
 801681a:	065f      	lsls	r7, r3, #25
 801681c:	bf48      	it	mi
 801681e:	b2b6      	uxthmi	r6, r6
 8016820:	07df      	lsls	r7, r3, #31
 8016822:	bf48      	it	mi
 8016824:	f043 0320 	orrmi.w	r3, r3, #32
 8016828:	6029      	str	r1, [r5, #0]
 801682a:	bf48      	it	mi
 801682c:	6023      	strmi	r3, [r4, #0]
 801682e:	b91e      	cbnz	r6, 8016838 <_printf_i+0x1a4>
 8016830:	6823      	ldr	r3, [r4, #0]
 8016832:	f023 0320 	bic.w	r3, r3, #32
 8016836:	6023      	str	r3, [r4, #0]
 8016838:	2310      	movs	r3, #16
 801683a:	e7a7      	b.n	801678c <_printf_i+0xf8>
 801683c:	4824      	ldr	r0, [pc, #144]	; (80168d0 <_printf_i+0x23c>)
 801683e:	e7e4      	b.n	801680a <_printf_i+0x176>
 8016840:	4615      	mov	r5, r2
 8016842:	e7bd      	b.n	80167c0 <_printf_i+0x12c>
 8016844:	682b      	ldr	r3, [r5, #0]
 8016846:	6826      	ldr	r6, [r4, #0]
 8016848:	6961      	ldr	r1, [r4, #20]
 801684a:	1d18      	adds	r0, r3, #4
 801684c:	6028      	str	r0, [r5, #0]
 801684e:	0635      	lsls	r5, r6, #24
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	d501      	bpl.n	8016858 <_printf_i+0x1c4>
 8016854:	6019      	str	r1, [r3, #0]
 8016856:	e002      	b.n	801685e <_printf_i+0x1ca>
 8016858:	0670      	lsls	r0, r6, #25
 801685a:	d5fb      	bpl.n	8016854 <_printf_i+0x1c0>
 801685c:	8019      	strh	r1, [r3, #0]
 801685e:	2300      	movs	r3, #0
 8016860:	6123      	str	r3, [r4, #16]
 8016862:	4615      	mov	r5, r2
 8016864:	e7bc      	b.n	80167e0 <_printf_i+0x14c>
 8016866:	682b      	ldr	r3, [r5, #0]
 8016868:	1d1a      	adds	r2, r3, #4
 801686a:	602a      	str	r2, [r5, #0]
 801686c:	681d      	ldr	r5, [r3, #0]
 801686e:	6862      	ldr	r2, [r4, #4]
 8016870:	2100      	movs	r1, #0
 8016872:	4628      	mov	r0, r5
 8016874:	f7e9 fcd4 	bl	8000220 <memchr>
 8016878:	b108      	cbz	r0, 801687e <_printf_i+0x1ea>
 801687a:	1b40      	subs	r0, r0, r5
 801687c:	6060      	str	r0, [r4, #4]
 801687e:	6863      	ldr	r3, [r4, #4]
 8016880:	6123      	str	r3, [r4, #16]
 8016882:	2300      	movs	r3, #0
 8016884:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016888:	e7aa      	b.n	80167e0 <_printf_i+0x14c>
 801688a:	6923      	ldr	r3, [r4, #16]
 801688c:	462a      	mov	r2, r5
 801688e:	4649      	mov	r1, r9
 8016890:	4640      	mov	r0, r8
 8016892:	47d0      	blx	sl
 8016894:	3001      	adds	r0, #1
 8016896:	d0ad      	beq.n	80167f4 <_printf_i+0x160>
 8016898:	6823      	ldr	r3, [r4, #0]
 801689a:	079b      	lsls	r3, r3, #30
 801689c:	d413      	bmi.n	80168c6 <_printf_i+0x232>
 801689e:	68e0      	ldr	r0, [r4, #12]
 80168a0:	9b03      	ldr	r3, [sp, #12]
 80168a2:	4298      	cmp	r0, r3
 80168a4:	bfb8      	it	lt
 80168a6:	4618      	movlt	r0, r3
 80168a8:	e7a6      	b.n	80167f8 <_printf_i+0x164>
 80168aa:	2301      	movs	r3, #1
 80168ac:	4632      	mov	r2, r6
 80168ae:	4649      	mov	r1, r9
 80168b0:	4640      	mov	r0, r8
 80168b2:	47d0      	blx	sl
 80168b4:	3001      	adds	r0, #1
 80168b6:	d09d      	beq.n	80167f4 <_printf_i+0x160>
 80168b8:	3501      	adds	r5, #1
 80168ba:	68e3      	ldr	r3, [r4, #12]
 80168bc:	9903      	ldr	r1, [sp, #12]
 80168be:	1a5b      	subs	r3, r3, r1
 80168c0:	42ab      	cmp	r3, r5
 80168c2:	dcf2      	bgt.n	80168aa <_printf_i+0x216>
 80168c4:	e7eb      	b.n	801689e <_printf_i+0x20a>
 80168c6:	2500      	movs	r5, #0
 80168c8:	f104 0619 	add.w	r6, r4, #25
 80168cc:	e7f5      	b.n	80168ba <_printf_i+0x226>
 80168ce:	bf00      	nop
 80168d0:	0801b972 	.word	0x0801b972
 80168d4:	0801b983 	.word	0x0801b983

080168d8 <std>:
 80168d8:	2300      	movs	r3, #0
 80168da:	b510      	push	{r4, lr}
 80168dc:	4604      	mov	r4, r0
 80168de:	e9c0 3300 	strd	r3, r3, [r0]
 80168e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80168e6:	6083      	str	r3, [r0, #8]
 80168e8:	8181      	strh	r1, [r0, #12]
 80168ea:	6643      	str	r3, [r0, #100]	; 0x64
 80168ec:	81c2      	strh	r2, [r0, #14]
 80168ee:	6183      	str	r3, [r0, #24]
 80168f0:	4619      	mov	r1, r3
 80168f2:	2208      	movs	r2, #8
 80168f4:	305c      	adds	r0, #92	; 0x5c
 80168f6:	f000 f914 	bl	8016b22 <memset>
 80168fa:	4b0d      	ldr	r3, [pc, #52]	; (8016930 <std+0x58>)
 80168fc:	6263      	str	r3, [r4, #36]	; 0x24
 80168fe:	4b0d      	ldr	r3, [pc, #52]	; (8016934 <std+0x5c>)
 8016900:	62a3      	str	r3, [r4, #40]	; 0x28
 8016902:	4b0d      	ldr	r3, [pc, #52]	; (8016938 <std+0x60>)
 8016904:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016906:	4b0d      	ldr	r3, [pc, #52]	; (801693c <std+0x64>)
 8016908:	6323      	str	r3, [r4, #48]	; 0x30
 801690a:	4b0d      	ldr	r3, [pc, #52]	; (8016940 <std+0x68>)
 801690c:	6224      	str	r4, [r4, #32]
 801690e:	429c      	cmp	r4, r3
 8016910:	d006      	beq.n	8016920 <std+0x48>
 8016912:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8016916:	4294      	cmp	r4, r2
 8016918:	d002      	beq.n	8016920 <std+0x48>
 801691a:	33d0      	adds	r3, #208	; 0xd0
 801691c:	429c      	cmp	r4, r3
 801691e:	d105      	bne.n	801692c <std+0x54>
 8016920:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016928:	f000 b978 	b.w	8016c1c <__retarget_lock_init_recursive>
 801692c:	bd10      	pop	{r4, pc}
 801692e:	bf00      	nop
 8016930:	08016a9d 	.word	0x08016a9d
 8016934:	08016abf 	.word	0x08016abf
 8016938:	08016af7 	.word	0x08016af7
 801693c:	08016b1b 	.word	0x08016b1b
 8016940:	20002ec4 	.word	0x20002ec4

08016944 <stdio_exit_handler>:
 8016944:	4a02      	ldr	r2, [pc, #8]	; (8016950 <stdio_exit_handler+0xc>)
 8016946:	4903      	ldr	r1, [pc, #12]	; (8016954 <stdio_exit_handler+0x10>)
 8016948:	4803      	ldr	r0, [pc, #12]	; (8016958 <stdio_exit_handler+0x14>)
 801694a:	f000 b869 	b.w	8016a20 <_fwalk_sglue>
 801694e:	bf00      	nop
 8016950:	20000344 	.word	0x20000344
 8016954:	080185d1 	.word	0x080185d1
 8016958:	20000350 	.word	0x20000350

0801695c <cleanup_stdio>:
 801695c:	6841      	ldr	r1, [r0, #4]
 801695e:	4b0c      	ldr	r3, [pc, #48]	; (8016990 <cleanup_stdio+0x34>)
 8016960:	4299      	cmp	r1, r3
 8016962:	b510      	push	{r4, lr}
 8016964:	4604      	mov	r4, r0
 8016966:	d001      	beq.n	801696c <cleanup_stdio+0x10>
 8016968:	f001 fe32 	bl	80185d0 <_fflush_r>
 801696c:	68a1      	ldr	r1, [r4, #8]
 801696e:	4b09      	ldr	r3, [pc, #36]	; (8016994 <cleanup_stdio+0x38>)
 8016970:	4299      	cmp	r1, r3
 8016972:	d002      	beq.n	801697a <cleanup_stdio+0x1e>
 8016974:	4620      	mov	r0, r4
 8016976:	f001 fe2b 	bl	80185d0 <_fflush_r>
 801697a:	68e1      	ldr	r1, [r4, #12]
 801697c:	4b06      	ldr	r3, [pc, #24]	; (8016998 <cleanup_stdio+0x3c>)
 801697e:	4299      	cmp	r1, r3
 8016980:	d004      	beq.n	801698c <cleanup_stdio+0x30>
 8016982:	4620      	mov	r0, r4
 8016984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016988:	f001 be22 	b.w	80185d0 <_fflush_r>
 801698c:	bd10      	pop	{r4, pc}
 801698e:	bf00      	nop
 8016990:	20002ec4 	.word	0x20002ec4
 8016994:	20002f2c 	.word	0x20002f2c
 8016998:	20002f94 	.word	0x20002f94

0801699c <global_stdio_init.part.0>:
 801699c:	b510      	push	{r4, lr}
 801699e:	4b0b      	ldr	r3, [pc, #44]	; (80169cc <global_stdio_init.part.0+0x30>)
 80169a0:	4c0b      	ldr	r4, [pc, #44]	; (80169d0 <global_stdio_init.part.0+0x34>)
 80169a2:	4a0c      	ldr	r2, [pc, #48]	; (80169d4 <global_stdio_init.part.0+0x38>)
 80169a4:	601a      	str	r2, [r3, #0]
 80169a6:	4620      	mov	r0, r4
 80169a8:	2200      	movs	r2, #0
 80169aa:	2104      	movs	r1, #4
 80169ac:	f7ff ff94 	bl	80168d8 <std>
 80169b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80169b4:	2201      	movs	r2, #1
 80169b6:	2109      	movs	r1, #9
 80169b8:	f7ff ff8e 	bl	80168d8 <std>
 80169bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80169c0:	2202      	movs	r2, #2
 80169c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169c6:	2112      	movs	r1, #18
 80169c8:	f7ff bf86 	b.w	80168d8 <std>
 80169cc:	20002ffc 	.word	0x20002ffc
 80169d0:	20002ec4 	.word	0x20002ec4
 80169d4:	08016945 	.word	0x08016945

080169d8 <__sfp_lock_acquire>:
 80169d8:	4801      	ldr	r0, [pc, #4]	; (80169e0 <__sfp_lock_acquire+0x8>)
 80169da:	f000 b920 	b.w	8016c1e <__retarget_lock_acquire_recursive>
 80169de:	bf00      	nop
 80169e0:	20003005 	.word	0x20003005

080169e4 <__sfp_lock_release>:
 80169e4:	4801      	ldr	r0, [pc, #4]	; (80169ec <__sfp_lock_release+0x8>)
 80169e6:	f000 b91b 	b.w	8016c20 <__retarget_lock_release_recursive>
 80169ea:	bf00      	nop
 80169ec:	20003005 	.word	0x20003005

080169f0 <__sinit>:
 80169f0:	b510      	push	{r4, lr}
 80169f2:	4604      	mov	r4, r0
 80169f4:	f7ff fff0 	bl	80169d8 <__sfp_lock_acquire>
 80169f8:	6a23      	ldr	r3, [r4, #32]
 80169fa:	b11b      	cbz	r3, 8016a04 <__sinit+0x14>
 80169fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016a00:	f7ff bff0 	b.w	80169e4 <__sfp_lock_release>
 8016a04:	4b04      	ldr	r3, [pc, #16]	; (8016a18 <__sinit+0x28>)
 8016a06:	6223      	str	r3, [r4, #32]
 8016a08:	4b04      	ldr	r3, [pc, #16]	; (8016a1c <__sinit+0x2c>)
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d1f5      	bne.n	80169fc <__sinit+0xc>
 8016a10:	f7ff ffc4 	bl	801699c <global_stdio_init.part.0>
 8016a14:	e7f2      	b.n	80169fc <__sinit+0xc>
 8016a16:	bf00      	nop
 8016a18:	0801695d 	.word	0x0801695d
 8016a1c:	20002ffc 	.word	0x20002ffc

08016a20 <_fwalk_sglue>:
 8016a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a24:	4607      	mov	r7, r0
 8016a26:	4688      	mov	r8, r1
 8016a28:	4614      	mov	r4, r2
 8016a2a:	2600      	movs	r6, #0
 8016a2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016a30:	f1b9 0901 	subs.w	r9, r9, #1
 8016a34:	d505      	bpl.n	8016a42 <_fwalk_sglue+0x22>
 8016a36:	6824      	ldr	r4, [r4, #0]
 8016a38:	2c00      	cmp	r4, #0
 8016a3a:	d1f7      	bne.n	8016a2c <_fwalk_sglue+0xc>
 8016a3c:	4630      	mov	r0, r6
 8016a3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016a42:	89ab      	ldrh	r3, [r5, #12]
 8016a44:	2b01      	cmp	r3, #1
 8016a46:	d907      	bls.n	8016a58 <_fwalk_sglue+0x38>
 8016a48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016a4c:	3301      	adds	r3, #1
 8016a4e:	d003      	beq.n	8016a58 <_fwalk_sglue+0x38>
 8016a50:	4629      	mov	r1, r5
 8016a52:	4638      	mov	r0, r7
 8016a54:	47c0      	blx	r8
 8016a56:	4306      	orrs	r6, r0
 8016a58:	3568      	adds	r5, #104	; 0x68
 8016a5a:	e7e9      	b.n	8016a30 <_fwalk_sglue+0x10>

08016a5c <siprintf>:
 8016a5c:	b40e      	push	{r1, r2, r3}
 8016a5e:	b500      	push	{lr}
 8016a60:	b09c      	sub	sp, #112	; 0x70
 8016a62:	ab1d      	add	r3, sp, #116	; 0x74
 8016a64:	9002      	str	r0, [sp, #8]
 8016a66:	9006      	str	r0, [sp, #24]
 8016a68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016a6c:	4809      	ldr	r0, [pc, #36]	; (8016a94 <siprintf+0x38>)
 8016a6e:	9107      	str	r1, [sp, #28]
 8016a70:	9104      	str	r1, [sp, #16]
 8016a72:	4909      	ldr	r1, [pc, #36]	; (8016a98 <siprintf+0x3c>)
 8016a74:	f853 2b04 	ldr.w	r2, [r3], #4
 8016a78:	9105      	str	r1, [sp, #20]
 8016a7a:	6800      	ldr	r0, [r0, #0]
 8016a7c:	9301      	str	r3, [sp, #4]
 8016a7e:	a902      	add	r1, sp, #8
 8016a80:	f001 fc22 	bl	80182c8 <_svfiprintf_r>
 8016a84:	9b02      	ldr	r3, [sp, #8]
 8016a86:	2200      	movs	r2, #0
 8016a88:	701a      	strb	r2, [r3, #0]
 8016a8a:	b01c      	add	sp, #112	; 0x70
 8016a8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8016a90:	b003      	add	sp, #12
 8016a92:	4770      	bx	lr
 8016a94:	2000039c 	.word	0x2000039c
 8016a98:	ffff0208 	.word	0xffff0208

08016a9c <__sread>:
 8016a9c:	b510      	push	{r4, lr}
 8016a9e:	460c      	mov	r4, r1
 8016aa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016aa4:	f000 f86c 	bl	8016b80 <_read_r>
 8016aa8:	2800      	cmp	r0, #0
 8016aaa:	bfab      	itete	ge
 8016aac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016aae:	89a3      	ldrhlt	r3, [r4, #12]
 8016ab0:	181b      	addge	r3, r3, r0
 8016ab2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016ab6:	bfac      	ite	ge
 8016ab8:	6563      	strge	r3, [r4, #84]	; 0x54
 8016aba:	81a3      	strhlt	r3, [r4, #12]
 8016abc:	bd10      	pop	{r4, pc}

08016abe <__swrite>:
 8016abe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ac2:	461f      	mov	r7, r3
 8016ac4:	898b      	ldrh	r3, [r1, #12]
 8016ac6:	05db      	lsls	r3, r3, #23
 8016ac8:	4605      	mov	r5, r0
 8016aca:	460c      	mov	r4, r1
 8016acc:	4616      	mov	r6, r2
 8016ace:	d505      	bpl.n	8016adc <__swrite+0x1e>
 8016ad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ad4:	2302      	movs	r3, #2
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	f000 f840 	bl	8016b5c <_lseek_r>
 8016adc:	89a3      	ldrh	r3, [r4, #12]
 8016ade:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016ae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016ae6:	81a3      	strh	r3, [r4, #12]
 8016ae8:	4632      	mov	r2, r6
 8016aea:	463b      	mov	r3, r7
 8016aec:	4628      	mov	r0, r5
 8016aee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016af2:	f000 b857 	b.w	8016ba4 <_write_r>

08016af6 <__sseek>:
 8016af6:	b510      	push	{r4, lr}
 8016af8:	460c      	mov	r4, r1
 8016afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016afe:	f000 f82d 	bl	8016b5c <_lseek_r>
 8016b02:	1c43      	adds	r3, r0, #1
 8016b04:	89a3      	ldrh	r3, [r4, #12]
 8016b06:	bf15      	itete	ne
 8016b08:	6560      	strne	r0, [r4, #84]	; 0x54
 8016b0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016b0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016b12:	81a3      	strheq	r3, [r4, #12]
 8016b14:	bf18      	it	ne
 8016b16:	81a3      	strhne	r3, [r4, #12]
 8016b18:	bd10      	pop	{r4, pc}

08016b1a <__sclose>:
 8016b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b1e:	f000 b80d 	b.w	8016b3c <_close_r>

08016b22 <memset>:
 8016b22:	4402      	add	r2, r0
 8016b24:	4603      	mov	r3, r0
 8016b26:	4293      	cmp	r3, r2
 8016b28:	d100      	bne.n	8016b2c <memset+0xa>
 8016b2a:	4770      	bx	lr
 8016b2c:	f803 1b01 	strb.w	r1, [r3], #1
 8016b30:	e7f9      	b.n	8016b26 <memset+0x4>
	...

08016b34 <_localeconv_r>:
 8016b34:	4800      	ldr	r0, [pc, #0]	; (8016b38 <_localeconv_r+0x4>)
 8016b36:	4770      	bx	lr
 8016b38:	20000490 	.word	0x20000490

08016b3c <_close_r>:
 8016b3c:	b538      	push	{r3, r4, r5, lr}
 8016b3e:	4d06      	ldr	r5, [pc, #24]	; (8016b58 <_close_r+0x1c>)
 8016b40:	2300      	movs	r3, #0
 8016b42:	4604      	mov	r4, r0
 8016b44:	4608      	mov	r0, r1
 8016b46:	602b      	str	r3, [r5, #0]
 8016b48:	f7ee fb23 	bl	8005192 <_close>
 8016b4c:	1c43      	adds	r3, r0, #1
 8016b4e:	d102      	bne.n	8016b56 <_close_r+0x1a>
 8016b50:	682b      	ldr	r3, [r5, #0]
 8016b52:	b103      	cbz	r3, 8016b56 <_close_r+0x1a>
 8016b54:	6023      	str	r3, [r4, #0]
 8016b56:	bd38      	pop	{r3, r4, r5, pc}
 8016b58:	20003000 	.word	0x20003000

08016b5c <_lseek_r>:
 8016b5c:	b538      	push	{r3, r4, r5, lr}
 8016b5e:	4d07      	ldr	r5, [pc, #28]	; (8016b7c <_lseek_r+0x20>)
 8016b60:	4604      	mov	r4, r0
 8016b62:	4608      	mov	r0, r1
 8016b64:	4611      	mov	r1, r2
 8016b66:	2200      	movs	r2, #0
 8016b68:	602a      	str	r2, [r5, #0]
 8016b6a:	461a      	mov	r2, r3
 8016b6c:	f7ee fb38 	bl	80051e0 <_lseek>
 8016b70:	1c43      	adds	r3, r0, #1
 8016b72:	d102      	bne.n	8016b7a <_lseek_r+0x1e>
 8016b74:	682b      	ldr	r3, [r5, #0]
 8016b76:	b103      	cbz	r3, 8016b7a <_lseek_r+0x1e>
 8016b78:	6023      	str	r3, [r4, #0]
 8016b7a:	bd38      	pop	{r3, r4, r5, pc}
 8016b7c:	20003000 	.word	0x20003000

08016b80 <_read_r>:
 8016b80:	b538      	push	{r3, r4, r5, lr}
 8016b82:	4d07      	ldr	r5, [pc, #28]	; (8016ba0 <_read_r+0x20>)
 8016b84:	4604      	mov	r4, r0
 8016b86:	4608      	mov	r0, r1
 8016b88:	4611      	mov	r1, r2
 8016b8a:	2200      	movs	r2, #0
 8016b8c:	602a      	str	r2, [r5, #0]
 8016b8e:	461a      	mov	r2, r3
 8016b90:	f7ee fac6 	bl	8005120 <_read>
 8016b94:	1c43      	adds	r3, r0, #1
 8016b96:	d102      	bne.n	8016b9e <_read_r+0x1e>
 8016b98:	682b      	ldr	r3, [r5, #0]
 8016b9a:	b103      	cbz	r3, 8016b9e <_read_r+0x1e>
 8016b9c:	6023      	str	r3, [r4, #0]
 8016b9e:	bd38      	pop	{r3, r4, r5, pc}
 8016ba0:	20003000 	.word	0x20003000

08016ba4 <_write_r>:
 8016ba4:	b538      	push	{r3, r4, r5, lr}
 8016ba6:	4d07      	ldr	r5, [pc, #28]	; (8016bc4 <_write_r+0x20>)
 8016ba8:	4604      	mov	r4, r0
 8016baa:	4608      	mov	r0, r1
 8016bac:	4611      	mov	r1, r2
 8016bae:	2200      	movs	r2, #0
 8016bb0:	602a      	str	r2, [r5, #0]
 8016bb2:	461a      	mov	r2, r3
 8016bb4:	f7ee fad1 	bl	800515a <_write>
 8016bb8:	1c43      	adds	r3, r0, #1
 8016bba:	d102      	bne.n	8016bc2 <_write_r+0x1e>
 8016bbc:	682b      	ldr	r3, [r5, #0]
 8016bbe:	b103      	cbz	r3, 8016bc2 <_write_r+0x1e>
 8016bc0:	6023      	str	r3, [r4, #0]
 8016bc2:	bd38      	pop	{r3, r4, r5, pc}
 8016bc4:	20003000 	.word	0x20003000

08016bc8 <__errno>:
 8016bc8:	4b01      	ldr	r3, [pc, #4]	; (8016bd0 <__errno+0x8>)
 8016bca:	6818      	ldr	r0, [r3, #0]
 8016bcc:	4770      	bx	lr
 8016bce:	bf00      	nop
 8016bd0:	2000039c 	.word	0x2000039c

08016bd4 <__libc_init_array>:
 8016bd4:	b570      	push	{r4, r5, r6, lr}
 8016bd6:	4d0d      	ldr	r5, [pc, #52]	; (8016c0c <__libc_init_array+0x38>)
 8016bd8:	4c0d      	ldr	r4, [pc, #52]	; (8016c10 <__libc_init_array+0x3c>)
 8016bda:	1b64      	subs	r4, r4, r5
 8016bdc:	10a4      	asrs	r4, r4, #2
 8016bde:	2600      	movs	r6, #0
 8016be0:	42a6      	cmp	r6, r4
 8016be2:	d109      	bne.n	8016bf8 <__libc_init_array+0x24>
 8016be4:	4d0b      	ldr	r5, [pc, #44]	; (8016c14 <__libc_init_array+0x40>)
 8016be6:	4c0c      	ldr	r4, [pc, #48]	; (8016c18 <__libc_init_array+0x44>)
 8016be8:	f002 fa1a 	bl	8019020 <_init>
 8016bec:	1b64      	subs	r4, r4, r5
 8016bee:	10a4      	asrs	r4, r4, #2
 8016bf0:	2600      	movs	r6, #0
 8016bf2:	42a6      	cmp	r6, r4
 8016bf4:	d105      	bne.n	8016c02 <__libc_init_array+0x2e>
 8016bf6:	bd70      	pop	{r4, r5, r6, pc}
 8016bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8016bfc:	4798      	blx	r3
 8016bfe:	3601      	adds	r6, #1
 8016c00:	e7ee      	b.n	8016be0 <__libc_init_array+0xc>
 8016c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8016c06:	4798      	blx	r3
 8016c08:	3601      	adds	r6, #1
 8016c0a:	e7f2      	b.n	8016bf2 <__libc_init_array+0x1e>
 8016c0c:	0801bcf0 	.word	0x0801bcf0
 8016c10:	0801bcf0 	.word	0x0801bcf0
 8016c14:	0801bcf0 	.word	0x0801bcf0
 8016c18:	0801bcf4 	.word	0x0801bcf4

08016c1c <__retarget_lock_init_recursive>:
 8016c1c:	4770      	bx	lr

08016c1e <__retarget_lock_acquire_recursive>:
 8016c1e:	4770      	bx	lr

08016c20 <__retarget_lock_release_recursive>:
 8016c20:	4770      	bx	lr

08016c22 <quorem>:
 8016c22:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c26:	6903      	ldr	r3, [r0, #16]
 8016c28:	690c      	ldr	r4, [r1, #16]
 8016c2a:	42a3      	cmp	r3, r4
 8016c2c:	4607      	mov	r7, r0
 8016c2e:	db7e      	blt.n	8016d2e <quorem+0x10c>
 8016c30:	3c01      	subs	r4, #1
 8016c32:	f101 0814 	add.w	r8, r1, #20
 8016c36:	f100 0514 	add.w	r5, r0, #20
 8016c3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016c3e:	9301      	str	r3, [sp, #4]
 8016c40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016c44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016c48:	3301      	adds	r3, #1
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016c50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016c54:	fbb2 f6f3 	udiv	r6, r2, r3
 8016c58:	d331      	bcc.n	8016cbe <quorem+0x9c>
 8016c5a:	f04f 0e00 	mov.w	lr, #0
 8016c5e:	4640      	mov	r0, r8
 8016c60:	46ac      	mov	ip, r5
 8016c62:	46f2      	mov	sl, lr
 8016c64:	f850 2b04 	ldr.w	r2, [r0], #4
 8016c68:	b293      	uxth	r3, r2
 8016c6a:	fb06 e303 	mla	r3, r6, r3, lr
 8016c6e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016c72:	0c1a      	lsrs	r2, r3, #16
 8016c74:	b29b      	uxth	r3, r3
 8016c76:	ebaa 0303 	sub.w	r3, sl, r3
 8016c7a:	f8dc a000 	ldr.w	sl, [ip]
 8016c7e:	fa13 f38a 	uxtah	r3, r3, sl
 8016c82:	fb06 220e 	mla	r2, r6, lr, r2
 8016c86:	9300      	str	r3, [sp, #0]
 8016c88:	9b00      	ldr	r3, [sp, #0]
 8016c8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016c8e:	b292      	uxth	r2, r2
 8016c90:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016c94:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016c98:	f8bd 3000 	ldrh.w	r3, [sp]
 8016c9c:	4581      	cmp	r9, r0
 8016c9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016ca2:	f84c 3b04 	str.w	r3, [ip], #4
 8016ca6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016caa:	d2db      	bcs.n	8016c64 <quorem+0x42>
 8016cac:	f855 300b 	ldr.w	r3, [r5, fp]
 8016cb0:	b92b      	cbnz	r3, 8016cbe <quorem+0x9c>
 8016cb2:	9b01      	ldr	r3, [sp, #4]
 8016cb4:	3b04      	subs	r3, #4
 8016cb6:	429d      	cmp	r5, r3
 8016cb8:	461a      	mov	r2, r3
 8016cba:	d32c      	bcc.n	8016d16 <quorem+0xf4>
 8016cbc:	613c      	str	r4, [r7, #16]
 8016cbe:	4638      	mov	r0, r7
 8016cc0:	f001 f9a8 	bl	8018014 <__mcmp>
 8016cc4:	2800      	cmp	r0, #0
 8016cc6:	db22      	blt.n	8016d0e <quorem+0xec>
 8016cc8:	3601      	adds	r6, #1
 8016cca:	4629      	mov	r1, r5
 8016ccc:	2000      	movs	r0, #0
 8016cce:	f858 2b04 	ldr.w	r2, [r8], #4
 8016cd2:	f8d1 c000 	ldr.w	ip, [r1]
 8016cd6:	b293      	uxth	r3, r2
 8016cd8:	1ac3      	subs	r3, r0, r3
 8016cda:	0c12      	lsrs	r2, r2, #16
 8016cdc:	fa13 f38c 	uxtah	r3, r3, ip
 8016ce0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8016ce4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016ce8:	b29b      	uxth	r3, r3
 8016cea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016cee:	45c1      	cmp	r9, r8
 8016cf0:	f841 3b04 	str.w	r3, [r1], #4
 8016cf4:	ea4f 4022 	mov.w	r0, r2, asr #16
 8016cf8:	d2e9      	bcs.n	8016cce <quorem+0xac>
 8016cfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016cfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016d02:	b922      	cbnz	r2, 8016d0e <quorem+0xec>
 8016d04:	3b04      	subs	r3, #4
 8016d06:	429d      	cmp	r5, r3
 8016d08:	461a      	mov	r2, r3
 8016d0a:	d30a      	bcc.n	8016d22 <quorem+0x100>
 8016d0c:	613c      	str	r4, [r7, #16]
 8016d0e:	4630      	mov	r0, r6
 8016d10:	b003      	add	sp, #12
 8016d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d16:	6812      	ldr	r2, [r2, #0]
 8016d18:	3b04      	subs	r3, #4
 8016d1a:	2a00      	cmp	r2, #0
 8016d1c:	d1ce      	bne.n	8016cbc <quorem+0x9a>
 8016d1e:	3c01      	subs	r4, #1
 8016d20:	e7c9      	b.n	8016cb6 <quorem+0x94>
 8016d22:	6812      	ldr	r2, [r2, #0]
 8016d24:	3b04      	subs	r3, #4
 8016d26:	2a00      	cmp	r2, #0
 8016d28:	d1f0      	bne.n	8016d0c <quorem+0xea>
 8016d2a:	3c01      	subs	r4, #1
 8016d2c:	e7eb      	b.n	8016d06 <quorem+0xe4>
 8016d2e:	2000      	movs	r0, #0
 8016d30:	e7ee      	b.n	8016d10 <quorem+0xee>
 8016d32:	0000      	movs	r0, r0
 8016d34:	0000      	movs	r0, r0
	...

08016d38 <_dtoa_r>:
 8016d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d3c:	ed2d 8b04 	vpush	{d8-d9}
 8016d40:	69c5      	ldr	r5, [r0, #28]
 8016d42:	b093      	sub	sp, #76	; 0x4c
 8016d44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8016d48:	ec57 6b10 	vmov	r6, r7, d0
 8016d4c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016d50:	9107      	str	r1, [sp, #28]
 8016d52:	4604      	mov	r4, r0
 8016d54:	920a      	str	r2, [sp, #40]	; 0x28
 8016d56:	930d      	str	r3, [sp, #52]	; 0x34
 8016d58:	b975      	cbnz	r5, 8016d78 <_dtoa_r+0x40>
 8016d5a:	2010      	movs	r0, #16
 8016d5c:	f000 fe2a 	bl	80179b4 <malloc>
 8016d60:	4602      	mov	r2, r0
 8016d62:	61e0      	str	r0, [r4, #28]
 8016d64:	b920      	cbnz	r0, 8016d70 <_dtoa_r+0x38>
 8016d66:	4bae      	ldr	r3, [pc, #696]	; (8017020 <_dtoa_r+0x2e8>)
 8016d68:	21ef      	movs	r1, #239	; 0xef
 8016d6a:	48ae      	ldr	r0, [pc, #696]	; (8017024 <_dtoa_r+0x2ec>)
 8016d6c:	f001 fc90 	bl	8018690 <__assert_func>
 8016d70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016d74:	6005      	str	r5, [r0, #0]
 8016d76:	60c5      	str	r5, [r0, #12]
 8016d78:	69e3      	ldr	r3, [r4, #28]
 8016d7a:	6819      	ldr	r1, [r3, #0]
 8016d7c:	b151      	cbz	r1, 8016d94 <_dtoa_r+0x5c>
 8016d7e:	685a      	ldr	r2, [r3, #4]
 8016d80:	604a      	str	r2, [r1, #4]
 8016d82:	2301      	movs	r3, #1
 8016d84:	4093      	lsls	r3, r2
 8016d86:	608b      	str	r3, [r1, #8]
 8016d88:	4620      	mov	r0, r4
 8016d8a:	f000 ff07 	bl	8017b9c <_Bfree>
 8016d8e:	69e3      	ldr	r3, [r4, #28]
 8016d90:	2200      	movs	r2, #0
 8016d92:	601a      	str	r2, [r3, #0]
 8016d94:	1e3b      	subs	r3, r7, #0
 8016d96:	bfbb      	ittet	lt
 8016d98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016d9c:	9303      	strlt	r3, [sp, #12]
 8016d9e:	2300      	movge	r3, #0
 8016da0:	2201      	movlt	r2, #1
 8016da2:	bfac      	ite	ge
 8016da4:	f8c8 3000 	strge.w	r3, [r8]
 8016da8:	f8c8 2000 	strlt.w	r2, [r8]
 8016dac:	4b9e      	ldr	r3, [pc, #632]	; (8017028 <_dtoa_r+0x2f0>)
 8016dae:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8016db2:	ea33 0308 	bics.w	r3, r3, r8
 8016db6:	d11b      	bne.n	8016df0 <_dtoa_r+0xb8>
 8016db8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016dba:	f242 730f 	movw	r3, #9999	; 0x270f
 8016dbe:	6013      	str	r3, [r2, #0]
 8016dc0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8016dc4:	4333      	orrs	r3, r6
 8016dc6:	f000 8593 	beq.w	80178f0 <_dtoa_r+0xbb8>
 8016dca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016dcc:	b963      	cbnz	r3, 8016de8 <_dtoa_r+0xb0>
 8016dce:	4b97      	ldr	r3, [pc, #604]	; (801702c <_dtoa_r+0x2f4>)
 8016dd0:	e027      	b.n	8016e22 <_dtoa_r+0xea>
 8016dd2:	4b97      	ldr	r3, [pc, #604]	; (8017030 <_dtoa_r+0x2f8>)
 8016dd4:	9300      	str	r3, [sp, #0]
 8016dd6:	3308      	adds	r3, #8
 8016dd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016dda:	6013      	str	r3, [r2, #0]
 8016ddc:	9800      	ldr	r0, [sp, #0]
 8016dde:	b013      	add	sp, #76	; 0x4c
 8016de0:	ecbd 8b04 	vpop	{d8-d9}
 8016de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016de8:	4b90      	ldr	r3, [pc, #576]	; (801702c <_dtoa_r+0x2f4>)
 8016dea:	9300      	str	r3, [sp, #0]
 8016dec:	3303      	adds	r3, #3
 8016dee:	e7f3      	b.n	8016dd8 <_dtoa_r+0xa0>
 8016df0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016df4:	2200      	movs	r2, #0
 8016df6:	ec51 0b17 	vmov	r0, r1, d7
 8016dfa:	eeb0 8a47 	vmov.f32	s16, s14
 8016dfe:	eef0 8a67 	vmov.f32	s17, s15
 8016e02:	2300      	movs	r3, #0
 8016e04:	f7e9 fe88 	bl	8000b18 <__aeabi_dcmpeq>
 8016e08:	4681      	mov	r9, r0
 8016e0a:	b160      	cbz	r0, 8016e26 <_dtoa_r+0xee>
 8016e0c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8016e0e:	2301      	movs	r3, #1
 8016e10:	6013      	str	r3, [r2, #0]
 8016e12:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	f000 8568 	beq.w	80178ea <_dtoa_r+0xbb2>
 8016e1a:	4b86      	ldr	r3, [pc, #536]	; (8017034 <_dtoa_r+0x2fc>)
 8016e1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016e1e:	6013      	str	r3, [r2, #0]
 8016e20:	3b01      	subs	r3, #1
 8016e22:	9300      	str	r3, [sp, #0]
 8016e24:	e7da      	b.n	8016ddc <_dtoa_r+0xa4>
 8016e26:	aa10      	add	r2, sp, #64	; 0x40
 8016e28:	a911      	add	r1, sp, #68	; 0x44
 8016e2a:	4620      	mov	r0, r4
 8016e2c:	eeb0 0a48 	vmov.f32	s0, s16
 8016e30:	eef0 0a68 	vmov.f32	s1, s17
 8016e34:	f001 f994 	bl	8018160 <__d2b>
 8016e38:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8016e3c:	4682      	mov	sl, r0
 8016e3e:	2d00      	cmp	r5, #0
 8016e40:	d07f      	beq.n	8016f42 <_dtoa_r+0x20a>
 8016e42:	ee18 3a90 	vmov	r3, s17
 8016e46:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016e4a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8016e4e:	ec51 0b18 	vmov	r0, r1, d8
 8016e52:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016e56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016e5a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8016e5e:	4619      	mov	r1, r3
 8016e60:	2200      	movs	r2, #0
 8016e62:	4b75      	ldr	r3, [pc, #468]	; (8017038 <_dtoa_r+0x300>)
 8016e64:	f7e9 fa38 	bl	80002d8 <__aeabi_dsub>
 8016e68:	a367      	add	r3, pc, #412	; (adr r3, 8017008 <_dtoa_r+0x2d0>)
 8016e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e6e:	f7e9 fbeb 	bl	8000648 <__aeabi_dmul>
 8016e72:	a367      	add	r3, pc, #412	; (adr r3, 8017010 <_dtoa_r+0x2d8>)
 8016e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e78:	f7e9 fa30 	bl	80002dc <__adddf3>
 8016e7c:	4606      	mov	r6, r0
 8016e7e:	4628      	mov	r0, r5
 8016e80:	460f      	mov	r7, r1
 8016e82:	f7e9 fb77 	bl	8000574 <__aeabi_i2d>
 8016e86:	a364      	add	r3, pc, #400	; (adr r3, 8017018 <_dtoa_r+0x2e0>)
 8016e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e8c:	f7e9 fbdc 	bl	8000648 <__aeabi_dmul>
 8016e90:	4602      	mov	r2, r0
 8016e92:	460b      	mov	r3, r1
 8016e94:	4630      	mov	r0, r6
 8016e96:	4639      	mov	r1, r7
 8016e98:	f7e9 fa20 	bl	80002dc <__adddf3>
 8016e9c:	4606      	mov	r6, r0
 8016e9e:	460f      	mov	r7, r1
 8016ea0:	f7e9 fe82 	bl	8000ba8 <__aeabi_d2iz>
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	4683      	mov	fp, r0
 8016ea8:	2300      	movs	r3, #0
 8016eaa:	4630      	mov	r0, r6
 8016eac:	4639      	mov	r1, r7
 8016eae:	f7e9 fe3d 	bl	8000b2c <__aeabi_dcmplt>
 8016eb2:	b148      	cbz	r0, 8016ec8 <_dtoa_r+0x190>
 8016eb4:	4658      	mov	r0, fp
 8016eb6:	f7e9 fb5d 	bl	8000574 <__aeabi_i2d>
 8016eba:	4632      	mov	r2, r6
 8016ebc:	463b      	mov	r3, r7
 8016ebe:	f7e9 fe2b 	bl	8000b18 <__aeabi_dcmpeq>
 8016ec2:	b908      	cbnz	r0, 8016ec8 <_dtoa_r+0x190>
 8016ec4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016ec8:	f1bb 0f16 	cmp.w	fp, #22
 8016ecc:	d857      	bhi.n	8016f7e <_dtoa_r+0x246>
 8016ece:	4b5b      	ldr	r3, [pc, #364]	; (801703c <_dtoa_r+0x304>)
 8016ed0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8016ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016ed8:	ec51 0b18 	vmov	r0, r1, d8
 8016edc:	f7e9 fe26 	bl	8000b2c <__aeabi_dcmplt>
 8016ee0:	2800      	cmp	r0, #0
 8016ee2:	d04e      	beq.n	8016f82 <_dtoa_r+0x24a>
 8016ee4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8016ee8:	2300      	movs	r3, #0
 8016eea:	930c      	str	r3, [sp, #48]	; 0x30
 8016eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016eee:	1b5b      	subs	r3, r3, r5
 8016ef0:	1e5a      	subs	r2, r3, #1
 8016ef2:	bf45      	ittet	mi
 8016ef4:	f1c3 0301 	rsbmi	r3, r3, #1
 8016ef8:	9305      	strmi	r3, [sp, #20]
 8016efa:	2300      	movpl	r3, #0
 8016efc:	2300      	movmi	r3, #0
 8016efe:	9206      	str	r2, [sp, #24]
 8016f00:	bf54      	ite	pl
 8016f02:	9305      	strpl	r3, [sp, #20]
 8016f04:	9306      	strmi	r3, [sp, #24]
 8016f06:	f1bb 0f00 	cmp.w	fp, #0
 8016f0a:	db3c      	blt.n	8016f86 <_dtoa_r+0x24e>
 8016f0c:	9b06      	ldr	r3, [sp, #24]
 8016f0e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8016f12:	445b      	add	r3, fp
 8016f14:	9306      	str	r3, [sp, #24]
 8016f16:	2300      	movs	r3, #0
 8016f18:	9308      	str	r3, [sp, #32]
 8016f1a:	9b07      	ldr	r3, [sp, #28]
 8016f1c:	2b09      	cmp	r3, #9
 8016f1e:	d868      	bhi.n	8016ff2 <_dtoa_r+0x2ba>
 8016f20:	2b05      	cmp	r3, #5
 8016f22:	bfc4      	itt	gt
 8016f24:	3b04      	subgt	r3, #4
 8016f26:	9307      	strgt	r3, [sp, #28]
 8016f28:	9b07      	ldr	r3, [sp, #28]
 8016f2a:	f1a3 0302 	sub.w	r3, r3, #2
 8016f2e:	bfcc      	ite	gt
 8016f30:	2500      	movgt	r5, #0
 8016f32:	2501      	movle	r5, #1
 8016f34:	2b03      	cmp	r3, #3
 8016f36:	f200 8085 	bhi.w	8017044 <_dtoa_r+0x30c>
 8016f3a:	e8df f003 	tbb	[pc, r3]
 8016f3e:	3b2e      	.short	0x3b2e
 8016f40:	5839      	.short	0x5839
 8016f42:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016f46:	441d      	add	r5, r3
 8016f48:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016f4c:	2b20      	cmp	r3, #32
 8016f4e:	bfc1      	itttt	gt
 8016f50:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016f54:	fa08 f803 	lslgt.w	r8, r8, r3
 8016f58:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8016f5c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8016f60:	bfd6      	itet	le
 8016f62:	f1c3 0320 	rsble	r3, r3, #32
 8016f66:	ea48 0003 	orrgt.w	r0, r8, r3
 8016f6a:	fa06 f003 	lslle.w	r0, r6, r3
 8016f6e:	f7e9 faf1 	bl	8000554 <__aeabi_ui2d>
 8016f72:	2201      	movs	r2, #1
 8016f74:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8016f78:	3d01      	subs	r5, #1
 8016f7a:	920e      	str	r2, [sp, #56]	; 0x38
 8016f7c:	e76f      	b.n	8016e5e <_dtoa_r+0x126>
 8016f7e:	2301      	movs	r3, #1
 8016f80:	e7b3      	b.n	8016eea <_dtoa_r+0x1b2>
 8016f82:	900c      	str	r0, [sp, #48]	; 0x30
 8016f84:	e7b2      	b.n	8016eec <_dtoa_r+0x1b4>
 8016f86:	9b05      	ldr	r3, [sp, #20]
 8016f88:	eba3 030b 	sub.w	r3, r3, fp
 8016f8c:	9305      	str	r3, [sp, #20]
 8016f8e:	f1cb 0300 	rsb	r3, fp, #0
 8016f92:	9308      	str	r3, [sp, #32]
 8016f94:	2300      	movs	r3, #0
 8016f96:	930b      	str	r3, [sp, #44]	; 0x2c
 8016f98:	e7bf      	b.n	8016f1a <_dtoa_r+0x1e2>
 8016f9a:	2300      	movs	r3, #0
 8016f9c:	9309      	str	r3, [sp, #36]	; 0x24
 8016f9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	dc52      	bgt.n	801704a <_dtoa_r+0x312>
 8016fa4:	2301      	movs	r3, #1
 8016fa6:	9301      	str	r3, [sp, #4]
 8016fa8:	9304      	str	r3, [sp, #16]
 8016faa:	461a      	mov	r2, r3
 8016fac:	920a      	str	r2, [sp, #40]	; 0x28
 8016fae:	e00b      	b.n	8016fc8 <_dtoa_r+0x290>
 8016fb0:	2301      	movs	r3, #1
 8016fb2:	e7f3      	b.n	8016f9c <_dtoa_r+0x264>
 8016fb4:	2300      	movs	r3, #0
 8016fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8016fb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016fba:	445b      	add	r3, fp
 8016fbc:	9301      	str	r3, [sp, #4]
 8016fbe:	3301      	adds	r3, #1
 8016fc0:	2b01      	cmp	r3, #1
 8016fc2:	9304      	str	r3, [sp, #16]
 8016fc4:	bfb8      	it	lt
 8016fc6:	2301      	movlt	r3, #1
 8016fc8:	69e0      	ldr	r0, [r4, #28]
 8016fca:	2100      	movs	r1, #0
 8016fcc:	2204      	movs	r2, #4
 8016fce:	f102 0614 	add.w	r6, r2, #20
 8016fd2:	429e      	cmp	r6, r3
 8016fd4:	d93d      	bls.n	8017052 <_dtoa_r+0x31a>
 8016fd6:	6041      	str	r1, [r0, #4]
 8016fd8:	4620      	mov	r0, r4
 8016fda:	f000 fd9f 	bl	8017b1c <_Balloc>
 8016fde:	9000      	str	r0, [sp, #0]
 8016fe0:	2800      	cmp	r0, #0
 8016fe2:	d139      	bne.n	8017058 <_dtoa_r+0x320>
 8016fe4:	4b16      	ldr	r3, [pc, #88]	; (8017040 <_dtoa_r+0x308>)
 8016fe6:	4602      	mov	r2, r0
 8016fe8:	f240 11af 	movw	r1, #431	; 0x1af
 8016fec:	e6bd      	b.n	8016d6a <_dtoa_r+0x32>
 8016fee:	2301      	movs	r3, #1
 8016ff0:	e7e1      	b.n	8016fb6 <_dtoa_r+0x27e>
 8016ff2:	2501      	movs	r5, #1
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	9307      	str	r3, [sp, #28]
 8016ff8:	9509      	str	r5, [sp, #36]	; 0x24
 8016ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8016ffe:	9301      	str	r3, [sp, #4]
 8017000:	9304      	str	r3, [sp, #16]
 8017002:	2200      	movs	r2, #0
 8017004:	2312      	movs	r3, #18
 8017006:	e7d1      	b.n	8016fac <_dtoa_r+0x274>
 8017008:	636f4361 	.word	0x636f4361
 801700c:	3fd287a7 	.word	0x3fd287a7
 8017010:	8b60c8b3 	.word	0x8b60c8b3
 8017014:	3fc68a28 	.word	0x3fc68a28
 8017018:	509f79fb 	.word	0x509f79fb
 801701c:	3fd34413 	.word	0x3fd34413
 8017020:	0801b9a1 	.word	0x0801b9a1
 8017024:	0801b9b8 	.word	0x0801b9b8
 8017028:	7ff00000 	.word	0x7ff00000
 801702c:	0801b99d 	.word	0x0801b99d
 8017030:	0801b994 	.word	0x0801b994
 8017034:	0801b971 	.word	0x0801b971
 8017038:	3ff80000 	.word	0x3ff80000
 801703c:	0801baa8 	.word	0x0801baa8
 8017040:	0801ba10 	.word	0x0801ba10
 8017044:	2301      	movs	r3, #1
 8017046:	9309      	str	r3, [sp, #36]	; 0x24
 8017048:	e7d7      	b.n	8016ffa <_dtoa_r+0x2c2>
 801704a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801704c:	9301      	str	r3, [sp, #4]
 801704e:	9304      	str	r3, [sp, #16]
 8017050:	e7ba      	b.n	8016fc8 <_dtoa_r+0x290>
 8017052:	3101      	adds	r1, #1
 8017054:	0052      	lsls	r2, r2, #1
 8017056:	e7ba      	b.n	8016fce <_dtoa_r+0x296>
 8017058:	69e3      	ldr	r3, [r4, #28]
 801705a:	9a00      	ldr	r2, [sp, #0]
 801705c:	601a      	str	r2, [r3, #0]
 801705e:	9b04      	ldr	r3, [sp, #16]
 8017060:	2b0e      	cmp	r3, #14
 8017062:	f200 80a8 	bhi.w	80171b6 <_dtoa_r+0x47e>
 8017066:	2d00      	cmp	r5, #0
 8017068:	f000 80a5 	beq.w	80171b6 <_dtoa_r+0x47e>
 801706c:	f1bb 0f00 	cmp.w	fp, #0
 8017070:	dd38      	ble.n	80170e4 <_dtoa_r+0x3ac>
 8017072:	4bc0      	ldr	r3, [pc, #768]	; (8017374 <_dtoa_r+0x63c>)
 8017074:	f00b 020f 	and.w	r2, fp, #15
 8017078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801707c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8017080:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017084:	ea4f 182b 	mov.w	r8, fp, asr #4
 8017088:	d019      	beq.n	80170be <_dtoa_r+0x386>
 801708a:	4bbb      	ldr	r3, [pc, #748]	; (8017378 <_dtoa_r+0x640>)
 801708c:	ec51 0b18 	vmov	r0, r1, d8
 8017090:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017094:	f7e9 fc02 	bl	800089c <__aeabi_ddiv>
 8017098:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801709c:	f008 080f 	and.w	r8, r8, #15
 80170a0:	2503      	movs	r5, #3
 80170a2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8017378 <_dtoa_r+0x640>
 80170a6:	f1b8 0f00 	cmp.w	r8, #0
 80170aa:	d10a      	bne.n	80170c2 <_dtoa_r+0x38a>
 80170ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80170b0:	4632      	mov	r2, r6
 80170b2:	463b      	mov	r3, r7
 80170b4:	f7e9 fbf2 	bl	800089c <__aeabi_ddiv>
 80170b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80170bc:	e02b      	b.n	8017116 <_dtoa_r+0x3de>
 80170be:	2502      	movs	r5, #2
 80170c0:	e7ef      	b.n	80170a2 <_dtoa_r+0x36a>
 80170c2:	f018 0f01 	tst.w	r8, #1
 80170c6:	d008      	beq.n	80170da <_dtoa_r+0x3a2>
 80170c8:	4630      	mov	r0, r6
 80170ca:	4639      	mov	r1, r7
 80170cc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80170d0:	f7e9 faba 	bl	8000648 <__aeabi_dmul>
 80170d4:	3501      	adds	r5, #1
 80170d6:	4606      	mov	r6, r0
 80170d8:	460f      	mov	r7, r1
 80170da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80170de:	f109 0908 	add.w	r9, r9, #8
 80170e2:	e7e0      	b.n	80170a6 <_dtoa_r+0x36e>
 80170e4:	f000 809f 	beq.w	8017226 <_dtoa_r+0x4ee>
 80170e8:	f1cb 0600 	rsb	r6, fp, #0
 80170ec:	4ba1      	ldr	r3, [pc, #644]	; (8017374 <_dtoa_r+0x63c>)
 80170ee:	4fa2      	ldr	r7, [pc, #648]	; (8017378 <_dtoa_r+0x640>)
 80170f0:	f006 020f 	and.w	r2, r6, #15
 80170f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80170f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170fc:	ec51 0b18 	vmov	r0, r1, d8
 8017100:	f7e9 faa2 	bl	8000648 <__aeabi_dmul>
 8017104:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017108:	1136      	asrs	r6, r6, #4
 801710a:	2300      	movs	r3, #0
 801710c:	2502      	movs	r5, #2
 801710e:	2e00      	cmp	r6, #0
 8017110:	d17e      	bne.n	8017210 <_dtoa_r+0x4d8>
 8017112:	2b00      	cmp	r3, #0
 8017114:	d1d0      	bne.n	80170b8 <_dtoa_r+0x380>
 8017116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017118:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801711c:	2b00      	cmp	r3, #0
 801711e:	f000 8084 	beq.w	801722a <_dtoa_r+0x4f2>
 8017122:	4b96      	ldr	r3, [pc, #600]	; (801737c <_dtoa_r+0x644>)
 8017124:	2200      	movs	r2, #0
 8017126:	4640      	mov	r0, r8
 8017128:	4649      	mov	r1, r9
 801712a:	f7e9 fcff 	bl	8000b2c <__aeabi_dcmplt>
 801712e:	2800      	cmp	r0, #0
 8017130:	d07b      	beq.n	801722a <_dtoa_r+0x4f2>
 8017132:	9b04      	ldr	r3, [sp, #16]
 8017134:	2b00      	cmp	r3, #0
 8017136:	d078      	beq.n	801722a <_dtoa_r+0x4f2>
 8017138:	9b01      	ldr	r3, [sp, #4]
 801713a:	2b00      	cmp	r3, #0
 801713c:	dd39      	ble.n	80171b2 <_dtoa_r+0x47a>
 801713e:	4b90      	ldr	r3, [pc, #576]	; (8017380 <_dtoa_r+0x648>)
 8017140:	2200      	movs	r2, #0
 8017142:	4640      	mov	r0, r8
 8017144:	4649      	mov	r1, r9
 8017146:	f7e9 fa7f 	bl	8000648 <__aeabi_dmul>
 801714a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801714e:	9e01      	ldr	r6, [sp, #4]
 8017150:	f10b 37ff 	add.w	r7, fp, #4294967295
 8017154:	3501      	adds	r5, #1
 8017156:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801715a:	4628      	mov	r0, r5
 801715c:	f7e9 fa0a 	bl	8000574 <__aeabi_i2d>
 8017160:	4642      	mov	r2, r8
 8017162:	464b      	mov	r3, r9
 8017164:	f7e9 fa70 	bl	8000648 <__aeabi_dmul>
 8017168:	4b86      	ldr	r3, [pc, #536]	; (8017384 <_dtoa_r+0x64c>)
 801716a:	2200      	movs	r2, #0
 801716c:	f7e9 f8b6 	bl	80002dc <__adddf3>
 8017170:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8017174:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017178:	9303      	str	r3, [sp, #12]
 801717a:	2e00      	cmp	r6, #0
 801717c:	d158      	bne.n	8017230 <_dtoa_r+0x4f8>
 801717e:	4b82      	ldr	r3, [pc, #520]	; (8017388 <_dtoa_r+0x650>)
 8017180:	2200      	movs	r2, #0
 8017182:	4640      	mov	r0, r8
 8017184:	4649      	mov	r1, r9
 8017186:	f7e9 f8a7 	bl	80002d8 <__aeabi_dsub>
 801718a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801718e:	4680      	mov	r8, r0
 8017190:	4689      	mov	r9, r1
 8017192:	f7e9 fce9 	bl	8000b68 <__aeabi_dcmpgt>
 8017196:	2800      	cmp	r0, #0
 8017198:	f040 8296 	bne.w	80176c8 <_dtoa_r+0x990>
 801719c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80171a0:	4640      	mov	r0, r8
 80171a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80171a6:	4649      	mov	r1, r9
 80171a8:	f7e9 fcc0 	bl	8000b2c <__aeabi_dcmplt>
 80171ac:	2800      	cmp	r0, #0
 80171ae:	f040 8289 	bne.w	80176c4 <_dtoa_r+0x98c>
 80171b2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80171b6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	f2c0 814e 	blt.w	801745a <_dtoa_r+0x722>
 80171be:	f1bb 0f0e 	cmp.w	fp, #14
 80171c2:	f300 814a 	bgt.w	801745a <_dtoa_r+0x722>
 80171c6:	4b6b      	ldr	r3, [pc, #428]	; (8017374 <_dtoa_r+0x63c>)
 80171c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80171cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80171d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80171d2:	2b00      	cmp	r3, #0
 80171d4:	f280 80dc 	bge.w	8017390 <_dtoa_r+0x658>
 80171d8:	9b04      	ldr	r3, [sp, #16]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	f300 80d8 	bgt.w	8017390 <_dtoa_r+0x658>
 80171e0:	f040 826f 	bne.w	80176c2 <_dtoa_r+0x98a>
 80171e4:	4b68      	ldr	r3, [pc, #416]	; (8017388 <_dtoa_r+0x650>)
 80171e6:	2200      	movs	r2, #0
 80171e8:	4640      	mov	r0, r8
 80171ea:	4649      	mov	r1, r9
 80171ec:	f7e9 fa2c 	bl	8000648 <__aeabi_dmul>
 80171f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80171f4:	f7e9 fcae 	bl	8000b54 <__aeabi_dcmpge>
 80171f8:	9e04      	ldr	r6, [sp, #16]
 80171fa:	4637      	mov	r7, r6
 80171fc:	2800      	cmp	r0, #0
 80171fe:	f040 8245 	bne.w	801768c <_dtoa_r+0x954>
 8017202:	9d00      	ldr	r5, [sp, #0]
 8017204:	2331      	movs	r3, #49	; 0x31
 8017206:	f805 3b01 	strb.w	r3, [r5], #1
 801720a:	f10b 0b01 	add.w	fp, fp, #1
 801720e:	e241      	b.n	8017694 <_dtoa_r+0x95c>
 8017210:	07f2      	lsls	r2, r6, #31
 8017212:	d505      	bpl.n	8017220 <_dtoa_r+0x4e8>
 8017214:	e9d7 2300 	ldrd	r2, r3, [r7]
 8017218:	f7e9 fa16 	bl	8000648 <__aeabi_dmul>
 801721c:	3501      	adds	r5, #1
 801721e:	2301      	movs	r3, #1
 8017220:	1076      	asrs	r6, r6, #1
 8017222:	3708      	adds	r7, #8
 8017224:	e773      	b.n	801710e <_dtoa_r+0x3d6>
 8017226:	2502      	movs	r5, #2
 8017228:	e775      	b.n	8017116 <_dtoa_r+0x3de>
 801722a:	9e04      	ldr	r6, [sp, #16]
 801722c:	465f      	mov	r7, fp
 801722e:	e792      	b.n	8017156 <_dtoa_r+0x41e>
 8017230:	9900      	ldr	r1, [sp, #0]
 8017232:	4b50      	ldr	r3, [pc, #320]	; (8017374 <_dtoa_r+0x63c>)
 8017234:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017238:	4431      	add	r1, r6
 801723a:	9102      	str	r1, [sp, #8]
 801723c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801723e:	eeb0 9a47 	vmov.f32	s18, s14
 8017242:	eef0 9a67 	vmov.f32	s19, s15
 8017246:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801724a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801724e:	2900      	cmp	r1, #0
 8017250:	d044      	beq.n	80172dc <_dtoa_r+0x5a4>
 8017252:	494e      	ldr	r1, [pc, #312]	; (801738c <_dtoa_r+0x654>)
 8017254:	2000      	movs	r0, #0
 8017256:	f7e9 fb21 	bl	800089c <__aeabi_ddiv>
 801725a:	ec53 2b19 	vmov	r2, r3, d9
 801725e:	f7e9 f83b 	bl	80002d8 <__aeabi_dsub>
 8017262:	9d00      	ldr	r5, [sp, #0]
 8017264:	ec41 0b19 	vmov	d9, r0, r1
 8017268:	4649      	mov	r1, r9
 801726a:	4640      	mov	r0, r8
 801726c:	f7e9 fc9c 	bl	8000ba8 <__aeabi_d2iz>
 8017270:	4606      	mov	r6, r0
 8017272:	f7e9 f97f 	bl	8000574 <__aeabi_i2d>
 8017276:	4602      	mov	r2, r0
 8017278:	460b      	mov	r3, r1
 801727a:	4640      	mov	r0, r8
 801727c:	4649      	mov	r1, r9
 801727e:	f7e9 f82b 	bl	80002d8 <__aeabi_dsub>
 8017282:	3630      	adds	r6, #48	; 0x30
 8017284:	f805 6b01 	strb.w	r6, [r5], #1
 8017288:	ec53 2b19 	vmov	r2, r3, d9
 801728c:	4680      	mov	r8, r0
 801728e:	4689      	mov	r9, r1
 8017290:	f7e9 fc4c 	bl	8000b2c <__aeabi_dcmplt>
 8017294:	2800      	cmp	r0, #0
 8017296:	d164      	bne.n	8017362 <_dtoa_r+0x62a>
 8017298:	4642      	mov	r2, r8
 801729a:	464b      	mov	r3, r9
 801729c:	4937      	ldr	r1, [pc, #220]	; (801737c <_dtoa_r+0x644>)
 801729e:	2000      	movs	r0, #0
 80172a0:	f7e9 f81a 	bl	80002d8 <__aeabi_dsub>
 80172a4:	ec53 2b19 	vmov	r2, r3, d9
 80172a8:	f7e9 fc40 	bl	8000b2c <__aeabi_dcmplt>
 80172ac:	2800      	cmp	r0, #0
 80172ae:	f040 80b6 	bne.w	801741e <_dtoa_r+0x6e6>
 80172b2:	9b02      	ldr	r3, [sp, #8]
 80172b4:	429d      	cmp	r5, r3
 80172b6:	f43f af7c 	beq.w	80171b2 <_dtoa_r+0x47a>
 80172ba:	4b31      	ldr	r3, [pc, #196]	; (8017380 <_dtoa_r+0x648>)
 80172bc:	ec51 0b19 	vmov	r0, r1, d9
 80172c0:	2200      	movs	r2, #0
 80172c2:	f7e9 f9c1 	bl	8000648 <__aeabi_dmul>
 80172c6:	4b2e      	ldr	r3, [pc, #184]	; (8017380 <_dtoa_r+0x648>)
 80172c8:	ec41 0b19 	vmov	d9, r0, r1
 80172cc:	2200      	movs	r2, #0
 80172ce:	4640      	mov	r0, r8
 80172d0:	4649      	mov	r1, r9
 80172d2:	f7e9 f9b9 	bl	8000648 <__aeabi_dmul>
 80172d6:	4680      	mov	r8, r0
 80172d8:	4689      	mov	r9, r1
 80172da:	e7c5      	b.n	8017268 <_dtoa_r+0x530>
 80172dc:	ec51 0b17 	vmov	r0, r1, d7
 80172e0:	f7e9 f9b2 	bl	8000648 <__aeabi_dmul>
 80172e4:	9b02      	ldr	r3, [sp, #8]
 80172e6:	9d00      	ldr	r5, [sp, #0]
 80172e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80172ea:	ec41 0b19 	vmov	d9, r0, r1
 80172ee:	4649      	mov	r1, r9
 80172f0:	4640      	mov	r0, r8
 80172f2:	f7e9 fc59 	bl	8000ba8 <__aeabi_d2iz>
 80172f6:	4606      	mov	r6, r0
 80172f8:	f7e9 f93c 	bl	8000574 <__aeabi_i2d>
 80172fc:	3630      	adds	r6, #48	; 0x30
 80172fe:	4602      	mov	r2, r0
 8017300:	460b      	mov	r3, r1
 8017302:	4640      	mov	r0, r8
 8017304:	4649      	mov	r1, r9
 8017306:	f7e8 ffe7 	bl	80002d8 <__aeabi_dsub>
 801730a:	f805 6b01 	strb.w	r6, [r5], #1
 801730e:	9b02      	ldr	r3, [sp, #8]
 8017310:	429d      	cmp	r5, r3
 8017312:	4680      	mov	r8, r0
 8017314:	4689      	mov	r9, r1
 8017316:	f04f 0200 	mov.w	r2, #0
 801731a:	d124      	bne.n	8017366 <_dtoa_r+0x62e>
 801731c:	4b1b      	ldr	r3, [pc, #108]	; (801738c <_dtoa_r+0x654>)
 801731e:	ec51 0b19 	vmov	r0, r1, d9
 8017322:	f7e8 ffdb 	bl	80002dc <__adddf3>
 8017326:	4602      	mov	r2, r0
 8017328:	460b      	mov	r3, r1
 801732a:	4640      	mov	r0, r8
 801732c:	4649      	mov	r1, r9
 801732e:	f7e9 fc1b 	bl	8000b68 <__aeabi_dcmpgt>
 8017332:	2800      	cmp	r0, #0
 8017334:	d173      	bne.n	801741e <_dtoa_r+0x6e6>
 8017336:	ec53 2b19 	vmov	r2, r3, d9
 801733a:	4914      	ldr	r1, [pc, #80]	; (801738c <_dtoa_r+0x654>)
 801733c:	2000      	movs	r0, #0
 801733e:	f7e8 ffcb 	bl	80002d8 <__aeabi_dsub>
 8017342:	4602      	mov	r2, r0
 8017344:	460b      	mov	r3, r1
 8017346:	4640      	mov	r0, r8
 8017348:	4649      	mov	r1, r9
 801734a:	f7e9 fbef 	bl	8000b2c <__aeabi_dcmplt>
 801734e:	2800      	cmp	r0, #0
 8017350:	f43f af2f 	beq.w	80171b2 <_dtoa_r+0x47a>
 8017354:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8017356:	1e6b      	subs	r3, r5, #1
 8017358:	930f      	str	r3, [sp, #60]	; 0x3c
 801735a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801735e:	2b30      	cmp	r3, #48	; 0x30
 8017360:	d0f8      	beq.n	8017354 <_dtoa_r+0x61c>
 8017362:	46bb      	mov	fp, r7
 8017364:	e04a      	b.n	80173fc <_dtoa_r+0x6c4>
 8017366:	4b06      	ldr	r3, [pc, #24]	; (8017380 <_dtoa_r+0x648>)
 8017368:	f7e9 f96e 	bl	8000648 <__aeabi_dmul>
 801736c:	4680      	mov	r8, r0
 801736e:	4689      	mov	r9, r1
 8017370:	e7bd      	b.n	80172ee <_dtoa_r+0x5b6>
 8017372:	bf00      	nop
 8017374:	0801baa8 	.word	0x0801baa8
 8017378:	0801ba80 	.word	0x0801ba80
 801737c:	3ff00000 	.word	0x3ff00000
 8017380:	40240000 	.word	0x40240000
 8017384:	401c0000 	.word	0x401c0000
 8017388:	40140000 	.word	0x40140000
 801738c:	3fe00000 	.word	0x3fe00000
 8017390:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017394:	9d00      	ldr	r5, [sp, #0]
 8017396:	4642      	mov	r2, r8
 8017398:	464b      	mov	r3, r9
 801739a:	4630      	mov	r0, r6
 801739c:	4639      	mov	r1, r7
 801739e:	f7e9 fa7d 	bl	800089c <__aeabi_ddiv>
 80173a2:	f7e9 fc01 	bl	8000ba8 <__aeabi_d2iz>
 80173a6:	9001      	str	r0, [sp, #4]
 80173a8:	f7e9 f8e4 	bl	8000574 <__aeabi_i2d>
 80173ac:	4642      	mov	r2, r8
 80173ae:	464b      	mov	r3, r9
 80173b0:	f7e9 f94a 	bl	8000648 <__aeabi_dmul>
 80173b4:	4602      	mov	r2, r0
 80173b6:	460b      	mov	r3, r1
 80173b8:	4630      	mov	r0, r6
 80173ba:	4639      	mov	r1, r7
 80173bc:	f7e8 ff8c 	bl	80002d8 <__aeabi_dsub>
 80173c0:	9e01      	ldr	r6, [sp, #4]
 80173c2:	9f04      	ldr	r7, [sp, #16]
 80173c4:	3630      	adds	r6, #48	; 0x30
 80173c6:	f805 6b01 	strb.w	r6, [r5], #1
 80173ca:	9e00      	ldr	r6, [sp, #0]
 80173cc:	1bae      	subs	r6, r5, r6
 80173ce:	42b7      	cmp	r7, r6
 80173d0:	4602      	mov	r2, r0
 80173d2:	460b      	mov	r3, r1
 80173d4:	d134      	bne.n	8017440 <_dtoa_r+0x708>
 80173d6:	f7e8 ff81 	bl	80002dc <__adddf3>
 80173da:	4642      	mov	r2, r8
 80173dc:	464b      	mov	r3, r9
 80173de:	4606      	mov	r6, r0
 80173e0:	460f      	mov	r7, r1
 80173e2:	f7e9 fbc1 	bl	8000b68 <__aeabi_dcmpgt>
 80173e6:	b9c8      	cbnz	r0, 801741c <_dtoa_r+0x6e4>
 80173e8:	4642      	mov	r2, r8
 80173ea:	464b      	mov	r3, r9
 80173ec:	4630      	mov	r0, r6
 80173ee:	4639      	mov	r1, r7
 80173f0:	f7e9 fb92 	bl	8000b18 <__aeabi_dcmpeq>
 80173f4:	b110      	cbz	r0, 80173fc <_dtoa_r+0x6c4>
 80173f6:	9b01      	ldr	r3, [sp, #4]
 80173f8:	07db      	lsls	r3, r3, #31
 80173fa:	d40f      	bmi.n	801741c <_dtoa_r+0x6e4>
 80173fc:	4651      	mov	r1, sl
 80173fe:	4620      	mov	r0, r4
 8017400:	f000 fbcc 	bl	8017b9c <_Bfree>
 8017404:	2300      	movs	r3, #0
 8017406:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017408:	702b      	strb	r3, [r5, #0]
 801740a:	f10b 0301 	add.w	r3, fp, #1
 801740e:	6013      	str	r3, [r2, #0]
 8017410:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017412:	2b00      	cmp	r3, #0
 8017414:	f43f ace2 	beq.w	8016ddc <_dtoa_r+0xa4>
 8017418:	601d      	str	r5, [r3, #0]
 801741a:	e4df      	b.n	8016ddc <_dtoa_r+0xa4>
 801741c:	465f      	mov	r7, fp
 801741e:	462b      	mov	r3, r5
 8017420:	461d      	mov	r5, r3
 8017422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017426:	2a39      	cmp	r2, #57	; 0x39
 8017428:	d106      	bne.n	8017438 <_dtoa_r+0x700>
 801742a:	9a00      	ldr	r2, [sp, #0]
 801742c:	429a      	cmp	r2, r3
 801742e:	d1f7      	bne.n	8017420 <_dtoa_r+0x6e8>
 8017430:	9900      	ldr	r1, [sp, #0]
 8017432:	2230      	movs	r2, #48	; 0x30
 8017434:	3701      	adds	r7, #1
 8017436:	700a      	strb	r2, [r1, #0]
 8017438:	781a      	ldrb	r2, [r3, #0]
 801743a:	3201      	adds	r2, #1
 801743c:	701a      	strb	r2, [r3, #0]
 801743e:	e790      	b.n	8017362 <_dtoa_r+0x62a>
 8017440:	4ba3      	ldr	r3, [pc, #652]	; (80176d0 <_dtoa_r+0x998>)
 8017442:	2200      	movs	r2, #0
 8017444:	f7e9 f900 	bl	8000648 <__aeabi_dmul>
 8017448:	2200      	movs	r2, #0
 801744a:	2300      	movs	r3, #0
 801744c:	4606      	mov	r6, r0
 801744e:	460f      	mov	r7, r1
 8017450:	f7e9 fb62 	bl	8000b18 <__aeabi_dcmpeq>
 8017454:	2800      	cmp	r0, #0
 8017456:	d09e      	beq.n	8017396 <_dtoa_r+0x65e>
 8017458:	e7d0      	b.n	80173fc <_dtoa_r+0x6c4>
 801745a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801745c:	2a00      	cmp	r2, #0
 801745e:	f000 80ca 	beq.w	80175f6 <_dtoa_r+0x8be>
 8017462:	9a07      	ldr	r2, [sp, #28]
 8017464:	2a01      	cmp	r2, #1
 8017466:	f300 80ad 	bgt.w	80175c4 <_dtoa_r+0x88c>
 801746a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801746c:	2a00      	cmp	r2, #0
 801746e:	f000 80a5 	beq.w	80175bc <_dtoa_r+0x884>
 8017472:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017476:	9e08      	ldr	r6, [sp, #32]
 8017478:	9d05      	ldr	r5, [sp, #20]
 801747a:	9a05      	ldr	r2, [sp, #20]
 801747c:	441a      	add	r2, r3
 801747e:	9205      	str	r2, [sp, #20]
 8017480:	9a06      	ldr	r2, [sp, #24]
 8017482:	2101      	movs	r1, #1
 8017484:	441a      	add	r2, r3
 8017486:	4620      	mov	r0, r4
 8017488:	9206      	str	r2, [sp, #24]
 801748a:	f000 fc3d 	bl	8017d08 <__i2b>
 801748e:	4607      	mov	r7, r0
 8017490:	b165      	cbz	r5, 80174ac <_dtoa_r+0x774>
 8017492:	9b06      	ldr	r3, [sp, #24]
 8017494:	2b00      	cmp	r3, #0
 8017496:	dd09      	ble.n	80174ac <_dtoa_r+0x774>
 8017498:	42ab      	cmp	r3, r5
 801749a:	9a05      	ldr	r2, [sp, #20]
 801749c:	bfa8      	it	ge
 801749e:	462b      	movge	r3, r5
 80174a0:	1ad2      	subs	r2, r2, r3
 80174a2:	9205      	str	r2, [sp, #20]
 80174a4:	9a06      	ldr	r2, [sp, #24]
 80174a6:	1aed      	subs	r5, r5, r3
 80174a8:	1ad3      	subs	r3, r2, r3
 80174aa:	9306      	str	r3, [sp, #24]
 80174ac:	9b08      	ldr	r3, [sp, #32]
 80174ae:	b1f3      	cbz	r3, 80174ee <_dtoa_r+0x7b6>
 80174b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	f000 80a3 	beq.w	80175fe <_dtoa_r+0x8c6>
 80174b8:	2e00      	cmp	r6, #0
 80174ba:	dd10      	ble.n	80174de <_dtoa_r+0x7a6>
 80174bc:	4639      	mov	r1, r7
 80174be:	4632      	mov	r2, r6
 80174c0:	4620      	mov	r0, r4
 80174c2:	f000 fce1 	bl	8017e88 <__pow5mult>
 80174c6:	4652      	mov	r2, sl
 80174c8:	4601      	mov	r1, r0
 80174ca:	4607      	mov	r7, r0
 80174cc:	4620      	mov	r0, r4
 80174ce:	f000 fc31 	bl	8017d34 <__multiply>
 80174d2:	4651      	mov	r1, sl
 80174d4:	4680      	mov	r8, r0
 80174d6:	4620      	mov	r0, r4
 80174d8:	f000 fb60 	bl	8017b9c <_Bfree>
 80174dc:	46c2      	mov	sl, r8
 80174de:	9b08      	ldr	r3, [sp, #32]
 80174e0:	1b9a      	subs	r2, r3, r6
 80174e2:	d004      	beq.n	80174ee <_dtoa_r+0x7b6>
 80174e4:	4651      	mov	r1, sl
 80174e6:	4620      	mov	r0, r4
 80174e8:	f000 fcce 	bl	8017e88 <__pow5mult>
 80174ec:	4682      	mov	sl, r0
 80174ee:	2101      	movs	r1, #1
 80174f0:	4620      	mov	r0, r4
 80174f2:	f000 fc09 	bl	8017d08 <__i2b>
 80174f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	4606      	mov	r6, r0
 80174fc:	f340 8081 	ble.w	8017602 <_dtoa_r+0x8ca>
 8017500:	461a      	mov	r2, r3
 8017502:	4601      	mov	r1, r0
 8017504:	4620      	mov	r0, r4
 8017506:	f000 fcbf 	bl	8017e88 <__pow5mult>
 801750a:	9b07      	ldr	r3, [sp, #28]
 801750c:	2b01      	cmp	r3, #1
 801750e:	4606      	mov	r6, r0
 8017510:	dd7a      	ble.n	8017608 <_dtoa_r+0x8d0>
 8017512:	f04f 0800 	mov.w	r8, #0
 8017516:	6933      	ldr	r3, [r6, #16]
 8017518:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801751c:	6918      	ldr	r0, [r3, #16]
 801751e:	f000 fba5 	bl	8017c6c <__hi0bits>
 8017522:	f1c0 0020 	rsb	r0, r0, #32
 8017526:	9b06      	ldr	r3, [sp, #24]
 8017528:	4418      	add	r0, r3
 801752a:	f010 001f 	ands.w	r0, r0, #31
 801752e:	f000 8094 	beq.w	801765a <_dtoa_r+0x922>
 8017532:	f1c0 0320 	rsb	r3, r0, #32
 8017536:	2b04      	cmp	r3, #4
 8017538:	f340 8085 	ble.w	8017646 <_dtoa_r+0x90e>
 801753c:	9b05      	ldr	r3, [sp, #20]
 801753e:	f1c0 001c 	rsb	r0, r0, #28
 8017542:	4403      	add	r3, r0
 8017544:	9305      	str	r3, [sp, #20]
 8017546:	9b06      	ldr	r3, [sp, #24]
 8017548:	4403      	add	r3, r0
 801754a:	4405      	add	r5, r0
 801754c:	9306      	str	r3, [sp, #24]
 801754e:	9b05      	ldr	r3, [sp, #20]
 8017550:	2b00      	cmp	r3, #0
 8017552:	dd05      	ble.n	8017560 <_dtoa_r+0x828>
 8017554:	4651      	mov	r1, sl
 8017556:	461a      	mov	r2, r3
 8017558:	4620      	mov	r0, r4
 801755a:	f000 fcef 	bl	8017f3c <__lshift>
 801755e:	4682      	mov	sl, r0
 8017560:	9b06      	ldr	r3, [sp, #24]
 8017562:	2b00      	cmp	r3, #0
 8017564:	dd05      	ble.n	8017572 <_dtoa_r+0x83a>
 8017566:	4631      	mov	r1, r6
 8017568:	461a      	mov	r2, r3
 801756a:	4620      	mov	r0, r4
 801756c:	f000 fce6 	bl	8017f3c <__lshift>
 8017570:	4606      	mov	r6, r0
 8017572:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017574:	2b00      	cmp	r3, #0
 8017576:	d072      	beq.n	801765e <_dtoa_r+0x926>
 8017578:	4631      	mov	r1, r6
 801757a:	4650      	mov	r0, sl
 801757c:	f000 fd4a 	bl	8018014 <__mcmp>
 8017580:	2800      	cmp	r0, #0
 8017582:	da6c      	bge.n	801765e <_dtoa_r+0x926>
 8017584:	2300      	movs	r3, #0
 8017586:	4651      	mov	r1, sl
 8017588:	220a      	movs	r2, #10
 801758a:	4620      	mov	r0, r4
 801758c:	f000 fb28 	bl	8017be0 <__multadd>
 8017590:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017592:	f10b 3bff 	add.w	fp, fp, #4294967295
 8017596:	4682      	mov	sl, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	f000 81b0 	beq.w	80178fe <_dtoa_r+0xbc6>
 801759e:	2300      	movs	r3, #0
 80175a0:	4639      	mov	r1, r7
 80175a2:	220a      	movs	r2, #10
 80175a4:	4620      	mov	r0, r4
 80175a6:	f000 fb1b 	bl	8017be0 <__multadd>
 80175aa:	9b01      	ldr	r3, [sp, #4]
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	4607      	mov	r7, r0
 80175b0:	f300 8096 	bgt.w	80176e0 <_dtoa_r+0x9a8>
 80175b4:	9b07      	ldr	r3, [sp, #28]
 80175b6:	2b02      	cmp	r3, #2
 80175b8:	dc59      	bgt.n	801766e <_dtoa_r+0x936>
 80175ba:	e091      	b.n	80176e0 <_dtoa_r+0x9a8>
 80175bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80175be:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80175c2:	e758      	b.n	8017476 <_dtoa_r+0x73e>
 80175c4:	9b04      	ldr	r3, [sp, #16]
 80175c6:	1e5e      	subs	r6, r3, #1
 80175c8:	9b08      	ldr	r3, [sp, #32]
 80175ca:	42b3      	cmp	r3, r6
 80175cc:	bfbf      	itttt	lt
 80175ce:	9b08      	ldrlt	r3, [sp, #32]
 80175d0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80175d2:	9608      	strlt	r6, [sp, #32]
 80175d4:	1af3      	sublt	r3, r6, r3
 80175d6:	bfb4      	ite	lt
 80175d8:	18d2      	addlt	r2, r2, r3
 80175da:	1b9e      	subge	r6, r3, r6
 80175dc:	9b04      	ldr	r3, [sp, #16]
 80175de:	bfbc      	itt	lt
 80175e0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80175e2:	2600      	movlt	r6, #0
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	bfb7      	itett	lt
 80175e8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80175ec:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80175f0:	1a9d      	sublt	r5, r3, r2
 80175f2:	2300      	movlt	r3, #0
 80175f4:	e741      	b.n	801747a <_dtoa_r+0x742>
 80175f6:	9e08      	ldr	r6, [sp, #32]
 80175f8:	9d05      	ldr	r5, [sp, #20]
 80175fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80175fc:	e748      	b.n	8017490 <_dtoa_r+0x758>
 80175fe:	9a08      	ldr	r2, [sp, #32]
 8017600:	e770      	b.n	80174e4 <_dtoa_r+0x7ac>
 8017602:	9b07      	ldr	r3, [sp, #28]
 8017604:	2b01      	cmp	r3, #1
 8017606:	dc19      	bgt.n	801763c <_dtoa_r+0x904>
 8017608:	9b02      	ldr	r3, [sp, #8]
 801760a:	b9bb      	cbnz	r3, 801763c <_dtoa_r+0x904>
 801760c:	9b03      	ldr	r3, [sp, #12]
 801760e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017612:	b99b      	cbnz	r3, 801763c <_dtoa_r+0x904>
 8017614:	9b03      	ldr	r3, [sp, #12]
 8017616:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801761a:	0d1b      	lsrs	r3, r3, #20
 801761c:	051b      	lsls	r3, r3, #20
 801761e:	b183      	cbz	r3, 8017642 <_dtoa_r+0x90a>
 8017620:	9b05      	ldr	r3, [sp, #20]
 8017622:	3301      	adds	r3, #1
 8017624:	9305      	str	r3, [sp, #20]
 8017626:	9b06      	ldr	r3, [sp, #24]
 8017628:	3301      	adds	r3, #1
 801762a:	9306      	str	r3, [sp, #24]
 801762c:	f04f 0801 	mov.w	r8, #1
 8017630:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017632:	2b00      	cmp	r3, #0
 8017634:	f47f af6f 	bne.w	8017516 <_dtoa_r+0x7de>
 8017638:	2001      	movs	r0, #1
 801763a:	e774      	b.n	8017526 <_dtoa_r+0x7ee>
 801763c:	f04f 0800 	mov.w	r8, #0
 8017640:	e7f6      	b.n	8017630 <_dtoa_r+0x8f8>
 8017642:	4698      	mov	r8, r3
 8017644:	e7f4      	b.n	8017630 <_dtoa_r+0x8f8>
 8017646:	d082      	beq.n	801754e <_dtoa_r+0x816>
 8017648:	9a05      	ldr	r2, [sp, #20]
 801764a:	331c      	adds	r3, #28
 801764c:	441a      	add	r2, r3
 801764e:	9205      	str	r2, [sp, #20]
 8017650:	9a06      	ldr	r2, [sp, #24]
 8017652:	441a      	add	r2, r3
 8017654:	441d      	add	r5, r3
 8017656:	9206      	str	r2, [sp, #24]
 8017658:	e779      	b.n	801754e <_dtoa_r+0x816>
 801765a:	4603      	mov	r3, r0
 801765c:	e7f4      	b.n	8017648 <_dtoa_r+0x910>
 801765e:	9b04      	ldr	r3, [sp, #16]
 8017660:	2b00      	cmp	r3, #0
 8017662:	dc37      	bgt.n	80176d4 <_dtoa_r+0x99c>
 8017664:	9b07      	ldr	r3, [sp, #28]
 8017666:	2b02      	cmp	r3, #2
 8017668:	dd34      	ble.n	80176d4 <_dtoa_r+0x99c>
 801766a:	9b04      	ldr	r3, [sp, #16]
 801766c:	9301      	str	r3, [sp, #4]
 801766e:	9b01      	ldr	r3, [sp, #4]
 8017670:	b963      	cbnz	r3, 801768c <_dtoa_r+0x954>
 8017672:	4631      	mov	r1, r6
 8017674:	2205      	movs	r2, #5
 8017676:	4620      	mov	r0, r4
 8017678:	f000 fab2 	bl	8017be0 <__multadd>
 801767c:	4601      	mov	r1, r0
 801767e:	4606      	mov	r6, r0
 8017680:	4650      	mov	r0, sl
 8017682:	f000 fcc7 	bl	8018014 <__mcmp>
 8017686:	2800      	cmp	r0, #0
 8017688:	f73f adbb 	bgt.w	8017202 <_dtoa_r+0x4ca>
 801768c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801768e:	9d00      	ldr	r5, [sp, #0]
 8017690:	ea6f 0b03 	mvn.w	fp, r3
 8017694:	f04f 0800 	mov.w	r8, #0
 8017698:	4631      	mov	r1, r6
 801769a:	4620      	mov	r0, r4
 801769c:	f000 fa7e 	bl	8017b9c <_Bfree>
 80176a0:	2f00      	cmp	r7, #0
 80176a2:	f43f aeab 	beq.w	80173fc <_dtoa_r+0x6c4>
 80176a6:	f1b8 0f00 	cmp.w	r8, #0
 80176aa:	d005      	beq.n	80176b8 <_dtoa_r+0x980>
 80176ac:	45b8      	cmp	r8, r7
 80176ae:	d003      	beq.n	80176b8 <_dtoa_r+0x980>
 80176b0:	4641      	mov	r1, r8
 80176b2:	4620      	mov	r0, r4
 80176b4:	f000 fa72 	bl	8017b9c <_Bfree>
 80176b8:	4639      	mov	r1, r7
 80176ba:	4620      	mov	r0, r4
 80176bc:	f000 fa6e 	bl	8017b9c <_Bfree>
 80176c0:	e69c      	b.n	80173fc <_dtoa_r+0x6c4>
 80176c2:	2600      	movs	r6, #0
 80176c4:	4637      	mov	r7, r6
 80176c6:	e7e1      	b.n	801768c <_dtoa_r+0x954>
 80176c8:	46bb      	mov	fp, r7
 80176ca:	4637      	mov	r7, r6
 80176cc:	e599      	b.n	8017202 <_dtoa_r+0x4ca>
 80176ce:	bf00      	nop
 80176d0:	40240000 	.word	0x40240000
 80176d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	f000 80c8 	beq.w	801786c <_dtoa_r+0xb34>
 80176dc:	9b04      	ldr	r3, [sp, #16]
 80176de:	9301      	str	r3, [sp, #4]
 80176e0:	2d00      	cmp	r5, #0
 80176e2:	dd05      	ble.n	80176f0 <_dtoa_r+0x9b8>
 80176e4:	4639      	mov	r1, r7
 80176e6:	462a      	mov	r2, r5
 80176e8:	4620      	mov	r0, r4
 80176ea:	f000 fc27 	bl	8017f3c <__lshift>
 80176ee:	4607      	mov	r7, r0
 80176f0:	f1b8 0f00 	cmp.w	r8, #0
 80176f4:	d05b      	beq.n	80177ae <_dtoa_r+0xa76>
 80176f6:	6879      	ldr	r1, [r7, #4]
 80176f8:	4620      	mov	r0, r4
 80176fa:	f000 fa0f 	bl	8017b1c <_Balloc>
 80176fe:	4605      	mov	r5, r0
 8017700:	b928      	cbnz	r0, 801770e <_dtoa_r+0x9d6>
 8017702:	4b83      	ldr	r3, [pc, #524]	; (8017910 <_dtoa_r+0xbd8>)
 8017704:	4602      	mov	r2, r0
 8017706:	f240 21ef 	movw	r1, #751	; 0x2ef
 801770a:	f7ff bb2e 	b.w	8016d6a <_dtoa_r+0x32>
 801770e:	693a      	ldr	r2, [r7, #16]
 8017710:	3202      	adds	r2, #2
 8017712:	0092      	lsls	r2, r2, #2
 8017714:	f107 010c 	add.w	r1, r7, #12
 8017718:	300c      	adds	r0, #12
 801771a:	f000 ffab 	bl	8018674 <memcpy>
 801771e:	2201      	movs	r2, #1
 8017720:	4629      	mov	r1, r5
 8017722:	4620      	mov	r0, r4
 8017724:	f000 fc0a 	bl	8017f3c <__lshift>
 8017728:	9b00      	ldr	r3, [sp, #0]
 801772a:	3301      	adds	r3, #1
 801772c:	9304      	str	r3, [sp, #16]
 801772e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8017732:	4413      	add	r3, r2
 8017734:	9308      	str	r3, [sp, #32]
 8017736:	9b02      	ldr	r3, [sp, #8]
 8017738:	f003 0301 	and.w	r3, r3, #1
 801773c:	46b8      	mov	r8, r7
 801773e:	9306      	str	r3, [sp, #24]
 8017740:	4607      	mov	r7, r0
 8017742:	9b04      	ldr	r3, [sp, #16]
 8017744:	4631      	mov	r1, r6
 8017746:	3b01      	subs	r3, #1
 8017748:	4650      	mov	r0, sl
 801774a:	9301      	str	r3, [sp, #4]
 801774c:	f7ff fa69 	bl	8016c22 <quorem>
 8017750:	4641      	mov	r1, r8
 8017752:	9002      	str	r0, [sp, #8]
 8017754:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8017758:	4650      	mov	r0, sl
 801775a:	f000 fc5b 	bl	8018014 <__mcmp>
 801775e:	463a      	mov	r2, r7
 8017760:	9005      	str	r0, [sp, #20]
 8017762:	4631      	mov	r1, r6
 8017764:	4620      	mov	r0, r4
 8017766:	f000 fc71 	bl	801804c <__mdiff>
 801776a:	68c2      	ldr	r2, [r0, #12]
 801776c:	4605      	mov	r5, r0
 801776e:	bb02      	cbnz	r2, 80177b2 <_dtoa_r+0xa7a>
 8017770:	4601      	mov	r1, r0
 8017772:	4650      	mov	r0, sl
 8017774:	f000 fc4e 	bl	8018014 <__mcmp>
 8017778:	4602      	mov	r2, r0
 801777a:	4629      	mov	r1, r5
 801777c:	4620      	mov	r0, r4
 801777e:	9209      	str	r2, [sp, #36]	; 0x24
 8017780:	f000 fa0c 	bl	8017b9c <_Bfree>
 8017784:	9b07      	ldr	r3, [sp, #28]
 8017786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017788:	9d04      	ldr	r5, [sp, #16]
 801778a:	ea43 0102 	orr.w	r1, r3, r2
 801778e:	9b06      	ldr	r3, [sp, #24]
 8017790:	4319      	orrs	r1, r3
 8017792:	d110      	bne.n	80177b6 <_dtoa_r+0xa7e>
 8017794:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017798:	d029      	beq.n	80177ee <_dtoa_r+0xab6>
 801779a:	9b05      	ldr	r3, [sp, #20]
 801779c:	2b00      	cmp	r3, #0
 801779e:	dd02      	ble.n	80177a6 <_dtoa_r+0xa6e>
 80177a0:	9b02      	ldr	r3, [sp, #8]
 80177a2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80177a6:	9b01      	ldr	r3, [sp, #4]
 80177a8:	f883 9000 	strb.w	r9, [r3]
 80177ac:	e774      	b.n	8017698 <_dtoa_r+0x960>
 80177ae:	4638      	mov	r0, r7
 80177b0:	e7ba      	b.n	8017728 <_dtoa_r+0x9f0>
 80177b2:	2201      	movs	r2, #1
 80177b4:	e7e1      	b.n	801777a <_dtoa_r+0xa42>
 80177b6:	9b05      	ldr	r3, [sp, #20]
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	db04      	blt.n	80177c6 <_dtoa_r+0xa8e>
 80177bc:	9907      	ldr	r1, [sp, #28]
 80177be:	430b      	orrs	r3, r1
 80177c0:	9906      	ldr	r1, [sp, #24]
 80177c2:	430b      	orrs	r3, r1
 80177c4:	d120      	bne.n	8017808 <_dtoa_r+0xad0>
 80177c6:	2a00      	cmp	r2, #0
 80177c8:	dded      	ble.n	80177a6 <_dtoa_r+0xa6e>
 80177ca:	4651      	mov	r1, sl
 80177cc:	2201      	movs	r2, #1
 80177ce:	4620      	mov	r0, r4
 80177d0:	f000 fbb4 	bl	8017f3c <__lshift>
 80177d4:	4631      	mov	r1, r6
 80177d6:	4682      	mov	sl, r0
 80177d8:	f000 fc1c 	bl	8018014 <__mcmp>
 80177dc:	2800      	cmp	r0, #0
 80177de:	dc03      	bgt.n	80177e8 <_dtoa_r+0xab0>
 80177e0:	d1e1      	bne.n	80177a6 <_dtoa_r+0xa6e>
 80177e2:	f019 0f01 	tst.w	r9, #1
 80177e6:	d0de      	beq.n	80177a6 <_dtoa_r+0xa6e>
 80177e8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80177ec:	d1d8      	bne.n	80177a0 <_dtoa_r+0xa68>
 80177ee:	9a01      	ldr	r2, [sp, #4]
 80177f0:	2339      	movs	r3, #57	; 0x39
 80177f2:	7013      	strb	r3, [r2, #0]
 80177f4:	462b      	mov	r3, r5
 80177f6:	461d      	mov	r5, r3
 80177f8:	3b01      	subs	r3, #1
 80177fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80177fe:	2a39      	cmp	r2, #57	; 0x39
 8017800:	d06c      	beq.n	80178dc <_dtoa_r+0xba4>
 8017802:	3201      	adds	r2, #1
 8017804:	701a      	strb	r2, [r3, #0]
 8017806:	e747      	b.n	8017698 <_dtoa_r+0x960>
 8017808:	2a00      	cmp	r2, #0
 801780a:	dd07      	ble.n	801781c <_dtoa_r+0xae4>
 801780c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8017810:	d0ed      	beq.n	80177ee <_dtoa_r+0xab6>
 8017812:	9a01      	ldr	r2, [sp, #4]
 8017814:	f109 0301 	add.w	r3, r9, #1
 8017818:	7013      	strb	r3, [r2, #0]
 801781a:	e73d      	b.n	8017698 <_dtoa_r+0x960>
 801781c:	9b04      	ldr	r3, [sp, #16]
 801781e:	9a08      	ldr	r2, [sp, #32]
 8017820:	f803 9c01 	strb.w	r9, [r3, #-1]
 8017824:	4293      	cmp	r3, r2
 8017826:	d043      	beq.n	80178b0 <_dtoa_r+0xb78>
 8017828:	4651      	mov	r1, sl
 801782a:	2300      	movs	r3, #0
 801782c:	220a      	movs	r2, #10
 801782e:	4620      	mov	r0, r4
 8017830:	f000 f9d6 	bl	8017be0 <__multadd>
 8017834:	45b8      	cmp	r8, r7
 8017836:	4682      	mov	sl, r0
 8017838:	f04f 0300 	mov.w	r3, #0
 801783c:	f04f 020a 	mov.w	r2, #10
 8017840:	4641      	mov	r1, r8
 8017842:	4620      	mov	r0, r4
 8017844:	d107      	bne.n	8017856 <_dtoa_r+0xb1e>
 8017846:	f000 f9cb 	bl	8017be0 <__multadd>
 801784a:	4680      	mov	r8, r0
 801784c:	4607      	mov	r7, r0
 801784e:	9b04      	ldr	r3, [sp, #16]
 8017850:	3301      	adds	r3, #1
 8017852:	9304      	str	r3, [sp, #16]
 8017854:	e775      	b.n	8017742 <_dtoa_r+0xa0a>
 8017856:	f000 f9c3 	bl	8017be0 <__multadd>
 801785a:	4639      	mov	r1, r7
 801785c:	4680      	mov	r8, r0
 801785e:	2300      	movs	r3, #0
 8017860:	220a      	movs	r2, #10
 8017862:	4620      	mov	r0, r4
 8017864:	f000 f9bc 	bl	8017be0 <__multadd>
 8017868:	4607      	mov	r7, r0
 801786a:	e7f0      	b.n	801784e <_dtoa_r+0xb16>
 801786c:	9b04      	ldr	r3, [sp, #16]
 801786e:	9301      	str	r3, [sp, #4]
 8017870:	9d00      	ldr	r5, [sp, #0]
 8017872:	4631      	mov	r1, r6
 8017874:	4650      	mov	r0, sl
 8017876:	f7ff f9d4 	bl	8016c22 <quorem>
 801787a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 801787e:	9b00      	ldr	r3, [sp, #0]
 8017880:	f805 9b01 	strb.w	r9, [r5], #1
 8017884:	1aea      	subs	r2, r5, r3
 8017886:	9b01      	ldr	r3, [sp, #4]
 8017888:	4293      	cmp	r3, r2
 801788a:	dd07      	ble.n	801789c <_dtoa_r+0xb64>
 801788c:	4651      	mov	r1, sl
 801788e:	2300      	movs	r3, #0
 8017890:	220a      	movs	r2, #10
 8017892:	4620      	mov	r0, r4
 8017894:	f000 f9a4 	bl	8017be0 <__multadd>
 8017898:	4682      	mov	sl, r0
 801789a:	e7ea      	b.n	8017872 <_dtoa_r+0xb3a>
 801789c:	9b01      	ldr	r3, [sp, #4]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	bfc8      	it	gt
 80178a2:	461d      	movgt	r5, r3
 80178a4:	9b00      	ldr	r3, [sp, #0]
 80178a6:	bfd8      	it	le
 80178a8:	2501      	movle	r5, #1
 80178aa:	441d      	add	r5, r3
 80178ac:	f04f 0800 	mov.w	r8, #0
 80178b0:	4651      	mov	r1, sl
 80178b2:	2201      	movs	r2, #1
 80178b4:	4620      	mov	r0, r4
 80178b6:	f000 fb41 	bl	8017f3c <__lshift>
 80178ba:	4631      	mov	r1, r6
 80178bc:	4682      	mov	sl, r0
 80178be:	f000 fba9 	bl	8018014 <__mcmp>
 80178c2:	2800      	cmp	r0, #0
 80178c4:	dc96      	bgt.n	80177f4 <_dtoa_r+0xabc>
 80178c6:	d102      	bne.n	80178ce <_dtoa_r+0xb96>
 80178c8:	f019 0f01 	tst.w	r9, #1
 80178cc:	d192      	bne.n	80177f4 <_dtoa_r+0xabc>
 80178ce:	462b      	mov	r3, r5
 80178d0:	461d      	mov	r5, r3
 80178d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80178d6:	2a30      	cmp	r2, #48	; 0x30
 80178d8:	d0fa      	beq.n	80178d0 <_dtoa_r+0xb98>
 80178da:	e6dd      	b.n	8017698 <_dtoa_r+0x960>
 80178dc:	9a00      	ldr	r2, [sp, #0]
 80178de:	429a      	cmp	r2, r3
 80178e0:	d189      	bne.n	80177f6 <_dtoa_r+0xabe>
 80178e2:	f10b 0b01 	add.w	fp, fp, #1
 80178e6:	2331      	movs	r3, #49	; 0x31
 80178e8:	e796      	b.n	8017818 <_dtoa_r+0xae0>
 80178ea:	4b0a      	ldr	r3, [pc, #40]	; (8017914 <_dtoa_r+0xbdc>)
 80178ec:	f7ff ba99 	b.w	8016e22 <_dtoa_r+0xea>
 80178f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178f2:	2b00      	cmp	r3, #0
 80178f4:	f47f aa6d 	bne.w	8016dd2 <_dtoa_r+0x9a>
 80178f8:	4b07      	ldr	r3, [pc, #28]	; (8017918 <_dtoa_r+0xbe0>)
 80178fa:	f7ff ba92 	b.w	8016e22 <_dtoa_r+0xea>
 80178fe:	9b01      	ldr	r3, [sp, #4]
 8017900:	2b00      	cmp	r3, #0
 8017902:	dcb5      	bgt.n	8017870 <_dtoa_r+0xb38>
 8017904:	9b07      	ldr	r3, [sp, #28]
 8017906:	2b02      	cmp	r3, #2
 8017908:	f73f aeb1 	bgt.w	801766e <_dtoa_r+0x936>
 801790c:	e7b0      	b.n	8017870 <_dtoa_r+0xb38>
 801790e:	bf00      	nop
 8017910:	0801ba10 	.word	0x0801ba10
 8017914:	0801b970 	.word	0x0801b970
 8017918:	0801b994 	.word	0x0801b994

0801791c <_free_r>:
 801791c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801791e:	2900      	cmp	r1, #0
 8017920:	d044      	beq.n	80179ac <_free_r+0x90>
 8017922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017926:	9001      	str	r0, [sp, #4]
 8017928:	2b00      	cmp	r3, #0
 801792a:	f1a1 0404 	sub.w	r4, r1, #4
 801792e:	bfb8      	it	lt
 8017930:	18e4      	addlt	r4, r4, r3
 8017932:	f000 f8e7 	bl	8017b04 <__malloc_lock>
 8017936:	4a1e      	ldr	r2, [pc, #120]	; (80179b0 <_free_r+0x94>)
 8017938:	9801      	ldr	r0, [sp, #4]
 801793a:	6813      	ldr	r3, [r2, #0]
 801793c:	b933      	cbnz	r3, 801794c <_free_r+0x30>
 801793e:	6063      	str	r3, [r4, #4]
 8017940:	6014      	str	r4, [r2, #0]
 8017942:	b003      	add	sp, #12
 8017944:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8017948:	f000 b8e2 	b.w	8017b10 <__malloc_unlock>
 801794c:	42a3      	cmp	r3, r4
 801794e:	d908      	bls.n	8017962 <_free_r+0x46>
 8017950:	6825      	ldr	r5, [r4, #0]
 8017952:	1961      	adds	r1, r4, r5
 8017954:	428b      	cmp	r3, r1
 8017956:	bf01      	itttt	eq
 8017958:	6819      	ldreq	r1, [r3, #0]
 801795a:	685b      	ldreq	r3, [r3, #4]
 801795c:	1949      	addeq	r1, r1, r5
 801795e:	6021      	streq	r1, [r4, #0]
 8017960:	e7ed      	b.n	801793e <_free_r+0x22>
 8017962:	461a      	mov	r2, r3
 8017964:	685b      	ldr	r3, [r3, #4]
 8017966:	b10b      	cbz	r3, 801796c <_free_r+0x50>
 8017968:	42a3      	cmp	r3, r4
 801796a:	d9fa      	bls.n	8017962 <_free_r+0x46>
 801796c:	6811      	ldr	r1, [r2, #0]
 801796e:	1855      	adds	r5, r2, r1
 8017970:	42a5      	cmp	r5, r4
 8017972:	d10b      	bne.n	801798c <_free_r+0x70>
 8017974:	6824      	ldr	r4, [r4, #0]
 8017976:	4421      	add	r1, r4
 8017978:	1854      	adds	r4, r2, r1
 801797a:	42a3      	cmp	r3, r4
 801797c:	6011      	str	r1, [r2, #0]
 801797e:	d1e0      	bne.n	8017942 <_free_r+0x26>
 8017980:	681c      	ldr	r4, [r3, #0]
 8017982:	685b      	ldr	r3, [r3, #4]
 8017984:	6053      	str	r3, [r2, #4]
 8017986:	440c      	add	r4, r1
 8017988:	6014      	str	r4, [r2, #0]
 801798a:	e7da      	b.n	8017942 <_free_r+0x26>
 801798c:	d902      	bls.n	8017994 <_free_r+0x78>
 801798e:	230c      	movs	r3, #12
 8017990:	6003      	str	r3, [r0, #0]
 8017992:	e7d6      	b.n	8017942 <_free_r+0x26>
 8017994:	6825      	ldr	r5, [r4, #0]
 8017996:	1961      	adds	r1, r4, r5
 8017998:	428b      	cmp	r3, r1
 801799a:	bf04      	itt	eq
 801799c:	6819      	ldreq	r1, [r3, #0]
 801799e:	685b      	ldreq	r3, [r3, #4]
 80179a0:	6063      	str	r3, [r4, #4]
 80179a2:	bf04      	itt	eq
 80179a4:	1949      	addeq	r1, r1, r5
 80179a6:	6021      	streq	r1, [r4, #0]
 80179a8:	6054      	str	r4, [r2, #4]
 80179aa:	e7ca      	b.n	8017942 <_free_r+0x26>
 80179ac:	b003      	add	sp, #12
 80179ae:	bd30      	pop	{r4, r5, pc}
 80179b0:	20003008 	.word	0x20003008

080179b4 <malloc>:
 80179b4:	4b02      	ldr	r3, [pc, #8]	; (80179c0 <malloc+0xc>)
 80179b6:	4601      	mov	r1, r0
 80179b8:	6818      	ldr	r0, [r3, #0]
 80179ba:	f000 b823 	b.w	8017a04 <_malloc_r>
 80179be:	bf00      	nop
 80179c0:	2000039c 	.word	0x2000039c

080179c4 <sbrk_aligned>:
 80179c4:	b570      	push	{r4, r5, r6, lr}
 80179c6:	4e0e      	ldr	r6, [pc, #56]	; (8017a00 <sbrk_aligned+0x3c>)
 80179c8:	460c      	mov	r4, r1
 80179ca:	6831      	ldr	r1, [r6, #0]
 80179cc:	4605      	mov	r5, r0
 80179ce:	b911      	cbnz	r1, 80179d6 <sbrk_aligned+0x12>
 80179d0:	f000 fe40 	bl	8018654 <_sbrk_r>
 80179d4:	6030      	str	r0, [r6, #0]
 80179d6:	4621      	mov	r1, r4
 80179d8:	4628      	mov	r0, r5
 80179da:	f000 fe3b 	bl	8018654 <_sbrk_r>
 80179de:	1c43      	adds	r3, r0, #1
 80179e0:	d00a      	beq.n	80179f8 <sbrk_aligned+0x34>
 80179e2:	1cc4      	adds	r4, r0, #3
 80179e4:	f024 0403 	bic.w	r4, r4, #3
 80179e8:	42a0      	cmp	r0, r4
 80179ea:	d007      	beq.n	80179fc <sbrk_aligned+0x38>
 80179ec:	1a21      	subs	r1, r4, r0
 80179ee:	4628      	mov	r0, r5
 80179f0:	f000 fe30 	bl	8018654 <_sbrk_r>
 80179f4:	3001      	adds	r0, #1
 80179f6:	d101      	bne.n	80179fc <sbrk_aligned+0x38>
 80179f8:	f04f 34ff 	mov.w	r4, #4294967295
 80179fc:	4620      	mov	r0, r4
 80179fe:	bd70      	pop	{r4, r5, r6, pc}
 8017a00:	2000300c 	.word	0x2000300c

08017a04 <_malloc_r>:
 8017a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017a08:	1ccd      	adds	r5, r1, #3
 8017a0a:	f025 0503 	bic.w	r5, r5, #3
 8017a0e:	3508      	adds	r5, #8
 8017a10:	2d0c      	cmp	r5, #12
 8017a12:	bf38      	it	cc
 8017a14:	250c      	movcc	r5, #12
 8017a16:	2d00      	cmp	r5, #0
 8017a18:	4607      	mov	r7, r0
 8017a1a:	db01      	blt.n	8017a20 <_malloc_r+0x1c>
 8017a1c:	42a9      	cmp	r1, r5
 8017a1e:	d905      	bls.n	8017a2c <_malloc_r+0x28>
 8017a20:	230c      	movs	r3, #12
 8017a22:	603b      	str	r3, [r7, #0]
 8017a24:	2600      	movs	r6, #0
 8017a26:	4630      	mov	r0, r6
 8017a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017a2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017b00 <_malloc_r+0xfc>
 8017a30:	f000 f868 	bl	8017b04 <__malloc_lock>
 8017a34:	f8d8 3000 	ldr.w	r3, [r8]
 8017a38:	461c      	mov	r4, r3
 8017a3a:	bb5c      	cbnz	r4, 8017a94 <_malloc_r+0x90>
 8017a3c:	4629      	mov	r1, r5
 8017a3e:	4638      	mov	r0, r7
 8017a40:	f7ff ffc0 	bl	80179c4 <sbrk_aligned>
 8017a44:	1c43      	adds	r3, r0, #1
 8017a46:	4604      	mov	r4, r0
 8017a48:	d155      	bne.n	8017af6 <_malloc_r+0xf2>
 8017a4a:	f8d8 4000 	ldr.w	r4, [r8]
 8017a4e:	4626      	mov	r6, r4
 8017a50:	2e00      	cmp	r6, #0
 8017a52:	d145      	bne.n	8017ae0 <_malloc_r+0xdc>
 8017a54:	2c00      	cmp	r4, #0
 8017a56:	d048      	beq.n	8017aea <_malloc_r+0xe6>
 8017a58:	6823      	ldr	r3, [r4, #0]
 8017a5a:	4631      	mov	r1, r6
 8017a5c:	4638      	mov	r0, r7
 8017a5e:	eb04 0903 	add.w	r9, r4, r3
 8017a62:	f000 fdf7 	bl	8018654 <_sbrk_r>
 8017a66:	4581      	cmp	r9, r0
 8017a68:	d13f      	bne.n	8017aea <_malloc_r+0xe6>
 8017a6a:	6821      	ldr	r1, [r4, #0]
 8017a6c:	1a6d      	subs	r5, r5, r1
 8017a6e:	4629      	mov	r1, r5
 8017a70:	4638      	mov	r0, r7
 8017a72:	f7ff ffa7 	bl	80179c4 <sbrk_aligned>
 8017a76:	3001      	adds	r0, #1
 8017a78:	d037      	beq.n	8017aea <_malloc_r+0xe6>
 8017a7a:	6823      	ldr	r3, [r4, #0]
 8017a7c:	442b      	add	r3, r5
 8017a7e:	6023      	str	r3, [r4, #0]
 8017a80:	f8d8 3000 	ldr.w	r3, [r8]
 8017a84:	2b00      	cmp	r3, #0
 8017a86:	d038      	beq.n	8017afa <_malloc_r+0xf6>
 8017a88:	685a      	ldr	r2, [r3, #4]
 8017a8a:	42a2      	cmp	r2, r4
 8017a8c:	d12b      	bne.n	8017ae6 <_malloc_r+0xe2>
 8017a8e:	2200      	movs	r2, #0
 8017a90:	605a      	str	r2, [r3, #4]
 8017a92:	e00f      	b.n	8017ab4 <_malloc_r+0xb0>
 8017a94:	6822      	ldr	r2, [r4, #0]
 8017a96:	1b52      	subs	r2, r2, r5
 8017a98:	d41f      	bmi.n	8017ada <_malloc_r+0xd6>
 8017a9a:	2a0b      	cmp	r2, #11
 8017a9c:	d917      	bls.n	8017ace <_malloc_r+0xca>
 8017a9e:	1961      	adds	r1, r4, r5
 8017aa0:	42a3      	cmp	r3, r4
 8017aa2:	6025      	str	r5, [r4, #0]
 8017aa4:	bf18      	it	ne
 8017aa6:	6059      	strne	r1, [r3, #4]
 8017aa8:	6863      	ldr	r3, [r4, #4]
 8017aaa:	bf08      	it	eq
 8017aac:	f8c8 1000 	streq.w	r1, [r8]
 8017ab0:	5162      	str	r2, [r4, r5]
 8017ab2:	604b      	str	r3, [r1, #4]
 8017ab4:	4638      	mov	r0, r7
 8017ab6:	f104 060b 	add.w	r6, r4, #11
 8017aba:	f000 f829 	bl	8017b10 <__malloc_unlock>
 8017abe:	f026 0607 	bic.w	r6, r6, #7
 8017ac2:	1d23      	adds	r3, r4, #4
 8017ac4:	1af2      	subs	r2, r6, r3
 8017ac6:	d0ae      	beq.n	8017a26 <_malloc_r+0x22>
 8017ac8:	1b9b      	subs	r3, r3, r6
 8017aca:	50a3      	str	r3, [r4, r2]
 8017acc:	e7ab      	b.n	8017a26 <_malloc_r+0x22>
 8017ace:	42a3      	cmp	r3, r4
 8017ad0:	6862      	ldr	r2, [r4, #4]
 8017ad2:	d1dd      	bne.n	8017a90 <_malloc_r+0x8c>
 8017ad4:	f8c8 2000 	str.w	r2, [r8]
 8017ad8:	e7ec      	b.n	8017ab4 <_malloc_r+0xb0>
 8017ada:	4623      	mov	r3, r4
 8017adc:	6864      	ldr	r4, [r4, #4]
 8017ade:	e7ac      	b.n	8017a3a <_malloc_r+0x36>
 8017ae0:	4634      	mov	r4, r6
 8017ae2:	6876      	ldr	r6, [r6, #4]
 8017ae4:	e7b4      	b.n	8017a50 <_malloc_r+0x4c>
 8017ae6:	4613      	mov	r3, r2
 8017ae8:	e7cc      	b.n	8017a84 <_malloc_r+0x80>
 8017aea:	230c      	movs	r3, #12
 8017aec:	603b      	str	r3, [r7, #0]
 8017aee:	4638      	mov	r0, r7
 8017af0:	f000 f80e 	bl	8017b10 <__malloc_unlock>
 8017af4:	e797      	b.n	8017a26 <_malloc_r+0x22>
 8017af6:	6025      	str	r5, [r4, #0]
 8017af8:	e7dc      	b.n	8017ab4 <_malloc_r+0xb0>
 8017afa:	605b      	str	r3, [r3, #4]
 8017afc:	deff      	udf	#255	; 0xff
 8017afe:	bf00      	nop
 8017b00:	20003008 	.word	0x20003008

08017b04 <__malloc_lock>:
 8017b04:	4801      	ldr	r0, [pc, #4]	; (8017b0c <__malloc_lock+0x8>)
 8017b06:	f7ff b88a 	b.w	8016c1e <__retarget_lock_acquire_recursive>
 8017b0a:	bf00      	nop
 8017b0c:	20003004 	.word	0x20003004

08017b10 <__malloc_unlock>:
 8017b10:	4801      	ldr	r0, [pc, #4]	; (8017b18 <__malloc_unlock+0x8>)
 8017b12:	f7ff b885 	b.w	8016c20 <__retarget_lock_release_recursive>
 8017b16:	bf00      	nop
 8017b18:	20003004 	.word	0x20003004

08017b1c <_Balloc>:
 8017b1c:	b570      	push	{r4, r5, r6, lr}
 8017b1e:	69c6      	ldr	r6, [r0, #28]
 8017b20:	4604      	mov	r4, r0
 8017b22:	460d      	mov	r5, r1
 8017b24:	b976      	cbnz	r6, 8017b44 <_Balloc+0x28>
 8017b26:	2010      	movs	r0, #16
 8017b28:	f7ff ff44 	bl	80179b4 <malloc>
 8017b2c:	4602      	mov	r2, r0
 8017b2e:	61e0      	str	r0, [r4, #28]
 8017b30:	b920      	cbnz	r0, 8017b3c <_Balloc+0x20>
 8017b32:	4b18      	ldr	r3, [pc, #96]	; (8017b94 <_Balloc+0x78>)
 8017b34:	4818      	ldr	r0, [pc, #96]	; (8017b98 <_Balloc+0x7c>)
 8017b36:	216b      	movs	r1, #107	; 0x6b
 8017b38:	f000 fdaa 	bl	8018690 <__assert_func>
 8017b3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017b40:	6006      	str	r6, [r0, #0]
 8017b42:	60c6      	str	r6, [r0, #12]
 8017b44:	69e6      	ldr	r6, [r4, #28]
 8017b46:	68f3      	ldr	r3, [r6, #12]
 8017b48:	b183      	cbz	r3, 8017b6c <_Balloc+0x50>
 8017b4a:	69e3      	ldr	r3, [r4, #28]
 8017b4c:	68db      	ldr	r3, [r3, #12]
 8017b4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017b52:	b9b8      	cbnz	r0, 8017b84 <_Balloc+0x68>
 8017b54:	2101      	movs	r1, #1
 8017b56:	fa01 f605 	lsl.w	r6, r1, r5
 8017b5a:	1d72      	adds	r2, r6, #5
 8017b5c:	0092      	lsls	r2, r2, #2
 8017b5e:	4620      	mov	r0, r4
 8017b60:	f000 fdb4 	bl	80186cc <_calloc_r>
 8017b64:	b160      	cbz	r0, 8017b80 <_Balloc+0x64>
 8017b66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8017b6a:	e00e      	b.n	8017b8a <_Balloc+0x6e>
 8017b6c:	2221      	movs	r2, #33	; 0x21
 8017b6e:	2104      	movs	r1, #4
 8017b70:	4620      	mov	r0, r4
 8017b72:	f000 fdab 	bl	80186cc <_calloc_r>
 8017b76:	69e3      	ldr	r3, [r4, #28]
 8017b78:	60f0      	str	r0, [r6, #12]
 8017b7a:	68db      	ldr	r3, [r3, #12]
 8017b7c:	2b00      	cmp	r3, #0
 8017b7e:	d1e4      	bne.n	8017b4a <_Balloc+0x2e>
 8017b80:	2000      	movs	r0, #0
 8017b82:	bd70      	pop	{r4, r5, r6, pc}
 8017b84:	6802      	ldr	r2, [r0, #0]
 8017b86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8017b8a:	2300      	movs	r3, #0
 8017b8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017b90:	e7f7      	b.n	8017b82 <_Balloc+0x66>
 8017b92:	bf00      	nop
 8017b94:	0801b9a1 	.word	0x0801b9a1
 8017b98:	0801ba21 	.word	0x0801ba21

08017b9c <_Bfree>:
 8017b9c:	b570      	push	{r4, r5, r6, lr}
 8017b9e:	69c6      	ldr	r6, [r0, #28]
 8017ba0:	4605      	mov	r5, r0
 8017ba2:	460c      	mov	r4, r1
 8017ba4:	b976      	cbnz	r6, 8017bc4 <_Bfree+0x28>
 8017ba6:	2010      	movs	r0, #16
 8017ba8:	f7ff ff04 	bl	80179b4 <malloc>
 8017bac:	4602      	mov	r2, r0
 8017bae:	61e8      	str	r0, [r5, #28]
 8017bb0:	b920      	cbnz	r0, 8017bbc <_Bfree+0x20>
 8017bb2:	4b09      	ldr	r3, [pc, #36]	; (8017bd8 <_Bfree+0x3c>)
 8017bb4:	4809      	ldr	r0, [pc, #36]	; (8017bdc <_Bfree+0x40>)
 8017bb6:	218f      	movs	r1, #143	; 0x8f
 8017bb8:	f000 fd6a 	bl	8018690 <__assert_func>
 8017bbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017bc0:	6006      	str	r6, [r0, #0]
 8017bc2:	60c6      	str	r6, [r0, #12]
 8017bc4:	b13c      	cbz	r4, 8017bd6 <_Bfree+0x3a>
 8017bc6:	69eb      	ldr	r3, [r5, #28]
 8017bc8:	6862      	ldr	r2, [r4, #4]
 8017bca:	68db      	ldr	r3, [r3, #12]
 8017bcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017bd0:	6021      	str	r1, [r4, #0]
 8017bd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8017bd6:	bd70      	pop	{r4, r5, r6, pc}
 8017bd8:	0801b9a1 	.word	0x0801b9a1
 8017bdc:	0801ba21 	.word	0x0801ba21

08017be0 <__multadd>:
 8017be0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017be4:	690d      	ldr	r5, [r1, #16]
 8017be6:	4607      	mov	r7, r0
 8017be8:	460c      	mov	r4, r1
 8017bea:	461e      	mov	r6, r3
 8017bec:	f101 0c14 	add.w	ip, r1, #20
 8017bf0:	2000      	movs	r0, #0
 8017bf2:	f8dc 3000 	ldr.w	r3, [ip]
 8017bf6:	b299      	uxth	r1, r3
 8017bf8:	fb02 6101 	mla	r1, r2, r1, r6
 8017bfc:	0c1e      	lsrs	r6, r3, #16
 8017bfe:	0c0b      	lsrs	r3, r1, #16
 8017c00:	fb02 3306 	mla	r3, r2, r6, r3
 8017c04:	b289      	uxth	r1, r1
 8017c06:	3001      	adds	r0, #1
 8017c08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017c0c:	4285      	cmp	r5, r0
 8017c0e:	f84c 1b04 	str.w	r1, [ip], #4
 8017c12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017c16:	dcec      	bgt.n	8017bf2 <__multadd+0x12>
 8017c18:	b30e      	cbz	r6, 8017c5e <__multadd+0x7e>
 8017c1a:	68a3      	ldr	r3, [r4, #8]
 8017c1c:	42ab      	cmp	r3, r5
 8017c1e:	dc19      	bgt.n	8017c54 <__multadd+0x74>
 8017c20:	6861      	ldr	r1, [r4, #4]
 8017c22:	4638      	mov	r0, r7
 8017c24:	3101      	adds	r1, #1
 8017c26:	f7ff ff79 	bl	8017b1c <_Balloc>
 8017c2a:	4680      	mov	r8, r0
 8017c2c:	b928      	cbnz	r0, 8017c3a <__multadd+0x5a>
 8017c2e:	4602      	mov	r2, r0
 8017c30:	4b0c      	ldr	r3, [pc, #48]	; (8017c64 <__multadd+0x84>)
 8017c32:	480d      	ldr	r0, [pc, #52]	; (8017c68 <__multadd+0x88>)
 8017c34:	21ba      	movs	r1, #186	; 0xba
 8017c36:	f000 fd2b 	bl	8018690 <__assert_func>
 8017c3a:	6922      	ldr	r2, [r4, #16]
 8017c3c:	3202      	adds	r2, #2
 8017c3e:	f104 010c 	add.w	r1, r4, #12
 8017c42:	0092      	lsls	r2, r2, #2
 8017c44:	300c      	adds	r0, #12
 8017c46:	f000 fd15 	bl	8018674 <memcpy>
 8017c4a:	4621      	mov	r1, r4
 8017c4c:	4638      	mov	r0, r7
 8017c4e:	f7ff ffa5 	bl	8017b9c <_Bfree>
 8017c52:	4644      	mov	r4, r8
 8017c54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017c58:	3501      	adds	r5, #1
 8017c5a:	615e      	str	r6, [r3, #20]
 8017c5c:	6125      	str	r5, [r4, #16]
 8017c5e:	4620      	mov	r0, r4
 8017c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017c64:	0801ba10 	.word	0x0801ba10
 8017c68:	0801ba21 	.word	0x0801ba21

08017c6c <__hi0bits>:
 8017c6c:	0c03      	lsrs	r3, r0, #16
 8017c6e:	041b      	lsls	r3, r3, #16
 8017c70:	b9d3      	cbnz	r3, 8017ca8 <__hi0bits+0x3c>
 8017c72:	0400      	lsls	r0, r0, #16
 8017c74:	2310      	movs	r3, #16
 8017c76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017c7a:	bf04      	itt	eq
 8017c7c:	0200      	lsleq	r0, r0, #8
 8017c7e:	3308      	addeq	r3, #8
 8017c80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017c84:	bf04      	itt	eq
 8017c86:	0100      	lsleq	r0, r0, #4
 8017c88:	3304      	addeq	r3, #4
 8017c8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017c8e:	bf04      	itt	eq
 8017c90:	0080      	lsleq	r0, r0, #2
 8017c92:	3302      	addeq	r3, #2
 8017c94:	2800      	cmp	r0, #0
 8017c96:	db05      	blt.n	8017ca4 <__hi0bits+0x38>
 8017c98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017c9c:	f103 0301 	add.w	r3, r3, #1
 8017ca0:	bf08      	it	eq
 8017ca2:	2320      	moveq	r3, #32
 8017ca4:	4618      	mov	r0, r3
 8017ca6:	4770      	bx	lr
 8017ca8:	2300      	movs	r3, #0
 8017caa:	e7e4      	b.n	8017c76 <__hi0bits+0xa>

08017cac <__lo0bits>:
 8017cac:	6803      	ldr	r3, [r0, #0]
 8017cae:	f013 0207 	ands.w	r2, r3, #7
 8017cb2:	d00c      	beq.n	8017cce <__lo0bits+0x22>
 8017cb4:	07d9      	lsls	r1, r3, #31
 8017cb6:	d422      	bmi.n	8017cfe <__lo0bits+0x52>
 8017cb8:	079a      	lsls	r2, r3, #30
 8017cba:	bf49      	itett	mi
 8017cbc:	085b      	lsrmi	r3, r3, #1
 8017cbe:	089b      	lsrpl	r3, r3, #2
 8017cc0:	6003      	strmi	r3, [r0, #0]
 8017cc2:	2201      	movmi	r2, #1
 8017cc4:	bf5c      	itt	pl
 8017cc6:	6003      	strpl	r3, [r0, #0]
 8017cc8:	2202      	movpl	r2, #2
 8017cca:	4610      	mov	r0, r2
 8017ccc:	4770      	bx	lr
 8017cce:	b299      	uxth	r1, r3
 8017cd0:	b909      	cbnz	r1, 8017cd6 <__lo0bits+0x2a>
 8017cd2:	0c1b      	lsrs	r3, r3, #16
 8017cd4:	2210      	movs	r2, #16
 8017cd6:	b2d9      	uxtb	r1, r3
 8017cd8:	b909      	cbnz	r1, 8017cde <__lo0bits+0x32>
 8017cda:	3208      	adds	r2, #8
 8017cdc:	0a1b      	lsrs	r3, r3, #8
 8017cde:	0719      	lsls	r1, r3, #28
 8017ce0:	bf04      	itt	eq
 8017ce2:	091b      	lsreq	r3, r3, #4
 8017ce4:	3204      	addeq	r2, #4
 8017ce6:	0799      	lsls	r1, r3, #30
 8017ce8:	bf04      	itt	eq
 8017cea:	089b      	lsreq	r3, r3, #2
 8017cec:	3202      	addeq	r2, #2
 8017cee:	07d9      	lsls	r1, r3, #31
 8017cf0:	d403      	bmi.n	8017cfa <__lo0bits+0x4e>
 8017cf2:	085b      	lsrs	r3, r3, #1
 8017cf4:	f102 0201 	add.w	r2, r2, #1
 8017cf8:	d003      	beq.n	8017d02 <__lo0bits+0x56>
 8017cfa:	6003      	str	r3, [r0, #0]
 8017cfc:	e7e5      	b.n	8017cca <__lo0bits+0x1e>
 8017cfe:	2200      	movs	r2, #0
 8017d00:	e7e3      	b.n	8017cca <__lo0bits+0x1e>
 8017d02:	2220      	movs	r2, #32
 8017d04:	e7e1      	b.n	8017cca <__lo0bits+0x1e>
	...

08017d08 <__i2b>:
 8017d08:	b510      	push	{r4, lr}
 8017d0a:	460c      	mov	r4, r1
 8017d0c:	2101      	movs	r1, #1
 8017d0e:	f7ff ff05 	bl	8017b1c <_Balloc>
 8017d12:	4602      	mov	r2, r0
 8017d14:	b928      	cbnz	r0, 8017d22 <__i2b+0x1a>
 8017d16:	4b05      	ldr	r3, [pc, #20]	; (8017d2c <__i2b+0x24>)
 8017d18:	4805      	ldr	r0, [pc, #20]	; (8017d30 <__i2b+0x28>)
 8017d1a:	f240 1145 	movw	r1, #325	; 0x145
 8017d1e:	f000 fcb7 	bl	8018690 <__assert_func>
 8017d22:	2301      	movs	r3, #1
 8017d24:	6144      	str	r4, [r0, #20]
 8017d26:	6103      	str	r3, [r0, #16]
 8017d28:	bd10      	pop	{r4, pc}
 8017d2a:	bf00      	nop
 8017d2c:	0801ba10 	.word	0x0801ba10
 8017d30:	0801ba21 	.word	0x0801ba21

08017d34 <__multiply>:
 8017d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d38:	4691      	mov	r9, r2
 8017d3a:	690a      	ldr	r2, [r1, #16]
 8017d3c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017d40:	429a      	cmp	r2, r3
 8017d42:	bfb8      	it	lt
 8017d44:	460b      	movlt	r3, r1
 8017d46:	460c      	mov	r4, r1
 8017d48:	bfbc      	itt	lt
 8017d4a:	464c      	movlt	r4, r9
 8017d4c:	4699      	movlt	r9, r3
 8017d4e:	6927      	ldr	r7, [r4, #16]
 8017d50:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017d54:	68a3      	ldr	r3, [r4, #8]
 8017d56:	6861      	ldr	r1, [r4, #4]
 8017d58:	eb07 060a 	add.w	r6, r7, sl
 8017d5c:	42b3      	cmp	r3, r6
 8017d5e:	b085      	sub	sp, #20
 8017d60:	bfb8      	it	lt
 8017d62:	3101      	addlt	r1, #1
 8017d64:	f7ff feda 	bl	8017b1c <_Balloc>
 8017d68:	b930      	cbnz	r0, 8017d78 <__multiply+0x44>
 8017d6a:	4602      	mov	r2, r0
 8017d6c:	4b44      	ldr	r3, [pc, #272]	; (8017e80 <__multiply+0x14c>)
 8017d6e:	4845      	ldr	r0, [pc, #276]	; (8017e84 <__multiply+0x150>)
 8017d70:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8017d74:	f000 fc8c 	bl	8018690 <__assert_func>
 8017d78:	f100 0514 	add.w	r5, r0, #20
 8017d7c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017d80:	462b      	mov	r3, r5
 8017d82:	2200      	movs	r2, #0
 8017d84:	4543      	cmp	r3, r8
 8017d86:	d321      	bcc.n	8017dcc <__multiply+0x98>
 8017d88:	f104 0314 	add.w	r3, r4, #20
 8017d8c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017d90:	f109 0314 	add.w	r3, r9, #20
 8017d94:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017d98:	9202      	str	r2, [sp, #8]
 8017d9a:	1b3a      	subs	r2, r7, r4
 8017d9c:	3a15      	subs	r2, #21
 8017d9e:	f022 0203 	bic.w	r2, r2, #3
 8017da2:	3204      	adds	r2, #4
 8017da4:	f104 0115 	add.w	r1, r4, #21
 8017da8:	428f      	cmp	r7, r1
 8017daa:	bf38      	it	cc
 8017dac:	2204      	movcc	r2, #4
 8017dae:	9201      	str	r2, [sp, #4]
 8017db0:	9a02      	ldr	r2, [sp, #8]
 8017db2:	9303      	str	r3, [sp, #12]
 8017db4:	429a      	cmp	r2, r3
 8017db6:	d80c      	bhi.n	8017dd2 <__multiply+0x9e>
 8017db8:	2e00      	cmp	r6, #0
 8017dba:	dd03      	ble.n	8017dc4 <__multiply+0x90>
 8017dbc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d05b      	beq.n	8017e7c <__multiply+0x148>
 8017dc4:	6106      	str	r6, [r0, #16]
 8017dc6:	b005      	add	sp, #20
 8017dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017dcc:	f843 2b04 	str.w	r2, [r3], #4
 8017dd0:	e7d8      	b.n	8017d84 <__multiply+0x50>
 8017dd2:	f8b3 a000 	ldrh.w	sl, [r3]
 8017dd6:	f1ba 0f00 	cmp.w	sl, #0
 8017dda:	d024      	beq.n	8017e26 <__multiply+0xf2>
 8017ddc:	f104 0e14 	add.w	lr, r4, #20
 8017de0:	46a9      	mov	r9, r5
 8017de2:	f04f 0c00 	mov.w	ip, #0
 8017de6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017dea:	f8d9 1000 	ldr.w	r1, [r9]
 8017dee:	fa1f fb82 	uxth.w	fp, r2
 8017df2:	b289      	uxth	r1, r1
 8017df4:	fb0a 110b 	mla	r1, sl, fp, r1
 8017df8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017dfc:	f8d9 2000 	ldr.w	r2, [r9]
 8017e00:	4461      	add	r1, ip
 8017e02:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017e06:	fb0a c20b 	mla	r2, sl, fp, ip
 8017e0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017e0e:	b289      	uxth	r1, r1
 8017e10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017e14:	4577      	cmp	r7, lr
 8017e16:	f849 1b04 	str.w	r1, [r9], #4
 8017e1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017e1e:	d8e2      	bhi.n	8017de6 <__multiply+0xb2>
 8017e20:	9a01      	ldr	r2, [sp, #4]
 8017e22:	f845 c002 	str.w	ip, [r5, r2]
 8017e26:	9a03      	ldr	r2, [sp, #12]
 8017e28:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017e2c:	3304      	adds	r3, #4
 8017e2e:	f1b9 0f00 	cmp.w	r9, #0
 8017e32:	d021      	beq.n	8017e78 <__multiply+0x144>
 8017e34:	6829      	ldr	r1, [r5, #0]
 8017e36:	f104 0c14 	add.w	ip, r4, #20
 8017e3a:	46ae      	mov	lr, r5
 8017e3c:	f04f 0a00 	mov.w	sl, #0
 8017e40:	f8bc b000 	ldrh.w	fp, [ip]
 8017e44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017e48:	fb09 220b 	mla	r2, r9, fp, r2
 8017e4c:	4452      	add	r2, sl
 8017e4e:	b289      	uxth	r1, r1
 8017e50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017e54:	f84e 1b04 	str.w	r1, [lr], #4
 8017e58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8017e5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017e60:	f8be 1000 	ldrh.w	r1, [lr]
 8017e64:	fb09 110a 	mla	r1, r9, sl, r1
 8017e68:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8017e6c:	4567      	cmp	r7, ip
 8017e6e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017e72:	d8e5      	bhi.n	8017e40 <__multiply+0x10c>
 8017e74:	9a01      	ldr	r2, [sp, #4]
 8017e76:	50a9      	str	r1, [r5, r2]
 8017e78:	3504      	adds	r5, #4
 8017e7a:	e799      	b.n	8017db0 <__multiply+0x7c>
 8017e7c:	3e01      	subs	r6, #1
 8017e7e:	e79b      	b.n	8017db8 <__multiply+0x84>
 8017e80:	0801ba10 	.word	0x0801ba10
 8017e84:	0801ba21 	.word	0x0801ba21

08017e88 <__pow5mult>:
 8017e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e8c:	4615      	mov	r5, r2
 8017e8e:	f012 0203 	ands.w	r2, r2, #3
 8017e92:	4606      	mov	r6, r0
 8017e94:	460f      	mov	r7, r1
 8017e96:	d007      	beq.n	8017ea8 <__pow5mult+0x20>
 8017e98:	4c25      	ldr	r4, [pc, #148]	; (8017f30 <__pow5mult+0xa8>)
 8017e9a:	3a01      	subs	r2, #1
 8017e9c:	2300      	movs	r3, #0
 8017e9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017ea2:	f7ff fe9d 	bl	8017be0 <__multadd>
 8017ea6:	4607      	mov	r7, r0
 8017ea8:	10ad      	asrs	r5, r5, #2
 8017eaa:	d03d      	beq.n	8017f28 <__pow5mult+0xa0>
 8017eac:	69f4      	ldr	r4, [r6, #28]
 8017eae:	b97c      	cbnz	r4, 8017ed0 <__pow5mult+0x48>
 8017eb0:	2010      	movs	r0, #16
 8017eb2:	f7ff fd7f 	bl	80179b4 <malloc>
 8017eb6:	4602      	mov	r2, r0
 8017eb8:	61f0      	str	r0, [r6, #28]
 8017eba:	b928      	cbnz	r0, 8017ec8 <__pow5mult+0x40>
 8017ebc:	4b1d      	ldr	r3, [pc, #116]	; (8017f34 <__pow5mult+0xac>)
 8017ebe:	481e      	ldr	r0, [pc, #120]	; (8017f38 <__pow5mult+0xb0>)
 8017ec0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8017ec4:	f000 fbe4 	bl	8018690 <__assert_func>
 8017ec8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017ecc:	6004      	str	r4, [r0, #0]
 8017ece:	60c4      	str	r4, [r0, #12]
 8017ed0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8017ed4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017ed8:	b94c      	cbnz	r4, 8017eee <__pow5mult+0x66>
 8017eda:	f240 2171 	movw	r1, #625	; 0x271
 8017ede:	4630      	mov	r0, r6
 8017ee0:	f7ff ff12 	bl	8017d08 <__i2b>
 8017ee4:	2300      	movs	r3, #0
 8017ee6:	f8c8 0008 	str.w	r0, [r8, #8]
 8017eea:	4604      	mov	r4, r0
 8017eec:	6003      	str	r3, [r0, #0]
 8017eee:	f04f 0900 	mov.w	r9, #0
 8017ef2:	07eb      	lsls	r3, r5, #31
 8017ef4:	d50a      	bpl.n	8017f0c <__pow5mult+0x84>
 8017ef6:	4639      	mov	r1, r7
 8017ef8:	4622      	mov	r2, r4
 8017efa:	4630      	mov	r0, r6
 8017efc:	f7ff ff1a 	bl	8017d34 <__multiply>
 8017f00:	4639      	mov	r1, r7
 8017f02:	4680      	mov	r8, r0
 8017f04:	4630      	mov	r0, r6
 8017f06:	f7ff fe49 	bl	8017b9c <_Bfree>
 8017f0a:	4647      	mov	r7, r8
 8017f0c:	106d      	asrs	r5, r5, #1
 8017f0e:	d00b      	beq.n	8017f28 <__pow5mult+0xa0>
 8017f10:	6820      	ldr	r0, [r4, #0]
 8017f12:	b938      	cbnz	r0, 8017f24 <__pow5mult+0x9c>
 8017f14:	4622      	mov	r2, r4
 8017f16:	4621      	mov	r1, r4
 8017f18:	4630      	mov	r0, r6
 8017f1a:	f7ff ff0b 	bl	8017d34 <__multiply>
 8017f1e:	6020      	str	r0, [r4, #0]
 8017f20:	f8c0 9000 	str.w	r9, [r0]
 8017f24:	4604      	mov	r4, r0
 8017f26:	e7e4      	b.n	8017ef2 <__pow5mult+0x6a>
 8017f28:	4638      	mov	r0, r7
 8017f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f2e:	bf00      	nop
 8017f30:	0801bb70 	.word	0x0801bb70
 8017f34:	0801b9a1 	.word	0x0801b9a1
 8017f38:	0801ba21 	.word	0x0801ba21

08017f3c <__lshift>:
 8017f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017f40:	460c      	mov	r4, r1
 8017f42:	6849      	ldr	r1, [r1, #4]
 8017f44:	6923      	ldr	r3, [r4, #16]
 8017f46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017f4a:	68a3      	ldr	r3, [r4, #8]
 8017f4c:	4607      	mov	r7, r0
 8017f4e:	4691      	mov	r9, r2
 8017f50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017f54:	f108 0601 	add.w	r6, r8, #1
 8017f58:	42b3      	cmp	r3, r6
 8017f5a:	db0b      	blt.n	8017f74 <__lshift+0x38>
 8017f5c:	4638      	mov	r0, r7
 8017f5e:	f7ff fddd 	bl	8017b1c <_Balloc>
 8017f62:	4605      	mov	r5, r0
 8017f64:	b948      	cbnz	r0, 8017f7a <__lshift+0x3e>
 8017f66:	4602      	mov	r2, r0
 8017f68:	4b28      	ldr	r3, [pc, #160]	; (801800c <__lshift+0xd0>)
 8017f6a:	4829      	ldr	r0, [pc, #164]	; (8018010 <__lshift+0xd4>)
 8017f6c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8017f70:	f000 fb8e 	bl	8018690 <__assert_func>
 8017f74:	3101      	adds	r1, #1
 8017f76:	005b      	lsls	r3, r3, #1
 8017f78:	e7ee      	b.n	8017f58 <__lshift+0x1c>
 8017f7a:	2300      	movs	r3, #0
 8017f7c:	f100 0114 	add.w	r1, r0, #20
 8017f80:	f100 0210 	add.w	r2, r0, #16
 8017f84:	4618      	mov	r0, r3
 8017f86:	4553      	cmp	r3, sl
 8017f88:	db33      	blt.n	8017ff2 <__lshift+0xb6>
 8017f8a:	6920      	ldr	r0, [r4, #16]
 8017f8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017f90:	f104 0314 	add.w	r3, r4, #20
 8017f94:	f019 091f 	ands.w	r9, r9, #31
 8017f98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017f9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017fa0:	d02b      	beq.n	8017ffa <__lshift+0xbe>
 8017fa2:	f1c9 0e20 	rsb	lr, r9, #32
 8017fa6:	468a      	mov	sl, r1
 8017fa8:	2200      	movs	r2, #0
 8017faa:	6818      	ldr	r0, [r3, #0]
 8017fac:	fa00 f009 	lsl.w	r0, r0, r9
 8017fb0:	4310      	orrs	r0, r2
 8017fb2:	f84a 0b04 	str.w	r0, [sl], #4
 8017fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017fba:	459c      	cmp	ip, r3
 8017fbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8017fc0:	d8f3      	bhi.n	8017faa <__lshift+0x6e>
 8017fc2:	ebac 0304 	sub.w	r3, ip, r4
 8017fc6:	3b15      	subs	r3, #21
 8017fc8:	f023 0303 	bic.w	r3, r3, #3
 8017fcc:	3304      	adds	r3, #4
 8017fce:	f104 0015 	add.w	r0, r4, #21
 8017fd2:	4584      	cmp	ip, r0
 8017fd4:	bf38      	it	cc
 8017fd6:	2304      	movcc	r3, #4
 8017fd8:	50ca      	str	r2, [r1, r3]
 8017fda:	b10a      	cbz	r2, 8017fe0 <__lshift+0xa4>
 8017fdc:	f108 0602 	add.w	r6, r8, #2
 8017fe0:	3e01      	subs	r6, #1
 8017fe2:	4638      	mov	r0, r7
 8017fe4:	612e      	str	r6, [r5, #16]
 8017fe6:	4621      	mov	r1, r4
 8017fe8:	f7ff fdd8 	bl	8017b9c <_Bfree>
 8017fec:	4628      	mov	r0, r5
 8017fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017ff2:	f842 0f04 	str.w	r0, [r2, #4]!
 8017ff6:	3301      	adds	r3, #1
 8017ff8:	e7c5      	b.n	8017f86 <__lshift+0x4a>
 8017ffa:	3904      	subs	r1, #4
 8017ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8018000:	f841 2f04 	str.w	r2, [r1, #4]!
 8018004:	459c      	cmp	ip, r3
 8018006:	d8f9      	bhi.n	8017ffc <__lshift+0xc0>
 8018008:	e7ea      	b.n	8017fe0 <__lshift+0xa4>
 801800a:	bf00      	nop
 801800c:	0801ba10 	.word	0x0801ba10
 8018010:	0801ba21 	.word	0x0801ba21

08018014 <__mcmp>:
 8018014:	b530      	push	{r4, r5, lr}
 8018016:	6902      	ldr	r2, [r0, #16]
 8018018:	690c      	ldr	r4, [r1, #16]
 801801a:	1b12      	subs	r2, r2, r4
 801801c:	d10e      	bne.n	801803c <__mcmp+0x28>
 801801e:	f100 0314 	add.w	r3, r0, #20
 8018022:	3114      	adds	r1, #20
 8018024:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8018028:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801802c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8018030:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8018034:	42a5      	cmp	r5, r4
 8018036:	d003      	beq.n	8018040 <__mcmp+0x2c>
 8018038:	d305      	bcc.n	8018046 <__mcmp+0x32>
 801803a:	2201      	movs	r2, #1
 801803c:	4610      	mov	r0, r2
 801803e:	bd30      	pop	{r4, r5, pc}
 8018040:	4283      	cmp	r3, r0
 8018042:	d3f3      	bcc.n	801802c <__mcmp+0x18>
 8018044:	e7fa      	b.n	801803c <__mcmp+0x28>
 8018046:	f04f 32ff 	mov.w	r2, #4294967295
 801804a:	e7f7      	b.n	801803c <__mcmp+0x28>

0801804c <__mdiff>:
 801804c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018050:	460c      	mov	r4, r1
 8018052:	4606      	mov	r6, r0
 8018054:	4611      	mov	r1, r2
 8018056:	4620      	mov	r0, r4
 8018058:	4690      	mov	r8, r2
 801805a:	f7ff ffdb 	bl	8018014 <__mcmp>
 801805e:	1e05      	subs	r5, r0, #0
 8018060:	d110      	bne.n	8018084 <__mdiff+0x38>
 8018062:	4629      	mov	r1, r5
 8018064:	4630      	mov	r0, r6
 8018066:	f7ff fd59 	bl	8017b1c <_Balloc>
 801806a:	b930      	cbnz	r0, 801807a <__mdiff+0x2e>
 801806c:	4b3a      	ldr	r3, [pc, #232]	; (8018158 <__mdiff+0x10c>)
 801806e:	4602      	mov	r2, r0
 8018070:	f240 2137 	movw	r1, #567	; 0x237
 8018074:	4839      	ldr	r0, [pc, #228]	; (801815c <__mdiff+0x110>)
 8018076:	f000 fb0b 	bl	8018690 <__assert_func>
 801807a:	2301      	movs	r3, #1
 801807c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018084:	bfa4      	itt	ge
 8018086:	4643      	movge	r3, r8
 8018088:	46a0      	movge	r8, r4
 801808a:	4630      	mov	r0, r6
 801808c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018090:	bfa6      	itte	ge
 8018092:	461c      	movge	r4, r3
 8018094:	2500      	movge	r5, #0
 8018096:	2501      	movlt	r5, #1
 8018098:	f7ff fd40 	bl	8017b1c <_Balloc>
 801809c:	b920      	cbnz	r0, 80180a8 <__mdiff+0x5c>
 801809e:	4b2e      	ldr	r3, [pc, #184]	; (8018158 <__mdiff+0x10c>)
 80180a0:	4602      	mov	r2, r0
 80180a2:	f240 2145 	movw	r1, #581	; 0x245
 80180a6:	e7e5      	b.n	8018074 <__mdiff+0x28>
 80180a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80180ac:	6926      	ldr	r6, [r4, #16]
 80180ae:	60c5      	str	r5, [r0, #12]
 80180b0:	f104 0914 	add.w	r9, r4, #20
 80180b4:	f108 0514 	add.w	r5, r8, #20
 80180b8:	f100 0e14 	add.w	lr, r0, #20
 80180bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80180c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80180c4:	f108 0210 	add.w	r2, r8, #16
 80180c8:	46f2      	mov	sl, lr
 80180ca:	2100      	movs	r1, #0
 80180cc:	f859 3b04 	ldr.w	r3, [r9], #4
 80180d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80180d4:	fa11 f88b 	uxtah	r8, r1, fp
 80180d8:	b299      	uxth	r1, r3
 80180da:	0c1b      	lsrs	r3, r3, #16
 80180dc:	eba8 0801 	sub.w	r8, r8, r1
 80180e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80180e4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80180e8:	fa1f f888 	uxth.w	r8, r8
 80180ec:	1419      	asrs	r1, r3, #16
 80180ee:	454e      	cmp	r6, r9
 80180f0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80180f4:	f84a 3b04 	str.w	r3, [sl], #4
 80180f8:	d8e8      	bhi.n	80180cc <__mdiff+0x80>
 80180fa:	1b33      	subs	r3, r6, r4
 80180fc:	3b15      	subs	r3, #21
 80180fe:	f023 0303 	bic.w	r3, r3, #3
 8018102:	3304      	adds	r3, #4
 8018104:	3415      	adds	r4, #21
 8018106:	42a6      	cmp	r6, r4
 8018108:	bf38      	it	cc
 801810a:	2304      	movcc	r3, #4
 801810c:	441d      	add	r5, r3
 801810e:	4473      	add	r3, lr
 8018110:	469e      	mov	lr, r3
 8018112:	462e      	mov	r6, r5
 8018114:	4566      	cmp	r6, ip
 8018116:	d30e      	bcc.n	8018136 <__mdiff+0xea>
 8018118:	f10c 0203 	add.w	r2, ip, #3
 801811c:	1b52      	subs	r2, r2, r5
 801811e:	f022 0203 	bic.w	r2, r2, #3
 8018122:	3d03      	subs	r5, #3
 8018124:	45ac      	cmp	ip, r5
 8018126:	bf38      	it	cc
 8018128:	2200      	movcc	r2, #0
 801812a:	4413      	add	r3, r2
 801812c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8018130:	b17a      	cbz	r2, 8018152 <__mdiff+0x106>
 8018132:	6107      	str	r7, [r0, #16]
 8018134:	e7a4      	b.n	8018080 <__mdiff+0x34>
 8018136:	f856 8b04 	ldr.w	r8, [r6], #4
 801813a:	fa11 f288 	uxtah	r2, r1, r8
 801813e:	1414      	asrs	r4, r2, #16
 8018140:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8018144:	b292      	uxth	r2, r2
 8018146:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801814a:	f84e 2b04 	str.w	r2, [lr], #4
 801814e:	1421      	asrs	r1, r4, #16
 8018150:	e7e0      	b.n	8018114 <__mdiff+0xc8>
 8018152:	3f01      	subs	r7, #1
 8018154:	e7ea      	b.n	801812c <__mdiff+0xe0>
 8018156:	bf00      	nop
 8018158:	0801ba10 	.word	0x0801ba10
 801815c:	0801ba21 	.word	0x0801ba21

08018160 <__d2b>:
 8018160:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8018164:	460f      	mov	r7, r1
 8018166:	2101      	movs	r1, #1
 8018168:	ec59 8b10 	vmov	r8, r9, d0
 801816c:	4616      	mov	r6, r2
 801816e:	f7ff fcd5 	bl	8017b1c <_Balloc>
 8018172:	4604      	mov	r4, r0
 8018174:	b930      	cbnz	r0, 8018184 <__d2b+0x24>
 8018176:	4602      	mov	r2, r0
 8018178:	4b24      	ldr	r3, [pc, #144]	; (801820c <__d2b+0xac>)
 801817a:	4825      	ldr	r0, [pc, #148]	; (8018210 <__d2b+0xb0>)
 801817c:	f240 310f 	movw	r1, #783	; 0x30f
 8018180:	f000 fa86 	bl	8018690 <__assert_func>
 8018184:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8018188:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801818c:	bb2d      	cbnz	r5, 80181da <__d2b+0x7a>
 801818e:	9301      	str	r3, [sp, #4]
 8018190:	f1b8 0300 	subs.w	r3, r8, #0
 8018194:	d026      	beq.n	80181e4 <__d2b+0x84>
 8018196:	4668      	mov	r0, sp
 8018198:	9300      	str	r3, [sp, #0]
 801819a:	f7ff fd87 	bl	8017cac <__lo0bits>
 801819e:	e9dd 1200 	ldrd	r1, r2, [sp]
 80181a2:	b1e8      	cbz	r0, 80181e0 <__d2b+0x80>
 80181a4:	f1c0 0320 	rsb	r3, r0, #32
 80181a8:	fa02 f303 	lsl.w	r3, r2, r3
 80181ac:	430b      	orrs	r3, r1
 80181ae:	40c2      	lsrs	r2, r0
 80181b0:	6163      	str	r3, [r4, #20]
 80181b2:	9201      	str	r2, [sp, #4]
 80181b4:	9b01      	ldr	r3, [sp, #4]
 80181b6:	61a3      	str	r3, [r4, #24]
 80181b8:	2b00      	cmp	r3, #0
 80181ba:	bf14      	ite	ne
 80181bc:	2202      	movne	r2, #2
 80181be:	2201      	moveq	r2, #1
 80181c0:	6122      	str	r2, [r4, #16]
 80181c2:	b1bd      	cbz	r5, 80181f4 <__d2b+0x94>
 80181c4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80181c8:	4405      	add	r5, r0
 80181ca:	603d      	str	r5, [r7, #0]
 80181cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80181d0:	6030      	str	r0, [r6, #0]
 80181d2:	4620      	mov	r0, r4
 80181d4:	b003      	add	sp, #12
 80181d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80181da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80181de:	e7d6      	b.n	801818e <__d2b+0x2e>
 80181e0:	6161      	str	r1, [r4, #20]
 80181e2:	e7e7      	b.n	80181b4 <__d2b+0x54>
 80181e4:	a801      	add	r0, sp, #4
 80181e6:	f7ff fd61 	bl	8017cac <__lo0bits>
 80181ea:	9b01      	ldr	r3, [sp, #4]
 80181ec:	6163      	str	r3, [r4, #20]
 80181ee:	3020      	adds	r0, #32
 80181f0:	2201      	movs	r2, #1
 80181f2:	e7e5      	b.n	80181c0 <__d2b+0x60>
 80181f4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80181f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80181fc:	6038      	str	r0, [r7, #0]
 80181fe:	6918      	ldr	r0, [r3, #16]
 8018200:	f7ff fd34 	bl	8017c6c <__hi0bits>
 8018204:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018208:	e7e2      	b.n	80181d0 <__d2b+0x70>
 801820a:	bf00      	nop
 801820c:	0801ba10 	.word	0x0801ba10
 8018210:	0801ba21 	.word	0x0801ba21

08018214 <__ssputs_r>:
 8018214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018218:	688e      	ldr	r6, [r1, #8]
 801821a:	461f      	mov	r7, r3
 801821c:	42be      	cmp	r6, r7
 801821e:	680b      	ldr	r3, [r1, #0]
 8018220:	4682      	mov	sl, r0
 8018222:	460c      	mov	r4, r1
 8018224:	4690      	mov	r8, r2
 8018226:	d82c      	bhi.n	8018282 <__ssputs_r+0x6e>
 8018228:	898a      	ldrh	r2, [r1, #12]
 801822a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801822e:	d026      	beq.n	801827e <__ssputs_r+0x6a>
 8018230:	6965      	ldr	r5, [r4, #20]
 8018232:	6909      	ldr	r1, [r1, #16]
 8018234:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018238:	eba3 0901 	sub.w	r9, r3, r1
 801823c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018240:	1c7b      	adds	r3, r7, #1
 8018242:	444b      	add	r3, r9
 8018244:	106d      	asrs	r5, r5, #1
 8018246:	429d      	cmp	r5, r3
 8018248:	bf38      	it	cc
 801824a:	461d      	movcc	r5, r3
 801824c:	0553      	lsls	r3, r2, #21
 801824e:	d527      	bpl.n	80182a0 <__ssputs_r+0x8c>
 8018250:	4629      	mov	r1, r5
 8018252:	f7ff fbd7 	bl	8017a04 <_malloc_r>
 8018256:	4606      	mov	r6, r0
 8018258:	b360      	cbz	r0, 80182b4 <__ssputs_r+0xa0>
 801825a:	6921      	ldr	r1, [r4, #16]
 801825c:	464a      	mov	r2, r9
 801825e:	f000 fa09 	bl	8018674 <memcpy>
 8018262:	89a3      	ldrh	r3, [r4, #12]
 8018264:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801826c:	81a3      	strh	r3, [r4, #12]
 801826e:	6126      	str	r6, [r4, #16]
 8018270:	6165      	str	r5, [r4, #20]
 8018272:	444e      	add	r6, r9
 8018274:	eba5 0509 	sub.w	r5, r5, r9
 8018278:	6026      	str	r6, [r4, #0]
 801827a:	60a5      	str	r5, [r4, #8]
 801827c:	463e      	mov	r6, r7
 801827e:	42be      	cmp	r6, r7
 8018280:	d900      	bls.n	8018284 <__ssputs_r+0x70>
 8018282:	463e      	mov	r6, r7
 8018284:	6820      	ldr	r0, [r4, #0]
 8018286:	4632      	mov	r2, r6
 8018288:	4641      	mov	r1, r8
 801828a:	f000 f9c9 	bl	8018620 <memmove>
 801828e:	68a3      	ldr	r3, [r4, #8]
 8018290:	1b9b      	subs	r3, r3, r6
 8018292:	60a3      	str	r3, [r4, #8]
 8018294:	6823      	ldr	r3, [r4, #0]
 8018296:	4433      	add	r3, r6
 8018298:	6023      	str	r3, [r4, #0]
 801829a:	2000      	movs	r0, #0
 801829c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182a0:	462a      	mov	r2, r5
 80182a2:	f000 fa3b 	bl	801871c <_realloc_r>
 80182a6:	4606      	mov	r6, r0
 80182a8:	2800      	cmp	r0, #0
 80182aa:	d1e0      	bne.n	801826e <__ssputs_r+0x5a>
 80182ac:	6921      	ldr	r1, [r4, #16]
 80182ae:	4650      	mov	r0, sl
 80182b0:	f7ff fb34 	bl	801791c <_free_r>
 80182b4:	230c      	movs	r3, #12
 80182b6:	f8ca 3000 	str.w	r3, [sl]
 80182ba:	89a3      	ldrh	r3, [r4, #12]
 80182bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80182c0:	81a3      	strh	r3, [r4, #12]
 80182c2:	f04f 30ff 	mov.w	r0, #4294967295
 80182c6:	e7e9      	b.n	801829c <__ssputs_r+0x88>

080182c8 <_svfiprintf_r>:
 80182c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182cc:	4698      	mov	r8, r3
 80182ce:	898b      	ldrh	r3, [r1, #12]
 80182d0:	061b      	lsls	r3, r3, #24
 80182d2:	b09d      	sub	sp, #116	; 0x74
 80182d4:	4607      	mov	r7, r0
 80182d6:	460d      	mov	r5, r1
 80182d8:	4614      	mov	r4, r2
 80182da:	d50e      	bpl.n	80182fa <_svfiprintf_r+0x32>
 80182dc:	690b      	ldr	r3, [r1, #16]
 80182de:	b963      	cbnz	r3, 80182fa <_svfiprintf_r+0x32>
 80182e0:	2140      	movs	r1, #64	; 0x40
 80182e2:	f7ff fb8f 	bl	8017a04 <_malloc_r>
 80182e6:	6028      	str	r0, [r5, #0]
 80182e8:	6128      	str	r0, [r5, #16]
 80182ea:	b920      	cbnz	r0, 80182f6 <_svfiprintf_r+0x2e>
 80182ec:	230c      	movs	r3, #12
 80182ee:	603b      	str	r3, [r7, #0]
 80182f0:	f04f 30ff 	mov.w	r0, #4294967295
 80182f4:	e0d0      	b.n	8018498 <_svfiprintf_r+0x1d0>
 80182f6:	2340      	movs	r3, #64	; 0x40
 80182f8:	616b      	str	r3, [r5, #20]
 80182fa:	2300      	movs	r3, #0
 80182fc:	9309      	str	r3, [sp, #36]	; 0x24
 80182fe:	2320      	movs	r3, #32
 8018300:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018304:	f8cd 800c 	str.w	r8, [sp, #12]
 8018308:	2330      	movs	r3, #48	; 0x30
 801830a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80184b0 <_svfiprintf_r+0x1e8>
 801830e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018312:	f04f 0901 	mov.w	r9, #1
 8018316:	4623      	mov	r3, r4
 8018318:	469a      	mov	sl, r3
 801831a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801831e:	b10a      	cbz	r2, 8018324 <_svfiprintf_r+0x5c>
 8018320:	2a25      	cmp	r2, #37	; 0x25
 8018322:	d1f9      	bne.n	8018318 <_svfiprintf_r+0x50>
 8018324:	ebba 0b04 	subs.w	fp, sl, r4
 8018328:	d00b      	beq.n	8018342 <_svfiprintf_r+0x7a>
 801832a:	465b      	mov	r3, fp
 801832c:	4622      	mov	r2, r4
 801832e:	4629      	mov	r1, r5
 8018330:	4638      	mov	r0, r7
 8018332:	f7ff ff6f 	bl	8018214 <__ssputs_r>
 8018336:	3001      	adds	r0, #1
 8018338:	f000 80a9 	beq.w	801848e <_svfiprintf_r+0x1c6>
 801833c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801833e:	445a      	add	r2, fp
 8018340:	9209      	str	r2, [sp, #36]	; 0x24
 8018342:	f89a 3000 	ldrb.w	r3, [sl]
 8018346:	2b00      	cmp	r3, #0
 8018348:	f000 80a1 	beq.w	801848e <_svfiprintf_r+0x1c6>
 801834c:	2300      	movs	r3, #0
 801834e:	f04f 32ff 	mov.w	r2, #4294967295
 8018352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018356:	f10a 0a01 	add.w	sl, sl, #1
 801835a:	9304      	str	r3, [sp, #16]
 801835c:	9307      	str	r3, [sp, #28]
 801835e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018362:	931a      	str	r3, [sp, #104]	; 0x68
 8018364:	4654      	mov	r4, sl
 8018366:	2205      	movs	r2, #5
 8018368:	f814 1b01 	ldrb.w	r1, [r4], #1
 801836c:	4850      	ldr	r0, [pc, #320]	; (80184b0 <_svfiprintf_r+0x1e8>)
 801836e:	f7e7 ff57 	bl	8000220 <memchr>
 8018372:	9a04      	ldr	r2, [sp, #16]
 8018374:	b9d8      	cbnz	r0, 80183ae <_svfiprintf_r+0xe6>
 8018376:	06d0      	lsls	r0, r2, #27
 8018378:	bf44      	itt	mi
 801837a:	2320      	movmi	r3, #32
 801837c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018380:	0711      	lsls	r1, r2, #28
 8018382:	bf44      	itt	mi
 8018384:	232b      	movmi	r3, #43	; 0x2b
 8018386:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801838a:	f89a 3000 	ldrb.w	r3, [sl]
 801838e:	2b2a      	cmp	r3, #42	; 0x2a
 8018390:	d015      	beq.n	80183be <_svfiprintf_r+0xf6>
 8018392:	9a07      	ldr	r2, [sp, #28]
 8018394:	4654      	mov	r4, sl
 8018396:	2000      	movs	r0, #0
 8018398:	f04f 0c0a 	mov.w	ip, #10
 801839c:	4621      	mov	r1, r4
 801839e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80183a2:	3b30      	subs	r3, #48	; 0x30
 80183a4:	2b09      	cmp	r3, #9
 80183a6:	d94d      	bls.n	8018444 <_svfiprintf_r+0x17c>
 80183a8:	b1b0      	cbz	r0, 80183d8 <_svfiprintf_r+0x110>
 80183aa:	9207      	str	r2, [sp, #28]
 80183ac:	e014      	b.n	80183d8 <_svfiprintf_r+0x110>
 80183ae:	eba0 0308 	sub.w	r3, r0, r8
 80183b2:	fa09 f303 	lsl.w	r3, r9, r3
 80183b6:	4313      	orrs	r3, r2
 80183b8:	9304      	str	r3, [sp, #16]
 80183ba:	46a2      	mov	sl, r4
 80183bc:	e7d2      	b.n	8018364 <_svfiprintf_r+0x9c>
 80183be:	9b03      	ldr	r3, [sp, #12]
 80183c0:	1d19      	adds	r1, r3, #4
 80183c2:	681b      	ldr	r3, [r3, #0]
 80183c4:	9103      	str	r1, [sp, #12]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	bfbb      	ittet	lt
 80183ca:	425b      	neglt	r3, r3
 80183cc:	f042 0202 	orrlt.w	r2, r2, #2
 80183d0:	9307      	strge	r3, [sp, #28]
 80183d2:	9307      	strlt	r3, [sp, #28]
 80183d4:	bfb8      	it	lt
 80183d6:	9204      	strlt	r2, [sp, #16]
 80183d8:	7823      	ldrb	r3, [r4, #0]
 80183da:	2b2e      	cmp	r3, #46	; 0x2e
 80183dc:	d10c      	bne.n	80183f8 <_svfiprintf_r+0x130>
 80183de:	7863      	ldrb	r3, [r4, #1]
 80183e0:	2b2a      	cmp	r3, #42	; 0x2a
 80183e2:	d134      	bne.n	801844e <_svfiprintf_r+0x186>
 80183e4:	9b03      	ldr	r3, [sp, #12]
 80183e6:	1d1a      	adds	r2, r3, #4
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	9203      	str	r2, [sp, #12]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	bfb8      	it	lt
 80183f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80183f4:	3402      	adds	r4, #2
 80183f6:	9305      	str	r3, [sp, #20]
 80183f8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80184c0 <_svfiprintf_r+0x1f8>
 80183fc:	7821      	ldrb	r1, [r4, #0]
 80183fe:	2203      	movs	r2, #3
 8018400:	4650      	mov	r0, sl
 8018402:	f7e7 ff0d 	bl	8000220 <memchr>
 8018406:	b138      	cbz	r0, 8018418 <_svfiprintf_r+0x150>
 8018408:	9b04      	ldr	r3, [sp, #16]
 801840a:	eba0 000a 	sub.w	r0, r0, sl
 801840e:	2240      	movs	r2, #64	; 0x40
 8018410:	4082      	lsls	r2, r0
 8018412:	4313      	orrs	r3, r2
 8018414:	3401      	adds	r4, #1
 8018416:	9304      	str	r3, [sp, #16]
 8018418:	f814 1b01 	ldrb.w	r1, [r4], #1
 801841c:	4825      	ldr	r0, [pc, #148]	; (80184b4 <_svfiprintf_r+0x1ec>)
 801841e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018422:	2206      	movs	r2, #6
 8018424:	f7e7 fefc 	bl	8000220 <memchr>
 8018428:	2800      	cmp	r0, #0
 801842a:	d038      	beq.n	801849e <_svfiprintf_r+0x1d6>
 801842c:	4b22      	ldr	r3, [pc, #136]	; (80184b8 <_svfiprintf_r+0x1f0>)
 801842e:	bb1b      	cbnz	r3, 8018478 <_svfiprintf_r+0x1b0>
 8018430:	9b03      	ldr	r3, [sp, #12]
 8018432:	3307      	adds	r3, #7
 8018434:	f023 0307 	bic.w	r3, r3, #7
 8018438:	3308      	adds	r3, #8
 801843a:	9303      	str	r3, [sp, #12]
 801843c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801843e:	4433      	add	r3, r6
 8018440:	9309      	str	r3, [sp, #36]	; 0x24
 8018442:	e768      	b.n	8018316 <_svfiprintf_r+0x4e>
 8018444:	fb0c 3202 	mla	r2, ip, r2, r3
 8018448:	460c      	mov	r4, r1
 801844a:	2001      	movs	r0, #1
 801844c:	e7a6      	b.n	801839c <_svfiprintf_r+0xd4>
 801844e:	2300      	movs	r3, #0
 8018450:	3401      	adds	r4, #1
 8018452:	9305      	str	r3, [sp, #20]
 8018454:	4619      	mov	r1, r3
 8018456:	f04f 0c0a 	mov.w	ip, #10
 801845a:	4620      	mov	r0, r4
 801845c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018460:	3a30      	subs	r2, #48	; 0x30
 8018462:	2a09      	cmp	r2, #9
 8018464:	d903      	bls.n	801846e <_svfiprintf_r+0x1a6>
 8018466:	2b00      	cmp	r3, #0
 8018468:	d0c6      	beq.n	80183f8 <_svfiprintf_r+0x130>
 801846a:	9105      	str	r1, [sp, #20]
 801846c:	e7c4      	b.n	80183f8 <_svfiprintf_r+0x130>
 801846e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018472:	4604      	mov	r4, r0
 8018474:	2301      	movs	r3, #1
 8018476:	e7f0      	b.n	801845a <_svfiprintf_r+0x192>
 8018478:	ab03      	add	r3, sp, #12
 801847a:	9300      	str	r3, [sp, #0]
 801847c:	462a      	mov	r2, r5
 801847e:	4b0f      	ldr	r3, [pc, #60]	; (80184bc <_svfiprintf_r+0x1f4>)
 8018480:	a904      	add	r1, sp, #16
 8018482:	4638      	mov	r0, r7
 8018484:	f7fd fe62 	bl	801614c <_printf_float>
 8018488:	1c42      	adds	r2, r0, #1
 801848a:	4606      	mov	r6, r0
 801848c:	d1d6      	bne.n	801843c <_svfiprintf_r+0x174>
 801848e:	89ab      	ldrh	r3, [r5, #12]
 8018490:	065b      	lsls	r3, r3, #25
 8018492:	f53f af2d 	bmi.w	80182f0 <_svfiprintf_r+0x28>
 8018496:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018498:	b01d      	add	sp, #116	; 0x74
 801849a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801849e:	ab03      	add	r3, sp, #12
 80184a0:	9300      	str	r3, [sp, #0]
 80184a2:	462a      	mov	r2, r5
 80184a4:	4b05      	ldr	r3, [pc, #20]	; (80184bc <_svfiprintf_r+0x1f4>)
 80184a6:	a904      	add	r1, sp, #16
 80184a8:	4638      	mov	r0, r7
 80184aa:	f7fe f8f3 	bl	8016694 <_printf_i>
 80184ae:	e7eb      	b.n	8018488 <_svfiprintf_r+0x1c0>
 80184b0:	0801bb7c 	.word	0x0801bb7c
 80184b4:	0801bb86 	.word	0x0801bb86
 80184b8:	0801614d 	.word	0x0801614d
 80184bc:	08018215 	.word	0x08018215
 80184c0:	0801bb82 	.word	0x0801bb82

080184c4 <__sflush_r>:
 80184c4:	898a      	ldrh	r2, [r1, #12]
 80184c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80184ca:	4605      	mov	r5, r0
 80184cc:	0710      	lsls	r0, r2, #28
 80184ce:	460c      	mov	r4, r1
 80184d0:	d458      	bmi.n	8018584 <__sflush_r+0xc0>
 80184d2:	684b      	ldr	r3, [r1, #4]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	dc05      	bgt.n	80184e4 <__sflush_r+0x20>
 80184d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80184da:	2b00      	cmp	r3, #0
 80184dc:	dc02      	bgt.n	80184e4 <__sflush_r+0x20>
 80184de:	2000      	movs	r0, #0
 80184e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80184e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80184e6:	2e00      	cmp	r6, #0
 80184e8:	d0f9      	beq.n	80184de <__sflush_r+0x1a>
 80184ea:	2300      	movs	r3, #0
 80184ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80184f0:	682f      	ldr	r7, [r5, #0]
 80184f2:	6a21      	ldr	r1, [r4, #32]
 80184f4:	602b      	str	r3, [r5, #0]
 80184f6:	d032      	beq.n	801855e <__sflush_r+0x9a>
 80184f8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80184fa:	89a3      	ldrh	r3, [r4, #12]
 80184fc:	075a      	lsls	r2, r3, #29
 80184fe:	d505      	bpl.n	801850c <__sflush_r+0x48>
 8018500:	6863      	ldr	r3, [r4, #4]
 8018502:	1ac0      	subs	r0, r0, r3
 8018504:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018506:	b10b      	cbz	r3, 801850c <__sflush_r+0x48>
 8018508:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801850a:	1ac0      	subs	r0, r0, r3
 801850c:	2300      	movs	r3, #0
 801850e:	4602      	mov	r2, r0
 8018510:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018512:	6a21      	ldr	r1, [r4, #32]
 8018514:	4628      	mov	r0, r5
 8018516:	47b0      	blx	r6
 8018518:	1c43      	adds	r3, r0, #1
 801851a:	89a3      	ldrh	r3, [r4, #12]
 801851c:	d106      	bne.n	801852c <__sflush_r+0x68>
 801851e:	6829      	ldr	r1, [r5, #0]
 8018520:	291d      	cmp	r1, #29
 8018522:	d82b      	bhi.n	801857c <__sflush_r+0xb8>
 8018524:	4a29      	ldr	r2, [pc, #164]	; (80185cc <__sflush_r+0x108>)
 8018526:	410a      	asrs	r2, r1
 8018528:	07d6      	lsls	r6, r2, #31
 801852a:	d427      	bmi.n	801857c <__sflush_r+0xb8>
 801852c:	2200      	movs	r2, #0
 801852e:	6062      	str	r2, [r4, #4]
 8018530:	04d9      	lsls	r1, r3, #19
 8018532:	6922      	ldr	r2, [r4, #16]
 8018534:	6022      	str	r2, [r4, #0]
 8018536:	d504      	bpl.n	8018542 <__sflush_r+0x7e>
 8018538:	1c42      	adds	r2, r0, #1
 801853a:	d101      	bne.n	8018540 <__sflush_r+0x7c>
 801853c:	682b      	ldr	r3, [r5, #0]
 801853e:	b903      	cbnz	r3, 8018542 <__sflush_r+0x7e>
 8018540:	6560      	str	r0, [r4, #84]	; 0x54
 8018542:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018544:	602f      	str	r7, [r5, #0]
 8018546:	2900      	cmp	r1, #0
 8018548:	d0c9      	beq.n	80184de <__sflush_r+0x1a>
 801854a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801854e:	4299      	cmp	r1, r3
 8018550:	d002      	beq.n	8018558 <__sflush_r+0x94>
 8018552:	4628      	mov	r0, r5
 8018554:	f7ff f9e2 	bl	801791c <_free_r>
 8018558:	2000      	movs	r0, #0
 801855a:	6360      	str	r0, [r4, #52]	; 0x34
 801855c:	e7c0      	b.n	80184e0 <__sflush_r+0x1c>
 801855e:	2301      	movs	r3, #1
 8018560:	4628      	mov	r0, r5
 8018562:	47b0      	blx	r6
 8018564:	1c41      	adds	r1, r0, #1
 8018566:	d1c8      	bne.n	80184fa <__sflush_r+0x36>
 8018568:	682b      	ldr	r3, [r5, #0]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d0c5      	beq.n	80184fa <__sflush_r+0x36>
 801856e:	2b1d      	cmp	r3, #29
 8018570:	d001      	beq.n	8018576 <__sflush_r+0xb2>
 8018572:	2b16      	cmp	r3, #22
 8018574:	d101      	bne.n	801857a <__sflush_r+0xb6>
 8018576:	602f      	str	r7, [r5, #0]
 8018578:	e7b1      	b.n	80184de <__sflush_r+0x1a>
 801857a:	89a3      	ldrh	r3, [r4, #12]
 801857c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018580:	81a3      	strh	r3, [r4, #12]
 8018582:	e7ad      	b.n	80184e0 <__sflush_r+0x1c>
 8018584:	690f      	ldr	r7, [r1, #16]
 8018586:	2f00      	cmp	r7, #0
 8018588:	d0a9      	beq.n	80184de <__sflush_r+0x1a>
 801858a:	0793      	lsls	r3, r2, #30
 801858c:	680e      	ldr	r6, [r1, #0]
 801858e:	bf08      	it	eq
 8018590:	694b      	ldreq	r3, [r1, #20]
 8018592:	600f      	str	r7, [r1, #0]
 8018594:	bf18      	it	ne
 8018596:	2300      	movne	r3, #0
 8018598:	eba6 0807 	sub.w	r8, r6, r7
 801859c:	608b      	str	r3, [r1, #8]
 801859e:	f1b8 0f00 	cmp.w	r8, #0
 80185a2:	dd9c      	ble.n	80184de <__sflush_r+0x1a>
 80185a4:	6a21      	ldr	r1, [r4, #32]
 80185a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80185a8:	4643      	mov	r3, r8
 80185aa:	463a      	mov	r2, r7
 80185ac:	4628      	mov	r0, r5
 80185ae:	47b0      	blx	r6
 80185b0:	2800      	cmp	r0, #0
 80185b2:	dc06      	bgt.n	80185c2 <__sflush_r+0xfe>
 80185b4:	89a3      	ldrh	r3, [r4, #12]
 80185b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80185ba:	81a3      	strh	r3, [r4, #12]
 80185bc:	f04f 30ff 	mov.w	r0, #4294967295
 80185c0:	e78e      	b.n	80184e0 <__sflush_r+0x1c>
 80185c2:	4407      	add	r7, r0
 80185c4:	eba8 0800 	sub.w	r8, r8, r0
 80185c8:	e7e9      	b.n	801859e <__sflush_r+0xda>
 80185ca:	bf00      	nop
 80185cc:	dfbffffe 	.word	0xdfbffffe

080185d0 <_fflush_r>:
 80185d0:	b538      	push	{r3, r4, r5, lr}
 80185d2:	690b      	ldr	r3, [r1, #16]
 80185d4:	4605      	mov	r5, r0
 80185d6:	460c      	mov	r4, r1
 80185d8:	b913      	cbnz	r3, 80185e0 <_fflush_r+0x10>
 80185da:	2500      	movs	r5, #0
 80185dc:	4628      	mov	r0, r5
 80185de:	bd38      	pop	{r3, r4, r5, pc}
 80185e0:	b118      	cbz	r0, 80185ea <_fflush_r+0x1a>
 80185e2:	6a03      	ldr	r3, [r0, #32]
 80185e4:	b90b      	cbnz	r3, 80185ea <_fflush_r+0x1a>
 80185e6:	f7fe fa03 	bl	80169f0 <__sinit>
 80185ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d0f3      	beq.n	80185da <_fflush_r+0xa>
 80185f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80185f4:	07d0      	lsls	r0, r2, #31
 80185f6:	d404      	bmi.n	8018602 <_fflush_r+0x32>
 80185f8:	0599      	lsls	r1, r3, #22
 80185fa:	d402      	bmi.n	8018602 <_fflush_r+0x32>
 80185fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80185fe:	f7fe fb0e 	bl	8016c1e <__retarget_lock_acquire_recursive>
 8018602:	4628      	mov	r0, r5
 8018604:	4621      	mov	r1, r4
 8018606:	f7ff ff5d 	bl	80184c4 <__sflush_r>
 801860a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801860c:	07da      	lsls	r2, r3, #31
 801860e:	4605      	mov	r5, r0
 8018610:	d4e4      	bmi.n	80185dc <_fflush_r+0xc>
 8018612:	89a3      	ldrh	r3, [r4, #12]
 8018614:	059b      	lsls	r3, r3, #22
 8018616:	d4e1      	bmi.n	80185dc <_fflush_r+0xc>
 8018618:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801861a:	f7fe fb01 	bl	8016c20 <__retarget_lock_release_recursive>
 801861e:	e7dd      	b.n	80185dc <_fflush_r+0xc>

08018620 <memmove>:
 8018620:	4288      	cmp	r0, r1
 8018622:	b510      	push	{r4, lr}
 8018624:	eb01 0402 	add.w	r4, r1, r2
 8018628:	d902      	bls.n	8018630 <memmove+0x10>
 801862a:	4284      	cmp	r4, r0
 801862c:	4623      	mov	r3, r4
 801862e:	d807      	bhi.n	8018640 <memmove+0x20>
 8018630:	1e43      	subs	r3, r0, #1
 8018632:	42a1      	cmp	r1, r4
 8018634:	d008      	beq.n	8018648 <memmove+0x28>
 8018636:	f811 2b01 	ldrb.w	r2, [r1], #1
 801863a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801863e:	e7f8      	b.n	8018632 <memmove+0x12>
 8018640:	4402      	add	r2, r0
 8018642:	4601      	mov	r1, r0
 8018644:	428a      	cmp	r2, r1
 8018646:	d100      	bne.n	801864a <memmove+0x2a>
 8018648:	bd10      	pop	{r4, pc}
 801864a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801864e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018652:	e7f7      	b.n	8018644 <memmove+0x24>

08018654 <_sbrk_r>:
 8018654:	b538      	push	{r3, r4, r5, lr}
 8018656:	4d06      	ldr	r5, [pc, #24]	; (8018670 <_sbrk_r+0x1c>)
 8018658:	2300      	movs	r3, #0
 801865a:	4604      	mov	r4, r0
 801865c:	4608      	mov	r0, r1
 801865e:	602b      	str	r3, [r5, #0]
 8018660:	f7ec fdcc 	bl	80051fc <_sbrk>
 8018664:	1c43      	adds	r3, r0, #1
 8018666:	d102      	bne.n	801866e <_sbrk_r+0x1a>
 8018668:	682b      	ldr	r3, [r5, #0]
 801866a:	b103      	cbz	r3, 801866e <_sbrk_r+0x1a>
 801866c:	6023      	str	r3, [r4, #0]
 801866e:	bd38      	pop	{r3, r4, r5, pc}
 8018670:	20003000 	.word	0x20003000

08018674 <memcpy>:
 8018674:	440a      	add	r2, r1
 8018676:	4291      	cmp	r1, r2
 8018678:	f100 33ff 	add.w	r3, r0, #4294967295
 801867c:	d100      	bne.n	8018680 <memcpy+0xc>
 801867e:	4770      	bx	lr
 8018680:	b510      	push	{r4, lr}
 8018682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018686:	f803 4f01 	strb.w	r4, [r3, #1]!
 801868a:	4291      	cmp	r1, r2
 801868c:	d1f9      	bne.n	8018682 <memcpy+0xe>
 801868e:	bd10      	pop	{r4, pc}

08018690 <__assert_func>:
 8018690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018692:	4614      	mov	r4, r2
 8018694:	461a      	mov	r2, r3
 8018696:	4b09      	ldr	r3, [pc, #36]	; (80186bc <__assert_func+0x2c>)
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	4605      	mov	r5, r0
 801869c:	68d8      	ldr	r0, [r3, #12]
 801869e:	b14c      	cbz	r4, 80186b4 <__assert_func+0x24>
 80186a0:	4b07      	ldr	r3, [pc, #28]	; (80186c0 <__assert_func+0x30>)
 80186a2:	9100      	str	r1, [sp, #0]
 80186a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80186a8:	4906      	ldr	r1, [pc, #24]	; (80186c4 <__assert_func+0x34>)
 80186aa:	462b      	mov	r3, r5
 80186ac:	f000 f872 	bl	8018794 <fiprintf>
 80186b0:	f000 f882 	bl	80187b8 <abort>
 80186b4:	4b04      	ldr	r3, [pc, #16]	; (80186c8 <__assert_func+0x38>)
 80186b6:	461c      	mov	r4, r3
 80186b8:	e7f3      	b.n	80186a2 <__assert_func+0x12>
 80186ba:	bf00      	nop
 80186bc:	2000039c 	.word	0x2000039c
 80186c0:	0801bb97 	.word	0x0801bb97
 80186c4:	0801bba4 	.word	0x0801bba4
 80186c8:	0801bbd2 	.word	0x0801bbd2

080186cc <_calloc_r>:
 80186cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80186ce:	fba1 2402 	umull	r2, r4, r1, r2
 80186d2:	b94c      	cbnz	r4, 80186e8 <_calloc_r+0x1c>
 80186d4:	4611      	mov	r1, r2
 80186d6:	9201      	str	r2, [sp, #4]
 80186d8:	f7ff f994 	bl	8017a04 <_malloc_r>
 80186dc:	9a01      	ldr	r2, [sp, #4]
 80186de:	4605      	mov	r5, r0
 80186e0:	b930      	cbnz	r0, 80186f0 <_calloc_r+0x24>
 80186e2:	4628      	mov	r0, r5
 80186e4:	b003      	add	sp, #12
 80186e6:	bd30      	pop	{r4, r5, pc}
 80186e8:	220c      	movs	r2, #12
 80186ea:	6002      	str	r2, [r0, #0]
 80186ec:	2500      	movs	r5, #0
 80186ee:	e7f8      	b.n	80186e2 <_calloc_r+0x16>
 80186f0:	4621      	mov	r1, r4
 80186f2:	f7fe fa16 	bl	8016b22 <memset>
 80186f6:	e7f4      	b.n	80186e2 <_calloc_r+0x16>

080186f8 <__ascii_mbtowc>:
 80186f8:	b082      	sub	sp, #8
 80186fa:	b901      	cbnz	r1, 80186fe <__ascii_mbtowc+0x6>
 80186fc:	a901      	add	r1, sp, #4
 80186fe:	b142      	cbz	r2, 8018712 <__ascii_mbtowc+0x1a>
 8018700:	b14b      	cbz	r3, 8018716 <__ascii_mbtowc+0x1e>
 8018702:	7813      	ldrb	r3, [r2, #0]
 8018704:	600b      	str	r3, [r1, #0]
 8018706:	7812      	ldrb	r2, [r2, #0]
 8018708:	1e10      	subs	r0, r2, #0
 801870a:	bf18      	it	ne
 801870c:	2001      	movne	r0, #1
 801870e:	b002      	add	sp, #8
 8018710:	4770      	bx	lr
 8018712:	4610      	mov	r0, r2
 8018714:	e7fb      	b.n	801870e <__ascii_mbtowc+0x16>
 8018716:	f06f 0001 	mvn.w	r0, #1
 801871a:	e7f8      	b.n	801870e <__ascii_mbtowc+0x16>

0801871c <_realloc_r>:
 801871c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018720:	4680      	mov	r8, r0
 8018722:	4614      	mov	r4, r2
 8018724:	460e      	mov	r6, r1
 8018726:	b921      	cbnz	r1, 8018732 <_realloc_r+0x16>
 8018728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801872c:	4611      	mov	r1, r2
 801872e:	f7ff b969 	b.w	8017a04 <_malloc_r>
 8018732:	b92a      	cbnz	r2, 8018740 <_realloc_r+0x24>
 8018734:	f7ff f8f2 	bl	801791c <_free_r>
 8018738:	4625      	mov	r5, r4
 801873a:	4628      	mov	r0, r5
 801873c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018740:	f000 f841 	bl	80187c6 <_malloc_usable_size_r>
 8018744:	4284      	cmp	r4, r0
 8018746:	4607      	mov	r7, r0
 8018748:	d802      	bhi.n	8018750 <_realloc_r+0x34>
 801874a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801874e:	d812      	bhi.n	8018776 <_realloc_r+0x5a>
 8018750:	4621      	mov	r1, r4
 8018752:	4640      	mov	r0, r8
 8018754:	f7ff f956 	bl	8017a04 <_malloc_r>
 8018758:	4605      	mov	r5, r0
 801875a:	2800      	cmp	r0, #0
 801875c:	d0ed      	beq.n	801873a <_realloc_r+0x1e>
 801875e:	42bc      	cmp	r4, r7
 8018760:	4622      	mov	r2, r4
 8018762:	4631      	mov	r1, r6
 8018764:	bf28      	it	cs
 8018766:	463a      	movcs	r2, r7
 8018768:	f7ff ff84 	bl	8018674 <memcpy>
 801876c:	4631      	mov	r1, r6
 801876e:	4640      	mov	r0, r8
 8018770:	f7ff f8d4 	bl	801791c <_free_r>
 8018774:	e7e1      	b.n	801873a <_realloc_r+0x1e>
 8018776:	4635      	mov	r5, r6
 8018778:	e7df      	b.n	801873a <_realloc_r+0x1e>

0801877a <__ascii_wctomb>:
 801877a:	b149      	cbz	r1, 8018790 <__ascii_wctomb+0x16>
 801877c:	2aff      	cmp	r2, #255	; 0xff
 801877e:	bf85      	ittet	hi
 8018780:	238a      	movhi	r3, #138	; 0x8a
 8018782:	6003      	strhi	r3, [r0, #0]
 8018784:	700a      	strbls	r2, [r1, #0]
 8018786:	f04f 30ff 	movhi.w	r0, #4294967295
 801878a:	bf98      	it	ls
 801878c:	2001      	movls	r0, #1
 801878e:	4770      	bx	lr
 8018790:	4608      	mov	r0, r1
 8018792:	4770      	bx	lr

08018794 <fiprintf>:
 8018794:	b40e      	push	{r1, r2, r3}
 8018796:	b503      	push	{r0, r1, lr}
 8018798:	4601      	mov	r1, r0
 801879a:	ab03      	add	r3, sp, #12
 801879c:	4805      	ldr	r0, [pc, #20]	; (80187b4 <fiprintf+0x20>)
 801879e:	f853 2b04 	ldr.w	r2, [r3], #4
 80187a2:	6800      	ldr	r0, [r0, #0]
 80187a4:	9301      	str	r3, [sp, #4]
 80187a6:	f000 f83f 	bl	8018828 <_vfiprintf_r>
 80187aa:	b002      	add	sp, #8
 80187ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80187b0:	b003      	add	sp, #12
 80187b2:	4770      	bx	lr
 80187b4:	2000039c 	.word	0x2000039c

080187b8 <abort>:
 80187b8:	b508      	push	{r3, lr}
 80187ba:	2006      	movs	r0, #6
 80187bc:	f000 fa0c 	bl	8018bd8 <raise>
 80187c0:	2001      	movs	r0, #1
 80187c2:	f7ec fca3 	bl	800510c <_exit>

080187c6 <_malloc_usable_size_r>:
 80187c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80187ca:	1f18      	subs	r0, r3, #4
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	bfbc      	itt	lt
 80187d0:	580b      	ldrlt	r3, [r1, r0]
 80187d2:	18c0      	addlt	r0, r0, r3
 80187d4:	4770      	bx	lr

080187d6 <__sfputc_r>:
 80187d6:	6893      	ldr	r3, [r2, #8]
 80187d8:	3b01      	subs	r3, #1
 80187da:	2b00      	cmp	r3, #0
 80187dc:	b410      	push	{r4}
 80187de:	6093      	str	r3, [r2, #8]
 80187e0:	da08      	bge.n	80187f4 <__sfputc_r+0x1e>
 80187e2:	6994      	ldr	r4, [r2, #24]
 80187e4:	42a3      	cmp	r3, r4
 80187e6:	db01      	blt.n	80187ec <__sfputc_r+0x16>
 80187e8:	290a      	cmp	r1, #10
 80187ea:	d103      	bne.n	80187f4 <__sfputc_r+0x1e>
 80187ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187f0:	f000 b934 	b.w	8018a5c <__swbuf_r>
 80187f4:	6813      	ldr	r3, [r2, #0]
 80187f6:	1c58      	adds	r0, r3, #1
 80187f8:	6010      	str	r0, [r2, #0]
 80187fa:	7019      	strb	r1, [r3, #0]
 80187fc:	4608      	mov	r0, r1
 80187fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018802:	4770      	bx	lr

08018804 <__sfputs_r>:
 8018804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018806:	4606      	mov	r6, r0
 8018808:	460f      	mov	r7, r1
 801880a:	4614      	mov	r4, r2
 801880c:	18d5      	adds	r5, r2, r3
 801880e:	42ac      	cmp	r4, r5
 8018810:	d101      	bne.n	8018816 <__sfputs_r+0x12>
 8018812:	2000      	movs	r0, #0
 8018814:	e007      	b.n	8018826 <__sfputs_r+0x22>
 8018816:	f814 1b01 	ldrb.w	r1, [r4], #1
 801881a:	463a      	mov	r2, r7
 801881c:	4630      	mov	r0, r6
 801881e:	f7ff ffda 	bl	80187d6 <__sfputc_r>
 8018822:	1c43      	adds	r3, r0, #1
 8018824:	d1f3      	bne.n	801880e <__sfputs_r+0xa>
 8018826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018828 <_vfiprintf_r>:
 8018828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801882c:	460d      	mov	r5, r1
 801882e:	b09d      	sub	sp, #116	; 0x74
 8018830:	4614      	mov	r4, r2
 8018832:	4698      	mov	r8, r3
 8018834:	4606      	mov	r6, r0
 8018836:	b118      	cbz	r0, 8018840 <_vfiprintf_r+0x18>
 8018838:	6a03      	ldr	r3, [r0, #32]
 801883a:	b90b      	cbnz	r3, 8018840 <_vfiprintf_r+0x18>
 801883c:	f7fe f8d8 	bl	80169f0 <__sinit>
 8018840:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018842:	07d9      	lsls	r1, r3, #31
 8018844:	d405      	bmi.n	8018852 <_vfiprintf_r+0x2a>
 8018846:	89ab      	ldrh	r3, [r5, #12]
 8018848:	059a      	lsls	r2, r3, #22
 801884a:	d402      	bmi.n	8018852 <_vfiprintf_r+0x2a>
 801884c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801884e:	f7fe f9e6 	bl	8016c1e <__retarget_lock_acquire_recursive>
 8018852:	89ab      	ldrh	r3, [r5, #12]
 8018854:	071b      	lsls	r3, r3, #28
 8018856:	d501      	bpl.n	801885c <_vfiprintf_r+0x34>
 8018858:	692b      	ldr	r3, [r5, #16]
 801885a:	b99b      	cbnz	r3, 8018884 <_vfiprintf_r+0x5c>
 801885c:	4629      	mov	r1, r5
 801885e:	4630      	mov	r0, r6
 8018860:	f000 f93a 	bl	8018ad8 <__swsetup_r>
 8018864:	b170      	cbz	r0, 8018884 <_vfiprintf_r+0x5c>
 8018866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018868:	07dc      	lsls	r4, r3, #31
 801886a:	d504      	bpl.n	8018876 <_vfiprintf_r+0x4e>
 801886c:	f04f 30ff 	mov.w	r0, #4294967295
 8018870:	b01d      	add	sp, #116	; 0x74
 8018872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018876:	89ab      	ldrh	r3, [r5, #12]
 8018878:	0598      	lsls	r0, r3, #22
 801887a:	d4f7      	bmi.n	801886c <_vfiprintf_r+0x44>
 801887c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801887e:	f7fe f9cf 	bl	8016c20 <__retarget_lock_release_recursive>
 8018882:	e7f3      	b.n	801886c <_vfiprintf_r+0x44>
 8018884:	2300      	movs	r3, #0
 8018886:	9309      	str	r3, [sp, #36]	; 0x24
 8018888:	2320      	movs	r3, #32
 801888a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801888e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018892:	2330      	movs	r3, #48	; 0x30
 8018894:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8018a48 <_vfiprintf_r+0x220>
 8018898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801889c:	f04f 0901 	mov.w	r9, #1
 80188a0:	4623      	mov	r3, r4
 80188a2:	469a      	mov	sl, r3
 80188a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80188a8:	b10a      	cbz	r2, 80188ae <_vfiprintf_r+0x86>
 80188aa:	2a25      	cmp	r2, #37	; 0x25
 80188ac:	d1f9      	bne.n	80188a2 <_vfiprintf_r+0x7a>
 80188ae:	ebba 0b04 	subs.w	fp, sl, r4
 80188b2:	d00b      	beq.n	80188cc <_vfiprintf_r+0xa4>
 80188b4:	465b      	mov	r3, fp
 80188b6:	4622      	mov	r2, r4
 80188b8:	4629      	mov	r1, r5
 80188ba:	4630      	mov	r0, r6
 80188bc:	f7ff ffa2 	bl	8018804 <__sfputs_r>
 80188c0:	3001      	adds	r0, #1
 80188c2:	f000 80a9 	beq.w	8018a18 <_vfiprintf_r+0x1f0>
 80188c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80188c8:	445a      	add	r2, fp
 80188ca:	9209      	str	r2, [sp, #36]	; 0x24
 80188cc:	f89a 3000 	ldrb.w	r3, [sl]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	f000 80a1 	beq.w	8018a18 <_vfiprintf_r+0x1f0>
 80188d6:	2300      	movs	r3, #0
 80188d8:	f04f 32ff 	mov.w	r2, #4294967295
 80188dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80188e0:	f10a 0a01 	add.w	sl, sl, #1
 80188e4:	9304      	str	r3, [sp, #16]
 80188e6:	9307      	str	r3, [sp, #28]
 80188e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80188ec:	931a      	str	r3, [sp, #104]	; 0x68
 80188ee:	4654      	mov	r4, sl
 80188f0:	2205      	movs	r2, #5
 80188f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188f6:	4854      	ldr	r0, [pc, #336]	; (8018a48 <_vfiprintf_r+0x220>)
 80188f8:	f7e7 fc92 	bl	8000220 <memchr>
 80188fc:	9a04      	ldr	r2, [sp, #16]
 80188fe:	b9d8      	cbnz	r0, 8018938 <_vfiprintf_r+0x110>
 8018900:	06d1      	lsls	r1, r2, #27
 8018902:	bf44      	itt	mi
 8018904:	2320      	movmi	r3, #32
 8018906:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801890a:	0713      	lsls	r3, r2, #28
 801890c:	bf44      	itt	mi
 801890e:	232b      	movmi	r3, #43	; 0x2b
 8018910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018914:	f89a 3000 	ldrb.w	r3, [sl]
 8018918:	2b2a      	cmp	r3, #42	; 0x2a
 801891a:	d015      	beq.n	8018948 <_vfiprintf_r+0x120>
 801891c:	9a07      	ldr	r2, [sp, #28]
 801891e:	4654      	mov	r4, sl
 8018920:	2000      	movs	r0, #0
 8018922:	f04f 0c0a 	mov.w	ip, #10
 8018926:	4621      	mov	r1, r4
 8018928:	f811 3b01 	ldrb.w	r3, [r1], #1
 801892c:	3b30      	subs	r3, #48	; 0x30
 801892e:	2b09      	cmp	r3, #9
 8018930:	d94d      	bls.n	80189ce <_vfiprintf_r+0x1a6>
 8018932:	b1b0      	cbz	r0, 8018962 <_vfiprintf_r+0x13a>
 8018934:	9207      	str	r2, [sp, #28]
 8018936:	e014      	b.n	8018962 <_vfiprintf_r+0x13a>
 8018938:	eba0 0308 	sub.w	r3, r0, r8
 801893c:	fa09 f303 	lsl.w	r3, r9, r3
 8018940:	4313      	orrs	r3, r2
 8018942:	9304      	str	r3, [sp, #16]
 8018944:	46a2      	mov	sl, r4
 8018946:	e7d2      	b.n	80188ee <_vfiprintf_r+0xc6>
 8018948:	9b03      	ldr	r3, [sp, #12]
 801894a:	1d19      	adds	r1, r3, #4
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	9103      	str	r1, [sp, #12]
 8018950:	2b00      	cmp	r3, #0
 8018952:	bfbb      	ittet	lt
 8018954:	425b      	neglt	r3, r3
 8018956:	f042 0202 	orrlt.w	r2, r2, #2
 801895a:	9307      	strge	r3, [sp, #28]
 801895c:	9307      	strlt	r3, [sp, #28]
 801895e:	bfb8      	it	lt
 8018960:	9204      	strlt	r2, [sp, #16]
 8018962:	7823      	ldrb	r3, [r4, #0]
 8018964:	2b2e      	cmp	r3, #46	; 0x2e
 8018966:	d10c      	bne.n	8018982 <_vfiprintf_r+0x15a>
 8018968:	7863      	ldrb	r3, [r4, #1]
 801896a:	2b2a      	cmp	r3, #42	; 0x2a
 801896c:	d134      	bne.n	80189d8 <_vfiprintf_r+0x1b0>
 801896e:	9b03      	ldr	r3, [sp, #12]
 8018970:	1d1a      	adds	r2, r3, #4
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	9203      	str	r2, [sp, #12]
 8018976:	2b00      	cmp	r3, #0
 8018978:	bfb8      	it	lt
 801897a:	f04f 33ff 	movlt.w	r3, #4294967295
 801897e:	3402      	adds	r4, #2
 8018980:	9305      	str	r3, [sp, #20]
 8018982:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8018a58 <_vfiprintf_r+0x230>
 8018986:	7821      	ldrb	r1, [r4, #0]
 8018988:	2203      	movs	r2, #3
 801898a:	4650      	mov	r0, sl
 801898c:	f7e7 fc48 	bl	8000220 <memchr>
 8018990:	b138      	cbz	r0, 80189a2 <_vfiprintf_r+0x17a>
 8018992:	9b04      	ldr	r3, [sp, #16]
 8018994:	eba0 000a 	sub.w	r0, r0, sl
 8018998:	2240      	movs	r2, #64	; 0x40
 801899a:	4082      	lsls	r2, r0
 801899c:	4313      	orrs	r3, r2
 801899e:	3401      	adds	r4, #1
 80189a0:	9304      	str	r3, [sp, #16]
 80189a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80189a6:	4829      	ldr	r0, [pc, #164]	; (8018a4c <_vfiprintf_r+0x224>)
 80189a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80189ac:	2206      	movs	r2, #6
 80189ae:	f7e7 fc37 	bl	8000220 <memchr>
 80189b2:	2800      	cmp	r0, #0
 80189b4:	d03f      	beq.n	8018a36 <_vfiprintf_r+0x20e>
 80189b6:	4b26      	ldr	r3, [pc, #152]	; (8018a50 <_vfiprintf_r+0x228>)
 80189b8:	bb1b      	cbnz	r3, 8018a02 <_vfiprintf_r+0x1da>
 80189ba:	9b03      	ldr	r3, [sp, #12]
 80189bc:	3307      	adds	r3, #7
 80189be:	f023 0307 	bic.w	r3, r3, #7
 80189c2:	3308      	adds	r3, #8
 80189c4:	9303      	str	r3, [sp, #12]
 80189c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189c8:	443b      	add	r3, r7
 80189ca:	9309      	str	r3, [sp, #36]	; 0x24
 80189cc:	e768      	b.n	80188a0 <_vfiprintf_r+0x78>
 80189ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80189d2:	460c      	mov	r4, r1
 80189d4:	2001      	movs	r0, #1
 80189d6:	e7a6      	b.n	8018926 <_vfiprintf_r+0xfe>
 80189d8:	2300      	movs	r3, #0
 80189da:	3401      	adds	r4, #1
 80189dc:	9305      	str	r3, [sp, #20]
 80189de:	4619      	mov	r1, r3
 80189e0:	f04f 0c0a 	mov.w	ip, #10
 80189e4:	4620      	mov	r0, r4
 80189e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80189ea:	3a30      	subs	r2, #48	; 0x30
 80189ec:	2a09      	cmp	r2, #9
 80189ee:	d903      	bls.n	80189f8 <_vfiprintf_r+0x1d0>
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d0c6      	beq.n	8018982 <_vfiprintf_r+0x15a>
 80189f4:	9105      	str	r1, [sp, #20]
 80189f6:	e7c4      	b.n	8018982 <_vfiprintf_r+0x15a>
 80189f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80189fc:	4604      	mov	r4, r0
 80189fe:	2301      	movs	r3, #1
 8018a00:	e7f0      	b.n	80189e4 <_vfiprintf_r+0x1bc>
 8018a02:	ab03      	add	r3, sp, #12
 8018a04:	9300      	str	r3, [sp, #0]
 8018a06:	462a      	mov	r2, r5
 8018a08:	4b12      	ldr	r3, [pc, #72]	; (8018a54 <_vfiprintf_r+0x22c>)
 8018a0a:	a904      	add	r1, sp, #16
 8018a0c:	4630      	mov	r0, r6
 8018a0e:	f7fd fb9d 	bl	801614c <_printf_float>
 8018a12:	4607      	mov	r7, r0
 8018a14:	1c78      	adds	r0, r7, #1
 8018a16:	d1d6      	bne.n	80189c6 <_vfiprintf_r+0x19e>
 8018a18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018a1a:	07d9      	lsls	r1, r3, #31
 8018a1c:	d405      	bmi.n	8018a2a <_vfiprintf_r+0x202>
 8018a1e:	89ab      	ldrh	r3, [r5, #12]
 8018a20:	059a      	lsls	r2, r3, #22
 8018a22:	d402      	bmi.n	8018a2a <_vfiprintf_r+0x202>
 8018a24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018a26:	f7fe f8fb 	bl	8016c20 <__retarget_lock_release_recursive>
 8018a2a:	89ab      	ldrh	r3, [r5, #12]
 8018a2c:	065b      	lsls	r3, r3, #25
 8018a2e:	f53f af1d 	bmi.w	801886c <_vfiprintf_r+0x44>
 8018a32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a34:	e71c      	b.n	8018870 <_vfiprintf_r+0x48>
 8018a36:	ab03      	add	r3, sp, #12
 8018a38:	9300      	str	r3, [sp, #0]
 8018a3a:	462a      	mov	r2, r5
 8018a3c:	4b05      	ldr	r3, [pc, #20]	; (8018a54 <_vfiprintf_r+0x22c>)
 8018a3e:	a904      	add	r1, sp, #16
 8018a40:	4630      	mov	r0, r6
 8018a42:	f7fd fe27 	bl	8016694 <_printf_i>
 8018a46:	e7e4      	b.n	8018a12 <_vfiprintf_r+0x1ea>
 8018a48:	0801bb7c 	.word	0x0801bb7c
 8018a4c:	0801bb86 	.word	0x0801bb86
 8018a50:	0801614d 	.word	0x0801614d
 8018a54:	08018805 	.word	0x08018805
 8018a58:	0801bb82 	.word	0x0801bb82

08018a5c <__swbuf_r>:
 8018a5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a5e:	460e      	mov	r6, r1
 8018a60:	4614      	mov	r4, r2
 8018a62:	4605      	mov	r5, r0
 8018a64:	b118      	cbz	r0, 8018a6e <__swbuf_r+0x12>
 8018a66:	6a03      	ldr	r3, [r0, #32]
 8018a68:	b90b      	cbnz	r3, 8018a6e <__swbuf_r+0x12>
 8018a6a:	f7fd ffc1 	bl	80169f0 <__sinit>
 8018a6e:	69a3      	ldr	r3, [r4, #24]
 8018a70:	60a3      	str	r3, [r4, #8]
 8018a72:	89a3      	ldrh	r3, [r4, #12]
 8018a74:	071a      	lsls	r2, r3, #28
 8018a76:	d525      	bpl.n	8018ac4 <__swbuf_r+0x68>
 8018a78:	6923      	ldr	r3, [r4, #16]
 8018a7a:	b31b      	cbz	r3, 8018ac4 <__swbuf_r+0x68>
 8018a7c:	6823      	ldr	r3, [r4, #0]
 8018a7e:	6922      	ldr	r2, [r4, #16]
 8018a80:	1a98      	subs	r0, r3, r2
 8018a82:	6963      	ldr	r3, [r4, #20]
 8018a84:	b2f6      	uxtb	r6, r6
 8018a86:	4283      	cmp	r3, r0
 8018a88:	4637      	mov	r7, r6
 8018a8a:	dc04      	bgt.n	8018a96 <__swbuf_r+0x3a>
 8018a8c:	4621      	mov	r1, r4
 8018a8e:	4628      	mov	r0, r5
 8018a90:	f7ff fd9e 	bl	80185d0 <_fflush_r>
 8018a94:	b9e0      	cbnz	r0, 8018ad0 <__swbuf_r+0x74>
 8018a96:	68a3      	ldr	r3, [r4, #8]
 8018a98:	3b01      	subs	r3, #1
 8018a9a:	60a3      	str	r3, [r4, #8]
 8018a9c:	6823      	ldr	r3, [r4, #0]
 8018a9e:	1c5a      	adds	r2, r3, #1
 8018aa0:	6022      	str	r2, [r4, #0]
 8018aa2:	701e      	strb	r6, [r3, #0]
 8018aa4:	6962      	ldr	r2, [r4, #20]
 8018aa6:	1c43      	adds	r3, r0, #1
 8018aa8:	429a      	cmp	r2, r3
 8018aaa:	d004      	beq.n	8018ab6 <__swbuf_r+0x5a>
 8018aac:	89a3      	ldrh	r3, [r4, #12]
 8018aae:	07db      	lsls	r3, r3, #31
 8018ab0:	d506      	bpl.n	8018ac0 <__swbuf_r+0x64>
 8018ab2:	2e0a      	cmp	r6, #10
 8018ab4:	d104      	bne.n	8018ac0 <__swbuf_r+0x64>
 8018ab6:	4621      	mov	r1, r4
 8018ab8:	4628      	mov	r0, r5
 8018aba:	f7ff fd89 	bl	80185d0 <_fflush_r>
 8018abe:	b938      	cbnz	r0, 8018ad0 <__swbuf_r+0x74>
 8018ac0:	4638      	mov	r0, r7
 8018ac2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018ac4:	4621      	mov	r1, r4
 8018ac6:	4628      	mov	r0, r5
 8018ac8:	f000 f806 	bl	8018ad8 <__swsetup_r>
 8018acc:	2800      	cmp	r0, #0
 8018ace:	d0d5      	beq.n	8018a7c <__swbuf_r+0x20>
 8018ad0:	f04f 37ff 	mov.w	r7, #4294967295
 8018ad4:	e7f4      	b.n	8018ac0 <__swbuf_r+0x64>
	...

08018ad8 <__swsetup_r>:
 8018ad8:	b538      	push	{r3, r4, r5, lr}
 8018ada:	4b2a      	ldr	r3, [pc, #168]	; (8018b84 <__swsetup_r+0xac>)
 8018adc:	4605      	mov	r5, r0
 8018ade:	6818      	ldr	r0, [r3, #0]
 8018ae0:	460c      	mov	r4, r1
 8018ae2:	b118      	cbz	r0, 8018aec <__swsetup_r+0x14>
 8018ae4:	6a03      	ldr	r3, [r0, #32]
 8018ae6:	b90b      	cbnz	r3, 8018aec <__swsetup_r+0x14>
 8018ae8:	f7fd ff82 	bl	80169f0 <__sinit>
 8018aec:	89a3      	ldrh	r3, [r4, #12]
 8018aee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018af2:	0718      	lsls	r0, r3, #28
 8018af4:	d422      	bmi.n	8018b3c <__swsetup_r+0x64>
 8018af6:	06d9      	lsls	r1, r3, #27
 8018af8:	d407      	bmi.n	8018b0a <__swsetup_r+0x32>
 8018afa:	2309      	movs	r3, #9
 8018afc:	602b      	str	r3, [r5, #0]
 8018afe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018b02:	81a3      	strh	r3, [r4, #12]
 8018b04:	f04f 30ff 	mov.w	r0, #4294967295
 8018b08:	e034      	b.n	8018b74 <__swsetup_r+0x9c>
 8018b0a:	0758      	lsls	r0, r3, #29
 8018b0c:	d512      	bpl.n	8018b34 <__swsetup_r+0x5c>
 8018b0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b10:	b141      	cbz	r1, 8018b24 <__swsetup_r+0x4c>
 8018b12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b16:	4299      	cmp	r1, r3
 8018b18:	d002      	beq.n	8018b20 <__swsetup_r+0x48>
 8018b1a:	4628      	mov	r0, r5
 8018b1c:	f7fe fefe 	bl	801791c <_free_r>
 8018b20:	2300      	movs	r3, #0
 8018b22:	6363      	str	r3, [r4, #52]	; 0x34
 8018b24:	89a3      	ldrh	r3, [r4, #12]
 8018b26:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018b2a:	81a3      	strh	r3, [r4, #12]
 8018b2c:	2300      	movs	r3, #0
 8018b2e:	6063      	str	r3, [r4, #4]
 8018b30:	6923      	ldr	r3, [r4, #16]
 8018b32:	6023      	str	r3, [r4, #0]
 8018b34:	89a3      	ldrh	r3, [r4, #12]
 8018b36:	f043 0308 	orr.w	r3, r3, #8
 8018b3a:	81a3      	strh	r3, [r4, #12]
 8018b3c:	6923      	ldr	r3, [r4, #16]
 8018b3e:	b94b      	cbnz	r3, 8018b54 <__swsetup_r+0x7c>
 8018b40:	89a3      	ldrh	r3, [r4, #12]
 8018b42:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018b46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018b4a:	d003      	beq.n	8018b54 <__swsetup_r+0x7c>
 8018b4c:	4621      	mov	r1, r4
 8018b4e:	4628      	mov	r0, r5
 8018b50:	f000 f884 	bl	8018c5c <__smakebuf_r>
 8018b54:	89a0      	ldrh	r0, [r4, #12]
 8018b56:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018b5a:	f010 0301 	ands.w	r3, r0, #1
 8018b5e:	d00a      	beq.n	8018b76 <__swsetup_r+0x9e>
 8018b60:	2300      	movs	r3, #0
 8018b62:	60a3      	str	r3, [r4, #8]
 8018b64:	6963      	ldr	r3, [r4, #20]
 8018b66:	425b      	negs	r3, r3
 8018b68:	61a3      	str	r3, [r4, #24]
 8018b6a:	6923      	ldr	r3, [r4, #16]
 8018b6c:	b943      	cbnz	r3, 8018b80 <__swsetup_r+0xa8>
 8018b6e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018b72:	d1c4      	bne.n	8018afe <__swsetup_r+0x26>
 8018b74:	bd38      	pop	{r3, r4, r5, pc}
 8018b76:	0781      	lsls	r1, r0, #30
 8018b78:	bf58      	it	pl
 8018b7a:	6963      	ldrpl	r3, [r4, #20]
 8018b7c:	60a3      	str	r3, [r4, #8]
 8018b7e:	e7f4      	b.n	8018b6a <__swsetup_r+0x92>
 8018b80:	2000      	movs	r0, #0
 8018b82:	e7f7      	b.n	8018b74 <__swsetup_r+0x9c>
 8018b84:	2000039c 	.word	0x2000039c

08018b88 <_raise_r>:
 8018b88:	291f      	cmp	r1, #31
 8018b8a:	b538      	push	{r3, r4, r5, lr}
 8018b8c:	4604      	mov	r4, r0
 8018b8e:	460d      	mov	r5, r1
 8018b90:	d904      	bls.n	8018b9c <_raise_r+0x14>
 8018b92:	2316      	movs	r3, #22
 8018b94:	6003      	str	r3, [r0, #0]
 8018b96:	f04f 30ff 	mov.w	r0, #4294967295
 8018b9a:	bd38      	pop	{r3, r4, r5, pc}
 8018b9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8018b9e:	b112      	cbz	r2, 8018ba6 <_raise_r+0x1e>
 8018ba0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ba4:	b94b      	cbnz	r3, 8018bba <_raise_r+0x32>
 8018ba6:	4620      	mov	r0, r4
 8018ba8:	f000 f830 	bl	8018c0c <_getpid_r>
 8018bac:	462a      	mov	r2, r5
 8018bae:	4601      	mov	r1, r0
 8018bb0:	4620      	mov	r0, r4
 8018bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018bb6:	f000 b817 	b.w	8018be8 <_kill_r>
 8018bba:	2b01      	cmp	r3, #1
 8018bbc:	d00a      	beq.n	8018bd4 <_raise_r+0x4c>
 8018bbe:	1c59      	adds	r1, r3, #1
 8018bc0:	d103      	bne.n	8018bca <_raise_r+0x42>
 8018bc2:	2316      	movs	r3, #22
 8018bc4:	6003      	str	r3, [r0, #0]
 8018bc6:	2001      	movs	r0, #1
 8018bc8:	e7e7      	b.n	8018b9a <_raise_r+0x12>
 8018bca:	2400      	movs	r4, #0
 8018bcc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018bd0:	4628      	mov	r0, r5
 8018bd2:	4798      	blx	r3
 8018bd4:	2000      	movs	r0, #0
 8018bd6:	e7e0      	b.n	8018b9a <_raise_r+0x12>

08018bd8 <raise>:
 8018bd8:	4b02      	ldr	r3, [pc, #8]	; (8018be4 <raise+0xc>)
 8018bda:	4601      	mov	r1, r0
 8018bdc:	6818      	ldr	r0, [r3, #0]
 8018bde:	f7ff bfd3 	b.w	8018b88 <_raise_r>
 8018be2:	bf00      	nop
 8018be4:	2000039c 	.word	0x2000039c

08018be8 <_kill_r>:
 8018be8:	b538      	push	{r3, r4, r5, lr}
 8018bea:	4d07      	ldr	r5, [pc, #28]	; (8018c08 <_kill_r+0x20>)
 8018bec:	2300      	movs	r3, #0
 8018bee:	4604      	mov	r4, r0
 8018bf0:	4608      	mov	r0, r1
 8018bf2:	4611      	mov	r1, r2
 8018bf4:	602b      	str	r3, [r5, #0]
 8018bf6:	f7ec fa79 	bl	80050ec <_kill>
 8018bfa:	1c43      	adds	r3, r0, #1
 8018bfc:	d102      	bne.n	8018c04 <_kill_r+0x1c>
 8018bfe:	682b      	ldr	r3, [r5, #0]
 8018c00:	b103      	cbz	r3, 8018c04 <_kill_r+0x1c>
 8018c02:	6023      	str	r3, [r4, #0]
 8018c04:	bd38      	pop	{r3, r4, r5, pc}
 8018c06:	bf00      	nop
 8018c08:	20003000 	.word	0x20003000

08018c0c <_getpid_r>:
 8018c0c:	f7ec ba66 	b.w	80050dc <_getpid>

08018c10 <__swhatbuf_r>:
 8018c10:	b570      	push	{r4, r5, r6, lr}
 8018c12:	460c      	mov	r4, r1
 8018c14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018c18:	2900      	cmp	r1, #0
 8018c1a:	b096      	sub	sp, #88	; 0x58
 8018c1c:	4615      	mov	r5, r2
 8018c1e:	461e      	mov	r6, r3
 8018c20:	da0d      	bge.n	8018c3e <__swhatbuf_r+0x2e>
 8018c22:	89a3      	ldrh	r3, [r4, #12]
 8018c24:	f013 0f80 	tst.w	r3, #128	; 0x80
 8018c28:	f04f 0100 	mov.w	r1, #0
 8018c2c:	bf0c      	ite	eq
 8018c2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8018c32:	2340      	movne	r3, #64	; 0x40
 8018c34:	2000      	movs	r0, #0
 8018c36:	6031      	str	r1, [r6, #0]
 8018c38:	602b      	str	r3, [r5, #0]
 8018c3a:	b016      	add	sp, #88	; 0x58
 8018c3c:	bd70      	pop	{r4, r5, r6, pc}
 8018c3e:	466a      	mov	r2, sp
 8018c40:	f000 f848 	bl	8018cd4 <_fstat_r>
 8018c44:	2800      	cmp	r0, #0
 8018c46:	dbec      	blt.n	8018c22 <__swhatbuf_r+0x12>
 8018c48:	9901      	ldr	r1, [sp, #4]
 8018c4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8018c4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8018c52:	4259      	negs	r1, r3
 8018c54:	4159      	adcs	r1, r3
 8018c56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018c5a:	e7eb      	b.n	8018c34 <__swhatbuf_r+0x24>

08018c5c <__smakebuf_r>:
 8018c5c:	898b      	ldrh	r3, [r1, #12]
 8018c5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c60:	079d      	lsls	r5, r3, #30
 8018c62:	4606      	mov	r6, r0
 8018c64:	460c      	mov	r4, r1
 8018c66:	d507      	bpl.n	8018c78 <__smakebuf_r+0x1c>
 8018c68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018c6c:	6023      	str	r3, [r4, #0]
 8018c6e:	6123      	str	r3, [r4, #16]
 8018c70:	2301      	movs	r3, #1
 8018c72:	6163      	str	r3, [r4, #20]
 8018c74:	b002      	add	sp, #8
 8018c76:	bd70      	pop	{r4, r5, r6, pc}
 8018c78:	ab01      	add	r3, sp, #4
 8018c7a:	466a      	mov	r2, sp
 8018c7c:	f7ff ffc8 	bl	8018c10 <__swhatbuf_r>
 8018c80:	9900      	ldr	r1, [sp, #0]
 8018c82:	4605      	mov	r5, r0
 8018c84:	4630      	mov	r0, r6
 8018c86:	f7fe febd 	bl	8017a04 <_malloc_r>
 8018c8a:	b948      	cbnz	r0, 8018ca0 <__smakebuf_r+0x44>
 8018c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c90:	059a      	lsls	r2, r3, #22
 8018c92:	d4ef      	bmi.n	8018c74 <__smakebuf_r+0x18>
 8018c94:	f023 0303 	bic.w	r3, r3, #3
 8018c98:	f043 0302 	orr.w	r3, r3, #2
 8018c9c:	81a3      	strh	r3, [r4, #12]
 8018c9e:	e7e3      	b.n	8018c68 <__smakebuf_r+0xc>
 8018ca0:	89a3      	ldrh	r3, [r4, #12]
 8018ca2:	6020      	str	r0, [r4, #0]
 8018ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018ca8:	81a3      	strh	r3, [r4, #12]
 8018caa:	9b00      	ldr	r3, [sp, #0]
 8018cac:	6163      	str	r3, [r4, #20]
 8018cae:	9b01      	ldr	r3, [sp, #4]
 8018cb0:	6120      	str	r0, [r4, #16]
 8018cb2:	b15b      	cbz	r3, 8018ccc <__smakebuf_r+0x70>
 8018cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018cb8:	4630      	mov	r0, r6
 8018cba:	f000 f81d 	bl	8018cf8 <_isatty_r>
 8018cbe:	b128      	cbz	r0, 8018ccc <__smakebuf_r+0x70>
 8018cc0:	89a3      	ldrh	r3, [r4, #12]
 8018cc2:	f023 0303 	bic.w	r3, r3, #3
 8018cc6:	f043 0301 	orr.w	r3, r3, #1
 8018cca:	81a3      	strh	r3, [r4, #12]
 8018ccc:	89a3      	ldrh	r3, [r4, #12]
 8018cce:	431d      	orrs	r5, r3
 8018cd0:	81a5      	strh	r5, [r4, #12]
 8018cd2:	e7cf      	b.n	8018c74 <__smakebuf_r+0x18>

08018cd4 <_fstat_r>:
 8018cd4:	b538      	push	{r3, r4, r5, lr}
 8018cd6:	4d07      	ldr	r5, [pc, #28]	; (8018cf4 <_fstat_r+0x20>)
 8018cd8:	2300      	movs	r3, #0
 8018cda:	4604      	mov	r4, r0
 8018cdc:	4608      	mov	r0, r1
 8018cde:	4611      	mov	r1, r2
 8018ce0:	602b      	str	r3, [r5, #0]
 8018ce2:	f7ec fa62 	bl	80051aa <_fstat>
 8018ce6:	1c43      	adds	r3, r0, #1
 8018ce8:	d102      	bne.n	8018cf0 <_fstat_r+0x1c>
 8018cea:	682b      	ldr	r3, [r5, #0]
 8018cec:	b103      	cbz	r3, 8018cf0 <_fstat_r+0x1c>
 8018cee:	6023      	str	r3, [r4, #0]
 8018cf0:	bd38      	pop	{r3, r4, r5, pc}
 8018cf2:	bf00      	nop
 8018cf4:	20003000 	.word	0x20003000

08018cf8 <_isatty_r>:
 8018cf8:	b538      	push	{r3, r4, r5, lr}
 8018cfa:	4d06      	ldr	r5, [pc, #24]	; (8018d14 <_isatty_r+0x1c>)
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	4604      	mov	r4, r0
 8018d00:	4608      	mov	r0, r1
 8018d02:	602b      	str	r3, [r5, #0]
 8018d04:	f7ec fa61 	bl	80051ca <_isatty>
 8018d08:	1c43      	adds	r3, r0, #1
 8018d0a:	d102      	bne.n	8018d12 <_isatty_r+0x1a>
 8018d0c:	682b      	ldr	r3, [r5, #0]
 8018d0e:	b103      	cbz	r3, 8018d12 <_isatty_r+0x1a>
 8018d10:	6023      	str	r3, [r4, #0]
 8018d12:	bd38      	pop	{r3, r4, r5, pc}
 8018d14:	20003000 	.word	0x20003000

08018d18 <fmod>:
 8018d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d1a:	ed2d 8b02 	vpush	{d8}
 8018d1e:	ec57 6b10 	vmov	r6, r7, d0
 8018d22:	ec55 4b11 	vmov	r4, r5, d1
 8018d26:	f000 f86d 	bl	8018e04 <__ieee754_fmod>
 8018d2a:	4622      	mov	r2, r4
 8018d2c:	462b      	mov	r3, r5
 8018d2e:	4630      	mov	r0, r6
 8018d30:	4639      	mov	r1, r7
 8018d32:	eeb0 8a40 	vmov.f32	s16, s0
 8018d36:	eef0 8a60 	vmov.f32	s17, s1
 8018d3a:	f7e7 ff1f 	bl	8000b7c <__aeabi_dcmpun>
 8018d3e:	b990      	cbnz	r0, 8018d66 <fmod+0x4e>
 8018d40:	2200      	movs	r2, #0
 8018d42:	2300      	movs	r3, #0
 8018d44:	4620      	mov	r0, r4
 8018d46:	4629      	mov	r1, r5
 8018d48:	f7e7 fee6 	bl	8000b18 <__aeabi_dcmpeq>
 8018d4c:	b158      	cbz	r0, 8018d66 <fmod+0x4e>
 8018d4e:	f7fd ff3b 	bl	8016bc8 <__errno>
 8018d52:	2321      	movs	r3, #33	; 0x21
 8018d54:	6003      	str	r3, [r0, #0]
 8018d56:	2200      	movs	r2, #0
 8018d58:	2300      	movs	r3, #0
 8018d5a:	4610      	mov	r0, r2
 8018d5c:	4619      	mov	r1, r3
 8018d5e:	f7e7 fd9d 	bl	800089c <__aeabi_ddiv>
 8018d62:	ec41 0b18 	vmov	d8, r0, r1
 8018d66:	eeb0 0a48 	vmov.f32	s0, s16
 8018d6a:	eef0 0a68 	vmov.f32	s1, s17
 8018d6e:	ecbd 8b02 	vpop	{d8}
 8018d72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018d74 <round>:
 8018d74:	ec53 2b10 	vmov	r2, r3, d0
 8018d78:	b570      	push	{r4, r5, r6, lr}
 8018d7a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8018d7e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8018d82:	2813      	cmp	r0, #19
 8018d84:	ee10 5a10 	vmov	r5, s0
 8018d88:	4619      	mov	r1, r3
 8018d8a:	dc18      	bgt.n	8018dbe <round+0x4a>
 8018d8c:	2800      	cmp	r0, #0
 8018d8e:	da09      	bge.n	8018da4 <round+0x30>
 8018d90:	3001      	adds	r0, #1
 8018d92:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8018d96:	d103      	bne.n	8018da0 <round+0x2c>
 8018d98:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8018d9c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8018da0:	2300      	movs	r3, #0
 8018da2:	e02a      	b.n	8018dfa <round+0x86>
 8018da4:	4c16      	ldr	r4, [pc, #88]	; (8018e00 <round+0x8c>)
 8018da6:	4104      	asrs	r4, r0
 8018da8:	ea03 0604 	and.w	r6, r3, r4
 8018dac:	4316      	orrs	r6, r2
 8018dae:	d011      	beq.n	8018dd4 <round+0x60>
 8018db0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8018db4:	4103      	asrs	r3, r0
 8018db6:	440b      	add	r3, r1
 8018db8:	ea23 0104 	bic.w	r1, r3, r4
 8018dbc:	e7f0      	b.n	8018da0 <round+0x2c>
 8018dbe:	2833      	cmp	r0, #51	; 0x33
 8018dc0:	dd0b      	ble.n	8018dda <round+0x66>
 8018dc2:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8018dc6:	d105      	bne.n	8018dd4 <round+0x60>
 8018dc8:	ee10 0a10 	vmov	r0, s0
 8018dcc:	f7e7 fa86 	bl	80002dc <__adddf3>
 8018dd0:	4602      	mov	r2, r0
 8018dd2:	460b      	mov	r3, r1
 8018dd4:	ec43 2b10 	vmov	d0, r2, r3
 8018dd8:	bd70      	pop	{r4, r5, r6, pc}
 8018dda:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8018dde:	f04f 34ff 	mov.w	r4, #4294967295
 8018de2:	40f4      	lsrs	r4, r6
 8018de4:	4214      	tst	r4, r2
 8018de6:	d0f5      	beq.n	8018dd4 <round+0x60>
 8018de8:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8018dec:	2301      	movs	r3, #1
 8018dee:	4083      	lsls	r3, r0
 8018df0:	195b      	adds	r3, r3, r5
 8018df2:	bf28      	it	cs
 8018df4:	3101      	addcs	r1, #1
 8018df6:	ea23 0304 	bic.w	r3, r3, r4
 8018dfa:	461a      	mov	r2, r3
 8018dfc:	460b      	mov	r3, r1
 8018dfe:	e7e9      	b.n	8018dd4 <round+0x60>
 8018e00:	000fffff 	.word	0x000fffff

08018e04 <__ieee754_fmod>:
 8018e04:	ec53 2b11 	vmov	r2, r3, d1
 8018e08:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 8018e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018e10:	ea5c 0402 	orrs.w	r4, ip, r2
 8018e14:	ec51 0b10 	vmov	r0, r1, d0
 8018e18:	ee11 7a10 	vmov	r7, s2
 8018e1c:	ee11 ea10 	vmov	lr, s2
 8018e20:	461e      	mov	r6, r3
 8018e22:	d00c      	beq.n	8018e3e <__ieee754_fmod+0x3a>
 8018e24:	4c78      	ldr	r4, [pc, #480]	; (8019008 <__ieee754_fmod+0x204>)
 8018e26:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8018e2a:	45a0      	cmp	r8, r4
 8018e2c:	4689      	mov	r9, r1
 8018e2e:	dc06      	bgt.n	8018e3e <__ieee754_fmod+0x3a>
 8018e30:	4254      	negs	r4, r2
 8018e32:	4d76      	ldr	r5, [pc, #472]	; (801900c <__ieee754_fmod+0x208>)
 8018e34:	4314      	orrs	r4, r2
 8018e36:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 8018e3a:	42ac      	cmp	r4, r5
 8018e3c:	d909      	bls.n	8018e52 <__ieee754_fmod+0x4e>
 8018e3e:	f7e7 fc03 	bl	8000648 <__aeabi_dmul>
 8018e42:	4602      	mov	r2, r0
 8018e44:	460b      	mov	r3, r1
 8018e46:	f7e7 fd29 	bl	800089c <__aeabi_ddiv>
 8018e4a:	ec41 0b10 	vmov	d0, r0, r1
 8018e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018e52:	45e0      	cmp	r8, ip
 8018e54:	ee10 aa10 	vmov	sl, s0
 8018e58:	ee10 4a10 	vmov	r4, s0
 8018e5c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8018e60:	dc09      	bgt.n	8018e76 <__ieee754_fmod+0x72>
 8018e62:	dbf2      	blt.n	8018e4a <__ieee754_fmod+0x46>
 8018e64:	4290      	cmp	r0, r2
 8018e66:	d3f0      	bcc.n	8018e4a <__ieee754_fmod+0x46>
 8018e68:	d105      	bne.n	8018e76 <__ieee754_fmod+0x72>
 8018e6a:	4b69      	ldr	r3, [pc, #420]	; (8019010 <__ieee754_fmod+0x20c>)
 8018e6c:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 8018e70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8018e74:	e7e9      	b.n	8018e4a <__ieee754_fmod+0x46>
 8018e76:	4a65      	ldr	r2, [pc, #404]	; (801900c <__ieee754_fmod+0x208>)
 8018e78:	ea19 0f02 	tst.w	r9, r2
 8018e7c:	d148      	bne.n	8018f10 <__ieee754_fmod+0x10c>
 8018e7e:	f1b8 0f00 	cmp.w	r8, #0
 8018e82:	d13d      	bne.n	8018f00 <__ieee754_fmod+0xfc>
 8018e84:	4963      	ldr	r1, [pc, #396]	; (8019014 <__ieee754_fmod+0x210>)
 8018e86:	4653      	mov	r3, sl
 8018e88:	2b00      	cmp	r3, #0
 8018e8a:	dc36      	bgt.n	8018efa <__ieee754_fmod+0xf6>
 8018e8c:	4216      	tst	r6, r2
 8018e8e:	d14f      	bne.n	8018f30 <__ieee754_fmod+0x12c>
 8018e90:	f1bc 0f00 	cmp.w	ip, #0
 8018e94:	d144      	bne.n	8018f20 <__ieee754_fmod+0x11c>
 8018e96:	4a5f      	ldr	r2, [pc, #380]	; (8019014 <__ieee754_fmod+0x210>)
 8018e98:	463b      	mov	r3, r7
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	dc3d      	bgt.n	8018f1a <__ieee754_fmod+0x116>
 8018e9e:	485e      	ldr	r0, [pc, #376]	; (8019018 <__ieee754_fmod+0x214>)
 8018ea0:	4281      	cmp	r1, r0
 8018ea2:	db4a      	blt.n	8018f3a <__ieee754_fmod+0x136>
 8018ea4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8018ea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018eac:	485a      	ldr	r0, [pc, #360]	; (8019018 <__ieee754_fmod+0x214>)
 8018eae:	4282      	cmp	r2, r0
 8018eb0:	db57      	blt.n	8018f62 <__ieee754_fmod+0x15e>
 8018eb2:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8018eb6:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8018eba:	1a89      	subs	r1, r1, r2
 8018ebc:	1b98      	subs	r0, r3, r6
 8018ebe:	eba4 070e 	sub.w	r7, r4, lr
 8018ec2:	2900      	cmp	r1, #0
 8018ec4:	d162      	bne.n	8018f8c <__ieee754_fmod+0x188>
 8018ec6:	4574      	cmp	r4, lr
 8018ec8:	bf38      	it	cc
 8018eca:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8018ece:	2800      	cmp	r0, #0
 8018ed0:	bfa4      	itt	ge
 8018ed2:	463c      	movge	r4, r7
 8018ed4:	4603      	movge	r3, r0
 8018ed6:	ea53 0104 	orrs.w	r1, r3, r4
 8018eda:	d0c6      	beq.n	8018e6a <__ieee754_fmod+0x66>
 8018edc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8018ee0:	db69      	blt.n	8018fb6 <__ieee754_fmod+0x1b2>
 8018ee2:	494d      	ldr	r1, [pc, #308]	; (8019018 <__ieee754_fmod+0x214>)
 8018ee4:	428a      	cmp	r2, r1
 8018ee6:	db6c      	blt.n	8018fc2 <__ieee754_fmod+0x1be>
 8018ee8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8018eec:	432b      	orrs	r3, r5
 8018eee:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8018ef2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8018ef6:	4620      	mov	r0, r4
 8018ef8:	e7a7      	b.n	8018e4a <__ieee754_fmod+0x46>
 8018efa:	3901      	subs	r1, #1
 8018efc:	005b      	lsls	r3, r3, #1
 8018efe:	e7c3      	b.n	8018e88 <__ieee754_fmod+0x84>
 8018f00:	4945      	ldr	r1, [pc, #276]	; (8019018 <__ieee754_fmod+0x214>)
 8018f02:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	ddc0      	ble.n	8018e8c <__ieee754_fmod+0x88>
 8018f0a:	3901      	subs	r1, #1
 8018f0c:	005b      	lsls	r3, r3, #1
 8018f0e:	e7fa      	b.n	8018f06 <__ieee754_fmod+0x102>
 8018f10:	ea4f 5128 	mov.w	r1, r8, asr #20
 8018f14:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8018f18:	e7b8      	b.n	8018e8c <__ieee754_fmod+0x88>
 8018f1a:	3a01      	subs	r2, #1
 8018f1c:	005b      	lsls	r3, r3, #1
 8018f1e:	e7bc      	b.n	8018e9a <__ieee754_fmod+0x96>
 8018f20:	4a3d      	ldr	r2, [pc, #244]	; (8019018 <__ieee754_fmod+0x214>)
 8018f22:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 8018f26:	2b00      	cmp	r3, #0
 8018f28:	ddb9      	ble.n	8018e9e <__ieee754_fmod+0x9a>
 8018f2a:	3a01      	subs	r2, #1
 8018f2c:	005b      	lsls	r3, r3, #1
 8018f2e:	e7fa      	b.n	8018f26 <__ieee754_fmod+0x122>
 8018f30:	ea4f 522c 	mov.w	r2, ip, asr #20
 8018f34:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8018f38:	e7b1      	b.n	8018e9e <__ieee754_fmod+0x9a>
 8018f3a:	1a40      	subs	r0, r0, r1
 8018f3c:	281f      	cmp	r0, #31
 8018f3e:	dc0a      	bgt.n	8018f56 <__ieee754_fmod+0x152>
 8018f40:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 8018f44:	fa08 f800 	lsl.w	r8, r8, r0
 8018f48:	fa2a f303 	lsr.w	r3, sl, r3
 8018f4c:	ea43 0308 	orr.w	r3, r3, r8
 8018f50:	fa0a f400 	lsl.w	r4, sl, r0
 8018f54:	e7aa      	b.n	8018eac <__ieee754_fmod+0xa8>
 8018f56:	4b31      	ldr	r3, [pc, #196]	; (801901c <__ieee754_fmod+0x218>)
 8018f58:	1a5b      	subs	r3, r3, r1
 8018f5a:	fa0a f303 	lsl.w	r3, sl, r3
 8018f5e:	2400      	movs	r4, #0
 8018f60:	e7a4      	b.n	8018eac <__ieee754_fmod+0xa8>
 8018f62:	1a80      	subs	r0, r0, r2
 8018f64:	281f      	cmp	r0, #31
 8018f66:	dc0a      	bgt.n	8018f7e <__ieee754_fmod+0x17a>
 8018f68:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 8018f6c:	fa0c fc00 	lsl.w	ip, ip, r0
 8018f70:	fa27 f606 	lsr.w	r6, r7, r6
 8018f74:	ea46 060c 	orr.w	r6, r6, ip
 8018f78:	fa07 fe00 	lsl.w	lr, r7, r0
 8018f7c:	e79d      	b.n	8018eba <__ieee754_fmod+0xb6>
 8018f7e:	4e27      	ldr	r6, [pc, #156]	; (801901c <__ieee754_fmod+0x218>)
 8018f80:	1ab6      	subs	r6, r6, r2
 8018f82:	fa07 f606 	lsl.w	r6, r7, r6
 8018f86:	f04f 0e00 	mov.w	lr, #0
 8018f8a:	e796      	b.n	8018eba <__ieee754_fmod+0xb6>
 8018f8c:	4574      	cmp	r4, lr
 8018f8e:	bf38      	it	cc
 8018f90:	f100 30ff 	addcc.w	r0, r0, #4294967295
 8018f94:	2800      	cmp	r0, #0
 8018f96:	da05      	bge.n	8018fa4 <__ieee754_fmod+0x1a0>
 8018f98:	0fe0      	lsrs	r0, r4, #31
 8018f9a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8018f9e:	0064      	lsls	r4, r4, #1
 8018fa0:	3901      	subs	r1, #1
 8018fa2:	e78b      	b.n	8018ebc <__ieee754_fmod+0xb8>
 8018fa4:	ea50 0307 	orrs.w	r3, r0, r7
 8018fa8:	f43f af5f 	beq.w	8018e6a <__ieee754_fmod+0x66>
 8018fac:	0ffb      	lsrs	r3, r7, #31
 8018fae:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8018fb2:	007c      	lsls	r4, r7, #1
 8018fb4:	e7f4      	b.n	8018fa0 <__ieee754_fmod+0x19c>
 8018fb6:	0fe1      	lsrs	r1, r4, #31
 8018fb8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8018fbc:	0064      	lsls	r4, r4, #1
 8018fbe:	3a01      	subs	r2, #1
 8018fc0:	e78c      	b.n	8018edc <__ieee754_fmod+0xd8>
 8018fc2:	1a89      	subs	r1, r1, r2
 8018fc4:	2914      	cmp	r1, #20
 8018fc6:	dc0a      	bgt.n	8018fde <__ieee754_fmod+0x1da>
 8018fc8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8018fcc:	fa03 f202 	lsl.w	r2, r3, r2
 8018fd0:	40cc      	lsrs	r4, r1
 8018fd2:	4322      	orrs	r2, r4
 8018fd4:	410b      	asrs	r3, r1
 8018fd6:	ea43 0105 	orr.w	r1, r3, r5
 8018fda:	4610      	mov	r0, r2
 8018fdc:	e735      	b.n	8018e4a <__ieee754_fmod+0x46>
 8018fde:	291f      	cmp	r1, #31
 8018fe0:	dc07      	bgt.n	8018ff2 <__ieee754_fmod+0x1ee>
 8018fe2:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8018fe6:	40cc      	lsrs	r4, r1
 8018fe8:	fa03 f202 	lsl.w	r2, r3, r2
 8018fec:	4322      	orrs	r2, r4
 8018fee:	462b      	mov	r3, r5
 8018ff0:	e7f1      	b.n	8018fd6 <__ieee754_fmod+0x1d2>
 8018ff2:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 8018ff6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8018ffa:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8018ffe:	32e2      	adds	r2, #226	; 0xe2
 8019000:	fa43 f202 	asr.w	r2, r3, r2
 8019004:	e7f3      	b.n	8018fee <__ieee754_fmod+0x1ea>
 8019006:	bf00      	nop
 8019008:	7fefffff 	.word	0x7fefffff
 801900c:	7ff00000 	.word	0x7ff00000
 8019010:	0801bcd8 	.word	0x0801bcd8
 8019014:	fffffbed 	.word	0xfffffbed
 8019018:	fffffc02 	.word	0xfffffc02
 801901c:	fffffbe2 	.word	0xfffffbe2

08019020 <_init>:
 8019020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019022:	bf00      	nop
 8019024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019026:	bc08      	pop	{r3}
 8019028:	469e      	mov	lr, r3
 801902a:	4770      	bx	lr

0801902c <_fini>:
 801902c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801902e:	bf00      	nop
 8019030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019032:	bc08      	pop	{r3}
 8019034:	469e      	mov	lr, r3
 8019036:	4770      	bx	lr
