
AxxSolder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f038  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000025b8  0800f1c8  0800f1c8  0001f1c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011780  08011780  00030290  2**0
                  CONTENTS
  4 .ARM          00000000  08011780  08011780  00030290  2**0
                  CONTENTS
  5 .preinit_array 00000000  08011780  08011780  00030290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011780  08011780  00021780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011784  08011784  00021784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08011788  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030290  2**0
                  CONTENTS
 10 .bss          000064cc  20000290  20000290  00030290  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000675c  2000675c  00030290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030290  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001750b  00000000  00000000  00030303  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003af3  00000000  00000000  0004780e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016f0  00000000  00000000  0004b308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000011b8  00000000  00000000  0004c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000218e3  00000000  00000000  0004dbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001de2f  00000000  00000000  0006f493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c42f0  00000000  00000000  0008d2c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000075a8  00000000  00000000  001515b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  00158b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f1b0 	.word	0x0800f1b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	0800f1b0 	.word	0x0800f1b0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <GetPage>:

/*Variable used for Erase procedure*/
static FLASH_EraseInitTypeDef EraseInitStruct;

uint32_t GetPage(uint32_t Addr)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  return (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8000c96:	0adb      	lsrs	r3, r3, #11
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <FlashCheckCRC>:

bool FlashCheckCRC()
{
 8000ca4:	b5b0      	push	{r4, r5, r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
	volatile uint64_t uwCRCValue = 0;
 8000caa:	f04f 0200 	mov.w	r2, #0
 8000cae:	f04f 0300 	mov.w	r3, #0
 8000cb2:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int cRCAddress = (bufLength / 8) * 8;
 8000cb6:	4b17      	ldr	r3, [pc, #92]	; (8000d14 <FlashCheckCRC+0x70>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f023 0307 	bic.w	r3, r3, #7
 8000cbe:	60fb      	str	r3, [r7, #12]
	if (bufLength % 8 != 0)
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <FlashCheckCRC+0x70>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f003 0307 	and.w	r3, r3, #7
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d002      	beq.n	8000cd2 <FlashCheckCRC+0x2e>
	{
		cRCAddress += 8;
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3308      	adds	r3, #8
 8000cd0:	60fb      	str	r3, [r7, #12]
	}
	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) FLASH_USER_START_ADDR, bufLength);
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <FlashCheckCRC+0x70>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	461a      	mov	r2, r3
 8000cd8:	490f      	ldr	r1, [pc, #60]	; (8000d18 <FlashCheckCRC+0x74>)
 8000cda:	4810      	ldr	r0, [pc, #64]	; (8000d1c <FlashCheckCRC+0x78>)
 8000cdc:	f005 fd26 	bl	800672c <HAL_CRC_Calculate>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	461c      	mov	r4, r3
 8000ce6:	4615      	mov	r5, r2
 8000ce8:	e9c7 4500 	strd	r4, r5, [r7]
	if (*(volatile uint64_t*) (FLASH_USER_START_ADDR + cRCAddress) == uwCRCValue)
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000cf2:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8000cf6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	bf08      	it	eq
 8000d02:	4290      	cmpeq	r0, r2
 8000d04:	d101      	bne.n	8000d0a <FlashCheckCRC+0x66>
	{
		return true;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e000      	b.n	8000d0c <FlashCheckCRC+0x68>
	}
	return false;
 8000d0a:	2300      	movs	r3, #0
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bdb0      	pop	{r4, r5, r7, pc}
 8000d14:	20000000 	.word	0x20000000
 8000d18:	0801e800 	.word	0x0801e800
 8000d1c:	20001800 	.word	0x20001800

08000d20 <FlashReadToBuf>:


bool FlashReadToBuf()
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
	int i = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	617b      	str	r3, [r7, #20]
	unsigned char temp[8];
	uint32_t Address = FLASH_USER_START_ADDR;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <FlashReadToBuf+0x88>)
 8000d2c:	613b      	str	r3, [r7, #16]

	if (FlashCheckCRC())
 8000d2e:	f7ff ffb9 	bl	8000ca4 <FlashCheckCRC>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d031      	beq.n	8000d9c <FlashReadToBuf+0x7c>
	{
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8000d38:	e025      	b.n	8000d86 <FlashReadToBuf+0x66>
		{
			*(uint64_t*) temp = *(volatile uint64_t*) Address;
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1d39      	adds	r1, r7, #4
 8000d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d42:	e9c1 2300 	strd	r2, r3, [r1]

			for (int j = 0; j < 8; j++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	e013      	b.n	8000d74 <FlashReadToBuf+0x54>
			{
				if (j + i < bufLength)
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	4413      	add	r3, r2
 8000d52:	461a      	mov	r2, r3
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <FlashReadToBuf+0x8c>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d208      	bcs.n	8000d6e <FlashReadToBuf+0x4e>
				{
					bufferFlash[i + j] = temp[j];
 8000d5c:	697a      	ldr	r2, [r7, #20]
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	4413      	add	r3, r2
 8000d62:	1d39      	adds	r1, r7, #4
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	440a      	add	r2, r1
 8000d68:	7811      	ldrb	r1, [r2, #0]
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <FlashReadToBuf+0x90>)
 8000d6c:	54d1      	strb	r1, [r2, r3]
			for (int j = 0; j < 8; j++)
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	3301      	adds	r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	2b07      	cmp	r3, #7
 8000d78:	dde8      	ble.n	8000d4c <FlashReadToBuf+0x2c>
				}
			}
			Address = Address + 8;
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	3308      	adds	r3, #8
 8000d7e:	613b      	str	r3, [r7, #16]
			i = i + 8;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	3308      	adds	r3, #8
 8000d84:	617b      	str	r3, [r7, #20]
		while (i < bufLength && Address < FLASH_USER_END_ADDR)
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <FlashReadToBuf+0x8c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d203      	bcs.n	8000d98 <FlashReadToBuf+0x78>
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <FlashReadToBuf+0x94>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d3d0      	bcc.n	8000d3a <FlashReadToBuf+0x1a>
		}
		return true;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	e000      	b.n	8000d9e <FlashReadToBuf+0x7e>
	}
	return false;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3718      	adds	r7, #24
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	0801e800 	.word	0x0801e800
 8000dac:	20000000 	.word	0x20000000
 8000db0:	200002b0 	.word	0x200002b0
 8000db4:	0801ffff 	.word	0x0801ffff

08000db8 <FlashWrite>:
	   return 0;
}



bool FlashWrite(Flash_values *flash_values){
 8000db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000dbc:	b08d      	sub	sp, #52	; 0x34
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
	flashWriting = 1;
 8000dc2:	4b5b      	ldr	r3, [pc, #364]	; (8000f30 <FlashWrite+0x178>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	701a      	strb	r2, [r3, #0]
	volatile uint64_t uwCRCValue = 0;
 8000dc8:	f04f 0200 	mov.w	r2, #0
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	e9c7 2306 	strd	r2, r3, [r7, #24]
	int i = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t Address = FLASH_USER_START_ADDR;
 8000dd8:	4b56      	ldr	r3, [pc, #344]	; (8000f34 <FlashWrite+0x17c>)
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PageError = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]
	uint64_t temp = 0;
 8000de0:	f04f 0200 	mov.w	r2, #0
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t NbOfPages = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	623b      	str	r3, [r7, #32]

	if (!FlashReadToBuf())	//invalid flash memory force write all
 8000df0:	f7ff ff96 	bl	8000d20 <FlashReadToBuf>
	{
		//configurationMsg->command = ConfigurationCommand_WriteMsgToFlash;
	}

	memcpy(bufferFlash, flash_values, sizeof(Flash_values));
 8000df4:	4a50      	ldr	r2, [pc, #320]	; (8000f38 <FlashWrite+0x180>)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	461c      	mov	r4, r3
 8000dfa:	4616      	mov	r6, r2
 8000dfc:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000e00:	4635      	mov	r5, r6
 8000e02:	4623      	mov	r3, r4
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	6859      	ldr	r1, [r3, #4]
 8000e08:	689a      	ldr	r2, [r3, #8]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e0e:	3410      	adds	r4, #16
 8000e10:	3610      	adds	r6, #16
 8000e12:	4564      	cmp	r4, ip
 8000e14:	d1f4      	bne.n	8000e00 <FlashWrite+0x48>

	uwCRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t*) bufferFlash, bufLength);
 8000e16:	4b49      	ldr	r3, [pc, #292]	; (8000f3c <FlashWrite+0x184>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	461a      	mov	r2, r3
 8000e1c:	4946      	ldr	r1, [pc, #280]	; (8000f38 <FlashWrite+0x180>)
 8000e1e:	4848      	ldr	r0, [pc, #288]	; (8000f40 <FlashWrite+0x188>)
 8000e20:	f005 fc84 	bl	800672c <HAL_CRC_Calculate>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2200      	movs	r2, #0
 8000e28:	4698      	mov	r8, r3
 8000e2a:	4691      	mov	r9, r2
 8000e2c:	e9c7 8906 	strd	r8, r9, [r7, #24]

	HAL_FLASH_Unlock();
 8000e30:	f006 f842 	bl	8006eb8 <HAL_FLASH_Unlock>

	/* Clear OPTVERR bit set on virgin samples */
	//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);

	/* Get the number of pages to erase from 1st page */
	NbOfPages = GetPage(FLASH_USER_END_ADDR) - GetPage(FLASH_USER_START_ADDR) + 1;
 8000e34:	4843      	ldr	r0, [pc, #268]	; (8000f44 <FlashWrite+0x18c>)
 8000e36:	f7ff ff27 	bl	8000c88 <GetPage>
 8000e3a:	4604      	mov	r4, r0
 8000e3c:	483d      	ldr	r0, [pc, #244]	; (8000f34 <FlashWrite+0x17c>)
 8000e3e:	f7ff ff23 	bl	8000c88 <GetPage>
 8000e42:	4603      	mov	r3, r0
 8000e44:	1ae3      	subs	r3, r4, r3
 8000e46:	3301      	adds	r3, #1
 8000e48:	623b      	str	r3, [r7, #32]

	/* Fill EraseInit structure*/
	//EraseInitStruct.Banks = FLASH_BANK_1;
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES;
 8000e4a:	4b3f      	ldr	r3, [pc, #252]	; (8000f48 <FlashWrite+0x190>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = GetPage(FLASH_USER_START_ADDR);
 8000e50:	4838      	ldr	r0, [pc, #224]	; (8000f34 <FlashWrite+0x17c>)
 8000e52:	f7ff ff19 	bl	8000c88 <GetPage>
 8000e56:	4603      	mov	r3, r0
 8000e58:	4a3b      	ldr	r2, [pc, #236]	; (8000f48 <FlashWrite+0x190>)
 8000e5a:	6053      	str	r3, [r2, #4]
	EraseInitStruct.NbPages = NbOfPages;
 8000e5c:	4a3a      	ldr	r2, [pc, #232]	; (8000f48 <FlashWrite+0x190>)
 8000e5e:	6a3b      	ldr	r3, [r7, #32]
 8000e60:	6093      	str	r3, [r2, #8]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) == HAL_OK)
 8000e62:	f107 0314 	add.w	r3, r7, #20
 8000e66:	4619      	mov	r1, r3
 8000e68:	4837      	ldr	r0, [pc, #220]	; (8000f48 <FlashWrite+0x190>)
 8000e6a:	f006 f8e9 	bl	8007040 <HAL_FLASHEx_Erase>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d152      	bne.n	8000f1a <FlashWrite+0x162>
	{
		//FLASH_FlushCaches();

		//__HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);

		while (Address < FLASH_USER_END_ADDR)
 8000e74:	e04b      	b.n	8000f0e <FlashWrite+0x156>
		{
			for (int j = 0; j < 8; j++)
 8000e76:	2300      	movs	r3, #0
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
 8000e7a:	e01b      	b.n	8000eb4 <FlashWrite+0xfc>
			{
				if (j + i < bufLength)
 8000e7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e80:	4413      	add	r3, r2
 8000e82:	461a      	mov	r2, r3
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <FlashWrite+0x184>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d20a      	bcs.n	8000ea2 <FlashWrite+0xea>
				{
					((unsigned char*) &temp)[j] = bufferFlash[i + j];
 8000e8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e90:	441a      	add	r2, r3
 8000e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e94:	f107 0108 	add.w	r1, r7, #8
 8000e98:	440b      	add	r3, r1
 8000e9a:	4927      	ldr	r1, [pc, #156]	; (8000f38 <FlashWrite+0x180>)
 8000e9c:	5c8a      	ldrb	r2, [r1, r2]
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e005      	b.n	8000eae <FlashWrite+0xf6>
				}
				else
				{
					((unsigned char*) &temp)[j] = 0;
 8000ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ea4:	f107 0208 	add.w	r2, r7, #8
 8000ea8:	4413      	add	r3, r2
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]
			for (int j = 0; j < 8; j++)
 8000eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8000eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb6:	2b07      	cmp	r3, #7
 8000eb8:	dde0      	ble.n	8000e7c <FlashWrite+0xc4>
				}
			}
			if (i < bufLength && HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, temp) == HAL_OK)
 8000eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ebc:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <FlashWrite+0x184>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d20f      	bcs.n	8000ee4 <FlashWrite+0x12c>
 8000ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000eca:	2003      	movs	r0, #3
 8000ecc:	f005 ff84 	bl	8006dd8 <HAL_FLASH_Program>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d106      	bne.n	8000ee4 <FlashWrite+0x12c>
			{
				Address = Address + 8;
 8000ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed8:	3308      	adds	r3, #8
 8000eda:	62bb      	str	r3, [r7, #40]	; 0x28
				i = i + 8;
 8000edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ede:	3308      	adds	r3, #8
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ee2:	e014      	b.n	8000f0e <FlashWrite+0x156>
			}
			else if (i >= bufLength)
 8000ee4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ee6:	4b15      	ldr	r3, [pc, #84]	; (8000f3c <FlashWrite+0x184>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d314      	bcc.n	8000f18 <FlashWrite+0x160>
			{
				if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, Address, uwCRCValue) == HAL_OK)
 8000eee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000ef2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000ef4:	2003      	movs	r0, #3
 8000ef6:	f005 ff6f 	bl	8006dd8 <HAL_FLASH_Program>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d106      	bne.n	8000f0e <FlashWrite+0x156>
				{
					HAL_FLASH_Lock();
 8000f00:	f006 f800 	bl	8006f04 <HAL_FLASH_Lock>
					flashWriting = 0;
 8000f04:	4b0a      	ldr	r3, [pc, #40]	; (8000f30 <FlashWrite+0x178>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
					return true;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00b      	b.n	8000f26 <FlashWrite+0x16e>
		while (Address < FLASH_USER_END_ADDR)
 8000f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f10:	4a0c      	ldr	r2, [pc, #48]	; (8000f44 <FlashWrite+0x18c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d3af      	bcc.n	8000e76 <FlashWrite+0xbe>
 8000f16:	e000      	b.n	8000f1a <FlashWrite+0x162>
			}
			else
			{
				/* Error occurred while writing data in Flash memory.
				 User can add here some code to deal with this error */
				break;
 8000f18:	bf00      	nop
			}
		}
	}
	/* Lock the Flash to disable the flash control register access (recommended
	 to protect the FLASH memory against possible unwanted operation) *********/
	HAL_FLASH_Lock();
 8000f1a:	f005 fff3 	bl	8006f04 <HAL_FLASH_Lock>

	flashWriting = 0;
 8000f1e:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <FlashWrite+0x178>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	701a      	strb	r2, [r3, #0]
	return false;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3734      	adds	r7, #52	; 0x34
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000f30:	200002ac 	.word	0x200002ac
 8000f34:	0801e800 	.word	0x0801e800
 8000f38:	200002b0 	.word	0x200002b0
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	20001800 	.word	0x20001800
 8000f44:	0801ffff 	.word	0x0801ffff
 8000f48:	200002e0 	.word	0x200002e0

08000f4c <clamp>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
PID_TypeDef TPID;

double clamp(double d, double min, double max) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b088      	sub	sp, #32
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	ed87 0b04 	vstr	d0, [r7, #16]
 8000f56:	ed87 1b02 	vstr	d1, [r7, #8]
 8000f5a:	ed87 2b00 	vstr	d2, [r7]
  const double t = d < min ? min : d;
 8000f5e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000f66:	f7ff fdb9 	bl	8000adc <__aeabi_dcmplt>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d002      	beq.n	8000f76 <clamp+0x2a>
 8000f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000f74:	e001      	b.n	8000f7a <clamp+0x2e>
 8000f76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000f7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
  return t > max ? max : t;
 8000f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000f86:	f7ff fdc7 	bl	8000b18 <__aeabi_dcmpgt>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d002      	beq.n	8000f96 <clamp+0x4a>
 8000f90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f94:	e001      	b.n	8000f9a <clamp+0x4e>
 8000f96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f9a:	ec43 2b17 	vmov	d7, r2, r3
}
 8000f9e:	eeb0 0a47 	vmov.f32	s0, s14
 8000fa2:	eef0 0a67 	vmov.f32	s1, s15
 8000fa6:	3720      	adds	r7, #32
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <get_mean_ADC_reading>:

/* Returns the average of 100 readings of the index+3*n value in the ADC_buffer vector */
float get_mean_ADC_reading(uint8_t index){
 8000fac:	b480      	push	{r7}
 8000fae:	b085      	sub	sp, #20
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	71fb      	strb	r3, [r7, #7]
	ADC_filter_mean = 0;
 8000fb6:	4b16      	ldr	r3, [pc, #88]	; (8001010 <get_mean_ADC_reading+0x64>)
 8000fb8:	f04f 0200 	mov.w	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
	for(int n=index;n<ADC_BUF_LEN;n=n+3){
 8000fbe:	79fb      	ldrb	r3, [r7, #7]
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	e012      	b.n	8000fea <get_mean_ADC_reading+0x3e>
		ADC_filter_mean += ADC_buffer[n];
 8000fc4:	4a13      	ldr	r2, [pc, #76]	; (8001014 <get_mean_ADC_reading+0x68>)
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fcc:	ee07 3a90 	vmov	s15, r3
 8000fd0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd4:	4b0e      	ldr	r3, [pc, #56]	; (8001010 <get_mean_ADC_reading+0x64>)
 8000fd6:	edd3 7a00 	vldr	s15, [r3]
 8000fda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <get_mean_ADC_reading+0x64>)
 8000fe0:	edc3 7a00 	vstr	s15, [r3]
	for(int n=index;n<ADC_BUF_LEN;n=n+3){
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	3303      	adds	r3, #3
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2b31      	cmp	r3, #49	; 0x31
 8000fee:	dde9      	ble.n	8000fc4 <get_mean_ADC_reading+0x18>
	}
	return ADC_filter_mean/50.0;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	; (8001010 <get_mean_ADC_reading+0x64>)
 8000ff2:	edd3 7a00 	vldr	s15, [r3]
 8000ff6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001018 <get_mean_ADC_reading+0x6c>
 8000ffa:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ffe:	eef0 7a66 	vmov.f32	s15, s13
}
 8001002:	eeb0 0a67 	vmov.f32	s0, s15
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	20000354 	.word	0x20000354
 8001014:	20000358 	.word	0x20000358
 8001018:	42480000 	.word	0x42480000
 800101c:	00000000 	.word	0x00000000

08001020 <get_bus_voltage>:

void get_bus_voltage(){
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	sensor_values.bus_voltage = Moving_Average_Compute(ADC_buffer[0], &input_voltage_filterStruct)*VOLTAGE_COMPENSATION; /* Moving average filter */
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <get_bus_voltage+0x40>)
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	490e      	ldr	r1, [pc, #56]	; (8001064 <get_bus_voltage+0x44>)
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fde4 	bl	8002bf8 <Moving_Average_Compute>
 8001030:	ec51 0b10 	vmov	r0, r1, d0
 8001034:	a308      	add	r3, pc, #32	; (adr r3, 8001058 <get_bus_voltage+0x38>)
 8001036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103a:	f7ff fadd 	bl	80005f8 <__aeabi_dmul>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4610      	mov	r0, r2
 8001044:	4619      	mov	r1, r3
 8001046:	f7ff fdcf 	bl	8000be8 <__aeabi_d2f>
 800104a:	4603      	mov	r3, r0
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <get_bus_voltage+0x48>)
 800104e:	6113      	str	r3, [r2, #16]
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	f3af 8000 	nop.w
 8001058:	48b35add 	.word	0x48b35add
 800105c:	3f7a91e4 	.word	0x3f7a91e4
 8001060:	20000358 	.word	0x20000358
 8001064:	20000a6c 	.word	0x20000a6c
 8001068:	20000038 	.word	0x20000038
 800106c:	00000000 	.word	0x00000000

08001070 <get_actual_temperature>:

void get_actual_temperature(){
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
	/* Index 0 is bus Voltage */
	float TC_temperature_temp = Moving_Average_Compute(get_mean_ADC_reading(0), &actual_temperature_filter_struct); /* Moving average filter */
 8001076:	2000      	movs	r0, #0
 8001078:	f7ff ff98 	bl	8000fac <get_mean_ADC_reading>
 800107c:	eef0 7a40 	vmov.f32	s15, s0
 8001080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001084:	4980      	ldr	r1, [pc, #512]	; (8001288 <get_actual_temperature+0x218>)
 8001086:	ee17 0a90 	vmov	r0, s15
 800108a:	f001 fdb5 	bl	8002bf8 <Moving_Average_Compute>
 800108e:	ec53 2b10 	vmov	r2, r3, d0
 8001092:	4610      	mov	r0, r2
 8001094:	4619      	mov	r1, r3
 8001096:	f7ff fda7 	bl	8000be8 <__aeabi_d2f>
 800109a:	4603      	mov	r3, r0
 800109c:	607b      	str	r3, [r7, #4]
	if(handle == T210){
 800109e:	4b7b      	ldr	r3, [pc, #492]	; (800128c <get_actual_temperature+0x21c>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d14e      	bne.n	8001144 <get_actual_temperature+0xd4>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fa4e 	bl	8000548 <__aeabi_f2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8001230 <get_actual_temperature+0x1c0>
 80010b4:	ec43 2b10 	vmov	d0, r2, r3
 80010b8:	f00c ffec 	bl	800e094 <pow>
 80010bc:	ec51 0b10 	vmov	r0, r1, d0
 80010c0:	a35d      	add	r3, pc, #372	; (adr r3, 8001238 <get_actual_temperature+0x1c8>)
 80010c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c6:	f7ff fa97 	bl	80005f8 <__aeabi_dmul>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	4614      	mov	r4, r2
 80010d0:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fa38 	bl	8000548 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	ed9f 1b58 	vldr	d1, [pc, #352]	; 8001240 <get_actual_temperature+0x1d0>
 80010e0:	ec43 2b10 	vmov	d0, r2, r3
 80010e4:	f00c ffd6 	bl	800e094 <pow>
 80010e8:	ec51 0b10 	vmov	r0, r1, d0
 80010ec:	a356      	add	r3, pc, #344	; (adr r3, 8001248 <get_actual_temperature+0x1d8>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	f7ff fa81 	bl	80005f8 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff f8c5 	bl	800028c <__adddf3>
 8001102:	4602      	mov	r2, r0
 8001104:	460b      	mov	r3, r1
 8001106:	4614      	mov	r4, r2
 8001108:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T210 + TC_temperature_temp*TC_COMPENSATION_X1_T210 + TC_COMPENSATION_X0_T210;
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fa1c 	bl	8000548 <__aeabi_f2d>
 8001110:	a34f      	add	r3, pc, #316	; (adr r3, 8001250 <get_actual_temperature+0x1e0>)
 8001112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001116:	f7ff fa6f 	bl	80005f8 <__aeabi_dmul>
 800111a:	4602      	mov	r2, r0
 800111c:	460b      	mov	r3, r1
 800111e:	4620      	mov	r0, r4
 8001120:	4629      	mov	r1, r5
 8001122:	f7ff f8b3 	bl	800028c <__adddf3>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	a34a      	add	r3, pc, #296	; (adr r3, 8001258 <get_actual_temperature+0x1e8>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff f8aa 	bl	800028c <__adddf3>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T210 +
 800113c:	4954      	ldr	r1, [pc, #336]	; (8001290 <get_actual_temperature+0x220>)
 800113e:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8001142:	e051      	b.n	80011e8 <get_actual_temperature+0x178>
	}
	else if(handle == T245){
 8001144:	4b51      	ldr	r3, [pc, #324]	; (800128c <get_actual_temperature+0x21c>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d14d      	bne.n	80011e8 <get_actual_temperature+0x178>
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff f9fb 	bl	8000548 <__aeabi_f2d>
 8001152:	4602      	mov	r2, r0
 8001154:	460b      	mov	r3, r1
 8001156:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8001230 <get_actual_temperature+0x1c0>
 800115a:	ec43 2b10 	vmov	d0, r2, r3
 800115e:	f00c ff99 	bl	800e094 <pow>
 8001162:	ec51 0b10 	vmov	r0, r1, d0
 8001166:	a33e      	add	r3, pc, #248	; (adr r3, 8001260 <get_actual_temperature+0x1f0>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	f7ff fa44 	bl	80005f8 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	4614      	mov	r4, r2
 8001176:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff f9e5 	bl	8000548 <__aeabi_f2d>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 8001240 <get_actual_temperature+0x1d0>
 8001186:	ec43 2b10 	vmov	d0, r2, r3
 800118a:	f00c ff83 	bl	800e094 <pow>
 800118e:	ec51 0b10 	vmov	r0, r1, d0
 8001192:	a335      	add	r3, pc, #212	; (adr r3, 8001268 <get_actual_temperature+0x1f8>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff fa2e 	bl	80005f8 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 80011a0:	4620      	mov	r0, r4
 80011a2:	4629      	mov	r1, r5
 80011a4:	f7ff f872 	bl	800028c <__adddf3>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4614      	mov	r4, r2
 80011ae:	461d      	mov	r5, r3
				pow(TC_temperature_temp, 2)*TC_COMPENSATION_X2_T245 + TC_temperature_temp*TC_COMPENSATION_X1_T245 + TC_COMPENSATION_X0_T245;
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f7ff f9c9 	bl	8000548 <__aeabi_f2d>
 80011b6:	a32e      	add	r3, pc, #184	; (adr r3, 8001270 <get_actual_temperature+0x200>)
 80011b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011bc:	f7ff fa1c 	bl	80005f8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4620      	mov	r0, r4
 80011c6:	4629      	mov	r1, r5
 80011c8:	f7ff f860 	bl	800028c <__adddf3>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	a328      	add	r3, pc, #160	; (adr r3, 8001278 <get_actual_temperature+0x208>)
 80011d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011da:	f7ff f857 	bl	800028c <__adddf3>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
		sensor_values.actual_temperature = pow(TC_temperature_temp, 3)*TC_COMPENSATION_X3_T245 +
 80011e2:	492b      	ldr	r1, [pc, #172]	; (8001290 <get_actual_temperature+0x220>)
 80011e4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	}
	sensor_values.actual_temperature = sensor_values.actual_temperature + flash_values.temperature_offset; // Add temperature offset value
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <get_actual_temperature+0x220>)
 80011ea:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80011ee:	4b29      	ldr	r3, [pc, #164]	; (8001294 <get_actual_temperature+0x224>)
 80011f0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80011f4:	f7ff f84a 	bl	800028c <__adddf3>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4924      	ldr	r1, [pc, #144]	; (8001290 <get_actual_temperature+0x220>)
 80011fe:	e9c1 2302 	strd	r2, r3, [r1, #8]
	if(sensor_values.actual_temperature > 999){
 8001202:	4b23      	ldr	r3, [pc, #140]	; (8001290 <get_actual_temperature+0x220>)
 8001204:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001208:	a31d      	add	r3, pc, #116	; (adr r3, 8001280 <get_actual_temperature+0x210>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff fc83 	bl	8000b18 <__aeabi_dcmpgt>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d100      	bne.n	800121a <get_actual_temperature+0x1aa>
		sensor_values.actual_temperature = 999;
	}
}
 8001218:	e005      	b.n	8001226 <get_actual_temperature+0x1b6>
		sensor_values.actual_temperature = 999;
 800121a:	491d      	ldr	r1, [pc, #116]	; (8001290 <get_actual_temperature+0x220>)
 800121c:	a318      	add	r3, pc, #96	; (adr r3, 8001280 <get_actual_temperature+0x210>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	e9c1 2302 	strd	r2, r3, [r1, #8]
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bdb0      	pop	{r4, r5, r7, pc}
 800122e:	bf00      	nop
 8001230:	00000000 	.word	0x00000000
 8001234:	40080000 	.word	0x40080000
 8001238:	e6c91459 	.word	0xe6c91459
 800123c:	be3d333c 	.word	0xbe3d333c
 8001240:	00000000 	.word	0x00000000
 8001244:	40000000 	.word	0x40000000
 8001248:	77c4dab0 	.word	0x77c4dab0
 800124c:	bed98561 	.word	0xbed98561
 8001250:	0aa653bc 	.word	0x0aa653bc
 8001254:	3fd1585a 	.word	0x3fd1585a
 8001258:	d797deed 	.word	0xd797deed
 800125c:	40396624 	.word	0x40396624
 8001260:	b4effad8 	.word	0xb4effad8
 8001264:	3e21f933 	.word	0x3e21f933
 8001268:	c7e1dac1 	.word	0xc7e1dac1
 800126c:	bee97525 	.word	0xbee97525
 8001270:	8d8ee863 	.word	0x8d8ee863
 8001274:	3fbe16b0 	.word	0x3fbe16b0
 8001278:	7373b751 	.word	0x7373b751
 800127c:	40390d47 	.word	0x40390d47
 8001280:	00000000 	.word	0x00000000
 8001284:	408f3800 	.word	0x408f3800
 8001288:	20000414 	.word	0x20000414
 800128c:	200002ec 	.word	0x200002ec
 8001290:	20000038 	.word	0x20000038
 8001294:	200003c8 	.word	0x200003c8

08001298 <get_ambient_temp>:

void get_ambient_temp(){
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	//Index 1 is PCB temp
	/* Moving average filter */
	sensor_values.ambient_temperature = ((Moving_Average_Compute(get_mean_ADC_reading(1), &ambient_temperature_filter_struct)*AMBIENT_TEMP_COMPENSATION)-0.4)/0.0195;
 800129c:	2001      	movs	r0, #1
 800129e:	f7ff fe85 	bl	8000fac <get_mean_ADC_reading>
 80012a2:	eef0 7a40 	vmov.f32	s15, s0
 80012a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012aa:	491b      	ldr	r1, [pc, #108]	; (8001318 <get_ambient_temp+0x80>)
 80012ac:	ee17 0a90 	vmov	r0, s15
 80012b0:	f001 fca2 	bl	8002bf8 <Moving_Average_Compute>
 80012b4:	ec51 0b10 	vmov	r0, r1, d0
 80012b8:	a311      	add	r3, pc, #68	; (adr r3, 8001300 <get_ambient_temp+0x68>)
 80012ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012be:	f7ff f99b 	bl	80005f8 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	a30f      	add	r3, pc, #60	; (adr r3, 8001308 <get_ambient_temp+0x70>)
 80012cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d0:	f7fe ffda 	bl	8000288 <__aeabi_dsub>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4610      	mov	r0, r2
 80012da:	4619      	mov	r1, r3
 80012dc:	a30c      	add	r3, pc, #48	; (adr r3, 8001310 <get_ambient_temp+0x78>)
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	f7ff fab3 	bl	800084c <__aeabi_ddiv>
 80012e6:	4602      	mov	r2, r0
 80012e8:	460b      	mov	r3, r1
 80012ea:	4610      	mov	r0, r2
 80012ec:	4619      	mov	r1, r3
 80012ee:	f7ff fc7b 	bl	8000be8 <__aeabi_d2f>
 80012f2:	4603      	mov	r3, r0
 80012f4:	4a09      	ldr	r2, [pc, #36]	; (800131c <get_ambient_temp+0x84>)
 80012f6:	61d3      	str	r3, [r2, #28]
	//• Positive slope sensor gain, offset (typical):
	//– 19.5 mV/°C, 400 mV at 0°C (TMP236-Q1) From data sheet
}
 80012f8:	bf00      	nop
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	f3af 8000 	nop.w
 8001300:	e3fc03eb 	.word	0xe3fc03eb
 8001304:	3f4a680c 	.word	0x3f4a680c
 8001308:	9999999a 	.word	0x9999999a
 800130c:	3fd99999 	.word	0x3fd99999
 8001310:	d916872b 	.word	0xd916872b
 8001314:	3f93f7ce 	.word	0x3f93f7ce
 8001318:	20000740 	.word	0x20000740
 800131c:	20000038 	.word	0x20000038

08001320 <debugPrint>:

void debugPrint(char _out[]){
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS((uint8_t *) _out, strlen(_out));
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <update_OLED>:

void update_OLED(){
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
	}
	Show image on page
	OLED_1in5_Display(black_image);
	Paint_Clear(BLACK);
	*/
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
	...

08001344 <get_set_temperature>:

/* Get encoder value (Set temp.) and limit is NOT heating_halted*/
void get_set_temperature(){
 8001344:	b598      	push	{r3, r4, r7, lr}
 8001346:	af00      	add	r7, sp, #0
	TIM2->CNT = clamp(TIM2->CNT, min_selectable_temperature, max_selectable_temperature);
 8001348:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f8d8 	bl	8000504 <__aeabi_ui2d>
 8001354:	4b14      	ldr	r3, [pc, #80]	; (80013a8 <get_set_temperature+0x64>)
 8001356:	ed93 7b00 	vldr	d7, [r3]
 800135a:	4b14      	ldr	r3, [pc, #80]	; (80013ac <get_set_temperature+0x68>)
 800135c:	ed93 6b00 	vldr	d6, [r3]
 8001360:	eeb0 2a46 	vmov.f32	s4, s12
 8001364:	eef0 2a66 	vmov.f32	s5, s13
 8001368:	eeb0 1a47 	vmov.f32	s2, s14
 800136c:	eef0 1a67 	vmov.f32	s3, s15
 8001370:	ec41 0b10 	vmov	d0, r0, r1
 8001374:	f7ff fdea 	bl	8000f4c <clamp>
 8001378:	ec53 2b10 	vmov	r2, r3, d0
 800137c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	f7ff fc10 	bl	8000ba8 <__aeabi_d2uiz>
 8001388:	4603      	mov	r3, r0
 800138a:	6263      	str	r3, [r4, #36]	; 0x24
	sensor_values.set_temperature = TIM2->CNT;
 800138c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001392:	4618      	mov	r0, r3
 8001394:	f7ff f8b6 	bl	8000504 <__aeabi_ui2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4904      	ldr	r1, [pc, #16]	; (80013b0 <get_set_temperature+0x6c>)
 800139e:	e9c1 2300 	strd	r2, r3, [r1]
}
 80013a2:	bf00      	nop
 80013a4:	bd98      	pop	{r3, r4, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000030 	.word	0x20000030
 80013ac:	200003c0 	.word	0x200003c0
 80013b0:	20000038 	.word	0x20000038

080013b4 <beep_ms>:

/* Beep the buzzer for beep_time_ms */
void beep_ms(uint16_t beep_time_ms){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	80fb      	strh	r3, [r7, #6]
	//if(flash_values.buzzer_enable){
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 50);
 80013be:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <beep_ms+0x2c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2232      	movs	r2, #50	; 0x32
 80013c4:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(beep_time_ms);
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 f9ef 	bl	80047ac <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <beep_ms+0x2c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	2200      	movs	r2, #0
 80013d4:	635a      	str	r2, [r3, #52]	; 0x34
	//}
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20001920 	.word	0x20001920

080013e4 <check_beep>:

/* Create a beep is beep is requested */
void check_beep(){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	if(beep_requested){
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <check_beep+0x1c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d005      	beq.n	80013fc <check_beep+0x18>
		beep_ms(5);
 80013f0:	2005      	movs	r0, #5
 80013f2:	f7ff ffdf 	bl	80013b4 <beep_ms>
		beep_requested = 0;
 80013f6:	4b02      	ldr	r3, [pc, #8]	; (8001400 <check_beep+0x1c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
	}
}
 80013fc:	bf00      	nop
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200002ed 	.word	0x200002ed
 8001404:	00000000 	.word	0x00000000

08001408 <check_emergency_shutdown>:

/* Function to set state to EMERGENCY_SLEEP */
void check_emergency_shutdown(){
 8001408:	b5b0      	push	{r4, r5, r7, lr}
 800140a:	af00      	add	r7, sp, #0
	/* Function to set state to EMERGENCY_SLEEP if iron is in RUN state for longer than EMERGENCY_shutdown_time */
	if(!sensor_values.previous_state == RUN  && active_state == RUN){
 800140c:	4b32      	ldr	r3, [pc, #200]	; (80014d8 <check_emergency_shutdown+0xd0>)
 800140e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001412:	2b00      	cmp	r3, #0
 8001414:	d008      	beq.n	8001428 <check_emergency_shutdown+0x20>
 8001416:	4b31      	ldr	r3, [pc, #196]	; (80014dc <check_emergency_shutdown+0xd4>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d104      	bne.n	8001428 <check_emergency_shutdown+0x20>
		previous_millis_left_stand = HAL_GetTick();
 800141e:	f003 f9b9 	bl	8004794 <HAL_GetTick>
 8001422:	4603      	mov	r3, r0
 8001424:	4a2e      	ldr	r2, [pc, #184]	; (80014e0 <check_emergency_shutdown+0xd8>)
 8001426:	6013      	str	r3, [r2, #0]
	}
	if ((sensor_values.in_stand == 0) && (HAL_GetTick() - previous_millis_left_stand >= flash_values.emergency_time*60000) && active_state == RUN){
 8001428:	4b2b      	ldr	r3, [pc, #172]	; (80014d8 <check_emergency_shutdown+0xd0>)
 800142a:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	f7ff fb47 	bl	8000ac8 <__aeabi_dcmpeq>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d025      	beq.n	800148c <check_emergency_shutdown+0x84>
 8001440:	f003 f9a8 	bl	8004794 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	4b26      	ldr	r3, [pc, #152]	; (80014e0 <check_emergency_shutdown+0xd8>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f859 	bl	8000504 <__aeabi_ui2d>
 8001452:	4604      	mov	r4, r0
 8001454:	460d      	mov	r5, r1
 8001456:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <check_emergency_shutdown+0xdc>)
 8001458:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 800145c:	a31a      	add	r3, pc, #104	; (adr r3, 80014c8 <check_emergency_shutdown+0xc0>)
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	f7ff f8c9 	bl	80005f8 <__aeabi_dmul>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	4620      	mov	r0, r4
 800146c:	4629      	mov	r1, r5
 800146e:	f7ff fb49 	bl	8000b04 <__aeabi_dcmpge>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d009      	beq.n	800148c <check_emergency_shutdown+0x84>
 8001478:	4b18      	ldr	r3, [pc, #96]	; (80014dc <check_emergency_shutdown+0xd4>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <check_emergency_shutdown+0x84>
		active_state = EMERGENCY_SLEEP;
 8001480:	4b16      	ldr	r3, [pc, #88]	; (80014dc <check_emergency_shutdown+0xd4>)
 8001482:	2203      	movs	r2, #3
 8001484:	701a      	strb	r2, [r3, #0]
		beep_requested = 1;
 8001486:	4b18      	ldr	r3, [pc, #96]	; (80014e8 <check_emergency_shutdown+0xe0>)
 8001488:	2201      	movs	r2, #1
 800148a:	701a      	strb	r2, [r3, #0]
	}
	sensor_values.previous_state = active_state;
 800148c:	4b13      	ldr	r3, [pc, #76]	; (80014dc <check_emergency_shutdown+0xd4>)
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <check_emergency_shutdown+0xd0>)
 8001492:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	/* Function to set state to EMERGENCY_SLEEP if iron is over max allowed temp */
	if((sensor_values.actual_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <check_emergency_shutdown+0xd0>)
 8001498:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800149c:	a30c      	add	r3, pc, #48	; (adr r3, 80014d0 <check_emergency_shutdown+0xc8>)
 800149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a2:	f7ff fb39 	bl	8000b18 <__aeabi_dcmpgt>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d100      	bne.n	80014ae <check_emergency_shutdown+0xa6>
		active_state = EMERGENCY_SLEEP;
		beep_requested = 1;
	}
}
 80014ac:	e009      	b.n	80014c2 <check_emergency_shutdown+0xba>
	if((sensor_values.actual_temperature > EMERGENCY_SHUTDOWN_TEMPERATURE) && (active_state == RUN)){
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <check_emergency_shutdown+0xd4>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <check_emergency_shutdown+0xba>
		active_state = EMERGENCY_SLEEP;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <check_emergency_shutdown+0xd4>)
 80014b8:	2203      	movs	r2, #3
 80014ba:	701a      	strb	r2, [r3, #0]
		beep_requested = 1;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <check_emergency_shutdown+0xe0>)
 80014be:	2201      	movs	r2, #1
 80014c0:	701a      	strb	r2, [r3, #0]
}
 80014c2:	bf00      	nop
 80014c4:	bdb0      	pop	{r4, r5, r7, pc}
 80014c6:	bf00      	nop
 80014c8:	00000000 	.word	0x00000000
 80014cc:	40ed4c00 	.word	0x40ed4c00
 80014d0:	00000000 	.word	0x00000000
 80014d4:	407db000 	.word	0x407db000
 80014d8:	20000038 	.word	0x20000038
 80014dc:	20000028 	.word	0x20000028
 80014e0:	20000300 	.word	0x20000300
 80014e4:	200003c8 	.word	0x200003c8
 80014e8:	200002ed 	.word	0x200002ed
 80014ec:	00000000 	.word	0x00000000

080014f0 <get_enc_button_status>:

/* Function to toggle between RUN and HALTED at each press of the encoder button */
void get_enc_button_status(){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
	uint8_t button_status;
	if(HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 80014f6:	2110      	movs	r1, #16
 80014f8:	482b      	ldr	r0, [pc, #172]	; (80015a8 <get_enc_button_status+0xb8>)
 80014fa:	f005 ffbf 	bl	800747c <HAL_GPIO_ReadPin>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b01      	cmp	r3, #1
 8001502:	d102      	bne.n	800150a <get_enc_button_status+0x1a>
		button_status = 1;
 8001504:	2301      	movs	r3, #1
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	e001      	b.n	800150e <get_enc_button_status+0x1e>
	}
	else{
		button_status = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.enc_button_status = Moving_Average_Compute(button_status, &enc_button_sense_filterStruct); /* Moving average filter */
 800150e:	79fb      	ldrb	r3, [r7, #7]
 8001510:	4926      	ldr	r1, [pc, #152]	; (80015ac <get_enc_button_status+0xbc>)
 8001512:	4618      	mov	r0, r3
 8001514:	f001 fb70 	bl	8002bf8 <Moving_Average_Compute>
 8001518:	eeb0 7a40 	vmov.f32	s14, s0
 800151c:	eef0 7a60 	vmov.f32	s15, s1
 8001520:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <get_enc_button_status+0xc0>)
 8001522:	ed83 7b0e 	vstr	d7, [r3, #56]	; 0x38

	/* If encoder button is pressed */
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 8001526:	4b22      	ldr	r3, [pc, #136]	; (80015b0 <get_enc_button_status+0xc0>)
 8001528:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800152c:	a31c      	add	r3, pc, #112	; (adr r3, 80015a0 <get_enc_button_status+0xb0>)
 800152e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001532:	f7ff faf1 	bl	8000b18 <__aeabi_dcmpgt>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d100      	bne.n	800153e <get_enc_button_status+0x4e>
		else if (active_state == EMERGENCY_SLEEP){
			active_state = RUN;
		}
		previous_millis_heating_halted_update = HAL_GetTick();
	}
}
 800153c:	e02c      	b.n	8001598 <get_enc_button_status+0xa8>
	if((sensor_values.enc_button_status > 0.8) && (HAL_GetTick()-previous_millis_heating_halted_update >= interval_heating_halted_update)){
 800153e:	f003 f929 	bl	8004794 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <get_enc_button_status+0xc4>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	1ad2      	subs	r2, r2, r3
 800154a:	4b1b      	ldr	r3, [pc, #108]	; (80015b8 <get_enc_button_status+0xc8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	429a      	cmp	r2, r3
 8001550:	d322      	bcc.n	8001598 <get_enc_button_status+0xa8>
		beep_requested = 1;
 8001552:	4b1a      	ldr	r3, [pc, #104]	; (80015bc <get_enc_button_status+0xcc>)
 8001554:	2201      	movs	r2, #1
 8001556:	701a      	strb	r2, [r3, #0]
		if ((active_state == RUN) || (active_state == STANDBY)){
 8001558:	4b19      	ldr	r3, [pc, #100]	; (80015c0 <get_enc_button_status+0xd0>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <get_enc_button_status+0x78>
 8001560:	4b17      	ldr	r3, [pc, #92]	; (80015c0 <get_enc_button_status+0xd0>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d103      	bne.n	8001570 <get_enc_button_status+0x80>
			active_state = HALTED;
 8001568:	4b15      	ldr	r3, [pc, #84]	; (80015c0 <get_enc_button_status+0xd0>)
 800156a:	2204      	movs	r2, #4
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e00e      	b.n	800158e <get_enc_button_status+0x9e>
		else if (active_state == HALTED){
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <get_enc_button_status+0xd0>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b04      	cmp	r3, #4
 8001576:	d103      	bne.n	8001580 <get_enc_button_status+0x90>
			active_state = RUN;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <get_enc_button_status+0xd0>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
 800157e:	e006      	b.n	800158e <get_enc_button_status+0x9e>
		else if (active_state == EMERGENCY_SLEEP){
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <get_enc_button_status+0xd0>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d102      	bne.n	800158e <get_enc_button_status+0x9e>
			active_state = RUN;
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <get_enc_button_status+0xd0>)
 800158a:	2200      	movs	r2, #0
 800158c:	701a      	strb	r2, [r3, #0]
		previous_millis_heating_halted_update = HAL_GetTick();
 800158e:	f003 f901 	bl	8004794 <HAL_GetTick>
 8001592:	4603      	mov	r3, r0
 8001594:	4a07      	ldr	r2, [pc, #28]	; (80015b4 <get_enc_button_status+0xc4>)
 8001596:	6013      	str	r3, [r2, #0]
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	9999999a 	.word	0x9999999a
 80015a4:	3fe99999 	.word	0x3fe99999
 80015a8:	48000400 	.word	0x48000400
 80015ac:	200013f0 	.word	0x200013f0
 80015b0:	20000038 	.word	0x20000038
 80015b4:	200002fc 	.word	0x200002fc
 80015b8:	20000020 	.word	0x20000020
 80015bc:	200002ed 	.word	0x200002ed
 80015c0:	20000028 	.word	0x20000028
 80015c4:	00000000 	.word	0x00000000

080015c8 <get_stand_status>:

/* Get the status of handle in/on stand to trigger SLEEP */
void get_stand_status(){
 80015c8:	b5b0      	push	{r4, r5, r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
	uint8_t stand_status;
	if(HAL_GPIO_ReadPin (GPIOA, STAND_INP_Pin) == 0){
 80015ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d6:	f005 ff51 	bl	800747c <HAL_GPIO_ReadPin>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d102      	bne.n	80015e6 <get_stand_status+0x1e>
		stand_status = 1;
 80015e0:	2301      	movs	r3, #1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	e001      	b.n	80015ea <get_stand_status+0x22>
	}
	else{
		stand_status = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.in_stand = Moving_Average_Compute(stand_status, &stand_sense_filterStruct); /* Moving average filter */
 80015ea:	79fb      	ldrb	r3, [r7, #7]
 80015ec:	4938      	ldr	r1, [pc, #224]	; (80016d0 <get_stand_status+0x108>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f001 fb02 	bl	8002bf8 <Moving_Average_Compute>
 80015f4:	eeb0 7a40 	vmov.f32	s14, s0
 80015f8:	eef0 7a60 	vmov.f32	s15, s1
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <get_stand_status+0x10c>)
 80015fe:	ed83 7b08 	vstr	d7, [r3, #32]

	/* If handle is in stand set state to STANDBY */
	if(sensor_values.in_stand > 0.5){
 8001602:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <get_stand_status+0x10c>)
 8001604:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	4b32      	ldr	r3, [pc, #200]	; (80016d8 <get_stand_status+0x110>)
 800160e:	f7ff fa83 	bl	8000b18 <__aeabi_dcmpgt>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d039      	beq.n	800168c <get_stand_status+0xc4>
		if(active_state == RUN){
 8001618:	4b30      	ldr	r3, [pc, #192]	; (80016dc <get_stand_status+0x114>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d107      	bne.n	8001630 <get_stand_status+0x68>
			active_state = STANDBY;
 8001620:	4b2e      	ldr	r3, [pc, #184]	; (80016dc <get_stand_status+0x114>)
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
			previous_standby_millis = HAL_GetTick();
 8001626:	f003 f8b5 	bl	8004794 <HAL_GetTick>
 800162a:	4603      	mov	r3, r0
 800162c:	4a2c      	ldr	r2, [pc, #176]	; (80016e0 <get_stand_status+0x118>)
 800162e:	6013      	str	r3, [r2, #0]
		}
		if((HAL_GetTick()-previous_standby_millis >= flash_values.standby_time*60000.0) && (active_state == STANDBY)){
 8001630:	f003 f8b0 	bl	8004794 <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	4b2a      	ldr	r3, [pc, #168]	; (80016e0 <get_stand_status+0x118>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff61 	bl	8000504 <__aeabi_ui2d>
 8001642:	4604      	mov	r4, r0
 8001644:	460d      	mov	r5, r1
 8001646:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <get_stand_status+0x11c>)
 8001648:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800164c:	a31e      	add	r3, pc, #120	; (adr r3, 80016c8 <get_stand_status+0x100>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7fe ffd1 	bl	80005f8 <__aeabi_dmul>
 8001656:	4602      	mov	r2, r0
 8001658:	460b      	mov	r3, r1
 800165a:	4620      	mov	r0, r4
 800165c:	4629      	mov	r1, r5
 800165e:	f7ff fa51 	bl	8000b04 <__aeabi_dcmpge>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <get_stand_status+0xae>
 8001668:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <get_stand_status+0x114>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d102      	bne.n	8001676 <get_stand_status+0xae>
			active_state = SLEEP;
 8001670:	4b1a      	ldr	r3, [pc, #104]	; (80016dc <get_stand_status+0x114>)
 8001672:	2202      	movs	r2, #2
 8001674:	701a      	strb	r2, [r3, #0]
		}
		if((active_state == EMERGENCY_SLEEP) || (active_state == HALTED)){
 8001676:	4b19      	ldr	r3, [pc, #100]	; (80016dc <get_stand_status+0x114>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	2b03      	cmp	r3, #3
 800167c:	d003      	beq.n	8001686 <get_stand_status+0xbe>
 800167e:	4b17      	ldr	r3, [pc, #92]	; (80016dc <get_stand_status+0x114>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b04      	cmp	r3, #4
 8001684:	d102      	bne.n	800168c <get_stand_status+0xc4>
			active_state = SLEEP;
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <get_stand_status+0x114>)
 8001688:	2202      	movs	r2, #2
 800168a:	701a      	strb	r2, [r3, #0]
		}
	}

	/* If handle is NOT in stand and state is SLEEP, change state to RUN */
	if(sensor_values.in_stand < 0.5){
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <get_stand_status+0x10c>)
 800168e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <get_stand_status+0x110>)
 8001698:	f7ff fa20 	bl	8000adc <__aeabi_dcmplt>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d100      	bne.n	80016a4 <get_stand_status+0xdc>
		if((active_state == SLEEP) || (active_state == STANDBY)){
			active_state = RUN;
		}
	}
}
 80016a2:	e00a      	b.n	80016ba <get_stand_status+0xf2>
		if((active_state == SLEEP) || (active_state == STANDBY)){
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <get_stand_status+0x114>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d003      	beq.n	80016b4 <get_stand_status+0xec>
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <get_stand_status+0x114>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d102      	bne.n	80016ba <get_stand_status+0xf2>
			active_state = RUN;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <get_stand_status+0x114>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	701a      	strb	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bdb0      	pop	{r4, r5, r7, pc}
 80016c2:	bf00      	nop
 80016c4:	f3af 8000 	nop.w
 80016c8:	00000000 	.word	0x00000000
 80016cc:	40ed4c00 	.word	0x40ed4c00
 80016d0:	20000d98 	.word	0x20000d98
 80016d4:	20000038 	.word	0x20000038
 80016d8:	3fe00000 	.word	0x3fe00000
 80016dc:	20000028 	.word	0x20000028
 80016e0:	20000304 	.word	0x20000304
 80016e4:	200003c8 	.word	0x200003c8

080016e8 <get_handle_type>:

/* Automatically detect handle type, T210 or T245 based on HANDLE_DETECTION_Pin, which is connected to BLUE for T210.*/
void get_handle_type(){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
	uint8_t handle_status;
	if(HAL_GPIO_ReadPin (GPIOB, HANDLE_INP_1_Pin) == 0){
 80016ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016f2:	4841      	ldr	r0, [pc, #260]	; (80017f8 <get_handle_type+0x110>)
 80016f4:	f005 fec2 	bl	800747c <HAL_GPIO_ReadPin>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d102      	bne.n	8001704 <get_handle_type+0x1c>
		handle_status = 1;
 80016fe:	2301      	movs	r3, #1
 8001700:	71fb      	strb	r3, [r7, #7]
 8001702:	e001      	b.n	8001708 <get_handle_type+0x20>
	}
	else{
		handle_status = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	71fb      	strb	r3, [r7, #7]
	}
	sensor_values.handle_sense = Moving_Average_Compute(handle_status, &handle_sense_filterStruct); /* Moving average filter */
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	493c      	ldr	r1, [pc, #240]	; (80017fc <get_handle_type+0x114>)
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fa73 	bl	8002bf8 <Moving_Average_Compute>
 8001712:	eeb0 7a40 	vmov.f32	s14, s0
 8001716:	eef0 7a60 	vmov.f32	s15, s1
 800171a:	4b39      	ldr	r3, [pc, #228]	; (8001800 <get_handle_type+0x118>)
 800171c:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28

	/* If the handle_sense is high -> T210 handle is detected */
	if(sensor_values.handle_sense > 0.5){
 8001720:	4b37      	ldr	r3, [pc, #220]	; (8001800 <get_handle_type+0x118>)
 8001722:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001726:	f04f 0200 	mov.w	r2, #0
 800172a:	4b36      	ldr	r3, [pc, #216]	; (8001804 <get_handle_type+0x11c>)
 800172c:	f7ff f9f4 	bl	8000b18 <__aeabi_dcmpgt>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d01e      	beq.n	8001774 <get_handle_type+0x8c>
		handle = T210;
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <get_handle_type+0x120>)
 8001738:	2201      	movs	r2, #1
 800173a:	701a      	strb	r2, [r3, #0]
		max_power_watt = 60; //60W
 800173c:	4b33      	ldr	r3, [pc, #204]	; (800180c <get_handle_type+0x124>)
 800173e:	4a34      	ldr	r2, [pc, #208]	; (8001810 <get_handle_type+0x128>)
 8001740:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 450; //450 deg C
 8001742:	4934      	ldr	r1, [pc, #208]	; (8001814 <get_handle_type+0x12c>)
 8001744:	a328      	add	r3, pc, #160	; (adr r3, 80017e8 <get_handle_type+0x100>)
 8001746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800174a:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 10;
 800174e:	4932      	ldr	r1, [pc, #200]	; (8001818 <get_handle_type+0x130>)
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	4b31      	ldr	r3, [pc, #196]	; (800181c <get_handle_type+0x134>)
 8001756:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 800175a:	4931      	ldr	r1, [pc, #196]	; (8001820 <get_handle_type+0x138>)
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	4b30      	ldr	r3, [pc, #192]	; (8001824 <get_handle_type+0x13c>)
 8001762:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.25;
 8001766:	4930      	ldr	r1, [pc, #192]	; (8001828 <get_handle_type+0x140>)
 8001768:	f04f 0200 	mov.w	r2, #0
 800176c:	4b2f      	ldr	r3, [pc, #188]	; (800182c <get_handle_type+0x144>)
 800176e:	e9c1 2300 	strd	r2, r3, [r1]
 8001772:	e01d      	b.n	80017b0 <get_handle_type+0xc8>
	}
	/* If the handle_sense is low -> T245 Handle */
	else{
		handle = T245;
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <get_handle_type+0x120>)
 8001776:	2202      	movs	r2, #2
 8001778:	701a      	strb	r2, [r3, #0]
		max_power_watt = 120; //120W
 800177a:	4b24      	ldr	r3, [pc, #144]	; (800180c <get_handle_type+0x124>)
 800177c:	4a2c      	ldr	r2, [pc, #176]	; (8001830 <get_handle_type+0x148>)
 800177e:	601a      	str	r2, [r3, #0]
		max_selectable_temperature = 430; //430 deg C
 8001780:	4924      	ldr	r1, [pc, #144]	; (8001814 <get_handle_type+0x12c>)
 8001782:	a31b      	add	r3, pc, #108	; (adr r3, 80017f0 <get_handle_type+0x108>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	e9c1 2300 	strd	r2, r3, [r1]
		Kp = 15;
 800178c:	4922      	ldr	r1, [pc, #136]	; (8001818 <get_handle_type+0x130>)
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	4b28      	ldr	r3, [pc, #160]	; (8001834 <get_handle_type+0x14c>)
 8001794:	e9c1 2300 	strd	r2, r3, [r1]
		Ki = 30;
 8001798:	4921      	ldr	r1, [pc, #132]	; (8001820 <get_handle_type+0x138>)
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	4b21      	ldr	r3, [pc, #132]	; (8001824 <get_handle_type+0x13c>)
 80017a0:	e9c1 2300 	strd	r2, r3, [r1]
		Kd = 0.5;
 80017a4:	4920      	ldr	r1, [pc, #128]	; (8001828 <get_handle_type+0x140>)
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4b16      	ldr	r3, [pc, #88]	; (8001804 <get_handle_type+0x11c>)
 80017ac:	e9c1 2300 	strd	r2, r3, [r1]
	}
	PID_SetTunings(&TPID, Kp, Ki, Kd); // Update PID parameters based on handle type
 80017b0:	4b19      	ldr	r3, [pc, #100]	; (8001818 <get_handle_type+0x130>)
 80017b2:	ed93 7b00 	vldr	d7, [r3]
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <get_handle_type+0x138>)
 80017b8:	ed93 6b00 	vldr	d6, [r3]
 80017bc:	4b1a      	ldr	r3, [pc, #104]	; (8001828 <get_handle_type+0x140>)
 80017be:	ed93 5b00 	vldr	d5, [r3]
 80017c2:	eeb0 2a45 	vmov.f32	s4, s10
 80017c6:	eef0 2a65 	vmov.f32	s5, s11
 80017ca:	eeb0 1a46 	vmov.f32	s2, s12
 80017ce:	eef0 1a66 	vmov.f32	s3, s13
 80017d2:	eeb0 0a47 	vmov.f32	s0, s14
 80017d6:	eef0 0a67 	vmov.f32	s1, s15
 80017da:	4817      	ldr	r0, [pc, #92]	; (8001838 <get_handle_type+0x150>)
 80017dc:	f001 fce3 	bl	80031a6 <PID_SetTunings>
}
 80017e0:	bf00      	nop
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	00000000 	.word	0x00000000
 80017ec:	407c2000 	.word	0x407c2000
 80017f0:	00000000 	.word	0x00000000
 80017f4:	407ae000 	.word	0x407ae000
 80017f8:	48000400 	.word	0x48000400
 80017fc:	200010c4 	.word	0x200010c4
 8001800:	20000038 	.word	0x20000038
 8001804:	3fe00000 	.word	0x3fe00000
 8001808:	200002ec 	.word	0x200002ec
 800180c:	20000350 	.word	0x20000350
 8001810:	42700000 	.word	0x42700000
 8001814:	200003c0 	.word	0x200003c0
 8001818:	20000310 	.word	0x20000310
 800181c:	40240000 	.word	0x40240000
 8001820:	20000318 	.word	0x20000318
 8001824:	403e0000 	.word	0x403e0000
 8001828:	20000320 	.word	0x20000320
 800182c:	3fd00000 	.word	0x3fd00000
 8001830:	42f00000 	.word	0x42f00000
 8001834:	402e0000 	.word	0x402e0000
 8001838:	20001a50 	.word	0x20001a50

0800183c <HAL_TIM_IC_CaptureCallback>:
//void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
//    //HAL_GPIO_TogglePin(GPIOF, DEBUG_SIGNAL_A_Pin);
//}

/* Interrupts at every encoder increment */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7f1b      	ldrb	r3, [r3, #28]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d102      	bne.n	8001852 <HAL_TIM_IC_CaptureCallback+0x16>
		beep_requested = 1;
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <HAL_TIM_IC_CaptureCallback+0x24>)
 800184e:	2201      	movs	r2, #1
 8001850:	701a      	strb	r2, [r3, #0]
	}
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200002ed 	.word	0x200002ed

08001864 <set_heater_duty>:

/* Sets the duty cycle of timer controlling the heater */
void set_heater_duty(uint16_t dutycycle){
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, dutycycle);
 800186e:	4b05      	ldr	r3, [pc, #20]	; (8001884 <set_heater_duty+0x20>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	88fa      	ldrh	r2, [r7, #6]
 8001874:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	200019b8 	.word	0x200019b8

08001888 <HAL_TIM_PWM_PulseFinishedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if ((htim == &htim4) && (current_measurement_requested == 1) )
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a0d      	ldr	r2, [pc, #52]	; (80018c8 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d112      	bne.n	80018be <HAL_TIM_PWM_PulseFinishedCallback+0x36>
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d10e      	bne.n	80018be <HAL_TIM_PWM_PulseFinishedCallback+0x36>
  {
	  HAL_TIM_Base_Start_IT(&htim16);
 80018a0:	480b      	ldr	r0, [pc, #44]	; (80018d0 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 80018a2:	f008 f883 	bl	80099ac <HAL_TIM_Base_Start_IT>
	  set_heater_duty(duty_cycle); //Set duty cycle back to calculated
 80018a6:	4b0b      	ldr	r3, [pc, #44]	; (80018d4 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 80018a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ac:	4610      	mov	r0, r2
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff f97a 	bl	8000ba8 <__aeabi_d2uiz>
 80018b4:	4603      	mov	r3, r0
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff ffd3 	bl	8001864 <set_heater_duty>
  }
}
 80018be:	bf00      	nop
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	200019b8 	.word	0x200019b8
 80018cc:	20000410 	.word	0x20000410
 80018d0:	20001a04 	.word	0x20001a04
 80018d4:	20000408 	.word	0x20000408

080018d8 <HAL_TIM_PeriodElapsedCallback>:

// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim16 ){
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d10b      	bne.n	8001900 <HAL_TIM_PeriodElapsedCallback+0x28>
	  HAL_TIM_Base_Stop_IT(&htim16);
 80018e8:	4807      	ldr	r0, [pc, #28]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80018ea:	f008 f8c9 	bl	8009a80 <HAL_TIM_Base_Stop_IT>
	  //HAL_ADC_Start_IT(&hadc2);
	  HAL_ADCEx_InjectedStart_IT(&hadc1);
 80018ee:	4807      	ldr	r0, [pc, #28]	; (800190c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80018f0:	f003 ff3c 	bl	800576c <HAL_ADCEx_InjectedStart_IT>
	  HAL_GPIO_WritePin(GPIOA, USR_1_Pin, GPIO_PIN_SET);
 80018f4:	2201      	movs	r2, #1
 80018f6:	2101      	movs	r1, #1
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f005 fdd6 	bl	80074ac <HAL_GPIO_WritePin>
  }
}
 8001900:	bf00      	nop
 8001902:	3708      	adds	r7, #8
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20001a04 	.word	0x20001a04
 800190c:	2000171c 	.word	0x2000171c

08001910 <HAL_ADCEx_InjectedConvCpltCallback>:

void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	if(current_measurement_requested == 1){
 8001918:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b01      	cmp	r3, #1
 800191e:	d110      	bne.n	8001942 <HAL_ADCEx_InjectedConvCpltCallback+0x32>
		HAL_GPIO_WritePin(GPIOA, USR_1_Pin, GPIO_PIN_RESET);
 8001920:	2200      	movs	r2, #0
 8001922:	2101      	movs	r1, #1
 8001924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001928:	f005 fdc0 	bl	80074ac <HAL_GPIO_WritePin>
		ADC_buffer_current = HAL_ADCEx_InjectedGetValue(&hadc1,1);
 800192c:	2101      	movs	r1, #1
 800192e:	4808      	ldr	r0, [pc, #32]	; (8001950 <HAL_ADCEx_InjectedConvCpltCallback+0x40>)
 8001930:	f004 f828 	bl	8005984 <HAL_ADCEx_InjectedGetValue>
 8001934:	4603      	mov	r3, r0
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <HAL_ADCEx_InjectedConvCpltCallback+0x44>)
 800193a:	801a      	strh	r2, [r3, #0]
		current_measurement_requested = 0;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_ADCEx_InjectedConvCpltCallback+0x3c>)
 800193e:	2200      	movs	r2, #0
 8001940:	701a      	strb	r2, [r3, #0]
	}
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000410 	.word	0x20000410
 8001950:	2000171c 	.word	0x2000171c
 8001954:	2000002a 	.word	0x2000002a

08001958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001958:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800195c:	ed2d 8b06 	vpush	{d8-d10}
 8001960:	b09a      	sub	sp, #104	; 0x68
 8001962:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001964:	f002 febc 	bl	80046e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001968:	f000 fcf2 	bl	8002350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800196c:	f001 f888 	bl	8002a80 <MX_GPIO_Init>
  MX_DMA_Init();
 8001970:	f001 f854 	bl	8002a1c <MX_DMA_Init>
  MX_ADC1_Init();
 8001974:	f000 fd52 	bl	800241c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001978:	f000 fdc0 	bl	80024fc <MX_ADC3_Init>
  MX_I2C1_Init();
 800197c:	f000 fe50 	bl	8002620 <MX_I2C1_Init>
  MX_SPI1_Init();
 8001980:	f000 fe8e 	bl	80026a0 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001984:	f000 feca 	bl	800271c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001988:	f000 ff74 	bl	8002874 <MX_TIM2_Init>
  MX_TIM4_Init();
 800198c:	f000 ffc6 	bl	800291c <MX_TIM4_Init>
  MX_CRC_Init();
 8001990:	f000 fe24 	bl	80025dc <MX_CRC_Init>
  MX_TIM16_Init();
 8001994:	f001 f81c 	bl	80029d0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  ST7789_Init();
 8001998:	f001 fea0 	bl	80036dc <ST7789_Init>
  HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 800199c:	213c      	movs	r1, #60	; 0x3c
 800199e:	48ba      	ldr	r0, [pc, #744]	; (8001c88 <main+0x330>)
 80019a0:	f008 fae6 	bl	8009f70 <HAL_TIM_Encoder_Start_IT>
  	HAL_TIM_PWM_Start_IT(&htim4, TIM_CHANNEL_2);
 80019a4:	2104      	movs	r1, #4
 80019a6:	48b9      	ldr	r0, [pc, #740]	; (8001c8c <main+0x334>)
 80019a8:	f008 f8f0 	bl	8009b8c <HAL_TIM_PWM_Start_IT>
    HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80019ac:	2100      	movs	r1, #0
 80019ae:	48b8      	ldr	r0, [pc, #736]	; (8001c90 <main+0x338>)
 80019b0:	f009 fac4 	bl	800af3c <HAL_TIMEx_PWMN_Start>

  	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 80019b4:	2100      	movs	r1, #0
 80019b6:	48b7      	ldr	r0, [pc, #732]	; (8001c94 <main+0x33c>)
 80019b8:	f003 fe66 	bl	8005688 <HAL_ADCEx_Calibration_Start>
  	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)ADC_buffer, ADC_BUF_LEN);	//Start ADC DMA
 80019bc:	2232      	movs	r2, #50	; 0x32
 80019be:	49b6      	ldr	r1, [pc, #728]	; (8001c98 <main+0x340>)
 80019c0:	48b4      	ldr	r0, [pc, #720]	; (8001c94 <main+0x33c>)
 80019c2:	f003 fa5f 	bl	8004e84 <HAL_ADC_Start_DMA>
  	HAL_ADC_Start_IT(&hadc1);	//Start ADC DMA
 80019c6:	48b5      	ldr	r0, [pc, #724]	; (8001c9c <main+0x344>)
 80019c8:	f003 f91c 	bl	8004c04 <HAL_ADC_Start_IT>

  	Moving_Average_Init(&actual_temperature_filter_struct,5);
 80019cc:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80019d0:	48b3      	ldr	r0, [pc, #716]	; (8001ca0 <main+0x348>)
 80019d2:	f001 f8e0 	bl	8002b96 <Moving_Average_Init>
  	Moving_Average_Init(&ambient_temperature_filter_struct,50);
 80019d6:	ed9f 0ab3 	vldr	s0, [pc, #716]	; 8001ca4 <main+0x34c>
 80019da:	48b3      	ldr	r0, [pc, #716]	; (8001ca8 <main+0x350>)
 80019dc:	f001 f8db 	bl	8002b96 <Moving_Average_Init>
  	Moving_Average_Init(&input_voltage_filterStruct,50);
 80019e0:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 8001ca4 <main+0x34c>
 80019e4:	48b1      	ldr	r0, [pc, #708]	; (8001cac <main+0x354>)
 80019e6:	f001 f8d6 	bl	8002b96 <Moving_Average_Init>
  	Moving_Average_Init(&stand_sense_filterStruct,50);
 80019ea:	ed9f 0aae 	vldr	s0, [pc, #696]	; 8001ca4 <main+0x34c>
 80019ee:	48b0      	ldr	r0, [pc, #704]	; (8001cb0 <main+0x358>)
 80019f0:	f001 f8d1 	bl	8002b96 <Moving_Average_Init>
  	Moving_Average_Init(&handle_sense_filterStruct,50);
 80019f4:	ed9f 0aab 	vldr	s0, [pc, #684]	; 8001ca4 <main+0x34c>
 80019f8:	48ae      	ldr	r0, [pc, #696]	; (8001cb4 <main+0x35c>)
 80019fa:	f001 f8cc 	bl	8002b96 <Moving_Average_Init>
  	Moving_Average_Init(&enc_button_sense_filterStruct,10);
 80019fe:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8001a02:	48ad      	ldr	r0, [pc, #692]	; (8001cb8 <main+0x360>)
 8001a04:	f001 f8c7 	bl	8002b96 <Moving_Average_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	/* Init and fill filter structures with initial values */
  		set_heater_duty(0);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f7ff ff2b 	bl	8001864 <set_heater_duty>
  		for (int i = 0; i<200;i++){
 8001a0e:	2300      	movs	r3, #0
 8001a10:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a12:	e00e      	b.n	8001a32 <main+0xda>
  			get_bus_voltage();
 8001a14:	f7ff fb04 	bl	8001020 <get_bus_voltage>
  			get_ambient_temp();
 8001a18:	f7ff fc3e 	bl	8001298 <get_ambient_temp>
  			get_actual_temperature();
 8001a1c:	f7ff fb28 	bl	8001070 <get_actual_temperature>
  			get_handle_type();
 8001a20:	f7ff fe62 	bl	80016e8 <get_handle_type>
  			get_stand_status();
 8001a24:	f7ff fdd0 	bl	80015c8 <get_stand_status>
  			get_enc_button_status();
 8001a28:	f7ff fd62 	bl	80014f0 <get_enc_button_status>
  		for (int i = 0; i<200;i++){
 8001a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a2e:	3301      	adds	r3, #1
 8001a30:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	2bc7      	cmp	r3, #199	; 0xc7
 8001a36:	dded      	ble.n	8001a14 <main+0xbc>
  		}

  		uint16_t menu_length = 8;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	82fb      	strh	r3, [r7, #22]
  	    	FlashWrite(&default_flash_values);
  		}
  	    FlashRead(&flash_values);
*/
  		/* Set startup state */
  		active_state = SLEEP;
 8001a3c:	4b9f      	ldr	r3, [pc, #636]	; (8001cbc <main+0x364>)
 8001a3e:	2202      	movs	r2, #2
 8001a40:	701a      	strb	r2, [r3, #0]

  		/* Start-up beep */
  		beep_ms(10);
 8001a42:	200a      	movs	r0, #10
 8001a44:	f7ff fcb6 	bl	80013b4 <beep_ms>
  		HAL_Delay(100);
 8001a48:	2064      	movs	r0, #100	; 0x64
 8001a4a:	f002 feaf 	bl	80047ac <HAL_Delay>
  		beep_ms(10);
 8001a4e:	200a      	movs	r0, #10
 8001a50:	f7ff fcb0 	bl	80013b4 <beep_ms>

  		/* Initiate OLED display */
  		TIM2->CNT = 1000;
 8001a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
  		uint16_t menu_cursor_position = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	85fb      	strh	r3, [r7, #46]	; 0x2e
  		uint16_t old_menu_cursor_position = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	85bb      	strh	r3, [r7, #44]	; 0x2c
  		uint16_t menue_start = 0;
 8001a66:	2300      	movs	r3, #0
 8001a68:	84fb      	strh	r3, [r7, #38]	; 0x26
  		uint16_t menue_level = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	84bb      	strh	r3, [r7, #36]	; 0x24
  		uint16_t menu_active = 1;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	847b      	strh	r3, [r7, #34]	; 0x22
  		float old_value = 0;
 8001a72:	f04f 0300 	mov.w	r3, #0
 8001a76:	61fb      	str	r3, [r7, #28]

  		/* If button is pressed during startup - Show SETTINGS and allow to release button. */
  		if (HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1){
 8001a78:	2110      	movs	r1, #16
 8001a7a:	4891      	ldr	r0, [pc, #580]	; (8001cc0 <main+0x368>)
 8001a7c:	f005 fcfe 	bl	800747c <HAL_GPIO_ReadPin>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	f040 8176 	bne.w	8001d74 <main+0x41c>
  			//Paint_DrawString_EN(0, 0, "SETTINGS" , &Font16, 0x00, 0xff);
  			//Paint_DrawLine(0, 16, 127, 16, WHITE , 2, LINE_STYLE_SOLID);
  			//OLED_1in5_Display(black_image);
  			//Paint_Clear(BLACK);
  			HAL_Delay(1000);
 8001a88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001a8c:	f002 fe8e 	bl	80047ac <HAL_Delay>
  			while(menu_active == 1){
 8001a90:	e16c      	b.n	8001d6c <main+0x414>
  				if(menue_level == 0){
 8001a92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d111      	bne.n	8001abc <main+0x164>
  					if(TIM2->CNT < 1000)
 8001a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa2:	d204      	bcs.n	8001aae <main+0x156>
  					{
  						TIM2->CNT = 1000;
 8001aa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
  					}
  					menu_cursor_position = (TIM2->CNT - 1000) / 2;
 8001aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab4:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	85fb      	strh	r3, [r7, #46]	; 0x2e
  				}
  				if (menue_level == 1){
 8001abc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	f040 808b 	bne.w	8001bda <main+0x282>
  					((double*)&flash_values)[menu_cursor_position] = (float)old_value + (float)(TIM2->CNT - 1000.0) / 2.0 - (float)menu_cursor_position;
 8001ac4:	69f8      	ldr	r0, [r7, #28]
 8001ac6:	f7fe fd3f 	bl	8000548 <__aeabi_f2d>
 8001aca:	4604      	mov	r4, r0
 8001acc:	460d      	mov	r5, r1
 8001ace:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd15 	bl	8000504 <__aeabi_ui2d>
 8001ada:	f04f 0200 	mov.w	r2, #0
 8001ade:	4b79      	ldr	r3, [pc, #484]	; (8001cc4 <main+0x36c>)
 8001ae0:	f7fe fbd2 	bl	8000288 <__aeabi_dsub>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	4610      	mov	r0, r2
 8001aea:	4619      	mov	r1, r3
 8001aec:	f7ff f87c 	bl	8000be8 <__aeabi_d2f>
 8001af0:	4603      	mov	r3, r0
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7fe fd28 	bl	8000548 <__aeabi_f2d>
 8001af8:	f04f 0200 	mov.w	r2, #0
 8001afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001b00:	f7fe fea4 	bl	800084c <__aeabi_ddiv>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4620      	mov	r0, r4
 8001b0a:	4629      	mov	r1, r5
 8001b0c:	f7fe fbbe 	bl	800028c <__adddf3>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4690      	mov	r8, r2
 8001b16:	4699      	mov	r9, r3
 8001b18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b1a:	ee07 3a90 	vmov	s15, r3
 8001b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b22:	ee17 0a90 	vmov	r0, s15
 8001b26:	f7fe fd0f 	bl	8000548 <__aeabi_f2d>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8001b30:	00c9      	lsls	r1, r1, #3
 8001b32:	4865      	ldr	r0, [pc, #404]	; (8001cc8 <main+0x370>)
 8001b34:	180c      	adds	r4, r1, r0
 8001b36:	4640      	mov	r0, r8
 8001b38:	4649      	mov	r1, r9
 8001b3a:	f7fe fba5 	bl	8000288 <__aeabi_dsub>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	460b      	mov	r3, r1
 8001b42:	e9c4 2300 	strd	r2, r3, [r4]
  					if (menu_cursor_position == 5){
 8001b46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d12b      	bne.n	8001ba4 <main+0x24c>
  						((double*)&flash_values)[menu_cursor_position] = round(fmod(abs(((double*)&flash_values)[menu_cursor_position]), 2));
 8001b4c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4a5d      	ldr	r2, [pc, #372]	; (8001cc8 <main+0x370>)
 8001b52:	4413      	add	r3, r2
 8001b54:	ed93 7b00 	vldr	d7, [r3]
 8001b58:	eeb0 0a47 	vmov.f32	s0, s14
 8001b5c:	eef0 0a67 	vmov.f32	s1, s15
 8001b60:	f009 fbe1 	bl	800b326 <abs>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7fe fcdc 	bl	8000524 <__aeabi_i2d>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001c80 <main+0x328>
 8001b74:	ec43 2b10 	vmov	d0, r2, r3
 8001b78:	f00c fa5e 	bl	800e038 <fmod>
 8001b7c:	eeb0 7a40 	vmov.f32	s14, s0
 8001b80:	eef0 7a60 	vmov.f32	s15, s1
 8001b84:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b86:	00db      	lsls	r3, r3, #3
 8001b88:	4a4f      	ldr	r2, [pc, #316]	; (8001cc8 <main+0x370>)
 8001b8a:	189c      	adds	r4, r3, r2
 8001b8c:	eeb0 0a47 	vmov.f32	s0, s14
 8001b90:	eef0 0a67 	vmov.f32	s1, s15
 8001b94:	f00c fafa 	bl	800e18c <round>
 8001b98:	eeb0 7a40 	vmov.f32	s14, s0
 8001b9c:	eef0 7a60 	vmov.f32	s15, s1
 8001ba0:	ed84 7b00 	vstr	d7, [r4]
  					}
  					if(menu_cursor_position != 1){
 8001ba4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d017      	beq.n	8001bda <main+0x282>
  						((double*)&flash_values)[menu_cursor_position] = abs(((double*)&flash_values)[menu_cursor_position]);
 8001baa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4a46      	ldr	r2, [pc, #280]	; (8001cc8 <main+0x370>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	ed93 7b00 	vldr	d7, [r3]
 8001bb6:	eeb0 0a47 	vmov.f32	s0, s14
 8001bba:	eef0 0a67 	vmov.f32	s1, s15
 8001bbe:	f009 fbb2 	bl	800b326 <abs>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	493f      	ldr	r1, [pc, #252]	; (8001cc8 <main+0x370>)
 8001bca:	185c      	adds	r4, r3, r1
 8001bcc:	4610      	mov	r0, r2
 8001bce:	f7fe fca9 	bl	8000524 <__aeabi_i2d>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	e9c4 2300 	strd	r2, r3, [r4]
  					}
  				}

  				if(menu_cursor_position > menu_length){
 8001bda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001bdc:	8afb      	ldrh	r3, [r7, #22]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d908      	bls.n	8001bf4 <main+0x29c>
  								menu_cursor_position = menu_length;
 8001be2:	8afb      	ldrh	r3, [r7, #22]
 8001be4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  								TIM2->CNT = 1000 + menu_length*2;
 8001be6:	8afb      	ldrh	r3, [r7, #22]
 8001be8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001bec:	005a      	lsls	r2, r3, #1
 8001bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
  				}

  				if(menu_cursor_position >= menu_length-(menu_length-5)){
 8001bf4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bf6:	2b04      	cmp	r3, #4
 8001bf8:	d902      	bls.n	8001c00 <main+0x2a8>
  					menue_start = menu_cursor_position-5;
 8001bfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001bfc:	3b05      	subs	r3, #5
 8001bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
  				}


  				if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-2)){
 8001c00:	2110      	movs	r1, #16
 8001c02:	482f      	ldr	r0, [pc, #188]	; (8001cc0 <main+0x368>)
 8001c04:	f005 fc3a 	bl	800747c <HAL_GPIO_ReadPin>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d129      	bne.n	8001c62 <main+0x30a>
 8001c0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001c10:	8afb      	ldrh	r3, [r7, #22]
 8001c12:	3b02      	subs	r3, #2
 8001c14:	429a      	cmp	r2, r3
 8001c16:	da24      	bge.n	8001c62 <main+0x30a>
  					if(menue_level == 0){
 8001c18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d10d      	bne.n	8001c3a <main+0x2e2>
  						old_value = ((double*)&flash_values)[menu_cursor_position];
 8001c1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <main+0x370>)
 8001c24:	4413      	add	r3, r2
 8001c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2a:	4610      	mov	r0, r2
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	f7fe ffdb 	bl	8000be8 <__aeabi_d2f>
 8001c32:	4603      	mov	r3, r0
 8001c34:	61fb      	str	r3, [r7, #28]
  						old_menu_cursor_position = menu_cursor_position;
 8001c36:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c38:	85bb      	strh	r3, [r7, #44]	; 0x2c
  					}
  					if(menue_level == 1){
 8001c3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d106      	bne.n	8001c4e <main+0x2f6>
  						TIM2->CNT = old_menu_cursor_position*2 + 1000;
 8001c40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001c42:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8001c46:	005a      	lsls	r2, r3, #1
 8001c48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c4c:	625a      	str	r2, [r3, #36]	; 0x24
  					}

  					menue_level = abs(menue_level-1);
 8001c4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c50:	3b01      	subs	r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	bfb8      	it	lt
 8001c56:	425b      	neglt	r3, r3
 8001c58:	84bb      	strh	r3, [r7, #36]	; 0x24
  					HAL_Delay(200);
 8001c5a:	20c8      	movs	r0, #200	; 0xc8
 8001c5c:	f002 fda6 	bl	80047ac <HAL_Delay>
  				if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position < menu_length-2)){
 8001c60:	e05e      	b.n	8001d20 <main+0x3c8>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length)){
 8001c62:	2110      	movs	r1, #16
 8001c64:	4816      	ldr	r0, [pc, #88]	; (8001cc0 <main+0x368>)
 8001c66:	f005 fc09 	bl	800747c <HAL_GPIO_ReadPin>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d12d      	bne.n	8001ccc <main+0x374>
 8001c70:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001c72:	8afb      	ldrh	r3, [r7, #22]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d129      	bne.n	8001ccc <main+0x374>
  					menu_active = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	847b      	strh	r3, [r7, #34]	; 0x22
 8001c7c:	e050      	b.n	8001d20 <main+0x3c8>
 8001c7e:	bf00      	nop
 8001c80:	00000000 	.word	0x00000000
 8001c84:	40000000 	.word	0x40000000
 8001c88:	2000196c 	.word	0x2000196c
 8001c8c:	200019b8 	.word	0x200019b8
 8001c90:	20001920 	.word	0x20001920
 8001c94:	2000176c 	.word	0x2000176c
 8001c98:	20000358 	.word	0x20000358
 8001c9c:	2000171c 	.word	0x2000171c
 8001ca0:	20000414 	.word	0x20000414
 8001ca4:	42480000 	.word	0x42480000
 8001ca8:	20000740 	.word	0x20000740
 8001cac:	20000a6c 	.word	0x20000a6c
 8001cb0:	20000d98 	.word	0x20000d98
 8001cb4:	200010c4 	.word	0x200010c4
 8001cb8:	200013f0 	.word	0x200013f0
 8001cbc:	20000028 	.word	0x20000028
 8001cc0:	48000400 	.word	0x48000400
 8001cc4:	408f4000 	.word	0x408f4000
 8001cc8:	200003c8 	.word	0x200003c8
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-1)){
 8001ccc:	2110      	movs	r1, #16
 8001cce:	4816      	ldr	r0, [pc, #88]	; (8001d28 <main+0x3d0>)
 8001cd0:	f005 fbd4 	bl	800747c <HAL_GPIO_ReadPin>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d10a      	bne.n	8001cf0 <main+0x398>
 8001cda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001cdc:	8afb      	ldrh	r3, [r7, #22]
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d105      	bne.n	8001cf0 <main+0x398>
  					menu_active = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	847b      	strh	r3, [r7, #34]	; 0x22
  					FlashWrite(&flash_values);
 8001ce8:	4810      	ldr	r0, [pc, #64]	; (8001d2c <main+0x3d4>)
 8001cea:	f7ff f865 	bl	8000db8 <FlashWrite>
 8001cee:	e017      	b.n	8001d20 <main+0x3c8>
  				}
  				else if((HAL_GPIO_ReadPin (GPIOB, SW_1_Pin) == 1) && (menu_cursor_position == menu_length-2)){
 8001cf0:	2110      	movs	r1, #16
 8001cf2:	480d      	ldr	r0, [pc, #52]	; (8001d28 <main+0x3d0>)
 8001cf4:	f005 fbc2 	bl	800747c <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d110      	bne.n	8001d20 <main+0x3c8>
 8001cfe:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001d00:	8afb      	ldrh	r3, [r7, #22]
 8001d02:	3b02      	subs	r3, #2
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d10b      	bne.n	8001d20 <main+0x3c8>
  					flash_values = default_flash_values;
 8001d08:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <main+0x3d4>)
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <main+0x3d8>)
 8001d0c:	4614      	mov	r4, r2
 8001d0e:	461d      	mov	r5, r3
 8001d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  				//Paint_DrawString_EN(0, 110, "Version: ", &Font12, 0x00, 0xff);
  				//Paint_DrawString_EN(60, 110, version, &Font12, 0x00, 0xff);

  				//menuHandle();

  				for(int i = menue_start;i<menue_start+6;i++){
 8001d20:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d22:	61bb      	str	r3, [r7, #24]
 8001d24:	e01d      	b.n	8001d62 <main+0x40a>
 8001d26:	bf00      	nop
 8001d28:	48000400 	.word	0x48000400
 8001d2c:	200003c8 	.word	0x200003c8
 8001d30:	20000078 	.word	0x20000078
  					else{
  						//Paint_DrawString_EN(0, 20+(i-menue_start)*12, menu_names[i], &Font12, 0x00, 0xff);
  					}

  					char str[20];
  				  	memset(&str, '\0', sizeof(str));
 8001d34:	463b      	mov	r3, r7
 8001d36:	2214      	movs	r2, #20
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00a f883 	bl	800be46 <memset>
  					sprintf(str, "%.0f", (((double*)&flash_values)[i]));
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	4ac0      	ldr	r2, [pc, #768]	; (8002048 <main+0x6f0>)
 8001d46:	4413      	add	r3, r2
 8001d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	49bf      	ldr	r1, [pc, #764]	; (800204c <main+0x6f4>)
 8001d50:	f00a f816 	bl	800bd80 <siprintf>
  					if(i <= menu_length-3){
 8001d54:	8afb      	ldrh	r3, [r7, #22]
 8001d56:	3b02      	subs	r3, #2
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	429a      	cmp	r2, r3
  				for(int i = menue_start;i<menue_start+6;i++){
 8001d5c:	69bb      	ldr	r3, [r7, #24]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001d64:	3305      	adds	r3, #5
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	dde3      	ble.n	8001d34 <main+0x3dc>
  			while(menu_active == 1){
 8001d6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	f43f ae8f 	beq.w	8001a92 <main+0x13a>
  				//Paint_Clear(BLACK);
  			}
  		}

  		/* Set initial encoder timer value */
  		TIM2->CNT = flash_values.startup_temperature;
 8001d74:	4bb4      	ldr	r3, [pc, #720]	; (8002048 <main+0x6f0>)
 8001d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7a:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe ff11 	bl	8000ba8 <__aeabi_d2uiz>
 8001d86:	4603      	mov	r3, r0
 8001d88:	6263      	str	r3, [r4, #36]	; 0x24

  		/* Startup beep */
  		beep_ms(10);
 8001d8a:	200a      	movs	r0, #10
 8001d8c:	f7ff fb12 	bl	80013b4 <beep_ms>

  		/* Initiate PID controller */
  		PID(&TPID, &sensor_values.actual_temperature, &PID_output, &PID_setpoint, Kp, Ki, Kd, _PID_P_ON_E, _PID_CD_DIRECT);
 8001d90:	4baf      	ldr	r3, [pc, #700]	; (8002050 <main+0x6f8>)
 8001d92:	ed93 7b00 	vldr	d7, [r3]
 8001d96:	4baf      	ldr	r3, [pc, #700]	; (8002054 <main+0x6fc>)
 8001d98:	ed93 6b00 	vldr	d6, [r3]
 8001d9c:	4bae      	ldr	r3, [pc, #696]	; (8002058 <main+0x700>)
 8001d9e:	ed93 5b00 	vldr	d5, [r3]
 8001da2:	2300      	movs	r3, #0
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	2301      	movs	r3, #1
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	eeb0 2a45 	vmov.f32	s4, s10
 8001dae:	eef0 2a65 	vmov.f32	s5, s11
 8001db2:	eeb0 1a46 	vmov.f32	s2, s12
 8001db6:	eef0 1a66 	vmov.f32	s3, s13
 8001dba:	eeb0 0a47 	vmov.f32	s0, s14
 8001dbe:	eef0 0a67 	vmov.f32	s1, s15
 8001dc2:	4ba6      	ldr	r3, [pc, #664]	; (800205c <main+0x704>)
 8001dc4:	4aa6      	ldr	r2, [pc, #664]	; (8002060 <main+0x708>)
 8001dc6:	49a7      	ldr	r1, [pc, #668]	; (8002064 <main+0x70c>)
 8001dc8:	48a7      	ldr	r0, [pc, #668]	; (8002068 <main+0x710>)
 8001dca:	f000 ffad 	bl	8002d28 <PID>
  		PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8001dce:	2101      	movs	r1, #1
 8001dd0:	48a5      	ldr	r0, [pc, #660]	; (8002068 <main+0x710>)
 8001dd2:	f001 f93c 	bl	800304e <PID_SetMode>
  		PID_SetSampleTime(&TPID, interval_PID_update, 0); //Set PID sample time to "interval_PID_update" to make sure PID is calculated every time it is called
 8001dd6:	4ba5      	ldr	r3, [pc, #660]	; (800206c <main+0x714>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	4619      	mov	r1, r3
 8001dde:	48a2      	ldr	r0, [pc, #648]	; (8002068 <main+0x710>)
 8001de0:	f001 fae4 	bl	80033ac <PID_SetSampleTime>
  		PID_SetOutputLimits(&TPID, 0, PID_MAX_OUTPUT); 	// Set max and min output limit
 8001de4:	ed9f 1b90 	vldr	d1, [pc, #576]	; 8002028 <main+0x6d0>
 8001de8:	ed9f 0b91 	vldr	d0, [pc, #580]	; 8002030 <main+0x6d8>
 8001dec:	489e      	ldr	r0, [pc, #632]	; (8002068 <main+0x710>)
 8001dee:	f001 f94c 	bl	800308a <PID_SetOutputLimits>
  		PID_SetILimits(&TPID, PID_MIN_LIMIT, PID_MAX_LIMIT); 		// Set max and min I limit
 8001df2:	ed9f 1b91 	vldr	d1, [pc, #580]	; 8002038 <main+0x6e0>
 8001df6:	ed9f 0b92 	vldr	d0, [pc, #584]	; 8002040 <main+0x6e8>
 8001dfa:	489b      	ldr	r0, [pc, #620]	; (8002068 <main+0x710>)
 8001dfc:	f001 f9b3 	bl	8003166 <PID_SetILimits>

  		//ST7789_Test();

  		ST7789_WriteString(45, 10, "AxxSolder", Font_16x26, YELLOW, BLACK);
 8001e00:	4b9b      	ldr	r3, [pc, #620]	; (8002070 <main+0x718>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	9202      	str	r2, [sp, #8]
 8001e06:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e0a:	9201      	str	r2, [sp, #4]
 8001e0c:	685a      	ldr	r2, [r3, #4]
 8001e0e:	9200      	str	r2, [sp, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a98      	ldr	r2, [pc, #608]	; (8002074 <main+0x71c>)
 8001e14:	210a      	movs	r1, #10
 8001e16:	202d      	movs	r0, #45	; 0x2d
 8001e18:	f001 ffa3 	bl	8003d62 <ST7789_WriteString>
  		ST7789_DrawLine(0,40,240,40,YELLOW);
 8001e1c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e20:	9300      	str	r3, [sp, #0]
 8001e22:	2328      	movs	r3, #40	; 0x28
 8001e24:	22f0      	movs	r2, #240	; 0xf0
 8001e26:	2128      	movs	r1, #40	; 0x28
 8001e28:	2000      	movs	r0, #0
 8001e2a:	f001 fd66 	bl	80038fa <ST7789_DrawLine>
  		ST7789_DrawLine(0,41,240,41,YELLOW);
 8001e2e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	2329      	movs	r3, #41	; 0x29
 8001e36:	22f0      	movs	r2, #240	; 0xf0
 8001e38:	2129      	movs	r1, #41	; 0x29
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f001 fd5d 	bl	80038fa <ST7789_DrawLine>
  		ST7789_DrawLine(0,42,240,42,YELLOW);
 8001e40:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	232a      	movs	r3, #42	; 0x2a
 8001e48:	22f0      	movs	r2, #240	; 0xf0
 8001e4a:	212a      	movs	r1, #42	; 0x2a
 8001e4c:	2000      	movs	r0, #0
 8001e4e:	f001 fd54 	bl	80038fa <ST7789_DrawLine>

  		ST7789_WriteString(5, 55, "Set temp", Font_16x26, WHITE, BLACK);
 8001e52:	4b87      	ldr	r3, [pc, #540]	; (8002070 <main+0x718>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	9202      	str	r2, [sp, #8]
 8001e58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e5c:	9201      	str	r2, [sp, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	9200      	str	r2, [sp, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a84      	ldr	r2, [pc, #528]	; (8002078 <main+0x720>)
 8001e66:	2137      	movs	r1, #55	; 0x37
 8001e68:	2005      	movs	r0, #5
 8001e6a:	f001 ff7a 	bl	8003d62 <ST7789_WriteString>
  		ST7789_WriteString(5, 85, "123", Font_16x26, WHITE, BLACK);
 8001e6e:	4b80      	ldr	r3, [pc, #512]	; (8002070 <main+0x718>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	9202      	str	r2, [sp, #8]
 8001e74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e78:	9201      	str	r2, [sp, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	9200      	str	r2, [sp, #0]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a7e      	ldr	r2, [pc, #504]	; (800207c <main+0x724>)
 8001e82:	2155      	movs	r1, #85	; 0x55
 8001e84:	2005      	movs	r0, #5
 8001e86:	f001 ff6c 	bl	8003d62 <ST7789_WriteString>
  		ST7789_DrawCircle(100, 90, 4, WHITE);
 8001e8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e8e:	2204      	movs	r2, #4
 8001e90:	215a      	movs	r1, #90	; 0x5a
 8001e92:	2064      	movs	r0, #100	; 0x64
 8001e94:	f001 fe00 	bl	8003a98 <ST7789_DrawCircle>
  		ST7789_DrawCircle(100, 90, 3, WHITE);
 8001e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	215a      	movs	r1, #90	; 0x5a
 8001ea0:	2064      	movs	r0, #100	; 0x64
 8001ea2:	f001 fdf9 	bl	8003a98 <ST7789_DrawCircle>
  		ST7789_WriteString(110, 85, "C", Font_16x26, WHITE, BLACK);
 8001ea6:	4b72      	ldr	r3, [pc, #456]	; (8002070 <main+0x718>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	9202      	str	r2, [sp, #8]
 8001eac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb0:	9201      	str	r2, [sp, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	9200      	str	r2, [sp, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a71      	ldr	r2, [pc, #452]	; (8002080 <main+0x728>)
 8001eba:	2155      	movs	r1, #85	; 0x55
 8001ebc:	206e      	movs	r0, #110	; 0x6e
 8001ebe:	f001 ff50 	bl	8003d62 <ST7789_WriteString>


  		ST7789_WriteString(5, 125, "Act temp", Font_16x26, WHITE, BLACK);
 8001ec2:	4b6b      	ldr	r3, [pc, #428]	; (8002070 <main+0x718>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	9202      	str	r2, [sp, #8]
 8001ec8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ecc:	9201      	str	r2, [sp, #4]
 8001ece:	685a      	ldr	r2, [r3, #4]
 8001ed0:	9200      	str	r2, [sp, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a6b      	ldr	r2, [pc, #428]	; (8002084 <main+0x72c>)
 8001ed6:	217d      	movs	r1, #125	; 0x7d
 8001ed8:	2005      	movs	r0, #5
 8001eda:	f001 ff42 	bl	8003d62 <ST7789_WriteString>
  		ST7789_WriteString(5, 155, "123", Font_16x26, GREEN, BLACK);
 8001ede:	4b64      	ldr	r3, [pc, #400]	; (8002070 <main+0x718>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	9202      	str	r2, [sp, #8]
 8001ee4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001ee8:	9201      	str	r2, [sp, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	9200      	str	r2, [sp, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a62      	ldr	r2, [pc, #392]	; (800207c <main+0x724>)
 8001ef2:	219b      	movs	r1, #155	; 0x9b
 8001ef4:	2005      	movs	r0, #5
 8001ef6:	f001 ff34 	bl	8003d62 <ST7789_WriteString>
  		ST7789_DrawCircle(100, 170, 4, GREEN);
 8001efa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001efe:	2204      	movs	r2, #4
 8001f00:	21aa      	movs	r1, #170	; 0xaa
 8001f02:	2064      	movs	r0, #100	; 0x64
 8001f04:	f001 fdc8 	bl	8003a98 <ST7789_DrawCircle>
  		ST7789_DrawCircle(100, 170, 3, GREEN);
 8001f08:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001f0c:	2203      	movs	r2, #3
 8001f0e:	21aa      	movs	r1, #170	; 0xaa
 8001f10:	2064      	movs	r0, #100	; 0x64
 8001f12:	f001 fdc1 	bl	8003a98 <ST7789_DrawCircle>
  		ST7789_WriteString(110, 155, "C", Font_16x26, GREEN, BLACK);
 8001f16:	4b56      	ldr	r3, [pc, #344]	; (8002070 <main+0x718>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	9202      	str	r2, [sp, #8]
 8001f1c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f20:	9201      	str	r2, [sp, #4]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	9200      	str	r2, [sp, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a55      	ldr	r2, [pc, #340]	; (8002080 <main+0x728>)
 8001f2a:	219b      	movs	r1, #155	; 0x9b
 8001f2c:	206e      	movs	r0, #110	; 0x6e
 8001f2e:	f001 ff18 	bl	8003d62 <ST7789_WriteString>

  		ST7789_DrawRectangle(2, 121, 150, 185, WHITE);
 8001f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	23b9      	movs	r3, #185	; 0xb9
 8001f3a:	2296      	movs	r2, #150	; 0x96
 8001f3c:	2179      	movs	r1, #121	; 0x79
 8001f3e:	2002      	movs	r0, #2
 8001f40:	f001 fd67 	bl	8003a12 <ST7789_DrawRectangle>
  		ST7789_DrawRectangle(1, 120, 151, 186, WHITE);
 8001f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	23ba      	movs	r3, #186	; 0xba
 8001f4c:	2297      	movs	r2, #151	; 0x97
 8001f4e:	2178      	movs	r1, #120	; 0x78
 8001f50:	2001      	movs	r0, #1
 8001f52:	f001 fd5e 	bl	8003a12 <ST7789_DrawRectangle>


  		ST7789_WriteString(0, 240, "Handle:", Font_11x18, WHITE, BLACK);
 8001f56:	4b4c      	ldr	r3, [pc, #304]	; (8002088 <main+0x730>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	9202      	str	r2, [sp, #8]
 8001f5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f60:	9201      	str	r2, [sp, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	9200      	str	r2, [sp, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a48      	ldr	r2, [pc, #288]	; (800208c <main+0x734>)
 8001f6a:	21f0      	movs	r1, #240	; 0xf0
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f001 fef8 	bl	8003d62 <ST7789_WriteString>
  		ST7789_WriteString(0, 260, "Input V:", Font_11x18, WHITE, BLACK);
 8001f72:	4b45      	ldr	r3, [pc, #276]	; (8002088 <main+0x730>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	9202      	str	r2, [sp, #8]
 8001f78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f7c:	9201      	str	r2, [sp, #4]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	9200      	str	r2, [sp, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a42      	ldr	r2, [pc, #264]	; (8002090 <main+0x738>)
 8001f86:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f001 fee9 	bl	8003d62 <ST7789_WriteString>
  		ST7789_WriteString(0, 280, "PCB temp:", Font_11x18, WHITE, BLACK);
 8001f90:	4b3d      	ldr	r3, [pc, #244]	; (8002088 <main+0x730>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	9202      	str	r2, [sp, #8]
 8001f96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f9a:	9201      	str	r2, [sp, #4]
 8001f9c:	685a      	ldr	r2, [r3, #4]
 8001f9e:	9200      	str	r2, [sp, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a3c      	ldr	r2, [pc, #240]	; (8002094 <main+0x73c>)
 8001fa4:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f001 feda 	bl	8003d62 <ST7789_WriteString>
  		ST7789_WriteString(110, 300, "POWER ->", Font_11x18, WHITE, BLACK);
 8001fae:	4b36      	ldr	r3, [pc, #216]	; (8002088 <main+0x730>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	9202      	str	r2, [sp, #8]
 8001fb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001fb8:	9201      	str	r2, [sp, #4]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	9200      	str	r2, [sp, #0]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a35      	ldr	r2, [pc, #212]	; (8002098 <main+0x740>)
 8001fc2:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8001fc6:	206e      	movs	r0, #110	; 0x6e
 8001fc8:	f001 fecb 	bl	8003d62 <ST7789_WriteString>


  		ST7789_DrawRectangle(208, 53, 232, 319, WHITE);
 8001fcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd0:	9300      	str	r3, [sp, #0]
 8001fd2:	f240 133f 	movw	r3, #319	; 0x13f
 8001fd6:	22e8      	movs	r2, #232	; 0xe8
 8001fd8:	2135      	movs	r1, #53	; 0x35
 8001fda:	20d0      	movs	r0, #208	; 0xd0
 8001fdc:	f001 fd19 	bl	8003a12 <ST7789_DrawRectangle>
  		ST7789_DrawRectangle(209, 54, 231, 318, WHITE);
 8001fe0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fe4:	9300      	str	r3, [sp, #0]
 8001fe6:	f44f 739f 	mov.w	r3, #318	; 0x13e
 8001fea:	22e7      	movs	r2, #231	; 0xe7
 8001fec:	2136      	movs	r1, #54	; 0x36
 8001fee:	20d1      	movs	r0, #209	; 0xd1
 8001ff0:	f001 fd0f 	bl	8003a12 <ST7789_DrawRectangle>
  		ST7789_DrawFilledRectangle(210, 55, 20, 220, RED);
 8001ff4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	23dc      	movs	r3, #220	; 0xdc
 8001ffc:	2214      	movs	r2, #20
 8001ffe:	2137      	movs	r1, #55	; 0x37
 8002000:	20d2      	movs	r0, #210	; 0xd2
 8002002:	f001 ff01 	bl	8003e08 <ST7789_DrawFilledRectangle>



  		while (1){
  			check_beep();
 8002006:	f7ff f9ed 	bl	80013e4 <check_beep>
  			check_emergency_shutdown();
 800200a:	f7ff f9fd 	bl	8001408 <check_emergency_shutdown>

  			if(HAL_GetTick() - previous_sensor_PID_update >= interval_sensor_update){
 800200e:	f002 fbc1 	bl	8004794 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	4b21      	ldr	r3, [pc, #132]	; (800209c <main+0x744>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	1ad2      	subs	r2, r2, r3
 800201a:	4b21      	ldr	r3, [pc, #132]	; (80020a0 <main+0x748>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	e040      	b.n	80020a4 <main+0x74c>
 8002022:	bf00      	nop
 8002024:	f3af 8000 	nop.w
 8002028:	00000000 	.word	0x00000000
 800202c:	40790000 	.word	0x40790000
	...
 800203c:	4072c000 	.word	0x4072c000
 8002040:	00000000 	.word	0x00000000
 8002044:	c072c000 	.word	0xc072c000
 8002048:	200003c8 	.word	0x200003c8
 800204c:	0800f1c8 	.word	0x0800f1c8
 8002050:	20000310 	.word	0x20000310
 8002054:	20000318 	.word	0x20000318
 8002058:	20000320 	.word	0x20000320
 800205c:	20000400 	.word	0x20000400
 8002060:	200003f8 	.word	0x200003f8
 8002064:	20000040 	.word	0x20000040
 8002068:	20001a50 	.word	0x20001a50
 800206c:	2000001c 	.word	0x2000001c
 8002070:	2000000c 	.word	0x2000000c
 8002074:	0800f1d0 	.word	0x0800f1d0
 8002078:	0800f1dc 	.word	0x0800f1dc
 800207c:	0800f1e8 	.word	0x0800f1e8
 8002080:	0800f1ec 	.word	0x0800f1ec
 8002084:	0800f1f0 	.word	0x0800f1f0
 8002088:	20000004 	.word	0x20000004
 800208c:	0800f1fc 	.word	0x0800f1fc
 8002090:	0800f204 	.word	0x0800f204
 8002094:	0800f210 	.word	0x0800f210
 8002098:	0800f21c 	.word	0x0800f21c
 800209c:	20000308 	.word	0x20000308
 80020a0:	20000024 	.word	0x20000024
 80020a4:	d30e      	bcc.n	80020c4 <main+0x76c>
  				get_stand_status();
 80020a6:	f7ff fa8f 	bl	80015c8 <get_stand_status>
  				get_bus_voltage();
 80020aa:	f7fe ffb9 	bl	8001020 <get_bus_voltage>
  				get_handle_type();
 80020ae:	f7ff fb1b 	bl	80016e8 <get_handle_type>
  				get_enc_button_status();
 80020b2:	f7ff fa1d 	bl	80014f0 <get_enc_button_status>
  				get_set_temperature();
 80020b6:	f7ff f945 	bl	8001344 <get_set_temperature>
  				previous_sensor_PID_update = HAL_GetTick();
 80020ba:	f002 fb6b 	bl	8004794 <HAL_GetTick>
 80020be:	4603      	mov	r3, r0
 80020c0:	4a91      	ldr	r2, [pc, #580]	; (8002308 <main+0x9b0>)
 80020c2:	6013      	str	r3, [r2, #0]
  			}

  			/* switch */
  			switch (active_state) {
 80020c4:	4b91      	ldr	r3, [pc, #580]	; (800230c <main+0x9b4>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d833      	bhi.n	8002134 <main+0x7dc>
 80020cc:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <main+0x77c>)
 80020ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d2:	bf00      	nop
 80020d4:	080020f9 	.word	0x080020f9
 80020d8:	08002107 	.word	0x08002107
 80020dc:	08002115 	.word	0x08002115
 80020e0:	080020e9 	.word	0x080020e9
 80020e4:	08002125 	.word	0x08002125
  				case EMERGENCY_SLEEP: {
  					PID_setpoint = 0;
 80020e8:	4989      	ldr	r1, [pc, #548]	; (8002310 <main+0x9b8>)
 80020ea:	f04f 0200 	mov.w	r2, #0
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 80020f6:	e01d      	b.n	8002134 <main+0x7dc>
  				}
  				case RUN: {
  					PID_setpoint = sensor_values.set_temperature;
 80020f8:	4b86      	ldr	r3, [pc, #536]	; (8002314 <main+0x9bc>)
 80020fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020fe:	4984      	ldr	r1, [pc, #528]	; (8002310 <main+0x9b8>)
 8002100:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002104:	e016      	b.n	8002134 <main+0x7dc>
  				}
  				case STANDBY: {
  					PID_setpoint = flash_values.standby_temp;
 8002106:	4b84      	ldr	r3, [pc, #528]	; (8002318 <main+0x9c0>)
 8002108:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800210c:	4980      	ldr	r1, [pc, #512]	; (8002310 <main+0x9b8>)
 800210e:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002112:	e00f      	b.n	8002134 <main+0x7dc>
  				}
  				case SLEEP: {
  					PID_setpoint = 0;
 8002114:	497e      	ldr	r1, [pc, #504]	; (8002310 <main+0x9b8>)
 8002116:	f04f 0200 	mov.w	r2, #0
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002122:	e007      	b.n	8002134 <main+0x7dc>
  				}
  				case HALTED: {
  					PID_setpoint = 0;
 8002124:	497a      	ldr	r1, [pc, #488]	; (8002310 <main+0x9b8>)
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	e9c1 2300 	strd	r2, r3, [r1]
  					break;
 8002132:	bf00      	nop
  				}
  			}

  			if(HAL_GetTick() - previous_PID_update >= interval_PID_update){
 8002134:	f002 fb2e 	bl	8004794 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	4b78      	ldr	r3, [pc, #480]	; (800231c <main+0x9c4>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	1ad2      	subs	r2, r2, r3
 8002140:	4b77      	ldr	r3, [pc, #476]	; (8002320 <main+0x9c8>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d34e      	bcc.n	80021e6 <main+0x88e>
  				set_heater_duty(0);
 8002148:	2000      	movs	r0, #0
 800214a:	f7ff fb8b 	bl	8001864 <set_heater_duty>
  				HAL_Delay(5); // Wait to let the thermocouple voltage stabilize before taking measurement
 800214e:	2005      	movs	r0, #5
 8002150:	f002 fb2c 	bl	80047ac <HAL_Delay>
  				get_actual_temperature();
 8002154:	f7fe ff8c 	bl	8001070 <get_actual_temperature>

  				/* Compute PID and set duty cycle */
  				PID_Compute(&TPID);
 8002158:	4872      	ldr	r0, [pc, #456]	; (8002324 <main+0x9cc>)
 800215a:	f000 fe31 	bl	8002dc0 <PID_Compute>
  				duty_cycle = PID_output*(max_power_watt*POWER_REDUCTION_FACTOR/sensor_values.bus_voltage);
 800215e:	4b72      	ldr	r3, [pc, #456]	; (8002328 <main+0x9d0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7fe f9f0 	bl	8000548 <__aeabi_f2d>
 8002168:	a361      	add	r3, pc, #388	; (adr r3, 80022f0 <main+0x998>)
 800216a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216e:	f7fe fa43 	bl	80005f8 <__aeabi_dmul>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4614      	mov	r4, r2
 8002178:	461d      	mov	r5, r3
 800217a:	4b66      	ldr	r3, [pc, #408]	; (8002314 <main+0x9bc>)
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	4618      	mov	r0, r3
 8002180:	f7fe f9e2 	bl	8000548 <__aeabi_f2d>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4620      	mov	r0, r4
 800218a:	4629      	mov	r1, r5
 800218c:	f7fe fb5e 	bl	800084c <__aeabi_ddiv>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	4b64      	ldr	r3, [pc, #400]	; (800232c <main+0x9d4>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f7fe fa2b 	bl	80005f8 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4962      	ldr	r1, [pc, #392]	; (8002330 <main+0x9d8>)
 80021a8:	e9c1 2300 	strd	r2, r3, [r1]
  				set_heater_duty(clamp(duty_cycle, 0.0, PID_MAX_OUTPUT));
 80021ac:	4b60      	ldr	r3, [pc, #384]	; (8002330 <main+0x9d8>)
 80021ae:	ed93 7b00 	vldr	d7, [r3]
 80021b2:	ed9f 2b51 	vldr	d2, [pc, #324]	; 80022f8 <main+0x9a0>
 80021b6:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8002300 <main+0x9a8>
 80021ba:	eeb0 0a47 	vmov.f32	s0, s14
 80021be:	eef0 0a67 	vmov.f32	s1, s15
 80021c2:	f7fe fec3 	bl	8000f4c <clamp>
 80021c6:	ec53 2b10 	vmov	r2, r3, d0
 80021ca:	4610      	mov	r0, r2
 80021cc:	4619      	mov	r1, r3
 80021ce:	f7fe fceb 	bl	8000ba8 <__aeabi_d2uiz>
 80021d2:	4603      	mov	r3, r0
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fb44 	bl	8001864 <set_heater_duty>

  				previous_PID_update = HAL_GetTick();
 80021dc:	f002 fada 	bl	8004794 <HAL_GetTick>
 80021e0:	4603      	mov	r3, r0
 80021e2:	4a4e      	ldr	r2, [pc, #312]	; (800231c <main+0x9c4>)
 80021e4:	6013      	str	r3, [r2, #0]
  			//PID_SetTunings(&TPID, Kp_custom, Ki_custom, Kd_custom);
  			//sensor_values.set_temperature = temperature_custom;
  			// ----------------------------------------------

  			/* Send debug information over serial */
  			if(HAL_GetTick() - previous_millis_debug >= interval_debug){
 80021e6:	f002 fad5 	bl	8004794 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	4b51      	ldr	r3, [pc, #324]	; (8002334 <main+0x9dc>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	1ad2      	subs	r2, r2, r3
 80021f2:	4b51      	ldr	r3, [pc, #324]	; (8002338 <main+0x9e0>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d362      	bcc.n	80022c0 <main+0x968>
  				memset(&buffer, '\0', sizeof(buffer));
 80021fa:	2228      	movs	r2, #40	; 0x28
 80021fc:	2100      	movs	r1, #0
 80021fe:	484f      	ldr	r0, [pc, #316]	; (800233c <main+0x9e4>)
 8002200:	f009 fe21 	bl	800be46 <memset>
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002204:	4b43      	ldr	r3, [pc, #268]	; (8002314 <main+0x9bc>)
 8002206:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
 800220a:	4b42      	ldr	r3, [pc, #264]	; (8002314 <main+0x9bc>)
 800220c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002210:	4b46      	ldr	r3, [pc, #280]	; (800232c <main+0x9d4>)
 8002212:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4b49      	ldr	r3, [pc, #292]	; (8002340 <main+0x9e8>)
 800221c:	f7fe fb16 	bl	800084c <__aeabi_ddiv>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	ec43 2b19 	vmov	d9, r2, r3
  						sensor_values.actual_temperature, sensor_values.set_temperature,
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002228:	483e      	ldr	r0, [pc, #248]	; (8002324 <main+0x9cc>)
 800222a:	f001 f903 	bl	8003434 <PID_GetPpart>
 800222e:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 8002232:	f04f 0200 	mov.w	r2, #0
 8002236:	4b42      	ldr	r3, [pc, #264]	; (8002340 <main+0x9e8>)
 8002238:	f7fe fb08 	bl	800084c <__aeabi_ddiv>
 800223c:	4602      	mov	r2, r0
 800223e:	460b      	mov	r3, r1
 8002240:	ec43 2b1a 	vmov	d10, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002244:	4837      	ldr	r0, [pc, #220]	; (8002324 <main+0x9cc>)
 8002246:	f001 f907 	bl	8003458 <PID_GetIpart>
 800224a:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	4b3b      	ldr	r3, [pc, #236]	; (8002340 <main+0x9e8>)
 8002254:	f7fe fafa 	bl	800084c <__aeabi_ddiv>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	ec43 2b18 	vmov	d8, r2, r3
  						PID_output/10, PID_GetPpart(&TPID)/10.0, PID_GetIpart(&TPID)/10.0, PID_GetDpart(&TPID)/10.0,
 8002260:	4830      	ldr	r0, [pc, #192]	; (8002324 <main+0x9cc>)
 8002262:	f001 f90b 	bl	800347c <PID_GetDpart>
 8002266:	ec51 0b10 	vmov	r0, r1, d0
  				sprintf(buffer, "%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.1f\t%3.2f\t%3.2f\n",
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4b34      	ldr	r3, [pc, #208]	; (8002340 <main+0x9e8>)
 8002270:	f7fe faec 	bl	800084c <__aeabi_ddiv>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4690      	mov	r8, r2
 800227a:	4699      	mov	r9, r3
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <main+0x9bc>)
 800227e:	e9d3 0108 	ldrd	r0, r1, [r3, #32]
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <main+0x9bc>)
 8002284:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8002288:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800228c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8002290:	e9cd 8908 	strd	r8, r9, [sp, #32]
 8002294:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002298:	ed8d ab04 	vstr	d10, [sp, #16]
 800229c:	ed8d 9b02 	vstr	d9, [sp, #8]
 80022a0:	e9cd 4500 	strd	r4, r5, [sp]
 80022a4:	4652      	mov	r2, sl
 80022a6:	465b      	mov	r3, fp
 80022a8:	4926      	ldr	r1, [pc, #152]	; (8002344 <main+0x9ec>)
 80022aa:	4824      	ldr	r0, [pc, #144]	; (800233c <main+0x9e4>)
 80022ac:	f009 fd68 	bl	800bd80 <siprintf>
  						sensor_values.in_stand, sensor_values.enc_button_status);
  				debugPrint(buffer);
 80022b0:	4822      	ldr	r0, [pc, #136]	; (800233c <main+0x9e4>)
 80022b2:	f7ff f835 	bl	8001320 <debugPrint>
  				previous_millis_debug = HAL_GetTick();
 80022b6:	f002 fa6d 	bl	8004794 <HAL_GetTick>
 80022ba:	4603      	mov	r3, r0
 80022bc:	4a1d      	ldr	r2, [pc, #116]	; (8002334 <main+0x9dc>)
 80022be:	6013      	str	r3, [r2, #0]
  					previous_check_for_valid_heater_update = HAL_GetTick();
  				}
  			}

  			/* Update display */
  			if(HAL_GetTick() - previous_millis_display >= interval_display){
 80022c0:	f002 fa68 	bl	8004794 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	4b20      	ldr	r3, [pc, #128]	; (8002348 <main+0x9f0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	1ad2      	subs	r2, r2, r3
 80022cc:	4b1f      	ldr	r3, [pc, #124]	; (800234c <main+0x9f4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f4ff ae98 	bcc.w	8002006 <main+0x6ae>
  				get_ambient_temp();
 80022d6:	f7fe ffdf 	bl	8001298 <get_ambient_temp>
  				update_OLED();
 80022da:	f7ff f82b 	bl	8001334 <update_OLED>
  				previous_millis_display = HAL_GetTick();
 80022de:	f002 fa59 	bl	8004794 <HAL_GetTick>
 80022e2:	4603      	mov	r3, r0
 80022e4:	4a18      	ldr	r2, [pc, #96]	; (8002348 <main+0x9f0>)
 80022e6:	6013      	str	r3, [r2, #0]
  			check_beep();
 80022e8:	e68d      	b.n	8002006 <main+0x6ae>
 80022ea:	bf00      	nop
 80022ec:	f3af 8000 	nop.w
 80022f0:	eb851eb8 	.word	0xeb851eb8
 80022f4:	3fbeb851 	.word	0x3fbeb851
 80022f8:	00000000 	.word	0x00000000
 80022fc:	40790000 	.word	0x40790000
	...
 8002308:	20000308 	.word	0x20000308
 800230c:	20000028 	.word	0x20000028
 8002310:	20000400 	.word	0x20000400
 8002314:	20000038 	.word	0x20000038
 8002318:	200003c8 	.word	0x200003c8
 800231c:	200002f8 	.word	0x200002f8
 8002320:	2000001c 	.word	0x2000001c
 8002324:	20001a50 	.word	0x20001a50
 8002328:	20000350 	.word	0x20000350
 800232c:	200003f8 	.word	0x200003f8
 8002330:	20000408 	.word	0x20000408
 8002334:	200002f4 	.word	0x200002f4
 8002338:	20000018 	.word	0x20000018
 800233c:	20000328 	.word	0x20000328
 8002340:	40240000 	.word	0x40240000
 8002344:	0800f228 	.word	0x0800f228
 8002348:	200002f0 	.word	0x200002f0
 800234c:	20000014 	.word	0x20000014

08002350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b09e      	sub	sp, #120	; 0x78
 8002354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002356:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800235a:	2228      	movs	r2, #40	; 0x28
 800235c:	2100      	movs	r1, #0
 800235e:	4618      	mov	r0, r3
 8002360:	f009 fd71 	bl	800be46 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002364:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002374:	463b      	mov	r3, r7
 8002376:	223c      	movs	r2, #60	; 0x3c
 8002378:	2100      	movs	r1, #0
 800237a:	4618      	mov	r0, r3
 800237c:	f009 fd63 	bl	800be46 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002380:	2303      	movs	r3, #3
 8002382:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002384:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002388:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV4;
 800238a:	2303      	movs	r3, #3
 800238c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800238e:	2301      	movs	r3, #1
 8002390:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002392:	2310      	movs	r3, #16
 8002394:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002396:	2302      	movs	r3, #2
 8002398:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800239a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800239e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80023a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80023a4:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023a6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80023aa:	4618      	mov	r0, r3
 80023ac:	f005 f9bc 	bl	8007728 <HAL_RCC_OscConfig>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80023b6:	f000 fbe9 	bl	8002b8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023ba:	230f      	movs	r3, #15
 80023bc:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80023be:	2302      	movs	r3, #2
 80023c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80023c2:	2300      	movs	r3, #0
 80023c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80023c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80023cc:	2300      	movs	r3, #0
 80023ce:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80023d0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80023d4:	2102      	movs	r1, #2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f006 f9e4 	bl	80087a4 <HAL_RCC_ClockConfig>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80023e2:	f000 fbd3 	bl	8002b8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_TIM1
 80023e6:	f44f 538d 	mov.w	r3, #4512	; 0x11a0
 80023ea:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_ADC34;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80023ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInit.Adc34ClockSelection = RCC_ADC34PLLCLK_DIV1;
 80023f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023f6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80023fc:	2300      	movs	r3, #0
 80023fe:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002400:	463b      	mov	r3, r7
 8002402:	4618      	mov	r0, r3
 8002404:	f006 fbb6 	bl	8008b74 <HAL_RCCEx_PeriphCLKConfig>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800240e:	f000 fbbd 	bl	8002b8c <Error_Handler>
  }
}
 8002412:	bf00      	nop
 8002414:	3778      	adds	r7, #120	; 0x78
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	; 0x28
 8002420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002422:	f107 031c 	add.w	r3, r7, #28
 8002426:	2200      	movs	r2, #0
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	605a      	str	r2, [r3, #4]
 800242c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800242e:	1d3b      	adds	r3, r7, #4
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800243e:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <MX_ADC1_Init+0xdc>)
 8002440:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002444:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <MX_ADC1_Init+0xdc>)
 8002448:	2200      	movs	r2, #0
 800244a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800244c:	4b2a      	ldr	r3, [pc, #168]	; (80024f8 <MX_ADC1_Init+0xdc>)
 800244e:	2200      	movs	r2, #0
 8002450:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002452:	4b29      	ldr	r3, [pc, #164]	; (80024f8 <MX_ADC1_Init+0xdc>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <MX_ADC1_Init+0xdc>)
 800245a:	2200      	movs	r2, #0
 800245c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800245e:	4b26      	ldr	r3, [pc, #152]	; (80024f8 <MX_ADC1_Init+0xdc>)
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002466:	4b24      	ldr	r3, [pc, #144]	; (80024f8 <MX_ADC1_Init+0xdc>)
 8002468:	2200      	movs	r2, #0
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800246c:	4b22      	ldr	r3, [pc, #136]	; (80024f8 <MX_ADC1_Init+0xdc>)
 800246e:	2201      	movs	r2, #1
 8002470:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002472:	4b21      	ldr	r3, [pc, #132]	; (80024f8 <MX_ADC1_Init+0xdc>)
 8002474:	2200      	movs	r2, #0
 8002476:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002478:	4b1f      	ldr	r3, [pc, #124]	; (80024f8 <MX_ADC1_Init+0xdc>)
 800247a:	2201      	movs	r2, #1
 800247c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800247e:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <MX_ADC1_Init+0xdc>)
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002486:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <MX_ADC1_Init+0xdc>)
 8002488:	2204      	movs	r2, #4
 800248a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800248c:	4b1a      	ldr	r3, [pc, #104]	; (80024f8 <MX_ADC1_Init+0xdc>)
 800248e:	2200      	movs	r2, #0
 8002490:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002492:	4b19      	ldr	r3, [pc, #100]	; (80024f8 <MX_ADC1_Init+0xdc>)
 8002494:	2200      	movs	r2, #0
 8002496:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002498:	4817      	ldr	r0, [pc, #92]	; (80024f8 <MX_ADC1_Init+0xdc>)
 800249a:	f002 f9d3 	bl	8004844 <HAL_ADC_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80024a4:	f000 fb72 	bl	8002b8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80024a8:	2300      	movs	r3, #0
 80024aa:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80024ac:	f107 031c 	add.w	r3, r7, #28
 80024b0:	4619      	mov	r1, r3
 80024b2:	4811      	ldr	r0, [pc, #68]	; (80024f8 <MX_ADC1_Init+0xdc>)
 80024b4:	f003 fda2 	bl	8005ffc <HAL_ADCEx_MultiModeConfigChannel>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80024be:	f000 fb65 	bl	8002b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80024c2:	2302      	movs	r3, #2
 80024c4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80024c6:	2301      	movs	r3, #1
 80024c8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80024da:	1d3b      	adds	r3, r7, #4
 80024dc:	4619      	mov	r1, r3
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <MX_ADC1_Init+0xdc>)
 80024e0:	f003 faa2 	bl	8005a28 <HAL_ADC_ConfigChannel>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80024ea:	f000 fb4f 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80024ee:	bf00      	nop
 80024f0:	3728      	adds	r7, #40	; 0x28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000171c 	.word	0x2000171c

080024fc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	; 0x28
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8002502:	f107 031c 	add.w	r3, r7, #28
 8002506:	2200      	movs	r2, #0
 8002508:	601a      	str	r2, [r3, #0]
 800250a:	605a      	str	r2, [r3, #4]
 800250c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	605a      	str	r2, [r3, #4]
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	60da      	str	r2, [r3, #12]
 800251a:	611a      	str	r2, [r3, #16]
 800251c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800251e:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <MX_ADC3_Init+0xd8>)
 8002520:	4a2d      	ldr	r2, [pc, #180]	; (80025d8 <MX_ADC3_Init+0xdc>)
 8002522:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002524:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <MX_ADC3_Init+0xd8>)
 8002526:	2200      	movs	r2, #0
 8002528:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800252a:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <MX_ADC3_Init+0xd8>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002530:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <MX_ADC3_Init+0xd8>)
 8002532:	2200      	movs	r2, #0
 8002534:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8002536:	4b27      	ldr	r3, [pc, #156]	; (80025d4 <MX_ADC3_Init+0xd8>)
 8002538:	2201      	movs	r2, #1
 800253a:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <MX_ADC3_Init+0xd8>)
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <MX_ADC3_Init+0xd8>)
 8002546:	2200      	movs	r2, #0
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <MX_ADC3_Init+0xd8>)
 800254c:	2201      	movs	r2, #1
 800254e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002550:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <MX_ADC3_Init+0xd8>)
 8002552:	2200      	movs	r2, #0
 8002554:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002556:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <MX_ADC3_Init+0xd8>)
 8002558:	2201      	movs	r2, #1
 800255a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800255c:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <MX_ADC3_Init+0xd8>)
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <MX_ADC3_Init+0xd8>)
 8002566:	2204      	movs	r2, #4
 8002568:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800256a:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <MX_ADC3_Init+0xd8>)
 800256c:	2200      	movs	r2, #0
 800256e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <MX_ADC3_Init+0xd8>)
 8002572:	2200      	movs	r2, #0
 8002574:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002576:	4817      	ldr	r0, [pc, #92]	; (80025d4 <MX_ADC3_Init+0xd8>)
 8002578:	f002 f964 	bl	8004844 <HAL_ADC_Init>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <MX_ADC3_Init+0x8a>
  {
    Error_Handler();
 8002582:	f000 fb03 	bl	8002b8c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002586:	2300      	movs	r3, #0
 8002588:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800258a:	f107 031c 	add.w	r3, r7, #28
 800258e:	4619      	mov	r1, r3
 8002590:	4810      	ldr	r0, [pc, #64]	; (80025d4 <MX_ADC3_Init+0xd8>)
 8002592:	f003 fd33 	bl	8005ffc <HAL_ADCEx_MultiModeConfigChannel>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_ADC3_Init+0xa4>
  {
    Error_Handler();
 800259c:	f000 faf6 	bl	8002b8c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80025a0:	2305      	movs	r3, #5
 80025a2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025a4:	2301      	movs	r3, #1
 80025a6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80025ac:	2300      	movs	r3, #0
 80025ae:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025b8:	1d3b      	adds	r3, r7, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	4805      	ldr	r0, [pc, #20]	; (80025d4 <MX_ADC3_Init+0xd8>)
 80025be:	f003 fa33 	bl	8005a28 <HAL_ADC_ConfigChannel>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 80025c8:	f000 fae0 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80025cc:	bf00      	nop
 80025ce:	3728      	adds	r7, #40	; 0x28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	2000176c 	.word	0x2000176c
 80025d8:	50000400 	.word	0x50000400

080025dc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80025e0:	4b0d      	ldr	r3, [pc, #52]	; (8002618 <MX_CRC_Init+0x3c>)
 80025e2:	4a0e      	ldr	r2, [pc, #56]	; (800261c <MX_CRC_Init+0x40>)
 80025e4:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <MX_CRC_Init+0x3c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80025ec:	4b0a      	ldr	r3, [pc, #40]	; (8002618 <MX_CRC_Init+0x3c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <MX_CRC_Init+0x3c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80025f8:	4b07      	ldr	r3, [pc, #28]	; (8002618 <MX_CRC_Init+0x3c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <MX_CRC_Init+0x3c>)
 8002600:	2201      	movs	r2, #1
 8002602:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8002604:	4804      	ldr	r0, [pc, #16]	; (8002618 <MX_CRC_Init+0x3c>)
 8002606:	f004 f82d 	bl	8006664 <HAL_CRC_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8002610:	f000 fabc 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8002614:	bf00      	nop
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20001800 	.word	0x20001800
 800261c:	40023000 	.word	0x40023000

08002620 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002624:	4b1b      	ldr	r3, [pc, #108]	; (8002694 <MX_I2C1_Init+0x74>)
 8002626:	4a1c      	ldr	r2, [pc, #112]	; (8002698 <MX_I2C1_Init+0x78>)
 8002628:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800262a:	4b1a      	ldr	r3, [pc, #104]	; (8002694 <MX_I2C1_Init+0x74>)
 800262c:	4a1b      	ldr	r2, [pc, #108]	; (800269c <MX_I2C1_Init+0x7c>)
 800262e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002630:	4b18      	ldr	r3, [pc, #96]	; (8002694 <MX_I2C1_Init+0x74>)
 8002632:	2200      	movs	r2, #0
 8002634:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002636:	4b17      	ldr	r3, [pc, #92]	; (8002694 <MX_I2C1_Init+0x74>)
 8002638:	2201      	movs	r2, #1
 800263a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800263c:	4b15      	ldr	r3, [pc, #84]	; (8002694 <MX_I2C1_Init+0x74>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002642:	4b14      	ldr	r3, [pc, #80]	; (8002694 <MX_I2C1_Init+0x74>)
 8002644:	2200      	movs	r2, #0
 8002646:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <MX_I2C1_Init+0x74>)
 800264a:	2200      	movs	r2, #0
 800264c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800264e:	4b11      	ldr	r3, [pc, #68]	; (8002694 <MX_I2C1_Init+0x74>)
 8002650:	2200      	movs	r2, #0
 8002652:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <MX_I2C1_Init+0x74>)
 8002656:	2200      	movs	r2, #0
 8002658:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800265a:	480e      	ldr	r0, [pc, #56]	; (8002694 <MX_I2C1_Init+0x74>)
 800265c:	f004 ff3e 	bl	80074dc <HAL_I2C_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002666:	f000 fa91 	bl	8002b8c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800266a:	2100      	movs	r1, #0
 800266c:	4809      	ldr	r0, [pc, #36]	; (8002694 <MX_I2C1_Init+0x74>)
 800266e:	f004 ffc4 	bl	80075fa <HAL_I2CEx_ConfigAnalogFilter>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002678:	f000 fa88 	bl	8002b8c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800267c:	2100      	movs	r1, #0
 800267e:	4805      	ldr	r0, [pc, #20]	; (8002694 <MX_I2C1_Init+0x74>)
 8002680:	f005 f806 	bl	8007690 <HAL_I2CEx_ConfigDigitalFilter>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800268a:	f000 fa7f 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	20001824 	.word	0x20001824
 8002698:	40005400 	.word	0x40005400
 800269c:	2000090e 	.word	0x2000090e

080026a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <MX_SPI1_Init+0x74>)
 80026a6:	4a1c      	ldr	r2, [pc, #112]	; (8002718 <MX_SPI1_Init+0x78>)
 80026a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <MX_SPI1_Init+0x74>)
 80026ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80026b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 80026b2:	4b18      	ldr	r3, [pc, #96]	; (8002714 <MX_SPI1_Init+0x74>)
 80026b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80026b8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80026ba:	4b16      	ldr	r3, [pc, #88]	; (8002714 <MX_SPI1_Init+0x74>)
 80026bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80026c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80026c2:	4b14      	ldr	r3, [pc, #80]	; (8002714 <MX_SPI1_Init+0x74>)
 80026c4:	2202      	movs	r2, #2
 80026c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80026c8:	4b12      	ldr	r3, [pc, #72]	; (8002714 <MX_SPI1_Init+0x74>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80026ce:	4b11      	ldr	r3, [pc, #68]	; (8002714 <MX_SPI1_Init+0x74>)
 80026d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80026d6:	4b0f      	ldr	r3, [pc, #60]	; (8002714 <MX_SPI1_Init+0x74>)
 80026d8:	2208      	movs	r2, #8
 80026da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80026dc:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <MX_SPI1_Init+0x74>)
 80026de:	2200      	movs	r2, #0
 80026e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80026e2:	4b0c      	ldr	r3, [pc, #48]	; (8002714 <MX_SPI1_Init+0x74>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <MX_SPI1_Init+0x74>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80026ee:	4b09      	ldr	r3, [pc, #36]	; (8002714 <MX_SPI1_Init+0x74>)
 80026f0:	2207      	movs	r2, #7
 80026f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80026f4:	4b07      	ldr	r3, [pc, #28]	; (8002714 <MX_SPI1_Init+0x74>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80026fa:	4b06      	ldr	r3, [pc, #24]	; (8002714 <MX_SPI1_Init+0x74>)
 80026fc:	2208      	movs	r2, #8
 80026fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002700:	4804      	ldr	r0, [pc, #16]	; (8002714 <MX_SPI1_Init+0x74>)
 8002702:	f006 fbe7 	bl	8008ed4 <HAL_SPI_Init>
 8002706:	4603      	mov	r3, r0
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <MX_SPI1_Init+0x70>
  {
    Error_Handler();
 800270c:	f000 fa3e 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002710:	bf00      	nop
 8002712:	bd80      	pop	{r7, pc}
 8002714:	20001878 	.word	0x20001878
 8002718:	40013000 	.word	0x40013000

0800271c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b09a      	sub	sp, #104	; 0x68
 8002720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002722:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
 800272a:	605a      	str	r2, [r3, #4]
 800272c:	609a      	str	r2, [r3, #8]
 800272e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002730:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	605a      	str	r2, [r3, #4]
 800273a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800273c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	60da      	str	r2, [r3, #12]
 800274a:	611a      	str	r2, [r3, #16]
 800274c:	615a      	str	r2, [r3, #20]
 800274e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002750:	1d3b      	adds	r3, r7, #4
 8002752:	222c      	movs	r2, #44	; 0x2c
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f009 fb75 	bl	800be46 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800275c:	4b43      	ldr	r3, [pc, #268]	; (800286c <MX_TIM1_Init+0x150>)
 800275e:	4a44      	ldr	r2, [pc, #272]	; (8002870 <MX_TIM1_Init+0x154>)
 8002760:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 360-1;
 8002762:	4b42      	ldr	r3, [pc, #264]	; (800286c <MX_TIM1_Init+0x150>)
 8002764:	f240 1267 	movw	r2, #359	; 0x167
 8002768:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800276a:	4b40      	ldr	r3, [pc, #256]	; (800286c <MX_TIM1_Init+0x150>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8002770:	4b3e      	ldr	r3, [pc, #248]	; (800286c <MX_TIM1_Init+0x150>)
 8002772:	2264      	movs	r2, #100	; 0x64
 8002774:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <MX_TIM1_Init+0x150>)
 8002778:	2200      	movs	r2, #0
 800277a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800277c:	4b3b      	ldr	r3, [pc, #236]	; (800286c <MX_TIM1_Init+0x150>)
 800277e:	2200      	movs	r2, #0
 8002780:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002782:	4b3a      	ldr	r3, [pc, #232]	; (800286c <MX_TIM1_Init+0x150>)
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002788:	4838      	ldr	r0, [pc, #224]	; (800286c <MX_TIM1_Init+0x150>)
 800278a:	f007 f8b7 	bl	80098fc <HAL_TIM_Base_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8002794:	f000 f9fa 	bl	8002b8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002798:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800279c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800279e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027a2:	4619      	mov	r1, r3
 80027a4:	4831      	ldr	r0, [pc, #196]	; (800286c <MX_TIM1_Init+0x150>)
 80027a6:	f007 fec5 	bl	800a534 <HAL_TIM_ConfigClockSource>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80027b0:	f000 f9ec 	bl	8002b8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80027b4:	482d      	ldr	r0, [pc, #180]	; (800286c <MX_TIM1_Init+0x150>)
 80027b6:	f007 f992 	bl	8009ade <HAL_TIM_PWM_Init>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80027c0:	f000 f9e4 	bl	8002b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80027c8:	2300      	movs	r3, #0
 80027ca:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027cc:	2300      	movs	r3, #0
 80027ce:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80027d0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027d4:	4619      	mov	r1, r3
 80027d6:	4825      	ldr	r0, [pc, #148]	; (800286c <MX_TIM1_Init+0x150>)
 80027d8:	f008 fc64 	bl	800b0a4 <HAL_TIMEx_MasterConfigSynchronization>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80027e2:	f000 f9d3 	bl	8002b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027e6:	2360      	movs	r3, #96	; 0x60
 80027e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027ee:	2300      	movs	r3, #0
 80027f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80027f2:	2300      	movs	r3, #0
 80027f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027f6:	2300      	movs	r3, #0
 80027f8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027fa:	2300      	movs	r3, #0
 80027fc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002802:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002806:	2200      	movs	r2, #0
 8002808:	4619      	mov	r1, r3
 800280a:	4818      	ldr	r0, [pc, #96]	; (800286c <MX_TIM1_Init+0x150>)
 800280c:	f007 fd7e 	bl	800a30c <HAL_TIM_PWM_ConfigChannel>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8002816:	f000 f9b9 	bl	8002b8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800281a:	2300      	movs	r3, #0
 800281c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800281e:	2300      	movs	r3, #0
 8002820:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800282e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002832:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002834:	2300      	movs	r3, #0
 8002836:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002838:	2300      	movs	r3, #0
 800283a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800283c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002842:	2300      	movs	r3, #0
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800284a:	1d3b      	adds	r3, r7, #4
 800284c:	4619      	mov	r1, r3
 800284e:	4807      	ldr	r0, [pc, #28]	; (800286c <MX_TIM1_Init+0x150>)
 8002850:	f008 fca8 	bl	800b1a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800285a:	f000 f997 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800285e:	4803      	ldr	r0, [pc, #12]	; (800286c <MX_TIM1_Init+0x150>)
 8002860:	f001 fd82 	bl	8004368 <HAL_TIM_MspPostInit>

}
 8002864:	bf00      	nop
 8002866:	3768      	adds	r7, #104	; 0x68
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	20001920 	.word	0x20001920
 8002870:	40012c00 	.word	0x40012c00

08002874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08c      	sub	sp, #48	; 0x30
 8002878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800287a:	f107 030c 	add.w	r3, r7, #12
 800287e:	2224      	movs	r2, #36	; 0x24
 8002880:	2100      	movs	r1, #0
 8002882:	4618      	mov	r0, r3
 8002884:	f009 fadf 	bl	800be46 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002888:	463b      	mov	r3, r7
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
 800288e:	605a      	str	r2, [r3, #4]
 8002890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002892:	4b21      	ldr	r3, [pc, #132]	; (8002918 <MX_TIM2_Init+0xa4>)
 8002894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002898:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800289a:	4b1f      	ldr	r3, [pc, #124]	; (8002918 <MX_TIM2_Init+0xa4>)
 800289c:	2200      	movs	r2, #0
 800289e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028a0:	4b1d      	ldr	r3, [pc, #116]	; (8002918 <MX_TIM2_Init+0xa4>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <MX_TIM2_Init+0xa4>)
 80028a8:	f04f 32ff 	mov.w	r2, #4294967295
 80028ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80028ae:	4b1a      	ldr	r3, [pc, #104]	; (8002918 <MX_TIM2_Init+0xa4>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <MX_TIM2_Init+0xa4>)
 80028b6:	2280      	movs	r2, #128	; 0x80
 80028b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80028ba:	2303      	movs	r3, #3
 80028bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80028be:	2300      	movs	r3, #0
 80028c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80028c2:	2301      	movs	r3, #1
 80028c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80028ca:	230a      	movs	r3, #10
 80028cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80028d2:	2301      	movs	r3, #1
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80028d6:	2300      	movs	r3, #0
 80028d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80028da:	230a      	movs	r3, #10
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80028de:	f107 030c 	add.w	r3, r7, #12
 80028e2:	4619      	mov	r1, r3
 80028e4:	480c      	ldr	r0, [pc, #48]	; (8002918 <MX_TIM2_Init+0xa4>)
 80028e6:	f007 fa9d 	bl	8009e24 <HAL_TIM_Encoder_Init>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80028f0:	f000 f94c 	bl	8002b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028f4:	2300      	movs	r3, #0
 80028f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028fc:	463b      	mov	r3, r7
 80028fe:	4619      	mov	r1, r3
 8002900:	4805      	ldr	r0, [pc, #20]	; (8002918 <MX_TIM2_Init+0xa4>)
 8002902:	f008 fbcf 	bl	800b0a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 800290c:	f000 f93e 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002910:	bf00      	nop
 8002912:	3730      	adds	r7, #48	; 0x30
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	2000196c 	.word	0x2000196c

0800291c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b08a      	sub	sp, #40	; 0x28
 8002920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002922:	f107 031c 	add.w	r3, r7, #28
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	605a      	str	r2, [r3, #4]
 800292c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800292e:	463b      	mov	r3, r7
 8002930:	2200      	movs	r2, #0
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	60da      	str	r2, [r3, #12]
 800293a:	611a      	str	r2, [r3, #16]
 800293c:	615a      	str	r2, [r3, #20]
 800293e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002940:	4b21      	ldr	r3, [pc, #132]	; (80029c8 <MX_TIM4_Init+0xac>)
 8002942:	4a22      	ldr	r2, [pc, #136]	; (80029cc <MX_TIM4_Init+0xb0>)
 8002944:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 9-1;
 8002946:	4b20      	ldr	r3, [pc, #128]	; (80029c8 <MX_TIM4_Init+0xac>)
 8002948:	2208      	movs	r2, #8
 800294a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800294c:	4b1e      	ldr	r3, [pc, #120]	; (80029c8 <MX_TIM4_Init+0xac>)
 800294e:	2200      	movs	r2, #0
 8002950:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 400;
 8002952:	4b1d      	ldr	r3, [pc, #116]	; (80029c8 <MX_TIM4_Init+0xac>)
 8002954:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002958:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800295a:	4b1b      	ldr	r3, [pc, #108]	; (80029c8 <MX_TIM4_Init+0xac>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002960:	4b19      	ldr	r3, [pc, #100]	; (80029c8 <MX_TIM4_Init+0xac>)
 8002962:	2200      	movs	r2, #0
 8002964:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002966:	4818      	ldr	r0, [pc, #96]	; (80029c8 <MX_TIM4_Init+0xac>)
 8002968:	f007 f8b9 	bl	8009ade <HAL_TIM_PWM_Init>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8002972:	f000 f90b 	bl	8002b8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002976:	2300      	movs	r3, #0
 8002978:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800297a:	2300      	movs	r3, #0
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800297e:	f107 031c 	add.w	r3, r7, #28
 8002982:	4619      	mov	r1, r3
 8002984:	4810      	ldr	r0, [pc, #64]	; (80029c8 <MX_TIM4_Init+0xac>)
 8002986:	f008 fb8d 	bl	800b0a4 <HAL_TIMEx_MasterConfigSynchronization>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8002990:	f000 f8fc 	bl	8002b8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002994:	2360      	movs	r3, #96	; 0x60
 8002996:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800299c:	2300      	movs	r3, #0
 800299e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80029a4:	463b      	mov	r3, r7
 80029a6:	2204      	movs	r2, #4
 80029a8:	4619      	mov	r1, r3
 80029aa:	4807      	ldr	r0, [pc, #28]	; (80029c8 <MX_TIM4_Init+0xac>)
 80029ac:	f007 fcae 	bl	800a30c <HAL_TIM_PWM_ConfigChannel>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d001      	beq.n	80029ba <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80029b6:	f000 f8e9 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80029ba:	4803      	ldr	r0, [pc, #12]	; (80029c8 <MX_TIM4_Init+0xac>)
 80029bc:	f001 fcd4 	bl	8004368 <HAL_TIM_MspPostInit>

}
 80029c0:	bf00      	nop
 80029c2:	3728      	adds	r7, #40	; 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	200019b8 	.word	0x200019b8
 80029cc:	40000800 	.word	0x40000800

080029d0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029d6:	4a10      	ldr	r2, [pc, #64]	; (8002a18 <MX_TIM16_Init+0x48>)
 80029d8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80029da:	4b0e      	ldr	r3, [pc, #56]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029dc:	2200      	movs	r2, #0
 80029de:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80029e6:	4b0b      	ldr	r3, [pc, #44]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80029ee:	4b09      	ldr	r3, [pc, #36]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <MX_TIM16_Init+0x44>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002a00:	4804      	ldr	r0, [pc, #16]	; (8002a14 <MX_TIM16_Init+0x44>)
 8002a02:	f006 ff7b 	bl	80098fc <HAL_TIM_Base_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8002a0c:	f000 f8be 	bl	8002b8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}
 8002a14:	20001a04 	.word	0x20001a04
 8002a18:	40014400 	.word	0x40014400

08002a1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <MX_DMA_Init+0x60>)
 8002a24:	695b      	ldr	r3, [r3, #20]
 8002a26:	4a15      	ldr	r2, [pc, #84]	; (8002a7c <MX_DMA_Init+0x60>)
 8002a28:	f043 0302 	orr.w	r3, r3, #2
 8002a2c:	6153      	str	r3, [r2, #20]
 8002a2e:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <MX_DMA_Init+0x60>)
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <MX_DMA_Init+0x60>)
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <MX_DMA_Init+0x60>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6153      	str	r3, [r2, #20]
 8002a46:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <MX_DMA_Init+0x60>)
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	603b      	str	r3, [r7, #0]
 8002a50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8002a52:	2200      	movs	r2, #0
 8002a54:	2100      	movs	r1, #0
 8002a56:	200d      	movs	r0, #13
 8002a58:	f003 fdcd 	bl	80065f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8002a5c:	200d      	movs	r0, #13
 8002a5e:	f003 fde6 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8002a62:	2200      	movs	r2, #0
 8002a64:	2100      	movs	r1, #0
 8002a66:	203c      	movs	r0, #60	; 0x3c
 8002a68:	f003 fdc5 	bl	80065f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8002a6c:	203c      	movs	r0, #60	; 0x3c
 8002a6e:	f003 fdde 	bl	800662e <HAL_NVIC_EnableIRQ>

}
 8002a72:	bf00      	nop
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40021000 	.word	0x40021000

08002a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b08a      	sub	sp, #40	; 0x28
 8002a84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a86:	f107 0314 	add.w	r3, r7, #20
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	605a      	str	r2, [r3, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	4a3a      	ldr	r2, [pc, #232]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002a9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002aa0:	6153      	str	r3, [r2, #20]
 8002aa2:	4b38      	ldr	r3, [pc, #224]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002aae:	4b35      	ldr	r3, [pc, #212]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	4a34      	ldr	r2, [pc, #208]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002ab4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ab8:	6153      	str	r3, [r2, #20]
 8002aba:	4b32      	ldr	r3, [pc, #200]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac6:	4b2f      	ldr	r3, [pc, #188]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002ac8:	695b      	ldr	r3, [r3, #20]
 8002aca:	4a2e      	ldr	r2, [pc, #184]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ad0:	6153      	str	r3, [r2, #20]
 8002ad2:	4b2c      	ldr	r3, [pc, #176]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ade:	4b29      	ldr	r3, [pc, #164]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	4a28      	ldr	r2, [pc, #160]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002ae4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae8:	6153      	str	r3, [r2, #20]
 8002aea:	4b26      	ldr	r3, [pc, #152]	; (8002b84 <MX_GPIO_Init+0x104>)
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USR_1_Pin|SPI1_DC_Pin|SPI1_RST_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2159      	movs	r1, #89	; 0x59
 8002afa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002afe:	f004 fcd5 	bl	80074ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002b02:	2200      	movs	r2, #0
 8002b04:	2101      	movs	r1, #1
 8002b06:	4820      	ldr	r0, [pc, #128]	; (8002b88 <MX_GPIO_Init+0x108>)
 8002b08:	f004 fcd0 	bl	80074ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USR_1_Pin SPI1_DC_Pin SPI1_RST_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = USR_1_Pin|SPI1_DC_Pin|SPI1_RST_Pin|SPI1_CS_Pin;
 8002b0c:	2359      	movs	r3, #89	; 0x59
 8002b0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b10:	2301      	movs	r3, #1
 8002b12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b14:	2300      	movs	r3, #0
 8002b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4619      	mov	r1, r3
 8002b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b26:	f004 fb2f 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8002b3a:	f107 0314 	add.w	r3, r7, #20
 8002b3e:	4619      	mov	r1, r3
 8002b40:	4811      	ldr	r0, [pc, #68]	; (8002b88 <MX_GPIO_Init+0x108>)
 8002b42:	f004 fb21 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pins : VBIT_0_Pin VBIT_1_Pin VBIT_2_Pin VBIT_3_Pin
                           STAND_INP_Pin HANDLE_INP_2_Pin HANDLE_INP_1_Pin SW_1_Pin
                           SW_2_Pin SW_3_Pin */
  GPIO_InitStruct.Pin = VBIT_0_Pin|VBIT_1_Pin|VBIT_2_Pin|VBIT_3_Pin
 8002b46:	f64d 4376 	movw	r3, #56438	; 0xdc76
 8002b4a:	617b      	str	r3, [r7, #20]
                          |STAND_INP_Pin|HANDLE_INP_2_Pin|HANDLE_INP_1_Pin|SW_1_Pin
                          |SW_2_Pin|SW_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b50:	2300      	movs	r3, #0
 8002b52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b54:	f107 0314 	add.w	r3, r7, #20
 8002b58:	4619      	mov	r1, r3
 8002b5a:	480b      	ldr	r0, [pc, #44]	; (8002b88 <MX_GPIO_Init+0x108>)
 8002b5c:	f004 fb14 	bl	8007188 <HAL_GPIO_Init>

  /*Configure GPIO pin : USR_2_Pin */
  GPIO_InitStruct.Pin = USR_2_Pin;
 8002b60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b66:	2300      	movs	r3, #0
 8002b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_2_GPIO_Port, &GPIO_InitStruct);
 8002b6e:	f107 0314 	add.w	r3, r7, #20
 8002b72:	4619      	mov	r1, r3
 8002b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002b78:	f004 fb06 	bl	8007188 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b7c:	bf00      	nop
 8002b7e:	3728      	adds	r7, #40	; 0x28
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	40021000 	.word	0x40021000
 8002b88:	48000400 	.word	0x48000400

08002b8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b90:	b672      	cpsid	i
}
 8002b92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b94:	e7fe      	b.n	8002b94 <Error_Handler+0x8>

08002b96 <Moving_Average_Init>:
  * @brief  This function initializes filter's data structure.
	* @param  filter_struct : Data structure
  * @retval None.
  */
void Moving_Average_Init(FilterTypeDef* filter_struct, float window_length)
{
 8002b96:	b480      	push	{r7}
 8002b98:	b085      	sub	sp, #20
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	ed87 0a00 	vstr	s0, [r7]
	filter_struct->WindowLength = window_length;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	601a      	str	r2, [r3, #0]

	filter_struct->Sum = 0;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->WindowPointer = 0;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328

	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8002bb8:	2300      	movs	r3, #0
 8002bba:	60fb      	str	r3, [r7, #12]
 8002bbc:	e008      	b.n	8002bd0 <Moving_Average_Init+0x3a>
	{
		filter_struct->History[i] = 0;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	605a      	str	r2, [r3, #4]
	for(uint32_t i=0; i<filter_struct->WindowLength; i++)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	ee07 3a90 	vmov	s15, r3
 8002bd6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	edd3 7a00 	vldr	s15, [r3]
 8002be0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002be8:	d4e9      	bmi.n	8002bbe <Moving_Average_Init+0x28>
	}
}
 8002bea:	bf00      	nop
 8002bec:	bf00      	nop
 8002bee:	3714      	adds	r7, #20
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <Moving_Average_Compute>:
	* @param  raw_data : input raw sensor data.
	* @param  filter_struct : Data structure
  * @retval Filtered value.
  */
double Moving_Average_Compute(uint32_t raw_data, FilterTypeDef* filter_struct)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
	filter_struct->Sum += raw_data;
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	441a      	add	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->Sum -= filter_struct->History[filter_struct->WindowPointer];
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	f8d3 2324 	ldr.w	r2, [r3, #804]	; 0x324
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002c1e:	6839      	ldr	r1, [r7, #0]
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	1ad2      	subs	r2, r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f8c3 2324 	str.w	r2, [r3, #804]	; 0x324
	filter_struct->History[filter_struct->WindowPointer] = raw_data;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	605a      	str	r2, [r3, #4]
	if(filter_struct->WindowPointer < filter_struct->WindowLength - 1)
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002c44:	ee07 3a90 	vmov	s15, r3
 8002c48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	edd3 7a00 	vldr	s15, [r3]
 8002c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002c56:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8002c5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c62:	d507      	bpl.n	8002c74 <Moving_Average_Compute+0x7c>
	{
		filter_struct->WindowPointer += 1;
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	f8d3 3328 	ldr.w	r3, [r3, #808]	; 0x328
 8002c6a:	1c5a      	adds	r2, r3, #1
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
 8002c72:	e003      	b.n	8002c7c <Moving_Average_Compute+0x84>
	}
	else
	{
		filter_struct->WindowPointer = 0;
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f8c3 2328 	str.w	r2, [r3, #808]	; 0x328
	}
	return filter_struct->Sum/filter_struct->WindowLength;
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	f8d3 3324 	ldr.w	r3, [r3, #804]	; 0x324
 8002c82:	ee07 3a90 	vmov	s15, r3
 8002c86:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	edd3 7a00 	vldr	s15, [r3]
 8002c90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c94:	ee16 0a90 	vmov	r0, s13
 8002c98:	f7fd fc56 	bl	8000548 <__aeabi_f2d>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	460b      	mov	r3, r1
 8002ca0:	ec43 2b17 	vmov	d7, r2, r3
}
 8002ca4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ca8:	eef0 0a67 	vmov.f32	s1, s15
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b082      	sub	sp, #8
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	uPID->LastInput = *uPID->MyInput;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70

	if (uPID->OutputSum > uPID->OutMax)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002ce2:	f7fd ff19 	bl	8000b18 <__aeabi_dcmpgt>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d006      	beq.n	8002cfa <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 8002cf8:	e011      	b.n	8002d1e <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002d06:	f7fd fee9 	bl	8000adc <__aeabi_dcmplt>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d100      	bne.n	8002d12 <PID_Init+0x60>
}
 8002d10:	e005      	b.n	8002d1e <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
}
 8002d1e:	bf00      	nop
 8002d20:	3708      	adds	r7, #8
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b08a      	sub	sp, #40	; 0x28
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8002d30:	6239      	str	r1, [r7, #32]
 8002d32:	61fa      	str	r2, [r7, #28]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	ed87 0b04 	vstr	d0, [r7, #16]
 8002d3a:	ed87 1b02 	vstr	d1, [r7, #8]
 8002d3e:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	69fa      	ldr	r2, [r7, #28]
 8002d46:	65da      	str	r2, [r3, #92]	; 0x5c
	uPID->MyInput    = Input;
 8002d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4a:	6a3a      	ldr	r2, [r7, #32]
 8002d4c:	659a      	str	r2, [r3, #88]	; 0x58
	uPID->MySetpoint = Setpoint;
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	69ba      	ldr	r2, [r7, #24]
 8002d52:	661a      	str	r2, [r3, #96]	; 0x60
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 8002d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d56:	2200      	movs	r2, #0
 8002d58:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8002d5a:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8002db0 <PID+0x88>
 8002d5e:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8002db8 <PID+0x90>
 8002d62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d64:	f000 f991 	bl	800308a <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	2264      	movs	r2, #100	; 0x64
 8002d6c:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8002d6e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002d72:	4619      	mov	r1, r3
 8002d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d76:	f000 fad9 	bl	800332c <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8002d7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002d7e:	4619      	mov	r1, r3
 8002d80:	ed97 2b00 	vldr	d2, [r7]
 8002d84:	ed97 1b02 	vldr	d1, [r7, #8]
 8002d88:	ed97 0b04 	vldr	d0, [r7, #16]
 8002d8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d8e:	f000 fa25 	bl	80031dc <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 8002d92:	f001 fcff 	bl	8004794 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	1ad2      	subs	r2, r2, r3
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	605a      	str	r2, [r3, #4]

}
 8002da2:	bf00      	nop
 8002da4:	3728      	adds	r7, #40	; 0x28
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	f3af 8000 	nop.w
 8002db0:	00000000 	.word	0x00000000
 8002db4:	406fe000 	.word	0x406fe000
	...

08002dc0 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8002dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc4:	b08c      	sub	sp, #48	; 0x30
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	785b      	ldrb	r3, [r3, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d101      	bne.n	8002dd6 <PID_Compute+0x16>
	{
		return _FALSE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e136      	b.n	8003044 <PID_Compute+0x284>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 8002dd6:	f001 fcdd 	bl	8004794 <HAL_GetTick>
 8002dda:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	623b      	str	r3, [r7, #32]

	if ((timeChange >= uPID->SampleTime) || (uPID->updateOnEveryCall))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	6a3a      	ldr	r2, [r7, #32]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d204      	bcs.n	8002dfa <PID_Compute+0x3a>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 8124 	beq.w	8003042 <PID_Compute+0x282>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e12:	f7fd fa39 	bl	8000288 <__aeabi_dsub>
 8002e16:	4602      	mov	r2, r0
 8002e18:	460b      	mov	r3, r1
 8002e1a:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 8002e24:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e28:	f7fd fa2e 	bl	8000288 <__aeabi_dsub>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	460b      	mov	r3, r1
 8002e30:	e9c7 2302 	strd	r2, r3, [r7, #8]





		uPID->OutputSum     += (uPID->Ki * error);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002e40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002e44:	f7fd fbd8 	bl	80005f8 <__aeabi_dmul>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	4650      	mov	r0, sl
 8002e4e:	4659      	mov	r1, fp
 8002e50:	f7fd fa1c 	bl	800028c <__adddf3>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	6879      	ldr	r1, [r7, #4]
 8002e5a:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

		if (uPID->OutputSum > uPID->IMax)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002e6a:	f7fd fe55 	bl	8000b18 <__aeabi_dcmpgt>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <PID_Compute+0xc2>
				{
					uPID->OutputSum = uPID->IMax;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002e80:	e010      	b.n	8002ea4 <PID_Compute+0xe4>
				}
		else if (uPID->OutputSum < uPID->IMin)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002e8e:	f7fd fe25 	bl	8000adc <__aeabi_dcmplt>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d005      	beq.n	8002ea4 <PID_Compute+0xe4>
		{
			uPID->OutputSum = uPID->IMin;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68





		uPID->DispKi_part = uPID->OutputSum;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d114      	bne.n	8002ee2 <PID_Compute+0x122>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	e9d3 ab1a 	ldrd	sl, fp, [r3, #104]	; 0x68
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002ec4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ec8:	f7fd fb96 	bl	80005f8 <__aeabi_dmul>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	460b      	mov	r3, r1
 8002ed0:	4650      	mov	r0, sl
 8002ed2:	4659      	mov	r1, fp
 8002ed4:	f7fd f9d8 	bl	8000288 <__aeabi_dsub>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}

		if (uPID->OutputSum > uPID->OutMax)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002eee:	f7fd fe13 	bl	8000b18 <__aeabi_dcmpgt>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d006      	beq.n	8002f06 <PID_Compute+0x146>
		{
			uPID->OutputSum = uPID->OutMax;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8002f04:	e010      	b.n	8002f28 <PID_Compute+0x168>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002f12:	f7fd fde3 	bl	8000adc <__aeabi_dcmplt>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <PID_Compute+0x168>
		{
			uPID->OutputSum = uPID->OutMin;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
		}
		else { }
		uPID->DispKp_part = - uPID->Kp * dInput;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002f2e:	4690      	mov	r8, r2
 8002f30:	f083 4900 	eor.w	r9, r3, #2147483648	; 0x80000000
 8002f34:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f38:	4640      	mov	r0, r8
 8002f3a:	4649      	mov	r1, r9
 8002f3c:	f7fd fb5c 	bl	80005f8 <__aeabi_dmul>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40


		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d017      	beq.n	8002f82 <PID_Compute+0x1c2>
		{
			output = uPID->Kp * error;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002f58:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002f5c:	f7fd fb4c 	bl	80005f8 <__aeabi_dmul>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
			uPID->DispKp_part = uPID->Kp * error;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002f6e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002f72:	f7fd fb41 	bl	80005f8 <__aeabi_dmul>
 8002f76:	4602      	mov	r2, r0
 8002f78:	460b      	mov	r3, r1
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40
 8002f80:	e005      	b.n	8002f8e <PID_Compute+0x1ce>
		}
		else
		{
			output = 0;
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	e9d3 891a 	ldrd	r8, r9, [r3, #104]	; 0x68
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002f9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002f9e:	f7fd fb2b 	bl	80005f8 <__aeabi_dmul>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4640      	mov	r0, r8
 8002fa8:	4649      	mov	r1, r9
 8002faa:	f7fd f96d 	bl	8000288 <__aeabi_dsub>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fb6:	f7fd f969 	bl	800028c <__adddf3>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002fc8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fcc:	f7fd fda4 	bl	8000b18 <__aeabi_dcmpgt>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d005      	beq.n	8002fe2 <PID_Compute+0x222>
		{
			output = uPID->OutMax;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8002fdc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8002fe0:	e00e      	b.n	8003000 <PID_Compute+0x240>
		}
		else if (output < uPID->OutMin)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002fe8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002fec:	f7fd fd76 	bl	8000adc <__aeabi_dcmplt>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d004      	beq.n	8003000 <PID_Compute+0x240>
		{
			output = uPID->OutMin;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8002ffc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }
		uPID->DispKd_part = - uPID->Kd * dInput;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003006:	4614      	mov	r4, r2
 8003008:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800300c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003010:	4620      	mov	r0, r4
 8003012:	4629      	mov	r1, r5
 8003014:	f7fd faf0 	bl	80005f8 <__aeabi_dmul>
 8003018:	4602      	mov	r2, r0
 800301a:	460b      	mov	r3, r1
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		*uPID->MyOutput = output;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8003026:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800302a:	e9c1 2300 	strd	r2, r3, [r1]


		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003034:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
		uPID->LastTime = now;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800303c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 800303e:	2301      	movs	r3, #1
 8003040:	e000      	b.n	8003044 <PID_Compute+0x284>

	}
	else
	{
		return _FALSE;
 8003042:	2300      	movs	r3, #0
	}

}
 8003044:	4618      	mov	r0, r3
 8003046:	3730      	adds	r7, #48	; 0x30
 8003048:	46bd      	mov	sp, r7
 800304a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800304e <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 800305a:	78fb      	ldrb	r3, [r7, #3]
 800305c:	2b01      	cmp	r3, #1
 800305e:	bf0c      	ite	eq
 8003060:	2301      	moveq	r3, #1
 8003062:	2300      	movne	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8003068:	7bfb      	ldrb	r3, [r7, #15]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d006      	beq.n	800307c <PID_SetMode+0x2e>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	785b      	ldrb	r3, [r3, #1]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d102      	bne.n	800307c <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f7ff fe1b 	bl	8002cb2 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7bfa      	ldrb	r2, [r7, #15]
 8003080:	705a      	strb	r2, [r3, #1]

}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b086      	sub	sp, #24
 800308e:	af00      	add	r7, sp, #0
 8003090:	6178      	str	r0, [r7, #20]
 8003092:	ed87 0b02 	vstr	d0, [r7, #8]
 8003096:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 800309a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800309e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80030a2:	f7fd fd2f 	bl	8000b04 <__aeabi_dcmpge>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d158      	bne.n	800315e <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 80030ac:	6979      	ldr	r1, [r7, #20]
 80030ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030b2:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	uPID->OutMax = Max;
 80030b6:	6979      	ldr	r1, [r7, #20]
 80030b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030bc:	e9c1 2320 	strd	r2, r3, [r1, #128]	; 0x80

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	785b      	ldrb	r3, [r3, #1]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d04b      	beq.n	8003160 <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80030d6:	f7fd fd1f 	bl	8000b18 <__aeabi_dcmpgt>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d007      	beq.n	80030f0 <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 80030ea:	e9c1 2300 	strd	r2, r3, [r1]
 80030ee:	e012      	b.n	8003116 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 80030fe:	f7fd fced 	bl	8000adc <__aeabi_dcmplt>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d006      	beq.n	8003116 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003112:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003122:	f7fd fcf9 	bl	8000b18 <__aeabi_dcmpgt>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d006      	beq.n	800313a <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 8003132:	6979      	ldr	r1, [r7, #20]
 8003134:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 8003138:	e012      	b.n	8003160 <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	e9d3 011a 	ldrd	r0, r1, [r3, #104]	; 0x68
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003146:	f7fd fcc9 	bl	8000adc <__aeabi_dcmplt>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8003156:	6979      	ldr	r1, [r7, #20]
 8003158:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
 800315c:	e000      	b.n	8003160 <PID_SetOutputLimits+0xd6>
		return;
 800315e:	bf00      	nop
		}
		else { }

	}

}
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <PID_SetILimits>:


/* ~~~~~~~~~~~~~~~~ PID I-windup Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetILimits(PID_TypeDef *uPID, double Min, double Max)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b086      	sub	sp, #24
 800316a:	af00      	add	r7, sp, #0
 800316c:	6178      	str	r0, [r7, #20]
 800316e:	ed87 0b02 	vstr	d0, [r7, #8]
 8003172:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 8003176:	e9d7 2300 	ldrd	r2, r3, [r7]
 800317a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800317e:	f7fd fcc1 	bl	8000b04 <__aeabi_dcmpge>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d10a      	bne.n	800319e <PID_SetILimits+0x38>
	{
		return;
	}

	uPID->IMin = Min;
 8003188:	6979      	ldr	r1, [r7, #20]
 800318a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800318e:	e9c1 2322 	strd	r2, r3, [r1, #136]	; 0x88
	uPID->IMax = Max;
 8003192:	6979      	ldr	r1, [r7, #20]
 8003194:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003198:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800319c:	e000      	b.n	80031a0 <PID_SetILimits+0x3a>
		return;
 800319e:	bf00      	nop
}
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <PID_SetTunings>:


/* ~~~~~~~~~~~~~~~~ PID Tunings ~~~~~~~~~~~~~~~~ */
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b088      	sub	sp, #32
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	61f8      	str	r0, [r7, #28]
 80031ae:	ed87 0b04 	vstr	d0, [r7, #16]
 80031b2:	ed87 1b02 	vstr	d1, [r7, #8]
 80031b6:	ed87 2b00 	vstr	d2, [r7]
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	789b      	ldrb	r3, [r3, #2]
 80031be:	4619      	mov	r1, r3
 80031c0:	ed97 2b00 	vldr	d2, [r7]
 80031c4:	ed97 1b02 	vldr	d1, [r7, #8]
 80031c8:	ed97 0b04 	vldr	d0, [r7, #16]
 80031cc:	69f8      	ldr	r0, [r7, #28]
 80031ce:	f000 f805 	bl	80031dc <PID_SetTunings2>
}
 80031d2:	bf00      	nop
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
	...

080031dc <PID_SetTunings2>:
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08a      	sub	sp, #40	; 0x28
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	61f8      	str	r0, [r7, #28]
 80031e4:	ed87 0b04 	vstr	d0, [r7, #16]
 80031e8:	ed87 1b02 	vstr	d1, [r7, #8]
 80031ec:	ed87 2b00 	vstr	d2, [r7]
 80031f0:	460b      	mov	r3, r1
 80031f2:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003200:	f7fd fc6c 	bl	8000adc <__aeabi_dcmplt>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	f040 8089 	bne.w	800331e <PID_SetTunings2+0x142>
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003218:	f7fd fc60 	bl	8000adc <__aeabi_dcmplt>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d17d      	bne.n	800331e <PID_SetTunings2+0x142>
 8003222:	f04f 0200 	mov.w	r2, #0
 8003226:	f04f 0300 	mov.w	r3, #0
 800322a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800322e:	f7fd fc55 	bl	8000adc <__aeabi_dcmplt>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d172      	bne.n	800331e <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	7efa      	ldrb	r2, [r7, #27]
 800323c:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 800323e:	7efb      	ldrb	r3, [r7, #27]
 8003240:	2b01      	cmp	r3, #1
 8003242:	bf0c      	ite	eq
 8003244:	2301      	moveq	r3, #1
 8003246:	2300      	movne	r3, #0
 8003248:	b2db      	uxtb	r3, r3
 800324a:	461a      	mov	r2, r3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 8003250:	69f9      	ldr	r1, [r7, #28]
 8003252:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003256:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 800325a:	69f9      	ldr	r1, [r7, #28]
 800325c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003260:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 8003264:	69f9      	ldr	r1, [r7, #28]
 8003266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800326a:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	4618      	mov	r0, r3
 8003274:	f7fd f946 	bl	8000504 <__aeabi_ui2d>
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <PID_SetTunings2+0x14c>)
 800327e:	f7fd fae5 	bl	800084c <__aeabi_ddiv>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 800328a:	69f9      	ldr	r1, [r7, #28]
 800328c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003290:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8003294:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003298:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800329c:	f7fd f9ac 	bl	80005f8 <__aeabi_dmul>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	69f9      	ldr	r1, [r7, #28]
 80032a6:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 80032aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80032ae:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032b2:	f7fd facb 	bl	800084c <__aeabi_ddiv>
 80032b6:	4602      	mov	r2, r0
 80032b8:	460b      	mov	r3, r1
 80032ba:	69f9      	ldr	r1, [r7, #28]
 80032bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	78db      	ldrb	r3, [r3, #3]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d12b      	bne.n	8003320 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80032ce:	f04f 0000 	mov.w	r0, #0
 80032d2:	f04f 0100 	mov.w	r1, #0
 80032d6:	f7fc ffd7 	bl	8000288 <__aeabi_dsub>
 80032da:	4602      	mov	r2, r0
 80032dc:	460b      	mov	r3, r1
 80032de:	69f9      	ldr	r1, [r7, #28]
 80032e0:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80032ea:	f04f 0000 	mov.w	r0, #0
 80032ee:	f04f 0100 	mov.w	r1, #0
 80032f2:	f7fc ffc9 	bl	8000288 <__aeabi_dsub>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	69f9      	ldr	r1, [r7, #28]
 80032fc:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003306:	f04f 0000 	mov.w	r0, #0
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	f7fc ffbb 	bl	8000288 <__aeabi_dsub>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	69f9      	ldr	r1, [r7, #28]
 8003318:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 800331c:	e000      	b.n	8003320 <PID_SetTunings2+0x144>
		return;
 800331e:	bf00      	nop

	}

}
 8003320:	3728      	adds	r7, #40	; 0x28
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	408f4000 	.word	0x408f4000

0800332c <PID_SetControllerDirection>:


/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 800332c:	b580      	push	{r7, lr}
 800332e:	b082      	sub	sp, #8
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d02e      	beq.n	800339e <PID_SetControllerDirection+0x72>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	78db      	ldrb	r3, [r3, #3]
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	429a      	cmp	r2, r3
 8003348:	d029      	beq.n	800339e <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8003350:	f04f 0000 	mov.w	r0, #0
 8003354:	f04f 0100 	mov.w	r1, #0
 8003358:	f7fc ff96 	bl	8000288 <__aeabi_dsub>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800336c:	f04f 0000 	mov.w	r0, #0
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	f7fc ff88 	bl	8000288 <__aeabi_dsub>
 8003378:	4602      	mov	r2, r0
 800337a:	460b      	mov	r3, r1
 800337c:	6879      	ldr	r1, [r7, #4]
 800337e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8003388:	f04f 0000 	mov.w	r0, #0
 800338c:	f04f 0100 	mov.w	r1, #0
 8003390:	f7fc ff7a 	bl	8000288 <__aeabi_dsub>
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	78fa      	ldrb	r2, [r7, #3]
 80033a2:	70da      	strb	r2, [r3, #3]

}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime, int32_t updateOnCall)
{
 80033ac:	b5b0      	push	{r4, r5, r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	60b9      	str	r1, [r7, #8]
 80033b6:	607a      	str	r2, [r7, #4]
	if(updateOnCall > 0){
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	dd01      	ble.n	80033c2 <PID_SetSampleTime+0x16>
		updateOnCall = 1;
 80033be:	2301      	movs	r3, #1
 80033c0:	607b      	str	r3, [r7, #4]
	}
	uPID->updateOnEveryCall = updateOnCall;
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	60da      	str	r2, [r3, #12]
	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	dd2e      	ble.n	800342c <PID_SetSampleTime+0x80>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 80033ce:	68b8      	ldr	r0, [r7, #8]
 80033d0:	f7fd f8a8 	bl	8000524 <__aeabi_i2d>
 80033d4:	4604      	mov	r4, r0
 80033d6:	460d      	mov	r5, r1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd f891 	bl	8000504 <__aeabi_ui2d>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4620      	mov	r0, r4
 80033e8:	4629      	mov	r1, r5
 80033ea:	f7fd fa2f 	bl	800084c <__aeabi_ddiv>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	e9c7 2304 	strd	r2, r3, [r7, #16]

		uPID->Ki *= ratio;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80033fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003400:	f7fd f8fa 	bl	80005f8 <__aeabi_dmul>
 8003404:	4602      	mov	r2, r0
 8003406:	460b      	mov	r3, r1
 8003408:	68f9      	ldr	r1, [r7, #12]
 800340a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8003414:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003418:	f7fd fa18 	bl	800084c <__aeabi_ddiv>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	68f9      	ldr	r1, [r7, #12]
 8003422:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	609a      	str	r2, [r3, #8]

	}

}
 800342c:	bf00      	nop
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bdb0      	pop	{r4, r5, r7, pc}

08003434 <PID_GetPpart>:
{
	return uPID->DispKd;
}

double PID_GetPpart(PID_TypeDef *uPID)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
	return uPID->DispKp_part;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 8003442:	ec43 2b17 	vmov	d7, r2, r3
}
 8003446:	eeb0 0a47 	vmov.f32	s0, s14
 800344a:	eef0 0a67 	vmov.f32	s1, s15
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <PID_GetIpart>:
double PID_GetIpart(PID_TypeDef *uPID)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
	return uPID->DispKi_part;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 8003466:	ec43 2b17 	vmov	d7, r2, r3
}
 800346a:	eeb0 0a47 	vmov.f32	s0, s14
 800346e:	eef0 0a67 	vmov.f32	s1, s15
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <PID_GetDpart>:
double PID_GetDpart(PID_TypeDef *uPID)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	return uPID->DispKd_part;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800348a:	ec43 2b17 	vmov	d7, r2, r3
}
 800348e:	eeb0 0a47 	vmov.f32	s0, s14
 8003492:	eef0 0a67 	vmov.f32	s1, s15
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 80034aa:	2200      	movs	r2, #0
 80034ac:	2140      	movs	r1, #64	; 0x40
 80034ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034b2:	f003 fffb 	bl	80074ac <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 80034b6:	2200      	movs	r2, #0
 80034b8:	2108      	movs	r1, #8
 80034ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034be:	f003 fff5 	bl	80074ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80034c2:	1df9      	adds	r1, r7, #7
 80034c4:	f04f 33ff 	mov.w	r3, #4294967295
 80034c8:	2201      	movs	r2, #1
 80034ca:	4806      	ldr	r0, [pc, #24]	; (80034e4 <ST7789_WriteCommand+0x44>)
 80034cc:	f005 fdad 	bl	800902a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80034d0:	2201      	movs	r2, #1
 80034d2:	2140      	movs	r1, #64	; 0x40
 80034d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034d8:	f003 ffe8 	bl	80074ac <HAL_GPIO_WritePin>
}
 80034dc:	bf00      	nop
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	20001878 	.word	0x20001878

080034e8 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80034f2:	2200      	movs	r2, #0
 80034f4:	2140      	movs	r1, #64	; 0x40
 80034f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034fa:	f003 ffd7 	bl	80074ac <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80034fe:	2201      	movs	r2, #1
 8003500:	2108      	movs	r1, #8
 8003502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003506:	f003 ffd1 	bl	80074ac <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 800350a:	e029      	b.n	8003560 <ST7789_WriteData+0x78>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003512:	4293      	cmp	r3, r2
 8003514:	bf28      	it	cs
 8003516:	4613      	movcs	r3, r2
 8003518:	81fb      	strh	r3, [r7, #14]
		#ifdef USE_DMA
			if (DMA_MIN_SIZE <= buff_size)
 800351a:	4b18      	ldr	r3, [pc, #96]	; (800357c <ST7789_WriteData+0x94>)
 800351c:	881b      	ldrh	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	4293      	cmp	r3, r2
 8003524:	d30d      	bcc.n	8003542 <ST7789_WriteData+0x5a>
			{
				HAL_SPI_Transmit_DMA(&ST7789_SPI_PORT, buff, chunk_size);
 8003526:	89fb      	ldrh	r3, [r7, #14]
 8003528:	461a      	mov	r2, r3
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4814      	ldr	r0, [pc, #80]	; (8003580 <ST7789_WriteData+0x98>)
 800352e:	f005 fef1 	bl	8009314 <HAL_SPI_Transmit_DMA>
				while (ST7789_SPI_PORT.hdmatx->State != HAL_DMA_STATE_READY)
 8003532:	bf00      	nop
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <ST7789_WriteData+0x98>)
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800353c:	2b01      	cmp	r3, #1
 800353e:	d1f9      	bne.n	8003534 <ST7789_WriteData+0x4c>
 8003540:	e006      	b.n	8003550 <ST7789_WriteData+0x68>
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8003542:	89fa      	ldrh	r2, [r7, #14]
 8003544:	f04f 33ff 	mov.w	r3, #4294967295
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	480d      	ldr	r0, [pc, #52]	; (8003580 <ST7789_WriteData+0x98>)
 800354c:	f005 fd6d 	bl	800902a <HAL_SPI_Transmit>
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#endif
		buff += chunk_size;
 8003550:	89fb      	ldrh	r3, [r7, #14]
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	4413      	add	r3, r2
 8003556:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8003558:	89fb      	ldrh	r3, [r7, #14]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d1d2      	bne.n	800350c <ST7789_WriteData+0x24>
	}

	ST7789_UnSelect();
 8003566:	2201      	movs	r2, #1
 8003568:	2140      	movs	r1, #64	; 0x40
 800356a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800356e:	f003 ff9d 	bl	80074ac <HAL_GPIO_WritePin>
}
 8003572:	bf00      	nop
 8003574:	3710      	adds	r7, #16
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	200000a8 	.word	0x200000a8
 8003580:	20001878 	.word	0x20001878

08003584 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	4603      	mov	r3, r0
 800358c:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800358e:	2200      	movs	r2, #0
 8003590:	2140      	movs	r1, #64	; 0x40
 8003592:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003596:	f003 ff89 	bl	80074ac <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 800359a:	2201      	movs	r2, #1
 800359c:	2108      	movs	r1, #8
 800359e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a2:	f003 ff83 	bl	80074ac <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 80035a6:	1df9      	adds	r1, r7, #7
 80035a8:	f04f 33ff 	mov.w	r3, #4294967295
 80035ac:	2201      	movs	r2, #1
 80035ae:	4806      	ldr	r0, [pc, #24]	; (80035c8 <ST7789_WriteSmallData+0x44>)
 80035b0:	f005 fd3b 	bl	800902a <HAL_SPI_Transmit>
	ST7789_UnSelect();
 80035b4:	2201      	movs	r2, #1
 80035b6:	2140      	movs	r1, #64	; 0x40
 80035b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035bc:	f003 ff76 	bl	80074ac <HAL_GPIO_WritePin>
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20001878 	.word	0x20001878

080035cc <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	4603      	mov	r3, r0
 80035d4:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 80035d6:	2036      	movs	r0, #54	; 0x36
 80035d8:	f7ff ff62 	bl	80034a0 <ST7789_WriteCommand>
	switch (m) {
 80035dc:	79fb      	ldrb	r3, [r7, #7]
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d81a      	bhi.n	8003618 <ST7789_SetRotation+0x4c>
 80035e2:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <ST7789_SetRotation+0x1c>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	080035f9 	.word	0x080035f9
 80035ec:	08003601 	.word	0x08003601
 80035f0:	08003609 	.word	0x08003609
 80035f4:	08003611 	.word	0x08003611
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 80035f8:	20c0      	movs	r0, #192	; 0xc0
 80035fa:	f7ff ffc3 	bl	8003584 <ST7789_WriteSmallData>
		break;
 80035fe:	e00c      	b.n	800361a <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003600:	20a0      	movs	r0, #160	; 0xa0
 8003602:	f7ff ffbf 	bl	8003584 <ST7789_WriteSmallData>
		break;
 8003606:	e008      	b.n	800361a <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8003608:	2000      	movs	r0, #0
 800360a:	f7ff ffbb 	bl	8003584 <ST7789_WriteSmallData>
		break;
 800360e:	e004      	b.n	800361a <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8003610:	2060      	movs	r0, #96	; 0x60
 8003612:	f7ff ffb7 	bl	8003584 <ST7789_WriteSmallData>
		break;
 8003616:	e000      	b.n	800361a <ST7789_SetRotation+0x4e>
	default:
		break;
 8003618:	bf00      	nop
	}
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop

08003624 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8003624:	b590      	push	{r4, r7, lr}
 8003626:	b087      	sub	sp, #28
 8003628:	af00      	add	r7, sp, #0
 800362a:	4604      	mov	r4, r0
 800362c:	4608      	mov	r0, r1
 800362e:	4611      	mov	r1, r2
 8003630:	461a      	mov	r2, r3
 8003632:	4623      	mov	r3, r4
 8003634:	80fb      	strh	r3, [r7, #6]
 8003636:	4603      	mov	r3, r0
 8003638:	80bb      	strh	r3, [r7, #4]
 800363a:	460b      	mov	r3, r1
 800363c:	807b      	strh	r3, [r7, #2]
 800363e:	4613      	mov	r3, r2
 8003640:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8003642:	2200      	movs	r2, #0
 8003644:	2140      	movs	r1, #64	; 0x40
 8003646:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800364a:	f003 ff2f 	bl	80074ac <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 800364e:	88fb      	ldrh	r3, [r7, #6]
 8003650:	82fb      	strh	r3, [r7, #22]
 8003652:	887b      	ldrh	r3, [r7, #2]
 8003654:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8003656:	88bb      	ldrh	r3, [r7, #4]
 8003658:	827b      	strh	r3, [r7, #18]
 800365a:	883b      	ldrh	r3, [r7, #0]
 800365c:	823b      	strh	r3, [r7, #16]
	
	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET); 
 800365e:	202a      	movs	r0, #42	; 0x2a
 8003660:	f7ff ff1e 	bl	80034a0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8003664:	8afb      	ldrh	r3, [r7, #22]
 8003666:	0a1b      	lsrs	r3, r3, #8
 8003668:	b29b      	uxth	r3, r3
 800366a:	b2db      	uxtb	r3, r3
 800366c:	733b      	strb	r3, [r7, #12]
 800366e:	8afb      	ldrh	r3, [r7, #22]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	737b      	strb	r3, [r7, #13]
 8003674:	8abb      	ldrh	r3, [r7, #20]
 8003676:	0a1b      	lsrs	r3, r3, #8
 8003678:	b29b      	uxth	r3, r3
 800367a:	b2db      	uxtb	r3, r3
 800367c:	73bb      	strb	r3, [r7, #14]
 800367e:	8abb      	ldrh	r3, [r7, #20]
 8003680:	b2db      	uxtb	r3, r3
 8003682:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8003684:	f107 030c 	add.w	r3, r7, #12
 8003688:	2104      	movs	r1, #4
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff ff2c 	bl	80034e8 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8003690:	202b      	movs	r0, #43	; 0x2b
 8003692:	f7ff ff05 	bl	80034a0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8003696:	8a7b      	ldrh	r3, [r7, #18]
 8003698:	0a1b      	lsrs	r3, r3, #8
 800369a:	b29b      	uxth	r3, r3
 800369c:	b2db      	uxtb	r3, r3
 800369e:	723b      	strb	r3, [r7, #8]
 80036a0:	8a7b      	ldrh	r3, [r7, #18]
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	727b      	strb	r3, [r7, #9]
 80036a6:	8a3b      	ldrh	r3, [r7, #16]
 80036a8:	0a1b      	lsrs	r3, r3, #8
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	72bb      	strb	r3, [r7, #10]
 80036b0:	8a3b      	ldrh	r3, [r7, #16]
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 80036b6:	f107 0308 	add.w	r3, r7, #8
 80036ba:	2104      	movs	r1, #4
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff ff13 	bl	80034e8 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 80036c2:	202c      	movs	r0, #44	; 0x2c
 80036c4:	f7ff feec 	bl	80034a0 <ST7789_WriteCommand>
	ST7789_UnSelect();
 80036c8:	2201      	movs	r2, #1
 80036ca:	2140      	movs	r1, #64	; 0x40
 80036cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036d0:	f003 feec 	bl	80074ac <HAL_GPIO_WritePin>
}
 80036d4:	bf00      	nop
 80036d6:	371c      	adds	r7, #28
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd90      	pop	{r4, r7, pc}

080036dc <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 80036dc:	b590      	push	{r4, r7, lr}
 80036de:	b08b      	sub	sp, #44	; 0x2c
 80036e0:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
 80036e2:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80036e6:	2100      	movs	r1, #0
 80036e8:	484b      	ldr	r0, [pc, #300]	; (8003818 <ST7789_Init+0x13c>)
 80036ea:	f008 fbac 	bl	800be46 <memset>
	#endif
	HAL_Delay(25);
 80036ee:	2019      	movs	r0, #25
 80036f0:	f001 f85c 	bl	80047ac <HAL_Delay>
    ST7789_RST_Clr();
 80036f4:	2200      	movs	r2, #0
 80036f6:	2110      	movs	r1, #16
 80036f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80036fc:	f003 fed6 	bl	80074ac <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8003700:	2019      	movs	r0, #25
 8003702:	f001 f853 	bl	80047ac <HAL_Delay>
    ST7789_RST_Set();
 8003706:	2201      	movs	r2, #1
 8003708:	2110      	movs	r1, #16
 800370a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800370e:	f003 fecd 	bl	80074ac <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8003712:	2032      	movs	r0, #50	; 0x32
 8003714:	f001 f84a 	bl	80047ac <HAL_Delay>
		
    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8003718:	203a      	movs	r0, #58	; 0x3a
 800371a:	f7ff fec1 	bl	80034a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 800371e:	2055      	movs	r0, #85	; 0x55
 8003720:	f7ff ff30 	bl	8003584 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8003724:	20b2      	movs	r0, #178	; 0xb2
 8003726:	f7ff febb 	bl	80034a0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 800372a:	4a3c      	ldr	r2, [pc, #240]	; (800381c <ST7789_Init+0x140>)
 800372c:	f107 0320 	add.w	r3, r7, #32
 8003730:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003734:	6018      	str	r0, [r3, #0]
 8003736:	3304      	adds	r3, #4
 8003738:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 800373a:	f107 0320 	add.w	r3, r7, #32
 800373e:	2105      	movs	r1, #5
 8003740:	4618      	mov	r0, r3
 8003742:	f7ff fed1 	bl	80034e8 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8003746:	2002      	movs	r0, #2
 8003748:	f7ff ff40 	bl	80035cc <ST7789_SetRotation>
	
	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 800374c:	20b7      	movs	r0, #183	; 0xb7
 800374e:	f7ff fea7 	bl	80034a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8003752:	2035      	movs	r0, #53	; 0x35
 8003754:	f7ff ff16 	bl	8003584 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8003758:	20bb      	movs	r0, #187	; 0xbb
 800375a:	f7ff fea1 	bl	80034a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 800375e:	2019      	movs	r0, #25
 8003760:	f7ff ff10 	bl	8003584 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL	
 8003764:	20c0      	movs	r0, #192	; 0xc0
 8003766:	f7ff fe9b 	bl	80034a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 800376a:	202c      	movs	r0, #44	; 0x2c
 800376c:	f7ff ff0a 	bl	8003584 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8003770:	20c2      	movs	r0, #194	; 0xc2
 8003772:	f7ff fe95 	bl	80034a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8003776:	2001      	movs	r0, #1
 8003778:	f7ff ff04 	bl	8003584 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 800377c:	20c3      	movs	r0, #195	; 0xc3
 800377e:	f7ff fe8f 	bl	80034a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8003782:	2012      	movs	r0, #18
 8003784:	f7ff fefe 	bl	8003584 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8003788:	20c4      	movs	r0, #196	; 0xc4
 800378a:	f7ff fe89 	bl	80034a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 800378e:	2020      	movs	r0, #32
 8003790:	f7ff fef8 	bl	8003584 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8003794:	20c6      	movs	r0, #198	; 0xc6
 8003796:	f7ff fe83 	bl	80034a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 800379a:	200f      	movs	r0, #15
 800379c:	f7ff fef2 	bl	8003584 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 80037a0:	20d0      	movs	r0, #208	; 0xd0
 80037a2:	f7ff fe7d 	bl	80034a0 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 80037a6:	20a4      	movs	r0, #164	; 0xa4
 80037a8:	f7ff feec 	bl	8003584 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 80037ac:	20a1      	movs	r0, #161	; 0xa1
 80037ae:	f7ff fee9 	bl	8003584 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 80037b2:	20e0      	movs	r0, #224	; 0xe0
 80037b4:	f7ff fe74 	bl	80034a0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 80037b8:	4b19      	ldr	r3, [pc, #100]	; (8003820 <ST7789_Init+0x144>)
 80037ba:	f107 0410 	add.w	r4, r7, #16
 80037be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037c0:	c407      	stmia	r4!, {r0, r1, r2}
 80037c2:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	210e      	movs	r1, #14
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fe8c 	bl	80034e8 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 80037d0:	20e1      	movs	r0, #225	; 0xe1
 80037d2:	f7ff fe65 	bl	80034a0 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <ST7789_Init+0x148>)
 80037d8:	463c      	mov	r4, r7
 80037da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037dc:	c407      	stmia	r4!, {r0, r1, r2}
 80037de:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 80037e0:	463b      	mov	r3, r7
 80037e2:	210e      	movs	r1, #14
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fe7f 	bl	80034e8 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 80037ea:	2021      	movs	r0, #33	; 0x21
 80037ec:	f7ff fe58 	bl	80034a0 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 80037f0:	2011      	movs	r0, #17
 80037f2:	f7ff fe55 	bl	80034a0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 80037f6:	2013      	movs	r0, #19
 80037f8:	f7ff fe52 	bl	80034a0 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on	
 80037fc:	2029      	movs	r0, #41	; 0x29
 80037fe:	f7ff fe4f 	bl	80034a0 <ST7789_WriteCommand>

	HAL_Delay(50);
 8003802:	2032      	movs	r0, #50	; 0x32
 8003804:	f000 ffd2 	bl	80047ac <HAL_Delay>
	ST7789_Fill_Color(BLACK);				//	Fill with Black.
 8003808:	2000      	movs	r0, #0
 800380a:	f000 f80d 	bl	8003828 <ST7789_Fill_Color>
}
 800380e:	bf00      	nop
 8003810:	372c      	adds	r7, #44	; 0x2c
 8003812:	46bd      	mov	sp, r7
 8003814:	bd90      	pop	{r4, r7, pc}
 8003816:	bf00      	nop
 8003818:	20001ae8 	.word	0x20001ae8
 800381c:	0800f25c 	.word	0x0800f25c
 8003820:	0800f264 	.word	0x0800f264
 8003824:	0800f274 	.word	0x0800f274

08003828 <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	4603      	mov	r3, r0
 8003830:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8003832:	f240 133f 	movw	r3, #319	; 0x13f
 8003836:	22ef      	movs	r2, #239	; 0xef
 8003838:	2100      	movs	r1, #0
 800383a:	2000      	movs	r0, #0
 800383c:	f7ff fef2 	bl	8003624 <ST7789_SetAddressWindow>
	ST7789_Select();
 8003840:	2200      	movs	r2, #0
 8003842:	2140      	movs	r1, #64	; 0x40
 8003844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003848:	f003 fe30 	bl	80074ac <HAL_GPIO_WritePin>

	#ifdef USE_DMA
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800384c:	2300      	movs	r3, #0
 800384e:	81fb      	strh	r3, [r7, #14]
 8003850:	e00e      	b.n	8003870 <ST7789_Fill_Color+0x48>
		{
			memset(disp_buf, color, sizeof(disp_buf));
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8003858:	4619      	mov	r1, r3
 800385a:	480c      	ldr	r0, [pc, #48]	; (800388c <ST7789_Fill_Color+0x64>)
 800385c:	f008 faf3 	bl	800be46 <memset>
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
 8003860:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 8003864:	4809      	ldr	r0, [pc, #36]	; (800388c <ST7789_Fill_Color+0x64>)
 8003866:	f7ff fe3f 	bl	80034e8 <ST7789_WriteData>
		for (i = 0; i < ST7789_HEIGHT / HOR_LEN; i++)
 800386a:	89fb      	ldrh	r3, [r7, #14]
 800386c:	3301      	adds	r3, #1
 800386e:	81fb      	strh	r3, [r7, #14]
 8003870:	89fb      	ldrh	r3, [r7, #14]
 8003872:	2b07      	cmp	r3, #7
 8003874:	d9ed      	bls.n	8003852 <ST7789_Fill_Color+0x2a>
				for (j = 0; j < ST7789_HEIGHT; j++) {
					uint8_t data[] = {color >> 8, color & 0xFF};
					ST7789_WriteData(data, sizeof(data));
				}
	#endif
	ST7789_UnSelect();
 8003876:	2201      	movs	r2, #1
 8003878:	2140      	movs	r1, #64	; 0x40
 800387a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800387e:	f003 fe15 	bl	80074ac <HAL_GPIO_WritePin>
}
 8003882:	bf00      	nop
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	20001ae8 	.word	0x20001ae8

08003890 <ST7789_DrawPixel>:
 * @param x&y -> coordinate to Draw
 * @param color -> color of the Pixel
 * @return none
 */
void ST7789_DrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	4603      	mov	r3, r0
 8003898:	80fb      	strh	r3, [r7, #6]
 800389a:	460b      	mov	r3, r1
 800389c:	80bb      	strh	r3, [r7, #4]
 800389e:	4613      	mov	r3, r2
 80038a0:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= ST7789_WIDTH) ||
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	2bef      	cmp	r3, #239	; 0xef
 80038a6:	d824      	bhi.n	80038f2 <ST7789_DrawPixel+0x62>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80038a8:	88bb      	ldrh	r3, [r7, #4]
 80038aa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80038ae:	d220      	bcs.n	80038f2 <ST7789_DrawPixel+0x62>
	
	ST7789_SetAddressWindow(x, y, x, y);
 80038b0:	88bb      	ldrh	r3, [r7, #4]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	88b9      	ldrh	r1, [r7, #4]
 80038b6:	88f8      	ldrh	r0, [r7, #6]
 80038b8:	f7ff feb4 	bl	8003624 <ST7789_SetAddressWindow>
	uint8_t data[] = {color >> 8, color & 0xFF};
 80038bc:	887b      	ldrh	r3, [r7, #2]
 80038be:	0a1b      	lsrs	r3, r3, #8
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	733b      	strb	r3, [r7, #12]
 80038c6:	887b      	ldrh	r3, [r7, #2]
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	737b      	strb	r3, [r7, #13]
	ST7789_Select();
 80038cc:	2200      	movs	r2, #0
 80038ce:	2140      	movs	r1, #64	; 0x40
 80038d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038d4:	f003 fdea 	bl	80074ac <HAL_GPIO_WritePin>
	ST7789_WriteData(data, sizeof(data));
 80038d8:	f107 030c 	add.w	r3, r7, #12
 80038dc:	2102      	movs	r1, #2
 80038de:	4618      	mov	r0, r3
 80038e0:	f7ff fe02 	bl	80034e8 <ST7789_WriteData>
	ST7789_UnSelect();
 80038e4:	2201      	movs	r2, #1
 80038e6:	2140      	movs	r1, #64	; 0x40
 80038e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038ec:	f003 fdde 	bl	80074ac <HAL_GPIO_WritePin>
 80038f0:	e000      	b.n	80038f4 <ST7789_DrawPixel+0x64>
		 (y < 0) || (y >= ST7789_HEIGHT))	return;
 80038f2:	bf00      	nop
}
 80038f4:	3710      	adds	r7, #16
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}

080038fa <ST7789_DrawLine>:
 * @param x2&y2 -> coordinate of the end point
 * @param color -> color of the line to Draw
 * @return none
 */
void ST7789_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,
        uint16_t color) {
 80038fa:	b590      	push	{r4, r7, lr}
 80038fc:	b087      	sub	sp, #28
 80038fe:	af00      	add	r7, sp, #0
 8003900:	4604      	mov	r4, r0
 8003902:	4608      	mov	r0, r1
 8003904:	4611      	mov	r1, r2
 8003906:	461a      	mov	r2, r3
 8003908:	4623      	mov	r3, r4
 800390a:	80fb      	strh	r3, [r7, #6]
 800390c:	4603      	mov	r3, r0
 800390e:	80bb      	strh	r3, [r7, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	807b      	strh	r3, [r7, #2]
 8003914:	4613      	mov	r3, r2
 8003916:	803b      	strh	r3, [r7, #0]
	uint16_t swap;
    uint16_t steep = ABS(y1 - y0) > ABS(x1 - x0);
 8003918:	883a      	ldrh	r2, [r7, #0]
 800391a:	88bb      	ldrh	r3, [r7, #4]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003922:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003926:	8879      	ldrh	r1, [r7, #2]
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	1acb      	subs	r3, r1, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	bfb8      	it	lt
 8003930:	425b      	neglt	r3, r3
 8003932:	429a      	cmp	r2, r3
 8003934:	bfcc      	ite	gt
 8003936:	2301      	movgt	r3, #1
 8003938:	2300      	movle	r3, #0
 800393a:	b2db      	uxtb	r3, r3
 800393c:	827b      	strh	r3, [r7, #18]
    if (steep) {
 800393e:	8a7b      	ldrh	r3, [r7, #18]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <ST7789_DrawLine+0x62>
		swap = x0;
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	823b      	strh	r3, [r7, #16]
		x0 = y0;
 8003948:	88bb      	ldrh	r3, [r7, #4]
 800394a:	80fb      	strh	r3, [r7, #6]
		y0 = swap;
 800394c:	8a3b      	ldrh	r3, [r7, #16]
 800394e:	80bb      	strh	r3, [r7, #4]

		swap = x1;
 8003950:	887b      	ldrh	r3, [r7, #2]
 8003952:	823b      	strh	r3, [r7, #16]
		x1 = y1;
 8003954:	883b      	ldrh	r3, [r7, #0]
 8003956:	807b      	strh	r3, [r7, #2]
		y1 = swap;
 8003958:	8a3b      	ldrh	r3, [r7, #16]
 800395a:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, y0);
        //_swap_int16_t(x1, y1);
    }

    if (x0 > x1) {
 800395c:	88fa      	ldrh	r2, [r7, #6]
 800395e:	887b      	ldrh	r3, [r7, #2]
 8003960:	429a      	cmp	r2, r3
 8003962:	d90b      	bls.n	800397c <ST7789_DrawLine+0x82>
		swap = x0;
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	823b      	strh	r3, [r7, #16]
		x0 = x1;
 8003968:	887b      	ldrh	r3, [r7, #2]
 800396a:	80fb      	strh	r3, [r7, #6]
		x1 = swap;
 800396c:	8a3b      	ldrh	r3, [r7, #16]
 800396e:	807b      	strh	r3, [r7, #2]

		swap = y0;
 8003970:	88bb      	ldrh	r3, [r7, #4]
 8003972:	823b      	strh	r3, [r7, #16]
		y0 = y1;
 8003974:	883b      	ldrh	r3, [r7, #0]
 8003976:	80bb      	strh	r3, [r7, #4]
		y1 = swap;
 8003978:	8a3b      	ldrh	r3, [r7, #16]
 800397a:	803b      	strh	r3, [r7, #0]
        //_swap_int16_t(x0, x1);
        //_swap_int16_t(y0, y1);
    }

    int16_t dx, dy;
    dx = x1 - x0;
 800397c:	887a      	ldrh	r2, [r7, #2]
 800397e:	88fb      	ldrh	r3, [r7, #6]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	b29b      	uxth	r3, r3
 8003984:	81fb      	strh	r3, [r7, #14]
    dy = ABS(y1 - y0);
 8003986:	883a      	ldrh	r2, [r7, #0]
 8003988:	88bb      	ldrh	r3, [r7, #4]
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	bfb8      	it	lt
 8003990:	425b      	neglt	r3, r3
 8003992:	81bb      	strh	r3, [r7, #12]

    int16_t err = dx / 2;
 8003994:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003998:	0fda      	lsrs	r2, r3, #31
 800399a:	4413      	add	r3, r2
 800399c:	105b      	asrs	r3, r3, #1
 800399e:	82fb      	strh	r3, [r7, #22]
    int16_t ystep;

    if (y0 < y1) {
 80039a0:	88ba      	ldrh	r2, [r7, #4]
 80039a2:	883b      	ldrh	r3, [r7, #0]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d202      	bcs.n	80039ae <ST7789_DrawLine+0xb4>
        ystep = 1;
 80039a8:	2301      	movs	r3, #1
 80039aa:	82bb      	strh	r3, [r7, #20]
 80039ac:	e028      	b.n	8003a00 <ST7789_DrawLine+0x106>
    } else {
        ystep = -1;
 80039ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80039b2:	82bb      	strh	r3, [r7, #20]
    }

    for (; x0<=x1; x0++) {
 80039b4:	e024      	b.n	8003a00 <ST7789_DrawLine+0x106>
        if (steep) {
 80039b6:	8a7b      	ldrh	r3, [r7, #18]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d006      	beq.n	80039ca <ST7789_DrawLine+0xd0>
            ST7789_DrawPixel(y0, x0, color);
 80039bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80039be:	88f9      	ldrh	r1, [r7, #6]
 80039c0:	88bb      	ldrh	r3, [r7, #4]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7ff ff64 	bl	8003890 <ST7789_DrawPixel>
 80039c8:	e005      	b.n	80039d6 <ST7789_DrawLine+0xdc>
        } else {
            ST7789_DrawPixel(x0, y0, color);
 80039ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80039cc:	88b9      	ldrh	r1, [r7, #4]
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ff5d 	bl	8003890 <ST7789_DrawPixel>
        }
        err -= dy;
 80039d6:	8afa      	ldrh	r2, [r7, #22]
 80039d8:	89bb      	ldrh	r3, [r7, #12]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	b29b      	uxth	r3, r3
 80039de:	82fb      	strh	r3, [r7, #22]
        if (err < 0) {
 80039e0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	da08      	bge.n	80039fa <ST7789_DrawLine+0x100>
            y0 += ystep;
 80039e8:	8aba      	ldrh	r2, [r7, #20]
 80039ea:	88bb      	ldrh	r3, [r7, #4]
 80039ec:	4413      	add	r3, r2
 80039ee:	80bb      	strh	r3, [r7, #4]
            err += dx;
 80039f0:	8afa      	ldrh	r2, [r7, #22]
 80039f2:	89fb      	ldrh	r3, [r7, #14]
 80039f4:	4413      	add	r3, r2
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	82fb      	strh	r3, [r7, #22]
    for (; x0<=x1; x0++) {
 80039fa:	88fb      	ldrh	r3, [r7, #6]
 80039fc:	3301      	adds	r3, #1
 80039fe:	80fb      	strh	r3, [r7, #6]
 8003a00:	88fa      	ldrh	r2, [r7, #6]
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d9d6      	bls.n	80039b6 <ST7789_DrawLine+0xbc>
        }
    }
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	371c      	adds	r7, #28
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd90      	pop	{r4, r7, pc}

08003a12 <ST7789_DrawRectangle>:
 * @param xi&yi -> 2 coordinates of 2 top points.
 * @param color -> color of the Rectangle line
 * @return none
 */
void ST7789_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 8003a12:	b590      	push	{r4, r7, lr}
 8003a14:	b085      	sub	sp, #20
 8003a16:	af02      	add	r7, sp, #8
 8003a18:	4604      	mov	r4, r0
 8003a1a:	4608      	mov	r0, r1
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	461a      	mov	r2, r3
 8003a20:	4623      	mov	r3, r4
 8003a22:	80fb      	strh	r3, [r7, #6]
 8003a24:	4603      	mov	r3, r0
 8003a26:	80bb      	strh	r3, [r7, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	807b      	strh	r3, [r7, #2]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8003a30:	2200      	movs	r2, #0
 8003a32:	2140      	movs	r1, #64	; 0x40
 8003a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a38:	f003 fd38 	bl	80074ac <HAL_GPIO_WritePin>
	ST7789_DrawLine(x1, y1, x2, y1, color);
 8003a3c:	88bc      	ldrh	r4, [r7, #4]
 8003a3e:	887a      	ldrh	r2, [r7, #2]
 8003a40:	88b9      	ldrh	r1, [r7, #4]
 8003a42:	88f8      	ldrh	r0, [r7, #6]
 8003a44:	8b3b      	ldrh	r3, [r7, #24]
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	4623      	mov	r3, r4
 8003a4a:	f7ff ff56 	bl	80038fa <ST7789_DrawLine>
	ST7789_DrawLine(x1, y1, x1, y2, color);
 8003a4e:	883c      	ldrh	r4, [r7, #0]
 8003a50:	88fa      	ldrh	r2, [r7, #6]
 8003a52:	88b9      	ldrh	r1, [r7, #4]
 8003a54:	88f8      	ldrh	r0, [r7, #6]
 8003a56:	8b3b      	ldrh	r3, [r7, #24]
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	4623      	mov	r3, r4
 8003a5c:	f7ff ff4d 	bl	80038fa <ST7789_DrawLine>
	ST7789_DrawLine(x1, y2, x2, y2, color);
 8003a60:	883c      	ldrh	r4, [r7, #0]
 8003a62:	887a      	ldrh	r2, [r7, #2]
 8003a64:	8839      	ldrh	r1, [r7, #0]
 8003a66:	88f8      	ldrh	r0, [r7, #6]
 8003a68:	8b3b      	ldrh	r3, [r7, #24]
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	4623      	mov	r3, r4
 8003a6e:	f7ff ff44 	bl	80038fa <ST7789_DrawLine>
	ST7789_DrawLine(x2, y1, x2, y2, color);
 8003a72:	883c      	ldrh	r4, [r7, #0]
 8003a74:	887a      	ldrh	r2, [r7, #2]
 8003a76:	88b9      	ldrh	r1, [r7, #4]
 8003a78:	8878      	ldrh	r0, [r7, #2]
 8003a7a:	8b3b      	ldrh	r3, [r7, #24]
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	4623      	mov	r3, r4
 8003a80:	f7ff ff3b 	bl	80038fa <ST7789_DrawLine>
	ST7789_UnSelect();
 8003a84:	2201      	movs	r2, #1
 8003a86:	2140      	movs	r1, #64	; 0x40
 8003a88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a8c:	f003 fd0e 	bl	80074ac <HAL_GPIO_WritePin>
}
 8003a90:	bf00      	nop
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd90      	pop	{r4, r7, pc}

08003a98 <ST7789_DrawCircle>:
 * @param r -> radius of circle
 * @param color -> color of circle line
 * @return  none
 */
void ST7789_DrawCircle(uint16_t x0, uint16_t y0, uint8_t r, uint16_t color)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	80fb      	strh	r3, [r7, #6]
 8003aaa:	4603      	mov	r3, r0
 8003aac:	80bb      	strh	r3, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	70fb      	strb	r3, [r7, #3]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f1c3 0301 	rsb	r3, r3, #1
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	461a      	mov	r2, r3
 8003acc:	03d2      	lsls	r2, r2, #15
 8003ace:	1ad3      	subs	r3, r2, r3
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	81fb      	strh	r3, [r7, #14]

	ST7789_Select();
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2140      	movs	r1, #64	; 0x40
 8003ae2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ae6:	f003 fce1 	bl	80074ac <HAL_GPIO_WritePin>
	ST7789_DrawPixel(x0, y0 + r, color);
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	88bb      	ldrh	r3, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	b299      	uxth	r1, r3
 8003af4:	883a      	ldrh	r2, [r7, #0]
 8003af6:	88fb      	ldrh	r3, [r7, #6]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff fec9 	bl	8003890 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0, y0 - r, color);
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	88ba      	ldrh	r2, [r7, #4]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	b299      	uxth	r1, r3
 8003b08:	883a      	ldrh	r2, [r7, #0]
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f7ff febf 	bl	8003890 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 + r, y0, color);
 8003b12:	78fb      	ldrb	r3, [r7, #3]
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	4413      	add	r3, r2
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	883a      	ldrh	r2, [r7, #0]
 8003b1e:	88b9      	ldrh	r1, [r7, #4]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f7ff feb5 	bl	8003890 <ST7789_DrawPixel>
	ST7789_DrawPixel(x0 - r, y0, color);
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	88fa      	ldrh	r2, [r7, #6]
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	883a      	ldrh	r2, [r7, #0]
 8003b32:	88b9      	ldrh	r1, [r7, #4]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff feab 	bl	8003890 <ST7789_DrawPixel>

	while (x < y) {
 8003b3a:	e081      	b.n	8003c40 <ST7789_DrawCircle+0x1a8>
		if (f >= 0) {
 8003b3c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	db0e      	blt.n	8003b62 <ST7789_DrawCircle+0xca>
			y--;
 8003b44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 8003b50:	8a7b      	ldrh	r3, [r7, #18]
 8003b52:	3302      	adds	r3, #2
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 8003b58:	8afa      	ldrh	r2, [r7, #22]
 8003b5a:	8a7b      	ldrh	r3, [r7, #18]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 8003b62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	3301      	adds	r3, #1
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 8003b6e:	8abb      	ldrh	r3, [r7, #20]
 8003b70:	3302      	adds	r3, #2
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 8003b76:	8afa      	ldrh	r2, [r7, #22]
 8003b78:	8abb      	ldrh	r3, [r7, #20]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	82fb      	strh	r3, [r7, #22]

		ST7789_DrawPixel(x0 + x, y0 + y, color);
 8003b80:	8a3a      	ldrh	r2, [r7, #16]
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	4413      	add	r3, r2
 8003b86:	b298      	uxth	r0, r3
 8003b88:	89fa      	ldrh	r2, [r7, #14]
 8003b8a:	88bb      	ldrh	r3, [r7, #4]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	b29b      	uxth	r3, r3
 8003b90:	883a      	ldrh	r2, [r7, #0]
 8003b92:	4619      	mov	r1, r3
 8003b94:	f7ff fe7c 	bl	8003890 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 + y, color);
 8003b98:	8a3b      	ldrh	r3, [r7, #16]
 8003b9a:	88fa      	ldrh	r2, [r7, #6]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	b298      	uxth	r0, r3
 8003ba0:	89fa      	ldrh	r2, [r7, #14]
 8003ba2:	88bb      	ldrh	r3, [r7, #4]
 8003ba4:	4413      	add	r3, r2
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	883a      	ldrh	r2, [r7, #0]
 8003baa:	4619      	mov	r1, r3
 8003bac:	f7ff fe70 	bl	8003890 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + x, y0 - y, color);
 8003bb0:	8a3a      	ldrh	r2, [r7, #16]
 8003bb2:	88fb      	ldrh	r3, [r7, #6]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	b298      	uxth	r0, r3
 8003bb8:	89fb      	ldrh	r3, [r7, #14]
 8003bba:	88ba      	ldrh	r2, [r7, #4]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	883a      	ldrh	r2, [r7, #0]
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	f7ff fe64 	bl	8003890 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - x, y0 - y, color);
 8003bc8:	8a3b      	ldrh	r3, [r7, #16]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	b298      	uxth	r0, r3
 8003bd0:	89fb      	ldrh	r3, [r7, #14]
 8003bd2:	88ba      	ldrh	r2, [r7, #4]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	883a      	ldrh	r2, [r7, #0]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	f7ff fe58 	bl	8003890 <ST7789_DrawPixel>

		ST7789_DrawPixel(x0 + y, y0 + x, color);
 8003be0:	89fa      	ldrh	r2, [r7, #14]
 8003be2:	88fb      	ldrh	r3, [r7, #6]
 8003be4:	4413      	add	r3, r2
 8003be6:	b298      	uxth	r0, r3
 8003be8:	8a3a      	ldrh	r2, [r7, #16]
 8003bea:	88bb      	ldrh	r3, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	883a      	ldrh	r2, [r7, #0]
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f7ff fe4c 	bl	8003890 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 + x, color);
 8003bf8:	89fb      	ldrh	r3, [r7, #14]
 8003bfa:	88fa      	ldrh	r2, [r7, #6]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	b298      	uxth	r0, r3
 8003c00:	8a3a      	ldrh	r2, [r7, #16]
 8003c02:	88bb      	ldrh	r3, [r7, #4]
 8003c04:	4413      	add	r3, r2
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	883a      	ldrh	r2, [r7, #0]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f7ff fe40 	bl	8003890 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 + y, y0 - x, color);
 8003c10:	89fa      	ldrh	r2, [r7, #14]
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	4413      	add	r3, r2
 8003c16:	b298      	uxth	r0, r3
 8003c18:	8a3b      	ldrh	r3, [r7, #16]
 8003c1a:	88ba      	ldrh	r2, [r7, #4]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	883a      	ldrh	r2, [r7, #0]
 8003c22:	4619      	mov	r1, r3
 8003c24:	f7ff fe34 	bl	8003890 <ST7789_DrawPixel>
		ST7789_DrawPixel(x0 - y, y0 - x, color);
 8003c28:	89fb      	ldrh	r3, [r7, #14]
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	b298      	uxth	r0, r3
 8003c30:	8a3b      	ldrh	r3, [r7, #16]
 8003c32:	88ba      	ldrh	r2, [r7, #4]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	883a      	ldrh	r2, [r7, #0]
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	f7ff fe28 	bl	8003890 <ST7789_DrawPixel>
	while (x < y) {
 8003c40:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003c44:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	f6ff af77 	blt.w	8003b3c <ST7789_DrawCircle+0xa4>
	}
	ST7789_UnSelect();
 8003c4e:	2201      	movs	r2, #1
 8003c50:	2140      	movs	r1, #64	; 0x40
 8003c52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c56:	f003 fc29 	bl	80074ac <HAL_GPIO_WritePin>
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd90      	pop	{r4, r7, pc}

08003c62 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003c62:	b082      	sub	sp, #8
 8003c64:	b590      	push	{r4, r7, lr}
 8003c66:	b089      	sub	sp, #36	; 0x24
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	80fb      	strh	r3, [r7, #6]
 8003c70:	460b      	mov	r3, r1
 8003c72:	80bb      	strh	r3, [r7, #4]
 8003c74:	4613      	mov	r3, r2
 8003c76:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2140      	movs	r1, #64	; 0x40
 8003c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c80:	f003 fc14 	bl	80074ac <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8003c84:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29c      	uxth	r4, r3
 8003c94:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	88bb      	ldrh	r3, [r7, #4]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	88b9      	ldrh	r1, [r7, #4]
 8003ca6:	88f8      	ldrh	r0, [r7, #6]
 8003ca8:	4622      	mov	r2, r4
 8003caa:	f7ff fcbb 	bl	8003624 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	e043      	b.n	8003d3c <ST7789_WriteChar+0xda>
		b = font.data[(ch - 32) * font.height + i];
 8003cb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	3b20      	subs	r3, #32
 8003cba:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003cbe:	fb01 f303 	mul.w	r3, r1, r3
 8003cc2:	4619      	mov	r1, r3
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	440b      	add	r3, r1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	881b      	ldrh	r3, [r3, #0]
 8003cce:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	e029      	b.n	8003d2a <ST7789_WriteChar+0xc8>
			if ((b << j) & 0x8000) {
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d00e      	beq.n	8003d04 <ST7789_WriteChar+0xa2>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8003ce6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003ce8:	0a1b      	lsrs	r3, r3, #8
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	743b      	strb	r3, [r7, #16]
 8003cf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8003cf6:	f107 0310 	add.w	r3, r7, #16
 8003cfa:	2102      	movs	r1, #2
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7ff fbf3 	bl	80034e8 <ST7789_WriteData>
 8003d02:	e00f      	b.n	8003d24 <ST7789_WriteChar+0xc2>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8003d04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d08:	0a1b      	lsrs	r3, r3, #8
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	733b      	strb	r3, [r7, #12]
 8003d10:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	2102      	movs	r1, #2
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff fbe2 	bl	80034e8 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	3301      	adds	r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003d2e:	461a      	mov	r2, r3
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d3cf      	bcc.n	8003cd6 <ST7789_WriteChar+0x74>
	for (i = 0; i < font.height; i++) {
 8003d36:	69fb      	ldr	r3, [r7, #28]
 8003d38:	3301      	adds	r3, #1
 8003d3a:	61fb      	str	r3, [r7, #28]
 8003d3c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003d40:	461a      	mov	r2, r3
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d3b5      	bcc.n	8003cb4 <ST7789_WriteChar+0x52>
			}
		}
	}
	ST7789_UnSelect();
 8003d48:	2201      	movs	r2, #1
 8003d4a:	2140      	movs	r1, #64	; 0x40
 8003d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d50:	f003 fbac 	bl	80074ac <HAL_GPIO_WritePin>
}
 8003d54:	bf00      	nop
 8003d56:	3724      	adds	r7, #36	; 0x24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8003d5e:	b002      	add	sp, #8
 8003d60:	4770      	bx	lr

08003d62 <ST7789_WriteString>:
 * @param color -> color of the string
 * @param bgcolor -> background color of the string
 * @return  none
 */
void ST7789_WriteString(uint16_t x, uint16_t y, const char *str, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8003d62:	b082      	sub	sp, #8
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af04      	add	r7, sp, #16
 8003d6a:	603a      	str	r2, [r7, #0]
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	4603      	mov	r3, r0
 8003d70:	80fb      	strh	r3, [r7, #6]
 8003d72:	460b      	mov	r3, r1
 8003d74:	80bb      	strh	r3, [r7, #4]
	ST7789_Select();
 8003d76:	2200      	movs	r2, #0
 8003d78:	2140      	movs	r1, #64	; 0x40
 8003d7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d7e:	f003 fb95 	bl	80074ac <HAL_GPIO_WritePin>
	while (*str) {
 8003d82:	e02e      	b.n	8003de2 <ST7789_WriteString+0x80>
		if (x + font.width >= ST7789_WIDTH) {
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	7d3a      	ldrb	r2, [r7, #20]
 8003d88:	4413      	add	r3, r2
 8003d8a:	2bef      	cmp	r3, #239	; 0xef
 8003d8c:	dd14      	ble.n	8003db8 <ST7789_WriteString+0x56>
			x = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003d92:	7d7b      	ldrb	r3, [r7, #21]
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	88bb      	ldrh	r3, [r7, #4]
 8003d98:	4413      	add	r3, r2
 8003d9a:	80bb      	strh	r3, [r7, #4]
			if (y + font.height >= ST7789_HEIGHT) {
 8003d9c:	88bb      	ldrh	r3, [r7, #4]
 8003d9e:	7d7a      	ldrb	r2, [r7, #21]
 8003da0:	4413      	add	r3, r2
 8003da2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003da6:	da21      	bge.n	8003dec <ST7789_WriteString+0x8a>
				break;
			}

			if (*str == ' ') {
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d103      	bne.n	8003db8 <ST7789_WriteString+0x56>
				// skip spaces in the beginning of the new line
				str++;
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	3301      	adds	r3, #1
 8003db4:	603b      	str	r3, [r7, #0]
				continue;
 8003db6:	e014      	b.n	8003de2 <ST7789_WriteString+0x80>
			}
		}
		ST7789_WriteChar(x, y, *str, font, color, bgcolor);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	88b9      	ldrh	r1, [r7, #4]
 8003dbe:	88f8      	ldrh	r0, [r7, #6]
 8003dc0:	8c3b      	ldrh	r3, [r7, #32]
 8003dc2:	9302      	str	r3, [sp, #8]
 8003dc4:	8bbb      	ldrh	r3, [r7, #28]
 8003dc6:	9301      	str	r3, [sp, #4]
 8003dc8:	69bb      	ldr	r3, [r7, #24]
 8003dca:	9300      	str	r3, [sp, #0]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f7ff ff48 	bl	8003c62 <ST7789_WriteChar>
		x += font.width;
 8003dd2:	7d3b      	ldrb	r3, [r7, #20]
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	88fb      	ldrh	r3, [r7, #6]
 8003dd8:	4413      	add	r3, r2
 8003dda:	80fb      	strh	r3, [r7, #6]
		str++;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	603b      	str	r3, [r7, #0]
	while (*str) {
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1cc      	bne.n	8003d84 <ST7789_WriteString+0x22>
 8003dea:	e000      	b.n	8003dee <ST7789_WriteString+0x8c>
				break;
 8003dec:	bf00      	nop
	}
	ST7789_UnSelect();
 8003dee:	2201      	movs	r2, #1
 8003df0:	2140      	movs	r1, #64	; 0x40
 8003df2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003df6:	f003 fb59 	bl	80074ac <HAL_GPIO_WritePin>
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e04:	b002      	add	sp, #8
 8003e06:	4770      	bx	lr

08003e08 <ST7789_DrawFilledRectangle>:
 * @param w&h -> width & height of the Rectangle
 * @param color -> color of the Rectangle
 * @return  none
 */
void ST7789_DrawFilledRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color)
{
 8003e08:	b590      	push	{r4, r7, lr}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af02      	add	r7, sp, #8
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	4611      	mov	r1, r2
 8003e14:	461a      	mov	r2, r3
 8003e16:	4623      	mov	r3, r4
 8003e18:	80fb      	strh	r3, [r7, #6]
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	80bb      	strh	r3, [r7, #4]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	807b      	strh	r3, [r7, #2]
 8003e22:	4613      	mov	r3, r2
 8003e24:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8003e26:	2200      	movs	r2, #0
 8003e28:	2140      	movs	r1, #64	; 0x40
 8003e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e2e:	f003 fb3d 	bl	80074ac <HAL_GPIO_WritePin>
	uint8_t i;

	/* Check input parameters */
	if (x >= ST7789_WIDTH ||
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	2bef      	cmp	r3, #239	; 0xef
 8003e36:	d83d      	bhi.n	8003eb4 <ST7789_DrawFilledRectangle+0xac>
 8003e38:	88bb      	ldrh	r3, [r7, #4]
 8003e3a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e3e:	d239      	bcs.n	8003eb4 <ST7789_DrawFilledRectangle+0xac>
		/* Return error */
		return;
	}

	/* Check width and height */
	if ((x + w) >= ST7789_WIDTH) {
 8003e40:	88fa      	ldrh	r2, [r7, #6]
 8003e42:	887b      	ldrh	r3, [r7, #2]
 8003e44:	4413      	add	r3, r2
 8003e46:	2bef      	cmp	r3, #239	; 0xef
 8003e48:	dd03      	ble.n	8003e52 <ST7789_DrawFilledRectangle+0x4a>
		w = ST7789_WIDTH - x;
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 8003e50:	807b      	strh	r3, [r7, #2]
	}
	if ((y + h) >= ST7789_HEIGHT) {
 8003e52:	88ba      	ldrh	r2, [r7, #4]
 8003e54:	883b      	ldrh	r3, [r7, #0]
 8003e56:	4413      	add	r3, r2
 8003e58:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8003e5c:	db03      	blt.n	8003e66 <ST7789_DrawFilledRectangle+0x5e>
		h = ST7789_HEIGHT - y;
 8003e5e:	88bb      	ldrh	r3, [r7, #4]
 8003e60:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003e64:	803b      	strh	r3, [r7, #0]
	}

	/* Draw lines */
	for (i = 0; i <= h; i++) {
 8003e66:	2300      	movs	r3, #0
 8003e68:	73fb      	strb	r3, [r7, #15]
 8003e6a:	e017      	b.n	8003e9c <ST7789_DrawFilledRectangle+0x94>
		/* Draw lines */
		ST7789_DrawLine(x, y + i, x + w, y + i, color);
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	88bb      	ldrh	r3, [r7, #4]
 8003e72:	4413      	add	r3, r2
 8003e74:	b299      	uxth	r1, r3
 8003e76:	88fa      	ldrh	r2, [r7, #6]
 8003e78:	887b      	ldrh	r3, [r7, #2]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	b29c      	uxth	r4, r3
 8003e7e:	7bfb      	ldrb	r3, [r7, #15]
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	88bb      	ldrh	r3, [r7, #4]
 8003e84:	4413      	add	r3, r2
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	88f8      	ldrh	r0, [r7, #6]
 8003e8a:	8c3b      	ldrh	r3, [r7, #32]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	4622      	mov	r2, r4
 8003e92:	f7ff fd32 	bl	80038fa <ST7789_DrawLine>
	for (i = 0; i <= h; i++) {
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	3301      	adds	r3, #1
 8003e9a:	73fb      	strb	r3, [r7, #15]
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	b29b      	uxth	r3, r3
 8003ea0:	883a      	ldrh	r2, [r7, #0]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d2e2      	bcs.n	8003e6c <ST7789_DrawFilledRectangle+0x64>
	}
	ST7789_UnSelect();
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	2140      	movs	r1, #64	; 0x40
 8003eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eae:	f003 fafd 	bl	80074ac <HAL_GPIO_WritePin>
 8003eb2:	e000      	b.n	8003eb6 <ST7789_DrawFilledRectangle+0xae>
		return;
 8003eb4:	bf00      	nop
}
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd90      	pop	{r4, r7, pc}

08003ebc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_MspInit+0x44>)
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	4a0e      	ldr	r2, [pc, #56]	; (8003f00 <HAL_MspInit+0x44>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6193      	str	r3, [r2, #24]
 8003ece:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <HAL_MspInit+0x44>)
 8003ed0:	699b      	ldr	r3, [r3, #24]
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	607b      	str	r3, [r7, #4]
 8003ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eda:	4b09      	ldr	r3, [pc, #36]	; (8003f00 <HAL_MspInit+0x44>)
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	4a08      	ldr	r2, [pc, #32]	; (8003f00 <HAL_MspInit+0x44>)
 8003ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee4:	61d3      	str	r3, [r2, #28]
 8003ee6:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <HAL_MspInit+0x44>)
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000

08003f04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	; 0x30
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f0c:	f107 031c 	add.w	r3, r7, #28
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]
 8003f14:	605a      	str	r2, [r3, #4]
 8003f16:	609a      	str	r2, [r3, #8]
 8003f18:	60da      	str	r2, [r3, #12]
 8003f1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f24:	d12d      	bne.n	8003f82 <HAL_ADC_MspInit+0x7e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003f26:	4b42      	ldr	r3, [pc, #264]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	4a41      	ldr	r2, [pc, #260]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f30:	6153      	str	r3, [r2, #20]
 8003f32:	4b3f      	ldr	r3, [pc, #252]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	61bb      	str	r3, [r7, #24]
 8003f3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f3e:	4b3c      	ldr	r3, [pc, #240]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4a3b      	ldr	r2, [pc, #236]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f48:	6153      	str	r3, [r2, #20]
 8003f4a:	4b39      	ldr	r3, [pc, #228]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f52:	617b      	str	r3, [r7, #20]
 8003f54:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = CURRENT_Pin|TC_Pin;
 8003f56:	2306      	movs	r3, #6
 8003f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f62:	f107 031c 	add.w	r3, r7, #28
 8003f66:	4619      	mov	r1, r3
 8003f68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f6c:	f003 f90c 	bl	8007188 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8003f70:	2200      	movs	r2, #0
 8003f72:	2100      	movs	r1, #0
 8003f74:	2012      	movs	r0, #18
 8003f76:	f002 fb3e 	bl	80065f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8003f7a:	2012      	movs	r0, #18
 8003f7c:	f002 fb57 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003f80:	e051      	b.n	8004026 <HAL_ADC_MspInit+0x122>
  else if(hadc->Instance==ADC3)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a2b      	ldr	r2, [pc, #172]	; (8004034 <HAL_ADC_MspInit+0x130>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d14c      	bne.n	8004026 <HAL_ADC_MspInit+0x122>
    __HAL_RCC_ADC34_CLK_ENABLE();
 8003f8c:	4b28      	ldr	r3, [pc, #160]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003f8e:	695b      	ldr	r3, [r3, #20]
 8003f90:	4a27      	ldr	r2, [pc, #156]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003f92:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f96:	6153      	str	r3, [r2, #20]
 8003f98:	4b25      	ldr	r3, [pc, #148]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003fa0:	613b      	str	r3, [r7, #16]
 8003fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fa4:	4b22      	ldr	r3, [pc, #136]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003fa6:	695b      	ldr	r3, [r3, #20]
 8003fa8:	4a21      	ldr	r2, [pc, #132]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003faa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fae:	6153      	str	r3, [r2, #20]
 8003fb0:	4b1f      	ldr	r3, [pc, #124]	; (8004030 <HAL_ADC_MspInit+0x12c>)
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fb8:	60fb      	str	r3, [r7, #12]
 8003fba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = V_INP_Pin;
 8003fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(V_INP_GPIO_Port, &GPIO_InitStruct);
 8003fca:	f107 031c 	add.w	r3, r7, #28
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4819      	ldr	r0, [pc, #100]	; (8004038 <HAL_ADC_MspInit+0x134>)
 8003fd2:	f003 f8d9 	bl	8007188 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 8003fd6:	4b19      	ldr	r3, [pc, #100]	; (800403c <HAL_ADC_MspInit+0x138>)
 8003fd8:	4a19      	ldr	r2, [pc, #100]	; (8004040 <HAL_ADC_MspInit+0x13c>)
 8003fda:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003fdc:	4b17      	ldr	r3, [pc, #92]	; (800403c <HAL_ADC_MspInit+0x138>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fe2:	4b16      	ldr	r3, [pc, #88]	; (800403c <HAL_ADC_MspInit+0x138>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <HAL_ADC_MspInit+0x138>)
 8003fea:	2280      	movs	r2, #128	; 0x80
 8003fec:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <HAL_ADC_MspInit+0x138>)
 8003ff0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ff4:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003ff6:	4b11      	ldr	r3, [pc, #68]	; (800403c <HAL_ADC_MspInit+0x138>)
 8003ff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ffc:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003ffe:	4b0f      	ldr	r3, [pc, #60]	; (800403c <HAL_ADC_MspInit+0x138>)
 8004000:	2220      	movs	r2, #32
 8004002:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8004004:	4b0d      	ldr	r3, [pc, #52]	; (800403c <HAL_ADC_MspInit+0x138>)
 8004006:	2200      	movs	r2, #0
 8004008:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800400a:	480c      	ldr	r0, [pc, #48]	; (800403c <HAL_ADC_MspInit+0x138>)
 800400c:	f002 fd30 	bl	8006a70 <HAL_DMA_Init>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <HAL_ADC_MspInit+0x116>
      Error_Handler();
 8004016:	f7fe fdb9 	bl	8002b8c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a07      	ldr	r2, [pc, #28]	; (800403c <HAL_ADC_MspInit+0x138>)
 800401e:	639a      	str	r2, [r3, #56]	; 0x38
 8004020:	4a06      	ldr	r2, [pc, #24]	; (800403c <HAL_ADC_MspInit+0x138>)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6253      	str	r3, [r2, #36]	; 0x24
}
 8004026:	bf00      	nop
 8004028:	3730      	adds	r7, #48	; 0x30
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40021000 	.word	0x40021000
 8004034:	50000400 	.word	0x50000400
 8004038:	48000400 	.word	0x48000400
 800403c:	200017bc 	.word	0x200017bc
 8004040:	40020458 	.word	0x40020458

08004044 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a0a      	ldr	r2, [pc, #40]	; (800407c <HAL_CRC_MspInit+0x38>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d10b      	bne.n	800406e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <HAL_CRC_MspInit+0x3c>)
 8004058:	695b      	ldr	r3, [r3, #20]
 800405a:	4a09      	ldr	r2, [pc, #36]	; (8004080 <HAL_CRC_MspInit+0x3c>)
 800405c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004060:	6153      	str	r3, [r2, #20]
 8004062:	4b07      	ldr	r3, [pc, #28]	; (8004080 <HAL_CRC_MspInit+0x3c>)
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800406e:	bf00      	nop
 8004070:	3714      	adds	r7, #20
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40023000 	.word	0x40023000
 8004080:	40021000 	.word	0x40021000

08004084 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08a      	sub	sp, #40	; 0x28
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800408c:	f107 0314 	add.w	r3, r7, #20
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	605a      	str	r2, [r3, #4]
 8004096:	609a      	str	r2, [r3, #8]
 8004098:	60da      	str	r2, [r3, #12]
 800409a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a17      	ldr	r2, [pc, #92]	; (8004100 <HAL_I2C_MspInit+0x7c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d128      	bne.n	80040f8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040a6:	4b17      	ldr	r3, [pc, #92]	; (8004104 <HAL_I2C_MspInit+0x80>)
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	4a16      	ldr	r2, [pc, #88]	; (8004104 <HAL_I2C_MspInit+0x80>)
 80040ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040b0:	6153      	str	r3, [r2, #20]
 80040b2:	4b14      	ldr	r3, [pc, #80]	; (8004104 <HAL_I2C_MspInit+0x80>)
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80040be:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040c4:	2312      	movs	r3, #18
 80040c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c8:	2300      	movs	r3, #0
 80040ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80040cc:	2303      	movs	r3, #3
 80040ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040d0:	2304      	movs	r3, #4
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d4:	f107 0314 	add.w	r3, r7, #20
 80040d8:	4619      	mov	r1, r3
 80040da:	480b      	ldr	r0, [pc, #44]	; (8004108 <HAL_I2C_MspInit+0x84>)
 80040dc:	f003 f854 	bl	8007188 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040e0:	4b08      	ldr	r3, [pc, #32]	; (8004104 <HAL_I2C_MspInit+0x80>)
 80040e2:	69db      	ldr	r3, [r3, #28]
 80040e4:	4a07      	ldr	r2, [pc, #28]	; (8004104 <HAL_I2C_MspInit+0x80>)
 80040e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040ea:	61d3      	str	r3, [r2, #28]
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <HAL_I2C_MspInit+0x80>)
 80040ee:	69db      	ldr	r3, [r3, #28]
 80040f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040f4:	60fb      	str	r3, [r7, #12]
 80040f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80040f8:	bf00      	nop
 80040fa:	3728      	adds	r7, #40	; 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40005400 	.word	0x40005400
 8004104:	40021000 	.word	0x40021000
 8004108:	48000400 	.word	0x48000400

0800410c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b08a      	sub	sp, #40	; 0x28
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004114:	f107 0314 	add.w	r3, r7, #20
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a2a      	ldr	r2, [pc, #168]	; (80041d4 <HAL_SPI_MspInit+0xc8>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d14e      	bne.n	80041cc <HAL_SPI_MspInit+0xc0>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800412e:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <HAL_SPI_MspInit+0xcc>)
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	4a29      	ldr	r2, [pc, #164]	; (80041d8 <HAL_SPI_MspInit+0xcc>)
 8004134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004138:	6193      	str	r3, [r2, #24]
 800413a:	4b27      	ldr	r3, [pc, #156]	; (80041d8 <HAL_SPI_MspInit+0xcc>)
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004142:	613b      	str	r3, [r7, #16]
 8004144:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004146:	4b24      	ldr	r3, [pc, #144]	; (80041d8 <HAL_SPI_MspInit+0xcc>)
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	4a23      	ldr	r2, [pc, #140]	; (80041d8 <HAL_SPI_MspInit+0xcc>)
 800414c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004150:	6153      	str	r3, [r2, #20]
 8004152:	4b21      	ldr	r3, [pc, #132]	; (80041d8 <HAL_SPI_MspInit+0xcc>)
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	60fb      	str	r3, [r7, #12]
 800415c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800415e:	23a0      	movs	r3, #160	; 0xa0
 8004160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004162:	2302      	movs	r3, #2
 8004164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004166:	2300      	movs	r3, #0
 8004168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800416a:	2303      	movs	r3, #3
 800416c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800416e:	2305      	movs	r3, #5
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004172:	f107 0314 	add.w	r3, r7, #20
 8004176:	4619      	mov	r1, r3
 8004178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800417c:	f003 f804 	bl	8007188 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004180:	4b16      	ldr	r3, [pc, #88]	; (80041dc <HAL_SPI_MspInit+0xd0>)
 8004182:	4a17      	ldr	r2, [pc, #92]	; (80041e0 <HAL_SPI_MspInit+0xd4>)
 8004184:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <HAL_SPI_MspInit+0xd0>)
 8004188:	2210      	movs	r2, #16
 800418a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800418c:	4b13      	ldr	r3, [pc, #76]	; (80041dc <HAL_SPI_MspInit+0xd0>)
 800418e:	2200      	movs	r2, #0
 8004190:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004192:	4b12      	ldr	r3, [pc, #72]	; (80041dc <HAL_SPI_MspInit+0xd0>)
 8004194:	2280      	movs	r2, #128	; 0x80
 8004196:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004198:	4b10      	ldr	r3, [pc, #64]	; (80041dc <HAL_SPI_MspInit+0xd0>)
 800419a:	2200      	movs	r2, #0
 800419c:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800419e:	4b0f      	ldr	r3, [pc, #60]	; (80041dc <HAL_SPI_MspInit+0xd0>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80041a4:	4b0d      	ldr	r3, [pc, #52]	; (80041dc <HAL_SPI_MspInit+0xd0>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80041aa:	4b0c      	ldr	r3, [pc, #48]	; (80041dc <HAL_SPI_MspInit+0xd0>)
 80041ac:	2200      	movs	r2, #0
 80041ae:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80041b0:	480a      	ldr	r0, [pc, #40]	; (80041dc <HAL_SPI_MspInit+0xd0>)
 80041b2:	f002 fc5d 	bl	8006a70 <HAL_DMA_Init>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d001      	beq.n	80041c0 <HAL_SPI_MspInit+0xb4>
    {
      Error_Handler();
 80041bc:	f7fe fce6 	bl	8002b8c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	4a06      	ldr	r2, [pc, #24]	; (80041dc <HAL_SPI_MspInit+0xd0>)
 80041c4:	655a      	str	r2, [r3, #84]	; 0x54
 80041c6:	4a05      	ldr	r2, [pc, #20]	; (80041dc <HAL_SPI_MspInit+0xd0>)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80041cc:	bf00      	nop
 80041ce:	3728      	adds	r7, #40	; 0x28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	40013000 	.word	0x40013000
 80041d8:	40021000 	.word	0x40021000
 80041dc:	200018dc 	.word	0x200018dc
 80041e0:	40020030 	.word	0x40020030

080041e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a13      	ldr	r2, [pc, #76]	; (8004240 <HAL_TIM_Base_MspInit+0x5c>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d10c      	bne.n	8004210 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041f6:	4b13      	ldr	r3, [pc, #76]	; (8004244 <HAL_TIM_Base_MspInit+0x60>)
 80041f8:	699b      	ldr	r3, [r3, #24]
 80041fa:	4a12      	ldr	r2, [pc, #72]	; (8004244 <HAL_TIM_Base_MspInit+0x60>)
 80041fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004200:	6193      	str	r3, [r2, #24]
 8004202:	4b10      	ldr	r3, [pc, #64]	; (8004244 <HAL_TIM_Base_MspInit+0x60>)
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800420a:	60fb      	str	r3, [r7, #12]
 800420c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800420e:	e010      	b.n	8004232 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a0c      	ldr	r2, [pc, #48]	; (8004248 <HAL_TIM_Base_MspInit+0x64>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d10b      	bne.n	8004232 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800421a:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <HAL_TIM_Base_MspInit+0x60>)
 800421c:	699b      	ldr	r3, [r3, #24]
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <HAL_TIM_Base_MspInit+0x60>)
 8004220:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004224:	6193      	str	r3, [r2, #24]
 8004226:	4b07      	ldr	r3, [pc, #28]	; (8004244 <HAL_TIM_Base_MspInit+0x60>)
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800422e:	60bb      	str	r3, [r7, #8]
 8004230:	68bb      	ldr	r3, [r7, #8]
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40012c00 	.word	0x40012c00
 8004244:	40021000 	.word	0x40021000
 8004248:	40014400 	.word	0x40014400

0800424c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08a      	sub	sp, #40	; 0x28
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]
 800425c:	605a      	str	r2, [r3, #4]
 800425e:	609a      	str	r2, [r3, #8]
 8004260:	60da      	str	r2, [r3, #12]
 8004262:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800426c:	d14d      	bne.n	800430a <HAL_TIM_Encoder_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800426e:	4b29      	ldr	r3, [pc, #164]	; (8004314 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	4a28      	ldr	r2, [pc, #160]	; (8004314 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	61d3      	str	r3, [r2, #28]
 800427a:	4b26      	ldr	r3, [pc, #152]	; (8004314 <HAL_TIM_Encoder_MspInit+0xc8>)
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	613b      	str	r3, [r7, #16]
 8004284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004286:	4b23      	ldr	r3, [pc, #140]	; (8004314 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	4a22      	ldr	r2, [pc, #136]	; (8004314 <HAL_TIM_Encoder_MspInit+0xc8>)
 800428c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004290:	6153      	str	r3, [r2, #20]
 8004292:	4b20      	ldr	r3, [pc, #128]	; (8004314 <HAL_TIM_Encoder_MspInit+0xc8>)
 8004294:	695b      	ldr	r3, [r3, #20]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	60fb      	str	r3, [r7, #12]
 800429c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800429e:	4b1d      	ldr	r3, [pc, #116]	; (8004314 <HAL_TIM_Encoder_MspInit+0xc8>)
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	4a1c      	ldr	r2, [pc, #112]	; (8004314 <HAL_TIM_Encoder_MspInit+0xc8>)
 80042a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042a8:	6153      	str	r3, [r2, #20]
 80042aa:	4b1a      	ldr	r3, [pc, #104]	; (8004314 <HAL_TIM_Encoder_MspInit+0xc8>)
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b2:	60bb      	str	r3, [r7, #8]
 80042b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = ENC_B_Pin;
 80042b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042bc:	2302      	movs	r3, #2
 80042be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c4:	2300      	movs	r3, #0
 80042c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042c8:	2301      	movs	r3, #1
 80042ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_B_GPIO_Port, &GPIO_InitStruct);
 80042cc:	f107 0314 	add.w	r3, r7, #20
 80042d0:	4619      	mov	r1, r3
 80042d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80042d6:	f002 ff57 	bl	8007188 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_A_Pin;
 80042da:	2308      	movs	r3, #8
 80042dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042de:	2302      	movs	r3, #2
 80042e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e6:	2300      	movs	r3, #0
 80042e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80042ea:	2301      	movs	r3, #1
 80042ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_A_GPIO_Port, &GPIO_InitStruct);
 80042ee:	f107 0314 	add.w	r3, r7, #20
 80042f2:	4619      	mov	r1, r3
 80042f4:	4808      	ldr	r0, [pc, #32]	; (8004318 <HAL_TIM_Encoder_MspInit+0xcc>)
 80042f6:	f002 ff47 	bl	8007188 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80042fa:	2200      	movs	r2, #0
 80042fc:	2100      	movs	r1, #0
 80042fe:	201c      	movs	r0, #28
 8004300:	f002 f979 	bl	80065f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004304:	201c      	movs	r0, #28
 8004306:	f002 f992 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800430a:	bf00      	nop
 800430c:	3728      	adds	r7, #40	; 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40021000 	.word	0x40021000
 8004318:	48000400 	.word	0x48000400

0800431c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0d      	ldr	r2, [pc, #52]	; (8004360 <HAL_TIM_PWM_MspInit+0x44>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d113      	bne.n	8004356 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800432e:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <HAL_TIM_PWM_MspInit+0x48>)
 8004330:	69db      	ldr	r3, [r3, #28]
 8004332:	4a0c      	ldr	r2, [pc, #48]	; (8004364 <HAL_TIM_PWM_MspInit+0x48>)
 8004334:	f043 0304 	orr.w	r3, r3, #4
 8004338:	61d3      	str	r3, [r2, #28]
 800433a:	4b0a      	ldr	r3, [pc, #40]	; (8004364 <HAL_TIM_PWM_MspInit+0x48>)
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	f003 0304 	and.w	r3, r3, #4
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8004346:	2200      	movs	r2, #0
 8004348:	2100      	movs	r1, #0
 800434a:	201e      	movs	r0, #30
 800434c:	f002 f953 	bl	80065f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004350:	201e      	movs	r0, #30
 8004352:	f002 f96c 	bl	800662e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004356:	bf00      	nop
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40000800 	.word	0x40000800
 8004364:	40021000 	.word	0x40021000

08004368 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004370:	f107 0314 	add.w	r3, r7, #20
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	605a      	str	r2, [r3, #4]
 800437a:	609a      	str	r2, [r3, #8]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a22      	ldr	r2, [pc, #136]	; (8004410 <HAL_TIM_MspPostInit+0xa8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d11d      	bne.n	80043c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800438a:	4b22      	ldr	r3, [pc, #136]	; (8004414 <HAL_TIM_MspPostInit+0xac>)
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4a21      	ldr	r2, [pc, #132]	; (8004414 <HAL_TIM_MspPostInit+0xac>)
 8004390:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004394:	6153      	str	r3, [r2, #20]
 8004396:	4b1f      	ldr	r3, [pc, #124]	; (8004414 <HAL_TIM_MspPostInit+0xac>)
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = BUZZER_Pin;
 80043a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80043a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043a8:	2302      	movs	r3, #2
 80043aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ac:	2300      	movs	r3, #0
 80043ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043b0:	2300      	movs	r3, #0
 80043b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80043b4:	2304      	movs	r3, #4
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 80043b8:	f107 0314 	add.w	r3, r7, #20
 80043bc:	4619      	mov	r1, r3
 80043be:	4816      	ldr	r0, [pc, #88]	; (8004418 <HAL_TIM_MspPostInit+0xb0>)
 80043c0:	f002 fee2 	bl	8007188 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80043c4:	e020      	b.n	8004408 <HAL_TIM_MspPostInit+0xa0>
  else if(htim->Instance==TIM4)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a14      	ldr	r2, [pc, #80]	; (800441c <HAL_TIM_MspPostInit+0xb4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d11b      	bne.n	8004408 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d0:	4b10      	ldr	r3, [pc, #64]	; (8004414 <HAL_TIM_MspPostInit+0xac>)
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	4a0f      	ldr	r2, [pc, #60]	; (8004414 <HAL_TIM_MspPostInit+0xac>)
 80043d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043da:	6153      	str	r3, [r2, #20]
 80043dc:	4b0d      	ldr	r3, [pc, #52]	; (8004414 <HAL_TIM_MspPostInit+0xac>)
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043e4:	60fb      	str	r3, [r7, #12]
 80043e6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HEATER_Pin;
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043ec:	2302      	movs	r3, #2
 80043ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f0:	2300      	movs	r3, #0
 80043f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f4:	2300      	movs	r3, #0
 80043f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043f8:	2302      	movs	r3, #2
 80043fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 80043fc:	f107 0314 	add.w	r3, r7, #20
 8004400:	4619      	mov	r1, r3
 8004402:	4807      	ldr	r0, [pc, #28]	; (8004420 <HAL_TIM_MspPostInit+0xb8>)
 8004404:	f002 fec0 	bl	8007188 <HAL_GPIO_Init>
}
 8004408:	bf00      	nop
 800440a:	3728      	adds	r7, #40	; 0x28
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40012c00 	.word	0x40012c00
 8004414:	40021000 	.word	0x40021000
 8004418:	48000800 	.word	0x48000800
 800441c:	40000800 	.word	0x40000800
 8004420:	48000400 	.word	0x48000400

08004424 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004424:	b480      	push	{r7}
 8004426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004428:	e7fe      	b.n	8004428 <NMI_Handler+0x4>

0800442a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800442a:	b480      	push	{r7}
 800442c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800442e:	e7fe      	b.n	800442e <HardFault_Handler+0x4>

08004430 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004430:	b480      	push	{r7}
 8004432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004434:	e7fe      	b.n	8004434 <MemManage_Handler+0x4>

08004436 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004436:	b480      	push	{r7}
 8004438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800443a:	e7fe      	b.n	800443a <BusFault_Handler+0x4>

0800443c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004440:	e7fe      	b.n	8004440 <UsageFault_Handler+0x4>

08004442 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004442:	b480      	push	{r7}
 8004444:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004446:	bf00      	nop
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004450:	b480      	push	{r7}
 8004452:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004454:	bf00      	nop
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800445e:	b480      	push	{r7}
 8004460:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004462:	bf00      	nop
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004470:	f000 f97c 	bl	800476c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004474:	bf00      	nop
 8004476:	bd80      	pop	{r7, pc}

08004478 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800447c:	4802      	ldr	r0, [pc, #8]	; (8004488 <DMA1_Channel3_IRQHandler+0x10>)
 800447e:	f002 fb9d 	bl	8006bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004482:	bf00      	nop
 8004484:	bd80      	pop	{r7, pc}
 8004486:	bf00      	nop
 8004488:	200018dc 	.word	0x200018dc

0800448c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8004490:	4802      	ldr	r0, [pc, #8]	; (800449c <ADC1_2_IRQHandler+0x10>)
 8004492:	f000 fe13 	bl	80050bc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8004496:	bf00      	nop
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	2000171c 	.word	0x2000171c

080044a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80044a4:	4802      	ldr	r0, [pc, #8]	; (80044b0 <TIM2_IRQHandler+0x10>)
 80044a6:	f005 fe11 	bl	800a0cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80044aa:	bf00      	nop
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	2000196c 	.word	0x2000196c

080044b4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80044b8:	4802      	ldr	r0, [pc, #8]	; (80044c4 <TIM4_IRQHandler+0x10>)
 80044ba:	f005 fe07 	bl	800a0cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	200019b8 	.word	0x200019b8

080044c8 <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80044cc:	4802      	ldr	r0, [pc, #8]	; (80044d8 <DMA2_Channel5_IRQHandler+0x10>)
 80044ce:	f002 fb75 	bl	8006bbc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	200017bc 	.word	0x200017bc

080044dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  return 1;
 80044e0:	2301      	movs	r3, #1
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <_kill>:

int _kill(int pid, int sig)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b082      	sub	sp, #8
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
 80044f4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80044f6:	f007 fcf9 	bl	800beec <__errno>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2216      	movs	r2, #22
 80044fe:	601a      	str	r2, [r3, #0]
  return -1;
 8004500:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <_exit>:

void _exit (int status)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004514:	f04f 31ff 	mov.w	r1, #4294967295
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f7ff ffe7 	bl	80044ec <_kill>
  while (1) {}    /* Make sure we hang here */
 800451e:	e7fe      	b.n	800451e <_exit+0x12>

08004520 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800452c:	2300      	movs	r3, #0
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e00a      	b.n	8004548 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004532:	f3af 8000 	nop.w
 8004536:	4601      	mov	r1, r0
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	60ba      	str	r2, [r7, #8]
 800453e:	b2ca      	uxtb	r2, r1
 8004540:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	3301      	adds	r3, #1
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	dbf0      	blt.n	8004532 <_read+0x12>
  }

  return len;
 8004550:	687b      	ldr	r3, [r7, #4]
}
 8004552:	4618      	mov	r0, r3
 8004554:	3718      	adds	r7, #24
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004566:	2300      	movs	r3, #0
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e009      	b.n	8004580 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	60ba      	str	r2, [r7, #8]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	4618      	mov	r0, r3
 8004576:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	3301      	adds	r3, #1
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	429a      	cmp	r2, r3
 8004586:	dbf1      	blt.n	800456c <_write+0x12>
  }
  return len;
 8004588:	687b      	ldr	r3, [r7, #4]
}
 800458a:	4618      	mov	r0, r3
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <_close>:

int _close(int file)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800459a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80045ba:	605a      	str	r2, [r3, #4]
  return 0;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <_isatty>:

int _isatty(int file)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80045d2:	2301      	movs	r3, #1
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	370c      	adds	r7, #12
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3714      	adds	r7, #20
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr
	...

080045fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004604:	4a14      	ldr	r2, [pc, #80]	; (8004658 <_sbrk+0x5c>)
 8004606:	4b15      	ldr	r3, [pc, #84]	; (800465c <_sbrk+0x60>)
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004610:	4b13      	ldr	r3, [pc, #76]	; (8004660 <_sbrk+0x64>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d102      	bne.n	800461e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004618:	4b11      	ldr	r3, [pc, #68]	; (8004660 <_sbrk+0x64>)
 800461a:	4a12      	ldr	r2, [pc, #72]	; (8004664 <_sbrk+0x68>)
 800461c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800461e:	4b10      	ldr	r3, [pc, #64]	; (8004660 <_sbrk+0x64>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4413      	add	r3, r2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	429a      	cmp	r2, r3
 800462a:	d207      	bcs.n	800463c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800462c:	f007 fc5e 	bl	800beec <__errno>
 8004630:	4603      	mov	r3, r0
 8004632:	220c      	movs	r2, #12
 8004634:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	e009      	b.n	8004650 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <_sbrk+0x64>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004642:	4b07      	ldr	r3, [pc, #28]	; (8004660 <_sbrk+0x64>)
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4413      	add	r3, r2
 800464a:	4a05      	ldr	r2, [pc, #20]	; (8004660 <_sbrk+0x64>)
 800464c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800464e:	68fb      	ldr	r3, [r7, #12]
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	2000a000 	.word	0x2000a000
 800465c:	00000400 	.word	0x00000400
 8004660:	200065e8 	.word	0x200065e8
 8004664:	20006760 	.word	0x20006760

08004668 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004668:	b480      	push	{r7}
 800466a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800466c:	4b06      	ldr	r3, [pc, #24]	; (8004688 <SystemInit+0x20>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004672:	4a05      	ldr	r2, [pc, #20]	; (8004688 <SystemInit+0x20>)
 8004674:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004678:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800467c:	bf00      	nop
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	e000ed00 	.word	0xe000ed00

0800468c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800468c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046c4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8004690:	f7ff ffea 	bl	8004668 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004694:	480c      	ldr	r0, [pc, #48]	; (80046c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8004696:	490d      	ldr	r1, [pc, #52]	; (80046cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8004698:	4a0d      	ldr	r2, [pc, #52]	; (80046d0 <LoopForever+0xe>)
  movs r3, #0
 800469a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800469c:	e002      	b.n	80046a4 <LoopCopyDataInit>

0800469e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800469e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046a2:	3304      	adds	r3, #4

080046a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046a8:	d3f9      	bcc.n	800469e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046aa:	4a0a      	ldr	r2, [pc, #40]	; (80046d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80046ac:	4c0a      	ldr	r4, [pc, #40]	; (80046d8 <LoopForever+0x16>)
  movs r3, #0
 80046ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046b0:	e001      	b.n	80046b6 <LoopFillZerobss>

080046b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046b4:	3204      	adds	r2, #4

080046b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046b8:	d3fb      	bcc.n	80046b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80046ba:	f007 fc1d 	bl	800bef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046be:	f7fd f94b 	bl	8001958 <main>

080046c2 <LoopForever>:

LoopForever:
    b LoopForever
 80046c2:	e7fe      	b.n	80046c2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046c4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 80046c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046cc:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 80046d0:	08011788 	.word	0x08011788
  ldr r2, =_sbss
 80046d4:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 80046d8:	2000675c 	.word	0x2000675c

080046dc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046dc:	e7fe      	b.n	80046dc <ADC3_IRQHandler>
	...

080046e0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80046e4:	4b08      	ldr	r3, [pc, #32]	; (8004708 <HAL_Init+0x28>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a07      	ldr	r2, [pc, #28]	; (8004708 <HAL_Init+0x28>)
 80046ea:	f043 0310 	orr.w	r3, r3, #16
 80046ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80046f0:	2003      	movs	r0, #3
 80046f2:	f001 ff75 	bl	80065e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80046f6:	200f      	movs	r0, #15
 80046f8:	f000 f808 	bl	800470c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80046fc:	f7ff fbde 	bl	8003ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40022000 	.word	0x40022000

0800470c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004714:	4b12      	ldr	r3, [pc, #72]	; (8004760 <HAL_InitTick+0x54>)
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	4b12      	ldr	r3, [pc, #72]	; (8004764 <HAL_InitTick+0x58>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	4619      	mov	r1, r3
 800471e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004722:	fbb3 f3f1 	udiv	r3, r3, r1
 8004726:	fbb2 f3f3 	udiv	r3, r2, r3
 800472a:	4618      	mov	r0, r3
 800472c:	f001 ff8d 	bl	800664a <HAL_SYSTICK_Config>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e00e      	b.n	8004758 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b0f      	cmp	r3, #15
 800473e:	d80a      	bhi.n	8004756 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004740:	2200      	movs	r2, #0
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	f04f 30ff 	mov.w	r0, #4294967295
 8004748:	f001 ff55 	bl	80065f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800474c:	4a06      	ldr	r2, [pc, #24]	; (8004768 <HAL_InitTick+0x5c>)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	e000      	b.n	8004758 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
}
 8004758:	4618      	mov	r0, r3
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}
 8004760:	200000ac 	.word	0x200000ac
 8004764:	200000b4 	.word	0x200000b4
 8004768:	200000b0 	.word	0x200000b0

0800476c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004770:	4b06      	ldr	r3, [pc, #24]	; (800478c <HAL_IncTick+0x20>)
 8004772:	781b      	ldrb	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	4b06      	ldr	r3, [pc, #24]	; (8004790 <HAL_IncTick+0x24>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4413      	add	r3, r2
 800477c:	4a04      	ldr	r2, [pc, #16]	; (8004790 <HAL_IncTick+0x24>)
 800477e:	6013      	str	r3, [r2, #0]
}
 8004780:	bf00      	nop
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
 800478a:	bf00      	nop
 800478c:	200000b4 	.word	0x200000b4
 8004790:	200065ec 	.word	0x200065ec

08004794 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004794:	b480      	push	{r7}
 8004796:	af00      	add	r7, sp, #0
  return uwTick;  
 8004798:	4b03      	ldr	r3, [pc, #12]	; (80047a8 <HAL_GetTick+0x14>)
 800479a:	681b      	ldr	r3, [r3, #0]
}
 800479c:	4618      	mov	r0, r3
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	200065ec 	.word	0x200065ec

080047ac <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047b4:	f7ff ffee 	bl	8004794 <HAL_GetTick>
 80047b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d005      	beq.n	80047d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047c6:	4b0a      	ldr	r3, [pc, #40]	; (80047f0 <HAL_Delay+0x44>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80047d2:	bf00      	nop
 80047d4:	f7ff ffde 	bl	8004794 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d8f7      	bhi.n	80047d4 <HAL_Delay+0x28>
  {
  }
}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	200000b4 	.word	0x200000b4

080047f4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80047fc:	bf00      	nop
 80047fe:	370c      	adds	r7, #12
 8004800:	46bd      	mov	sp, r7
 8004802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004806:	4770      	bx	lr

08004808 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8004810:	bf00      	nop
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b09a      	sub	sp, #104	; 0x68
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800484c:	2300      	movs	r3, #0
 800484e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8004852:	2300      	movs	r3, #0
 8004854:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8004856:	2300      	movs	r3, #0
 8004858:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d101      	bne.n	8004864 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e1c9      	b.n	8004bf8 <HAL_ADC_Init+0x3b4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	691b      	ldr	r3, [r3, #16]
 8004868:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	2b00      	cmp	r3, #0
 8004874:	d176      	bne.n	8004964 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	2b00      	cmp	r3, #0
 800487c:	d152      	bne.n	8004924 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff fb33 	bl	8003f04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d13b      	bne.n	8004924 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f001 fd61 	bl	8006374 <ADC_Disable>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d12f      	bne.n	8004924 <HAL_ADC_Init+0xe0>
 80048c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d12b      	bne.n	8004924 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048d4:	f023 0302 	bic.w	r3, r3, #2
 80048d8:	f043 0202 	orr.w	r2, r3, #2
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80048ee:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689a      	ldr	r2, [r3, #8]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80048fe:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004900:	4b86      	ldr	r3, [pc, #536]	; (8004b1c <HAL_ADC_Init+0x2d8>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a86      	ldr	r2, [pc, #536]	; (8004b20 <HAL_ADC_Init+0x2dc>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	0c9a      	lsrs	r2, r3, #18
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004916:	e002      	b.n	800491e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	3b01      	subs	r3, #1
 800491c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1f9      	bne.n	8004918 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800492e:	2b00      	cmp	r3, #0
 8004930:	d007      	beq.n	8004942 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800493c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004940:	d110      	bne.n	8004964 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f023 0312 	bic.w	r3, r3, #18
 800494a:	f043 0210 	orr.w	r2, r3, #16
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	f043 0201 	orr.w	r2, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	f003 0310 	and.w	r3, r3, #16
 800496c:	2b00      	cmp	r3, #0
 800496e:	f040 8136 	bne.w	8004bde <HAL_ADC_Init+0x39a>
 8004972:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8004976:	2b00      	cmp	r3, #0
 8004978:	f040 8131 	bne.w	8004bde <HAL_ADC_Init+0x39a>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8004986:	2b00      	cmp	r3, #0
 8004988:	f040 8129 	bne.w	8004bde <HAL_ADC_Init+0x39a>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004994:	f043 0202 	orr.w	r2, r3, #2
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049a4:	d004      	beq.n	80049b0 <HAL_ADC_Init+0x16c>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a5e      	ldr	r2, [pc, #376]	; (8004b24 <HAL_ADC_Init+0x2e0>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d101      	bne.n	80049b4 <HAL_ADC_Init+0x170>
 80049b0:	4b5d      	ldr	r3, [pc, #372]	; (8004b28 <HAL_ADC_Init+0x2e4>)
 80049b2:	e000      	b.n	80049b6 <HAL_ADC_Init+0x172>
 80049b4:	4b5d      	ldr	r3, [pc, #372]	; (8004b2c <HAL_ADC_Init+0x2e8>)
 80049b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049c0:	d102      	bne.n	80049c8 <HAL_ADC_Init+0x184>
 80049c2:	4b58      	ldr	r3, [pc, #352]	; (8004b24 <HAL_ADC_Init+0x2e0>)
 80049c4:	60fb      	str	r3, [r7, #12]
 80049c6:	e01a      	b.n	80049fe <HAL_ADC_Init+0x1ba>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a55      	ldr	r2, [pc, #340]	; (8004b24 <HAL_ADC_Init+0x2e0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d103      	bne.n	80049da <HAL_ADC_Init+0x196>
 80049d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	e011      	b.n	80049fe <HAL_ADC_Init+0x1ba>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a54      	ldr	r2, [pc, #336]	; (8004b30 <HAL_ADC_Init+0x2ec>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d102      	bne.n	80049ea <HAL_ADC_Init+0x1a6>
 80049e4:	4b53      	ldr	r3, [pc, #332]	; (8004b34 <HAL_ADC_Init+0x2f0>)
 80049e6:	60fb      	str	r3, [r7, #12]
 80049e8:	e009      	b.n	80049fe <HAL_ADC_Init+0x1ba>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a51      	ldr	r2, [pc, #324]	; (8004b34 <HAL_ADC_Init+0x2f0>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d102      	bne.n	80049fa <HAL_ADC_Init+0x1b6>
 80049f4:	4b4e      	ldr	r3, [pc, #312]	; (8004b30 <HAL_ADC_Init+0x2ec>)
 80049f6:	60fb      	str	r3, [r7, #12]
 80049f8:	e001      	b.n	80049fe <HAL_ADC_Init+0x1ba>
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f003 0303 	and.w	r3, r3, #3
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d108      	bne.n	8004a1e <HAL_ADC_Init+0x1da>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b01      	cmp	r3, #1
 8004a18:	d101      	bne.n	8004a1e <HAL_ADC_Init+0x1da>
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e000      	b.n	8004a20 <HAL_ADC_Init+0x1dc>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d11c      	bne.n	8004a5e <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004a24:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d010      	beq.n	8004a4c <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	f003 0303 	and.w	r3, r3, #3
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d107      	bne.n	8004a46 <HAL_ADC_Init+0x202>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_ADC_Init+0x202>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_ADC_Init+0x204>
 8004a46:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d108      	bne.n	8004a5e <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8004a4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a5c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	7e5b      	ldrb	r3, [r3, #25]
 8004a62:	035b      	lsls	r3, r3, #13
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a68:	2a01      	cmp	r2, #1
 8004a6a:	d002      	beq.n	8004a72 <HAL_ADC_Init+0x22e>
 8004a6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004a70:	e000      	b.n	8004a74 <HAL_ADC_Init+0x230>
 8004a72:	2200      	movs	r2, #0
 8004a74:	431a      	orrs	r2, r3
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a84:	4313      	orrs	r3, r2
 8004a86:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d11b      	bne.n	8004aca <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	7e5b      	ldrb	r3, [r3, #25]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	045a      	lsls	r2, r3, #17
 8004aa2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aaa:	663b      	str	r3, [r7, #96]	; 0x60
 8004aac:	e00d      	b.n	8004aca <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ab6:	f043 0220 	orr.w	r2, r3, #32
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	f043 0201 	orr.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d03a      	beq.n	8004b48 <HAL_ADC_Init+0x304>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a16      	ldr	r2, [pc, #88]	; (8004b30 <HAL_ADC_Init+0x2ec>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d004      	beq.n	8004ae6 <HAL_ADC_Init+0x2a2>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a14      	ldr	r2, [pc, #80]	; (8004b34 <HAL_ADC_Init+0x2f0>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d128      	bne.n	8004b38 <HAL_ADC_Init+0x2f4>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8004aee:	d012      	beq.n	8004b16 <HAL_ADC_Init+0x2d2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004af8:	d00a      	beq.n	8004b10 <HAL_ADC_Init+0x2cc>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8004b02:	d002      	beq.n	8004b0a <HAL_ADC_Init+0x2c6>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b08:	e018      	b.n	8004b3c <HAL_ADC_Init+0x2f8>
 8004b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b0e:	e015      	b.n	8004b3c <HAL_ADC_Init+0x2f8>
 8004b10:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8004b14:	e012      	b.n	8004b3c <HAL_ADC_Init+0x2f8>
 8004b16:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8004b1a:	e00f      	b.n	8004b3c <HAL_ADC_Init+0x2f8>
 8004b1c:	200000ac 	.word	0x200000ac
 8004b20:	431bde83 	.word	0x431bde83
 8004b24:	50000100 	.word	0x50000100
 8004b28:	50000300 	.word	0x50000300
 8004b2c:	50000700 	.word	0x50000700
 8004b30:	50000400 	.word	0x50000400
 8004b34:	50000500 	.word	0x50000500
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004b40:	4313      	orrs	r3, r2
 8004b42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b44:	4313      	orrs	r3, r2
 8004b46:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 030c 	and.w	r3, r3, #12
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d114      	bne.n	8004b80 <HAL_ADC_Init+0x33c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68db      	ldr	r3, [r3, #12]
 8004b5c:	687a      	ldr	r2, [r7, #4]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b64:	f023 0302 	bic.w	r3, r3, #2
 8004b68:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	7e1b      	ldrb	r3, [r3, #24]
 8004b6e:	039a      	lsls	r2, r3, #14
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b76:	005b      	lsls	r3, r3, #1
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <HAL_ADC_Init+0x3bc>)
 8004b88:	4013      	ands	r3, r2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8004b90:	430b      	orrs	r3, r1
 8004b92:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	691b      	ldr	r3, [r3, #16]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d10c      	bne.n	8004bb6 <HAL_ADC_Init+0x372>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba2:	f023 010f 	bic.w	r1, r3, #15
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	1e5a      	subs	r2, r3, #1
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004bb4:	e007      	b.n	8004bc6 <HAL_ADC_Init+0x382>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 020f 	bic.w	r2, r2, #15
 8004bc4:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd0:	f023 0303 	bic.w	r3, r3, #3
 8004bd4:	f043 0201 	orr.w	r2, r3, #1
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	641a      	str	r2, [r3, #64]	; 0x40
 8004bdc:	e00a      	b.n	8004bf4 <HAL_ADC_Init+0x3b0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be2:	f023 0312 	bic.w	r3, r3, #18
 8004be6:	f043 0210 	orr.w	r2, r3, #16
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8004bee:	2301      	movs	r3, #1
 8004bf0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8004bf4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3768      	adds	r7, #104	; 0x68
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	fff0c007 	.word	0xfff0c007

08004c04 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 0304 	and.w	r3, r3, #4
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f040 8123 	bne.w	8004e66 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_ADC_Start_IT+0x2a>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e11e      	b.n	8004e6c <HAL_ADC_Start_IT+0x268>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f001 fb38 	bl	80062ac <ADC_Enable>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	f040 810a 	bne.w	8004e5c <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c50:	f023 0301 	bic.w	r3, r3, #1
 8004c54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c64:	d004      	beq.n	8004c70 <HAL_ADC_Start_IT+0x6c>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a82      	ldr	r2, [pc, #520]	; (8004e74 <HAL_ADC_Start_IT+0x270>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d106      	bne.n	8004c7e <HAL_ADC_Start_IT+0x7a>
 8004c70:	4b81      	ldr	r3, [pc, #516]	; (8004e78 <HAL_ADC_Start_IT+0x274>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d010      	beq.n	8004c9e <HAL_ADC_Start_IT+0x9a>
 8004c7c:	e005      	b.n	8004c8a <HAL_ADC_Start_IT+0x86>
 8004c7e:	4b7f      	ldr	r3, [pc, #508]	; (8004e7c <HAL_ADC_Start_IT+0x278>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f003 031f 	and.w	r3, r3, #31
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d009      	beq.n	8004c9e <HAL_ADC_Start_IT+0x9a>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004c92:	d004      	beq.n	8004c9e <HAL_ADC_Start_IT+0x9a>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a79      	ldr	r2, [pc, #484]	; (8004e80 <HAL_ADC_Start_IT+0x27c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d115      	bne.n	8004cca <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d036      	beq.n	8004d26 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004cc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004cc8:	e02d      	b.n	8004d26 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004cde:	d004      	beq.n	8004cea <HAL_ADC_Start_IT+0xe6>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a63      	ldr	r2, [pc, #396]	; (8004e74 <HAL_ADC_Start_IT+0x270>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d10a      	bne.n	8004d00 <HAL_ADC_Start_IT+0xfc>
 8004cea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	bf14      	ite	ne
 8004cf8:	2301      	movne	r3, #1
 8004cfa:	2300      	moveq	r3, #0
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	e008      	b.n	8004d12 <HAL_ADC_Start_IT+0x10e>
 8004d00:	4b5f      	ldr	r3, [pc, #380]	; (8004e80 <HAL_ADC_Start_IT+0x27c>)
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	bf14      	ite	ne
 8004d0c:	2301      	movne	r3, #1
 8004d0e:	2300      	moveq	r3, #0
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004d1e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d32:	d106      	bne.n	8004d42 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d38:	f023 0206 	bic.w	r2, r3, #6
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	645a      	str	r2, [r3, #68]	; 0x44
 8004d40:	e002      	b.n	8004d48 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	221c      	movs	r2, #28
 8004d56:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	2b08      	cmp	r3, #8
 8004d5e:	d110      	bne.n	8004d82 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f022 0204 	bic.w	r2, r2, #4
 8004d6e:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0208 	orr.w	r2, r2, #8
 8004d7e:	605a      	str	r2, [r3, #4]
          break;
 8004d80:	e008      	b.n	8004d94 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 020c 	orr.w	r2, r2, #12
 8004d90:	605a      	str	r2, [r3, #4]
          break;
 8004d92:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d107      	bne.n	8004dac <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0210 	bic.w	r2, r2, #16
 8004daa:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004db4:	d004      	beq.n	8004dc0 <HAL_ADC_Start_IT+0x1bc>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a2e      	ldr	r2, [pc, #184]	; (8004e74 <HAL_ADC_Start_IT+0x270>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d106      	bne.n	8004dce <HAL_ADC_Start_IT+0x1ca>
 8004dc0:	4b2d      	ldr	r3, [pc, #180]	; (8004e78 <HAL_ADC_Start_IT+0x274>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 031f 	and.w	r3, r3, #31
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d03e      	beq.n	8004e4a <HAL_ADC_Start_IT+0x246>
 8004dcc:	e005      	b.n	8004dda <HAL_ADC_Start_IT+0x1d6>
 8004dce:	4b2b      	ldr	r3, [pc, #172]	; (8004e7c <HAL_ADC_Start_IT+0x278>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 031f 	and.w	r3, r3, #31
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d037      	beq.n	8004e4a <HAL_ADC_Start_IT+0x246>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004de2:	d004      	beq.n	8004dee <HAL_ADC_Start_IT+0x1ea>
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a22      	ldr	r2, [pc, #136]	; (8004e74 <HAL_ADC_Start_IT+0x270>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d106      	bne.n	8004dfc <HAL_ADC_Start_IT+0x1f8>
 8004dee:	4b22      	ldr	r3, [pc, #136]	; (8004e78 <HAL_ADC_Start_IT+0x274>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	f003 031f 	and.w	r3, r3, #31
 8004df6:	2b05      	cmp	r3, #5
 8004df8:	d027      	beq.n	8004e4a <HAL_ADC_Start_IT+0x246>
 8004dfa:	e005      	b.n	8004e08 <HAL_ADC_Start_IT+0x204>
 8004dfc:	4b1f      	ldr	r3, [pc, #124]	; (8004e7c <HAL_ADC_Start_IT+0x278>)
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	f003 031f 	and.w	r3, r3, #31
 8004e04:	2b05      	cmp	r3, #5
 8004e06:	d020      	beq.n	8004e4a <HAL_ADC_Start_IT+0x246>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e10:	d004      	beq.n	8004e1c <HAL_ADC_Start_IT+0x218>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a17      	ldr	r2, [pc, #92]	; (8004e74 <HAL_ADC_Start_IT+0x270>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d106      	bne.n	8004e2a <HAL_ADC_Start_IT+0x226>
 8004e1c:	4b16      	ldr	r3, [pc, #88]	; (8004e78 <HAL_ADC_Start_IT+0x274>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f003 031f 	and.w	r3, r3, #31
 8004e24:	2b09      	cmp	r3, #9
 8004e26:	d010      	beq.n	8004e4a <HAL_ADC_Start_IT+0x246>
 8004e28:	e005      	b.n	8004e36 <HAL_ADC_Start_IT+0x232>
 8004e2a:	4b14      	ldr	r3, [pc, #80]	; (8004e7c <HAL_ADC_Start_IT+0x278>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	f003 031f 	and.w	r3, r3, #31
 8004e32:	2b09      	cmp	r3, #9
 8004e34:	d009      	beq.n	8004e4a <HAL_ADC_Start_IT+0x246>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004e3e:	d004      	beq.n	8004e4a <HAL_ADC_Start_IT+0x246>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a0e      	ldr	r2, [pc, #56]	; (8004e80 <HAL_ADC_Start_IT+0x27c>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d10f      	bne.n	8004e6a <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f042 0204 	orr.w	r2, r2, #4
 8004e58:	609a      	str	r2, [r3, #8]
 8004e5a:	e006      	b.n	8004e6a <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004e64:	e001      	b.n	8004e6a <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004e66:	2302      	movs	r3, #2
 8004e68:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3710      	adds	r7, #16
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	50000100 	.word	0x50000100
 8004e78:	50000300 	.word	0x50000300
 8004e7c:	50000700 	.word	0x50000700
 8004e80:	50000400 	.word	0x50000400

08004e84 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004e90:	2300      	movs	r3, #0
 8004e92:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f003 0304 	and.w	r3, r3, #4
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	f040 80f7 	bne.w	8005092 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d101      	bne.n	8004eb2 <HAL_ADC_Start_DMA+0x2e>
 8004eae:	2302      	movs	r3, #2
 8004eb0:	e0f2      	b.n	8005098 <HAL_ADC_Start_DMA+0x214>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004ec2:	d004      	beq.n	8004ece <HAL_ADC_Start_DMA+0x4a>
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a75      	ldr	r2, [pc, #468]	; (80050a0 <HAL_ADC_Start_DMA+0x21c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d109      	bne.n	8004ee2 <HAL_ADC_Start_DMA+0x5e>
 8004ece:	4b75      	ldr	r3, [pc, #468]	; (80050a4 <HAL_ADC_Start_DMA+0x220>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 031f 	and.w	r3, r3, #31
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	bf0c      	ite	eq
 8004eda:	2301      	moveq	r3, #1
 8004edc:	2300      	movne	r3, #0
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	e008      	b.n	8004ef4 <HAL_ADC_Start_DMA+0x70>
 8004ee2:	4b71      	ldr	r3, [pc, #452]	; (80050a8 <HAL_ADC_Start_DMA+0x224>)
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	f003 031f 	and.w	r3, r3, #31
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bf0c      	ite	eq
 8004eee:	2301      	moveq	r3, #1
 8004ef0:	2300      	movne	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80c5 	beq.w	8005084 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f001 f9d6 	bl	80062ac <ADC_Enable>
 8004f00:	4603      	mov	r3, r0
 8004f02:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8004f04:	7dfb      	ldrb	r3, [r7, #23]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f040 80b7 	bne.w	800507a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004f14:	f023 0301 	bic.w	r3, r3, #1
 8004f18:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f28:	d004      	beq.n	8004f34 <HAL_ADC_Start_DMA+0xb0>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a5c      	ldr	r2, [pc, #368]	; (80050a0 <HAL_ADC_Start_DMA+0x21c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d106      	bne.n	8004f42 <HAL_ADC_Start_DMA+0xbe>
 8004f34:	4b5b      	ldr	r3, [pc, #364]	; (80050a4 <HAL_ADC_Start_DMA+0x220>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d010      	beq.n	8004f62 <HAL_ADC_Start_DMA+0xde>
 8004f40:	e005      	b.n	8004f4e <HAL_ADC_Start_DMA+0xca>
 8004f42:	4b59      	ldr	r3, [pc, #356]	; (80050a8 <HAL_ADC_Start_DMA+0x224>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <HAL_ADC_Start_DMA+0xde>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004f56:	d004      	beq.n	8004f62 <HAL_ADC_Start_DMA+0xde>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a53      	ldr	r2, [pc, #332]	; (80050ac <HAL_ADC_Start_DMA+0x228>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d115      	bne.n	8004f8e <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d036      	beq.n	8004fea <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f84:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	641a      	str	r2, [r3, #64]	; 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8004f8c:	e02d      	b.n	8004fea <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004fa2:	d004      	beq.n	8004fae <HAL_ADC_Start_DMA+0x12a>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a3d      	ldr	r2, [pc, #244]	; (80050a0 <HAL_ADC_Start_DMA+0x21c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d10a      	bne.n	8004fc4 <HAL_ADC_Start_DMA+0x140>
 8004fae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	bf14      	ite	ne
 8004fbc:	2301      	movne	r3, #1
 8004fbe:	2300      	moveq	r3, #0
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	e008      	b.n	8004fd6 <HAL_ADC_Start_DMA+0x152>
 8004fc4:	4b39      	ldr	r3, [pc, #228]	; (80050ac <HAL_ADC_Start_DMA+0x228>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bf14      	ite	ne
 8004fd0:	2301      	movne	r3, #1
 8004fd2:	2300      	moveq	r3, #0
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d007      	beq.n	8004fea <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004fe2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	641a      	str	r2, [r3, #64]	; 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff6:	d106      	bne.n	8005006 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ffc:	f023 0206 	bic.w	r2, r3, #6
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	645a      	str	r2, [r3, #68]	; 0x44
 8005004:	e002      	b.n	800500c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2200      	movs	r2, #0
 800500a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005018:	4a25      	ldr	r2, [pc, #148]	; (80050b0 <HAL_ADC_Start_DMA+0x22c>)
 800501a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005020:	4a24      	ldr	r2, [pc, #144]	; (80050b4 <HAL_ADC_Start_DMA+0x230>)
 8005022:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	4a23      	ldr	r2, [pc, #140]	; (80050b8 <HAL_ADC_Start_DMA+0x234>)
 800502a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	221c      	movs	r2, #28
 8005032:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0210 	orr.w	r2, r2, #16
 8005042:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	68da      	ldr	r2, [r3, #12]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	3340      	adds	r3, #64	; 0x40
 800505e:	4619      	mov	r1, r3
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f001 fd4b 	bl	8006afe <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	689a      	ldr	r2, [r3, #8]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0204 	orr.w	r2, r2, #4
 8005076:	609a      	str	r2, [r3, #8]
 8005078:	e00d      	b.n	8005096 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005082:	e008      	b.n	8005096 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005090:	e001      	b.n	8005096 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005092:	2302      	movs	r3, #2
 8005094:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005096:	7dfb      	ldrb	r3, [r7, #23]
}
 8005098:	4618      	mov	r0, r3
 800509a:	3718      	adds	r7, #24
 800509c:	46bd      	mov	sp, r7
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	50000100 	.word	0x50000100
 80050a4:	50000300 	.word	0x50000300
 80050a8:	50000700 	.word	0x50000700
 80050ac:	50000400 	.word	0x50000400
 80050b0:	080061e1 	.word	0x080061e1
 80050b4:	0800625b 	.word	0x0800625b
 80050b8:	08006277 	.word	0x08006277

080050bc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b088      	sub	sp, #32
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f003 0304 	and.w	r3, r3, #4
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d004      	beq.n	80050f4 <HAL_ADC_IRQHandler+0x38>
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10b      	bne.n	800510c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 80bc 	beq.w	8005278 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 80b6 	beq.w	8005278 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800512c:	d004      	beq.n	8005138 <HAL_ADC_IRQHandler+0x7c>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a90      	ldr	r2, [pc, #576]	; (8005374 <HAL_ADC_IRQHandler+0x2b8>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d106      	bne.n	8005146 <HAL_ADC_IRQHandler+0x8a>
 8005138:	4b8f      	ldr	r3, [pc, #572]	; (8005378 <HAL_ADC_IRQHandler+0x2bc>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	f003 031f 	and.w	r3, r3, #31
 8005140:	2b00      	cmp	r3, #0
 8005142:	d03e      	beq.n	80051c2 <HAL_ADC_IRQHandler+0x106>
 8005144:	e005      	b.n	8005152 <HAL_ADC_IRQHandler+0x96>
 8005146:	4b8d      	ldr	r3, [pc, #564]	; (800537c <HAL_ADC_IRQHandler+0x2c0>)
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f003 031f 	and.w	r3, r3, #31
 800514e:	2b00      	cmp	r3, #0
 8005150:	d037      	beq.n	80051c2 <HAL_ADC_IRQHandler+0x106>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800515a:	d004      	beq.n	8005166 <HAL_ADC_IRQHandler+0xaa>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a84      	ldr	r2, [pc, #528]	; (8005374 <HAL_ADC_IRQHandler+0x2b8>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d106      	bne.n	8005174 <HAL_ADC_IRQHandler+0xb8>
 8005166:	4b84      	ldr	r3, [pc, #528]	; (8005378 <HAL_ADC_IRQHandler+0x2bc>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 031f 	and.w	r3, r3, #31
 800516e:	2b05      	cmp	r3, #5
 8005170:	d027      	beq.n	80051c2 <HAL_ADC_IRQHandler+0x106>
 8005172:	e005      	b.n	8005180 <HAL_ADC_IRQHandler+0xc4>
 8005174:	4b81      	ldr	r3, [pc, #516]	; (800537c <HAL_ADC_IRQHandler+0x2c0>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	f003 031f 	and.w	r3, r3, #31
 800517c:	2b05      	cmp	r3, #5
 800517e:	d020      	beq.n	80051c2 <HAL_ADC_IRQHandler+0x106>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005188:	d004      	beq.n	8005194 <HAL_ADC_IRQHandler+0xd8>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	4a79      	ldr	r2, [pc, #484]	; (8005374 <HAL_ADC_IRQHandler+0x2b8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d106      	bne.n	80051a2 <HAL_ADC_IRQHandler+0xe6>
 8005194:	4b78      	ldr	r3, [pc, #480]	; (8005378 <HAL_ADC_IRQHandler+0x2bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f003 031f 	and.w	r3, r3, #31
 800519c:	2b09      	cmp	r3, #9
 800519e:	d010      	beq.n	80051c2 <HAL_ADC_IRQHandler+0x106>
 80051a0:	e005      	b.n	80051ae <HAL_ADC_IRQHandler+0xf2>
 80051a2:	4b76      	ldr	r3, [pc, #472]	; (800537c <HAL_ADC_IRQHandler+0x2c0>)
 80051a4:	689b      	ldr	r3, [r3, #8]
 80051a6:	f003 031f 	and.w	r3, r3, #31
 80051aa:	2b09      	cmp	r3, #9
 80051ac:	d009      	beq.n	80051c2 <HAL_ADC_IRQHandler+0x106>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051b6:	d004      	beq.n	80051c2 <HAL_ADC_IRQHandler+0x106>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a70      	ldr	r2, [pc, #448]	; (8005380 <HAL_ADC_IRQHandler+0x2c4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d104      	bne.n	80051cc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	e00f      	b.n	80051ec <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051d4:	d004      	beq.n	80051e0 <HAL_ADC_IRQHandler+0x124>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a66      	ldr	r2, [pc, #408]	; (8005374 <HAL_ADC_IRQHandler+0x2b8>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d102      	bne.n	80051e6 <HAL_ADC_IRQHandler+0x12a>
 80051e0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80051e4:	e000      	b.n	80051e8 <HAL_ADC_IRQHandler+0x12c>
 80051e6:	4b66      	ldr	r3, [pc, #408]	; (8005380 <HAL_ADC_IRQHandler+0x2c4>)
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d137      	bne.n	800526a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8005200:	2b00      	cmp	r3, #0
 8005202:	d132      	bne.n	800526a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	f003 0308 	and.w	r3, r3, #8
 800520a:	2b00      	cmp	r3, #0
 800520c:	d02d      	beq.n	800526a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d11a      	bne.n	8005252 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f022 020c 	bic.w	r2, r2, #12
 800522a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d112      	bne.n	800526a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	f043 0201 	orr.w	r2, r3, #1
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	641a      	str	r2, [r3, #64]	; 0x40
 8005250:	e00b      	b.n	800526a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	f043 0210 	orr.w	r2, r3, #16
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	f043 0201 	orr.w	r2, r3, #1
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fac2 	bl	80047f4 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	220c      	movs	r2, #12
 8005276:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f003 0320 	and.w	r3, r3, #32
 800527e:	2b00      	cmp	r3, #0
 8005280:	d004      	beq.n	800528c <HAL_ADC_IRQHandler+0x1d0>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 0320 	and.w	r3, r3, #32
 8005288:	2b00      	cmp	r3, #0
 800528a:	d10b      	bne.n	80052a4 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8005292:	2b00      	cmp	r3, #0
 8005294:	f000 8138 	beq.w	8005508 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8132 	beq.w	8005508 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052b8:	d004      	beq.n	80052c4 <HAL_ADC_IRQHandler+0x208>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a2d      	ldr	r2, [pc, #180]	; (8005374 <HAL_ADC_IRQHandler+0x2b8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d106      	bne.n	80052d2 <HAL_ADC_IRQHandler+0x216>
 80052c4:	4b2c      	ldr	r3, [pc, #176]	; (8005378 <HAL_ADC_IRQHandler+0x2bc>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d03e      	beq.n	800534e <HAL_ADC_IRQHandler+0x292>
 80052d0:	e005      	b.n	80052de <HAL_ADC_IRQHandler+0x222>
 80052d2:	4b2a      	ldr	r3, [pc, #168]	; (800537c <HAL_ADC_IRQHandler+0x2c0>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 031f 	and.w	r3, r3, #31
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d037      	beq.n	800534e <HAL_ADC_IRQHandler+0x292>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80052e6:	d004      	beq.n	80052f2 <HAL_ADC_IRQHandler+0x236>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a21      	ldr	r2, [pc, #132]	; (8005374 <HAL_ADC_IRQHandler+0x2b8>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d106      	bne.n	8005300 <HAL_ADC_IRQHandler+0x244>
 80052f2:	4b21      	ldr	r3, [pc, #132]	; (8005378 <HAL_ADC_IRQHandler+0x2bc>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 031f 	and.w	r3, r3, #31
 80052fa:	2b05      	cmp	r3, #5
 80052fc:	d027      	beq.n	800534e <HAL_ADC_IRQHandler+0x292>
 80052fe:	e005      	b.n	800530c <HAL_ADC_IRQHandler+0x250>
 8005300:	4b1e      	ldr	r3, [pc, #120]	; (800537c <HAL_ADC_IRQHandler+0x2c0>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	2b05      	cmp	r3, #5
 800530a:	d020      	beq.n	800534e <HAL_ADC_IRQHandler+0x292>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005314:	d004      	beq.n	8005320 <HAL_ADC_IRQHandler+0x264>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a16      	ldr	r2, [pc, #88]	; (8005374 <HAL_ADC_IRQHandler+0x2b8>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d106      	bne.n	800532e <HAL_ADC_IRQHandler+0x272>
 8005320:	4b15      	ldr	r3, [pc, #84]	; (8005378 <HAL_ADC_IRQHandler+0x2bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 031f 	and.w	r3, r3, #31
 8005328:	2b09      	cmp	r3, #9
 800532a:	d010      	beq.n	800534e <HAL_ADC_IRQHandler+0x292>
 800532c:	e005      	b.n	800533a <HAL_ADC_IRQHandler+0x27e>
 800532e:	4b13      	ldr	r3, [pc, #76]	; (800537c <HAL_ADC_IRQHandler+0x2c0>)
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	f003 031f 	and.w	r3, r3, #31
 8005336:	2b09      	cmp	r3, #9
 8005338:	d009      	beq.n	800534e <HAL_ADC_IRQHandler+0x292>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005342:	d004      	beq.n	800534e <HAL_ADC_IRQHandler+0x292>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a0d      	ldr	r2, [pc, #52]	; (8005380 <HAL_ADC_IRQHandler+0x2c4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d104      	bne.n	8005358 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	61bb      	str	r3, [r7, #24]
 8005356:	e018      	b.n	800538a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005360:	d004      	beq.n	800536c <HAL_ADC_IRQHandler+0x2b0>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a03      	ldr	r2, [pc, #12]	; (8005374 <HAL_ADC_IRQHandler+0x2b8>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d10b      	bne.n	8005384 <HAL_ADC_IRQHandler+0x2c8>
 800536c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005370:	e009      	b.n	8005386 <HAL_ADC_IRQHandler+0x2ca>
 8005372:	bf00      	nop
 8005374:	50000100 	.word	0x50000100
 8005378:	50000300 	.word	0x50000300
 800537c:	50000700 	.word	0x50000700
 8005380:	50000400 	.word	0x50000400
 8005384:	4b92      	ldr	r3, [pc, #584]	; (80055d0 <HAL_ADC_IRQHandler+0x514>)
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005390:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005394:	2b00      	cmp	r3, #0
 8005396:	f040 80b0 	bne.w	80054fa <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00d      	beq.n	80053c0 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	f040 80a3 	bne.w	80054fa <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80053b4:	69bb      	ldr	r3, [r7, #24]
 80053b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f040 809d 	bne.w	80054fa <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f000 8097 	beq.w	80054fa <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80053d4:	d004      	beq.n	80053e0 <HAL_ADC_IRQHandler+0x324>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4a7e      	ldr	r2, [pc, #504]	; (80055d4 <HAL_ADC_IRQHandler+0x518>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d106      	bne.n	80053ee <HAL_ADC_IRQHandler+0x332>
 80053e0:	4b7d      	ldr	r3, [pc, #500]	; (80055d8 <HAL_ADC_IRQHandler+0x51c>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	f003 031f 	and.w	r3, r3, #31
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d03e      	beq.n	800546a <HAL_ADC_IRQHandler+0x3ae>
 80053ec:	e005      	b.n	80053fa <HAL_ADC_IRQHandler+0x33e>
 80053ee:	4b7b      	ldr	r3, [pc, #492]	; (80055dc <HAL_ADC_IRQHandler+0x520>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 031f 	and.w	r3, r3, #31
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d037      	beq.n	800546a <HAL_ADC_IRQHandler+0x3ae>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005402:	d004      	beq.n	800540e <HAL_ADC_IRQHandler+0x352>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a72      	ldr	r2, [pc, #456]	; (80055d4 <HAL_ADC_IRQHandler+0x518>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d106      	bne.n	800541c <HAL_ADC_IRQHandler+0x360>
 800540e:	4b72      	ldr	r3, [pc, #456]	; (80055d8 <HAL_ADC_IRQHandler+0x51c>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 031f 	and.w	r3, r3, #31
 8005416:	2b06      	cmp	r3, #6
 8005418:	d027      	beq.n	800546a <HAL_ADC_IRQHandler+0x3ae>
 800541a:	e005      	b.n	8005428 <HAL_ADC_IRQHandler+0x36c>
 800541c:	4b6f      	ldr	r3, [pc, #444]	; (80055dc <HAL_ADC_IRQHandler+0x520>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 031f 	and.w	r3, r3, #31
 8005424:	2b06      	cmp	r3, #6
 8005426:	d020      	beq.n	800546a <HAL_ADC_IRQHandler+0x3ae>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005430:	d004      	beq.n	800543c <HAL_ADC_IRQHandler+0x380>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a67      	ldr	r2, [pc, #412]	; (80055d4 <HAL_ADC_IRQHandler+0x518>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d106      	bne.n	800544a <HAL_ADC_IRQHandler+0x38e>
 800543c:	4b66      	ldr	r3, [pc, #408]	; (80055d8 <HAL_ADC_IRQHandler+0x51c>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 031f 	and.w	r3, r3, #31
 8005444:	2b07      	cmp	r3, #7
 8005446:	d010      	beq.n	800546a <HAL_ADC_IRQHandler+0x3ae>
 8005448:	e005      	b.n	8005456 <HAL_ADC_IRQHandler+0x39a>
 800544a:	4b64      	ldr	r3, [pc, #400]	; (80055dc <HAL_ADC_IRQHandler+0x520>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f003 031f 	and.w	r3, r3, #31
 8005452:	2b07      	cmp	r3, #7
 8005454:	d009      	beq.n	800546a <HAL_ADC_IRQHandler+0x3ae>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800545e:	d004      	beq.n	800546a <HAL_ADC_IRQHandler+0x3ae>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a5a      	ldr	r2, [pc, #360]	; (80055d0 <HAL_ADC_IRQHandler+0x514>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d104      	bne.n	8005474 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	e00f      	b.n	8005494 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800547c:	d004      	beq.n	8005488 <HAL_ADC_IRQHandler+0x3cc>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a54      	ldr	r2, [pc, #336]	; (80055d4 <HAL_ADC_IRQHandler+0x518>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d102      	bne.n	800548e <HAL_ADC_IRQHandler+0x3d2>
 8005488:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800548c:	e000      	b.n	8005490 <HAL_ADC_IRQHandler+0x3d4>
 800548e:	4b50      	ldr	r3, [pc, #320]	; (80055d0 <HAL_ADC_IRQHandler+0x514>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d12d      	bne.n	80054fa <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d11a      	bne.n	80054e2 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80054ba:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d112      	bne.n	80054fa <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	f043 0201 	orr.w	r2, r3, #1
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	641a      	str	r2, [r3, #64]	; 0x40
 80054e0:	e00b      	b.n	80054fa <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e6:	f043 0210 	orr.w	r2, r3, #16
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f2:	f043 0201 	orr.w	r2, r3, #1
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7fc fa08 	bl	8001910 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2260      	movs	r2, #96	; 0x60
 8005506:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800550e:	2b00      	cmp	r3, #0
 8005510:	d011      	beq.n	8005536 <HAL_ADC_IRQHandler+0x47a>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005518:	2b00      	cmp	r3, #0
 800551a:	d00c      	beq.n	8005536 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005520:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7ff f977 	bl	800481c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	2280      	movs	r2, #128	; 0x80
 8005534:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800553c:	2b00      	cmp	r3, #0
 800553e:	d012      	beq.n	8005566 <HAL_ADC_IRQHandler+0x4aa>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005546:	2b00      	cmp	r3, #0
 8005548:	d00d      	beq.n	8005566 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800554e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fa51 	bl	80059fe <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005564:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556c:	2b00      	cmp	r3, #0
 800556e:	d012      	beq.n	8005596 <HAL_ADC_IRQHandler+0x4da>
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00d      	beq.n	8005596 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa43 	bl	8005a12 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005594:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f003 0310 	and.w	r3, r3, #16
 800559c:	2b00      	cmp	r3, #0
 800559e:	d04f      	beq.n	8005640 <HAL_ADC_IRQHandler+0x584>
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d04a      	beq.n	8005640 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ae:	2b01      	cmp	r3, #1
 80055b0:	d102      	bne.n	80055b8 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80055b2:	2301      	movs	r3, #1
 80055b4:	61fb      	str	r3, [r7, #28]
 80055b6:	e02d      	b.n	8005614 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80055c0:	d004      	beq.n	80055cc <HAL_ADC_IRQHandler+0x510>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a03      	ldr	r2, [pc, #12]	; (80055d4 <HAL_ADC_IRQHandler+0x518>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d109      	bne.n	80055e0 <HAL_ADC_IRQHandler+0x524>
 80055cc:	4b02      	ldr	r3, [pc, #8]	; (80055d8 <HAL_ADC_IRQHandler+0x51c>)
 80055ce:	e008      	b.n	80055e2 <HAL_ADC_IRQHandler+0x526>
 80055d0:	50000400 	.word	0x50000400
 80055d4:	50000100 	.word	0x50000100
 80055d8:	50000300 	.word	0x50000300
 80055dc:	50000700 	.word	0x50000700
 80055e0:	4b28      	ldr	r3, [pc, #160]	; (8005684 <HAL_ADC_IRQHandler+0x5c8>)
 80055e2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d109      	bne.n	8005604 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d10a      	bne.n	8005614 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 80055fe:	2301      	movs	r3, #1
 8005600:	61fb      	str	r3, [r7, #28]
 8005602:	e007      	b.n	8005614 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d001      	beq.n	8005614 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8005610:	2301      	movs	r3, #1
 8005612:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d10e      	bne.n	8005638 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800562a:	f043 0202 	orr.w	r2, r3, #2
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f7ff f8fc 	bl	8004830 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2210      	movs	r2, #16
 800563e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005646:	2b00      	cmp	r3, #0
 8005648:	d018      	beq.n	800567c <HAL_ADC_IRQHandler+0x5c0>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005650:	2b00      	cmp	r3, #0
 8005652:	d013      	beq.n	800567c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005658:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005664:	f043 0208 	orr.w	r2, r3, #8
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005674:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f9b7 	bl	80059ea <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800567c:	bf00      	nop
 800567e:	3720      	adds	r7, #32
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	50000700 	.word	0x50000700

08005688 <HAL_ADCEx_Calibration_Start>:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  *            @arg ADC_DIFFERENTIAL_ENDED: Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b084      	sub	sp, #16
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005692:	2300      	movs	r3, #0
 8005694:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800569c:	2b01      	cmp	r3, #1
 800569e:	d101      	bne.n	80056a4 <HAL_ADCEx_Calibration_Start+0x1c>
 80056a0:	2302      	movs	r3, #2
 80056a2:	e05f      	b.n	8005764 <HAL_ADCEx_Calibration_Start+0xdc>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
   
  /* Calibration prerequisite: ADC must be disabled. */
   
  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f000 fe61 	bl	8006374 <ADC_Disable>
 80056b2:	4603      	mov	r3, r0
 80056b4:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d14e      	bne.n	800575a <HAL_ADCEx_Calibration_Start+0xd2>
  {
    /* Change ADC state */
    hadc->State = HAL_ADC_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Select calibration mode single ended or differential ended */
    hadc->Instance->CR &= (~ADC_CR_ADCALDIF);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80056d0:	609a      	str	r2, [r3, #8]
    if (SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d107      	bne.n	80056e8 <HAL_ADCEx_Calibration_Start+0x60>
    {
      hadc->Instance->CR |= ADC_CR_ADCALDIF;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80056e6:	609a      	str	r2, [r3, #8]
    }

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689a      	ldr	r2, [r3, #8]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80056f6:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 80056f8:	f7ff f84c 	bl	8004794 <HAL_GetTick>
 80056fc:	60b8      	str	r0, [r7, #8]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80056fe:	e01c      	b.n	800573a <HAL_ADCEx_Calibration_Start+0xb2>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8005700:	f7ff f848 	bl	8004794 <HAL_GetTick>
 8005704:	4602      	mov	r2, r0
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	1ad3      	subs	r3, r2, r3
 800570a:	2b0a      	cmp	r3, #10
 800570c:	d915      	bls.n	800573a <HAL_ADCEx_Calibration_Start+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005718:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800571c:	d10d      	bne.n	800573a <HAL_ADCEx_Calibration_Start+0xb2>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	f023 0312 	bic.w	r3, r3, #18
 8005726:	f043 0210 	orr.w	r2, r3, #16
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e014      	b.n	8005764 <HAL_ADCEx_Calibration_Start+0xdc>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005744:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005748:	d0da      	beq.n	8005700 <HAL_ADCEx_Calibration_Start+0x78>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	f023 0303 	bic.w	r3, r3, #3
 8005752:	f043 0201 	orr.w	r2, r3, #1
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005762:	7bfb      	ldrb	r3, [r7, #15]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_ADCEx_InjectedStart_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	f040 80ee 	bne.w	8005964 <HAL_ADCEx_InjectedStart_IT+0x1f8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800578e:	2b01      	cmp	r3, #1
 8005790:	d101      	bne.n	8005796 <HAL_ADCEx_InjectedStart_IT+0x2a>
 8005792:	2302      	movs	r3, #2
 8005794:	e0e9      	b.n	800596a <HAL_ADCEx_InjectedStart_IT+0x1fe>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f000 fd84 	bl	80062ac <ADC_Enable>
 80057a4:	4603      	mov	r3, r0
 80057a6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
      /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	f040 80d5 	bne.w	800595a <HAL_ADCEx_InjectedStart_IT+0x1ee>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to injected group conversion results  */
      /* - Set state bitfield related to injected operation                   */
      ADC_STATE_CLR_SET(hadc->State,
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80057b8:	f023 0301 	bic.w	r3, r3, #1
 80057bc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
                        HAL_ADC_STATE_INJ_BUSY);
      
      /* Case of independent mode or multimode(for devices with several ADCs):*/
      /* Set multimode state.                                                 */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057cc:	d004      	beq.n	80057d8 <HAL_ADCEx_InjectedStart_IT+0x6c>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a68      	ldr	r2, [pc, #416]	; (8005974 <HAL_ADCEx_InjectedStart_IT+0x208>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d106      	bne.n	80057e6 <HAL_ADCEx_InjectedStart_IT+0x7a>
 80057d8:	4b67      	ldr	r3, [pc, #412]	; (8005978 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 031f 	and.w	r3, r3, #31
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d010      	beq.n	8005806 <HAL_ADCEx_InjectedStart_IT+0x9a>
 80057e4:	e005      	b.n	80057f2 <HAL_ADCEx_InjectedStart_IT+0x86>
 80057e6:	4b65      	ldr	r3, [pc, #404]	; (800597c <HAL_ADCEx_InjectedStart_IT+0x210>)
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f003 031f 	and.w	r3, r3, #31
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d009      	beq.n	8005806 <HAL_ADCEx_InjectedStart_IT+0x9a>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80057fa:	d004      	beq.n	8005806 <HAL_ADCEx_InjectedStart_IT+0x9a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a5f      	ldr	r2, [pc, #380]	; (8005980 <HAL_ADCEx_InjectedStart_IT+0x214>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d106      	bne.n	8005814 <HAL_ADCEx_InjectedStart_IT+0xa8>
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800580a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	641a      	str	r2, [r3, #64]	; 0x40
 8005812:	e005      	b.n	8005820 <HAL_ADCEx_InjectedStart_IT+0xb4>
      }
      else
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005818:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Check if a regular conversion is ongoing */
      /* Note: On this device, there is no ADC error code fields related to   */
      /*       conversions on group injected only. In case of conversion on   */
      /*       going on group regular, no error code is reset.                */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	2b00      	cmp	r3, #0
 800582a:	d102      	bne.n	8005832 <HAL_ADCEx_InjectedStart_IT+0xc6>
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear injected group conversion flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2260      	movs	r2, #96	; 0x60
 8005840:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC Injected context queue overflow interrupt if this feature */
      /* is enabled.                                                          */
      if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != RESET)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d007      	beq.n	8005860 <HAL_ADCEx_InjectedStart_IT+0xf4>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800585e:	605a      	str	r2, [r3, #4]
      }
      
      /* Enable ADC end of conversion interrupt */
      switch(hadc->Init.EOCSelection)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	2b08      	cmp	r3, #8
 8005866:	d110      	bne.n	800588a <HAL_ADCEx_InjectedStart_IT+0x11e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0220 	bic.w	r2, r2, #32
 8005876:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005886:	605a      	str	r2, [r3, #4]
          break;
 8005888:	e008      	b.n	800589c <HAL_ADCEx_InjectedStart_IT+0x130>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	685a      	ldr	r2, [r3, #4]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8005898:	605a      	str	r2, [r3, #4]
          break;
 800589a:	bf00      	nop
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d15e      	bne.n	8005968 <HAL_ADCEx_InjectedStart_IT+0x1fc>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80058ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058b2:	d004      	beq.n	80058be <HAL_ADCEx_InjectedStart_IT+0x152>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a2e      	ldr	r2, [pc, #184]	; (8005974 <HAL_ADCEx_InjectedStart_IT+0x208>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d106      	bne.n	80058cc <HAL_ADCEx_InjectedStart_IT+0x160>
 80058be:	4b2e      	ldr	r3, [pc, #184]	; (8005978 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 80058c0:	689b      	ldr	r3, [r3, #8]
 80058c2:	f003 031f 	and.w	r3, r3, #31
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d03e      	beq.n	8005948 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 80058ca:	e005      	b.n	80058d8 <HAL_ADCEx_InjectedStart_IT+0x16c>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80058cc:	4b2b      	ldr	r3, [pc, #172]	; (800597c <HAL_ADCEx_InjectedStart_IT+0x210>)
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	f003 031f 	and.w	r3, r3, #31
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d037      	beq.n	8005948 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 80058dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80058e0:	d004      	beq.n	80058ec <HAL_ADCEx_InjectedStart_IT+0x180>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a23      	ldr	r2, [pc, #140]	; (8005974 <HAL_ADCEx_InjectedStart_IT+0x208>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d106      	bne.n	80058fa <HAL_ADCEx_InjectedStart_IT+0x18e>
 80058ec:	4b22      	ldr	r3, [pc, #136]	; (8005978 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	2b06      	cmp	r3, #6
 80058f6:	d027      	beq.n	8005948 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 80058f8:	e005      	b.n	8005906 <HAL_ADCEx_InjectedStart_IT+0x19a>
 80058fa:	4b20      	ldr	r3, [pc, #128]	; (800597c <HAL_ADCEx_InjectedStart_IT+0x210>)
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f003 031f 	and.w	r3, r3, #31
 8005902:	2b06      	cmp	r3, #6
 8005904:	d020      	beq.n	8005948 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
      if (HAL_IS_BIT_CLR(hadc->Instance->CFGR, ADC_CFGR_JAUTO) && 
 800590a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800590e:	d004      	beq.n	800591a <HAL_ADCEx_InjectedStart_IT+0x1ae>
          ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc)          )
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a17      	ldr	r2, [pc, #92]	; (8005974 <HAL_ADCEx_InjectedStart_IT+0x208>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d106      	bne.n	8005928 <HAL_ADCEx_InjectedStart_IT+0x1bc>
 800591a:	4b17      	ldr	r3, [pc, #92]	; (8005978 <HAL_ADCEx_InjectedStart_IT+0x20c>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 031f 	and.w	r3, r3, #31
 8005922:	2b07      	cmp	r3, #7
 8005924:	d010      	beq.n	8005948 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005926:	e005      	b.n	8005934 <HAL_ADCEx_InjectedStart_IT+0x1c8>
 8005928:	4b14      	ldr	r3, [pc, #80]	; (800597c <HAL_ADCEx_InjectedStart_IT+0x210>)
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f003 031f 	and.w	r3, r3, #31
 8005930:	2b07      	cmp	r3, #7
 8005932:	d009      	beq.n	8005948 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800593c:	d004      	beq.n	8005948 <HAL_ADCEx_InjectedStart_IT+0x1dc>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a0f      	ldr	r2, [pc, #60]	; (8005980 <HAL_ADCEx_InjectedStart_IT+0x214>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d10f      	bne.n	8005968 <HAL_ADCEx_InjectedStart_IT+0x1fc>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_JADSTART);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	689a      	ldr	r2, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f042 0208 	orr.w	r2, r2, #8
 8005956:	609a      	str	r2, [r3, #8]
 8005958:	e006      	b.n	8005968 <HAL_ADCEx_InjectedStart_IT+0x1fc>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005962:	e001      	b.n	8005968 <HAL_ADCEx_InjectedStart_IT+0x1fc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005964:	2302      	movs	r3, #2
 8005966:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005968:	7bfb      	ldrb	r3, [r7, #15]
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	bf00      	nop
 8005974:	50000100 	.word	0x50000100
 8005978:	50000300 	.word	0x50000300
 800597c:	50000700 	.word	0x50000700
 8005980:	50000400 	.word	0x50000400

08005984 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval ADC group injected conversion data
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8005984:	b480      	push	{r7}
 8005986:	b085      	sub	sp, #20
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
 800598c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_jdr = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	60fb      	str	r3, [r7, #12]
  
  /* Note: ADC flag JEOC is not cleared here by software because              */
  /*       automatically cleared by hardware when reading register JDRx.      */
  
  /* Get ADC converted value */ 
  switch(InjectedRank)
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b04      	cmp	r3, #4
 8005996:	d009      	beq.n	80059ac <HAL_ADCEx_InjectedGetValue+0x28>
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	2b04      	cmp	r3, #4
 800599c:	d818      	bhi.n	80059d0 <HAL_ADCEx_InjectedGetValue+0x4c>
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d00f      	beq.n	80059c4 <HAL_ADCEx_InjectedGetValue+0x40>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d006      	beq.n	80059b8 <HAL_ADCEx_InjectedGetValue+0x34>
 80059aa:	e011      	b.n	80059d0 <HAL_ADCEx_InjectedGetValue+0x4c>
  {  
    case ADC_INJECTED_RANK_4: 
      tmp_jdr = hadc->Instance->JDR4;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059b4:	60fb      	str	r3, [r7, #12]
      break;
 80059b6:	e011      	b.n	80059dc <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_3: 
      tmp_jdr = hadc->Instance->JDR3;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	60fb      	str	r3, [r7, #12]
      break;
 80059c2:	e00b      	b.n	80059dc <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_2: 
      tmp_jdr = hadc->Instance->JDR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059cc:	60fb      	str	r3, [r7, #12]
      break;
 80059ce:	e005      	b.n	80059dc <HAL_ADCEx_InjectedGetValue+0x58>
    case ADC_INJECTED_RANK_1:
    default:
      tmp_jdr = hadc->Instance->JDR1;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059d8:	60fb      	str	r3, [r7, #12]
      break;
 80059da:	bf00      	nop
  }
  
  /* Return ADC converted value */ 
  return tmp_jdr;
 80059dc:	68fb      	ldr	r3, [r7, #12]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr

080059fe <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80059fe:	b480      	push	{r7}
 8005a00:	b083      	sub	sp, #12
 8005a02:	af00      	add	r7, sp, #0
 8005a04:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8005a06:	bf00      	nop
 8005a08:	370c      	adds	r7, #12
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b083      	sub	sp, #12
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8005a1a:	bf00      	nop
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr
	...

08005a28 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b09b      	sub	sp, #108	; 0x6c
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_ADC_ConfigChannel+0x22>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e2c8      	b.n	8005fdc <HAL_ADC_ConfigChannel+0x5b4>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	f040 82ac 	bne.w	8005fba <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	685b      	ldr	r3, [r3, #4]
 8005a66:	2b04      	cmp	r3, #4
 8005a68:	d81c      	bhi.n	8005aa4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	685a      	ldr	r2, [r3, #4]
 8005a74:	4613      	mov	r3, r2
 8005a76:	005b      	lsls	r3, r3, #1
 8005a78:	4413      	add	r3, r2
 8005a7a:	005b      	lsls	r3, r3, #1
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	231f      	movs	r3, #31
 8005a80:	4093      	lsls	r3, r2
 8005a82:	43db      	mvns	r3, r3
 8005a84:	4019      	ands	r1, r3
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	6818      	ldr	r0, [r3, #0]
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685a      	ldr	r2, [r3, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	005b      	lsls	r3, r3, #1
 8005a92:	4413      	add	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	fa00 f203 	lsl.w	r2, r0, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8005aa2:	e063      	b.n	8005b6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	2b09      	cmp	r3, #9
 8005aaa:	d81e      	bhi.n	8005aea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	685a      	ldr	r2, [r3, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	005b      	lsls	r3, r3, #1
 8005abe:	3b1e      	subs	r3, #30
 8005ac0:	221f      	movs	r2, #31
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	4019      	ands	r1, r3
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	6818      	ldr	r0, [r3, #0]
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	685a      	ldr	r2, [r3, #4]
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	005b      	lsls	r3, r3, #1
 8005ad6:	4413      	add	r3, r2
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	3b1e      	subs	r3, #30
 8005adc:	fa00 f203 	lsl.w	r2, r0, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	635a      	str	r2, [r3, #52]	; 0x34
 8005ae8:	e040      	b.n	8005b6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b0e      	cmp	r3, #14
 8005af0:	d81e      	bhi.n	8005b30 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	685a      	ldr	r2, [r3, #4]
 8005afc:	4613      	mov	r3, r2
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	4413      	add	r3, r2
 8005b02:	005b      	lsls	r3, r3, #1
 8005b04:	3b3c      	subs	r3, #60	; 0x3c
 8005b06:	221f      	movs	r2, #31
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	43db      	mvns	r3, r3
 8005b0e:	4019      	ands	r1, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4413      	add	r3, r2
 8005b1e:	005b      	lsls	r3, r3, #1
 8005b20:	3b3c      	subs	r3, #60	; 0x3c
 8005b22:	fa00 f203 	lsl.w	r2, r0, r3
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	430a      	orrs	r2, r1
 8005b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8005b2e:	e01d      	b.n	8005b6c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	4413      	add	r3, r2
 8005b40:	005b      	lsls	r3, r3, #1
 8005b42:	3b5a      	subs	r3, #90	; 0x5a
 8005b44:	221f      	movs	r2, #31
 8005b46:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4a:	43db      	mvns	r3, r3
 8005b4c:	4019      	ands	r1, r3
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	6818      	ldr	r0, [r3, #0]
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	4613      	mov	r3, r2
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	4413      	add	r3, r2
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	3b5a      	subs	r3, #90	; 0x5a
 8005b60:	fa00 f203 	lsl.w	r2, r0, r3
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	430a      	orrs	r2, r1
 8005b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 030c 	and.w	r3, r3, #12
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f040 80e5 	bne.w	8005d46 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b09      	cmp	r3, #9
 8005b82:	d91c      	bls.n	8005bbe <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6999      	ldr	r1, [r3, #24]
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	4613      	mov	r3, r2
 8005b90:	005b      	lsls	r3, r3, #1
 8005b92:	4413      	add	r3, r2
 8005b94:	3b1e      	subs	r3, #30
 8005b96:	2207      	movs	r2, #7
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	4019      	ands	r1, r3
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	6898      	ldr	r0, [r3, #8]
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	4613      	mov	r3, r2
 8005baa:	005b      	lsls	r3, r3, #1
 8005bac:	4413      	add	r3, r2
 8005bae:	3b1e      	subs	r3, #30
 8005bb0:	fa00 f203 	lsl.w	r2, r0, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	430a      	orrs	r2, r1
 8005bba:	619a      	str	r2, [r3, #24]
 8005bbc:	e019      	b.n	8005bf2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6959      	ldr	r1, [r3, #20]
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	005b      	lsls	r3, r3, #1
 8005bcc:	4413      	add	r3, r2
 8005bce:	2207      	movs	r2, #7
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	43db      	mvns	r3, r3
 8005bd6:	4019      	ands	r1, r3
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	6898      	ldr	r0, [r3, #8]
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	4613      	mov	r3, r2
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	4413      	add	r3, r2
 8005be6:	fa00 f203 	lsl.w	r2, r0, r3
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	08db      	lsrs	r3, r3, #3
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	005b      	lsls	r3, r3, #1
 8005c04:	fa02 f303 	lsl.w	r3, r2, r3
 8005c08:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	2b03      	cmp	r3, #3
 8005c12:	d84f      	bhi.n	8005cb4 <HAL_ADC_ConfigChannel+0x28c>
 8005c14:	a201      	add	r2, pc, #4	; (adr r2, 8005c1c <HAL_ADC_ConfigChannel+0x1f4>)
 8005c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1a:	bf00      	nop
 8005c1c:	08005c2d 	.word	0x08005c2d
 8005c20:	08005c4f 	.word	0x08005c4f
 8005c24:	08005c71 	.word	0x08005c71
 8005c28:	08005c93 	.word	0x08005c93
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005c32:	4b99      	ldr	r3, [pc, #612]	; (8005e98 <HAL_ADC_ConfigChannel+0x470>)
 8005c34:	4013      	ands	r3, r2
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	6812      	ldr	r2, [r2, #0]
 8005c3a:	0691      	lsls	r1, r2, #26
 8005c3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c3e:	430a      	orrs	r2, r1
 8005c40:	431a      	orrs	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005c4a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005c4c:	e07b      	b.n	8005d46 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c54:	4b90      	ldr	r3, [pc, #576]	; (8005e98 <HAL_ADC_ConfigChannel+0x470>)
 8005c56:	4013      	ands	r3, r2
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	6812      	ldr	r2, [r2, #0]
 8005c5c:	0691      	lsls	r1, r2, #26
 8005c5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c60:	430a      	orrs	r2, r1
 8005c62:	431a      	orrs	r2, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005c6c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005c6e:	e06a      	b.n	8005d46 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005c76:	4b88      	ldr	r3, [pc, #544]	; (8005e98 <HAL_ADC_ConfigChannel+0x470>)
 8005c78:	4013      	ands	r3, r2
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	6812      	ldr	r2, [r2, #0]
 8005c7e:	0691      	lsls	r1, r2, #26
 8005c80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c82:	430a      	orrs	r2, r1
 8005c84:	431a      	orrs	r2, r3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005c8e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005c90:	e059      	b.n	8005d46 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005c98:	4b7f      	ldr	r3, [pc, #508]	; (8005e98 <HAL_ADC_ConfigChannel+0x470>)
 8005c9a:	4013      	ands	r3, r2
 8005c9c:	683a      	ldr	r2, [r7, #0]
 8005c9e:	6812      	ldr	r2, [r2, #0]
 8005ca0:	0691      	lsls	r1, r2, #26
 8005ca2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	431a      	orrs	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8005cb0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8005cb2:	e048      	b.n	8005d46 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	069b      	lsls	r3, r3, #26
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d107      	bne.n	8005cd8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005cd6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cde:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	069b      	lsls	r3, r3, #26
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d107      	bne.n	8005cfc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005cfa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	069b      	lsls	r3, r3, #26
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d107      	bne.n	8005d20 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d1e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	069b      	lsls	r3, r3, #26
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d107      	bne.n	8005d44 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005d42:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8005d44:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d108      	bne.n	8005d66 <HAL_ADC_ConfigChannel+0x33e>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	2b01      	cmp	r3, #1
 8005d60:	d101      	bne.n	8005d66 <HAL_ADC_ConfigChannel+0x33e>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <HAL_ADC_ConfigChannel+0x340>
 8005d66:	2300      	movs	r3, #0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	f040 8131 	bne.w	8005fd0 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d00f      	beq.n	8005d96 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2201      	movs	r2, #1
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	43da      	mvns	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	400a      	ands	r2, r1
 8005d90:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8005d94:	e049      	b.n	8005e2a <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2201      	movs	r2, #1
 8005da4:	409a      	lsls	r2, r3
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	2b09      	cmp	r3, #9
 8005db6:	d91c      	bls.n	8005df2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6999      	ldr	r1, [r3, #24]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	4413      	add	r3, r2
 8005dc8:	3b1b      	subs	r3, #27
 8005dca:	2207      	movs	r2, #7
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	43db      	mvns	r3, r3
 8005dd2:	4019      	ands	r1, r3
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	6898      	ldr	r0, [r3, #8]
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	4413      	add	r3, r2
 8005de2:	3b1b      	subs	r3, #27
 8005de4:	fa00 f203 	lsl.w	r2, r0, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	430a      	orrs	r2, r1
 8005dee:	619a      	str	r2, [r3, #24]
 8005df0:	e01b      	b.n	8005e2a <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	6959      	ldr	r1, [r3, #20]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	4613      	mov	r3, r2
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	4413      	add	r3, r2
 8005e04:	2207      	movs	r2, #7
 8005e06:	fa02 f303 	lsl.w	r3, r2, r3
 8005e0a:	43db      	mvns	r3, r3
 8005e0c:	4019      	ands	r1, r3
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	6898      	ldr	r0, [r3, #8]
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	4613      	mov	r3, r2
 8005e1a:	005b      	lsls	r3, r3, #1
 8005e1c:	4413      	add	r3, r2
 8005e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	430a      	orrs	r2, r1
 8005e28:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e32:	d004      	beq.n	8005e3e <HAL_ADC_ConfigChannel+0x416>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a18      	ldr	r2, [pc, #96]	; (8005e9c <HAL_ADC_ConfigChannel+0x474>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d101      	bne.n	8005e42 <HAL_ADC_ConfigChannel+0x41a>
 8005e3e:	4b18      	ldr	r3, [pc, #96]	; (8005ea0 <HAL_ADC_ConfigChannel+0x478>)
 8005e40:	e000      	b.n	8005e44 <HAL_ADC_ConfigChannel+0x41c>
 8005e42:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <HAL_ADC_ConfigChannel+0x47c>)
 8005e44:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b10      	cmp	r3, #16
 8005e4c:	d105      	bne.n	8005e5a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005e4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d015      	beq.n	8005e86 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8005e5e:	2b11      	cmp	r3, #17
 8005e60:	d105      	bne.n	8005e6e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8005e72:	2b12      	cmp	r3, #18
 8005e74:	f040 80ac 	bne.w	8005fd0 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8005e78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e7a:	689b      	ldr	r3, [r3, #8]
 8005e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f040 80a5 	bne.w	8005fd0 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005e8e:	d10b      	bne.n	8005ea8 <HAL_ADC_ConfigChannel+0x480>
 8005e90:	4b02      	ldr	r3, [pc, #8]	; (8005e9c <HAL_ADC_ConfigChannel+0x474>)
 8005e92:	60fb      	str	r3, [r7, #12]
 8005e94:	e023      	b.n	8005ede <HAL_ADC_ConfigChannel+0x4b6>
 8005e96:	bf00      	nop
 8005e98:	83fff000 	.word	0x83fff000
 8005e9c:	50000100 	.word	0x50000100
 8005ea0:	50000300 	.word	0x50000300
 8005ea4:	50000700 	.word	0x50000700
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a4e      	ldr	r2, [pc, #312]	; (8005fe8 <HAL_ADC_ConfigChannel+0x5c0>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d103      	bne.n	8005eba <HAL_ADC_ConfigChannel+0x492>
 8005eb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005eb6:	60fb      	str	r3, [r7, #12]
 8005eb8:	e011      	b.n	8005ede <HAL_ADC_ConfigChannel+0x4b6>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	4a4b      	ldr	r2, [pc, #300]	; (8005fec <HAL_ADC_ConfigChannel+0x5c4>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d102      	bne.n	8005eca <HAL_ADC_ConfigChannel+0x4a2>
 8005ec4:	4b4a      	ldr	r3, [pc, #296]	; (8005ff0 <HAL_ADC_ConfigChannel+0x5c8>)
 8005ec6:	60fb      	str	r3, [r7, #12]
 8005ec8:	e009      	b.n	8005ede <HAL_ADC_ConfigChannel+0x4b6>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a48      	ldr	r2, [pc, #288]	; (8005ff0 <HAL_ADC_ConfigChannel+0x5c8>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d102      	bne.n	8005eda <HAL_ADC_ConfigChannel+0x4b2>
 8005ed4:	4b45      	ldr	r3, [pc, #276]	; (8005fec <HAL_ADC_ConfigChannel+0x5c4>)
 8005ed6:	60fb      	str	r3, [r7, #12]
 8005ed8:	e001      	b.n	8005ede <HAL_ADC_ConfigChannel+0x4b6>
 8005eda:	2300      	movs	r3, #0
 8005edc:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d108      	bne.n	8005efe <HAL_ADC_ConfigChannel+0x4d6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	d101      	bne.n	8005efe <HAL_ADC_ConfigChannel+0x4d6>
 8005efa:	2301      	movs	r3, #1
 8005efc:	e000      	b.n	8005f00 <HAL_ADC_ConfigChannel+0x4d8>
 8005efe:	2300      	movs	r3, #0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d150      	bne.n	8005fa6 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005f04:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d010      	beq.n	8005f2c <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 0303 	and.w	r3, r3, #3
 8005f12:	2b01      	cmp	r3, #1
 8005f14:	d107      	bne.n	8005f26 <HAL_ADC_ConfigChannel+0x4fe>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b01      	cmp	r3, #1
 8005f20:	d101      	bne.n	8005f26 <HAL_ADC_ConfigChannel+0x4fe>
 8005f22:	2301      	movs	r3, #1
 8005f24:	e000      	b.n	8005f28 <HAL_ADC_ConfigChannel+0x500>
 8005f26:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d13c      	bne.n	8005fa6 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b10      	cmp	r3, #16
 8005f32:	d11d      	bne.n	8005f70 <HAL_ADC_ConfigChannel+0x548>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f3c:	d118      	bne.n	8005f70 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8005f3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005f46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f48:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f4a:	4b2a      	ldr	r3, [pc, #168]	; (8005ff4 <HAL_ADC_ConfigChannel+0x5cc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a2a      	ldr	r2, [pc, #168]	; (8005ff8 <HAL_ADC_ConfigChannel+0x5d0>)
 8005f50:	fba2 2303 	umull	r2, r3, r2, r3
 8005f54:	0c9a      	lsrs	r2, r3, #18
 8005f56:	4613      	mov	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	4413      	add	r3, r2
 8005f5c:	005b      	lsls	r3, r3, #1
 8005f5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005f60:	e002      	b.n	8005f68 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	3b01      	subs	r3, #1
 8005f66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d1f9      	bne.n	8005f62 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005f6e:	e02e      	b.n	8005fce <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b11      	cmp	r3, #17
 8005f76:	d10b      	bne.n	8005f90 <HAL_ADC_ConfigChannel+0x568>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f80:	d106      	bne.n	8005f90 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8005f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8005f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f8c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005f8e:	e01e      	b.n	8005fce <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2b12      	cmp	r3, #18
 8005f96:	d11a      	bne.n	8005fce <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8005f98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005fa0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005fa2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005fa4:	e013      	b.n	8005fce <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005faa:	f043 0220 	orr.w	r2, r3, #32
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005fb8:	e00a      	b.n	8005fd0 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	f043 0220 	orr.w	r2, r3, #32
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005fcc:	e000      	b.n	8005fd0 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8005fce:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8005fd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	376c      	adds	r7, #108	; 0x6c
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	50000100 	.word	0x50000100
 8005fec:	50000400 	.word	0x50000400
 8005ff0:	50000500 	.word	0x50000500
 8005ff4:	200000ac 	.word	0x200000ac
 8005ff8:	431bde83 	.word	0x431bde83

08005ffc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b099      	sub	sp, #100	; 0x64
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006014:	d102      	bne.n	800601c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8006016:	4b6d      	ldr	r3, [pc, #436]	; (80061cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006018:	60bb      	str	r3, [r7, #8]
 800601a:	e01a      	b.n	8006052 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a6a      	ldr	r2, [pc, #424]	; (80061cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d103      	bne.n	800602e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8006026:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800602a:	60bb      	str	r3, [r7, #8]
 800602c:	e011      	b.n	8006052 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a67      	ldr	r2, [pc, #412]	; (80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d102      	bne.n	800603e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006038:	4b66      	ldr	r3, [pc, #408]	; (80061d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800603a:	60bb      	str	r3, [r7, #8]
 800603c:	e009      	b.n	8006052 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a64      	ldr	r2, [pc, #400]	; (80061d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d102      	bne.n	800604e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8006048:	4b61      	ldr	r3, [pc, #388]	; (80061d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800604a:	60bb      	str	r3, [r7, #8]
 800604c:	e001      	b.n	8006052 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800604e:	2300      	movs	r3, #0
 8006050:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d101      	bne.n	800605c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8006058:	2301      	movs	r3, #1
 800605a:	e0b0      	b.n	80061be <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006062:	2b01      	cmp	r3, #1
 8006064:	d101      	bne.n	800606a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8006066:	2302      	movs	r3, #2
 8006068:	e0a9      	b.n	80061be <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2201      	movs	r2, #1
 800606e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f003 0304 	and.w	r3, r3, #4
 800607c:	2b00      	cmp	r3, #0
 800607e:	f040 808d 	bne.w	800619c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0304 	and.w	r3, r3, #4
 800608a:	2b00      	cmp	r3, #0
 800608c:	f040 8086 	bne.w	800619c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006098:	d004      	beq.n	80060a4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a4b      	ldr	r2, [pc, #300]	; (80061cc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d101      	bne.n	80060a8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80060a4:	4b4c      	ldr	r3, [pc, #304]	; (80061d8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80060a6:	e000      	b.n	80060aa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80060a8:	4b4c      	ldr	r3, [pc, #304]	; (80061dc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80060aa:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d040      	beq.n	8006136 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80060b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	6859      	ldr	r1, [r3, #4]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060c6:	035b      	lsls	r3, r3, #13
 80060c8:	430b      	orrs	r3, r1
 80060ca:	431a      	orrs	r2, r3
 80060cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060ce:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d108      	bne.n	80060f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0301 	and.w	r3, r3, #1
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d101      	bne.n	80060f0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80060f0:	2300      	movs	r3, #0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d15c      	bne.n	80061b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d107      	bne.n	8006112 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b01      	cmp	r3, #1
 800610c:	d101      	bne.n	8006112 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800610e:	2301      	movs	r3, #1
 8006110:	e000      	b.n	8006114 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8006112:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006114:	2b00      	cmp	r3, #0
 8006116:	d14b      	bne.n	80061b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8006118:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006120:	f023 030f 	bic.w	r3, r3, #15
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	6811      	ldr	r1, [r2, #0]
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	6892      	ldr	r2, [r2, #8]
 800612c:	430a      	orrs	r2, r1
 800612e:	431a      	orrs	r2, r3
 8006130:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006132:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8006134:	e03c      	b.n	80061b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800613e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006140:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	f003 0303 	and.w	r3, r3, #3
 800614c:	2b01      	cmp	r3, #1
 800614e:	d108      	bne.n	8006162 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0301 	and.w	r3, r3, #1
 800615a:	2b01      	cmp	r3, #1
 800615c:	d101      	bne.n	8006162 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 800615e:	2301      	movs	r3, #1
 8006160:	e000      	b.n	8006164 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8006162:	2300      	movs	r3, #0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d123      	bne.n	80061b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	2b01      	cmp	r3, #1
 8006172:	d107      	bne.n	8006184 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8006184:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8006186:	2b00      	cmp	r3, #0
 8006188:	d112      	bne.n	80061b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800618a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006192:	f023 030f 	bic.w	r3, r3, #15
 8006196:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006198:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800619a:	e009      	b.n	80061b0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	f043 0220 	orr.w	r2, r3, #32
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80061ae:	e000      	b.n	80061b2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80061b0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80061ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80061be:	4618      	mov	r0, r3
 80061c0:	3764      	adds	r7, #100	; 0x64
 80061c2:	46bd      	mov	sp, r7
 80061c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c8:	4770      	bx	lr
 80061ca:	bf00      	nop
 80061cc:	50000100 	.word	0x50000100
 80061d0:	50000400 	.word	0x50000400
 80061d4:	50000500 	.word	0x50000500
 80061d8:	50000300 	.word	0x50000300
 80061dc:	50000700 	.word	0x50000700

080061e0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b084      	sub	sp, #16
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d126      	bne.n	8006248 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006210:	2b00      	cmp	r3, #0
 8006212:	d115      	bne.n	8006240 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8006218:	2b00      	cmp	r3, #0
 800621a:	d111      	bne.n	8006240 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800622c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006230:	2b00      	cmp	r3, #0
 8006232:	d105      	bne.n	8006240 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006238:	f043 0201 	orr.w	r2, r3, #1
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f7fe fad7 	bl	80047f4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8006246:	e004      	b.n	8006252 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	4798      	blx	r3
}
 8006252:	bf00      	nop
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006266:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7fe facd 	bl	8004808 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006282:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006294:	f043 0204 	orr.w	r2, r3, #4
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800629c:	68f8      	ldr	r0, [r7, #12]
 800629e:	f7fe fac7 	bl	8004830 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80062a2:	bf00      	nop
 80062a4:	3710      	adds	r7, #16
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
	...

080062ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062b4:	2300      	movs	r3, #0
 80062b6:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	f003 0303 	and.w	r3, r3, #3
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d108      	bne.n	80062d8 <ADC_Enable+0x2c>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d101      	bne.n	80062d8 <ADC_Enable+0x2c>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <ADC_Enable+0x2e>
 80062d8:	2300      	movs	r3, #0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d143      	bne.n	8006366 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	4b22      	ldr	r3, [pc, #136]	; (8006370 <ADC_Enable+0xc4>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f0:	f043 0210 	orr.w	r2, r3, #16
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062fc:	f043 0201 	orr.w	r2, r3, #1
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e02f      	b.n	8006368 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8006318:	f7fe fa3c 	bl	8004794 <HAL_GetTick>
 800631c:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800631e:	e01b      	b.n	8006358 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006320:	f7fe fa38 	bl	8004794 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	2b02      	cmp	r3, #2
 800632c:	d914      	bls.n	8006358 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f003 0301 	and.w	r3, r3, #1
 8006338:	2b01      	cmp	r3, #1
 800633a:	d00d      	beq.n	8006358 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006340:	f043 0210 	orr.w	r2, r3, #16
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800634c:	f043 0201 	orr.w	r2, r3, #1
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e007      	b.n	8006368 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f003 0301 	and.w	r3, r3, #1
 8006362:	2b01      	cmp	r3, #1
 8006364:	d1dc      	bne.n	8006320 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3710      	adds	r7, #16
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	8000003f 	.word	0x8000003f

08006374 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800637c:	2300      	movs	r3, #0
 800637e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0303 	and.w	r3, r3, #3
 800638a:	2b01      	cmp	r3, #1
 800638c:	d108      	bne.n	80063a0 <ADC_Disable+0x2c>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0301 	and.w	r3, r3, #1
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <ADC_Disable+0x2c>
 800639c:	2301      	movs	r3, #1
 800639e:	e000      	b.n	80063a2 <ADC_Disable+0x2e>
 80063a0:	2300      	movs	r3, #0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d047      	beq.n	8006436 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	f003 030d 	and.w	r3, r3, #13
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d10f      	bne.n	80063d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	689a      	ldr	r2, [r3, #8]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f042 0202 	orr.w	r2, r2, #2
 80063c2:	609a      	str	r2, [r3, #8]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2203      	movs	r2, #3
 80063ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80063cc:	f7fe f9e2 	bl	8004794 <HAL_GetTick>
 80063d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80063d2:	e029      	b.n	8006428 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d8:	f043 0210 	orr.w	r2, r3, #16
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063e4:	f043 0201 	orr.w	r2, r3, #1
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e023      	b.n	8006438 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80063f0:	f7fe f9d0 	bl	8004794 <HAL_GetTick>
 80063f4:	4602      	mov	r2, r0
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	1ad3      	subs	r3, r2, r3
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d914      	bls.n	8006428 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	689b      	ldr	r3, [r3, #8]
 8006404:	f003 0301 	and.w	r3, r3, #1
 8006408:	2b01      	cmp	r3, #1
 800640a:	d10d      	bne.n	8006428 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006410:	f043 0210 	orr.w	r2, r3, #16
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800641c:	f043 0201 	orr.w	r2, r3, #1
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e007      	b.n	8006438 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	f003 0301 	and.w	r3, r3, #1
 8006432:	2b01      	cmp	r3, #1
 8006434:	d0dc      	beq.n	80063f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006440:	b480      	push	{r7}
 8006442:	b085      	sub	sp, #20
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	f003 0307 	and.w	r3, r3, #7
 800644e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006450:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <__NVIC_SetPriorityGrouping+0x44>)
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006456:	68ba      	ldr	r2, [r7, #8]
 8006458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800645c:	4013      	ands	r3, r2
 800645e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800646c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006472:	4a04      	ldr	r2, [pc, #16]	; (8006484 <__NVIC_SetPriorityGrouping+0x44>)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	60d3      	str	r3, [r2, #12]
}
 8006478:	bf00      	nop
 800647a:	3714      	adds	r7, #20
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	e000ed00 	.word	0xe000ed00

08006488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006488:	b480      	push	{r7}
 800648a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800648c:	4b04      	ldr	r3, [pc, #16]	; (80064a0 <__NVIC_GetPriorityGrouping+0x18>)
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	0a1b      	lsrs	r3, r3, #8
 8006492:	f003 0307 	and.w	r3, r3, #7
}
 8006496:	4618      	mov	r0, r3
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	e000ed00 	.word	0xe000ed00

080064a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	db0b      	blt.n	80064ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80064b6:	79fb      	ldrb	r3, [r7, #7]
 80064b8:	f003 021f 	and.w	r2, r3, #31
 80064bc:	4907      	ldr	r1, [pc, #28]	; (80064dc <__NVIC_EnableIRQ+0x38>)
 80064be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c2:	095b      	lsrs	r3, r3, #5
 80064c4:	2001      	movs	r0, #1
 80064c6:	fa00 f202 	lsl.w	r2, r0, r2
 80064ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80064ce:	bf00      	nop
 80064d0:	370c      	adds	r7, #12
 80064d2:	46bd      	mov	sp, r7
 80064d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	e000e100 	.word	0xe000e100

080064e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	4603      	mov	r3, r0
 80064e8:	6039      	str	r1, [r7, #0]
 80064ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	db0a      	blt.n	800650a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	b2da      	uxtb	r2, r3
 80064f8:	490c      	ldr	r1, [pc, #48]	; (800652c <__NVIC_SetPriority+0x4c>)
 80064fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064fe:	0112      	lsls	r2, r2, #4
 8006500:	b2d2      	uxtb	r2, r2
 8006502:	440b      	add	r3, r1
 8006504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006508:	e00a      	b.n	8006520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	b2da      	uxtb	r2, r3
 800650e:	4908      	ldr	r1, [pc, #32]	; (8006530 <__NVIC_SetPriority+0x50>)
 8006510:	79fb      	ldrb	r3, [r7, #7]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	3b04      	subs	r3, #4
 8006518:	0112      	lsls	r2, r2, #4
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	440b      	add	r3, r1
 800651e:	761a      	strb	r2, [r3, #24]
}
 8006520:	bf00      	nop
 8006522:	370c      	adds	r7, #12
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	e000e100 	.word	0xe000e100
 8006530:	e000ed00 	.word	0xe000ed00

08006534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006534:	b480      	push	{r7}
 8006536:	b089      	sub	sp, #36	; 0x24
 8006538:	af00      	add	r7, sp, #0
 800653a:	60f8      	str	r0, [r7, #12]
 800653c:	60b9      	str	r1, [r7, #8]
 800653e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f003 0307 	and.w	r3, r3, #7
 8006546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f1c3 0307 	rsb	r3, r3, #7
 800654e:	2b04      	cmp	r3, #4
 8006550:	bf28      	it	cs
 8006552:	2304      	movcs	r3, #4
 8006554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006556:	69fb      	ldr	r3, [r7, #28]
 8006558:	3304      	adds	r3, #4
 800655a:	2b06      	cmp	r3, #6
 800655c:	d902      	bls.n	8006564 <NVIC_EncodePriority+0x30>
 800655e:	69fb      	ldr	r3, [r7, #28]
 8006560:	3b03      	subs	r3, #3
 8006562:	e000      	b.n	8006566 <NVIC_EncodePriority+0x32>
 8006564:	2300      	movs	r3, #0
 8006566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006568:	f04f 32ff 	mov.w	r2, #4294967295
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	43da      	mvns	r2, r3
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	401a      	ands	r2, r3
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800657c:	f04f 31ff 	mov.w	r1, #4294967295
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	fa01 f303 	lsl.w	r3, r1, r3
 8006586:	43d9      	mvns	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800658c:	4313      	orrs	r3, r2
         );
}
 800658e:	4618      	mov	r0, r3
 8006590:	3724      	adds	r7, #36	; 0x24
 8006592:	46bd      	mov	sp, r7
 8006594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006598:	4770      	bx	lr
	...

0800659c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b082      	sub	sp, #8
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3b01      	subs	r3, #1
 80065a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80065ac:	d301      	bcc.n	80065b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80065ae:	2301      	movs	r3, #1
 80065b0:	e00f      	b.n	80065d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80065b2:	4a0a      	ldr	r2, [pc, #40]	; (80065dc <SysTick_Config+0x40>)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	3b01      	subs	r3, #1
 80065b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80065ba:	210f      	movs	r1, #15
 80065bc:	f04f 30ff 	mov.w	r0, #4294967295
 80065c0:	f7ff ff8e 	bl	80064e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80065c4:	4b05      	ldr	r3, [pc, #20]	; (80065dc <SysTick_Config+0x40>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80065ca:	4b04      	ldr	r3, [pc, #16]	; (80065dc <SysTick_Config+0x40>)
 80065cc:	2207      	movs	r2, #7
 80065ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3708      	adds	r7, #8
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	e000e010 	.word	0xe000e010

080065e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ff29 	bl	8006440 <__NVIC_SetPriorityGrouping>
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}

080065f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b086      	sub	sp, #24
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	4603      	mov	r3, r0
 80065fe:	60b9      	str	r1, [r7, #8]
 8006600:	607a      	str	r2, [r7, #4]
 8006602:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006604:	2300      	movs	r3, #0
 8006606:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006608:	f7ff ff3e 	bl	8006488 <__NVIC_GetPriorityGrouping>
 800660c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	68b9      	ldr	r1, [r7, #8]
 8006612:	6978      	ldr	r0, [r7, #20]
 8006614:	f7ff ff8e 	bl	8006534 <NVIC_EncodePriority>
 8006618:	4602      	mov	r2, r0
 800661a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800661e:	4611      	mov	r1, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff ff5d 	bl	80064e0 <__NVIC_SetPriority>
}
 8006626:	bf00      	nop
 8006628:	3718      	adds	r7, #24
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	4603      	mov	r3, r0
 8006636:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800663c:	4618      	mov	r0, r3
 800663e:	f7ff ff31 	bl	80064a4 <__NVIC_EnableIRQ>
}
 8006642:	bf00      	nop
 8006644:	3708      	adds	r7, #8
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b082      	sub	sp, #8
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f7ff ffa2 	bl	800659c <SysTick_Config>
 8006658:	4603      	mov	r3, r0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b082      	sub	sp, #8
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e054      	b.n	8006720 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	7f5b      	ldrb	r3, [r3, #29]
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2200      	movs	r2, #0
 8006684:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f7fd fcdc 	bl	8004044 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2202      	movs	r2, #2
 8006690:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	791b      	ldrb	r3, [r3, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10c      	bne.n	80066b4 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	4a22      	ldr	r2, [pc, #136]	; (8006728 <HAL_CRC_Init+0xc4>)
 80066a0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0218 	bic.w	r2, r2, #24
 80066b0:	609a      	str	r2, [r3, #8]
 80066b2:	e00c      	b.n	80066ce <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6899      	ldr	r1, [r3, #8]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	461a      	mov	r2, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f948 	bl	8006954 <HAL_CRCEx_Polynomial_Set>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e028      	b.n	8006720 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	795b      	ldrb	r3, [r3, #5]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d105      	bne.n	80066e2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f04f 32ff 	mov.w	r2, #4294967295
 80066de:	611a      	str	r2, [r3, #16]
 80066e0:	e004      	b.n	80066ec <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	6912      	ldr	r2, [r2, #16]
 80066ea:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695a      	ldr	r2, [r3, #20]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699a      	ldr	r2, [r3, #24]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2201      	movs	r2, #1
 800671c:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	04c11db7 	.word	0x04c11db7

0800672c <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b086      	sub	sp, #24
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8006738:	2300      	movs	r3, #0
 800673a:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2202      	movs	r2, #2
 8006740:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f042 0201 	orr.w	r2, r2, #1
 8006750:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	2b03      	cmp	r3, #3
 8006758:	d006      	beq.n	8006768 <HAL_CRC_Calculate+0x3c>
 800675a:	2b03      	cmp	r3, #3
 800675c:	d829      	bhi.n	80067b2 <HAL_CRC_Calculate+0x86>
 800675e:	2b01      	cmp	r3, #1
 8006760:	d019      	beq.n	8006796 <HAL_CRC_Calculate+0x6a>
 8006762:	2b02      	cmp	r3, #2
 8006764:	d01e      	beq.n	80067a4 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8006766:	e024      	b.n	80067b2 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
 800676c:	e00a      	b.n	8006784 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	441a      	add	r2, r3
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	3301      	adds	r3, #1
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	697a      	ldr	r2, [r7, #20]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	429a      	cmp	r2, r3
 800678a:	d3f0      	bcc.n	800676e <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	613b      	str	r3, [r7, #16]
      break;
 8006794:	e00e      	b.n	80067b4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 f812 	bl	80067c4 <CRC_Handle_8>
 80067a0:	6138      	str	r0, [r7, #16]
      break;
 80067a2:	e007      	b.n	80067b4 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	68b9      	ldr	r1, [r7, #8]
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f000 f899 	bl	80068e0 <CRC_Handle_16>
 80067ae:	6138      	str	r0, [r7, #16]
      break;
 80067b0:	e000      	b.n	80067b4 <HAL_CRC_Calculate+0x88>
      break;
 80067b2:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2201      	movs	r2, #1
 80067b8:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 80067ba:	693b      	ldr	r3, [r7, #16]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}

080067c4 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b089      	sub	sp, #36	; 0x24
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 80067d0:	2300      	movs	r3, #0
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	e023      	b.n	800681e <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	4413      	add	r3, r2
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	009b      	lsls	r3, r3, #2
 80067e6:	3301      	adds	r3, #1
 80067e8:	68b9      	ldr	r1, [r7, #8]
 80067ea:	440b      	add	r3, r1
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80067f0:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80067f2:	69fb      	ldr	r3, [r7, #28]
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	3302      	adds	r3, #2
 80067f8:	68b9      	ldr	r1, [r7, #8]
 80067fa:	440b      	add	r3, r1
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8006800:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8006802:	69fb      	ldr	r3, [r7, #28]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	3303      	adds	r3, #3
 8006808:	68b9      	ldr	r1, [r7, #8]
 800680a:	440b      	add	r3, r1
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8006814:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8006816:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	3301      	adds	r3, #1
 800681c:	61fb      	str	r3, [r7, #28]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	089b      	lsrs	r3, r3, #2
 8006822:	69fa      	ldr	r2, [r7, #28]
 8006824:	429a      	cmp	r2, r3
 8006826:	d3d6      	bcc.n	80067d6 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f003 0303 	and.w	r3, r3, #3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d04d      	beq.n	80068ce <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f003 0303 	and.w	r3, r3, #3
 8006838:	2b01      	cmp	r3, #1
 800683a:	d107      	bne.n	800684c <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	009b      	lsls	r3, r3, #2
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	4413      	add	r3, r2
 8006844:	68fa      	ldr	r2, [r7, #12]
 8006846:	6812      	ldr	r2, [r2, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d116      	bne.n	8006884 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	68ba      	ldr	r2, [r7, #8]
 800685c:	4413      	add	r3, r2
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	b21a      	sxth	r2, r3
 8006864:	69fb      	ldr	r3, [r7, #28]
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	3301      	adds	r3, #1
 800686a:	68b9      	ldr	r1, [r7, #8]
 800686c:	440b      	add	r3, r1
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	b21b      	sxth	r3, r3
 8006872:	4313      	orrs	r3, r2
 8006874:	b21b      	sxth	r3, r3
 8006876:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	8b7a      	ldrh	r2, [r7, #26]
 8006882:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	2b03      	cmp	r3, #3
 800688c:	d11f      	bne.n	80068ce <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800688e:	69fb      	ldr	r3, [r7, #28]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	68ba      	ldr	r2, [r7, #8]
 8006894:	4413      	add	r3, r2
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	b21a      	sxth	r2, r3
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	3301      	adds	r3, #1
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	440b      	add	r3, r1
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	b21b      	sxth	r3, r3
 80068aa:	4313      	orrs	r3, r2
 80068ac:	b21b      	sxth	r3, r3
 80068ae:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	617b      	str	r3, [r7, #20]
      *pReg = data;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	8b7a      	ldrh	r2, [r7, #26]
 80068ba:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	3302      	adds	r3, #2
 80068c2:	68ba      	ldr	r2, [r7, #8]
 80068c4:	4413      	add	r3, r2
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	6812      	ldr	r2, [r2, #0]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3724      	adds	r7, #36	; 0x24
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]
 80068f0:	e013      	b.n	800691a <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	4413      	add	r3, r2
 80068fa:	881b      	ldrh	r3, [r3, #0]
 80068fc:	041a      	lsls	r2, r3, #16
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	3302      	adds	r3, #2
 8006904:	68b9      	ldr	r1, [r7, #8]
 8006906:	440b      	add	r3, r1
 8006908:	881b      	ldrh	r3, [r3, #0]
 800690a:	4619      	mov	r1, r3
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	430a      	orrs	r2, r1
 8006912:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	3301      	adds	r3, #1
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	085b      	lsrs	r3, r3, #1
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	429a      	cmp	r2, r3
 8006922:	d3e6      	bcc.n	80068f2 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f003 0301 	and.w	r3, r3, #1
 800692a:	2b00      	cmp	r3, #0
 800692c:	d009      	beq.n	8006942 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	68ba      	ldr	r2, [r7, #8]
 800693a:	4413      	add	r3, r2
 800693c:	881a      	ldrh	r2, [r3, #0]
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
}
 8006948:	4618      	mov	r0, r3
 800694a:	371c      	adds	r7, #28
 800694c:	46bd      	mov	sp, r7
 800694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006952:	4770      	bx	lr

08006954 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8006954:	b480      	push	{r7}
 8006956:	b087      	sub	sp, #28
 8006958:	af00      	add	r7, sp, #0
 800695a:	60f8      	str	r0, [r7, #12]
 800695c:	60b9      	str	r1, [r7, #8]
 800695e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006964:	231f      	movs	r3, #31
 8006966:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d102      	bne.n	8006978 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	75fb      	strb	r3, [r7, #23]
 8006976:	e063      	b.n	8006a40 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006978:	bf00      	nop
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	1e5a      	subs	r2, r3, #1
 800697e:	613a      	str	r2, [r7, #16]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d009      	beq.n	8006998 <HAL_CRCEx_Polynomial_Set+0x44>
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	f003 031f 	and.w	r3, r3, #31
 800698a:	68ba      	ldr	r2, [r7, #8]
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0f0      	beq.n	800697a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b18      	cmp	r3, #24
 800699c:	d846      	bhi.n	8006a2c <HAL_CRCEx_Polynomial_Set+0xd8>
 800699e:	a201      	add	r2, pc, #4	; (adr r2, 80069a4 <HAL_CRCEx_Polynomial_Set+0x50>)
 80069a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069a4:	08006a33 	.word	0x08006a33
 80069a8:	08006a2d 	.word	0x08006a2d
 80069ac:	08006a2d 	.word	0x08006a2d
 80069b0:	08006a2d 	.word	0x08006a2d
 80069b4:	08006a2d 	.word	0x08006a2d
 80069b8:	08006a2d 	.word	0x08006a2d
 80069bc:	08006a2d 	.word	0x08006a2d
 80069c0:	08006a2d 	.word	0x08006a2d
 80069c4:	08006a21 	.word	0x08006a21
 80069c8:	08006a2d 	.word	0x08006a2d
 80069cc:	08006a2d 	.word	0x08006a2d
 80069d0:	08006a2d 	.word	0x08006a2d
 80069d4:	08006a2d 	.word	0x08006a2d
 80069d8:	08006a2d 	.word	0x08006a2d
 80069dc:	08006a2d 	.word	0x08006a2d
 80069e0:	08006a2d 	.word	0x08006a2d
 80069e4:	08006a15 	.word	0x08006a15
 80069e8:	08006a2d 	.word	0x08006a2d
 80069ec:	08006a2d 	.word	0x08006a2d
 80069f0:	08006a2d 	.word	0x08006a2d
 80069f4:	08006a2d 	.word	0x08006a2d
 80069f8:	08006a2d 	.word	0x08006a2d
 80069fc:	08006a2d 	.word	0x08006a2d
 8006a00:	08006a2d 	.word	0x08006a2d
 8006a04:	08006a09 	.word	0x08006a09
    {

      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	2b06      	cmp	r3, #6
 8006a0c:	d913      	bls.n	8006a36 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006a12:	e010      	b.n	8006a36 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	2b07      	cmp	r3, #7
 8006a18:	d90f      	bls.n	8006a3a <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006a1e:	e00c      	b.n	8006a3a <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	2b0f      	cmp	r3, #15
 8006a24:	d90b      	bls.n	8006a3e <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 8006a26:	2301      	movs	r3, #1
 8006a28:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8006a2a:	e008      	b.n	8006a3e <HAL_CRCEx_Polynomial_Set+0xea>

      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	75fb      	strb	r3, [r7, #23]
        break;
 8006a30:	e006      	b.n	8006a40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006a32:	bf00      	nop
 8006a34:	e004      	b.n	8006a40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006a36:	bf00      	nop
 8006a38:	e002      	b.n	8006a40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006a3a:	bf00      	nop
 8006a3c:	e000      	b.n	8006a40 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 8006a3e:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8006a40:	7dfb      	ldrb	r3, [r7, #23]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d10d      	bne.n	8006a62 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	f023 0118 	bic.w	r1, r3, #24
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	687a      	ldr	r2, [r7, #4]
 8006a5e:	430a      	orrs	r2, r1
 8006a60:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8006a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	371c      	adds	r7, #28
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr

08006a70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b084      	sub	sp, #16
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d101      	bne.n	8006a86 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e037      	b.n	8006af6 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2202      	movs	r2, #2
 8006a8a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006a9c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8006aa0:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8006aaa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ab6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	695b      	ldr	r3, [r3, #20]
 8006abc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ac2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	69db      	ldr	r3, [r3, #28]
 8006ac8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	f000 f941 	bl	8006d60 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}  
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	60f8      	str	r0, [r7, #12]
 8006b06:	60b9      	str	r1, [r7, #8]
 8006b08:	607a      	str	r2, [r7, #4]
 8006b0a:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8006b0c:	2300      	movs	r3, #0
 8006b0e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d101      	bne.n	8006b1e <HAL_DMA_Start_IT+0x20>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e04a      	b.n	8006bb4 <HAL_DMA_Start_IT+0xb6>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2201      	movs	r2, #1
 8006b22:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d13a      	bne.n	8006ba6 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f022 0201 	bic.w	r2, r2, #1
 8006b4c:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	68b9      	ldr	r1, [r7, #8]
 8006b54:	68f8      	ldr	r0, [r7, #12]
 8006b56:	f000 f8d4 	bl	8006d02 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d008      	beq.n	8006b74 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	681a      	ldr	r2, [r3, #0]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 020e 	orr.w	r2, r2, #14
 8006b70:	601a      	str	r2, [r3, #0]
 8006b72:	e00f      	b.n	8006b94 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f042 020a 	orr.w	r2, r2, #10
 8006b82:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f022 0204 	bic.w	r2, r2, #4
 8006b92:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f042 0201 	orr.w	r2, r2, #1
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	e005      	b.n	8006bb2 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8006bae:	2302      	movs	r3, #2
 8006bb0:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
} 
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3718      	adds	r7, #24
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd8:	2204      	movs	r2, #4
 8006bda:	409a      	lsls	r2, r3
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	4013      	ands	r3, r2
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d024      	beq.n	8006c2e <HAL_DMA_IRQHandler+0x72>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	f003 0304 	and.w	r3, r3, #4
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d01f      	beq.n	8006c2e <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d107      	bne.n	8006c0c <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f022 0204 	bic.w	r2, r2, #4
 8006c0a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c14:	2104      	movs	r1, #4
 8006c16:	fa01 f202 	lsl.w	r2, r1, r2
 8006c1a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d06a      	beq.n	8006cfa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8006c2c:	e065      	b.n	8006cfa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c32:	2202      	movs	r2, #2
 8006c34:	409a      	lsls	r2, r3
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d02c      	beq.n	8006c98 <HAL_DMA_IRQHandler+0xdc>
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d027      	beq.n	8006c98 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 0320 	and.w	r3, r3, #32
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10b      	bne.n	8006c6e <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 020a 	bic.w	r2, r2, #10
 8006c64:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c76:	2102      	movs	r1, #2
 8006c78:	fa01 f202 	lsl.w	r2, r1, r2
 8006c7c:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d035      	beq.n	8006cfa <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8006c96:	e030      	b.n	8006cfa <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c9c:	2208      	movs	r2, #8
 8006c9e:	409a      	lsls	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	4013      	ands	r3, r2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d028      	beq.n	8006cfa <HAL_DMA_IRQHandler+0x13e>
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	f003 0308 	and.w	r3, r3, #8
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d023      	beq.n	8006cfa <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 020e 	bic.w	r2, r2, #14
 8006cc0:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cca:	2101      	movs	r1, #1
 8006ccc:	fa01 f202 	lsl.w	r2, r1, r2
 8006cd0:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2201      	movs	r2, #1
 8006cdc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d004      	beq.n	8006cfa <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	4798      	blx	r3
    }
  }
}  
 8006cf8:	e7ff      	b.n	8006cfa <HAL_DMA_IRQHandler+0x13e>
 8006cfa:	bf00      	nop
 8006cfc:	3710      	adds	r7, #16
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	60f8      	str	r0, [r7, #12]
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d18:	2101      	movs	r1, #1
 8006d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8006d1e:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	2b10      	cmp	r3, #16
 8006d2e:	d108      	bne.n	8006d42 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006d40:	e007      	b.n	8006d52 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68ba      	ldr	r2, [r7, #8]
 8006d48:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	687a      	ldr	r2, [r7, #4]
 8006d50:	60da      	str	r2, [r3, #12]
}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
	...

08006d60 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b083      	sub	sp, #12
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	4b14      	ldr	r3, [pc, #80]	; (8006dc0 <DMA_CalcBaseAndBitshift+0x60>)
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d80f      	bhi.n	8006d94 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4b12      	ldr	r3, [pc, #72]	; (8006dc4 <DMA_CalcBaseAndBitshift+0x64>)
 8006d7c:	4413      	add	r3, r2
 8006d7e:	4a12      	ldr	r2, [pc, #72]	; (8006dc8 <DMA_CalcBaseAndBitshift+0x68>)
 8006d80:	fba2 2303 	umull	r2, r3, r2, r3
 8006d84:	091b      	lsrs	r3, r3, #4
 8006d86:	009a      	lsls	r2, r3, #2
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a0f      	ldr	r2, [pc, #60]	; (8006dcc <DMA_CalcBaseAndBitshift+0x6c>)
 8006d90:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8006d92:	e00e      	b.n	8006db2 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	461a      	mov	r2, r3
 8006d9a:	4b0d      	ldr	r3, [pc, #52]	; (8006dd0 <DMA_CalcBaseAndBitshift+0x70>)
 8006d9c:	4413      	add	r3, r2
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <DMA_CalcBaseAndBitshift+0x68>)
 8006da0:	fba2 2303 	umull	r2, r3, r2, r3
 8006da4:	091b      	lsrs	r3, r3, #4
 8006da6:	009a      	lsls	r2, r3, #2
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	4a09      	ldr	r2, [pc, #36]	; (8006dd4 <DMA_CalcBaseAndBitshift+0x74>)
 8006db0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40020407 	.word	0x40020407
 8006dc4:	bffdfff8 	.word	0xbffdfff8
 8006dc8:	cccccccd 	.word	0xcccccccd
 8006dcc:	40020000 	.word	0x40020000
 8006dd0:	bffdfbf8 	.word	0xbffdfbf8
 8006dd4:	40020400 	.word	0x40020400

08006dd8 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	60f8      	str	r0, [r7, #12]
 8006de0:	60b9      	str	r1, [r7, #8]
 8006de2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006de6:	2301      	movs	r3, #1
 8006de8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0U;
 8006dea:	2300      	movs	r3, #0
 8006dec:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0U;
 8006dee:	2300      	movs	r3, #0
 8006df0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006df2:	4b2f      	ldr	r3, [pc, #188]	; (8006eb0 <HAL_FLASH_Program+0xd8>)
 8006df4:	7e1b      	ldrb	r3, [r3, #24]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_FLASH_Program+0x26>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e054      	b.n	8006ea8 <HAL_FLASH_Program+0xd0>
 8006dfe:	4b2c      	ldr	r3, [pc, #176]	; (8006eb0 <HAL_FLASH_Program+0xd8>)
 8006e00:	2201      	movs	r2, #1
 8006e02:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006e04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e08:	f000 f8a8 	bl	8006f5c <FLASH_WaitForLastOperation>
 8006e0c:	4603      	mov	r3, r0
 8006e0e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006e10:	7dfb      	ldrb	r3, [r7, #23]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d144      	bne.n	8006ea0 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d102      	bne.n	8006e22 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	757b      	strb	r3, [r7, #21]
 8006e20:	e007      	b.n	8006e32 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	2b02      	cmp	r3, #2
 8006e26:	d102      	bne.n	8006e2e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8006e28:	2302      	movs	r3, #2
 8006e2a:	757b      	strb	r3, [r7, #21]
 8006e2c:	e001      	b.n	8006e32 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8006e2e:	2304      	movs	r3, #4
 8006e30:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8006e32:	2300      	movs	r3, #0
 8006e34:	75bb      	strb	r3, [r7, #22]
 8006e36:	e02d      	b.n	8006e94 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006e38:	7dbb      	ldrb	r3, [r7, #22]
 8006e3a:	005a      	lsls	r2, r3, #1
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	eb02 0c03 	add.w	ip, r2, r3
 8006e42:	7dbb      	ldrb	r3, [r7, #22]
 8006e44:	0119      	lsls	r1, r3, #4
 8006e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e4a:	f1c1 0620 	rsb	r6, r1, #32
 8006e4e:	f1a1 0020 	sub.w	r0, r1, #32
 8006e52:	fa22 f401 	lsr.w	r4, r2, r1
 8006e56:	fa03 f606 	lsl.w	r6, r3, r6
 8006e5a:	4334      	orrs	r4, r6
 8006e5c:	fa23 f000 	lsr.w	r0, r3, r0
 8006e60:	4304      	orrs	r4, r0
 8006e62:	fa23 f501 	lsr.w	r5, r3, r1
 8006e66:	b2a3      	uxth	r3, r4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4660      	mov	r0, ip
 8006e6c:	f000 f85a 	bl	8006f24 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006e70:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e74:	f000 f872 	bl	8006f5c <FLASH_WaitForLastOperation>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006e7c:	4b0d      	ldr	r3, [pc, #52]	; (8006eb4 <HAL_FLASH_Program+0xdc>)
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	4a0c      	ldr	r2, [pc, #48]	; (8006eb4 <HAL_FLASH_Program+0xdc>)
 8006e82:	f023 0301 	bic.w	r3, r3, #1
 8006e86:	6113      	str	r3, [r2, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d107      	bne.n	8006e9e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8006e8e:	7dbb      	ldrb	r3, [r7, #22]
 8006e90:	3301      	adds	r3, #1
 8006e92:	75bb      	strb	r3, [r7, #22]
 8006e94:	7dba      	ldrb	r2, [r7, #22]
 8006e96:	7d7b      	ldrb	r3, [r7, #21]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d3cd      	bcc.n	8006e38 <HAL_FLASH_Program+0x60>
 8006e9c:	e000      	b.n	8006ea0 <HAL_FLASH_Program+0xc8>
      {
        break;
 8006e9e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006ea0:	4b03      	ldr	r3, [pc, #12]	; (8006eb0 <HAL_FLASH_Program+0xd8>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	761a      	strb	r2, [r3, #24]

  return status;
 8006ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	371c      	adds	r7, #28
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006eb0:	200065f0 	.word	0x200065f0
 8006eb4:	40022000 	.word	0x40022000

08006eb8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006ec2:	4b0d      	ldr	r3, [pc, #52]	; (8006ef8 <HAL_FLASH_Unlock+0x40>)
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d00d      	beq.n	8006eea <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006ece:	4b0a      	ldr	r3, [pc, #40]	; (8006ef8 <HAL_FLASH_Unlock+0x40>)
 8006ed0:	4a0a      	ldr	r2, [pc, #40]	; (8006efc <HAL_FLASH_Unlock+0x44>)
 8006ed2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006ed4:	4b08      	ldr	r3, [pc, #32]	; (8006ef8 <HAL_FLASH_Unlock+0x40>)
 8006ed6:	4a0a      	ldr	r2, [pc, #40]	; (8006f00 <HAL_FLASH_Unlock+0x48>)
 8006ed8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006eda:	4b07      	ldr	r3, [pc, #28]	; (8006ef8 <HAL_FLASH_Unlock+0x40>)
 8006edc:	691b      	ldr	r3, [r3, #16]
 8006ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006eea:	79fb      	ldrb	r3, [r7, #7]
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr
 8006ef8:	40022000 	.word	0x40022000
 8006efc:	45670123 	.word	0x45670123
 8006f00:	cdef89ab 	.word	0xcdef89ab

08006f04 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006f04:	b480      	push	{r7}
 8006f06:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006f08:	4b05      	ldr	r3, [pc, #20]	; (8006f20 <HAL_FLASH_Lock+0x1c>)
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	4a04      	ldr	r2, [pc, #16]	; (8006f20 <HAL_FLASH_Lock+0x1c>)
 8006f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f12:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	40022000 	.word	0x40022000

08006f24 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f30:	4b08      	ldr	r3, [pc, #32]	; (8006f54 <FLASH_Program_HalfWord+0x30>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006f36:	4b08      	ldr	r3, [pc, #32]	; (8006f58 <FLASH_Program_HalfWord+0x34>)
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	4a07      	ldr	r2, [pc, #28]	; (8006f58 <FLASH_Program_HalfWord+0x34>)
 8006f3c:	f043 0301 	orr.w	r3, r3, #1
 8006f40:	6113      	str	r3, [r2, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	887a      	ldrh	r2, [r7, #2]
 8006f46:	801a      	strh	r2, [r3, #0]
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	200065f0 	.word	0x200065f0
 8006f58:	40022000 	.word	0x40022000

08006f5c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8006f64:	f7fd fc16 	bl	8004794 <HAL_GetTick>
 8006f68:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006f6a:	e010      	b.n	8006f8e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f72:	d00c      	beq.n	8006f8e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d007      	beq.n	8006f8a <FLASH_WaitForLastOperation+0x2e>
 8006f7a:	f7fd fc0b 	bl	8004794 <HAL_GetTick>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	1ad3      	subs	r3, r2, r3
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	429a      	cmp	r2, r3
 8006f88:	d201      	bcs.n	8006f8e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e01f      	b.n	8006fce <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006f8e:	4b12      	ldr	r3, [pc, #72]	; (8006fd8 <FLASH_WaitForLastOperation+0x7c>)
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	f003 0301 	and.w	r3, r3, #1
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d0e8      	beq.n	8006f6c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006f9a:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <FLASH_WaitForLastOperation+0x7c>)
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b20      	cmp	r3, #32
 8006fa4:	d102      	bne.n	8006fac <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006fa6:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <FLASH_WaitForLastOperation+0x7c>)
 8006fa8:	2220      	movs	r2, #32
 8006faa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006fac:	4b0a      	ldr	r3, [pc, #40]	; (8006fd8 <FLASH_WaitForLastOperation+0x7c>)
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f003 0310 	and.w	r3, r3, #16
 8006fb4:	2b10      	cmp	r3, #16
 8006fb6:	d005      	beq.n	8006fc4 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006fb8:	4b07      	ldr	r3, [pc, #28]	; (8006fd8 <FLASH_WaitForLastOperation+0x7c>)
 8006fba:	68db      	ldr	r3, [r3, #12]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006fc0:	2b04      	cmp	r3, #4
 8006fc2:	d103      	bne.n	8006fcc <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006fc4:	f000 f80a 	bl	8006fdc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006fc8:	2301      	movs	r3, #1
 8006fca:	e000      	b.n	8006fce <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8006fcc:	2300      	movs	r3, #0
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3710      	adds	r7, #16
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	40022000 	.word	0x40022000

08006fdc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006fe6:	4b14      	ldr	r3, [pc, #80]	; (8007038 <FLASH_SetErrorCode+0x5c>)
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	f003 0310 	and.w	r3, r3, #16
 8006fee:	2b10      	cmp	r3, #16
 8006ff0:	d109      	bne.n	8007006 <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006ff2:	4b12      	ldr	r3, [pc, #72]	; (800703c <FLASH_SetErrorCode+0x60>)
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	f043 0302 	orr.w	r3, r3, #2
 8006ffa:	4a10      	ldr	r2, [pc, #64]	; (800703c <FLASH_SetErrorCode+0x60>)
 8006ffc:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_WRPERR;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f043 0310 	orr.w	r3, r3, #16
 8007004:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8007006:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <FLASH_SetErrorCode+0x5c>)
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f003 0304 	and.w	r3, r3, #4
 800700e:	2b04      	cmp	r3, #4
 8007010:	d109      	bne.n	8007026 <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8007012:	4b0a      	ldr	r3, [pc, #40]	; (800703c <FLASH_SetErrorCode+0x60>)
 8007014:	69db      	ldr	r3, [r3, #28]
 8007016:	f043 0301 	orr.w	r3, r3, #1
 800701a:	4a08      	ldr	r2, [pc, #32]	; (800703c <FLASH_SetErrorCode+0x60>)
 800701c:	61d3      	str	r3, [r2, #28]
    flags |= FLASH_FLAG_PGERR;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f043 0304 	orr.w	r3, r3, #4
 8007024:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8007026:	4a04      	ldr	r2, [pc, #16]	; (8007038 <FLASH_SetErrorCode+0x5c>)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	60d3      	str	r3, [r2, #12]
}  
 800702c:	bf00      	nop
 800702e:	370c      	adds	r7, #12
 8007030:	46bd      	mov	sp, r7
 8007032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007036:	4770      	bx	lr
 8007038:	40022000 	.word	0x40022000
 800703c:	200065f0 	.word	0x200065f0

08007040 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 800704e:	2300      	movs	r3, #0
 8007050:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007052:	4b2e      	ldr	r3, [pc, #184]	; (800710c <HAL_FLASHEx_Erase+0xcc>)
 8007054:	7e1b      	ldrb	r3, [r3, #24]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d101      	bne.n	800705e <HAL_FLASHEx_Erase+0x1e>
 800705a:	2302      	movs	r3, #2
 800705c:	e052      	b.n	8007104 <HAL_FLASHEx_Erase+0xc4>
 800705e:	4b2b      	ldr	r3, [pc, #172]	; (800710c <HAL_FLASHEx_Erase+0xcc>)
 8007060:	2201      	movs	r2, #1
 8007062:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b01      	cmp	r3, #1
 800706a:	d115      	bne.n	8007098 <HAL_FLASHEx_Erase+0x58>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800706c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007070:	f7ff ff74 	bl	8006f5c <FLASH_WaitForLastOperation>
 8007074:	4603      	mov	r3, r0
 8007076:	2b00      	cmp	r3, #0
 8007078:	d140      	bne.n	80070fc <HAL_FLASHEx_Erase+0xbc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800707a:	f000 f84b 	bl	8007114 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800707e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007082:	f7ff ff6b 	bl	8006f5c <FLASH_WaitForLastOperation>
 8007086:	4603      	mov	r3, r0
 8007088:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800708a:	4b21      	ldr	r3, [pc, #132]	; (8007110 <HAL_FLASHEx_Erase+0xd0>)
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	4a20      	ldr	r2, [pc, #128]	; (8007110 <HAL_FLASHEx_Erase+0xd0>)
 8007090:	f023 0304 	bic.w	r3, r3, #4
 8007094:	6113      	str	r3, [r2, #16]
 8007096:	e031      	b.n	80070fc <HAL_FLASHEx_Erase+0xbc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8007098:	f24c 3050 	movw	r0, #50000	; 0xc350
 800709c:	f7ff ff5e 	bl	8006f5c <FLASH_WaitForLastOperation>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d12a      	bne.n	80070fc <HAL_FLASHEx_Erase+0xbc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	f04f 32ff 	mov.w	r2, #4294967295
 80070ac:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	685b      	ldr	r3, [r3, #4]
 80070b2:	60bb      	str	r3, [r7, #8]
 80070b4:	e019      	b.n	80070ea <HAL_FLASHEx_Erase+0xaa>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80070b6:	68b8      	ldr	r0, [r7, #8]
 80070b8:	f000 f846 	bl	8007148 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80070bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80070c0:	f7ff ff4c 	bl	8006f5c <FLASH_WaitForLastOperation>
 80070c4:	4603      	mov	r3, r0
 80070c6:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80070c8:	4b11      	ldr	r3, [pc, #68]	; (8007110 <HAL_FLASHEx_Erase+0xd0>)
 80070ca:	691b      	ldr	r3, [r3, #16]
 80070cc:	4a10      	ldr	r2, [pc, #64]	; (8007110 <HAL_FLASHEx_Erase+0xd0>)
 80070ce:	f023 0302 	bic.w	r3, r3, #2
 80070d2:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d003      	beq.n	80070e2 <HAL_FLASHEx_Erase+0xa2>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	68ba      	ldr	r2, [r7, #8]
 80070de:	601a      	str	r2, [r3, #0]
            break;
 80070e0:	e00c      	b.n	80070fc <HAL_FLASHEx_Erase+0xbc>
            address += FLASH_PAGE_SIZE)
 80070e2:	68bb      	ldr	r3, [r7, #8]
 80070e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e8:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	02da      	lsls	r2, r3, #11
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	68ba      	ldr	r2, [r7, #8]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d3dc      	bcc.n	80070b6 <HAL_FLASHEx_Erase+0x76>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80070fc:	4b03      	ldr	r3, [pc, #12]	; (800710c <HAL_FLASHEx_Erase+0xcc>)
 80070fe:	2200      	movs	r2, #0
 8007100:	761a      	strb	r2, [r3, #24]

  return status;
 8007102:	7bfb      	ldrb	r3, [r7, #15]
}
 8007104:	4618      	mov	r0, r3
 8007106:	3710      	adds	r7, #16
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	200065f0 	.word	0x200065f0
 8007110:	40022000 	.word	0x40022000

08007114 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8007114:	b480      	push	{r7}
 8007116:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007118:	4b09      	ldr	r3, [pc, #36]	; (8007140 <FLASH_MassErase+0x2c>)
 800711a:	2200      	movs	r2, #0
 800711c:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 800711e:	4b09      	ldr	r3, [pc, #36]	; (8007144 <FLASH_MassErase+0x30>)
 8007120:	691b      	ldr	r3, [r3, #16]
 8007122:	4a08      	ldr	r2, [pc, #32]	; (8007144 <FLASH_MassErase+0x30>)
 8007124:	f043 0304 	orr.w	r3, r3, #4
 8007128:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800712a:	4b06      	ldr	r3, [pc, #24]	; (8007144 <FLASH_MassErase+0x30>)
 800712c:	691b      	ldr	r3, [r3, #16]
 800712e:	4a05      	ldr	r2, [pc, #20]	; (8007144 <FLASH_MassErase+0x30>)
 8007130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007134:	6113      	str	r3, [r2, #16]
}
 8007136:	bf00      	nop
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr
 8007140:	200065f0 	.word	0x200065f0
 8007144:	40022000 	.word	0x40022000

08007148 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007150:	4b0b      	ldr	r3, [pc, #44]	; (8007180 <FLASH_PageErase+0x38>)
 8007152:	2200      	movs	r2, #0
 8007154:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007156:	4b0b      	ldr	r3, [pc, #44]	; (8007184 <FLASH_PageErase+0x3c>)
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	4a0a      	ldr	r2, [pc, #40]	; (8007184 <FLASH_PageErase+0x3c>)
 800715c:	f043 0302 	orr.w	r3, r3, #2
 8007160:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8007162:	4a08      	ldr	r2, [pc, #32]	; (8007184 <FLASH_PageErase+0x3c>)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007168:	4b06      	ldr	r3, [pc, #24]	; (8007184 <FLASH_PageErase+0x3c>)
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	4a05      	ldr	r2, [pc, #20]	; (8007184 <FLASH_PageErase+0x3c>)
 800716e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007172:	6113      	str	r3, [r2, #16]
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	200065f0 	.word	0x200065f0
 8007184:	40022000 	.word	0x40022000

08007188 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007192:	2300      	movs	r3, #0
 8007194:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007196:	e154      	b.n	8007442 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	2101      	movs	r1, #1
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	fa01 f303 	lsl.w	r3, r1, r3
 80071a4:	4013      	ands	r3, r2
 80071a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	f000 8146 	beq.w	800743c <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	f003 0303 	and.w	r3, r3, #3
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d005      	beq.n	80071c8 <HAL_GPIO_Init+0x40>
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	f003 0303 	and.w	r3, r3, #3
 80071c4:	2b02      	cmp	r3, #2
 80071c6:	d130      	bne.n	800722a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	689b      	ldr	r3, [r3, #8]
 80071cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	005b      	lsls	r3, r3, #1
 80071d2:	2203      	movs	r2, #3
 80071d4:	fa02 f303 	lsl.w	r3, r2, r3
 80071d8:	43db      	mvns	r3, r3
 80071da:	693a      	ldr	r2, [r7, #16]
 80071dc:	4013      	ands	r3, r2
 80071de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	005b      	lsls	r3, r3, #1
 80071e8:	fa02 f303 	lsl.w	r3, r2, r3
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	4313      	orrs	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	693a      	ldr	r2, [r7, #16]
 80071f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80071fe:	2201      	movs	r2, #1
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	fa02 f303 	lsl.w	r3, r2, r3
 8007206:	43db      	mvns	r3, r3
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4013      	ands	r3, r2
 800720c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	091b      	lsrs	r3, r3, #4
 8007214:	f003 0201 	and.w	r2, r3, #1
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	fa02 f303 	lsl.w	r3, r2, r3
 800721e:	693a      	ldr	r2, [r7, #16]
 8007220:	4313      	orrs	r3, r2
 8007222:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	693a      	ldr	r2, [r7, #16]
 8007228:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	f003 0303 	and.w	r3, r3, #3
 8007232:	2b03      	cmp	r3, #3
 8007234:	d017      	beq.n	8007266 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	2203      	movs	r2, #3
 8007242:	fa02 f303 	lsl.w	r3, r2, r3
 8007246:	43db      	mvns	r3, r3
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	4013      	ands	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	689a      	ldr	r2, [r3, #8]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	005b      	lsls	r3, r3, #1
 8007256:	fa02 f303 	lsl.w	r3, r2, r3
 800725a:	693a      	ldr	r2, [r7, #16]
 800725c:	4313      	orrs	r3, r2
 800725e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	693a      	ldr	r2, [r7, #16]
 8007264:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	f003 0303 	and.w	r3, r3, #3
 800726e:	2b02      	cmp	r3, #2
 8007270:	d123      	bne.n	80072ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	08da      	lsrs	r2, r3, #3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	3208      	adds	r2, #8
 800727a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	220f      	movs	r2, #15
 800728a:	fa02 f303 	lsl.w	r3, r2, r3
 800728e:	43db      	mvns	r3, r3
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4013      	ands	r3, r2
 8007294:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	691a      	ldr	r2, [r3, #16]
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	f003 0307 	and.w	r3, r3, #7
 80072a0:	009b      	lsls	r3, r3, #2
 80072a2:	fa02 f303 	lsl.w	r3, r2, r3
 80072a6:	693a      	ldr	r2, [r7, #16]
 80072a8:	4313      	orrs	r3, r2
 80072aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	08da      	lsrs	r2, r3, #3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	3208      	adds	r2, #8
 80072b4:	6939      	ldr	r1, [r7, #16]
 80072b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	2203      	movs	r2, #3
 80072c6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ca:	43db      	mvns	r3, r3
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4013      	ands	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	f003 0203 	and.w	r2, r3, #3
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	005b      	lsls	r3, r3, #1
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80072ee:	683b      	ldr	r3, [r7, #0]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f000 80a0 	beq.w	800743c <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80072fc:	4b58      	ldr	r3, [pc, #352]	; (8007460 <HAL_GPIO_Init+0x2d8>)
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	4a57      	ldr	r2, [pc, #348]	; (8007460 <HAL_GPIO_Init+0x2d8>)
 8007302:	f043 0301 	orr.w	r3, r3, #1
 8007306:	6193      	str	r3, [r2, #24]
 8007308:	4b55      	ldr	r3, [pc, #340]	; (8007460 <HAL_GPIO_Init+0x2d8>)
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	60bb      	str	r3, [r7, #8]
 8007312:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007314:	4a53      	ldr	r2, [pc, #332]	; (8007464 <HAL_GPIO_Init+0x2dc>)
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	089b      	lsrs	r3, r3, #2
 800731a:	3302      	adds	r3, #2
 800731c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007320:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	f003 0303 	and.w	r3, r3, #3
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	220f      	movs	r2, #15
 800732c:	fa02 f303 	lsl.w	r3, r2, r3
 8007330:	43db      	mvns	r3, r3
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4013      	ands	r3, r2
 8007336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800733e:	d019      	beq.n	8007374 <HAL_GPIO_Init+0x1ec>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a49      	ldr	r2, [pc, #292]	; (8007468 <HAL_GPIO_Init+0x2e0>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d013      	beq.n	8007370 <HAL_GPIO_Init+0x1e8>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a48      	ldr	r2, [pc, #288]	; (800746c <HAL_GPIO_Init+0x2e4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d00d      	beq.n	800736c <HAL_GPIO_Init+0x1e4>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	4a47      	ldr	r2, [pc, #284]	; (8007470 <HAL_GPIO_Init+0x2e8>)
 8007354:	4293      	cmp	r3, r2
 8007356:	d007      	beq.n	8007368 <HAL_GPIO_Init+0x1e0>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a46      	ldr	r2, [pc, #280]	; (8007474 <HAL_GPIO_Init+0x2ec>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d101      	bne.n	8007364 <HAL_GPIO_Init+0x1dc>
 8007360:	2304      	movs	r3, #4
 8007362:	e008      	b.n	8007376 <HAL_GPIO_Init+0x1ee>
 8007364:	2305      	movs	r3, #5
 8007366:	e006      	b.n	8007376 <HAL_GPIO_Init+0x1ee>
 8007368:	2303      	movs	r3, #3
 800736a:	e004      	b.n	8007376 <HAL_GPIO_Init+0x1ee>
 800736c:	2302      	movs	r3, #2
 800736e:	e002      	b.n	8007376 <HAL_GPIO_Init+0x1ee>
 8007370:	2301      	movs	r3, #1
 8007372:	e000      	b.n	8007376 <HAL_GPIO_Init+0x1ee>
 8007374:	2300      	movs	r3, #0
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	f002 0203 	and.w	r2, r2, #3
 800737c:	0092      	lsls	r2, r2, #2
 800737e:	4093      	lsls	r3, r2
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	4313      	orrs	r3, r2
 8007384:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007386:	4937      	ldr	r1, [pc, #220]	; (8007464 <HAL_GPIO_Init+0x2dc>)
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	089b      	lsrs	r3, r3, #2
 800738c:	3302      	adds	r3, #2
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007394:	4b38      	ldr	r3, [pc, #224]	; (8007478 <HAL_GPIO_Init+0x2f0>)
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	43db      	mvns	r3, r3
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4013      	ands	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80073b0:	693a      	ldr	r2, [r7, #16]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4313      	orrs	r3, r2
 80073b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80073b8:	4a2f      	ldr	r2, [pc, #188]	; (8007478 <HAL_GPIO_Init+0x2f0>)
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80073be:	4b2e      	ldr	r3, [pc, #184]	; (8007478 <HAL_GPIO_Init+0x2f0>)
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	43db      	mvns	r3, r3
 80073c8:	693a      	ldr	r2, [r7, #16]
 80073ca:	4013      	ands	r3, r2
 80073cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d003      	beq.n	80073e2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80073da:	693a      	ldr	r2, [r7, #16]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4313      	orrs	r3, r2
 80073e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80073e2:	4a25      	ldr	r2, [pc, #148]	; (8007478 <HAL_GPIO_Init+0x2f0>)
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80073e8:	4b23      	ldr	r3, [pc, #140]	; (8007478 <HAL_GPIO_Init+0x2f0>)
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	43db      	mvns	r3, r3
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	4013      	ands	r3, r2
 80073f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007400:	2b00      	cmp	r3, #0
 8007402:	d003      	beq.n	800740c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8007404:	693a      	ldr	r2, [r7, #16]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4313      	orrs	r3, r2
 800740a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800740c:	4a1a      	ldr	r2, [pc, #104]	; (8007478 <HAL_GPIO_Init+0x2f0>)
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007412:	4b19      	ldr	r3, [pc, #100]	; (8007478 <HAL_GPIO_Init+0x2f0>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	43db      	mvns	r3, r3
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4013      	ands	r3, r2
 8007420:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800742a:	2b00      	cmp	r3, #0
 800742c:	d003      	beq.n	8007436 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800742e:	693a      	ldr	r2, [r7, #16]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	4313      	orrs	r3, r2
 8007434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8007436:	4a10      	ldr	r2, [pc, #64]	; (8007478 <HAL_GPIO_Init+0x2f0>)
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	3301      	adds	r3, #1
 8007440:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	fa22 f303 	lsr.w	r3, r2, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	f47f aea3 	bne.w	8007198 <HAL_GPIO_Init+0x10>
  }
}
 8007452:	bf00      	nop
 8007454:	bf00      	nop
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	40021000 	.word	0x40021000
 8007464:	40010000 	.word	0x40010000
 8007468:	48000400 	.word	0x48000400
 800746c:	48000800 	.word	0x48000800
 8007470:	48000c00 	.word	0x48000c00
 8007474:	48001000 	.word	0x48001000
 8007478:	40010400 	.word	0x40010400

0800747c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800747c:	b480      	push	{r7}
 800747e:	b085      	sub	sp, #20
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
 8007484:	460b      	mov	r3, r1
 8007486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	887b      	ldrh	r3, [r7, #2]
 800748e:	4013      	ands	r3, r2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d002      	beq.n	800749a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007494:	2301      	movs	r3, #1
 8007496:	73fb      	strb	r3, [r7, #15]
 8007498:	e001      	b.n	800749e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800749a:	2300      	movs	r3, #0
 800749c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800749e:	7bfb      	ldrb	r3, [r7, #15]
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3714      	adds	r7, #20
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	460b      	mov	r3, r1
 80074b6:	807b      	strh	r3, [r7, #2]
 80074b8:	4613      	mov	r3, r2
 80074ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80074bc:	787b      	ldrb	r3, [r7, #1]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d003      	beq.n	80074ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80074c2:	887a      	ldrh	r2, [r7, #2]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80074c8:	e002      	b.n	80074d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80074ca:	887a      	ldrh	r2, [r7, #2]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b082      	sub	sp, #8
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e081      	b.n	80075f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d106      	bne.n	8007508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f7fc fdbe 	bl	8004084 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2224      	movs	r2, #36	; 0x24
 800750c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0201 	bic.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685a      	ldr	r2, [r3, #4]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800752c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689a      	ldr	r2, [r3, #8]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800753c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d107      	bne.n	8007556 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	689a      	ldr	r2, [r3, #8]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007552:	609a      	str	r2, [r3, #8]
 8007554:	e006      	b.n	8007564 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	689a      	ldr	r2, [r3, #8]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007562:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	2b02      	cmp	r3, #2
 800756a:	d104      	bne.n	8007576 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007574:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	6812      	ldr	r2, [r2, #0]
 8007580:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007588:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68da      	ldr	r2, [r3, #12]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007598:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	691a      	ldr	r2, [r3, #16]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	699b      	ldr	r3, [r3, #24]
 80075aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	430a      	orrs	r2, r1
 80075b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	69d9      	ldr	r1, [r3, #28]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a1a      	ldr	r2, [r3, #32]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681a      	ldr	r2, [r3, #0]
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f042 0201 	orr.w	r2, r2, #1
 80075d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2220      	movs	r2, #32
 80075de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3708      	adds	r7, #8
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80075fa:	b480      	push	{r7}
 80075fc:	b083      	sub	sp, #12
 80075fe:	af00      	add	r7, sp, #0
 8007600:	6078      	str	r0, [r7, #4]
 8007602:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b20      	cmp	r3, #32
 800760e:	d138      	bne.n	8007682 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007616:	2b01      	cmp	r3, #1
 8007618:	d101      	bne.n	800761e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800761a:	2302      	movs	r3, #2
 800761c:	e032      	b.n	8007684 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2201      	movs	r2, #1
 8007622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2224      	movs	r2, #36	; 0x24
 800762a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f022 0201 	bic.w	r2, r2, #1
 800763c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800764c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6819      	ldr	r1, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	683a      	ldr	r2, [r7, #0]
 800765a:	430a      	orrs	r2, r1
 800765c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f042 0201 	orr.w	r2, r2, #1
 800766c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	e000      	b.n	8007684 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007682:	2302      	movs	r3, #2
  }
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076a0:	b2db      	uxtb	r3, r3
 80076a2:	2b20      	cmp	r3, #32
 80076a4:	d139      	bne.n	800771a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d101      	bne.n	80076b4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80076b0:	2302      	movs	r3, #2
 80076b2:	e033      	b.n	800771c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2224      	movs	r2, #36	; 0x24
 80076c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f022 0201 	bic.w	r2, r2, #1
 80076d2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80076e2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	021b      	lsls	r3, r3, #8
 80076e8:	68fa      	ldr	r2, [r7, #12]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681a      	ldr	r2, [r3, #0]
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f042 0201 	orr.w	r2, r2, #1
 8007704:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007716:	2300      	movs	r3, #0
 8007718:	e000      	b.n	800771c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800771a:	2302      	movs	r3, #2
  }
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800772e:	af00      	add	r7, sp, #0
 8007730:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007734:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007738:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800773a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800773e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d102      	bne.n	800774e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
 800774a:	f001 b823 	b.w	8008794 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800774e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007752:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	f000 817d 	beq.w	8007a5e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8007764:	4bbc      	ldr	r3, [pc, #752]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f003 030c 	and.w	r3, r3, #12
 800776c:	2b04      	cmp	r3, #4
 800776e:	d00c      	beq.n	800778a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8007770:	4bb9      	ldr	r3, [pc, #740]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f003 030c 	and.w	r3, r3, #12
 8007778:	2b08      	cmp	r3, #8
 800777a:	d15c      	bne.n	8007836 <HAL_RCC_OscConfig+0x10e>
 800777c:	4bb6      	ldr	r3, [pc, #728]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007788:	d155      	bne.n	8007836 <HAL_RCC_OscConfig+0x10e>
 800778a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800778e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007792:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8007796:	fa93 f3a3 	rbit	r3, r3
 800779a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800779e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077a2:	fab3 f383 	clz	r3, r3
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	095b      	lsrs	r3, r3, #5
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	f043 0301 	orr.w	r3, r3, #1
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d102      	bne.n	80077bc <HAL_RCC_OscConfig+0x94>
 80077b6:	4ba8      	ldr	r3, [pc, #672]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	e015      	b.n	80077e8 <HAL_RCC_OscConfig+0xc0>
 80077bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077c0:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80077c8:	fa93 f3a3 	rbit	r3, r3
 80077cc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80077d0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80077d4:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80077d8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80077dc:	fa93 f3a3 	rbit	r3, r3
 80077e0:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80077e4:	4b9c      	ldr	r3, [pc, #624]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80077ec:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80077f0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80077f4:	fa92 f2a2 	rbit	r2, r2
 80077f8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80077fc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8007800:	fab2 f282 	clz	r2, r2
 8007804:	b2d2      	uxtb	r2, r2
 8007806:	f042 0220 	orr.w	r2, r2, #32
 800780a:	b2d2      	uxtb	r2, r2
 800780c:	f002 021f 	and.w	r2, r2, #31
 8007810:	2101      	movs	r1, #1
 8007812:	fa01 f202 	lsl.w	r2, r1, r2
 8007816:	4013      	ands	r3, r2
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 811f 	beq.w	8007a5c <HAL_RCC_OscConfig+0x334>
 800781e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007822:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2b00      	cmp	r3, #0
 800782c:	f040 8116 	bne.w	8007a5c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	f000 bfaf 	b.w	8008794 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800783a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007846:	d106      	bne.n	8007856 <HAL_RCC_OscConfig+0x12e>
 8007848:	4b83      	ldr	r3, [pc, #524]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a82      	ldr	r2, [pc, #520]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 800784e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007852:	6013      	str	r3, [r2, #0]
 8007854:	e036      	b.n	80078c4 <HAL_RCC_OscConfig+0x19c>
 8007856:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800785a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10c      	bne.n	8007880 <HAL_RCC_OscConfig+0x158>
 8007866:	4b7c      	ldr	r3, [pc, #496]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a7b      	ldr	r2, [pc, #492]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 800786c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	4b79      	ldr	r3, [pc, #484]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a78      	ldr	r2, [pc, #480]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 8007878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800787c:	6013      	str	r3, [r2, #0]
 800787e:	e021      	b.n	80078c4 <HAL_RCC_OscConfig+0x19c>
 8007880:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007884:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685b      	ldr	r3, [r3, #4]
 800788c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007890:	d10c      	bne.n	80078ac <HAL_RCC_OscConfig+0x184>
 8007892:	4b71      	ldr	r3, [pc, #452]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4a70      	ldr	r2, [pc, #448]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 8007898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	4b6e      	ldr	r3, [pc, #440]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a6d      	ldr	r2, [pc, #436]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 80078a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	e00b      	b.n	80078c4 <HAL_RCC_OscConfig+0x19c>
 80078ac:	4b6a      	ldr	r3, [pc, #424]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a69      	ldr	r2, [pc, #420]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 80078b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078b6:	6013      	str	r3, [r2, #0]
 80078b8:	4b67      	ldr	r3, [pc, #412]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a66      	ldr	r2, [pc, #408]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 80078be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078c2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80078c4:	4b64      	ldr	r3, [pc, #400]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 80078c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c8:	f023 020f 	bic.w	r2, r3, #15
 80078cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	495f      	ldr	r1, [pc, #380]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 80078da:	4313      	orrs	r3, r2
 80078dc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80078e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d059      	beq.n	80079a2 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078ee:	f7fc ff51 	bl	8004794 <HAL_GetTick>
 80078f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078f6:	e00a      	b.n	800790e <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078f8:	f7fc ff4c 	bl	8004794 <HAL_GetTick>
 80078fc:	4602      	mov	r2, r0
 80078fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b64      	cmp	r3, #100	; 0x64
 8007906:	d902      	bls.n	800790e <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	f000 bf43 	b.w	8008794 <HAL_RCC_OscConfig+0x106c>
 800790e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007912:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007916:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800791a:	fa93 f3a3 	rbit	r3, r3
 800791e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8007922:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007926:	fab3 f383 	clz	r3, r3
 800792a:	b2db      	uxtb	r3, r3
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	b2db      	uxtb	r3, r3
 8007930:	f043 0301 	orr.w	r3, r3, #1
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b01      	cmp	r3, #1
 8007938:	d102      	bne.n	8007940 <HAL_RCC_OscConfig+0x218>
 800793a:	4b47      	ldr	r3, [pc, #284]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	e015      	b.n	800796c <HAL_RCC_OscConfig+0x244>
 8007940:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007944:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007948:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800794c:	fa93 f3a3 	rbit	r3, r3
 8007950:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8007954:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007958:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800795c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8007960:	fa93 f3a3 	rbit	r3, r3
 8007964:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8007968:	4b3b      	ldr	r3, [pc, #236]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 800796a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007970:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8007974:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8007978:	fa92 f2a2 	rbit	r2, r2
 800797c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8007980:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8007984:	fab2 f282 	clz	r2, r2
 8007988:	b2d2      	uxtb	r2, r2
 800798a:	f042 0220 	orr.w	r2, r2, #32
 800798e:	b2d2      	uxtb	r2, r2
 8007990:	f002 021f 	and.w	r2, r2, #31
 8007994:	2101      	movs	r1, #1
 8007996:	fa01 f202 	lsl.w	r2, r1, r2
 800799a:	4013      	ands	r3, r2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d0ab      	beq.n	80078f8 <HAL_RCC_OscConfig+0x1d0>
 80079a0:	e05d      	b.n	8007a5e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079a2:	f7fc fef7 	bl	8004794 <HAL_GetTick>
 80079a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079aa:	e00a      	b.n	80079c2 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80079ac:	f7fc fef2 	bl	8004794 <HAL_GetTick>
 80079b0:	4602      	mov	r2, r0
 80079b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80079b6:	1ad3      	subs	r3, r2, r3
 80079b8:	2b64      	cmp	r3, #100	; 0x64
 80079ba:	d902      	bls.n	80079c2 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 80079bc:	2303      	movs	r3, #3
 80079be:	f000 bee9 	b.w	8008794 <HAL_RCC_OscConfig+0x106c>
 80079c2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079c6:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079ca:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80079ce:	fa93 f3a3 	rbit	r3, r3
 80079d2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80079d6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80079da:	fab3 f383 	clz	r3, r3
 80079de:	b2db      	uxtb	r3, r3
 80079e0:	095b      	lsrs	r3, r3, #5
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	f043 0301 	orr.w	r3, r3, #1
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d102      	bne.n	80079f4 <HAL_RCC_OscConfig+0x2cc>
 80079ee:	4b1a      	ldr	r3, [pc, #104]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	e015      	b.n	8007a20 <HAL_RCC_OscConfig+0x2f8>
 80079f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80079f8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80079fc:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8007a00:	fa93 f3a3 	rbit	r3, r3
 8007a04:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8007a08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a0c:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8007a10:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8007a14:	fa93 f3a3 	rbit	r3, r3
 8007a18:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8007a1c:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <HAL_RCC_OscConfig+0x330>)
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a20:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007a24:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8007a28:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8007a2c:	fa92 f2a2 	rbit	r2, r2
 8007a30:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8007a34:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8007a38:	fab2 f282 	clz	r2, r2
 8007a3c:	b2d2      	uxtb	r2, r2
 8007a3e:	f042 0220 	orr.w	r2, r2, #32
 8007a42:	b2d2      	uxtb	r2, r2
 8007a44:	f002 021f 	and.w	r2, r2, #31
 8007a48:	2101      	movs	r1, #1
 8007a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8007a4e:	4013      	ands	r3, r2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1ab      	bne.n	80079ac <HAL_RCC_OscConfig+0x284>
 8007a54:	e003      	b.n	8007a5e <HAL_RCC_OscConfig+0x336>
 8007a56:	bf00      	nop
 8007a58:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007a62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f003 0302 	and.w	r3, r3, #2
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 817d 	beq.w	8007d6e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8007a74:	4ba6      	ldr	r3, [pc, #664]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f003 030c 	and.w	r3, r3, #12
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8007a80:	4ba3      	ldr	r3, [pc, #652]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	f003 030c 	and.w	r3, r3, #12
 8007a88:	2b08      	cmp	r3, #8
 8007a8a:	d172      	bne.n	8007b72 <HAL_RCC_OscConfig+0x44a>
 8007a8c:	4ba0      	ldr	r3, [pc, #640]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d16c      	bne.n	8007b72 <HAL_RCC_OscConfig+0x44a>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a9e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8007aa2:	fa93 f3a3 	rbit	r3, r3
 8007aa6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8007aaa:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007aae:	fab3 f383 	clz	r3, r3
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	095b      	lsrs	r3, r3, #5
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f043 0301 	orr.w	r3, r3, #1
 8007abc:	b2db      	uxtb	r3, r3
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d102      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x3a0>
 8007ac2:	4b93      	ldr	r3, [pc, #588]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	e013      	b.n	8007af0 <HAL_RCC_OscConfig+0x3c8>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ace:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8007ad2:	fa93 f3a3 	rbit	r3, r3
 8007ad6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8007ada:	2302      	movs	r3, #2
 8007adc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8007ae0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8007ae4:	fa93 f3a3 	rbit	r3, r3
 8007ae8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8007aec:	4b88      	ldr	r3, [pc, #544]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af0:	2202      	movs	r2, #2
 8007af2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8007af6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8007afa:	fa92 f2a2 	rbit	r2, r2
 8007afe:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8007b02:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8007b06:	fab2 f282 	clz	r2, r2
 8007b0a:	b2d2      	uxtb	r2, r2
 8007b0c:	f042 0220 	orr.w	r2, r2, #32
 8007b10:	b2d2      	uxtb	r2, r2
 8007b12:	f002 021f 	and.w	r2, r2, #31
 8007b16:	2101      	movs	r1, #1
 8007b18:	fa01 f202 	lsl.w	r2, r1, r2
 8007b1c:	4013      	ands	r3, r2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d00a      	beq.n	8007b38 <HAL_RCC_OscConfig+0x410>
 8007b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b01      	cmp	r3, #1
 8007b30:	d002      	beq.n	8007b38 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8007b32:	2301      	movs	r3, #1
 8007b34:	f000 be2e 	b.w	8008794 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b38:	4b75      	ldr	r3, [pc, #468]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	695b      	ldr	r3, [r3, #20]
 8007b4c:	21f8      	movs	r1, #248	; 0xf8
 8007b4e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b52:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8007b56:	fa91 f1a1 	rbit	r1, r1
 8007b5a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8007b5e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8007b62:	fab1 f181 	clz	r1, r1
 8007b66:	b2c9      	uxtb	r1, r1
 8007b68:	408b      	lsls	r3, r1
 8007b6a:	4969      	ldr	r1, [pc, #420]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b70:	e0fd      	b.n	8007d6e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007b76:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	691b      	ldr	r3, [r3, #16]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 8088 	beq.w	8007c94 <HAL_RCC_OscConfig+0x56c>
 8007b84:	2301      	movs	r3, #1
 8007b86:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b8a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8007b8e:	fa93 f3a3 	rbit	r3, r3
 8007b92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8007b96:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b9a:	fab3 f383 	clz	r3, r3
 8007b9e:	b2db      	uxtb	r3, r3
 8007ba0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007ba4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	461a      	mov	r2, r3
 8007bac:	2301      	movs	r3, #1
 8007bae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bb0:	f7fc fdf0 	bl	8004794 <HAL_GetTick>
 8007bb4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bb8:	e00a      	b.n	8007bd0 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bba:	f7fc fdeb 	bl	8004794 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d902      	bls.n	8007bd0 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	f000 bde2 	b.w	8008794 <HAL_RCC_OscConfig+0x106c>
 8007bd0:	2302      	movs	r3, #2
 8007bd2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bd6:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8007bda:	fa93 f3a3 	rbit	r3, r3
 8007bde:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8007be2:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007be6:	fab3 f383 	clz	r3, r3
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	095b      	lsrs	r3, r3, #5
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	b2db      	uxtb	r3, r3
 8007bf6:	2b01      	cmp	r3, #1
 8007bf8:	d102      	bne.n	8007c00 <HAL_RCC_OscConfig+0x4d8>
 8007bfa:	4b45      	ldr	r3, [pc, #276]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	e013      	b.n	8007c28 <HAL_RCC_OscConfig+0x500>
 8007c00:	2302      	movs	r3, #2
 8007c02:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c06:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8007c0a:	fa93 f3a3 	rbit	r3, r3
 8007c0e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8007c12:	2302      	movs	r3, #2
 8007c14:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8007c18:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8007c1c:	fa93 f3a3 	rbit	r3, r3
 8007c20:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8007c24:	4b3a      	ldr	r3, [pc, #232]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c28:	2202      	movs	r2, #2
 8007c2a:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8007c2e:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8007c32:	fa92 f2a2 	rbit	r2, r2
 8007c36:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8007c3a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8007c3e:	fab2 f282 	clz	r2, r2
 8007c42:	b2d2      	uxtb	r2, r2
 8007c44:	f042 0220 	orr.w	r2, r2, #32
 8007c48:	b2d2      	uxtb	r2, r2
 8007c4a:	f002 021f 	and.w	r2, r2, #31
 8007c4e:	2101      	movs	r1, #1
 8007c50:	fa01 f202 	lsl.w	r2, r1, r2
 8007c54:	4013      	ands	r3, r2
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d0af      	beq.n	8007bba <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c5a:	4b2d      	ldr	r3, [pc, #180]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007c66:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695b      	ldr	r3, [r3, #20]
 8007c6e:	21f8      	movs	r1, #248	; 0xf8
 8007c70:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c74:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8007c78:	fa91 f1a1 	rbit	r1, r1
 8007c7c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8007c80:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8007c84:	fab1 f181 	clz	r1, r1
 8007c88:	b2c9      	uxtb	r1, r1
 8007c8a:	408b      	lsls	r3, r1
 8007c8c:	4920      	ldr	r1, [pc, #128]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	600b      	str	r3, [r1, #0]
 8007c92:	e06c      	b.n	8007d6e <HAL_RCC_OscConfig+0x646>
 8007c94:	2301      	movs	r3, #1
 8007c96:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007c9e:	fa93 f3a3 	rbit	r3, r3
 8007ca2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8007ca6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007caa:	fab3 f383 	clz	r3, r3
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8007cb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8007cb8:	009b      	lsls	r3, r3, #2
 8007cba:	461a      	mov	r2, r3
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007cc0:	f7fc fd68 	bl	8004794 <HAL_GetTick>
 8007cc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cc8:	e00a      	b.n	8007ce0 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007cca:	f7fc fd63 	bl	8004794 <HAL_GetTick>
 8007cce:	4602      	mov	r2, r0
 8007cd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d902      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	f000 bd5a 	b.w	8008794 <HAL_RCC_OscConfig+0x106c>
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ce6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007cea:	fa93 f3a3 	rbit	r3, r3
 8007cee:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8007cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cf6:	fab3 f383 	clz	r3, r3
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	095b      	lsrs	r3, r3, #5
 8007cfe:	b2db      	uxtb	r3, r3
 8007d00:	f043 0301 	orr.w	r3, r3, #1
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d104      	bne.n	8007d14 <HAL_RCC_OscConfig+0x5ec>
 8007d0a:	4b01      	ldr	r3, [pc, #4]	; (8007d10 <HAL_RCC_OscConfig+0x5e8>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	e015      	b.n	8007d3c <HAL_RCC_OscConfig+0x614>
 8007d10:	40021000 	.word	0x40021000
 8007d14:	2302      	movs	r3, #2
 8007d16:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007d1e:	fa93 f3a3 	rbit	r3, r3
 8007d22:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8007d26:	2302      	movs	r3, #2
 8007d28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8007d2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007d30:	fa93 f3a3 	rbit	r3, r3
 8007d34:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8007d38:	4bc8      	ldr	r3, [pc, #800]	; (800805c <HAL_RCC_OscConfig+0x934>)
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8007d42:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8007d46:	fa92 f2a2 	rbit	r2, r2
 8007d4a:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8007d4e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8007d52:	fab2 f282 	clz	r2, r2
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	f042 0220 	orr.w	r2, r2, #32
 8007d5c:	b2d2      	uxtb	r2, r2
 8007d5e:	f002 021f 	and.w	r2, r2, #31
 8007d62:	2101      	movs	r1, #1
 8007d64:	fa01 f202 	lsl.w	r2, r1, r2
 8007d68:	4013      	ands	r3, r2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1ad      	bne.n	8007cca <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f003 0308 	and.w	r3, r3, #8
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	f000 8110 	beq.w	8007fa4 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007d88:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	699b      	ldr	r3, [r3, #24]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d079      	beq.n	8007e88 <HAL_RCC_OscConfig+0x760>
 8007d94:	2301      	movs	r3, #1
 8007d96:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007d9e:	fa93 f3a3 	rbit	r3, r3
 8007da2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8007da6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007daa:	fab3 f383 	clz	r3, r3
 8007dae:	b2db      	uxtb	r3, r3
 8007db0:	461a      	mov	r2, r3
 8007db2:	4bab      	ldr	r3, [pc, #684]	; (8008060 <HAL_RCC_OscConfig+0x938>)
 8007db4:	4413      	add	r3, r2
 8007db6:	009b      	lsls	r3, r3, #2
 8007db8:	461a      	mov	r2, r3
 8007dba:	2301      	movs	r3, #1
 8007dbc:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007dbe:	f7fc fce9 	bl	8004794 <HAL_GetTick>
 8007dc2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007dc6:	e00a      	b.n	8007dde <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007dc8:	f7fc fce4 	bl	8004794 <HAL_GetTick>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007dd2:	1ad3      	subs	r3, r2, r3
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d902      	bls.n	8007dde <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8007dd8:	2303      	movs	r3, #3
 8007dda:	f000 bcdb 	b.w	8008794 <HAL_RCC_OscConfig+0x106c>
 8007dde:	2302      	movs	r3, #2
 8007de0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007de4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8007de8:	fa93 f3a3 	rbit	r3, r3
 8007dec:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007df4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007df8:	2202      	movs	r2, #2
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e00:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	fa93 f2a3 	rbit	r2, r3
 8007e0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	601a      	str	r2, [r3, #0]
 8007e20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	fa93 f2a3 	rbit	r2, r3
 8007e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e32:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8007e36:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007e38:	4b88      	ldr	r3, [pc, #544]	; (800805c <HAL_RCC_OscConfig+0x934>)
 8007e3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e3c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e40:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007e44:	2102      	movs	r1, #2
 8007e46:	6019      	str	r1, [r3, #0]
 8007e48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e4c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	fa93 f1a3 	rbit	r1, r3
 8007e56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e5a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007e5e:	6019      	str	r1, [r3, #0]
  return result;
 8007e60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	fab3 f383 	clz	r3, r3
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	f003 031f 	and.w	r3, r3, #31
 8007e7a:	2101      	movs	r1, #1
 8007e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007e80:	4013      	ands	r3, r2
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0a0      	beq.n	8007dc8 <HAL_RCC_OscConfig+0x6a0>
 8007e86:	e08d      	b.n	8007fa4 <HAL_RCC_OscConfig+0x87c>
 8007e88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e8c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007e90:	2201      	movs	r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007e94:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007e98:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	fa93 f2a3 	rbit	r2, r3
 8007ea2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007ea6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007eaa:	601a      	str	r2, [r3, #0]
  return result;
 8007eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eb0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8007eb4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007eb6:	fab3 f383 	clz	r3, r3
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	4b68      	ldr	r3, [pc, #416]	; (8008060 <HAL_RCC_OscConfig+0x938>)
 8007ec0:	4413      	add	r3, r2
 8007ec2:	009b      	lsls	r3, r3, #2
 8007ec4:	461a      	mov	r2, r3
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007eca:	f7fc fc63 	bl	8004794 <HAL_GetTick>
 8007ece:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ed2:	e00a      	b.n	8007eea <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007ed4:	f7fc fc5e 	bl	8004794 <HAL_GetTick>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d902      	bls.n	8007eea <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	f000 bc55 	b.w	8008794 <HAL_RCC_OscConfig+0x106c>
 8007eea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007eee:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007ef2:	2202      	movs	r2, #2
 8007ef4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ef6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007efa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	fa93 f2a3 	rbit	r2, r3
 8007f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f08:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8007f0c:	601a      	str	r2, [r3, #0]
 8007f0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f12:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007f16:	2202      	movs	r2, #2
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f1e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	fa93 f2a3 	rbit	r2, r3
 8007f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8007f30:	601a      	str	r2, [r3, #0]
 8007f32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f3a:	2202      	movs	r2, #2
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	fa93 f2a3 	rbit	r2, r3
 8007f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f50:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8007f54:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007f56:	4b41      	ldr	r3, [pc, #260]	; (800805c <HAL_RCC_OscConfig+0x934>)
 8007f58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f5e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007f62:	2102      	movs	r1, #2
 8007f64:	6019      	str	r1, [r3, #0]
 8007f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f6a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	fa93 f1a3 	rbit	r1, r3
 8007f74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f78:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007f7c:	6019      	str	r1, [r3, #0]
  return result;
 8007f7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007f82:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	fab3 f383 	clz	r3, r3
 8007f8c:	b2db      	uxtb	r3, r3
 8007f8e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8007f92:	b2db      	uxtb	r3, r3
 8007f94:	f003 031f 	and.w	r3, r3, #31
 8007f98:	2101      	movs	r1, #1
 8007f9a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f9e:	4013      	ands	r3, r2
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d197      	bne.n	8007ed4 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007fa4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fa8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f003 0304 	and.w	r3, r3, #4
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	f000 81a1 	beq.w	80082fc <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007fc0:	4b26      	ldr	r3, [pc, #152]	; (800805c <HAL_RCC_OscConfig+0x934>)
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d116      	bne.n	8007ffa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fcc:	4b23      	ldr	r3, [pc, #140]	; (800805c <HAL_RCC_OscConfig+0x934>)
 8007fce:	69db      	ldr	r3, [r3, #28]
 8007fd0:	4a22      	ldr	r2, [pc, #136]	; (800805c <HAL_RCC_OscConfig+0x934>)
 8007fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fd6:	61d3      	str	r3, [r2, #28]
 8007fd8:	4b20      	ldr	r3, [pc, #128]	; (800805c <HAL_RCC_OscConfig+0x934>)
 8007fda:	69db      	ldr	r3, [r3, #28]
 8007fdc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8007fe0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fe4:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8007fee:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8007ff2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ffa:	4b1a      	ldr	r3, [pc, #104]	; (8008064 <HAL_RCC_OscConfig+0x93c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008002:	2b00      	cmp	r3, #0
 8008004:	d11a      	bne.n	800803c <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008006:	4b17      	ldr	r3, [pc, #92]	; (8008064 <HAL_RCC_OscConfig+0x93c>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a16      	ldr	r2, [pc, #88]	; (8008064 <HAL_RCC_OscConfig+0x93c>)
 800800c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008010:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008012:	f7fc fbbf 	bl	8004794 <HAL_GetTick>
 8008016:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800801a:	e009      	b.n	8008030 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800801c:	f7fc fbba 	bl	8004794 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008026:	1ad3      	subs	r3, r2, r3
 8008028:	2b64      	cmp	r3, #100	; 0x64
 800802a:	d901      	bls.n	8008030 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 800802c:	2303      	movs	r3, #3
 800802e:	e3b1      	b.n	8008794 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008030:	4b0c      	ldr	r3, [pc, #48]	; (8008064 <HAL_RCC_OscConfig+0x93c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0ef      	beq.n	800801c <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800803c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008040:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d10d      	bne.n	8008068 <HAL_RCC_OscConfig+0x940>
 800804c:	4b03      	ldr	r3, [pc, #12]	; (800805c <HAL_RCC_OscConfig+0x934>)
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	4a02      	ldr	r2, [pc, #8]	; (800805c <HAL_RCC_OscConfig+0x934>)
 8008052:	f043 0301 	orr.w	r3, r3, #1
 8008056:	6213      	str	r3, [r2, #32]
 8008058:	e03c      	b.n	80080d4 <HAL_RCC_OscConfig+0x9ac>
 800805a:	bf00      	nop
 800805c:	40021000 	.word	0x40021000
 8008060:	10908120 	.word	0x10908120
 8008064:	40007000 	.word	0x40007000
 8008068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800806c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d10c      	bne.n	8008092 <HAL_RCC_OscConfig+0x96a>
 8008078:	4bc1      	ldr	r3, [pc, #772]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	4ac0      	ldr	r2, [pc, #768]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 800807e:	f023 0301 	bic.w	r3, r3, #1
 8008082:	6213      	str	r3, [r2, #32]
 8008084:	4bbe      	ldr	r3, [pc, #760]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 8008086:	6a1b      	ldr	r3, [r3, #32]
 8008088:	4abd      	ldr	r2, [pc, #756]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 800808a:	f023 0304 	bic.w	r3, r3, #4
 800808e:	6213      	str	r3, [r2, #32]
 8008090:	e020      	b.n	80080d4 <HAL_RCC_OscConfig+0x9ac>
 8008092:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008096:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
 800809e:	2b05      	cmp	r3, #5
 80080a0:	d10c      	bne.n	80080bc <HAL_RCC_OscConfig+0x994>
 80080a2:	4bb7      	ldr	r3, [pc, #732]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	4ab6      	ldr	r2, [pc, #728]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 80080a8:	f043 0304 	orr.w	r3, r3, #4
 80080ac:	6213      	str	r3, [r2, #32]
 80080ae:	4bb4      	ldr	r3, [pc, #720]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	4ab3      	ldr	r2, [pc, #716]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 80080b4:	f043 0301 	orr.w	r3, r3, #1
 80080b8:	6213      	str	r3, [r2, #32]
 80080ba:	e00b      	b.n	80080d4 <HAL_RCC_OscConfig+0x9ac>
 80080bc:	4bb0      	ldr	r3, [pc, #704]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	4aaf      	ldr	r2, [pc, #700]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 80080c2:	f023 0301 	bic.w	r3, r3, #1
 80080c6:	6213      	str	r3, [r2, #32]
 80080c8:	4bad      	ldr	r3, [pc, #692]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 80080ca:	6a1b      	ldr	r3, [r3, #32]
 80080cc:	4aac      	ldr	r2, [pc, #688]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 80080ce:	f023 0304 	bic.w	r3, r3, #4
 80080d2:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80080d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f000 8081 	beq.w	80081e8 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080e6:	f7fc fb55 	bl	8004794 <HAL_GetTick>
 80080ea:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80080ee:	e00b      	b.n	8008108 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80080f0:	f7fc fb50 	bl	8004794 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80080fa:	1ad3      	subs	r3, r2, r3
 80080fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008100:	4293      	cmp	r3, r2
 8008102:	d901      	bls.n	8008108 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8008104:	2303      	movs	r3, #3
 8008106:	e345      	b.n	8008794 <HAL_RCC_OscConfig+0x106c>
 8008108:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800810c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8008110:	2202      	movs	r2, #2
 8008112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008118:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	fa93 f2a3 	rbit	r2, r3
 8008122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008126:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800812a:	601a      	str	r2, [r3, #0]
 800812c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008130:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008134:	2202      	movs	r2, #2
 8008136:	601a      	str	r2, [r3, #0]
 8008138:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800813c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	fa93 f2a3 	rbit	r2, r3
 8008146:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800814a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800814e:	601a      	str	r2, [r3, #0]
  return result;
 8008150:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008154:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8008158:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800815a:	fab3 f383 	clz	r3, r3
 800815e:	b2db      	uxtb	r3, r3
 8008160:	095b      	lsrs	r3, r3, #5
 8008162:	b2db      	uxtb	r3, r3
 8008164:	f043 0302 	orr.w	r3, r3, #2
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b02      	cmp	r3, #2
 800816c:	d102      	bne.n	8008174 <HAL_RCC_OscConfig+0xa4c>
 800816e:	4b84      	ldr	r3, [pc, #528]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 8008170:	6a1b      	ldr	r3, [r3, #32]
 8008172:	e013      	b.n	800819c <HAL_RCC_OscConfig+0xa74>
 8008174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008178:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800817c:	2202      	movs	r2, #2
 800817e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008184:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	fa93 f2a3 	rbit	r2, r3
 800818e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008192:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8008196:	601a      	str	r2, [r3, #0]
 8008198:	4b79      	ldr	r3, [pc, #484]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 800819a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800819c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081a0:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80081a4:	2102      	movs	r1, #2
 80081a6:	6011      	str	r1, [r2, #0]
 80081a8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081ac:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80081b0:	6812      	ldr	r2, [r2, #0]
 80081b2:	fa92 f1a2 	rbit	r1, r2
 80081b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081ba:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80081be:	6011      	str	r1, [r2, #0]
  return result;
 80081c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80081c4:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80081c8:	6812      	ldr	r2, [r2, #0]
 80081ca:	fab2 f282 	clz	r2, r2
 80081ce:	b2d2      	uxtb	r2, r2
 80081d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	f002 021f 	and.w	r2, r2, #31
 80081da:	2101      	movs	r1, #1
 80081dc:	fa01 f202 	lsl.w	r2, r1, r2
 80081e0:	4013      	ands	r3, r2
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d084      	beq.n	80080f0 <HAL_RCC_OscConfig+0x9c8>
 80081e6:	e07f      	b.n	80082e8 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80081e8:	f7fc fad4 	bl	8004794 <HAL_GetTick>
 80081ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80081f0:	e00b      	b.n	800820a <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80081f2:	f7fc facf 	bl	8004794 <HAL_GetTick>
 80081f6:	4602      	mov	r2, r0
 80081f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008202:	4293      	cmp	r3, r2
 8008204:	d901      	bls.n	800820a <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8008206:	2303      	movs	r3, #3
 8008208:	e2c4      	b.n	8008794 <HAL_RCC_OscConfig+0x106c>
 800820a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800820e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8008212:	2202      	movs	r2, #2
 8008214:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008216:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800821a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	fa93 f2a3 	rbit	r2, r3
 8008224:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008228:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800822c:	601a      	str	r2, [r3, #0]
 800822e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008232:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008236:	2202      	movs	r2, #2
 8008238:	601a      	str	r2, [r3, #0]
 800823a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800823e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	fa93 f2a3 	rbit	r2, r3
 8008248:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800824c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8008250:	601a      	str	r2, [r3, #0]
  return result;
 8008252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008256:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800825a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800825c:	fab3 f383 	clz	r3, r3
 8008260:	b2db      	uxtb	r3, r3
 8008262:	095b      	lsrs	r3, r3, #5
 8008264:	b2db      	uxtb	r3, r3
 8008266:	f043 0302 	orr.w	r3, r3, #2
 800826a:	b2db      	uxtb	r3, r3
 800826c:	2b02      	cmp	r3, #2
 800826e:	d102      	bne.n	8008276 <HAL_RCC_OscConfig+0xb4e>
 8008270:	4b43      	ldr	r3, [pc, #268]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	e013      	b.n	800829e <HAL_RCC_OscConfig+0xb76>
 8008276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800827a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800827e:	2202      	movs	r2, #2
 8008280:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008282:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008286:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	fa93 f2a3 	rbit	r2, r3
 8008290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008294:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	4b39      	ldr	r3, [pc, #228]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 800829c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082a2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80082a6:	2102      	movs	r1, #2
 80082a8:	6011      	str	r1, [r2, #0]
 80082aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082ae:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80082b2:	6812      	ldr	r2, [r2, #0]
 80082b4:	fa92 f1a2 	rbit	r1, r2
 80082b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082bc:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80082c0:	6011      	str	r1, [r2, #0]
  return result;
 80082c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80082c6:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80082ca:	6812      	ldr	r2, [r2, #0]
 80082cc:	fab2 f282 	clz	r2, r2
 80082d0:	b2d2      	uxtb	r2, r2
 80082d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082d6:	b2d2      	uxtb	r2, r2
 80082d8:	f002 021f 	and.w	r2, r2, #31
 80082dc:	2101      	movs	r1, #1
 80082de:	fa01 f202 	lsl.w	r2, r1, r2
 80082e2:	4013      	ands	r3, r2
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d184      	bne.n	80081f2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80082e8:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	d105      	bne.n	80082fc <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80082f0:	4b23      	ldr	r3, [pc, #140]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 80082f2:	69db      	ldr	r3, [r3, #28]
 80082f4:	4a22      	ldr	r2, [pc, #136]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 80082f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082fa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80082fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008300:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 8242 	beq.w	8008792 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800830e:	4b1c      	ldr	r3, [pc, #112]	; (8008380 <HAL_RCC_OscConfig+0xc58>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f003 030c 	and.w	r3, r3, #12
 8008316:	2b08      	cmp	r3, #8
 8008318:	f000 8213 	beq.w	8008742 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800831c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008320:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	2b02      	cmp	r3, #2
 800832a:	f040 8162 	bne.w	80085f2 <HAL_RCC_OscConfig+0xeca>
 800832e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008332:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008336:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800833a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800833c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008340:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	fa93 f2a3 	rbit	r2, r3
 800834a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800834e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8008352:	601a      	str	r2, [r3, #0]
  return result;
 8008354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008358:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800835c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800835e:	fab3 f383 	clz	r3, r3
 8008362:	b2db      	uxtb	r3, r3
 8008364:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8008368:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	461a      	mov	r2, r3
 8008370:	2300      	movs	r3, #0
 8008372:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008374:	f7fc fa0e 	bl	8004794 <HAL_GetTick>
 8008378:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800837c:	e00c      	b.n	8008398 <HAL_RCC_OscConfig+0xc70>
 800837e:	bf00      	nop
 8008380:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008384:	f7fc fa06 	bl	8004794 <HAL_GetTick>
 8008388:	4602      	mov	r2, r0
 800838a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800838e:	1ad3      	subs	r3, r2, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	d901      	bls.n	8008398 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e1fd      	b.n	8008794 <HAL_RCC_OscConfig+0x106c>
 8008398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800839c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80083a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083aa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	fa93 f2a3 	rbit	r2, r3
 80083b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083b8:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80083bc:	601a      	str	r2, [r3, #0]
  return result;
 80083be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083c2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80083c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80083c8:	fab3 f383 	clz	r3, r3
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	095b      	lsrs	r3, r3, #5
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	f043 0301 	orr.w	r3, r3, #1
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d102      	bne.n	80083e2 <HAL_RCC_OscConfig+0xcba>
 80083dc:	4bb0      	ldr	r3, [pc, #704]	; (80086a0 <HAL_RCC_OscConfig+0xf78>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	e027      	b.n	8008432 <HAL_RCC_OscConfig+0xd0a>
 80083e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083e6:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80083ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80083ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80083f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80083f4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	fa93 f2a3 	rbit	r2, r3
 80083fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008402:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800840c:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8008410:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008414:	601a      	str	r2, [r3, #0]
 8008416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800841a:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	fa93 f2a3 	rbit	r2, r3
 8008424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008428:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800842c:	601a      	str	r2, [r3, #0]
 800842e:	4b9c      	ldr	r3, [pc, #624]	; (80086a0 <HAL_RCC_OscConfig+0xf78>)
 8008430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008432:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008436:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 800843a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800843e:	6011      	str	r1, [r2, #0]
 8008440:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008444:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8008448:	6812      	ldr	r2, [r2, #0]
 800844a:	fa92 f1a2 	rbit	r1, r2
 800844e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008452:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008456:	6011      	str	r1, [r2, #0]
  return result;
 8008458:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800845c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8008460:	6812      	ldr	r2, [r2, #0]
 8008462:	fab2 f282 	clz	r2, r2
 8008466:	b2d2      	uxtb	r2, r2
 8008468:	f042 0220 	orr.w	r2, r2, #32
 800846c:	b2d2      	uxtb	r2, r2
 800846e:	f002 021f 	and.w	r2, r2, #31
 8008472:	2101      	movs	r1, #1
 8008474:	fa01 f202 	lsl.w	r2, r1, r2
 8008478:	4013      	ands	r3, r2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d182      	bne.n	8008384 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800847e:	4b88      	ldr	r3, [pc, #544]	; (80086a0 <HAL_RCC_OscConfig+0xf78>)
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8008486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800848a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8008492:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008496:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	430b      	orrs	r3, r1
 80084a0:	497f      	ldr	r1, [pc, #508]	; (80086a0 <HAL_RCC_OscConfig+0xf78>)
 80084a2:	4313      	orrs	r3, r2
 80084a4:	604b      	str	r3, [r1, #4]
 80084a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084aa:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80084ae:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80084b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084b8:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	fa93 f2a3 	rbit	r2, r3
 80084c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084c6:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80084ca:	601a      	str	r2, [r3, #0]
  return result;
 80084cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80084d0:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80084d4:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80084d6:	fab3 f383 	clz	r3, r3
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80084e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	461a      	mov	r2, r3
 80084e8:	2301      	movs	r3, #1
 80084ea:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084ec:	f7fc f952 	bl	8004794 <HAL_GetTick>
 80084f0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80084f4:	e009      	b.n	800850a <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80084f6:	f7fc f94d 	bl	8004794 <HAL_GetTick>
 80084fa:	4602      	mov	r2, r0
 80084fc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	2b02      	cmp	r3, #2
 8008504:	d901      	bls.n	800850a <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e144      	b.n	8008794 <HAL_RCC_OscConfig+0x106c>
 800850a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800850e:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008512:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008516:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008518:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800851c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	fa93 f2a3 	rbit	r2, r3
 8008526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800852a:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800852e:	601a      	str	r2, [r3, #0]
  return result;
 8008530:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008534:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8008538:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800853a:	fab3 f383 	clz	r3, r3
 800853e:	b2db      	uxtb	r3, r3
 8008540:	095b      	lsrs	r3, r3, #5
 8008542:	b2db      	uxtb	r3, r3
 8008544:	f043 0301 	orr.w	r3, r3, #1
 8008548:	b2db      	uxtb	r3, r3
 800854a:	2b01      	cmp	r3, #1
 800854c:	d102      	bne.n	8008554 <HAL_RCC_OscConfig+0xe2c>
 800854e:	4b54      	ldr	r3, [pc, #336]	; (80086a0 <HAL_RCC_OscConfig+0xf78>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	e027      	b.n	80085a4 <HAL_RCC_OscConfig+0xe7c>
 8008554:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008558:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800855c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008566:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	fa93 f2a3 	rbit	r2, r3
 8008570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008574:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800857e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008582:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008586:	601a      	str	r2, [r3, #0]
 8008588:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800858c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	fa93 f2a3 	rbit	r2, r3
 8008596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800859a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	4b3f      	ldr	r3, [pc, #252]	; (80086a0 <HAL_RCC_OscConfig+0xf78>)
 80085a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80085a8:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80085ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80085b0:	6011      	str	r1, [r2, #0]
 80085b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80085b6:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80085ba:	6812      	ldr	r2, [r2, #0]
 80085bc:	fa92 f1a2 	rbit	r1, r2
 80085c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80085c4:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80085c8:	6011      	str	r1, [r2, #0]
  return result;
 80085ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80085ce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80085d2:	6812      	ldr	r2, [r2, #0]
 80085d4:	fab2 f282 	clz	r2, r2
 80085d8:	b2d2      	uxtb	r2, r2
 80085da:	f042 0220 	orr.w	r2, r2, #32
 80085de:	b2d2      	uxtb	r2, r2
 80085e0:	f002 021f 	and.w	r2, r2, #31
 80085e4:	2101      	movs	r1, #1
 80085e6:	fa01 f202 	lsl.w	r2, r1, r2
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d082      	beq.n	80084f6 <HAL_RCC_OscConfig+0xdce>
 80085f0:	e0cf      	b.n	8008792 <HAL_RCC_OscConfig+0x106a>
 80085f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80085f6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80085fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80085fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008600:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008604:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	fa93 f2a3 	rbit	r2, r3
 800860e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008612:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008616:	601a      	str	r2, [r3, #0]
  return result;
 8008618:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800861c:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8008620:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008622:	fab3 f383 	clz	r3, r3
 8008626:	b2db      	uxtb	r3, r3
 8008628:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800862c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8008630:	009b      	lsls	r3, r3, #2
 8008632:	461a      	mov	r2, r3
 8008634:	2300      	movs	r3, #0
 8008636:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008638:	f7fc f8ac 	bl	8004794 <HAL_GetTick>
 800863c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008640:	e009      	b.n	8008656 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008642:	f7fc f8a7 	bl	8004794 <HAL_GetTick>
 8008646:	4602      	mov	r2, r0
 8008648:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800864c:	1ad3      	subs	r3, r2, r3
 800864e:	2b02      	cmp	r3, #2
 8008650:	d901      	bls.n	8008656 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8008652:	2303      	movs	r3, #3
 8008654:	e09e      	b.n	8008794 <HAL_RCC_OscConfig+0x106c>
 8008656:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800865a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800865e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008662:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008664:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008668:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	fa93 f2a3 	rbit	r2, r3
 8008672:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008676:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800867a:	601a      	str	r2, [r3, #0]
  return result;
 800867c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008680:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8008684:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008686:	fab3 f383 	clz	r3, r3
 800868a:	b2db      	uxtb	r3, r3
 800868c:	095b      	lsrs	r3, r3, #5
 800868e:	b2db      	uxtb	r3, r3
 8008690:	f043 0301 	orr.w	r3, r3, #1
 8008694:	b2db      	uxtb	r3, r3
 8008696:	2b01      	cmp	r3, #1
 8008698:	d104      	bne.n	80086a4 <HAL_RCC_OscConfig+0xf7c>
 800869a:	4b01      	ldr	r3, [pc, #4]	; (80086a0 <HAL_RCC_OscConfig+0xf78>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	e029      	b.n	80086f4 <HAL_RCC_OscConfig+0xfcc>
 80086a0:	40021000 	.word	0x40021000
 80086a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086a8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80086ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80086b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80086b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086b6:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	fa93 f2a3 	rbit	r2, r3
 80086c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086c4:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086ce:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80086d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80086d6:	601a      	str	r2, [r3, #0]
 80086d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086dc:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	fa93 f2a3 	rbit	r2, r3
 80086e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80086ea:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	4b2b      	ldr	r3, [pc, #172]	; (80087a0 <HAL_RCC_OscConfig+0x1078>)
 80086f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086f4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80086f8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80086fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8008700:	6011      	str	r1, [r2, #0]
 8008702:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008706:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 800870a:	6812      	ldr	r2, [r2, #0]
 800870c:	fa92 f1a2 	rbit	r1, r2
 8008710:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8008714:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008718:	6011      	str	r1, [r2, #0]
  return result;
 800871a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800871e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8008722:	6812      	ldr	r2, [r2, #0]
 8008724:	fab2 f282 	clz	r2, r2
 8008728:	b2d2      	uxtb	r2, r2
 800872a:	f042 0220 	orr.w	r2, r2, #32
 800872e:	b2d2      	uxtb	r2, r2
 8008730:	f002 021f 	and.w	r2, r2, #31
 8008734:	2101      	movs	r1, #1
 8008736:	fa01 f202 	lsl.w	r2, r1, r2
 800873a:	4013      	ands	r3, r2
 800873c:	2b00      	cmp	r3, #0
 800873e:	d180      	bne.n	8008642 <HAL_RCC_OscConfig+0xf1a>
 8008740:	e027      	b.n	8008792 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	69db      	ldr	r3, [r3, #28]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d101      	bne.n	8008756 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e01e      	b.n	8008794 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8008756:	4b12      	ldr	r3, [pc, #72]	; (80087a0 <HAL_RCC_OscConfig+0x1078>)
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800875e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8008762:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8008766:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800876a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	6a1b      	ldr	r3, [r3, #32]
 8008772:	429a      	cmp	r2, r3
 8008774:	d10b      	bne.n	800878e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8008776:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800877a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800877e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8008782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800878a:	429a      	cmp	r2, r3
 800878c:	d001      	beq.n	8008792 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800878e:	2301      	movs	r3, #1
 8008790:	e000      	b.n	8008794 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	40021000 	.word	0x40021000

080087a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b09e      	sub	sp, #120	; 0x78
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
 80087ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80087ae:	2300      	movs	r3, #0
 80087b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e162      	b.n	8008a82 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80087bc:	4b90      	ldr	r3, [pc, #576]	; (8008a00 <HAL_RCC_ClockConfig+0x25c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	683a      	ldr	r2, [r7, #0]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d910      	bls.n	80087ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087ca:	4b8d      	ldr	r3, [pc, #564]	; (8008a00 <HAL_RCC_ClockConfig+0x25c>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f023 0207 	bic.w	r2, r3, #7
 80087d2:	498b      	ldr	r1, [pc, #556]	; (8008a00 <HAL_RCC_ClockConfig+0x25c>)
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	4313      	orrs	r3, r2
 80087d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80087da:	4b89      	ldr	r3, [pc, #548]	; (8008a00 <HAL_RCC_ClockConfig+0x25c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0307 	and.w	r3, r3, #7
 80087e2:	683a      	ldr	r2, [r7, #0]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d001      	beq.n	80087ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80087e8:	2301      	movs	r3, #1
 80087ea:	e14a      	b.n	8008a82 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f003 0302 	and.w	r3, r3, #2
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d008      	beq.n	800880a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80087f8:	4b82      	ldr	r3, [pc, #520]	; (8008a04 <HAL_RCC_ClockConfig+0x260>)
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	689b      	ldr	r3, [r3, #8]
 8008804:	497f      	ldr	r1, [pc, #508]	; (8008a04 <HAL_RCC_ClockConfig+0x260>)
 8008806:	4313      	orrs	r3, r2
 8008808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0301 	and.w	r3, r3, #1
 8008812:	2b00      	cmp	r3, #0
 8008814:	f000 80dc 	beq.w	80089d0 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	2b01      	cmp	r3, #1
 800881e:	d13c      	bne.n	800889a <HAL_RCC_ClockConfig+0xf6>
 8008820:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008824:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008826:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008828:	fa93 f3a3 	rbit	r3, r3
 800882c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 800882e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008830:	fab3 f383 	clz	r3, r3
 8008834:	b2db      	uxtb	r3, r3
 8008836:	095b      	lsrs	r3, r3, #5
 8008838:	b2db      	uxtb	r3, r3
 800883a:	f043 0301 	orr.w	r3, r3, #1
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b01      	cmp	r3, #1
 8008842:	d102      	bne.n	800884a <HAL_RCC_ClockConfig+0xa6>
 8008844:	4b6f      	ldr	r3, [pc, #444]	; (8008a04 <HAL_RCC_ClockConfig+0x260>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	e00f      	b.n	800886a <HAL_RCC_ClockConfig+0xc6>
 800884a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800884e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008850:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008852:	fa93 f3a3 	rbit	r3, r3
 8008856:	667b      	str	r3, [r7, #100]	; 0x64
 8008858:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800885c:	663b      	str	r3, [r7, #96]	; 0x60
 800885e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008860:	fa93 f3a3 	rbit	r3, r3
 8008864:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008866:	4b67      	ldr	r3, [pc, #412]	; (8008a04 <HAL_RCC_ClockConfig+0x260>)
 8008868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800886a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800886e:	65ba      	str	r2, [r7, #88]	; 0x58
 8008870:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008872:	fa92 f2a2 	rbit	r2, r2
 8008876:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8008878:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800887a:	fab2 f282 	clz	r2, r2
 800887e:	b2d2      	uxtb	r2, r2
 8008880:	f042 0220 	orr.w	r2, r2, #32
 8008884:	b2d2      	uxtb	r2, r2
 8008886:	f002 021f 	and.w	r2, r2, #31
 800888a:	2101      	movs	r1, #1
 800888c:	fa01 f202 	lsl.w	r2, r1, r2
 8008890:	4013      	ands	r3, r2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d17b      	bne.n	800898e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008896:	2301      	movs	r3, #1
 8008898:	e0f3      	b.n	8008a82 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	685b      	ldr	r3, [r3, #4]
 800889e:	2b02      	cmp	r3, #2
 80088a0:	d13c      	bne.n	800891c <HAL_RCC_ClockConfig+0x178>
 80088a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088a6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088aa:	fa93 f3a3 	rbit	r3, r3
 80088ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80088b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80088b2:	fab3 f383 	clz	r3, r3
 80088b6:	b2db      	uxtb	r3, r3
 80088b8:	095b      	lsrs	r3, r3, #5
 80088ba:	b2db      	uxtb	r3, r3
 80088bc:	f043 0301 	orr.w	r3, r3, #1
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	2b01      	cmp	r3, #1
 80088c4:	d102      	bne.n	80088cc <HAL_RCC_ClockConfig+0x128>
 80088c6:	4b4f      	ldr	r3, [pc, #316]	; (8008a04 <HAL_RCC_ClockConfig+0x260>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	e00f      	b.n	80088ec <HAL_RCC_ClockConfig+0x148>
 80088cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088d0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80088d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088d4:	fa93 f3a3 	rbit	r3, r3
 80088d8:	647b      	str	r3, [r7, #68]	; 0x44
 80088da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80088de:	643b      	str	r3, [r7, #64]	; 0x40
 80088e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088e2:	fa93 f3a3 	rbit	r3, r3
 80088e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80088e8:	4b46      	ldr	r3, [pc, #280]	; (8008a04 <HAL_RCC_ClockConfig+0x260>)
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80088f0:	63ba      	str	r2, [r7, #56]	; 0x38
 80088f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80088f4:	fa92 f2a2 	rbit	r2, r2
 80088f8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80088fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80088fc:	fab2 f282 	clz	r2, r2
 8008900:	b2d2      	uxtb	r2, r2
 8008902:	f042 0220 	orr.w	r2, r2, #32
 8008906:	b2d2      	uxtb	r2, r2
 8008908:	f002 021f 	and.w	r2, r2, #31
 800890c:	2101      	movs	r1, #1
 800890e:	fa01 f202 	lsl.w	r2, r1, r2
 8008912:	4013      	ands	r3, r2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d13a      	bne.n	800898e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8008918:	2301      	movs	r3, #1
 800891a:	e0b2      	b.n	8008a82 <HAL_RCC_ClockConfig+0x2de>
 800891c:	2302      	movs	r3, #2
 800891e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008922:	fa93 f3a3 	rbit	r3, r3
 8008926:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800892a:	fab3 f383 	clz	r3, r3
 800892e:	b2db      	uxtb	r3, r3
 8008930:	095b      	lsrs	r3, r3, #5
 8008932:	b2db      	uxtb	r3, r3
 8008934:	f043 0301 	orr.w	r3, r3, #1
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b01      	cmp	r3, #1
 800893c:	d102      	bne.n	8008944 <HAL_RCC_ClockConfig+0x1a0>
 800893e:	4b31      	ldr	r3, [pc, #196]	; (8008a04 <HAL_RCC_ClockConfig+0x260>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	e00d      	b.n	8008960 <HAL_RCC_ClockConfig+0x1bc>
 8008944:	2302      	movs	r3, #2
 8008946:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	fa93 f3a3 	rbit	r3, r3
 800894e:	627b      	str	r3, [r7, #36]	; 0x24
 8008950:	2302      	movs	r3, #2
 8008952:	623b      	str	r3, [r7, #32]
 8008954:	6a3b      	ldr	r3, [r7, #32]
 8008956:	fa93 f3a3 	rbit	r3, r3
 800895a:	61fb      	str	r3, [r7, #28]
 800895c:	4b29      	ldr	r3, [pc, #164]	; (8008a04 <HAL_RCC_ClockConfig+0x260>)
 800895e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008960:	2202      	movs	r2, #2
 8008962:	61ba      	str	r2, [r7, #24]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	fa92 f2a2 	rbit	r2, r2
 800896a:	617a      	str	r2, [r7, #20]
  return result;
 800896c:	697a      	ldr	r2, [r7, #20]
 800896e:	fab2 f282 	clz	r2, r2
 8008972:	b2d2      	uxtb	r2, r2
 8008974:	f042 0220 	orr.w	r2, r2, #32
 8008978:	b2d2      	uxtb	r2, r2
 800897a:	f002 021f 	and.w	r2, r2, #31
 800897e:	2101      	movs	r1, #1
 8008980:	fa01 f202 	lsl.w	r2, r1, r2
 8008984:	4013      	ands	r3, r2
 8008986:	2b00      	cmp	r3, #0
 8008988:	d101      	bne.n	800898e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800898a:	2301      	movs	r3, #1
 800898c:	e079      	b.n	8008a82 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800898e:	4b1d      	ldr	r3, [pc, #116]	; (8008a04 <HAL_RCC_ClockConfig+0x260>)
 8008990:	685b      	ldr	r3, [r3, #4]
 8008992:	f023 0203 	bic.w	r2, r3, #3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	491a      	ldr	r1, [pc, #104]	; (8008a04 <HAL_RCC_ClockConfig+0x260>)
 800899c:	4313      	orrs	r3, r2
 800899e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80089a0:	f7fb fef8 	bl	8004794 <HAL_GetTick>
 80089a4:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089a6:	e00a      	b.n	80089be <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089a8:	f7fb fef4 	bl	8004794 <HAL_GetTick>
 80089ac:	4602      	mov	r2, r0
 80089ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d901      	bls.n	80089be <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80089ba:	2303      	movs	r3, #3
 80089bc:	e061      	b.n	8008a82 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089be:	4b11      	ldr	r3, [pc, #68]	; (8008a04 <HAL_RCC_ClockConfig+0x260>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f003 020c 	and.w	r2, r3, #12
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d1eb      	bne.n	80089a8 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80089d0:	4b0b      	ldr	r3, [pc, #44]	; (8008a00 <HAL_RCC_ClockConfig+0x25c>)
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	f003 0307 	and.w	r3, r3, #7
 80089d8:	683a      	ldr	r2, [r7, #0]
 80089da:	429a      	cmp	r2, r3
 80089dc:	d214      	bcs.n	8008a08 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089de:	4b08      	ldr	r3, [pc, #32]	; (8008a00 <HAL_RCC_ClockConfig+0x25c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f023 0207 	bic.w	r2, r3, #7
 80089e6:	4906      	ldr	r1, [pc, #24]	; (8008a00 <HAL_RCC_ClockConfig+0x25c>)
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80089ee:	4b04      	ldr	r3, [pc, #16]	; (8008a00 <HAL_RCC_ClockConfig+0x25c>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	683a      	ldr	r2, [r7, #0]
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d005      	beq.n	8008a08 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	e040      	b.n	8008a82 <HAL_RCC_ClockConfig+0x2de>
 8008a00:	40022000 	.word	0x40022000
 8008a04:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0304 	and.w	r3, r3, #4
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d008      	beq.n	8008a26 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a14:	4b1d      	ldr	r3, [pc, #116]	; (8008a8c <HAL_RCC_ClockConfig+0x2e8>)
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	491a      	ldr	r1, [pc, #104]	; (8008a8c <HAL_RCC_ClockConfig+0x2e8>)
 8008a22:	4313      	orrs	r3, r2
 8008a24:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 0308 	and.w	r3, r3, #8
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d009      	beq.n	8008a46 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a32:	4b16      	ldr	r3, [pc, #88]	; (8008a8c <HAL_RCC_ClockConfig+0x2e8>)
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	4912      	ldr	r1, [pc, #72]	; (8008a8c <HAL_RCC_ClockConfig+0x2e8>)
 8008a42:	4313      	orrs	r3, r2
 8008a44:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008a46:	f000 f829 	bl	8008a9c <HAL_RCC_GetSysClockFreq>
 8008a4a:	4601      	mov	r1, r0
 8008a4c:	4b0f      	ldr	r3, [pc, #60]	; (8008a8c <HAL_RCC_ClockConfig+0x2e8>)
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a54:	22f0      	movs	r2, #240	; 0xf0
 8008a56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008a58:	693a      	ldr	r2, [r7, #16]
 8008a5a:	fa92 f2a2 	rbit	r2, r2
 8008a5e:	60fa      	str	r2, [r7, #12]
  return result;
 8008a60:	68fa      	ldr	r2, [r7, #12]
 8008a62:	fab2 f282 	clz	r2, r2
 8008a66:	b2d2      	uxtb	r2, r2
 8008a68:	40d3      	lsrs	r3, r2
 8008a6a:	4a09      	ldr	r2, [pc, #36]	; (8008a90 <HAL_RCC_ClockConfig+0x2ec>)
 8008a6c:	5cd3      	ldrb	r3, [r2, r3]
 8008a6e:	fa21 f303 	lsr.w	r3, r1, r3
 8008a72:	4a08      	ldr	r2, [pc, #32]	; (8008a94 <HAL_RCC_ClockConfig+0x2f0>)
 8008a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8008a76:	4b08      	ldr	r3, [pc, #32]	; (8008a98 <HAL_RCC_ClockConfig+0x2f4>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7fb fe46 	bl	800470c <HAL_InitTick>
  
  return HAL_OK;
 8008a80:	2300      	movs	r3, #0
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3778      	adds	r7, #120	; 0x78
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}
 8008a8a:	bf00      	nop
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	0801139c 	.word	0x0801139c
 8008a94:	200000ac 	.word	0x200000ac
 8008a98:	200000b0 	.word	0x200000b0

08008a9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b08b      	sub	sp, #44	; 0x2c
 8008aa0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	61fb      	str	r3, [r7, #28]
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	627b      	str	r3, [r7, #36]	; 0x24
 8008aae:	2300      	movs	r3, #0
 8008ab0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8008ab6:	4b29      	ldr	r3, [pc, #164]	; (8008b5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	f003 030c 	and.w	r3, r3, #12
 8008ac2:	2b04      	cmp	r3, #4
 8008ac4:	d002      	beq.n	8008acc <HAL_RCC_GetSysClockFreq+0x30>
 8008ac6:	2b08      	cmp	r3, #8
 8008ac8:	d003      	beq.n	8008ad2 <HAL_RCC_GetSysClockFreq+0x36>
 8008aca:	e03c      	b.n	8008b46 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008acc:	4b24      	ldr	r3, [pc, #144]	; (8008b60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008ace:	623b      	str	r3, [r7, #32]
      break;
 8008ad0:	e03c      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8008ad8:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8008adc:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ade:	68ba      	ldr	r2, [r7, #8]
 8008ae0:	fa92 f2a2 	rbit	r2, r2
 8008ae4:	607a      	str	r2, [r7, #4]
  return result;
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	fab2 f282 	clz	r2, r2
 8008aec:	b2d2      	uxtb	r2, r2
 8008aee:	40d3      	lsrs	r3, r2
 8008af0:	4a1c      	ldr	r2, [pc, #112]	; (8008b64 <HAL_RCC_GetSysClockFreq+0xc8>)
 8008af2:	5cd3      	ldrb	r3, [r2, r3]
 8008af4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8008af6:	4b19      	ldr	r3, [pc, #100]	; (8008b5c <HAL_RCC_GetSysClockFreq+0xc0>)
 8008af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	220f      	movs	r2, #15
 8008b00:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	fa92 f2a2 	rbit	r2, r2
 8008b08:	60fa      	str	r2, [r7, #12]
  return result;
 8008b0a:	68fa      	ldr	r2, [r7, #12]
 8008b0c:	fab2 f282 	clz	r2, r2
 8008b10:	b2d2      	uxtb	r2, r2
 8008b12:	40d3      	lsrs	r3, r2
 8008b14:	4a14      	ldr	r2, [pc, #80]	; (8008b68 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008b16:	5cd3      	ldrb	r3, [r2, r3]
 8008b18:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d008      	beq.n	8008b36 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008b24:	4a0e      	ldr	r2, [pc, #56]	; (8008b60 <HAL_RCC_GetSysClockFreq+0xc4>)
 8008b26:	69bb      	ldr	r3, [r7, #24]
 8008b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	fb02 f303 	mul.w	r3, r2, r3
 8008b32:	627b      	str	r3, [r7, #36]	; 0x24
 8008b34:	e004      	b.n	8008b40 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	4a0c      	ldr	r2, [pc, #48]	; (8008b6c <HAL_RCC_GetSysClockFreq+0xd0>)
 8008b3a:	fb02 f303 	mul.w	r3, r2, r3
 8008b3e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	623b      	str	r3, [r7, #32]
      break;
 8008b44:	e002      	b.n	8008b4c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008b46:	4b0a      	ldr	r3, [pc, #40]	; (8008b70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008b48:	623b      	str	r3, [r7, #32]
      break;
 8008b4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	372c      	adds	r7, #44	; 0x2c
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40021000 	.word	0x40021000
 8008b60:	01e84800 	.word	0x01e84800
 8008b64:	080113ac 	.word	0x080113ac
 8008b68:	080113bc 	.word	0x080113bc
 8008b6c:	003d0900 	.word	0x003d0900
 8008b70:	007a1200 	.word	0x007a1200

08008b74 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b092      	sub	sp, #72	; 0x48
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8008b80:	2300      	movs	r3, #0
 8008b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8008b84:	2300      	movs	r3, #0
 8008b86:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 80d4 	beq.w	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b98:	4b4e      	ldr	r3, [pc, #312]	; (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008b9a:	69db      	ldr	r3, [r3, #28]
 8008b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d10e      	bne.n	8008bc2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008ba4:	4b4b      	ldr	r3, [pc, #300]	; (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008ba6:	69db      	ldr	r3, [r3, #28]
 8008ba8:	4a4a      	ldr	r2, [pc, #296]	; (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bae:	61d3      	str	r3, [r2, #28]
 8008bb0:	4b48      	ldr	r3, [pc, #288]	; (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008bb2:	69db      	ldr	r3, [r3, #28]
 8008bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bb8:	60bb      	str	r3, [r7, #8]
 8008bba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bc2:	4b45      	ldr	r3, [pc, #276]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d118      	bne.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008bce:	4b42      	ldr	r3, [pc, #264]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a41      	ldr	r2, [pc, #260]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bd8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008bda:	f7fb fddb 	bl	8004794 <HAL_GetTick>
 8008bde:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008be0:	e008      	b.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008be2:	f7fb fdd7 	bl	8004794 <HAL_GetTick>
 8008be6:	4602      	mov	r2, r0
 8008be8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bea:	1ad3      	subs	r3, r2, r3
 8008bec:	2b64      	cmp	r3, #100	; 0x64
 8008bee:	d901      	bls.n	8008bf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	e169      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x354>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008bf4:	4b38      	ldr	r3, [pc, #224]	; (8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d0f0      	beq.n	8008be2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008c00:	4b34      	ldr	r3, [pc, #208]	; (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c02:	6a1b      	ldr	r3, [r3, #32]
 8008c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c08:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	f000 8084 	beq.w	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d07c      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008c20:	4b2c      	ldr	r3, [pc, #176]	; (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c22:	6a1b      	ldr	r3, [r3, #32]
 8008c24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c2e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c32:	fa93 f3a3 	rbit	r3, r3
 8008c36:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8008c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008c3a:	fab3 f383 	clz	r3, r3
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	461a      	mov	r2, r3
 8008c42:	4b26      	ldr	r3, [pc, #152]	; (8008cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008c44:	4413      	add	r3, r2
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	461a      	mov	r2, r3
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	6013      	str	r3, [r2, #0]
 8008c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c52:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c56:	fa93 f3a3 	rbit	r3, r3
 8008c5a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008c5e:	fab3 f383 	clz	r3, r3
 8008c62:	b2db      	uxtb	r3, r3
 8008c64:	461a      	mov	r2, r3
 8008c66:	4b1d      	ldr	r3, [pc, #116]	; (8008cdc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8008c68:	4413      	add	r3, r2
 8008c6a:	009b      	lsls	r3, r3, #2
 8008c6c:	461a      	mov	r2, r3
 8008c6e:	2300      	movs	r3, #0
 8008c70:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008c72:	4a18      	ldr	r2, [pc, #96]	; (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c76:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008c78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d04b      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c82:	f7fb fd87 	bl	8004794 <HAL_GetTick>
 8008c86:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c88:	e00a      	b.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c8a:	f7fb fd83 	bl	8004794 <HAL_GetTick>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c92:	1ad3      	subs	r3, r2, r3
 8008c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d901      	bls.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e113      	b.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x354>
 8008ca0:	2302      	movs	r3, #2
 8008ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca6:	fa93 f3a3 	rbit	r3, r3
 8008caa:	627b      	str	r3, [r7, #36]	; 0x24
 8008cac:	2302      	movs	r3, #2
 8008cae:	623b      	str	r3, [r7, #32]
 8008cb0:	6a3b      	ldr	r3, [r7, #32]
 8008cb2:	fa93 f3a3 	rbit	r3, r3
 8008cb6:	61fb      	str	r3, [r7, #28]
  return result;
 8008cb8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cba:	fab3 f383 	clz	r3, r3
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	095b      	lsrs	r3, r3, #5
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	f043 0302 	orr.w	r3, r3, #2
 8008cc8:	b2db      	uxtb	r3, r3
 8008cca:	2b02      	cmp	r3, #2
 8008ccc:	d108      	bne.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8008cce:	4b01      	ldr	r3, [pc, #4]	; (8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	e00d      	b.n	8008cf0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8008cd4:	40021000 	.word	0x40021000
 8008cd8:	40007000 	.word	0x40007000
 8008cdc:	10908100 	.word	0x10908100
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008ce4:	69bb      	ldr	r3, [r7, #24]
 8008ce6:	fa93 f3a3 	rbit	r3, r3
 8008cea:	617b      	str	r3, [r7, #20]
 8008cec:	4b78      	ldr	r3, [pc, #480]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf0:	2202      	movs	r2, #2
 8008cf2:	613a      	str	r2, [r7, #16]
 8008cf4:	693a      	ldr	r2, [r7, #16]
 8008cf6:	fa92 f2a2 	rbit	r2, r2
 8008cfa:	60fa      	str	r2, [r7, #12]
  return result;
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	fab2 f282 	clz	r2, r2
 8008d02:	b2d2      	uxtb	r2, r2
 8008d04:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d08:	b2d2      	uxtb	r2, r2
 8008d0a:	f002 021f 	and.w	r2, r2, #31
 8008d0e:	2101      	movs	r1, #1
 8008d10:	fa01 f202 	lsl.w	r2, r1, r2
 8008d14:	4013      	ands	r3, r2
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d0b7      	beq.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8008d1a:	4b6d      	ldr	r3, [pc, #436]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d1c:	6a1b      	ldr	r3, [r3, #32]
 8008d1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	496a      	ldr	r1, [pc, #424]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008d2c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008d30:	2b01      	cmp	r3, #1
 8008d32:	d105      	bne.n	8008d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d34:	4b66      	ldr	r3, [pc, #408]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d36:	69db      	ldr	r3, [r3, #28]
 8008d38:	4a65      	ldr	r2, [pc, #404]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d3e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d008      	beq.n	8008d5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008d4c:	4b60      	ldr	r3, [pc, #384]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d50:	f023 0203 	bic.w	r2, r3, #3
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689b      	ldr	r3, [r3, #8]
 8008d58:	495d      	ldr	r1, [pc, #372]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 0302 	and.w	r3, r3, #2
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d008      	beq.n	8008d7c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008d6a:	4b59      	ldr	r3, [pc, #356]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	4956      	ldr	r1, [pc, #344]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d78:	4313      	orrs	r3, r2
 8008d7a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f003 0304 	and.w	r3, r3, #4
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d008      	beq.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008d88:	4b51      	ldr	r3, [pc, #324]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691b      	ldr	r3, [r3, #16]
 8008d94:	494e      	ldr	r1, [pc, #312]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f003 0320 	and.w	r3, r3, #32
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d008      	beq.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008da6:	4b4a      	ldr	r3, [pc, #296]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	f023 0210 	bic.w	r2, r3, #16
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	69db      	ldr	r3, [r3, #28]
 8008db2:	4947      	ldr	r1, [pc, #284]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008db4:	4313      	orrs	r3, r2
 8008db6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d008      	beq.n	8008dd6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8008dc4:	4b42      	ldr	r3, [pc, #264]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd0:	493f      	ldr	r1, [pc, #252]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d008      	beq.n	8008df4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008de2:	4b3b      	ldr	r3, [pc, #236]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de6:	f023 0220 	bic.w	r2, r3, #32
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6a1b      	ldr	r3, [r3, #32]
 8008dee:	4938      	ldr	r1, [pc, #224]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008df0:	4313      	orrs	r3, r2
 8008df2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	f003 0308 	and.w	r3, r3, #8
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d008      	beq.n	8008e12 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008e00:	4b33      	ldr	r3, [pc, #204]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	695b      	ldr	r3, [r3, #20]
 8008e0c:	4930      	ldr	r1, [pc, #192]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f003 0310 	and.w	r3, r3, #16
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d008      	beq.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008e1e:	4b2c      	ldr	r3, [pc, #176]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	4929      	ldr	r1, [pc, #164]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d008      	beq.n	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008e3c:	4b24      	ldr	r3, [pc, #144]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e3e:	685b      	ldr	r3, [r3, #4]
 8008e40:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e48:	4921      	ldr	r1, [pc, #132]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d008      	beq.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008e5a:	4b1d      	ldr	r3, [pc, #116]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5e:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e66:	491a      	ldr	r1, [pc, #104]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e68:	4313      	orrs	r3, r2
 8008e6a:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d008      	beq.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8008e78:	4b15      	ldr	r3, [pc, #84]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e7c:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e84:	4912      	ldr	r1, [pc, #72]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d008      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8008e96:	4b0e      	ldr	r3, [pc, #56]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ea2:	490b      	ldr	r1, [pc, #44]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d008      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8008eb4:	4b06      	ldr	r3, [pc, #24]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ec0:	4903      	ldr	r1, [pc, #12]	; (8008ed0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8008ec2:	4313      	orrs	r3, r2
 8008ec4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3748      	adds	r7, #72	; 0x48
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	40021000 	.word	0x40021000

08008ed4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e09d      	b.n	8009022 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d108      	bne.n	8008f00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	685b      	ldr	r3, [r3, #4]
 8008ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008ef6:	d009      	beq.n	8008f0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2200      	movs	r2, #0
 8008efc:	61da      	str	r2, [r3, #28]
 8008efe:	e005      	b.n	8008f0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2200      	movs	r2, #0
 8008f04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2200      	movs	r2, #0
 8008f10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d106      	bne.n	8008f2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7fb f8f0 	bl	800410c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f4c:	d902      	bls.n	8008f54 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	60fb      	str	r3, [r7, #12]
 8008f52:	e002      	b.n	8008f5a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f58:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008f62:	d007      	beq.n	8008f74 <HAL_SPI_Init+0xa0>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008f6c:	d002      	beq.n	8008f74 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008f84:	431a      	orrs	r2, r3
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	f003 0302 	and.w	r3, r3, #2
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	695b      	ldr	r3, [r3, #20]
 8008f94:	f003 0301 	and.w	r3, r3, #1
 8008f98:	431a      	orrs	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	69db      	ldr	r3, [r3, #28]
 8008fa8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008fac:	431a      	orrs	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6a1b      	ldr	r3, [r3, #32]
 8008fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fb6:	ea42 0103 	orr.w	r1, r2, r3
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fbe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	430a      	orrs	r2, r1
 8008fc8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	699b      	ldr	r3, [r3, #24]
 8008fce:	0c1b      	lsrs	r3, r3, #16
 8008fd0:	f003 0204 	and.w	r2, r3, #4
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	431a      	orrs	r2, r3
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe2:	f003 0308 	and.w	r3, r3, #8
 8008fe6:	431a      	orrs	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008ff0:	ea42 0103 	orr.w	r1, r2, r3
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	430a      	orrs	r2, r1
 8009000:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	69da      	ldr	r2, [r3, #28]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009010:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2201      	movs	r2, #1
 800901c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009020:	2300      	movs	r3, #0
}
 8009022:	4618      	mov	r0, r3
 8009024:	3710      	adds	r7, #16
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800902a:	b580      	push	{r7, lr}
 800902c:	b088      	sub	sp, #32
 800902e:	af00      	add	r7, sp, #0
 8009030:	60f8      	str	r0, [r7, #12]
 8009032:	60b9      	str	r1, [r7, #8]
 8009034:	603b      	str	r3, [r7, #0]
 8009036:	4613      	mov	r3, r2
 8009038:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009044:	2b01      	cmp	r3, #1
 8009046:	d101      	bne.n	800904c <HAL_SPI_Transmit+0x22>
 8009048:	2302      	movs	r3, #2
 800904a:	e15f      	b.n	800930c <HAL_SPI_Transmit+0x2e2>
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	2201      	movs	r2, #1
 8009050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009054:	f7fb fb9e 	bl	8004794 <HAL_GetTick>
 8009058:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800905a:	88fb      	ldrh	r3, [r7, #6]
 800905c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009064:	b2db      	uxtb	r3, r3
 8009066:	2b01      	cmp	r3, #1
 8009068:	d002      	beq.n	8009070 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800906a:	2302      	movs	r3, #2
 800906c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800906e:	e148      	b.n	8009302 <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009070:	68bb      	ldr	r3, [r7, #8]
 8009072:	2b00      	cmp	r3, #0
 8009074:	d002      	beq.n	800907c <HAL_SPI_Transmit+0x52>
 8009076:	88fb      	ldrh	r3, [r7, #6]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009080:	e13f      	b.n	8009302 <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2203      	movs	r2, #3
 8009086:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	68ba      	ldr	r2, [r7, #8]
 8009094:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	88fa      	ldrh	r2, [r7, #6]
 800909a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	88fa      	ldrh	r2, [r7, #6]
 80090a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2200      	movs	r2, #0
 80090a6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2200      	movs	r2, #0
 80090b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2200      	movs	r2, #0
 80090bc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2200      	movs	r2, #0
 80090c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090cc:	d10f      	bne.n	80090ee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	681a      	ldr	r2, [r3, #0]
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80090ec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f8:	2b40      	cmp	r3, #64	; 0x40
 80090fa:	d007      	beq.n	800910c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800910a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009114:	d94f      	bls.n	80091b6 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d002      	beq.n	8009124 <HAL_SPI_Transmit+0xfa>
 800911e:	8afb      	ldrh	r3, [r7, #22]
 8009120:	2b01      	cmp	r3, #1
 8009122:	d142      	bne.n	80091aa <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009128:	881a      	ldrh	r2, [r3, #0]
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009134:	1c9a      	adds	r2, r3, #2
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800913e:	b29b      	uxth	r3, r3
 8009140:	3b01      	subs	r3, #1
 8009142:	b29a      	uxth	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009148:	e02f      	b.n	80091aa <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	689b      	ldr	r3, [r3, #8]
 8009150:	f003 0302 	and.w	r3, r3, #2
 8009154:	2b02      	cmp	r3, #2
 8009156:	d112      	bne.n	800917e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800915c:	881a      	ldrh	r2, [r3, #0]
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009168:	1c9a      	adds	r2, r3, #2
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009172:	b29b      	uxth	r3, r3
 8009174:	3b01      	subs	r3, #1
 8009176:	b29a      	uxth	r2, r3
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800917c:	e015      	b.n	80091aa <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800917e:	f7fb fb09 	bl	8004794 <HAL_GetTick>
 8009182:	4602      	mov	r2, r0
 8009184:	69bb      	ldr	r3, [r7, #24]
 8009186:	1ad3      	subs	r3, r2, r3
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	429a      	cmp	r2, r3
 800918c:	d803      	bhi.n	8009196 <HAL_SPI_Transmit+0x16c>
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009194:	d102      	bne.n	800919c <HAL_SPI_Transmit+0x172>
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d106      	bne.n	80091aa <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 800919c:	2303      	movs	r3, #3
 800919e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	2201      	movs	r2, #1
 80091a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80091a8:	e0ab      	b.n	8009302 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d1ca      	bne.n	800914a <HAL_SPI_Transmit+0x120>
 80091b4:	e080      	b.n	80092b8 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <HAL_SPI_Transmit+0x19a>
 80091be:	8afb      	ldrh	r3, [r7, #22]
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d174      	bne.n	80092ae <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d912      	bls.n	80091f4 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d2:	881a      	ldrh	r2, [r3, #0]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091de:	1c9a      	adds	r2, r3, #2
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80091e8:	b29b      	uxth	r3, r3
 80091ea:	3b02      	subs	r3, #2
 80091ec:	b29a      	uxth	r2, r3
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80091f2:	e05c      	b.n	80092ae <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	330c      	adds	r3, #12
 80091fe:	7812      	ldrb	r2, [r2, #0]
 8009200:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009206:	1c5a      	adds	r2, r3, #1
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009210:	b29b      	uxth	r3, r3
 8009212:	3b01      	subs	r3, #1
 8009214:	b29a      	uxth	r2, r3
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800921a:	e048      	b.n	80092ae <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	f003 0302 	and.w	r3, r3, #2
 8009226:	2b02      	cmp	r3, #2
 8009228:	d12b      	bne.n	8009282 <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800922e:	b29b      	uxth	r3, r3
 8009230:	2b01      	cmp	r3, #1
 8009232:	d912      	bls.n	800925a <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009238:	881a      	ldrh	r2, [r3, #0]
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009244:	1c9a      	adds	r2, r3, #2
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800924e:	b29b      	uxth	r3, r3
 8009250:	3b02      	subs	r3, #2
 8009252:	b29a      	uxth	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009258:	e029      	b.n	80092ae <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	330c      	adds	r3, #12
 8009264:	7812      	ldrb	r2, [r2, #0]
 8009266:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	1c5a      	adds	r2, r3, #1
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009276:	b29b      	uxth	r3, r3
 8009278:	3b01      	subs	r3, #1
 800927a:	b29a      	uxth	r2, r3
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009280:	e015      	b.n	80092ae <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009282:	f7fb fa87 	bl	8004794 <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	429a      	cmp	r2, r3
 8009290:	d803      	bhi.n	800929a <HAL_SPI_Transmit+0x270>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009298:	d102      	bne.n	80092a0 <HAL_SPI_Transmit+0x276>
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d106      	bne.n	80092ae <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 80092a0:	2303      	movs	r3, #3
 80092a2:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2201      	movs	r2, #1
 80092a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 80092ac:	e029      	b.n	8009302 <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d1b1      	bne.n	800921c <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80092b8:	69ba      	ldr	r2, [r7, #24]
 80092ba:	6839      	ldr	r1, [r7, #0]
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 fad7 	bl	8009870 <SPI_EndRxTxTransaction>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d002      	beq.n	80092ce <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	2220      	movs	r2, #32
 80092cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	689b      	ldr	r3, [r3, #8]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d10a      	bne.n	80092ec <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80092d6:	2300      	movs	r3, #0
 80092d8:	613b      	str	r3, [r7, #16]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	68db      	ldr	r3, [r3, #12]
 80092e0:	613b      	str	r3, [r7, #16]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d002      	beq.n	80092fa <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80092f4:	2301      	movs	r3, #1
 80092f6:	77fb      	strb	r3, [r7, #31]
 80092f8:	e003      	b.n	8009302 <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	2200      	movs	r2, #0
 8009306:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800930a:	7ffb      	ldrb	r3, [r7, #31]
}
 800930c:	4618      	mov	r0, r3
 800930e:	3720      	adds	r7, #32
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	4613      	mov	r3, r2
 8009320:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800932c:	2b01      	cmp	r3, #1
 800932e:	d101      	bne.n	8009334 <HAL_SPI_Transmit_DMA+0x20>
 8009330:	2302      	movs	r3, #2
 8009332:	e0d4      	b.n	80094de <HAL_SPI_Transmit_DMA+0x1ca>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009342:	b2db      	uxtb	r3, r3
 8009344:	2b01      	cmp	r3, #1
 8009346:	d002      	beq.n	800934e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009348:	2302      	movs	r3, #2
 800934a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800934c:	e0c2      	b.n	80094d4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d002      	beq.n	800935a <HAL_SPI_Transmit_DMA+0x46>
 8009354:	88fb      	ldrh	r3, [r7, #6]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d102      	bne.n	8009360 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800935e:	e0b9      	b.n	80094d4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2203      	movs	r2, #3
 8009364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	68ba      	ldr	r2, [r7, #8]
 8009372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	88fa      	ldrh	r2, [r7, #6]
 8009378:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	88fa      	ldrh	r2, [r7, #6]
 800937e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2200      	movs	r2, #0
 800938a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	2200      	movs	r2, #0
 8009390:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	2200      	movs	r2, #0
 8009396:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2200      	movs	r2, #0
 800939e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093aa:	d10f      	bne.n	80093cc <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681a      	ldr	r2, [r3, #0]
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d0:	4a45      	ldr	r2, [pc, #276]	; (80094e8 <HAL_SPI_Transmit_DMA+0x1d4>)
 80093d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093d8:	4a44      	ldr	r2, [pc, #272]	; (80094ec <HAL_SPI_Transmit_DMA+0x1d8>)
 80093da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e0:	4a43      	ldr	r2, [pc, #268]	; (80094f0 <HAL_SPI_Transmit_DMA+0x1dc>)
 80093e2:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093e8:	2200      	movs	r2, #0
 80093ea:	635a      	str	r2, [r3, #52]	; 0x34

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	685a      	ldr	r2, [r3, #4]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80093fa:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009404:	d82d      	bhi.n	8009462 <HAL_SPI_Transmit_DMA+0x14e>
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800940a:	695b      	ldr	r3, [r3, #20]
 800940c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009410:	d127      	bne.n	8009462 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009416:	b29b      	uxth	r3, r3
 8009418:	f003 0301 	and.w	r3, r3, #1
 800941c:	2b00      	cmp	r3, #0
 800941e:	d10f      	bne.n	8009440 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	685a      	ldr	r2, [r3, #4]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800942e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009434:	b29b      	uxth	r3, r3
 8009436:	085b      	lsrs	r3, r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800943e:	e010      	b.n	8009462 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685a      	ldr	r2, [r3, #4]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800944e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009454:	b29b      	uxth	r3, r3
 8009456:	085b      	lsrs	r3, r3, #1
 8009458:	b29b      	uxth	r3, r3
 800945a:	3301      	adds	r3, #1
 800945c:	b29a      	uxth	r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946a:	4619      	mov	r1, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	330c      	adds	r3, #12
 8009472:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009478:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800947a:	f7fd fb40 	bl	8006afe <HAL_DMA_Start_IT>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d008      	beq.n	8009496 <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009488:	f043 0210 	orr.w	r2, r3, #16
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	75fb      	strb	r3, [r7, #23]

    goto error;
 8009494:	e01e      	b.n	80094d4 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094a0:	2b40      	cmp	r3, #64	; 0x40
 80094a2:	d007      	beq.n	80094b4 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80094b2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	685a      	ldr	r2, [r3, #4]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f042 0220 	orr.w	r2, r2, #32
 80094c2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f042 0202 	orr.w	r2, r2, #2
 80094d2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	080095d7 	.word	0x080095d7
 80094ec:	08009531 	.word	0x08009531
 80094f0:	080095f3 	.word	0x080095f3

080094f4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80094f4:	b480      	push	{r7}
 80094f6:	b083      	sub	sp, #12
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80094fc:	bf00      	nop
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800953e:	f7fb f929 	bl	8004794 <HAL_GetTick>
 8009542:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 0320 	and.w	r3, r3, #32
 800954e:	2b20      	cmp	r3, #32
 8009550:	d03b      	beq.n	80095ca <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	697b      	ldr	r3, [r7, #20]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f022 0220 	bic.w	r2, r2, #32
 8009560:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009562:	697b      	ldr	r3, [r7, #20]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	685a      	ldr	r2, [r3, #4]
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f022 0202 	bic.w	r2, r2, #2
 8009570:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009572:	693a      	ldr	r2, [r7, #16]
 8009574:	2164      	movs	r1, #100	; 0x64
 8009576:	6978      	ldr	r0, [r7, #20]
 8009578:	f000 f97a 	bl	8009870 <SPI_EndRxTxTransaction>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009582:	697b      	ldr	r3, [r7, #20]
 8009584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009586:	f043 0220 	orr.w	r2, r3, #32
 800958a:	697b      	ldr	r3, [r7, #20]
 800958c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10a      	bne.n	80095ac <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009596:	2300      	movs	r3, #0
 8009598:	60fb      	str	r3, [r7, #12]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68db      	ldr	r3, [r3, #12]
 80095a0:	60fb      	str	r3, [r7, #12]
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	689b      	ldr	r3, [r3, #8]
 80095a8:	60fb      	str	r3, [r7, #12]
 80095aa:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	2200      	movs	r2, #0
 80095b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d003      	beq.n	80095ca <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80095c2:	6978      	ldr	r0, [r7, #20]
 80095c4:	f7ff ffaa 	bl	800951c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80095c8:	e002      	b.n	80095d0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80095ca:	6978      	ldr	r0, [r7, #20]
 80095cc:	f7ff ff92 	bl	80094f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095d0:	3718      	adds	r7, #24
 80095d2:	46bd      	mov	sp, r7
 80095d4:	bd80      	pop	{r7, pc}

080095d6 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80095d6:	b580      	push	{r7, lr}
 80095d8:	b084      	sub	sp, #16
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e2:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f7ff ff8f 	bl	8009508 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80095ea:	bf00      	nop
 80095ec:	3710      	adds	r7, #16
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b084      	sub	sp, #16
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095fe:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	685a      	ldr	r2, [r3, #4]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f022 0203 	bic.w	r2, r2, #3
 800960e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009614:	f043 0210 	orr.w	r2, r3, #16
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2201      	movs	r2, #1
 8009620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f7ff ff79 	bl	800951c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
	...

08009634 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b088      	sub	sp, #32
 8009638:	af00      	add	r7, sp, #0
 800963a:	60f8      	str	r0, [r7, #12]
 800963c:	60b9      	str	r1, [r7, #8]
 800963e:	603b      	str	r3, [r7, #0]
 8009640:	4613      	mov	r3, r2
 8009642:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009644:	f7fb f8a6 	bl	8004794 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964c:	1a9b      	subs	r3, r3, r2
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	4413      	add	r3, r2
 8009652:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009654:	f7fb f89e 	bl	8004794 <HAL_GetTick>
 8009658:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800965a:	4b39      	ldr	r3, [pc, #228]	; (8009740 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	015b      	lsls	r3, r3, #5
 8009660:	0d1b      	lsrs	r3, r3, #20
 8009662:	69fa      	ldr	r2, [r7, #28]
 8009664:	fb02 f303 	mul.w	r3, r2, r3
 8009668:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800966a:	e054      	b.n	8009716 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009672:	d050      	beq.n	8009716 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009674:	f7fb f88e 	bl	8004794 <HAL_GetTick>
 8009678:	4602      	mov	r2, r0
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	1ad3      	subs	r3, r2, r3
 800967e:	69fa      	ldr	r2, [r7, #28]
 8009680:	429a      	cmp	r2, r3
 8009682:	d902      	bls.n	800968a <SPI_WaitFlagStateUntilTimeout+0x56>
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d13d      	bne.n	8009706 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	685a      	ldr	r2, [r3, #4]
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009698:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	685b      	ldr	r3, [r3, #4]
 800969e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096a2:	d111      	bne.n	80096c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	689b      	ldr	r3, [r3, #8]
 80096a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096ac:	d004      	beq.n	80096b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096b6:	d107      	bne.n	80096c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	681a      	ldr	r2, [r3, #0]
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80096c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096d0:	d10f      	bne.n	80096f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2200      	movs	r2, #0
 80096fe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009702:	2303      	movs	r3, #3
 8009704:	e017      	b.n	8009736 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009706:	697b      	ldr	r3, [r7, #20]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d101      	bne.n	8009710 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800970c:	2300      	movs	r3, #0
 800970e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	3b01      	subs	r3, #1
 8009714:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	689a      	ldr	r2, [r3, #8]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	4013      	ands	r3, r2
 8009720:	68ba      	ldr	r2, [r7, #8]
 8009722:	429a      	cmp	r2, r3
 8009724:	bf0c      	ite	eq
 8009726:	2301      	moveq	r3, #1
 8009728:	2300      	movne	r3, #0
 800972a:	b2db      	uxtb	r3, r3
 800972c:	461a      	mov	r2, r3
 800972e:	79fb      	ldrb	r3, [r7, #7]
 8009730:	429a      	cmp	r2, r3
 8009732:	d19b      	bne.n	800966c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009734:	2300      	movs	r3, #0
}
 8009736:	4618      	mov	r0, r3
 8009738:	3720      	adds	r7, #32
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	200000ac 	.word	0x200000ac

08009744 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b08a      	sub	sp, #40	; 0x28
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
 8009750:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009752:	2300      	movs	r3, #0
 8009754:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009756:	f7fb f81d 	bl	8004794 <HAL_GetTick>
 800975a:	4602      	mov	r2, r0
 800975c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800975e:	1a9b      	subs	r3, r3, r2
 8009760:	683a      	ldr	r2, [r7, #0]
 8009762:	4413      	add	r3, r2
 8009764:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009766:	f7fb f815 	bl	8004794 <HAL_GetTick>
 800976a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	330c      	adds	r3, #12
 8009772:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009774:	4b3d      	ldr	r3, [pc, #244]	; (800986c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	00da      	lsls	r2, r3, #3
 8009780:	1ad3      	subs	r3, r2, r3
 8009782:	0d1b      	lsrs	r3, r3, #20
 8009784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009786:	fb02 f303 	mul.w	r3, r2, r3
 800978a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800978c:	e060      	b.n	8009850 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009794:	d107      	bne.n	80097a6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d104      	bne.n	80097a6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	b2db      	uxtb	r3, r3
 80097a2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80097a6:	683b      	ldr	r3, [r7, #0]
 80097a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ac:	d050      	beq.n	8009850 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80097ae:	f7fa fff1 	bl	8004794 <HAL_GetTick>
 80097b2:	4602      	mov	r2, r0
 80097b4:	6a3b      	ldr	r3, [r7, #32]
 80097b6:	1ad3      	subs	r3, r2, r3
 80097b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ba:	429a      	cmp	r2, r3
 80097bc:	d902      	bls.n	80097c4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d13d      	bne.n	8009840 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80097d2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80097dc:	d111      	bne.n	8009802 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	689b      	ldr	r3, [r3, #8]
 80097e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097e6:	d004      	beq.n	80097f2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097f0:	d107      	bne.n	8009802 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	681a      	ldr	r2, [r3, #0]
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009800:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800980a:	d10f      	bne.n	800982c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	681a      	ldr	r2, [r3, #0]
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800981a:	601a      	str	r2, [r3, #0]
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	681a      	ldr	r2, [r3, #0]
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800982a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	2200      	movs	r2, #0
 8009838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800983c:	2303      	movs	r3, #3
 800983e:	e010      	b.n	8009862 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009840:	69bb      	ldr	r3, [r7, #24]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d101      	bne.n	800984a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	3b01      	subs	r3, #1
 800984e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	689a      	ldr	r2, [r3, #8]
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	4013      	ands	r3, r2
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	429a      	cmp	r2, r3
 800985e:	d196      	bne.n	800978e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3728      	adds	r7, #40	; 0x28
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	200000ac 	.word	0x200000ac

08009870 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b086      	sub	sp, #24
 8009874:	af02      	add	r7, sp, #8
 8009876:	60f8      	str	r0, [r7, #12]
 8009878:	60b9      	str	r1, [r7, #8]
 800987a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	9300      	str	r3, [sp, #0]
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	2200      	movs	r2, #0
 8009884:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f7ff ff5b 	bl	8009744 <SPI_WaitFifoStateUntilTimeout>
 800988e:	4603      	mov	r3, r0
 8009890:	2b00      	cmp	r3, #0
 8009892:	d007      	beq.n	80098a4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009898:	f043 0220 	orr.w	r2, r3, #32
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098a0:	2303      	movs	r3, #3
 80098a2:	e027      	b.n	80098f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	9300      	str	r3, [sp, #0]
 80098a8:	68bb      	ldr	r3, [r7, #8]
 80098aa:	2200      	movs	r2, #0
 80098ac:	2180      	movs	r1, #128	; 0x80
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7ff fec0 	bl	8009634 <SPI_WaitFlagStateUntilTimeout>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d007      	beq.n	80098ca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098be:	f043 0220 	orr.w	r2, r3, #32
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098c6:	2303      	movs	r3, #3
 80098c8:	e014      	b.n	80098f4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	9300      	str	r3, [sp, #0]
 80098ce:	68bb      	ldr	r3, [r7, #8]
 80098d0:	2200      	movs	r2, #0
 80098d2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f7ff ff34 	bl	8009744 <SPI_WaitFifoStateUntilTimeout>
 80098dc:	4603      	mov	r3, r0
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d007      	beq.n	80098f2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80098e6:	f043 0220 	orr.w	r2, r3, #32
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80098ee:	2303      	movs	r3, #3
 80098f0:	e000      	b.n	80098f4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80098f2:	2300      	movs	r3, #0
}
 80098f4:	4618      	mov	r0, r3
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}

080098fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b082      	sub	sp, #8
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d101      	bne.n	800990e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800990a:	2301      	movs	r3, #1
 800990c:	e049      	b.n	80099a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d106      	bne.n	8009928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009922:	6878      	ldr	r0, [r7, #4]
 8009924:	f7fa fc5e 	bl	80041e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2202      	movs	r2, #2
 800992c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681a      	ldr	r2, [r3, #0]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	3304      	adds	r3, #4
 8009938:	4619      	mov	r1, r3
 800993a:	4610      	mov	r0, r2
 800993c:	f000 fed8 	bl	800a6f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2201      	movs	r2, #1
 8009944:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2201      	movs	r2, #1
 8009954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2201      	movs	r2, #1
 800995c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2201      	movs	r2, #1
 800996c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2201      	movs	r2, #1
 800997c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2201      	movs	r2, #1
 800998c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2201      	movs	r2, #1
 800999c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099a0:	2300      	movs	r3, #0
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
	...

080099ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b085      	sub	sp, #20
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ba:	b2db      	uxtb	r3, r3
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d001      	beq.n	80099c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80099c0:	2301      	movs	r3, #1
 80099c2:	e04a      	b.n	8009a5a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2202      	movs	r2, #2
 80099c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68da      	ldr	r2, [r3, #12]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f042 0201 	orr.w	r2, r2, #1
 80099da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a21      	ldr	r2, [pc, #132]	; (8009a68 <HAL_TIM_Base_Start_IT+0xbc>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d018      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x6c>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099ee:	d013      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x6c>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a1d      	ldr	r2, [pc, #116]	; (8009a6c <HAL_TIM_Base_Start_IT+0xc0>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00e      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x6c>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a1c      	ldr	r2, [pc, #112]	; (8009a70 <HAL_TIM_Base_Start_IT+0xc4>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d009      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x6c>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a1a      	ldr	r2, [pc, #104]	; (8009a74 <HAL_TIM_Base_Start_IT+0xc8>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d004      	beq.n	8009a18 <HAL_TIM_Base_Start_IT+0x6c>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a19      	ldr	r2, [pc, #100]	; (8009a78 <HAL_TIM_Base_Start_IT+0xcc>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d115      	bne.n	8009a44 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	689a      	ldr	r2, [r3, #8]
 8009a1e:	4b17      	ldr	r3, [pc, #92]	; (8009a7c <HAL_TIM_Base_Start_IT+0xd0>)
 8009a20:	4013      	ands	r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2b06      	cmp	r3, #6
 8009a28:	d015      	beq.n	8009a56 <HAL_TIM_Base_Start_IT+0xaa>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a30:	d011      	beq.n	8009a56 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	681a      	ldr	r2, [r3, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f042 0201 	orr.w	r2, r2, #1
 8009a40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a42:	e008      	b.n	8009a56 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f042 0201 	orr.w	r2, r2, #1
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	e000      	b.n	8009a58 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a56:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009a58:	2300      	movs	r3, #0
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a64:	4770      	bx	lr
 8009a66:	bf00      	nop
 8009a68:	40012c00 	.word	0x40012c00
 8009a6c:	40000400 	.word	0x40000400
 8009a70:	40000800 	.word	0x40000800
 8009a74:	40013400 	.word	0x40013400
 8009a78:	40014000 	.word	0x40014000
 8009a7c:	00010007 	.word	0x00010007

08009a80 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68da      	ldr	r2, [r3, #12]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f022 0201 	bic.w	r2, r2, #1
 8009a96:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6a1a      	ldr	r2, [r3, #32]
 8009a9e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009aa2:	4013      	ands	r3, r2
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d10f      	bne.n	8009ac8 <HAL_TIM_Base_Stop_IT+0x48>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	6a1a      	ldr	r2, [r3, #32]
 8009aae:	f240 4344 	movw	r3, #1092	; 0x444
 8009ab2:	4013      	ands	r3, r2
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d107      	bne.n	8009ac8 <HAL_TIM_Base_Stop_IT+0x48>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f022 0201 	bic.w	r2, r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009ad0:	2300      	movs	r3, #0
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ade:	b580      	push	{r7, lr}
 8009ae0:	b082      	sub	sp, #8
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d101      	bne.n	8009af0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009aec:	2301      	movs	r3, #1
 8009aee:	e049      	b.n	8009b84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009af6:	b2db      	uxtb	r3, r3
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d106      	bne.n	8009b0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7fa fc09 	bl	800431c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2202      	movs	r2, #2
 8009b0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	3304      	adds	r3, #4
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	4610      	mov	r0, r2
 8009b1e:	f000 fde7 	bl	800a6f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2201      	movs	r2, #1
 8009b2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2201      	movs	r2, #1
 8009b36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2201      	movs	r2, #1
 8009b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2201      	movs	r2, #1
 8009b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2201      	movs	r2, #1
 8009b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2201      	movs	r2, #1
 8009b56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2201      	movs	r2, #1
 8009b66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2201      	movs	r2, #1
 8009b76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b82:	2300      	movs	r3, #0
}
 8009b84:	4618      	mov	r0, r3
 8009b86:	3708      	adds	r7, #8
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	bd80      	pop	{r7, pc}

08009b8c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b084      	sub	sp, #16
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
 8009b94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b96:	2300      	movs	r3, #0
 8009b98:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d109      	bne.n	8009bb4 <HAL_TIM_PWM_Start_IT+0x28>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	bf14      	ite	ne
 8009bac:	2301      	movne	r3, #1
 8009bae:	2300      	moveq	r3, #0
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	e03c      	b.n	8009c2e <HAL_TIM_PWM_Start_IT+0xa2>
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b04      	cmp	r3, #4
 8009bb8:	d109      	bne.n	8009bce <HAL_TIM_PWM_Start_IT+0x42>
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	bf14      	ite	ne
 8009bc6:	2301      	movne	r3, #1
 8009bc8:	2300      	moveq	r3, #0
 8009bca:	b2db      	uxtb	r3, r3
 8009bcc:	e02f      	b.n	8009c2e <HAL_TIM_PWM_Start_IT+0xa2>
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	2b08      	cmp	r3, #8
 8009bd2:	d109      	bne.n	8009be8 <HAL_TIM_PWM_Start_IT+0x5c>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bda:	b2db      	uxtb	r3, r3
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	bf14      	ite	ne
 8009be0:	2301      	movne	r3, #1
 8009be2:	2300      	moveq	r3, #0
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	e022      	b.n	8009c2e <HAL_TIM_PWM_Start_IT+0xa2>
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	2b0c      	cmp	r3, #12
 8009bec:	d109      	bne.n	8009c02 <HAL_TIM_PWM_Start_IT+0x76>
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	bf14      	ite	ne
 8009bfa:	2301      	movne	r3, #1
 8009bfc:	2300      	moveq	r3, #0
 8009bfe:	b2db      	uxtb	r3, r3
 8009c00:	e015      	b.n	8009c2e <HAL_TIM_PWM_Start_IT+0xa2>
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	2b10      	cmp	r3, #16
 8009c06:	d109      	bne.n	8009c1c <HAL_TIM_PWM_Start_IT+0x90>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	bf14      	ite	ne
 8009c14:	2301      	movne	r3, #1
 8009c16:	2300      	moveq	r3, #0
 8009c18:	b2db      	uxtb	r3, r3
 8009c1a:	e008      	b.n	8009c2e <HAL_TIM_PWM_Start_IT+0xa2>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	bf14      	ite	ne
 8009c28:	2301      	movne	r3, #1
 8009c2a:	2300      	moveq	r3, #0
 8009c2c:	b2db      	uxtb	r3, r3
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d001      	beq.n	8009c36 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e0e2      	b.n	8009dfc <HAL_TIM_PWM_Start_IT+0x270>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d104      	bne.n	8009c46 <HAL_TIM_PWM_Start_IT+0xba>
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c44:	e023      	b.n	8009c8e <HAL_TIM_PWM_Start_IT+0x102>
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	2b04      	cmp	r3, #4
 8009c4a:	d104      	bne.n	8009c56 <HAL_TIM_PWM_Start_IT+0xca>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c54:	e01b      	b.n	8009c8e <HAL_TIM_PWM_Start_IT+0x102>
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	2b08      	cmp	r3, #8
 8009c5a:	d104      	bne.n	8009c66 <HAL_TIM_PWM_Start_IT+0xda>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2202      	movs	r2, #2
 8009c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c64:	e013      	b.n	8009c8e <HAL_TIM_PWM_Start_IT+0x102>
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b0c      	cmp	r3, #12
 8009c6a:	d104      	bne.n	8009c76 <HAL_TIM_PWM_Start_IT+0xea>
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2202      	movs	r2, #2
 8009c70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c74:	e00b      	b.n	8009c8e <HAL_TIM_PWM_Start_IT+0x102>
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	2b10      	cmp	r3, #16
 8009c7a:	d104      	bne.n	8009c86 <HAL_TIM_PWM_Start_IT+0xfa>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2202      	movs	r2, #2
 8009c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c84:	e003      	b.n	8009c8e <HAL_TIM_PWM_Start_IT+0x102>
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2202      	movs	r2, #2
 8009c8a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	2b0c      	cmp	r3, #12
 8009c92:	d841      	bhi.n	8009d18 <HAL_TIM_PWM_Start_IT+0x18c>
 8009c94:	a201      	add	r2, pc, #4	; (adr r2, 8009c9c <HAL_TIM_PWM_Start_IT+0x110>)
 8009c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c9a:	bf00      	nop
 8009c9c:	08009cd1 	.word	0x08009cd1
 8009ca0:	08009d19 	.word	0x08009d19
 8009ca4:	08009d19 	.word	0x08009d19
 8009ca8:	08009d19 	.word	0x08009d19
 8009cac:	08009ce3 	.word	0x08009ce3
 8009cb0:	08009d19 	.word	0x08009d19
 8009cb4:	08009d19 	.word	0x08009d19
 8009cb8:	08009d19 	.word	0x08009d19
 8009cbc:	08009cf5 	.word	0x08009cf5
 8009cc0:	08009d19 	.word	0x08009d19
 8009cc4:	08009d19 	.word	0x08009d19
 8009cc8:	08009d19 	.word	0x08009d19
 8009ccc:	08009d07 	.word	0x08009d07
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f042 0202 	orr.w	r2, r2, #2
 8009cde:	60da      	str	r2, [r3, #12]
      break;
 8009ce0:	e01d      	b.n	8009d1e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	68da      	ldr	r2, [r3, #12]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	f042 0204 	orr.w	r2, r2, #4
 8009cf0:	60da      	str	r2, [r3, #12]
      break;
 8009cf2:	e014      	b.n	8009d1e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68da      	ldr	r2, [r3, #12]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f042 0208 	orr.w	r2, r2, #8
 8009d02:	60da      	str	r2, [r3, #12]
      break;
 8009d04:	e00b      	b.n	8009d1e <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	68da      	ldr	r2, [r3, #12]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f042 0210 	orr.w	r2, r2, #16
 8009d14:	60da      	str	r2, [r3, #12]
      break;
 8009d16:	e002      	b.n	8009d1e <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8009d18:	2301      	movs	r3, #1
 8009d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d16a      	bne.n	8009dfa <HAL_TIM_PWM_Start_IT+0x26e>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2201      	movs	r2, #1
 8009d2a:	6839      	ldr	r1, [r7, #0]
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f001 f8df 	bl	800aef0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a33      	ldr	r2, [pc, #204]	; (8009e04 <HAL_TIM_PWM_Start_IT+0x278>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d013      	beq.n	8009d64 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a31      	ldr	r2, [pc, #196]	; (8009e08 <HAL_TIM_PWM_Start_IT+0x27c>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d00e      	beq.n	8009d64 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a30      	ldr	r2, [pc, #192]	; (8009e0c <HAL_TIM_PWM_Start_IT+0x280>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d009      	beq.n	8009d64 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a2e      	ldr	r2, [pc, #184]	; (8009e10 <HAL_TIM_PWM_Start_IT+0x284>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d004      	beq.n	8009d64 <HAL_TIM_PWM_Start_IT+0x1d8>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a2d      	ldr	r2, [pc, #180]	; (8009e14 <HAL_TIM_PWM_Start_IT+0x288>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d101      	bne.n	8009d68 <HAL_TIM_PWM_Start_IT+0x1dc>
 8009d64:	2301      	movs	r3, #1
 8009d66:	e000      	b.n	8009d6a <HAL_TIM_PWM_Start_IT+0x1de>
 8009d68:	2300      	movs	r3, #0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d007      	beq.n	8009d7e <HAL_TIM_PWM_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d7c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	4a20      	ldr	r2, [pc, #128]	; (8009e04 <HAL_TIM_PWM_Start_IT+0x278>)
 8009d84:	4293      	cmp	r3, r2
 8009d86:	d018      	beq.n	8009dba <HAL_TIM_PWM_Start_IT+0x22e>
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d90:	d013      	beq.n	8009dba <HAL_TIM_PWM_Start_IT+0x22e>
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	4a20      	ldr	r2, [pc, #128]	; (8009e18 <HAL_TIM_PWM_Start_IT+0x28c>)
 8009d98:	4293      	cmp	r3, r2
 8009d9a:	d00e      	beq.n	8009dba <HAL_TIM_PWM_Start_IT+0x22e>
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	4a1e      	ldr	r2, [pc, #120]	; (8009e1c <HAL_TIM_PWM_Start_IT+0x290>)
 8009da2:	4293      	cmp	r3, r2
 8009da4:	d009      	beq.n	8009dba <HAL_TIM_PWM_Start_IT+0x22e>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a17      	ldr	r2, [pc, #92]	; (8009e08 <HAL_TIM_PWM_Start_IT+0x27c>)
 8009dac:	4293      	cmp	r3, r2
 8009dae:	d004      	beq.n	8009dba <HAL_TIM_PWM_Start_IT+0x22e>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a15      	ldr	r2, [pc, #84]	; (8009e0c <HAL_TIM_PWM_Start_IT+0x280>)
 8009db6:	4293      	cmp	r3, r2
 8009db8:	d115      	bne.n	8009de6 <HAL_TIM_PWM_Start_IT+0x25a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	689a      	ldr	r2, [r3, #8]
 8009dc0:	4b17      	ldr	r3, [pc, #92]	; (8009e20 <HAL_TIM_PWM_Start_IT+0x294>)
 8009dc2:	4013      	ands	r3, r2
 8009dc4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	2b06      	cmp	r3, #6
 8009dca:	d015      	beq.n	8009df8 <HAL_TIM_PWM_Start_IT+0x26c>
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dd2:	d011      	beq.n	8009df8 <HAL_TIM_PWM_Start_IT+0x26c>
      {
        __HAL_TIM_ENABLE(htim);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f042 0201 	orr.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de4:	e008      	b.n	8009df8 <HAL_TIM_PWM_Start_IT+0x26c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	f042 0201 	orr.w	r2, r2, #1
 8009df4:	601a      	str	r2, [r3, #0]
 8009df6:	e000      	b.n	8009dfa <HAL_TIM_PWM_Start_IT+0x26e>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8009dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3710      	adds	r7, #16
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	40012c00 	.word	0x40012c00
 8009e08:	40013400 	.word	0x40013400
 8009e0c:	40014000 	.word	0x40014000
 8009e10:	40014400 	.word	0x40014400
 8009e14:	40014800 	.word	0x40014800
 8009e18:	40000400 	.word	0x40000400
 8009e1c:	40000800 	.word	0x40000800
 8009e20:	00010007 	.word	0x00010007

08009e24 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d101      	bne.n	8009e38 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009e34:	2301      	movs	r3, #1
 8009e36:	e097      	b.n	8009f68 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d106      	bne.n	8009e52 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f7fa f9fd 	bl	800424c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2202      	movs	r2, #2
 8009e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	689b      	ldr	r3, [r3, #8]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	6812      	ldr	r2, [r2, #0]
 8009e64:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009e68:	f023 0307 	bic.w	r3, r3, #7
 8009e6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	3304      	adds	r3, #4
 8009e76:	4619      	mov	r1, r3
 8009e78:	4610      	mov	r0, r2
 8009e7a:	f000 fc39 	bl	800a6f0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	689b      	ldr	r3, [r3, #8]
 8009e84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	699b      	ldr	r3, [r3, #24]
 8009e8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	6a1b      	ldr	r3, [r3, #32]
 8009e94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	697a      	ldr	r2, [r7, #20]
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ea6:	f023 0303 	bic.w	r3, r3, #3
 8009eaa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	689a      	ldr	r2, [r3, #8]
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	699b      	ldr	r3, [r3, #24]
 8009eb4:	021b      	lsls	r3, r3, #8
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009ec4:	f023 030c 	bic.w	r3, r3, #12
 8009ec8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ed0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ed4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009ed6:	683b      	ldr	r3, [r7, #0]
 8009ed8:	68da      	ldr	r2, [r3, #12]
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	69db      	ldr	r3, [r3, #28]
 8009ede:	021b      	lsls	r3, r3, #8
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	693a      	ldr	r2, [r7, #16]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	011a      	lsls	r2, r3, #4
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	031b      	lsls	r3, r3, #12
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009f02:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009f0a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	695b      	ldr	r3, [r3, #20]
 8009f14:	011b      	lsls	r3, r3, #4
 8009f16:	4313      	orrs	r3, r2
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	693a      	ldr	r2, [r7, #16]
 8009f2c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	68fa      	ldr	r2, [r7, #12]
 8009f34:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2201      	movs	r2, #1
 8009f3a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2201      	movs	r2, #1
 8009f4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2201      	movs	r2, #1
 8009f52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2201      	movs	r2, #1
 8009f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2201      	movs	r2, #1
 8009f62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3718      	adds	r7, #24
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b084      	sub	sp, #16
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
 8009f78:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f80:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f88:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009f90:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009f98:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d110      	bne.n	8009fc2 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fa0:	7bfb      	ldrb	r3, [r7, #15]
 8009fa2:	2b01      	cmp	r3, #1
 8009fa4:	d102      	bne.n	8009fac <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009fa6:	7b7b      	ldrb	r3, [r7, #13]
 8009fa8:	2b01      	cmp	r3, #1
 8009faa:	d001      	beq.n	8009fb0 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e089      	b.n	800a0c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2202      	movs	r2, #2
 8009fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009fc0:	e031      	b.n	800a026 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	2b04      	cmp	r3, #4
 8009fc6:	d110      	bne.n	8009fea <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d102      	bne.n	8009fd4 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009fce:	7b3b      	ldrb	r3, [r7, #12]
 8009fd0:	2b01      	cmp	r3, #1
 8009fd2:	d001      	beq.n	8009fd8 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8009fd4:	2301      	movs	r3, #1
 8009fd6:	e075      	b.n	800a0c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2202      	movs	r2, #2
 8009fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2202      	movs	r2, #2
 8009fe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009fe8:	e01d      	b.n	800a026 <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009fea:	7bfb      	ldrb	r3, [r7, #15]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d108      	bne.n	800a002 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d105      	bne.n	800a002 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009ff6:	7b7b      	ldrb	r3, [r7, #13]
 8009ff8:	2b01      	cmp	r3, #1
 8009ffa:	d102      	bne.n	800a002 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009ffc:	7b3b      	ldrb	r3, [r7, #12]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d001      	beq.n	800a006 <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e05e      	b.n	800a0c4 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2202      	movs	r2, #2
 800a00a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2202      	movs	r2, #2
 800a012:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2202      	movs	r2, #2
 800a01a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2202      	movs	r2, #2
 800a022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d003      	beq.n	800a034 <HAL_TIM_Encoder_Start_IT+0xc4>
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2b04      	cmp	r3, #4
 800a030:	d010      	beq.n	800a054 <HAL_TIM_Encoder_Start_IT+0xe4>
 800a032:	e01f      	b.n	800a074 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	2201      	movs	r2, #1
 800a03a:	2100      	movs	r1, #0
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 ff57 	bl	800aef0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68da      	ldr	r2, [r3, #12]
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f042 0202 	orr.w	r2, r2, #2
 800a050:	60da      	str	r2, [r3, #12]
      break;
 800a052:	e02e      	b.n	800a0b2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2201      	movs	r2, #1
 800a05a:	2104      	movs	r1, #4
 800a05c:	4618      	mov	r0, r3
 800a05e:	f000 ff47 	bl	800aef0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68da      	ldr	r2, [r3, #12]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f042 0204 	orr.w	r2, r2, #4
 800a070:	60da      	str	r2, [r3, #12]
      break;
 800a072:	e01e      	b.n	800a0b2 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2201      	movs	r2, #1
 800a07a:	2100      	movs	r1, #0
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 ff37 	bl	800aef0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2201      	movs	r2, #1
 800a088:	2104      	movs	r1, #4
 800a08a:	4618      	mov	r0, r3
 800a08c:	f000 ff30 	bl	800aef0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	68da      	ldr	r2, [r3, #12]
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f042 0202 	orr.w	r2, r2, #2
 800a09e:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	68da      	ldr	r2, [r3, #12]
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f042 0204 	orr.w	r2, r2, #4
 800a0ae:	60da      	str	r2, [r3, #12]
      break;
 800a0b0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	681a      	ldr	r2, [r3, #0]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f042 0201 	orr.w	r2, r2, #1
 800a0c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	f003 0302 	and.w	r3, r3, #2
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d122      	bne.n	800a128 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f003 0302 	and.w	r3, r3, #2
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d11b      	bne.n	800a128 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f06f 0202 	mvn.w	r2, #2
 800a0f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2201      	movs	r2, #1
 800a0fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	f003 0303 	and.w	r3, r3, #3
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d003      	beq.n	800a116 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f7f7 fb94 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 800a114:	e005      	b.n	800a122 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f000 fad5 	bl	800a6c6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f7f7 fbb3 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2200      	movs	r2, #0
 800a126:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	691b      	ldr	r3, [r3, #16]
 800a12e:	f003 0304 	and.w	r3, r3, #4
 800a132:	2b04      	cmp	r3, #4
 800a134:	d122      	bne.n	800a17c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	68db      	ldr	r3, [r3, #12]
 800a13c:	f003 0304 	and.w	r3, r3, #4
 800a140:	2b04      	cmp	r3, #4
 800a142:	d11b      	bne.n	800a17c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f06f 0204 	mvn.w	r2, #4
 800a14c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2202      	movs	r2, #2
 800a152:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d003      	beq.n	800a16a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f7f7 fb6a 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 800a168:	e005      	b.n	800a176 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f000 faab 	bl	800a6c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f7f7 fb89 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2200      	movs	r2, #0
 800a17a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	f003 0308 	and.w	r3, r3, #8
 800a186:	2b08      	cmp	r3, #8
 800a188:	d122      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f003 0308 	and.w	r3, r3, #8
 800a194:	2b08      	cmp	r3, #8
 800a196:	d11b      	bne.n	800a1d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f06f 0208 	mvn.w	r2, #8
 800a1a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2204      	movs	r2, #4
 800a1a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	69db      	ldr	r3, [r3, #28]
 800a1ae:	f003 0303 	and.w	r3, r3, #3
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d003      	beq.n	800a1be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f7f7 fb40 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 800a1bc:	e005      	b.n	800a1ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f000 fa81 	bl	800a6c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1c4:	6878      	ldr	r0, [r7, #4]
 800a1c6:	f7f7 fb5f 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2200      	movs	r2, #0
 800a1ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	f003 0310 	and.w	r3, r3, #16
 800a1da:	2b10      	cmp	r3, #16
 800a1dc:	d122      	bne.n	800a224 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	f003 0310 	and.w	r3, r3, #16
 800a1e8:	2b10      	cmp	r3, #16
 800a1ea:	d11b      	bne.n	800a224 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f06f 0210 	mvn.w	r2, #16
 800a1f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2208      	movs	r2, #8
 800a1fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7f7 fb16 	bl	800183c <HAL_TIM_IC_CaptureCallback>
 800a210:	e005      	b.n	800a21e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa57 	bl	800a6c6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7f7 fb35 	bl	8001888 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	691b      	ldr	r3, [r3, #16]
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	2b01      	cmp	r3, #1
 800a230:	d10e      	bne.n	800a250 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	68db      	ldr	r3, [r3, #12]
 800a238:	f003 0301 	and.w	r3, r3, #1
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d107      	bne.n	800a250 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f06f 0201 	mvn.w	r2, #1
 800a248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f7f7 fb44 	bl	80018d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a25a:	2b80      	cmp	r3, #128	; 0x80
 800a25c:	d10e      	bne.n	800a27c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68db      	ldr	r3, [r3, #12]
 800a264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a268:	2b80      	cmp	r3, #128	; 0x80
 800a26a:	d107      	bne.n	800a27c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a274:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f001 f81c 	bl	800b2b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	691b      	ldr	r3, [r3, #16]
 800a282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a28a:	d10e      	bne.n	800a2aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	68db      	ldr	r3, [r3, #12]
 800a292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a296:	2b80      	cmp	r3, #128	; 0x80
 800a298:	d107      	bne.n	800a2aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a2a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f001 f80f 	bl	800b2c8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	691b      	ldr	r3, [r3, #16]
 800a2b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2b4:	2b40      	cmp	r3, #64	; 0x40
 800a2b6:	d10e      	bne.n	800a2d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	68db      	ldr	r3, [r3, #12]
 800a2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c2:	2b40      	cmp	r3, #64	; 0x40
 800a2c4:	d107      	bne.n	800a2d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a2ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fa02 	bl	800a6da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	691b      	ldr	r3, [r3, #16]
 800a2dc:	f003 0320 	and.w	r3, r3, #32
 800a2e0:	2b20      	cmp	r3, #32
 800a2e2:	d10e      	bne.n	800a302 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	f003 0320 	and.w	r3, r3, #32
 800a2ee:	2b20      	cmp	r3, #32
 800a2f0:	d107      	bne.n	800a302 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f06f 0220 	mvn.w	r2, #32
 800a2fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 ffcf 	bl	800b2a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a302:	bf00      	nop
 800a304:	3708      	adds	r7, #8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
	...

0800a30c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a318:	2300      	movs	r3, #0
 800a31a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a322:	2b01      	cmp	r3, #1
 800a324:	d101      	bne.n	800a32a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a326:	2302      	movs	r3, #2
 800a328:	e0ff      	b.n	800a52a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2b14      	cmp	r3, #20
 800a336:	f200 80f0 	bhi.w	800a51a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800a33a:	a201      	add	r2, pc, #4	; (adr r2, 800a340 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a33c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a340:	0800a395 	.word	0x0800a395
 800a344:	0800a51b 	.word	0x0800a51b
 800a348:	0800a51b 	.word	0x0800a51b
 800a34c:	0800a51b 	.word	0x0800a51b
 800a350:	0800a3d5 	.word	0x0800a3d5
 800a354:	0800a51b 	.word	0x0800a51b
 800a358:	0800a51b 	.word	0x0800a51b
 800a35c:	0800a51b 	.word	0x0800a51b
 800a360:	0800a417 	.word	0x0800a417
 800a364:	0800a51b 	.word	0x0800a51b
 800a368:	0800a51b 	.word	0x0800a51b
 800a36c:	0800a51b 	.word	0x0800a51b
 800a370:	0800a457 	.word	0x0800a457
 800a374:	0800a51b 	.word	0x0800a51b
 800a378:	0800a51b 	.word	0x0800a51b
 800a37c:	0800a51b 	.word	0x0800a51b
 800a380:	0800a499 	.word	0x0800a499
 800a384:	0800a51b 	.word	0x0800a51b
 800a388:	0800a51b 	.word	0x0800a51b
 800a38c:	0800a51b 	.word	0x0800a51b
 800a390:	0800a4d9 	.word	0x0800a4d9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	68b9      	ldr	r1, [r7, #8]
 800a39a:	4618      	mov	r0, r3
 800a39c:	f000 fa38 	bl	800a810 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	699a      	ldr	r2, [r3, #24]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f042 0208 	orr.w	r2, r2, #8
 800a3ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	699a      	ldr	r2, [r3, #24]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f022 0204 	bic.w	r2, r2, #4
 800a3be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6999      	ldr	r1, [r3, #24]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	691a      	ldr	r2, [r3, #16]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	619a      	str	r2, [r3, #24]
      break;
 800a3d2:	e0a5      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	68b9      	ldr	r1, [r7, #8]
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 faa8 	bl	800a930 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	699a      	ldr	r2, [r3, #24]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	699a      	ldr	r2, [r3, #24]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	6999      	ldr	r1, [r3, #24]
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	691b      	ldr	r3, [r3, #16]
 800a40a:	021a      	lsls	r2, r3, #8
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	430a      	orrs	r2, r1
 800a412:	619a      	str	r2, [r3, #24]
      break;
 800a414:	e084      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68b9      	ldr	r1, [r7, #8]
 800a41c:	4618      	mov	r0, r3
 800a41e:	f000 fb11 	bl	800aa44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	69da      	ldr	r2, [r3, #28]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f042 0208 	orr.w	r2, r2, #8
 800a430:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	69da      	ldr	r2, [r3, #28]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f022 0204 	bic.w	r2, r2, #4
 800a440:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	69d9      	ldr	r1, [r3, #28]
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	691a      	ldr	r2, [r3, #16]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	430a      	orrs	r2, r1
 800a452:	61da      	str	r2, [r3, #28]
      break;
 800a454:	e064      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	68b9      	ldr	r1, [r7, #8]
 800a45c:	4618      	mov	r0, r3
 800a45e:	f000 fb79 	bl	800ab54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	69da      	ldr	r2, [r3, #28]
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	69da      	ldr	r2, [r3, #28]
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	69d9      	ldr	r1, [r3, #28]
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	691b      	ldr	r3, [r3, #16]
 800a48c:	021a      	lsls	r2, r3, #8
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	430a      	orrs	r2, r1
 800a494:	61da      	str	r2, [r3, #28]
      break;
 800a496:	e043      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68b9      	ldr	r1, [r7, #8]
 800a49e:	4618      	mov	r0, r3
 800a4a0:	f000 fbc2 	bl	800ac28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f042 0208 	orr.w	r2, r2, #8
 800a4b2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f022 0204 	bic.w	r2, r2, #4
 800a4c2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	691a      	ldr	r2, [r3, #16]
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	430a      	orrs	r2, r1
 800a4d4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a4d6:	e023      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68b9      	ldr	r1, [r7, #8]
 800a4de:	4618      	mov	r0, r3
 800a4e0:	f000 fc06 	bl	800acf0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a4f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a502:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a50a:	68bb      	ldr	r3, [r7, #8]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	021a      	lsls	r2, r3, #8
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	430a      	orrs	r2, r1
 800a516:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a518:	e002      	b.n	800a520 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800a51a:	2301      	movs	r3, #1
 800a51c:	75fb      	strb	r3, [r7, #23]
      break;
 800a51e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a528:	7dfb      	ldrb	r3, [r7, #23]
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3718      	adds	r7, #24
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop

0800a534 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b084      	sub	sp, #16
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a53e:	2300      	movs	r3, #0
 800a540:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a548:	2b01      	cmp	r3, #1
 800a54a:	d101      	bne.n	800a550 <HAL_TIM_ConfigClockSource+0x1c>
 800a54c:	2302      	movs	r3, #2
 800a54e:	e0b6      	b.n	800a6be <HAL_TIM_ConfigClockSource+0x18a>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2201      	movs	r2, #1
 800a554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	2202      	movs	r2, #2
 800a55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a56e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a57a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a58c:	d03e      	beq.n	800a60c <HAL_TIM_ConfigClockSource+0xd8>
 800a58e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a592:	f200 8087 	bhi.w	800a6a4 <HAL_TIM_ConfigClockSource+0x170>
 800a596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a59a:	f000 8086 	beq.w	800a6aa <HAL_TIM_ConfigClockSource+0x176>
 800a59e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5a2:	d87f      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x170>
 800a5a4:	2b70      	cmp	r3, #112	; 0x70
 800a5a6:	d01a      	beq.n	800a5de <HAL_TIM_ConfigClockSource+0xaa>
 800a5a8:	2b70      	cmp	r3, #112	; 0x70
 800a5aa:	d87b      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x170>
 800a5ac:	2b60      	cmp	r3, #96	; 0x60
 800a5ae:	d050      	beq.n	800a652 <HAL_TIM_ConfigClockSource+0x11e>
 800a5b0:	2b60      	cmp	r3, #96	; 0x60
 800a5b2:	d877      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x170>
 800a5b4:	2b50      	cmp	r3, #80	; 0x50
 800a5b6:	d03c      	beq.n	800a632 <HAL_TIM_ConfigClockSource+0xfe>
 800a5b8:	2b50      	cmp	r3, #80	; 0x50
 800a5ba:	d873      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x170>
 800a5bc:	2b40      	cmp	r3, #64	; 0x40
 800a5be:	d058      	beq.n	800a672 <HAL_TIM_ConfigClockSource+0x13e>
 800a5c0:	2b40      	cmp	r3, #64	; 0x40
 800a5c2:	d86f      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x170>
 800a5c4:	2b30      	cmp	r3, #48	; 0x30
 800a5c6:	d064      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0x15e>
 800a5c8:	2b30      	cmp	r3, #48	; 0x30
 800a5ca:	d86b      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x170>
 800a5cc:	2b20      	cmp	r3, #32
 800a5ce:	d060      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0x15e>
 800a5d0:	2b20      	cmp	r3, #32
 800a5d2:	d867      	bhi.n	800a6a4 <HAL_TIM_ConfigClockSource+0x170>
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d05c      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0x15e>
 800a5d8:	2b10      	cmp	r3, #16
 800a5da:	d05a      	beq.n	800a692 <HAL_TIM_ConfigClockSource+0x15e>
 800a5dc:	e062      	b.n	800a6a4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a5ee:	f000 fc5f 	bl	800aeb0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	609a      	str	r2, [r3, #8]
      break;
 800a60a:	e04f      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800a61c:	f000 fc48 	bl	800aeb0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	689a      	ldr	r2, [r3, #8]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a62e:	609a      	str	r2, [r3, #8]
      break;
 800a630:	e03c      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a63e:	461a      	mov	r2, r3
 800a640:	f000 fbbc 	bl	800adbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	2150      	movs	r1, #80	; 0x50
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 fc15 	bl	800ae7a <TIM_ITRx_SetConfig>
      break;
 800a650:	e02c      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a65e:	461a      	mov	r2, r3
 800a660:	f000 fbdb 	bl	800ae1a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2160      	movs	r1, #96	; 0x60
 800a66a:	4618      	mov	r0, r3
 800a66c:	f000 fc05 	bl	800ae7a <TIM_ITRx_SetConfig>
      break;
 800a670:	e01c      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a67e:	461a      	mov	r2, r3
 800a680:	f000 fb9c 	bl	800adbc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	2140      	movs	r1, #64	; 0x40
 800a68a:	4618      	mov	r0, r3
 800a68c:	f000 fbf5 	bl	800ae7a <TIM_ITRx_SetConfig>
      break;
 800a690:	e00c      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681a      	ldr	r2, [r3, #0]
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	4619      	mov	r1, r3
 800a69c:	4610      	mov	r0, r2
 800a69e:	f000 fbec 	bl	800ae7a <TIM_ITRx_SetConfig>
      break;
 800a6a2:	e003      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800a6a8:	e000      	b.n	800a6ac <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a6aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b083      	sub	sp, #12
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a6ce:	bf00      	nop
 800a6d0:	370c      	adds	r7, #12
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d8:	4770      	bx	lr

0800a6da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a6da:	b480      	push	{r7}
 800a6dc:	b083      	sub	sp, #12
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a6e2:	bf00      	nop
 800a6e4:	370c      	adds	r7, #12
 800a6e6:	46bd      	mov	sp, r7
 800a6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ec:	4770      	bx	lr
	...

0800a6f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	4a3c      	ldr	r2, [pc, #240]	; (800a7f4 <TIM_Base_SetConfig+0x104>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d00f      	beq.n	800a728 <TIM_Base_SetConfig+0x38>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a70e:	d00b      	beq.n	800a728 <TIM_Base_SetConfig+0x38>
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	4a39      	ldr	r2, [pc, #228]	; (800a7f8 <TIM_Base_SetConfig+0x108>)
 800a714:	4293      	cmp	r3, r2
 800a716:	d007      	beq.n	800a728 <TIM_Base_SetConfig+0x38>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a38      	ldr	r2, [pc, #224]	; (800a7fc <TIM_Base_SetConfig+0x10c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d003      	beq.n	800a728 <TIM_Base_SetConfig+0x38>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a37      	ldr	r2, [pc, #220]	; (800a800 <TIM_Base_SetConfig+0x110>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d108      	bne.n	800a73a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a72e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	4313      	orrs	r3, r2
 800a738:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	4a2d      	ldr	r2, [pc, #180]	; (800a7f4 <TIM_Base_SetConfig+0x104>)
 800a73e:	4293      	cmp	r3, r2
 800a740:	d01b      	beq.n	800a77a <TIM_Base_SetConfig+0x8a>
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a748:	d017      	beq.n	800a77a <TIM_Base_SetConfig+0x8a>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	4a2a      	ldr	r2, [pc, #168]	; (800a7f8 <TIM_Base_SetConfig+0x108>)
 800a74e:	4293      	cmp	r3, r2
 800a750:	d013      	beq.n	800a77a <TIM_Base_SetConfig+0x8a>
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	4a29      	ldr	r2, [pc, #164]	; (800a7fc <TIM_Base_SetConfig+0x10c>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d00f      	beq.n	800a77a <TIM_Base_SetConfig+0x8a>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	4a28      	ldr	r2, [pc, #160]	; (800a800 <TIM_Base_SetConfig+0x110>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d00b      	beq.n	800a77a <TIM_Base_SetConfig+0x8a>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	4a27      	ldr	r2, [pc, #156]	; (800a804 <TIM_Base_SetConfig+0x114>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d007      	beq.n	800a77a <TIM_Base_SetConfig+0x8a>
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4a26      	ldr	r2, [pc, #152]	; (800a808 <TIM_Base_SetConfig+0x118>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d003      	beq.n	800a77a <TIM_Base_SetConfig+0x8a>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	4a25      	ldr	r2, [pc, #148]	; (800a80c <TIM_Base_SetConfig+0x11c>)
 800a776:	4293      	cmp	r3, r2
 800a778:	d108      	bne.n	800a78c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a780:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	68db      	ldr	r3, [r3, #12]
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4313      	orrs	r3, r2
 800a78a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	695b      	ldr	r3, [r3, #20]
 800a796:	4313      	orrs	r3, r2
 800a798:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	68fa      	ldr	r2, [r7, #12]
 800a79e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	689a      	ldr	r2, [r3, #8]
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	681a      	ldr	r2, [r3, #0]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a10      	ldr	r2, [pc, #64]	; (800a7f4 <TIM_Base_SetConfig+0x104>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d00f      	beq.n	800a7d8 <TIM_Base_SetConfig+0xe8>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a11      	ldr	r2, [pc, #68]	; (800a800 <TIM_Base_SetConfig+0x110>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d00b      	beq.n	800a7d8 <TIM_Base_SetConfig+0xe8>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a10      	ldr	r2, [pc, #64]	; (800a804 <TIM_Base_SetConfig+0x114>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d007      	beq.n	800a7d8 <TIM_Base_SetConfig+0xe8>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	4a0f      	ldr	r2, [pc, #60]	; (800a808 <TIM_Base_SetConfig+0x118>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d003      	beq.n	800a7d8 <TIM_Base_SetConfig+0xe8>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a0e      	ldr	r2, [pc, #56]	; (800a80c <TIM_Base_SetConfig+0x11c>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d103      	bne.n	800a7e0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	691a      	ldr	r2, [r3, #16]
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2201      	movs	r2, #1
 800a7e4:	615a      	str	r2, [r3, #20]
}
 800a7e6:	bf00      	nop
 800a7e8:	3714      	adds	r7, #20
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	40012c00 	.word	0x40012c00
 800a7f8:	40000400 	.word	0x40000400
 800a7fc:	40000800 	.word	0x40000800
 800a800:	40013400 	.word	0x40013400
 800a804:	40014000 	.word	0x40014000
 800a808:	40014400 	.word	0x40014400
 800a80c:	40014800 	.word	0x40014800

0800a810 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a810:	b480      	push	{r7}
 800a812:	b087      	sub	sp, #28
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
 800a818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	6a1b      	ldr	r3, [r3, #32]
 800a81e:	f023 0201 	bic.w	r2, r3, #1
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6a1b      	ldr	r3, [r3, #32]
 800a82a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	685b      	ldr	r3, [r3, #4]
 800a830:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	699b      	ldr	r3, [r3, #24]
 800a836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a83e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f023 0303 	bic.w	r3, r3, #3
 800a84a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	68fa      	ldr	r2, [r7, #12]
 800a852:	4313      	orrs	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a856:	697b      	ldr	r3, [r7, #20]
 800a858:	f023 0302 	bic.w	r3, r3, #2
 800a85c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a85e:	683b      	ldr	r3, [r7, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	697a      	ldr	r2, [r7, #20]
 800a864:	4313      	orrs	r3, r2
 800a866:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	4a2c      	ldr	r2, [pc, #176]	; (800a91c <TIM_OC1_SetConfig+0x10c>)
 800a86c:	4293      	cmp	r3, r2
 800a86e:	d00f      	beq.n	800a890 <TIM_OC1_SetConfig+0x80>
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a2b      	ldr	r2, [pc, #172]	; (800a920 <TIM_OC1_SetConfig+0x110>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d00b      	beq.n	800a890 <TIM_OC1_SetConfig+0x80>
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	4a2a      	ldr	r2, [pc, #168]	; (800a924 <TIM_OC1_SetConfig+0x114>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d007      	beq.n	800a890 <TIM_OC1_SetConfig+0x80>
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a29      	ldr	r2, [pc, #164]	; (800a928 <TIM_OC1_SetConfig+0x118>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d003      	beq.n	800a890 <TIM_OC1_SetConfig+0x80>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	4a28      	ldr	r2, [pc, #160]	; (800a92c <TIM_OC1_SetConfig+0x11c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d10c      	bne.n	800a8aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	f023 0308 	bic.w	r3, r3, #8
 800a896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	697a      	ldr	r2, [r7, #20]
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	f023 0304 	bic.w	r3, r3, #4
 800a8a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4a1b      	ldr	r2, [pc, #108]	; (800a91c <TIM_OC1_SetConfig+0x10c>)
 800a8ae:	4293      	cmp	r3, r2
 800a8b0:	d00f      	beq.n	800a8d2 <TIM_OC1_SetConfig+0xc2>
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	4a1a      	ldr	r2, [pc, #104]	; (800a920 <TIM_OC1_SetConfig+0x110>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d00b      	beq.n	800a8d2 <TIM_OC1_SetConfig+0xc2>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	4a19      	ldr	r2, [pc, #100]	; (800a924 <TIM_OC1_SetConfig+0x114>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d007      	beq.n	800a8d2 <TIM_OC1_SetConfig+0xc2>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	4a18      	ldr	r2, [pc, #96]	; (800a928 <TIM_OC1_SetConfig+0x118>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d003      	beq.n	800a8d2 <TIM_OC1_SetConfig+0xc2>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	4a17      	ldr	r2, [pc, #92]	; (800a92c <TIM_OC1_SetConfig+0x11c>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d111      	bne.n	800a8f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a8e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	695b      	ldr	r3, [r3, #20]
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	699b      	ldr	r3, [r3, #24]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	693a      	ldr	r2, [r7, #16]
 800a8fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	68fa      	ldr	r2, [r7, #12]
 800a900:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	697a      	ldr	r2, [r7, #20]
 800a90e:	621a      	str	r2, [r3, #32]
}
 800a910:	bf00      	nop
 800a912:	371c      	adds	r7, #28
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	40012c00 	.word	0x40012c00
 800a920:	40013400 	.word	0x40013400
 800a924:	40014000 	.word	0x40014000
 800a928:	40014400 	.word	0x40014400
 800a92c:	40014800 	.word	0x40014800

0800a930 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a930:	b480      	push	{r7}
 800a932:	b087      	sub	sp, #28
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
 800a938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6a1b      	ldr	r3, [r3, #32]
 800a93e:	f023 0210 	bic.w	r2, r3, #16
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a1b      	ldr	r3, [r3, #32]
 800a94a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	685b      	ldr	r3, [r3, #4]
 800a950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a95e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a962:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	021b      	lsls	r3, r3, #8
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	4313      	orrs	r3, r2
 800a976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	f023 0320 	bic.w	r3, r3, #32
 800a97e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	011b      	lsls	r3, r3, #4
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	4313      	orrs	r3, r2
 800a98a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	4a28      	ldr	r2, [pc, #160]	; (800aa30 <TIM_OC2_SetConfig+0x100>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d003      	beq.n	800a99c <TIM_OC2_SetConfig+0x6c>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	4a27      	ldr	r2, [pc, #156]	; (800aa34 <TIM_OC2_SetConfig+0x104>)
 800a998:	4293      	cmp	r3, r2
 800a99a:	d10d      	bne.n	800a9b8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a99c:	697b      	ldr	r3, [r7, #20]
 800a99e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	68db      	ldr	r3, [r3, #12]
 800a9a8:	011b      	lsls	r3, r3, #4
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	4a1d      	ldr	r2, [pc, #116]	; (800aa30 <TIM_OC2_SetConfig+0x100>)
 800a9bc:	4293      	cmp	r3, r2
 800a9be:	d00f      	beq.n	800a9e0 <TIM_OC2_SetConfig+0xb0>
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	4a1c      	ldr	r2, [pc, #112]	; (800aa34 <TIM_OC2_SetConfig+0x104>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d00b      	beq.n	800a9e0 <TIM_OC2_SetConfig+0xb0>
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	4a1b      	ldr	r2, [pc, #108]	; (800aa38 <TIM_OC2_SetConfig+0x108>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d007      	beq.n	800a9e0 <TIM_OC2_SetConfig+0xb0>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	4a1a      	ldr	r2, [pc, #104]	; (800aa3c <TIM_OC2_SetConfig+0x10c>)
 800a9d4:	4293      	cmp	r3, r2
 800a9d6:	d003      	beq.n	800a9e0 <TIM_OC2_SetConfig+0xb0>
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a19      	ldr	r2, [pc, #100]	; (800aa40 <TIM_OC2_SetConfig+0x110>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d113      	bne.n	800aa08 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9e6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9ee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	621a      	str	r2, [r3, #32]
}
 800aa22:	bf00      	nop
 800aa24:	371c      	adds	r7, #28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	40012c00 	.word	0x40012c00
 800aa34:	40013400 	.word	0x40013400
 800aa38:	40014000 	.word	0x40014000
 800aa3c:	40014400 	.word	0x40014400
 800aa40:	40014800 	.word	0x40014800

0800aa44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b087      	sub	sp, #28
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6a1b      	ldr	r3, [r3, #32]
 800aa52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a1b      	ldr	r3, [r3, #32]
 800aa5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	685b      	ldr	r3, [r3, #4]
 800aa64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	69db      	ldr	r3, [r3, #28]
 800aa6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f023 0303 	bic.w	r3, r3, #3
 800aa7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	689b      	ldr	r3, [r3, #8]
 800aa96:	021b      	lsls	r3, r3, #8
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	4313      	orrs	r3, r2
 800aa9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	4a27      	ldr	r2, [pc, #156]	; (800ab40 <TIM_OC3_SetConfig+0xfc>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d003      	beq.n	800aaae <TIM_OC3_SetConfig+0x6a>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	4a26      	ldr	r2, [pc, #152]	; (800ab44 <TIM_OC3_SetConfig+0x100>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d10d      	bne.n	800aaca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aaae:	697b      	ldr	r3, [r7, #20]
 800aab0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aab4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	021b      	lsls	r3, r3, #8
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	4313      	orrs	r3, r2
 800aac0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aac2:	697b      	ldr	r3, [r7, #20]
 800aac4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aac8:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a1c      	ldr	r2, [pc, #112]	; (800ab40 <TIM_OC3_SetConfig+0xfc>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d00f      	beq.n	800aaf2 <TIM_OC3_SetConfig+0xae>
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	4a1b      	ldr	r2, [pc, #108]	; (800ab44 <TIM_OC3_SetConfig+0x100>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d00b      	beq.n	800aaf2 <TIM_OC3_SetConfig+0xae>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	4a1a      	ldr	r2, [pc, #104]	; (800ab48 <TIM_OC3_SetConfig+0x104>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d007      	beq.n	800aaf2 <TIM_OC3_SetConfig+0xae>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a19      	ldr	r2, [pc, #100]	; (800ab4c <TIM_OC3_SetConfig+0x108>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d003      	beq.n	800aaf2 <TIM_OC3_SetConfig+0xae>
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	4a18      	ldr	r2, [pc, #96]	; (800ab50 <TIM_OC3_SetConfig+0x10c>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d113      	bne.n	800ab1a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aaf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	695b      	ldr	r3, [r3, #20]
 800ab06:	011b      	lsls	r3, r3, #4
 800ab08:	693a      	ldr	r2, [r7, #16]
 800ab0a:	4313      	orrs	r3, r2
 800ab0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	011b      	lsls	r3, r3, #4
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	4313      	orrs	r3, r2
 800ab18:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab26:	683b      	ldr	r3, [r7, #0]
 800ab28:	685a      	ldr	r2, [r3, #4]
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	621a      	str	r2, [r3, #32]
}
 800ab34:	bf00      	nop
 800ab36:	371c      	adds	r7, #28
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	40012c00 	.word	0x40012c00
 800ab44:	40013400 	.word	0x40013400
 800ab48:	40014000 	.word	0x40014000
 800ab4c:	40014400 	.word	0x40014400
 800ab50:	40014800 	.word	0x40014800

0800ab54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b087      	sub	sp, #28
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6a1b      	ldr	r3, [r3, #32]
 800ab62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	685b      	ldr	r3, [r3, #4]
 800ab74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	69db      	ldr	r3, [r3, #28]
 800ab7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	021b      	lsls	r3, r3, #8
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab9c:	693b      	ldr	r3, [r7, #16]
 800ab9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aba2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	031b      	lsls	r3, r3, #12
 800abaa:	693a      	ldr	r2, [r7, #16]
 800abac:	4313      	orrs	r3, r2
 800abae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	4a18      	ldr	r2, [pc, #96]	; (800ac14 <TIM_OC4_SetConfig+0xc0>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d00f      	beq.n	800abd8 <TIM_OC4_SetConfig+0x84>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a17      	ldr	r2, [pc, #92]	; (800ac18 <TIM_OC4_SetConfig+0xc4>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d00b      	beq.n	800abd8 <TIM_OC4_SetConfig+0x84>
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	4a16      	ldr	r2, [pc, #88]	; (800ac1c <TIM_OC4_SetConfig+0xc8>)
 800abc4:	4293      	cmp	r3, r2
 800abc6:	d007      	beq.n	800abd8 <TIM_OC4_SetConfig+0x84>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	4a15      	ldr	r2, [pc, #84]	; (800ac20 <TIM_OC4_SetConfig+0xcc>)
 800abcc:	4293      	cmp	r3, r2
 800abce:	d003      	beq.n	800abd8 <TIM_OC4_SetConfig+0x84>
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	4a14      	ldr	r2, [pc, #80]	; (800ac24 <TIM_OC4_SetConfig+0xd0>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d109      	bne.n	800abec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800abd8:	697b      	ldr	r3, [r7, #20]
 800abda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	695b      	ldr	r3, [r3, #20]
 800abe4:	019b      	lsls	r3, r3, #6
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	4313      	orrs	r3, r2
 800abea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	697a      	ldr	r2, [r7, #20]
 800abf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68fa      	ldr	r2, [r7, #12]
 800abf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	621a      	str	r2, [r3, #32]
}
 800ac06:	bf00      	nop
 800ac08:	371c      	adds	r7, #28
 800ac0a:	46bd      	mov	sp, r7
 800ac0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac10:	4770      	bx	lr
 800ac12:	bf00      	nop
 800ac14:	40012c00 	.word	0x40012c00
 800ac18:	40013400 	.word	0x40013400
 800ac1c:	40014000 	.word	0x40014000
 800ac20:	40014400 	.word	0x40014400
 800ac24:	40014800 	.word	0x40014800

0800ac28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b087      	sub	sp, #28
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6a1b      	ldr	r3, [r3, #32]
 800ac42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	685b      	ldr	r3, [r3, #4]
 800ac48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	68fa      	ldr	r2, [r7, #12]
 800ac62:	4313      	orrs	r3, r2
 800ac64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ac6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	041b      	lsls	r3, r3, #16
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	4313      	orrs	r3, r2
 800ac78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	4a17      	ldr	r2, [pc, #92]	; (800acdc <TIM_OC5_SetConfig+0xb4>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d00f      	beq.n	800aca2 <TIM_OC5_SetConfig+0x7a>
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	4a16      	ldr	r2, [pc, #88]	; (800ace0 <TIM_OC5_SetConfig+0xb8>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d00b      	beq.n	800aca2 <TIM_OC5_SetConfig+0x7a>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	4a15      	ldr	r2, [pc, #84]	; (800ace4 <TIM_OC5_SetConfig+0xbc>)
 800ac8e:	4293      	cmp	r3, r2
 800ac90:	d007      	beq.n	800aca2 <TIM_OC5_SetConfig+0x7a>
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	4a14      	ldr	r2, [pc, #80]	; (800ace8 <TIM_OC5_SetConfig+0xc0>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d003      	beq.n	800aca2 <TIM_OC5_SetConfig+0x7a>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	4a13      	ldr	r2, [pc, #76]	; (800acec <TIM_OC5_SetConfig+0xc4>)
 800ac9e:	4293      	cmp	r3, r2
 800aca0:	d109      	bne.n	800acb6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aca8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	695b      	ldr	r3, [r3, #20]
 800acae:	021b      	lsls	r3, r3, #8
 800acb0:	697a      	ldr	r2, [r7, #20]
 800acb2:	4313      	orrs	r3, r2
 800acb4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	697a      	ldr	r2, [r7, #20]
 800acba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	685a      	ldr	r2, [r3, #4]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	693a      	ldr	r2, [r7, #16]
 800acce:	621a      	str	r2, [r3, #32]
}
 800acd0:	bf00      	nop
 800acd2:	371c      	adds	r7, #28
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr
 800acdc:	40012c00 	.word	0x40012c00
 800ace0:	40013400 	.word	0x40013400
 800ace4:	40014000 	.word	0x40014000
 800ace8:	40014400 	.word	0x40014400
 800acec:	40014800 	.word	0x40014800

0800acf0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b087      	sub	sp, #28
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ad22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	021b      	lsls	r3, r3, #8
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ad36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	051b      	lsls	r3, r3, #20
 800ad3e:	693a      	ldr	r2, [r7, #16]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a18      	ldr	r2, [pc, #96]	; (800ada8 <TIM_OC6_SetConfig+0xb8>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d00f      	beq.n	800ad6c <TIM_OC6_SetConfig+0x7c>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a17      	ldr	r2, [pc, #92]	; (800adac <TIM_OC6_SetConfig+0xbc>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d00b      	beq.n	800ad6c <TIM_OC6_SetConfig+0x7c>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a16      	ldr	r2, [pc, #88]	; (800adb0 <TIM_OC6_SetConfig+0xc0>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d007      	beq.n	800ad6c <TIM_OC6_SetConfig+0x7c>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a15      	ldr	r2, [pc, #84]	; (800adb4 <TIM_OC6_SetConfig+0xc4>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d003      	beq.n	800ad6c <TIM_OC6_SetConfig+0x7c>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a14      	ldr	r2, [pc, #80]	; (800adb8 <TIM_OC6_SetConfig+0xc8>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d109      	bne.n	800ad80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	695b      	ldr	r3, [r3, #20]
 800ad78:	029b      	lsls	r3, r3, #10
 800ad7a:	697a      	ldr	r2, [r7, #20]
 800ad7c:	4313      	orrs	r3, r2
 800ad7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	697a      	ldr	r2, [r7, #20]
 800ad84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	685a      	ldr	r2, [r3, #4]
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	693a      	ldr	r2, [r7, #16]
 800ad98:	621a      	str	r2, [r3, #32]
}
 800ad9a:	bf00      	nop
 800ad9c:	371c      	adds	r7, #28
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	40012c00 	.word	0x40012c00
 800adac:	40013400 	.word	0x40013400
 800adb0:	40014000 	.word	0x40014000
 800adb4:	40014400 	.word	0x40014400
 800adb8:	40014800 	.word	0x40014800

0800adbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	6a1b      	ldr	r3, [r3, #32]
 800adcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	f023 0201 	bic.w	r2, r3, #1
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ade6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	011b      	lsls	r3, r3, #4
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	4313      	orrs	r3, r2
 800adf0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f023 030a 	bic.w	r3, r3, #10
 800adf8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800adfa:	697a      	ldr	r2, [r7, #20]
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	4313      	orrs	r3, r2
 800ae00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	697a      	ldr	r2, [r7, #20]
 800ae0c:	621a      	str	r2, [r3, #32]
}
 800ae0e:	bf00      	nop
 800ae10:	371c      	adds	r7, #28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae18:	4770      	bx	lr

0800ae1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ae1a:	b480      	push	{r7}
 800ae1c:	b087      	sub	sp, #28
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	60f8      	str	r0, [r7, #12]
 800ae22:	60b9      	str	r1, [r7, #8]
 800ae24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	6a1b      	ldr	r3, [r3, #32]
 800ae2a:	f023 0210 	bic.w	r2, r3, #16
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6a1b      	ldr	r3, [r3, #32]
 800ae3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ae44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	031b      	lsls	r3, r3, #12
 800ae4a:	697a      	ldr	r2, [r7, #20]
 800ae4c:	4313      	orrs	r3, r2
 800ae4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ae56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	693a      	ldr	r2, [r7, #16]
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	697a      	ldr	r2, [r7, #20]
 800ae66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	621a      	str	r2, [r3, #32]
}
 800ae6e:	bf00      	nop
 800ae70:	371c      	adds	r7, #28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b085      	sub	sp, #20
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
 800ae82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	689b      	ldr	r3, [r3, #8]
 800ae88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae92:	683a      	ldr	r2, [r7, #0]
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4313      	orrs	r3, r2
 800ae98:	f043 0307 	orr.w	r3, r3, #7
 800ae9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	609a      	str	r2, [r3, #8]
}
 800aea4:	bf00      	nop
 800aea6:	3714      	adds	r7, #20
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr

0800aeb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aeb0:	b480      	push	{r7}
 800aeb2:	b087      	sub	sp, #28
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	607a      	str	r2, [r7, #4]
 800aebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	689b      	ldr	r3, [r3, #8]
 800aec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aeca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	021a      	lsls	r2, r3, #8
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	431a      	orrs	r2, r3
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	4313      	orrs	r3, r2
 800aed8:	697a      	ldr	r2, [r7, #20]
 800aeda:	4313      	orrs	r3, r2
 800aedc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	697a      	ldr	r2, [r7, #20]
 800aee2:	609a      	str	r2, [r3, #8]
}
 800aee4:	bf00      	nop
 800aee6:	371c      	adds	r7, #28
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr

0800aef0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b087      	sub	sp, #28
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	60f8      	str	r0, [r7, #12]
 800aef8:	60b9      	str	r1, [r7, #8]
 800aefa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aefc:	68bb      	ldr	r3, [r7, #8]
 800aefe:	f003 031f 	and.w	r3, r3, #31
 800af02:	2201      	movs	r2, #1
 800af04:	fa02 f303 	lsl.w	r3, r2, r3
 800af08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	6a1a      	ldr	r2, [r3, #32]
 800af0e:	697b      	ldr	r3, [r7, #20]
 800af10:	43db      	mvns	r3, r3
 800af12:	401a      	ands	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6a1a      	ldr	r2, [r3, #32]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	f003 031f 	and.w	r3, r3, #31
 800af22:	6879      	ldr	r1, [r7, #4]
 800af24:	fa01 f303 	lsl.w	r3, r1, r3
 800af28:	431a      	orrs	r2, r3
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	621a      	str	r2, [r3, #32]
}
 800af2e:	bf00      	nop
 800af30:	371c      	adds	r7, #28
 800af32:	46bd      	mov	sp, r7
 800af34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af38:	4770      	bx	lr
	...

0800af3c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d109      	bne.n	800af60 <HAL_TIMEx_PWMN_Start+0x24>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800af52:	b2db      	uxtb	r3, r3
 800af54:	2b01      	cmp	r3, #1
 800af56:	bf14      	ite	ne
 800af58:	2301      	movne	r3, #1
 800af5a:	2300      	moveq	r3, #0
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	e022      	b.n	800afa6 <HAL_TIMEx_PWMN_Start+0x6a>
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2b04      	cmp	r3, #4
 800af64:	d109      	bne.n	800af7a <HAL_TIMEx_PWMN_Start+0x3e>
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af6c:	b2db      	uxtb	r3, r3
 800af6e:	2b01      	cmp	r3, #1
 800af70:	bf14      	ite	ne
 800af72:	2301      	movne	r3, #1
 800af74:	2300      	moveq	r3, #0
 800af76:	b2db      	uxtb	r3, r3
 800af78:	e015      	b.n	800afa6 <HAL_TIMEx_PWMN_Start+0x6a>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b08      	cmp	r3, #8
 800af7e:	d109      	bne.n	800af94 <HAL_TIMEx_PWMN_Start+0x58>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af86:	b2db      	uxtb	r3, r3
 800af88:	2b01      	cmp	r3, #1
 800af8a:	bf14      	ite	ne
 800af8c:	2301      	movne	r3, #1
 800af8e:	2300      	moveq	r3, #0
 800af90:	b2db      	uxtb	r3, r3
 800af92:	e008      	b.n	800afa6 <HAL_TIMEx_PWMN_Start+0x6a>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	2b01      	cmp	r3, #1
 800af9e:	bf14      	ite	ne
 800afa0:	2301      	movne	r3, #1
 800afa2:	2300      	moveq	r3, #0
 800afa4:	b2db      	uxtb	r3, r3
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d001      	beq.n	800afae <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800afaa:	2301      	movs	r3, #1
 800afac:	e069      	b.n	800b082 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d104      	bne.n	800afbe <HAL_TIMEx_PWMN_Start+0x82>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2202      	movs	r2, #2
 800afb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800afbc:	e013      	b.n	800afe6 <HAL_TIMEx_PWMN_Start+0xaa>
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	d104      	bne.n	800afce <HAL_TIMEx_PWMN_Start+0x92>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2202      	movs	r2, #2
 800afc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800afcc:	e00b      	b.n	800afe6 <HAL_TIMEx_PWMN_Start+0xaa>
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	2b08      	cmp	r3, #8
 800afd2:	d104      	bne.n	800afde <HAL_TIMEx_PWMN_Start+0xa2>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2202      	movs	r2, #2
 800afd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800afdc:	e003      	b.n	800afe6 <HAL_TIMEx_PWMN_Start+0xaa>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2202      	movs	r2, #2
 800afe2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	2204      	movs	r2, #4
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	4618      	mov	r0, r3
 800aff0:	f000 f974 	bl	800b2dc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b002:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	4a20      	ldr	r2, [pc, #128]	; (800b08c <HAL_TIMEx_PWMN_Start+0x150>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d018      	beq.n	800b040 <HAL_TIMEx_PWMN_Start+0x104>
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b016:	d013      	beq.n	800b040 <HAL_TIMEx_PWMN_Start+0x104>
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a1c      	ldr	r2, [pc, #112]	; (800b090 <HAL_TIMEx_PWMN_Start+0x154>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d00e      	beq.n	800b040 <HAL_TIMEx_PWMN_Start+0x104>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	4a1b      	ldr	r2, [pc, #108]	; (800b094 <HAL_TIMEx_PWMN_Start+0x158>)
 800b028:	4293      	cmp	r3, r2
 800b02a:	d009      	beq.n	800b040 <HAL_TIMEx_PWMN_Start+0x104>
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a19      	ldr	r2, [pc, #100]	; (800b098 <HAL_TIMEx_PWMN_Start+0x15c>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d004      	beq.n	800b040 <HAL_TIMEx_PWMN_Start+0x104>
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	4a18      	ldr	r2, [pc, #96]	; (800b09c <HAL_TIMEx_PWMN_Start+0x160>)
 800b03c:	4293      	cmp	r3, r2
 800b03e:	d115      	bne.n	800b06c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	689a      	ldr	r2, [r3, #8]
 800b046:	4b16      	ldr	r3, [pc, #88]	; (800b0a0 <HAL_TIMEx_PWMN_Start+0x164>)
 800b048:	4013      	ands	r3, r2
 800b04a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	2b06      	cmp	r3, #6
 800b050:	d015      	beq.n	800b07e <HAL_TIMEx_PWMN_Start+0x142>
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b058:	d011      	beq.n	800b07e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681a      	ldr	r2, [r3, #0]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	f042 0201 	orr.w	r2, r2, #1
 800b068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b06a:	e008      	b.n	800b07e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f042 0201 	orr.w	r2, r2, #1
 800b07a:	601a      	str	r2, [r3, #0]
 800b07c:	e000      	b.n	800b080 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b07e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	40012c00 	.word	0x40012c00
 800b090:	40000400 	.word	0x40000400
 800b094:	40000800 	.word	0x40000800
 800b098:	40013400 	.word	0x40013400
 800b09c:	40014000 	.word	0x40014000
 800b0a0:	00010007 	.word	0x00010007

0800b0a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
 800b0ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d101      	bne.n	800b0bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	e063      	b.n	800b184 <HAL_TIMEx_MasterConfigSynchronization+0xe0>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2201      	movs	r2, #1
 800b0c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2202      	movs	r2, #2
 800b0c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	685b      	ldr	r3, [r3, #4]
 800b0d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a2b      	ldr	r2, [pc, #172]	; (800b190 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	d004      	beq.n	800b0f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	4a2a      	ldr	r2, [pc, #168]	; (800b194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d108      	bne.n	800b102 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	4313      	orrs	r3, r2
 800b100:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b108:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	68fa      	ldr	r2, [r7, #12]
 800b110:	4313      	orrs	r3, r2
 800b112:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	68fa      	ldr	r2, [r7, #12]
 800b11a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	4a1b      	ldr	r2, [pc, #108]	; (800b190 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b122:	4293      	cmp	r3, r2
 800b124:	d018      	beq.n	800b158 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b12e:	d013      	beq.n	800b158 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4a18      	ldr	r2, [pc, #96]	; (800b198 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b136:	4293      	cmp	r3, r2
 800b138:	d00e      	beq.n	800b158 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a17      	ldr	r2, [pc, #92]	; (800b19c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b140:	4293      	cmp	r3, r2
 800b142:	d009      	beq.n	800b158 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	4a12      	ldr	r2, [pc, #72]	; (800b194 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b14a:	4293      	cmp	r3, r2
 800b14c:	d004      	beq.n	800b158 <HAL_TIMEx_MasterConfigSynchronization+0xb4>
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a13      	ldr	r2, [pc, #76]	; (800b1a0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d10c      	bne.n	800b172 <HAL_TIMEx_MasterConfigSynchronization+0xce>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b158:	68bb      	ldr	r3, [r7, #8]
 800b15a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b15e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	68ba      	ldr	r2, [r7, #8]
 800b166:	4313      	orrs	r3, r2
 800b168:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	68ba      	ldr	r2, [r7, #8]
 800b170:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2200      	movs	r2, #0
 800b17e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b182:	2300      	movs	r3, #0
}
 800b184:	4618      	mov	r0, r3
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr
 800b190:	40012c00 	.word	0x40012c00
 800b194:	40013400 	.word	0x40013400
 800b198:	40000400 	.word	0x40000400
 800b19c:	40000800 	.word	0x40000800
 800b1a0:	40014000 	.word	0x40014000

0800b1a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1b8:	2b01      	cmp	r3, #1
 800b1ba:	d101      	bne.n	800b1c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b1bc:	2302      	movs	r3, #2
 800b1be:	e065      	b.n	800b28c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b1ce:	683b      	ldr	r3, [r7, #0]
 800b1d0:	68db      	ldr	r3, [r3, #12]
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	689b      	ldr	r3, [r3, #8]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	685b      	ldr	r3, [r3, #4]
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	691b      	ldr	r3, [r3, #16]
 800b20a:	4313      	orrs	r3, r2
 800b20c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	695b      	ldr	r3, [r3, #20]
 800b218:	4313      	orrs	r3, r2
 800b21a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b226:	4313      	orrs	r3, r2
 800b228:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b230:	683b      	ldr	r3, [r7, #0]
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	041b      	lsls	r3, r3, #16
 800b236:	4313      	orrs	r3, r2
 800b238:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	4a16      	ldr	r2, [pc, #88]	; (800b298 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b240:	4293      	cmp	r3, r2
 800b242:	d004      	beq.n	800b24e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	4a14      	ldr	r2, [pc, #80]	; (800b29c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b24a:	4293      	cmp	r3, r2
 800b24c:	d115      	bne.n	800b27a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b258:	051b      	lsls	r3, r3, #20
 800b25a:	4313      	orrs	r3, r2
 800b25c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	69db      	ldr	r3, [r3, #28]
 800b268:	4313      	orrs	r3, r2
 800b26a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	6a1b      	ldr	r3, [r3, #32]
 800b276:	4313      	orrs	r3, r2
 800b278:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	68fa      	ldr	r2, [r7, #12]
 800b280:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	2200      	movs	r2, #0
 800b286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b28a:	2300      	movs	r3, #0
}
 800b28c:	4618      	mov	r0, r3
 800b28e:	3714      	adds	r7, #20
 800b290:	46bd      	mov	sp, r7
 800b292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b296:	4770      	bx	lr
 800b298:	40012c00 	.word	0x40012c00
 800b29c:	40013400 	.word	0x40013400

0800b2a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2a8:	bf00      	nop
 800b2aa:	370c      	adds	r7, #12
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b083      	sub	sp, #12
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2bc:	bf00      	nop
 800b2be:	370c      	adds	r7, #12
 800b2c0:	46bd      	mov	sp, r7
 800b2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c6:	4770      	bx	lr

0800b2c8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2d0:	bf00      	nop
 800b2d2:	370c      	adds	r7, #12
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b087      	sub	sp, #28
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	f003 031f 	and.w	r3, r3, #31
 800b2ee:	2204      	movs	r2, #4
 800b2f0:	fa02 f303 	lsl.w	r3, r2, r3
 800b2f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6a1a      	ldr	r2, [r3, #32]
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	43db      	mvns	r3, r3
 800b2fe:	401a      	ands	r2, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6a1a      	ldr	r2, [r3, #32]
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	f003 031f 	and.w	r3, r3, #31
 800b30e:	6879      	ldr	r1, [r7, #4]
 800b310:	fa01 f303 	lsl.w	r3, r1, r3
 800b314:	431a      	orrs	r2, r3
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	621a      	str	r2, [r3, #32]
}
 800b31a:	bf00      	nop
 800b31c:	371c      	adds	r7, #28
 800b31e:	46bd      	mov	sp, r7
 800b320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b324:	4770      	bx	lr

0800b326 <abs>:
 800b326:	2800      	cmp	r0, #0
 800b328:	bfb8      	it	lt
 800b32a:	4240      	neglt	r0, r0
 800b32c:	4770      	bx	lr

0800b32e <__cvt>:
 800b32e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b332:	ec55 4b10 	vmov	r4, r5, d0
 800b336:	2d00      	cmp	r5, #0
 800b338:	460e      	mov	r6, r1
 800b33a:	4619      	mov	r1, r3
 800b33c:	462b      	mov	r3, r5
 800b33e:	bfbb      	ittet	lt
 800b340:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b344:	461d      	movlt	r5, r3
 800b346:	2300      	movge	r3, #0
 800b348:	232d      	movlt	r3, #45	; 0x2d
 800b34a:	700b      	strb	r3, [r1, #0]
 800b34c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b34e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b352:	4691      	mov	r9, r2
 800b354:	f023 0820 	bic.w	r8, r3, #32
 800b358:	bfbc      	itt	lt
 800b35a:	4622      	movlt	r2, r4
 800b35c:	4614      	movlt	r4, r2
 800b35e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b362:	d005      	beq.n	800b370 <__cvt+0x42>
 800b364:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b368:	d100      	bne.n	800b36c <__cvt+0x3e>
 800b36a:	3601      	adds	r6, #1
 800b36c:	2102      	movs	r1, #2
 800b36e:	e000      	b.n	800b372 <__cvt+0x44>
 800b370:	2103      	movs	r1, #3
 800b372:	ab03      	add	r3, sp, #12
 800b374:	9301      	str	r3, [sp, #4]
 800b376:	ab02      	add	r3, sp, #8
 800b378:	9300      	str	r3, [sp, #0]
 800b37a:	ec45 4b10 	vmov	d0, r4, r5
 800b37e:	4653      	mov	r3, sl
 800b380:	4632      	mov	r2, r6
 800b382:	f000 fe69 	bl	800c058 <_dtoa_r>
 800b386:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b38a:	4607      	mov	r7, r0
 800b38c:	d102      	bne.n	800b394 <__cvt+0x66>
 800b38e:	f019 0f01 	tst.w	r9, #1
 800b392:	d022      	beq.n	800b3da <__cvt+0xac>
 800b394:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b398:	eb07 0906 	add.w	r9, r7, r6
 800b39c:	d110      	bne.n	800b3c0 <__cvt+0x92>
 800b39e:	783b      	ldrb	r3, [r7, #0]
 800b3a0:	2b30      	cmp	r3, #48	; 0x30
 800b3a2:	d10a      	bne.n	800b3ba <__cvt+0x8c>
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	4620      	mov	r0, r4
 800b3aa:	4629      	mov	r1, r5
 800b3ac:	f7f5 fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3b0:	b918      	cbnz	r0, 800b3ba <__cvt+0x8c>
 800b3b2:	f1c6 0601 	rsb	r6, r6, #1
 800b3b6:	f8ca 6000 	str.w	r6, [sl]
 800b3ba:	f8da 3000 	ldr.w	r3, [sl]
 800b3be:	4499      	add	r9, r3
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	f7f5 fb7e 	bl	8000ac8 <__aeabi_dcmpeq>
 800b3cc:	b108      	cbz	r0, 800b3d2 <__cvt+0xa4>
 800b3ce:	f8cd 900c 	str.w	r9, [sp, #12]
 800b3d2:	2230      	movs	r2, #48	; 0x30
 800b3d4:	9b03      	ldr	r3, [sp, #12]
 800b3d6:	454b      	cmp	r3, r9
 800b3d8:	d307      	bcc.n	800b3ea <__cvt+0xbc>
 800b3da:	9b03      	ldr	r3, [sp, #12]
 800b3dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3de:	1bdb      	subs	r3, r3, r7
 800b3e0:	4638      	mov	r0, r7
 800b3e2:	6013      	str	r3, [r2, #0]
 800b3e4:	b004      	add	sp, #16
 800b3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3ea:	1c59      	adds	r1, r3, #1
 800b3ec:	9103      	str	r1, [sp, #12]
 800b3ee:	701a      	strb	r2, [r3, #0]
 800b3f0:	e7f0      	b.n	800b3d4 <__cvt+0xa6>

0800b3f2 <__exponent>:
 800b3f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2900      	cmp	r1, #0
 800b3f8:	bfb8      	it	lt
 800b3fa:	4249      	neglt	r1, r1
 800b3fc:	f803 2b02 	strb.w	r2, [r3], #2
 800b400:	bfb4      	ite	lt
 800b402:	222d      	movlt	r2, #45	; 0x2d
 800b404:	222b      	movge	r2, #43	; 0x2b
 800b406:	2909      	cmp	r1, #9
 800b408:	7042      	strb	r2, [r0, #1]
 800b40a:	dd2a      	ble.n	800b462 <__exponent+0x70>
 800b40c:	f10d 0207 	add.w	r2, sp, #7
 800b410:	4617      	mov	r7, r2
 800b412:	260a      	movs	r6, #10
 800b414:	4694      	mov	ip, r2
 800b416:	fb91 f5f6 	sdiv	r5, r1, r6
 800b41a:	fb06 1415 	mls	r4, r6, r5, r1
 800b41e:	3430      	adds	r4, #48	; 0x30
 800b420:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800b424:	460c      	mov	r4, r1
 800b426:	2c63      	cmp	r4, #99	; 0x63
 800b428:	f102 32ff 	add.w	r2, r2, #4294967295
 800b42c:	4629      	mov	r1, r5
 800b42e:	dcf1      	bgt.n	800b414 <__exponent+0x22>
 800b430:	3130      	adds	r1, #48	; 0x30
 800b432:	f1ac 0402 	sub.w	r4, ip, #2
 800b436:	f802 1c01 	strb.w	r1, [r2, #-1]
 800b43a:	1c41      	adds	r1, r0, #1
 800b43c:	4622      	mov	r2, r4
 800b43e:	42ba      	cmp	r2, r7
 800b440:	d30a      	bcc.n	800b458 <__exponent+0x66>
 800b442:	f10d 0209 	add.w	r2, sp, #9
 800b446:	eba2 020c 	sub.w	r2, r2, ip
 800b44a:	42bc      	cmp	r4, r7
 800b44c:	bf88      	it	hi
 800b44e:	2200      	movhi	r2, #0
 800b450:	4413      	add	r3, r2
 800b452:	1a18      	subs	r0, r3, r0
 800b454:	b003      	add	sp, #12
 800b456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b458:	f812 5b01 	ldrb.w	r5, [r2], #1
 800b45c:	f801 5f01 	strb.w	r5, [r1, #1]!
 800b460:	e7ed      	b.n	800b43e <__exponent+0x4c>
 800b462:	2330      	movs	r3, #48	; 0x30
 800b464:	3130      	adds	r1, #48	; 0x30
 800b466:	7083      	strb	r3, [r0, #2]
 800b468:	70c1      	strb	r1, [r0, #3]
 800b46a:	1d03      	adds	r3, r0, #4
 800b46c:	e7f1      	b.n	800b452 <__exponent+0x60>
	...

0800b470 <_printf_float>:
 800b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b474:	ed2d 8b02 	vpush	{d8}
 800b478:	b08d      	sub	sp, #52	; 0x34
 800b47a:	460c      	mov	r4, r1
 800b47c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b480:	4616      	mov	r6, r2
 800b482:	461f      	mov	r7, r3
 800b484:	4605      	mov	r5, r0
 800b486:	f000 fce7 	bl	800be58 <_localeconv_r>
 800b48a:	f8d0 a000 	ldr.w	sl, [r0]
 800b48e:	4650      	mov	r0, sl
 800b490:	f7f4 feee 	bl	8000270 <strlen>
 800b494:	2300      	movs	r3, #0
 800b496:	930a      	str	r3, [sp, #40]	; 0x28
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	9305      	str	r3, [sp, #20]
 800b49c:	f8d8 3000 	ldr.w	r3, [r8]
 800b4a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b4a4:	3307      	adds	r3, #7
 800b4a6:	f023 0307 	bic.w	r3, r3, #7
 800b4aa:	f103 0208 	add.w	r2, r3, #8
 800b4ae:	f8c8 2000 	str.w	r2, [r8]
 800b4b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b4b6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b4ba:	9307      	str	r3, [sp, #28]
 800b4bc:	f8cd 8018 	str.w	r8, [sp, #24]
 800b4c0:	ee08 0a10 	vmov	s16, r0
 800b4c4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800b4c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4cc:	4b9e      	ldr	r3, [pc, #632]	; (800b748 <_printf_float+0x2d8>)
 800b4ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d2:	f7f5 fb2b 	bl	8000b2c <__aeabi_dcmpun>
 800b4d6:	bb88      	cbnz	r0, 800b53c <_printf_float+0xcc>
 800b4d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b4dc:	4b9a      	ldr	r3, [pc, #616]	; (800b748 <_printf_float+0x2d8>)
 800b4de:	f04f 32ff 	mov.w	r2, #4294967295
 800b4e2:	f7f5 fb05 	bl	8000af0 <__aeabi_dcmple>
 800b4e6:	bb48      	cbnz	r0, 800b53c <_printf_float+0xcc>
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	4640      	mov	r0, r8
 800b4ee:	4649      	mov	r1, r9
 800b4f0:	f7f5 faf4 	bl	8000adc <__aeabi_dcmplt>
 800b4f4:	b110      	cbz	r0, 800b4fc <_printf_float+0x8c>
 800b4f6:	232d      	movs	r3, #45	; 0x2d
 800b4f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4fc:	4a93      	ldr	r2, [pc, #588]	; (800b74c <_printf_float+0x2dc>)
 800b4fe:	4b94      	ldr	r3, [pc, #592]	; (800b750 <_printf_float+0x2e0>)
 800b500:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b504:	bf94      	ite	ls
 800b506:	4690      	movls	r8, r2
 800b508:	4698      	movhi	r8, r3
 800b50a:	2303      	movs	r3, #3
 800b50c:	6123      	str	r3, [r4, #16]
 800b50e:	9b05      	ldr	r3, [sp, #20]
 800b510:	f023 0304 	bic.w	r3, r3, #4
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	f04f 0900 	mov.w	r9, #0
 800b51a:	9700      	str	r7, [sp, #0]
 800b51c:	4633      	mov	r3, r6
 800b51e:	aa0b      	add	r2, sp, #44	; 0x2c
 800b520:	4621      	mov	r1, r4
 800b522:	4628      	mov	r0, r5
 800b524:	f000 f9da 	bl	800b8dc <_printf_common>
 800b528:	3001      	adds	r0, #1
 800b52a:	f040 8090 	bne.w	800b64e <_printf_float+0x1de>
 800b52e:	f04f 30ff 	mov.w	r0, #4294967295
 800b532:	b00d      	add	sp, #52	; 0x34
 800b534:	ecbd 8b02 	vpop	{d8}
 800b538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53c:	4642      	mov	r2, r8
 800b53e:	464b      	mov	r3, r9
 800b540:	4640      	mov	r0, r8
 800b542:	4649      	mov	r1, r9
 800b544:	f7f5 faf2 	bl	8000b2c <__aeabi_dcmpun>
 800b548:	b140      	cbz	r0, 800b55c <_printf_float+0xec>
 800b54a:	464b      	mov	r3, r9
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	bfbc      	itt	lt
 800b550:	232d      	movlt	r3, #45	; 0x2d
 800b552:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b556:	4a7f      	ldr	r2, [pc, #508]	; (800b754 <_printf_float+0x2e4>)
 800b558:	4b7f      	ldr	r3, [pc, #508]	; (800b758 <_printf_float+0x2e8>)
 800b55a:	e7d1      	b.n	800b500 <_printf_float+0x90>
 800b55c:	6863      	ldr	r3, [r4, #4]
 800b55e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b562:	9206      	str	r2, [sp, #24]
 800b564:	1c5a      	adds	r2, r3, #1
 800b566:	d13f      	bne.n	800b5e8 <_printf_float+0x178>
 800b568:	2306      	movs	r3, #6
 800b56a:	6063      	str	r3, [r4, #4]
 800b56c:	9b05      	ldr	r3, [sp, #20]
 800b56e:	6861      	ldr	r1, [r4, #4]
 800b570:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b574:	2300      	movs	r3, #0
 800b576:	9303      	str	r3, [sp, #12]
 800b578:	ab0a      	add	r3, sp, #40	; 0x28
 800b57a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b57e:	ab09      	add	r3, sp, #36	; 0x24
 800b580:	ec49 8b10 	vmov	d0, r8, r9
 800b584:	9300      	str	r3, [sp, #0]
 800b586:	6022      	str	r2, [r4, #0]
 800b588:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b58c:	4628      	mov	r0, r5
 800b58e:	f7ff fece 	bl	800b32e <__cvt>
 800b592:	9b06      	ldr	r3, [sp, #24]
 800b594:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b596:	2b47      	cmp	r3, #71	; 0x47
 800b598:	4680      	mov	r8, r0
 800b59a:	d108      	bne.n	800b5ae <_printf_float+0x13e>
 800b59c:	1cc8      	adds	r0, r1, #3
 800b59e:	db02      	blt.n	800b5a6 <_printf_float+0x136>
 800b5a0:	6863      	ldr	r3, [r4, #4]
 800b5a2:	4299      	cmp	r1, r3
 800b5a4:	dd41      	ble.n	800b62a <_printf_float+0x1ba>
 800b5a6:	f1ab 0302 	sub.w	r3, fp, #2
 800b5aa:	fa5f fb83 	uxtb.w	fp, r3
 800b5ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b5b2:	d820      	bhi.n	800b5f6 <_printf_float+0x186>
 800b5b4:	3901      	subs	r1, #1
 800b5b6:	465a      	mov	r2, fp
 800b5b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b5bc:	9109      	str	r1, [sp, #36]	; 0x24
 800b5be:	f7ff ff18 	bl	800b3f2 <__exponent>
 800b5c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b5c4:	1813      	adds	r3, r2, r0
 800b5c6:	2a01      	cmp	r2, #1
 800b5c8:	4681      	mov	r9, r0
 800b5ca:	6123      	str	r3, [r4, #16]
 800b5cc:	dc02      	bgt.n	800b5d4 <_printf_float+0x164>
 800b5ce:	6822      	ldr	r2, [r4, #0]
 800b5d0:	07d2      	lsls	r2, r2, #31
 800b5d2:	d501      	bpl.n	800b5d8 <_printf_float+0x168>
 800b5d4:	3301      	adds	r3, #1
 800b5d6:	6123      	str	r3, [r4, #16]
 800b5d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d09c      	beq.n	800b51a <_printf_float+0xaa>
 800b5e0:	232d      	movs	r3, #45	; 0x2d
 800b5e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b5e6:	e798      	b.n	800b51a <_printf_float+0xaa>
 800b5e8:	9a06      	ldr	r2, [sp, #24]
 800b5ea:	2a47      	cmp	r2, #71	; 0x47
 800b5ec:	d1be      	bne.n	800b56c <_printf_float+0xfc>
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1bc      	bne.n	800b56c <_printf_float+0xfc>
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e7b9      	b.n	800b56a <_printf_float+0xfa>
 800b5f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b5fa:	d118      	bne.n	800b62e <_printf_float+0x1be>
 800b5fc:	2900      	cmp	r1, #0
 800b5fe:	6863      	ldr	r3, [r4, #4]
 800b600:	dd0b      	ble.n	800b61a <_printf_float+0x1aa>
 800b602:	6121      	str	r1, [r4, #16]
 800b604:	b913      	cbnz	r3, 800b60c <_printf_float+0x19c>
 800b606:	6822      	ldr	r2, [r4, #0]
 800b608:	07d0      	lsls	r0, r2, #31
 800b60a:	d502      	bpl.n	800b612 <_printf_float+0x1a2>
 800b60c:	3301      	adds	r3, #1
 800b60e:	440b      	add	r3, r1
 800b610:	6123      	str	r3, [r4, #16]
 800b612:	65a1      	str	r1, [r4, #88]	; 0x58
 800b614:	f04f 0900 	mov.w	r9, #0
 800b618:	e7de      	b.n	800b5d8 <_printf_float+0x168>
 800b61a:	b913      	cbnz	r3, 800b622 <_printf_float+0x1b2>
 800b61c:	6822      	ldr	r2, [r4, #0]
 800b61e:	07d2      	lsls	r2, r2, #31
 800b620:	d501      	bpl.n	800b626 <_printf_float+0x1b6>
 800b622:	3302      	adds	r3, #2
 800b624:	e7f4      	b.n	800b610 <_printf_float+0x1a0>
 800b626:	2301      	movs	r3, #1
 800b628:	e7f2      	b.n	800b610 <_printf_float+0x1a0>
 800b62a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b62e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b630:	4299      	cmp	r1, r3
 800b632:	db05      	blt.n	800b640 <_printf_float+0x1d0>
 800b634:	6823      	ldr	r3, [r4, #0]
 800b636:	6121      	str	r1, [r4, #16]
 800b638:	07d8      	lsls	r0, r3, #31
 800b63a:	d5ea      	bpl.n	800b612 <_printf_float+0x1a2>
 800b63c:	1c4b      	adds	r3, r1, #1
 800b63e:	e7e7      	b.n	800b610 <_printf_float+0x1a0>
 800b640:	2900      	cmp	r1, #0
 800b642:	bfd4      	ite	le
 800b644:	f1c1 0202 	rsble	r2, r1, #2
 800b648:	2201      	movgt	r2, #1
 800b64a:	4413      	add	r3, r2
 800b64c:	e7e0      	b.n	800b610 <_printf_float+0x1a0>
 800b64e:	6823      	ldr	r3, [r4, #0]
 800b650:	055a      	lsls	r2, r3, #21
 800b652:	d407      	bmi.n	800b664 <_printf_float+0x1f4>
 800b654:	6923      	ldr	r3, [r4, #16]
 800b656:	4642      	mov	r2, r8
 800b658:	4631      	mov	r1, r6
 800b65a:	4628      	mov	r0, r5
 800b65c:	47b8      	blx	r7
 800b65e:	3001      	adds	r0, #1
 800b660:	d12c      	bne.n	800b6bc <_printf_float+0x24c>
 800b662:	e764      	b.n	800b52e <_printf_float+0xbe>
 800b664:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b668:	f240 80e0 	bls.w	800b82c <_printf_float+0x3bc>
 800b66c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b670:	2200      	movs	r2, #0
 800b672:	2300      	movs	r3, #0
 800b674:	f7f5 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 800b678:	2800      	cmp	r0, #0
 800b67a:	d034      	beq.n	800b6e6 <_printf_float+0x276>
 800b67c:	4a37      	ldr	r2, [pc, #220]	; (800b75c <_printf_float+0x2ec>)
 800b67e:	2301      	movs	r3, #1
 800b680:	4631      	mov	r1, r6
 800b682:	4628      	mov	r0, r5
 800b684:	47b8      	blx	r7
 800b686:	3001      	adds	r0, #1
 800b688:	f43f af51 	beq.w	800b52e <_printf_float+0xbe>
 800b68c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b690:	429a      	cmp	r2, r3
 800b692:	db02      	blt.n	800b69a <_printf_float+0x22a>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	07d8      	lsls	r0, r3, #31
 800b698:	d510      	bpl.n	800b6bc <_printf_float+0x24c>
 800b69a:	ee18 3a10 	vmov	r3, s16
 800b69e:	4652      	mov	r2, sl
 800b6a0:	4631      	mov	r1, r6
 800b6a2:	4628      	mov	r0, r5
 800b6a4:	47b8      	blx	r7
 800b6a6:	3001      	adds	r0, #1
 800b6a8:	f43f af41 	beq.w	800b52e <_printf_float+0xbe>
 800b6ac:	f04f 0800 	mov.w	r8, #0
 800b6b0:	f104 091a 	add.w	r9, r4, #26
 800b6b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	4543      	cmp	r3, r8
 800b6ba:	dc09      	bgt.n	800b6d0 <_printf_float+0x260>
 800b6bc:	6823      	ldr	r3, [r4, #0]
 800b6be:	079b      	lsls	r3, r3, #30
 800b6c0:	f100 8107 	bmi.w	800b8d2 <_printf_float+0x462>
 800b6c4:	68e0      	ldr	r0, [r4, #12]
 800b6c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6c8:	4298      	cmp	r0, r3
 800b6ca:	bfb8      	it	lt
 800b6cc:	4618      	movlt	r0, r3
 800b6ce:	e730      	b.n	800b532 <_printf_float+0xc2>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	464a      	mov	r2, r9
 800b6d4:	4631      	mov	r1, r6
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	47b8      	blx	r7
 800b6da:	3001      	adds	r0, #1
 800b6dc:	f43f af27 	beq.w	800b52e <_printf_float+0xbe>
 800b6e0:	f108 0801 	add.w	r8, r8, #1
 800b6e4:	e7e6      	b.n	800b6b4 <_printf_float+0x244>
 800b6e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	dc39      	bgt.n	800b760 <_printf_float+0x2f0>
 800b6ec:	4a1b      	ldr	r2, [pc, #108]	; (800b75c <_printf_float+0x2ec>)
 800b6ee:	2301      	movs	r3, #1
 800b6f0:	4631      	mov	r1, r6
 800b6f2:	4628      	mov	r0, r5
 800b6f4:	47b8      	blx	r7
 800b6f6:	3001      	adds	r0, #1
 800b6f8:	f43f af19 	beq.w	800b52e <_printf_float+0xbe>
 800b6fc:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b700:	4313      	orrs	r3, r2
 800b702:	d102      	bne.n	800b70a <_printf_float+0x29a>
 800b704:	6823      	ldr	r3, [r4, #0]
 800b706:	07d9      	lsls	r1, r3, #31
 800b708:	d5d8      	bpl.n	800b6bc <_printf_float+0x24c>
 800b70a:	ee18 3a10 	vmov	r3, s16
 800b70e:	4652      	mov	r2, sl
 800b710:	4631      	mov	r1, r6
 800b712:	4628      	mov	r0, r5
 800b714:	47b8      	blx	r7
 800b716:	3001      	adds	r0, #1
 800b718:	f43f af09 	beq.w	800b52e <_printf_float+0xbe>
 800b71c:	f04f 0900 	mov.w	r9, #0
 800b720:	f104 0a1a 	add.w	sl, r4, #26
 800b724:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b726:	425b      	negs	r3, r3
 800b728:	454b      	cmp	r3, r9
 800b72a:	dc01      	bgt.n	800b730 <_printf_float+0x2c0>
 800b72c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b72e:	e792      	b.n	800b656 <_printf_float+0x1e6>
 800b730:	2301      	movs	r3, #1
 800b732:	4652      	mov	r2, sl
 800b734:	4631      	mov	r1, r6
 800b736:	4628      	mov	r0, r5
 800b738:	47b8      	blx	r7
 800b73a:	3001      	adds	r0, #1
 800b73c:	f43f aef7 	beq.w	800b52e <_printf_float+0xbe>
 800b740:	f109 0901 	add.w	r9, r9, #1
 800b744:	e7ee      	b.n	800b724 <_printf_float+0x2b4>
 800b746:	bf00      	nop
 800b748:	7fefffff 	.word	0x7fefffff
 800b74c:	080113cc 	.word	0x080113cc
 800b750:	080113d0 	.word	0x080113d0
 800b754:	080113d4 	.word	0x080113d4
 800b758:	080113d8 	.word	0x080113d8
 800b75c:	080113dc 	.word	0x080113dc
 800b760:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b762:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b764:	429a      	cmp	r2, r3
 800b766:	bfa8      	it	ge
 800b768:	461a      	movge	r2, r3
 800b76a:	2a00      	cmp	r2, #0
 800b76c:	4691      	mov	r9, r2
 800b76e:	dc37      	bgt.n	800b7e0 <_printf_float+0x370>
 800b770:	f04f 0b00 	mov.w	fp, #0
 800b774:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b778:	f104 021a 	add.w	r2, r4, #26
 800b77c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b77e:	9305      	str	r3, [sp, #20]
 800b780:	eba3 0309 	sub.w	r3, r3, r9
 800b784:	455b      	cmp	r3, fp
 800b786:	dc33      	bgt.n	800b7f0 <_printf_float+0x380>
 800b788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b78c:	429a      	cmp	r2, r3
 800b78e:	db3b      	blt.n	800b808 <_printf_float+0x398>
 800b790:	6823      	ldr	r3, [r4, #0]
 800b792:	07da      	lsls	r2, r3, #31
 800b794:	d438      	bmi.n	800b808 <_printf_float+0x398>
 800b796:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800b79a:	eba2 0903 	sub.w	r9, r2, r3
 800b79e:	9b05      	ldr	r3, [sp, #20]
 800b7a0:	1ad2      	subs	r2, r2, r3
 800b7a2:	4591      	cmp	r9, r2
 800b7a4:	bfa8      	it	ge
 800b7a6:	4691      	movge	r9, r2
 800b7a8:	f1b9 0f00 	cmp.w	r9, #0
 800b7ac:	dc35      	bgt.n	800b81a <_printf_float+0x3aa>
 800b7ae:	f04f 0800 	mov.w	r8, #0
 800b7b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b7b6:	f104 0a1a 	add.w	sl, r4, #26
 800b7ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b7be:	1a9b      	subs	r3, r3, r2
 800b7c0:	eba3 0309 	sub.w	r3, r3, r9
 800b7c4:	4543      	cmp	r3, r8
 800b7c6:	f77f af79 	ble.w	800b6bc <_printf_float+0x24c>
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	4652      	mov	r2, sl
 800b7ce:	4631      	mov	r1, r6
 800b7d0:	4628      	mov	r0, r5
 800b7d2:	47b8      	blx	r7
 800b7d4:	3001      	adds	r0, #1
 800b7d6:	f43f aeaa 	beq.w	800b52e <_printf_float+0xbe>
 800b7da:	f108 0801 	add.w	r8, r8, #1
 800b7de:	e7ec      	b.n	800b7ba <_printf_float+0x34a>
 800b7e0:	4613      	mov	r3, r2
 800b7e2:	4631      	mov	r1, r6
 800b7e4:	4642      	mov	r2, r8
 800b7e6:	4628      	mov	r0, r5
 800b7e8:	47b8      	blx	r7
 800b7ea:	3001      	adds	r0, #1
 800b7ec:	d1c0      	bne.n	800b770 <_printf_float+0x300>
 800b7ee:	e69e      	b.n	800b52e <_printf_float+0xbe>
 800b7f0:	2301      	movs	r3, #1
 800b7f2:	4631      	mov	r1, r6
 800b7f4:	4628      	mov	r0, r5
 800b7f6:	9205      	str	r2, [sp, #20]
 800b7f8:	47b8      	blx	r7
 800b7fa:	3001      	adds	r0, #1
 800b7fc:	f43f ae97 	beq.w	800b52e <_printf_float+0xbe>
 800b800:	9a05      	ldr	r2, [sp, #20]
 800b802:	f10b 0b01 	add.w	fp, fp, #1
 800b806:	e7b9      	b.n	800b77c <_printf_float+0x30c>
 800b808:	ee18 3a10 	vmov	r3, s16
 800b80c:	4652      	mov	r2, sl
 800b80e:	4631      	mov	r1, r6
 800b810:	4628      	mov	r0, r5
 800b812:	47b8      	blx	r7
 800b814:	3001      	adds	r0, #1
 800b816:	d1be      	bne.n	800b796 <_printf_float+0x326>
 800b818:	e689      	b.n	800b52e <_printf_float+0xbe>
 800b81a:	9a05      	ldr	r2, [sp, #20]
 800b81c:	464b      	mov	r3, r9
 800b81e:	4442      	add	r2, r8
 800b820:	4631      	mov	r1, r6
 800b822:	4628      	mov	r0, r5
 800b824:	47b8      	blx	r7
 800b826:	3001      	adds	r0, #1
 800b828:	d1c1      	bne.n	800b7ae <_printf_float+0x33e>
 800b82a:	e680      	b.n	800b52e <_printf_float+0xbe>
 800b82c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b82e:	2a01      	cmp	r2, #1
 800b830:	dc01      	bgt.n	800b836 <_printf_float+0x3c6>
 800b832:	07db      	lsls	r3, r3, #31
 800b834:	d53a      	bpl.n	800b8ac <_printf_float+0x43c>
 800b836:	2301      	movs	r3, #1
 800b838:	4642      	mov	r2, r8
 800b83a:	4631      	mov	r1, r6
 800b83c:	4628      	mov	r0, r5
 800b83e:	47b8      	blx	r7
 800b840:	3001      	adds	r0, #1
 800b842:	f43f ae74 	beq.w	800b52e <_printf_float+0xbe>
 800b846:	ee18 3a10 	vmov	r3, s16
 800b84a:	4652      	mov	r2, sl
 800b84c:	4631      	mov	r1, r6
 800b84e:	4628      	mov	r0, r5
 800b850:	47b8      	blx	r7
 800b852:	3001      	adds	r0, #1
 800b854:	f43f ae6b 	beq.w	800b52e <_printf_float+0xbe>
 800b858:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b85c:	2200      	movs	r2, #0
 800b85e:	2300      	movs	r3, #0
 800b860:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800b864:	f7f5 f930 	bl	8000ac8 <__aeabi_dcmpeq>
 800b868:	b9d8      	cbnz	r0, 800b8a2 <_printf_float+0x432>
 800b86a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800b86e:	f108 0201 	add.w	r2, r8, #1
 800b872:	4631      	mov	r1, r6
 800b874:	4628      	mov	r0, r5
 800b876:	47b8      	blx	r7
 800b878:	3001      	adds	r0, #1
 800b87a:	d10e      	bne.n	800b89a <_printf_float+0x42a>
 800b87c:	e657      	b.n	800b52e <_printf_float+0xbe>
 800b87e:	2301      	movs	r3, #1
 800b880:	4652      	mov	r2, sl
 800b882:	4631      	mov	r1, r6
 800b884:	4628      	mov	r0, r5
 800b886:	47b8      	blx	r7
 800b888:	3001      	adds	r0, #1
 800b88a:	f43f ae50 	beq.w	800b52e <_printf_float+0xbe>
 800b88e:	f108 0801 	add.w	r8, r8, #1
 800b892:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b894:	3b01      	subs	r3, #1
 800b896:	4543      	cmp	r3, r8
 800b898:	dcf1      	bgt.n	800b87e <_printf_float+0x40e>
 800b89a:	464b      	mov	r3, r9
 800b89c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b8a0:	e6da      	b.n	800b658 <_printf_float+0x1e8>
 800b8a2:	f04f 0800 	mov.w	r8, #0
 800b8a6:	f104 0a1a 	add.w	sl, r4, #26
 800b8aa:	e7f2      	b.n	800b892 <_printf_float+0x422>
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	4642      	mov	r2, r8
 800b8b0:	e7df      	b.n	800b872 <_printf_float+0x402>
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	464a      	mov	r2, r9
 800b8b6:	4631      	mov	r1, r6
 800b8b8:	4628      	mov	r0, r5
 800b8ba:	47b8      	blx	r7
 800b8bc:	3001      	adds	r0, #1
 800b8be:	f43f ae36 	beq.w	800b52e <_printf_float+0xbe>
 800b8c2:	f108 0801 	add.w	r8, r8, #1
 800b8c6:	68e3      	ldr	r3, [r4, #12]
 800b8c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b8ca:	1a5b      	subs	r3, r3, r1
 800b8cc:	4543      	cmp	r3, r8
 800b8ce:	dcf0      	bgt.n	800b8b2 <_printf_float+0x442>
 800b8d0:	e6f8      	b.n	800b6c4 <_printf_float+0x254>
 800b8d2:	f04f 0800 	mov.w	r8, #0
 800b8d6:	f104 0919 	add.w	r9, r4, #25
 800b8da:	e7f4      	b.n	800b8c6 <_printf_float+0x456>

0800b8dc <_printf_common>:
 800b8dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b8e0:	4616      	mov	r6, r2
 800b8e2:	4699      	mov	r9, r3
 800b8e4:	688a      	ldr	r2, [r1, #8]
 800b8e6:	690b      	ldr	r3, [r1, #16]
 800b8e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b8ec:	4293      	cmp	r3, r2
 800b8ee:	bfb8      	it	lt
 800b8f0:	4613      	movlt	r3, r2
 800b8f2:	6033      	str	r3, [r6, #0]
 800b8f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b8f8:	4607      	mov	r7, r0
 800b8fa:	460c      	mov	r4, r1
 800b8fc:	b10a      	cbz	r2, 800b902 <_printf_common+0x26>
 800b8fe:	3301      	adds	r3, #1
 800b900:	6033      	str	r3, [r6, #0]
 800b902:	6823      	ldr	r3, [r4, #0]
 800b904:	0699      	lsls	r1, r3, #26
 800b906:	bf42      	ittt	mi
 800b908:	6833      	ldrmi	r3, [r6, #0]
 800b90a:	3302      	addmi	r3, #2
 800b90c:	6033      	strmi	r3, [r6, #0]
 800b90e:	6825      	ldr	r5, [r4, #0]
 800b910:	f015 0506 	ands.w	r5, r5, #6
 800b914:	d106      	bne.n	800b924 <_printf_common+0x48>
 800b916:	f104 0a19 	add.w	sl, r4, #25
 800b91a:	68e3      	ldr	r3, [r4, #12]
 800b91c:	6832      	ldr	r2, [r6, #0]
 800b91e:	1a9b      	subs	r3, r3, r2
 800b920:	42ab      	cmp	r3, r5
 800b922:	dc26      	bgt.n	800b972 <_printf_common+0x96>
 800b924:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b928:	1e13      	subs	r3, r2, #0
 800b92a:	6822      	ldr	r2, [r4, #0]
 800b92c:	bf18      	it	ne
 800b92e:	2301      	movne	r3, #1
 800b930:	0692      	lsls	r2, r2, #26
 800b932:	d42b      	bmi.n	800b98c <_printf_common+0xb0>
 800b934:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b938:	4649      	mov	r1, r9
 800b93a:	4638      	mov	r0, r7
 800b93c:	47c0      	blx	r8
 800b93e:	3001      	adds	r0, #1
 800b940:	d01e      	beq.n	800b980 <_printf_common+0xa4>
 800b942:	6823      	ldr	r3, [r4, #0]
 800b944:	6922      	ldr	r2, [r4, #16]
 800b946:	f003 0306 	and.w	r3, r3, #6
 800b94a:	2b04      	cmp	r3, #4
 800b94c:	bf02      	ittt	eq
 800b94e:	68e5      	ldreq	r5, [r4, #12]
 800b950:	6833      	ldreq	r3, [r6, #0]
 800b952:	1aed      	subeq	r5, r5, r3
 800b954:	68a3      	ldr	r3, [r4, #8]
 800b956:	bf0c      	ite	eq
 800b958:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b95c:	2500      	movne	r5, #0
 800b95e:	4293      	cmp	r3, r2
 800b960:	bfc4      	itt	gt
 800b962:	1a9b      	subgt	r3, r3, r2
 800b964:	18ed      	addgt	r5, r5, r3
 800b966:	2600      	movs	r6, #0
 800b968:	341a      	adds	r4, #26
 800b96a:	42b5      	cmp	r5, r6
 800b96c:	d11a      	bne.n	800b9a4 <_printf_common+0xc8>
 800b96e:	2000      	movs	r0, #0
 800b970:	e008      	b.n	800b984 <_printf_common+0xa8>
 800b972:	2301      	movs	r3, #1
 800b974:	4652      	mov	r2, sl
 800b976:	4649      	mov	r1, r9
 800b978:	4638      	mov	r0, r7
 800b97a:	47c0      	blx	r8
 800b97c:	3001      	adds	r0, #1
 800b97e:	d103      	bne.n	800b988 <_printf_common+0xac>
 800b980:	f04f 30ff 	mov.w	r0, #4294967295
 800b984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b988:	3501      	adds	r5, #1
 800b98a:	e7c6      	b.n	800b91a <_printf_common+0x3e>
 800b98c:	18e1      	adds	r1, r4, r3
 800b98e:	1c5a      	adds	r2, r3, #1
 800b990:	2030      	movs	r0, #48	; 0x30
 800b992:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b996:	4422      	add	r2, r4
 800b998:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b99c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b9a0:	3302      	adds	r3, #2
 800b9a2:	e7c7      	b.n	800b934 <_printf_common+0x58>
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	4622      	mov	r2, r4
 800b9a8:	4649      	mov	r1, r9
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	47c0      	blx	r8
 800b9ae:	3001      	adds	r0, #1
 800b9b0:	d0e6      	beq.n	800b980 <_printf_common+0xa4>
 800b9b2:	3601      	adds	r6, #1
 800b9b4:	e7d9      	b.n	800b96a <_printf_common+0x8e>
	...

0800b9b8 <_printf_i>:
 800b9b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b9bc:	7e0f      	ldrb	r7, [r1, #24]
 800b9be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b9c0:	2f78      	cmp	r7, #120	; 0x78
 800b9c2:	4691      	mov	r9, r2
 800b9c4:	4680      	mov	r8, r0
 800b9c6:	460c      	mov	r4, r1
 800b9c8:	469a      	mov	sl, r3
 800b9ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b9ce:	d807      	bhi.n	800b9e0 <_printf_i+0x28>
 800b9d0:	2f62      	cmp	r7, #98	; 0x62
 800b9d2:	d80a      	bhi.n	800b9ea <_printf_i+0x32>
 800b9d4:	2f00      	cmp	r7, #0
 800b9d6:	f000 80d4 	beq.w	800bb82 <_printf_i+0x1ca>
 800b9da:	2f58      	cmp	r7, #88	; 0x58
 800b9dc:	f000 80c0 	beq.w	800bb60 <_printf_i+0x1a8>
 800b9e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b9e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b9e8:	e03a      	b.n	800ba60 <_printf_i+0xa8>
 800b9ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b9ee:	2b15      	cmp	r3, #21
 800b9f0:	d8f6      	bhi.n	800b9e0 <_printf_i+0x28>
 800b9f2:	a101      	add	r1, pc, #4	; (adr r1, 800b9f8 <_printf_i+0x40>)
 800b9f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b9f8:	0800ba51 	.word	0x0800ba51
 800b9fc:	0800ba65 	.word	0x0800ba65
 800ba00:	0800b9e1 	.word	0x0800b9e1
 800ba04:	0800b9e1 	.word	0x0800b9e1
 800ba08:	0800b9e1 	.word	0x0800b9e1
 800ba0c:	0800b9e1 	.word	0x0800b9e1
 800ba10:	0800ba65 	.word	0x0800ba65
 800ba14:	0800b9e1 	.word	0x0800b9e1
 800ba18:	0800b9e1 	.word	0x0800b9e1
 800ba1c:	0800b9e1 	.word	0x0800b9e1
 800ba20:	0800b9e1 	.word	0x0800b9e1
 800ba24:	0800bb69 	.word	0x0800bb69
 800ba28:	0800ba91 	.word	0x0800ba91
 800ba2c:	0800bb23 	.word	0x0800bb23
 800ba30:	0800b9e1 	.word	0x0800b9e1
 800ba34:	0800b9e1 	.word	0x0800b9e1
 800ba38:	0800bb8b 	.word	0x0800bb8b
 800ba3c:	0800b9e1 	.word	0x0800b9e1
 800ba40:	0800ba91 	.word	0x0800ba91
 800ba44:	0800b9e1 	.word	0x0800b9e1
 800ba48:	0800b9e1 	.word	0x0800b9e1
 800ba4c:	0800bb2b 	.word	0x0800bb2b
 800ba50:	682b      	ldr	r3, [r5, #0]
 800ba52:	1d1a      	adds	r2, r3, #4
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	602a      	str	r2, [r5, #0]
 800ba58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ba5c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ba60:	2301      	movs	r3, #1
 800ba62:	e09f      	b.n	800bba4 <_printf_i+0x1ec>
 800ba64:	6820      	ldr	r0, [r4, #0]
 800ba66:	682b      	ldr	r3, [r5, #0]
 800ba68:	0607      	lsls	r7, r0, #24
 800ba6a:	f103 0104 	add.w	r1, r3, #4
 800ba6e:	6029      	str	r1, [r5, #0]
 800ba70:	d501      	bpl.n	800ba76 <_printf_i+0xbe>
 800ba72:	681e      	ldr	r6, [r3, #0]
 800ba74:	e003      	b.n	800ba7e <_printf_i+0xc6>
 800ba76:	0646      	lsls	r6, r0, #25
 800ba78:	d5fb      	bpl.n	800ba72 <_printf_i+0xba>
 800ba7a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ba7e:	2e00      	cmp	r6, #0
 800ba80:	da03      	bge.n	800ba8a <_printf_i+0xd2>
 800ba82:	232d      	movs	r3, #45	; 0x2d
 800ba84:	4276      	negs	r6, r6
 800ba86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba8a:	485a      	ldr	r0, [pc, #360]	; (800bbf4 <_printf_i+0x23c>)
 800ba8c:	230a      	movs	r3, #10
 800ba8e:	e012      	b.n	800bab6 <_printf_i+0xfe>
 800ba90:	682b      	ldr	r3, [r5, #0]
 800ba92:	6820      	ldr	r0, [r4, #0]
 800ba94:	1d19      	adds	r1, r3, #4
 800ba96:	6029      	str	r1, [r5, #0]
 800ba98:	0605      	lsls	r5, r0, #24
 800ba9a:	d501      	bpl.n	800baa0 <_printf_i+0xe8>
 800ba9c:	681e      	ldr	r6, [r3, #0]
 800ba9e:	e002      	b.n	800baa6 <_printf_i+0xee>
 800baa0:	0641      	lsls	r1, r0, #25
 800baa2:	d5fb      	bpl.n	800ba9c <_printf_i+0xe4>
 800baa4:	881e      	ldrh	r6, [r3, #0]
 800baa6:	4853      	ldr	r0, [pc, #332]	; (800bbf4 <_printf_i+0x23c>)
 800baa8:	2f6f      	cmp	r7, #111	; 0x6f
 800baaa:	bf0c      	ite	eq
 800baac:	2308      	moveq	r3, #8
 800baae:	230a      	movne	r3, #10
 800bab0:	2100      	movs	r1, #0
 800bab2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bab6:	6865      	ldr	r5, [r4, #4]
 800bab8:	60a5      	str	r5, [r4, #8]
 800baba:	2d00      	cmp	r5, #0
 800babc:	bfa2      	ittt	ge
 800babe:	6821      	ldrge	r1, [r4, #0]
 800bac0:	f021 0104 	bicge.w	r1, r1, #4
 800bac4:	6021      	strge	r1, [r4, #0]
 800bac6:	b90e      	cbnz	r6, 800bacc <_printf_i+0x114>
 800bac8:	2d00      	cmp	r5, #0
 800baca:	d04b      	beq.n	800bb64 <_printf_i+0x1ac>
 800bacc:	4615      	mov	r5, r2
 800bace:	fbb6 f1f3 	udiv	r1, r6, r3
 800bad2:	fb03 6711 	mls	r7, r3, r1, r6
 800bad6:	5dc7      	ldrb	r7, [r0, r7]
 800bad8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800badc:	4637      	mov	r7, r6
 800bade:	42bb      	cmp	r3, r7
 800bae0:	460e      	mov	r6, r1
 800bae2:	d9f4      	bls.n	800bace <_printf_i+0x116>
 800bae4:	2b08      	cmp	r3, #8
 800bae6:	d10b      	bne.n	800bb00 <_printf_i+0x148>
 800bae8:	6823      	ldr	r3, [r4, #0]
 800baea:	07de      	lsls	r6, r3, #31
 800baec:	d508      	bpl.n	800bb00 <_printf_i+0x148>
 800baee:	6923      	ldr	r3, [r4, #16]
 800baf0:	6861      	ldr	r1, [r4, #4]
 800baf2:	4299      	cmp	r1, r3
 800baf4:	bfde      	ittt	le
 800baf6:	2330      	movle	r3, #48	; 0x30
 800baf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bafc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bb00:	1b52      	subs	r2, r2, r5
 800bb02:	6122      	str	r2, [r4, #16]
 800bb04:	f8cd a000 	str.w	sl, [sp]
 800bb08:	464b      	mov	r3, r9
 800bb0a:	aa03      	add	r2, sp, #12
 800bb0c:	4621      	mov	r1, r4
 800bb0e:	4640      	mov	r0, r8
 800bb10:	f7ff fee4 	bl	800b8dc <_printf_common>
 800bb14:	3001      	adds	r0, #1
 800bb16:	d14a      	bne.n	800bbae <_printf_i+0x1f6>
 800bb18:	f04f 30ff 	mov.w	r0, #4294967295
 800bb1c:	b004      	add	sp, #16
 800bb1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	f043 0320 	orr.w	r3, r3, #32
 800bb28:	6023      	str	r3, [r4, #0]
 800bb2a:	4833      	ldr	r0, [pc, #204]	; (800bbf8 <_printf_i+0x240>)
 800bb2c:	2778      	movs	r7, #120	; 0x78
 800bb2e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bb32:	6823      	ldr	r3, [r4, #0]
 800bb34:	6829      	ldr	r1, [r5, #0]
 800bb36:	061f      	lsls	r7, r3, #24
 800bb38:	f851 6b04 	ldr.w	r6, [r1], #4
 800bb3c:	d402      	bmi.n	800bb44 <_printf_i+0x18c>
 800bb3e:	065f      	lsls	r7, r3, #25
 800bb40:	bf48      	it	mi
 800bb42:	b2b6      	uxthmi	r6, r6
 800bb44:	07df      	lsls	r7, r3, #31
 800bb46:	bf48      	it	mi
 800bb48:	f043 0320 	orrmi.w	r3, r3, #32
 800bb4c:	6029      	str	r1, [r5, #0]
 800bb4e:	bf48      	it	mi
 800bb50:	6023      	strmi	r3, [r4, #0]
 800bb52:	b91e      	cbnz	r6, 800bb5c <_printf_i+0x1a4>
 800bb54:	6823      	ldr	r3, [r4, #0]
 800bb56:	f023 0320 	bic.w	r3, r3, #32
 800bb5a:	6023      	str	r3, [r4, #0]
 800bb5c:	2310      	movs	r3, #16
 800bb5e:	e7a7      	b.n	800bab0 <_printf_i+0xf8>
 800bb60:	4824      	ldr	r0, [pc, #144]	; (800bbf4 <_printf_i+0x23c>)
 800bb62:	e7e4      	b.n	800bb2e <_printf_i+0x176>
 800bb64:	4615      	mov	r5, r2
 800bb66:	e7bd      	b.n	800bae4 <_printf_i+0x12c>
 800bb68:	682b      	ldr	r3, [r5, #0]
 800bb6a:	6826      	ldr	r6, [r4, #0]
 800bb6c:	6961      	ldr	r1, [r4, #20]
 800bb6e:	1d18      	adds	r0, r3, #4
 800bb70:	6028      	str	r0, [r5, #0]
 800bb72:	0635      	lsls	r5, r6, #24
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	d501      	bpl.n	800bb7c <_printf_i+0x1c4>
 800bb78:	6019      	str	r1, [r3, #0]
 800bb7a:	e002      	b.n	800bb82 <_printf_i+0x1ca>
 800bb7c:	0670      	lsls	r0, r6, #25
 800bb7e:	d5fb      	bpl.n	800bb78 <_printf_i+0x1c0>
 800bb80:	8019      	strh	r1, [r3, #0]
 800bb82:	2300      	movs	r3, #0
 800bb84:	6123      	str	r3, [r4, #16]
 800bb86:	4615      	mov	r5, r2
 800bb88:	e7bc      	b.n	800bb04 <_printf_i+0x14c>
 800bb8a:	682b      	ldr	r3, [r5, #0]
 800bb8c:	1d1a      	adds	r2, r3, #4
 800bb8e:	602a      	str	r2, [r5, #0]
 800bb90:	681d      	ldr	r5, [r3, #0]
 800bb92:	6862      	ldr	r2, [r4, #4]
 800bb94:	2100      	movs	r1, #0
 800bb96:	4628      	mov	r0, r5
 800bb98:	f7f4 fb1a 	bl	80001d0 <memchr>
 800bb9c:	b108      	cbz	r0, 800bba2 <_printf_i+0x1ea>
 800bb9e:	1b40      	subs	r0, r0, r5
 800bba0:	6060      	str	r0, [r4, #4]
 800bba2:	6863      	ldr	r3, [r4, #4]
 800bba4:	6123      	str	r3, [r4, #16]
 800bba6:	2300      	movs	r3, #0
 800bba8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbac:	e7aa      	b.n	800bb04 <_printf_i+0x14c>
 800bbae:	6923      	ldr	r3, [r4, #16]
 800bbb0:	462a      	mov	r2, r5
 800bbb2:	4649      	mov	r1, r9
 800bbb4:	4640      	mov	r0, r8
 800bbb6:	47d0      	blx	sl
 800bbb8:	3001      	adds	r0, #1
 800bbba:	d0ad      	beq.n	800bb18 <_printf_i+0x160>
 800bbbc:	6823      	ldr	r3, [r4, #0]
 800bbbe:	079b      	lsls	r3, r3, #30
 800bbc0:	d413      	bmi.n	800bbea <_printf_i+0x232>
 800bbc2:	68e0      	ldr	r0, [r4, #12]
 800bbc4:	9b03      	ldr	r3, [sp, #12]
 800bbc6:	4298      	cmp	r0, r3
 800bbc8:	bfb8      	it	lt
 800bbca:	4618      	movlt	r0, r3
 800bbcc:	e7a6      	b.n	800bb1c <_printf_i+0x164>
 800bbce:	2301      	movs	r3, #1
 800bbd0:	4632      	mov	r2, r6
 800bbd2:	4649      	mov	r1, r9
 800bbd4:	4640      	mov	r0, r8
 800bbd6:	47d0      	blx	sl
 800bbd8:	3001      	adds	r0, #1
 800bbda:	d09d      	beq.n	800bb18 <_printf_i+0x160>
 800bbdc:	3501      	adds	r5, #1
 800bbde:	68e3      	ldr	r3, [r4, #12]
 800bbe0:	9903      	ldr	r1, [sp, #12]
 800bbe2:	1a5b      	subs	r3, r3, r1
 800bbe4:	42ab      	cmp	r3, r5
 800bbe6:	dcf2      	bgt.n	800bbce <_printf_i+0x216>
 800bbe8:	e7eb      	b.n	800bbc2 <_printf_i+0x20a>
 800bbea:	2500      	movs	r5, #0
 800bbec:	f104 0619 	add.w	r6, r4, #25
 800bbf0:	e7f5      	b.n	800bbde <_printf_i+0x226>
 800bbf2:	bf00      	nop
 800bbf4:	080113de 	.word	0x080113de
 800bbf8:	080113ef 	.word	0x080113ef

0800bbfc <std>:
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	b510      	push	{r4, lr}
 800bc00:	4604      	mov	r4, r0
 800bc02:	e9c0 3300 	strd	r3, r3, [r0]
 800bc06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc0a:	6083      	str	r3, [r0, #8]
 800bc0c:	8181      	strh	r1, [r0, #12]
 800bc0e:	6643      	str	r3, [r0, #100]	; 0x64
 800bc10:	81c2      	strh	r2, [r0, #14]
 800bc12:	6183      	str	r3, [r0, #24]
 800bc14:	4619      	mov	r1, r3
 800bc16:	2208      	movs	r2, #8
 800bc18:	305c      	adds	r0, #92	; 0x5c
 800bc1a:	f000 f914 	bl	800be46 <memset>
 800bc1e:	4b0d      	ldr	r3, [pc, #52]	; (800bc54 <std+0x58>)
 800bc20:	6263      	str	r3, [r4, #36]	; 0x24
 800bc22:	4b0d      	ldr	r3, [pc, #52]	; (800bc58 <std+0x5c>)
 800bc24:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc26:	4b0d      	ldr	r3, [pc, #52]	; (800bc5c <std+0x60>)
 800bc28:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc2a:	4b0d      	ldr	r3, [pc, #52]	; (800bc60 <std+0x64>)
 800bc2c:	6323      	str	r3, [r4, #48]	; 0x30
 800bc2e:	4b0d      	ldr	r3, [pc, #52]	; (800bc64 <std+0x68>)
 800bc30:	6224      	str	r4, [r4, #32]
 800bc32:	429c      	cmp	r4, r3
 800bc34:	d006      	beq.n	800bc44 <std+0x48>
 800bc36:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bc3a:	4294      	cmp	r4, r2
 800bc3c:	d002      	beq.n	800bc44 <std+0x48>
 800bc3e:	33d0      	adds	r3, #208	; 0xd0
 800bc40:	429c      	cmp	r4, r3
 800bc42:	d105      	bne.n	800bc50 <std+0x54>
 800bc44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc4c:	f000 b978 	b.w	800bf40 <__retarget_lock_init_recursive>
 800bc50:	bd10      	pop	{r4, pc}
 800bc52:	bf00      	nop
 800bc54:	0800bdc1 	.word	0x0800bdc1
 800bc58:	0800bde3 	.word	0x0800bde3
 800bc5c:	0800be1b 	.word	0x0800be1b
 800bc60:	0800be3f 	.word	0x0800be3f
 800bc64:	20006610 	.word	0x20006610

0800bc68 <stdio_exit_handler>:
 800bc68:	4a02      	ldr	r2, [pc, #8]	; (800bc74 <stdio_exit_handler+0xc>)
 800bc6a:	4903      	ldr	r1, [pc, #12]	; (800bc78 <stdio_exit_handler+0x10>)
 800bc6c:	4803      	ldr	r0, [pc, #12]	; (800bc7c <stdio_exit_handler+0x14>)
 800bc6e:	f000 b869 	b.w	800bd44 <_fwalk_sglue>
 800bc72:	bf00      	nop
 800bc74:	200000b8 	.word	0x200000b8
 800bc78:	0800d8f1 	.word	0x0800d8f1
 800bc7c:	200000c4 	.word	0x200000c4

0800bc80 <cleanup_stdio>:
 800bc80:	6841      	ldr	r1, [r0, #4]
 800bc82:	4b0c      	ldr	r3, [pc, #48]	; (800bcb4 <cleanup_stdio+0x34>)
 800bc84:	4299      	cmp	r1, r3
 800bc86:	b510      	push	{r4, lr}
 800bc88:	4604      	mov	r4, r0
 800bc8a:	d001      	beq.n	800bc90 <cleanup_stdio+0x10>
 800bc8c:	f001 fe30 	bl	800d8f0 <_fflush_r>
 800bc90:	68a1      	ldr	r1, [r4, #8]
 800bc92:	4b09      	ldr	r3, [pc, #36]	; (800bcb8 <cleanup_stdio+0x38>)
 800bc94:	4299      	cmp	r1, r3
 800bc96:	d002      	beq.n	800bc9e <cleanup_stdio+0x1e>
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f001 fe29 	bl	800d8f0 <_fflush_r>
 800bc9e:	68e1      	ldr	r1, [r4, #12]
 800bca0:	4b06      	ldr	r3, [pc, #24]	; (800bcbc <cleanup_stdio+0x3c>)
 800bca2:	4299      	cmp	r1, r3
 800bca4:	d004      	beq.n	800bcb0 <cleanup_stdio+0x30>
 800bca6:	4620      	mov	r0, r4
 800bca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcac:	f001 be20 	b.w	800d8f0 <_fflush_r>
 800bcb0:	bd10      	pop	{r4, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20006610 	.word	0x20006610
 800bcb8:	20006678 	.word	0x20006678
 800bcbc:	200066e0 	.word	0x200066e0

0800bcc0 <global_stdio_init.part.0>:
 800bcc0:	b510      	push	{r4, lr}
 800bcc2:	4b0b      	ldr	r3, [pc, #44]	; (800bcf0 <global_stdio_init.part.0+0x30>)
 800bcc4:	4c0b      	ldr	r4, [pc, #44]	; (800bcf4 <global_stdio_init.part.0+0x34>)
 800bcc6:	4a0c      	ldr	r2, [pc, #48]	; (800bcf8 <global_stdio_init.part.0+0x38>)
 800bcc8:	601a      	str	r2, [r3, #0]
 800bcca:	4620      	mov	r0, r4
 800bccc:	2200      	movs	r2, #0
 800bcce:	2104      	movs	r1, #4
 800bcd0:	f7ff ff94 	bl	800bbfc <std>
 800bcd4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bcd8:	2201      	movs	r2, #1
 800bcda:	2109      	movs	r1, #9
 800bcdc:	f7ff ff8e 	bl	800bbfc <std>
 800bce0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bce4:	2202      	movs	r2, #2
 800bce6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcea:	2112      	movs	r1, #18
 800bcec:	f7ff bf86 	b.w	800bbfc <std>
 800bcf0:	20006748 	.word	0x20006748
 800bcf4:	20006610 	.word	0x20006610
 800bcf8:	0800bc69 	.word	0x0800bc69

0800bcfc <__sfp_lock_acquire>:
 800bcfc:	4801      	ldr	r0, [pc, #4]	; (800bd04 <__sfp_lock_acquire+0x8>)
 800bcfe:	f000 b920 	b.w	800bf42 <__retarget_lock_acquire_recursive>
 800bd02:	bf00      	nop
 800bd04:	20006751 	.word	0x20006751

0800bd08 <__sfp_lock_release>:
 800bd08:	4801      	ldr	r0, [pc, #4]	; (800bd10 <__sfp_lock_release+0x8>)
 800bd0a:	f000 b91b 	b.w	800bf44 <__retarget_lock_release_recursive>
 800bd0e:	bf00      	nop
 800bd10:	20006751 	.word	0x20006751

0800bd14 <__sinit>:
 800bd14:	b510      	push	{r4, lr}
 800bd16:	4604      	mov	r4, r0
 800bd18:	f7ff fff0 	bl	800bcfc <__sfp_lock_acquire>
 800bd1c:	6a23      	ldr	r3, [r4, #32]
 800bd1e:	b11b      	cbz	r3, 800bd28 <__sinit+0x14>
 800bd20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd24:	f7ff bff0 	b.w	800bd08 <__sfp_lock_release>
 800bd28:	4b04      	ldr	r3, [pc, #16]	; (800bd3c <__sinit+0x28>)
 800bd2a:	6223      	str	r3, [r4, #32]
 800bd2c:	4b04      	ldr	r3, [pc, #16]	; (800bd40 <__sinit+0x2c>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d1f5      	bne.n	800bd20 <__sinit+0xc>
 800bd34:	f7ff ffc4 	bl	800bcc0 <global_stdio_init.part.0>
 800bd38:	e7f2      	b.n	800bd20 <__sinit+0xc>
 800bd3a:	bf00      	nop
 800bd3c:	0800bc81 	.word	0x0800bc81
 800bd40:	20006748 	.word	0x20006748

0800bd44 <_fwalk_sglue>:
 800bd44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd48:	4607      	mov	r7, r0
 800bd4a:	4688      	mov	r8, r1
 800bd4c:	4614      	mov	r4, r2
 800bd4e:	2600      	movs	r6, #0
 800bd50:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bd54:	f1b9 0901 	subs.w	r9, r9, #1
 800bd58:	d505      	bpl.n	800bd66 <_fwalk_sglue+0x22>
 800bd5a:	6824      	ldr	r4, [r4, #0]
 800bd5c:	2c00      	cmp	r4, #0
 800bd5e:	d1f7      	bne.n	800bd50 <_fwalk_sglue+0xc>
 800bd60:	4630      	mov	r0, r6
 800bd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd66:	89ab      	ldrh	r3, [r5, #12]
 800bd68:	2b01      	cmp	r3, #1
 800bd6a:	d907      	bls.n	800bd7c <_fwalk_sglue+0x38>
 800bd6c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bd70:	3301      	adds	r3, #1
 800bd72:	d003      	beq.n	800bd7c <_fwalk_sglue+0x38>
 800bd74:	4629      	mov	r1, r5
 800bd76:	4638      	mov	r0, r7
 800bd78:	47c0      	blx	r8
 800bd7a:	4306      	orrs	r6, r0
 800bd7c:	3568      	adds	r5, #104	; 0x68
 800bd7e:	e7e9      	b.n	800bd54 <_fwalk_sglue+0x10>

0800bd80 <siprintf>:
 800bd80:	b40e      	push	{r1, r2, r3}
 800bd82:	b500      	push	{lr}
 800bd84:	b09c      	sub	sp, #112	; 0x70
 800bd86:	ab1d      	add	r3, sp, #116	; 0x74
 800bd88:	9002      	str	r0, [sp, #8]
 800bd8a:	9006      	str	r0, [sp, #24]
 800bd8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bd90:	4809      	ldr	r0, [pc, #36]	; (800bdb8 <siprintf+0x38>)
 800bd92:	9107      	str	r1, [sp, #28]
 800bd94:	9104      	str	r1, [sp, #16]
 800bd96:	4909      	ldr	r1, [pc, #36]	; (800bdbc <siprintf+0x3c>)
 800bd98:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd9c:	9105      	str	r1, [sp, #20]
 800bd9e:	6800      	ldr	r0, [r0, #0]
 800bda0:	9301      	str	r3, [sp, #4]
 800bda2:	a902      	add	r1, sp, #8
 800bda4:	f001 fc20 	bl	800d5e8 <_svfiprintf_r>
 800bda8:	9b02      	ldr	r3, [sp, #8]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	701a      	strb	r2, [r3, #0]
 800bdae:	b01c      	add	sp, #112	; 0x70
 800bdb0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bdb4:	b003      	add	sp, #12
 800bdb6:	4770      	bx	lr
 800bdb8:	20000110 	.word	0x20000110
 800bdbc:	ffff0208 	.word	0xffff0208

0800bdc0 <__sread>:
 800bdc0:	b510      	push	{r4, lr}
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdc8:	f000 f86c 	bl	800bea4 <_read_r>
 800bdcc:	2800      	cmp	r0, #0
 800bdce:	bfab      	itete	ge
 800bdd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdd2:	89a3      	ldrhlt	r3, [r4, #12]
 800bdd4:	181b      	addge	r3, r3, r0
 800bdd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdda:	bfac      	ite	ge
 800bddc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdde:	81a3      	strhlt	r3, [r4, #12]
 800bde0:	bd10      	pop	{r4, pc}

0800bde2 <__swrite>:
 800bde2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bde6:	461f      	mov	r7, r3
 800bde8:	898b      	ldrh	r3, [r1, #12]
 800bdea:	05db      	lsls	r3, r3, #23
 800bdec:	4605      	mov	r5, r0
 800bdee:	460c      	mov	r4, r1
 800bdf0:	4616      	mov	r6, r2
 800bdf2:	d505      	bpl.n	800be00 <__swrite+0x1e>
 800bdf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf8:	2302      	movs	r3, #2
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	f000 f840 	bl	800be80 <_lseek_r>
 800be00:	89a3      	ldrh	r3, [r4, #12]
 800be02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be0a:	81a3      	strh	r3, [r4, #12]
 800be0c:	4632      	mov	r2, r6
 800be0e:	463b      	mov	r3, r7
 800be10:	4628      	mov	r0, r5
 800be12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be16:	f000 b857 	b.w	800bec8 <_write_r>

0800be1a <__sseek>:
 800be1a:	b510      	push	{r4, lr}
 800be1c:	460c      	mov	r4, r1
 800be1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be22:	f000 f82d 	bl	800be80 <_lseek_r>
 800be26:	1c43      	adds	r3, r0, #1
 800be28:	89a3      	ldrh	r3, [r4, #12]
 800be2a:	bf15      	itete	ne
 800be2c:	6560      	strne	r0, [r4, #84]	; 0x54
 800be2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be36:	81a3      	strheq	r3, [r4, #12]
 800be38:	bf18      	it	ne
 800be3a:	81a3      	strhne	r3, [r4, #12]
 800be3c:	bd10      	pop	{r4, pc}

0800be3e <__sclose>:
 800be3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be42:	f000 b80d 	b.w	800be60 <_close_r>

0800be46 <memset>:
 800be46:	4402      	add	r2, r0
 800be48:	4603      	mov	r3, r0
 800be4a:	4293      	cmp	r3, r2
 800be4c:	d100      	bne.n	800be50 <memset+0xa>
 800be4e:	4770      	bx	lr
 800be50:	f803 1b01 	strb.w	r1, [r3], #1
 800be54:	e7f9      	b.n	800be4a <memset+0x4>
	...

0800be58 <_localeconv_r>:
 800be58:	4800      	ldr	r0, [pc, #0]	; (800be5c <_localeconv_r+0x4>)
 800be5a:	4770      	bx	lr
 800be5c:	20000204 	.word	0x20000204

0800be60 <_close_r>:
 800be60:	b538      	push	{r3, r4, r5, lr}
 800be62:	4d06      	ldr	r5, [pc, #24]	; (800be7c <_close_r+0x1c>)
 800be64:	2300      	movs	r3, #0
 800be66:	4604      	mov	r4, r0
 800be68:	4608      	mov	r0, r1
 800be6a:	602b      	str	r3, [r5, #0]
 800be6c:	f7f8 fb91 	bl	8004592 <_close>
 800be70:	1c43      	adds	r3, r0, #1
 800be72:	d102      	bne.n	800be7a <_close_r+0x1a>
 800be74:	682b      	ldr	r3, [r5, #0]
 800be76:	b103      	cbz	r3, 800be7a <_close_r+0x1a>
 800be78:	6023      	str	r3, [r4, #0]
 800be7a:	bd38      	pop	{r3, r4, r5, pc}
 800be7c:	2000674c 	.word	0x2000674c

0800be80 <_lseek_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	4d07      	ldr	r5, [pc, #28]	; (800bea0 <_lseek_r+0x20>)
 800be84:	4604      	mov	r4, r0
 800be86:	4608      	mov	r0, r1
 800be88:	4611      	mov	r1, r2
 800be8a:	2200      	movs	r2, #0
 800be8c:	602a      	str	r2, [r5, #0]
 800be8e:	461a      	mov	r2, r3
 800be90:	f7f8 fba6 	bl	80045e0 <_lseek>
 800be94:	1c43      	adds	r3, r0, #1
 800be96:	d102      	bne.n	800be9e <_lseek_r+0x1e>
 800be98:	682b      	ldr	r3, [r5, #0]
 800be9a:	b103      	cbz	r3, 800be9e <_lseek_r+0x1e>
 800be9c:	6023      	str	r3, [r4, #0]
 800be9e:	bd38      	pop	{r3, r4, r5, pc}
 800bea0:	2000674c 	.word	0x2000674c

0800bea4 <_read_r>:
 800bea4:	b538      	push	{r3, r4, r5, lr}
 800bea6:	4d07      	ldr	r5, [pc, #28]	; (800bec4 <_read_r+0x20>)
 800bea8:	4604      	mov	r4, r0
 800beaa:	4608      	mov	r0, r1
 800beac:	4611      	mov	r1, r2
 800beae:	2200      	movs	r2, #0
 800beb0:	602a      	str	r2, [r5, #0]
 800beb2:	461a      	mov	r2, r3
 800beb4:	f7f8 fb34 	bl	8004520 <_read>
 800beb8:	1c43      	adds	r3, r0, #1
 800beba:	d102      	bne.n	800bec2 <_read_r+0x1e>
 800bebc:	682b      	ldr	r3, [r5, #0]
 800bebe:	b103      	cbz	r3, 800bec2 <_read_r+0x1e>
 800bec0:	6023      	str	r3, [r4, #0]
 800bec2:	bd38      	pop	{r3, r4, r5, pc}
 800bec4:	2000674c 	.word	0x2000674c

0800bec8 <_write_r>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4d07      	ldr	r5, [pc, #28]	; (800bee8 <_write_r+0x20>)
 800becc:	4604      	mov	r4, r0
 800bece:	4608      	mov	r0, r1
 800bed0:	4611      	mov	r1, r2
 800bed2:	2200      	movs	r2, #0
 800bed4:	602a      	str	r2, [r5, #0]
 800bed6:	461a      	mov	r2, r3
 800bed8:	f7f8 fb3f 	bl	800455a <_write>
 800bedc:	1c43      	adds	r3, r0, #1
 800bede:	d102      	bne.n	800bee6 <_write_r+0x1e>
 800bee0:	682b      	ldr	r3, [r5, #0]
 800bee2:	b103      	cbz	r3, 800bee6 <_write_r+0x1e>
 800bee4:	6023      	str	r3, [r4, #0]
 800bee6:	bd38      	pop	{r3, r4, r5, pc}
 800bee8:	2000674c 	.word	0x2000674c

0800beec <__errno>:
 800beec:	4b01      	ldr	r3, [pc, #4]	; (800bef4 <__errno+0x8>)
 800beee:	6818      	ldr	r0, [r3, #0]
 800bef0:	4770      	bx	lr
 800bef2:	bf00      	nop
 800bef4:	20000110 	.word	0x20000110

0800bef8 <__libc_init_array>:
 800bef8:	b570      	push	{r4, r5, r6, lr}
 800befa:	4d0d      	ldr	r5, [pc, #52]	; (800bf30 <__libc_init_array+0x38>)
 800befc:	4c0d      	ldr	r4, [pc, #52]	; (800bf34 <__libc_init_array+0x3c>)
 800befe:	1b64      	subs	r4, r4, r5
 800bf00:	10a4      	asrs	r4, r4, #2
 800bf02:	2600      	movs	r6, #0
 800bf04:	42a6      	cmp	r6, r4
 800bf06:	d109      	bne.n	800bf1c <__libc_init_array+0x24>
 800bf08:	4d0b      	ldr	r5, [pc, #44]	; (800bf38 <__libc_init_array+0x40>)
 800bf0a:	4c0c      	ldr	r4, [pc, #48]	; (800bf3c <__libc_init_array+0x44>)
 800bf0c:	f003 f950 	bl	800f1b0 <_init>
 800bf10:	1b64      	subs	r4, r4, r5
 800bf12:	10a4      	asrs	r4, r4, #2
 800bf14:	2600      	movs	r6, #0
 800bf16:	42a6      	cmp	r6, r4
 800bf18:	d105      	bne.n	800bf26 <__libc_init_array+0x2e>
 800bf1a:	bd70      	pop	{r4, r5, r6, pc}
 800bf1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf20:	4798      	blx	r3
 800bf22:	3601      	adds	r6, #1
 800bf24:	e7ee      	b.n	800bf04 <__libc_init_array+0xc>
 800bf26:	f855 3b04 	ldr.w	r3, [r5], #4
 800bf2a:	4798      	blx	r3
 800bf2c:	3601      	adds	r6, #1
 800bf2e:	e7f2      	b.n	800bf16 <__libc_init_array+0x1e>
 800bf30:	08011780 	.word	0x08011780
 800bf34:	08011780 	.word	0x08011780
 800bf38:	08011780 	.word	0x08011780
 800bf3c:	08011784 	.word	0x08011784

0800bf40 <__retarget_lock_init_recursive>:
 800bf40:	4770      	bx	lr

0800bf42 <__retarget_lock_acquire_recursive>:
 800bf42:	4770      	bx	lr

0800bf44 <__retarget_lock_release_recursive>:
 800bf44:	4770      	bx	lr

0800bf46 <quorem>:
 800bf46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf4a:	6903      	ldr	r3, [r0, #16]
 800bf4c:	690c      	ldr	r4, [r1, #16]
 800bf4e:	42a3      	cmp	r3, r4
 800bf50:	4607      	mov	r7, r0
 800bf52:	db7e      	blt.n	800c052 <quorem+0x10c>
 800bf54:	3c01      	subs	r4, #1
 800bf56:	f101 0814 	add.w	r8, r1, #20
 800bf5a:	f100 0514 	add.w	r5, r0, #20
 800bf5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bf62:	9301      	str	r3, [sp, #4]
 800bf64:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bf68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bf74:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bf78:	fbb2 f6f3 	udiv	r6, r2, r3
 800bf7c:	d331      	bcc.n	800bfe2 <quorem+0x9c>
 800bf7e:	f04f 0e00 	mov.w	lr, #0
 800bf82:	4640      	mov	r0, r8
 800bf84:	46ac      	mov	ip, r5
 800bf86:	46f2      	mov	sl, lr
 800bf88:	f850 2b04 	ldr.w	r2, [r0], #4
 800bf8c:	b293      	uxth	r3, r2
 800bf8e:	fb06 e303 	mla	r3, r6, r3, lr
 800bf92:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bf96:	0c1a      	lsrs	r2, r3, #16
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	ebaa 0303 	sub.w	r3, sl, r3
 800bf9e:	f8dc a000 	ldr.w	sl, [ip]
 800bfa2:	fa13 f38a 	uxtah	r3, r3, sl
 800bfa6:	fb06 220e 	mla	r2, r6, lr, r2
 800bfaa:	9300      	str	r3, [sp, #0]
 800bfac:	9b00      	ldr	r3, [sp, #0]
 800bfae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bfb2:	b292      	uxth	r2, r2
 800bfb4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bfb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bfbc:	f8bd 3000 	ldrh.w	r3, [sp]
 800bfc0:	4581      	cmp	r9, r0
 800bfc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bfc6:	f84c 3b04 	str.w	r3, [ip], #4
 800bfca:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bfce:	d2db      	bcs.n	800bf88 <quorem+0x42>
 800bfd0:	f855 300b 	ldr.w	r3, [r5, fp]
 800bfd4:	b92b      	cbnz	r3, 800bfe2 <quorem+0x9c>
 800bfd6:	9b01      	ldr	r3, [sp, #4]
 800bfd8:	3b04      	subs	r3, #4
 800bfda:	429d      	cmp	r5, r3
 800bfdc:	461a      	mov	r2, r3
 800bfde:	d32c      	bcc.n	800c03a <quorem+0xf4>
 800bfe0:	613c      	str	r4, [r7, #16]
 800bfe2:	4638      	mov	r0, r7
 800bfe4:	f001 f9a6 	bl	800d334 <__mcmp>
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	db22      	blt.n	800c032 <quorem+0xec>
 800bfec:	3601      	adds	r6, #1
 800bfee:	4629      	mov	r1, r5
 800bff0:	2000      	movs	r0, #0
 800bff2:	f858 2b04 	ldr.w	r2, [r8], #4
 800bff6:	f8d1 c000 	ldr.w	ip, [r1]
 800bffa:	b293      	uxth	r3, r2
 800bffc:	1ac3      	subs	r3, r0, r3
 800bffe:	0c12      	lsrs	r2, r2, #16
 800c000:	fa13 f38c 	uxtah	r3, r3, ip
 800c004:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800c008:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c00c:	b29b      	uxth	r3, r3
 800c00e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c012:	45c1      	cmp	r9, r8
 800c014:	f841 3b04 	str.w	r3, [r1], #4
 800c018:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c01c:	d2e9      	bcs.n	800bff2 <quorem+0xac>
 800c01e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c026:	b922      	cbnz	r2, 800c032 <quorem+0xec>
 800c028:	3b04      	subs	r3, #4
 800c02a:	429d      	cmp	r5, r3
 800c02c:	461a      	mov	r2, r3
 800c02e:	d30a      	bcc.n	800c046 <quorem+0x100>
 800c030:	613c      	str	r4, [r7, #16]
 800c032:	4630      	mov	r0, r6
 800c034:	b003      	add	sp, #12
 800c036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c03a:	6812      	ldr	r2, [r2, #0]
 800c03c:	3b04      	subs	r3, #4
 800c03e:	2a00      	cmp	r2, #0
 800c040:	d1ce      	bne.n	800bfe0 <quorem+0x9a>
 800c042:	3c01      	subs	r4, #1
 800c044:	e7c9      	b.n	800bfda <quorem+0x94>
 800c046:	6812      	ldr	r2, [r2, #0]
 800c048:	3b04      	subs	r3, #4
 800c04a:	2a00      	cmp	r2, #0
 800c04c:	d1f0      	bne.n	800c030 <quorem+0xea>
 800c04e:	3c01      	subs	r4, #1
 800c050:	e7eb      	b.n	800c02a <quorem+0xe4>
 800c052:	2000      	movs	r0, #0
 800c054:	e7ee      	b.n	800c034 <quorem+0xee>
	...

0800c058 <_dtoa_r>:
 800c058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05c:	ed2d 8b04 	vpush	{d8-d9}
 800c060:	69c5      	ldr	r5, [r0, #28]
 800c062:	b093      	sub	sp, #76	; 0x4c
 800c064:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c068:	ec57 6b10 	vmov	r6, r7, d0
 800c06c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c070:	9107      	str	r1, [sp, #28]
 800c072:	4604      	mov	r4, r0
 800c074:	920a      	str	r2, [sp, #40]	; 0x28
 800c076:	930d      	str	r3, [sp, #52]	; 0x34
 800c078:	b975      	cbnz	r5, 800c098 <_dtoa_r+0x40>
 800c07a:	2010      	movs	r0, #16
 800c07c:	f000 fe2a 	bl	800ccd4 <malloc>
 800c080:	4602      	mov	r2, r0
 800c082:	61e0      	str	r0, [r4, #28]
 800c084:	b920      	cbnz	r0, 800c090 <_dtoa_r+0x38>
 800c086:	4bae      	ldr	r3, [pc, #696]	; (800c340 <_dtoa_r+0x2e8>)
 800c088:	21ef      	movs	r1, #239	; 0xef
 800c08a:	48ae      	ldr	r0, [pc, #696]	; (800c344 <_dtoa_r+0x2ec>)
 800c08c:	f001 fc90 	bl	800d9b0 <__assert_func>
 800c090:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c094:	6005      	str	r5, [r0, #0]
 800c096:	60c5      	str	r5, [r0, #12]
 800c098:	69e3      	ldr	r3, [r4, #28]
 800c09a:	6819      	ldr	r1, [r3, #0]
 800c09c:	b151      	cbz	r1, 800c0b4 <_dtoa_r+0x5c>
 800c09e:	685a      	ldr	r2, [r3, #4]
 800c0a0:	604a      	str	r2, [r1, #4]
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	4093      	lsls	r3, r2
 800c0a6:	608b      	str	r3, [r1, #8]
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	f000 ff07 	bl	800cebc <_Bfree>
 800c0ae:	69e3      	ldr	r3, [r4, #28]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	601a      	str	r2, [r3, #0]
 800c0b4:	1e3b      	subs	r3, r7, #0
 800c0b6:	bfbb      	ittet	lt
 800c0b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c0bc:	9303      	strlt	r3, [sp, #12]
 800c0be:	2300      	movge	r3, #0
 800c0c0:	2201      	movlt	r2, #1
 800c0c2:	bfac      	ite	ge
 800c0c4:	f8c8 3000 	strge.w	r3, [r8]
 800c0c8:	f8c8 2000 	strlt.w	r2, [r8]
 800c0cc:	4b9e      	ldr	r3, [pc, #632]	; (800c348 <_dtoa_r+0x2f0>)
 800c0ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c0d2:	ea33 0308 	bics.w	r3, r3, r8
 800c0d6:	d11b      	bne.n	800c110 <_dtoa_r+0xb8>
 800c0d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c0da:	f242 730f 	movw	r3, #9999	; 0x270f
 800c0de:	6013      	str	r3, [r2, #0]
 800c0e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800c0e4:	4333      	orrs	r3, r6
 800c0e6:	f000 8593 	beq.w	800cc10 <_dtoa_r+0xbb8>
 800c0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c0ec:	b963      	cbnz	r3, 800c108 <_dtoa_r+0xb0>
 800c0ee:	4b97      	ldr	r3, [pc, #604]	; (800c34c <_dtoa_r+0x2f4>)
 800c0f0:	e027      	b.n	800c142 <_dtoa_r+0xea>
 800c0f2:	4b97      	ldr	r3, [pc, #604]	; (800c350 <_dtoa_r+0x2f8>)
 800c0f4:	9300      	str	r3, [sp, #0]
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c0fa:	6013      	str	r3, [r2, #0]
 800c0fc:	9800      	ldr	r0, [sp, #0]
 800c0fe:	b013      	add	sp, #76	; 0x4c
 800c100:	ecbd 8b04 	vpop	{d8-d9}
 800c104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c108:	4b90      	ldr	r3, [pc, #576]	; (800c34c <_dtoa_r+0x2f4>)
 800c10a:	9300      	str	r3, [sp, #0]
 800c10c:	3303      	adds	r3, #3
 800c10e:	e7f3      	b.n	800c0f8 <_dtoa_r+0xa0>
 800c110:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c114:	2200      	movs	r2, #0
 800c116:	ec51 0b17 	vmov	r0, r1, d7
 800c11a:	eeb0 8a47 	vmov.f32	s16, s14
 800c11e:	eef0 8a67 	vmov.f32	s17, s15
 800c122:	2300      	movs	r3, #0
 800c124:	f7f4 fcd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800c128:	4681      	mov	r9, r0
 800c12a:	b160      	cbz	r0, 800c146 <_dtoa_r+0xee>
 800c12c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c12e:	2301      	movs	r3, #1
 800c130:	6013      	str	r3, [r2, #0]
 800c132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c134:	2b00      	cmp	r3, #0
 800c136:	f000 8568 	beq.w	800cc0a <_dtoa_r+0xbb2>
 800c13a:	4b86      	ldr	r3, [pc, #536]	; (800c354 <_dtoa_r+0x2fc>)
 800c13c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c13e:	6013      	str	r3, [r2, #0]
 800c140:	3b01      	subs	r3, #1
 800c142:	9300      	str	r3, [sp, #0]
 800c144:	e7da      	b.n	800c0fc <_dtoa_r+0xa4>
 800c146:	aa10      	add	r2, sp, #64	; 0x40
 800c148:	a911      	add	r1, sp, #68	; 0x44
 800c14a:	4620      	mov	r0, r4
 800c14c:	eeb0 0a48 	vmov.f32	s0, s16
 800c150:	eef0 0a68 	vmov.f32	s1, s17
 800c154:	f001 f994 	bl	800d480 <__d2b>
 800c158:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c15c:	4682      	mov	sl, r0
 800c15e:	2d00      	cmp	r5, #0
 800c160:	d07f      	beq.n	800c262 <_dtoa_r+0x20a>
 800c162:	ee18 3a90 	vmov	r3, s17
 800c166:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c16a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c16e:	ec51 0b18 	vmov	r0, r1, d8
 800c172:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c176:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c17a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800c17e:	4619      	mov	r1, r3
 800c180:	2200      	movs	r2, #0
 800c182:	4b75      	ldr	r3, [pc, #468]	; (800c358 <_dtoa_r+0x300>)
 800c184:	f7f4 f880 	bl	8000288 <__aeabi_dsub>
 800c188:	a367      	add	r3, pc, #412	; (adr r3, 800c328 <_dtoa_r+0x2d0>)
 800c18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c18e:	f7f4 fa33 	bl	80005f8 <__aeabi_dmul>
 800c192:	a367      	add	r3, pc, #412	; (adr r3, 800c330 <_dtoa_r+0x2d8>)
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	f7f4 f878 	bl	800028c <__adddf3>
 800c19c:	4606      	mov	r6, r0
 800c19e:	4628      	mov	r0, r5
 800c1a0:	460f      	mov	r7, r1
 800c1a2:	f7f4 f9bf 	bl	8000524 <__aeabi_i2d>
 800c1a6:	a364      	add	r3, pc, #400	; (adr r3, 800c338 <_dtoa_r+0x2e0>)
 800c1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ac:	f7f4 fa24 	bl	80005f8 <__aeabi_dmul>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4630      	mov	r0, r6
 800c1b6:	4639      	mov	r1, r7
 800c1b8:	f7f4 f868 	bl	800028c <__adddf3>
 800c1bc:	4606      	mov	r6, r0
 800c1be:	460f      	mov	r7, r1
 800c1c0:	f7f4 fcca 	bl	8000b58 <__aeabi_d2iz>
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	4683      	mov	fp, r0
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	4630      	mov	r0, r6
 800c1cc:	4639      	mov	r1, r7
 800c1ce:	f7f4 fc85 	bl	8000adc <__aeabi_dcmplt>
 800c1d2:	b148      	cbz	r0, 800c1e8 <_dtoa_r+0x190>
 800c1d4:	4658      	mov	r0, fp
 800c1d6:	f7f4 f9a5 	bl	8000524 <__aeabi_i2d>
 800c1da:	4632      	mov	r2, r6
 800c1dc:	463b      	mov	r3, r7
 800c1de:	f7f4 fc73 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1e2:	b908      	cbnz	r0, 800c1e8 <_dtoa_r+0x190>
 800c1e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c1e8:	f1bb 0f16 	cmp.w	fp, #22
 800c1ec:	d857      	bhi.n	800c29e <_dtoa_r+0x246>
 800c1ee:	4b5b      	ldr	r3, [pc, #364]	; (800c35c <_dtoa_r+0x304>)
 800c1f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	ec51 0b18 	vmov	r0, r1, d8
 800c1fc:	f7f4 fc6e 	bl	8000adc <__aeabi_dcmplt>
 800c200:	2800      	cmp	r0, #0
 800c202:	d04e      	beq.n	800c2a2 <_dtoa_r+0x24a>
 800c204:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c208:	2300      	movs	r3, #0
 800c20a:	930c      	str	r3, [sp, #48]	; 0x30
 800c20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c20e:	1b5b      	subs	r3, r3, r5
 800c210:	1e5a      	subs	r2, r3, #1
 800c212:	bf45      	ittet	mi
 800c214:	f1c3 0301 	rsbmi	r3, r3, #1
 800c218:	9305      	strmi	r3, [sp, #20]
 800c21a:	2300      	movpl	r3, #0
 800c21c:	2300      	movmi	r3, #0
 800c21e:	9206      	str	r2, [sp, #24]
 800c220:	bf54      	ite	pl
 800c222:	9305      	strpl	r3, [sp, #20]
 800c224:	9306      	strmi	r3, [sp, #24]
 800c226:	f1bb 0f00 	cmp.w	fp, #0
 800c22a:	db3c      	blt.n	800c2a6 <_dtoa_r+0x24e>
 800c22c:	9b06      	ldr	r3, [sp, #24]
 800c22e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800c232:	445b      	add	r3, fp
 800c234:	9306      	str	r3, [sp, #24]
 800c236:	2300      	movs	r3, #0
 800c238:	9308      	str	r3, [sp, #32]
 800c23a:	9b07      	ldr	r3, [sp, #28]
 800c23c:	2b09      	cmp	r3, #9
 800c23e:	d868      	bhi.n	800c312 <_dtoa_r+0x2ba>
 800c240:	2b05      	cmp	r3, #5
 800c242:	bfc4      	itt	gt
 800c244:	3b04      	subgt	r3, #4
 800c246:	9307      	strgt	r3, [sp, #28]
 800c248:	9b07      	ldr	r3, [sp, #28]
 800c24a:	f1a3 0302 	sub.w	r3, r3, #2
 800c24e:	bfcc      	ite	gt
 800c250:	2500      	movgt	r5, #0
 800c252:	2501      	movle	r5, #1
 800c254:	2b03      	cmp	r3, #3
 800c256:	f200 8085 	bhi.w	800c364 <_dtoa_r+0x30c>
 800c25a:	e8df f003 	tbb	[pc, r3]
 800c25e:	3b2e      	.short	0x3b2e
 800c260:	5839      	.short	0x5839
 800c262:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c266:	441d      	add	r5, r3
 800c268:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c26c:	2b20      	cmp	r3, #32
 800c26e:	bfc1      	itttt	gt
 800c270:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c274:	fa08 f803 	lslgt.w	r8, r8, r3
 800c278:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800c27c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800c280:	bfd6      	itet	le
 800c282:	f1c3 0320 	rsble	r3, r3, #32
 800c286:	ea48 0003 	orrgt.w	r0, r8, r3
 800c28a:	fa06 f003 	lslle.w	r0, r6, r3
 800c28e:	f7f4 f939 	bl	8000504 <__aeabi_ui2d>
 800c292:	2201      	movs	r2, #1
 800c294:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800c298:	3d01      	subs	r5, #1
 800c29a:	920e      	str	r2, [sp, #56]	; 0x38
 800c29c:	e76f      	b.n	800c17e <_dtoa_r+0x126>
 800c29e:	2301      	movs	r3, #1
 800c2a0:	e7b3      	b.n	800c20a <_dtoa_r+0x1b2>
 800c2a2:	900c      	str	r0, [sp, #48]	; 0x30
 800c2a4:	e7b2      	b.n	800c20c <_dtoa_r+0x1b4>
 800c2a6:	9b05      	ldr	r3, [sp, #20]
 800c2a8:	eba3 030b 	sub.w	r3, r3, fp
 800c2ac:	9305      	str	r3, [sp, #20]
 800c2ae:	f1cb 0300 	rsb	r3, fp, #0
 800c2b2:	9308      	str	r3, [sp, #32]
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800c2b8:	e7bf      	b.n	800c23a <_dtoa_r+0x1e2>
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	9309      	str	r3, [sp, #36]	; 0x24
 800c2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	dc52      	bgt.n	800c36a <_dtoa_r+0x312>
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	9301      	str	r3, [sp, #4]
 800c2c8:	9304      	str	r3, [sp, #16]
 800c2ca:	461a      	mov	r2, r3
 800c2cc:	920a      	str	r2, [sp, #40]	; 0x28
 800c2ce:	e00b      	b.n	800c2e8 <_dtoa_r+0x290>
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	e7f3      	b.n	800c2bc <_dtoa_r+0x264>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800c2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2da:	445b      	add	r3, fp
 800c2dc:	9301      	str	r3, [sp, #4]
 800c2de:	3301      	adds	r3, #1
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	9304      	str	r3, [sp, #16]
 800c2e4:	bfb8      	it	lt
 800c2e6:	2301      	movlt	r3, #1
 800c2e8:	69e0      	ldr	r0, [r4, #28]
 800c2ea:	2100      	movs	r1, #0
 800c2ec:	2204      	movs	r2, #4
 800c2ee:	f102 0614 	add.w	r6, r2, #20
 800c2f2:	429e      	cmp	r6, r3
 800c2f4:	d93d      	bls.n	800c372 <_dtoa_r+0x31a>
 800c2f6:	6041      	str	r1, [r0, #4]
 800c2f8:	4620      	mov	r0, r4
 800c2fa:	f000 fd9f 	bl	800ce3c <_Balloc>
 800c2fe:	9000      	str	r0, [sp, #0]
 800c300:	2800      	cmp	r0, #0
 800c302:	d139      	bne.n	800c378 <_dtoa_r+0x320>
 800c304:	4b16      	ldr	r3, [pc, #88]	; (800c360 <_dtoa_r+0x308>)
 800c306:	4602      	mov	r2, r0
 800c308:	f240 11af 	movw	r1, #431	; 0x1af
 800c30c:	e6bd      	b.n	800c08a <_dtoa_r+0x32>
 800c30e:	2301      	movs	r3, #1
 800c310:	e7e1      	b.n	800c2d6 <_dtoa_r+0x27e>
 800c312:	2501      	movs	r5, #1
 800c314:	2300      	movs	r3, #0
 800c316:	9307      	str	r3, [sp, #28]
 800c318:	9509      	str	r5, [sp, #36]	; 0x24
 800c31a:	f04f 33ff 	mov.w	r3, #4294967295
 800c31e:	9301      	str	r3, [sp, #4]
 800c320:	9304      	str	r3, [sp, #16]
 800c322:	2200      	movs	r2, #0
 800c324:	2312      	movs	r3, #18
 800c326:	e7d1      	b.n	800c2cc <_dtoa_r+0x274>
 800c328:	636f4361 	.word	0x636f4361
 800c32c:	3fd287a7 	.word	0x3fd287a7
 800c330:	8b60c8b3 	.word	0x8b60c8b3
 800c334:	3fc68a28 	.word	0x3fc68a28
 800c338:	509f79fb 	.word	0x509f79fb
 800c33c:	3fd34413 	.word	0x3fd34413
 800c340:	0801140d 	.word	0x0801140d
 800c344:	08011424 	.word	0x08011424
 800c348:	7ff00000 	.word	0x7ff00000
 800c34c:	08011409 	.word	0x08011409
 800c350:	08011400 	.word	0x08011400
 800c354:	080113dd 	.word	0x080113dd
 800c358:	3ff80000 	.word	0x3ff80000
 800c35c:	08011510 	.word	0x08011510
 800c360:	0801147c 	.word	0x0801147c
 800c364:	2301      	movs	r3, #1
 800c366:	9309      	str	r3, [sp, #36]	; 0x24
 800c368:	e7d7      	b.n	800c31a <_dtoa_r+0x2c2>
 800c36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c36c:	9301      	str	r3, [sp, #4]
 800c36e:	9304      	str	r3, [sp, #16]
 800c370:	e7ba      	b.n	800c2e8 <_dtoa_r+0x290>
 800c372:	3101      	adds	r1, #1
 800c374:	0052      	lsls	r2, r2, #1
 800c376:	e7ba      	b.n	800c2ee <_dtoa_r+0x296>
 800c378:	69e3      	ldr	r3, [r4, #28]
 800c37a:	9a00      	ldr	r2, [sp, #0]
 800c37c:	601a      	str	r2, [r3, #0]
 800c37e:	9b04      	ldr	r3, [sp, #16]
 800c380:	2b0e      	cmp	r3, #14
 800c382:	f200 80a8 	bhi.w	800c4d6 <_dtoa_r+0x47e>
 800c386:	2d00      	cmp	r5, #0
 800c388:	f000 80a5 	beq.w	800c4d6 <_dtoa_r+0x47e>
 800c38c:	f1bb 0f00 	cmp.w	fp, #0
 800c390:	dd38      	ble.n	800c404 <_dtoa_r+0x3ac>
 800c392:	4bc0      	ldr	r3, [pc, #768]	; (800c694 <_dtoa_r+0x63c>)
 800c394:	f00b 020f 	and.w	r2, fp, #15
 800c398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c39c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800c3a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800c3a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800c3a8:	d019      	beq.n	800c3de <_dtoa_r+0x386>
 800c3aa:	4bbb      	ldr	r3, [pc, #748]	; (800c698 <_dtoa_r+0x640>)
 800c3ac:	ec51 0b18 	vmov	r0, r1, d8
 800c3b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c3b4:	f7f4 fa4a 	bl	800084c <__aeabi_ddiv>
 800c3b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3bc:	f008 080f 	and.w	r8, r8, #15
 800c3c0:	2503      	movs	r5, #3
 800c3c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800c698 <_dtoa_r+0x640>
 800c3c6:	f1b8 0f00 	cmp.w	r8, #0
 800c3ca:	d10a      	bne.n	800c3e2 <_dtoa_r+0x38a>
 800c3cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3d0:	4632      	mov	r2, r6
 800c3d2:	463b      	mov	r3, r7
 800c3d4:	f7f4 fa3a 	bl	800084c <__aeabi_ddiv>
 800c3d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c3dc:	e02b      	b.n	800c436 <_dtoa_r+0x3de>
 800c3de:	2502      	movs	r5, #2
 800c3e0:	e7ef      	b.n	800c3c2 <_dtoa_r+0x36a>
 800c3e2:	f018 0f01 	tst.w	r8, #1
 800c3e6:	d008      	beq.n	800c3fa <_dtoa_r+0x3a2>
 800c3e8:	4630      	mov	r0, r6
 800c3ea:	4639      	mov	r1, r7
 800c3ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c3f0:	f7f4 f902 	bl	80005f8 <__aeabi_dmul>
 800c3f4:	3501      	adds	r5, #1
 800c3f6:	4606      	mov	r6, r0
 800c3f8:	460f      	mov	r7, r1
 800c3fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800c3fe:	f109 0908 	add.w	r9, r9, #8
 800c402:	e7e0      	b.n	800c3c6 <_dtoa_r+0x36e>
 800c404:	f000 809f 	beq.w	800c546 <_dtoa_r+0x4ee>
 800c408:	f1cb 0600 	rsb	r6, fp, #0
 800c40c:	4ba1      	ldr	r3, [pc, #644]	; (800c694 <_dtoa_r+0x63c>)
 800c40e:	4fa2      	ldr	r7, [pc, #648]	; (800c698 <_dtoa_r+0x640>)
 800c410:	f006 020f 	and.w	r2, r6, #15
 800c414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c41c:	ec51 0b18 	vmov	r0, r1, d8
 800c420:	f7f4 f8ea 	bl	80005f8 <__aeabi_dmul>
 800c424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c428:	1136      	asrs	r6, r6, #4
 800c42a:	2300      	movs	r3, #0
 800c42c:	2502      	movs	r5, #2
 800c42e:	2e00      	cmp	r6, #0
 800c430:	d17e      	bne.n	800c530 <_dtoa_r+0x4d8>
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1d0      	bne.n	800c3d8 <_dtoa_r+0x380>
 800c436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c438:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	f000 8084 	beq.w	800c54a <_dtoa_r+0x4f2>
 800c442:	4b96      	ldr	r3, [pc, #600]	; (800c69c <_dtoa_r+0x644>)
 800c444:	2200      	movs	r2, #0
 800c446:	4640      	mov	r0, r8
 800c448:	4649      	mov	r1, r9
 800c44a:	f7f4 fb47 	bl	8000adc <__aeabi_dcmplt>
 800c44e:	2800      	cmp	r0, #0
 800c450:	d07b      	beq.n	800c54a <_dtoa_r+0x4f2>
 800c452:	9b04      	ldr	r3, [sp, #16]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d078      	beq.n	800c54a <_dtoa_r+0x4f2>
 800c458:	9b01      	ldr	r3, [sp, #4]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	dd39      	ble.n	800c4d2 <_dtoa_r+0x47a>
 800c45e:	4b90      	ldr	r3, [pc, #576]	; (800c6a0 <_dtoa_r+0x648>)
 800c460:	2200      	movs	r2, #0
 800c462:	4640      	mov	r0, r8
 800c464:	4649      	mov	r1, r9
 800c466:	f7f4 f8c7 	bl	80005f8 <__aeabi_dmul>
 800c46a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c46e:	9e01      	ldr	r6, [sp, #4]
 800c470:	f10b 37ff 	add.w	r7, fp, #4294967295
 800c474:	3501      	adds	r5, #1
 800c476:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800c47a:	4628      	mov	r0, r5
 800c47c:	f7f4 f852 	bl	8000524 <__aeabi_i2d>
 800c480:	4642      	mov	r2, r8
 800c482:	464b      	mov	r3, r9
 800c484:	f7f4 f8b8 	bl	80005f8 <__aeabi_dmul>
 800c488:	4b86      	ldr	r3, [pc, #536]	; (800c6a4 <_dtoa_r+0x64c>)
 800c48a:	2200      	movs	r2, #0
 800c48c:	f7f3 fefe 	bl	800028c <__adddf3>
 800c490:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800c494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c498:	9303      	str	r3, [sp, #12]
 800c49a:	2e00      	cmp	r6, #0
 800c49c:	d158      	bne.n	800c550 <_dtoa_r+0x4f8>
 800c49e:	4b82      	ldr	r3, [pc, #520]	; (800c6a8 <_dtoa_r+0x650>)
 800c4a0:	2200      	movs	r2, #0
 800c4a2:	4640      	mov	r0, r8
 800c4a4:	4649      	mov	r1, r9
 800c4a6:	f7f3 feef 	bl	8000288 <__aeabi_dsub>
 800c4aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c4ae:	4680      	mov	r8, r0
 800c4b0:	4689      	mov	r9, r1
 800c4b2:	f7f4 fb31 	bl	8000b18 <__aeabi_dcmpgt>
 800c4b6:	2800      	cmp	r0, #0
 800c4b8:	f040 8296 	bne.w	800c9e8 <_dtoa_r+0x990>
 800c4bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800c4c0:	4640      	mov	r0, r8
 800c4c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4c6:	4649      	mov	r1, r9
 800c4c8:	f7f4 fb08 	bl	8000adc <__aeabi_dcmplt>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	f040 8289 	bne.w	800c9e4 <_dtoa_r+0x98c>
 800c4d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800c4d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	f2c0 814e 	blt.w	800c77a <_dtoa_r+0x722>
 800c4de:	f1bb 0f0e 	cmp.w	fp, #14
 800c4e2:	f300 814a 	bgt.w	800c77a <_dtoa_r+0x722>
 800c4e6:	4b6b      	ldr	r3, [pc, #428]	; (800c694 <_dtoa_r+0x63c>)
 800c4e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800c4ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f280 80dc 	bge.w	800c6b0 <_dtoa_r+0x658>
 800c4f8:	9b04      	ldr	r3, [sp, #16]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f300 80d8 	bgt.w	800c6b0 <_dtoa_r+0x658>
 800c500:	f040 826f 	bne.w	800c9e2 <_dtoa_r+0x98a>
 800c504:	4b68      	ldr	r3, [pc, #416]	; (800c6a8 <_dtoa_r+0x650>)
 800c506:	2200      	movs	r2, #0
 800c508:	4640      	mov	r0, r8
 800c50a:	4649      	mov	r1, r9
 800c50c:	f7f4 f874 	bl	80005f8 <__aeabi_dmul>
 800c510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c514:	f7f4 faf6 	bl	8000b04 <__aeabi_dcmpge>
 800c518:	9e04      	ldr	r6, [sp, #16]
 800c51a:	4637      	mov	r7, r6
 800c51c:	2800      	cmp	r0, #0
 800c51e:	f040 8245 	bne.w	800c9ac <_dtoa_r+0x954>
 800c522:	9d00      	ldr	r5, [sp, #0]
 800c524:	2331      	movs	r3, #49	; 0x31
 800c526:	f805 3b01 	strb.w	r3, [r5], #1
 800c52a:	f10b 0b01 	add.w	fp, fp, #1
 800c52e:	e241      	b.n	800c9b4 <_dtoa_r+0x95c>
 800c530:	07f2      	lsls	r2, r6, #31
 800c532:	d505      	bpl.n	800c540 <_dtoa_r+0x4e8>
 800c534:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c538:	f7f4 f85e 	bl	80005f8 <__aeabi_dmul>
 800c53c:	3501      	adds	r5, #1
 800c53e:	2301      	movs	r3, #1
 800c540:	1076      	asrs	r6, r6, #1
 800c542:	3708      	adds	r7, #8
 800c544:	e773      	b.n	800c42e <_dtoa_r+0x3d6>
 800c546:	2502      	movs	r5, #2
 800c548:	e775      	b.n	800c436 <_dtoa_r+0x3de>
 800c54a:	9e04      	ldr	r6, [sp, #16]
 800c54c:	465f      	mov	r7, fp
 800c54e:	e792      	b.n	800c476 <_dtoa_r+0x41e>
 800c550:	9900      	ldr	r1, [sp, #0]
 800c552:	4b50      	ldr	r3, [pc, #320]	; (800c694 <_dtoa_r+0x63c>)
 800c554:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c558:	4431      	add	r1, r6
 800c55a:	9102      	str	r1, [sp, #8]
 800c55c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c55e:	eeb0 9a47 	vmov.f32	s18, s14
 800c562:	eef0 9a67 	vmov.f32	s19, s15
 800c566:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c56a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c56e:	2900      	cmp	r1, #0
 800c570:	d044      	beq.n	800c5fc <_dtoa_r+0x5a4>
 800c572:	494e      	ldr	r1, [pc, #312]	; (800c6ac <_dtoa_r+0x654>)
 800c574:	2000      	movs	r0, #0
 800c576:	f7f4 f969 	bl	800084c <__aeabi_ddiv>
 800c57a:	ec53 2b19 	vmov	r2, r3, d9
 800c57e:	f7f3 fe83 	bl	8000288 <__aeabi_dsub>
 800c582:	9d00      	ldr	r5, [sp, #0]
 800c584:	ec41 0b19 	vmov	d9, r0, r1
 800c588:	4649      	mov	r1, r9
 800c58a:	4640      	mov	r0, r8
 800c58c:	f7f4 fae4 	bl	8000b58 <__aeabi_d2iz>
 800c590:	4606      	mov	r6, r0
 800c592:	f7f3 ffc7 	bl	8000524 <__aeabi_i2d>
 800c596:	4602      	mov	r2, r0
 800c598:	460b      	mov	r3, r1
 800c59a:	4640      	mov	r0, r8
 800c59c:	4649      	mov	r1, r9
 800c59e:	f7f3 fe73 	bl	8000288 <__aeabi_dsub>
 800c5a2:	3630      	adds	r6, #48	; 0x30
 800c5a4:	f805 6b01 	strb.w	r6, [r5], #1
 800c5a8:	ec53 2b19 	vmov	r2, r3, d9
 800c5ac:	4680      	mov	r8, r0
 800c5ae:	4689      	mov	r9, r1
 800c5b0:	f7f4 fa94 	bl	8000adc <__aeabi_dcmplt>
 800c5b4:	2800      	cmp	r0, #0
 800c5b6:	d164      	bne.n	800c682 <_dtoa_r+0x62a>
 800c5b8:	4642      	mov	r2, r8
 800c5ba:	464b      	mov	r3, r9
 800c5bc:	4937      	ldr	r1, [pc, #220]	; (800c69c <_dtoa_r+0x644>)
 800c5be:	2000      	movs	r0, #0
 800c5c0:	f7f3 fe62 	bl	8000288 <__aeabi_dsub>
 800c5c4:	ec53 2b19 	vmov	r2, r3, d9
 800c5c8:	f7f4 fa88 	bl	8000adc <__aeabi_dcmplt>
 800c5cc:	2800      	cmp	r0, #0
 800c5ce:	f040 80b6 	bne.w	800c73e <_dtoa_r+0x6e6>
 800c5d2:	9b02      	ldr	r3, [sp, #8]
 800c5d4:	429d      	cmp	r5, r3
 800c5d6:	f43f af7c 	beq.w	800c4d2 <_dtoa_r+0x47a>
 800c5da:	4b31      	ldr	r3, [pc, #196]	; (800c6a0 <_dtoa_r+0x648>)
 800c5dc:	ec51 0b19 	vmov	r0, r1, d9
 800c5e0:	2200      	movs	r2, #0
 800c5e2:	f7f4 f809 	bl	80005f8 <__aeabi_dmul>
 800c5e6:	4b2e      	ldr	r3, [pc, #184]	; (800c6a0 <_dtoa_r+0x648>)
 800c5e8:	ec41 0b19 	vmov	d9, r0, r1
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	4640      	mov	r0, r8
 800c5f0:	4649      	mov	r1, r9
 800c5f2:	f7f4 f801 	bl	80005f8 <__aeabi_dmul>
 800c5f6:	4680      	mov	r8, r0
 800c5f8:	4689      	mov	r9, r1
 800c5fa:	e7c5      	b.n	800c588 <_dtoa_r+0x530>
 800c5fc:	ec51 0b17 	vmov	r0, r1, d7
 800c600:	f7f3 fffa 	bl	80005f8 <__aeabi_dmul>
 800c604:	9b02      	ldr	r3, [sp, #8]
 800c606:	9d00      	ldr	r5, [sp, #0]
 800c608:	930f      	str	r3, [sp, #60]	; 0x3c
 800c60a:	ec41 0b19 	vmov	d9, r0, r1
 800c60e:	4649      	mov	r1, r9
 800c610:	4640      	mov	r0, r8
 800c612:	f7f4 faa1 	bl	8000b58 <__aeabi_d2iz>
 800c616:	4606      	mov	r6, r0
 800c618:	f7f3 ff84 	bl	8000524 <__aeabi_i2d>
 800c61c:	3630      	adds	r6, #48	; 0x30
 800c61e:	4602      	mov	r2, r0
 800c620:	460b      	mov	r3, r1
 800c622:	4640      	mov	r0, r8
 800c624:	4649      	mov	r1, r9
 800c626:	f7f3 fe2f 	bl	8000288 <__aeabi_dsub>
 800c62a:	f805 6b01 	strb.w	r6, [r5], #1
 800c62e:	9b02      	ldr	r3, [sp, #8]
 800c630:	429d      	cmp	r5, r3
 800c632:	4680      	mov	r8, r0
 800c634:	4689      	mov	r9, r1
 800c636:	f04f 0200 	mov.w	r2, #0
 800c63a:	d124      	bne.n	800c686 <_dtoa_r+0x62e>
 800c63c:	4b1b      	ldr	r3, [pc, #108]	; (800c6ac <_dtoa_r+0x654>)
 800c63e:	ec51 0b19 	vmov	r0, r1, d9
 800c642:	f7f3 fe23 	bl	800028c <__adddf3>
 800c646:	4602      	mov	r2, r0
 800c648:	460b      	mov	r3, r1
 800c64a:	4640      	mov	r0, r8
 800c64c:	4649      	mov	r1, r9
 800c64e:	f7f4 fa63 	bl	8000b18 <__aeabi_dcmpgt>
 800c652:	2800      	cmp	r0, #0
 800c654:	d173      	bne.n	800c73e <_dtoa_r+0x6e6>
 800c656:	ec53 2b19 	vmov	r2, r3, d9
 800c65a:	4914      	ldr	r1, [pc, #80]	; (800c6ac <_dtoa_r+0x654>)
 800c65c:	2000      	movs	r0, #0
 800c65e:	f7f3 fe13 	bl	8000288 <__aeabi_dsub>
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	4640      	mov	r0, r8
 800c668:	4649      	mov	r1, r9
 800c66a:	f7f4 fa37 	bl	8000adc <__aeabi_dcmplt>
 800c66e:	2800      	cmp	r0, #0
 800c670:	f43f af2f 	beq.w	800c4d2 <_dtoa_r+0x47a>
 800c674:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c676:	1e6b      	subs	r3, r5, #1
 800c678:	930f      	str	r3, [sp, #60]	; 0x3c
 800c67a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c67e:	2b30      	cmp	r3, #48	; 0x30
 800c680:	d0f8      	beq.n	800c674 <_dtoa_r+0x61c>
 800c682:	46bb      	mov	fp, r7
 800c684:	e04a      	b.n	800c71c <_dtoa_r+0x6c4>
 800c686:	4b06      	ldr	r3, [pc, #24]	; (800c6a0 <_dtoa_r+0x648>)
 800c688:	f7f3 ffb6 	bl	80005f8 <__aeabi_dmul>
 800c68c:	4680      	mov	r8, r0
 800c68e:	4689      	mov	r9, r1
 800c690:	e7bd      	b.n	800c60e <_dtoa_r+0x5b6>
 800c692:	bf00      	nop
 800c694:	08011510 	.word	0x08011510
 800c698:	080114e8 	.word	0x080114e8
 800c69c:	3ff00000 	.word	0x3ff00000
 800c6a0:	40240000 	.word	0x40240000
 800c6a4:	401c0000 	.word	0x401c0000
 800c6a8:	40140000 	.word	0x40140000
 800c6ac:	3fe00000 	.word	0x3fe00000
 800c6b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800c6b4:	9d00      	ldr	r5, [sp, #0]
 800c6b6:	4642      	mov	r2, r8
 800c6b8:	464b      	mov	r3, r9
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	4639      	mov	r1, r7
 800c6be:	f7f4 f8c5 	bl	800084c <__aeabi_ddiv>
 800c6c2:	f7f4 fa49 	bl	8000b58 <__aeabi_d2iz>
 800c6c6:	9001      	str	r0, [sp, #4]
 800c6c8:	f7f3 ff2c 	bl	8000524 <__aeabi_i2d>
 800c6cc:	4642      	mov	r2, r8
 800c6ce:	464b      	mov	r3, r9
 800c6d0:	f7f3 ff92 	bl	80005f8 <__aeabi_dmul>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	460b      	mov	r3, r1
 800c6d8:	4630      	mov	r0, r6
 800c6da:	4639      	mov	r1, r7
 800c6dc:	f7f3 fdd4 	bl	8000288 <__aeabi_dsub>
 800c6e0:	9e01      	ldr	r6, [sp, #4]
 800c6e2:	9f04      	ldr	r7, [sp, #16]
 800c6e4:	3630      	adds	r6, #48	; 0x30
 800c6e6:	f805 6b01 	strb.w	r6, [r5], #1
 800c6ea:	9e00      	ldr	r6, [sp, #0]
 800c6ec:	1bae      	subs	r6, r5, r6
 800c6ee:	42b7      	cmp	r7, r6
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	460b      	mov	r3, r1
 800c6f4:	d134      	bne.n	800c760 <_dtoa_r+0x708>
 800c6f6:	f7f3 fdc9 	bl	800028c <__adddf3>
 800c6fa:	4642      	mov	r2, r8
 800c6fc:	464b      	mov	r3, r9
 800c6fe:	4606      	mov	r6, r0
 800c700:	460f      	mov	r7, r1
 800c702:	f7f4 fa09 	bl	8000b18 <__aeabi_dcmpgt>
 800c706:	b9c8      	cbnz	r0, 800c73c <_dtoa_r+0x6e4>
 800c708:	4642      	mov	r2, r8
 800c70a:	464b      	mov	r3, r9
 800c70c:	4630      	mov	r0, r6
 800c70e:	4639      	mov	r1, r7
 800c710:	f7f4 f9da 	bl	8000ac8 <__aeabi_dcmpeq>
 800c714:	b110      	cbz	r0, 800c71c <_dtoa_r+0x6c4>
 800c716:	9b01      	ldr	r3, [sp, #4]
 800c718:	07db      	lsls	r3, r3, #31
 800c71a:	d40f      	bmi.n	800c73c <_dtoa_r+0x6e4>
 800c71c:	4651      	mov	r1, sl
 800c71e:	4620      	mov	r0, r4
 800c720:	f000 fbcc 	bl	800cebc <_Bfree>
 800c724:	2300      	movs	r3, #0
 800c726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c728:	702b      	strb	r3, [r5, #0]
 800c72a:	f10b 0301 	add.w	r3, fp, #1
 800c72e:	6013      	str	r3, [r2, #0]
 800c730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c732:	2b00      	cmp	r3, #0
 800c734:	f43f ace2 	beq.w	800c0fc <_dtoa_r+0xa4>
 800c738:	601d      	str	r5, [r3, #0]
 800c73a:	e4df      	b.n	800c0fc <_dtoa_r+0xa4>
 800c73c:	465f      	mov	r7, fp
 800c73e:	462b      	mov	r3, r5
 800c740:	461d      	mov	r5, r3
 800c742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c746:	2a39      	cmp	r2, #57	; 0x39
 800c748:	d106      	bne.n	800c758 <_dtoa_r+0x700>
 800c74a:	9a00      	ldr	r2, [sp, #0]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d1f7      	bne.n	800c740 <_dtoa_r+0x6e8>
 800c750:	9900      	ldr	r1, [sp, #0]
 800c752:	2230      	movs	r2, #48	; 0x30
 800c754:	3701      	adds	r7, #1
 800c756:	700a      	strb	r2, [r1, #0]
 800c758:	781a      	ldrb	r2, [r3, #0]
 800c75a:	3201      	adds	r2, #1
 800c75c:	701a      	strb	r2, [r3, #0]
 800c75e:	e790      	b.n	800c682 <_dtoa_r+0x62a>
 800c760:	4ba3      	ldr	r3, [pc, #652]	; (800c9f0 <_dtoa_r+0x998>)
 800c762:	2200      	movs	r2, #0
 800c764:	f7f3 ff48 	bl	80005f8 <__aeabi_dmul>
 800c768:	2200      	movs	r2, #0
 800c76a:	2300      	movs	r3, #0
 800c76c:	4606      	mov	r6, r0
 800c76e:	460f      	mov	r7, r1
 800c770:	f7f4 f9aa 	bl	8000ac8 <__aeabi_dcmpeq>
 800c774:	2800      	cmp	r0, #0
 800c776:	d09e      	beq.n	800c6b6 <_dtoa_r+0x65e>
 800c778:	e7d0      	b.n	800c71c <_dtoa_r+0x6c4>
 800c77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c77c:	2a00      	cmp	r2, #0
 800c77e:	f000 80ca 	beq.w	800c916 <_dtoa_r+0x8be>
 800c782:	9a07      	ldr	r2, [sp, #28]
 800c784:	2a01      	cmp	r2, #1
 800c786:	f300 80ad 	bgt.w	800c8e4 <_dtoa_r+0x88c>
 800c78a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c78c:	2a00      	cmp	r2, #0
 800c78e:	f000 80a5 	beq.w	800c8dc <_dtoa_r+0x884>
 800c792:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c796:	9e08      	ldr	r6, [sp, #32]
 800c798:	9d05      	ldr	r5, [sp, #20]
 800c79a:	9a05      	ldr	r2, [sp, #20]
 800c79c:	441a      	add	r2, r3
 800c79e:	9205      	str	r2, [sp, #20]
 800c7a0:	9a06      	ldr	r2, [sp, #24]
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	441a      	add	r2, r3
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	9206      	str	r2, [sp, #24]
 800c7aa:	f000 fc3d 	bl	800d028 <__i2b>
 800c7ae:	4607      	mov	r7, r0
 800c7b0:	b165      	cbz	r5, 800c7cc <_dtoa_r+0x774>
 800c7b2:	9b06      	ldr	r3, [sp, #24]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	dd09      	ble.n	800c7cc <_dtoa_r+0x774>
 800c7b8:	42ab      	cmp	r3, r5
 800c7ba:	9a05      	ldr	r2, [sp, #20]
 800c7bc:	bfa8      	it	ge
 800c7be:	462b      	movge	r3, r5
 800c7c0:	1ad2      	subs	r2, r2, r3
 800c7c2:	9205      	str	r2, [sp, #20]
 800c7c4:	9a06      	ldr	r2, [sp, #24]
 800c7c6:	1aed      	subs	r5, r5, r3
 800c7c8:	1ad3      	subs	r3, r2, r3
 800c7ca:	9306      	str	r3, [sp, #24]
 800c7cc:	9b08      	ldr	r3, [sp, #32]
 800c7ce:	b1f3      	cbz	r3, 800c80e <_dtoa_r+0x7b6>
 800c7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	f000 80a3 	beq.w	800c91e <_dtoa_r+0x8c6>
 800c7d8:	2e00      	cmp	r6, #0
 800c7da:	dd10      	ble.n	800c7fe <_dtoa_r+0x7a6>
 800c7dc:	4639      	mov	r1, r7
 800c7de:	4632      	mov	r2, r6
 800c7e0:	4620      	mov	r0, r4
 800c7e2:	f000 fce1 	bl	800d1a8 <__pow5mult>
 800c7e6:	4652      	mov	r2, sl
 800c7e8:	4601      	mov	r1, r0
 800c7ea:	4607      	mov	r7, r0
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	f000 fc31 	bl	800d054 <__multiply>
 800c7f2:	4651      	mov	r1, sl
 800c7f4:	4680      	mov	r8, r0
 800c7f6:	4620      	mov	r0, r4
 800c7f8:	f000 fb60 	bl	800cebc <_Bfree>
 800c7fc:	46c2      	mov	sl, r8
 800c7fe:	9b08      	ldr	r3, [sp, #32]
 800c800:	1b9a      	subs	r2, r3, r6
 800c802:	d004      	beq.n	800c80e <_dtoa_r+0x7b6>
 800c804:	4651      	mov	r1, sl
 800c806:	4620      	mov	r0, r4
 800c808:	f000 fcce 	bl	800d1a8 <__pow5mult>
 800c80c:	4682      	mov	sl, r0
 800c80e:	2101      	movs	r1, #1
 800c810:	4620      	mov	r0, r4
 800c812:	f000 fc09 	bl	800d028 <__i2b>
 800c816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c818:	2b00      	cmp	r3, #0
 800c81a:	4606      	mov	r6, r0
 800c81c:	f340 8081 	ble.w	800c922 <_dtoa_r+0x8ca>
 800c820:	461a      	mov	r2, r3
 800c822:	4601      	mov	r1, r0
 800c824:	4620      	mov	r0, r4
 800c826:	f000 fcbf 	bl	800d1a8 <__pow5mult>
 800c82a:	9b07      	ldr	r3, [sp, #28]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	4606      	mov	r6, r0
 800c830:	dd7a      	ble.n	800c928 <_dtoa_r+0x8d0>
 800c832:	f04f 0800 	mov.w	r8, #0
 800c836:	6933      	ldr	r3, [r6, #16]
 800c838:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c83c:	6918      	ldr	r0, [r3, #16]
 800c83e:	f000 fba5 	bl	800cf8c <__hi0bits>
 800c842:	f1c0 0020 	rsb	r0, r0, #32
 800c846:	9b06      	ldr	r3, [sp, #24]
 800c848:	4418      	add	r0, r3
 800c84a:	f010 001f 	ands.w	r0, r0, #31
 800c84e:	f000 8094 	beq.w	800c97a <_dtoa_r+0x922>
 800c852:	f1c0 0320 	rsb	r3, r0, #32
 800c856:	2b04      	cmp	r3, #4
 800c858:	f340 8085 	ble.w	800c966 <_dtoa_r+0x90e>
 800c85c:	9b05      	ldr	r3, [sp, #20]
 800c85e:	f1c0 001c 	rsb	r0, r0, #28
 800c862:	4403      	add	r3, r0
 800c864:	9305      	str	r3, [sp, #20]
 800c866:	9b06      	ldr	r3, [sp, #24]
 800c868:	4403      	add	r3, r0
 800c86a:	4405      	add	r5, r0
 800c86c:	9306      	str	r3, [sp, #24]
 800c86e:	9b05      	ldr	r3, [sp, #20]
 800c870:	2b00      	cmp	r3, #0
 800c872:	dd05      	ble.n	800c880 <_dtoa_r+0x828>
 800c874:	4651      	mov	r1, sl
 800c876:	461a      	mov	r2, r3
 800c878:	4620      	mov	r0, r4
 800c87a:	f000 fcef 	bl	800d25c <__lshift>
 800c87e:	4682      	mov	sl, r0
 800c880:	9b06      	ldr	r3, [sp, #24]
 800c882:	2b00      	cmp	r3, #0
 800c884:	dd05      	ble.n	800c892 <_dtoa_r+0x83a>
 800c886:	4631      	mov	r1, r6
 800c888:	461a      	mov	r2, r3
 800c88a:	4620      	mov	r0, r4
 800c88c:	f000 fce6 	bl	800d25c <__lshift>
 800c890:	4606      	mov	r6, r0
 800c892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c894:	2b00      	cmp	r3, #0
 800c896:	d072      	beq.n	800c97e <_dtoa_r+0x926>
 800c898:	4631      	mov	r1, r6
 800c89a:	4650      	mov	r0, sl
 800c89c:	f000 fd4a 	bl	800d334 <__mcmp>
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	da6c      	bge.n	800c97e <_dtoa_r+0x926>
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	4651      	mov	r1, sl
 800c8a8:	220a      	movs	r2, #10
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	f000 fb28 	bl	800cf00 <__multadd>
 800c8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c8b6:	4682      	mov	sl, r0
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	f000 81b0 	beq.w	800cc1e <_dtoa_r+0xbc6>
 800c8be:	2300      	movs	r3, #0
 800c8c0:	4639      	mov	r1, r7
 800c8c2:	220a      	movs	r2, #10
 800c8c4:	4620      	mov	r0, r4
 800c8c6:	f000 fb1b 	bl	800cf00 <__multadd>
 800c8ca:	9b01      	ldr	r3, [sp, #4]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	4607      	mov	r7, r0
 800c8d0:	f300 8096 	bgt.w	800ca00 <_dtoa_r+0x9a8>
 800c8d4:	9b07      	ldr	r3, [sp, #28]
 800c8d6:	2b02      	cmp	r3, #2
 800c8d8:	dc59      	bgt.n	800c98e <_dtoa_r+0x936>
 800c8da:	e091      	b.n	800ca00 <_dtoa_r+0x9a8>
 800c8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c8de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c8e2:	e758      	b.n	800c796 <_dtoa_r+0x73e>
 800c8e4:	9b04      	ldr	r3, [sp, #16]
 800c8e6:	1e5e      	subs	r6, r3, #1
 800c8e8:	9b08      	ldr	r3, [sp, #32]
 800c8ea:	42b3      	cmp	r3, r6
 800c8ec:	bfbf      	itttt	lt
 800c8ee:	9b08      	ldrlt	r3, [sp, #32]
 800c8f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c8f2:	9608      	strlt	r6, [sp, #32]
 800c8f4:	1af3      	sublt	r3, r6, r3
 800c8f6:	bfb4      	ite	lt
 800c8f8:	18d2      	addlt	r2, r2, r3
 800c8fa:	1b9e      	subge	r6, r3, r6
 800c8fc:	9b04      	ldr	r3, [sp, #16]
 800c8fe:	bfbc      	itt	lt
 800c900:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c902:	2600      	movlt	r6, #0
 800c904:	2b00      	cmp	r3, #0
 800c906:	bfb7      	itett	lt
 800c908:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c90c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c910:	1a9d      	sublt	r5, r3, r2
 800c912:	2300      	movlt	r3, #0
 800c914:	e741      	b.n	800c79a <_dtoa_r+0x742>
 800c916:	9e08      	ldr	r6, [sp, #32]
 800c918:	9d05      	ldr	r5, [sp, #20]
 800c91a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c91c:	e748      	b.n	800c7b0 <_dtoa_r+0x758>
 800c91e:	9a08      	ldr	r2, [sp, #32]
 800c920:	e770      	b.n	800c804 <_dtoa_r+0x7ac>
 800c922:	9b07      	ldr	r3, [sp, #28]
 800c924:	2b01      	cmp	r3, #1
 800c926:	dc19      	bgt.n	800c95c <_dtoa_r+0x904>
 800c928:	9b02      	ldr	r3, [sp, #8]
 800c92a:	b9bb      	cbnz	r3, 800c95c <_dtoa_r+0x904>
 800c92c:	9b03      	ldr	r3, [sp, #12]
 800c92e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c932:	b99b      	cbnz	r3, 800c95c <_dtoa_r+0x904>
 800c934:	9b03      	ldr	r3, [sp, #12]
 800c936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c93a:	0d1b      	lsrs	r3, r3, #20
 800c93c:	051b      	lsls	r3, r3, #20
 800c93e:	b183      	cbz	r3, 800c962 <_dtoa_r+0x90a>
 800c940:	9b05      	ldr	r3, [sp, #20]
 800c942:	3301      	adds	r3, #1
 800c944:	9305      	str	r3, [sp, #20]
 800c946:	9b06      	ldr	r3, [sp, #24]
 800c948:	3301      	adds	r3, #1
 800c94a:	9306      	str	r3, [sp, #24]
 800c94c:	f04f 0801 	mov.w	r8, #1
 800c950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c952:	2b00      	cmp	r3, #0
 800c954:	f47f af6f 	bne.w	800c836 <_dtoa_r+0x7de>
 800c958:	2001      	movs	r0, #1
 800c95a:	e774      	b.n	800c846 <_dtoa_r+0x7ee>
 800c95c:	f04f 0800 	mov.w	r8, #0
 800c960:	e7f6      	b.n	800c950 <_dtoa_r+0x8f8>
 800c962:	4698      	mov	r8, r3
 800c964:	e7f4      	b.n	800c950 <_dtoa_r+0x8f8>
 800c966:	d082      	beq.n	800c86e <_dtoa_r+0x816>
 800c968:	9a05      	ldr	r2, [sp, #20]
 800c96a:	331c      	adds	r3, #28
 800c96c:	441a      	add	r2, r3
 800c96e:	9205      	str	r2, [sp, #20]
 800c970:	9a06      	ldr	r2, [sp, #24]
 800c972:	441a      	add	r2, r3
 800c974:	441d      	add	r5, r3
 800c976:	9206      	str	r2, [sp, #24]
 800c978:	e779      	b.n	800c86e <_dtoa_r+0x816>
 800c97a:	4603      	mov	r3, r0
 800c97c:	e7f4      	b.n	800c968 <_dtoa_r+0x910>
 800c97e:	9b04      	ldr	r3, [sp, #16]
 800c980:	2b00      	cmp	r3, #0
 800c982:	dc37      	bgt.n	800c9f4 <_dtoa_r+0x99c>
 800c984:	9b07      	ldr	r3, [sp, #28]
 800c986:	2b02      	cmp	r3, #2
 800c988:	dd34      	ble.n	800c9f4 <_dtoa_r+0x99c>
 800c98a:	9b04      	ldr	r3, [sp, #16]
 800c98c:	9301      	str	r3, [sp, #4]
 800c98e:	9b01      	ldr	r3, [sp, #4]
 800c990:	b963      	cbnz	r3, 800c9ac <_dtoa_r+0x954>
 800c992:	4631      	mov	r1, r6
 800c994:	2205      	movs	r2, #5
 800c996:	4620      	mov	r0, r4
 800c998:	f000 fab2 	bl	800cf00 <__multadd>
 800c99c:	4601      	mov	r1, r0
 800c99e:	4606      	mov	r6, r0
 800c9a0:	4650      	mov	r0, sl
 800c9a2:	f000 fcc7 	bl	800d334 <__mcmp>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	f73f adbb 	bgt.w	800c522 <_dtoa_r+0x4ca>
 800c9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9ae:	9d00      	ldr	r5, [sp, #0]
 800c9b0:	ea6f 0b03 	mvn.w	fp, r3
 800c9b4:	f04f 0800 	mov.w	r8, #0
 800c9b8:	4631      	mov	r1, r6
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f000 fa7e 	bl	800cebc <_Bfree>
 800c9c0:	2f00      	cmp	r7, #0
 800c9c2:	f43f aeab 	beq.w	800c71c <_dtoa_r+0x6c4>
 800c9c6:	f1b8 0f00 	cmp.w	r8, #0
 800c9ca:	d005      	beq.n	800c9d8 <_dtoa_r+0x980>
 800c9cc:	45b8      	cmp	r8, r7
 800c9ce:	d003      	beq.n	800c9d8 <_dtoa_r+0x980>
 800c9d0:	4641      	mov	r1, r8
 800c9d2:	4620      	mov	r0, r4
 800c9d4:	f000 fa72 	bl	800cebc <_Bfree>
 800c9d8:	4639      	mov	r1, r7
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f000 fa6e 	bl	800cebc <_Bfree>
 800c9e0:	e69c      	b.n	800c71c <_dtoa_r+0x6c4>
 800c9e2:	2600      	movs	r6, #0
 800c9e4:	4637      	mov	r7, r6
 800c9e6:	e7e1      	b.n	800c9ac <_dtoa_r+0x954>
 800c9e8:	46bb      	mov	fp, r7
 800c9ea:	4637      	mov	r7, r6
 800c9ec:	e599      	b.n	800c522 <_dtoa_r+0x4ca>
 800c9ee:	bf00      	nop
 800c9f0:	40240000 	.word	0x40240000
 800c9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f000 80c8 	beq.w	800cb8c <_dtoa_r+0xb34>
 800c9fc:	9b04      	ldr	r3, [sp, #16]
 800c9fe:	9301      	str	r3, [sp, #4]
 800ca00:	2d00      	cmp	r5, #0
 800ca02:	dd05      	ble.n	800ca10 <_dtoa_r+0x9b8>
 800ca04:	4639      	mov	r1, r7
 800ca06:	462a      	mov	r2, r5
 800ca08:	4620      	mov	r0, r4
 800ca0a:	f000 fc27 	bl	800d25c <__lshift>
 800ca0e:	4607      	mov	r7, r0
 800ca10:	f1b8 0f00 	cmp.w	r8, #0
 800ca14:	d05b      	beq.n	800cace <_dtoa_r+0xa76>
 800ca16:	6879      	ldr	r1, [r7, #4]
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f000 fa0f 	bl	800ce3c <_Balloc>
 800ca1e:	4605      	mov	r5, r0
 800ca20:	b928      	cbnz	r0, 800ca2e <_dtoa_r+0x9d6>
 800ca22:	4b83      	ldr	r3, [pc, #524]	; (800cc30 <_dtoa_r+0xbd8>)
 800ca24:	4602      	mov	r2, r0
 800ca26:	f240 21ef 	movw	r1, #751	; 0x2ef
 800ca2a:	f7ff bb2e 	b.w	800c08a <_dtoa_r+0x32>
 800ca2e:	693a      	ldr	r2, [r7, #16]
 800ca30:	3202      	adds	r2, #2
 800ca32:	0092      	lsls	r2, r2, #2
 800ca34:	f107 010c 	add.w	r1, r7, #12
 800ca38:	300c      	adds	r0, #12
 800ca3a:	f000 ffab 	bl	800d994 <memcpy>
 800ca3e:	2201      	movs	r2, #1
 800ca40:	4629      	mov	r1, r5
 800ca42:	4620      	mov	r0, r4
 800ca44:	f000 fc0a 	bl	800d25c <__lshift>
 800ca48:	9b00      	ldr	r3, [sp, #0]
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	9304      	str	r3, [sp, #16]
 800ca4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca52:	4413      	add	r3, r2
 800ca54:	9308      	str	r3, [sp, #32]
 800ca56:	9b02      	ldr	r3, [sp, #8]
 800ca58:	f003 0301 	and.w	r3, r3, #1
 800ca5c:	46b8      	mov	r8, r7
 800ca5e:	9306      	str	r3, [sp, #24]
 800ca60:	4607      	mov	r7, r0
 800ca62:	9b04      	ldr	r3, [sp, #16]
 800ca64:	4631      	mov	r1, r6
 800ca66:	3b01      	subs	r3, #1
 800ca68:	4650      	mov	r0, sl
 800ca6a:	9301      	str	r3, [sp, #4]
 800ca6c:	f7ff fa6b 	bl	800bf46 <quorem>
 800ca70:	4641      	mov	r1, r8
 800ca72:	9002      	str	r0, [sp, #8]
 800ca74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ca78:	4650      	mov	r0, sl
 800ca7a:	f000 fc5b 	bl	800d334 <__mcmp>
 800ca7e:	463a      	mov	r2, r7
 800ca80:	9005      	str	r0, [sp, #20]
 800ca82:	4631      	mov	r1, r6
 800ca84:	4620      	mov	r0, r4
 800ca86:	f000 fc71 	bl	800d36c <__mdiff>
 800ca8a:	68c2      	ldr	r2, [r0, #12]
 800ca8c:	4605      	mov	r5, r0
 800ca8e:	bb02      	cbnz	r2, 800cad2 <_dtoa_r+0xa7a>
 800ca90:	4601      	mov	r1, r0
 800ca92:	4650      	mov	r0, sl
 800ca94:	f000 fc4e 	bl	800d334 <__mcmp>
 800ca98:	4602      	mov	r2, r0
 800ca9a:	4629      	mov	r1, r5
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	9209      	str	r2, [sp, #36]	; 0x24
 800caa0:	f000 fa0c 	bl	800cebc <_Bfree>
 800caa4:	9b07      	ldr	r3, [sp, #28]
 800caa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800caa8:	9d04      	ldr	r5, [sp, #16]
 800caaa:	ea43 0102 	orr.w	r1, r3, r2
 800caae:	9b06      	ldr	r3, [sp, #24]
 800cab0:	4319      	orrs	r1, r3
 800cab2:	d110      	bne.n	800cad6 <_dtoa_r+0xa7e>
 800cab4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cab8:	d029      	beq.n	800cb0e <_dtoa_r+0xab6>
 800caba:	9b05      	ldr	r3, [sp, #20]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	dd02      	ble.n	800cac6 <_dtoa_r+0xa6e>
 800cac0:	9b02      	ldr	r3, [sp, #8]
 800cac2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	f883 9000 	strb.w	r9, [r3]
 800cacc:	e774      	b.n	800c9b8 <_dtoa_r+0x960>
 800cace:	4638      	mov	r0, r7
 800cad0:	e7ba      	b.n	800ca48 <_dtoa_r+0x9f0>
 800cad2:	2201      	movs	r2, #1
 800cad4:	e7e1      	b.n	800ca9a <_dtoa_r+0xa42>
 800cad6:	9b05      	ldr	r3, [sp, #20]
 800cad8:	2b00      	cmp	r3, #0
 800cada:	db04      	blt.n	800cae6 <_dtoa_r+0xa8e>
 800cadc:	9907      	ldr	r1, [sp, #28]
 800cade:	430b      	orrs	r3, r1
 800cae0:	9906      	ldr	r1, [sp, #24]
 800cae2:	430b      	orrs	r3, r1
 800cae4:	d120      	bne.n	800cb28 <_dtoa_r+0xad0>
 800cae6:	2a00      	cmp	r2, #0
 800cae8:	dded      	ble.n	800cac6 <_dtoa_r+0xa6e>
 800caea:	4651      	mov	r1, sl
 800caec:	2201      	movs	r2, #1
 800caee:	4620      	mov	r0, r4
 800caf0:	f000 fbb4 	bl	800d25c <__lshift>
 800caf4:	4631      	mov	r1, r6
 800caf6:	4682      	mov	sl, r0
 800caf8:	f000 fc1c 	bl	800d334 <__mcmp>
 800cafc:	2800      	cmp	r0, #0
 800cafe:	dc03      	bgt.n	800cb08 <_dtoa_r+0xab0>
 800cb00:	d1e1      	bne.n	800cac6 <_dtoa_r+0xa6e>
 800cb02:	f019 0f01 	tst.w	r9, #1
 800cb06:	d0de      	beq.n	800cac6 <_dtoa_r+0xa6e>
 800cb08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cb0c:	d1d8      	bne.n	800cac0 <_dtoa_r+0xa68>
 800cb0e:	9a01      	ldr	r2, [sp, #4]
 800cb10:	2339      	movs	r3, #57	; 0x39
 800cb12:	7013      	strb	r3, [r2, #0]
 800cb14:	462b      	mov	r3, r5
 800cb16:	461d      	mov	r5, r3
 800cb18:	3b01      	subs	r3, #1
 800cb1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800cb1e:	2a39      	cmp	r2, #57	; 0x39
 800cb20:	d06c      	beq.n	800cbfc <_dtoa_r+0xba4>
 800cb22:	3201      	adds	r2, #1
 800cb24:	701a      	strb	r2, [r3, #0]
 800cb26:	e747      	b.n	800c9b8 <_dtoa_r+0x960>
 800cb28:	2a00      	cmp	r2, #0
 800cb2a:	dd07      	ble.n	800cb3c <_dtoa_r+0xae4>
 800cb2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800cb30:	d0ed      	beq.n	800cb0e <_dtoa_r+0xab6>
 800cb32:	9a01      	ldr	r2, [sp, #4]
 800cb34:	f109 0301 	add.w	r3, r9, #1
 800cb38:	7013      	strb	r3, [r2, #0]
 800cb3a:	e73d      	b.n	800c9b8 <_dtoa_r+0x960>
 800cb3c:	9b04      	ldr	r3, [sp, #16]
 800cb3e:	9a08      	ldr	r2, [sp, #32]
 800cb40:	f803 9c01 	strb.w	r9, [r3, #-1]
 800cb44:	4293      	cmp	r3, r2
 800cb46:	d043      	beq.n	800cbd0 <_dtoa_r+0xb78>
 800cb48:	4651      	mov	r1, sl
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	220a      	movs	r2, #10
 800cb4e:	4620      	mov	r0, r4
 800cb50:	f000 f9d6 	bl	800cf00 <__multadd>
 800cb54:	45b8      	cmp	r8, r7
 800cb56:	4682      	mov	sl, r0
 800cb58:	f04f 0300 	mov.w	r3, #0
 800cb5c:	f04f 020a 	mov.w	r2, #10
 800cb60:	4641      	mov	r1, r8
 800cb62:	4620      	mov	r0, r4
 800cb64:	d107      	bne.n	800cb76 <_dtoa_r+0xb1e>
 800cb66:	f000 f9cb 	bl	800cf00 <__multadd>
 800cb6a:	4680      	mov	r8, r0
 800cb6c:	4607      	mov	r7, r0
 800cb6e:	9b04      	ldr	r3, [sp, #16]
 800cb70:	3301      	adds	r3, #1
 800cb72:	9304      	str	r3, [sp, #16]
 800cb74:	e775      	b.n	800ca62 <_dtoa_r+0xa0a>
 800cb76:	f000 f9c3 	bl	800cf00 <__multadd>
 800cb7a:	4639      	mov	r1, r7
 800cb7c:	4680      	mov	r8, r0
 800cb7e:	2300      	movs	r3, #0
 800cb80:	220a      	movs	r2, #10
 800cb82:	4620      	mov	r0, r4
 800cb84:	f000 f9bc 	bl	800cf00 <__multadd>
 800cb88:	4607      	mov	r7, r0
 800cb8a:	e7f0      	b.n	800cb6e <_dtoa_r+0xb16>
 800cb8c:	9b04      	ldr	r3, [sp, #16]
 800cb8e:	9301      	str	r3, [sp, #4]
 800cb90:	9d00      	ldr	r5, [sp, #0]
 800cb92:	4631      	mov	r1, r6
 800cb94:	4650      	mov	r0, sl
 800cb96:	f7ff f9d6 	bl	800bf46 <quorem>
 800cb9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800cb9e:	9b00      	ldr	r3, [sp, #0]
 800cba0:	f805 9b01 	strb.w	r9, [r5], #1
 800cba4:	1aea      	subs	r2, r5, r3
 800cba6:	9b01      	ldr	r3, [sp, #4]
 800cba8:	4293      	cmp	r3, r2
 800cbaa:	dd07      	ble.n	800cbbc <_dtoa_r+0xb64>
 800cbac:	4651      	mov	r1, sl
 800cbae:	2300      	movs	r3, #0
 800cbb0:	220a      	movs	r2, #10
 800cbb2:	4620      	mov	r0, r4
 800cbb4:	f000 f9a4 	bl	800cf00 <__multadd>
 800cbb8:	4682      	mov	sl, r0
 800cbba:	e7ea      	b.n	800cb92 <_dtoa_r+0xb3a>
 800cbbc:	9b01      	ldr	r3, [sp, #4]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	bfc8      	it	gt
 800cbc2:	461d      	movgt	r5, r3
 800cbc4:	9b00      	ldr	r3, [sp, #0]
 800cbc6:	bfd8      	it	le
 800cbc8:	2501      	movle	r5, #1
 800cbca:	441d      	add	r5, r3
 800cbcc:	f04f 0800 	mov.w	r8, #0
 800cbd0:	4651      	mov	r1, sl
 800cbd2:	2201      	movs	r2, #1
 800cbd4:	4620      	mov	r0, r4
 800cbd6:	f000 fb41 	bl	800d25c <__lshift>
 800cbda:	4631      	mov	r1, r6
 800cbdc:	4682      	mov	sl, r0
 800cbde:	f000 fba9 	bl	800d334 <__mcmp>
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	dc96      	bgt.n	800cb14 <_dtoa_r+0xabc>
 800cbe6:	d102      	bne.n	800cbee <_dtoa_r+0xb96>
 800cbe8:	f019 0f01 	tst.w	r9, #1
 800cbec:	d192      	bne.n	800cb14 <_dtoa_r+0xabc>
 800cbee:	462b      	mov	r3, r5
 800cbf0:	461d      	mov	r5, r3
 800cbf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cbf6:	2a30      	cmp	r2, #48	; 0x30
 800cbf8:	d0fa      	beq.n	800cbf0 <_dtoa_r+0xb98>
 800cbfa:	e6dd      	b.n	800c9b8 <_dtoa_r+0x960>
 800cbfc:	9a00      	ldr	r2, [sp, #0]
 800cbfe:	429a      	cmp	r2, r3
 800cc00:	d189      	bne.n	800cb16 <_dtoa_r+0xabe>
 800cc02:	f10b 0b01 	add.w	fp, fp, #1
 800cc06:	2331      	movs	r3, #49	; 0x31
 800cc08:	e796      	b.n	800cb38 <_dtoa_r+0xae0>
 800cc0a:	4b0a      	ldr	r3, [pc, #40]	; (800cc34 <_dtoa_r+0xbdc>)
 800cc0c:	f7ff ba99 	b.w	800c142 <_dtoa_r+0xea>
 800cc10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	f47f aa6d 	bne.w	800c0f2 <_dtoa_r+0x9a>
 800cc18:	4b07      	ldr	r3, [pc, #28]	; (800cc38 <_dtoa_r+0xbe0>)
 800cc1a:	f7ff ba92 	b.w	800c142 <_dtoa_r+0xea>
 800cc1e:	9b01      	ldr	r3, [sp, #4]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	dcb5      	bgt.n	800cb90 <_dtoa_r+0xb38>
 800cc24:	9b07      	ldr	r3, [sp, #28]
 800cc26:	2b02      	cmp	r3, #2
 800cc28:	f73f aeb1 	bgt.w	800c98e <_dtoa_r+0x936>
 800cc2c:	e7b0      	b.n	800cb90 <_dtoa_r+0xb38>
 800cc2e:	bf00      	nop
 800cc30:	0801147c 	.word	0x0801147c
 800cc34:	080113dc 	.word	0x080113dc
 800cc38:	08011400 	.word	0x08011400

0800cc3c <_free_r>:
 800cc3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc3e:	2900      	cmp	r1, #0
 800cc40:	d044      	beq.n	800cccc <_free_r+0x90>
 800cc42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc46:	9001      	str	r0, [sp, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	f1a1 0404 	sub.w	r4, r1, #4
 800cc4e:	bfb8      	it	lt
 800cc50:	18e4      	addlt	r4, r4, r3
 800cc52:	f000 f8e7 	bl	800ce24 <__malloc_lock>
 800cc56:	4a1e      	ldr	r2, [pc, #120]	; (800ccd0 <_free_r+0x94>)
 800cc58:	9801      	ldr	r0, [sp, #4]
 800cc5a:	6813      	ldr	r3, [r2, #0]
 800cc5c:	b933      	cbnz	r3, 800cc6c <_free_r+0x30>
 800cc5e:	6063      	str	r3, [r4, #4]
 800cc60:	6014      	str	r4, [r2, #0]
 800cc62:	b003      	add	sp, #12
 800cc64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc68:	f000 b8e2 	b.w	800ce30 <__malloc_unlock>
 800cc6c:	42a3      	cmp	r3, r4
 800cc6e:	d908      	bls.n	800cc82 <_free_r+0x46>
 800cc70:	6825      	ldr	r5, [r4, #0]
 800cc72:	1961      	adds	r1, r4, r5
 800cc74:	428b      	cmp	r3, r1
 800cc76:	bf01      	itttt	eq
 800cc78:	6819      	ldreq	r1, [r3, #0]
 800cc7a:	685b      	ldreq	r3, [r3, #4]
 800cc7c:	1949      	addeq	r1, r1, r5
 800cc7e:	6021      	streq	r1, [r4, #0]
 800cc80:	e7ed      	b.n	800cc5e <_free_r+0x22>
 800cc82:	461a      	mov	r2, r3
 800cc84:	685b      	ldr	r3, [r3, #4]
 800cc86:	b10b      	cbz	r3, 800cc8c <_free_r+0x50>
 800cc88:	42a3      	cmp	r3, r4
 800cc8a:	d9fa      	bls.n	800cc82 <_free_r+0x46>
 800cc8c:	6811      	ldr	r1, [r2, #0]
 800cc8e:	1855      	adds	r5, r2, r1
 800cc90:	42a5      	cmp	r5, r4
 800cc92:	d10b      	bne.n	800ccac <_free_r+0x70>
 800cc94:	6824      	ldr	r4, [r4, #0]
 800cc96:	4421      	add	r1, r4
 800cc98:	1854      	adds	r4, r2, r1
 800cc9a:	42a3      	cmp	r3, r4
 800cc9c:	6011      	str	r1, [r2, #0]
 800cc9e:	d1e0      	bne.n	800cc62 <_free_r+0x26>
 800cca0:	681c      	ldr	r4, [r3, #0]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	6053      	str	r3, [r2, #4]
 800cca6:	440c      	add	r4, r1
 800cca8:	6014      	str	r4, [r2, #0]
 800ccaa:	e7da      	b.n	800cc62 <_free_r+0x26>
 800ccac:	d902      	bls.n	800ccb4 <_free_r+0x78>
 800ccae:	230c      	movs	r3, #12
 800ccb0:	6003      	str	r3, [r0, #0]
 800ccb2:	e7d6      	b.n	800cc62 <_free_r+0x26>
 800ccb4:	6825      	ldr	r5, [r4, #0]
 800ccb6:	1961      	adds	r1, r4, r5
 800ccb8:	428b      	cmp	r3, r1
 800ccba:	bf04      	itt	eq
 800ccbc:	6819      	ldreq	r1, [r3, #0]
 800ccbe:	685b      	ldreq	r3, [r3, #4]
 800ccc0:	6063      	str	r3, [r4, #4]
 800ccc2:	bf04      	itt	eq
 800ccc4:	1949      	addeq	r1, r1, r5
 800ccc6:	6021      	streq	r1, [r4, #0]
 800ccc8:	6054      	str	r4, [r2, #4]
 800ccca:	e7ca      	b.n	800cc62 <_free_r+0x26>
 800cccc:	b003      	add	sp, #12
 800ccce:	bd30      	pop	{r4, r5, pc}
 800ccd0:	20006754 	.word	0x20006754

0800ccd4 <malloc>:
 800ccd4:	4b02      	ldr	r3, [pc, #8]	; (800cce0 <malloc+0xc>)
 800ccd6:	4601      	mov	r1, r0
 800ccd8:	6818      	ldr	r0, [r3, #0]
 800ccda:	f000 b823 	b.w	800cd24 <_malloc_r>
 800ccde:	bf00      	nop
 800cce0:	20000110 	.word	0x20000110

0800cce4 <sbrk_aligned>:
 800cce4:	b570      	push	{r4, r5, r6, lr}
 800cce6:	4e0e      	ldr	r6, [pc, #56]	; (800cd20 <sbrk_aligned+0x3c>)
 800cce8:	460c      	mov	r4, r1
 800ccea:	6831      	ldr	r1, [r6, #0]
 800ccec:	4605      	mov	r5, r0
 800ccee:	b911      	cbnz	r1, 800ccf6 <sbrk_aligned+0x12>
 800ccf0:	f000 fe40 	bl	800d974 <_sbrk_r>
 800ccf4:	6030      	str	r0, [r6, #0]
 800ccf6:	4621      	mov	r1, r4
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	f000 fe3b 	bl	800d974 <_sbrk_r>
 800ccfe:	1c43      	adds	r3, r0, #1
 800cd00:	d00a      	beq.n	800cd18 <sbrk_aligned+0x34>
 800cd02:	1cc4      	adds	r4, r0, #3
 800cd04:	f024 0403 	bic.w	r4, r4, #3
 800cd08:	42a0      	cmp	r0, r4
 800cd0a:	d007      	beq.n	800cd1c <sbrk_aligned+0x38>
 800cd0c:	1a21      	subs	r1, r4, r0
 800cd0e:	4628      	mov	r0, r5
 800cd10:	f000 fe30 	bl	800d974 <_sbrk_r>
 800cd14:	3001      	adds	r0, #1
 800cd16:	d101      	bne.n	800cd1c <sbrk_aligned+0x38>
 800cd18:	f04f 34ff 	mov.w	r4, #4294967295
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	bd70      	pop	{r4, r5, r6, pc}
 800cd20:	20006758 	.word	0x20006758

0800cd24 <_malloc_r>:
 800cd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd28:	1ccd      	adds	r5, r1, #3
 800cd2a:	f025 0503 	bic.w	r5, r5, #3
 800cd2e:	3508      	adds	r5, #8
 800cd30:	2d0c      	cmp	r5, #12
 800cd32:	bf38      	it	cc
 800cd34:	250c      	movcc	r5, #12
 800cd36:	2d00      	cmp	r5, #0
 800cd38:	4607      	mov	r7, r0
 800cd3a:	db01      	blt.n	800cd40 <_malloc_r+0x1c>
 800cd3c:	42a9      	cmp	r1, r5
 800cd3e:	d905      	bls.n	800cd4c <_malloc_r+0x28>
 800cd40:	230c      	movs	r3, #12
 800cd42:	603b      	str	r3, [r7, #0]
 800cd44:	2600      	movs	r6, #0
 800cd46:	4630      	mov	r0, r6
 800cd48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce20 <_malloc_r+0xfc>
 800cd50:	f000 f868 	bl	800ce24 <__malloc_lock>
 800cd54:	f8d8 3000 	ldr.w	r3, [r8]
 800cd58:	461c      	mov	r4, r3
 800cd5a:	bb5c      	cbnz	r4, 800cdb4 <_malloc_r+0x90>
 800cd5c:	4629      	mov	r1, r5
 800cd5e:	4638      	mov	r0, r7
 800cd60:	f7ff ffc0 	bl	800cce4 <sbrk_aligned>
 800cd64:	1c43      	adds	r3, r0, #1
 800cd66:	4604      	mov	r4, r0
 800cd68:	d155      	bne.n	800ce16 <_malloc_r+0xf2>
 800cd6a:	f8d8 4000 	ldr.w	r4, [r8]
 800cd6e:	4626      	mov	r6, r4
 800cd70:	2e00      	cmp	r6, #0
 800cd72:	d145      	bne.n	800ce00 <_malloc_r+0xdc>
 800cd74:	2c00      	cmp	r4, #0
 800cd76:	d048      	beq.n	800ce0a <_malloc_r+0xe6>
 800cd78:	6823      	ldr	r3, [r4, #0]
 800cd7a:	4631      	mov	r1, r6
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	eb04 0903 	add.w	r9, r4, r3
 800cd82:	f000 fdf7 	bl	800d974 <_sbrk_r>
 800cd86:	4581      	cmp	r9, r0
 800cd88:	d13f      	bne.n	800ce0a <_malloc_r+0xe6>
 800cd8a:	6821      	ldr	r1, [r4, #0]
 800cd8c:	1a6d      	subs	r5, r5, r1
 800cd8e:	4629      	mov	r1, r5
 800cd90:	4638      	mov	r0, r7
 800cd92:	f7ff ffa7 	bl	800cce4 <sbrk_aligned>
 800cd96:	3001      	adds	r0, #1
 800cd98:	d037      	beq.n	800ce0a <_malloc_r+0xe6>
 800cd9a:	6823      	ldr	r3, [r4, #0]
 800cd9c:	442b      	add	r3, r5
 800cd9e:	6023      	str	r3, [r4, #0]
 800cda0:	f8d8 3000 	ldr.w	r3, [r8]
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	d038      	beq.n	800ce1a <_malloc_r+0xf6>
 800cda8:	685a      	ldr	r2, [r3, #4]
 800cdaa:	42a2      	cmp	r2, r4
 800cdac:	d12b      	bne.n	800ce06 <_malloc_r+0xe2>
 800cdae:	2200      	movs	r2, #0
 800cdb0:	605a      	str	r2, [r3, #4]
 800cdb2:	e00f      	b.n	800cdd4 <_malloc_r+0xb0>
 800cdb4:	6822      	ldr	r2, [r4, #0]
 800cdb6:	1b52      	subs	r2, r2, r5
 800cdb8:	d41f      	bmi.n	800cdfa <_malloc_r+0xd6>
 800cdba:	2a0b      	cmp	r2, #11
 800cdbc:	d917      	bls.n	800cdee <_malloc_r+0xca>
 800cdbe:	1961      	adds	r1, r4, r5
 800cdc0:	42a3      	cmp	r3, r4
 800cdc2:	6025      	str	r5, [r4, #0]
 800cdc4:	bf18      	it	ne
 800cdc6:	6059      	strne	r1, [r3, #4]
 800cdc8:	6863      	ldr	r3, [r4, #4]
 800cdca:	bf08      	it	eq
 800cdcc:	f8c8 1000 	streq.w	r1, [r8]
 800cdd0:	5162      	str	r2, [r4, r5]
 800cdd2:	604b      	str	r3, [r1, #4]
 800cdd4:	4638      	mov	r0, r7
 800cdd6:	f104 060b 	add.w	r6, r4, #11
 800cdda:	f000 f829 	bl	800ce30 <__malloc_unlock>
 800cdde:	f026 0607 	bic.w	r6, r6, #7
 800cde2:	1d23      	adds	r3, r4, #4
 800cde4:	1af2      	subs	r2, r6, r3
 800cde6:	d0ae      	beq.n	800cd46 <_malloc_r+0x22>
 800cde8:	1b9b      	subs	r3, r3, r6
 800cdea:	50a3      	str	r3, [r4, r2]
 800cdec:	e7ab      	b.n	800cd46 <_malloc_r+0x22>
 800cdee:	42a3      	cmp	r3, r4
 800cdf0:	6862      	ldr	r2, [r4, #4]
 800cdf2:	d1dd      	bne.n	800cdb0 <_malloc_r+0x8c>
 800cdf4:	f8c8 2000 	str.w	r2, [r8]
 800cdf8:	e7ec      	b.n	800cdd4 <_malloc_r+0xb0>
 800cdfa:	4623      	mov	r3, r4
 800cdfc:	6864      	ldr	r4, [r4, #4]
 800cdfe:	e7ac      	b.n	800cd5a <_malloc_r+0x36>
 800ce00:	4634      	mov	r4, r6
 800ce02:	6876      	ldr	r6, [r6, #4]
 800ce04:	e7b4      	b.n	800cd70 <_malloc_r+0x4c>
 800ce06:	4613      	mov	r3, r2
 800ce08:	e7cc      	b.n	800cda4 <_malloc_r+0x80>
 800ce0a:	230c      	movs	r3, #12
 800ce0c:	603b      	str	r3, [r7, #0]
 800ce0e:	4638      	mov	r0, r7
 800ce10:	f000 f80e 	bl	800ce30 <__malloc_unlock>
 800ce14:	e797      	b.n	800cd46 <_malloc_r+0x22>
 800ce16:	6025      	str	r5, [r4, #0]
 800ce18:	e7dc      	b.n	800cdd4 <_malloc_r+0xb0>
 800ce1a:	605b      	str	r3, [r3, #4]
 800ce1c:	deff      	udf	#255	; 0xff
 800ce1e:	bf00      	nop
 800ce20:	20006754 	.word	0x20006754

0800ce24 <__malloc_lock>:
 800ce24:	4801      	ldr	r0, [pc, #4]	; (800ce2c <__malloc_lock+0x8>)
 800ce26:	f7ff b88c 	b.w	800bf42 <__retarget_lock_acquire_recursive>
 800ce2a:	bf00      	nop
 800ce2c:	20006750 	.word	0x20006750

0800ce30 <__malloc_unlock>:
 800ce30:	4801      	ldr	r0, [pc, #4]	; (800ce38 <__malloc_unlock+0x8>)
 800ce32:	f7ff b887 	b.w	800bf44 <__retarget_lock_release_recursive>
 800ce36:	bf00      	nop
 800ce38:	20006750 	.word	0x20006750

0800ce3c <_Balloc>:
 800ce3c:	b570      	push	{r4, r5, r6, lr}
 800ce3e:	69c6      	ldr	r6, [r0, #28]
 800ce40:	4604      	mov	r4, r0
 800ce42:	460d      	mov	r5, r1
 800ce44:	b976      	cbnz	r6, 800ce64 <_Balloc+0x28>
 800ce46:	2010      	movs	r0, #16
 800ce48:	f7ff ff44 	bl	800ccd4 <malloc>
 800ce4c:	4602      	mov	r2, r0
 800ce4e:	61e0      	str	r0, [r4, #28]
 800ce50:	b920      	cbnz	r0, 800ce5c <_Balloc+0x20>
 800ce52:	4b18      	ldr	r3, [pc, #96]	; (800ceb4 <_Balloc+0x78>)
 800ce54:	4818      	ldr	r0, [pc, #96]	; (800ceb8 <_Balloc+0x7c>)
 800ce56:	216b      	movs	r1, #107	; 0x6b
 800ce58:	f000 fdaa 	bl	800d9b0 <__assert_func>
 800ce5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ce60:	6006      	str	r6, [r0, #0]
 800ce62:	60c6      	str	r6, [r0, #12]
 800ce64:	69e6      	ldr	r6, [r4, #28]
 800ce66:	68f3      	ldr	r3, [r6, #12]
 800ce68:	b183      	cbz	r3, 800ce8c <_Balloc+0x50>
 800ce6a:	69e3      	ldr	r3, [r4, #28]
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ce72:	b9b8      	cbnz	r0, 800cea4 <_Balloc+0x68>
 800ce74:	2101      	movs	r1, #1
 800ce76:	fa01 f605 	lsl.w	r6, r1, r5
 800ce7a:	1d72      	adds	r2, r6, #5
 800ce7c:	0092      	lsls	r2, r2, #2
 800ce7e:	4620      	mov	r0, r4
 800ce80:	f000 fdb4 	bl	800d9ec <_calloc_r>
 800ce84:	b160      	cbz	r0, 800cea0 <_Balloc+0x64>
 800ce86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ce8a:	e00e      	b.n	800ceaa <_Balloc+0x6e>
 800ce8c:	2221      	movs	r2, #33	; 0x21
 800ce8e:	2104      	movs	r1, #4
 800ce90:	4620      	mov	r0, r4
 800ce92:	f000 fdab 	bl	800d9ec <_calloc_r>
 800ce96:	69e3      	ldr	r3, [r4, #28]
 800ce98:	60f0      	str	r0, [r6, #12]
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d1e4      	bne.n	800ce6a <_Balloc+0x2e>
 800cea0:	2000      	movs	r0, #0
 800cea2:	bd70      	pop	{r4, r5, r6, pc}
 800cea4:	6802      	ldr	r2, [r0, #0]
 800cea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ceaa:	2300      	movs	r3, #0
 800ceac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ceb0:	e7f7      	b.n	800cea2 <_Balloc+0x66>
 800ceb2:	bf00      	nop
 800ceb4:	0801140d 	.word	0x0801140d
 800ceb8:	0801148d 	.word	0x0801148d

0800cebc <_Bfree>:
 800cebc:	b570      	push	{r4, r5, r6, lr}
 800cebe:	69c6      	ldr	r6, [r0, #28]
 800cec0:	4605      	mov	r5, r0
 800cec2:	460c      	mov	r4, r1
 800cec4:	b976      	cbnz	r6, 800cee4 <_Bfree+0x28>
 800cec6:	2010      	movs	r0, #16
 800cec8:	f7ff ff04 	bl	800ccd4 <malloc>
 800cecc:	4602      	mov	r2, r0
 800cece:	61e8      	str	r0, [r5, #28]
 800ced0:	b920      	cbnz	r0, 800cedc <_Bfree+0x20>
 800ced2:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <_Bfree+0x3c>)
 800ced4:	4809      	ldr	r0, [pc, #36]	; (800cefc <_Bfree+0x40>)
 800ced6:	218f      	movs	r1, #143	; 0x8f
 800ced8:	f000 fd6a 	bl	800d9b0 <__assert_func>
 800cedc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cee0:	6006      	str	r6, [r0, #0]
 800cee2:	60c6      	str	r6, [r0, #12]
 800cee4:	b13c      	cbz	r4, 800cef6 <_Bfree+0x3a>
 800cee6:	69eb      	ldr	r3, [r5, #28]
 800cee8:	6862      	ldr	r2, [r4, #4]
 800ceea:	68db      	ldr	r3, [r3, #12]
 800ceec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cef0:	6021      	str	r1, [r4, #0]
 800cef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cef6:	bd70      	pop	{r4, r5, r6, pc}
 800cef8:	0801140d 	.word	0x0801140d
 800cefc:	0801148d 	.word	0x0801148d

0800cf00 <__multadd>:
 800cf00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf04:	690d      	ldr	r5, [r1, #16]
 800cf06:	4607      	mov	r7, r0
 800cf08:	460c      	mov	r4, r1
 800cf0a:	461e      	mov	r6, r3
 800cf0c:	f101 0c14 	add.w	ip, r1, #20
 800cf10:	2000      	movs	r0, #0
 800cf12:	f8dc 3000 	ldr.w	r3, [ip]
 800cf16:	b299      	uxth	r1, r3
 800cf18:	fb02 6101 	mla	r1, r2, r1, r6
 800cf1c:	0c1e      	lsrs	r6, r3, #16
 800cf1e:	0c0b      	lsrs	r3, r1, #16
 800cf20:	fb02 3306 	mla	r3, r2, r6, r3
 800cf24:	b289      	uxth	r1, r1
 800cf26:	3001      	adds	r0, #1
 800cf28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cf2c:	4285      	cmp	r5, r0
 800cf2e:	f84c 1b04 	str.w	r1, [ip], #4
 800cf32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cf36:	dcec      	bgt.n	800cf12 <__multadd+0x12>
 800cf38:	b30e      	cbz	r6, 800cf7e <__multadd+0x7e>
 800cf3a:	68a3      	ldr	r3, [r4, #8]
 800cf3c:	42ab      	cmp	r3, r5
 800cf3e:	dc19      	bgt.n	800cf74 <__multadd+0x74>
 800cf40:	6861      	ldr	r1, [r4, #4]
 800cf42:	4638      	mov	r0, r7
 800cf44:	3101      	adds	r1, #1
 800cf46:	f7ff ff79 	bl	800ce3c <_Balloc>
 800cf4a:	4680      	mov	r8, r0
 800cf4c:	b928      	cbnz	r0, 800cf5a <__multadd+0x5a>
 800cf4e:	4602      	mov	r2, r0
 800cf50:	4b0c      	ldr	r3, [pc, #48]	; (800cf84 <__multadd+0x84>)
 800cf52:	480d      	ldr	r0, [pc, #52]	; (800cf88 <__multadd+0x88>)
 800cf54:	21ba      	movs	r1, #186	; 0xba
 800cf56:	f000 fd2b 	bl	800d9b0 <__assert_func>
 800cf5a:	6922      	ldr	r2, [r4, #16]
 800cf5c:	3202      	adds	r2, #2
 800cf5e:	f104 010c 	add.w	r1, r4, #12
 800cf62:	0092      	lsls	r2, r2, #2
 800cf64:	300c      	adds	r0, #12
 800cf66:	f000 fd15 	bl	800d994 <memcpy>
 800cf6a:	4621      	mov	r1, r4
 800cf6c:	4638      	mov	r0, r7
 800cf6e:	f7ff ffa5 	bl	800cebc <_Bfree>
 800cf72:	4644      	mov	r4, r8
 800cf74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cf78:	3501      	adds	r5, #1
 800cf7a:	615e      	str	r6, [r3, #20]
 800cf7c:	6125      	str	r5, [r4, #16]
 800cf7e:	4620      	mov	r0, r4
 800cf80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf84:	0801147c 	.word	0x0801147c
 800cf88:	0801148d 	.word	0x0801148d

0800cf8c <__hi0bits>:
 800cf8c:	0c03      	lsrs	r3, r0, #16
 800cf8e:	041b      	lsls	r3, r3, #16
 800cf90:	b9d3      	cbnz	r3, 800cfc8 <__hi0bits+0x3c>
 800cf92:	0400      	lsls	r0, r0, #16
 800cf94:	2310      	movs	r3, #16
 800cf96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cf9a:	bf04      	itt	eq
 800cf9c:	0200      	lsleq	r0, r0, #8
 800cf9e:	3308      	addeq	r3, #8
 800cfa0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cfa4:	bf04      	itt	eq
 800cfa6:	0100      	lsleq	r0, r0, #4
 800cfa8:	3304      	addeq	r3, #4
 800cfaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cfae:	bf04      	itt	eq
 800cfb0:	0080      	lsleq	r0, r0, #2
 800cfb2:	3302      	addeq	r3, #2
 800cfb4:	2800      	cmp	r0, #0
 800cfb6:	db05      	blt.n	800cfc4 <__hi0bits+0x38>
 800cfb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cfbc:	f103 0301 	add.w	r3, r3, #1
 800cfc0:	bf08      	it	eq
 800cfc2:	2320      	moveq	r3, #32
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	4770      	bx	lr
 800cfc8:	2300      	movs	r3, #0
 800cfca:	e7e4      	b.n	800cf96 <__hi0bits+0xa>

0800cfcc <__lo0bits>:
 800cfcc:	6803      	ldr	r3, [r0, #0]
 800cfce:	f013 0207 	ands.w	r2, r3, #7
 800cfd2:	d00c      	beq.n	800cfee <__lo0bits+0x22>
 800cfd4:	07d9      	lsls	r1, r3, #31
 800cfd6:	d422      	bmi.n	800d01e <__lo0bits+0x52>
 800cfd8:	079a      	lsls	r2, r3, #30
 800cfda:	bf49      	itett	mi
 800cfdc:	085b      	lsrmi	r3, r3, #1
 800cfde:	089b      	lsrpl	r3, r3, #2
 800cfe0:	6003      	strmi	r3, [r0, #0]
 800cfe2:	2201      	movmi	r2, #1
 800cfe4:	bf5c      	itt	pl
 800cfe6:	6003      	strpl	r3, [r0, #0]
 800cfe8:	2202      	movpl	r2, #2
 800cfea:	4610      	mov	r0, r2
 800cfec:	4770      	bx	lr
 800cfee:	b299      	uxth	r1, r3
 800cff0:	b909      	cbnz	r1, 800cff6 <__lo0bits+0x2a>
 800cff2:	0c1b      	lsrs	r3, r3, #16
 800cff4:	2210      	movs	r2, #16
 800cff6:	b2d9      	uxtb	r1, r3
 800cff8:	b909      	cbnz	r1, 800cffe <__lo0bits+0x32>
 800cffa:	3208      	adds	r2, #8
 800cffc:	0a1b      	lsrs	r3, r3, #8
 800cffe:	0719      	lsls	r1, r3, #28
 800d000:	bf04      	itt	eq
 800d002:	091b      	lsreq	r3, r3, #4
 800d004:	3204      	addeq	r2, #4
 800d006:	0799      	lsls	r1, r3, #30
 800d008:	bf04      	itt	eq
 800d00a:	089b      	lsreq	r3, r3, #2
 800d00c:	3202      	addeq	r2, #2
 800d00e:	07d9      	lsls	r1, r3, #31
 800d010:	d403      	bmi.n	800d01a <__lo0bits+0x4e>
 800d012:	085b      	lsrs	r3, r3, #1
 800d014:	f102 0201 	add.w	r2, r2, #1
 800d018:	d003      	beq.n	800d022 <__lo0bits+0x56>
 800d01a:	6003      	str	r3, [r0, #0]
 800d01c:	e7e5      	b.n	800cfea <__lo0bits+0x1e>
 800d01e:	2200      	movs	r2, #0
 800d020:	e7e3      	b.n	800cfea <__lo0bits+0x1e>
 800d022:	2220      	movs	r2, #32
 800d024:	e7e1      	b.n	800cfea <__lo0bits+0x1e>
	...

0800d028 <__i2b>:
 800d028:	b510      	push	{r4, lr}
 800d02a:	460c      	mov	r4, r1
 800d02c:	2101      	movs	r1, #1
 800d02e:	f7ff ff05 	bl	800ce3c <_Balloc>
 800d032:	4602      	mov	r2, r0
 800d034:	b928      	cbnz	r0, 800d042 <__i2b+0x1a>
 800d036:	4b05      	ldr	r3, [pc, #20]	; (800d04c <__i2b+0x24>)
 800d038:	4805      	ldr	r0, [pc, #20]	; (800d050 <__i2b+0x28>)
 800d03a:	f240 1145 	movw	r1, #325	; 0x145
 800d03e:	f000 fcb7 	bl	800d9b0 <__assert_func>
 800d042:	2301      	movs	r3, #1
 800d044:	6144      	str	r4, [r0, #20]
 800d046:	6103      	str	r3, [r0, #16]
 800d048:	bd10      	pop	{r4, pc}
 800d04a:	bf00      	nop
 800d04c:	0801147c 	.word	0x0801147c
 800d050:	0801148d 	.word	0x0801148d

0800d054 <__multiply>:
 800d054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d058:	4691      	mov	r9, r2
 800d05a:	690a      	ldr	r2, [r1, #16]
 800d05c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d060:	429a      	cmp	r2, r3
 800d062:	bfb8      	it	lt
 800d064:	460b      	movlt	r3, r1
 800d066:	460c      	mov	r4, r1
 800d068:	bfbc      	itt	lt
 800d06a:	464c      	movlt	r4, r9
 800d06c:	4699      	movlt	r9, r3
 800d06e:	6927      	ldr	r7, [r4, #16]
 800d070:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d074:	68a3      	ldr	r3, [r4, #8]
 800d076:	6861      	ldr	r1, [r4, #4]
 800d078:	eb07 060a 	add.w	r6, r7, sl
 800d07c:	42b3      	cmp	r3, r6
 800d07e:	b085      	sub	sp, #20
 800d080:	bfb8      	it	lt
 800d082:	3101      	addlt	r1, #1
 800d084:	f7ff feda 	bl	800ce3c <_Balloc>
 800d088:	b930      	cbnz	r0, 800d098 <__multiply+0x44>
 800d08a:	4602      	mov	r2, r0
 800d08c:	4b44      	ldr	r3, [pc, #272]	; (800d1a0 <__multiply+0x14c>)
 800d08e:	4845      	ldr	r0, [pc, #276]	; (800d1a4 <__multiply+0x150>)
 800d090:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800d094:	f000 fc8c 	bl	800d9b0 <__assert_func>
 800d098:	f100 0514 	add.w	r5, r0, #20
 800d09c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d0a0:	462b      	mov	r3, r5
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	4543      	cmp	r3, r8
 800d0a6:	d321      	bcc.n	800d0ec <__multiply+0x98>
 800d0a8:	f104 0314 	add.w	r3, r4, #20
 800d0ac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d0b0:	f109 0314 	add.w	r3, r9, #20
 800d0b4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d0b8:	9202      	str	r2, [sp, #8]
 800d0ba:	1b3a      	subs	r2, r7, r4
 800d0bc:	3a15      	subs	r2, #21
 800d0be:	f022 0203 	bic.w	r2, r2, #3
 800d0c2:	3204      	adds	r2, #4
 800d0c4:	f104 0115 	add.w	r1, r4, #21
 800d0c8:	428f      	cmp	r7, r1
 800d0ca:	bf38      	it	cc
 800d0cc:	2204      	movcc	r2, #4
 800d0ce:	9201      	str	r2, [sp, #4]
 800d0d0:	9a02      	ldr	r2, [sp, #8]
 800d0d2:	9303      	str	r3, [sp, #12]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d80c      	bhi.n	800d0f2 <__multiply+0x9e>
 800d0d8:	2e00      	cmp	r6, #0
 800d0da:	dd03      	ble.n	800d0e4 <__multiply+0x90>
 800d0dc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d05b      	beq.n	800d19c <__multiply+0x148>
 800d0e4:	6106      	str	r6, [r0, #16]
 800d0e6:	b005      	add	sp, #20
 800d0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ec:	f843 2b04 	str.w	r2, [r3], #4
 800d0f0:	e7d8      	b.n	800d0a4 <__multiply+0x50>
 800d0f2:	f8b3 a000 	ldrh.w	sl, [r3]
 800d0f6:	f1ba 0f00 	cmp.w	sl, #0
 800d0fa:	d024      	beq.n	800d146 <__multiply+0xf2>
 800d0fc:	f104 0e14 	add.w	lr, r4, #20
 800d100:	46a9      	mov	r9, r5
 800d102:	f04f 0c00 	mov.w	ip, #0
 800d106:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d10a:	f8d9 1000 	ldr.w	r1, [r9]
 800d10e:	fa1f fb82 	uxth.w	fp, r2
 800d112:	b289      	uxth	r1, r1
 800d114:	fb0a 110b 	mla	r1, sl, fp, r1
 800d118:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d11c:	f8d9 2000 	ldr.w	r2, [r9]
 800d120:	4461      	add	r1, ip
 800d122:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d126:	fb0a c20b 	mla	r2, sl, fp, ip
 800d12a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d12e:	b289      	uxth	r1, r1
 800d130:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d134:	4577      	cmp	r7, lr
 800d136:	f849 1b04 	str.w	r1, [r9], #4
 800d13a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d13e:	d8e2      	bhi.n	800d106 <__multiply+0xb2>
 800d140:	9a01      	ldr	r2, [sp, #4]
 800d142:	f845 c002 	str.w	ip, [r5, r2]
 800d146:	9a03      	ldr	r2, [sp, #12]
 800d148:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d14c:	3304      	adds	r3, #4
 800d14e:	f1b9 0f00 	cmp.w	r9, #0
 800d152:	d021      	beq.n	800d198 <__multiply+0x144>
 800d154:	6829      	ldr	r1, [r5, #0]
 800d156:	f104 0c14 	add.w	ip, r4, #20
 800d15a:	46ae      	mov	lr, r5
 800d15c:	f04f 0a00 	mov.w	sl, #0
 800d160:	f8bc b000 	ldrh.w	fp, [ip]
 800d164:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d168:	fb09 220b 	mla	r2, r9, fp, r2
 800d16c:	4452      	add	r2, sl
 800d16e:	b289      	uxth	r1, r1
 800d170:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d174:	f84e 1b04 	str.w	r1, [lr], #4
 800d178:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d17c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d180:	f8be 1000 	ldrh.w	r1, [lr]
 800d184:	fb09 110a 	mla	r1, r9, sl, r1
 800d188:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800d18c:	4567      	cmp	r7, ip
 800d18e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d192:	d8e5      	bhi.n	800d160 <__multiply+0x10c>
 800d194:	9a01      	ldr	r2, [sp, #4]
 800d196:	50a9      	str	r1, [r5, r2]
 800d198:	3504      	adds	r5, #4
 800d19a:	e799      	b.n	800d0d0 <__multiply+0x7c>
 800d19c:	3e01      	subs	r6, #1
 800d19e:	e79b      	b.n	800d0d8 <__multiply+0x84>
 800d1a0:	0801147c 	.word	0x0801147c
 800d1a4:	0801148d 	.word	0x0801148d

0800d1a8 <__pow5mult>:
 800d1a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1ac:	4615      	mov	r5, r2
 800d1ae:	f012 0203 	ands.w	r2, r2, #3
 800d1b2:	4606      	mov	r6, r0
 800d1b4:	460f      	mov	r7, r1
 800d1b6:	d007      	beq.n	800d1c8 <__pow5mult+0x20>
 800d1b8:	4c25      	ldr	r4, [pc, #148]	; (800d250 <__pow5mult+0xa8>)
 800d1ba:	3a01      	subs	r2, #1
 800d1bc:	2300      	movs	r3, #0
 800d1be:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d1c2:	f7ff fe9d 	bl	800cf00 <__multadd>
 800d1c6:	4607      	mov	r7, r0
 800d1c8:	10ad      	asrs	r5, r5, #2
 800d1ca:	d03d      	beq.n	800d248 <__pow5mult+0xa0>
 800d1cc:	69f4      	ldr	r4, [r6, #28]
 800d1ce:	b97c      	cbnz	r4, 800d1f0 <__pow5mult+0x48>
 800d1d0:	2010      	movs	r0, #16
 800d1d2:	f7ff fd7f 	bl	800ccd4 <malloc>
 800d1d6:	4602      	mov	r2, r0
 800d1d8:	61f0      	str	r0, [r6, #28]
 800d1da:	b928      	cbnz	r0, 800d1e8 <__pow5mult+0x40>
 800d1dc:	4b1d      	ldr	r3, [pc, #116]	; (800d254 <__pow5mult+0xac>)
 800d1de:	481e      	ldr	r0, [pc, #120]	; (800d258 <__pow5mult+0xb0>)
 800d1e0:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d1e4:	f000 fbe4 	bl	800d9b0 <__assert_func>
 800d1e8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d1ec:	6004      	str	r4, [r0, #0]
 800d1ee:	60c4      	str	r4, [r0, #12]
 800d1f0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d1f4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d1f8:	b94c      	cbnz	r4, 800d20e <__pow5mult+0x66>
 800d1fa:	f240 2171 	movw	r1, #625	; 0x271
 800d1fe:	4630      	mov	r0, r6
 800d200:	f7ff ff12 	bl	800d028 <__i2b>
 800d204:	2300      	movs	r3, #0
 800d206:	f8c8 0008 	str.w	r0, [r8, #8]
 800d20a:	4604      	mov	r4, r0
 800d20c:	6003      	str	r3, [r0, #0]
 800d20e:	f04f 0900 	mov.w	r9, #0
 800d212:	07eb      	lsls	r3, r5, #31
 800d214:	d50a      	bpl.n	800d22c <__pow5mult+0x84>
 800d216:	4639      	mov	r1, r7
 800d218:	4622      	mov	r2, r4
 800d21a:	4630      	mov	r0, r6
 800d21c:	f7ff ff1a 	bl	800d054 <__multiply>
 800d220:	4639      	mov	r1, r7
 800d222:	4680      	mov	r8, r0
 800d224:	4630      	mov	r0, r6
 800d226:	f7ff fe49 	bl	800cebc <_Bfree>
 800d22a:	4647      	mov	r7, r8
 800d22c:	106d      	asrs	r5, r5, #1
 800d22e:	d00b      	beq.n	800d248 <__pow5mult+0xa0>
 800d230:	6820      	ldr	r0, [r4, #0]
 800d232:	b938      	cbnz	r0, 800d244 <__pow5mult+0x9c>
 800d234:	4622      	mov	r2, r4
 800d236:	4621      	mov	r1, r4
 800d238:	4630      	mov	r0, r6
 800d23a:	f7ff ff0b 	bl	800d054 <__multiply>
 800d23e:	6020      	str	r0, [r4, #0]
 800d240:	f8c0 9000 	str.w	r9, [r0]
 800d244:	4604      	mov	r4, r0
 800d246:	e7e4      	b.n	800d212 <__pow5mult+0x6a>
 800d248:	4638      	mov	r0, r7
 800d24a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d24e:	bf00      	nop
 800d250:	080115d8 	.word	0x080115d8
 800d254:	0801140d 	.word	0x0801140d
 800d258:	0801148d 	.word	0x0801148d

0800d25c <__lshift>:
 800d25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d260:	460c      	mov	r4, r1
 800d262:	6849      	ldr	r1, [r1, #4]
 800d264:	6923      	ldr	r3, [r4, #16]
 800d266:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d26a:	68a3      	ldr	r3, [r4, #8]
 800d26c:	4607      	mov	r7, r0
 800d26e:	4691      	mov	r9, r2
 800d270:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d274:	f108 0601 	add.w	r6, r8, #1
 800d278:	42b3      	cmp	r3, r6
 800d27a:	db0b      	blt.n	800d294 <__lshift+0x38>
 800d27c:	4638      	mov	r0, r7
 800d27e:	f7ff fddd 	bl	800ce3c <_Balloc>
 800d282:	4605      	mov	r5, r0
 800d284:	b948      	cbnz	r0, 800d29a <__lshift+0x3e>
 800d286:	4602      	mov	r2, r0
 800d288:	4b28      	ldr	r3, [pc, #160]	; (800d32c <__lshift+0xd0>)
 800d28a:	4829      	ldr	r0, [pc, #164]	; (800d330 <__lshift+0xd4>)
 800d28c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d290:	f000 fb8e 	bl	800d9b0 <__assert_func>
 800d294:	3101      	adds	r1, #1
 800d296:	005b      	lsls	r3, r3, #1
 800d298:	e7ee      	b.n	800d278 <__lshift+0x1c>
 800d29a:	2300      	movs	r3, #0
 800d29c:	f100 0114 	add.w	r1, r0, #20
 800d2a0:	f100 0210 	add.w	r2, r0, #16
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	4553      	cmp	r3, sl
 800d2a8:	db33      	blt.n	800d312 <__lshift+0xb6>
 800d2aa:	6920      	ldr	r0, [r4, #16]
 800d2ac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2b0:	f104 0314 	add.w	r3, r4, #20
 800d2b4:	f019 091f 	ands.w	r9, r9, #31
 800d2b8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2bc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d2c0:	d02b      	beq.n	800d31a <__lshift+0xbe>
 800d2c2:	f1c9 0e20 	rsb	lr, r9, #32
 800d2c6:	468a      	mov	sl, r1
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	6818      	ldr	r0, [r3, #0]
 800d2cc:	fa00 f009 	lsl.w	r0, r0, r9
 800d2d0:	4310      	orrs	r0, r2
 800d2d2:	f84a 0b04 	str.w	r0, [sl], #4
 800d2d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2da:	459c      	cmp	ip, r3
 800d2dc:	fa22 f20e 	lsr.w	r2, r2, lr
 800d2e0:	d8f3      	bhi.n	800d2ca <__lshift+0x6e>
 800d2e2:	ebac 0304 	sub.w	r3, ip, r4
 800d2e6:	3b15      	subs	r3, #21
 800d2e8:	f023 0303 	bic.w	r3, r3, #3
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	f104 0015 	add.w	r0, r4, #21
 800d2f2:	4584      	cmp	ip, r0
 800d2f4:	bf38      	it	cc
 800d2f6:	2304      	movcc	r3, #4
 800d2f8:	50ca      	str	r2, [r1, r3]
 800d2fa:	b10a      	cbz	r2, 800d300 <__lshift+0xa4>
 800d2fc:	f108 0602 	add.w	r6, r8, #2
 800d300:	3e01      	subs	r6, #1
 800d302:	4638      	mov	r0, r7
 800d304:	612e      	str	r6, [r5, #16]
 800d306:	4621      	mov	r1, r4
 800d308:	f7ff fdd8 	bl	800cebc <_Bfree>
 800d30c:	4628      	mov	r0, r5
 800d30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d312:	f842 0f04 	str.w	r0, [r2, #4]!
 800d316:	3301      	adds	r3, #1
 800d318:	e7c5      	b.n	800d2a6 <__lshift+0x4a>
 800d31a:	3904      	subs	r1, #4
 800d31c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d320:	f841 2f04 	str.w	r2, [r1, #4]!
 800d324:	459c      	cmp	ip, r3
 800d326:	d8f9      	bhi.n	800d31c <__lshift+0xc0>
 800d328:	e7ea      	b.n	800d300 <__lshift+0xa4>
 800d32a:	bf00      	nop
 800d32c:	0801147c 	.word	0x0801147c
 800d330:	0801148d 	.word	0x0801148d

0800d334 <__mcmp>:
 800d334:	b530      	push	{r4, r5, lr}
 800d336:	6902      	ldr	r2, [r0, #16]
 800d338:	690c      	ldr	r4, [r1, #16]
 800d33a:	1b12      	subs	r2, r2, r4
 800d33c:	d10e      	bne.n	800d35c <__mcmp+0x28>
 800d33e:	f100 0314 	add.w	r3, r0, #20
 800d342:	3114      	adds	r1, #20
 800d344:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d348:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d34c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d350:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d354:	42a5      	cmp	r5, r4
 800d356:	d003      	beq.n	800d360 <__mcmp+0x2c>
 800d358:	d305      	bcc.n	800d366 <__mcmp+0x32>
 800d35a:	2201      	movs	r2, #1
 800d35c:	4610      	mov	r0, r2
 800d35e:	bd30      	pop	{r4, r5, pc}
 800d360:	4283      	cmp	r3, r0
 800d362:	d3f3      	bcc.n	800d34c <__mcmp+0x18>
 800d364:	e7fa      	b.n	800d35c <__mcmp+0x28>
 800d366:	f04f 32ff 	mov.w	r2, #4294967295
 800d36a:	e7f7      	b.n	800d35c <__mcmp+0x28>

0800d36c <__mdiff>:
 800d36c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d370:	460c      	mov	r4, r1
 800d372:	4606      	mov	r6, r0
 800d374:	4611      	mov	r1, r2
 800d376:	4620      	mov	r0, r4
 800d378:	4690      	mov	r8, r2
 800d37a:	f7ff ffdb 	bl	800d334 <__mcmp>
 800d37e:	1e05      	subs	r5, r0, #0
 800d380:	d110      	bne.n	800d3a4 <__mdiff+0x38>
 800d382:	4629      	mov	r1, r5
 800d384:	4630      	mov	r0, r6
 800d386:	f7ff fd59 	bl	800ce3c <_Balloc>
 800d38a:	b930      	cbnz	r0, 800d39a <__mdiff+0x2e>
 800d38c:	4b3a      	ldr	r3, [pc, #232]	; (800d478 <__mdiff+0x10c>)
 800d38e:	4602      	mov	r2, r0
 800d390:	f240 2137 	movw	r1, #567	; 0x237
 800d394:	4839      	ldr	r0, [pc, #228]	; (800d47c <__mdiff+0x110>)
 800d396:	f000 fb0b 	bl	800d9b0 <__assert_func>
 800d39a:	2301      	movs	r3, #1
 800d39c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d3a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3a4:	bfa4      	itt	ge
 800d3a6:	4643      	movge	r3, r8
 800d3a8:	46a0      	movge	r8, r4
 800d3aa:	4630      	mov	r0, r6
 800d3ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d3b0:	bfa6      	itte	ge
 800d3b2:	461c      	movge	r4, r3
 800d3b4:	2500      	movge	r5, #0
 800d3b6:	2501      	movlt	r5, #1
 800d3b8:	f7ff fd40 	bl	800ce3c <_Balloc>
 800d3bc:	b920      	cbnz	r0, 800d3c8 <__mdiff+0x5c>
 800d3be:	4b2e      	ldr	r3, [pc, #184]	; (800d478 <__mdiff+0x10c>)
 800d3c0:	4602      	mov	r2, r0
 800d3c2:	f240 2145 	movw	r1, #581	; 0x245
 800d3c6:	e7e5      	b.n	800d394 <__mdiff+0x28>
 800d3c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d3cc:	6926      	ldr	r6, [r4, #16]
 800d3ce:	60c5      	str	r5, [r0, #12]
 800d3d0:	f104 0914 	add.w	r9, r4, #20
 800d3d4:	f108 0514 	add.w	r5, r8, #20
 800d3d8:	f100 0e14 	add.w	lr, r0, #20
 800d3dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d3e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d3e4:	f108 0210 	add.w	r2, r8, #16
 800d3e8:	46f2      	mov	sl, lr
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	f859 3b04 	ldr.w	r3, [r9], #4
 800d3f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d3f4:	fa11 f88b 	uxtah	r8, r1, fp
 800d3f8:	b299      	uxth	r1, r3
 800d3fa:	0c1b      	lsrs	r3, r3, #16
 800d3fc:	eba8 0801 	sub.w	r8, r8, r1
 800d400:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d404:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d408:	fa1f f888 	uxth.w	r8, r8
 800d40c:	1419      	asrs	r1, r3, #16
 800d40e:	454e      	cmp	r6, r9
 800d410:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d414:	f84a 3b04 	str.w	r3, [sl], #4
 800d418:	d8e8      	bhi.n	800d3ec <__mdiff+0x80>
 800d41a:	1b33      	subs	r3, r6, r4
 800d41c:	3b15      	subs	r3, #21
 800d41e:	f023 0303 	bic.w	r3, r3, #3
 800d422:	3304      	adds	r3, #4
 800d424:	3415      	adds	r4, #21
 800d426:	42a6      	cmp	r6, r4
 800d428:	bf38      	it	cc
 800d42a:	2304      	movcc	r3, #4
 800d42c:	441d      	add	r5, r3
 800d42e:	4473      	add	r3, lr
 800d430:	469e      	mov	lr, r3
 800d432:	462e      	mov	r6, r5
 800d434:	4566      	cmp	r6, ip
 800d436:	d30e      	bcc.n	800d456 <__mdiff+0xea>
 800d438:	f10c 0203 	add.w	r2, ip, #3
 800d43c:	1b52      	subs	r2, r2, r5
 800d43e:	f022 0203 	bic.w	r2, r2, #3
 800d442:	3d03      	subs	r5, #3
 800d444:	45ac      	cmp	ip, r5
 800d446:	bf38      	it	cc
 800d448:	2200      	movcc	r2, #0
 800d44a:	4413      	add	r3, r2
 800d44c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d450:	b17a      	cbz	r2, 800d472 <__mdiff+0x106>
 800d452:	6107      	str	r7, [r0, #16]
 800d454:	e7a4      	b.n	800d3a0 <__mdiff+0x34>
 800d456:	f856 8b04 	ldr.w	r8, [r6], #4
 800d45a:	fa11 f288 	uxtah	r2, r1, r8
 800d45e:	1414      	asrs	r4, r2, #16
 800d460:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d464:	b292      	uxth	r2, r2
 800d466:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d46a:	f84e 2b04 	str.w	r2, [lr], #4
 800d46e:	1421      	asrs	r1, r4, #16
 800d470:	e7e0      	b.n	800d434 <__mdiff+0xc8>
 800d472:	3f01      	subs	r7, #1
 800d474:	e7ea      	b.n	800d44c <__mdiff+0xe0>
 800d476:	bf00      	nop
 800d478:	0801147c 	.word	0x0801147c
 800d47c:	0801148d 	.word	0x0801148d

0800d480 <__d2b>:
 800d480:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d484:	460f      	mov	r7, r1
 800d486:	2101      	movs	r1, #1
 800d488:	ec59 8b10 	vmov	r8, r9, d0
 800d48c:	4616      	mov	r6, r2
 800d48e:	f7ff fcd5 	bl	800ce3c <_Balloc>
 800d492:	4604      	mov	r4, r0
 800d494:	b930      	cbnz	r0, 800d4a4 <__d2b+0x24>
 800d496:	4602      	mov	r2, r0
 800d498:	4b24      	ldr	r3, [pc, #144]	; (800d52c <__d2b+0xac>)
 800d49a:	4825      	ldr	r0, [pc, #148]	; (800d530 <__d2b+0xb0>)
 800d49c:	f240 310f 	movw	r1, #783	; 0x30f
 800d4a0:	f000 fa86 	bl	800d9b0 <__assert_func>
 800d4a4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d4a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d4ac:	bb2d      	cbnz	r5, 800d4fa <__d2b+0x7a>
 800d4ae:	9301      	str	r3, [sp, #4]
 800d4b0:	f1b8 0300 	subs.w	r3, r8, #0
 800d4b4:	d026      	beq.n	800d504 <__d2b+0x84>
 800d4b6:	4668      	mov	r0, sp
 800d4b8:	9300      	str	r3, [sp, #0]
 800d4ba:	f7ff fd87 	bl	800cfcc <__lo0bits>
 800d4be:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d4c2:	b1e8      	cbz	r0, 800d500 <__d2b+0x80>
 800d4c4:	f1c0 0320 	rsb	r3, r0, #32
 800d4c8:	fa02 f303 	lsl.w	r3, r2, r3
 800d4cc:	430b      	orrs	r3, r1
 800d4ce:	40c2      	lsrs	r2, r0
 800d4d0:	6163      	str	r3, [r4, #20]
 800d4d2:	9201      	str	r2, [sp, #4]
 800d4d4:	9b01      	ldr	r3, [sp, #4]
 800d4d6:	61a3      	str	r3, [r4, #24]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	bf14      	ite	ne
 800d4dc:	2202      	movne	r2, #2
 800d4de:	2201      	moveq	r2, #1
 800d4e0:	6122      	str	r2, [r4, #16]
 800d4e2:	b1bd      	cbz	r5, 800d514 <__d2b+0x94>
 800d4e4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d4e8:	4405      	add	r5, r0
 800d4ea:	603d      	str	r5, [r7, #0]
 800d4ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d4f0:	6030      	str	r0, [r6, #0]
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	b003      	add	sp, #12
 800d4f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d4fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d4fe:	e7d6      	b.n	800d4ae <__d2b+0x2e>
 800d500:	6161      	str	r1, [r4, #20]
 800d502:	e7e7      	b.n	800d4d4 <__d2b+0x54>
 800d504:	a801      	add	r0, sp, #4
 800d506:	f7ff fd61 	bl	800cfcc <__lo0bits>
 800d50a:	9b01      	ldr	r3, [sp, #4]
 800d50c:	6163      	str	r3, [r4, #20]
 800d50e:	3020      	adds	r0, #32
 800d510:	2201      	movs	r2, #1
 800d512:	e7e5      	b.n	800d4e0 <__d2b+0x60>
 800d514:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d518:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d51c:	6038      	str	r0, [r7, #0]
 800d51e:	6918      	ldr	r0, [r3, #16]
 800d520:	f7ff fd34 	bl	800cf8c <__hi0bits>
 800d524:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d528:	e7e2      	b.n	800d4f0 <__d2b+0x70>
 800d52a:	bf00      	nop
 800d52c:	0801147c 	.word	0x0801147c
 800d530:	0801148d 	.word	0x0801148d

0800d534 <__ssputs_r>:
 800d534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d538:	688e      	ldr	r6, [r1, #8]
 800d53a:	461f      	mov	r7, r3
 800d53c:	42be      	cmp	r6, r7
 800d53e:	680b      	ldr	r3, [r1, #0]
 800d540:	4682      	mov	sl, r0
 800d542:	460c      	mov	r4, r1
 800d544:	4690      	mov	r8, r2
 800d546:	d82c      	bhi.n	800d5a2 <__ssputs_r+0x6e>
 800d548:	898a      	ldrh	r2, [r1, #12]
 800d54a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d54e:	d026      	beq.n	800d59e <__ssputs_r+0x6a>
 800d550:	6965      	ldr	r5, [r4, #20]
 800d552:	6909      	ldr	r1, [r1, #16]
 800d554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d558:	eba3 0901 	sub.w	r9, r3, r1
 800d55c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d560:	1c7b      	adds	r3, r7, #1
 800d562:	444b      	add	r3, r9
 800d564:	106d      	asrs	r5, r5, #1
 800d566:	429d      	cmp	r5, r3
 800d568:	bf38      	it	cc
 800d56a:	461d      	movcc	r5, r3
 800d56c:	0553      	lsls	r3, r2, #21
 800d56e:	d527      	bpl.n	800d5c0 <__ssputs_r+0x8c>
 800d570:	4629      	mov	r1, r5
 800d572:	f7ff fbd7 	bl	800cd24 <_malloc_r>
 800d576:	4606      	mov	r6, r0
 800d578:	b360      	cbz	r0, 800d5d4 <__ssputs_r+0xa0>
 800d57a:	6921      	ldr	r1, [r4, #16]
 800d57c:	464a      	mov	r2, r9
 800d57e:	f000 fa09 	bl	800d994 <memcpy>
 800d582:	89a3      	ldrh	r3, [r4, #12]
 800d584:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d58c:	81a3      	strh	r3, [r4, #12]
 800d58e:	6126      	str	r6, [r4, #16]
 800d590:	6165      	str	r5, [r4, #20]
 800d592:	444e      	add	r6, r9
 800d594:	eba5 0509 	sub.w	r5, r5, r9
 800d598:	6026      	str	r6, [r4, #0]
 800d59a:	60a5      	str	r5, [r4, #8]
 800d59c:	463e      	mov	r6, r7
 800d59e:	42be      	cmp	r6, r7
 800d5a0:	d900      	bls.n	800d5a4 <__ssputs_r+0x70>
 800d5a2:	463e      	mov	r6, r7
 800d5a4:	6820      	ldr	r0, [r4, #0]
 800d5a6:	4632      	mov	r2, r6
 800d5a8:	4641      	mov	r1, r8
 800d5aa:	f000 f9c9 	bl	800d940 <memmove>
 800d5ae:	68a3      	ldr	r3, [r4, #8]
 800d5b0:	1b9b      	subs	r3, r3, r6
 800d5b2:	60a3      	str	r3, [r4, #8]
 800d5b4:	6823      	ldr	r3, [r4, #0]
 800d5b6:	4433      	add	r3, r6
 800d5b8:	6023      	str	r3, [r4, #0]
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5c0:	462a      	mov	r2, r5
 800d5c2:	f000 fa3b 	bl	800da3c <_realloc_r>
 800d5c6:	4606      	mov	r6, r0
 800d5c8:	2800      	cmp	r0, #0
 800d5ca:	d1e0      	bne.n	800d58e <__ssputs_r+0x5a>
 800d5cc:	6921      	ldr	r1, [r4, #16]
 800d5ce:	4650      	mov	r0, sl
 800d5d0:	f7ff fb34 	bl	800cc3c <_free_r>
 800d5d4:	230c      	movs	r3, #12
 800d5d6:	f8ca 3000 	str.w	r3, [sl]
 800d5da:	89a3      	ldrh	r3, [r4, #12]
 800d5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5e0:	81a3      	strh	r3, [r4, #12]
 800d5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e6:	e7e9      	b.n	800d5bc <__ssputs_r+0x88>

0800d5e8 <_svfiprintf_r>:
 800d5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ec:	4698      	mov	r8, r3
 800d5ee:	898b      	ldrh	r3, [r1, #12]
 800d5f0:	061b      	lsls	r3, r3, #24
 800d5f2:	b09d      	sub	sp, #116	; 0x74
 800d5f4:	4607      	mov	r7, r0
 800d5f6:	460d      	mov	r5, r1
 800d5f8:	4614      	mov	r4, r2
 800d5fa:	d50e      	bpl.n	800d61a <_svfiprintf_r+0x32>
 800d5fc:	690b      	ldr	r3, [r1, #16]
 800d5fe:	b963      	cbnz	r3, 800d61a <_svfiprintf_r+0x32>
 800d600:	2140      	movs	r1, #64	; 0x40
 800d602:	f7ff fb8f 	bl	800cd24 <_malloc_r>
 800d606:	6028      	str	r0, [r5, #0]
 800d608:	6128      	str	r0, [r5, #16]
 800d60a:	b920      	cbnz	r0, 800d616 <_svfiprintf_r+0x2e>
 800d60c:	230c      	movs	r3, #12
 800d60e:	603b      	str	r3, [r7, #0]
 800d610:	f04f 30ff 	mov.w	r0, #4294967295
 800d614:	e0d0      	b.n	800d7b8 <_svfiprintf_r+0x1d0>
 800d616:	2340      	movs	r3, #64	; 0x40
 800d618:	616b      	str	r3, [r5, #20]
 800d61a:	2300      	movs	r3, #0
 800d61c:	9309      	str	r3, [sp, #36]	; 0x24
 800d61e:	2320      	movs	r3, #32
 800d620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d624:	f8cd 800c 	str.w	r8, [sp, #12]
 800d628:	2330      	movs	r3, #48	; 0x30
 800d62a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d7d0 <_svfiprintf_r+0x1e8>
 800d62e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d632:	f04f 0901 	mov.w	r9, #1
 800d636:	4623      	mov	r3, r4
 800d638:	469a      	mov	sl, r3
 800d63a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d63e:	b10a      	cbz	r2, 800d644 <_svfiprintf_r+0x5c>
 800d640:	2a25      	cmp	r2, #37	; 0x25
 800d642:	d1f9      	bne.n	800d638 <_svfiprintf_r+0x50>
 800d644:	ebba 0b04 	subs.w	fp, sl, r4
 800d648:	d00b      	beq.n	800d662 <_svfiprintf_r+0x7a>
 800d64a:	465b      	mov	r3, fp
 800d64c:	4622      	mov	r2, r4
 800d64e:	4629      	mov	r1, r5
 800d650:	4638      	mov	r0, r7
 800d652:	f7ff ff6f 	bl	800d534 <__ssputs_r>
 800d656:	3001      	adds	r0, #1
 800d658:	f000 80a9 	beq.w	800d7ae <_svfiprintf_r+0x1c6>
 800d65c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d65e:	445a      	add	r2, fp
 800d660:	9209      	str	r2, [sp, #36]	; 0x24
 800d662:	f89a 3000 	ldrb.w	r3, [sl]
 800d666:	2b00      	cmp	r3, #0
 800d668:	f000 80a1 	beq.w	800d7ae <_svfiprintf_r+0x1c6>
 800d66c:	2300      	movs	r3, #0
 800d66e:	f04f 32ff 	mov.w	r2, #4294967295
 800d672:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d676:	f10a 0a01 	add.w	sl, sl, #1
 800d67a:	9304      	str	r3, [sp, #16]
 800d67c:	9307      	str	r3, [sp, #28]
 800d67e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d682:	931a      	str	r3, [sp, #104]	; 0x68
 800d684:	4654      	mov	r4, sl
 800d686:	2205      	movs	r2, #5
 800d688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d68c:	4850      	ldr	r0, [pc, #320]	; (800d7d0 <_svfiprintf_r+0x1e8>)
 800d68e:	f7f2 fd9f 	bl	80001d0 <memchr>
 800d692:	9a04      	ldr	r2, [sp, #16]
 800d694:	b9d8      	cbnz	r0, 800d6ce <_svfiprintf_r+0xe6>
 800d696:	06d0      	lsls	r0, r2, #27
 800d698:	bf44      	itt	mi
 800d69a:	2320      	movmi	r3, #32
 800d69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6a0:	0711      	lsls	r1, r2, #28
 800d6a2:	bf44      	itt	mi
 800d6a4:	232b      	movmi	r3, #43	; 0x2b
 800d6a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6aa:	f89a 3000 	ldrb.w	r3, [sl]
 800d6ae:	2b2a      	cmp	r3, #42	; 0x2a
 800d6b0:	d015      	beq.n	800d6de <_svfiprintf_r+0xf6>
 800d6b2:	9a07      	ldr	r2, [sp, #28]
 800d6b4:	4654      	mov	r4, sl
 800d6b6:	2000      	movs	r0, #0
 800d6b8:	f04f 0c0a 	mov.w	ip, #10
 800d6bc:	4621      	mov	r1, r4
 800d6be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6c2:	3b30      	subs	r3, #48	; 0x30
 800d6c4:	2b09      	cmp	r3, #9
 800d6c6:	d94d      	bls.n	800d764 <_svfiprintf_r+0x17c>
 800d6c8:	b1b0      	cbz	r0, 800d6f8 <_svfiprintf_r+0x110>
 800d6ca:	9207      	str	r2, [sp, #28]
 800d6cc:	e014      	b.n	800d6f8 <_svfiprintf_r+0x110>
 800d6ce:	eba0 0308 	sub.w	r3, r0, r8
 800d6d2:	fa09 f303 	lsl.w	r3, r9, r3
 800d6d6:	4313      	orrs	r3, r2
 800d6d8:	9304      	str	r3, [sp, #16]
 800d6da:	46a2      	mov	sl, r4
 800d6dc:	e7d2      	b.n	800d684 <_svfiprintf_r+0x9c>
 800d6de:	9b03      	ldr	r3, [sp, #12]
 800d6e0:	1d19      	adds	r1, r3, #4
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	9103      	str	r1, [sp, #12]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	bfbb      	ittet	lt
 800d6ea:	425b      	neglt	r3, r3
 800d6ec:	f042 0202 	orrlt.w	r2, r2, #2
 800d6f0:	9307      	strge	r3, [sp, #28]
 800d6f2:	9307      	strlt	r3, [sp, #28]
 800d6f4:	bfb8      	it	lt
 800d6f6:	9204      	strlt	r2, [sp, #16]
 800d6f8:	7823      	ldrb	r3, [r4, #0]
 800d6fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d6fc:	d10c      	bne.n	800d718 <_svfiprintf_r+0x130>
 800d6fe:	7863      	ldrb	r3, [r4, #1]
 800d700:	2b2a      	cmp	r3, #42	; 0x2a
 800d702:	d134      	bne.n	800d76e <_svfiprintf_r+0x186>
 800d704:	9b03      	ldr	r3, [sp, #12]
 800d706:	1d1a      	adds	r2, r3, #4
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	9203      	str	r2, [sp, #12]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	bfb8      	it	lt
 800d710:	f04f 33ff 	movlt.w	r3, #4294967295
 800d714:	3402      	adds	r4, #2
 800d716:	9305      	str	r3, [sp, #20]
 800d718:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d7e0 <_svfiprintf_r+0x1f8>
 800d71c:	7821      	ldrb	r1, [r4, #0]
 800d71e:	2203      	movs	r2, #3
 800d720:	4650      	mov	r0, sl
 800d722:	f7f2 fd55 	bl	80001d0 <memchr>
 800d726:	b138      	cbz	r0, 800d738 <_svfiprintf_r+0x150>
 800d728:	9b04      	ldr	r3, [sp, #16]
 800d72a:	eba0 000a 	sub.w	r0, r0, sl
 800d72e:	2240      	movs	r2, #64	; 0x40
 800d730:	4082      	lsls	r2, r0
 800d732:	4313      	orrs	r3, r2
 800d734:	3401      	adds	r4, #1
 800d736:	9304      	str	r3, [sp, #16]
 800d738:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d73c:	4825      	ldr	r0, [pc, #148]	; (800d7d4 <_svfiprintf_r+0x1ec>)
 800d73e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d742:	2206      	movs	r2, #6
 800d744:	f7f2 fd44 	bl	80001d0 <memchr>
 800d748:	2800      	cmp	r0, #0
 800d74a:	d038      	beq.n	800d7be <_svfiprintf_r+0x1d6>
 800d74c:	4b22      	ldr	r3, [pc, #136]	; (800d7d8 <_svfiprintf_r+0x1f0>)
 800d74e:	bb1b      	cbnz	r3, 800d798 <_svfiprintf_r+0x1b0>
 800d750:	9b03      	ldr	r3, [sp, #12]
 800d752:	3307      	adds	r3, #7
 800d754:	f023 0307 	bic.w	r3, r3, #7
 800d758:	3308      	adds	r3, #8
 800d75a:	9303      	str	r3, [sp, #12]
 800d75c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d75e:	4433      	add	r3, r6
 800d760:	9309      	str	r3, [sp, #36]	; 0x24
 800d762:	e768      	b.n	800d636 <_svfiprintf_r+0x4e>
 800d764:	fb0c 3202 	mla	r2, ip, r2, r3
 800d768:	460c      	mov	r4, r1
 800d76a:	2001      	movs	r0, #1
 800d76c:	e7a6      	b.n	800d6bc <_svfiprintf_r+0xd4>
 800d76e:	2300      	movs	r3, #0
 800d770:	3401      	adds	r4, #1
 800d772:	9305      	str	r3, [sp, #20]
 800d774:	4619      	mov	r1, r3
 800d776:	f04f 0c0a 	mov.w	ip, #10
 800d77a:	4620      	mov	r0, r4
 800d77c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d780:	3a30      	subs	r2, #48	; 0x30
 800d782:	2a09      	cmp	r2, #9
 800d784:	d903      	bls.n	800d78e <_svfiprintf_r+0x1a6>
 800d786:	2b00      	cmp	r3, #0
 800d788:	d0c6      	beq.n	800d718 <_svfiprintf_r+0x130>
 800d78a:	9105      	str	r1, [sp, #20]
 800d78c:	e7c4      	b.n	800d718 <_svfiprintf_r+0x130>
 800d78e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d792:	4604      	mov	r4, r0
 800d794:	2301      	movs	r3, #1
 800d796:	e7f0      	b.n	800d77a <_svfiprintf_r+0x192>
 800d798:	ab03      	add	r3, sp, #12
 800d79a:	9300      	str	r3, [sp, #0]
 800d79c:	462a      	mov	r2, r5
 800d79e:	4b0f      	ldr	r3, [pc, #60]	; (800d7dc <_svfiprintf_r+0x1f4>)
 800d7a0:	a904      	add	r1, sp, #16
 800d7a2:	4638      	mov	r0, r7
 800d7a4:	f7fd fe64 	bl	800b470 <_printf_float>
 800d7a8:	1c42      	adds	r2, r0, #1
 800d7aa:	4606      	mov	r6, r0
 800d7ac:	d1d6      	bne.n	800d75c <_svfiprintf_r+0x174>
 800d7ae:	89ab      	ldrh	r3, [r5, #12]
 800d7b0:	065b      	lsls	r3, r3, #25
 800d7b2:	f53f af2d 	bmi.w	800d610 <_svfiprintf_r+0x28>
 800d7b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7b8:	b01d      	add	sp, #116	; 0x74
 800d7ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7be:	ab03      	add	r3, sp, #12
 800d7c0:	9300      	str	r3, [sp, #0]
 800d7c2:	462a      	mov	r2, r5
 800d7c4:	4b05      	ldr	r3, [pc, #20]	; (800d7dc <_svfiprintf_r+0x1f4>)
 800d7c6:	a904      	add	r1, sp, #16
 800d7c8:	4638      	mov	r0, r7
 800d7ca:	f7fe f8f5 	bl	800b9b8 <_printf_i>
 800d7ce:	e7eb      	b.n	800d7a8 <_svfiprintf_r+0x1c0>
 800d7d0:	080115e4 	.word	0x080115e4
 800d7d4:	080115ee 	.word	0x080115ee
 800d7d8:	0800b471 	.word	0x0800b471
 800d7dc:	0800d535 	.word	0x0800d535
 800d7e0:	080115ea 	.word	0x080115ea

0800d7e4 <__sflush_r>:
 800d7e4:	898a      	ldrh	r2, [r1, #12]
 800d7e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ea:	4605      	mov	r5, r0
 800d7ec:	0710      	lsls	r0, r2, #28
 800d7ee:	460c      	mov	r4, r1
 800d7f0:	d458      	bmi.n	800d8a4 <__sflush_r+0xc0>
 800d7f2:	684b      	ldr	r3, [r1, #4]
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	dc05      	bgt.n	800d804 <__sflush_r+0x20>
 800d7f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	dc02      	bgt.n	800d804 <__sflush_r+0x20>
 800d7fe:	2000      	movs	r0, #0
 800d800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d806:	2e00      	cmp	r6, #0
 800d808:	d0f9      	beq.n	800d7fe <__sflush_r+0x1a>
 800d80a:	2300      	movs	r3, #0
 800d80c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d810:	682f      	ldr	r7, [r5, #0]
 800d812:	6a21      	ldr	r1, [r4, #32]
 800d814:	602b      	str	r3, [r5, #0]
 800d816:	d032      	beq.n	800d87e <__sflush_r+0x9a>
 800d818:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d81a:	89a3      	ldrh	r3, [r4, #12]
 800d81c:	075a      	lsls	r2, r3, #29
 800d81e:	d505      	bpl.n	800d82c <__sflush_r+0x48>
 800d820:	6863      	ldr	r3, [r4, #4]
 800d822:	1ac0      	subs	r0, r0, r3
 800d824:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d826:	b10b      	cbz	r3, 800d82c <__sflush_r+0x48>
 800d828:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d82a:	1ac0      	subs	r0, r0, r3
 800d82c:	2300      	movs	r3, #0
 800d82e:	4602      	mov	r2, r0
 800d830:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d832:	6a21      	ldr	r1, [r4, #32]
 800d834:	4628      	mov	r0, r5
 800d836:	47b0      	blx	r6
 800d838:	1c43      	adds	r3, r0, #1
 800d83a:	89a3      	ldrh	r3, [r4, #12]
 800d83c:	d106      	bne.n	800d84c <__sflush_r+0x68>
 800d83e:	6829      	ldr	r1, [r5, #0]
 800d840:	291d      	cmp	r1, #29
 800d842:	d82b      	bhi.n	800d89c <__sflush_r+0xb8>
 800d844:	4a29      	ldr	r2, [pc, #164]	; (800d8ec <__sflush_r+0x108>)
 800d846:	410a      	asrs	r2, r1
 800d848:	07d6      	lsls	r6, r2, #31
 800d84a:	d427      	bmi.n	800d89c <__sflush_r+0xb8>
 800d84c:	2200      	movs	r2, #0
 800d84e:	6062      	str	r2, [r4, #4]
 800d850:	04d9      	lsls	r1, r3, #19
 800d852:	6922      	ldr	r2, [r4, #16]
 800d854:	6022      	str	r2, [r4, #0]
 800d856:	d504      	bpl.n	800d862 <__sflush_r+0x7e>
 800d858:	1c42      	adds	r2, r0, #1
 800d85a:	d101      	bne.n	800d860 <__sflush_r+0x7c>
 800d85c:	682b      	ldr	r3, [r5, #0]
 800d85e:	b903      	cbnz	r3, 800d862 <__sflush_r+0x7e>
 800d860:	6560      	str	r0, [r4, #84]	; 0x54
 800d862:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d864:	602f      	str	r7, [r5, #0]
 800d866:	2900      	cmp	r1, #0
 800d868:	d0c9      	beq.n	800d7fe <__sflush_r+0x1a>
 800d86a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d86e:	4299      	cmp	r1, r3
 800d870:	d002      	beq.n	800d878 <__sflush_r+0x94>
 800d872:	4628      	mov	r0, r5
 800d874:	f7ff f9e2 	bl	800cc3c <_free_r>
 800d878:	2000      	movs	r0, #0
 800d87a:	6360      	str	r0, [r4, #52]	; 0x34
 800d87c:	e7c0      	b.n	800d800 <__sflush_r+0x1c>
 800d87e:	2301      	movs	r3, #1
 800d880:	4628      	mov	r0, r5
 800d882:	47b0      	blx	r6
 800d884:	1c41      	adds	r1, r0, #1
 800d886:	d1c8      	bne.n	800d81a <__sflush_r+0x36>
 800d888:	682b      	ldr	r3, [r5, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d0c5      	beq.n	800d81a <__sflush_r+0x36>
 800d88e:	2b1d      	cmp	r3, #29
 800d890:	d001      	beq.n	800d896 <__sflush_r+0xb2>
 800d892:	2b16      	cmp	r3, #22
 800d894:	d101      	bne.n	800d89a <__sflush_r+0xb6>
 800d896:	602f      	str	r7, [r5, #0]
 800d898:	e7b1      	b.n	800d7fe <__sflush_r+0x1a>
 800d89a:	89a3      	ldrh	r3, [r4, #12]
 800d89c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8a0:	81a3      	strh	r3, [r4, #12]
 800d8a2:	e7ad      	b.n	800d800 <__sflush_r+0x1c>
 800d8a4:	690f      	ldr	r7, [r1, #16]
 800d8a6:	2f00      	cmp	r7, #0
 800d8a8:	d0a9      	beq.n	800d7fe <__sflush_r+0x1a>
 800d8aa:	0793      	lsls	r3, r2, #30
 800d8ac:	680e      	ldr	r6, [r1, #0]
 800d8ae:	bf08      	it	eq
 800d8b0:	694b      	ldreq	r3, [r1, #20]
 800d8b2:	600f      	str	r7, [r1, #0]
 800d8b4:	bf18      	it	ne
 800d8b6:	2300      	movne	r3, #0
 800d8b8:	eba6 0807 	sub.w	r8, r6, r7
 800d8bc:	608b      	str	r3, [r1, #8]
 800d8be:	f1b8 0f00 	cmp.w	r8, #0
 800d8c2:	dd9c      	ble.n	800d7fe <__sflush_r+0x1a>
 800d8c4:	6a21      	ldr	r1, [r4, #32]
 800d8c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d8c8:	4643      	mov	r3, r8
 800d8ca:	463a      	mov	r2, r7
 800d8cc:	4628      	mov	r0, r5
 800d8ce:	47b0      	blx	r6
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	dc06      	bgt.n	800d8e2 <__sflush_r+0xfe>
 800d8d4:	89a3      	ldrh	r3, [r4, #12]
 800d8d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8da:	81a3      	strh	r3, [r4, #12]
 800d8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e0:	e78e      	b.n	800d800 <__sflush_r+0x1c>
 800d8e2:	4407      	add	r7, r0
 800d8e4:	eba8 0800 	sub.w	r8, r8, r0
 800d8e8:	e7e9      	b.n	800d8be <__sflush_r+0xda>
 800d8ea:	bf00      	nop
 800d8ec:	dfbffffe 	.word	0xdfbffffe

0800d8f0 <_fflush_r>:
 800d8f0:	b538      	push	{r3, r4, r5, lr}
 800d8f2:	690b      	ldr	r3, [r1, #16]
 800d8f4:	4605      	mov	r5, r0
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	b913      	cbnz	r3, 800d900 <_fflush_r+0x10>
 800d8fa:	2500      	movs	r5, #0
 800d8fc:	4628      	mov	r0, r5
 800d8fe:	bd38      	pop	{r3, r4, r5, pc}
 800d900:	b118      	cbz	r0, 800d90a <_fflush_r+0x1a>
 800d902:	6a03      	ldr	r3, [r0, #32]
 800d904:	b90b      	cbnz	r3, 800d90a <_fflush_r+0x1a>
 800d906:	f7fe fa05 	bl	800bd14 <__sinit>
 800d90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d0f3      	beq.n	800d8fa <_fflush_r+0xa>
 800d912:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d914:	07d0      	lsls	r0, r2, #31
 800d916:	d404      	bmi.n	800d922 <_fflush_r+0x32>
 800d918:	0599      	lsls	r1, r3, #22
 800d91a:	d402      	bmi.n	800d922 <_fflush_r+0x32>
 800d91c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d91e:	f7fe fb10 	bl	800bf42 <__retarget_lock_acquire_recursive>
 800d922:	4628      	mov	r0, r5
 800d924:	4621      	mov	r1, r4
 800d926:	f7ff ff5d 	bl	800d7e4 <__sflush_r>
 800d92a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d92c:	07da      	lsls	r2, r3, #31
 800d92e:	4605      	mov	r5, r0
 800d930:	d4e4      	bmi.n	800d8fc <_fflush_r+0xc>
 800d932:	89a3      	ldrh	r3, [r4, #12]
 800d934:	059b      	lsls	r3, r3, #22
 800d936:	d4e1      	bmi.n	800d8fc <_fflush_r+0xc>
 800d938:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d93a:	f7fe fb03 	bl	800bf44 <__retarget_lock_release_recursive>
 800d93e:	e7dd      	b.n	800d8fc <_fflush_r+0xc>

0800d940 <memmove>:
 800d940:	4288      	cmp	r0, r1
 800d942:	b510      	push	{r4, lr}
 800d944:	eb01 0402 	add.w	r4, r1, r2
 800d948:	d902      	bls.n	800d950 <memmove+0x10>
 800d94a:	4284      	cmp	r4, r0
 800d94c:	4623      	mov	r3, r4
 800d94e:	d807      	bhi.n	800d960 <memmove+0x20>
 800d950:	1e43      	subs	r3, r0, #1
 800d952:	42a1      	cmp	r1, r4
 800d954:	d008      	beq.n	800d968 <memmove+0x28>
 800d956:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d95a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d95e:	e7f8      	b.n	800d952 <memmove+0x12>
 800d960:	4402      	add	r2, r0
 800d962:	4601      	mov	r1, r0
 800d964:	428a      	cmp	r2, r1
 800d966:	d100      	bne.n	800d96a <memmove+0x2a>
 800d968:	bd10      	pop	{r4, pc}
 800d96a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d96e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d972:	e7f7      	b.n	800d964 <memmove+0x24>

0800d974 <_sbrk_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	4d06      	ldr	r5, [pc, #24]	; (800d990 <_sbrk_r+0x1c>)
 800d978:	2300      	movs	r3, #0
 800d97a:	4604      	mov	r4, r0
 800d97c:	4608      	mov	r0, r1
 800d97e:	602b      	str	r3, [r5, #0]
 800d980:	f7f6 fe3c 	bl	80045fc <_sbrk>
 800d984:	1c43      	adds	r3, r0, #1
 800d986:	d102      	bne.n	800d98e <_sbrk_r+0x1a>
 800d988:	682b      	ldr	r3, [r5, #0]
 800d98a:	b103      	cbz	r3, 800d98e <_sbrk_r+0x1a>
 800d98c:	6023      	str	r3, [r4, #0]
 800d98e:	bd38      	pop	{r3, r4, r5, pc}
 800d990:	2000674c 	.word	0x2000674c

0800d994 <memcpy>:
 800d994:	440a      	add	r2, r1
 800d996:	4291      	cmp	r1, r2
 800d998:	f100 33ff 	add.w	r3, r0, #4294967295
 800d99c:	d100      	bne.n	800d9a0 <memcpy+0xc>
 800d99e:	4770      	bx	lr
 800d9a0:	b510      	push	{r4, lr}
 800d9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d9a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d9aa:	4291      	cmp	r1, r2
 800d9ac:	d1f9      	bne.n	800d9a2 <memcpy+0xe>
 800d9ae:	bd10      	pop	{r4, pc}

0800d9b0 <__assert_func>:
 800d9b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d9b2:	4614      	mov	r4, r2
 800d9b4:	461a      	mov	r2, r3
 800d9b6:	4b09      	ldr	r3, [pc, #36]	; (800d9dc <__assert_func+0x2c>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	4605      	mov	r5, r0
 800d9bc:	68d8      	ldr	r0, [r3, #12]
 800d9be:	b14c      	cbz	r4, 800d9d4 <__assert_func+0x24>
 800d9c0:	4b07      	ldr	r3, [pc, #28]	; (800d9e0 <__assert_func+0x30>)
 800d9c2:	9100      	str	r1, [sp, #0]
 800d9c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d9c8:	4906      	ldr	r1, [pc, #24]	; (800d9e4 <__assert_func+0x34>)
 800d9ca:	462b      	mov	r3, r5
 800d9cc:	f000 f872 	bl	800dab4 <fiprintf>
 800d9d0:	f000 f882 	bl	800dad8 <abort>
 800d9d4:	4b04      	ldr	r3, [pc, #16]	; (800d9e8 <__assert_func+0x38>)
 800d9d6:	461c      	mov	r4, r3
 800d9d8:	e7f3      	b.n	800d9c2 <__assert_func+0x12>
 800d9da:	bf00      	nop
 800d9dc:	20000110 	.word	0x20000110
 800d9e0:	080115ff 	.word	0x080115ff
 800d9e4:	0801160c 	.word	0x0801160c
 800d9e8:	0801163a 	.word	0x0801163a

0800d9ec <_calloc_r>:
 800d9ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d9ee:	fba1 2402 	umull	r2, r4, r1, r2
 800d9f2:	b94c      	cbnz	r4, 800da08 <_calloc_r+0x1c>
 800d9f4:	4611      	mov	r1, r2
 800d9f6:	9201      	str	r2, [sp, #4]
 800d9f8:	f7ff f994 	bl	800cd24 <_malloc_r>
 800d9fc:	9a01      	ldr	r2, [sp, #4]
 800d9fe:	4605      	mov	r5, r0
 800da00:	b930      	cbnz	r0, 800da10 <_calloc_r+0x24>
 800da02:	4628      	mov	r0, r5
 800da04:	b003      	add	sp, #12
 800da06:	bd30      	pop	{r4, r5, pc}
 800da08:	220c      	movs	r2, #12
 800da0a:	6002      	str	r2, [r0, #0]
 800da0c:	2500      	movs	r5, #0
 800da0e:	e7f8      	b.n	800da02 <_calloc_r+0x16>
 800da10:	4621      	mov	r1, r4
 800da12:	f7fe fa18 	bl	800be46 <memset>
 800da16:	e7f4      	b.n	800da02 <_calloc_r+0x16>

0800da18 <__ascii_mbtowc>:
 800da18:	b082      	sub	sp, #8
 800da1a:	b901      	cbnz	r1, 800da1e <__ascii_mbtowc+0x6>
 800da1c:	a901      	add	r1, sp, #4
 800da1e:	b142      	cbz	r2, 800da32 <__ascii_mbtowc+0x1a>
 800da20:	b14b      	cbz	r3, 800da36 <__ascii_mbtowc+0x1e>
 800da22:	7813      	ldrb	r3, [r2, #0]
 800da24:	600b      	str	r3, [r1, #0]
 800da26:	7812      	ldrb	r2, [r2, #0]
 800da28:	1e10      	subs	r0, r2, #0
 800da2a:	bf18      	it	ne
 800da2c:	2001      	movne	r0, #1
 800da2e:	b002      	add	sp, #8
 800da30:	4770      	bx	lr
 800da32:	4610      	mov	r0, r2
 800da34:	e7fb      	b.n	800da2e <__ascii_mbtowc+0x16>
 800da36:	f06f 0001 	mvn.w	r0, #1
 800da3a:	e7f8      	b.n	800da2e <__ascii_mbtowc+0x16>

0800da3c <_realloc_r>:
 800da3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da40:	4680      	mov	r8, r0
 800da42:	4614      	mov	r4, r2
 800da44:	460e      	mov	r6, r1
 800da46:	b921      	cbnz	r1, 800da52 <_realloc_r+0x16>
 800da48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da4c:	4611      	mov	r1, r2
 800da4e:	f7ff b969 	b.w	800cd24 <_malloc_r>
 800da52:	b92a      	cbnz	r2, 800da60 <_realloc_r+0x24>
 800da54:	f7ff f8f2 	bl	800cc3c <_free_r>
 800da58:	4625      	mov	r5, r4
 800da5a:	4628      	mov	r0, r5
 800da5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da60:	f000 f841 	bl	800dae6 <_malloc_usable_size_r>
 800da64:	4284      	cmp	r4, r0
 800da66:	4607      	mov	r7, r0
 800da68:	d802      	bhi.n	800da70 <_realloc_r+0x34>
 800da6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da6e:	d812      	bhi.n	800da96 <_realloc_r+0x5a>
 800da70:	4621      	mov	r1, r4
 800da72:	4640      	mov	r0, r8
 800da74:	f7ff f956 	bl	800cd24 <_malloc_r>
 800da78:	4605      	mov	r5, r0
 800da7a:	2800      	cmp	r0, #0
 800da7c:	d0ed      	beq.n	800da5a <_realloc_r+0x1e>
 800da7e:	42bc      	cmp	r4, r7
 800da80:	4622      	mov	r2, r4
 800da82:	4631      	mov	r1, r6
 800da84:	bf28      	it	cs
 800da86:	463a      	movcs	r2, r7
 800da88:	f7ff ff84 	bl	800d994 <memcpy>
 800da8c:	4631      	mov	r1, r6
 800da8e:	4640      	mov	r0, r8
 800da90:	f7ff f8d4 	bl	800cc3c <_free_r>
 800da94:	e7e1      	b.n	800da5a <_realloc_r+0x1e>
 800da96:	4635      	mov	r5, r6
 800da98:	e7df      	b.n	800da5a <_realloc_r+0x1e>

0800da9a <__ascii_wctomb>:
 800da9a:	b149      	cbz	r1, 800dab0 <__ascii_wctomb+0x16>
 800da9c:	2aff      	cmp	r2, #255	; 0xff
 800da9e:	bf85      	ittet	hi
 800daa0:	238a      	movhi	r3, #138	; 0x8a
 800daa2:	6003      	strhi	r3, [r0, #0]
 800daa4:	700a      	strbls	r2, [r1, #0]
 800daa6:	f04f 30ff 	movhi.w	r0, #4294967295
 800daaa:	bf98      	it	ls
 800daac:	2001      	movls	r0, #1
 800daae:	4770      	bx	lr
 800dab0:	4608      	mov	r0, r1
 800dab2:	4770      	bx	lr

0800dab4 <fiprintf>:
 800dab4:	b40e      	push	{r1, r2, r3}
 800dab6:	b503      	push	{r0, r1, lr}
 800dab8:	4601      	mov	r1, r0
 800daba:	ab03      	add	r3, sp, #12
 800dabc:	4805      	ldr	r0, [pc, #20]	; (800dad4 <fiprintf+0x20>)
 800dabe:	f853 2b04 	ldr.w	r2, [r3], #4
 800dac2:	6800      	ldr	r0, [r0, #0]
 800dac4:	9301      	str	r3, [sp, #4]
 800dac6:	f000 f83f 	bl	800db48 <_vfiprintf_r>
 800daca:	b002      	add	sp, #8
 800dacc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dad0:	b003      	add	sp, #12
 800dad2:	4770      	bx	lr
 800dad4:	20000110 	.word	0x20000110

0800dad8 <abort>:
 800dad8:	b508      	push	{r3, lr}
 800dada:	2006      	movs	r0, #6
 800dadc:	f000 fa0c 	bl	800def8 <raise>
 800dae0:	2001      	movs	r0, #1
 800dae2:	f7f6 fd13 	bl	800450c <_exit>

0800dae6 <_malloc_usable_size_r>:
 800dae6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daea:	1f18      	subs	r0, r3, #4
 800daec:	2b00      	cmp	r3, #0
 800daee:	bfbc      	itt	lt
 800daf0:	580b      	ldrlt	r3, [r1, r0]
 800daf2:	18c0      	addlt	r0, r0, r3
 800daf4:	4770      	bx	lr

0800daf6 <__sfputc_r>:
 800daf6:	6893      	ldr	r3, [r2, #8]
 800daf8:	3b01      	subs	r3, #1
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	b410      	push	{r4}
 800dafe:	6093      	str	r3, [r2, #8]
 800db00:	da08      	bge.n	800db14 <__sfputc_r+0x1e>
 800db02:	6994      	ldr	r4, [r2, #24]
 800db04:	42a3      	cmp	r3, r4
 800db06:	db01      	blt.n	800db0c <__sfputc_r+0x16>
 800db08:	290a      	cmp	r1, #10
 800db0a:	d103      	bne.n	800db14 <__sfputc_r+0x1e>
 800db0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db10:	f000 b934 	b.w	800dd7c <__swbuf_r>
 800db14:	6813      	ldr	r3, [r2, #0]
 800db16:	1c58      	adds	r0, r3, #1
 800db18:	6010      	str	r0, [r2, #0]
 800db1a:	7019      	strb	r1, [r3, #0]
 800db1c:	4608      	mov	r0, r1
 800db1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <__sfputs_r>:
 800db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db26:	4606      	mov	r6, r0
 800db28:	460f      	mov	r7, r1
 800db2a:	4614      	mov	r4, r2
 800db2c:	18d5      	adds	r5, r2, r3
 800db2e:	42ac      	cmp	r4, r5
 800db30:	d101      	bne.n	800db36 <__sfputs_r+0x12>
 800db32:	2000      	movs	r0, #0
 800db34:	e007      	b.n	800db46 <__sfputs_r+0x22>
 800db36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db3a:	463a      	mov	r2, r7
 800db3c:	4630      	mov	r0, r6
 800db3e:	f7ff ffda 	bl	800daf6 <__sfputc_r>
 800db42:	1c43      	adds	r3, r0, #1
 800db44:	d1f3      	bne.n	800db2e <__sfputs_r+0xa>
 800db46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800db48 <_vfiprintf_r>:
 800db48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db4c:	460d      	mov	r5, r1
 800db4e:	b09d      	sub	sp, #116	; 0x74
 800db50:	4614      	mov	r4, r2
 800db52:	4698      	mov	r8, r3
 800db54:	4606      	mov	r6, r0
 800db56:	b118      	cbz	r0, 800db60 <_vfiprintf_r+0x18>
 800db58:	6a03      	ldr	r3, [r0, #32]
 800db5a:	b90b      	cbnz	r3, 800db60 <_vfiprintf_r+0x18>
 800db5c:	f7fe f8da 	bl	800bd14 <__sinit>
 800db60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db62:	07d9      	lsls	r1, r3, #31
 800db64:	d405      	bmi.n	800db72 <_vfiprintf_r+0x2a>
 800db66:	89ab      	ldrh	r3, [r5, #12]
 800db68:	059a      	lsls	r2, r3, #22
 800db6a:	d402      	bmi.n	800db72 <_vfiprintf_r+0x2a>
 800db6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db6e:	f7fe f9e8 	bl	800bf42 <__retarget_lock_acquire_recursive>
 800db72:	89ab      	ldrh	r3, [r5, #12]
 800db74:	071b      	lsls	r3, r3, #28
 800db76:	d501      	bpl.n	800db7c <_vfiprintf_r+0x34>
 800db78:	692b      	ldr	r3, [r5, #16]
 800db7a:	b99b      	cbnz	r3, 800dba4 <_vfiprintf_r+0x5c>
 800db7c:	4629      	mov	r1, r5
 800db7e:	4630      	mov	r0, r6
 800db80:	f000 f93a 	bl	800ddf8 <__swsetup_r>
 800db84:	b170      	cbz	r0, 800dba4 <_vfiprintf_r+0x5c>
 800db86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800db88:	07dc      	lsls	r4, r3, #31
 800db8a:	d504      	bpl.n	800db96 <_vfiprintf_r+0x4e>
 800db8c:	f04f 30ff 	mov.w	r0, #4294967295
 800db90:	b01d      	add	sp, #116	; 0x74
 800db92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800db96:	89ab      	ldrh	r3, [r5, #12]
 800db98:	0598      	lsls	r0, r3, #22
 800db9a:	d4f7      	bmi.n	800db8c <_vfiprintf_r+0x44>
 800db9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800db9e:	f7fe f9d1 	bl	800bf44 <__retarget_lock_release_recursive>
 800dba2:	e7f3      	b.n	800db8c <_vfiprintf_r+0x44>
 800dba4:	2300      	movs	r3, #0
 800dba6:	9309      	str	r3, [sp, #36]	; 0x24
 800dba8:	2320      	movs	r3, #32
 800dbaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbae:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbb2:	2330      	movs	r3, #48	; 0x30
 800dbb4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dd68 <_vfiprintf_r+0x220>
 800dbb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbbc:	f04f 0901 	mov.w	r9, #1
 800dbc0:	4623      	mov	r3, r4
 800dbc2:	469a      	mov	sl, r3
 800dbc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbc8:	b10a      	cbz	r2, 800dbce <_vfiprintf_r+0x86>
 800dbca:	2a25      	cmp	r2, #37	; 0x25
 800dbcc:	d1f9      	bne.n	800dbc2 <_vfiprintf_r+0x7a>
 800dbce:	ebba 0b04 	subs.w	fp, sl, r4
 800dbd2:	d00b      	beq.n	800dbec <_vfiprintf_r+0xa4>
 800dbd4:	465b      	mov	r3, fp
 800dbd6:	4622      	mov	r2, r4
 800dbd8:	4629      	mov	r1, r5
 800dbda:	4630      	mov	r0, r6
 800dbdc:	f7ff ffa2 	bl	800db24 <__sfputs_r>
 800dbe0:	3001      	adds	r0, #1
 800dbe2:	f000 80a9 	beq.w	800dd38 <_vfiprintf_r+0x1f0>
 800dbe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dbe8:	445a      	add	r2, fp
 800dbea:	9209      	str	r2, [sp, #36]	; 0x24
 800dbec:	f89a 3000 	ldrb.w	r3, [sl]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	f000 80a1 	beq.w	800dd38 <_vfiprintf_r+0x1f0>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	f04f 32ff 	mov.w	r2, #4294967295
 800dbfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc00:	f10a 0a01 	add.w	sl, sl, #1
 800dc04:	9304      	str	r3, [sp, #16]
 800dc06:	9307      	str	r3, [sp, #28]
 800dc08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc0c:	931a      	str	r3, [sp, #104]	; 0x68
 800dc0e:	4654      	mov	r4, sl
 800dc10:	2205      	movs	r2, #5
 800dc12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc16:	4854      	ldr	r0, [pc, #336]	; (800dd68 <_vfiprintf_r+0x220>)
 800dc18:	f7f2 fada 	bl	80001d0 <memchr>
 800dc1c:	9a04      	ldr	r2, [sp, #16]
 800dc1e:	b9d8      	cbnz	r0, 800dc58 <_vfiprintf_r+0x110>
 800dc20:	06d1      	lsls	r1, r2, #27
 800dc22:	bf44      	itt	mi
 800dc24:	2320      	movmi	r3, #32
 800dc26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc2a:	0713      	lsls	r3, r2, #28
 800dc2c:	bf44      	itt	mi
 800dc2e:	232b      	movmi	r3, #43	; 0x2b
 800dc30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc34:	f89a 3000 	ldrb.w	r3, [sl]
 800dc38:	2b2a      	cmp	r3, #42	; 0x2a
 800dc3a:	d015      	beq.n	800dc68 <_vfiprintf_r+0x120>
 800dc3c:	9a07      	ldr	r2, [sp, #28]
 800dc3e:	4654      	mov	r4, sl
 800dc40:	2000      	movs	r0, #0
 800dc42:	f04f 0c0a 	mov.w	ip, #10
 800dc46:	4621      	mov	r1, r4
 800dc48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc4c:	3b30      	subs	r3, #48	; 0x30
 800dc4e:	2b09      	cmp	r3, #9
 800dc50:	d94d      	bls.n	800dcee <_vfiprintf_r+0x1a6>
 800dc52:	b1b0      	cbz	r0, 800dc82 <_vfiprintf_r+0x13a>
 800dc54:	9207      	str	r2, [sp, #28]
 800dc56:	e014      	b.n	800dc82 <_vfiprintf_r+0x13a>
 800dc58:	eba0 0308 	sub.w	r3, r0, r8
 800dc5c:	fa09 f303 	lsl.w	r3, r9, r3
 800dc60:	4313      	orrs	r3, r2
 800dc62:	9304      	str	r3, [sp, #16]
 800dc64:	46a2      	mov	sl, r4
 800dc66:	e7d2      	b.n	800dc0e <_vfiprintf_r+0xc6>
 800dc68:	9b03      	ldr	r3, [sp, #12]
 800dc6a:	1d19      	adds	r1, r3, #4
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	9103      	str	r1, [sp, #12]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	bfbb      	ittet	lt
 800dc74:	425b      	neglt	r3, r3
 800dc76:	f042 0202 	orrlt.w	r2, r2, #2
 800dc7a:	9307      	strge	r3, [sp, #28]
 800dc7c:	9307      	strlt	r3, [sp, #28]
 800dc7e:	bfb8      	it	lt
 800dc80:	9204      	strlt	r2, [sp, #16]
 800dc82:	7823      	ldrb	r3, [r4, #0]
 800dc84:	2b2e      	cmp	r3, #46	; 0x2e
 800dc86:	d10c      	bne.n	800dca2 <_vfiprintf_r+0x15a>
 800dc88:	7863      	ldrb	r3, [r4, #1]
 800dc8a:	2b2a      	cmp	r3, #42	; 0x2a
 800dc8c:	d134      	bne.n	800dcf8 <_vfiprintf_r+0x1b0>
 800dc8e:	9b03      	ldr	r3, [sp, #12]
 800dc90:	1d1a      	adds	r2, r3, #4
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	9203      	str	r2, [sp, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	bfb8      	it	lt
 800dc9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc9e:	3402      	adds	r4, #2
 800dca0:	9305      	str	r3, [sp, #20]
 800dca2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dd78 <_vfiprintf_r+0x230>
 800dca6:	7821      	ldrb	r1, [r4, #0]
 800dca8:	2203      	movs	r2, #3
 800dcaa:	4650      	mov	r0, sl
 800dcac:	f7f2 fa90 	bl	80001d0 <memchr>
 800dcb0:	b138      	cbz	r0, 800dcc2 <_vfiprintf_r+0x17a>
 800dcb2:	9b04      	ldr	r3, [sp, #16]
 800dcb4:	eba0 000a 	sub.w	r0, r0, sl
 800dcb8:	2240      	movs	r2, #64	; 0x40
 800dcba:	4082      	lsls	r2, r0
 800dcbc:	4313      	orrs	r3, r2
 800dcbe:	3401      	adds	r4, #1
 800dcc0:	9304      	str	r3, [sp, #16]
 800dcc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcc6:	4829      	ldr	r0, [pc, #164]	; (800dd6c <_vfiprintf_r+0x224>)
 800dcc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dccc:	2206      	movs	r2, #6
 800dcce:	f7f2 fa7f 	bl	80001d0 <memchr>
 800dcd2:	2800      	cmp	r0, #0
 800dcd4:	d03f      	beq.n	800dd56 <_vfiprintf_r+0x20e>
 800dcd6:	4b26      	ldr	r3, [pc, #152]	; (800dd70 <_vfiprintf_r+0x228>)
 800dcd8:	bb1b      	cbnz	r3, 800dd22 <_vfiprintf_r+0x1da>
 800dcda:	9b03      	ldr	r3, [sp, #12]
 800dcdc:	3307      	adds	r3, #7
 800dcde:	f023 0307 	bic.w	r3, r3, #7
 800dce2:	3308      	adds	r3, #8
 800dce4:	9303      	str	r3, [sp, #12]
 800dce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce8:	443b      	add	r3, r7
 800dcea:	9309      	str	r3, [sp, #36]	; 0x24
 800dcec:	e768      	b.n	800dbc0 <_vfiprintf_r+0x78>
 800dcee:	fb0c 3202 	mla	r2, ip, r2, r3
 800dcf2:	460c      	mov	r4, r1
 800dcf4:	2001      	movs	r0, #1
 800dcf6:	e7a6      	b.n	800dc46 <_vfiprintf_r+0xfe>
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	3401      	adds	r4, #1
 800dcfc:	9305      	str	r3, [sp, #20]
 800dcfe:	4619      	mov	r1, r3
 800dd00:	f04f 0c0a 	mov.w	ip, #10
 800dd04:	4620      	mov	r0, r4
 800dd06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd0a:	3a30      	subs	r2, #48	; 0x30
 800dd0c:	2a09      	cmp	r2, #9
 800dd0e:	d903      	bls.n	800dd18 <_vfiprintf_r+0x1d0>
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d0c6      	beq.n	800dca2 <_vfiprintf_r+0x15a>
 800dd14:	9105      	str	r1, [sp, #20]
 800dd16:	e7c4      	b.n	800dca2 <_vfiprintf_r+0x15a>
 800dd18:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	2301      	movs	r3, #1
 800dd20:	e7f0      	b.n	800dd04 <_vfiprintf_r+0x1bc>
 800dd22:	ab03      	add	r3, sp, #12
 800dd24:	9300      	str	r3, [sp, #0]
 800dd26:	462a      	mov	r2, r5
 800dd28:	4b12      	ldr	r3, [pc, #72]	; (800dd74 <_vfiprintf_r+0x22c>)
 800dd2a:	a904      	add	r1, sp, #16
 800dd2c:	4630      	mov	r0, r6
 800dd2e:	f7fd fb9f 	bl	800b470 <_printf_float>
 800dd32:	4607      	mov	r7, r0
 800dd34:	1c78      	adds	r0, r7, #1
 800dd36:	d1d6      	bne.n	800dce6 <_vfiprintf_r+0x19e>
 800dd38:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd3a:	07d9      	lsls	r1, r3, #31
 800dd3c:	d405      	bmi.n	800dd4a <_vfiprintf_r+0x202>
 800dd3e:	89ab      	ldrh	r3, [r5, #12]
 800dd40:	059a      	lsls	r2, r3, #22
 800dd42:	d402      	bmi.n	800dd4a <_vfiprintf_r+0x202>
 800dd44:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd46:	f7fe f8fd 	bl	800bf44 <__retarget_lock_release_recursive>
 800dd4a:	89ab      	ldrh	r3, [r5, #12]
 800dd4c:	065b      	lsls	r3, r3, #25
 800dd4e:	f53f af1d 	bmi.w	800db8c <_vfiprintf_r+0x44>
 800dd52:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd54:	e71c      	b.n	800db90 <_vfiprintf_r+0x48>
 800dd56:	ab03      	add	r3, sp, #12
 800dd58:	9300      	str	r3, [sp, #0]
 800dd5a:	462a      	mov	r2, r5
 800dd5c:	4b05      	ldr	r3, [pc, #20]	; (800dd74 <_vfiprintf_r+0x22c>)
 800dd5e:	a904      	add	r1, sp, #16
 800dd60:	4630      	mov	r0, r6
 800dd62:	f7fd fe29 	bl	800b9b8 <_printf_i>
 800dd66:	e7e4      	b.n	800dd32 <_vfiprintf_r+0x1ea>
 800dd68:	080115e4 	.word	0x080115e4
 800dd6c:	080115ee 	.word	0x080115ee
 800dd70:	0800b471 	.word	0x0800b471
 800dd74:	0800db25 	.word	0x0800db25
 800dd78:	080115ea 	.word	0x080115ea

0800dd7c <__swbuf_r>:
 800dd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd7e:	460e      	mov	r6, r1
 800dd80:	4614      	mov	r4, r2
 800dd82:	4605      	mov	r5, r0
 800dd84:	b118      	cbz	r0, 800dd8e <__swbuf_r+0x12>
 800dd86:	6a03      	ldr	r3, [r0, #32]
 800dd88:	b90b      	cbnz	r3, 800dd8e <__swbuf_r+0x12>
 800dd8a:	f7fd ffc3 	bl	800bd14 <__sinit>
 800dd8e:	69a3      	ldr	r3, [r4, #24]
 800dd90:	60a3      	str	r3, [r4, #8]
 800dd92:	89a3      	ldrh	r3, [r4, #12]
 800dd94:	071a      	lsls	r2, r3, #28
 800dd96:	d525      	bpl.n	800dde4 <__swbuf_r+0x68>
 800dd98:	6923      	ldr	r3, [r4, #16]
 800dd9a:	b31b      	cbz	r3, 800dde4 <__swbuf_r+0x68>
 800dd9c:	6823      	ldr	r3, [r4, #0]
 800dd9e:	6922      	ldr	r2, [r4, #16]
 800dda0:	1a98      	subs	r0, r3, r2
 800dda2:	6963      	ldr	r3, [r4, #20]
 800dda4:	b2f6      	uxtb	r6, r6
 800dda6:	4283      	cmp	r3, r0
 800dda8:	4637      	mov	r7, r6
 800ddaa:	dc04      	bgt.n	800ddb6 <__swbuf_r+0x3a>
 800ddac:	4621      	mov	r1, r4
 800ddae:	4628      	mov	r0, r5
 800ddb0:	f7ff fd9e 	bl	800d8f0 <_fflush_r>
 800ddb4:	b9e0      	cbnz	r0, 800ddf0 <__swbuf_r+0x74>
 800ddb6:	68a3      	ldr	r3, [r4, #8]
 800ddb8:	3b01      	subs	r3, #1
 800ddba:	60a3      	str	r3, [r4, #8]
 800ddbc:	6823      	ldr	r3, [r4, #0]
 800ddbe:	1c5a      	adds	r2, r3, #1
 800ddc0:	6022      	str	r2, [r4, #0]
 800ddc2:	701e      	strb	r6, [r3, #0]
 800ddc4:	6962      	ldr	r2, [r4, #20]
 800ddc6:	1c43      	adds	r3, r0, #1
 800ddc8:	429a      	cmp	r2, r3
 800ddca:	d004      	beq.n	800ddd6 <__swbuf_r+0x5a>
 800ddcc:	89a3      	ldrh	r3, [r4, #12]
 800ddce:	07db      	lsls	r3, r3, #31
 800ddd0:	d506      	bpl.n	800dde0 <__swbuf_r+0x64>
 800ddd2:	2e0a      	cmp	r6, #10
 800ddd4:	d104      	bne.n	800dde0 <__swbuf_r+0x64>
 800ddd6:	4621      	mov	r1, r4
 800ddd8:	4628      	mov	r0, r5
 800ddda:	f7ff fd89 	bl	800d8f0 <_fflush_r>
 800ddde:	b938      	cbnz	r0, 800ddf0 <__swbuf_r+0x74>
 800dde0:	4638      	mov	r0, r7
 800dde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dde4:	4621      	mov	r1, r4
 800dde6:	4628      	mov	r0, r5
 800dde8:	f000 f806 	bl	800ddf8 <__swsetup_r>
 800ddec:	2800      	cmp	r0, #0
 800ddee:	d0d5      	beq.n	800dd9c <__swbuf_r+0x20>
 800ddf0:	f04f 37ff 	mov.w	r7, #4294967295
 800ddf4:	e7f4      	b.n	800dde0 <__swbuf_r+0x64>
	...

0800ddf8 <__swsetup_r>:
 800ddf8:	b538      	push	{r3, r4, r5, lr}
 800ddfa:	4b2a      	ldr	r3, [pc, #168]	; (800dea4 <__swsetup_r+0xac>)
 800ddfc:	4605      	mov	r5, r0
 800ddfe:	6818      	ldr	r0, [r3, #0]
 800de00:	460c      	mov	r4, r1
 800de02:	b118      	cbz	r0, 800de0c <__swsetup_r+0x14>
 800de04:	6a03      	ldr	r3, [r0, #32]
 800de06:	b90b      	cbnz	r3, 800de0c <__swsetup_r+0x14>
 800de08:	f7fd ff84 	bl	800bd14 <__sinit>
 800de0c:	89a3      	ldrh	r3, [r4, #12]
 800de0e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de12:	0718      	lsls	r0, r3, #28
 800de14:	d422      	bmi.n	800de5c <__swsetup_r+0x64>
 800de16:	06d9      	lsls	r1, r3, #27
 800de18:	d407      	bmi.n	800de2a <__swsetup_r+0x32>
 800de1a:	2309      	movs	r3, #9
 800de1c:	602b      	str	r3, [r5, #0]
 800de1e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800de22:	81a3      	strh	r3, [r4, #12]
 800de24:	f04f 30ff 	mov.w	r0, #4294967295
 800de28:	e034      	b.n	800de94 <__swsetup_r+0x9c>
 800de2a:	0758      	lsls	r0, r3, #29
 800de2c:	d512      	bpl.n	800de54 <__swsetup_r+0x5c>
 800de2e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de30:	b141      	cbz	r1, 800de44 <__swsetup_r+0x4c>
 800de32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de36:	4299      	cmp	r1, r3
 800de38:	d002      	beq.n	800de40 <__swsetup_r+0x48>
 800de3a:	4628      	mov	r0, r5
 800de3c:	f7fe fefe 	bl	800cc3c <_free_r>
 800de40:	2300      	movs	r3, #0
 800de42:	6363      	str	r3, [r4, #52]	; 0x34
 800de44:	89a3      	ldrh	r3, [r4, #12]
 800de46:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800de4a:	81a3      	strh	r3, [r4, #12]
 800de4c:	2300      	movs	r3, #0
 800de4e:	6063      	str	r3, [r4, #4]
 800de50:	6923      	ldr	r3, [r4, #16]
 800de52:	6023      	str	r3, [r4, #0]
 800de54:	89a3      	ldrh	r3, [r4, #12]
 800de56:	f043 0308 	orr.w	r3, r3, #8
 800de5a:	81a3      	strh	r3, [r4, #12]
 800de5c:	6923      	ldr	r3, [r4, #16]
 800de5e:	b94b      	cbnz	r3, 800de74 <__swsetup_r+0x7c>
 800de60:	89a3      	ldrh	r3, [r4, #12]
 800de62:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800de66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800de6a:	d003      	beq.n	800de74 <__swsetup_r+0x7c>
 800de6c:	4621      	mov	r1, r4
 800de6e:	4628      	mov	r0, r5
 800de70:	f000 f884 	bl	800df7c <__smakebuf_r>
 800de74:	89a0      	ldrh	r0, [r4, #12]
 800de76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800de7a:	f010 0301 	ands.w	r3, r0, #1
 800de7e:	d00a      	beq.n	800de96 <__swsetup_r+0x9e>
 800de80:	2300      	movs	r3, #0
 800de82:	60a3      	str	r3, [r4, #8]
 800de84:	6963      	ldr	r3, [r4, #20]
 800de86:	425b      	negs	r3, r3
 800de88:	61a3      	str	r3, [r4, #24]
 800de8a:	6923      	ldr	r3, [r4, #16]
 800de8c:	b943      	cbnz	r3, 800dea0 <__swsetup_r+0xa8>
 800de8e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800de92:	d1c4      	bne.n	800de1e <__swsetup_r+0x26>
 800de94:	bd38      	pop	{r3, r4, r5, pc}
 800de96:	0781      	lsls	r1, r0, #30
 800de98:	bf58      	it	pl
 800de9a:	6963      	ldrpl	r3, [r4, #20]
 800de9c:	60a3      	str	r3, [r4, #8]
 800de9e:	e7f4      	b.n	800de8a <__swsetup_r+0x92>
 800dea0:	2000      	movs	r0, #0
 800dea2:	e7f7      	b.n	800de94 <__swsetup_r+0x9c>
 800dea4:	20000110 	.word	0x20000110

0800dea8 <_raise_r>:
 800dea8:	291f      	cmp	r1, #31
 800deaa:	b538      	push	{r3, r4, r5, lr}
 800deac:	4604      	mov	r4, r0
 800deae:	460d      	mov	r5, r1
 800deb0:	d904      	bls.n	800debc <_raise_r+0x14>
 800deb2:	2316      	movs	r3, #22
 800deb4:	6003      	str	r3, [r0, #0]
 800deb6:	f04f 30ff 	mov.w	r0, #4294967295
 800deba:	bd38      	pop	{r3, r4, r5, pc}
 800debc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800debe:	b112      	cbz	r2, 800dec6 <_raise_r+0x1e>
 800dec0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dec4:	b94b      	cbnz	r3, 800deda <_raise_r+0x32>
 800dec6:	4620      	mov	r0, r4
 800dec8:	f000 f830 	bl	800df2c <_getpid_r>
 800decc:	462a      	mov	r2, r5
 800dece:	4601      	mov	r1, r0
 800ded0:	4620      	mov	r0, r4
 800ded2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ded6:	f000 b817 	b.w	800df08 <_kill_r>
 800deda:	2b01      	cmp	r3, #1
 800dedc:	d00a      	beq.n	800def4 <_raise_r+0x4c>
 800dede:	1c59      	adds	r1, r3, #1
 800dee0:	d103      	bne.n	800deea <_raise_r+0x42>
 800dee2:	2316      	movs	r3, #22
 800dee4:	6003      	str	r3, [r0, #0]
 800dee6:	2001      	movs	r0, #1
 800dee8:	e7e7      	b.n	800deba <_raise_r+0x12>
 800deea:	2400      	movs	r4, #0
 800deec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800def0:	4628      	mov	r0, r5
 800def2:	4798      	blx	r3
 800def4:	2000      	movs	r0, #0
 800def6:	e7e0      	b.n	800deba <_raise_r+0x12>

0800def8 <raise>:
 800def8:	4b02      	ldr	r3, [pc, #8]	; (800df04 <raise+0xc>)
 800defa:	4601      	mov	r1, r0
 800defc:	6818      	ldr	r0, [r3, #0]
 800defe:	f7ff bfd3 	b.w	800dea8 <_raise_r>
 800df02:	bf00      	nop
 800df04:	20000110 	.word	0x20000110

0800df08 <_kill_r>:
 800df08:	b538      	push	{r3, r4, r5, lr}
 800df0a:	4d07      	ldr	r5, [pc, #28]	; (800df28 <_kill_r+0x20>)
 800df0c:	2300      	movs	r3, #0
 800df0e:	4604      	mov	r4, r0
 800df10:	4608      	mov	r0, r1
 800df12:	4611      	mov	r1, r2
 800df14:	602b      	str	r3, [r5, #0]
 800df16:	f7f6 fae9 	bl	80044ec <_kill>
 800df1a:	1c43      	adds	r3, r0, #1
 800df1c:	d102      	bne.n	800df24 <_kill_r+0x1c>
 800df1e:	682b      	ldr	r3, [r5, #0]
 800df20:	b103      	cbz	r3, 800df24 <_kill_r+0x1c>
 800df22:	6023      	str	r3, [r4, #0]
 800df24:	bd38      	pop	{r3, r4, r5, pc}
 800df26:	bf00      	nop
 800df28:	2000674c 	.word	0x2000674c

0800df2c <_getpid_r>:
 800df2c:	f7f6 bad6 	b.w	80044dc <_getpid>

0800df30 <__swhatbuf_r>:
 800df30:	b570      	push	{r4, r5, r6, lr}
 800df32:	460c      	mov	r4, r1
 800df34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df38:	2900      	cmp	r1, #0
 800df3a:	b096      	sub	sp, #88	; 0x58
 800df3c:	4615      	mov	r5, r2
 800df3e:	461e      	mov	r6, r3
 800df40:	da0d      	bge.n	800df5e <__swhatbuf_r+0x2e>
 800df42:	89a3      	ldrh	r3, [r4, #12]
 800df44:	f013 0f80 	tst.w	r3, #128	; 0x80
 800df48:	f04f 0100 	mov.w	r1, #0
 800df4c:	bf0c      	ite	eq
 800df4e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800df52:	2340      	movne	r3, #64	; 0x40
 800df54:	2000      	movs	r0, #0
 800df56:	6031      	str	r1, [r6, #0]
 800df58:	602b      	str	r3, [r5, #0]
 800df5a:	b016      	add	sp, #88	; 0x58
 800df5c:	bd70      	pop	{r4, r5, r6, pc}
 800df5e:	466a      	mov	r2, sp
 800df60:	f000 f848 	bl	800dff4 <_fstat_r>
 800df64:	2800      	cmp	r0, #0
 800df66:	dbec      	blt.n	800df42 <__swhatbuf_r+0x12>
 800df68:	9901      	ldr	r1, [sp, #4]
 800df6a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800df6e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800df72:	4259      	negs	r1, r3
 800df74:	4159      	adcs	r1, r3
 800df76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800df7a:	e7eb      	b.n	800df54 <__swhatbuf_r+0x24>

0800df7c <__smakebuf_r>:
 800df7c:	898b      	ldrh	r3, [r1, #12]
 800df7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800df80:	079d      	lsls	r5, r3, #30
 800df82:	4606      	mov	r6, r0
 800df84:	460c      	mov	r4, r1
 800df86:	d507      	bpl.n	800df98 <__smakebuf_r+0x1c>
 800df88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800df8c:	6023      	str	r3, [r4, #0]
 800df8e:	6123      	str	r3, [r4, #16]
 800df90:	2301      	movs	r3, #1
 800df92:	6163      	str	r3, [r4, #20]
 800df94:	b002      	add	sp, #8
 800df96:	bd70      	pop	{r4, r5, r6, pc}
 800df98:	ab01      	add	r3, sp, #4
 800df9a:	466a      	mov	r2, sp
 800df9c:	f7ff ffc8 	bl	800df30 <__swhatbuf_r>
 800dfa0:	9900      	ldr	r1, [sp, #0]
 800dfa2:	4605      	mov	r5, r0
 800dfa4:	4630      	mov	r0, r6
 800dfa6:	f7fe febd 	bl	800cd24 <_malloc_r>
 800dfaa:	b948      	cbnz	r0, 800dfc0 <__smakebuf_r+0x44>
 800dfac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dfb0:	059a      	lsls	r2, r3, #22
 800dfb2:	d4ef      	bmi.n	800df94 <__smakebuf_r+0x18>
 800dfb4:	f023 0303 	bic.w	r3, r3, #3
 800dfb8:	f043 0302 	orr.w	r3, r3, #2
 800dfbc:	81a3      	strh	r3, [r4, #12]
 800dfbe:	e7e3      	b.n	800df88 <__smakebuf_r+0xc>
 800dfc0:	89a3      	ldrh	r3, [r4, #12]
 800dfc2:	6020      	str	r0, [r4, #0]
 800dfc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dfc8:	81a3      	strh	r3, [r4, #12]
 800dfca:	9b00      	ldr	r3, [sp, #0]
 800dfcc:	6163      	str	r3, [r4, #20]
 800dfce:	9b01      	ldr	r3, [sp, #4]
 800dfd0:	6120      	str	r0, [r4, #16]
 800dfd2:	b15b      	cbz	r3, 800dfec <__smakebuf_r+0x70>
 800dfd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dfd8:	4630      	mov	r0, r6
 800dfda:	f000 f81d 	bl	800e018 <_isatty_r>
 800dfde:	b128      	cbz	r0, 800dfec <__smakebuf_r+0x70>
 800dfe0:	89a3      	ldrh	r3, [r4, #12]
 800dfe2:	f023 0303 	bic.w	r3, r3, #3
 800dfe6:	f043 0301 	orr.w	r3, r3, #1
 800dfea:	81a3      	strh	r3, [r4, #12]
 800dfec:	89a3      	ldrh	r3, [r4, #12]
 800dfee:	431d      	orrs	r5, r3
 800dff0:	81a5      	strh	r5, [r4, #12]
 800dff2:	e7cf      	b.n	800df94 <__smakebuf_r+0x18>

0800dff4 <_fstat_r>:
 800dff4:	b538      	push	{r3, r4, r5, lr}
 800dff6:	4d07      	ldr	r5, [pc, #28]	; (800e014 <_fstat_r+0x20>)
 800dff8:	2300      	movs	r3, #0
 800dffa:	4604      	mov	r4, r0
 800dffc:	4608      	mov	r0, r1
 800dffe:	4611      	mov	r1, r2
 800e000:	602b      	str	r3, [r5, #0]
 800e002:	f7f6 fad2 	bl	80045aa <_fstat>
 800e006:	1c43      	adds	r3, r0, #1
 800e008:	d102      	bne.n	800e010 <_fstat_r+0x1c>
 800e00a:	682b      	ldr	r3, [r5, #0]
 800e00c:	b103      	cbz	r3, 800e010 <_fstat_r+0x1c>
 800e00e:	6023      	str	r3, [r4, #0]
 800e010:	bd38      	pop	{r3, r4, r5, pc}
 800e012:	bf00      	nop
 800e014:	2000674c 	.word	0x2000674c

0800e018 <_isatty_r>:
 800e018:	b538      	push	{r3, r4, r5, lr}
 800e01a:	4d06      	ldr	r5, [pc, #24]	; (800e034 <_isatty_r+0x1c>)
 800e01c:	2300      	movs	r3, #0
 800e01e:	4604      	mov	r4, r0
 800e020:	4608      	mov	r0, r1
 800e022:	602b      	str	r3, [r5, #0]
 800e024:	f7f6 fad1 	bl	80045ca <_isatty>
 800e028:	1c43      	adds	r3, r0, #1
 800e02a:	d102      	bne.n	800e032 <_isatty_r+0x1a>
 800e02c:	682b      	ldr	r3, [r5, #0]
 800e02e:	b103      	cbz	r3, 800e032 <_isatty_r+0x1a>
 800e030:	6023      	str	r3, [r4, #0]
 800e032:	bd38      	pop	{r3, r4, r5, pc}
 800e034:	2000674c 	.word	0x2000674c

0800e038 <fmod>:
 800e038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e03a:	ed2d 8b02 	vpush	{d8}
 800e03e:	ec57 6b10 	vmov	r6, r7, d0
 800e042:	ec55 4b11 	vmov	r4, r5, d1
 800e046:	f000 f8e9 	bl	800e21c <__ieee754_fmod>
 800e04a:	4622      	mov	r2, r4
 800e04c:	462b      	mov	r3, r5
 800e04e:	4630      	mov	r0, r6
 800e050:	4639      	mov	r1, r7
 800e052:	eeb0 8a40 	vmov.f32	s16, s0
 800e056:	eef0 8a60 	vmov.f32	s17, s1
 800e05a:	f7f2 fd67 	bl	8000b2c <__aeabi_dcmpun>
 800e05e:	b990      	cbnz	r0, 800e086 <fmod+0x4e>
 800e060:	2200      	movs	r2, #0
 800e062:	2300      	movs	r3, #0
 800e064:	4620      	mov	r0, r4
 800e066:	4629      	mov	r1, r5
 800e068:	f7f2 fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e06c:	b158      	cbz	r0, 800e086 <fmod+0x4e>
 800e06e:	f7fd ff3d 	bl	800beec <__errno>
 800e072:	2321      	movs	r3, #33	; 0x21
 800e074:	6003      	str	r3, [r0, #0]
 800e076:	2200      	movs	r2, #0
 800e078:	2300      	movs	r3, #0
 800e07a:	4610      	mov	r0, r2
 800e07c:	4619      	mov	r1, r3
 800e07e:	f7f2 fbe5 	bl	800084c <__aeabi_ddiv>
 800e082:	ec41 0b18 	vmov	d8, r0, r1
 800e086:	eeb0 0a48 	vmov.f32	s0, s16
 800e08a:	eef0 0a68 	vmov.f32	s1, s17
 800e08e:	ecbd 8b02 	vpop	{d8}
 800e092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e094 <pow>:
 800e094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e096:	ed2d 8b02 	vpush	{d8}
 800e09a:	eeb0 8a40 	vmov.f32	s16, s0
 800e09e:	eef0 8a60 	vmov.f32	s17, s1
 800e0a2:	ec55 4b11 	vmov	r4, r5, d1
 800e0a6:	f000 f9c7 	bl	800e438 <__ieee754_pow>
 800e0aa:	4622      	mov	r2, r4
 800e0ac:	462b      	mov	r3, r5
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	4629      	mov	r1, r5
 800e0b2:	ec57 6b10 	vmov	r6, r7, d0
 800e0b6:	f7f2 fd39 	bl	8000b2c <__aeabi_dcmpun>
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	d13b      	bne.n	800e136 <pow+0xa2>
 800e0be:	ec51 0b18 	vmov	r0, r1, d8
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	f7f2 fcff 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0ca:	b1b8      	cbz	r0, 800e0fc <pow+0x68>
 800e0cc:	2200      	movs	r2, #0
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	4620      	mov	r0, r4
 800e0d2:	4629      	mov	r1, r5
 800e0d4:	f7f2 fcf8 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0d8:	2800      	cmp	r0, #0
 800e0da:	d146      	bne.n	800e16a <pow+0xd6>
 800e0dc:	ec45 4b10 	vmov	d0, r4, r5
 800e0e0:	f000 f848 	bl	800e174 <finite>
 800e0e4:	b338      	cbz	r0, 800e136 <pow+0xa2>
 800e0e6:	2200      	movs	r2, #0
 800e0e8:	2300      	movs	r3, #0
 800e0ea:	4620      	mov	r0, r4
 800e0ec:	4629      	mov	r1, r5
 800e0ee:	f7f2 fcf5 	bl	8000adc <__aeabi_dcmplt>
 800e0f2:	b300      	cbz	r0, 800e136 <pow+0xa2>
 800e0f4:	f7fd fefa 	bl	800beec <__errno>
 800e0f8:	2322      	movs	r3, #34	; 0x22
 800e0fa:	e01b      	b.n	800e134 <pow+0xa0>
 800e0fc:	ec47 6b10 	vmov	d0, r6, r7
 800e100:	f000 f838 	bl	800e174 <finite>
 800e104:	b9e0      	cbnz	r0, 800e140 <pow+0xac>
 800e106:	eeb0 0a48 	vmov.f32	s0, s16
 800e10a:	eef0 0a68 	vmov.f32	s1, s17
 800e10e:	f000 f831 	bl	800e174 <finite>
 800e112:	b1a8      	cbz	r0, 800e140 <pow+0xac>
 800e114:	ec45 4b10 	vmov	d0, r4, r5
 800e118:	f000 f82c 	bl	800e174 <finite>
 800e11c:	b180      	cbz	r0, 800e140 <pow+0xac>
 800e11e:	4632      	mov	r2, r6
 800e120:	463b      	mov	r3, r7
 800e122:	4630      	mov	r0, r6
 800e124:	4639      	mov	r1, r7
 800e126:	f7f2 fd01 	bl	8000b2c <__aeabi_dcmpun>
 800e12a:	2800      	cmp	r0, #0
 800e12c:	d0e2      	beq.n	800e0f4 <pow+0x60>
 800e12e:	f7fd fedd 	bl	800beec <__errno>
 800e132:	2321      	movs	r3, #33	; 0x21
 800e134:	6003      	str	r3, [r0, #0]
 800e136:	ecbd 8b02 	vpop	{d8}
 800e13a:	ec47 6b10 	vmov	d0, r6, r7
 800e13e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e140:	2200      	movs	r2, #0
 800e142:	2300      	movs	r3, #0
 800e144:	4630      	mov	r0, r6
 800e146:	4639      	mov	r1, r7
 800e148:	f7f2 fcbe 	bl	8000ac8 <__aeabi_dcmpeq>
 800e14c:	2800      	cmp	r0, #0
 800e14e:	d0f2      	beq.n	800e136 <pow+0xa2>
 800e150:	eeb0 0a48 	vmov.f32	s0, s16
 800e154:	eef0 0a68 	vmov.f32	s1, s17
 800e158:	f000 f80c 	bl	800e174 <finite>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	d0ea      	beq.n	800e136 <pow+0xa2>
 800e160:	ec45 4b10 	vmov	d0, r4, r5
 800e164:	f000 f806 	bl	800e174 <finite>
 800e168:	e7c3      	b.n	800e0f2 <pow+0x5e>
 800e16a:	4f01      	ldr	r7, [pc, #4]	; (800e170 <pow+0xdc>)
 800e16c:	2600      	movs	r6, #0
 800e16e:	e7e2      	b.n	800e136 <pow+0xa2>
 800e170:	3ff00000 	.word	0x3ff00000

0800e174 <finite>:
 800e174:	b082      	sub	sp, #8
 800e176:	ed8d 0b00 	vstr	d0, [sp]
 800e17a:	9801      	ldr	r0, [sp, #4]
 800e17c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e180:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e184:	0fc0      	lsrs	r0, r0, #31
 800e186:	b002      	add	sp, #8
 800e188:	4770      	bx	lr
	...

0800e18c <round>:
 800e18c:	ec53 2b10 	vmov	r2, r3, d0
 800e190:	b570      	push	{r4, r5, r6, lr}
 800e192:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800e196:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800e19a:	2813      	cmp	r0, #19
 800e19c:	ee10 5a10 	vmov	r5, s0
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	dc18      	bgt.n	800e1d6 <round+0x4a>
 800e1a4:	2800      	cmp	r0, #0
 800e1a6:	da09      	bge.n	800e1bc <round+0x30>
 800e1a8:	3001      	adds	r0, #1
 800e1aa:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800e1ae:	d103      	bne.n	800e1b8 <round+0x2c>
 800e1b0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800e1b4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800e1b8:	2300      	movs	r3, #0
 800e1ba:	e02a      	b.n	800e212 <round+0x86>
 800e1bc:	4c16      	ldr	r4, [pc, #88]	; (800e218 <round+0x8c>)
 800e1be:	4104      	asrs	r4, r0
 800e1c0:	ea03 0604 	and.w	r6, r3, r4
 800e1c4:	4316      	orrs	r6, r2
 800e1c6:	d011      	beq.n	800e1ec <round+0x60>
 800e1c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800e1cc:	4103      	asrs	r3, r0
 800e1ce:	440b      	add	r3, r1
 800e1d0:	ea23 0104 	bic.w	r1, r3, r4
 800e1d4:	e7f0      	b.n	800e1b8 <round+0x2c>
 800e1d6:	2833      	cmp	r0, #51	; 0x33
 800e1d8:	dd0b      	ble.n	800e1f2 <round+0x66>
 800e1da:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e1de:	d105      	bne.n	800e1ec <round+0x60>
 800e1e0:	ee10 0a10 	vmov	r0, s0
 800e1e4:	f7f2 f852 	bl	800028c <__adddf3>
 800e1e8:	4602      	mov	r2, r0
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	ec43 2b10 	vmov	d0, r2, r3
 800e1f0:	bd70      	pop	{r4, r5, r6, pc}
 800e1f2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800e1f6:	f04f 34ff 	mov.w	r4, #4294967295
 800e1fa:	40f4      	lsrs	r4, r6
 800e1fc:	4214      	tst	r4, r2
 800e1fe:	d0f5      	beq.n	800e1ec <round+0x60>
 800e200:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800e204:	2301      	movs	r3, #1
 800e206:	4083      	lsls	r3, r0
 800e208:	195b      	adds	r3, r3, r5
 800e20a:	bf28      	it	cs
 800e20c:	3101      	addcs	r1, #1
 800e20e:	ea23 0304 	bic.w	r3, r3, r4
 800e212:	461a      	mov	r2, r3
 800e214:	460b      	mov	r3, r1
 800e216:	e7e9      	b.n	800e1ec <round+0x60>
 800e218:	000fffff 	.word	0x000fffff

0800e21c <__ieee754_fmod>:
 800e21c:	ec53 2b11 	vmov	r2, r3, d1
 800e220:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800e224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e228:	ea5c 0402 	orrs.w	r4, ip, r2
 800e22c:	ec51 0b10 	vmov	r0, r1, d0
 800e230:	ee11 7a10 	vmov	r7, s2
 800e234:	ee11 ea10 	vmov	lr, s2
 800e238:	461e      	mov	r6, r3
 800e23a:	d00c      	beq.n	800e256 <__ieee754_fmod+0x3a>
 800e23c:	4c78      	ldr	r4, [pc, #480]	; (800e420 <__ieee754_fmod+0x204>)
 800e23e:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 800e242:	45a0      	cmp	r8, r4
 800e244:	4689      	mov	r9, r1
 800e246:	dc06      	bgt.n	800e256 <__ieee754_fmod+0x3a>
 800e248:	4254      	negs	r4, r2
 800e24a:	4d76      	ldr	r5, [pc, #472]	; (800e424 <__ieee754_fmod+0x208>)
 800e24c:	4314      	orrs	r4, r2
 800e24e:	ea4c 74d4 	orr.w	r4, ip, r4, lsr #31
 800e252:	42ac      	cmp	r4, r5
 800e254:	d909      	bls.n	800e26a <__ieee754_fmod+0x4e>
 800e256:	f7f2 f9cf 	bl	80005f8 <__aeabi_dmul>
 800e25a:	4602      	mov	r2, r0
 800e25c:	460b      	mov	r3, r1
 800e25e:	f7f2 faf5 	bl	800084c <__aeabi_ddiv>
 800e262:	ec41 0b10 	vmov	d0, r0, r1
 800e266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e26a:	45e0      	cmp	r8, ip
 800e26c:	ee10 aa10 	vmov	sl, s0
 800e270:	ee10 4a10 	vmov	r4, s0
 800e274:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e278:	dc09      	bgt.n	800e28e <__ieee754_fmod+0x72>
 800e27a:	dbf2      	blt.n	800e262 <__ieee754_fmod+0x46>
 800e27c:	4290      	cmp	r0, r2
 800e27e:	d3f0      	bcc.n	800e262 <__ieee754_fmod+0x46>
 800e280:	d105      	bne.n	800e28e <__ieee754_fmod+0x72>
 800e282:	4b69      	ldr	r3, [pc, #420]	; (800e428 <__ieee754_fmod+0x20c>)
 800e284:	eb03 7315 	add.w	r3, r3, r5, lsr #28
 800e288:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e28c:	e7e9      	b.n	800e262 <__ieee754_fmod+0x46>
 800e28e:	4a65      	ldr	r2, [pc, #404]	; (800e424 <__ieee754_fmod+0x208>)
 800e290:	ea19 0f02 	tst.w	r9, r2
 800e294:	d148      	bne.n	800e328 <__ieee754_fmod+0x10c>
 800e296:	f1b8 0f00 	cmp.w	r8, #0
 800e29a:	d13d      	bne.n	800e318 <__ieee754_fmod+0xfc>
 800e29c:	4963      	ldr	r1, [pc, #396]	; (800e42c <__ieee754_fmod+0x210>)
 800e29e:	4653      	mov	r3, sl
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	dc36      	bgt.n	800e312 <__ieee754_fmod+0xf6>
 800e2a4:	4216      	tst	r6, r2
 800e2a6:	d14f      	bne.n	800e348 <__ieee754_fmod+0x12c>
 800e2a8:	f1bc 0f00 	cmp.w	ip, #0
 800e2ac:	d144      	bne.n	800e338 <__ieee754_fmod+0x11c>
 800e2ae:	4a5f      	ldr	r2, [pc, #380]	; (800e42c <__ieee754_fmod+0x210>)
 800e2b0:	463b      	mov	r3, r7
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	dc3d      	bgt.n	800e332 <__ieee754_fmod+0x116>
 800e2b6:	485e      	ldr	r0, [pc, #376]	; (800e430 <__ieee754_fmod+0x214>)
 800e2b8:	4281      	cmp	r1, r0
 800e2ba:	db4a      	blt.n	800e352 <__ieee754_fmod+0x136>
 800e2bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e2c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e2c4:	485a      	ldr	r0, [pc, #360]	; (800e430 <__ieee754_fmod+0x214>)
 800e2c6:	4282      	cmp	r2, r0
 800e2c8:	db57      	blt.n	800e37a <__ieee754_fmod+0x15e>
 800e2ca:	f3c6 0613 	ubfx	r6, r6, #0, #20
 800e2ce:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 800e2d2:	1a89      	subs	r1, r1, r2
 800e2d4:	1b98      	subs	r0, r3, r6
 800e2d6:	eba4 070e 	sub.w	r7, r4, lr
 800e2da:	2900      	cmp	r1, #0
 800e2dc:	d162      	bne.n	800e3a4 <__ieee754_fmod+0x188>
 800e2de:	4574      	cmp	r4, lr
 800e2e0:	bf38      	it	cc
 800e2e2:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e2e6:	2800      	cmp	r0, #0
 800e2e8:	bfa4      	itt	ge
 800e2ea:	463c      	movge	r4, r7
 800e2ec:	4603      	movge	r3, r0
 800e2ee:	ea53 0104 	orrs.w	r1, r3, r4
 800e2f2:	d0c6      	beq.n	800e282 <__ieee754_fmod+0x66>
 800e2f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2f8:	db69      	blt.n	800e3ce <__ieee754_fmod+0x1b2>
 800e2fa:	494d      	ldr	r1, [pc, #308]	; (800e430 <__ieee754_fmod+0x214>)
 800e2fc:	428a      	cmp	r2, r1
 800e2fe:	db6c      	blt.n	800e3da <__ieee754_fmod+0x1be>
 800e300:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e304:	432b      	orrs	r3, r5
 800e306:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 800e30a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e30e:	4620      	mov	r0, r4
 800e310:	e7a7      	b.n	800e262 <__ieee754_fmod+0x46>
 800e312:	3901      	subs	r1, #1
 800e314:	005b      	lsls	r3, r3, #1
 800e316:	e7c3      	b.n	800e2a0 <__ieee754_fmod+0x84>
 800e318:	4945      	ldr	r1, [pc, #276]	; (800e430 <__ieee754_fmod+0x214>)
 800e31a:	ea4f 23c8 	mov.w	r3, r8, lsl #11
 800e31e:	2b00      	cmp	r3, #0
 800e320:	ddc0      	ble.n	800e2a4 <__ieee754_fmod+0x88>
 800e322:	3901      	subs	r1, #1
 800e324:	005b      	lsls	r3, r3, #1
 800e326:	e7fa      	b.n	800e31e <__ieee754_fmod+0x102>
 800e328:	ea4f 5128 	mov.w	r1, r8, asr #20
 800e32c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800e330:	e7b8      	b.n	800e2a4 <__ieee754_fmod+0x88>
 800e332:	3a01      	subs	r2, #1
 800e334:	005b      	lsls	r3, r3, #1
 800e336:	e7bc      	b.n	800e2b2 <__ieee754_fmod+0x96>
 800e338:	4a3d      	ldr	r2, [pc, #244]	; (800e430 <__ieee754_fmod+0x214>)
 800e33a:	ea4f 23cc 	mov.w	r3, ip, lsl #11
 800e33e:	2b00      	cmp	r3, #0
 800e340:	ddb9      	ble.n	800e2b6 <__ieee754_fmod+0x9a>
 800e342:	3a01      	subs	r2, #1
 800e344:	005b      	lsls	r3, r3, #1
 800e346:	e7fa      	b.n	800e33e <__ieee754_fmod+0x122>
 800e348:	ea4f 522c 	mov.w	r2, ip, asr #20
 800e34c:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800e350:	e7b1      	b.n	800e2b6 <__ieee754_fmod+0x9a>
 800e352:	1a40      	subs	r0, r0, r1
 800e354:	281f      	cmp	r0, #31
 800e356:	dc0a      	bgt.n	800e36e <__ieee754_fmod+0x152>
 800e358:	f201 431e 	addw	r3, r1, #1054	; 0x41e
 800e35c:	fa08 f800 	lsl.w	r8, r8, r0
 800e360:	fa2a f303 	lsr.w	r3, sl, r3
 800e364:	ea43 0308 	orr.w	r3, r3, r8
 800e368:	fa0a f400 	lsl.w	r4, sl, r0
 800e36c:	e7aa      	b.n	800e2c4 <__ieee754_fmod+0xa8>
 800e36e:	4b31      	ldr	r3, [pc, #196]	; (800e434 <__ieee754_fmod+0x218>)
 800e370:	1a5b      	subs	r3, r3, r1
 800e372:	fa0a f303 	lsl.w	r3, sl, r3
 800e376:	2400      	movs	r4, #0
 800e378:	e7a4      	b.n	800e2c4 <__ieee754_fmod+0xa8>
 800e37a:	1a80      	subs	r0, r0, r2
 800e37c:	281f      	cmp	r0, #31
 800e37e:	dc0a      	bgt.n	800e396 <__ieee754_fmod+0x17a>
 800e380:	f202 461e 	addw	r6, r2, #1054	; 0x41e
 800e384:	fa0c fc00 	lsl.w	ip, ip, r0
 800e388:	fa27 f606 	lsr.w	r6, r7, r6
 800e38c:	ea46 060c 	orr.w	r6, r6, ip
 800e390:	fa07 fe00 	lsl.w	lr, r7, r0
 800e394:	e79d      	b.n	800e2d2 <__ieee754_fmod+0xb6>
 800e396:	4e27      	ldr	r6, [pc, #156]	; (800e434 <__ieee754_fmod+0x218>)
 800e398:	1ab6      	subs	r6, r6, r2
 800e39a:	fa07 f606 	lsl.w	r6, r7, r6
 800e39e:	f04f 0e00 	mov.w	lr, #0
 800e3a2:	e796      	b.n	800e2d2 <__ieee754_fmod+0xb6>
 800e3a4:	4574      	cmp	r4, lr
 800e3a6:	bf38      	it	cc
 800e3a8:	f100 30ff 	addcc.w	r0, r0, #4294967295
 800e3ac:	2800      	cmp	r0, #0
 800e3ae:	da05      	bge.n	800e3bc <__ieee754_fmod+0x1a0>
 800e3b0:	0fe0      	lsrs	r0, r4, #31
 800e3b2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800e3b6:	0064      	lsls	r4, r4, #1
 800e3b8:	3901      	subs	r1, #1
 800e3ba:	e78b      	b.n	800e2d4 <__ieee754_fmod+0xb8>
 800e3bc:	ea50 0307 	orrs.w	r3, r0, r7
 800e3c0:	f43f af5f 	beq.w	800e282 <__ieee754_fmod+0x66>
 800e3c4:	0ffb      	lsrs	r3, r7, #31
 800e3c6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800e3ca:	007c      	lsls	r4, r7, #1
 800e3cc:	e7f4      	b.n	800e3b8 <__ieee754_fmod+0x19c>
 800e3ce:	0fe1      	lsrs	r1, r4, #31
 800e3d0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e3d4:	0064      	lsls	r4, r4, #1
 800e3d6:	3a01      	subs	r2, #1
 800e3d8:	e78c      	b.n	800e2f4 <__ieee754_fmod+0xd8>
 800e3da:	1a89      	subs	r1, r1, r2
 800e3dc:	2914      	cmp	r1, #20
 800e3de:	dc0a      	bgt.n	800e3f6 <__ieee754_fmod+0x1da>
 800e3e0:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800e3e4:	fa03 f202 	lsl.w	r2, r3, r2
 800e3e8:	40cc      	lsrs	r4, r1
 800e3ea:	4322      	orrs	r2, r4
 800e3ec:	410b      	asrs	r3, r1
 800e3ee:	ea43 0105 	orr.w	r1, r3, r5
 800e3f2:	4610      	mov	r0, r2
 800e3f4:	e735      	b.n	800e262 <__ieee754_fmod+0x46>
 800e3f6:	291f      	cmp	r1, #31
 800e3f8:	dc07      	bgt.n	800e40a <__ieee754_fmod+0x1ee>
 800e3fa:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800e3fe:	40cc      	lsrs	r4, r1
 800e400:	fa03 f202 	lsl.w	r2, r3, r2
 800e404:	4322      	orrs	r2, r4
 800e406:	462b      	mov	r3, r5
 800e408:	e7f1      	b.n	800e3ee <__ieee754_fmod+0x1d2>
 800e40a:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800e40e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e412:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 800e416:	32e2      	adds	r2, #226	; 0xe2
 800e418:	fa43 f202 	asr.w	r2, r3, r2
 800e41c:	e7f3      	b.n	800e406 <__ieee754_fmod+0x1ea>
 800e41e:	bf00      	nop
 800e420:	7fefffff 	.word	0x7fefffff
 800e424:	7ff00000 	.word	0x7ff00000
 800e428:	08011740 	.word	0x08011740
 800e42c:	fffffbed 	.word	0xfffffbed
 800e430:	fffffc02 	.word	0xfffffc02
 800e434:	fffffbe2 	.word	0xfffffbe2

0800e438 <__ieee754_pow>:
 800e438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e43c:	ed2d 8b06 	vpush	{d8-d10}
 800e440:	b089      	sub	sp, #36	; 0x24
 800e442:	ed8d 1b00 	vstr	d1, [sp]
 800e446:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e44a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e44e:	ea58 0102 	orrs.w	r1, r8, r2
 800e452:	ec57 6b10 	vmov	r6, r7, d0
 800e456:	d115      	bne.n	800e484 <__ieee754_pow+0x4c>
 800e458:	19b3      	adds	r3, r6, r6
 800e45a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e45e:	4152      	adcs	r2, r2
 800e460:	4299      	cmp	r1, r3
 800e462:	4b89      	ldr	r3, [pc, #548]	; (800e688 <__ieee754_pow+0x250>)
 800e464:	4193      	sbcs	r3, r2
 800e466:	f080 84d1 	bcs.w	800ee0c <__ieee754_pow+0x9d4>
 800e46a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e46e:	4630      	mov	r0, r6
 800e470:	4639      	mov	r1, r7
 800e472:	f7f1 ff0b 	bl	800028c <__adddf3>
 800e476:	ec41 0b10 	vmov	d0, r0, r1
 800e47a:	b009      	add	sp, #36	; 0x24
 800e47c:	ecbd 8b06 	vpop	{d8-d10}
 800e480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e484:	4b81      	ldr	r3, [pc, #516]	; (800e68c <__ieee754_pow+0x254>)
 800e486:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800e48a:	429c      	cmp	r4, r3
 800e48c:	ee10 aa10 	vmov	sl, s0
 800e490:	463d      	mov	r5, r7
 800e492:	dc06      	bgt.n	800e4a2 <__ieee754_pow+0x6a>
 800e494:	d101      	bne.n	800e49a <__ieee754_pow+0x62>
 800e496:	2e00      	cmp	r6, #0
 800e498:	d1e7      	bne.n	800e46a <__ieee754_pow+0x32>
 800e49a:	4598      	cmp	r8, r3
 800e49c:	dc01      	bgt.n	800e4a2 <__ieee754_pow+0x6a>
 800e49e:	d10f      	bne.n	800e4c0 <__ieee754_pow+0x88>
 800e4a0:	b172      	cbz	r2, 800e4c0 <__ieee754_pow+0x88>
 800e4a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800e4a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800e4aa:	ea55 050a 	orrs.w	r5, r5, sl
 800e4ae:	d1dc      	bne.n	800e46a <__ieee754_pow+0x32>
 800e4b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e4b4:	18db      	adds	r3, r3, r3
 800e4b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800e4ba:	4152      	adcs	r2, r2
 800e4bc:	429d      	cmp	r5, r3
 800e4be:	e7d0      	b.n	800e462 <__ieee754_pow+0x2a>
 800e4c0:	2d00      	cmp	r5, #0
 800e4c2:	da3b      	bge.n	800e53c <__ieee754_pow+0x104>
 800e4c4:	4b72      	ldr	r3, [pc, #456]	; (800e690 <__ieee754_pow+0x258>)
 800e4c6:	4598      	cmp	r8, r3
 800e4c8:	dc51      	bgt.n	800e56e <__ieee754_pow+0x136>
 800e4ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800e4ce:	4598      	cmp	r8, r3
 800e4d0:	f340 84ab 	ble.w	800ee2a <__ieee754_pow+0x9f2>
 800e4d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800e4d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e4dc:	2b14      	cmp	r3, #20
 800e4de:	dd0f      	ble.n	800e500 <__ieee754_pow+0xc8>
 800e4e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800e4e4:	fa22 f103 	lsr.w	r1, r2, r3
 800e4e8:	fa01 f303 	lsl.w	r3, r1, r3
 800e4ec:	4293      	cmp	r3, r2
 800e4ee:	f040 849c 	bne.w	800ee2a <__ieee754_pow+0x9f2>
 800e4f2:	f001 0101 	and.w	r1, r1, #1
 800e4f6:	f1c1 0302 	rsb	r3, r1, #2
 800e4fa:	9304      	str	r3, [sp, #16]
 800e4fc:	b182      	cbz	r2, 800e520 <__ieee754_pow+0xe8>
 800e4fe:	e05f      	b.n	800e5c0 <__ieee754_pow+0x188>
 800e500:	2a00      	cmp	r2, #0
 800e502:	d15b      	bne.n	800e5bc <__ieee754_pow+0x184>
 800e504:	f1c3 0314 	rsb	r3, r3, #20
 800e508:	fa48 f103 	asr.w	r1, r8, r3
 800e50c:	fa01 f303 	lsl.w	r3, r1, r3
 800e510:	4543      	cmp	r3, r8
 800e512:	f040 8487 	bne.w	800ee24 <__ieee754_pow+0x9ec>
 800e516:	f001 0101 	and.w	r1, r1, #1
 800e51a:	f1c1 0302 	rsb	r3, r1, #2
 800e51e:	9304      	str	r3, [sp, #16]
 800e520:	4b5c      	ldr	r3, [pc, #368]	; (800e694 <__ieee754_pow+0x25c>)
 800e522:	4598      	cmp	r8, r3
 800e524:	d132      	bne.n	800e58c <__ieee754_pow+0x154>
 800e526:	f1b9 0f00 	cmp.w	r9, #0
 800e52a:	f280 8477 	bge.w	800ee1c <__ieee754_pow+0x9e4>
 800e52e:	4959      	ldr	r1, [pc, #356]	; (800e694 <__ieee754_pow+0x25c>)
 800e530:	4632      	mov	r2, r6
 800e532:	463b      	mov	r3, r7
 800e534:	2000      	movs	r0, #0
 800e536:	f7f2 f989 	bl	800084c <__aeabi_ddiv>
 800e53a:	e79c      	b.n	800e476 <__ieee754_pow+0x3e>
 800e53c:	2300      	movs	r3, #0
 800e53e:	9304      	str	r3, [sp, #16]
 800e540:	2a00      	cmp	r2, #0
 800e542:	d13d      	bne.n	800e5c0 <__ieee754_pow+0x188>
 800e544:	4b51      	ldr	r3, [pc, #324]	; (800e68c <__ieee754_pow+0x254>)
 800e546:	4598      	cmp	r8, r3
 800e548:	d1ea      	bne.n	800e520 <__ieee754_pow+0xe8>
 800e54a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800e54e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800e552:	ea53 030a 	orrs.w	r3, r3, sl
 800e556:	f000 8459 	beq.w	800ee0c <__ieee754_pow+0x9d4>
 800e55a:	4b4f      	ldr	r3, [pc, #316]	; (800e698 <__ieee754_pow+0x260>)
 800e55c:	429c      	cmp	r4, r3
 800e55e:	dd08      	ble.n	800e572 <__ieee754_pow+0x13a>
 800e560:	f1b9 0f00 	cmp.w	r9, #0
 800e564:	f2c0 8456 	blt.w	800ee14 <__ieee754_pow+0x9dc>
 800e568:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e56c:	e783      	b.n	800e476 <__ieee754_pow+0x3e>
 800e56e:	2302      	movs	r3, #2
 800e570:	e7e5      	b.n	800e53e <__ieee754_pow+0x106>
 800e572:	f1b9 0f00 	cmp.w	r9, #0
 800e576:	f04f 0000 	mov.w	r0, #0
 800e57a:	f04f 0100 	mov.w	r1, #0
 800e57e:	f6bf af7a 	bge.w	800e476 <__ieee754_pow+0x3e>
 800e582:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e586:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e58a:	e774      	b.n	800e476 <__ieee754_pow+0x3e>
 800e58c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800e590:	d106      	bne.n	800e5a0 <__ieee754_pow+0x168>
 800e592:	4632      	mov	r2, r6
 800e594:	463b      	mov	r3, r7
 800e596:	4630      	mov	r0, r6
 800e598:	4639      	mov	r1, r7
 800e59a:	f7f2 f82d 	bl	80005f8 <__aeabi_dmul>
 800e59e:	e76a      	b.n	800e476 <__ieee754_pow+0x3e>
 800e5a0:	4b3e      	ldr	r3, [pc, #248]	; (800e69c <__ieee754_pow+0x264>)
 800e5a2:	4599      	cmp	r9, r3
 800e5a4:	d10c      	bne.n	800e5c0 <__ieee754_pow+0x188>
 800e5a6:	2d00      	cmp	r5, #0
 800e5a8:	db0a      	blt.n	800e5c0 <__ieee754_pow+0x188>
 800e5aa:	ec47 6b10 	vmov	d0, r6, r7
 800e5ae:	b009      	add	sp, #36	; 0x24
 800e5b0:	ecbd 8b06 	vpop	{d8-d10}
 800e5b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5b8:	f000 bd20 	b.w	800effc <__ieee754_sqrt>
 800e5bc:	2300      	movs	r3, #0
 800e5be:	9304      	str	r3, [sp, #16]
 800e5c0:	ec47 6b10 	vmov	d0, r6, r7
 800e5c4:	f000 fc62 	bl	800ee8c <fabs>
 800e5c8:	ec51 0b10 	vmov	r0, r1, d0
 800e5cc:	f1ba 0f00 	cmp.w	sl, #0
 800e5d0:	d129      	bne.n	800e626 <__ieee754_pow+0x1ee>
 800e5d2:	b124      	cbz	r4, 800e5de <__ieee754_pow+0x1a6>
 800e5d4:	4b2f      	ldr	r3, [pc, #188]	; (800e694 <__ieee754_pow+0x25c>)
 800e5d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800e5da:	429a      	cmp	r2, r3
 800e5dc:	d123      	bne.n	800e626 <__ieee754_pow+0x1ee>
 800e5de:	f1b9 0f00 	cmp.w	r9, #0
 800e5e2:	da05      	bge.n	800e5f0 <__ieee754_pow+0x1b8>
 800e5e4:	4602      	mov	r2, r0
 800e5e6:	460b      	mov	r3, r1
 800e5e8:	2000      	movs	r0, #0
 800e5ea:	492a      	ldr	r1, [pc, #168]	; (800e694 <__ieee754_pow+0x25c>)
 800e5ec:	f7f2 f92e 	bl	800084c <__aeabi_ddiv>
 800e5f0:	2d00      	cmp	r5, #0
 800e5f2:	f6bf af40 	bge.w	800e476 <__ieee754_pow+0x3e>
 800e5f6:	9b04      	ldr	r3, [sp, #16]
 800e5f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800e5fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800e600:	431c      	orrs	r4, r3
 800e602:	d108      	bne.n	800e616 <__ieee754_pow+0x1de>
 800e604:	4602      	mov	r2, r0
 800e606:	460b      	mov	r3, r1
 800e608:	4610      	mov	r0, r2
 800e60a:	4619      	mov	r1, r3
 800e60c:	f7f1 fe3c 	bl	8000288 <__aeabi_dsub>
 800e610:	4602      	mov	r2, r0
 800e612:	460b      	mov	r3, r1
 800e614:	e78f      	b.n	800e536 <__ieee754_pow+0xfe>
 800e616:	9b04      	ldr	r3, [sp, #16]
 800e618:	2b01      	cmp	r3, #1
 800e61a:	f47f af2c 	bne.w	800e476 <__ieee754_pow+0x3e>
 800e61e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e622:	4619      	mov	r1, r3
 800e624:	e727      	b.n	800e476 <__ieee754_pow+0x3e>
 800e626:	0feb      	lsrs	r3, r5, #31
 800e628:	3b01      	subs	r3, #1
 800e62a:	9306      	str	r3, [sp, #24]
 800e62c:	9a06      	ldr	r2, [sp, #24]
 800e62e:	9b04      	ldr	r3, [sp, #16]
 800e630:	4313      	orrs	r3, r2
 800e632:	d102      	bne.n	800e63a <__ieee754_pow+0x202>
 800e634:	4632      	mov	r2, r6
 800e636:	463b      	mov	r3, r7
 800e638:	e7e6      	b.n	800e608 <__ieee754_pow+0x1d0>
 800e63a:	4b19      	ldr	r3, [pc, #100]	; (800e6a0 <__ieee754_pow+0x268>)
 800e63c:	4598      	cmp	r8, r3
 800e63e:	f340 80fb 	ble.w	800e838 <__ieee754_pow+0x400>
 800e642:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800e646:	4598      	cmp	r8, r3
 800e648:	4b13      	ldr	r3, [pc, #76]	; (800e698 <__ieee754_pow+0x260>)
 800e64a:	dd0c      	ble.n	800e666 <__ieee754_pow+0x22e>
 800e64c:	429c      	cmp	r4, r3
 800e64e:	dc0f      	bgt.n	800e670 <__ieee754_pow+0x238>
 800e650:	f1b9 0f00 	cmp.w	r9, #0
 800e654:	da0f      	bge.n	800e676 <__ieee754_pow+0x23e>
 800e656:	2000      	movs	r0, #0
 800e658:	b009      	add	sp, #36	; 0x24
 800e65a:	ecbd 8b06 	vpop	{d8-d10}
 800e65e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e662:	f000 bcc2 	b.w	800efea <__math_oflow>
 800e666:	429c      	cmp	r4, r3
 800e668:	dbf2      	blt.n	800e650 <__ieee754_pow+0x218>
 800e66a:	4b0a      	ldr	r3, [pc, #40]	; (800e694 <__ieee754_pow+0x25c>)
 800e66c:	429c      	cmp	r4, r3
 800e66e:	dd19      	ble.n	800e6a4 <__ieee754_pow+0x26c>
 800e670:	f1b9 0f00 	cmp.w	r9, #0
 800e674:	dcef      	bgt.n	800e656 <__ieee754_pow+0x21e>
 800e676:	2000      	movs	r0, #0
 800e678:	b009      	add	sp, #36	; 0x24
 800e67a:	ecbd 8b06 	vpop	{d8-d10}
 800e67e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e682:	f000 bca9 	b.w	800efd8 <__math_uflow>
 800e686:	bf00      	nop
 800e688:	fff00000 	.word	0xfff00000
 800e68c:	7ff00000 	.word	0x7ff00000
 800e690:	433fffff 	.word	0x433fffff
 800e694:	3ff00000 	.word	0x3ff00000
 800e698:	3fefffff 	.word	0x3fefffff
 800e69c:	3fe00000 	.word	0x3fe00000
 800e6a0:	41e00000 	.word	0x41e00000
 800e6a4:	4b60      	ldr	r3, [pc, #384]	; (800e828 <__ieee754_pow+0x3f0>)
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	f7f1 fdee 	bl	8000288 <__aeabi_dsub>
 800e6ac:	a354      	add	r3, pc, #336	; (adr r3, 800e800 <__ieee754_pow+0x3c8>)
 800e6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6b2:	4604      	mov	r4, r0
 800e6b4:	460d      	mov	r5, r1
 800e6b6:	f7f1 ff9f 	bl	80005f8 <__aeabi_dmul>
 800e6ba:	a353      	add	r3, pc, #332	; (adr r3, 800e808 <__ieee754_pow+0x3d0>)
 800e6bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c0:	4606      	mov	r6, r0
 800e6c2:	460f      	mov	r7, r1
 800e6c4:	4620      	mov	r0, r4
 800e6c6:	4629      	mov	r1, r5
 800e6c8:	f7f1 ff96 	bl	80005f8 <__aeabi_dmul>
 800e6cc:	4b57      	ldr	r3, [pc, #348]	; (800e82c <__ieee754_pow+0x3f4>)
 800e6ce:	4682      	mov	sl, r0
 800e6d0:	468b      	mov	fp, r1
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	4629      	mov	r1, r5
 800e6d8:	f7f1 ff8e 	bl	80005f8 <__aeabi_dmul>
 800e6dc:	4602      	mov	r2, r0
 800e6de:	460b      	mov	r3, r1
 800e6e0:	a14b      	add	r1, pc, #300	; (adr r1, 800e810 <__ieee754_pow+0x3d8>)
 800e6e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6e6:	f7f1 fdcf 	bl	8000288 <__aeabi_dsub>
 800e6ea:	4622      	mov	r2, r4
 800e6ec:	462b      	mov	r3, r5
 800e6ee:	f7f1 ff83 	bl	80005f8 <__aeabi_dmul>
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	460b      	mov	r3, r1
 800e6f6:	2000      	movs	r0, #0
 800e6f8:	494d      	ldr	r1, [pc, #308]	; (800e830 <__ieee754_pow+0x3f8>)
 800e6fa:	f7f1 fdc5 	bl	8000288 <__aeabi_dsub>
 800e6fe:	4622      	mov	r2, r4
 800e700:	4680      	mov	r8, r0
 800e702:	4689      	mov	r9, r1
 800e704:	462b      	mov	r3, r5
 800e706:	4620      	mov	r0, r4
 800e708:	4629      	mov	r1, r5
 800e70a:	f7f1 ff75 	bl	80005f8 <__aeabi_dmul>
 800e70e:	4602      	mov	r2, r0
 800e710:	460b      	mov	r3, r1
 800e712:	4640      	mov	r0, r8
 800e714:	4649      	mov	r1, r9
 800e716:	f7f1 ff6f 	bl	80005f8 <__aeabi_dmul>
 800e71a:	a33f      	add	r3, pc, #252	; (adr r3, 800e818 <__ieee754_pow+0x3e0>)
 800e71c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e720:	f7f1 ff6a 	bl	80005f8 <__aeabi_dmul>
 800e724:	4602      	mov	r2, r0
 800e726:	460b      	mov	r3, r1
 800e728:	4650      	mov	r0, sl
 800e72a:	4659      	mov	r1, fp
 800e72c:	f7f1 fdac 	bl	8000288 <__aeabi_dsub>
 800e730:	4602      	mov	r2, r0
 800e732:	460b      	mov	r3, r1
 800e734:	4680      	mov	r8, r0
 800e736:	4689      	mov	r9, r1
 800e738:	4630      	mov	r0, r6
 800e73a:	4639      	mov	r1, r7
 800e73c:	f7f1 fda6 	bl	800028c <__adddf3>
 800e740:	2000      	movs	r0, #0
 800e742:	4632      	mov	r2, r6
 800e744:	463b      	mov	r3, r7
 800e746:	4604      	mov	r4, r0
 800e748:	460d      	mov	r5, r1
 800e74a:	f7f1 fd9d 	bl	8000288 <__aeabi_dsub>
 800e74e:	4602      	mov	r2, r0
 800e750:	460b      	mov	r3, r1
 800e752:	4640      	mov	r0, r8
 800e754:	4649      	mov	r1, r9
 800e756:	f7f1 fd97 	bl	8000288 <__aeabi_dsub>
 800e75a:	9b04      	ldr	r3, [sp, #16]
 800e75c:	9a06      	ldr	r2, [sp, #24]
 800e75e:	3b01      	subs	r3, #1
 800e760:	4313      	orrs	r3, r2
 800e762:	4682      	mov	sl, r0
 800e764:	468b      	mov	fp, r1
 800e766:	f040 81e7 	bne.w	800eb38 <__ieee754_pow+0x700>
 800e76a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800e820 <__ieee754_pow+0x3e8>
 800e76e:	eeb0 8a47 	vmov.f32	s16, s14
 800e772:	eef0 8a67 	vmov.f32	s17, s15
 800e776:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e77a:	2600      	movs	r6, #0
 800e77c:	4632      	mov	r2, r6
 800e77e:	463b      	mov	r3, r7
 800e780:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e784:	f7f1 fd80 	bl	8000288 <__aeabi_dsub>
 800e788:	4622      	mov	r2, r4
 800e78a:	462b      	mov	r3, r5
 800e78c:	f7f1 ff34 	bl	80005f8 <__aeabi_dmul>
 800e790:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e794:	4680      	mov	r8, r0
 800e796:	4689      	mov	r9, r1
 800e798:	4650      	mov	r0, sl
 800e79a:	4659      	mov	r1, fp
 800e79c:	f7f1 ff2c 	bl	80005f8 <__aeabi_dmul>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	460b      	mov	r3, r1
 800e7a4:	4640      	mov	r0, r8
 800e7a6:	4649      	mov	r1, r9
 800e7a8:	f7f1 fd70 	bl	800028c <__adddf3>
 800e7ac:	4632      	mov	r2, r6
 800e7ae:	463b      	mov	r3, r7
 800e7b0:	4680      	mov	r8, r0
 800e7b2:	4689      	mov	r9, r1
 800e7b4:	4620      	mov	r0, r4
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	f7f1 ff1e 	bl	80005f8 <__aeabi_dmul>
 800e7bc:	460b      	mov	r3, r1
 800e7be:	4604      	mov	r4, r0
 800e7c0:	460d      	mov	r5, r1
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	4649      	mov	r1, r9
 800e7c6:	4640      	mov	r0, r8
 800e7c8:	f7f1 fd60 	bl	800028c <__adddf3>
 800e7cc:	4b19      	ldr	r3, [pc, #100]	; (800e834 <__ieee754_pow+0x3fc>)
 800e7ce:	4299      	cmp	r1, r3
 800e7d0:	ec45 4b19 	vmov	d9, r4, r5
 800e7d4:	4606      	mov	r6, r0
 800e7d6:	460f      	mov	r7, r1
 800e7d8:	468b      	mov	fp, r1
 800e7da:	f340 82f0 	ble.w	800edbe <__ieee754_pow+0x986>
 800e7de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800e7e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800e7e6:	4303      	orrs	r3, r0
 800e7e8:	f000 81e4 	beq.w	800ebb4 <__ieee754_pow+0x77c>
 800e7ec:	ec51 0b18 	vmov	r0, r1, d8
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f7f2 f972 	bl	8000adc <__aeabi_dcmplt>
 800e7f8:	3800      	subs	r0, #0
 800e7fa:	bf18      	it	ne
 800e7fc:	2001      	movne	r0, #1
 800e7fe:	e72b      	b.n	800e658 <__ieee754_pow+0x220>
 800e800:	60000000 	.word	0x60000000
 800e804:	3ff71547 	.word	0x3ff71547
 800e808:	f85ddf44 	.word	0xf85ddf44
 800e80c:	3e54ae0b 	.word	0x3e54ae0b
 800e810:	55555555 	.word	0x55555555
 800e814:	3fd55555 	.word	0x3fd55555
 800e818:	652b82fe 	.word	0x652b82fe
 800e81c:	3ff71547 	.word	0x3ff71547
 800e820:	00000000 	.word	0x00000000
 800e824:	bff00000 	.word	0xbff00000
 800e828:	3ff00000 	.word	0x3ff00000
 800e82c:	3fd00000 	.word	0x3fd00000
 800e830:	3fe00000 	.word	0x3fe00000
 800e834:	408fffff 	.word	0x408fffff
 800e838:	4bd5      	ldr	r3, [pc, #852]	; (800eb90 <__ieee754_pow+0x758>)
 800e83a:	402b      	ands	r3, r5
 800e83c:	2200      	movs	r2, #0
 800e83e:	b92b      	cbnz	r3, 800e84c <__ieee754_pow+0x414>
 800e840:	4bd4      	ldr	r3, [pc, #848]	; (800eb94 <__ieee754_pow+0x75c>)
 800e842:	f7f1 fed9 	bl	80005f8 <__aeabi_dmul>
 800e846:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800e84a:	460c      	mov	r4, r1
 800e84c:	1523      	asrs	r3, r4, #20
 800e84e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e852:	4413      	add	r3, r2
 800e854:	9305      	str	r3, [sp, #20]
 800e856:	4bd0      	ldr	r3, [pc, #832]	; (800eb98 <__ieee754_pow+0x760>)
 800e858:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800e85c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800e860:	429c      	cmp	r4, r3
 800e862:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800e866:	dd08      	ble.n	800e87a <__ieee754_pow+0x442>
 800e868:	4bcc      	ldr	r3, [pc, #816]	; (800eb9c <__ieee754_pow+0x764>)
 800e86a:	429c      	cmp	r4, r3
 800e86c:	f340 8162 	ble.w	800eb34 <__ieee754_pow+0x6fc>
 800e870:	9b05      	ldr	r3, [sp, #20]
 800e872:	3301      	adds	r3, #1
 800e874:	9305      	str	r3, [sp, #20]
 800e876:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800e87a:	2400      	movs	r4, #0
 800e87c:	00e3      	lsls	r3, r4, #3
 800e87e:	9307      	str	r3, [sp, #28]
 800e880:	4bc7      	ldr	r3, [pc, #796]	; (800eba0 <__ieee754_pow+0x768>)
 800e882:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e886:	ed93 7b00 	vldr	d7, [r3]
 800e88a:	4629      	mov	r1, r5
 800e88c:	ec53 2b17 	vmov	r2, r3, d7
 800e890:	eeb0 9a47 	vmov.f32	s18, s14
 800e894:	eef0 9a67 	vmov.f32	s19, s15
 800e898:	4682      	mov	sl, r0
 800e89a:	f7f1 fcf5 	bl	8000288 <__aeabi_dsub>
 800e89e:	4652      	mov	r2, sl
 800e8a0:	4606      	mov	r6, r0
 800e8a2:	460f      	mov	r7, r1
 800e8a4:	462b      	mov	r3, r5
 800e8a6:	ec51 0b19 	vmov	r0, r1, d9
 800e8aa:	f7f1 fcef 	bl	800028c <__adddf3>
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	460b      	mov	r3, r1
 800e8b2:	2000      	movs	r0, #0
 800e8b4:	49bb      	ldr	r1, [pc, #748]	; (800eba4 <__ieee754_pow+0x76c>)
 800e8b6:	f7f1 ffc9 	bl	800084c <__aeabi_ddiv>
 800e8ba:	ec41 0b1a 	vmov	d10, r0, r1
 800e8be:	4602      	mov	r2, r0
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	4630      	mov	r0, r6
 800e8c4:	4639      	mov	r1, r7
 800e8c6:	f7f1 fe97 	bl	80005f8 <__aeabi_dmul>
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e8d0:	9302      	str	r3, [sp, #8]
 800e8d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800e8d6:	46ab      	mov	fp, r5
 800e8d8:	106d      	asrs	r5, r5, #1
 800e8da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800e8de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800e8e2:	ec41 0b18 	vmov	d8, r0, r1
 800e8e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800e8ea:	2200      	movs	r2, #0
 800e8ec:	4640      	mov	r0, r8
 800e8ee:	4649      	mov	r1, r9
 800e8f0:	4614      	mov	r4, r2
 800e8f2:	461d      	mov	r5, r3
 800e8f4:	f7f1 fe80 	bl	80005f8 <__aeabi_dmul>
 800e8f8:	4602      	mov	r2, r0
 800e8fa:	460b      	mov	r3, r1
 800e8fc:	4630      	mov	r0, r6
 800e8fe:	4639      	mov	r1, r7
 800e900:	f7f1 fcc2 	bl	8000288 <__aeabi_dsub>
 800e904:	ec53 2b19 	vmov	r2, r3, d9
 800e908:	4606      	mov	r6, r0
 800e90a:	460f      	mov	r7, r1
 800e90c:	4620      	mov	r0, r4
 800e90e:	4629      	mov	r1, r5
 800e910:	f7f1 fcba 	bl	8000288 <__aeabi_dsub>
 800e914:	4602      	mov	r2, r0
 800e916:	460b      	mov	r3, r1
 800e918:	4650      	mov	r0, sl
 800e91a:	4659      	mov	r1, fp
 800e91c:	f7f1 fcb4 	bl	8000288 <__aeabi_dsub>
 800e920:	4642      	mov	r2, r8
 800e922:	464b      	mov	r3, r9
 800e924:	f7f1 fe68 	bl	80005f8 <__aeabi_dmul>
 800e928:	4602      	mov	r2, r0
 800e92a:	460b      	mov	r3, r1
 800e92c:	4630      	mov	r0, r6
 800e92e:	4639      	mov	r1, r7
 800e930:	f7f1 fcaa 	bl	8000288 <__aeabi_dsub>
 800e934:	ec53 2b1a 	vmov	r2, r3, d10
 800e938:	f7f1 fe5e 	bl	80005f8 <__aeabi_dmul>
 800e93c:	ec53 2b18 	vmov	r2, r3, d8
 800e940:	ec41 0b19 	vmov	d9, r0, r1
 800e944:	ec51 0b18 	vmov	r0, r1, d8
 800e948:	f7f1 fe56 	bl	80005f8 <__aeabi_dmul>
 800e94c:	a37c      	add	r3, pc, #496	; (adr r3, 800eb40 <__ieee754_pow+0x708>)
 800e94e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e952:	4604      	mov	r4, r0
 800e954:	460d      	mov	r5, r1
 800e956:	f7f1 fe4f 	bl	80005f8 <__aeabi_dmul>
 800e95a:	a37b      	add	r3, pc, #492	; (adr r3, 800eb48 <__ieee754_pow+0x710>)
 800e95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e960:	f7f1 fc94 	bl	800028c <__adddf3>
 800e964:	4622      	mov	r2, r4
 800e966:	462b      	mov	r3, r5
 800e968:	f7f1 fe46 	bl	80005f8 <__aeabi_dmul>
 800e96c:	a378      	add	r3, pc, #480	; (adr r3, 800eb50 <__ieee754_pow+0x718>)
 800e96e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e972:	f7f1 fc8b 	bl	800028c <__adddf3>
 800e976:	4622      	mov	r2, r4
 800e978:	462b      	mov	r3, r5
 800e97a:	f7f1 fe3d 	bl	80005f8 <__aeabi_dmul>
 800e97e:	a376      	add	r3, pc, #472	; (adr r3, 800eb58 <__ieee754_pow+0x720>)
 800e980:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e984:	f7f1 fc82 	bl	800028c <__adddf3>
 800e988:	4622      	mov	r2, r4
 800e98a:	462b      	mov	r3, r5
 800e98c:	f7f1 fe34 	bl	80005f8 <__aeabi_dmul>
 800e990:	a373      	add	r3, pc, #460	; (adr r3, 800eb60 <__ieee754_pow+0x728>)
 800e992:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e996:	f7f1 fc79 	bl	800028c <__adddf3>
 800e99a:	4622      	mov	r2, r4
 800e99c:	462b      	mov	r3, r5
 800e99e:	f7f1 fe2b 	bl	80005f8 <__aeabi_dmul>
 800e9a2:	a371      	add	r3, pc, #452	; (adr r3, 800eb68 <__ieee754_pow+0x730>)
 800e9a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a8:	f7f1 fc70 	bl	800028c <__adddf3>
 800e9ac:	4622      	mov	r2, r4
 800e9ae:	4606      	mov	r6, r0
 800e9b0:	460f      	mov	r7, r1
 800e9b2:	462b      	mov	r3, r5
 800e9b4:	4620      	mov	r0, r4
 800e9b6:	4629      	mov	r1, r5
 800e9b8:	f7f1 fe1e 	bl	80005f8 <__aeabi_dmul>
 800e9bc:	4602      	mov	r2, r0
 800e9be:	460b      	mov	r3, r1
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	4639      	mov	r1, r7
 800e9c4:	f7f1 fe18 	bl	80005f8 <__aeabi_dmul>
 800e9c8:	4642      	mov	r2, r8
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	460d      	mov	r5, r1
 800e9ce:	464b      	mov	r3, r9
 800e9d0:	ec51 0b18 	vmov	r0, r1, d8
 800e9d4:	f7f1 fc5a 	bl	800028c <__adddf3>
 800e9d8:	ec53 2b19 	vmov	r2, r3, d9
 800e9dc:	f7f1 fe0c 	bl	80005f8 <__aeabi_dmul>
 800e9e0:	4622      	mov	r2, r4
 800e9e2:	462b      	mov	r3, r5
 800e9e4:	f7f1 fc52 	bl	800028c <__adddf3>
 800e9e8:	4642      	mov	r2, r8
 800e9ea:	4682      	mov	sl, r0
 800e9ec:	468b      	mov	fp, r1
 800e9ee:	464b      	mov	r3, r9
 800e9f0:	4640      	mov	r0, r8
 800e9f2:	4649      	mov	r1, r9
 800e9f4:	f7f1 fe00 	bl	80005f8 <__aeabi_dmul>
 800e9f8:	4b6b      	ldr	r3, [pc, #428]	; (800eba8 <__ieee754_pow+0x770>)
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	4606      	mov	r6, r0
 800e9fe:	460f      	mov	r7, r1
 800ea00:	f7f1 fc44 	bl	800028c <__adddf3>
 800ea04:	4652      	mov	r2, sl
 800ea06:	465b      	mov	r3, fp
 800ea08:	f7f1 fc40 	bl	800028c <__adddf3>
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	4604      	mov	r4, r0
 800ea10:	460d      	mov	r5, r1
 800ea12:	4602      	mov	r2, r0
 800ea14:	460b      	mov	r3, r1
 800ea16:	4640      	mov	r0, r8
 800ea18:	4649      	mov	r1, r9
 800ea1a:	f7f1 fded 	bl	80005f8 <__aeabi_dmul>
 800ea1e:	4b62      	ldr	r3, [pc, #392]	; (800eba8 <__ieee754_pow+0x770>)
 800ea20:	4680      	mov	r8, r0
 800ea22:	4689      	mov	r9, r1
 800ea24:	2200      	movs	r2, #0
 800ea26:	4620      	mov	r0, r4
 800ea28:	4629      	mov	r1, r5
 800ea2a:	f7f1 fc2d 	bl	8000288 <__aeabi_dsub>
 800ea2e:	4632      	mov	r2, r6
 800ea30:	463b      	mov	r3, r7
 800ea32:	f7f1 fc29 	bl	8000288 <__aeabi_dsub>
 800ea36:	4602      	mov	r2, r0
 800ea38:	460b      	mov	r3, r1
 800ea3a:	4650      	mov	r0, sl
 800ea3c:	4659      	mov	r1, fp
 800ea3e:	f7f1 fc23 	bl	8000288 <__aeabi_dsub>
 800ea42:	ec53 2b18 	vmov	r2, r3, d8
 800ea46:	f7f1 fdd7 	bl	80005f8 <__aeabi_dmul>
 800ea4a:	4622      	mov	r2, r4
 800ea4c:	4606      	mov	r6, r0
 800ea4e:	460f      	mov	r7, r1
 800ea50:	462b      	mov	r3, r5
 800ea52:	ec51 0b19 	vmov	r0, r1, d9
 800ea56:	f7f1 fdcf 	bl	80005f8 <__aeabi_dmul>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	4630      	mov	r0, r6
 800ea60:	4639      	mov	r1, r7
 800ea62:	f7f1 fc13 	bl	800028c <__adddf3>
 800ea66:	4606      	mov	r6, r0
 800ea68:	460f      	mov	r7, r1
 800ea6a:	4602      	mov	r2, r0
 800ea6c:	460b      	mov	r3, r1
 800ea6e:	4640      	mov	r0, r8
 800ea70:	4649      	mov	r1, r9
 800ea72:	f7f1 fc0b 	bl	800028c <__adddf3>
 800ea76:	a33e      	add	r3, pc, #248	; (adr r3, 800eb70 <__ieee754_pow+0x738>)
 800ea78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	4604      	mov	r4, r0
 800ea80:	460d      	mov	r5, r1
 800ea82:	f7f1 fdb9 	bl	80005f8 <__aeabi_dmul>
 800ea86:	4642      	mov	r2, r8
 800ea88:	ec41 0b18 	vmov	d8, r0, r1
 800ea8c:	464b      	mov	r3, r9
 800ea8e:	4620      	mov	r0, r4
 800ea90:	4629      	mov	r1, r5
 800ea92:	f7f1 fbf9 	bl	8000288 <__aeabi_dsub>
 800ea96:	4602      	mov	r2, r0
 800ea98:	460b      	mov	r3, r1
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	4639      	mov	r1, r7
 800ea9e:	f7f1 fbf3 	bl	8000288 <__aeabi_dsub>
 800eaa2:	a335      	add	r3, pc, #212	; (adr r3, 800eb78 <__ieee754_pow+0x740>)
 800eaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eaa8:	f7f1 fda6 	bl	80005f8 <__aeabi_dmul>
 800eaac:	a334      	add	r3, pc, #208	; (adr r3, 800eb80 <__ieee754_pow+0x748>)
 800eaae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eab2:	4606      	mov	r6, r0
 800eab4:	460f      	mov	r7, r1
 800eab6:	4620      	mov	r0, r4
 800eab8:	4629      	mov	r1, r5
 800eaba:	f7f1 fd9d 	bl	80005f8 <__aeabi_dmul>
 800eabe:	4602      	mov	r2, r0
 800eac0:	460b      	mov	r3, r1
 800eac2:	4630      	mov	r0, r6
 800eac4:	4639      	mov	r1, r7
 800eac6:	f7f1 fbe1 	bl	800028c <__adddf3>
 800eaca:	9a07      	ldr	r2, [sp, #28]
 800eacc:	4b37      	ldr	r3, [pc, #220]	; (800ebac <__ieee754_pow+0x774>)
 800eace:	4413      	add	r3, r2
 800ead0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead4:	f7f1 fbda 	bl	800028c <__adddf3>
 800ead8:	4682      	mov	sl, r0
 800eada:	9805      	ldr	r0, [sp, #20]
 800eadc:	468b      	mov	fp, r1
 800eade:	f7f1 fd21 	bl	8000524 <__aeabi_i2d>
 800eae2:	9a07      	ldr	r2, [sp, #28]
 800eae4:	4b32      	ldr	r3, [pc, #200]	; (800ebb0 <__ieee754_pow+0x778>)
 800eae6:	4413      	add	r3, r2
 800eae8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eaec:	4606      	mov	r6, r0
 800eaee:	460f      	mov	r7, r1
 800eaf0:	4652      	mov	r2, sl
 800eaf2:	465b      	mov	r3, fp
 800eaf4:	ec51 0b18 	vmov	r0, r1, d8
 800eaf8:	f7f1 fbc8 	bl	800028c <__adddf3>
 800eafc:	4642      	mov	r2, r8
 800eafe:	464b      	mov	r3, r9
 800eb00:	f7f1 fbc4 	bl	800028c <__adddf3>
 800eb04:	4632      	mov	r2, r6
 800eb06:	463b      	mov	r3, r7
 800eb08:	f7f1 fbc0 	bl	800028c <__adddf3>
 800eb0c:	2000      	movs	r0, #0
 800eb0e:	4632      	mov	r2, r6
 800eb10:	463b      	mov	r3, r7
 800eb12:	4604      	mov	r4, r0
 800eb14:	460d      	mov	r5, r1
 800eb16:	f7f1 fbb7 	bl	8000288 <__aeabi_dsub>
 800eb1a:	4642      	mov	r2, r8
 800eb1c:	464b      	mov	r3, r9
 800eb1e:	f7f1 fbb3 	bl	8000288 <__aeabi_dsub>
 800eb22:	ec53 2b18 	vmov	r2, r3, d8
 800eb26:	f7f1 fbaf 	bl	8000288 <__aeabi_dsub>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	4650      	mov	r0, sl
 800eb30:	4659      	mov	r1, fp
 800eb32:	e610      	b.n	800e756 <__ieee754_pow+0x31e>
 800eb34:	2401      	movs	r4, #1
 800eb36:	e6a1      	b.n	800e87c <__ieee754_pow+0x444>
 800eb38:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800eb88 <__ieee754_pow+0x750>
 800eb3c:	e617      	b.n	800e76e <__ieee754_pow+0x336>
 800eb3e:	bf00      	nop
 800eb40:	4a454eef 	.word	0x4a454eef
 800eb44:	3fca7e28 	.word	0x3fca7e28
 800eb48:	93c9db65 	.word	0x93c9db65
 800eb4c:	3fcd864a 	.word	0x3fcd864a
 800eb50:	a91d4101 	.word	0xa91d4101
 800eb54:	3fd17460 	.word	0x3fd17460
 800eb58:	518f264d 	.word	0x518f264d
 800eb5c:	3fd55555 	.word	0x3fd55555
 800eb60:	db6fabff 	.word	0xdb6fabff
 800eb64:	3fdb6db6 	.word	0x3fdb6db6
 800eb68:	33333303 	.word	0x33333303
 800eb6c:	3fe33333 	.word	0x3fe33333
 800eb70:	e0000000 	.word	0xe0000000
 800eb74:	3feec709 	.word	0x3feec709
 800eb78:	dc3a03fd 	.word	0xdc3a03fd
 800eb7c:	3feec709 	.word	0x3feec709
 800eb80:	145b01f5 	.word	0x145b01f5
 800eb84:	be3e2fe0 	.word	0xbe3e2fe0
 800eb88:	00000000 	.word	0x00000000
 800eb8c:	3ff00000 	.word	0x3ff00000
 800eb90:	7ff00000 	.word	0x7ff00000
 800eb94:	43400000 	.word	0x43400000
 800eb98:	0003988e 	.word	0x0003988e
 800eb9c:	000bb679 	.word	0x000bb679
 800eba0:	08011750 	.word	0x08011750
 800eba4:	3ff00000 	.word	0x3ff00000
 800eba8:	40080000 	.word	0x40080000
 800ebac:	08011770 	.word	0x08011770
 800ebb0:	08011760 	.word	0x08011760
 800ebb4:	a3b3      	add	r3, pc, #716	; (adr r3, 800ee84 <__ieee754_pow+0xa4c>)
 800ebb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebba:	4640      	mov	r0, r8
 800ebbc:	4649      	mov	r1, r9
 800ebbe:	f7f1 fb65 	bl	800028c <__adddf3>
 800ebc2:	4622      	mov	r2, r4
 800ebc4:	ec41 0b1a 	vmov	d10, r0, r1
 800ebc8:	462b      	mov	r3, r5
 800ebca:	4630      	mov	r0, r6
 800ebcc:	4639      	mov	r1, r7
 800ebce:	f7f1 fb5b 	bl	8000288 <__aeabi_dsub>
 800ebd2:	4602      	mov	r2, r0
 800ebd4:	460b      	mov	r3, r1
 800ebd6:	ec51 0b1a 	vmov	r0, r1, d10
 800ebda:	f7f1 ff9d 	bl	8000b18 <__aeabi_dcmpgt>
 800ebde:	2800      	cmp	r0, #0
 800ebe0:	f47f ae04 	bne.w	800e7ec <__ieee754_pow+0x3b4>
 800ebe4:	4aa2      	ldr	r2, [pc, #648]	; (800ee70 <__ieee754_pow+0xa38>)
 800ebe6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ebea:	4293      	cmp	r3, r2
 800ebec:	f340 8107 	ble.w	800edfe <__ieee754_pow+0x9c6>
 800ebf0:	151b      	asrs	r3, r3, #20
 800ebf2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ebf6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ebfa:	fa4a fa03 	asr.w	sl, sl, r3
 800ebfe:	44da      	add	sl, fp
 800ec00:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ec04:	489b      	ldr	r0, [pc, #620]	; (800ee74 <__ieee754_pow+0xa3c>)
 800ec06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800ec0a:	4108      	asrs	r0, r1
 800ec0c:	ea00 030a 	and.w	r3, r0, sl
 800ec10:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ec14:	f1c1 0114 	rsb	r1, r1, #20
 800ec18:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ec1c:	fa4a fa01 	asr.w	sl, sl, r1
 800ec20:	f1bb 0f00 	cmp.w	fp, #0
 800ec24:	f04f 0200 	mov.w	r2, #0
 800ec28:	4620      	mov	r0, r4
 800ec2a:	4629      	mov	r1, r5
 800ec2c:	bfb8      	it	lt
 800ec2e:	f1ca 0a00 	rsblt	sl, sl, #0
 800ec32:	f7f1 fb29 	bl	8000288 <__aeabi_dsub>
 800ec36:	ec41 0b19 	vmov	d9, r0, r1
 800ec3a:	4642      	mov	r2, r8
 800ec3c:	464b      	mov	r3, r9
 800ec3e:	ec51 0b19 	vmov	r0, r1, d9
 800ec42:	f7f1 fb23 	bl	800028c <__adddf3>
 800ec46:	a37a      	add	r3, pc, #488	; (adr r3, 800ee30 <__ieee754_pow+0x9f8>)
 800ec48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec4c:	2000      	movs	r0, #0
 800ec4e:	4604      	mov	r4, r0
 800ec50:	460d      	mov	r5, r1
 800ec52:	f7f1 fcd1 	bl	80005f8 <__aeabi_dmul>
 800ec56:	ec53 2b19 	vmov	r2, r3, d9
 800ec5a:	4606      	mov	r6, r0
 800ec5c:	460f      	mov	r7, r1
 800ec5e:	4620      	mov	r0, r4
 800ec60:	4629      	mov	r1, r5
 800ec62:	f7f1 fb11 	bl	8000288 <__aeabi_dsub>
 800ec66:	4602      	mov	r2, r0
 800ec68:	460b      	mov	r3, r1
 800ec6a:	4640      	mov	r0, r8
 800ec6c:	4649      	mov	r1, r9
 800ec6e:	f7f1 fb0b 	bl	8000288 <__aeabi_dsub>
 800ec72:	a371      	add	r3, pc, #452	; (adr r3, 800ee38 <__ieee754_pow+0xa00>)
 800ec74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec78:	f7f1 fcbe 	bl	80005f8 <__aeabi_dmul>
 800ec7c:	a370      	add	r3, pc, #448	; (adr r3, 800ee40 <__ieee754_pow+0xa08>)
 800ec7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec82:	4680      	mov	r8, r0
 800ec84:	4689      	mov	r9, r1
 800ec86:	4620      	mov	r0, r4
 800ec88:	4629      	mov	r1, r5
 800ec8a:	f7f1 fcb5 	bl	80005f8 <__aeabi_dmul>
 800ec8e:	4602      	mov	r2, r0
 800ec90:	460b      	mov	r3, r1
 800ec92:	4640      	mov	r0, r8
 800ec94:	4649      	mov	r1, r9
 800ec96:	f7f1 faf9 	bl	800028c <__adddf3>
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	460d      	mov	r5, r1
 800ec9e:	4602      	mov	r2, r0
 800eca0:	460b      	mov	r3, r1
 800eca2:	4630      	mov	r0, r6
 800eca4:	4639      	mov	r1, r7
 800eca6:	f7f1 faf1 	bl	800028c <__adddf3>
 800ecaa:	4632      	mov	r2, r6
 800ecac:	463b      	mov	r3, r7
 800ecae:	4680      	mov	r8, r0
 800ecb0:	4689      	mov	r9, r1
 800ecb2:	f7f1 fae9 	bl	8000288 <__aeabi_dsub>
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	460b      	mov	r3, r1
 800ecba:	4620      	mov	r0, r4
 800ecbc:	4629      	mov	r1, r5
 800ecbe:	f7f1 fae3 	bl	8000288 <__aeabi_dsub>
 800ecc2:	4642      	mov	r2, r8
 800ecc4:	4606      	mov	r6, r0
 800ecc6:	460f      	mov	r7, r1
 800ecc8:	464b      	mov	r3, r9
 800ecca:	4640      	mov	r0, r8
 800eccc:	4649      	mov	r1, r9
 800ecce:	f7f1 fc93 	bl	80005f8 <__aeabi_dmul>
 800ecd2:	a35d      	add	r3, pc, #372	; (adr r3, 800ee48 <__ieee754_pow+0xa10>)
 800ecd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd8:	4604      	mov	r4, r0
 800ecda:	460d      	mov	r5, r1
 800ecdc:	f7f1 fc8c 	bl	80005f8 <__aeabi_dmul>
 800ece0:	a35b      	add	r3, pc, #364	; (adr r3, 800ee50 <__ieee754_pow+0xa18>)
 800ece2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece6:	f7f1 facf 	bl	8000288 <__aeabi_dsub>
 800ecea:	4622      	mov	r2, r4
 800ecec:	462b      	mov	r3, r5
 800ecee:	f7f1 fc83 	bl	80005f8 <__aeabi_dmul>
 800ecf2:	a359      	add	r3, pc, #356	; (adr r3, 800ee58 <__ieee754_pow+0xa20>)
 800ecf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf8:	f7f1 fac8 	bl	800028c <__adddf3>
 800ecfc:	4622      	mov	r2, r4
 800ecfe:	462b      	mov	r3, r5
 800ed00:	f7f1 fc7a 	bl	80005f8 <__aeabi_dmul>
 800ed04:	a356      	add	r3, pc, #344	; (adr r3, 800ee60 <__ieee754_pow+0xa28>)
 800ed06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed0a:	f7f1 fabd 	bl	8000288 <__aeabi_dsub>
 800ed0e:	4622      	mov	r2, r4
 800ed10:	462b      	mov	r3, r5
 800ed12:	f7f1 fc71 	bl	80005f8 <__aeabi_dmul>
 800ed16:	a354      	add	r3, pc, #336	; (adr r3, 800ee68 <__ieee754_pow+0xa30>)
 800ed18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed1c:	f7f1 fab6 	bl	800028c <__adddf3>
 800ed20:	4622      	mov	r2, r4
 800ed22:	462b      	mov	r3, r5
 800ed24:	f7f1 fc68 	bl	80005f8 <__aeabi_dmul>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4640      	mov	r0, r8
 800ed2e:	4649      	mov	r1, r9
 800ed30:	f7f1 faaa 	bl	8000288 <__aeabi_dsub>
 800ed34:	4604      	mov	r4, r0
 800ed36:	460d      	mov	r5, r1
 800ed38:	4602      	mov	r2, r0
 800ed3a:	460b      	mov	r3, r1
 800ed3c:	4640      	mov	r0, r8
 800ed3e:	4649      	mov	r1, r9
 800ed40:	f7f1 fc5a 	bl	80005f8 <__aeabi_dmul>
 800ed44:	2200      	movs	r2, #0
 800ed46:	ec41 0b19 	vmov	d9, r0, r1
 800ed4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed4e:	4620      	mov	r0, r4
 800ed50:	4629      	mov	r1, r5
 800ed52:	f7f1 fa99 	bl	8000288 <__aeabi_dsub>
 800ed56:	4602      	mov	r2, r0
 800ed58:	460b      	mov	r3, r1
 800ed5a:	ec51 0b19 	vmov	r0, r1, d9
 800ed5e:	f7f1 fd75 	bl	800084c <__aeabi_ddiv>
 800ed62:	4632      	mov	r2, r6
 800ed64:	4604      	mov	r4, r0
 800ed66:	460d      	mov	r5, r1
 800ed68:	463b      	mov	r3, r7
 800ed6a:	4640      	mov	r0, r8
 800ed6c:	4649      	mov	r1, r9
 800ed6e:	f7f1 fc43 	bl	80005f8 <__aeabi_dmul>
 800ed72:	4632      	mov	r2, r6
 800ed74:	463b      	mov	r3, r7
 800ed76:	f7f1 fa89 	bl	800028c <__adddf3>
 800ed7a:	4602      	mov	r2, r0
 800ed7c:	460b      	mov	r3, r1
 800ed7e:	4620      	mov	r0, r4
 800ed80:	4629      	mov	r1, r5
 800ed82:	f7f1 fa81 	bl	8000288 <__aeabi_dsub>
 800ed86:	4642      	mov	r2, r8
 800ed88:	464b      	mov	r3, r9
 800ed8a:	f7f1 fa7d 	bl	8000288 <__aeabi_dsub>
 800ed8e:	460b      	mov	r3, r1
 800ed90:	4602      	mov	r2, r0
 800ed92:	4939      	ldr	r1, [pc, #228]	; (800ee78 <__ieee754_pow+0xa40>)
 800ed94:	2000      	movs	r0, #0
 800ed96:	f7f1 fa77 	bl	8000288 <__aeabi_dsub>
 800ed9a:	ec41 0b10 	vmov	d0, r0, r1
 800ed9e:	ee10 3a90 	vmov	r3, s1
 800eda2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800eda6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edaa:	da2b      	bge.n	800ee04 <__ieee754_pow+0x9cc>
 800edac:	4650      	mov	r0, sl
 800edae:	f000 f877 	bl	800eea0 <scalbn>
 800edb2:	ec51 0b10 	vmov	r0, r1, d0
 800edb6:	ec53 2b18 	vmov	r2, r3, d8
 800edba:	f7ff bbee 	b.w	800e59a <__ieee754_pow+0x162>
 800edbe:	4b2f      	ldr	r3, [pc, #188]	; (800ee7c <__ieee754_pow+0xa44>)
 800edc0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800edc4:	429e      	cmp	r6, r3
 800edc6:	f77f af0d 	ble.w	800ebe4 <__ieee754_pow+0x7ac>
 800edca:	4b2d      	ldr	r3, [pc, #180]	; (800ee80 <__ieee754_pow+0xa48>)
 800edcc:	440b      	add	r3, r1
 800edce:	4303      	orrs	r3, r0
 800edd0:	d009      	beq.n	800ede6 <__ieee754_pow+0x9ae>
 800edd2:	ec51 0b18 	vmov	r0, r1, d8
 800edd6:	2200      	movs	r2, #0
 800edd8:	2300      	movs	r3, #0
 800edda:	f7f1 fe7f 	bl	8000adc <__aeabi_dcmplt>
 800edde:	3800      	subs	r0, #0
 800ede0:	bf18      	it	ne
 800ede2:	2001      	movne	r0, #1
 800ede4:	e448      	b.n	800e678 <__ieee754_pow+0x240>
 800ede6:	4622      	mov	r2, r4
 800ede8:	462b      	mov	r3, r5
 800edea:	f7f1 fa4d 	bl	8000288 <__aeabi_dsub>
 800edee:	4642      	mov	r2, r8
 800edf0:	464b      	mov	r3, r9
 800edf2:	f7f1 fe87 	bl	8000b04 <__aeabi_dcmpge>
 800edf6:	2800      	cmp	r0, #0
 800edf8:	f43f aef4 	beq.w	800ebe4 <__ieee754_pow+0x7ac>
 800edfc:	e7e9      	b.n	800edd2 <__ieee754_pow+0x99a>
 800edfe:	f04f 0a00 	mov.w	sl, #0
 800ee02:	e71a      	b.n	800ec3a <__ieee754_pow+0x802>
 800ee04:	ec51 0b10 	vmov	r0, r1, d0
 800ee08:	4619      	mov	r1, r3
 800ee0a:	e7d4      	b.n	800edb6 <__ieee754_pow+0x97e>
 800ee0c:	491a      	ldr	r1, [pc, #104]	; (800ee78 <__ieee754_pow+0xa40>)
 800ee0e:	2000      	movs	r0, #0
 800ee10:	f7ff bb31 	b.w	800e476 <__ieee754_pow+0x3e>
 800ee14:	2000      	movs	r0, #0
 800ee16:	2100      	movs	r1, #0
 800ee18:	f7ff bb2d 	b.w	800e476 <__ieee754_pow+0x3e>
 800ee1c:	4630      	mov	r0, r6
 800ee1e:	4639      	mov	r1, r7
 800ee20:	f7ff bb29 	b.w	800e476 <__ieee754_pow+0x3e>
 800ee24:	9204      	str	r2, [sp, #16]
 800ee26:	f7ff bb7b 	b.w	800e520 <__ieee754_pow+0xe8>
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	f7ff bb65 	b.w	800e4fa <__ieee754_pow+0xc2>
 800ee30:	00000000 	.word	0x00000000
 800ee34:	3fe62e43 	.word	0x3fe62e43
 800ee38:	fefa39ef 	.word	0xfefa39ef
 800ee3c:	3fe62e42 	.word	0x3fe62e42
 800ee40:	0ca86c39 	.word	0x0ca86c39
 800ee44:	be205c61 	.word	0xbe205c61
 800ee48:	72bea4d0 	.word	0x72bea4d0
 800ee4c:	3e663769 	.word	0x3e663769
 800ee50:	c5d26bf1 	.word	0xc5d26bf1
 800ee54:	3ebbbd41 	.word	0x3ebbbd41
 800ee58:	af25de2c 	.word	0xaf25de2c
 800ee5c:	3f11566a 	.word	0x3f11566a
 800ee60:	16bebd93 	.word	0x16bebd93
 800ee64:	3f66c16c 	.word	0x3f66c16c
 800ee68:	5555553e 	.word	0x5555553e
 800ee6c:	3fc55555 	.word	0x3fc55555
 800ee70:	3fe00000 	.word	0x3fe00000
 800ee74:	fff00000 	.word	0xfff00000
 800ee78:	3ff00000 	.word	0x3ff00000
 800ee7c:	4090cbff 	.word	0x4090cbff
 800ee80:	3f6f3400 	.word	0x3f6f3400
 800ee84:	652b82fe 	.word	0x652b82fe
 800ee88:	3c971547 	.word	0x3c971547

0800ee8c <fabs>:
 800ee8c:	ec51 0b10 	vmov	r0, r1, d0
 800ee90:	ee10 2a10 	vmov	r2, s0
 800ee94:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ee98:	ec43 2b10 	vmov	d0, r2, r3
 800ee9c:	4770      	bx	lr
	...

0800eea0 <scalbn>:
 800eea0:	b570      	push	{r4, r5, r6, lr}
 800eea2:	ec55 4b10 	vmov	r4, r5, d0
 800eea6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800eeaa:	4606      	mov	r6, r0
 800eeac:	462b      	mov	r3, r5
 800eeae:	b999      	cbnz	r1, 800eed8 <scalbn+0x38>
 800eeb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800eeb4:	4323      	orrs	r3, r4
 800eeb6:	d03f      	beq.n	800ef38 <scalbn+0x98>
 800eeb8:	4b35      	ldr	r3, [pc, #212]	; (800ef90 <scalbn+0xf0>)
 800eeba:	4629      	mov	r1, r5
 800eebc:	ee10 0a10 	vmov	r0, s0
 800eec0:	2200      	movs	r2, #0
 800eec2:	f7f1 fb99 	bl	80005f8 <__aeabi_dmul>
 800eec6:	4b33      	ldr	r3, [pc, #204]	; (800ef94 <scalbn+0xf4>)
 800eec8:	429e      	cmp	r6, r3
 800eeca:	4604      	mov	r4, r0
 800eecc:	460d      	mov	r5, r1
 800eece:	da10      	bge.n	800eef2 <scalbn+0x52>
 800eed0:	a327      	add	r3, pc, #156	; (adr r3, 800ef70 <scalbn+0xd0>)
 800eed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eed6:	e01f      	b.n	800ef18 <scalbn+0x78>
 800eed8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800eedc:	4291      	cmp	r1, r2
 800eede:	d10c      	bne.n	800eefa <scalbn+0x5a>
 800eee0:	ee10 2a10 	vmov	r2, s0
 800eee4:	4620      	mov	r0, r4
 800eee6:	4629      	mov	r1, r5
 800eee8:	f7f1 f9d0 	bl	800028c <__adddf3>
 800eeec:	4604      	mov	r4, r0
 800eeee:	460d      	mov	r5, r1
 800eef0:	e022      	b.n	800ef38 <scalbn+0x98>
 800eef2:	460b      	mov	r3, r1
 800eef4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800eef8:	3936      	subs	r1, #54	; 0x36
 800eefa:	f24c 3250 	movw	r2, #50000	; 0xc350
 800eefe:	4296      	cmp	r6, r2
 800ef00:	dd0d      	ble.n	800ef1e <scalbn+0x7e>
 800ef02:	2d00      	cmp	r5, #0
 800ef04:	a11c      	add	r1, pc, #112	; (adr r1, 800ef78 <scalbn+0xd8>)
 800ef06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef0a:	da02      	bge.n	800ef12 <scalbn+0x72>
 800ef0c:	a11c      	add	r1, pc, #112	; (adr r1, 800ef80 <scalbn+0xe0>)
 800ef0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef12:	a319      	add	r3, pc, #100	; (adr r3, 800ef78 <scalbn+0xd8>)
 800ef14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef18:	f7f1 fb6e 	bl	80005f8 <__aeabi_dmul>
 800ef1c:	e7e6      	b.n	800eeec <scalbn+0x4c>
 800ef1e:	1872      	adds	r2, r6, r1
 800ef20:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ef24:	428a      	cmp	r2, r1
 800ef26:	dcec      	bgt.n	800ef02 <scalbn+0x62>
 800ef28:	2a00      	cmp	r2, #0
 800ef2a:	dd08      	ble.n	800ef3e <scalbn+0x9e>
 800ef2c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef30:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef34:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ef38:	ec45 4b10 	vmov	d0, r4, r5
 800ef3c:	bd70      	pop	{r4, r5, r6, pc}
 800ef3e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ef42:	da08      	bge.n	800ef56 <scalbn+0xb6>
 800ef44:	2d00      	cmp	r5, #0
 800ef46:	a10a      	add	r1, pc, #40	; (adr r1, 800ef70 <scalbn+0xd0>)
 800ef48:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef4c:	dac0      	bge.n	800eed0 <scalbn+0x30>
 800ef4e:	a10e      	add	r1, pc, #56	; (adr r1, 800ef88 <scalbn+0xe8>)
 800ef50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ef54:	e7bc      	b.n	800eed0 <scalbn+0x30>
 800ef56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ef5a:	3236      	adds	r2, #54	; 0x36
 800ef5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ef60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ef64:	4620      	mov	r0, r4
 800ef66:	4b0c      	ldr	r3, [pc, #48]	; (800ef98 <scalbn+0xf8>)
 800ef68:	2200      	movs	r2, #0
 800ef6a:	e7d5      	b.n	800ef18 <scalbn+0x78>
 800ef6c:	f3af 8000 	nop.w
 800ef70:	c2f8f359 	.word	0xc2f8f359
 800ef74:	01a56e1f 	.word	0x01a56e1f
 800ef78:	8800759c 	.word	0x8800759c
 800ef7c:	7e37e43c 	.word	0x7e37e43c
 800ef80:	8800759c 	.word	0x8800759c
 800ef84:	fe37e43c 	.word	0xfe37e43c
 800ef88:	c2f8f359 	.word	0xc2f8f359
 800ef8c:	81a56e1f 	.word	0x81a56e1f
 800ef90:	43500000 	.word	0x43500000
 800ef94:	ffff3cb0 	.word	0xffff3cb0
 800ef98:	3c900000 	.word	0x3c900000

0800ef9c <with_errno>:
 800ef9c:	b570      	push	{r4, r5, r6, lr}
 800ef9e:	4604      	mov	r4, r0
 800efa0:	460d      	mov	r5, r1
 800efa2:	4616      	mov	r6, r2
 800efa4:	f7fc ffa2 	bl	800beec <__errno>
 800efa8:	4629      	mov	r1, r5
 800efaa:	6006      	str	r6, [r0, #0]
 800efac:	4620      	mov	r0, r4
 800efae:	bd70      	pop	{r4, r5, r6, pc}

0800efb0 <xflow>:
 800efb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800efb2:	4614      	mov	r4, r2
 800efb4:	461d      	mov	r5, r3
 800efb6:	b108      	cbz	r0, 800efbc <xflow+0xc>
 800efb8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800efbc:	e9cd 2300 	strd	r2, r3, [sp]
 800efc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800efc4:	4620      	mov	r0, r4
 800efc6:	4629      	mov	r1, r5
 800efc8:	f7f1 fb16 	bl	80005f8 <__aeabi_dmul>
 800efcc:	2222      	movs	r2, #34	; 0x22
 800efce:	b003      	add	sp, #12
 800efd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800efd4:	f7ff bfe2 	b.w	800ef9c <with_errno>

0800efd8 <__math_uflow>:
 800efd8:	b508      	push	{r3, lr}
 800efda:	2200      	movs	r2, #0
 800efdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800efe0:	f7ff ffe6 	bl	800efb0 <xflow>
 800efe4:	ec41 0b10 	vmov	d0, r0, r1
 800efe8:	bd08      	pop	{r3, pc}

0800efea <__math_oflow>:
 800efea:	b508      	push	{r3, lr}
 800efec:	2200      	movs	r2, #0
 800efee:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800eff2:	f7ff ffdd 	bl	800efb0 <xflow>
 800eff6:	ec41 0b10 	vmov	d0, r0, r1
 800effa:	bd08      	pop	{r3, pc}

0800effc <__ieee754_sqrt>:
 800effc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f000:	ec55 4b10 	vmov	r4, r5, d0
 800f004:	4e67      	ldr	r6, [pc, #412]	; (800f1a4 <__ieee754_sqrt+0x1a8>)
 800f006:	43ae      	bics	r6, r5
 800f008:	ee10 0a10 	vmov	r0, s0
 800f00c:	ee10 2a10 	vmov	r2, s0
 800f010:	4629      	mov	r1, r5
 800f012:	462b      	mov	r3, r5
 800f014:	d10d      	bne.n	800f032 <__ieee754_sqrt+0x36>
 800f016:	f7f1 faef 	bl	80005f8 <__aeabi_dmul>
 800f01a:	4602      	mov	r2, r0
 800f01c:	460b      	mov	r3, r1
 800f01e:	4620      	mov	r0, r4
 800f020:	4629      	mov	r1, r5
 800f022:	f7f1 f933 	bl	800028c <__adddf3>
 800f026:	4604      	mov	r4, r0
 800f028:	460d      	mov	r5, r1
 800f02a:	ec45 4b10 	vmov	d0, r4, r5
 800f02e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f032:	2d00      	cmp	r5, #0
 800f034:	dc0b      	bgt.n	800f04e <__ieee754_sqrt+0x52>
 800f036:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f03a:	4326      	orrs	r6, r4
 800f03c:	d0f5      	beq.n	800f02a <__ieee754_sqrt+0x2e>
 800f03e:	b135      	cbz	r5, 800f04e <__ieee754_sqrt+0x52>
 800f040:	f7f1 f922 	bl	8000288 <__aeabi_dsub>
 800f044:	4602      	mov	r2, r0
 800f046:	460b      	mov	r3, r1
 800f048:	f7f1 fc00 	bl	800084c <__aeabi_ddiv>
 800f04c:	e7eb      	b.n	800f026 <__ieee754_sqrt+0x2a>
 800f04e:	1509      	asrs	r1, r1, #20
 800f050:	f000 808d 	beq.w	800f16e <__ieee754_sqrt+0x172>
 800f054:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f058:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800f05c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f060:	07c9      	lsls	r1, r1, #31
 800f062:	bf5c      	itt	pl
 800f064:	005b      	lslpl	r3, r3, #1
 800f066:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800f06a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f06e:	bf58      	it	pl
 800f070:	0052      	lslpl	r2, r2, #1
 800f072:	2500      	movs	r5, #0
 800f074:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f078:	1076      	asrs	r6, r6, #1
 800f07a:	0052      	lsls	r2, r2, #1
 800f07c:	f04f 0e16 	mov.w	lr, #22
 800f080:	46ac      	mov	ip, r5
 800f082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f086:	eb0c 0001 	add.w	r0, ip, r1
 800f08a:	4298      	cmp	r0, r3
 800f08c:	bfde      	ittt	le
 800f08e:	1a1b      	suble	r3, r3, r0
 800f090:	eb00 0c01 	addle.w	ip, r0, r1
 800f094:	186d      	addle	r5, r5, r1
 800f096:	005b      	lsls	r3, r3, #1
 800f098:	f1be 0e01 	subs.w	lr, lr, #1
 800f09c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f0a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f0a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f0a8:	d1ed      	bne.n	800f086 <__ieee754_sqrt+0x8a>
 800f0aa:	4674      	mov	r4, lr
 800f0ac:	2720      	movs	r7, #32
 800f0ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800f0b2:	4563      	cmp	r3, ip
 800f0b4:	eb01 000e 	add.w	r0, r1, lr
 800f0b8:	dc02      	bgt.n	800f0c0 <__ieee754_sqrt+0xc4>
 800f0ba:	d113      	bne.n	800f0e4 <__ieee754_sqrt+0xe8>
 800f0bc:	4290      	cmp	r0, r2
 800f0be:	d811      	bhi.n	800f0e4 <__ieee754_sqrt+0xe8>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	eb00 0e01 	add.w	lr, r0, r1
 800f0c6:	da57      	bge.n	800f178 <__ieee754_sqrt+0x17c>
 800f0c8:	f1be 0f00 	cmp.w	lr, #0
 800f0cc:	db54      	blt.n	800f178 <__ieee754_sqrt+0x17c>
 800f0ce:	f10c 0801 	add.w	r8, ip, #1
 800f0d2:	eba3 030c 	sub.w	r3, r3, ip
 800f0d6:	4290      	cmp	r0, r2
 800f0d8:	bf88      	it	hi
 800f0da:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f0de:	1a12      	subs	r2, r2, r0
 800f0e0:	440c      	add	r4, r1
 800f0e2:	46c4      	mov	ip, r8
 800f0e4:	005b      	lsls	r3, r3, #1
 800f0e6:	3f01      	subs	r7, #1
 800f0e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800f0ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800f0f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800f0f4:	d1dd      	bne.n	800f0b2 <__ieee754_sqrt+0xb6>
 800f0f6:	4313      	orrs	r3, r2
 800f0f8:	d01b      	beq.n	800f132 <__ieee754_sqrt+0x136>
 800f0fa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800f1a8 <__ieee754_sqrt+0x1ac>
 800f0fe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800f1ac <__ieee754_sqrt+0x1b0>
 800f102:	e9da 0100 	ldrd	r0, r1, [sl]
 800f106:	e9db 2300 	ldrd	r2, r3, [fp]
 800f10a:	f7f1 f8bd 	bl	8000288 <__aeabi_dsub>
 800f10e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f112:	4602      	mov	r2, r0
 800f114:	460b      	mov	r3, r1
 800f116:	4640      	mov	r0, r8
 800f118:	4649      	mov	r1, r9
 800f11a:	f7f1 fce9 	bl	8000af0 <__aeabi_dcmple>
 800f11e:	b140      	cbz	r0, 800f132 <__ieee754_sqrt+0x136>
 800f120:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f124:	e9da 0100 	ldrd	r0, r1, [sl]
 800f128:	e9db 2300 	ldrd	r2, r3, [fp]
 800f12c:	d126      	bne.n	800f17c <__ieee754_sqrt+0x180>
 800f12e:	3501      	adds	r5, #1
 800f130:	463c      	mov	r4, r7
 800f132:	106a      	asrs	r2, r5, #1
 800f134:	0863      	lsrs	r3, r4, #1
 800f136:	07e9      	lsls	r1, r5, #31
 800f138:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800f13c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800f140:	bf48      	it	mi
 800f142:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800f146:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800f14a:	461c      	mov	r4, r3
 800f14c:	e76d      	b.n	800f02a <__ieee754_sqrt+0x2e>
 800f14e:	0ad3      	lsrs	r3, r2, #11
 800f150:	3815      	subs	r0, #21
 800f152:	0552      	lsls	r2, r2, #21
 800f154:	2b00      	cmp	r3, #0
 800f156:	d0fa      	beq.n	800f14e <__ieee754_sqrt+0x152>
 800f158:	02dc      	lsls	r4, r3, #11
 800f15a:	d50a      	bpl.n	800f172 <__ieee754_sqrt+0x176>
 800f15c:	f1c1 0420 	rsb	r4, r1, #32
 800f160:	fa22 f404 	lsr.w	r4, r2, r4
 800f164:	1e4d      	subs	r5, r1, #1
 800f166:	408a      	lsls	r2, r1
 800f168:	4323      	orrs	r3, r4
 800f16a:	1b41      	subs	r1, r0, r5
 800f16c:	e772      	b.n	800f054 <__ieee754_sqrt+0x58>
 800f16e:	4608      	mov	r0, r1
 800f170:	e7f0      	b.n	800f154 <__ieee754_sqrt+0x158>
 800f172:	005b      	lsls	r3, r3, #1
 800f174:	3101      	adds	r1, #1
 800f176:	e7ef      	b.n	800f158 <__ieee754_sqrt+0x15c>
 800f178:	46e0      	mov	r8, ip
 800f17a:	e7aa      	b.n	800f0d2 <__ieee754_sqrt+0xd6>
 800f17c:	f7f1 f886 	bl	800028c <__adddf3>
 800f180:	e9da 8900 	ldrd	r8, r9, [sl]
 800f184:	4602      	mov	r2, r0
 800f186:	460b      	mov	r3, r1
 800f188:	4640      	mov	r0, r8
 800f18a:	4649      	mov	r1, r9
 800f18c:	f7f1 fca6 	bl	8000adc <__aeabi_dcmplt>
 800f190:	b120      	cbz	r0, 800f19c <__ieee754_sqrt+0x1a0>
 800f192:	1ca0      	adds	r0, r4, #2
 800f194:	bf08      	it	eq
 800f196:	3501      	addeq	r5, #1
 800f198:	3402      	adds	r4, #2
 800f19a:	e7ca      	b.n	800f132 <__ieee754_sqrt+0x136>
 800f19c:	3401      	adds	r4, #1
 800f19e:	f024 0401 	bic.w	r4, r4, #1
 800f1a2:	e7c6      	b.n	800f132 <__ieee754_sqrt+0x136>
 800f1a4:	7ff00000 	.word	0x7ff00000
 800f1a8:	20000280 	.word	0x20000280
 800f1ac:	20000288 	.word	0x20000288

0800f1b0 <_init>:
 800f1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1b2:	bf00      	nop
 800f1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1b6:	bc08      	pop	{r3}
 800f1b8:	469e      	mov	lr, r3
 800f1ba:	4770      	bx	lr

0800f1bc <_fini>:
 800f1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1be:	bf00      	nop
 800f1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f1c2:	bc08      	pop	{r3}
 800f1c4:	469e      	mov	lr, r3
 800f1c6:	4770      	bx	lr
